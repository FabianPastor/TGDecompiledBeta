package org.telegram.messenger;

import android.app.Activity;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.SharedPreferences;
import android.location.Location;
import android.os.Bundle;
import android.os.SystemClock;
import android.text.TextUtils;
import android.util.Base64;
import android.util.LongSparseArray;
import android.util.SparseArray;
import android.util.SparseBooleanArray;
import android.util.SparseIntArray;
import android.widget.Toast;
import j$.util.Comparator;
import j$.util.concurrent.ConcurrentHashMap;
import j$.util.function.Function;
import j$.util.function.ToDoubleFunction;
import j$.util.function.ToIntFunction;
import j$.util.function.ToLongFunction;
import java.io.File;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CountDownLatch;
import org.telegram.messenger.ChatObject;
import org.telegram.messenger.MessagesController;
import org.telegram.messenger.MessagesStorage;
import org.telegram.messenger.NotificationCenter;
import org.telegram.messenger.support.SparseLongArray;
import org.telegram.tgnet.ConnectionsManager;
import org.telegram.tgnet.NativeByteBuffer;
import org.telegram.tgnet.RequestDelegate;
import org.telegram.tgnet.SerializedData;
import org.telegram.tgnet.TLObject;
import org.telegram.tgnet.TLRPC$ChannelParticipant;
import org.telegram.tgnet.TLRPC$Chat;
import org.telegram.tgnet.TLRPC$ChatFull;
import org.telegram.tgnet.TLRPC$Dialog;
import org.telegram.tgnet.TLRPC$DialogPeer;
import org.telegram.tgnet.TLRPC$Document;
import org.telegram.tgnet.TLRPC$DraftMessage;
import org.telegram.tgnet.TLRPC$EncryptedChat;
import org.telegram.tgnet.TLRPC$ExportedChatInvite;
import org.telegram.tgnet.TLRPC$FileLocation;
import org.telegram.tgnet.TLRPC$InputChannel;
import org.telegram.tgnet.TLRPC$InputDialogPeer;
import org.telegram.tgnet.TLRPC$InputFile;
import org.telegram.tgnet.TLRPC$InputPeer;
import org.telegram.tgnet.TLRPC$InputPhoto;
import org.telegram.tgnet.TLRPC$InputUser;
import org.telegram.tgnet.TLRPC$Message;
import org.telegram.tgnet.TLRPC$MessageAction;
import org.telegram.tgnet.TLRPC$MessageMedia;
import org.telegram.tgnet.TLRPC$Peer;
import org.telegram.tgnet.TLRPC$PeerNotifySettings;
import org.telegram.tgnet.TLRPC$Photo;
import org.telegram.tgnet.TLRPC$PhotoSize;
import org.telegram.tgnet.TLRPC$Poll;
import org.telegram.tgnet.TLRPC$RecentMeUrl;
import org.telegram.tgnet.TLRPC$SendMessageAction;
import org.telegram.tgnet.TLRPC$TL_account_createTheme;
import org.telegram.tgnet.TLRPC$TL_account_getContactSignUpNotification;
import org.telegram.tgnet.TLRPC$TL_account_getNotifySettings;
import org.telegram.tgnet.TLRPC$TL_account_installTheme;
import org.telegram.tgnet.TLRPC$TL_account_installWallPaper;
import org.telegram.tgnet.TLRPC$TL_account_registerDevice;
import org.telegram.tgnet.TLRPC$TL_account_reportPeer;
import org.telegram.tgnet.TLRPC$TL_account_saveTheme;
import org.telegram.tgnet.TLRPC$TL_account_unregisterDevice;
import org.telegram.tgnet.TLRPC$TL_account_updateStatus;
import org.telegram.tgnet.TLRPC$TL_account_updateTheme;
import org.telegram.tgnet.TLRPC$TL_account_uploadTheme;
import org.telegram.tgnet.TLRPC$TL_account_uploadWallPaper;
import org.telegram.tgnet.TLRPC$TL_auth_logOut;
import org.telegram.tgnet.TLRPC$TL_boolFalse;
import org.telegram.tgnet.TLRPC$TL_boolTrue;
import org.telegram.tgnet.TLRPC$TL_botInfo;
import org.telegram.tgnet.TLRPC$TL_channel;
import org.telegram.tgnet.TLRPC$TL_channelForbidden;
import org.telegram.tgnet.TLRPC$TL_channelParticipantSelf;
import org.telegram.tgnet.TLRPC$TL_channelParticipantsAdmins;
import org.telegram.tgnet.TLRPC$TL_channelParticipantsRecent;
import org.telegram.tgnet.TLRPC$TL_channels_channelParticipant;
import org.telegram.tgnet.TLRPC$TL_channels_channelParticipants;
import org.telegram.tgnet.TLRPC$TL_channels_createChannel;
import org.telegram.tgnet.TLRPC$TL_channels_deleteMessages;
import org.telegram.tgnet.TLRPC$TL_channels_deleteUserHistory;
import org.telegram.tgnet.TLRPC$TL_channels_editAdmin;
import org.telegram.tgnet.TLRPC$TL_channels_editBanned;
import org.telegram.tgnet.TLRPC$TL_channels_getChannels;
import org.telegram.tgnet.TLRPC$TL_channels_getParticipant;
import org.telegram.tgnet.TLRPC$TL_channels_getParticipants;
import org.telegram.tgnet.TLRPC$TL_channels_inviteToChannel;
import org.telegram.tgnet.TLRPC$TL_channels_readMessageContents;
import org.telegram.tgnet.TLRPC$TL_channels_togglePreHistoryHidden;
import org.telegram.tgnet.TLRPC$TL_channels_toggleSignatures;
import org.telegram.tgnet.TLRPC$TL_channels_toggleSlowMode;
import org.telegram.tgnet.TLRPC$TL_channels_updateUsername;
import org.telegram.tgnet.TLRPC$TL_chatAdminRights;
import org.telegram.tgnet.TLRPC$TL_chatBannedRights;
import org.telegram.tgnet.TLRPC$TL_chatOnlines;
import org.telegram.tgnet.TLRPC$TL_config;
import org.telegram.tgnet.TLRPC$TL_contacts_block;
import org.telegram.tgnet.TLRPC$TL_contacts_getBlocked;
import org.telegram.tgnet.TLRPC$TL_contacts_resolvedPeer;
import org.telegram.tgnet.TLRPC$TL_contacts_unblock;
import org.telegram.tgnet.TLRPC$TL_dialog;
import org.telegram.tgnet.TLRPC$TL_dialogFilterSuggested;
import org.telegram.tgnet.TLRPC$TL_dialogFolder;
import org.telegram.tgnet.TLRPC$TL_dialogPeer;
import org.telegram.tgnet.TLRPC$TL_documentEmpty;
import org.telegram.tgnet.TLRPC$TL_draftMessage;
import org.telegram.tgnet.TLRPC$TL_encryptedChat;
import org.telegram.tgnet.TLRPC$TL_encryptedChatRequested;
import org.telegram.tgnet.TLRPC$TL_encryptedChatWaiting;
import org.telegram.tgnet.TLRPC$TL_error;
import org.telegram.tgnet.TLRPC$TL_folder;
import org.telegram.tgnet.TLRPC$TL_folderPeer;
import org.telegram.tgnet.TLRPC$TL_help_dismissSuggestion;
import org.telegram.tgnet.TLRPC$TL_help_getAppChangelog;
import org.telegram.tgnet.TLRPC$TL_help_getAppConfig;
import org.telegram.tgnet.TLRPC$TL_help_getPromoData;
import org.telegram.tgnet.TLRPC$TL_help_getRecentMeUrls;
import org.telegram.tgnet.TLRPC$TL_help_getTermsOfServiceUpdate;
import org.telegram.tgnet.TLRPC$TL_help_hidePromoData;
import org.telegram.tgnet.TLRPC$TL_help_promoData;
import org.telegram.tgnet.TLRPC$TL_help_recentMeUrls;
import org.telegram.tgnet.TLRPC$TL_help_termsOfServiceUpdate;
import org.telegram.tgnet.TLRPC$TL_help_termsOfServiceUpdateEmpty;
import org.telegram.tgnet.TLRPC$TL_inputChannel;
import org.telegram.tgnet.TLRPC$TL_inputChannelEmpty;
import org.telegram.tgnet.TLRPC$TL_inputChatPhoto;
import org.telegram.tgnet.TLRPC$TL_inputDialogPeer;
import org.telegram.tgnet.TLRPC$TL_inputDocument;
import org.telegram.tgnet.TLRPC$TL_inputEncryptedChat;
import org.telegram.tgnet.TLRPC$TL_inputFolderPeer;
import org.telegram.tgnet.TLRPC$TL_inputGeoPoint;
import org.telegram.tgnet.TLRPC$TL_inputGroupCall;
import org.telegram.tgnet.TLRPC$TL_inputMessagesFilterChatPhotos;
import org.telegram.tgnet.TLRPC$TL_inputNotifyBroadcasts;
import org.telegram.tgnet.TLRPC$TL_inputNotifyChats;
import org.telegram.tgnet.TLRPC$TL_inputNotifyUsers;
import org.telegram.tgnet.TLRPC$TL_inputPeerChannel;
import org.telegram.tgnet.TLRPC$TL_inputPeerChat;
import org.telegram.tgnet.TLRPC$TL_inputPeerEmpty;
import org.telegram.tgnet.TLRPC$TL_inputPeerSelf;
import org.telegram.tgnet.TLRPC$TL_inputPeerUser;
import org.telegram.tgnet.TLRPC$TL_inputPhotoEmpty;
import org.telegram.tgnet.TLRPC$TL_inputReportReasonGeoIrrelevant;
import org.telegram.tgnet.TLRPC$TL_inputTheme;
import org.telegram.tgnet.TLRPC$TL_inputThemeSettings;
import org.telegram.tgnet.TLRPC$TL_inputUser;
import org.telegram.tgnet.TLRPC$TL_inputUserEmpty;
import org.telegram.tgnet.TLRPC$TL_inputUserSelf;
import org.telegram.tgnet.TLRPC$TL_inputWallPaperNoFile;
import org.telegram.tgnet.TLRPC$TL_inputWallPaperSlug;
import org.telegram.tgnet.TLRPC$TL_messageActionChannelCreate;
import org.telegram.tgnet.TLRPC$TL_messageActionChatAddUser;
import org.telegram.tgnet.TLRPC$TL_messageActionChatDeleteUser;
import org.telegram.tgnet.TLRPC$TL_messageActionChatEditPhoto;
import org.telegram.tgnet.TLRPC$TL_messageActionChatMigrateTo;
import org.telegram.tgnet.TLRPC$TL_messageMediaPoll;
import org.telegram.tgnet.TLRPC$TL_messageMediaWebPage;
import org.telegram.tgnet.TLRPC$TL_messageService;
import org.telegram.tgnet.TLRPC$TL_messageViews;
import org.telegram.tgnet.TLRPC$TL_messages_affectedHistory;
import org.telegram.tgnet.TLRPC$TL_messages_affectedMessages;
import org.telegram.tgnet.TLRPC$TL_messages_chatFull;
import org.telegram.tgnet.TLRPC$TL_messages_chats;
import org.telegram.tgnet.TLRPC$TL_messages_createChat;
import org.telegram.tgnet.TLRPC$TL_messages_deleteMessages;
import org.telegram.tgnet.TLRPC$TL_messages_deleteScheduledMessages;
import org.telegram.tgnet.TLRPC$TL_messages_dialogs;
import org.telegram.tgnet.TLRPC$TL_messages_editChatAbout;
import org.telegram.tgnet.TLRPC$TL_messages_editChatAdmin;
import org.telegram.tgnet.TLRPC$TL_messages_editChatDefaultBannedRights;
import org.telegram.tgnet.TLRPC$TL_messages_getChats;
import org.telegram.tgnet.TLRPC$TL_messages_getDialogFilters;
import org.telegram.tgnet.TLRPC$TL_messages_getDialogUnreadMarks;
import org.telegram.tgnet.TLRPC$TL_messages_getDialogs;
import org.telegram.tgnet.TLRPC$TL_messages_getHistory;
import org.telegram.tgnet.TLRPC$TL_messages_getMessagesViews;
import org.telegram.tgnet.TLRPC$TL_messages_getOnlines;
import org.telegram.tgnet.TLRPC$TL_messages_getPeerDialogs;
import org.telegram.tgnet.TLRPC$TL_messages_getPeerSettings;
import org.telegram.tgnet.TLRPC$TL_messages_getPinnedDialogs;
import org.telegram.tgnet.TLRPC$TL_messages_getReplies;
import org.telegram.tgnet.TLRPC$TL_messages_getScheduledHistory;
import org.telegram.tgnet.TLRPC$TL_messages_getSuggestedDialogFilters;
import org.telegram.tgnet.TLRPC$TL_messages_getUnreadMentions;
import org.telegram.tgnet.TLRPC$TL_messages_getWebPagePreview;
import org.telegram.tgnet.TLRPC$TL_messages_hidePeerSettingsBar;
import org.telegram.tgnet.TLRPC$TL_messages_markDialogUnread;
import org.telegram.tgnet.TLRPC$TL_messages_messageViews;
import org.telegram.tgnet.TLRPC$TL_messages_messages;
import org.telegram.tgnet.TLRPC$TL_messages_messagesNotModified;
import org.telegram.tgnet.TLRPC$TL_messages_migrateChat;
import org.telegram.tgnet.TLRPC$TL_messages_peerDialogs;
import org.telegram.tgnet.TLRPC$TL_messages_readMentions;
import org.telegram.tgnet.TLRPC$TL_messages_readMessageContents;
import org.telegram.tgnet.TLRPC$TL_messages_reorderPinnedDialogs;
import org.telegram.tgnet.TLRPC$TL_messages_reportEncryptedSpam;
import org.telegram.tgnet.TLRPC$TL_messages_reportSpam;
import org.telegram.tgnet.TLRPC$TL_messages_saveGif;
import org.telegram.tgnet.TLRPC$TL_messages_saveRecentSticker;
import org.telegram.tgnet.TLRPC$TL_messages_search;
import org.telegram.tgnet.TLRPC$TL_messages_setEncryptedTyping;
import org.telegram.tgnet.TLRPC$TL_messages_setTyping;
import org.telegram.tgnet.TLRPC$TL_messages_startBot;
import org.telegram.tgnet.TLRPC$TL_messages_toggleDialogPin;
import org.telegram.tgnet.TLRPC$TL_messages_unpinAllMessages;
import org.telegram.tgnet.TLRPC$TL_messages_updatePinnedMessage;
import org.telegram.tgnet.TLRPC$TL_peerChannel;
import org.telegram.tgnet.TLRPC$TL_peerChat;
import org.telegram.tgnet.TLRPC$TL_peerNotifySettings;
import org.telegram.tgnet.TLRPC$TL_peerSettings;
import org.telegram.tgnet.TLRPC$TL_peerUser;
import org.telegram.tgnet.TLRPC$TL_phone_getGroupCall;
import org.telegram.tgnet.TLRPC$TL_phone_groupCall;
import org.telegram.tgnet.TLRPC$TL_photo;
import org.telegram.tgnet.TLRPC$TL_photoEmpty;
import org.telegram.tgnet.TLRPC$TL_photos_deletePhotos;
import org.telegram.tgnet.TLRPC$TL_photos_getUserPhotos;
import org.telegram.tgnet.TLRPC$TL_photos_photo;
import org.telegram.tgnet.TLRPC$TL_photos_photos;
import org.telegram.tgnet.TLRPC$TL_photos_updateProfilePhoto;
import org.telegram.tgnet.TLRPC$TL_photos_uploadProfilePhoto;
import org.telegram.tgnet.TLRPC$TL_replyKeyboardHide;
import org.telegram.tgnet.TLRPC$TL_restrictionReason;
import org.telegram.tgnet.TLRPC$TL_sendMessageCancelAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageGamePlayAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageRecordAudioAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageRecordRoundAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageRecordVideoAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageTypingAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageUploadAudioAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageUploadDocumentAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageUploadPhotoAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageUploadRoundAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageUploadVideoAction;
import org.telegram.tgnet.TLRPC$TL_theme;
import org.telegram.tgnet.TLRPC$TL_updateChannel;
import org.telegram.tgnet.TLRPC$TL_updateChannelAvailableMessages;
import org.telegram.tgnet.TLRPC$TL_updateChannelMessageForwards;
import org.telegram.tgnet.TLRPC$TL_updateChannelMessageViews;
import org.telegram.tgnet.TLRPC$TL_updateChannelReadMessagesContents;
import org.telegram.tgnet.TLRPC$TL_updateChannelTooLong;
import org.telegram.tgnet.TLRPC$TL_updateChannelUserTyping;
import org.telegram.tgnet.TLRPC$TL_updateChannelWebPage;
import org.telegram.tgnet.TLRPC$TL_updateDeleteChannelMessages;
import org.telegram.tgnet.TLRPC$TL_updateDeleteMessages;
import org.telegram.tgnet.TLRPC$TL_updateEditChannelMessage;
import org.telegram.tgnet.TLRPC$TL_updateEditMessage;
import org.telegram.tgnet.TLRPC$TL_updateFolderPeers;
import org.telegram.tgnet.TLRPC$TL_updateLangPack;
import org.telegram.tgnet.TLRPC$TL_updateMessageID;
import org.telegram.tgnet.TLRPC$TL_updateMessagePoll;
import org.telegram.tgnet.TLRPC$TL_updateNewChannelMessage;
import org.telegram.tgnet.TLRPC$TL_updateNewEncryptedMessage;
import org.telegram.tgnet.TLRPC$TL_updateNewMessage;
import org.telegram.tgnet.TLRPC$TL_updatePeerBlocked;
import org.telegram.tgnet.TLRPC$TL_updatePinnedChannelMessages;
import org.telegram.tgnet.TLRPC$TL_updatePinnedMessages;
import org.telegram.tgnet.TLRPC$TL_updateReadChannelDiscussionInbox;
import org.telegram.tgnet.TLRPC$TL_updateReadChannelDiscussionOutbox;
import org.telegram.tgnet.TLRPC$TL_updateReadChannelInbox;
import org.telegram.tgnet.TLRPC$TL_updateReadChannelOutbox;
import org.telegram.tgnet.TLRPC$TL_updateReadHistoryInbox;
import org.telegram.tgnet.TLRPC$TL_updateReadHistoryOutbox;
import org.telegram.tgnet.TLRPC$TL_updateReadMessagesContents;
import org.telegram.tgnet.TLRPC$TL_updateServiceNotification;
import org.telegram.tgnet.TLRPC$TL_updateWebPage;
import org.telegram.tgnet.TLRPC$TL_updatesCombined;
import org.telegram.tgnet.TLRPC$TL_updates_difference;
import org.telegram.tgnet.TLRPC$TL_updates_differenceEmpty;
import org.telegram.tgnet.TLRPC$TL_updates_differenceSlice;
import org.telegram.tgnet.TLRPC$TL_updates_differenceTooLong;
import org.telegram.tgnet.TLRPC$TL_updates_getDifference;
import org.telegram.tgnet.TLRPC$TL_updates_getState;
import org.telegram.tgnet.TLRPC$TL_updates_state;
import org.telegram.tgnet.TLRPC$TL_userForeign_old2;
import org.telegram.tgnet.TLRPC$TL_userProfilePhoto;
import org.telegram.tgnet.TLRPC$TL_userProfilePhotoEmpty;
import org.telegram.tgnet.TLRPC$TL_users_getFullUser;
import org.telegram.tgnet.TLRPC$TL_users_getUsers;
import org.telegram.tgnet.TLRPC$TL_wallPaper;
import org.telegram.tgnet.TLRPC$TL_wallPaperSettings;
import org.telegram.tgnet.TLRPC$TL_webPage;
import org.telegram.tgnet.TLRPC$TL_webPageEmpty;
import org.telegram.tgnet.TLRPC$Update;
import org.telegram.tgnet.TLRPC$Updates;
import org.telegram.tgnet.TLRPC$User;
import org.telegram.tgnet.TLRPC$UserFull;
import org.telegram.tgnet.TLRPC$UserProfilePhoto;
import org.telegram.tgnet.TLRPC$UserStatus;
import org.telegram.tgnet.TLRPC$Vector;
import org.telegram.tgnet.TLRPC$VideoSize;
import org.telegram.tgnet.TLRPC$WallPaperSettings;
import org.telegram.tgnet.TLRPC$WebPage;
import org.telegram.tgnet.TLRPC$contacts_Blocked;
import org.telegram.tgnet.TLRPC$messages_Dialogs;
import org.telegram.tgnet.TLRPC$messages_Messages;
import org.telegram.tgnet.TLRPC$photos_Photos;
import org.telegram.tgnet.TLRPC$updates_ChannelDifference;
import org.telegram.tgnet.TLRPC$updates_Difference;
import org.telegram.ui.ActionBar.AlertDialog;
import org.telegram.ui.ActionBar.BaseFragment;
import org.telegram.ui.ActionBar.Theme;
import org.telegram.ui.ChatActivity;
import org.telegram.ui.Components.AlertsCreator;
import org.telegram.ui.DialogsActivity;
import org.telegram.ui.ProfileActivity;

public class MessagesController extends BaseController implements NotificationCenter.NotificationCenterDelegate {
    public static int DIALOG_FILTER_FLAG_ALL_CHATS = ((((1 | 2) | 4) | 8) | 16);
    public static int DIALOG_FILTER_FLAG_BOTS = 16;
    public static int DIALOG_FILTER_FLAG_CHANNELS = 8;
    public static int DIALOG_FILTER_FLAG_CONTACTS = 1;
    public static int DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED = 128;
    public static int DIALOG_FILTER_FLAG_EXCLUDE_MUTED = 32;
    public static int DIALOG_FILTER_FLAG_EXCLUDE_READ = 64;
    public static int DIALOG_FILTER_FLAG_GROUPS = 4;
    public static int DIALOG_FILTER_FLAG_NON_CONTACTS = 2;
    public static int DIALOG_FILTER_FLAG_ONLY_ARCHIVED = 256;
    private static volatile MessagesController[] Instance = new MessagesController[3];
    public static final int PROMO_TYPE_OTHER = 2;
    public static final int PROMO_TYPE_PROXY = 0;
    public static final int PROMO_TYPE_PSA = 1;
    public static final int UPDATE_MASK_ALL = 1535;
    public static final int UPDATE_MASK_AVATAR = 2;
    public static final int UPDATE_MASK_CHAT = 8192;
    public static final int UPDATE_MASK_CHAT_AVATAR = 8;
    public static final int UPDATE_MASK_CHAT_MEMBERS = 32;
    public static final int UPDATE_MASK_CHAT_NAME = 16;
    public static final int UPDATE_MASK_CHECK = 65536;
    public static final int UPDATE_MASK_MESSAGE_TEXT = 32768;
    public static final int UPDATE_MASK_NAME = 1;
    public static final int UPDATE_MASK_NEW_MESSAGE = 2048;
    public static final int UPDATE_MASK_PHONE = 1024;
    public static final int UPDATE_MASK_READ_DIALOG_MESSAGE = 256;
    public static final int UPDATE_MASK_REORDER = 131072;
    public static final int UPDATE_MASK_SELECT_DIALOG = 512;
    public static final int UPDATE_MASK_SEND_STATE = 4096;
    public static final int UPDATE_MASK_STATUS = 4;
    public static final int UPDATE_MASK_USER_PHONE = 128;
    public static final int UPDATE_MASK_USER_PRINT = 64;
    private static volatile long lastPasswordCheckTime;
    private static volatile long lastThemeCheckTime;
    private int DIALOGS_LOAD_TYPE_CACHE;
    private int DIALOGS_LOAD_TYPE_CHANNEL;
    private int DIALOGS_LOAD_TYPE_UNKNOWN;
    protected ArrayList<TLRPC$Dialog> allDialogs = new ArrayList<>();
    public float animatedEmojisZoom;
    public boolean autoarchiveAvailable;
    public int availableMapProviders;
    public boolean backgroundConnection;
    public SparseIntArray blockePeers;
    public boolean blockedCountry;
    public boolean blockedEndReached;
    public int callConnectTimeout;
    public int callPacketTimeout;
    public int callReceiveTimeout;
    public int callRingTimeout;
    public boolean canRevokePmInbox;
    private SparseArray<SparseArray<String>> channelAdmins;
    private SparseArray<ArrayList<Integer>> channelViewsToSend;
    private SparseIntArray channelsPts;
    private ConcurrentHashMap<Integer, TLRPC$Chat> chats = new ConcurrentHashMap<>(100, 1.0f, 2);
    private SparseBooleanArray checkingLastMessagesDialogs;
    private boolean checkingPromoInfo;
    private int checkingPromoInfoRequestId;
    private boolean checkingTosUpdate;
    private LongSparseArray<TLRPC$Dialog> clearingHistoryDialogs = new LongSparseArray<>();
    private ArrayList<Long> createdDialogIds = new ArrayList<>();
    private ArrayList<Long> createdDialogMainThreadIds = new ArrayList<>();
    private ArrayList<Long> createdScheduledDialogIds = new ArrayList<>();
    private Runnable currentDeleteTaskRunnable;
    private int currentDeletingTaskChannelId;
    private ArrayList<Integer> currentDeletingTaskMids;
    private int currentDeletingTaskTime;
    public String dcDomainName;
    public LongSparseArray<Integer> deletedHistory = new LongSparseArray<>();
    private LongSparseArray<TLRPC$Dialog> deletingDialogs = new LongSparseArray<>();
    private final Comparator<TLRPC$Dialog> dialogComparator;
    private final Comparator<TLRPC$Dialog> dialogDateComparator;
    public ArrayList<DialogFilter> dialogFilters;
    public SparseArray<DialogFilter> dialogFiltersById;
    public boolean dialogFiltersLoaded;
    public LongSparseArray<MessageObject> dialogMessage = new LongSparseArray<>();
    public SparseArray<MessageObject> dialogMessagesByIds = new SparseArray<>();
    public LongSparseArray<MessageObject> dialogMessagesByRandomIds = new LongSparseArray<>();
    private SparseArray<ArrayList<TLRPC$Dialog>> dialogsByFolder = new SparseArray<>();
    public ArrayList<TLRPC$Dialog> dialogsCanAddUsers = new ArrayList<>();
    public ArrayList<TLRPC$Dialog> dialogsChannelsOnly = new ArrayList<>();
    private SparseBooleanArray dialogsEndReached;
    public ArrayList<TLRPC$Dialog> dialogsForBlock = new ArrayList<>();
    public ArrayList<TLRPC$Dialog> dialogsForward = new ArrayList<>();
    public ArrayList<TLRPC$Dialog> dialogsGroupsOnly = new ArrayList<>();
    private boolean dialogsInTransaction;
    public boolean dialogsLoaded;
    private int dialogsLoadedTillDate = Integer.MAX_VALUE;
    public ArrayList<TLRPC$Dialog> dialogsServerOnly = new ArrayList<>();
    public ArrayList<TLRPC$Dialog> dialogsUsersOnly = new ArrayList<>();
    public LongSparseArray<TLRPC$Dialog> dialogs_dict = new LongSparseArray<>();
    public ConcurrentHashMap<Long, Integer> dialogs_read_inbox_max = new ConcurrentHashMap<>(100, 1.0f, 2);
    public ConcurrentHashMap<Long, Integer> dialogs_read_outbox_max = new ConcurrentHashMap<>(100, 1.0f, 2);
    public HashSet<String> diceEmojies;
    public HashMap<String, DiceFrameSuccess> diceSuccess;
    private SharedPreferences emojiPreferences;
    public HashMap<String, EmojiSound> emojiSounds;
    public boolean enableJoined;
    private ConcurrentHashMap<Integer, TLRPC$EncryptedChat> encryptedChats = new ConcurrentHashMap<>(10, 1.0f, 2);
    private SparseArray<TLRPC$ExportedChatInvite> exportedChats = new SparseArray<>();
    public ArrayList<FaqSearchResult> faqSearchArray;
    public TLRPC$WebPage faqWebPage;
    public boolean filtersEnabled;
    public boolean firstGettingTask;
    private SparseArray<TLRPC$ChatFull> fullChats;
    private SparseArray<TLRPC$UserFull> fullUsers;
    private boolean getDifferenceFirstSync;
    private boolean gettingAppChangelog;
    private SparseBooleanArray gettingChatInviters;
    public boolean gettingDifference;
    private SparseBooleanArray gettingDifferenceChannels;
    private boolean gettingNewDeleteTask;
    private SparseBooleanArray gettingUnknownChannels;
    private LongSparseArray<Boolean> gettingUnknownDialogs;
    public String gifSearchBot;
    public ArrayList<String> gifSearchEmojies;
    private LongSparseArray<ChatObject.Call> groupCalls;
    private SparseArray<ChatObject.Call> groupCallsByChatId;
    public ArrayList<TLRPC$RecentMeUrl> hintDialogs = new ArrayList<>();
    public volatile boolean ignoreSetOnline;
    public String imageSearchBot;
    private String installReferer;
    private boolean isLeftPromoChannel;
    private ArrayList<Integer> joiningToChannels = new ArrayList<>();
    public boolean keepAliveService;
    private int lastCheckPromoId;
    private int lastPrintingStringCount;
    private long lastPushRegisterSendTime;
    private LongSparseArray<Long> lastScheduledServerQueryTime;
    private LongSparseArray<Long> lastServerQueryTime;
    private long lastStatusUpdateTime;
    private long lastViewsCheckTime;
    public String linkPrefix;
    private ArrayList<Integer> loadedFullChats;
    private ArrayList<Integer> loadedFullParticipants;
    private ArrayList<Integer> loadedFullUsers;
    private boolean loadingAppConfig;
    public boolean loadingBlockedPeers;
    private SparseIntArray loadingChannelAdmins;
    private SparseBooleanArray loadingDialogs;
    private ArrayList<Integer> loadingFullChats;
    private ArrayList<Integer> loadingFullParticipants;
    private ArrayList<Integer> loadingFullUsers;
    private ArrayList<Integer> loadingGroupCalls;
    private int loadingNotificationSettings;
    private boolean loadingNotificationSignUpSettings;
    private LongSparseArray<Boolean> loadingPeerSettings = new LongSparseArray<>();
    private SparseIntArray loadingPinnedDialogs;
    private boolean loadingRemoteFilters;
    private boolean loadingSuggestedFilters;
    private boolean loadingUnreadDialogs;
    private SharedPreferences mainPreferences;
    public String mapKey;
    public int mapProvider;
    public int maxBroadcastCount;
    public int maxCaptionLength;
    public int maxEditTime;
    public int maxFaveStickersCount;
    public int maxFolderPinnedDialogsCount;
    public int maxGroupCount;
    public int maxMegagroupCount;
    public int maxMessageLength;
    public int maxPinnedDialogsCount;
    public int maxRecentGifsCount;
    public int maxRecentStickersCount;
    private SparseIntArray migratedChats;
    private boolean migratingDialogs;
    public int minGroupConvertSize;
    private SparseArray<ArrayList<Integer>> needShortPollChannels = new SparseArray<>();
    private SparseArray<ArrayList<Integer>> needShortPollOnlines = new SparseArray<>();
    private SparseIntArray nextDialogsCacheOffset;
    private int nextPromoInfoCheckTime;
    private int nextTosCheckTime;
    private SharedPreferences notificationsPreferences;
    private ConcurrentHashMap<String, TLObject> objectsByUsernames = new ConcurrentHashMap<>(100, 1.0f, 2);
    private boolean offlineSent;
    public ConcurrentHashMap<Integer, Integer> onlinePrivacy = new ConcurrentHashMap<>(20, 1.0f, 2);
    private Runnable passwordCheckRunnable;
    public Set<String> pendingSuggestions;
    private LongSparseArray<SparseArray<MessageObject>> pollsToCheck;
    private int pollsToCheckSize;
    public boolean preloadFeaturedStickers;
    public LongSparseArray<SparseArray<CharSequence>> printingStrings = new LongSparseArray<>();
    public LongSparseArray<SparseArray<Integer>> printingStringsTypes = new LongSparseArray<>();
    public ConcurrentHashMap<Long, ConcurrentHashMap<Integer, ArrayList<PrintingUser>>> printingUsers = new ConcurrentHashMap<>(20, 1.0f, 2);
    private TLRPC$Dialog promoDialog;
    private long promoDialogId;
    public int promoDialogType;
    public String promoPsaMessage;
    public String promoPsaType;
    private String proxyDialogAddress;
    public boolean qrLoginCamera;
    public int ratingDecay;
    private ArrayList<ReadTask> readTasks;
    private LongSparseArray<ReadTask> readTasksMap;
    public boolean registeringForPush;
    private LongSparseArray<ArrayList<Integer>> reloadingMessages;
    private HashMap<String, ArrayList<MessageObject>> reloadingScheduledWebpages;
    private LongSparseArray<ArrayList<MessageObject>> reloadingScheduledWebpagesPending;
    private HashMap<String, ArrayList<MessageObject>> reloadingWebpages;
    private LongSparseArray<ArrayList<MessageObject>> reloadingWebpagesPending;
    private ArrayList<ReadTask> repliesReadTasks;
    private TLRPC$messages_Dialogs resetDialogsAll;
    private TLRPC$TL_messages_peerDialogs resetDialogsPinned;
    private boolean resetingDialogs;
    public int revokeTimeLimit;
    public int revokeTimePmLimit;
    public boolean saveGifsWithStickers;
    public int secretWebpagePreview;
    public DialogFilter[] selectedDialogFilter = new DialogFilter[2];
    public LongSparseArray<SparseArray<Boolean>>[] sendingTypings = new LongSparseArray[10];
    private SparseBooleanArray serverDialogsEndReached;
    private SparseIntArray shortPollChannels = new SparseIntArray();
    private SparseIntArray shortPollOnlines = new SparseIntArray();
    public boolean showFiltersTooltip;
    private DialogFilter sortingDialogFilter;
    private int statusRequest;
    private int statusSettingState;
    public boolean suggestContacts;
    public ArrayList<TLRPC$TL_dialogFilterSuggested> suggestedFilters;
    public String suggestedLangCode;
    private Runnable themeCheckRunnable;
    private LongSparseArray<ReadTask> threadsReadTasksMap;
    public int totalBlockedCount;
    public int unreadUnmutedDialogs;
    private final Comparator<TLRPC$Update> updatesComparator;
    private SparseArray<ArrayList<TLRPC$Updates>> updatesQueueChannels;
    private ArrayList<TLRPC$Updates> updatesQueuePts;
    private ArrayList<TLRPC$Updates> updatesQueueQts;
    private ArrayList<TLRPC$Updates> updatesQueueSeq;
    private SparseLongArray updatesStartWaitTimeChannels;
    private long updatesStartWaitTimePts;
    private long updatesStartWaitTimeQts;
    private long updatesStartWaitTimeSeq;
    public boolean updatingState;
    private String uploadingAvatar;
    private HashMap<String, Object> uploadingThemes;
    private String uploadingWallpaper;
    private Theme.OverrideWallpaperInfo uploadingWallpaperInfo;
    private ConcurrentHashMap<Integer, TLRPC$User> users = new ConcurrentHashMap<>(100, 1.0f, 2);
    public String venueSearchBot;
    private ArrayList<Long> visibleDialogMainThreadIds = new ArrayList<>();
    private ArrayList<Long> visibleScheduledDialogMainThreadIds = new ArrayList<>();
    public int webFileDatacenterId;
    public String youtubePipType;

    public interface MessagesLoadedCallback {
        void onError();

        void onMessagesLoaded(boolean z);
    }

    public static class PrintingUser {
        public TLRPC$SendMessageAction action;
        public long lastTime;
        public int userId;
    }

    static /* synthetic */ void lambda$blockPeer$61(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    static /* synthetic */ void lambda$completeReadTask$184(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    static /* synthetic */ void lambda$completeReadTask$186(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    static /* synthetic */ void lambda$deleteUserPhoto$82(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    static /* synthetic */ void lambda$hidePeerSettingsBar$46(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    static /* synthetic */ void lambda$hidePromoDialog$97(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    static /* synthetic */ void lambda$installTheme$85(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    static /* synthetic */ void lambda$installTheme$86(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    static /* synthetic */ void lambda$markMentionMessageAsRead$180(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    static /* synthetic */ void lambda$markMentionsAsRead$188(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    static /* synthetic */ void lambda$markMessageContentAsRead$178(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    static /* synthetic */ void lambda$processUpdates$277(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    static /* synthetic */ void lambda$removeSuggestion$16(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    static /* synthetic */ void lambda$reportSpam$47(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    static /* synthetic */ void lambda$reportSpam$48(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    static /* synthetic */ void lambda$reportSpam$49(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    static /* synthetic */ void lambda$saveTheme$84(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    static /* synthetic */ void lambda$unblockPeer$77(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    static /* synthetic */ void lambda$unregistedPush$225(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$new$0 */
    public /* synthetic */ void lambda$new$0$MessagesController() {
        getUserConfig().checkSavedPassword();
    }

    public static class FaqSearchResult {
        public int num;
        public String[] path;
        public String title;
        public String url;

        public FaqSearchResult(String str, String[] strArr, String str2) {
            this.title = str;
            this.path = strArr;
            this.url = str2;
        }

        public boolean equals(Object obj) {
            if (!(obj instanceof FaqSearchResult)) {
                return false;
            }
            return this.title.equals(((FaqSearchResult) obj).title);
        }

        public String toString() {
            SerializedData serializedData = new SerializedData();
            serializedData.writeInt32(this.num);
            int i = 0;
            serializedData.writeInt32(0);
            serializedData.writeString(this.title);
            String[] strArr = this.path;
            serializedData.writeInt32(strArr != null ? strArr.length : 0);
            if (this.path != null) {
                while (true) {
                    String[] strArr2 = this.path;
                    if (i >= strArr2.length) {
                        break;
                    }
                    serializedData.writeString(strArr2[i]);
                    i++;
                }
            }
            serializedData.writeString(this.url);
            return Utilities.bytesToHex(serializedData.toByteArray());
        }
    }

    public static class EmojiSound {
        public long accessHash;
        public byte[] fileReference;
        public long id;

        public EmojiSound(long j, long j2, String str) {
            this.id = j;
            this.accessHash = j2;
            this.fileReference = Base64.decode(str, 8);
        }

        public EmojiSound(long j, long j2, byte[] bArr) {
            this.id = j;
            this.accessHash = j2;
            this.fileReference = bArr;
        }

        public boolean equals(Object obj) {
            if (!(obj instanceof EmojiSound)) {
                return false;
            }
            EmojiSound emojiSound = (EmojiSound) obj;
            if (this.id == emojiSound.id && this.accessHash == emojiSound.accessHash && Arrays.equals(this.fileReference, emojiSound.fileReference)) {
                return true;
            }
            return false;
        }
    }

    public void clearQueryTime() {
        this.lastServerQueryTime.clear();
        this.lastScheduledServerQueryTime.clear();
    }

    public static class DiceFrameSuccess {
        public int frame;
        public int num;

        public DiceFrameSuccess(int i, int i2) {
            this.frame = i;
            this.num = i2;
        }

        public boolean equals(Object obj) {
            if (!(obj instanceof DiceFrameSuccess)) {
                return false;
            }
            DiceFrameSuccess diceFrameSuccess = (DiceFrameSuccess) obj;
            if (this.frame == diceFrameSuccess.frame && this.num == diceFrameSuccess.num) {
                return true;
            }
            return false;
        }
    }

    private static class UserActionUpdatesSeq extends TLRPC$Updates {
        private UserActionUpdatesSeq() {
        }
    }

    private static class UserActionUpdatesPts extends TLRPC$Updates {
        private UserActionUpdatesPts() {
        }
    }

    private static class ReadTask {
        public long dialogId;
        public int maxDate;
        public int maxId;
        public long replyId;
        public long sendRequestTime;

        private ReadTask() {
        }
    }

    public static class DialogFilter {
        private static int dialogFilterPointer = 10;
        public ArrayList<Integer> alwaysShow = new ArrayList<>();
        public ArrayList<TLRPC$Dialog> dialogs = new ArrayList<>();
        public int flags;
        public int id;
        public int localId;
        public String name;
        public ArrayList<Integer> neverShow = new ArrayList<>();
        public int order;
        public volatile int pendingUnreadCount;
        public LongSparseArray<Integer> pinnedDialogs = new LongSparseArray<>();
        public int unreadCount;

        public DialogFilter() {
            int i = dialogFilterPointer;
            dialogFilterPointer = i + 1;
            this.localId = i;
        }

        public boolean includesDialog(AccountInstance accountInstance, int i) {
            TLRPC$Dialog tLRPC$Dialog = accountInstance.getMessagesController().dialogs_dict.get((long) i);
            if (tLRPC$Dialog == null) {
                return false;
            }
            return includesDialog(accountInstance, i, tLRPC$Dialog);
        }

        public boolean includesDialog(AccountInstance accountInstance, int i, TLRPC$Dialog tLRPC$Dialog) {
            TLRPC$Chat chat;
            if (this.alwaysShow.contains(Integer.valueOf(i))) {
                return true;
            }
            if (tLRPC$Dialog.folder_id != 0 && (this.flags & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED) != 0) {
                return false;
            }
            MessagesController messagesController = accountInstance.getMessagesController();
            ContactsController contactsController = accountInstance.getContactsController();
            if (((this.flags & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED) != 0 && messagesController.isDialogMuted(tLRPC$Dialog.id) && tLRPC$Dialog.unread_mentions_count == 0) || (((this.flags & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0 && tLRPC$Dialog.unread_count == 0 && !tLRPC$Dialog.unread_mark && tLRPC$Dialog.unread_mentions_count == 0) || this.neverShow.contains(Integer.valueOf(i)))) {
                return false;
            }
            if (i > 0) {
                TLRPC$User user = messagesController.getUser(Integer.valueOf(i));
                if (user != null) {
                    if (!user.bot) {
                        if (user.self || user.contact || contactsController.isContact(i)) {
                            if ((this.flags & MessagesController.DIALOG_FILTER_FLAG_CONTACTS) != 0) {
                                return true;
                            }
                        } else if ((this.flags & MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS) != 0) {
                            return true;
                        }
                    } else if ((this.flags & MessagesController.DIALOG_FILTER_FLAG_BOTS) != 0) {
                        return true;
                    }
                }
            } else if (i < 0 && (chat = messagesController.getChat(Integer.valueOf(-i))) != null) {
                if (!ChatObject.isChannel(chat) || chat.megagroup) {
                    if ((this.flags & MessagesController.DIALOG_FILTER_FLAG_GROUPS) != 0) {
                        return true;
                    }
                } else if ((this.flags & MessagesController.DIALOG_FILTER_FLAG_CHANNELS) != 0) {
                    return true;
                }
            }
            return false;
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$new$1 */
    public /* synthetic */ int lambda$new$1$MessagesController(TLRPC$Dialog tLRPC$Dialog, TLRPC$Dialog tLRPC$Dialog2) {
        int intValue = this.sortingDialogFilter.pinnedDialogs.get(tLRPC$Dialog.id, Integer.MIN_VALUE).intValue();
        int intValue2 = this.sortingDialogFilter.pinnedDialogs.get(tLRPC$Dialog2.id, Integer.MIN_VALUE).intValue();
        boolean z = tLRPC$Dialog instanceof TLRPC$TL_dialogFolder;
        if (z && !(tLRPC$Dialog2 instanceof TLRPC$TL_dialogFolder)) {
            return -1;
        }
        if (!z && (tLRPC$Dialog2 instanceof TLRPC$TL_dialogFolder)) {
            return 1;
        }
        if (intValue == Integer.MIN_VALUE && intValue2 != Integer.MIN_VALUE) {
            return 1;
        }
        if (intValue != Integer.MIN_VALUE && intValue2 == Integer.MIN_VALUE) {
            return -1;
        }
        if (intValue == Integer.MIN_VALUE || intValue2 == Integer.MIN_VALUE) {
            MediaDataController mediaDataController = getMediaDataController();
            long lastMessageOrDraftDate = DialogObject.getLastMessageOrDraftDate(tLRPC$Dialog, mediaDataController.getDraft(tLRPC$Dialog.id, 0));
            long lastMessageOrDraftDate2 = DialogObject.getLastMessageOrDraftDate(tLRPC$Dialog2, mediaDataController.getDraft(tLRPC$Dialog2.id, 0));
            if (lastMessageOrDraftDate < lastMessageOrDraftDate2) {
                return 1;
            }
            if (lastMessageOrDraftDate > lastMessageOrDraftDate2) {
                return -1;
            }
            return 0;
        } else if (intValue > intValue2) {
            return 1;
        } else {
            if (intValue < intValue2) {
                return -1;
            }
            return 0;
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$new$2 */
    public /* synthetic */ int lambda$new$2$MessagesController(TLRPC$Dialog tLRPC$Dialog, TLRPC$Dialog tLRPC$Dialog2) {
        boolean z = tLRPC$Dialog instanceof TLRPC$TL_dialogFolder;
        if (z && !(tLRPC$Dialog2 instanceof TLRPC$TL_dialogFolder)) {
            return -1;
        }
        if (!z && (tLRPC$Dialog2 instanceof TLRPC$TL_dialogFolder)) {
            return 1;
        }
        boolean z2 = tLRPC$Dialog.pinned;
        if (!z2 && tLRPC$Dialog2.pinned) {
            return 1;
        }
        if (z2 && !tLRPC$Dialog2.pinned) {
            return -1;
        }
        if (z2) {
            int i = tLRPC$Dialog.pinnedNum;
            int i2 = tLRPC$Dialog2.pinnedNum;
            if (i < i2) {
                return 1;
            }
            if (i > i2) {
                return -1;
            }
            return 0;
        }
        MediaDataController mediaDataController = getMediaDataController();
        long lastMessageOrDraftDate = DialogObject.getLastMessageOrDraftDate(tLRPC$Dialog, mediaDataController.getDraft(tLRPC$Dialog.id, 0));
        long lastMessageOrDraftDate2 = DialogObject.getLastMessageOrDraftDate(tLRPC$Dialog2, mediaDataController.getDraft(tLRPC$Dialog2.id, 0));
        if (lastMessageOrDraftDate < lastMessageOrDraftDate2) {
            return 1;
        }
        if (lastMessageOrDraftDate > lastMessageOrDraftDate2) {
            return -1;
        }
        return 0;
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$new$3 */
    public /* synthetic */ int lambda$new$3$MessagesController(TLRPC$Update tLRPC$Update, TLRPC$Update tLRPC$Update2) {
        int updateType = getUpdateType(tLRPC$Update);
        int updateType2 = getUpdateType(tLRPC$Update2);
        if (updateType != updateType2) {
            return AndroidUtilities.compare(updateType, updateType2);
        }
        if (updateType == 0) {
            return AndroidUtilities.compare(getUpdatePts(tLRPC$Update), getUpdatePts(tLRPC$Update2));
        }
        if (updateType == 1) {
            return AndroidUtilities.compare(getUpdateQts(tLRPC$Update), getUpdateQts(tLRPC$Update2));
        }
        if (updateType != 2) {
            return 0;
        }
        int updateChannelId = getUpdateChannelId(tLRPC$Update);
        int updateChannelId2 = getUpdateChannelId(tLRPC$Update2);
        if (updateChannelId == updateChannelId2) {
            return AndroidUtilities.compare(getUpdatePts(tLRPC$Update), getUpdatePts(tLRPC$Update2));
        }
        return AndroidUtilities.compare(updateChannelId, updateChannelId2);
    }

    public static MessagesController getInstance(int i) {
        MessagesController messagesController = Instance[i];
        if (messagesController == null) {
            synchronized (MessagesController.class) {
                messagesController = Instance[i];
                if (messagesController == null) {
                    MessagesController[] messagesControllerArr = Instance;
                    MessagesController messagesController2 = new MessagesController(i);
                    messagesControllerArr[i] = messagesController2;
                    messagesController = messagesController2;
                }
            }
        }
        return messagesController;
    }

    public static SharedPreferences getNotificationsSettings(int i) {
        return getInstance(i).notificationsPreferences;
    }

    public static SharedPreferences getGlobalNotificationsSettings() {
        return getInstance(0).notificationsPreferences;
    }

    public static SharedPreferences getMainSettings(int i) {
        return getInstance(i).mainPreferences;
    }

    public static SharedPreferences getGlobalMainSettings() {
        return getInstance(0).mainPreferences;
    }

    public static SharedPreferences getEmojiSettings(int i) {
        return getInstance(i).emojiPreferences;
    }

    public static SharedPreferences getGlobalEmojiSettings() {
        return getInstance(0).emojiPreferences;
    }

    public MessagesController(int i) {
        super(i);
        int i2 = 2;
        this.loadingBlockedPeers = false;
        this.blockePeers = new SparseIntArray();
        this.totalBlockedCount = -1;
        this.channelViewsToSend = new SparseArray<>();
        this.pollsToCheck = new LongSparseArray<>();
        this.dialogFilters = new ArrayList<>();
        this.dialogFiltersById = new SparseArray<>();
        this.suggestedFilters = new ArrayList<>();
        this.updatesQueueChannels = new SparseArray<>();
        this.updatesStartWaitTimeChannels = new SparseLongArray();
        this.channelsPts = new SparseIntArray();
        this.gettingDifferenceChannels = new SparseBooleanArray();
        this.gettingChatInviters = new SparseBooleanArray();
        this.gettingUnknownChannels = new SparseBooleanArray();
        this.gettingUnknownDialogs = new LongSparseArray<>();
        this.checkingLastMessagesDialogs = new SparseBooleanArray();
        this.updatesQueueSeq = new ArrayList<>();
        this.updatesQueuePts = new ArrayList<>();
        this.updatesQueueQts = new ArrayList<>();
        this.fullUsers = new SparseArray<>();
        this.fullChats = new SparseArray<>();
        this.groupCalls = new LongSparseArray<>();
        this.groupCallsByChatId = new SparseArray<>();
        this.loadingFullUsers = new ArrayList<>();
        this.loadedFullUsers = new ArrayList<>();
        this.loadingFullChats = new ArrayList<>();
        this.loadingGroupCalls = new ArrayList<>();
        this.loadingFullParticipants = new ArrayList<>();
        this.loadedFullParticipants = new ArrayList<>();
        this.loadedFullChats = new ArrayList<>();
        this.channelAdmins = new SparseArray<>();
        this.loadingChannelAdmins = new SparseIntArray();
        this.migratedChats = new SparseIntArray();
        this.reloadingWebpages = new HashMap<>();
        this.reloadingWebpagesPending = new LongSparseArray<>();
        this.reloadingScheduledWebpages = new HashMap<>();
        this.reloadingScheduledWebpagesPending = new LongSparseArray<>();
        this.lastScheduledServerQueryTime = new LongSparseArray<>();
        this.lastServerQueryTime = new LongSparseArray<>();
        this.reloadingMessages = new LongSparseArray<>();
        this.readTasks = new ArrayList<>();
        this.readTasksMap = new LongSparseArray<>();
        this.repliesReadTasks = new ArrayList<>();
        this.threadsReadTasksMap = new LongSparseArray<>();
        this.nextDialogsCacheOffset = new SparseIntArray();
        this.loadingDialogs = new SparseBooleanArray();
        this.dialogsEndReached = new SparseBooleanArray();
        this.serverDialogsEndReached = new SparseBooleanArray();
        this.getDifferenceFirstSync = true;
        this.loadingPinnedDialogs = new SparseIntArray();
        this.faqSearchArray = new ArrayList<>();
        this.suggestContacts = true;
        this.themeCheckRunnable = $$Lambda$YBrwKY5coui7kYPFT6vSXwq9GFM.INSTANCE;
        this.passwordCheckRunnable = new Runnable() {
            public final void run() {
                MessagesController.this.lambda$new$0$MessagesController();
            }
        };
        this.uploadingThemes = new HashMap<>();
        this.maxBroadcastCount = 100;
        this.minGroupConvertSize = 200;
        this.gifSearchEmojies = new ArrayList<>();
        this.diceSuccess = new HashMap<>();
        this.emojiSounds = new HashMap<>();
        this.dialogDateComparator = new Object() {
            public final int compare(Object obj, Object obj2) {
                return MessagesController.this.lambda$new$1$MessagesController((TLRPC$Dialog) obj, (TLRPC$Dialog) obj2);
            }

            public /* synthetic */ Comparator reversed() {
                return Comparator.CC.$default$reversed(this);
            }

            public /* synthetic */ java.util.Comparator thenComparing(Function function) {
                return Comparator.CC.$default$thenComparing((java.util.Comparator) this, function);
            }

            public /* synthetic */ java.util.Comparator thenComparing(Function function, java.util.Comparator comparator) {
                return Comparator.CC.$default$thenComparing(this, function, comparator);
            }

            public /* synthetic */ java.util.Comparator thenComparing(java.util.Comparator comparator) {
                return Comparator.CC.$default$thenComparing((java.util.Comparator) this, comparator);
            }

            public /* synthetic */ java.util.Comparator thenComparingDouble(ToDoubleFunction toDoubleFunction) {
                return Comparator.CC.$default$thenComparingDouble(this, toDoubleFunction);
            }

            public /* synthetic */ java.util.Comparator thenComparingInt(ToIntFunction toIntFunction) {
                return Comparator.CC.$default$thenComparingInt(this, toIntFunction);
            }

            public /* synthetic */ java.util.Comparator thenComparingLong(ToLongFunction toLongFunction) {
                return Comparator.CC.$default$thenComparingLong(this, toLongFunction);
            }
        };
        this.dialogComparator = new Object() {
            public final int compare(Object obj, Object obj2) {
                return MessagesController.this.lambda$new$2$MessagesController((TLRPC$Dialog) obj, (TLRPC$Dialog) obj2);
            }

            public /* synthetic */ java.util.Comparator reversed() {
                return Comparator.CC.$default$reversed(this);
            }

            public /* synthetic */ java.util.Comparator thenComparing(Function function) {
                return Comparator.CC.$default$thenComparing((java.util.Comparator) this, function);
            }

            public /* synthetic */ java.util.Comparator thenComparing(Function function, java.util.Comparator comparator) {
                return Comparator.CC.$default$thenComparing(this, function, comparator);
            }

            public /* synthetic */ java.util.Comparator thenComparing(java.util.Comparator comparator) {
                return Comparator.CC.$default$thenComparing((java.util.Comparator) this, comparator);
            }

            public /* synthetic */ java.util.Comparator thenComparingDouble(ToDoubleFunction toDoubleFunction) {
                return Comparator.CC.$default$thenComparingDouble(this, toDoubleFunction);
            }

            public /* synthetic */ java.util.Comparator thenComparingInt(ToIntFunction toIntFunction) {
                return Comparator.CC.$default$thenComparingInt(this, toIntFunction);
            }

            public /* synthetic */ java.util.Comparator thenComparingLong(ToLongFunction toLongFunction) {
                return Comparator.CC.$default$thenComparingLong(this, toLongFunction);
            }
        };
        this.updatesComparator = new Object() {
            public final int compare(Object obj, Object obj2) {
                return MessagesController.this.lambda$new$3$MessagesController((TLRPC$Update) obj, (TLRPC$Update) obj2);
            }

            public /* synthetic */ java.util.Comparator reversed() {
                return Comparator.CC.$default$reversed(this);
            }

            public /* synthetic */ java.util.Comparator thenComparing(Function function) {
                return Comparator.CC.$default$thenComparing((java.util.Comparator) this, function);
            }

            public /* synthetic */ java.util.Comparator thenComparing(Function function, java.util.Comparator comparator) {
                return Comparator.CC.$default$thenComparing(this, function, comparator);
            }

            public /* synthetic */ java.util.Comparator thenComparing(java.util.Comparator comparator) {
                return Comparator.CC.$default$thenComparing((java.util.Comparator) this, comparator);
            }

            public /* synthetic */ java.util.Comparator thenComparingDouble(ToDoubleFunction toDoubleFunction) {
                return Comparator.CC.$default$thenComparingDouble(this, toDoubleFunction);
            }

            public /* synthetic */ java.util.Comparator thenComparingInt(ToIntFunction toIntFunction) {
                return Comparator.CC.$default$thenComparingInt(this, toIntFunction);
            }

            public /* synthetic */ java.util.Comparator thenComparingLong(ToLongFunction toLongFunction) {
                return Comparator.CC.$default$thenComparingLong(this, toLongFunction);
            }
        };
        this.DIALOGS_LOAD_TYPE_CACHE = 1;
        this.DIALOGS_LOAD_TYPE_CHANNEL = 2;
        this.DIALOGS_LOAD_TYPE_UNKNOWN = 3;
        this.currentAccount = i;
        ImageLoader.getInstance();
        getMessagesStorage();
        getLocationController();
        AndroidUtilities.runOnUIThread(new Runnable() {
            public final void run() {
                MessagesController.this.lambda$new$4$MessagesController();
            }
        });
        addSupportUser();
        if (this.currentAccount == 0) {
            this.notificationsPreferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", 0);
            this.mainPreferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", 0);
            this.emojiPreferences = ApplicationLoader.applicationContext.getSharedPreferences("emoji", 0);
        } else {
            Context context = ApplicationLoader.applicationContext;
            this.notificationsPreferences = context.getSharedPreferences("Notifications" + this.currentAccount, 0);
            Context context2 = ApplicationLoader.applicationContext;
            this.mainPreferences = context2.getSharedPreferences("mainconfig" + this.currentAccount, 0);
            Context context3 = ApplicationLoader.applicationContext;
            this.emojiPreferences = context3.getSharedPreferences("emoji" + this.currentAccount, 0);
        }
        this.enableJoined = this.notificationsPreferences.getBoolean("EnableContactJoined", true);
        this.secretWebpagePreview = this.mainPreferences.getInt("secretWebpage2", 2);
        this.maxGroupCount = this.mainPreferences.getInt("maxGroupCount", 200);
        this.maxMegagroupCount = this.mainPreferences.getInt("maxMegagroupCount", 10000);
        this.maxRecentGifsCount = this.mainPreferences.getInt("maxRecentGifsCount", 200);
        this.maxRecentStickersCount = this.mainPreferences.getInt("maxRecentStickersCount", 30);
        this.maxFaveStickersCount = this.mainPreferences.getInt("maxFaveStickersCount", 5);
        this.maxEditTime = this.mainPreferences.getInt("maxEditTime", 3600);
        this.ratingDecay = this.mainPreferences.getInt("ratingDecay", 2419200);
        this.linkPrefix = this.mainPreferences.getString("linkPrefix", "t.me");
        this.callReceiveTimeout = this.mainPreferences.getInt("callReceiveTimeout", 20000);
        this.callRingTimeout = this.mainPreferences.getInt("callRingTimeout", 90000);
        this.callConnectTimeout = this.mainPreferences.getInt("callConnectTimeout", 30000);
        this.callPacketTimeout = this.mainPreferences.getInt("callPacketTimeout", 10000);
        this.maxPinnedDialogsCount = this.mainPreferences.getInt("maxPinnedDialogsCount", 5);
        this.maxFolderPinnedDialogsCount = this.mainPreferences.getInt("maxFolderPinnedDialogsCount", 100);
        this.maxMessageLength = this.mainPreferences.getInt("maxMessageLength", 4096);
        this.maxCaptionLength = this.mainPreferences.getInt("maxCaptionLength", 1024);
        this.mapProvider = this.mainPreferences.getInt("mapProvider", 0);
        this.availableMapProviders = this.mainPreferences.getInt("availableMapProviders", 3);
        this.mapKey = this.mainPreferences.getString("pk", (String) null);
        this.installReferer = this.mainPreferences.getString("installReferer", (String) null);
        this.revokeTimeLimit = this.mainPreferences.getInt("revokeTimeLimit", this.revokeTimeLimit);
        this.revokeTimePmLimit = this.mainPreferences.getInt("revokeTimePmLimit", this.revokeTimePmLimit);
        this.canRevokePmInbox = this.mainPreferences.getBoolean("canRevokePmInbox", this.canRevokePmInbox);
        this.preloadFeaturedStickers = this.mainPreferences.getBoolean("preloadFeaturedStickers", false);
        this.youtubePipType = this.mainPreferences.getString("youtubePipType", "disabled");
        this.keepAliveService = this.mainPreferences.getBoolean("keepAliveService", false);
        this.backgroundConnection = this.mainPreferences.getBoolean("keepAliveService", false);
        this.promoDialogId = this.mainPreferences.getLong("proxy_dialog", 0);
        this.nextPromoInfoCheckTime = this.mainPreferences.getInt("nextPromoInfoCheckTime", 0);
        this.promoDialogType = this.mainPreferences.getInt("promo_dialog_type", 0);
        this.promoPsaMessage = this.mainPreferences.getString("promo_psa_message", (String) null);
        this.promoPsaType = this.mainPreferences.getString("promo_psa_type", (String) null);
        this.proxyDialogAddress = this.mainPreferences.getString("proxyDialogAddress", (String) null);
        this.nextTosCheckTime = this.notificationsPreferences.getInt("nextTosCheckTime", 0);
        this.venueSearchBot = this.mainPreferences.getString("venueSearchBot", "foursquare");
        this.gifSearchBot = this.mainPreferences.getString("gifSearchBot", "gif");
        this.imageSearchBot = this.mainPreferences.getString("imageSearchBot", "pic");
        this.blockedCountry = this.mainPreferences.getBoolean("blockedCountry", false);
        this.dcDomainName = this.mainPreferences.getString("dcDomainName2", ConnectionsManager.native_isTestBackend(this.currentAccount) != 0 ? "tapv3.stel.com" : "apv3.stel.com");
        this.webFileDatacenterId = this.mainPreferences.getInt("webFileDatacenterId", ConnectionsManager.native_isTestBackend(this.currentAccount) == 0 ? 4 : i2);
        this.suggestedLangCode = this.mainPreferences.getString("suggestedLangCode", "en");
        this.animatedEmojisZoom = this.mainPreferences.getFloat("animatedEmojisZoom", 0.625f);
        this.qrLoginCamera = this.mainPreferences.getBoolean("qrLoginCamera", false);
        this.saveGifsWithStickers = this.mainPreferences.getBoolean("saveGifsWithStickers", false);
        this.filtersEnabled = this.mainPreferences.getBoolean("filtersEnabled", false);
        this.showFiltersTooltip = this.mainPreferences.getBoolean("showFiltersTooltip", false);
        this.autoarchiveAvailable = this.mainPreferences.getBoolean("autoarchiveAvailable", false);
        Set<String> stringSet = this.mainPreferences.getStringSet("pendingSuggestions", (Set) null);
        this.pendingSuggestions = stringSet;
        if (stringSet != null) {
            this.pendingSuggestions = new HashSet(this.pendingSuggestions);
        } else {
            this.pendingSuggestions = new HashSet();
        }
        Set<String> stringSet2 = this.mainPreferences.getStringSet("diceEmojies", (Set) null);
        if (stringSet2 == null) {
            HashSet<String> hashSet = new HashSet<>();
            this.diceEmojies = hashSet;
            hashSet.add("🎲");
            this.diceEmojies.add("🎯");
        } else {
            this.diceEmojies = new HashSet<>(stringSet2);
        }
        String string = this.mainPreferences.getString("diceSuccess", (String) null);
        if (string == null) {
            this.diceSuccess.put("🎯", new DiceFrameSuccess(62, 6));
        } else {
            try {
                byte[] decode = Base64.decode(string, 0);
                if (decode != null) {
                    SerializedData serializedData = new SerializedData(decode);
                    int readInt32 = serializedData.readInt32(true);
                    for (int i3 = 0; i3 < readInt32; i3++) {
                        this.diceSuccess.put(serializedData.readString(true), new DiceFrameSuccess(serializedData.readInt32(true), serializedData.readInt32(true)));
                    }
                    serializedData.cleanup();
                }
            } catch (Exception e) {
                FileLog.e((Throwable) e);
            }
        }
        String string2 = this.mainPreferences.getString("emojiSounds", (String) null);
        if (string2 != null) {
            try {
                byte[] decode2 = Base64.decode(string2, 0);
                if (decode2 != null) {
                    SerializedData serializedData2 = new SerializedData(decode2);
                    int readInt322 = serializedData2.readInt32(true);
                    for (int i4 = 0; i4 < readInt322; i4++) {
                        this.emojiSounds.put(serializedData2.readString(true), new EmojiSound(serializedData2.readInt64(true), serializedData2.readInt64(true), serializedData2.readByteArray(true)));
                    }
                    serializedData2.cleanup();
                }
            } catch (Exception e2) {
                FileLog.e((Throwable) e2);
            }
        }
        String string3 = this.mainPreferences.getString("gifSearchEmojies", (String) null);
        if (string3 == null) {
            this.gifSearchEmojies.add("👍");
            this.gifSearchEmojies.add("👎");
            this.gifSearchEmojies.add("😍");
            this.gifSearchEmojies.add("😂");
            this.gifSearchEmojies.add("😮");
            this.gifSearchEmojies.add("🙄");
            this.gifSearchEmojies.add("😥");
            this.gifSearchEmojies.add("😡");
            this.gifSearchEmojies.add("🥳");
            this.gifSearchEmojies.add("😎");
            return;
        }
        try {
            byte[] decode3 = Base64.decode(string3, 0);
            if (decode3 != null) {
                SerializedData serializedData3 = new SerializedData(decode3);
                int readInt323 = serializedData3.readInt32(true);
                for (int i5 = 0; i5 < readInt323; i5++) {
                    this.gifSearchEmojies.add(serializedData3.readString(true));
                }
                serializedData3.cleanup();
            }
        } catch (Exception e3) {
            FileLog.e((Throwable) e3);
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$new$4 */
    public /* synthetic */ void lambda$new$4$MessagesController() {
        MessagesController messagesController = getMessagesController();
        getNotificationCenter().addObserver(messagesController, NotificationCenter.FileDidUpload);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.FileDidFailUpload);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.fileDidLoad);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.fileDidFailToLoad);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.messageReceivedByServer);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.updateMessageMedia);
    }

    private void sendLoadPeersRequest(TLObject tLObject, ArrayList<TLObject> arrayList, TLRPC$messages_Dialogs tLRPC$messages_Dialogs, TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, ArrayList<TLRPC$User> arrayList2, ArrayList<TLRPC$Chat> arrayList3, ArrayList<DialogFilter> arrayList4, SparseArray<DialogFilter> sparseArray, ArrayList<Integer> arrayList5, HashMap<Integer, HashSet<Integer>> hashMap, HashMap<Integer, HashSet<Integer>> hashMap2, HashSet<Integer> hashSet) {
        getConnectionsManager().sendRequest(tLObject, new RequestDelegate(arrayList3, arrayList2, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, tLObject, arrayList4, sparseArray, arrayList5, hashMap, hashMap2, hashSet) {
            public final /* synthetic */ ArrayList f$1;
            public final /* synthetic */ HashMap f$10;
            public final /* synthetic */ HashMap f$11;
            public final /* synthetic */ HashSet f$12;
            public final /* synthetic */ ArrayList f$2;
            public final /* synthetic */ TLRPC$messages_Dialogs f$3;
            public final /* synthetic */ TLRPC$messages_Dialogs f$4;
            public final /* synthetic */ ArrayList f$5;
            public final /* synthetic */ TLObject f$6;
            public final /* synthetic */ ArrayList f$7;
            public final /* synthetic */ SparseArray f$8;
            public final /* synthetic */ ArrayList f$9;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
                this.f$7 = r8;
                this.f$8 = r9;
                this.f$9 = r10;
                this.f$10 = r11;
                this.f$11 = r12;
                this.f$12 = r13;
            }

            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$sendLoadPeersRequest$5$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7, this.f$8, this.f$9, this.f$10, this.f$11, this.f$12, tLObject, tLRPC$TL_error);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$sendLoadPeersRequest$5 */
    public /* synthetic */ void lambda$sendLoadPeersRequest$5$MessagesController(ArrayList arrayList, ArrayList arrayList2, TLRPC$messages_Dialogs tLRPC$messages_Dialogs, TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, ArrayList arrayList3, TLObject tLObject, ArrayList arrayList4, SparseArray sparseArray, ArrayList arrayList5, HashMap hashMap, HashMap hashMap2, HashSet hashSet, TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error) {
        ArrayList arrayList6 = arrayList;
        ArrayList arrayList7 = arrayList2;
        TLRPC$messages_Dialogs tLRPC$messages_Dialogs3 = tLRPC$messages_Dialogs;
        TLRPC$messages_Dialogs tLRPC$messages_Dialogs4 = tLRPC$messages_Dialogs2;
        TLObject tLObject3 = tLObject2;
        if (tLObject3 instanceof TLRPC$TL_messages_chats) {
            arrayList.addAll(((TLRPC$TL_messages_chats) tLObject3).chats);
        } else if (tLObject3 instanceof TLRPC$Vector) {
            TLRPC$Vector tLRPC$Vector = (TLRPC$Vector) tLObject3;
            int size = tLRPC$Vector.objects.size();
            for (int i = 0; i < size; i++) {
                arrayList2.add((TLRPC$User) tLRPC$Vector.objects.get(i));
            }
        } else if (tLObject3 instanceof TLRPC$TL_messages_peerDialogs) {
            TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject3;
            tLRPC$messages_Dialogs3.dialogs.addAll(tLRPC$TL_messages_peerDialogs.dialogs);
            tLRPC$messages_Dialogs3.messages.addAll(tLRPC$TL_messages_peerDialogs.messages);
            tLRPC$messages_Dialogs4.dialogs.addAll(tLRPC$TL_messages_peerDialogs.dialogs);
            tLRPC$messages_Dialogs4.messages.addAll(tLRPC$TL_messages_peerDialogs.messages);
            arrayList2.addAll(tLRPC$TL_messages_peerDialogs.users);
            arrayList.addAll(tLRPC$TL_messages_peerDialogs.chats);
        }
        arrayList3.remove(tLObject);
        if (arrayList3.isEmpty()) {
            getMessagesStorage().processLoadedFilterPeers(tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList2, arrayList, arrayList4, sparseArray, arrayList5, hashMap, hashMap2, hashSet);
        }
    }

    /* access modifiers changed from: protected */
    public void loadFilterPeers(HashMap<Integer, TLRPC$InputPeer> hashMap, HashMap<Integer, TLRPC$InputPeer> hashMap2, HashMap<Integer, TLRPC$InputPeer> hashMap3, TLRPC$messages_Dialogs tLRPC$messages_Dialogs, TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, ArrayList<TLRPC$User> arrayList, ArrayList<TLRPC$Chat> arrayList2, ArrayList<DialogFilter> arrayList3, SparseArray<DialogFilter> sparseArray, ArrayList<Integer> arrayList4, HashMap<Integer, HashSet<Integer>> hashMap4, HashMap<Integer, HashSet<Integer>> hashMap5, HashSet<Integer> hashSet) {
        DispatchQueue dispatchQueue = Utilities.stageQueue;
        $$Lambda$MessagesController$anVBm6Rttjrbf6LC0fvar_thOxY r0 = r1;
        $$Lambda$MessagesController$anVBm6Rttjrbf6LC0fvar_thOxY r1 = new Runnable(hashMap2, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap4, hashMap5, hashSet, hashMap3, hashMap) {
            public final /* synthetic */ HashMap f$1;
            public final /* synthetic */ HashMap f$10;
            public final /* synthetic */ HashSet f$11;
            public final /* synthetic */ HashMap f$12;
            public final /* synthetic */ HashMap f$13;
            public final /* synthetic */ TLRPC$messages_Dialogs f$2;
            public final /* synthetic */ TLRPC$messages_Dialogs f$3;
            public final /* synthetic */ ArrayList f$4;
            public final /* synthetic */ ArrayList f$5;
            public final /* synthetic */ ArrayList f$6;
            public final /* synthetic */ SparseArray f$7;
            public final /* synthetic */ ArrayList f$8;
            public final /* synthetic */ HashMap f$9;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
                this.f$7 = r8;
                this.f$8 = r9;
                this.f$9 = r10;
                this.f$10 = r11;
                this.f$11 = r12;
                this.f$12 = r13;
                this.f$13 = r14;
            }

            public final void run() {
                MessagesController.this.lambda$loadFilterPeers$6$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7, this.f$8, this.f$9, this.f$10, this.f$11, this.f$12, this.f$13);
            }
        };
        dispatchQueue.postRunnable(r0);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$loadFilterPeers$6 */
    public /* synthetic */ void lambda$loadFilterPeers$6$MessagesController(HashMap hashMap, TLRPC$messages_Dialogs tLRPC$messages_Dialogs, TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, ArrayList arrayList, ArrayList arrayList2, ArrayList arrayList3, SparseArray sparseArray, ArrayList arrayList4, HashMap hashMap2, HashMap hashMap3, HashSet hashSet, HashMap hashMap4, HashMap hashMap5) {
        TLRPC$TL_users_getUsers tLRPC$TL_users_getUsers;
        int i;
        TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs;
        TLRPC$TL_channels_getChannels tLRPC$TL_channels_getChannels;
        TLRPC$TL_messages_getChats tLRPC$TL_messages_getChats;
        ArrayList arrayList5 = new ArrayList();
        loop0:
        while (true) {
            tLRPC$TL_users_getUsers = null;
            for (Map.Entry entry : hashMap.entrySet()) {
                if (tLRPC$TL_users_getUsers == null) {
                    tLRPC$TL_users_getUsers = new TLRPC$TL_users_getUsers();
                    arrayList5.add(tLRPC$TL_users_getUsers);
                }
                tLRPC$TL_users_getUsers.id.add(getInputUser((TLRPC$InputPeer) entry.getValue()));
                if (tLRPC$TL_users_getUsers.id.size() == 100) {
                    sendLoadPeersRequest(tLRPC$TL_users_getUsers, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashMap3, hashSet);
                }
            }
            break loop0;
        }
        if (tLRPC$TL_users_getUsers != null) {
            i = 100;
            sendLoadPeersRequest(tLRPC$TL_users_getUsers, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashMap3, hashSet);
        } else {
            i = 100;
        }
        TLRPC$TL_messages_getChats tLRPC$TL_messages_getChats2 = null;
        TLRPC$TL_channels_getChannels tLRPC$TL_channels_getChannels2 = null;
        for (Map.Entry entry2 : hashMap4.entrySet()) {
            TLRPC$InputPeer tLRPC$InputPeer = (TLRPC$InputPeer) entry2.getValue();
            if (tLRPC$InputPeer.chat_id != 0) {
                if (tLRPC$TL_messages_getChats2 == null) {
                    tLRPC$TL_messages_getChats = new TLRPC$TL_messages_getChats();
                    arrayList5.add(tLRPC$TL_messages_getChats);
                } else {
                    tLRPC$TL_messages_getChats = tLRPC$TL_messages_getChats2;
                }
                tLRPC$TL_messages_getChats.id.add(entry2.getKey());
                if (tLRPC$TL_messages_getChats.id.size() == i) {
                    sendLoadPeersRequest(tLRPC$TL_messages_getChats, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashMap3, hashSet);
                    tLRPC$TL_messages_getChats2 = null;
                } else {
                    tLRPC$TL_messages_getChats2 = tLRPC$TL_messages_getChats;
                }
            } else if (tLRPC$InputPeer.channel_id != 0) {
                if (tLRPC$TL_channels_getChannels2 == null) {
                    TLRPC$TL_channels_getChannels tLRPC$TL_channels_getChannels3 = new TLRPC$TL_channels_getChannels();
                    arrayList5.add(tLRPC$TL_channels_getChannels3);
                    tLRPC$TL_channels_getChannels = tLRPC$TL_channels_getChannels3;
                } else {
                    tLRPC$TL_channels_getChannels = tLRPC$TL_channels_getChannels2;
                }
                tLRPC$TL_channels_getChannels.id.add(getInputChannel(tLRPC$InputPeer));
                if (tLRPC$TL_channels_getChannels.id.size() == i) {
                    sendLoadPeersRequest(tLRPC$TL_channels_getChannels, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashMap3, hashSet);
                    tLRPC$TL_channels_getChannels2 = null;
                } else {
                    tLRPC$TL_channels_getChannels2 = tLRPC$TL_channels_getChannels;
                }
            }
        }
        if (tLRPC$TL_messages_getChats2 != null) {
            sendLoadPeersRequest(tLRPC$TL_messages_getChats2, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashMap3, hashSet);
        }
        if (tLRPC$TL_channels_getChannels2 != null) {
            sendLoadPeersRequest(tLRPC$TL_channels_getChannels2, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashMap3, hashSet);
        }
        loop3:
        while (true) {
            tLRPC$TL_messages_getPeerDialogs = null;
            for (Map.Entry entry3 : hashMap5.entrySet()) {
                if (tLRPC$TL_messages_getPeerDialogs == null) {
                    tLRPC$TL_messages_getPeerDialogs = new TLRPC$TL_messages_getPeerDialogs();
                    arrayList5.add(tLRPC$TL_messages_getPeerDialogs);
                }
                TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
                tLRPC$TL_inputDialogPeer.peer = (TLRPC$InputPeer) entry3.getValue();
                tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer);
                if (tLRPC$TL_messages_getPeerDialogs.peers.size() == i) {
                    sendLoadPeersRequest(tLRPC$TL_messages_getPeerDialogs, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashMap3, hashSet);
                }
            }
            break loop3;
        }
        if (tLRPC$TL_messages_getPeerDialogs != null) {
            sendLoadPeersRequest(tLRPC$TL_messages_getPeerDialogs, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashMap3, hashSet);
        }
    }

    /* access modifiers changed from: protected */
    public void processLoadedDialogFilters(ArrayList<DialogFilter> arrayList, TLRPC$messages_Dialogs tLRPC$messages_Dialogs, TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, ArrayList<TLRPC$User> arrayList2, ArrayList<TLRPC$Chat> arrayList3, ArrayList<TLRPC$EncryptedChat> arrayList4, int i) {
        Utilities.stageQueue.postRunnable(new Runnable(tLRPC$messages_Dialogs, arrayList4, tLRPC$messages_Dialogs2, i, arrayList, arrayList2, arrayList3) {
            public final /* synthetic */ TLRPC$messages_Dialogs f$1;
            public final /* synthetic */ ArrayList f$2;
            public final /* synthetic */ TLRPC$messages_Dialogs f$3;
            public final /* synthetic */ int f$4;
            public final /* synthetic */ ArrayList f$5;
            public final /* synthetic */ ArrayList f$6;
            public final /* synthetic */ ArrayList f$7;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
                this.f$7 = r8;
            }

            public final void run() {
                MessagesController.this.lambda$processLoadedDialogFilters$9$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7);
            }
        });
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Code restructure failed: missing block: B:25:0x00a2, code lost:
        if (r6 == ((long) (-r3.id))) goto L_0x00b7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:32:0x00b4, code lost:
        if (r3.migrated_to != null) goto L_0x00a4;
     */
    /* renamed from: lambda$processLoadedDialogFilters$9 */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$processLoadedDialogFilters$9$MessagesController(org.telegram.tgnet.TLRPC$messages_Dialogs r19, java.util.ArrayList r20, org.telegram.tgnet.TLRPC$messages_Dialogs r21, int r22, java.util.ArrayList r23, java.util.ArrayList r24, java.util.ArrayList r25) {
        /*
            r18 = this;
            r10 = r18
            r0 = r19
            r7 = r20
            r6 = r21
            android.util.LongSparseArray r8 = new android.util.LongSparseArray
            r8.<init>()
            android.util.LongSparseArray r9 = new android.util.LongSparseArray
            r9.<init>()
            android.util.SparseArray r1 = new android.util.SparseArray
            r1.<init>()
            android.util.SparseArray r2 = new android.util.SparseArray
            r2.<init>()
            r3 = 0
            java.lang.Integer r4 = java.lang.Integer.valueOf(r3)
            r5 = 0
        L_0x0022:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r11 = r0.users
            int r11 = r11.size()
            if (r5 >= r11) goto L_0x003a
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r11 = r0.users
            java.lang.Object r11 = r11.get(r5)
            org.telegram.tgnet.TLRPC$User r11 = (org.telegram.tgnet.TLRPC$User) r11
            int r12 = r11.id
            r1.put(r12, r11)
            int r5 = r5 + 1
            goto L_0x0022
        L_0x003a:
            r5 = 0
        L_0x003b:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r11 = r0.chats
            int r11 = r11.size()
            if (r5 >= r11) goto L_0x0053
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r11 = r0.chats
            java.lang.Object r11 = r11.get(r5)
            org.telegram.tgnet.TLRPC$Chat r11 = (org.telegram.tgnet.TLRPC$Chat) r11
            int r12 = r11.id
            r2.put(r12, r11)
            int r5 = r5 + 1
            goto L_0x003b
        L_0x0053:
            if (r7 == 0) goto L_0x006f
            android.util.SparseArray r5 = new android.util.SparseArray
            r5.<init>()
            int r11 = r20.size()
            r12 = 0
        L_0x005f:
            if (r12 >= r11) goto L_0x0070
            java.lang.Object r13 = r7.get(r12)
            org.telegram.tgnet.TLRPC$EncryptedChat r13 = (org.telegram.tgnet.TLRPC$EncryptedChat) r13
            int r14 = r13.id
            r5.put(r14, r13)
            int r12 = r12 + 1
            goto L_0x005f
        L_0x006f:
            r5 = 0
        L_0x0070:
            r15 = 0
        L_0x0071:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r11 = r0.messages
            int r11 = r11.size()
            r12 = 0
            if (r15 >= r11) goto L_0x00d6
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r11 = r0.messages
            java.lang.Object r11 = r11.get(r15)
            r14 = r11
            org.telegram.tgnet.TLRPC$Message r14 = (org.telegram.tgnet.TLRPC$Message) r14
            org.telegram.tgnet.TLRPC$Peer r11 = r14.peer_id
            int r3 = r11.channel_id
            if (r3 == 0) goto L_0x00a6
            java.lang.Object r3 = r2.get(r3)
            org.telegram.tgnet.TLRPC$Chat r3 = (org.telegram.tgnet.TLRPC$Chat) r3
            if (r3 == 0) goto L_0x00b7
            boolean r11 = r3.left
            if (r11 == 0) goto L_0x00b7
            long r6 = r10.promoDialogId
            int r11 = (r6 > r12 ? 1 : (r6 == r12 ? 0 : -1))
            if (r11 == 0) goto L_0x00a4
            int r3 = r3.id
            int r3 = -r3
            long r11 = (long) r3
            int r3 = (r6 > r11 ? 1 : (r6 == r11 ? 0 : -1))
            if (r3 == 0) goto L_0x00b7
        L_0x00a4:
            r6 = r15
            goto L_0x00ce
        L_0x00a6:
            int r3 = r11.chat_id
            if (r3 == 0) goto L_0x00b7
            java.lang.Object r3 = r2.get(r3)
            org.telegram.tgnet.TLRPC$Chat r3 = (org.telegram.tgnet.TLRPC$Chat) r3
            if (r3 == 0) goto L_0x00b7
            org.telegram.tgnet.TLRPC$InputChannel r3 = r3.migrated_to
            if (r3 == 0) goto L_0x00b7
            goto L_0x00a4
        L_0x00b7:
            org.telegram.messenger.MessageObject r3 = new org.telegram.messenger.MessageObject
            int r12 = r10.currentAccount
            r16 = 0
            r17 = 1
            r11 = r3
            r13 = r14
            r14 = r1
            r6 = r15
            r15 = r2
            r11.<init>((int) r12, (org.telegram.tgnet.TLRPC$Message) r13, (android.util.SparseArray<org.telegram.tgnet.TLRPC$User>) r14, (android.util.SparseArray<org.telegram.tgnet.TLRPC$Chat>) r15, (boolean) r16, (boolean) r17)
            long r11 = r3.getDialogId()
            r9.put(r11, r3)
        L_0x00ce:
            int r15 = r6 + 1
            r7 = r20
            r6 = r21
            r3 = 0
            goto L_0x0071
        L_0x00d6:
            r3 = 0
        L_0x00d7:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r6 = r0.dialogs
            int r6 = r6.size()
            if (r3 >= r6) goto L_0x01ca
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r6 = r0.dialogs
            java.lang.Object r6 = r6.get(r3)
            org.telegram.tgnet.TLRPC$Dialog r6 = (org.telegram.tgnet.TLRPC$Dialog) r6
            org.telegram.messenger.DialogObject.initDialog(r6)
            long r14 = r6.id
            int r7 = (r14 > r12 ? 1 : (r14 == r12 ? 0 : -1))
            if (r7 != 0) goto L_0x00f2
            goto L_0x01c4
        L_0x00f2:
            int r7 = (int) r14
            r11 = 32
            long r14 = r14 >> r11
            int r11 = (int) r14
            if (r7 != 0) goto L_0x0103
            if (r5 == 0) goto L_0x0103
            java.lang.Object r7 = r5.get(r11)
            if (r7 != 0) goto L_0x0103
            goto L_0x01c4
        L_0x0103:
            long r14 = r10.promoDialogId
            int r7 = (r14 > r12 ? 1 : (r14 == r12 ? 0 : -1))
            if (r7 == 0) goto L_0x0111
            long r12 = r6.id
            int r7 = (r14 > r12 ? 1 : (r14 == r12 ? 0 : -1))
            if (r7 != 0) goto L_0x0111
            r10.promoDialog = r6
        L_0x0111:
            int r7 = r6.last_message_date
            if (r7 != 0) goto L_0x0125
            long r11 = r6.id
            java.lang.Object r7 = r9.get(r11)
            org.telegram.messenger.MessageObject r7 = (org.telegram.messenger.MessageObject) r7
            if (r7 == 0) goto L_0x0125
            org.telegram.tgnet.TLRPC$Message r7 = r7.messageOwner
            int r7 = r7.date
            r6.last_message_date = r7
        L_0x0125:
            boolean r7 = org.telegram.messenger.DialogObject.isChannel(r6)
            if (r7 == 0) goto L_0x0157
            long r11 = r6.id
            int r7 = (int) r11
            int r7 = -r7
            java.lang.Object r7 = r2.get(r7)
            org.telegram.tgnet.TLRPC$Chat r7 = (org.telegram.tgnet.TLRPC$Chat) r7
            if (r7 == 0) goto L_0x014b
            boolean r7 = r7.left
            if (r7 == 0) goto L_0x014b
            long r11 = r10.promoDialogId
            r13 = 0
            int r7 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1))
            if (r7 == 0) goto L_0x01c4
            long r13 = r6.id
            int r7 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1))
            if (r7 == 0) goto L_0x014b
            goto L_0x01c4
        L_0x014b:
            android.util.SparseIntArray r7 = r10.channelsPts
            long r11 = r6.id
            int r12 = (int) r11
            int r11 = -r12
            int r12 = r6.pts
            r7.put(r11, r12)
            goto L_0x016b
        L_0x0157:
            long r11 = r6.id
            int r7 = (int) r11
            if (r7 >= 0) goto L_0x016b
            int r7 = (int) r11
            int r7 = -r7
            java.lang.Object r7 = r2.get(r7)
            org.telegram.tgnet.TLRPC$Chat r7 = (org.telegram.tgnet.TLRPC$Chat) r7
            if (r7 == 0) goto L_0x016b
            org.telegram.tgnet.TLRPC$InputChannel r7 = r7.migrated_to
            if (r7 == 0) goto L_0x016b
            goto L_0x01c4
        L_0x016b:
            long r11 = r6.id
            r8.put(r11, r6)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r7 = r10.dialogs_read_inbox_max
            long r11 = r6.id
            java.lang.Long r11 = java.lang.Long.valueOf(r11)
            java.lang.Object r7 = r7.get(r11)
            java.lang.Integer r7 = (java.lang.Integer) r7
            if (r7 != 0) goto L_0x0181
            r7 = r4
        L_0x0181:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r11 = r10.dialogs_read_inbox_max
            long r12 = r6.id
            java.lang.Long r12 = java.lang.Long.valueOf(r12)
            int r7 = r7.intValue()
            int r13 = r6.read_inbox_max_id
            int r7 = java.lang.Math.max(r7, r13)
            java.lang.Integer r7 = java.lang.Integer.valueOf(r7)
            r11.put(r12, r7)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r7 = r10.dialogs_read_outbox_max
            long r11 = r6.id
            java.lang.Long r11 = java.lang.Long.valueOf(r11)
            java.lang.Object r7 = r7.get(r11)
            java.lang.Integer r7 = (java.lang.Integer) r7
            if (r7 != 0) goto L_0x01ab
            r7 = r4
        L_0x01ab:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r11 = r10.dialogs_read_outbox_max
            long r12 = r6.id
            java.lang.Long r12 = java.lang.Long.valueOf(r12)
            int r7 = r7.intValue()
            int r6 = r6.read_outbox_max_id
            int r6 = java.lang.Math.max(r7, r6)
            java.lang.Integer r6 = java.lang.Integer.valueOf(r6)
            r11.put(r12, r6)
        L_0x01c4:
            int r3 = r3 + 1
            r12 = 0
            goto L_0x00d7
        L_0x01ca:
            r6 = r21
            if (r6 == 0) goto L_0x0268
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r0 = r6.dialogs
            boolean r0 = r0.isEmpty()
            if (r0 != 0) goto L_0x0268
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r0 = r6.messages
            org.telegram.messenger.ImageLoader.saveMessagesThumbs(r0)
            r0 = 0
        L_0x01dc:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r2 = r6.messages
            int r2 = r2.size()
            if (r0 >= r2) goto L_0x0260
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r2 = r6.messages
            java.lang.Object r2 = r2.get(r0)
            org.telegram.tgnet.TLRPC$Message r2 = (org.telegram.tgnet.TLRPC$Message) r2
            org.telegram.tgnet.TLRPC$MessageAction r3 = r2.action
            boolean r4 = r3 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatDeleteUser
            if (r4 == 0) goto L_0x020d
            int r3 = r3.user_id
            java.lang.Object r3 = r1.get(r3)
            org.telegram.tgnet.TLRPC$User r3 = (org.telegram.tgnet.TLRPC$User) r3
            if (r3 == 0) goto L_0x020d
            boolean r3 = r3.bot
            if (r3 == 0) goto L_0x020d
            org.telegram.tgnet.TLRPC$TL_replyKeyboardHide r3 = new org.telegram.tgnet.TLRPC$TL_replyKeyboardHide
            r3.<init>()
            r2.reply_markup = r3
            int r3 = r2.flags
            r3 = r3 | 64
            r2.flags = r3
        L_0x020d:
            org.telegram.tgnet.TLRPC$MessageAction r3 = r2.action
            boolean r4 = r3 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatMigrateTo
            if (r4 != 0) goto L_0x0257
            boolean r3 = r3 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChannelCreate
            if (r3 == 0) goto L_0x0218
            goto L_0x0257
        L_0x0218:
            boolean r3 = r2.out
            if (r3 == 0) goto L_0x021f
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r3 = r10.dialogs_read_outbox_max
            goto L_0x0221
        L_0x021f:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r3 = r10.dialogs_read_inbox_max
        L_0x0221:
            long r4 = r2.dialog_id
            java.lang.Long r4 = java.lang.Long.valueOf(r4)
            java.lang.Object r4 = r3.get(r4)
            java.lang.Integer r4 = (java.lang.Integer) r4
            if (r4 != 0) goto L_0x0248
            org.telegram.messenger.MessagesStorage r4 = r18.getMessagesStorage()
            boolean r5 = r2.out
            long r11 = r2.dialog_id
            int r4 = r4.getDialogReadMax(r5, r11)
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)
            long r11 = r2.dialog_id
            java.lang.Long r5 = java.lang.Long.valueOf(r11)
            r3.put(r5, r4)
        L_0x0248:
            int r3 = r4.intValue()
            int r4 = r2.id
            if (r3 >= r4) goto L_0x0252
            r3 = 1
            goto L_0x0253
        L_0x0252:
            r3 = 0
        L_0x0253:
            r2.unread = r3
            r3 = 0
            goto L_0x025c
        L_0x0257:
            r3 = 0
            r2.unread = r3
            r2.media_unread = r3
        L_0x025c:
            int r0 = r0 + 1
            goto L_0x01dc
        L_0x0260:
            r3 = 0
            org.telegram.messenger.MessagesStorage r0 = r18.getMessagesStorage()
            r0.putDialogs(r6, r3)
        L_0x0268:
            org.telegram.messenger.-$$Lambda$MessagesController$2JltGn0zG8E-uN61lHWcDDEraJk r11 = new org.telegram.messenger.-$$Lambda$MessagesController$2JltGn0zG8E-uN61lHWcDDEraJk
            r0 = r11
            r1 = r18
            r2 = r22
            r3 = r23
            r4 = r24
            r5 = r25
            r6 = r21
            r7 = r20
            r0.<init>(r2, r3, r4, r5, r6, r7, r8, r9)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r11)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$processLoadedDialogFilters$9$MessagesController(org.telegram.tgnet.TLRPC$messages_Dialogs, java.util.ArrayList, org.telegram.tgnet.TLRPC$messages_Dialogs, int, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList):void");
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$8 */
    public /* synthetic */ void lambda$null$8$MessagesController(int i, ArrayList arrayList, ArrayList arrayList2, ArrayList arrayList3, TLRPC$messages_Dialogs tLRPC$messages_Dialogs, ArrayList arrayList4, LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        int i2 = i;
        TLRPC$messages_Dialogs tLRPC$messages_Dialogs2 = tLRPC$messages_Dialogs;
        ArrayList arrayList5 = arrayList4;
        LongSparseArray longSparseArray3 = longSparseArray;
        if (i2 != 2) {
            this.dialogFilters = arrayList;
            this.dialogFiltersById.clear();
            int size = this.dialogFilters.size();
            for (int i3 = 0; i3 < size; i3++) {
                DialogFilter dialogFilter = this.dialogFilters.get(i3);
                this.dialogFiltersById.put(dialogFilter.id, dialogFilter);
            }
            Collections.sort(this.dialogFilters, $$Lambda$MessagesController$nMGtzfir1yPRHu26rv32R8Ts.INSTANCE);
            putUsers(arrayList2, true);
            putChats(arrayList3, true);
            this.dialogFiltersLoaded = true;
            getNotificationCenter().postNotificationName(NotificationCenter.dialogFiltersUpdated, new Object[0]);
            if (i2 == 0) {
                loadRemoteFilters(false);
            }
            if (tLRPC$messages_Dialogs2 != null && !tLRPC$messages_Dialogs2.dialogs.isEmpty()) {
                applyDialogsNotificationsSettings(tLRPC$messages_Dialogs2.dialogs);
            }
            if (arrayList5 != null) {
                for (int i4 = 0; i4 < arrayList4.size(); i4++) {
                    TLRPC$EncryptedChat tLRPC$EncryptedChat = (TLRPC$EncryptedChat) arrayList5.get(i4);
                    if ((tLRPC$EncryptedChat instanceof TLRPC$TL_encryptedChat) && AndroidUtilities.getMyLayerVersion(tLRPC$EncryptedChat.layer) < 101) {
                        getSecretChatHelper().sendNotifyLayerMessage(tLRPC$EncryptedChat, (TLRPC$Message) null);
                    }
                    putEncryptedChat(tLRPC$EncryptedChat, true);
                }
            }
            for (int i5 = 0; i5 < longSparseArray.size(); i5++) {
                long keyAt = longSparseArray3.keyAt(i5);
                TLRPC$Dialog tLRPC$Dialog = (TLRPC$Dialog) longSparseArray3.valueAt(i5);
                TLRPC$Dialog tLRPC$Dialog2 = this.dialogs_dict.get(keyAt);
                if (tLRPC$messages_Dialogs2 != null && tLRPC$messages_Dialogs2.dialogs.contains(tLRPC$Dialog)) {
                    if (tLRPC$Dialog.draft instanceof TLRPC$TL_draftMessage) {
                        getMediaDataController().saveDraft(tLRPC$Dialog.id, 0, tLRPC$Dialog.draft, (TLRPC$Message) null, false);
                    }
                    if (tLRPC$Dialog2 != null) {
                        tLRPC$Dialog2.notify_settings = tLRPC$Dialog.notify_settings;
                    }
                }
                MessageObject messageObject = (MessageObject) longSparseArray2.get(tLRPC$Dialog.id);
                if (tLRPC$Dialog2 == null) {
                    this.dialogs_dict.put(keyAt, tLRPC$Dialog);
                    this.dialogMessage.put(keyAt, messageObject);
                    if (messageObject != null && messageObject.messageOwner.peer_id.channel_id == 0) {
                        this.dialogMessagesByIds.put(messageObject.getId(), messageObject);
                        long j = messageObject.messageOwner.random_id;
                        if (j != 0) {
                            this.dialogMessagesByRandomIds.put(j, messageObject);
                        }
                    }
                } else {
                    tLRPC$Dialog2.pinned = tLRPC$Dialog.pinned;
                    tLRPC$Dialog2.pinnedNum = tLRPC$Dialog.pinnedNum;
                    MessageObject messageObject2 = this.dialogMessage.get(keyAt);
                    if ((messageObject2 == null || !messageObject2.deleted) && messageObject2 != null && tLRPC$Dialog2.top_message <= 0) {
                        if (messageObject == null || messageObject.messageOwner.date > messageObject2.messageOwner.date) {
                            this.dialogs_dict.put(keyAt, tLRPC$Dialog);
                            this.dialogMessage.put(keyAt, messageObject);
                            if (messageObject2.messageOwner.peer_id.channel_id == 0) {
                                this.dialogMessagesByIds.remove(messageObject2.getId());
                            }
                            if (messageObject != null) {
                                if (messageObject2.getId() == messageObject.getId()) {
                                    messageObject.deleted = messageObject2.deleted;
                                }
                                if (messageObject.messageOwner.peer_id.channel_id == 0) {
                                    this.dialogMessagesByIds.put(messageObject.getId(), messageObject);
                                    long j2 = messageObject.messageOwner.random_id;
                                    if (j2 != 0) {
                                        this.dialogMessagesByRandomIds.put(j2, messageObject);
                                    }
                                }
                            }
                            long j3 = messageObject2.messageOwner.random_id;
                            if (j3 != 0) {
                                this.dialogMessagesByRandomIds.remove(j3);
                            }
                        }
                    } else if (tLRPC$Dialog.top_message >= tLRPC$Dialog2.top_message) {
                        this.dialogs_dict.put(keyAt, tLRPC$Dialog);
                        this.dialogMessage.put(keyAt, messageObject);
                        if (messageObject2 != null) {
                            if (messageObject2.messageOwner.peer_id.channel_id == 0) {
                                this.dialogMessagesByIds.remove(messageObject2.getId());
                            }
                            long j4 = messageObject2.messageOwner.random_id;
                            if (j4 != 0) {
                                this.dialogMessagesByRandomIds.remove(j4);
                            }
                        }
                        if (messageObject != null && messageObject.messageOwner.peer_id.channel_id == 0) {
                            if (messageObject2 != null && messageObject2.getId() == messageObject.getId()) {
                                messageObject.deleted = messageObject2.deleted;
                            }
                            this.dialogMessagesByIds.put(messageObject.getId(), messageObject);
                            long j5 = messageObject.messageOwner.random_id;
                            if (j5 != 0) {
                                this.dialogMessagesByRandomIds.put(j5, messageObject);
                            }
                        }
                    }
                }
            }
            this.allDialogs.clear();
            int size2 = this.dialogs_dict.size();
            for (int i6 = 0; i6 < size2; i6++) {
                this.allDialogs.add(this.dialogs_dict.valueAt(i6));
            }
            sortDialogs((SparseArray<TLRPC$Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
        if (i2 != 0) {
            getUserConfig().filtersLoaded = true;
            getUserConfig().saveConfig(false);
            this.loadingRemoteFilters = false;
            getNotificationCenter().postNotificationName(NotificationCenter.filterSettingsUpdated, new Object[0]);
        }
    }

    static /* synthetic */ int lambda$null$7(DialogFilter dialogFilter, DialogFilter dialogFilter2) {
        int i = dialogFilter.order;
        int i2 = dialogFilter2.order;
        if (i > i2) {
            return 1;
        }
        return i < i2 ? -1 : 0;
    }

    public void loadSuggestedFilters() {
        if (!this.loadingSuggestedFilters) {
            this.loadingSuggestedFilters = true;
            getConnectionsManager().sendRequest(new TLRPC$TL_messages_getSuggestedDialogFilters(), new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$loadSuggestedFilters$11$MessagesController(tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$loadSuggestedFilters$11 */
    public /* synthetic */ void lambda$loadSuggestedFilters$11$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable(tLObject) {
            public final /* synthetic */ TLObject f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$10$MessagesController(this.f$1);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$10 */
    public /* synthetic */ void lambda$null$10$MessagesController(TLObject tLObject) {
        this.loadingSuggestedFilters = false;
        this.suggestedFilters.clear();
        if (tLObject instanceof TLRPC$Vector) {
            TLRPC$Vector tLRPC$Vector = (TLRPC$Vector) tLObject;
            int size = tLRPC$Vector.objects.size();
            for (int i = 0; i < size; i++) {
                this.suggestedFilters.add((TLRPC$TL_dialogFilterSuggested) tLRPC$Vector.objects.get(i));
            }
        }
        getNotificationCenter().postNotificationName(NotificationCenter.suggestedFiltersLoaded, new Object[0]);
    }

    public void loadRemoteFilters(boolean z) {
        if (!this.loadingRemoteFilters && getUserConfig().isClientActivated()) {
            if (z || !getUserConfig().filtersLoaded) {
                if (z) {
                    getUserConfig().filtersLoaded = false;
                    getUserConfig().saveConfig(false);
                }
                getConnectionsManager().sendRequest(new TLRPC$TL_messages_getDialogFilters(), new RequestDelegate() {
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$loadRemoteFilters$13$MessagesController(tLObject, tLRPC$TL_error);
                    }
                });
            }
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$loadRemoteFilters$13 */
    public /* synthetic */ void lambda$loadRemoteFilters$13$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject instanceof TLRPC$Vector) {
            getMessagesStorage().checkLoadedRemoteFilters((TLRPC$Vector) tLObject);
        } else {
            AndroidUtilities.runOnUIThread(new Runnable() {
                public final void run() {
                    MessagesController.this.lambda$null$12$MessagesController();
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$12 */
    public /* synthetic */ void lambda$null$12$MessagesController() {
        this.loadingRemoteFilters = false;
    }

    public void selectDialogFilter(DialogFilter dialogFilter, int i) {
        DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
        if (dialogFilterArr[i] != dialogFilter) {
            DialogFilter dialogFilter2 = dialogFilterArr[i];
            dialogFilterArr[i] = dialogFilter;
            char c = 1;
            if (dialogFilterArr[i == 0 ? (char) 1 : 0] == dialogFilter) {
                if (i != 0) {
                    c = 0;
                }
                dialogFilterArr[c] = null;
            }
            if (dialogFilterArr[i] != null) {
                sortDialogs((SparseArray<TLRPC$Chat>) null);
            } else if (dialogFilter2 != null) {
                dialogFilter2.dialogs.clear();
            }
        }
    }

    public void onFilterUpdate(DialogFilter dialogFilter) {
        for (int i = 0; i < 2; i++) {
            if (this.selectedDialogFilter[i] == dialogFilter) {
                sortDialogs((SparseArray<TLRPC$Chat>) null);
                getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
                return;
            }
        }
    }

    public void addFilter(DialogFilter dialogFilter, boolean z) {
        if (z) {
            int i = 254;
            int size = this.dialogFilters.size();
            for (int i2 = 0; i2 < size; i2++) {
                i = Math.min(i, this.dialogFilters.get(i2).order);
            }
            dialogFilter.order = i - 1;
            this.dialogFilters.add(0, dialogFilter);
        } else {
            int size2 = this.dialogFilters.size();
            int i3 = 0;
            for (int i4 = 0; i4 < size2; i4++) {
                i3 = Math.max(i3, this.dialogFilters.get(i4).order);
            }
            dialogFilter.order = i3 + 1;
            this.dialogFilters.add(dialogFilter);
        }
        this.dialogFiltersById.put(dialogFilter.id, dialogFilter);
    }

    public void removeFilter(DialogFilter dialogFilter) {
        this.dialogFilters.remove(dialogFilter);
        this.dialogFiltersById.remove(dialogFilter.id);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogFiltersUpdated, new Object[0]);
    }

    private void loadAppConfig() {
        if (!this.loadingAppConfig) {
            this.loadingAppConfig = true;
            getConnectionsManager().sendRequest(new TLRPC$TL_help_getAppConfig(), new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$loadAppConfig$15$MessagesController(tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$loadAppConfig$15 */
    public /* synthetic */ void lambda$loadAppConfig$15$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable(tLObject) {
            public final /* synthetic */ TLObject f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$14$MessagesController(this.f$1);
            }
        });
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* JADX WARNING: Code restructure failed: missing block: B:180:0x044d, code lost:
        r7 = true;
        r8 = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:197:0x04ae, code lost:
        r7 = true;
     */
    /* renamed from: lambda$null$14 */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$null$14$MessagesController(org.telegram.tgnet.TLObject r28) {
        /*
            r27 = this;
            r1 = r27
            r0 = r28
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonObject
            if (r2 == 0) goto L_0x055b
            android.content.SharedPreferences r2 = r1.mainPreferences
            android.content.SharedPreferences$Editor r2 = r2.edit()
            r4 = r0
            org.telegram.tgnet.TLRPC$TL_jsonObject r4 = (org.telegram.tgnet.TLRPC$TL_jsonObject) r4
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_jsonObjectValue> r0 = r4.value
            int r5 = r0.size()
            r6 = 0
            r7 = 0
            r8 = 0
        L_0x001a:
            if (r6 >= r5) goto L_0x0546
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_jsonObjectValue> r0 = r4.value
            java.lang.Object r0 = r0.get(r6)
            org.telegram.tgnet.TLRPC$TL_jsonObjectValue r0 = (org.telegram.tgnet.TLRPC$TL_jsonObjectValue) r0
            java.lang.String r9 = r0.key
            r9.hashCode()
            r10 = -1
            int r11 = r9.hashCode()
            switch(r11) {
                case -1688620344: goto L_0x00d5;
                case -1683918311: goto L_0x00ca;
                case -1391086521: goto L_0x00bf;
                case -1032177933: goto L_0x00b4;
                case -404170231: goto L_0x00a9;
                case -253815153: goto L_0x009e;
                case -232883529: goto L_0x0093;
                case -111779186: goto L_0x0088;
                case -76561797: goto L_0x0079;
                case -24016028: goto L_0x006b;
                case 222975416: goto L_0x005d;
                case 684764449: goto L_0x004f;
                case 1850325103: goto L_0x0041;
                case 2136829446: goto L_0x0033;
                default: goto L_0x0031;
            }
        L_0x0031:
            goto L_0x00df
        L_0x0033:
            java.lang.String r11 = "dialog_filters_enabled"
            boolean r9 = r9.equals(r11)
            if (r9 != 0) goto L_0x003d
            goto L_0x00df
        L_0x003d:
            r10 = 13
            goto L_0x00df
        L_0x0041:
            java.lang.String r11 = "emojies_sounds"
            boolean r9 = r9.equals(r11)
            if (r9 != 0) goto L_0x004b
            goto L_0x00df
        L_0x004b:
            r10 = 12
            goto L_0x00df
        L_0x004f:
            java.lang.String r11 = "save_gifs_with_stickers"
            boolean r9 = r9.equals(r11)
            if (r9 != 0) goto L_0x0059
            goto L_0x00df
        L_0x0059:
            r10 = 11
            goto L_0x00df
        L_0x005d:
            java.lang.String r11 = "gif_search_emojies"
            boolean r9 = r9.equals(r11)
            if (r9 != 0) goto L_0x0067
            goto L_0x00df
        L_0x0067:
            r10 = 10
            goto L_0x00df
        L_0x006b:
            java.lang.String r11 = "emojies_animated_zoom"
            boolean r9 = r9.equals(r11)
            if (r9 != 0) goto L_0x0075
            goto L_0x00df
        L_0x0075:
            r10 = 9
            goto L_0x00df
        L_0x0079:
            java.lang.String r11 = "youtube_pip"
            boolean r9 = r9.equals(r11)
            if (r9 != 0) goto L_0x0084
            goto L_0x00df
        L_0x0084:
            r10 = 8
            goto L_0x00df
        L_0x0088:
            java.lang.String r11 = "autoarchive_setting_available"
            boolean r9 = r9.equals(r11)
            if (r9 != 0) goto L_0x0091
            goto L_0x00df
        L_0x0091:
            r10 = 7
            goto L_0x00df
        L_0x0093:
            java.lang.String r11 = "emojies_send_dice_success"
            boolean r9 = r9.equals(r11)
            if (r9 != 0) goto L_0x009c
            goto L_0x00df
        L_0x009c:
            r10 = 6
            goto L_0x00df
        L_0x009e:
            java.lang.String r11 = "background_connection"
            boolean r9 = r9.equals(r11)
            if (r9 != 0) goto L_0x00a7
            goto L_0x00df
        L_0x00a7:
            r10 = 5
            goto L_0x00df
        L_0x00a9:
            java.lang.String r11 = "keep_alive_service"
            boolean r9 = r9.equals(r11)
            if (r9 != 0) goto L_0x00b2
            goto L_0x00df
        L_0x00b2:
            r10 = 4
            goto L_0x00df
        L_0x00b4:
            java.lang.String r11 = "emojies_send_dice"
            boolean r9 = r9.equals(r11)
            if (r9 != 0) goto L_0x00bd
            goto L_0x00df
        L_0x00bd:
            r10 = 3
            goto L_0x00df
        L_0x00bf:
            java.lang.String r11 = "pending_suggestions"
            boolean r9 = r9.equals(r11)
            if (r9 != 0) goto L_0x00c8
            goto L_0x00df
        L_0x00c8:
            r10 = 2
            goto L_0x00df
        L_0x00ca:
            java.lang.String r11 = "qr_login_camera"
            boolean r9 = r9.equals(r11)
            if (r9 != 0) goto L_0x00d3
            goto L_0x00df
        L_0x00d3:
            r10 = 1
            goto L_0x00df
        L_0x00d5:
            java.lang.String r11 = "dialog_filters_tooltip"
            boolean r9 = r9.equals(r11)
            if (r9 != 0) goto L_0x00de
            goto L_0x00df
        L_0x00de:
            r10 = 0
        L_0x00df:
            java.lang.String r9 = ""
            java.lang.String r11 = "️"
            switch(r10) {
                case 0: goto L_0x0517;
                case 1: goto L_0x04fd;
                case 2: goto L_0x04b1;
                case 3: goto L_0x046b;
                case 4: goto L_0x0451;
                case 5: goto L_0x0434;
                case 6: goto L_0x0330;
                case 7: goto L_0x0315;
                case 8: goto L_0x02f3;
                case 9: goto L_0x02d4;
                case 10: goto L_0x025e;
                case 11: goto L_0x0243;
                case 12: goto L_0x0104;
                case 13: goto L_0x00e8;
                default: goto L_0x00e7;
            }
        L_0x00e7:
            goto L_0x00fe
        L_0x00e8:
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value
            boolean r9 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonBool
            if (r9 == 0) goto L_0x00fe
            org.telegram.tgnet.TLRPC$TL_jsonBool r0 = (org.telegram.tgnet.TLRPC$TL_jsonBool) r0
            boolean r0 = r0.value
            boolean r9 = r1.filtersEnabled
            if (r0 == r9) goto L_0x00fe
            r1.filtersEnabled = r0
            java.lang.String r7 = "filtersEnabled"
            r2.putBoolean(r7, r0)
            r7 = 1
        L_0x00fe:
            r25 = r4
            r26 = r5
            goto L_0x053e
        L_0x0104:
            java.util.HashMap r10 = new java.util.HashMap     // Catch:{ Exception -> 0x0239 }
            r10.<init>()     // Catch:{ Exception -> 0x0239 }
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value     // Catch:{ Exception -> 0x0239 }
            boolean r13 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonObject     // Catch:{ Exception -> 0x0239 }
            if (r13 == 0) goto L_0x01d3
            org.telegram.tgnet.TLRPC$TL_jsonObject r0 = (org.telegram.tgnet.TLRPC$TL_jsonObject) r0     // Catch:{ Exception -> 0x0239 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_jsonObjectValue> r13 = r0.value     // Catch:{ Exception -> 0x0239 }
            int r13 = r13.size()     // Catch:{ Exception -> 0x0239 }
            r14 = 0
        L_0x0118:
            if (r14 >= r13) goto L_0x01d3
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_jsonObjectValue> r15 = r0.value     // Catch:{ Exception -> 0x0239 }
            java.lang.Object r15 = r15.get(r14)     // Catch:{ Exception -> 0x0239 }
            org.telegram.tgnet.TLRPC$TL_jsonObjectValue r15 = (org.telegram.tgnet.TLRPC$TL_jsonObjectValue) r15     // Catch:{ Exception -> 0x0239 }
            org.telegram.tgnet.TLRPC$JSONValue r12 = r15.value     // Catch:{ Exception -> 0x0239 }
            boolean r3 = r12 instanceof org.telegram.tgnet.TLRPC$TL_jsonObject     // Catch:{ Exception -> 0x0239 }
            if (r3 == 0) goto L_0x01c3
            org.telegram.tgnet.TLRPC$TL_jsonObject r12 = (org.telegram.tgnet.TLRPC$TL_jsonObject) r12     // Catch:{ Exception -> 0x0239 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_jsonObjectValue> r3 = r12.value     // Catch:{ Exception -> 0x0239 }
            int r3 = r3.size()     // Catch:{ Exception -> 0x0239 }
            r17 = 0
            r16 = r0
            r20 = r17
            r22 = r20
            r0 = 0
            r24 = 0
        L_0x013b:
            if (r0 >= r3) goto L_0x01a4
            r19 = r3
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_jsonObjectValue> r3 = r12.value     // Catch:{ Exception -> 0x0239 }
            java.lang.Object r3 = r3.get(r0)     // Catch:{ Exception -> 0x0239 }
            org.telegram.tgnet.TLRPC$TL_jsonObjectValue r3 = (org.telegram.tgnet.TLRPC$TL_jsonObjectValue) r3     // Catch:{ Exception -> 0x0239 }
            r25 = r4
            org.telegram.tgnet.TLRPC$JSONValue r4 = r3.value     // Catch:{ Exception -> 0x01a1 }
            boolean r4 = r4 instanceof org.telegram.tgnet.TLRPC$TL_jsonString     // Catch:{ Exception -> 0x01a1 }
            if (r4 == 0) goto L_0x0196
            java.lang.String r4 = "id"
            r26 = r5
            java.lang.String r5 = r3.key     // Catch:{ Exception -> 0x0237 }
            boolean r4 = r4.equals(r5)     // Catch:{ Exception -> 0x0237 }
            if (r4 == 0) goto L_0x016a
            org.telegram.tgnet.TLRPC$JSONValue r3 = r3.value     // Catch:{ Exception -> 0x0237 }
            org.telegram.tgnet.TLRPC$TL_jsonString r3 = (org.telegram.tgnet.TLRPC$TL_jsonString) r3     // Catch:{ Exception -> 0x0237 }
            java.lang.String r3 = r3.value     // Catch:{ Exception -> 0x0237 }
            java.lang.Long r3 = org.telegram.messenger.Utilities.parseLong(r3)     // Catch:{ Exception -> 0x0237 }
            long r20 = r3.longValue()     // Catch:{ Exception -> 0x0237 }
            goto L_0x0198
        L_0x016a:
            java.lang.String r4 = "access_hash"
            java.lang.String r5 = r3.key     // Catch:{ Exception -> 0x0237 }
            boolean r4 = r4.equals(r5)     // Catch:{ Exception -> 0x0237 }
            if (r4 == 0) goto L_0x0183
            org.telegram.tgnet.TLRPC$JSONValue r3 = r3.value     // Catch:{ Exception -> 0x0237 }
            org.telegram.tgnet.TLRPC$TL_jsonString r3 = (org.telegram.tgnet.TLRPC$TL_jsonString) r3     // Catch:{ Exception -> 0x0237 }
            java.lang.String r3 = r3.value     // Catch:{ Exception -> 0x0237 }
            java.lang.Long r3 = org.telegram.messenger.Utilities.parseLong(r3)     // Catch:{ Exception -> 0x0237 }
            long r22 = r3.longValue()     // Catch:{ Exception -> 0x0237 }
            goto L_0x0198
        L_0x0183:
            java.lang.String r4 = "file_reference_base64"
            java.lang.String r5 = r3.key     // Catch:{ Exception -> 0x0237 }
            boolean r4 = r4.equals(r5)     // Catch:{ Exception -> 0x0237 }
            if (r4 == 0) goto L_0x0198
            org.telegram.tgnet.TLRPC$JSONValue r3 = r3.value     // Catch:{ Exception -> 0x0237 }
            org.telegram.tgnet.TLRPC$TL_jsonString r3 = (org.telegram.tgnet.TLRPC$TL_jsonString) r3     // Catch:{ Exception -> 0x0237 }
            java.lang.String r3 = r3.value     // Catch:{ Exception -> 0x0237 }
            r24 = r3
            goto L_0x0198
        L_0x0196:
            r26 = r5
        L_0x0198:
            int r0 = r0 + 1
            r3 = r19
            r4 = r25
            r5 = r26
            goto L_0x013b
        L_0x01a1:
            r0 = move-exception
            goto L_0x023c
        L_0x01a4:
            r25 = r4
            r26 = r5
            int r0 = (r20 > r17 ? 1 : (r20 == r17 ? 0 : -1))
            if (r0 == 0) goto L_0x01c9
            int r0 = (r22 > r17 ? 1 : (r22 == r17 ? 0 : -1))
            if (r0 == 0) goto L_0x01c9
            if (r24 == 0) goto L_0x01c9
            java.lang.String r0 = r15.key     // Catch:{ Exception -> 0x0237 }
            java.lang.String r0 = r0.replace(r11, r9)     // Catch:{ Exception -> 0x0237 }
            org.telegram.messenger.MessagesController$EmojiSound r3 = new org.telegram.messenger.MessagesController$EmojiSound     // Catch:{ Exception -> 0x0237 }
            r19 = r3
            r19.<init>((long) r20, (long) r22, (java.lang.String) r24)     // Catch:{ Exception -> 0x0237 }
            r10.put(r0, r3)     // Catch:{ Exception -> 0x0237 }
            goto L_0x01c9
        L_0x01c3:
            r16 = r0
            r25 = r4
            r26 = r5
        L_0x01c9:
            int r14 = r14 + 1
            r0 = r16
            r4 = r25
            r5 = r26
            goto L_0x0118
        L_0x01d3:
            r25 = r4
            r26 = r5
            java.util.HashMap<java.lang.String, org.telegram.messenger.MessagesController$EmojiSound> r0 = r1.emojiSounds     // Catch:{ Exception -> 0x0237 }
            boolean r0 = r0.equals(r10)     // Catch:{ Exception -> 0x0237 }
            if (r0 != 0) goto L_0x053e
            r1.emojiSounds = r10     // Catch:{ Exception -> 0x0237 }
            org.telegram.tgnet.SerializedData r0 = new org.telegram.tgnet.SerializedData     // Catch:{ Exception -> 0x0237 }
            r0.<init>()     // Catch:{ Exception -> 0x0237 }
            java.util.HashMap<java.lang.String, org.telegram.messenger.MessagesController$EmojiSound> r3 = r1.emojiSounds     // Catch:{ Exception -> 0x0237 }
            int r3 = r3.size()     // Catch:{ Exception -> 0x0237 }
            r0.writeInt32(r3)     // Catch:{ Exception -> 0x0237 }
            java.util.HashMap<java.lang.String, org.telegram.messenger.MessagesController$EmojiSound> r3 = r1.emojiSounds     // Catch:{ Exception -> 0x0237 }
            java.util.Set r3 = r3.entrySet()     // Catch:{ Exception -> 0x0237 }
            java.util.Iterator r3 = r3.iterator()     // Catch:{ Exception -> 0x0237 }
        L_0x01f9:
            boolean r4 = r3.hasNext()     // Catch:{ Exception -> 0x0237 }
            if (r4 == 0) goto L_0x0224
            java.lang.Object r4 = r3.next()     // Catch:{ Exception -> 0x0237 }
            java.util.Map$Entry r4 = (java.util.Map.Entry) r4     // Catch:{ Exception -> 0x0237 }
            java.lang.Object r5 = r4.getKey()     // Catch:{ Exception -> 0x0237 }
            java.lang.String r5 = (java.lang.String) r5     // Catch:{ Exception -> 0x0237 }
            r0.writeString(r5)     // Catch:{ Exception -> 0x0237 }
            java.lang.Object r4 = r4.getValue()     // Catch:{ Exception -> 0x0237 }
            org.telegram.messenger.MessagesController$EmojiSound r4 = (org.telegram.messenger.MessagesController.EmojiSound) r4     // Catch:{ Exception -> 0x0237 }
            long r9 = r4.id     // Catch:{ Exception -> 0x0237 }
            r0.writeInt64(r9)     // Catch:{ Exception -> 0x0237 }
            long r9 = r4.accessHash     // Catch:{ Exception -> 0x0237 }
            r0.writeInt64(r9)     // Catch:{ Exception -> 0x0237 }
            byte[] r4 = r4.fileReference     // Catch:{ Exception -> 0x0237 }
            r0.writeByteArray(r4)     // Catch:{ Exception -> 0x0237 }
            goto L_0x01f9
        L_0x0224:
            java.lang.String r3 = "emojiSounds"
            byte[] r4 = r0.toByteArray()     // Catch:{ Exception -> 0x0237 }
            r5 = 0
            java.lang.String r4 = android.util.Base64.encodeToString(r4, r5)     // Catch:{ Exception -> 0x0237 }
            r2.putString(r3, r4)     // Catch:{ Exception -> 0x0237 }
            r0.cleanup()     // Catch:{ Exception -> 0x0237 }
            goto L_0x04ae
        L_0x0237:
            r0 = move-exception
            goto L_0x023e
        L_0x0239:
            r0 = move-exception
            r25 = r4
        L_0x023c:
            r26 = r5
        L_0x023e:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
            goto L_0x053e
        L_0x0243:
            r25 = r4
            r26 = r5
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonBool
            if (r3 == 0) goto L_0x053e
            org.telegram.tgnet.TLRPC$TL_jsonBool r0 = (org.telegram.tgnet.TLRPC$TL_jsonBool) r0
            boolean r0 = r0.value
            boolean r3 = r1.saveGifsWithStickers
            if (r0 == r3) goto L_0x053e
            r1.saveGifsWithStickers = r0
            java.lang.String r3 = "saveGifsWithStickers"
            r2.putBoolean(r3, r0)
            goto L_0x04ae
        L_0x025e:
            r25 = r4
            r26 = r5
            java.util.ArrayList r3 = new java.util.ArrayList
            r3.<init>()
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value
            boolean r4 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonArray
            if (r4 == 0) goto L_0x0292
            org.telegram.tgnet.TLRPC$TL_jsonArray r0 = (org.telegram.tgnet.TLRPC$TL_jsonArray) r0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r4 = r0.value
            int r4 = r4.size()
            r5 = 0
        L_0x0276:
            if (r5 >= r4) goto L_0x0292
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r10 = r0.value
            java.lang.Object r10 = r10.get(r5)
            org.telegram.tgnet.TLRPC$JSONValue r10 = (org.telegram.tgnet.TLRPC$JSONValue) r10
            boolean r12 = r10 instanceof org.telegram.tgnet.TLRPC$TL_jsonString
            if (r12 == 0) goto L_0x028f
            org.telegram.tgnet.TLRPC$TL_jsonString r10 = (org.telegram.tgnet.TLRPC$TL_jsonString) r10
            java.lang.String r10 = r10.value
            java.lang.String r10 = r10.replace(r11, r9)
            r3.add(r10)
        L_0x028f:
            int r5 = r5 + 1
            goto L_0x0276
        L_0x0292:
            java.util.ArrayList<java.lang.String> r0 = r1.gifSearchEmojies
            boolean r0 = r0.equals(r3)
            if (r0 != 0) goto L_0x053e
            r1.gifSearchEmojies = r3
            org.telegram.tgnet.SerializedData r0 = new org.telegram.tgnet.SerializedData
            r0.<init>()
            java.util.ArrayList<java.lang.String> r3 = r1.gifSearchEmojies
            int r3 = r3.size()
            r0.writeInt32(r3)
            java.util.ArrayList<java.lang.String> r3 = r1.gifSearchEmojies
            int r3 = r3.size()
            r4 = 0
        L_0x02b1:
            if (r4 >= r3) goto L_0x02c1
            java.util.ArrayList<java.lang.String> r5 = r1.gifSearchEmojies
            java.lang.Object r5 = r5.get(r4)
            java.lang.String r5 = (java.lang.String) r5
            r0.writeString(r5)
            int r4 = r4 + 1
            goto L_0x02b1
        L_0x02c1:
            byte[] r3 = r0.toByteArray()
            r4 = 0
            java.lang.String r3 = android.util.Base64.encodeToString(r3, r4)
            java.lang.String r4 = "gifSearchEmojies"
            r2.putString(r4, r3)
            r0.cleanup()
            goto L_0x04ae
        L_0x02d4:
            r25 = r4
            r26 = r5
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonNumber
            if (r3 == 0) goto L_0x053e
            org.telegram.tgnet.TLRPC$TL_jsonNumber r0 = (org.telegram.tgnet.TLRPC$TL_jsonNumber) r0
            float r3 = r1.animatedEmojisZoom
            double r3 = (double) r3
            double r9 = r0.value
            int r0 = (r3 > r9 ? 1 : (r3 == r9 ? 0 : -1))
            if (r0 == 0) goto L_0x053e
            float r0 = (float) r9
            r1.animatedEmojisZoom = r0
            java.lang.String r3 = "animatedEmojisZoom"
            r2.putFloat(r3, r0)
            goto L_0x04ae
        L_0x02f3:
            r25 = r4
            r26 = r5
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonString
            if (r3 == 0) goto L_0x053e
            org.telegram.tgnet.TLRPC$TL_jsonString r0 = (org.telegram.tgnet.TLRPC$TL_jsonString) r0
            java.lang.String r3 = r0.value
            java.lang.String r4 = r1.youtubePipType
            boolean r3 = r3.equals(r4)
            if (r3 != 0) goto L_0x053e
            java.lang.String r0 = r0.value
            r1.youtubePipType = r0
            java.lang.String r3 = "youtubePipType"
            r2.putString(r3, r0)
            goto L_0x04ae
        L_0x0315:
            r25 = r4
            r26 = r5
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonBool
            if (r3 == 0) goto L_0x053e
            org.telegram.tgnet.TLRPC$TL_jsonBool r0 = (org.telegram.tgnet.TLRPC$TL_jsonBool) r0
            boolean r0 = r0.value
            boolean r3 = r1.autoarchiveAvailable
            if (r0 == r3) goto L_0x053e
            r1.autoarchiveAvailable = r0
            java.lang.String r3 = "autoarchiveAvailable"
            r2.putBoolean(r3, r0)
            goto L_0x04ae
        L_0x0330:
            r25 = r4
            r26 = r5
            java.util.HashMap r3 = new java.util.HashMap     // Catch:{ Exception -> 0x042e }
            r3.<init>()     // Catch:{ Exception -> 0x042e }
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value     // Catch:{ Exception -> 0x042e }
            boolean r4 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonObject     // Catch:{ Exception -> 0x042e }
            if (r4 == 0) goto L_0x03d3
            org.telegram.tgnet.TLRPC$TL_jsonObject r0 = (org.telegram.tgnet.TLRPC$TL_jsonObject) r0     // Catch:{ Exception -> 0x042e }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_jsonObjectValue> r4 = r0.value     // Catch:{ Exception -> 0x042e }
            int r4 = r4.size()     // Catch:{ Exception -> 0x042e }
            r5 = 0
        L_0x0348:
            if (r5 >= r4) goto L_0x03d3
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_jsonObjectValue> r10 = r0.value     // Catch:{ Exception -> 0x042e }
            java.lang.Object r10 = r10.get(r5)     // Catch:{ Exception -> 0x042e }
            org.telegram.tgnet.TLRPC$TL_jsonObjectValue r10 = (org.telegram.tgnet.TLRPC$TL_jsonObjectValue) r10     // Catch:{ Exception -> 0x042e }
            org.telegram.tgnet.TLRPC$JSONValue r12 = r10.value     // Catch:{ Exception -> 0x042e }
            boolean r13 = r12 instanceof org.telegram.tgnet.TLRPC$TL_jsonObject     // Catch:{ Exception -> 0x042e }
            if (r13 == 0) goto L_0x03c7
            org.telegram.tgnet.TLRPC$TL_jsonObject r12 = (org.telegram.tgnet.TLRPC$TL_jsonObject) r12     // Catch:{ Exception -> 0x042e }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_jsonObjectValue> r13 = r12.value     // Catch:{ Exception -> 0x042e }
            int r13 = r13.size()     // Catch:{ Exception -> 0x042e }
            r17 = r0
            r0 = 2147483647(0x7fffffff, float:NaN)
            r14 = 2147483647(0x7fffffff, float:NaN)
            r15 = 0
        L_0x0369:
            if (r15 >= r13) goto L_0x03af
            r18 = r4
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_jsonObjectValue> r4 = r12.value     // Catch:{ Exception -> 0x042e }
            java.lang.Object r4 = r4.get(r15)     // Catch:{ Exception -> 0x042e }
            org.telegram.tgnet.TLRPC$TL_jsonObjectValue r4 = (org.telegram.tgnet.TLRPC$TL_jsonObjectValue) r4     // Catch:{ Exception -> 0x042e }
            r19 = r12
            org.telegram.tgnet.TLRPC$JSONValue r12 = r4.value     // Catch:{ Exception -> 0x042e }
            boolean r12 = r12 instanceof org.telegram.tgnet.TLRPC$TL_jsonNumber     // Catch:{ Exception -> 0x042e }
            if (r12 == 0) goto L_0x03a4
            java.lang.String r12 = "value"
            r20 = r13
            java.lang.String r13 = r4.key     // Catch:{ Exception -> 0x042e }
            boolean r12 = r12.equals(r13)     // Catch:{ Exception -> 0x042e }
            if (r12 == 0) goto L_0x0392
            org.telegram.tgnet.TLRPC$JSONValue r0 = r4.value     // Catch:{ Exception -> 0x042e }
            org.telegram.tgnet.TLRPC$TL_jsonNumber r0 = (org.telegram.tgnet.TLRPC$TL_jsonNumber) r0     // Catch:{ Exception -> 0x042e }
            double r12 = r0.value     // Catch:{ Exception -> 0x042e }
            int r0 = (int) r12     // Catch:{ Exception -> 0x042e }
            goto L_0x03a6
        L_0x0392:
            java.lang.String r12 = "frame_start"
            java.lang.String r13 = r4.key     // Catch:{ Exception -> 0x042e }
            boolean r12 = r12.equals(r13)     // Catch:{ Exception -> 0x042e }
            if (r12 == 0) goto L_0x03a6
            org.telegram.tgnet.TLRPC$JSONValue r4 = r4.value     // Catch:{ Exception -> 0x042e }
            org.telegram.tgnet.TLRPC$TL_jsonNumber r4 = (org.telegram.tgnet.TLRPC$TL_jsonNumber) r4     // Catch:{ Exception -> 0x042e }
            double r12 = r4.value     // Catch:{ Exception -> 0x042e }
            int r14 = (int) r12     // Catch:{ Exception -> 0x042e }
            goto L_0x03a6
        L_0x03a4:
            r20 = r13
        L_0x03a6:
            int r15 = r15 + 1
            r4 = r18
            r12 = r19
            r13 = r20
            goto L_0x0369
        L_0x03af:
            r18 = r4
            r4 = 2147483647(0x7fffffff, float:NaN)
            if (r14 == r4) goto L_0x03cb
            if (r0 == r4) goto L_0x03cb
            java.lang.String r4 = r10.key     // Catch:{ Exception -> 0x042e }
            java.lang.String r4 = r4.replace(r11, r9)     // Catch:{ Exception -> 0x042e }
            org.telegram.messenger.MessagesController$DiceFrameSuccess r10 = new org.telegram.messenger.MessagesController$DiceFrameSuccess     // Catch:{ Exception -> 0x042e }
            r10.<init>(r14, r0)     // Catch:{ Exception -> 0x042e }
            r3.put(r4, r10)     // Catch:{ Exception -> 0x042e }
            goto L_0x03cb
        L_0x03c7:
            r17 = r0
            r18 = r4
        L_0x03cb:
            int r5 = r5 + 1
            r0 = r17
            r4 = r18
            goto L_0x0348
        L_0x03d3:
            java.util.HashMap<java.lang.String, org.telegram.messenger.MessagesController$DiceFrameSuccess> r0 = r1.diceSuccess     // Catch:{ Exception -> 0x042e }
            boolean r0 = r0.equals(r3)     // Catch:{ Exception -> 0x042e }
            if (r0 != 0) goto L_0x053e
            r1.diceSuccess = r3     // Catch:{ Exception -> 0x042e }
            org.telegram.tgnet.SerializedData r0 = new org.telegram.tgnet.SerializedData     // Catch:{ Exception -> 0x042e }
            r0.<init>()     // Catch:{ Exception -> 0x042e }
            java.util.HashMap<java.lang.String, org.telegram.messenger.MessagesController$DiceFrameSuccess> r3 = r1.diceSuccess     // Catch:{ Exception -> 0x042e }
            int r3 = r3.size()     // Catch:{ Exception -> 0x042e }
            r0.writeInt32(r3)     // Catch:{ Exception -> 0x042e }
            java.util.HashMap<java.lang.String, org.telegram.messenger.MessagesController$DiceFrameSuccess> r3 = r1.diceSuccess     // Catch:{ Exception -> 0x042e }
            java.util.Set r3 = r3.entrySet()     // Catch:{ Exception -> 0x042e }
            java.util.Iterator r3 = r3.iterator()     // Catch:{ Exception -> 0x042e }
        L_0x03f5:
            boolean r4 = r3.hasNext()     // Catch:{ Exception -> 0x042e }
            if (r4 == 0) goto L_0x041b
            java.lang.Object r4 = r3.next()     // Catch:{ Exception -> 0x042e }
            java.util.Map$Entry r4 = (java.util.Map.Entry) r4     // Catch:{ Exception -> 0x042e }
            java.lang.Object r5 = r4.getKey()     // Catch:{ Exception -> 0x042e }
            java.lang.String r5 = (java.lang.String) r5     // Catch:{ Exception -> 0x042e }
            r0.writeString(r5)     // Catch:{ Exception -> 0x042e }
            java.lang.Object r4 = r4.getValue()     // Catch:{ Exception -> 0x042e }
            org.telegram.messenger.MessagesController$DiceFrameSuccess r4 = (org.telegram.messenger.MessagesController.DiceFrameSuccess) r4     // Catch:{ Exception -> 0x042e }
            int r5 = r4.frame     // Catch:{ Exception -> 0x042e }
            r0.writeInt32(r5)     // Catch:{ Exception -> 0x042e }
            int r4 = r4.num     // Catch:{ Exception -> 0x042e }
            r0.writeInt32(r4)     // Catch:{ Exception -> 0x042e }
            goto L_0x03f5
        L_0x041b:
            java.lang.String r3 = "diceSuccess"
            byte[] r4 = r0.toByteArray()     // Catch:{ Exception -> 0x042e }
            r5 = 0
            java.lang.String r4 = android.util.Base64.encodeToString(r4, r5)     // Catch:{ Exception -> 0x042e }
            r2.putString(r3, r4)     // Catch:{ Exception -> 0x042e }
            r0.cleanup()     // Catch:{ Exception -> 0x042e }
            goto L_0x04ae
        L_0x042e:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
            goto L_0x053e
        L_0x0434:
            r25 = r4
            r26 = r5
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonBool
            if (r3 == 0) goto L_0x053e
            org.telegram.tgnet.TLRPC$TL_jsonBool r0 = (org.telegram.tgnet.TLRPC$TL_jsonBool) r0
            boolean r0 = r0.value
            boolean r3 = r1.backgroundConnection
            if (r0 == r3) goto L_0x053e
            r1.backgroundConnection = r0
            java.lang.String r3 = "backgroundConnection"
            r2.putBoolean(r3, r0)
        L_0x044d:
            r7 = 1
            r8 = 1
            goto L_0x053e
        L_0x0451:
            r25 = r4
            r26 = r5
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonBool
            if (r3 == 0) goto L_0x053e
            org.telegram.tgnet.TLRPC$TL_jsonBool r0 = (org.telegram.tgnet.TLRPC$TL_jsonBool) r0
            boolean r0 = r0.value
            boolean r3 = r1.keepAliveService
            if (r0 == r3) goto L_0x053e
            r1.keepAliveService = r0
            java.lang.String r3 = "keepAliveService"
            r2.putBoolean(r3, r0)
            goto L_0x044d
        L_0x046b:
            r25 = r4
            r26 = r5
            java.util.HashSet r3 = new java.util.HashSet
            r3.<init>()
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value
            boolean r4 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonArray
            if (r4 == 0) goto L_0x049f
            org.telegram.tgnet.TLRPC$TL_jsonArray r0 = (org.telegram.tgnet.TLRPC$TL_jsonArray) r0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r4 = r0.value
            int r4 = r4.size()
            r5 = 0
        L_0x0483:
            if (r5 >= r4) goto L_0x049f
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r10 = r0.value
            java.lang.Object r10 = r10.get(r5)
            org.telegram.tgnet.TLRPC$JSONValue r10 = (org.telegram.tgnet.TLRPC$JSONValue) r10
            boolean r12 = r10 instanceof org.telegram.tgnet.TLRPC$TL_jsonString
            if (r12 == 0) goto L_0x049c
            org.telegram.tgnet.TLRPC$TL_jsonString r10 = (org.telegram.tgnet.TLRPC$TL_jsonString) r10
            java.lang.String r10 = r10.value
            java.lang.String r10 = r10.replace(r11, r9)
            r3.add(r10)
        L_0x049c:
            int r5 = r5 + 1
            goto L_0x0483
        L_0x049f:
            java.util.HashSet<java.lang.String> r0 = r1.diceEmojies
            boolean r0 = r0.equals(r3)
            if (r0 != 0) goto L_0x053e
            r1.diceEmojies = r3
            java.lang.String r0 = "diceEmojies"
            r2.putStringSet(r0, r3)
        L_0x04ae:
            r7 = 1
            goto L_0x053e
        L_0x04b1:
            r25 = r4
            r26 = r5
            java.util.HashSet r3 = new java.util.HashSet
            r3.<init>()
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value
            boolean r4 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonArray
            if (r4 == 0) goto L_0x04e1
            org.telegram.tgnet.TLRPC$TL_jsonArray r0 = (org.telegram.tgnet.TLRPC$TL_jsonArray) r0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r4 = r0.value
            int r4 = r4.size()
            r5 = 0
        L_0x04c9:
            if (r5 >= r4) goto L_0x04e1
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r9 = r0.value
            java.lang.Object r9 = r9.get(r5)
            org.telegram.tgnet.TLRPC$JSONValue r9 = (org.telegram.tgnet.TLRPC$JSONValue) r9
            boolean r10 = r9 instanceof org.telegram.tgnet.TLRPC$TL_jsonString
            if (r10 == 0) goto L_0x04de
            org.telegram.tgnet.TLRPC$TL_jsonString r9 = (org.telegram.tgnet.TLRPC$TL_jsonString) r9
            java.lang.String r9 = r9.value
            r3.add(r9)
        L_0x04de:
            int r5 = r5 + 1
            goto L_0x04c9
        L_0x04e1:
            java.util.Set<java.lang.String> r0 = r1.pendingSuggestions
            boolean r0 = r0.equals(r3)
            if (r0 != 0) goto L_0x053e
            r1.pendingSuggestions = r3
            java.lang.String r0 = "pendingSuggestions"
            r2.putStringSet(r0, r3)
            org.telegram.messenger.NotificationCenter r0 = r27.getNotificationCenter()
            int r3 = org.telegram.messenger.NotificationCenter.newSuggestionsAvailable
            r4 = 0
            java.lang.Object[] r5 = new java.lang.Object[r4]
            r0.postNotificationName(r3, r5)
            goto L_0x04ae
        L_0x04fd:
            r25 = r4
            r26 = r5
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonBool
            if (r3 == 0) goto L_0x053e
            org.telegram.tgnet.TLRPC$TL_jsonBool r0 = (org.telegram.tgnet.TLRPC$TL_jsonBool) r0
            boolean r0 = r0.value
            boolean r3 = r1.qrLoginCamera
            if (r0 == r3) goto L_0x053e
            r1.qrLoginCamera = r0
            java.lang.String r3 = "qrLoginCamera"
            r2.putBoolean(r3, r0)
            goto L_0x04ae
        L_0x0517:
            r25 = r4
            r26 = r5
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonBool
            if (r3 == 0) goto L_0x053e
            org.telegram.tgnet.TLRPC$TL_jsonBool r0 = (org.telegram.tgnet.TLRPC$TL_jsonBool) r0
            boolean r0 = r0.value
            boolean r3 = r1.showFiltersTooltip
            if (r0 == r3) goto L_0x053e
            r1.showFiltersTooltip = r0
            java.lang.String r3 = "showFiltersTooltip"
            r2.putBoolean(r3, r0)
            org.telegram.messenger.NotificationCenter r0 = r27.getNotificationCenter()
            int r3 = org.telegram.messenger.NotificationCenter.filterSettingsUpdated
            r4 = 0
            java.lang.Object[] r5 = new java.lang.Object[r4]
            r0.postNotificationName(r3, r5)
            goto L_0x04ae
        L_0x053e:
            int r6 = r6 + 1
            r4 = r25
            r5 = r26
            goto L_0x001a
        L_0x0546:
            if (r7 == 0) goto L_0x054b
            r2.commit()
        L_0x054b:
            if (r8 == 0) goto L_0x055b
            org.telegram.messenger.ApplicationLoader.startPushService()
            org.telegram.tgnet.ConnectionsManager r0 = r27.getConnectionsManager()
            boolean r2 = r0.isPushConnectionEnabled()
            r0.setPushConnectionEnabled(r2)
        L_0x055b:
            r2 = 0
            r1.loadingAppConfig = r2
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$null$14$MessagesController(org.telegram.tgnet.TLObject):void");
    }

    public void removeSuggestion(String str) {
        if (str != null && this.pendingSuggestions.remove(str)) {
            SharedPreferences.Editor edit = this.mainPreferences.edit();
            edit.putStringSet("pendingSuggestions", this.pendingSuggestions);
            edit.commit();
            TLRPC$TL_help_dismissSuggestion tLRPC$TL_help_dismissSuggestion = new TLRPC$TL_help_dismissSuggestion();
            tLRPC$TL_help_dismissSuggestion.suggestion = str;
            getConnectionsManager().sendRequest(tLRPC$TL_help_dismissSuggestion, $$Lambda$MessagesController$tbCyGkNPsR0gPX0_tM_oFswEHpg.INSTANCE);
        }
    }

    public void updateConfig(TLRPC$TL_config tLRPC$TL_config) {
        AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_config) {
            public final /* synthetic */ TLRPC$TL_config f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$updateConfig$17$MessagesController(this.f$1);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$updateConfig$17 */
    public /* synthetic */ void lambda$updateConfig$17$MessagesController(TLRPC$TL_config tLRPC$TL_config) {
        String str;
        getDownloadController().loadAutoDownloadConfig(false);
        loadAppConfig();
        this.maxMegagroupCount = tLRPC$TL_config.megagroup_size_max;
        this.maxGroupCount = tLRPC$TL_config.chat_size_max;
        this.maxEditTime = tLRPC$TL_config.edit_time_limit;
        this.ratingDecay = tLRPC$TL_config.rating_e_decay;
        this.maxRecentGifsCount = tLRPC$TL_config.saved_gifs_limit;
        this.maxRecentStickersCount = tLRPC$TL_config.stickers_recent_limit;
        this.maxFaveStickersCount = tLRPC$TL_config.stickers_faved_limit;
        this.revokeTimeLimit = tLRPC$TL_config.revoke_time_limit;
        this.revokeTimePmLimit = tLRPC$TL_config.revoke_pm_time_limit;
        this.canRevokePmInbox = tLRPC$TL_config.revoke_pm_inbox;
        String str2 = tLRPC$TL_config.me_url_prefix;
        this.linkPrefix = str2;
        if (str2.endsWith("/")) {
            String str3 = this.linkPrefix;
            this.linkPrefix = str3.substring(0, str3.length() - 1);
        }
        if (this.linkPrefix.startsWith("https://")) {
            this.linkPrefix = this.linkPrefix.substring(8);
        } else if (this.linkPrefix.startsWith("http://")) {
            this.linkPrefix = this.linkPrefix.substring(7);
        }
        this.callReceiveTimeout = tLRPC$TL_config.call_receive_timeout_ms;
        this.callRingTimeout = tLRPC$TL_config.call_ring_timeout_ms;
        this.callConnectTimeout = tLRPC$TL_config.call_connect_timeout_ms;
        this.callPacketTimeout = tLRPC$TL_config.call_packet_timeout_ms;
        this.maxPinnedDialogsCount = tLRPC$TL_config.pinned_dialogs_count_max;
        this.maxFolderPinnedDialogsCount = tLRPC$TL_config.pinned_infolder_count_max;
        this.maxMessageLength = tLRPC$TL_config.message_length_max;
        this.maxCaptionLength = tLRPC$TL_config.caption_length_max;
        this.preloadFeaturedStickers = tLRPC$TL_config.preload_featured_stickers;
        String str4 = tLRPC$TL_config.venue_search_username;
        if (str4 != null) {
            this.venueSearchBot = str4;
        }
        String str5 = tLRPC$TL_config.gif_search_username;
        if (str5 != null) {
            this.gifSearchBot = str5;
        }
        if (this.imageSearchBot != null) {
            this.imageSearchBot = tLRPC$TL_config.img_search_username;
        }
        this.blockedCountry = tLRPC$TL_config.blocked_mode;
        this.dcDomainName = tLRPC$TL_config.dc_txt_domain_name;
        this.webFileDatacenterId = tLRPC$TL_config.webfile_dc_id;
        String str6 = tLRPC$TL_config.suggested_lang_code;
        if (str6 != null && ((str = this.suggestedLangCode) == null || !str.equals(str6))) {
            this.suggestedLangCode = tLRPC$TL_config.suggested_lang_code;
            LocaleController.getInstance().loadRemoteLanguages(this.currentAccount);
        }
        Theme.loadRemoteThemes(this.currentAccount, false);
        Theme.checkCurrentRemoteTheme(false);
        if (tLRPC$TL_config.static_maps_provider == null) {
            tLRPC$TL_config.static_maps_provider = "telegram";
        }
        this.mapKey = null;
        this.mapProvider = 2;
        this.availableMapProviders = 0;
        FileLog.d("map providers = " + tLRPC$TL_config.static_maps_provider);
        String[] split = tLRPC$TL_config.static_maps_provider.split(",");
        for (int i = 0; i < split.length; i++) {
            String[] split2 = split[i].split("\\+");
            if (split2.length > 0) {
                String[] split3 = split2[0].split(":");
                if (split3.length > 0) {
                    if ("yandex".equals(split3[0])) {
                        if (i == 0) {
                            if (split2.length > 1) {
                                this.mapProvider = 3;
                            } else {
                                this.mapProvider = 1;
                            }
                        }
                        this.availableMapProviders |= 4;
                    } else if ("google".equals(split3[0])) {
                        if (i == 0 && split2.length > 1) {
                            this.mapProvider = 4;
                        }
                        this.availableMapProviders |= 1;
                    } else if ("telegram".equals(split3[0])) {
                        if (i == 0) {
                            this.mapProvider = 2;
                        }
                        this.availableMapProviders |= 2;
                    }
                    if (split3.length > 1) {
                        this.mapKey = split3[1];
                    }
                }
            }
        }
        SharedPreferences.Editor edit = this.mainPreferences.edit();
        edit.putInt("maxGroupCount", this.maxGroupCount);
        edit.putInt("maxMegagroupCount", this.maxMegagroupCount);
        edit.putInt("maxEditTime", this.maxEditTime);
        edit.putInt("ratingDecay", this.ratingDecay);
        edit.putInt("maxRecentGifsCount", this.maxRecentGifsCount);
        edit.putInt("maxRecentStickersCount", this.maxRecentStickersCount);
        edit.putInt("maxFaveStickersCount", this.maxFaveStickersCount);
        edit.putInt("callReceiveTimeout", this.callReceiveTimeout);
        edit.putInt("callRingTimeout", this.callRingTimeout);
        edit.putInt("callConnectTimeout", this.callConnectTimeout);
        edit.putInt("callPacketTimeout", this.callPacketTimeout);
        edit.putString("linkPrefix", this.linkPrefix);
        edit.putInt("maxPinnedDialogsCount", this.maxPinnedDialogsCount);
        edit.putInt("maxFolderPinnedDialogsCount", this.maxFolderPinnedDialogsCount);
        edit.putInt("maxMessageLength", this.maxMessageLength);
        edit.putInt("maxCaptionLength", this.maxCaptionLength);
        edit.putBoolean("preloadFeaturedStickers", this.preloadFeaturedStickers);
        edit.putInt("revokeTimeLimit", this.revokeTimeLimit);
        edit.putInt("revokeTimePmLimit", this.revokeTimePmLimit);
        edit.putInt("mapProvider", this.mapProvider);
        String str7 = this.mapKey;
        if (str7 != null) {
            edit.putString("pk", str7);
        } else {
            edit.remove("pk");
        }
        edit.putBoolean("canRevokePmInbox", this.canRevokePmInbox);
        edit.putBoolean("blockedCountry", this.blockedCountry);
        edit.putString("venueSearchBot", this.venueSearchBot);
        edit.putString("gifSearchBot", this.gifSearchBot);
        edit.putString("imageSearchBot", this.imageSearchBot);
        edit.putString("dcDomainName2", this.dcDomainName);
        edit.putInt("webFileDatacenterId", this.webFileDatacenterId);
        edit.putString("suggestedLangCode", this.suggestedLangCode);
        edit.commit();
        LocaleController.getInstance().checkUpdateForCurrentRemoteLocale(this.currentAccount, tLRPC$TL_config.lang_pack_version, tLRPC$TL_config.base_lang_pack_version);
        getNotificationCenter().postNotificationName(NotificationCenter.configLoaded, new Object[0]);
    }

    public void addSupportUser() {
        TLRPC$TL_userForeign_old2 tLRPC$TL_userForeign_old2 = new TLRPC$TL_userForeign_old2();
        tLRPC$TL_userForeign_old2.phone = "333";
        tLRPC$TL_userForeign_old2.id = 333000;
        tLRPC$TL_userForeign_old2.first_name = "Telegram";
        tLRPC$TL_userForeign_old2.last_name = "";
        tLRPC$TL_userForeign_old2.status = null;
        tLRPC$TL_userForeign_old2.photo = new TLRPC$TL_userProfilePhotoEmpty();
        putUser(tLRPC$TL_userForeign_old2, true);
        TLRPC$TL_userForeign_old2 tLRPC$TL_userForeign_old22 = new TLRPC$TL_userForeign_old2();
        tLRPC$TL_userForeign_old22.phone = "42777";
        tLRPC$TL_userForeign_old22.id = 777000;
        tLRPC$TL_userForeign_old22.verified = true;
        tLRPC$TL_userForeign_old22.first_name = "Telegram";
        tLRPC$TL_userForeign_old22.last_name = "Notifications";
        tLRPC$TL_userForeign_old22.status = null;
        tLRPC$TL_userForeign_old22.photo = new TLRPC$TL_userProfilePhotoEmpty();
        putUser(tLRPC$TL_userForeign_old22, true);
    }

    public TLRPC$InputUser getInputUser(TLRPC$User tLRPC$User) {
        if (tLRPC$User == null) {
            return new TLRPC$TL_inputUserEmpty();
        }
        if (tLRPC$User.id == getUserConfig().getClientUserId()) {
            return new TLRPC$TL_inputUserSelf();
        }
        TLRPC$TL_inputUser tLRPC$TL_inputUser = new TLRPC$TL_inputUser();
        tLRPC$TL_inputUser.user_id = tLRPC$User.id;
        tLRPC$TL_inputUser.access_hash = tLRPC$User.access_hash;
        return tLRPC$TL_inputUser;
    }

    public TLRPC$InputUser getInputUser(TLRPC$InputPeer tLRPC$InputPeer) {
        if (tLRPC$InputPeer == null) {
            return new TLRPC$TL_inputUserEmpty();
        }
        if (tLRPC$InputPeer instanceof TLRPC$TL_inputPeerSelf) {
            return new TLRPC$TL_inputUserSelf();
        }
        TLRPC$TL_inputUser tLRPC$TL_inputUser = new TLRPC$TL_inputUser();
        tLRPC$TL_inputUser.user_id = tLRPC$InputPeer.user_id;
        tLRPC$TL_inputUser.access_hash = tLRPC$InputPeer.access_hash;
        return tLRPC$TL_inputUser;
    }

    public TLRPC$InputUser getInputUser(int i) {
        return getInputUser(getInstance(UserConfig.selectedAccount).getUser(Integer.valueOf(i)));
    }

    public static TLRPC$InputChannel getInputChannel(TLRPC$Chat tLRPC$Chat) {
        if (!(tLRPC$Chat instanceof TLRPC$TL_channel) && !(tLRPC$Chat instanceof TLRPC$TL_channelForbidden)) {
            return new TLRPC$TL_inputChannelEmpty();
        }
        TLRPC$TL_inputChannel tLRPC$TL_inputChannel = new TLRPC$TL_inputChannel();
        tLRPC$TL_inputChannel.channel_id = tLRPC$Chat.id;
        tLRPC$TL_inputChannel.access_hash = tLRPC$Chat.access_hash;
        return tLRPC$TL_inputChannel;
    }

    public static TLRPC$InputChannel getInputChannel(TLRPC$InputPeer tLRPC$InputPeer) {
        TLRPC$TL_inputChannel tLRPC$TL_inputChannel = new TLRPC$TL_inputChannel();
        tLRPC$TL_inputChannel.channel_id = tLRPC$InputPeer.channel_id;
        tLRPC$TL_inputChannel.access_hash = tLRPC$InputPeer.access_hash;
        return tLRPC$TL_inputChannel;
    }

    public TLRPC$InputChannel getInputChannel(int i) {
        return getInputChannel(getChat(Integer.valueOf(i)));
    }

    public TLRPC$InputPeer getInputPeer(TLRPC$Peer tLRPC$Peer) {
        if (tLRPC$Peer instanceof TLRPC$TL_peerChat) {
            TLRPC$TL_inputPeerChat tLRPC$TL_inputPeerChat = new TLRPC$TL_inputPeerChat();
            tLRPC$TL_inputPeerChat.chat_id = tLRPC$Peer.chat_id;
            return tLRPC$TL_inputPeerChat;
        } else if (tLRPC$Peer instanceof TLRPC$TL_peerChannel) {
            TLRPC$TL_inputPeerChannel tLRPC$TL_inputPeerChannel = new TLRPC$TL_inputPeerChannel();
            int i = tLRPC$Peer.channel_id;
            tLRPC$TL_inputPeerChannel.channel_id = i;
            TLRPC$Chat chat = getChat(Integer.valueOf(i));
            if (chat == null) {
                return tLRPC$TL_inputPeerChannel;
            }
            tLRPC$TL_inputPeerChannel.access_hash = chat.access_hash;
            return tLRPC$TL_inputPeerChannel;
        } else {
            TLRPC$TL_inputPeerUser tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerUser();
            int i2 = tLRPC$Peer.user_id;
            tLRPC$TL_inputPeerUser.user_id = i2;
            TLRPC$User user = getUser(Integer.valueOf(i2));
            if (user == null) {
                return tLRPC$TL_inputPeerUser;
            }
            tLRPC$TL_inputPeerUser.access_hash = user.access_hash;
            return tLRPC$TL_inputPeerUser;
        }
    }

    public TLRPC$InputPeer getInputPeer(int i) {
        if (i < 0) {
            int i2 = -i;
            TLRPC$Chat chat = getChat(Integer.valueOf(i2));
            if (ChatObject.isChannel(chat)) {
                TLRPC$TL_inputPeerChannel tLRPC$TL_inputPeerChannel = new TLRPC$TL_inputPeerChannel();
                tLRPC$TL_inputPeerChannel.channel_id = i2;
                tLRPC$TL_inputPeerChannel.access_hash = chat.access_hash;
                return tLRPC$TL_inputPeerChannel;
            }
            TLRPC$TL_inputPeerChat tLRPC$TL_inputPeerChat = new TLRPC$TL_inputPeerChat();
            tLRPC$TL_inputPeerChat.chat_id = i2;
            return tLRPC$TL_inputPeerChat;
        }
        TLRPC$User user = getUser(Integer.valueOf(i));
        TLRPC$TL_inputPeerUser tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerUser();
        tLRPC$TL_inputPeerUser.user_id = i;
        if (user == null) {
            return tLRPC$TL_inputPeerUser;
        }
        tLRPC$TL_inputPeerUser.access_hash = user.access_hash;
        return tLRPC$TL_inputPeerUser;
    }

    public static TLRPC$InputPeer getInputPeer(TLRPC$Chat tLRPC$Chat) {
        if (ChatObject.isChannel(tLRPC$Chat)) {
            TLRPC$TL_inputPeerChannel tLRPC$TL_inputPeerChannel = new TLRPC$TL_inputPeerChannel();
            tLRPC$TL_inputPeerChannel.channel_id = tLRPC$Chat.id;
            tLRPC$TL_inputPeerChannel.access_hash = tLRPC$Chat.access_hash;
            return tLRPC$TL_inputPeerChannel;
        }
        TLRPC$TL_inputPeerChat tLRPC$TL_inputPeerChat = new TLRPC$TL_inputPeerChat();
        tLRPC$TL_inputPeerChat.chat_id = tLRPC$Chat.id;
        return tLRPC$TL_inputPeerChat;
    }

    public static TLRPC$InputPeer getInputPeer(TLRPC$User tLRPC$User) {
        TLRPC$TL_inputPeerUser tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerUser();
        tLRPC$TL_inputPeerUser.user_id = tLRPC$User.id;
        tLRPC$TL_inputPeerUser.access_hash = tLRPC$User.access_hash;
        return tLRPC$TL_inputPeerUser;
    }

    public TLRPC$Peer getPeer(int i) {
        if (i < 0) {
            int i2 = -i;
            TLRPC$Chat chat = getChat(Integer.valueOf(i2));
            if ((chat instanceof TLRPC$TL_channel) || (chat instanceof TLRPC$TL_channelForbidden)) {
                TLRPC$TL_peerChannel tLRPC$TL_peerChannel = new TLRPC$TL_peerChannel();
                tLRPC$TL_peerChannel.channel_id = i2;
                return tLRPC$TL_peerChannel;
            }
            TLRPC$TL_peerChat tLRPC$TL_peerChat = new TLRPC$TL_peerChat();
            tLRPC$TL_peerChat.chat_id = i2;
            return tLRPC$TL_peerChat;
        }
        getUser(Integer.valueOf(i));
        TLRPC$TL_peerUser tLRPC$TL_peerUser = new TLRPC$TL_peerUser();
        tLRPC$TL_peerUser.user_id = i;
        return tLRPC$TL_peerUser;
    }

    public void didReceivedNotification(int i, int i2, Object... objArr) {
        MessageObject messageObject;
        TLRPC$InputFile tLRPC$InputFile;
        Theme.ThemeAccent themeAccent;
        Theme.ThemeInfo themeInfo;
        TLRPC$InputFile tLRPC$InputFile2;
        TLRPC$TL_theme tLRPC$TL_theme;
        TLRPC$TL_inputThemeSettings tLRPC$TL_inputThemeSettings = null;
        if (i == NotificationCenter.FileDidUpload) {
            String str = objArr[0];
            TLRPC$InputFile tLRPC$InputFile3 = objArr[1];
            String str2 = this.uploadingAvatar;
            if (str2 == null || !str2.equals(str)) {
                String str3 = this.uploadingWallpaper;
                if (str3 == null || !str3.equals(str)) {
                    Object obj = this.uploadingThemes.get(str);
                    if (obj instanceof Theme.ThemeInfo) {
                        Theme.ThemeInfo themeInfo2 = (Theme.ThemeInfo) obj;
                        if (str.equals(themeInfo2.uploadingThumb)) {
                            themeInfo2.uploadedThumb = tLRPC$InputFile3;
                            themeInfo2.uploadingThumb = null;
                        } else if (str.equals(themeInfo2.uploadingFile)) {
                            themeInfo2.uploadedFile = tLRPC$InputFile3;
                            themeInfo2.uploadingFile = null;
                        }
                        tLRPC$InputFile = themeInfo2.uploadedThumb;
                        tLRPC$InputFile2 = themeInfo2.uploadedFile;
                        themeInfo = themeInfo2;
                        themeAccent = null;
                    } else if (obj instanceof Theme.ThemeAccent) {
                        Theme.ThemeAccent themeAccent2 = (Theme.ThemeAccent) obj;
                        if (str.equals(themeAccent2.uploadingThumb)) {
                            themeAccent2.uploadedThumb = tLRPC$InputFile3;
                            themeAccent2.uploadingThumb = null;
                        } else if (str.equals(themeAccent2.uploadingFile)) {
                            themeAccent2.uploadedFile = tLRPC$InputFile3;
                            themeAccent2.uploadingFile = null;
                        }
                        themeInfo = themeAccent2.parentTheme;
                        themeAccent = themeAccent2;
                        tLRPC$InputFile = themeAccent2.uploadedThumb;
                        tLRPC$InputFile2 = themeAccent2.uploadedFile;
                    } else {
                        tLRPC$InputFile = null;
                        tLRPC$InputFile2 = null;
                        themeInfo = null;
                        themeAccent = null;
                    }
                    this.uploadingThemes.remove(str);
                    if (tLRPC$InputFile2 != null && tLRPC$InputFile != null) {
                        new File(str);
                        TLRPC$TL_account_uploadTheme tLRPC$TL_account_uploadTheme = new TLRPC$TL_account_uploadTheme();
                        tLRPC$TL_account_uploadTheme.mime_type = "application/x-tgtheme-android";
                        tLRPC$TL_account_uploadTheme.file_name = "theme.attheme";
                        tLRPC$TL_account_uploadTheme.file = tLRPC$InputFile2;
                        tLRPC$InputFile2.name = "theme.attheme";
                        tLRPC$TL_account_uploadTheme.thumb = tLRPC$InputFile;
                        tLRPC$InputFile.name = "theme-preview.jpg";
                        tLRPC$TL_account_uploadTheme.flags |= 1;
                        if (themeAccent != null) {
                            themeAccent.uploadedFile = null;
                            themeAccent.uploadedThumb = null;
                            tLRPC$TL_theme = themeAccent.info;
                            tLRPC$TL_inputThemeSettings = new TLRPC$TL_inputThemeSettings();
                            tLRPC$TL_inputThemeSettings.base_theme = Theme.getBaseThemeByKey(themeInfo.name);
                            tLRPC$TL_inputThemeSettings.accent_color = themeAccent.accentColor;
                            int i3 = themeAccent.myMessagesAccentColor;
                            if (i3 != 0) {
                                tLRPC$TL_inputThemeSettings.message_bottom_color = i3;
                                tLRPC$TL_inputThemeSettings.flags |= 1;
                            }
                            int i4 = themeAccent.myMessagesGradientAccentColor;
                            if (i4 != 0) {
                                tLRPC$TL_inputThemeSettings.message_top_color = i4;
                                tLRPC$TL_inputThemeSettings.flags |= 1;
                            } else {
                                int i5 = tLRPC$TL_inputThemeSettings.message_bottom_color;
                                if (i5 != 0) {
                                    tLRPC$TL_inputThemeSettings.message_top_color = i5;
                                }
                            }
                            tLRPC$TL_inputThemeSettings.flags |= 2;
                            tLRPC$TL_inputThemeSettings.wallpaper_settings = new TLRPC$TL_wallPaperSettings();
                            if (!TextUtils.isEmpty(themeAccent.patternSlug)) {
                                TLRPC$TL_inputWallPaperSlug tLRPC$TL_inputWallPaperSlug = new TLRPC$TL_inputWallPaperSlug();
                                tLRPC$TL_inputWallPaperSlug.slug = themeAccent.patternSlug;
                                tLRPC$TL_inputThemeSettings.wallpaper = tLRPC$TL_inputWallPaperSlug;
                                TLRPC$WallPaperSettings tLRPC$WallPaperSettings = tLRPC$TL_inputThemeSettings.wallpaper_settings;
                                tLRPC$WallPaperSettings.intensity = (int) (themeAccent.patternIntensity * 100.0f);
                                tLRPC$WallPaperSettings.flags |= 8;
                            } else {
                                tLRPC$TL_inputThemeSettings.wallpaper = new TLRPC$TL_inputWallPaperNoFile();
                            }
                            TLRPC$WallPaperSettings tLRPC$WallPaperSettings2 = tLRPC$TL_inputThemeSettings.wallpaper_settings;
                            tLRPC$WallPaperSettings2.motion = themeAccent.patternMotion;
                            long j = themeAccent.backgroundOverrideColor;
                            if (j != 0) {
                                tLRPC$WallPaperSettings2.background_color = (int) j;
                                tLRPC$WallPaperSettings2.flags |= 1;
                            }
                            long j2 = themeAccent.backgroundGradientOverrideColor;
                            if (j2 != 0) {
                                tLRPC$WallPaperSettings2.second_background_color = (int) j2;
                                tLRPC$WallPaperSettings2.flags |= 16;
                                tLRPC$WallPaperSettings2.rotation = AndroidUtilities.getWallpaperRotation(themeAccent.backgroundRotation, true);
                            }
                        } else {
                            themeInfo.uploadedFile = null;
                            themeInfo.uploadedThumb = null;
                            tLRPC$TL_theme = themeInfo.info;
                        }
                        getConnectionsManager().sendRequest(tLRPC$TL_account_uploadTheme, new RequestDelegate(tLRPC$TL_theme, themeInfo, tLRPC$TL_inputThemeSettings, themeAccent) {
                            public final /* synthetic */ TLRPC$TL_theme f$1;
                            public final /* synthetic */ Theme.ThemeInfo f$2;
                            public final /* synthetic */ TLRPC$TL_inputThemeSettings f$3;
                            public final /* synthetic */ Theme.ThemeAccent f$4;

                            {
                                this.f$1 = r2;
                                this.f$2 = r3;
                                this.f$3 = r4;
                                this.f$4 = r5;
                            }

                            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                MessagesController.this.lambda$didReceivedNotification$27$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, tLObject, tLRPC$TL_error);
                            }
                        });
                        return;
                    }
                    return;
                }
                TLRPC$TL_account_uploadWallPaper tLRPC$TL_account_uploadWallPaper = new TLRPC$TL_account_uploadWallPaper();
                tLRPC$TL_account_uploadWallPaper.file = tLRPC$InputFile3;
                tLRPC$TL_account_uploadWallPaper.mime_type = "image/jpeg";
                Theme.OverrideWallpaperInfo overrideWallpaperInfo = this.uploadingWallpaperInfo;
                TLRPC$TL_wallPaperSettings tLRPC$TL_wallPaperSettings = new TLRPC$TL_wallPaperSettings();
                tLRPC$TL_wallPaperSettings.blur = overrideWallpaperInfo.isBlurred;
                tLRPC$TL_wallPaperSettings.motion = overrideWallpaperInfo.isMotion;
                tLRPC$TL_account_uploadWallPaper.settings = tLRPC$TL_wallPaperSettings;
                getConnectionsManager().sendRequest(tLRPC$TL_account_uploadWallPaper, new RequestDelegate(overrideWallpaperInfo, tLRPC$TL_wallPaperSettings) {
                    public final /* synthetic */ Theme.OverrideWallpaperInfo f$1;
                    public final /* synthetic */ TLRPC$TL_wallPaperSettings f$2;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$didReceivedNotification$21$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                    }
                });
                return;
            }
            TLRPC$TL_photos_uploadProfilePhoto tLRPC$TL_photos_uploadProfilePhoto = new TLRPC$TL_photos_uploadProfilePhoto();
            tLRPC$TL_photos_uploadProfilePhoto.file = tLRPC$InputFile3;
            tLRPC$TL_photos_uploadProfilePhoto.flags |= 1;
            getConnectionsManager().sendRequest(tLRPC$TL_photos_uploadProfilePhoto, new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$didReceivedNotification$19$MessagesController(tLObject, tLRPC$TL_error);
                }
            });
        } else if (i == NotificationCenter.FileDidFailUpload) {
            String str4 = objArr[0];
            String str5 = this.uploadingAvatar;
            if (str5 == null || !str5.equals(str4)) {
                String str6 = this.uploadingWallpaper;
                if (str6 == null || !str6.equals(str4)) {
                    Object remove = this.uploadingThemes.remove(str4);
                    if (remove instanceof Theme.ThemeInfo) {
                        Theme.ThemeInfo themeInfo3 = (Theme.ThemeInfo) remove;
                        themeInfo3.uploadedFile = null;
                        themeInfo3.uploadedThumb = null;
                        getNotificationCenter().postNotificationName(NotificationCenter.themeUploadError, themeInfo3, null);
                    } else if (remove instanceof Theme.ThemeAccent) {
                        Theme.ThemeAccent themeAccent3 = (Theme.ThemeAccent) remove;
                        themeAccent3.uploadingThumb = null;
                        getNotificationCenter().postNotificationName(NotificationCenter.themeUploadError, themeAccent3.parentTheme, themeAccent3);
                    }
                } else {
                    this.uploadingWallpaper = null;
                    this.uploadingWallpaperInfo = null;
                }
            } else {
                this.uploadingAvatar = null;
            }
        } else if (i == NotificationCenter.messageReceivedByServer) {
            if (!objArr[6].booleanValue()) {
                Integer num = objArr[0];
                Integer num2 = objArr[1];
                Long l = objArr[3];
                MessageObject messageObject2 = this.dialogMessage.get(l.longValue());
                if (messageObject2 != null && (messageObject2.getId() == num.intValue() || messageObject2.messageOwner.local_id == num.intValue())) {
                    messageObject2.messageOwner.id = num2.intValue();
                    messageObject2.messageOwner.send_state = 0;
                }
                TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(l.longValue());
                if (tLRPC$Dialog != null && tLRPC$Dialog.top_message == num.intValue()) {
                    tLRPC$Dialog.top_message = num2.intValue();
                    getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                }
                MessageObject messageObject3 = this.dialogMessagesByIds.get(num.intValue());
                if (messageObject3 != null) {
                    this.dialogMessagesByIds.remove(num.intValue());
                    this.dialogMessagesByIds.put(num2.intValue(), messageObject3);
                }
                int longValue = (int) l.longValue();
                if (longValue < 0) {
                    int i6 = -longValue;
                    TLRPC$ChatFull tLRPC$ChatFull = this.fullChats.get(i6);
                    TLRPC$Chat chat = getChat(Integer.valueOf(i6));
                    if (chat != null && !ChatObject.hasAdminRights(chat) && tLRPC$ChatFull != null && tLRPC$ChatFull.slowmode_seconds != 0) {
                        tLRPC$ChatFull.slowmode_next_send_date = getConnectionsManager().getCurrentTime() + tLRPC$ChatFull.slowmode_seconds;
                        tLRPC$ChatFull.flags |= 262144;
                        getMessagesStorage().updateChatInfo(tLRPC$ChatFull, false);
                    }
                }
            }
        } else if (i == NotificationCenter.updateMessageMedia) {
            TLRPC$Message tLRPC$Message = objArr[0];
            if (tLRPC$Message.peer_id.channel_id == 0 && (messageObject = this.dialogMessagesByIds.get(tLRPC$Message.id)) != null) {
                messageObject.messageOwner.media = tLRPC$Message.media;
                TLRPC$MessageMedia tLRPC$MessageMedia = tLRPC$Message.media;
                if (tLRPC$MessageMedia.ttl_seconds == 0) {
                    return;
                }
                if ((tLRPC$MessageMedia.photo instanceof TLRPC$TL_photoEmpty) || (tLRPC$MessageMedia.document instanceof TLRPC$TL_documentEmpty)) {
                    messageObject.setType();
                    getNotificationCenter().postNotificationName(NotificationCenter.notificationsSettingsUpdated, new Object[0]);
                }
            }
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$didReceivedNotification$19 */
    public /* synthetic */ void lambda$didReceivedNotification$19$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$User user = getUser(Integer.valueOf(getUserConfig().getClientUserId()));
            if (user == null) {
                user = getUserConfig().getCurrentUser();
                putUser(user, true);
            } else {
                getUserConfig().setCurrentUser(user);
            }
            if (user != null) {
                TLRPC$TL_photos_photo tLRPC$TL_photos_photo = (TLRPC$TL_photos_photo) tLObject;
                ArrayList<TLRPC$PhotoSize> arrayList = tLRPC$TL_photos_photo.photo.sizes;
                TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(arrayList, 100);
                TLRPC$PhotoSize closestPhotoSizeWithSize2 = FileLoader.getClosestPhotoSizeWithSize(arrayList, 1000);
                TLRPC$TL_userProfilePhoto tLRPC$TL_userProfilePhoto = new TLRPC$TL_userProfilePhoto();
                user.photo = tLRPC$TL_userProfilePhoto;
                tLRPC$TL_userProfilePhoto.photo_id = tLRPC$TL_photos_photo.photo.id;
                if (closestPhotoSizeWithSize != null) {
                    tLRPC$TL_userProfilePhoto.photo_small = closestPhotoSizeWithSize.location;
                }
                if (closestPhotoSizeWithSize2 != null) {
                    tLRPC$TL_userProfilePhoto.photo_big = closestPhotoSizeWithSize2.location;
                }
                getMessagesStorage().clearUserPhotos(user.id);
                ArrayList arrayList2 = new ArrayList();
                arrayList2.add(user);
                getMessagesStorage().putUsersAndChats(arrayList2, (ArrayList<TLRPC$Chat>) null, false, true);
                AndroidUtilities.runOnUIThread(new Runnable() {
                    public final void run() {
                        MessagesController.this.lambda$null$18$MessagesController();
                    }
                });
            }
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$18 */
    public /* synthetic */ void lambda$null$18$MessagesController() {
        getNotificationCenter().postNotificationName(NotificationCenter.mainUserInfoChanged, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 2);
        getUserConfig().saveConfig(true);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$didReceivedNotification$21 */
    public /* synthetic */ void lambda$didReceivedNotification$21$MessagesController(Theme.OverrideWallpaperInfo overrideWallpaperInfo, TLRPC$TL_wallPaperSettings tLRPC$TL_wallPaperSettings, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        TLRPC$TL_wallPaper tLRPC$TL_wallPaper = (TLRPC$TL_wallPaper) tLObject;
        File file = new File(ApplicationLoader.getFilesDirFixed(), overrideWallpaperInfo.originalFileName);
        if (tLRPC$TL_wallPaper != null) {
            try {
                AndroidUtilities.copyFile(file, FileLoader.getPathToAttach(tLRPC$TL_wallPaper.document, true));
            } catch (Exception unused) {
            }
        }
        AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_wallPaper, tLRPC$TL_wallPaperSettings, overrideWallpaperInfo, file) {
            public final /* synthetic */ TLRPC$TL_wallPaper f$1;
            public final /* synthetic */ TLRPC$TL_wallPaperSettings f$2;
            public final /* synthetic */ Theme.OverrideWallpaperInfo f$3;
            public final /* synthetic */ File f$4;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
            }

            public final void run() {
                MessagesController.this.lambda$null$20$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$20 */
    public /* synthetic */ void lambda$null$20$MessagesController(TLRPC$TL_wallPaper tLRPC$TL_wallPaper, TLRPC$TL_wallPaperSettings tLRPC$TL_wallPaperSettings, Theme.OverrideWallpaperInfo overrideWallpaperInfo, File file) {
        if (this.uploadingWallpaper != null && tLRPC$TL_wallPaper != null) {
            tLRPC$TL_wallPaper.settings = tLRPC$TL_wallPaperSettings;
            tLRPC$TL_wallPaper.flags |= 4;
            overrideWallpaperInfo.slug = tLRPC$TL_wallPaper.slug;
            overrideWallpaperInfo.saveOverrideWallpaper();
            ArrayList arrayList = new ArrayList();
            arrayList.add(tLRPC$TL_wallPaper);
            getMessagesStorage().putWallpapers(arrayList, 2);
            TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(tLRPC$TL_wallPaper.document.thumbs, 320);
            if (closestPhotoSizeWithSize != null) {
                ImageLoader.getInstance().replaceImageInCache(Utilities.MD5(file.getAbsolutePath()) + "@100_100", closestPhotoSizeWithSize.location.volume_id + "_" + closestPhotoSizeWithSize.location.local_id + "@100_100", ImageLocation.getForDocument(closestPhotoSizeWithSize, tLRPC$TL_wallPaper.document), false);
            }
            NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.wallpapersNeedReload, tLRPC$TL_wallPaper.slug);
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$didReceivedNotification$27 */
    public /* synthetic */ void lambda$didReceivedNotification$27$MessagesController(TLRPC$TL_theme tLRPC$TL_theme, Theme.ThemeInfo themeInfo, TLRPC$TL_inputThemeSettings tLRPC$TL_inputThemeSettings, Theme.ThemeAccent themeAccent, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        String name = tLRPC$TL_theme != null ? tLRPC$TL_theme.title : themeInfo.getName();
        int lastIndexOf = name.lastIndexOf(".attheme");
        if (lastIndexOf > 0) {
            name = name.substring(0, lastIndexOf);
        }
        if (tLObject != null) {
            TLRPC$Document tLRPC$Document = (TLRPC$Document) tLObject;
            TLRPC$TL_inputDocument tLRPC$TL_inputDocument = new TLRPC$TL_inputDocument();
            tLRPC$TL_inputDocument.access_hash = tLRPC$Document.access_hash;
            tLRPC$TL_inputDocument.id = tLRPC$Document.id;
            tLRPC$TL_inputDocument.file_reference = tLRPC$Document.file_reference;
            if (tLRPC$TL_theme == null || !tLRPC$TL_theme.creator) {
                TLRPC$TL_account_createTheme tLRPC$TL_account_createTheme = new TLRPC$TL_account_createTheme();
                tLRPC$TL_account_createTheme.document = tLRPC$TL_inputDocument;
                tLRPC$TL_account_createTheme.flags |= 4;
                tLRPC$TL_account_createTheme.slug = (tLRPC$TL_theme == null || TextUtils.isEmpty(tLRPC$TL_theme.slug)) ? "" : tLRPC$TL_theme.slug;
                tLRPC$TL_account_createTheme.title = name;
                if (tLRPC$TL_inputThemeSettings != null) {
                    tLRPC$TL_account_createTheme.settings = tLRPC$TL_inputThemeSettings;
                    tLRPC$TL_account_createTheme.flags |= 8;
                }
                getConnectionsManager().sendRequest(tLRPC$TL_account_createTheme, new RequestDelegate(themeInfo, themeAccent) {
                    public final /* synthetic */ Theme.ThemeInfo f$1;
                    public final /* synthetic */ Theme.ThemeAccent f$2;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$null$23$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                    }
                });
                return;
            }
            TLRPC$TL_account_updateTheme tLRPC$TL_account_updateTheme = new TLRPC$TL_account_updateTheme();
            TLRPC$TL_inputTheme tLRPC$TL_inputTheme = new TLRPC$TL_inputTheme();
            tLRPC$TL_inputTheme.id = tLRPC$TL_theme.id;
            tLRPC$TL_inputTheme.access_hash = tLRPC$TL_theme.access_hash;
            tLRPC$TL_account_updateTheme.theme = tLRPC$TL_inputTheme;
            tLRPC$TL_account_updateTheme.slug = tLRPC$TL_theme.slug;
            int i = tLRPC$TL_account_updateTheme.flags | 1;
            tLRPC$TL_account_updateTheme.flags = i;
            tLRPC$TL_account_updateTheme.title = name;
            int i2 = i | 2;
            tLRPC$TL_account_updateTheme.flags = i2;
            tLRPC$TL_account_updateTheme.document = tLRPC$TL_inputDocument;
            int i3 = i2 | 4;
            tLRPC$TL_account_updateTheme.flags = i3;
            if (tLRPC$TL_inputThemeSettings != null) {
                tLRPC$TL_account_updateTheme.settings = tLRPC$TL_inputThemeSettings;
                tLRPC$TL_account_updateTheme.flags = i3 | 8;
            }
            tLRPC$TL_account_updateTheme.format = "android";
            getConnectionsManager().sendRequest(tLRPC$TL_account_updateTheme, new RequestDelegate(themeInfo, themeAccent) {
                public final /* synthetic */ Theme.ThemeInfo f$1;
                public final /* synthetic */ Theme.ThemeAccent f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$null$25$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                }
            });
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable(themeInfo, themeAccent) {
            public final /* synthetic */ Theme.ThemeInfo f$1;
            public final /* synthetic */ Theme.ThemeAccent f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$null$26$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$23 */
    public /* synthetic */ void lambda$null$23$MessagesController(Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable(tLObject, themeInfo, themeAccent) {
            public final /* synthetic */ TLObject f$1;
            public final /* synthetic */ Theme.ThemeInfo f$2;
            public final /* synthetic */ Theme.ThemeAccent f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesController.this.lambda$null$22$MessagesController(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$22 */
    public /* synthetic */ void lambda$null$22$MessagesController(TLObject tLObject, Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent) {
        if (tLObject instanceof TLRPC$TL_theme) {
            Theme.setThemeUploadInfo(themeInfo, themeAccent, (TLRPC$TL_theme) tLObject, this.currentAccount, false);
            installTheme(themeInfo, themeAccent, themeInfo == Theme.getCurrentNightTheme());
            getNotificationCenter().postNotificationName(NotificationCenter.themeUploadedToServer, themeInfo, themeAccent);
            return;
        }
        getNotificationCenter().postNotificationName(NotificationCenter.themeUploadError, themeInfo, themeAccent);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$25 */
    public /* synthetic */ void lambda$null$25$MessagesController(Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable(tLObject, themeInfo, themeAccent) {
            public final /* synthetic */ TLObject f$1;
            public final /* synthetic */ Theme.ThemeInfo f$2;
            public final /* synthetic */ Theme.ThemeAccent f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesController.this.lambda$null$24$MessagesController(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$24 */
    public /* synthetic */ void lambda$null$24$MessagesController(TLObject tLObject, Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent) {
        if (tLObject instanceof TLRPC$TL_theme) {
            Theme.setThemeUploadInfo(themeInfo, themeAccent, (TLRPC$TL_theme) tLObject, this.currentAccount, false);
            getNotificationCenter().postNotificationName(NotificationCenter.themeUploadedToServer, themeInfo, themeAccent);
            return;
        }
        getNotificationCenter().postNotificationName(NotificationCenter.themeUploadError, themeInfo, themeAccent);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$26 */
    public /* synthetic */ void lambda$null$26$MessagesController(Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent) {
        getNotificationCenter().postNotificationName(NotificationCenter.themeUploadError, themeInfo, themeAccent);
    }

    public void cleanup() {
        getContactsController().cleanup();
        MediaController.getInstance().cleanup();
        getNotificationsController().cleanup();
        getSendMessagesHelper().cleanup();
        getSecretChatHelper().cleanup();
        getLocationController().cleanup();
        getMediaDataController().cleanup();
        DialogsActivity.dialogsLoaded[this.currentAccount] = false;
        this.notificationsPreferences.edit().clear().commit();
        this.emojiPreferences.edit().putLong("lastGifLoadTime", 0).putLong("lastStickersLoadTime", 0).putLong("lastStickersLoadTimeMask", 0).putLong("lastStickersLoadTimeFavs", 0).commit();
        this.mainPreferences.edit().remove("archivehint").remove("proximityhint").remove("archivehint_l").remove("gifhint").remove("soundHint").remove("dcDomainName2").remove("webFileDatacenterId").remove("themehint").commit();
        this.lastScheduledServerQueryTime.clear();
        this.lastServerQueryTime.clear();
        this.reloadingWebpages.clear();
        this.reloadingWebpagesPending.clear();
        this.reloadingScheduledWebpages.clear();
        this.reloadingScheduledWebpagesPending.clear();
        this.dialogs_dict.clear();
        this.dialogs_read_inbox_max.clear();
        this.loadingPinnedDialogs.clear();
        this.dialogs_read_outbox_max.clear();
        this.exportedChats.clear();
        this.fullUsers.clear();
        this.fullChats.clear();
        this.loadingGroupCalls.clear();
        this.groupCallsByChatId.clear();
        this.dialogsByFolder.clear();
        this.unreadUnmutedDialogs = 0;
        this.joiningToChannels.clear();
        this.migratedChats.clear();
        this.channelViewsToSend.clear();
        this.pollsToCheck.clear();
        this.pollsToCheckSize = 0;
        this.dialogsServerOnly.clear();
        this.dialogsForward.clear();
        this.allDialogs.clear();
        this.dialogsLoadedTillDate = Integer.MAX_VALUE;
        this.dialogsCanAddUsers.clear();
        this.dialogsChannelsOnly.clear();
        this.dialogsGroupsOnly.clear();
        this.dialogsUsersOnly.clear();
        this.dialogsForBlock.clear();
        this.dialogMessagesByIds.clear();
        this.dialogMessagesByRandomIds.clear();
        this.channelAdmins.clear();
        this.loadingChannelAdmins.clear();
        this.users.clear();
        this.objectsByUsernames.clear();
        this.chats.clear();
        this.dialogMessage.clear();
        this.deletedHistory.clear();
        this.printingUsers.clear();
        this.printingStrings.clear();
        this.printingStringsTypes.clear();
        this.onlinePrivacy.clear();
        this.loadingPeerSettings.clear();
        this.deletingDialogs.clear();
        this.clearingHistoryDialogs.clear();
        this.lastPrintingStringCount = 0;
        DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
        dialogFilterArr[1] = null;
        dialogFilterArr[0] = null;
        this.dialogFilters.clear();
        this.dialogFiltersById.clear();
        this.loadingSuggestedFilters = false;
        this.loadingRemoteFilters = false;
        this.suggestedFilters.clear();
        this.gettingAppChangelog = false;
        this.dialogFiltersLoaded = false;
        this.ignoreSetOnline = false;
        Utilities.stageQueue.postRunnable(new Runnable() {
            public final void run() {
                MessagesController.this.lambda$cleanup$28$MessagesController();
            }
        });
        this.createdDialogMainThreadIds.clear();
        this.visibleDialogMainThreadIds.clear();
        this.visibleScheduledDialogMainThreadIds.clear();
        this.blockePeers.clear();
        int i = 0;
        while (true) {
            LongSparseArray<SparseArray<Boolean>>[] longSparseArrayArr = this.sendingTypings;
            if (i >= longSparseArrayArr.length) {
                break;
            }
            if (longSparseArrayArr[i] != null) {
                longSparseArrayArr[i].clear();
            }
            i++;
        }
        this.loadingFullUsers.clear();
        this.loadedFullUsers.clear();
        this.reloadingMessages.clear();
        this.loadingFullChats.clear();
        this.loadingFullParticipants.clear();
        this.loadedFullParticipants.clear();
        this.loadedFullChats.clear();
        this.dialogsLoaded = false;
        this.nextDialogsCacheOffset.clear();
        this.loadingDialogs.clear();
        this.dialogsEndReached.clear();
        this.serverDialogsEndReached.clear();
        this.loadingAppConfig = false;
        this.checkingTosUpdate = false;
        this.nextTosCheckTime = 0;
        this.nextPromoInfoCheckTime = 0;
        this.checkingPromoInfo = false;
        this.loadingUnreadDialogs = false;
        this.currentDeletingTaskTime = 0;
        this.currentDeletingTaskMids = null;
        this.currentDeletingTaskChannelId = 0;
        this.gettingNewDeleteTask = false;
        this.loadingBlockedPeers = false;
        this.totalBlockedCount = -1;
        this.blockedEndReached = false;
        this.firstGettingTask = false;
        this.updatingState = false;
        this.resetingDialogs = false;
        this.lastStatusUpdateTime = 0;
        this.offlineSent = false;
        this.registeringForPush = false;
        this.getDifferenceFirstSync = true;
        this.uploadingAvatar = null;
        this.uploadingWallpaper = null;
        this.uploadingWallpaperInfo = null;
        this.uploadingThemes.clear();
        this.gettingChatInviters.clear();
        this.statusRequest = 0;
        this.statusSettingState = 0;
        Utilities.stageQueue.postRunnable(new Runnable() {
            public final void run() {
                MessagesController.this.lambda$cleanup$29$MessagesController();
            }
        });
        if (this.currentDeleteTaskRunnable != null) {
            Utilities.stageQueue.cancelRunnable(this.currentDeleteTaskRunnable);
            this.currentDeleteTaskRunnable = null;
        }
        addSupportUser();
        getNotificationCenter().postNotificationName(NotificationCenter.suggestedFiltersLoaded, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogFiltersUpdated, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$cleanup$28 */
    public /* synthetic */ void lambda$cleanup$28$MessagesController() {
        this.readTasks.clear();
        this.readTasksMap.clear();
        this.repliesReadTasks.clear();
        this.threadsReadTasksMap.clear();
        this.updatesQueueSeq.clear();
        this.updatesQueuePts.clear();
        this.updatesQueueQts.clear();
        this.gettingUnknownChannels.clear();
        this.gettingUnknownDialogs.clear();
        this.updatesStartWaitTimeSeq = 0;
        this.updatesStartWaitTimePts = 0;
        this.updatesStartWaitTimeQts = 0;
        this.createdDialogIds.clear();
        this.createdScheduledDialogIds.clear();
        this.gettingDifference = false;
        this.resetDialogsPinned = null;
        this.resetDialogsAll = null;
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$cleanup$29 */
    public /* synthetic */ void lambda$cleanup$29$MessagesController() {
        getConnectionsManager().setIsUpdating(false);
        this.updatesQueueChannels.clear();
        this.updatesStartWaitTimeChannels.clear();
        this.gettingDifferenceChannels.clear();
        this.channelsPts.clear();
        this.shortPollChannels.clear();
        this.needShortPollChannels.clear();
        this.shortPollOnlines.clear();
        this.needShortPollOnlines.clear();
    }

    public TLRPC$User getUser(Integer num) {
        return (TLRPC$User) this.users.get(num);
    }

    public TLObject getUserOrChat(String str) {
        if (str == null || str.length() == 0) {
            return null;
        }
        return (TLObject) this.objectsByUsernames.get(str.toLowerCase());
    }

    public ConcurrentHashMap<Integer, TLRPC$User> getUsers() {
        return this.users;
    }

    public ConcurrentHashMap<Integer, TLRPC$Chat> getChats() {
        return this.chats;
    }

    public TLRPC$Chat getChat(Integer num) {
        return (TLRPC$Chat) this.chats.get(num);
    }

    public TLRPC$EncryptedChat getEncryptedChat(Integer num) {
        return (TLRPC$EncryptedChat) this.encryptedChats.get(num);
    }

    public TLRPC$EncryptedChat getEncryptedChatDB(int i, boolean z) {
        TLRPC$EncryptedChat tLRPC$EncryptedChat = (TLRPC$EncryptedChat) this.encryptedChats.get(Integer.valueOf(i));
        if (tLRPC$EncryptedChat != null) {
            if (!z) {
                return tLRPC$EncryptedChat;
            }
            if (!(tLRPC$EncryptedChat instanceof TLRPC$TL_encryptedChatWaiting) && !(tLRPC$EncryptedChat instanceof TLRPC$TL_encryptedChatRequested)) {
                return tLRPC$EncryptedChat;
            }
        }
        CountDownLatch countDownLatch = new CountDownLatch(1);
        ArrayList arrayList = new ArrayList();
        getMessagesStorage().getEncryptedChat(i, countDownLatch, arrayList);
        try {
            countDownLatch.await();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        if (arrayList.size() != 2) {
            return tLRPC$EncryptedChat;
        }
        TLRPC$EncryptedChat tLRPC$EncryptedChat2 = (TLRPC$EncryptedChat) arrayList.get(0);
        putEncryptedChat(tLRPC$EncryptedChat2, false);
        putUser((TLRPC$User) arrayList.get(1), true);
        return tLRPC$EncryptedChat2;
    }

    public boolean isDialogVisible(long j, boolean z) {
        return (z ? this.visibleScheduledDialogMainThreadIds : this.visibleDialogMainThreadIds).contains(Long.valueOf(j));
    }

    public void setLastVisibleDialogId(long j, boolean z, boolean z2) {
        ArrayList<Long> arrayList = z ? this.visibleScheduledDialogMainThreadIds : this.visibleDialogMainThreadIds;
        if (!z2) {
            arrayList.remove(Long.valueOf(j));
        } else if (!arrayList.contains(Long.valueOf(j))) {
            arrayList.add(Long.valueOf(j));
        }
    }

    public void setLastCreatedDialogId(long j, boolean z, boolean z2) {
        if (!z) {
            ArrayList<Long> arrayList = this.createdDialogMainThreadIds;
            if (!z2) {
                arrayList.remove(Long.valueOf(j));
                SparseArray sparseArray = this.pollsToCheck.get(j);
                if (sparseArray != null) {
                    int size = sparseArray.size();
                    for (int i = 0; i < size; i++) {
                        ((MessageObject) sparseArray.valueAt(i)).pollVisibleOnScreen = false;
                    }
                }
            } else if (!arrayList.contains(Long.valueOf(j))) {
                arrayList.add(Long.valueOf(j));
            } else {
                return;
            }
        }
        Utilities.stageQueue.postRunnable(new Runnable(z, z2, j) {
            public final /* synthetic */ boolean f$1;
            public final /* synthetic */ boolean f$2;
            public final /* synthetic */ long f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesController.this.lambda$setLastCreatedDialogId$30$MessagesController(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$setLastCreatedDialogId$30 */
    public /* synthetic */ void lambda$setLastCreatedDialogId$30$MessagesController(boolean z, boolean z2, long j) {
        ArrayList<Long> arrayList = z ? this.createdScheduledDialogIds : this.createdDialogIds;
        if (!z2) {
            arrayList.remove(Long.valueOf(j));
        } else if (!arrayList.contains(Long.valueOf(j))) {
            arrayList.add(Long.valueOf(j));
        }
    }

    public TLRPC$ExportedChatInvite getExportedInvite(int i) {
        return this.exportedChats.get(i);
    }

    /* JADX WARNING: Code restructure failed: missing block: B:41:0x00c0, code lost:
        r6 = r6.status;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:43:0x00c4, code lost:
        r7 = r2.status;
     */
    /* JADX WARNING: Removed duplicated region for block: B:13:0x0027 A[RETURN] */
    /* JADX WARNING: Removed duplicated region for block: B:14:0x0028 A[ADDED_TO_REGION] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean putUser(org.telegram.tgnet.TLRPC$User r6, boolean r7) {
        /*
            r5 = this;
            r0 = 0
            if (r6 != 0) goto L_0x0004
            return r0
        L_0x0004:
            r1 = 1
            if (r7 == 0) goto L_0x0016
            int r7 = r6.id
            int r2 = r7 / 1000
            r3 = 333(0x14d, float:4.67E-43)
            if (r2 == r3) goto L_0x0016
            r2 = 777000(0xbdb28, float:1.088809E-39)
            if (r7 == r2) goto L_0x0016
            r7 = 1
            goto L_0x0017
        L_0x0016:
            r7 = 0
        L_0x0017:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Integer, org.telegram.tgnet.TLRPC$User> r2 = r5.users
            int r3 = r6.id
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)
            java.lang.Object r2 = r2.get(r3)
            org.telegram.tgnet.TLRPC$User r2 = (org.telegram.tgnet.TLRPC$User) r2
            if (r2 != r6) goto L_0x0028
            return r0
        L_0x0028:
            if (r2 == 0) goto L_0x003d
            java.lang.String r3 = r2.username
            boolean r3 = android.text.TextUtils.isEmpty(r3)
            if (r3 != 0) goto L_0x003d
            j$.util.concurrent.ConcurrentHashMap<java.lang.String, org.telegram.tgnet.TLObject> r3 = r5.objectsByUsernames
            java.lang.String r4 = r2.username
            java.lang.String r4 = r4.toLowerCase()
            r3.remove(r4)
        L_0x003d:
            java.lang.String r3 = r6.username
            boolean r3 = android.text.TextUtils.isEmpty(r3)
            if (r3 != 0) goto L_0x0050
            j$.util.concurrent.ConcurrentHashMap<java.lang.String, org.telegram.tgnet.TLObject> r3 = r5.objectsByUsernames
            java.lang.String r4 = r6.username
            java.lang.String r4 = r4.toLowerCase()
            r3.put(r4, r6)
        L_0x0050:
            boolean r3 = r6.min
            r4 = 0
            if (r3 == 0) goto L_0x0097
            if (r2 == 0) goto L_0x008a
            if (r7 != 0) goto L_0x011c
            boolean r7 = r6.bot
            if (r7 == 0) goto L_0x0072
            java.lang.String r7 = r6.username
            if (r7 == 0) goto L_0x006a
            r2.username = r7
            int r7 = r2.flags
            r7 = r7 | 8
            r2.flags = r7
            goto L_0x0072
        L_0x006a:
            int r7 = r2.flags
            r7 = r7 & -9
            r2.flags = r7
            r2.username = r4
        L_0x0072:
            org.telegram.tgnet.TLRPC$UserProfilePhoto r6 = r6.photo
            if (r6 == 0) goto L_0x0080
            r2.photo = r6
            int r6 = r2.flags
            r6 = r6 | 32
            r2.flags = r6
            goto L_0x011c
        L_0x0080:
            int r6 = r2.flags
            r6 = r6 & -33
            r2.flags = r6
            r2.photo = r4
            goto L_0x011c
        L_0x008a:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Integer, org.telegram.tgnet.TLRPC$User> r7 = r5.users
            int r1 = r6.id
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            r7.put(r1, r6)
            goto L_0x011c
        L_0x0097:
            if (r7 != 0) goto L_0x00cf
            j$.util.concurrent.ConcurrentHashMap<java.lang.Integer, org.telegram.tgnet.TLRPC$User> r7 = r5.users
            int r3 = r6.id
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)
            r7.put(r3, r6)
            int r7 = r6.id
            org.telegram.messenger.UserConfig r3 = r5.getUserConfig()
            int r3 = r3.getClientUserId()
            if (r7 != r3) goto L_0x00be
            org.telegram.messenger.UserConfig r7 = r5.getUserConfig()
            r7.setCurrentUser(r6)
            org.telegram.messenger.UserConfig r7 = r5.getUserConfig()
            r7.saveConfig(r1)
        L_0x00be:
            if (r2 == 0) goto L_0x011c
            org.telegram.tgnet.TLRPC$UserStatus r6 = r6.status
            if (r6 == 0) goto L_0x011c
            org.telegram.tgnet.TLRPC$UserStatus r7 = r2.status
            if (r7 == 0) goto L_0x011c
            int r6 = r6.expires
            int r7 = r7.expires
            if (r6 == r7) goto L_0x011c
            return r1
        L_0x00cf:
            if (r2 != 0) goto L_0x00dd
            j$.util.concurrent.ConcurrentHashMap<java.lang.Integer, org.telegram.tgnet.TLRPC$User> r7 = r5.users
            int r1 = r6.id
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            r7.put(r1, r6)
            goto L_0x011c
        L_0x00dd:
            boolean r7 = r2.min
            if (r7 == 0) goto L_0x011c
            r6.min = r0
            boolean r7 = r2.bot
            if (r7 == 0) goto L_0x00fc
            java.lang.String r7 = r2.username
            if (r7 == 0) goto L_0x00f4
            r6.username = r7
            int r7 = r6.flags
            r7 = r7 | 8
            r6.flags = r7
            goto L_0x00fc
        L_0x00f4:
            int r7 = r6.flags
            r7 = r7 & -9
            r6.flags = r7
            r6.username = r4
        L_0x00fc:
            org.telegram.tgnet.TLRPC$UserProfilePhoto r7 = r2.photo
            if (r7 == 0) goto L_0x0109
            r6.photo = r7
            int r7 = r6.flags
            r7 = r7 | 32
            r6.flags = r7
            goto L_0x0111
        L_0x0109:
            int r7 = r6.flags
            r7 = r7 & -33
            r6.flags = r7
            r6.photo = r4
        L_0x0111:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Integer, org.telegram.tgnet.TLRPC$User> r7 = r5.users
            int r1 = r6.id
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            r7.put(r1, r6)
        L_0x011c:
            return r0
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.putUser(org.telegram.tgnet.TLRPC$User, boolean):boolean");
    }

    public void putUsers(ArrayList<TLRPC$User> arrayList, boolean z) {
        if (arrayList != null && !arrayList.isEmpty()) {
            int size = arrayList.size();
            boolean z2 = false;
            for (int i = 0; i < size; i++) {
                if (putUser(arrayList.get(i), z)) {
                    z2 = true;
                }
            }
            if (z2) {
                AndroidUtilities.runOnUIThread(new Runnable() {
                    public final void run() {
                        MessagesController.this.lambda$putUsers$31$MessagesController();
                    }
                });
            }
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$putUsers$31 */
    public /* synthetic */ void lambda$putUsers$31$MessagesController() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 4);
    }

    public void putChat(TLRPC$Chat tLRPC$Chat, boolean z) {
        TLRPC$Chat tLRPC$Chat2;
        if (tLRPC$Chat != null && (tLRPC$Chat2 = (TLRPC$Chat) this.chats.get(Integer.valueOf(tLRPC$Chat.id))) != tLRPC$Chat) {
            if (tLRPC$Chat2 != null && !TextUtils.isEmpty(tLRPC$Chat2.username)) {
                this.objectsByUsernames.remove(tLRPC$Chat2.username.toLowerCase());
            }
            if (!TextUtils.isEmpty(tLRPC$Chat.username)) {
                this.objectsByUsernames.put(tLRPC$Chat.username.toLowerCase(), tLRPC$Chat);
            }
            if (!tLRPC$Chat.min) {
                int i = 0;
                if (!z) {
                    if (tLRPC$Chat2 != null) {
                        if (tLRPC$Chat.version != tLRPC$Chat2.version) {
                            this.loadedFullChats.remove(Integer.valueOf(tLRPC$Chat.id));
                        }
                        int i2 = tLRPC$Chat2.participants_count;
                        if (i2 != 0 && tLRPC$Chat.participants_count == 0) {
                            tLRPC$Chat.participants_count = i2;
                            tLRPC$Chat.flags |= 131072;
                        }
                        TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights = tLRPC$Chat2.banned_rights;
                        int i3 = tLRPC$TL_chatBannedRights != null ? tLRPC$TL_chatBannedRights.flags : 0;
                        TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights2 = tLRPC$Chat.banned_rights;
                        int i4 = tLRPC$TL_chatBannedRights2 != null ? tLRPC$TL_chatBannedRights2.flags : 0;
                        TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights3 = tLRPC$Chat2.default_banned_rights;
                        int i5 = tLRPC$TL_chatBannedRights3 != null ? tLRPC$TL_chatBannedRights3.flags : 0;
                        TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights4 = tLRPC$Chat.default_banned_rights;
                        if (tLRPC$TL_chatBannedRights4 != null) {
                            i = tLRPC$TL_chatBannedRights4.flags;
                        }
                        tLRPC$Chat2.default_banned_rights = tLRPC$TL_chatBannedRights4;
                        if (tLRPC$TL_chatBannedRights4 == null) {
                            tLRPC$Chat2.flags &= -262145;
                        } else {
                            tLRPC$Chat2.flags = 262144 | tLRPC$Chat2.flags;
                        }
                        tLRPC$Chat2.banned_rights = tLRPC$TL_chatBannedRights2;
                        if (tLRPC$TL_chatBannedRights2 == null) {
                            tLRPC$Chat2.flags &= -32769;
                        } else {
                            tLRPC$Chat2.flags |= 32768;
                        }
                        TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights = tLRPC$Chat.admin_rights;
                        tLRPC$Chat2.admin_rights = tLRPC$TL_chatAdminRights;
                        if (tLRPC$TL_chatAdminRights == null) {
                            tLRPC$Chat2.flags &= -16385;
                        } else {
                            tLRPC$Chat2.flags |= 16384;
                        }
                        if (!(i3 == i4 && i5 == i)) {
                            AndroidUtilities.runOnUIThread(new Runnable(tLRPC$Chat) {
                                public final /* synthetic */ TLRPC$Chat f$1;

                                {
                                    this.f$1 = r2;
                                }

                                public final void run() {
                                    MessagesController.this.lambda$putChat$32$MessagesController(this.f$1);
                                }
                            });
                        }
                    }
                    this.chats.put(Integer.valueOf(tLRPC$Chat.id), tLRPC$Chat);
                } else if (tLRPC$Chat2 == null) {
                    this.chats.put(Integer.valueOf(tLRPC$Chat.id), tLRPC$Chat);
                } else if (tLRPC$Chat2.min) {
                    tLRPC$Chat.min = false;
                    tLRPC$Chat.title = tLRPC$Chat2.title;
                    tLRPC$Chat.photo = tLRPC$Chat2.photo;
                    tLRPC$Chat.broadcast = tLRPC$Chat2.broadcast;
                    tLRPC$Chat.verified = tLRPC$Chat2.verified;
                    tLRPC$Chat.megagroup = tLRPC$Chat2.megagroup;
                    TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights5 = tLRPC$Chat2.default_banned_rights;
                    if (tLRPC$TL_chatBannedRights5 != null) {
                        tLRPC$Chat.default_banned_rights = tLRPC$TL_chatBannedRights5;
                        tLRPC$Chat.flags |= 262144;
                    }
                    TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights2 = tLRPC$Chat2.admin_rights;
                    if (tLRPC$TL_chatAdminRights2 != null) {
                        tLRPC$Chat.admin_rights = tLRPC$TL_chatAdminRights2;
                        tLRPC$Chat.flags |= 16384;
                    }
                    TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights6 = tLRPC$Chat2.banned_rights;
                    if (tLRPC$TL_chatBannedRights6 != null) {
                        tLRPC$Chat.banned_rights = tLRPC$TL_chatBannedRights6;
                        tLRPC$Chat.flags |= 32768;
                    }
                    String str = tLRPC$Chat2.username;
                    if (str != null) {
                        tLRPC$Chat.username = str;
                        tLRPC$Chat.flags |= 64;
                    } else {
                        tLRPC$Chat.flags &= -65;
                        tLRPC$Chat.username = null;
                    }
                    int i6 = tLRPC$Chat2.participants_count;
                    if (i6 != 0 && tLRPC$Chat.participants_count == 0) {
                        tLRPC$Chat.participants_count = i6;
                        tLRPC$Chat.flags |= 131072;
                    }
                    this.chats.put(Integer.valueOf(tLRPC$Chat.id), tLRPC$Chat);
                }
            } else if (tLRPC$Chat2 == null) {
                this.chats.put(Integer.valueOf(tLRPC$Chat.id), tLRPC$Chat);
            } else if (!z) {
                tLRPC$Chat2.title = tLRPC$Chat.title;
                tLRPC$Chat2.photo = tLRPC$Chat.photo;
                tLRPC$Chat2.broadcast = tLRPC$Chat.broadcast;
                tLRPC$Chat2.verified = tLRPC$Chat.verified;
                tLRPC$Chat2.megagroup = tLRPC$Chat.megagroup;
                tLRPC$Chat2.call_not_empty = tLRPC$Chat.call_not_empty;
                tLRPC$Chat2.call_active = tLRPC$Chat.call_active;
                TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights7 = tLRPC$Chat.default_banned_rights;
                if (tLRPC$TL_chatBannedRights7 != null) {
                    tLRPC$Chat2.default_banned_rights = tLRPC$TL_chatBannedRights7;
                    tLRPC$Chat2.flags |= 262144;
                }
                TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights3 = tLRPC$Chat.admin_rights;
                if (tLRPC$TL_chatAdminRights3 != null) {
                    tLRPC$Chat2.admin_rights = tLRPC$TL_chatAdminRights3;
                    tLRPC$Chat2.flags |= 16384;
                }
                TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights8 = tLRPC$Chat.banned_rights;
                if (tLRPC$TL_chatBannedRights8 != null) {
                    tLRPC$Chat2.banned_rights = tLRPC$TL_chatBannedRights8;
                    tLRPC$Chat2.flags |= 32768;
                }
                String str2 = tLRPC$Chat.username;
                if (str2 != null) {
                    tLRPC$Chat2.username = str2;
                    tLRPC$Chat2.flags |= 64;
                } else {
                    tLRPC$Chat2.flags &= -65;
                    tLRPC$Chat2.username = null;
                }
                int i7 = tLRPC$Chat.participants_count;
                if (i7 != 0) {
                    tLRPC$Chat2.participants_count = i7;
                }
            }
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$putChat$32 */
    public /* synthetic */ void lambda$putChat$32$MessagesController(TLRPC$Chat tLRPC$Chat) {
        getNotificationCenter().postNotificationName(NotificationCenter.channelRightsUpdated, tLRPC$Chat);
    }

    public void putChats(ArrayList<TLRPC$Chat> arrayList, boolean z) {
        if (arrayList != null && !arrayList.isEmpty()) {
            int size = arrayList.size();
            for (int i = 0; i < size; i++) {
                putChat(arrayList.get(i), z);
            }
        }
    }

    public void setReferer(String str) {
        if (str != null) {
            this.installReferer = str;
            this.mainPreferences.edit().putString("installReferer", str).commit();
        }
    }

    public void putEncryptedChat(TLRPC$EncryptedChat tLRPC$EncryptedChat, boolean z) {
        if (tLRPC$EncryptedChat != null) {
            if (z) {
                this.encryptedChats.putIfAbsent(Integer.valueOf(tLRPC$EncryptedChat.id), tLRPC$EncryptedChat);
            } else {
                this.encryptedChats.put(Integer.valueOf(tLRPC$EncryptedChat.id), tLRPC$EncryptedChat);
            }
        }
    }

    public void putEncryptedChats(ArrayList<TLRPC$EncryptedChat> arrayList, boolean z) {
        if (arrayList != null && !arrayList.isEmpty()) {
            int size = arrayList.size();
            for (int i = 0; i < size; i++) {
                putEncryptedChat(arrayList.get(i), z);
            }
        }
    }

    public TLRPC$UserFull getUserFull(int i) {
        return this.fullUsers.get(i);
    }

    public TLRPC$ChatFull getChatFull(int i) {
        return this.fullChats.get(i);
    }

    public void putGroupCall(int i, ChatObject.Call call) {
        this.groupCalls.put(call.call.id, call);
        this.groupCallsByChatId.put(i, call);
        TLRPC$ChatFull chatFull = getChatFull(i);
        if (chatFull != null) {
            chatFull.call = call.getInputGroupCall();
        }
        getNotificationCenter().postNotificationName(NotificationCenter.groupCallUpdated, Integer.valueOf(i), Long.valueOf(call.call.id), Boolean.FALSE);
        loadFullChat(i, 0, true);
    }

    public ChatObject.Call getGroupCall(int i, boolean z) {
        TLRPC$TL_inputGroupCall tLRPC$TL_inputGroupCall;
        TLRPC$ChatFull chatFull = getChatFull(i);
        if (chatFull == null || (tLRPC$TL_inputGroupCall = chatFull.call) == null) {
            return null;
        }
        ChatObject.Call call = this.groupCalls.get(tLRPC$TL_inputGroupCall.id);
        if (call == null && z && !this.loadingGroupCalls.contains(Integer.valueOf(i))) {
            this.loadingGroupCalls.add(Integer.valueOf(i));
            if (chatFull.call != null) {
                TLRPC$TL_phone_getGroupCall tLRPC$TL_phone_getGroupCall = new TLRPC$TL_phone_getGroupCall();
                tLRPC$TL_phone_getGroupCall.call = chatFull.call;
                getConnectionsManager().sendRequest(tLRPC$TL_phone_getGroupCall, new RequestDelegate(i) {
                    public final /* synthetic */ int f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$getGroupCall$34$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                    }
                });
            }
        }
        return call;
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$getGroupCall$34 */
    public /* synthetic */ void lambda$getGroupCall$34$MessagesController(int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable(tLObject, i) {
            public final /* synthetic */ TLObject f$1;
            public final /* synthetic */ int f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$null$33$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$33 */
    public /* synthetic */ void lambda$null$33$MessagesController(TLObject tLObject, int i) {
        if (tLObject != null) {
            TLRPC$TL_phone_groupCall tLRPC$TL_phone_groupCall = (TLRPC$TL_phone_groupCall) tLObject;
            putUsers(tLRPC$TL_phone_groupCall.users, false);
            ChatObject.Call call = new ChatObject.Call();
            call.setCall(getAccountInstance(), i, tLRPC$TL_phone_groupCall);
            this.groupCalls.put(tLRPC$TL_phone_groupCall.call.id, call);
            this.groupCallsByChatId.put(i, call);
            getNotificationCenter().postNotificationName(NotificationCenter.groupCallUpdated, Integer.valueOf(i), Long.valueOf(tLRPC$TL_phone_groupCall.call.id), Boolean.FALSE);
        }
        this.loadingGroupCalls.remove(Integer.valueOf(i));
    }

    public void cancelLoadFullUser(int i) {
        this.loadingFullUsers.remove(Integer.valueOf(i));
    }

    public void cancelLoadFullChat(int i) {
        this.loadingFullChats.remove(Integer.valueOf(i));
    }

    /* access modifiers changed from: protected */
    public void clearFullUsers() {
        this.loadedFullUsers.clear();
        this.loadedFullChats.clear();
    }

    private void reloadDialogsReadValue(ArrayList<TLRPC$Dialog> arrayList, long j) {
        if (j != 0 || (arrayList != null && !arrayList.isEmpty())) {
            TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs = new TLRPC$TL_messages_getPeerDialogs();
            if (arrayList != null) {
                for (int i = 0; i < arrayList.size(); i++) {
                    TLRPC$InputPeer inputPeer = getInputPeer((int) arrayList.get(i).id);
                    if (!(inputPeer instanceof TLRPC$TL_inputPeerChannel) || inputPeer.access_hash != 0) {
                        TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
                        tLRPC$TL_inputDialogPeer.peer = inputPeer;
                        tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer);
                    }
                }
            } else {
                TLRPC$InputPeer inputPeer2 = getInputPeer((int) j);
                if (!(inputPeer2 instanceof TLRPC$TL_inputPeerChannel) || inputPeer2.access_hash != 0) {
                    TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer2 = new TLRPC$TL_inputDialogPeer();
                    tLRPC$TL_inputDialogPeer2.peer = inputPeer2;
                    tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer2);
                } else {
                    return;
                }
            }
            if (!tLRPC$TL_messages_getPeerDialogs.peers.isEmpty()) {
                getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerDialogs, new RequestDelegate() {
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$reloadDialogsReadValue$35$MessagesController(tLObject, tLRPC$TL_error);
                    }
                });
            }
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$reloadDialogsReadValue$35 */
    public /* synthetic */ void lambda$reloadDialogsReadValue$35$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject;
            ArrayList arrayList = new ArrayList();
            for (int i = 0; i < tLRPC$TL_messages_peerDialogs.dialogs.size(); i++) {
                TLRPC$Dialog tLRPC$Dialog = tLRPC$TL_messages_peerDialogs.dialogs.get(i);
                if (tLRPC$Dialog.read_inbox_max_id == 0) {
                    tLRPC$Dialog.read_inbox_max_id = 1;
                }
                if (tLRPC$Dialog.read_outbox_max_id == 0) {
                    tLRPC$Dialog.read_outbox_max_id = 1;
                }
                DialogObject.initDialog(tLRPC$Dialog);
                Integer num = (Integer) this.dialogs_read_inbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                if (num == null) {
                    num = 0;
                }
                this.dialogs_read_inbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(tLRPC$Dialog.read_inbox_max_id, num.intValue())));
                if (num.intValue() == 0) {
                    if (tLRPC$Dialog.peer.channel_id != 0) {
                        TLRPC$TL_updateReadChannelInbox tLRPC$TL_updateReadChannelInbox = new TLRPC$TL_updateReadChannelInbox();
                        tLRPC$TL_updateReadChannelInbox.channel_id = tLRPC$Dialog.peer.channel_id;
                        tLRPC$TL_updateReadChannelInbox.max_id = tLRPC$Dialog.read_inbox_max_id;
                        arrayList.add(tLRPC$TL_updateReadChannelInbox);
                    } else {
                        TLRPC$TL_updateReadHistoryInbox tLRPC$TL_updateReadHistoryInbox = new TLRPC$TL_updateReadHistoryInbox();
                        tLRPC$TL_updateReadHistoryInbox.peer = tLRPC$Dialog.peer;
                        tLRPC$TL_updateReadHistoryInbox.max_id = tLRPC$Dialog.read_inbox_max_id;
                        arrayList.add(tLRPC$TL_updateReadHistoryInbox);
                    }
                }
                Integer num2 = (Integer) this.dialogs_read_outbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                if (num2 == null) {
                    num2 = 0;
                }
                this.dialogs_read_outbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(tLRPC$Dialog.read_outbox_max_id, num2.intValue())));
                if (num2.intValue() == 0) {
                    if (tLRPC$Dialog.peer.channel_id != 0) {
                        TLRPC$TL_updateReadChannelOutbox tLRPC$TL_updateReadChannelOutbox = new TLRPC$TL_updateReadChannelOutbox();
                        tLRPC$TL_updateReadChannelOutbox.channel_id = tLRPC$Dialog.peer.channel_id;
                        tLRPC$TL_updateReadChannelOutbox.max_id = tLRPC$Dialog.read_outbox_max_id;
                        arrayList.add(tLRPC$TL_updateReadChannelOutbox);
                    } else {
                        TLRPC$TL_updateReadHistoryOutbox tLRPC$TL_updateReadHistoryOutbox = new TLRPC$TL_updateReadHistoryOutbox();
                        tLRPC$TL_updateReadHistoryOutbox.peer = tLRPC$Dialog.peer;
                        tLRPC$TL_updateReadHistoryOutbox.max_id = tLRPC$Dialog.read_outbox_max_id;
                        arrayList.add(tLRPC$TL_updateReadHistoryOutbox);
                    }
                }
            }
            if (!arrayList.isEmpty()) {
                processUpdateArray(arrayList, (ArrayList<TLRPC$User>) null, (ArrayList<TLRPC$Chat>) null, false, 0);
            }
        }
    }

    public String getAdminRank(int i, int i2) {
        SparseArray sparseArray = this.channelAdmins.get(i);
        if (sparseArray == null) {
            return null;
        }
        return (String) sparseArray.get(i2);
    }

    public boolean isChannelAdminsLoaded(int i) {
        return this.channelAdmins.get(i) != null;
    }

    public void loadChannelAdmins(int i, boolean z) {
        if (SystemClock.elapsedRealtime() - ((long) this.loadingChannelAdmins.get(i)) >= 60) {
            this.loadingChannelAdmins.put(i, (int) (SystemClock.elapsedRealtime() / 1000));
            if (z) {
                getMessagesStorage().loadChannelAdmins(i);
                return;
            }
            TLRPC$TL_channels_getParticipants tLRPC$TL_channels_getParticipants = new TLRPC$TL_channels_getParticipants();
            tLRPC$TL_channels_getParticipants.channel = getInputChannel(i);
            tLRPC$TL_channels_getParticipants.limit = 100;
            tLRPC$TL_channels_getParticipants.filter = new TLRPC$TL_channelParticipantsAdmins();
            getConnectionsManager().sendRequest(tLRPC$TL_channels_getParticipants, new RequestDelegate(i) {
                public final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$loadChannelAdmins$36$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$loadChannelAdmins$36 */
    public /* synthetic */ void lambda$loadChannelAdmins$36$MessagesController(int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject instanceof TLRPC$TL_channels_channelParticipants) {
            processLoadedAdminsResponse(i, (TLRPC$TL_channels_channelParticipants) tLObject);
        }
    }

    public void processLoadedAdminsResponse(int i, TLRPC$TL_channels_channelParticipants tLRPC$TL_channels_channelParticipants) {
        SparseArray sparseArray = new SparseArray(tLRPC$TL_channels_channelParticipants.participants.size());
        for (int i2 = 0; i2 < tLRPC$TL_channels_channelParticipants.participants.size(); i2++) {
            TLRPC$ChannelParticipant tLRPC$ChannelParticipant = tLRPC$TL_channels_channelParticipants.participants.get(i2);
            int i3 = tLRPC$ChannelParticipant.user_id;
            String str = tLRPC$ChannelParticipant.rank;
            if (str == null) {
                str = "";
            }
            sparseArray.put(i3, str);
        }
        processLoadedChannelAdmins(sparseArray, i, false);
    }

    public void processLoadedChannelAdmins(SparseArray<String> sparseArray, int i, boolean z) {
        if (!z) {
            getMessagesStorage().putChannelAdmins(i, sparseArray);
        }
        AndroidUtilities.runOnUIThread(new Runnable(i, sparseArray, z) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ SparseArray f$2;
            public final /* synthetic */ boolean f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesController.this.lambda$processLoadedChannelAdmins$37$MessagesController(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$processLoadedChannelAdmins$37 */
    public /* synthetic */ void lambda$processLoadedChannelAdmins$37$MessagesController(int i, SparseArray sparseArray, boolean z) {
        this.channelAdmins.put(i, sparseArray);
        if (z) {
            this.loadingChannelAdmins.delete(i);
            loadChannelAdmins(i, false);
            getNotificationCenter().postNotificationName(NotificationCenter.didLoadChatAdmins, Integer.valueOf(i));
        }
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r12v5, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getFullChat} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r12v8, resolved type: org.telegram.tgnet.TLRPC$TL_channels_getFullChannel} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r12v9, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getFullChat} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r12v10, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getFullChat} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r12v11, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getFullChat} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r12v12, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getFullChat} */
    /* JADX WARNING: Code restructure failed: missing block: B:12:0x0066, code lost:
        if (r9.dialogs_read_outbox_max.get(java.lang.Long.valueOf(r4)) == null) goto L_0x0068;
     */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void loadFullChat(int r10, int r11, boolean r12) {
        /*
            r9 = this;
            java.util.ArrayList<java.lang.Integer> r0 = r9.loadedFullChats
            java.lang.Integer r1 = java.lang.Integer.valueOf(r10)
            boolean r0 = r0.contains(r1)
            java.util.ArrayList<java.lang.Integer> r1 = r9.loadingFullChats
            java.lang.Integer r2 = java.lang.Integer.valueOf(r10)
            boolean r1 = r1.contains(r2)
            if (r1 != 0) goto L_0x0086
            if (r12 != 0) goto L_0x001b
            if (r0 == 0) goto L_0x001b
            goto L_0x0086
        L_0x001b:
            java.util.ArrayList<java.lang.Integer> r12 = r9.loadingFullChats
            java.lang.Integer r1 = java.lang.Integer.valueOf(r10)
            r12.add(r1)
            int r12 = -r10
            long r4 = (long) r12
            java.lang.Integer r12 = java.lang.Integer.valueOf(r10)
            org.telegram.tgnet.TLRPC$Chat r3 = r9.getChat(r12)
            boolean r12 = org.telegram.messenger.ChatObject.isChannel(r3)
            if (r12 == 0) goto L_0x0049
            org.telegram.tgnet.TLRPC$TL_channels_getFullChannel r12 = new org.telegram.tgnet.TLRPC$TL_channels_getFullChannel
            r12.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r1 = getInputChannel((org.telegram.tgnet.TLRPC$Chat) r3)
            r12.channel = r1
            boolean r1 = r3.megagroup
            if (r1 == 0) goto L_0x006c
            r0 = r0 ^ 1
            r9.loadChannelAdmins(r10, r0)
            goto L_0x006c
        L_0x0049:
            org.telegram.tgnet.TLRPC$TL_messages_getFullChat r12 = new org.telegram.tgnet.TLRPC$TL_messages_getFullChat
            r12.<init>()
            r12.chat_id = r10
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r0 = r9.dialogs_read_inbox_max
            java.lang.Long r1 = java.lang.Long.valueOf(r4)
            java.lang.Object r0 = r0.get(r1)
            if (r0 == 0) goto L_0x0068
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r0 = r9.dialogs_read_outbox_max
            java.lang.Long r1 = java.lang.Long.valueOf(r4)
            java.lang.Object r0 = r0.get(r1)
            if (r0 != 0) goto L_0x006c
        L_0x0068:
            r0 = 0
            r9.reloadDialogsReadValue(r0, r4)
        L_0x006c:
            org.telegram.tgnet.ConnectionsManager r0 = r9.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$3YElPhsoXVnXqlMb1jQWGsy6njI r8 = new org.telegram.messenger.-$$Lambda$MessagesController$3YElPhsoXVnXqlMb1jQWGsy6njI
            r1 = r8
            r2 = r9
            r6 = r10
            r7 = r11
            r1.<init>(r3, r4, r6, r7)
            int r10 = r0.sendRequest(r12, r8)
            if (r11 == 0) goto L_0x0086
            org.telegram.tgnet.ConnectionsManager r12 = r9.getConnectionsManager()
            r12.bindRequestToGuid(r10, r11)
        L_0x0086:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.loadFullChat(int, int, boolean):void");
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$loadFullChat$40 */
    public /* synthetic */ void lambda$loadFullChat$40$MessagesController(TLRPC$Chat tLRPC$Chat, long j, int i, int i2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        long j2 = j;
        int i3 = i;
        TLRPC$TL_error tLRPC$TL_error2 = tLRPC$TL_error;
        if (tLRPC$TL_error2 == null) {
            TLRPC$TL_messages_chatFull tLRPC$TL_messages_chatFull = (TLRPC$TL_messages_chatFull) tLObject;
            getMessagesStorage().putUsersAndChats(tLRPC$TL_messages_chatFull.users, tLRPC$TL_messages_chatFull.chats, true, true);
            getMessagesStorage().updateChatInfo(tLRPC$TL_messages_chatFull.full_chat, false);
            if (ChatObject.isChannel(tLRPC$Chat)) {
                Integer num = (Integer) this.dialogs_read_inbox_max.get(Long.valueOf(j));
                if (num == null) {
                    num = Integer.valueOf(getMessagesStorage().getDialogReadMax(false, j));
                }
                this.dialogs_read_inbox_max.put(Long.valueOf(j), Integer.valueOf(Math.max(tLRPC$TL_messages_chatFull.full_chat.read_inbox_max_id, num.intValue())));
                if (num.intValue() == 0) {
                    ArrayList arrayList = new ArrayList();
                    TLRPC$TL_updateReadChannelInbox tLRPC$TL_updateReadChannelInbox = new TLRPC$TL_updateReadChannelInbox();
                    tLRPC$TL_updateReadChannelInbox.channel_id = i3;
                    tLRPC$TL_updateReadChannelInbox.max_id = tLRPC$TL_messages_chatFull.full_chat.read_inbox_max_id;
                    arrayList.add(tLRPC$TL_updateReadChannelInbox);
                    processUpdateArray(arrayList, (ArrayList<TLRPC$User>) null, (ArrayList<TLRPC$Chat>) null, false, 0);
                }
                Integer num2 = (Integer) this.dialogs_read_outbox_max.get(Long.valueOf(j));
                if (num2 == null) {
                    num2 = Integer.valueOf(getMessagesStorage().getDialogReadMax(true, j));
                }
                this.dialogs_read_outbox_max.put(Long.valueOf(j), Integer.valueOf(Math.max(tLRPC$TL_messages_chatFull.full_chat.read_outbox_max_id, num2.intValue())));
                if (num2.intValue() == 0) {
                    ArrayList arrayList2 = new ArrayList();
                    TLRPC$TL_updateReadChannelOutbox tLRPC$TL_updateReadChannelOutbox = new TLRPC$TL_updateReadChannelOutbox();
                    tLRPC$TL_updateReadChannelOutbox.channel_id = i3;
                    tLRPC$TL_updateReadChannelOutbox.max_id = tLRPC$TL_messages_chatFull.full_chat.read_outbox_max_id;
                    arrayList2.add(tLRPC$TL_updateReadChannelOutbox);
                    processUpdateArray(arrayList2, (ArrayList<TLRPC$User>) null, (ArrayList<TLRPC$Chat>) null, false, 0);
                }
            }
            AndroidUtilities.runOnUIThread(new Runnable(i3, tLRPC$TL_messages_chatFull, i2) {
                public final /* synthetic */ int f$1;
                public final /* synthetic */ TLRPC$TL_messages_chatFull f$2;
                public final /* synthetic */ int f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run() {
                    MessagesController.this.lambda$null$38$MessagesController(this.f$1, this.f$2, this.f$3);
                }
            });
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_error2, i3) {
            public final /* synthetic */ TLRPC$TL_error f$1;
            public final /* synthetic */ int f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$null$39$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$38 */
    public /* synthetic */ void lambda$null$38$MessagesController(int i, TLRPC$TL_messages_chatFull tLRPC$TL_messages_chatFull, int i2) {
        TLRPC$Dialog tLRPC$Dialog;
        int i3;
        TLRPC$ChatFull tLRPC$ChatFull = this.fullChats.get(i);
        if (tLRPC$ChatFull != null) {
            tLRPC$TL_messages_chatFull.full_chat.inviterId = tLRPC$ChatFull.inviterId;
        }
        this.fullChats.put(i, tLRPC$TL_messages_chatFull.full_chat);
        int i4 = -i;
        long j = (long) i4;
        applyDialogNotificationsSettings(j, tLRPC$TL_messages_chatFull.full_chat.notify_settings);
        for (int i5 = 0; i5 < tLRPC$TL_messages_chatFull.full_chat.bot_info.size(); i5++) {
            getMediaDataController().putBotInfo(tLRPC$TL_messages_chatFull.full_chat.bot_info.get(i5));
        }
        int indexOfKey = this.blockePeers.indexOfKey(i4);
        if (tLRPC$TL_messages_chatFull.full_chat.blocked) {
            if (indexOfKey < 0) {
                this.blockePeers.put(i4, 1);
                getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
            }
        } else if (indexOfKey >= 0) {
            this.blockePeers.removeAt(indexOfKey);
            getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
        }
        this.exportedChats.put(i, tLRPC$TL_messages_chatFull.full_chat.exported_invite);
        this.loadingFullChats.remove(Integer.valueOf(i));
        this.loadedFullChats.add(Integer.valueOf(i));
        putUsers(tLRPC$TL_messages_chatFull.users, false);
        putChats(tLRPC$TL_messages_chatFull.chats, false);
        if (tLRPC$TL_messages_chatFull.full_chat.stickerset != null) {
            getMediaDataController().getGroupStickerSetById(tLRPC$TL_messages_chatFull.full_chat.stickerset);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.chatInfoDidLoad, tLRPC$TL_messages_chatFull.full_chat, Integer.valueOf(i2), Boolean.FALSE);
        if ((tLRPC$TL_messages_chatFull.full_chat.flags & 2048) != 0 && (tLRPC$Dialog = this.dialogs_dict.get(j)) != null && tLRPC$Dialog.folder_id != (i3 = tLRPC$TL_messages_chatFull.full_chat.folder_id)) {
            tLRPC$Dialog.folder_id = i3;
            sortDialogs((SparseArray<TLRPC$Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$39 */
    public /* synthetic */ void lambda$null$39$MessagesController(TLRPC$TL_error tLRPC$TL_error, int i) {
        checkChannelError(tLRPC$TL_error.text, i);
        this.loadingFullChats.remove(Integer.valueOf(i));
    }

    public void loadFullUser(TLRPC$User tLRPC$User, int i, boolean z) {
        if (tLRPC$User != null && !this.loadingFullUsers.contains(Integer.valueOf(tLRPC$User.id))) {
            if (z || !this.loadedFullUsers.contains(Integer.valueOf(tLRPC$User.id))) {
                this.loadingFullUsers.add(Integer.valueOf(tLRPC$User.id));
                TLRPC$TL_users_getFullUser tLRPC$TL_users_getFullUser = new TLRPC$TL_users_getFullUser();
                tLRPC$TL_users_getFullUser.id = getInputUser(tLRPC$User);
                long j = (long) tLRPC$User.id;
                if (this.dialogs_read_inbox_max.get(Long.valueOf(j)) == null || this.dialogs_read_outbox_max.get(Long.valueOf(j)) == null) {
                    reloadDialogsReadValue((ArrayList<TLRPC$Dialog>) null, j);
                }
                getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tLRPC$TL_users_getFullUser, new RequestDelegate(tLRPC$User, i) {
                    public final /* synthetic */ TLRPC$User f$1;
                    public final /* synthetic */ int f$2;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$loadFullUser$43$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                    }
                }), i);
            }
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$loadFullUser$43 */
    public /* synthetic */ void lambda$loadFullUser$43$MessagesController(TLRPC$User tLRPC$User, int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$UserFull tLRPC$UserFull = (TLRPC$UserFull) tLObject;
            getMessagesStorage().updateUserInfo(tLRPC$UserFull, false);
            AndroidUtilities.runOnUIThread(new Runnable(tLRPC$UserFull, tLRPC$User, i) {
                public final /* synthetic */ TLRPC$UserFull f$1;
                public final /* synthetic */ TLRPC$User f$2;
                public final /* synthetic */ int f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run() {
                    MessagesController.this.lambda$null$41$MessagesController(this.f$1, this.f$2, this.f$3);
                }
            });
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable(tLRPC$User) {
            public final /* synthetic */ TLRPC$User f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$42$MessagesController(this.f$1);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$41 */
    public /* synthetic */ void lambda$null$41$MessagesController(TLRPC$UserFull tLRPC$UserFull, TLRPC$User tLRPC$User, int i) {
        TLRPC$Dialog tLRPC$Dialog;
        int i2;
        savePeerSettings((long) tLRPC$UserFull.user.id, tLRPC$UserFull.settings, false);
        applyDialogNotificationsSettings((long) tLRPC$User.id, tLRPC$UserFull.notify_settings);
        if (tLRPC$UserFull.bot_info instanceof TLRPC$TL_botInfo) {
            getMediaDataController().putBotInfo(tLRPC$UserFull.bot_info);
        }
        int indexOfKey = this.blockePeers.indexOfKey(tLRPC$User.id);
        if (tLRPC$UserFull.blocked) {
            if (indexOfKey < 0) {
                this.blockePeers.put(tLRPC$User.id, 1);
                getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
            }
        } else if (indexOfKey >= 0) {
            this.blockePeers.removeAt(indexOfKey);
            getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
        }
        this.fullUsers.put(tLRPC$User.id, tLRPC$UserFull);
        this.loadingFullUsers.remove(Integer.valueOf(tLRPC$User.id));
        this.loadedFullUsers.add(Integer.valueOf(tLRPC$User.id));
        String str = tLRPC$User.first_name + tLRPC$User.last_name + tLRPC$User.username;
        ArrayList arrayList = new ArrayList();
        arrayList.add(tLRPC$UserFull.user);
        putUsers(arrayList, false);
        getMessagesStorage().putUsersAndChats(arrayList, (ArrayList<TLRPC$Chat>) null, false, true);
        if (str != null) {
            if (!str.equals(tLRPC$UserFull.user.first_name + tLRPC$UserFull.user.last_name + tLRPC$UserFull.user.username)) {
                getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 1);
            }
        }
        if (tLRPC$UserFull.bot_info instanceof TLRPC$TL_botInfo) {
            getNotificationCenter().postNotificationName(NotificationCenter.botInfoDidLoad, tLRPC$UserFull.bot_info, Integer.valueOf(i));
        }
        getNotificationCenter().postNotificationName(NotificationCenter.userInfoDidLoad, Integer.valueOf(tLRPC$User.id), tLRPC$UserFull);
        if ((tLRPC$UserFull.flags & 2048) != 0 && (tLRPC$Dialog = this.dialogs_dict.get((long) tLRPC$User.id)) != null && tLRPC$Dialog.folder_id != (i2 = tLRPC$UserFull.folder_id)) {
            tLRPC$Dialog.folder_id = i2;
            sortDialogs((SparseArray<TLRPC$Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$42 */
    public /* synthetic */ void lambda$null$42$MessagesController(TLRPC$User tLRPC$User) {
        this.loadingFullUsers.remove(Integer.valueOf(tLRPC$User.id));
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v1, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getMessages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v9, resolved type: org.telegram.tgnet.TLRPC$TL_channels_getMessages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v10, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getMessages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v11, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getMessages} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void reloadMessages(java.util.ArrayList<java.lang.Integer> r9, long r10, boolean r12) {
        /*
            r8 = this;
            boolean r0 = r9.isEmpty()
            if (r0 == 0) goto L_0x0007
            return
        L_0x0007:
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            int r0 = r8.currentAccount
            org.telegram.tgnet.TLRPC$Chat r0 = org.telegram.messenger.ChatObject.getChatByDialog(r10, r0)
            boolean r1 = org.telegram.messenger.ChatObject.isChannel(r0)
            if (r1 == 0) goto L_0x0026
            org.telegram.tgnet.TLRPC$TL_channels_getMessages r1 = new org.telegram.tgnet.TLRPC$TL_channels_getMessages
            r1.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r0 = getInputChannel((org.telegram.tgnet.TLRPC$Chat) r0)
            r1.channel = r0
            r1.id = r6
            goto L_0x002d
        L_0x0026:
            org.telegram.tgnet.TLRPC$TL_messages_getMessages r1 = new org.telegram.tgnet.TLRPC$TL_messages_getMessages
            r1.<init>()
            r1.id = r6
        L_0x002d:
            r0 = r1
            android.util.LongSparseArray<java.util.ArrayList<java.lang.Integer>> r1 = r8.reloadingMessages
            java.lang.Object r1 = r1.get(r10)
            java.util.ArrayList r1 = (java.util.ArrayList) r1
            r2 = 0
        L_0x0037:
            int r3 = r9.size()
            if (r2 >= r3) goto L_0x0052
            java.lang.Object r3 = r9.get(r2)
            java.lang.Integer r3 = (java.lang.Integer) r3
            if (r1 == 0) goto L_0x004c
            boolean r4 = r1.contains(r3)
            if (r4 == 0) goto L_0x004c
            goto L_0x004f
        L_0x004c:
            r6.add(r3)
        L_0x004f:
            int r2 = r2 + 1
            goto L_0x0037
        L_0x0052:
            boolean r9 = r6.isEmpty()
            if (r9 == 0) goto L_0x0059
            return
        L_0x0059:
            if (r1 != 0) goto L_0x0065
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            android.util.LongSparseArray<java.util.ArrayList<java.lang.Integer>> r9 = r8.reloadingMessages
            r9.put(r10, r1)
        L_0x0065:
            r1.addAll(r6)
            org.telegram.tgnet.ConnectionsManager r9 = r8.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$DeZN9cbZI2K8aVh3BVMiSACuqjU r7 = new org.telegram.messenger.-$$Lambda$MessagesController$DeZN9cbZI2K8aVh3BVMiSACuqjU
            r1 = r7
            r2 = r8
            r3 = r10
            r5 = r12
            r1.<init>(r3, r5, r6)
            r9.sendRequest(r0, r7)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.reloadMessages(java.util.ArrayList, long, boolean):void");
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$reloadMessages$45 */
    public /* synthetic */ void lambda$reloadMessages$45$MessagesController(long j, boolean z, ArrayList arrayList, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        long j2 = j;
        if (tLRPC$TL_error == null) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
            SparseArray sparseArray = new SparseArray();
            for (int i = 0; i < tLRPC$messages_Messages.users.size(); i++) {
                TLRPC$User tLRPC$User = tLRPC$messages_Messages.users.get(i);
                sparseArray.put(tLRPC$User.id, tLRPC$User);
            }
            SparseArray sparseArray2 = new SparseArray();
            for (int i2 = 0; i2 < tLRPC$messages_Messages.chats.size(); i2++) {
                TLRPC$Chat tLRPC$Chat = tLRPC$messages_Messages.chats.get(i2);
                sparseArray2.put(tLRPC$Chat.id, tLRPC$Chat);
            }
            Integer num = (Integer) this.dialogs_read_inbox_max.get(Long.valueOf(j));
            if (num == null) {
                num = Integer.valueOf(getMessagesStorage().getDialogReadMax(false, j2));
                this.dialogs_read_inbox_max.put(Long.valueOf(j), num);
            }
            Integer num2 = (Integer) this.dialogs_read_outbox_max.get(Long.valueOf(j));
            if (num2 == null) {
                num2 = Integer.valueOf(getMessagesStorage().getDialogReadMax(true, j2));
                this.dialogs_read_outbox_max.put(Long.valueOf(j), num2);
            }
            ArrayList arrayList2 = new ArrayList();
            int i3 = 0;
            while (i3 < tLRPC$messages_Messages.messages.size()) {
                TLRPC$Message tLRPC$Message = tLRPC$messages_Messages.messages.get(i3);
                tLRPC$Message.dialog_id = j2;
                if (!z) {
                    tLRPC$Message.unread = (tLRPC$Message.out ? num2 : num).intValue() < tLRPC$Message.id;
                }
                MessageObject messageObject = r9;
                Integer num3 = num;
                ArrayList arrayList3 = arrayList2;
                MessageObject messageObject2 = new MessageObject(this.currentAccount, tLRPC$Message, (SparseArray<TLRPC$User>) sparseArray, (SparseArray<TLRPC$Chat>) sparseArray2, true, true);
                arrayList3.add(messageObject);
                i3++;
                arrayList2 = arrayList3;
                num = num3;
            }
            ImageLoader.saveMessagesThumbs(tLRPC$messages_Messages.messages);
            getMessagesStorage().putMessages(tLRPC$messages_Messages, j, -1, 0, false, z);
            AndroidUtilities.runOnUIThread(new Runnable(j, arrayList, arrayList2) {
                public final /* synthetic */ long f$1;
                public final /* synthetic */ ArrayList f$2;
                public final /* synthetic */ ArrayList f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r4;
                    this.f$3 = r5;
                }

                public final void run() {
                    MessagesController.this.lambda$null$44$MessagesController(this.f$1, this.f$2, this.f$3);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$44 */
    public /* synthetic */ void lambda$null$44$MessagesController(long j, ArrayList arrayList, ArrayList arrayList2) {
        ArrayList arrayList3 = this.reloadingMessages.get(j);
        if (arrayList3 != null) {
            arrayList3.removeAll(arrayList);
            if (arrayList3.isEmpty()) {
                this.reloadingMessages.remove(j);
            }
        }
        MessageObject messageObject = this.dialogMessage.get(j);
        if (messageObject != null) {
            int i = 0;
            while (true) {
                if (i >= arrayList2.size()) {
                    break;
                }
                MessageObject messageObject2 = (MessageObject) arrayList2.get(i);
                if (messageObject.getId() == messageObject2.getId()) {
                    this.dialogMessage.put(j, messageObject2);
                    if (messageObject2.messageOwner.peer_id.channel_id == 0) {
                        MessageObject messageObject3 = this.dialogMessagesByIds.get(messageObject2.getId());
                        this.dialogMessagesByIds.remove(messageObject2.getId());
                        if (messageObject3 != null) {
                            this.dialogMessagesByIds.put(messageObject3.getId(), messageObject3);
                        }
                    }
                    getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                } else {
                    i++;
                }
            }
        }
        getNotificationCenter().postNotificationName(NotificationCenter.replaceMessagesObjects, Long.valueOf(j), arrayList2);
    }

    public void hidePeerSettingsBar(long j, TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat) {
        if (tLRPC$User != null || tLRPC$Chat != null) {
            SharedPreferences.Editor edit = this.notificationsPreferences.edit();
            edit.putInt("dialog_bar_vis3" + j, 3);
            edit.commit();
            if (((int) j) != 0) {
                TLRPC$TL_messages_hidePeerSettingsBar tLRPC$TL_messages_hidePeerSettingsBar = new TLRPC$TL_messages_hidePeerSettingsBar();
                if (tLRPC$User != null) {
                    tLRPC$TL_messages_hidePeerSettingsBar.peer = getInputPeer(tLRPC$User.id);
                } else if (tLRPC$Chat != null) {
                    tLRPC$TL_messages_hidePeerSettingsBar.peer = getInputPeer(-tLRPC$Chat.id);
                }
                getConnectionsManager().sendRequest(tLRPC$TL_messages_hidePeerSettingsBar, $$Lambda$MessagesController$rIvS82C4RGl9mySFbW2kP0HYUA.INSTANCE);
            }
        }
    }

    public void reportSpam(long j, TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat, TLRPC$EncryptedChat tLRPC$EncryptedChat, boolean z) {
        if (tLRPC$User != null || tLRPC$Chat != null || tLRPC$EncryptedChat != null) {
            SharedPreferences.Editor edit = this.notificationsPreferences.edit();
            edit.putInt("dialog_bar_vis3" + j, 3);
            edit.commit();
            if (((int) j) == 0) {
                if (tLRPC$EncryptedChat != null && tLRPC$EncryptedChat.access_hash != 0) {
                    TLRPC$TL_messages_reportEncryptedSpam tLRPC$TL_messages_reportEncryptedSpam = new TLRPC$TL_messages_reportEncryptedSpam();
                    TLRPC$TL_inputEncryptedChat tLRPC$TL_inputEncryptedChat = new TLRPC$TL_inputEncryptedChat();
                    tLRPC$TL_messages_reportEncryptedSpam.peer = tLRPC$TL_inputEncryptedChat;
                    tLRPC$TL_inputEncryptedChat.chat_id = tLRPC$EncryptedChat.id;
                    tLRPC$TL_inputEncryptedChat.access_hash = tLRPC$EncryptedChat.access_hash;
                    getConnectionsManager().sendRequest(tLRPC$TL_messages_reportEncryptedSpam, $$Lambda$MessagesController$urxZdHxPyUBfOodxq3HpRfgH30.INSTANCE, 2);
                }
            } else if (z) {
                TLRPC$TL_account_reportPeer tLRPC$TL_account_reportPeer = new TLRPC$TL_account_reportPeer();
                if (tLRPC$Chat != null) {
                    tLRPC$TL_account_reportPeer.peer = getInputPeer(-tLRPC$Chat.id);
                } else if (tLRPC$User != null) {
                    tLRPC$TL_account_reportPeer.peer = getInputPeer(tLRPC$User.id);
                }
                tLRPC$TL_account_reportPeer.reason = new TLRPC$TL_inputReportReasonGeoIrrelevant();
                getConnectionsManager().sendRequest(tLRPC$TL_account_reportPeer, $$Lambda$MessagesController$NEyx9n1pO7iQwJjBaH9_UI6p0.INSTANCE, 2);
            } else {
                TLRPC$TL_messages_reportSpam tLRPC$TL_messages_reportSpam = new TLRPC$TL_messages_reportSpam();
                if (tLRPC$Chat != null) {
                    tLRPC$TL_messages_reportSpam.peer = getInputPeer(-tLRPC$Chat.id);
                } else if (tLRPC$User != null) {
                    tLRPC$TL_messages_reportSpam.peer = getInputPeer(tLRPC$User.id);
                }
                getConnectionsManager().sendRequest(tLRPC$TL_messages_reportSpam, $$Lambda$MessagesController$IrwtgwjJOMXYm5EJBFX56NfTh68.INSTANCE, 2);
            }
        }
    }

    private void savePeerSettings(long j, TLRPC$TL_peerSettings tLRPC$TL_peerSettings, boolean z) {
        if (tLRPC$TL_peerSettings != null) {
            SharedPreferences sharedPreferences = this.notificationsPreferences;
            if (sharedPreferences.getInt("dialog_bar_vis3" + j, 0) != 3) {
                SharedPreferences.Editor edit = this.notificationsPreferences.edit();
                boolean z2 = !tLRPC$TL_peerSettings.report_spam && !tLRPC$TL_peerSettings.add_contact && !tLRPC$TL_peerSettings.block_contact && !tLRPC$TL_peerSettings.share_contact && !tLRPC$TL_peerSettings.report_geo;
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("peer settings loaded for " + j + " add = " + tLRPC$TL_peerSettings.add_contact + " block = " + tLRPC$TL_peerSettings.block_contact + " spam = " + tLRPC$TL_peerSettings.report_spam + " share = " + tLRPC$TL_peerSettings.share_contact + " geo = " + tLRPC$TL_peerSettings.report_geo + " hide = " + z2 + " distance = " + tLRPC$TL_peerSettings.geo_distance);
                }
                edit.putInt("dialog_bar_vis3" + j, z2 ? 1 : 2);
                edit.putBoolean("dialog_bar_share" + j, tLRPC$TL_peerSettings.share_contact);
                edit.putBoolean("dialog_bar_report" + j, tLRPC$TL_peerSettings.report_spam);
                edit.putBoolean("dialog_bar_add" + j, tLRPC$TL_peerSettings.add_contact);
                edit.putBoolean("dialog_bar_block" + j, tLRPC$TL_peerSettings.block_contact);
                edit.putBoolean("dialog_bar_exception" + j, tLRPC$TL_peerSettings.need_contacts_exception);
                edit.putBoolean("dialog_bar_location" + j, tLRPC$TL_peerSettings.report_geo);
                edit.putBoolean("dialog_bar_archived" + j, tLRPC$TL_peerSettings.autoarchived);
                SharedPreferences sharedPreferences2 = this.notificationsPreferences;
                if (sharedPreferences2.getInt("dialog_bar_distance" + j, -1) != -2) {
                    if ((tLRPC$TL_peerSettings.flags & 64) != 0) {
                        edit.putInt("dialog_bar_distance" + j, tLRPC$TL_peerSettings.geo_distance);
                    } else {
                        edit.remove("dialog_bar_distance" + j);
                    }
                }
                edit.commit();
                getNotificationCenter().postNotificationName(NotificationCenter.peerSettingsDidLoad, Long.valueOf(j));
            }
        }
    }

    public void loadPeerSettings(TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat) {
        int i;
        if (tLRPC$User != null || tLRPC$Chat != null) {
            if (tLRPC$User != null) {
                i = tLRPC$User.id;
            } else {
                i = -tLRPC$Chat.id;
            }
            long j = (long) i;
            if (this.loadingPeerSettings.indexOfKey(j) < 0) {
                this.loadingPeerSettings.put(j, Boolean.TRUE);
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("request spam button for " + j);
                }
                SharedPreferences sharedPreferences = this.notificationsPreferences;
                int i2 = sharedPreferences.getInt("dialog_bar_vis3" + j, 0);
                if (i2 != 1 && i2 != 3) {
                    TLRPC$TL_messages_getPeerSettings tLRPC$TL_messages_getPeerSettings = new TLRPC$TL_messages_getPeerSettings();
                    if (tLRPC$User != null) {
                        tLRPC$TL_messages_getPeerSettings.peer = getInputPeer(tLRPC$User.id);
                    } else if (tLRPC$Chat != null) {
                        tLRPC$TL_messages_getPeerSettings.peer = getInputPeer(-tLRPC$Chat.id);
                    }
                    getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerSettings, new RequestDelegate(j) {
                        public final /* synthetic */ long f$1;

                        {
                            this.f$1 = r2;
                        }

                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$loadPeerSettings$51$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                        }
                    });
                } else if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("dialog bar already hidden for " + j);
                }
            }
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$loadPeerSettings$51 */
    public /* synthetic */ void lambda$loadPeerSettings$51$MessagesController(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable(j, tLObject) {
            public final /* synthetic */ long f$1;
            public final /* synthetic */ TLObject f$2;

            {
                this.f$1 = r2;
                this.f$2 = r4;
            }

            public final void run() {
                MessagesController.this.lambda$null$50$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$50 */
    public /* synthetic */ void lambda$null$50$MessagesController(long j, TLObject tLObject) {
        this.loadingPeerSettings.remove(j);
        if (tLObject != null) {
            savePeerSettings(j, (TLRPC$TL_peerSettings) tLObject, false);
        }
    }

    /* access modifiers changed from: protected */
    public void processNewChannelDifferenceParams(int i, int i2, int i3) {
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("processNewChannelDifferenceParams pts = " + i + " pts_count = " + i2 + " channeldId = " + i3);
        }
        int i4 = this.channelsPts.get(i3);
        if (i4 == 0) {
            i4 = getMessagesStorage().getChannelPtsSync(i3);
            if (i4 == 0) {
                i4 = 1;
            }
            this.channelsPts.put(i3, i4);
        }
        if (i4 + i2 == i) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("APPLY CHANNEL PTS");
            }
            this.channelsPts.put(i3, i);
            getMessagesStorage().saveChannelPts(i3, i);
        } else if (i4 != i) {
            long j = this.updatesStartWaitTimeChannels.get(i3);
            if (this.gettingDifferenceChannels.get(i3) || j == 0 || Math.abs(System.currentTimeMillis() - j) <= 1500) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("ADD CHANNEL UPDATE TO QUEUE pts = " + i + " pts_count = " + i2);
                }
                if (j == 0) {
                    this.updatesStartWaitTimeChannels.put(i3, System.currentTimeMillis());
                }
                UserActionUpdatesPts userActionUpdatesPts = new UserActionUpdatesPts();
                userActionUpdatesPts.pts = i;
                userActionUpdatesPts.pts_count = i2;
                userActionUpdatesPts.chat_id = i3;
                ArrayList arrayList = this.updatesQueueChannels.get(i3);
                if (arrayList == null) {
                    arrayList = new ArrayList();
                    this.updatesQueueChannels.put(i3, arrayList);
                }
                arrayList.add(userActionUpdatesPts);
                return;
            }
            getChannelDifference(i3);
        }
    }

    /* access modifiers changed from: protected */
    public void processNewDifferenceParams(int i, int i2, int i3, int i4) {
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("processNewDifferenceParams seq = " + i + " pts = " + i2 + " date = " + i3 + " pts_count = " + i4);
        }
        if (i2 != -1) {
            if (getMessagesStorage().getLastPtsValue() + i4 == i2) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("APPLY PTS");
                }
                getMessagesStorage().setLastPtsValue(i2);
                getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
            } else if (getMessagesStorage().getLastPtsValue() != i2) {
                if (this.gettingDifference || this.updatesStartWaitTimePts == 0 || Math.abs(System.currentTimeMillis() - this.updatesStartWaitTimePts) <= 1500) {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("ADD UPDATE TO QUEUE pts = " + i2 + " pts_count = " + i4);
                    }
                    if (this.updatesStartWaitTimePts == 0) {
                        this.updatesStartWaitTimePts = System.currentTimeMillis();
                    }
                    UserActionUpdatesPts userActionUpdatesPts = new UserActionUpdatesPts();
                    userActionUpdatesPts.pts = i2;
                    userActionUpdatesPts.pts_count = i4;
                    this.updatesQueuePts.add(userActionUpdatesPts);
                } else {
                    getDifference();
                }
            }
        }
        if (i == -1) {
            return;
        }
        if (getMessagesStorage().getLastSeqValue() + 1 == i) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("APPLY SEQ");
            }
            getMessagesStorage().setLastSeqValue(i);
            if (i3 != -1) {
                getMessagesStorage().setLastDateValue(i3);
            }
            getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
        } else if (getMessagesStorage().getLastSeqValue() == i) {
        } else {
            if (this.gettingDifference || this.updatesStartWaitTimeSeq == 0 || Math.abs(System.currentTimeMillis() - this.updatesStartWaitTimeSeq) <= 1500) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("ADD UPDATE TO QUEUE seq = " + i);
                }
                if (this.updatesStartWaitTimeSeq == 0) {
                    this.updatesStartWaitTimeSeq = System.currentTimeMillis();
                }
                UserActionUpdatesSeq userActionUpdatesSeq = new UserActionUpdatesSeq();
                userActionUpdatesSeq.seq = i;
                this.updatesQueueSeq.add(userActionUpdatesSeq);
                return;
            }
            getDifference();
        }
    }

    public void didAddedNewTask(int i, SparseArray<ArrayList<Long>> sparseArray) {
        Utilities.stageQueue.postRunnable(new Runnable(i) {
            public final /* synthetic */ int f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$didAddedNewTask$52$MessagesController(this.f$1);
            }
        });
        AndroidUtilities.runOnUIThread(new Runnable(sparseArray) {
            public final /* synthetic */ SparseArray f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$didAddedNewTask$53$MessagesController(this.f$1);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$didAddedNewTask$52 */
    public /* synthetic */ void lambda$didAddedNewTask$52$MessagesController(int i) {
        int i2;
        if ((this.currentDeletingTaskMids == null && !this.gettingNewDeleteTask) || ((i2 = this.currentDeletingTaskTime) != 0 && i < i2)) {
            getNewDeleteTask((ArrayList<Integer>) null, 0);
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$didAddedNewTask$53 */
    public /* synthetic */ void lambda$didAddedNewTask$53$MessagesController(SparseArray sparseArray) {
        getNotificationCenter().postNotificationName(NotificationCenter.didCreatedNewDeleteTask, sparseArray);
    }

    public void getNewDeleteTask(ArrayList<Integer> arrayList, int i) {
        Utilities.stageQueue.postRunnable(new Runnable(arrayList, i) {
            public final /* synthetic */ ArrayList f$1;
            public final /* synthetic */ int f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$getNewDeleteTask$54$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$getNewDeleteTask$54 */
    public /* synthetic */ void lambda$getNewDeleteTask$54$MessagesController(ArrayList arrayList, int i) {
        this.gettingNewDeleteTask = true;
        getMessagesStorage().getNewTask(arrayList, i);
    }

    private boolean checkDeletingTask(boolean z) {
        int i;
        int currentTime = getConnectionsManager().getCurrentTime();
        if (this.currentDeletingTaskMids == null || (!z && ((i = this.currentDeletingTaskTime) == 0 || i > currentTime))) {
            return false;
        }
        this.currentDeletingTaskTime = 0;
        if (this.currentDeleteTaskRunnable != null && !z) {
            Utilities.stageQueue.cancelRunnable(this.currentDeleteTaskRunnable);
        }
        this.currentDeleteTaskRunnable = null;
        AndroidUtilities.runOnUIThread(new Runnable(new ArrayList(this.currentDeletingTaskMids)) {
            public final /* synthetic */ ArrayList f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$checkDeletingTask$56$MessagesController(this.f$1);
            }
        });
        return true;
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$checkDeletingTask$56 */
    public /* synthetic */ void lambda$checkDeletingTask$56$MessagesController(ArrayList arrayList) {
        if (arrayList.isEmpty() || ((Integer) arrayList.get(0)).intValue() <= 0) {
            deleteMessages(arrayList, (ArrayList<Long>) null, (TLRPC$EncryptedChat) null, 0, 0, false, false);
        } else {
            getMessagesStorage().emptyMessagesMedia(arrayList);
        }
        Utilities.stageQueue.postRunnable(new Runnable(arrayList) {
            public final /* synthetic */ ArrayList f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$55$MessagesController(this.f$1);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$55 */
    public /* synthetic */ void lambda$null$55$MessagesController(ArrayList arrayList) {
        getNewDeleteTask(arrayList, this.currentDeletingTaskChannelId);
        this.currentDeletingTaskTime = 0;
        this.currentDeletingTaskMids = null;
    }

    public void processLoadedDeleteTask(int i, ArrayList<Integer> arrayList, int i2) {
        Utilities.stageQueue.postRunnable(new Runnable(arrayList, i) {
            public final /* synthetic */ ArrayList f$1;
            public final /* synthetic */ int f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$processLoadedDeleteTask$58$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$processLoadedDeleteTask$58 */
    public /* synthetic */ void lambda$processLoadedDeleteTask$58$MessagesController(ArrayList arrayList, int i) {
        this.gettingNewDeleteTask = false;
        if (arrayList != null) {
            this.currentDeletingTaskTime = i;
            this.currentDeletingTaskMids = arrayList;
            if (this.currentDeleteTaskRunnable != null) {
                Utilities.stageQueue.cancelRunnable(this.currentDeleteTaskRunnable);
                this.currentDeleteTaskRunnable = null;
            }
            if (!checkDeletingTask(false)) {
                this.currentDeleteTaskRunnable = new Runnable() {
                    public final void run() {
                        MessagesController.this.lambda$null$57$MessagesController();
                    }
                };
                Utilities.stageQueue.postRunnable(this.currentDeleteTaskRunnable, ((long) Math.abs(getConnectionsManager().getCurrentTime() - this.currentDeletingTaskTime)) * 1000);
                return;
            }
            return;
        }
        this.currentDeletingTaskTime = 0;
        this.currentDeletingTaskMids = null;
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$57 */
    public /* synthetic */ void lambda$null$57$MessagesController() {
        checkDeletingTask(true);
    }

    public void loadDialogPhotos(int i, int i2, long j, boolean z, int i3) {
        if (z) {
            getMessagesStorage().getDialogPhotos(i, i2, j, i3);
        } else if (i > 0) {
            TLRPC$User user = getUser(Integer.valueOf(i));
            if (user != null) {
                TLRPC$TL_photos_getUserPhotos tLRPC$TL_photos_getUserPhotos = new TLRPC$TL_photos_getUserPhotos();
                tLRPC$TL_photos_getUserPhotos.limit = i2;
                tLRPC$TL_photos_getUserPhotos.offset = 0;
                tLRPC$TL_photos_getUserPhotos.max_id = (long) ((int) j);
                tLRPC$TL_photos_getUserPhotos.user_id = getInputUser(user);
                getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tLRPC$TL_photos_getUserPhotos, new RequestDelegate(i, i2, j, i3) {
                    public final /* synthetic */ int f$1;
                    public final /* synthetic */ int f$2;
                    public final /* synthetic */ long f$3;
                    public final /* synthetic */ int f$4;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                        this.f$3 = r4;
                        this.f$4 = r6;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$loadDialogPhotos$59$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, tLObject, tLRPC$TL_error);
                    }
                }), i3);
            }
        } else if (i < 0) {
            TLRPC$TL_messages_search tLRPC$TL_messages_search = new TLRPC$TL_messages_search();
            tLRPC$TL_messages_search.filter = new TLRPC$TL_inputMessagesFilterChatPhotos();
            tLRPC$TL_messages_search.limit = i2;
            tLRPC$TL_messages_search.offset_id = (int) j;
            tLRPC$TL_messages_search.q = "";
            tLRPC$TL_messages_search.peer = getInputPeer(i);
            getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tLRPC$TL_messages_search, new RequestDelegate(i, i2, j, i3) {
                public final /* synthetic */ int f$1;
                public final /* synthetic */ int f$2;
                public final /* synthetic */ long f$3;
                public final /* synthetic */ int f$4;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r6;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$loadDialogPhotos$60$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, tLObject, tLRPC$TL_error);
                }
            }), i3);
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$loadDialogPhotos$59 */
    public /* synthetic */ void lambda$loadDialogPhotos$59$MessagesController(int i, int i2, long j, int i3, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processLoadedUserPhotos((TLRPC$photos_Photos) tLObject, (ArrayList<TLRPC$Message>) null, i, i2, j, false, i3);
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$loadDialogPhotos$60 */
    public /* synthetic */ void lambda$loadDialogPhotos$60$MessagesController(int i, int i2, long j, int i3, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        TLRPC$Photo tLRPC$Photo;
        if (tLRPC$TL_error == null) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
            TLRPC$TL_photos_photos tLRPC$TL_photos_photos = new TLRPC$TL_photos_photos();
            ArrayList arrayList = new ArrayList();
            tLRPC$TL_photos_photos.count = tLRPC$messages_Messages.count;
            tLRPC$TL_photos_photos.users.addAll(tLRPC$messages_Messages.users);
            for (int i4 = 0; i4 < tLRPC$messages_Messages.messages.size(); i4++) {
                TLRPC$Message tLRPC$Message = tLRPC$messages_Messages.messages.get(i4);
                TLRPC$MessageAction tLRPC$MessageAction = tLRPC$Message.action;
                if (!(tLRPC$MessageAction == null || (tLRPC$Photo = tLRPC$MessageAction.photo) == null)) {
                    tLRPC$TL_photos_photos.photos.add(tLRPC$Photo);
                    arrayList.add(tLRPC$Message);
                }
            }
            processLoadedUserPhotos(tLRPC$TL_photos_photos, arrayList, i, i2, j, false, i3);
        }
    }

    public void blockPeer(int i) {
        TLRPC$Chat tLRPC$Chat;
        TLRPC$User tLRPC$User = null;
        if (i > 0) {
            TLRPC$User user = getUser(Integer.valueOf(i));
            if (user != null) {
                TLRPC$User tLRPC$User2 = user;
                tLRPC$Chat = null;
                tLRPC$User = tLRPC$User2;
            } else {
                return;
            }
        } else {
            tLRPC$Chat = getChat(Integer.valueOf(-i));
            if (tLRPC$Chat == null) {
                return;
            }
        }
        if (this.blockePeers.indexOfKey(i) < 0) {
            this.blockePeers.put(i, 1);
            if (tLRPC$User != null) {
                if (tLRPC$User.bot) {
                    getMediaDataController().removeInline(i);
                } else {
                    getMediaDataController().removePeer(i);
                }
            }
            int i2 = this.totalBlockedCount;
            if (i2 >= 0) {
                this.totalBlockedCount = i2 + 1;
            }
            getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
            TLRPC$TL_contacts_block tLRPC$TL_contacts_block = new TLRPC$TL_contacts_block();
            if (tLRPC$User != null) {
                tLRPC$TL_contacts_block.id = getInputPeer(tLRPC$User);
            } else {
                tLRPC$TL_contacts_block.id = getInputPeer(tLRPC$Chat);
            }
            getConnectionsManager().sendRequest(tLRPC$TL_contacts_block, $$Lambda$MessagesController$2lpv2yVYtvZ8KrDGtCnXgPGqcq8.INSTANCE);
        }
    }

    public void setUserBannedRole(int i, TLRPC$User tLRPC$User, TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights, boolean z, BaseFragment baseFragment) {
        if (tLRPC$User != null && tLRPC$TL_chatBannedRights != null) {
            TLRPC$TL_channels_editBanned tLRPC$TL_channels_editBanned = new TLRPC$TL_channels_editBanned();
            tLRPC$TL_channels_editBanned.channel = getInputChannel(i);
            tLRPC$TL_channels_editBanned.user_id = getInputUser(tLRPC$User);
            tLRPC$TL_channels_editBanned.banned_rights = tLRPC$TL_chatBannedRights;
            getConnectionsManager().sendRequest(tLRPC$TL_channels_editBanned, new RequestDelegate(i, baseFragment, tLRPC$TL_channels_editBanned, z) {
                public final /* synthetic */ int f$1;
                public final /* synthetic */ BaseFragment f$2;
                public final /* synthetic */ TLRPC$TL_channels_editBanned f$3;
                public final /* synthetic */ boolean f$4;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r5;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$setUserBannedRole$64$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$setUserBannedRole$64 */
    public /* synthetic */ void lambda$setUserBannedRole$64$MessagesController(int i, BaseFragment baseFragment, TLRPC$TL_channels_editBanned tLRPC$TL_channels_editBanned, boolean z, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable(i) {
                public final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$62$MessagesController(this.f$1);
                }
            }, 1000);
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_error, baseFragment, tLRPC$TL_channels_editBanned, z) {
            public final /* synthetic */ TLRPC$TL_error f$1;
            public final /* synthetic */ BaseFragment f$2;
            public final /* synthetic */ TLRPC$TL_channels_editBanned f$3;
            public final /* synthetic */ boolean f$4;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
            }

            public final void run() {
                MessagesController.this.lambda$null$63$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$62 */
    public /* synthetic */ void lambda$null$62$MessagesController(int i) {
        loadFullChat(i, 0, true);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$63 */
    public /* synthetic */ void lambda$null$63$MessagesController(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_channels_editBanned tLRPC$TL_channels_editBanned, boolean z) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_channels_editBanned, Boolean.valueOf(z));
    }

    public void setChannelSlowMode(int i, int i2) {
        TLRPC$TL_channels_toggleSlowMode tLRPC$TL_channels_toggleSlowMode = new TLRPC$TL_channels_toggleSlowMode();
        tLRPC$TL_channels_toggleSlowMode.seconds = i2;
        tLRPC$TL_channels_toggleSlowMode.channel = getInputChannel(i);
        getConnectionsManager().sendRequest(tLRPC$TL_channels_toggleSlowMode, new RequestDelegate(i) {
            public final /* synthetic */ int f$1;

            {
                this.f$1 = r2;
            }

            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$setChannelSlowMode$66$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$setChannelSlowMode$66 */
    public /* synthetic */ void lambda$setChannelSlowMode$66$MessagesController(int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            getMessagesController().processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable(i) {
                public final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$65$MessagesController(this.f$1);
                }
            }, 1000);
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$65 */
    public /* synthetic */ void lambda$null$65$MessagesController(int i) {
        loadFullChat(i, 0, true);
    }

    public void setDefaultBannedRole(int i, TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights, boolean z, BaseFragment baseFragment) {
        if (tLRPC$TL_chatBannedRights != null) {
            TLRPC$TL_messages_editChatDefaultBannedRights tLRPC$TL_messages_editChatDefaultBannedRights = new TLRPC$TL_messages_editChatDefaultBannedRights();
            tLRPC$TL_messages_editChatDefaultBannedRights.peer = getInputPeer(-i);
            tLRPC$TL_messages_editChatDefaultBannedRights.banned_rights = tLRPC$TL_chatBannedRights;
            getConnectionsManager().sendRequest(tLRPC$TL_messages_editChatDefaultBannedRights, new RequestDelegate(i, baseFragment, tLRPC$TL_messages_editChatDefaultBannedRights, z) {
                public final /* synthetic */ int f$1;
                public final /* synthetic */ BaseFragment f$2;
                public final /* synthetic */ TLRPC$TL_messages_editChatDefaultBannedRights f$3;
                public final /* synthetic */ boolean f$4;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r5;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$setDefaultBannedRole$69$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$setDefaultBannedRole$69 */
    public /* synthetic */ void lambda$setDefaultBannedRole$69$MessagesController(int i, BaseFragment baseFragment, TLRPC$TL_messages_editChatDefaultBannedRights tLRPC$TL_messages_editChatDefaultBannedRights, boolean z, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable(i) {
                public final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$67$MessagesController(this.f$1);
                }
            }, 1000);
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_error, baseFragment, tLRPC$TL_messages_editChatDefaultBannedRights, z) {
            public final /* synthetic */ TLRPC$TL_error f$1;
            public final /* synthetic */ BaseFragment f$2;
            public final /* synthetic */ TLRPC$TL_messages_editChatDefaultBannedRights f$3;
            public final /* synthetic */ boolean f$4;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
            }

            public final void run() {
                MessagesController.this.lambda$null$68$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$67 */
    public /* synthetic */ void lambda$null$67$MessagesController(int i) {
        loadFullChat(i, 0, true);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$68 */
    public /* synthetic */ void lambda$null$68$MessagesController(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_messages_editChatDefaultBannedRights tLRPC$TL_messages_editChatDefaultBannedRights, boolean z) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_messages_editChatDefaultBannedRights, Boolean.valueOf(z));
    }

    public void setUserAdminRole(int i, TLRPC$User tLRPC$User, TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights, String str, boolean z, BaseFragment baseFragment, boolean z2) {
        if (tLRPC$User != null && tLRPC$TL_chatAdminRights != null) {
            TLRPC$Chat chat = getChat(Integer.valueOf(i));
            if (ChatObject.isChannel(chat)) {
                TLRPC$TL_channels_editAdmin tLRPC$TL_channels_editAdmin = new TLRPC$TL_channels_editAdmin();
                tLRPC$TL_channels_editAdmin.channel = getInputChannel(chat);
                tLRPC$TL_channels_editAdmin.user_id = getInputUser(tLRPC$User);
                tLRPC$TL_channels_editAdmin.admin_rights = tLRPC$TL_chatAdminRights;
                tLRPC$TL_channels_editAdmin.rank = str;
                getConnectionsManager().sendRequest(tLRPC$TL_channels_editAdmin, new RequestDelegate(i, baseFragment, tLRPC$TL_channels_editAdmin, z) {
                    public final /* synthetic */ int f$1;
                    public final /* synthetic */ BaseFragment f$2;
                    public final /* synthetic */ TLRPC$TL_channels_editAdmin f$3;
                    public final /* synthetic */ boolean f$4;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                        this.f$3 = r4;
                        this.f$4 = r5;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$setUserAdminRole$72$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, tLObject, tLRPC$TL_error);
                    }
                });
                return;
            }
            TLRPC$TL_messages_editChatAdmin tLRPC$TL_messages_editChatAdmin = new TLRPC$TL_messages_editChatAdmin();
            tLRPC$TL_messages_editChatAdmin.chat_id = i;
            tLRPC$TL_messages_editChatAdmin.user_id = getInputUser(tLRPC$User);
            boolean z3 = tLRPC$TL_chatAdminRights.change_info || tLRPC$TL_chatAdminRights.delete_messages || tLRPC$TL_chatAdminRights.ban_users || tLRPC$TL_chatAdminRights.invite_users || tLRPC$TL_chatAdminRights.pin_messages || tLRPC$TL_chatAdminRights.add_admins || tLRPC$TL_chatAdminRights.manage_call;
            tLRPC$TL_messages_editChatAdmin.is_admin = z3;
            $$Lambda$MessagesController$NvpVBpBjdL4yHH14k2yMK0FtYA4 r13 = new RequestDelegate(i, baseFragment, tLRPC$TL_messages_editChatAdmin) {
                public final /* synthetic */ int f$1;
                public final /* synthetic */ BaseFragment f$2;
                public final /* synthetic */ TLRPC$TL_messages_editChatAdmin f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$setUserAdminRole$75$MessagesController(this.f$1, this.f$2, this.f$3, tLObject, tLRPC$TL_error);
                }
            };
            if (!z3 || !z2) {
                getConnectionsManager().sendRequest(tLRPC$TL_messages_editChatAdmin, r13);
            } else {
                addUserToChat(i, tLRPC$User, 0, (String) null, baseFragment, new Runnable(tLRPC$TL_messages_editChatAdmin, r13) {
                    public final /* synthetic */ TLRPC$TL_messages_editChatAdmin f$1;
                    public final /* synthetic */ RequestDelegate f$2;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                    }

                    public final void run() {
                        MessagesController.this.lambda$setUserAdminRole$76$MessagesController(this.f$1, this.f$2);
                    }
                });
            }
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$setUserAdminRole$72 */
    public /* synthetic */ void lambda$setUserAdminRole$72$MessagesController(int i, BaseFragment baseFragment, TLRPC$TL_channels_editAdmin tLRPC$TL_channels_editAdmin, boolean z, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable(i) {
                public final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$70$MessagesController(this.f$1);
                }
            }, 1000);
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_error, baseFragment, tLRPC$TL_channels_editAdmin, z) {
            public final /* synthetic */ TLRPC$TL_error f$1;
            public final /* synthetic */ BaseFragment f$2;
            public final /* synthetic */ TLRPC$TL_channels_editAdmin f$3;
            public final /* synthetic */ boolean f$4;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
            }

            public final void run() {
                MessagesController.this.lambda$null$71$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$70 */
    public /* synthetic */ void lambda$null$70$MessagesController(int i) {
        loadFullChat(i, 0, true);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$71 */
    public /* synthetic */ void lambda$null$71$MessagesController(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_channels_editAdmin tLRPC$TL_channels_editAdmin, boolean z) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_channels_editAdmin, Boolean.valueOf(z));
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$73 */
    public /* synthetic */ void lambda$null$73$MessagesController(int i) {
        loadFullChat(i, 0, true);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$setUserAdminRole$75 */
    public /* synthetic */ void lambda$setUserAdminRole$75$MessagesController(int i, BaseFragment baseFragment, TLRPC$TL_messages_editChatAdmin tLRPC$TL_messages_editChatAdmin, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            AndroidUtilities.runOnUIThread(new Runnable(i) {
                public final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$73$MessagesController(this.f$1);
                }
            }, 1000);
        } else {
            AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_error, baseFragment, tLRPC$TL_messages_editChatAdmin) {
                public final /* synthetic */ TLRPC$TL_error f$1;
                public final /* synthetic */ BaseFragment f$2;
                public final /* synthetic */ TLRPC$TL_messages_editChatAdmin f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run() {
                    MessagesController.this.lambda$null$74$MessagesController(this.f$1, this.f$2, this.f$3);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$74 */
    public /* synthetic */ void lambda$null$74$MessagesController(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_messages_editChatAdmin tLRPC$TL_messages_editChatAdmin) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_messages_editChatAdmin, Boolean.FALSE);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$setUserAdminRole$76 */
    public /* synthetic */ void lambda$setUserAdminRole$76$MessagesController(TLRPC$TL_messages_editChatAdmin tLRPC$TL_messages_editChatAdmin, RequestDelegate requestDelegate) {
        getConnectionsManager().sendRequest(tLRPC$TL_messages_editChatAdmin, requestDelegate);
    }

    public void unblockPeer(int i) {
        TLRPC$Chat tLRPC$Chat;
        TLRPC$TL_contacts_unblock tLRPC$TL_contacts_unblock = new TLRPC$TL_contacts_unblock();
        TLRPC$User tLRPC$User = null;
        if (i > 0) {
            TLRPC$User user = getUser(Integer.valueOf(i));
            if (user != null) {
                TLRPC$User tLRPC$User2 = user;
                tLRPC$Chat = null;
                tLRPC$User = tLRPC$User2;
            } else {
                return;
            }
        } else {
            tLRPC$Chat = getChat(Integer.valueOf(-i));
            if (tLRPC$Chat == null) {
                return;
            }
        }
        this.totalBlockedCount--;
        this.blockePeers.delete(i);
        if (tLRPC$User != null) {
            tLRPC$TL_contacts_unblock.id = getInputPeer(tLRPC$User);
        } else {
            tLRPC$TL_contacts_unblock.id = getInputPeer(tLRPC$Chat);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
        getConnectionsManager().sendRequest(tLRPC$TL_contacts_unblock, $$Lambda$MessagesController$KNuUiyiitxgZvcXPZbDv0woOl9I.INSTANCE);
    }

    public void getBlockedPeers(boolean z) {
        int i;
        if (getUserConfig().isClientActivated() && !this.loadingBlockedPeers) {
            this.loadingBlockedPeers = true;
            TLRPC$TL_contacts_getBlocked tLRPC$TL_contacts_getBlocked = new TLRPC$TL_contacts_getBlocked();
            if (z) {
                i = 0;
            } else {
                i = this.blockePeers.size();
            }
            tLRPC$TL_contacts_getBlocked.offset = i;
            tLRPC$TL_contacts_getBlocked.limit = z ? 20 : 100;
            getConnectionsManager().sendRequest(tLRPC$TL_contacts_getBlocked, new RequestDelegate(z, tLRPC$TL_contacts_getBlocked) {
                public final /* synthetic */ boolean f$1;
                public final /* synthetic */ TLRPC$TL_contacts_getBlocked f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$getBlockedPeers$79$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$getBlockedPeers$79 */
    public /* synthetic */ void lambda$getBlockedPeers$79$MessagesController(boolean z, TLRPC$TL_contacts_getBlocked tLRPC$TL_contacts_getBlocked, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable(tLObject, z, tLRPC$TL_contacts_getBlocked) {
            public final /* synthetic */ TLObject f$1;
            public final /* synthetic */ boolean f$2;
            public final /* synthetic */ TLRPC$TL_contacts_getBlocked f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesController.this.lambda$null$78$MessagesController(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$78 */
    public /* synthetic */ void lambda$null$78$MessagesController(TLObject tLObject, boolean z, TLRPC$TL_contacts_getBlocked tLRPC$TL_contacts_getBlocked) {
        if (tLObject != null) {
            TLRPC$contacts_Blocked tLRPC$contacts_Blocked = (TLRPC$contacts_Blocked) tLObject;
            putUsers(tLRPC$contacts_Blocked.users, false);
            putChats(tLRPC$contacts_Blocked.chats, false);
            getMessagesStorage().putUsersAndChats(tLRPC$contacts_Blocked.users, tLRPC$contacts_Blocked.chats, true, true);
            if (z) {
                this.blockePeers.clear();
            }
            this.totalBlockedCount = Math.max(tLRPC$contacts_Blocked.count, tLRPC$contacts_Blocked.blocked.size());
            this.blockedEndReached = tLRPC$contacts_Blocked.blocked.size() < tLRPC$TL_contacts_getBlocked.limit;
            int size = tLRPC$contacts_Blocked.blocked.size();
            for (int i = 0; i < size; i++) {
                this.blockePeers.put(MessageObject.getPeerId(tLRPC$contacts_Blocked.blocked.get(i).peer_id), 1);
            }
            this.loadingBlockedPeers = false;
            getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
        }
    }

    public void deleteUserPhoto(TLRPC$InputPhoto tLRPC$InputPhoto) {
        if (tLRPC$InputPhoto == null) {
            TLRPC$TL_photos_updateProfilePhoto tLRPC$TL_photos_updateProfilePhoto = new TLRPC$TL_photos_updateProfilePhoto();
            tLRPC$TL_photos_updateProfilePhoto.id = new TLRPC$TL_inputPhotoEmpty();
            getUserConfig().getCurrentUser().photo = new TLRPC$TL_userProfilePhotoEmpty();
            TLRPC$User user = getUser(Integer.valueOf(getUserConfig().getClientUserId()));
            if (user == null) {
                user = getUserConfig().getCurrentUser();
            }
            if (user != null) {
                user.photo = getUserConfig().getCurrentUser().photo;
                getNotificationCenter().postNotificationName(NotificationCenter.mainUserInfoChanged, new Object[0]);
                getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 1535);
                getConnectionsManager().sendRequest(tLRPC$TL_photos_updateProfilePhoto, new RequestDelegate() {
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$deleteUserPhoto$81$MessagesController(tLObject, tLRPC$TL_error);
                    }
                });
                return;
            }
            return;
        }
        TLRPC$TL_photos_deletePhotos tLRPC$TL_photos_deletePhotos = new TLRPC$TL_photos_deletePhotos();
        tLRPC$TL_photos_deletePhotos.id.add(tLRPC$InputPhoto);
        getConnectionsManager().sendRequest(tLRPC$TL_photos_deletePhotos, $$Lambda$MessagesController$7ccUBh9SFdmH5Mj8_5J4W9fRDdc.INSTANCE);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$deleteUserPhoto$81 */
    public /* synthetic */ void lambda$deleteUserPhoto$81$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_photos_photo tLRPC$TL_photos_photo = (TLRPC$TL_photos_photo) tLObject;
            TLRPC$User user = getUser(Integer.valueOf(getUserConfig().getClientUserId()));
            if (user == null) {
                user = getUserConfig().getCurrentUser();
                putUser(user, false);
            } else {
                getUserConfig().setCurrentUser(user);
            }
            if (user != null) {
                getMessagesStorage().clearUserPhotos(user.id);
                ArrayList arrayList = new ArrayList();
                arrayList.add(user);
                getMessagesStorage().putUsersAndChats(arrayList, (ArrayList<TLRPC$Chat>) null, false, true);
                if (tLRPC$TL_photos_photo.photo instanceof TLRPC$TL_photo) {
                    TLRPC$TL_userProfilePhoto tLRPC$TL_userProfilePhoto = new TLRPC$TL_userProfilePhoto();
                    user.photo = tLRPC$TL_userProfilePhoto;
                    tLRPC$TL_userProfilePhoto.has_video = !tLRPC$TL_photos_photo.photo.video_sizes.isEmpty();
                    TLRPC$UserProfilePhoto tLRPC$UserProfilePhoto = user.photo;
                    TLRPC$Photo tLRPC$Photo = tLRPC$TL_photos_photo.photo;
                    tLRPC$UserProfilePhoto.photo_id = tLRPC$Photo.id;
                    tLRPC$UserProfilePhoto.photo_small = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo.sizes, 150).location;
                    user.photo.photo_big = FileLoader.getClosestPhotoSizeWithSize(tLRPC$TL_photos_photo.photo.sizes, 800).location;
                    user.photo.dc_id = tLRPC$TL_photos_photo.photo.dc_id;
                } else {
                    user.photo = new TLRPC$TL_userProfilePhotoEmpty();
                }
                AndroidUtilities.runOnUIThread(new Runnable() {
                    public final void run() {
                        MessagesController.this.lambda$null$80$MessagesController();
                    }
                });
            }
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$80 */
    public /* synthetic */ void lambda$null$80$MessagesController() {
        getNotificationCenter().postNotificationName(NotificationCenter.mainUserInfoChanged, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 1535);
        getUserConfig().saveConfig(true);
    }

    public void processLoadedUserPhotos(TLRPC$photos_Photos tLRPC$photos_Photos, ArrayList<TLRPC$Message> arrayList, int i, int i2, long j, boolean z, int i3) {
        TLRPC$photos_Photos tLRPC$photos_Photos2 = tLRPC$photos_Photos;
        if (!z) {
            getMessagesStorage().putUsersAndChats(tLRPC$photos_Photos2.users, (ArrayList<TLRPC$Chat>) null, true, true);
            ArrayList<TLRPC$Message> arrayList2 = arrayList;
            int i4 = i;
            getMessagesStorage().putDialogPhotos(i, tLRPC$photos_Photos, arrayList);
        } else {
            ArrayList<TLRPC$Message> arrayList3 = arrayList;
            int i5 = i;
            if (tLRPC$photos_Photos2 == null || tLRPC$photos_Photos2.photos.isEmpty()) {
                loadDialogPhotos(i, i2, j, false, i3);
                return;
            }
        }
        AndroidUtilities.runOnUIThread(new Runnable(tLRPC$photos_Photos, z, i, i2, i3, arrayList) {
            public final /* synthetic */ TLRPC$photos_Photos f$1;
            public final /* synthetic */ boolean f$2;
            public final /* synthetic */ int f$3;
            public final /* synthetic */ int f$4;
            public final /* synthetic */ int f$5;
            public final /* synthetic */ ArrayList f$6;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
            }

            public final void run() {
                MessagesController.this.lambda$processLoadedUserPhotos$83$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$processLoadedUserPhotos$83 */
    public /* synthetic */ void lambda$processLoadedUserPhotos$83$MessagesController(TLRPC$photos_Photos tLRPC$photos_Photos, boolean z, int i, int i2, int i3, ArrayList arrayList) {
        putUsers(tLRPC$photos_Photos.users, z);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogPhotosLoaded, Integer.valueOf(i), Integer.valueOf(i2), Boolean.valueOf(z), Integer.valueOf(i3), tLRPC$photos_Photos.photos, arrayList);
    }

    public void uploadAndApplyUserAvatar(TLRPC$FileLocation tLRPC$FileLocation) {
        if (tLRPC$FileLocation != null) {
            this.uploadingAvatar = FileLoader.getDirectory(4) + "/" + tLRPC$FileLocation.volume_id + "_" + tLRPC$FileLocation.local_id + ".jpg";
            getFileLoader().uploadFile(this.uploadingAvatar, false, true, 16777216);
        }
    }

    public void saveTheme(Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent, boolean z, boolean z2) {
        TLRPC$TL_theme tLRPC$TL_theme = themeAccent != null ? themeAccent.info : themeInfo.info;
        if (tLRPC$TL_theme != null) {
            TLRPC$TL_account_saveTheme tLRPC$TL_account_saveTheme = new TLRPC$TL_account_saveTheme();
            TLRPC$TL_inputTheme tLRPC$TL_inputTheme = new TLRPC$TL_inputTheme();
            tLRPC$TL_inputTheme.id = tLRPC$TL_theme.id;
            tLRPC$TL_inputTheme.access_hash = tLRPC$TL_theme.access_hash;
            tLRPC$TL_account_saveTheme.theme = tLRPC$TL_inputTheme;
            tLRPC$TL_account_saveTheme.unsave = z2;
            getConnectionsManager().sendRequest(tLRPC$TL_account_saveTheme, $$Lambda$MessagesController$b5ZVh5llvhbm5O84HPjwKYV0Eo.INSTANCE);
            getConnectionsManager().resumeNetworkMaybe();
        }
        if (!z2) {
            installTheme(themeInfo, themeAccent, z);
        }
    }

    public void installTheme(Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent, boolean z) {
        TLRPC$TL_theme tLRPC$TL_theme = themeAccent != null ? themeAccent.info : themeInfo.info;
        String str = themeAccent != null ? themeAccent.patternSlug : themeInfo.slug;
        boolean z2 = themeAccent == null && themeInfo.isBlured;
        boolean z3 = themeAccent != null ? themeAccent.patternMotion : themeInfo.isMotion;
        TLRPC$TL_account_installTheme tLRPC$TL_account_installTheme = new TLRPC$TL_account_installTheme();
        tLRPC$TL_account_installTheme.dark = z;
        if (tLRPC$TL_theme != null) {
            tLRPC$TL_account_installTheme.format = "android";
            TLRPC$TL_inputTheme tLRPC$TL_inputTheme = new TLRPC$TL_inputTheme();
            tLRPC$TL_inputTheme.id = tLRPC$TL_theme.id;
            tLRPC$TL_inputTheme.access_hash = tLRPC$TL_theme.access_hash;
            tLRPC$TL_account_installTheme.theme = tLRPC$TL_inputTheme;
            tLRPC$TL_account_installTheme.flags |= 2;
        }
        getConnectionsManager().sendRequest(tLRPC$TL_account_installTheme, $$Lambda$MessagesController$tnPrbdHlSF9P45e2Xv_eUYIocWA.INSTANCE);
        if (!TextUtils.isEmpty(str)) {
            TLRPC$TL_account_installWallPaper tLRPC$TL_account_installWallPaper = new TLRPC$TL_account_installWallPaper();
            TLRPC$TL_inputWallPaperSlug tLRPC$TL_inputWallPaperSlug = new TLRPC$TL_inputWallPaperSlug();
            tLRPC$TL_inputWallPaperSlug.slug = str;
            tLRPC$TL_account_installWallPaper.wallpaper = tLRPC$TL_inputWallPaperSlug;
            TLRPC$TL_wallPaperSettings tLRPC$TL_wallPaperSettings = new TLRPC$TL_wallPaperSettings();
            tLRPC$TL_account_installWallPaper.settings = tLRPC$TL_wallPaperSettings;
            tLRPC$TL_wallPaperSettings.blur = z2;
            tLRPC$TL_wallPaperSettings.motion = z3;
            getConnectionsManager().sendRequest(tLRPC$TL_account_installWallPaper, $$Lambda$MessagesController$VqjdFartvfE_PNLAAX__K9qwmU4.INSTANCE);
        }
    }

    public void saveThemeToServer(Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent) {
        File file;
        String str;
        if (themeInfo != null) {
            if (themeAccent != null) {
                str = themeAccent.saveToFile().getAbsolutePath();
                file = themeAccent.getPathToWallpaper();
            } else {
                str = themeInfo.pathToFile;
                file = null;
            }
            String str2 = str;
            File file2 = file;
            if (str2 != null && !this.uploadingThemes.containsKey(str2)) {
                this.uploadingThemes.put(str2, themeAccent != null ? themeAccent : themeInfo);
                Utilities.globalQueue.postRunnable(new Runnable(str2, file2, themeAccent, themeInfo) {
                    public final /* synthetic */ String f$1;
                    public final /* synthetic */ File f$2;
                    public final /* synthetic */ Theme.ThemeAccent f$3;
                    public final /* synthetic */ Theme.ThemeInfo f$4;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                        this.f$3 = r4;
                        this.f$4 = r5;
                    }

                    public final void run() {
                        MessagesController.this.lambda$saveThemeToServer$88$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4);
                    }
                });
            }
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$saveThemeToServer$88 */
    public /* synthetic */ void lambda$saveThemeToServer$88$MessagesController(String str, File file, Theme.ThemeAccent themeAccent, Theme.ThemeInfo themeInfo) {
        AndroidUtilities.runOnUIThread(new Runnable(Theme.createThemePreviewImage(str, file != null ? file.getAbsolutePath() : null), str, themeAccent, themeInfo) {
            public final /* synthetic */ String f$1;
            public final /* synthetic */ String f$2;
            public final /* synthetic */ Theme.ThemeAccent f$3;
            public final /* synthetic */ Theme.ThemeInfo f$4;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
            }

            public final void run() {
                MessagesController.this.lambda$null$87$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4);
            }
        });
    }

    /* JADX WARNING: type inference failed for: r6v0, types: [org.telegram.ui.ActionBar.Theme$ThemeInfo] */
    /* access modifiers changed from: private */
    /* JADX WARNING: Unknown variable types count: 1 */
    /* renamed from: lambda$null$87 */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$null$87$MessagesController(java.lang.String r3, java.lang.String r4, org.telegram.ui.ActionBar.Theme.ThemeAccent r5, org.telegram.ui.ActionBar.Theme.ThemeInfo r6) {
        /*
            r2 = this;
            if (r3 != 0) goto L_0x0008
            java.util.HashMap<java.lang.String, java.lang.Object> r3 = r2.uploadingThemes
            r3.remove(r4)
            return
        L_0x0008:
            java.util.HashMap<java.lang.String, java.lang.Object> r0 = r2.uploadingThemes
            if (r5 == 0) goto L_0x000e
            r1 = r5
            goto L_0x000f
        L_0x000e:
            r1 = r6
        L_0x000f:
            r0.put(r3, r1)
            if (r5 != 0) goto L_0x0019
            r6.uploadingFile = r4
            r6.uploadingThumb = r3
            goto L_0x001d
        L_0x0019:
            r5.uploadingFile = r4
            r5.uploadingThumb = r3
        L_0x001d:
            org.telegram.messenger.FileLoader r5 = r2.getFileLoader()
            r6 = 67108864(0x4000000, float:1.5046328E-36)
            r0 = 0
            r1 = 1
            r5.uploadFile(r4, r0, r1, r6)
            org.telegram.messenger.FileLoader r4 = r2.getFileLoader()
            r5 = 16777216(0x1000000, float:2.3509887E-38)
            r4.uploadFile(r3, r0, r1, r5)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$null$87$MessagesController(java.lang.String, java.lang.String, org.telegram.ui.ActionBar.Theme$ThemeAccent, org.telegram.ui.ActionBar.Theme$ThemeInfo):void");
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v2, resolved type: org.telegram.tgnet.TLRPC$TL_account_saveWallPaper} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v4, resolved type: org.telegram.tgnet.TLRPC$TL_account_installWallPaper} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v11, resolved type: org.telegram.tgnet.TLRPC$TL_account_saveWallPaper} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v12, resolved type: org.telegram.tgnet.TLRPC$TL_account_saveWallPaper} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void saveWallpaperToServer(java.io.File r7, org.telegram.ui.ActionBar.Theme.OverrideWallpaperInfo r8, boolean r9, long r10) {
        /*
            r6 = this;
            java.lang.String r0 = r6.uploadingWallpaper
            r1 = 0
            r2 = 0
            if (r0 == 0) goto L_0x0035
            java.io.File r0 = new java.io.File
            java.io.File r3 = org.telegram.messenger.ApplicationLoader.getFilesDirFixed()
            java.lang.String r4 = r8.originalFileName
            r0.<init>(r3, r4)
            if (r7 == 0) goto L_0x0028
            java.lang.String r3 = r7.getAbsolutePath()
            java.lang.String r4 = r6.uploadingWallpaper
            boolean r3 = r3.equals(r4)
            if (r3 != 0) goto L_0x0025
            boolean r0 = r7.equals(r0)
            if (r0 == 0) goto L_0x0028
        L_0x0025:
            r6.uploadingWallpaperInfo = r8
            return
        L_0x0028:
            org.telegram.messenger.FileLoader r0 = r6.getFileLoader()
            java.lang.String r3 = r6.uploadingWallpaper
            r0.cancelUploadFile(r3, r1)
            r6.uploadingWallpaper = r2
            r6.uploadingWallpaperInfo = r2
        L_0x0035:
            r0 = 1
            if (r7 == 0) goto L_0x004d
            java.lang.String r7 = r7.getAbsolutePath()
            r6.uploadingWallpaper = r7
            r6.uploadingWallpaperInfo = r8
            org.telegram.messenger.FileLoader r7 = r6.getFileLoader()
            java.lang.String r8 = r6.uploadingWallpaper
            r9 = 16777216(0x1000000, float:2.3509887E-38)
            r7.uploadFile(r8, r1, r0, r9)
            goto L_0x0119
        L_0x004d:
            boolean r7 = r8.isDefault()
            if (r7 != 0) goto L_0x0119
            boolean r7 = r8.isColor()
            if (r7 != 0) goto L_0x0119
            boolean r7 = r8.isTheme()
            if (r7 != 0) goto L_0x0119
            org.telegram.tgnet.TLRPC$TL_inputWallPaperSlug r7 = new org.telegram.tgnet.TLRPC$TL_inputWallPaperSlug
            r7.<init>()
            java.lang.String r1 = r8.slug
            r7.slug = r1
            org.telegram.tgnet.TLRPC$TL_wallPaperSettings r1 = new org.telegram.tgnet.TLRPC$TL_wallPaperSettings
            r1.<init>()
            boolean r3 = r8.isBlurred
            r1.blur = r3
            boolean r3 = r8.isMotion
            r1.motion = r3
            int r3 = r8.color
            if (r3 == 0) goto L_0x008d
            r1.background_color = r3
            int r3 = r1.flags
            r3 = r3 | r0
            r1.flags = r3
            float r4 = r8.intensity
            r5 = 1120403456(0x42CLASSNAME, float:100.0)
            float r4 = r4 * r5
            int r4 = (int) r4
            r1.intensity = r4
            r3 = r3 | 8
            r1.flags = r3
        L_0x008d:
            int r3 = r8.gradientColor
            if (r3 == 0) goto L_0x00a1
            r1.second_background_color = r3
            int r3 = r8.rotation
            int r0 = org.telegram.messenger.AndroidUtilities.getWallpaperRotation(r3, r0)
            r1.rotation = r0
            int r0 = r1.flags
            r0 = r0 | 16
            r1.flags = r0
        L_0x00a1:
            if (r9 == 0) goto L_0x00ad
            org.telegram.tgnet.TLRPC$TL_account_installWallPaper r0 = new org.telegram.tgnet.TLRPC$TL_account_installWallPaper
            r0.<init>()
            r0.wallpaper = r7
            r0.settings = r1
            goto L_0x00b6
        L_0x00ad:
            org.telegram.tgnet.TLRPC$TL_account_saveWallPaper r0 = new org.telegram.tgnet.TLRPC$TL_account_saveWallPaper
            r0.<init>()
            r0.wallpaper = r7
            r0.settings = r1
        L_0x00b6:
            r3 = 0
            int r7 = (r10 > r3 ? 1 : (r10 == r3 ? 0 : -1))
            if (r7 == 0) goto L_0x00bd
            goto L_0x010d
        L_0x00bd:
            org.telegram.tgnet.NativeByteBuffer r7 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x0100 }
            r10 = 1024(0x400, float:1.435E-42)
            r7.<init>((int) r10)     // Catch:{ Exception -> 0x0100 }
            r10 = 21
            r7.writeInt32(r10)     // Catch:{ Exception -> 0x00fd }
            boolean r10 = r8.isBlurred     // Catch:{ Exception -> 0x00fd }
            r7.writeBool(r10)     // Catch:{ Exception -> 0x00fd }
            boolean r10 = r8.isMotion     // Catch:{ Exception -> 0x00fd }
            r7.writeBool(r10)     // Catch:{ Exception -> 0x00fd }
            int r10 = r8.color     // Catch:{ Exception -> 0x00fd }
            r7.writeInt32(r10)     // Catch:{ Exception -> 0x00fd }
            int r10 = r8.gradientColor     // Catch:{ Exception -> 0x00fd }
            r7.writeInt32(r10)     // Catch:{ Exception -> 0x00fd }
            int r10 = r8.rotation     // Catch:{ Exception -> 0x00fd }
            r7.writeInt32(r10)     // Catch:{ Exception -> 0x00fd }
            float r10 = r8.intensity     // Catch:{ Exception -> 0x00fd }
            double r10 = (double) r10     // Catch:{ Exception -> 0x00fd }
            r7.writeDouble(r10)     // Catch:{ Exception -> 0x00fd }
            r7.writeBool(r9)     // Catch:{ Exception -> 0x00fd }
            java.lang.String r9 = r8.slug     // Catch:{ Exception -> 0x00fd }
            r7.writeString(r9)     // Catch:{ Exception -> 0x00fd }
            java.lang.String r8 = r8.originalFileName     // Catch:{ Exception -> 0x00fd }
            r7.writeString(r8)     // Catch:{ Exception -> 0x00fd }
            int r8 = r7.position()     // Catch:{ Exception -> 0x00fd }
            r7.limit(r8)     // Catch:{ Exception -> 0x00fd }
            goto L_0x0105
        L_0x00fd:
            r8 = move-exception
            r2 = r7
            goto L_0x0101
        L_0x0100:
            r8 = move-exception
        L_0x0101:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r8)
            r7 = r2
        L_0x0105:
            org.telegram.messenger.MessagesStorage r8 = r6.getMessagesStorage()
            long r10 = r8.createPendingTask(r7)
        L_0x010d:
            org.telegram.tgnet.ConnectionsManager r7 = r6.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$Mg7A77Q30BnMVRn7db9-AX9g9Kk r8 = new org.telegram.messenger.-$$Lambda$MessagesController$Mg7A77Q30BnMVRn7db9-AX9g9Kk
            r8.<init>(r10)
            r7.sendRequest(r0, r8)
        L_0x0119:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.saveWallpaperToServer(java.io.File, org.telegram.ui.ActionBar.Theme$OverrideWallpaperInfo, boolean, long):void");
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$saveWallpaperToServer$89 */
    public /* synthetic */ void lambda$saveWallpaperToServer$89$MessagesController(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        getMessagesStorage().removePendingTask(j);
    }

    public void markDialogMessageAsDeleted(ArrayList<Integer> arrayList, long j) {
        MessageObject messageObject = this.dialogMessage.get(j);
        if (messageObject != null) {
            for (int i = 0; i < arrayList.size(); i++) {
                if (messageObject.getId() == arrayList.get(i).intValue()) {
                    messageObject.deleted = true;
                    return;
                }
            }
        }
    }

    public void deleteMessages(ArrayList<Integer> arrayList, ArrayList<Long> arrayList2, TLRPC$EncryptedChat tLRPC$EncryptedChat, long j, int i, boolean z, boolean z2) {
        deleteMessages(arrayList, arrayList2, tLRPC$EncryptedChat, j, i, z, z2, 0, (TLObject) null);
    }

    public void deleteMessages(ArrayList<Integer> arrayList, ArrayList<Long> arrayList2, TLRPC$EncryptedChat tLRPC$EncryptedChat, long j, int i, boolean z, boolean z2, long j2, TLObject tLObject) {
        ArrayList<Integer> arrayList3;
        long j3;
        TLRPC$TL_messages_deleteMessages tLRPC$TL_messages_deleteMessages;
        NativeByteBuffer nativeByteBuffer;
        long j4;
        TLRPC$TL_channels_deleteMessages tLRPC$TL_channels_deleteMessages;
        NativeByteBuffer nativeByteBuffer2;
        long j5;
        TLRPC$TL_messages_deleteScheduledMessages tLRPC$TL_messages_deleteScheduledMessages;
        NativeByteBuffer nativeByteBuffer3;
        char c;
        ArrayList<Integer> arrayList4 = arrayList;
        ArrayList<Long> arrayList5 = arrayList2;
        TLRPC$EncryptedChat tLRPC$EncryptedChat2 = tLRPC$EncryptedChat;
        long j6 = j;
        int i2 = i;
        if ((arrayList4 != null && !arrayList.isEmpty()) || j2 != 0) {
            NativeByteBuffer nativeByteBuffer4 = null;
            if (j2 == 0) {
                arrayList3 = new ArrayList<>();
                int size = arrayList.size();
                for (int i3 = 0; i3 < size; i3++) {
                    Integer num = arrayList4.get(i3);
                    if (num.intValue() > 0) {
                        arrayList3.add(num);
                    }
                }
                if (z2) {
                    c = 1;
                    getMessagesStorage().markMessagesAsDeleted(arrayList, true, i, false, true);
                } else {
                    c = 1;
                    if (i2 == 0) {
                        for (int i4 = 0; i4 < arrayList.size(); i4++) {
                            MessageObject messageObject = this.dialogMessagesByIds.get(arrayList4.get(i4).intValue());
                            if (messageObject != null) {
                                messageObject.deleted = true;
                            }
                        }
                    } else {
                        markDialogMessageAsDeleted(arrayList4, (long) (-i2));
                    }
                    getMessagesStorage().markMessagesAsDeleted(arrayList, true, i, z, false);
                    getMessagesStorage().updateDialogsWithDeletedMessages(arrayList4, (ArrayList<Long>) null, true, i2);
                }
                NotificationCenter notificationCenter = getNotificationCenter();
                int i5 = NotificationCenter.messagesDeleted;
                Object[] objArr = new Object[3];
                objArr[0] = arrayList4;
                objArr[c] = Integer.valueOf(i);
                objArr[2] = Boolean.valueOf(z2);
                notificationCenter.postNotificationName(i5, objArr);
            } else {
                arrayList3 = null;
            }
            if (z2) {
                if (tLObject != null) {
                    tLRPC$TL_messages_deleteScheduledMessages = (TLRPC$TL_messages_deleteScheduledMessages) tLObject;
                    j5 = j2;
                } else {
                    TLRPC$TL_messages_deleteScheduledMessages tLRPC$TL_messages_deleteScheduledMessages2 = new TLRPC$TL_messages_deleteScheduledMessages();
                    tLRPC$TL_messages_deleteScheduledMessages2.id = arrayList3;
                    tLRPC$TL_messages_deleteScheduledMessages2.peer = getInputPeer((int) j6);
                    try {
                        nativeByteBuffer3 = new NativeByteBuffer(tLRPC$TL_messages_deleteScheduledMessages2.getObjectSize() + 16);
                        try {
                            nativeByteBuffer3.writeInt32(18);
                            nativeByteBuffer3.writeInt64(j6);
                            nativeByteBuffer3.writeInt32(i2);
                            tLRPC$TL_messages_deleteScheduledMessages2.serializeToStream(nativeByteBuffer3);
                        } catch (Exception e) {
                            e = e;
                            nativeByteBuffer4 = nativeByteBuffer3;
                        }
                    } catch (Exception e2) {
                        e = e2;
                        FileLog.e((Throwable) e);
                        nativeByteBuffer3 = nativeByteBuffer4;
                        j5 = getMessagesStorage().createPendingTask(nativeByteBuffer3);
                        tLRPC$TL_messages_deleteScheduledMessages = tLRPC$TL_messages_deleteScheduledMessages2;
                        getConnectionsManager().sendRequest(tLRPC$TL_messages_deleteScheduledMessages, new RequestDelegate(j5) {
                            public final /* synthetic */ long f$1;

                            {
                                this.f$1 = r2;
                            }

                            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                MessagesController.this.lambda$deleteMessages$90$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                            }
                        });
                    }
                    j5 = getMessagesStorage().createPendingTask(nativeByteBuffer3);
                    tLRPC$TL_messages_deleteScheduledMessages = tLRPC$TL_messages_deleteScheduledMessages2;
                }
                getConnectionsManager().sendRequest(tLRPC$TL_messages_deleteScheduledMessages, new RequestDelegate(j5) {
                    public final /* synthetic */ long f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$deleteMessages$90$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                    }
                });
            } else if (i2 != 0) {
                if (tLObject != null) {
                    tLRPC$TL_channels_deleteMessages = (TLRPC$TL_channels_deleteMessages) tLObject;
                    j4 = j2;
                } else {
                    TLRPC$TL_channels_deleteMessages tLRPC$TL_channels_deleteMessages2 = new TLRPC$TL_channels_deleteMessages();
                    tLRPC$TL_channels_deleteMessages2.id = arrayList3;
                    tLRPC$TL_channels_deleteMessages2.channel = getInputChannel(i2);
                    try {
                        nativeByteBuffer2 = new NativeByteBuffer(tLRPC$TL_channels_deleteMessages2.getObjectSize() + 8);
                        try {
                            nativeByteBuffer2.writeInt32(7);
                            nativeByteBuffer2.writeInt32(i2);
                            tLRPC$TL_channels_deleteMessages2.serializeToStream(nativeByteBuffer2);
                        } catch (Exception e3) {
                            e = e3;
                            nativeByteBuffer4 = nativeByteBuffer2;
                        }
                    } catch (Exception e4) {
                        e = e4;
                        FileLog.e((Throwable) e);
                        nativeByteBuffer2 = nativeByteBuffer4;
                        j4 = getMessagesStorage().createPendingTask(nativeByteBuffer2);
                        tLRPC$TL_channels_deleteMessages = tLRPC$TL_channels_deleteMessages2;
                        getConnectionsManager().sendRequest(tLRPC$TL_channels_deleteMessages, new RequestDelegate(i2, j4) {
                            public final /* synthetic */ int f$1;
                            public final /* synthetic */ long f$2;

                            {
                                this.f$1 = r2;
                                this.f$2 = r3;
                            }

                            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                MessagesController.this.lambda$deleteMessages$91$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                            }
                        });
                    }
                    j4 = getMessagesStorage().createPendingTask(nativeByteBuffer2);
                    tLRPC$TL_channels_deleteMessages = tLRPC$TL_channels_deleteMessages2;
                }
                getConnectionsManager().sendRequest(tLRPC$TL_channels_deleteMessages, new RequestDelegate(i2, j4) {
                    public final /* synthetic */ int f$1;
                    public final /* synthetic */ long f$2;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$deleteMessages$91$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                    }
                });
            } else {
                if (!(arrayList5 == null || tLRPC$EncryptedChat2 == null || arrayList2.isEmpty())) {
                    getSecretChatHelper().sendMessagesDeleteMessage(tLRPC$EncryptedChat2, arrayList5, (TLRPC$Message) null);
                }
                if (tLObject != null) {
                    tLRPC$TL_messages_deleteMessages = (TLRPC$TL_messages_deleteMessages) tLObject;
                    j3 = j2;
                } else {
                    TLRPC$TL_messages_deleteMessages tLRPC$TL_messages_deleteMessages2 = new TLRPC$TL_messages_deleteMessages();
                    tLRPC$TL_messages_deleteMessages2.id = arrayList3;
                    tLRPC$TL_messages_deleteMessages2.revoke = z;
                    try {
                        nativeByteBuffer = new NativeByteBuffer(tLRPC$TL_messages_deleteMessages2.getObjectSize() + 8);
                        try {
                            nativeByteBuffer.writeInt32(7);
                            nativeByteBuffer.writeInt32(i2);
                            tLRPC$TL_messages_deleteMessages2.serializeToStream(nativeByteBuffer);
                        } catch (Exception e5) {
                            e = e5;
                            nativeByteBuffer4 = nativeByteBuffer;
                        }
                    } catch (Exception e6) {
                        e = e6;
                        FileLog.e((Throwable) e);
                        nativeByteBuffer = nativeByteBuffer4;
                        j3 = getMessagesStorage().createPendingTask(nativeByteBuffer);
                        tLRPC$TL_messages_deleteMessages = tLRPC$TL_messages_deleteMessages2;
                        getConnectionsManager().sendRequest(tLRPC$TL_messages_deleteMessages, new RequestDelegate(j3) {
                            public final /* synthetic */ long f$1;

                            {
                                this.f$1 = r2;
                            }

                            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                MessagesController.this.lambda$deleteMessages$92$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                            }
                        });
                    }
                    j3 = getMessagesStorage().createPendingTask(nativeByteBuffer);
                    tLRPC$TL_messages_deleteMessages = tLRPC$TL_messages_deleteMessages2;
                }
                getConnectionsManager().sendRequest(tLRPC$TL_messages_deleteMessages, new RequestDelegate(j3) {
                    public final /* synthetic */ long f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$deleteMessages$92$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                    }
                });
            }
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$deleteMessages$90 */
    public /* synthetic */ void lambda$deleteMessages$90$MessagesController(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$deleteMessages$91 */
    public /* synthetic */ void lambda$deleteMessages$91$MessagesController(int i, long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedMessages tLRPC$TL_messages_affectedMessages = (TLRPC$TL_messages_affectedMessages) tLObject;
            processNewChannelDifferenceParams(tLRPC$TL_messages_affectedMessages.pts, tLRPC$TL_messages_affectedMessages.pts_count, i);
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$deleteMessages$92 */
    public /* synthetic */ void lambda$deleteMessages$92$MessagesController(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedMessages tLRPC$TL_messages_affectedMessages = (TLRPC$TL_messages_affectedMessages) tLObject;
            processNewDifferenceParams(-1, tLRPC$TL_messages_affectedMessages.pts, -1, tLRPC$TL_messages_affectedMessages.pts_count);
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public void unpinAllMessages(TLRPC$Chat tLRPC$Chat, TLRPC$User tLRPC$User) {
        if (tLRPC$Chat != null || tLRPC$User != null) {
            TLRPC$TL_messages_unpinAllMessages tLRPC$TL_messages_unpinAllMessages = new TLRPC$TL_messages_unpinAllMessages();
            tLRPC$TL_messages_unpinAllMessages.peer = getInputPeer(tLRPC$Chat != null ? -tLRPC$Chat.id : tLRPC$User.id);
            getConnectionsManager().sendRequest(tLRPC$TL_messages_unpinAllMessages, new RequestDelegate(tLRPC$Chat, tLRPC$User) {
                public final /* synthetic */ TLRPC$Chat f$1;
                public final /* synthetic */ TLRPC$User f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$unpinAllMessages$93$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$unpinAllMessages$93 */
    public /* synthetic */ void lambda$unpinAllMessages$93$MessagesController(TLRPC$Chat tLRPC$Chat, TLRPC$User tLRPC$User, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$TL_messages_affectedHistory tLRPC$TL_messages_affectedHistory = (TLRPC$TL_messages_affectedHistory) tLObject;
            if (ChatObject.isChannel(tLRPC$Chat)) {
                processNewChannelDifferenceParams(tLRPC$TL_messages_affectedHistory.pts, tLRPC$TL_messages_affectedHistory.pts_count, tLRPC$Chat.id);
            } else {
                processNewDifferenceParams(-1, tLRPC$TL_messages_affectedHistory.pts, -1, tLRPC$TL_messages_affectedHistory.pts_count);
            }
            new ArrayList();
            getMessagesStorage().updatePinnedMessages((long) (tLRPC$Chat != null ? -tLRPC$Chat.id : tLRPC$User.id), (ArrayList<Integer>) null, false, 0, 0, false, (HashMap<Integer, MessageObject>) null);
        }
    }

    public void pinMessage(TLRPC$Chat tLRPC$Chat, TLRPC$User tLRPC$User, int i, boolean z, boolean z2, boolean z3) {
        if (tLRPC$Chat != null || tLRPC$User != null) {
            TLRPC$TL_messages_updatePinnedMessage tLRPC$TL_messages_updatePinnedMessage = new TLRPC$TL_messages_updatePinnedMessage();
            tLRPC$TL_messages_updatePinnedMessage.peer = getInputPeer(tLRPC$Chat != null ? -tLRPC$Chat.id : tLRPC$User.id);
            tLRPC$TL_messages_updatePinnedMessage.id = i;
            tLRPC$TL_messages_updatePinnedMessage.unpin = z;
            tLRPC$TL_messages_updatePinnedMessage.silent = !z3;
            tLRPC$TL_messages_updatePinnedMessage.pm_oneside = z2;
            getConnectionsManager().sendRequest(tLRPC$TL_messages_updatePinnedMessage, new RequestDelegate(i, tLRPC$Chat, tLRPC$User, z) {
                public final /* synthetic */ int f$1;
                public final /* synthetic */ TLRPC$Chat f$2;
                public final /* synthetic */ TLRPC$User f$3;
                public final /* synthetic */ boolean f$4;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r5;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$pinMessage$94$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$pinMessage$94 */
    public /* synthetic */ void lambda$pinMessage$94$MessagesController(int i, TLRPC$Chat tLRPC$Chat, TLRPC$User tLRPC$User, boolean z, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            ArrayList arrayList = new ArrayList();
            arrayList.add(Integer.valueOf(i));
            getMessagesStorage().updatePinnedMessages((long) (tLRPC$Chat != null ? -tLRPC$Chat.id : tLRPC$User.id), arrayList, !z, -1, 0, false, (HashMap<Integer, MessageObject>) null);
            processUpdates((TLRPC$Updates) tLObject, false);
        }
    }

    public void deleteUserChannelHistory(TLRPC$Chat tLRPC$Chat, TLRPC$User tLRPC$User, int i) {
        if (i == 0) {
            MessagesStorage messagesStorage = getMessagesStorage();
            int i2 = tLRPC$Chat.id;
            messagesStorage.deleteUserChatHistory((long) (-i2), i2, tLRPC$User.id);
        }
        TLRPC$TL_channels_deleteUserHistory tLRPC$TL_channels_deleteUserHistory = new TLRPC$TL_channels_deleteUserHistory();
        tLRPC$TL_channels_deleteUserHistory.channel = getInputChannel(tLRPC$Chat);
        tLRPC$TL_channels_deleteUserHistory.user_id = getInputUser(tLRPC$User);
        getConnectionsManager().sendRequest(tLRPC$TL_channels_deleteUserHistory, new RequestDelegate(tLRPC$Chat, tLRPC$User) {
            public final /* synthetic */ TLRPC$Chat f$1;
            public final /* synthetic */ TLRPC$User f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$deleteUserChannelHistory$95$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$deleteUserChannelHistory$95 */
    public /* synthetic */ void lambda$deleteUserChannelHistory$95$MessagesController(TLRPC$Chat tLRPC$Chat, TLRPC$User tLRPC$User, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedHistory tLRPC$TL_messages_affectedHistory = (TLRPC$TL_messages_affectedHistory) tLObject;
            int i = tLRPC$TL_messages_affectedHistory.offset;
            if (i > 0) {
                deleteUserChannelHistory(tLRPC$Chat, tLRPC$User, i);
            }
            processNewChannelDifferenceParams(tLRPC$TL_messages_affectedHistory.pts, tLRPC$TL_messages_affectedHistory.pts_count, tLRPC$Chat.id);
        }
    }

    public ArrayList<TLRPC$Dialog> getAllDialogs() {
        return this.allDialogs;
    }

    public boolean isDialogsEndReached(int i) {
        return this.dialogsEndReached.get(i);
    }

    public boolean isLoadingDialogs(int i) {
        return this.loadingDialogs.get(i);
    }

    public boolean isServerDialogsEndReached(int i) {
        return this.serverDialogsEndReached.get(i);
    }

    public boolean hasHiddenArchive() {
        return SharedConfig.archiveHidden && this.dialogs_dict.get(DialogObject.makeFolderDialogId(1)) != null;
    }

    public ArrayList<TLRPC$Dialog> getDialogs(int i) {
        ArrayList<TLRPC$Dialog> arrayList = this.dialogsByFolder.get(i);
        return arrayList == null ? new ArrayList<>() : arrayList;
    }

    public int getTotalDialogsCount() {
        ArrayList arrayList = this.dialogsByFolder.get(0);
        if (arrayList != null) {
            return 0 + arrayList.size();
        }
        return 0;
    }

    public void putAllNeededDraftDialogs() {
        LongSparseArray<SparseArray<TLRPC$DraftMessage>> drafts = getMediaDataController().getDrafts();
        int size = drafts.size();
        for (int i = 0; i < size; i++) {
            TLRPC$DraftMessage tLRPC$DraftMessage = (TLRPC$DraftMessage) drafts.valueAt(i).get(0);
            if (tLRPC$DraftMessage != null) {
                putDraftDialogIfNeed(drafts.keyAt(i), tLRPC$DraftMessage);
            }
        }
    }

    public void putDraftDialogIfNeed(long j, TLRPC$DraftMessage tLRPC$DraftMessage) {
        if (this.dialogs_dict.indexOfKey(j) < 0) {
            MediaDataController mediaDataController = getMediaDataController();
            int size = this.allDialogs.size();
            int i = 0;
            if (size > 0) {
                TLRPC$Dialog tLRPC$Dialog = this.allDialogs.get(size - 1);
                if (((long) tLRPC$DraftMessage.date) < DialogObject.getLastMessageOrDraftDate(tLRPC$Dialog, mediaDataController.getDraft(tLRPC$Dialog.id, 0))) {
                    return;
                }
            }
            TLRPC$TL_dialog tLRPC$TL_dialog = new TLRPC$TL_dialog();
            tLRPC$TL_dialog.id = j;
            tLRPC$TL_dialog.draft = tLRPC$DraftMessage;
            tLRPC$TL_dialog.folder_id = mediaDataController.getDraftFolderId(j);
            if (j < 0 && ChatObject.isChannel(getChat(Integer.valueOf((int) (-j))))) {
                i = 1;
            }
            tLRPC$TL_dialog.flags = i;
            this.dialogs_dict.put(j, tLRPC$TL_dialog);
            this.allDialogs.add(tLRPC$TL_dialog);
            sortDialogs((SparseArray<TLRPC$Chat>) null);
        }
    }

    public void removeDraftDialogIfNeed(long j) {
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
        if (tLRPC$Dialog != null && tLRPC$Dialog.top_message == 0) {
            this.dialogs_dict.remove(tLRPC$Dialog.id);
            this.allDialogs.remove(tLRPC$Dialog);
        }
    }

    private void removeDialog(TLRPC$Dialog tLRPC$Dialog) {
        if (tLRPC$Dialog != null) {
            long j = tLRPC$Dialog.id;
            if (this.dialogsServerOnly.remove(tLRPC$Dialog) && DialogObject.isChannel(tLRPC$Dialog)) {
                Utilities.stageQueue.postRunnable(new Runnable(j) {
                    public final /* synthetic */ long f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run() {
                        MessagesController.this.lambda$removeDialog$96$MessagesController(this.f$1);
                    }
                });
            }
            this.allDialogs.remove(tLRPC$Dialog);
            this.dialogsCanAddUsers.remove(tLRPC$Dialog);
            this.dialogsChannelsOnly.remove(tLRPC$Dialog);
            this.dialogsGroupsOnly.remove(tLRPC$Dialog);
            this.dialogsUsersOnly.remove(tLRPC$Dialog);
            this.dialogsForBlock.remove(tLRPC$Dialog);
            this.dialogsForward.remove(tLRPC$Dialog);
            int i = 0;
            while (true) {
                DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                if (i >= dialogFilterArr.length) {
                    break;
                }
                if (dialogFilterArr[i] != null) {
                    dialogFilterArr[i].dialogs.remove(tLRPC$Dialog);
                }
                i++;
            }
            this.dialogs_dict.remove(j);
            ArrayList arrayList = this.dialogsByFolder.get(tLRPC$Dialog.folder_id);
            if (arrayList != null) {
                arrayList.remove(tLRPC$Dialog);
            }
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$removeDialog$96 */
    public /* synthetic */ void lambda$removeDialog$96$MessagesController(long j) {
        int i = -((int) j);
        this.channelsPts.delete(i);
        this.shortPollChannels.delete(i);
        this.needShortPollChannels.delete(i);
        this.shortPollOnlines.delete(i);
        this.needShortPollOnlines.delete(i);
    }

    public void hidePromoDialog() {
        if (this.promoDialog != null) {
            TLRPC$TL_help_hidePromoData tLRPC$TL_help_hidePromoData = new TLRPC$TL_help_hidePromoData();
            tLRPC$TL_help_hidePromoData.peer = getInputPeer((int) this.promoDialog.id);
            getConnectionsManager().sendRequest(tLRPC$TL_help_hidePromoData, $$Lambda$MessagesController$70_XqE3NeDmzVo64lGxq7x3PoZw.INSTANCE);
            Utilities.stageQueue.postRunnable(new Runnable() {
                public final void run() {
                    MessagesController.this.lambda$hidePromoDialog$98$MessagesController();
                }
            });
            removePromoDialog();
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$hidePromoDialog$98 */
    public /* synthetic */ void lambda$hidePromoDialog$98$MessagesController() {
        this.promoDialogId = 0;
        this.proxyDialogAddress = null;
        this.nextPromoInfoCheckTime = getConnectionsManager().getCurrentTime() + 3600;
        getGlobalMainSettings().edit().putLong("proxy_dialog", this.promoDialogId).remove("proxyDialogAddress").putInt("nextPromoInfoCheckTime", this.nextPromoInfoCheckTime).commit();
    }

    public void deleteDialog(long j, int i) {
        deleteDialog(j, i, false);
    }

    public void deleteDialog(long j, int i, boolean z) {
        deleteDialog(j, 1, i, 0, z, (TLRPC$InputPeer) null, 0);
    }

    public void setDialogsInTransaction(boolean z) {
        this.dialogsInTransaction = z;
        if (!z) {
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
        }
    }

    /* access modifiers changed from: protected */
    /* JADX WARNING: Removed duplicated region for block: B:136:0x0304  */
    /* JADX WARNING: Removed duplicated region for block: B:144:0x033b  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void deleteDialog(long r28, int r30, int r31, int r32, boolean r33, org.telegram.tgnet.TLRPC$InputPeer r34, long r35) {
        /*
            r27 = this;
            r11 = r27
            r12 = r28
            r0 = r30
            r7 = r31
            r9 = r33
            r1 = 2
            if (r7 != r1) goto L_0x0015
            org.telegram.messenger.MessagesStorage r0 = r27.getMessagesStorage()
            r0.deleteDialog(r12, r7)
            return
        L_0x0015:
            r2 = 1
            if (r0 != r2) goto L_0x0034
            if (r32 != 0) goto L_0x0034
            org.telegram.messenger.MessagesStorage r0 = r27.getMessagesStorage()
            org.telegram.messenger.-$$Lambda$MessagesController$O_hu0itS7T7WFzQQuWbIwjRabTk r10 = new org.telegram.messenger.-$$Lambda$MessagesController$O_hu0itS7T7WFzQQuWbIwjRabTk
            r1 = r10
            r2 = r27
            r3 = r28
            r5 = r31
            r6 = r33
            r7 = r34
            r8 = r35
            r1.<init>(r3, r5, r6, r7, r8)
            r0.getDialogMaxMessageId(r12, r10)
            return
        L_0x0034:
            r3 = 3
            if (r7 == 0) goto L_0x0039
            if (r7 != r3) goto L_0x0040
        L_0x0039:
            org.telegram.messenger.MediaDataController r4 = r27.getMediaDataController()
            r4.uninstallShortcut(r12)
        L_0x0040:
            int r4 = (int) r12
            r5 = 32
            long r5 = r12 >> r5
            int r6 = (int) r5
            r14 = 0
            r8 = 0
            if (r0 == 0) goto L_0x026c
            org.telegram.messenger.MessagesStorage r10 = r27.getMessagesStorage()
            r10.deleteDialog(r12, r7)
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r10 = r11.dialogs_dict
            java.lang.Object r10 = r10.get(r12)
            org.telegram.tgnet.TLRPC$Dialog r10 = (org.telegram.tgnet.TLRPC$Dialog) r10
            if (r7 == 0) goto L_0x005e
            if (r7 != r3) goto L_0x0065
        L_0x005e:
            org.telegram.messenger.NotificationsController r5 = r27.getNotificationsController()
            r5.deleteNotificationChannel(r12)
        L_0x0065:
            if (r7 != 0) goto L_0x006e
            org.telegram.messenger.MediaDataController r5 = r27.getMediaDataController()
            r5.cleanDraft(r12, r8, r8)
        L_0x006e:
            if (r10 == 0) goto L_0x01eb
            if (r0 != r1) goto L_0x0085
            int r5 = r10.top_message
            int r5 = java.lang.Math.max(r8, r5)
            int r1 = r10.read_inbox_max_id
            int r1 = java.lang.Math.max(r5, r1)
            int r5 = r10.read_outbox_max_id
            int r1 = java.lang.Math.max(r1, r5)
            goto L_0x0087
        L_0x0085:
            r1 = r32
        L_0x0087:
            if (r7 == 0) goto L_0x0092
            if (r7 != r3) goto L_0x008c
            goto L_0x0092
        L_0x008c:
            r10.unread_count = r8
            r18 = r4
            r3 = 0
            goto L_0x00d3
        L_0x0092:
            org.telegram.tgnet.TLRPC$Dialog r5 = r11.promoDialog
            r18 = r4
            if (r5 == 0) goto L_0x00a0
            long r3 = r5.id
            int r19 = (r3 > r12 ? 1 : (r3 == r12 ? 0 : -1))
            if (r19 != 0) goto L_0x00a0
            r3 = 1
            goto L_0x00a1
        L_0x00a0:
            r3 = 0
        L_0x00a1:
            if (r3 == 0) goto L_0x00be
            r11.isLeftPromoChannel = r2
            long r4 = r5.id
            int r19 = (r4 > r14 ? 1 : (r4 == r14 ? 0 : -1))
            if (r19 >= 0) goto L_0x00b9
            int r5 = (int) r4
            int r4 = -r5
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)
            org.telegram.tgnet.TLRPC$Chat r4 = r11.getChat(r4)
            if (r4 == 0) goto L_0x00b9
            r4.left = r2
        L_0x00b9:
            r4 = 0
            r11.sortDialogs(r4)
            goto L_0x00d3
        L_0x00be:
            r11.removeDialog(r10)
            android.util.SparseIntArray r4 = r11.nextDialogsCacheOffset
            int r5 = r10.folder_id
            int r4 = r4.get(r5, r8)
            if (r4 <= 0) goto L_0x00d3
            android.util.SparseIntArray r5 = r11.nextDialogsCacheOffset
            int r8 = r10.folder_id
            int r4 = r4 - r2
            r5.put(r8, r4)
        L_0x00d3:
            if (r3 != 0) goto L_0x01e3
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r4 = r11.dialogMessage
            r32 = r3
            long r2 = r10.id
            java.lang.Object r2 = r4.get(r2)
            org.telegram.messenger.MessageObject r2 = (org.telegram.messenger.MessageObject) r2
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r3 = r11.dialogMessage
            r4 = r6
            long r5 = r10.id
            r3.remove(r5)
            if (r2 == 0) goto L_0x0101
            int r3 = r2.getId()
            org.telegram.tgnet.TLRPC$Message r5 = r2.messageOwner
            org.telegram.tgnet.TLRPC$Peer r5 = r5.peer_id
            int r5 = r5.channel_id
            if (r5 != 0) goto L_0x011c
            android.util.SparseArray<org.telegram.messenger.MessageObject> r5 = r11.dialogMessagesByIds
            int r6 = r2.getId()
            r5.remove(r6)
            goto L_0x011c
        L_0x0101:
            int r3 = r10.top_message
            android.util.SparseArray<org.telegram.messenger.MessageObject> r2 = r11.dialogMessagesByIds
            java.lang.Object r2 = r2.get(r3)
            org.telegram.messenger.MessageObject r2 = (org.telegram.messenger.MessageObject) r2
            if (r2 == 0) goto L_0x011c
            org.telegram.tgnet.TLRPC$Message r5 = r2.messageOwner
            org.telegram.tgnet.TLRPC$Peer r5 = r5.peer_id
            int r5 = r5.channel_id
            if (r5 != 0) goto L_0x011c
            android.util.SparseArray<org.telegram.messenger.MessageObject> r5 = r11.dialogMessagesByIds
            int r6 = r10.top_message
            r5.remove(r6)
        L_0x011c:
            if (r2 == 0) goto L_0x012b
            org.telegram.tgnet.TLRPC$Message r2 = r2.messageOwner
            long r5 = r2.random_id
            int r2 = (r5 > r14 ? 1 : (r5 == r14 ? 0 : -1))
            if (r2 == 0) goto L_0x012b
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r2 = r11.dialogMessagesByRandomIds
            r2.remove(r5)
        L_0x012b:
            r2 = 1
            if (r7 != r2) goto L_0x01dd
            if (r18 == 0) goto L_0x01dd
            if (r3 <= 0) goto L_0x01dd
            org.telegram.tgnet.TLRPC$TL_messageService r2 = new org.telegram.tgnet.TLRPC$TL_messageService
            r2.<init>()
            int r3 = r10.top_message
            r2.id = r3
            org.telegram.messenger.UserConfig r3 = r27.getUserConfig()
            int r3 = r3.getClientUserId()
            long r5 = (long) r3
            int r3 = (r5 > r12 ? 1 : (r5 == r12 ? 0 : -1))
            if (r3 != 0) goto L_0x014a
            r3 = 1
            goto L_0x014b
        L_0x014a:
            r3 = 0
        L_0x014b:
            r2.out = r3
            org.telegram.tgnet.TLRPC$TL_peerUser r3 = new org.telegram.tgnet.TLRPC$TL_peerUser
            r3.<init>()
            r2.from_id = r3
            org.telegram.messenger.UserConfig r5 = r27.getUserConfig()
            int r5 = r5.getClientUserId()
            r3.user_id = r5
            int r3 = r2.flags
            r3 = r3 | 256(0x100, float:3.59E-43)
            r2.flags = r3
            org.telegram.tgnet.TLRPC$TL_messageActionHistoryClear r3 = new org.telegram.tgnet.TLRPC$TL_messageActionHistoryClear
            r3.<init>()
            r2.action = r3
            int r3 = r10.last_message_date
            r2.date = r3
            r3 = r18
            long r5 = (long) r3
            r2.dialog_id = r5
            if (r3 <= 0) goto L_0x0180
            org.telegram.tgnet.TLRPC$TL_peerUser r5 = new org.telegram.tgnet.TLRPC$TL_peerUser
            r5.<init>()
            r2.peer_id = r5
            r5.user_id = r3
            goto L_0x01a2
        L_0x0180:
            int r5 = -r3
            java.lang.Integer r6 = java.lang.Integer.valueOf(r5)
            org.telegram.tgnet.TLRPC$Chat r6 = r11.getChat(r6)
            boolean r6 = org.telegram.messenger.ChatObject.isChannel(r6)
            if (r6 == 0) goto L_0x0199
            org.telegram.tgnet.TLRPC$TL_peerChannel r6 = new org.telegram.tgnet.TLRPC$TL_peerChannel
            r6.<init>()
            r2.peer_id = r6
            r6.channel_id = r5
            goto L_0x01a2
        L_0x0199:
            org.telegram.tgnet.TLRPC$TL_peerChat r6 = new org.telegram.tgnet.TLRPC$TL_peerChat
            r6.<init>()
            r2.peer_id = r6
            r6.chat_id = r5
        L_0x01a2:
            java.util.ArrayList<java.lang.Long> r5 = r11.createdDialogIds
            long r8 = r2.dialog_id
            java.lang.Long r8 = java.lang.Long.valueOf(r8)
            boolean r5 = r5.contains(r8)
            org.telegram.messenger.MessageObject r8 = new org.telegram.messenger.MessageObject
            int r9 = r11.currentAccount
            r8.<init>(r9, r2, r5, r5)
            java.util.ArrayList r5 = new java.util.ArrayList
            r5.<init>()
            r5.add(r8)
            java.util.ArrayList r8 = new java.util.ArrayList
            r8.<init>()
            r8.add(r2)
            r2 = 0
            r11.updateInterfaceWithMessages(r12, r5, r2)
            org.telegram.messenger.MessagesStorage r20 = r27.getMessagesStorage()
            r22 = 0
            r23 = 1
            r24 = 0
            r25 = 0
            r26 = 0
            r21 = r8
            r20.putMessages((java.util.ArrayList<org.telegram.tgnet.TLRPC$Message>) r21, (boolean) r22, (boolean) r23, (boolean) r24, (int) r25, (boolean) r26)
            goto L_0x01e8
        L_0x01dd:
            r3 = r18
            r2 = 0
            r10.top_message = r2
            goto L_0x01e8
        L_0x01e3:
            r32 = r3
            r4 = r6
            r3 = r18
        L_0x01e8:
            r2 = r32
            goto L_0x01f0
        L_0x01eb:
            r3 = r4
            r4 = r6
            r1 = r32
            r2 = 0
        L_0x01f0:
            r5 = 2
            if (r0 != r5) goto L_0x021f
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r5 = r11.dialogs_read_inbox_max
            java.lang.Long r8 = java.lang.Long.valueOf(r28)
            java.lang.Object r5 = r5.get(r8)
            java.lang.Integer r5 = (java.lang.Integer) r5
            if (r5 == 0) goto L_0x0209
            int r5 = r5.intValue()
            int r1 = java.lang.Math.max(r5, r1)
        L_0x0209:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r5 = r11.dialogs_read_outbox_max
            java.lang.Long r8 = java.lang.Long.valueOf(r28)
            java.lang.Object r5 = r5.get(r8)
            java.lang.Integer r5 = (java.lang.Integer) r5
            if (r5 == 0) goto L_0x021f
            int r5 = r5.intValue()
            int r1 = java.lang.Math.max(r5, r1)
        L_0x021f:
            boolean r5 = r11.dialogsInTransaction
            if (r5 != 0) goto L_0x025a
            if (r2 == 0) goto L_0x0237
            org.telegram.messenger.NotificationCenter r2 = r27.getNotificationCenter()
            int r8 = org.telegram.messenger.NotificationCenter.dialogsNeedReload
            r5 = 1
            java.lang.Object[] r6 = new java.lang.Object[r5]
            java.lang.Boolean r9 = java.lang.Boolean.TRUE
            r10 = 0
            r6[r10] = r9
            r2.postNotificationName(r8, r6)
            goto L_0x025a
        L_0x0237:
            r10 = 0
            org.telegram.messenger.NotificationCenter r2 = r27.getNotificationCenter()
            int r6 = org.telegram.messenger.NotificationCenter.dialogsNeedReload
            java.lang.Object[] r8 = new java.lang.Object[r10]
            r2.postNotificationName(r6, r8)
            org.telegram.messenger.NotificationCenter r2 = r27.getNotificationCenter()
            int r6 = org.telegram.messenger.NotificationCenter.removeAllMessagesFromDialog
            r8 = 2
            java.lang.Object[] r8 = new java.lang.Object[r8]
            java.lang.Long r9 = java.lang.Long.valueOf(r28)
            r8[r10] = r9
            java.lang.Boolean r9 = java.lang.Boolean.FALSE
            r5 = 1
            r8[r5] = r9
            r2.postNotificationName(r6, r8)
        L_0x025a:
            org.telegram.messenger.MessagesStorage r2 = r27.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r2 = r2.getStorageQueue()
            org.telegram.messenger.-$$Lambda$MessagesController$wiX5yaiN9-y7UPimIAjn0Y6O2BY r6 = new org.telegram.messenger.-$$Lambda$MessagesController$wiX5yaiN9-y7UPimIAjn0Y6O2BY
            r6.<init>(r12)
            r2.postRunnable(r6)
            r8 = r1
            goto L_0x0270
        L_0x026c:
            r3 = r4
            r4 = r6
            r8 = r32
        L_0x0270:
            r1 = 3
            if (r7 != r1) goto L_0x0274
            return
        L_0x0274:
            if (r3 == 0) goto L_0x036a
            if (r34 != 0) goto L_0x027e
            org.telegram.tgnet.TLRPC$InputPeer r1 = r11.getInputPeer((int) r3)
            r10 = r1
            goto L_0x0280
        L_0x027e:
            r10 = r34
        L_0x0280:
            if (r10 != 0) goto L_0x0283
            return
        L_0x0283:
            boolean r1 = r10 instanceof org.telegram.tgnet.TLRPC$TL_inputPeerChannel
            r2 = 2147483647(0x7fffffff, float:NaN)
            if (r1 == 0) goto L_0x0292
            if (r7 == 0) goto L_0x028d
            goto L_0x0292
        L_0x028d:
            r9 = r33
            r4 = 0
            goto L_0x02fe
        L_0x0292:
            if (r8 <= 0) goto L_0x02b5
            if (r8 == r2) goto L_0x02b5
            android.util.LongSparseArray<java.lang.Integer> r3 = r11.deletedHistory
            r4 = 0
            java.lang.Integer r6 = java.lang.Integer.valueOf(r4)
            java.lang.Object r3 = r3.get(r12, r6)
            java.lang.Integer r3 = (java.lang.Integer) r3
            int r3 = r3.intValue()
            android.util.LongSparseArray<java.lang.Integer> r6 = r11.deletedHistory
            int r3 = java.lang.Math.max(r3, r8)
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)
            r6.put(r12, r3)
            goto L_0x02b6
        L_0x02b5:
            r4 = 0
        L_0x02b6:
            int r3 = (r35 > r14 ? 1 : (r35 == r14 ? 0 : -1))
            if (r3 != 0) goto L_0x02fc
            org.telegram.tgnet.NativeByteBuffer r3 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x02ea }
            int r6 = r10.getObjectSize()     // Catch:{ Exception -> 0x02ea }
            int r6 = r6 + 28
            r3.<init>((int) r6)     // Catch:{ Exception -> 0x02ea }
            r6 = 13
            r3.writeInt32(r6)     // Catch:{ Exception -> 0x02e6 }
            r3.writeInt64(r12)     // Catch:{ Exception -> 0x02e6 }
            if (r0 == 0) goto L_0x02d1
            r0 = 1
            goto L_0x02d2
        L_0x02d1:
            r0 = 0
        L_0x02d2:
            r3.writeBool(r0)     // Catch:{ Exception -> 0x02e6 }
            r3.writeInt32(r7)     // Catch:{ Exception -> 0x02e6 }
            r3.writeInt32(r8)     // Catch:{ Exception -> 0x02e6 }
            r9 = r33
            r3.writeBool(r9)     // Catch:{ Exception -> 0x02e4 }
            r10.serializeToStream(r3)     // Catch:{ Exception -> 0x02e4 }
            goto L_0x02f1
        L_0x02e4:
            r0 = move-exception
            goto L_0x02ee
        L_0x02e6:
            r0 = move-exception
            r9 = r33
            goto L_0x02ee
        L_0x02ea:
            r0 = move-exception
            r9 = r33
            r3 = 0
        L_0x02ee:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
        L_0x02f1:
            org.telegram.messenger.MessagesStorage r0 = r27.getMessagesStorage()
            long r16 = r0.createPendingTask(r3)
            r4 = r16
            goto L_0x0300
        L_0x02fc:
            r9 = r33
        L_0x02fe:
            r4 = r35
        L_0x0300:
            r0 = 64
            if (r1 == 0) goto L_0x033b
            if (r7 != 0) goto L_0x0312
            int r0 = (r4 > r14 ? 1 : (r4 == r14 ? 0 : -1))
            if (r0 == 0) goto L_0x0311
            org.telegram.messenger.MessagesStorage r0 = r27.getMessagesStorage()
            r0.removePendingTask(r4)
        L_0x0311:
            return
        L_0x0312:
            org.telegram.tgnet.TLRPC$TL_channels_deleteHistory r1 = new org.telegram.tgnet.TLRPC$TL_channels_deleteHistory
            r1.<init>()
            org.telegram.tgnet.TLRPC$TL_inputChannel r3 = new org.telegram.tgnet.TLRPC$TL_inputChannel
            r3.<init>()
            r1.channel = r3
            int r6 = r10.channel_id
            r3.channel_id = r6
            long r6 = r10.access_hash
            r3.access_hash = r6
            if (r8 <= 0) goto L_0x0329
            goto L_0x032c
        L_0x0329:
            r8 = 2147483647(0x7fffffff, float:NaN)
        L_0x032c:
            r1.max_id = r8
            org.telegram.tgnet.ConnectionsManager r2 = r27.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$tyudRUVciEe365m4XkEdkxxvlTE r3 = new org.telegram.messenger.-$$Lambda$MessagesController$tyudRUVciEe365m4XkEdkxxvlTE
            r3.<init>(r4)
            r2.sendRequest(r1, r3, r0)
            goto L_0x0385
        L_0x033b:
            org.telegram.tgnet.TLRPC$TL_messages_deleteHistory r14 = new org.telegram.tgnet.TLRPC$TL_messages_deleteHistory
            r14.<init>()
            r14.peer = r10
            if (r8 <= 0) goto L_0x0345
            r2 = r8
        L_0x0345:
            r14.max_id = r2
            if (r7 == 0) goto L_0x034b
            r2 = 1
            goto L_0x034c
        L_0x034b:
            r2 = 0
        L_0x034c:
            r14.just_clear = r2
            r14.revoke = r9
            org.telegram.tgnet.ConnectionsManager r15 = r27.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$LcvN0WkE2rckLutryf0-3LdIwTg r6 = new org.telegram.messenger.-$$Lambda$MessagesController$LcvN0WkE2rckLutryf0-3LdIwTg
            r1 = r6
            r2 = r27
            r3 = r4
            r0 = r6
            r5 = r28
            r7 = r31
            r9 = r33
            r1.<init>(r3, r5, r7, r8, r9, r10)
            r1 = 64
            r15.sendRequest(r14, r0, r1)
            goto L_0x0385
        L_0x036a:
            r1 = 1
            if (r7 != r1) goto L_0x037e
            org.telegram.messenger.SecretChatHelper r0 = r27.getSecretChatHelper()
            java.lang.Integer r1 = java.lang.Integer.valueOf(r4)
            org.telegram.tgnet.TLRPC$EncryptedChat r1 = r11.getEncryptedChat(r1)
            r2 = 0
            r0.sendClearHistoryMessage(r1, r2)
            goto L_0x0385
        L_0x037e:
            org.telegram.messenger.SecretChatHelper r0 = r27.getSecretChatHelper()
            r0.declineSecretChat(r4)
        L_0x0385:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.deleteDialog(long, int, int, int, boolean, org.telegram.tgnet.TLRPC$InputPeer, long):void");
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$deleteDialog$99 */
    public /* synthetic */ void lambda$deleteDialog$99$MessagesController(long j, int i, boolean z, TLRPC$InputPeer tLRPC$InputPeer, long j2, int i2) {
        deleteDialog(j, 2, i, Math.max(0, i2), z, tLRPC$InputPeer, j2);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$deleteDialog$101 */
    public /* synthetic */ void lambda$deleteDialog$101$MessagesController(long j) {
        AndroidUtilities.runOnUIThread(new Runnable(j) {
            public final /* synthetic */ long f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$100$MessagesController(this.f$1);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$100 */
    public /* synthetic */ void lambda$null$100$MessagesController(long j) {
        getNotificationsController().removeNotificationsForDialog(j);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$deleteDialog$102 */
    public /* synthetic */ void lambda$deleteDialog$102$MessagesController(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$deleteDialog$103 */
    public /* synthetic */ void lambda$deleteDialog$103$MessagesController(long j, long j2, int i, int i2, boolean z, TLRPC$InputPeer tLRPC$InputPeer, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedHistory tLRPC$TL_messages_affectedHistory = (TLRPC$TL_messages_affectedHistory) tLObject;
            if (tLRPC$TL_messages_affectedHistory.offset > 0) {
                deleteDialog(j2, 0, i, i2, z, tLRPC$InputPeer, 0);
            }
            processNewDifferenceParams(-1, tLRPC$TL_messages_affectedHistory.pts, -1, tLRPC$TL_messages_affectedHistory.pts_count);
            getMessagesStorage().onDeleteQueryComplete(j2);
            return;
        }
    }

    public void saveGif(Object obj, TLRPC$Document tLRPC$Document) {
        if (obj != null && MessageObject.isGifDocument(tLRPC$Document)) {
            TLRPC$TL_messages_saveGif tLRPC$TL_messages_saveGif = new TLRPC$TL_messages_saveGif();
            TLRPC$TL_inputDocument tLRPC$TL_inputDocument = new TLRPC$TL_inputDocument();
            tLRPC$TL_messages_saveGif.id = tLRPC$TL_inputDocument;
            tLRPC$TL_inputDocument.id = tLRPC$Document.id;
            tLRPC$TL_inputDocument.access_hash = tLRPC$Document.access_hash;
            byte[] bArr = tLRPC$Document.file_reference;
            tLRPC$TL_inputDocument.file_reference = bArr;
            if (bArr == null) {
                tLRPC$TL_inputDocument.file_reference = new byte[0];
            }
            tLRPC$TL_messages_saveGif.unsave = false;
            getConnectionsManager().sendRequest(tLRPC$TL_messages_saveGif, new RequestDelegate(obj, tLRPC$TL_messages_saveGif) {
                public final /* synthetic */ Object f$1;
                public final /* synthetic */ TLRPC$TL_messages_saveGif f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$saveGif$104$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$saveGif$104 */
    public /* synthetic */ void lambda$saveGif$104$MessagesController(Object obj, TLRPC$TL_messages_saveGif tLRPC$TL_messages_saveGif, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null && FileRefController.isFileRefError(tLRPC$TL_error.text)) {
            getFileRefController().requestReference(obj, tLRPC$TL_messages_saveGif);
        }
    }

    public void saveRecentSticker(Object obj, TLRPC$Document tLRPC$Document, boolean z) {
        if (obj != null && tLRPC$Document != null) {
            TLRPC$TL_messages_saveRecentSticker tLRPC$TL_messages_saveRecentSticker = new TLRPC$TL_messages_saveRecentSticker();
            TLRPC$TL_inputDocument tLRPC$TL_inputDocument = new TLRPC$TL_inputDocument();
            tLRPC$TL_messages_saveRecentSticker.id = tLRPC$TL_inputDocument;
            tLRPC$TL_inputDocument.id = tLRPC$Document.id;
            tLRPC$TL_inputDocument.access_hash = tLRPC$Document.access_hash;
            byte[] bArr = tLRPC$Document.file_reference;
            tLRPC$TL_inputDocument.file_reference = bArr;
            if (bArr == null) {
                tLRPC$TL_inputDocument.file_reference = new byte[0];
            }
            tLRPC$TL_messages_saveRecentSticker.unsave = false;
            tLRPC$TL_messages_saveRecentSticker.attached = z;
            getConnectionsManager().sendRequest(tLRPC$TL_messages_saveRecentSticker, new RequestDelegate(obj, tLRPC$TL_messages_saveRecentSticker) {
                public final /* synthetic */ Object f$1;
                public final /* synthetic */ TLRPC$TL_messages_saveRecentSticker f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$saveRecentSticker$105$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$saveRecentSticker$105 */
    public /* synthetic */ void lambda$saveRecentSticker$105$MessagesController(Object obj, TLRPC$TL_messages_saveRecentSticker tLRPC$TL_messages_saveRecentSticker, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null && FileRefController.isFileRefError(tLRPC$TL_error.text)) {
            getFileRefController().requestReference(obj, tLRPC$TL_messages_saveRecentSticker);
        }
    }

    public void loadChannelParticipants(Integer num) {
        if (!this.loadingFullParticipants.contains(num) && !this.loadedFullParticipants.contains(num)) {
            this.loadingFullParticipants.add(num);
            TLRPC$TL_channels_getParticipants tLRPC$TL_channels_getParticipants = new TLRPC$TL_channels_getParticipants();
            tLRPC$TL_channels_getParticipants.channel = getInputChannel(num.intValue());
            tLRPC$TL_channels_getParticipants.filter = new TLRPC$TL_channelParticipantsRecent();
            tLRPC$TL_channels_getParticipants.offset = 0;
            tLRPC$TL_channels_getParticipants.limit = 32;
            getConnectionsManager().sendRequest(tLRPC$TL_channels_getParticipants, new RequestDelegate(num) {
                public final /* synthetic */ Integer f$1;

                {
                    this.f$1 = r2;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$loadChannelParticipants$107$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$loadChannelParticipants$107 */
    public /* synthetic */ void lambda$loadChannelParticipants$107$MessagesController(Integer num, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_error, tLObject, num) {
            public final /* synthetic */ TLRPC$TL_error f$1;
            public final /* synthetic */ TLObject f$2;
            public final /* synthetic */ Integer f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesController.this.lambda$null$106$MessagesController(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$106 */
    public /* synthetic */ void lambda$null$106$MessagesController(TLRPC$TL_error tLRPC$TL_error, TLObject tLObject, Integer num) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_channels_channelParticipants tLRPC$TL_channels_channelParticipants = (TLRPC$TL_channels_channelParticipants) tLObject;
            putUsers(tLRPC$TL_channels_channelParticipants.users, false);
            getMessagesStorage().putUsersAndChats(tLRPC$TL_channels_channelParticipants.users, (ArrayList<TLRPC$Chat>) null, true, true);
            getMessagesStorage().updateChannelUsers(num.intValue(), tLRPC$TL_channels_channelParticipants.participants);
            this.loadedFullParticipants.add(num);
        }
        this.loadingFullParticipants.remove(num);
    }

    public void processChatInfo(int i, TLRPC$ChatFull tLRPC$ChatFull, ArrayList<TLRPC$User> arrayList, boolean z, boolean z2, boolean z3, ArrayList<Integer> arrayList2, HashMap<Integer, MessageObject> hashMap, int i2, boolean z4) {
        AndroidUtilities.runOnUIThread(new Runnable(z, i, z3, z2, tLRPC$ChatFull, arrayList, arrayList2, hashMap, i2, z4) {
            public final /* synthetic */ boolean f$1;
            public final /* synthetic */ boolean f$10;
            public final /* synthetic */ int f$2;
            public final /* synthetic */ boolean f$3;
            public final /* synthetic */ boolean f$4;
            public final /* synthetic */ TLRPC$ChatFull f$5;
            public final /* synthetic */ ArrayList f$6;
            public final /* synthetic */ ArrayList f$7;
            public final /* synthetic */ HashMap f$8;
            public final /* synthetic */ int f$9;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
                this.f$7 = r8;
                this.f$8 = r9;
                this.f$9 = r10;
                this.f$10 = r11;
            }

            public final void run() {
                MessagesController.this.lambda$processChatInfo$108$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7, this.f$8, this.f$9, this.f$10);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$processChatInfo$108 */
    public /* synthetic */ void lambda$processChatInfo$108$MessagesController(boolean z, int i, boolean z2, boolean z3, TLRPC$ChatFull tLRPC$ChatFull, ArrayList arrayList, ArrayList arrayList2, HashMap hashMap, int i2, boolean z4) {
        if (z && i > 0 && !z2) {
            loadFullChat(i, 0, z3);
        }
        if (tLRPC$ChatFull != null) {
            if (this.fullChats.get(i) == null) {
                this.fullChats.put(i, tLRPC$ChatFull);
            }
            putUsers(arrayList, z);
            if (tLRPC$ChatFull.stickerset != null) {
                getMediaDataController().getGroupStickerSetById(tLRPC$ChatFull.stickerset);
            }
            getNotificationCenter().postNotificationName(NotificationCenter.chatInfoDidLoad, tLRPC$ChatFull, 0, Boolean.valueOf(z2));
        }
        if (arrayList2 != null) {
            getNotificationCenter().postNotificationName(NotificationCenter.pinnedInfoDidLoad, Long.valueOf((long) (-i)), arrayList2, hashMap, Integer.valueOf(i2), Boolean.valueOf(z4));
        }
    }

    public void loadUserInfo(TLRPC$User tLRPC$User, boolean z, int i) {
        loadUserInfo(tLRPC$User, z, i, 0);
    }

    public void loadUserInfo(TLRPC$User tLRPC$User, boolean z, int i, int i2) {
        getMessagesStorage().loadUserInfo(tLRPC$User, z, i, i2);
    }

    public void processUserInfo(TLRPC$User tLRPC$User, TLRPC$UserFull tLRPC$UserFull, boolean z, boolean z2, int i, ArrayList<Integer> arrayList, HashMap<Integer, MessageObject> hashMap, int i2, boolean z3) {
        AndroidUtilities.runOnUIThread(new Runnable(z, tLRPC$User, i, z2, tLRPC$UserFull, arrayList, hashMap, i2, z3) {
            public final /* synthetic */ boolean f$1;
            public final /* synthetic */ TLRPC$User f$2;
            public final /* synthetic */ int f$3;
            public final /* synthetic */ boolean f$4;
            public final /* synthetic */ TLRPC$UserFull f$5;
            public final /* synthetic */ ArrayList f$6;
            public final /* synthetic */ HashMap f$7;
            public final /* synthetic */ int f$8;
            public final /* synthetic */ boolean f$9;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
                this.f$7 = r8;
                this.f$8 = r9;
                this.f$9 = r10;
            }

            public final void run() {
                MessagesController.this.lambda$processUserInfo$109$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7, this.f$8, this.f$9);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$processUserInfo$109 */
    public /* synthetic */ void lambda$processUserInfo$109$MessagesController(boolean z, TLRPC$User tLRPC$User, int i, boolean z2, TLRPC$UserFull tLRPC$UserFull, ArrayList arrayList, HashMap hashMap, int i2, boolean z3) {
        if (z) {
            loadFullUser(tLRPC$User, i, z2);
        }
        if (tLRPC$UserFull != null) {
            if (this.fullUsers.get(tLRPC$User.id) == null) {
                this.fullUsers.put(tLRPC$User.id, tLRPC$UserFull);
                if (tLRPC$UserFull.blocked) {
                    this.blockePeers.put(tLRPC$User.id, 1);
                } else {
                    this.blockePeers.delete(tLRPC$User.id);
                }
            }
            getNotificationCenter().postNotificationName(NotificationCenter.userInfoDidLoad, Integer.valueOf(tLRPC$User.id), tLRPC$UserFull);
        }
        if (arrayList != null) {
            getNotificationCenter().postNotificationName(NotificationCenter.pinnedInfoDidLoad, Long.valueOf((long) tLRPC$User.id), arrayList, hashMap, Integer.valueOf(i2), Boolean.valueOf(z3));
        }
    }

    public void updateTimerProc() {
        int i;
        int i2;
        ArrayList arrayList;
        int i3;
        long currentTimeMillis = System.currentTimeMillis();
        int i4 = 0;
        checkDeletingTask(false);
        checkReadTasks();
        if (getUserConfig().isClientActivated()) {
            if (this.ignoreSetOnline || getConnectionsManager().getPauseTime() != 0 || !ApplicationLoader.isScreenOn || ApplicationLoader.mainInterfacePausedStageQueue) {
                if (this.statusSettingState != 2 && !this.offlineSent && Math.abs(System.currentTimeMillis() - getConnectionsManager().getPauseTime()) >= 2000) {
                    this.statusSettingState = 2;
                    if (this.statusRequest != 0) {
                        getConnectionsManager().cancelRequest(this.statusRequest, true);
                    }
                    TLRPC$TL_account_updateStatus tLRPC$TL_account_updateStatus = new TLRPC$TL_account_updateStatus();
                    tLRPC$TL_account_updateStatus.offline = true;
                    this.statusRequest = getConnectionsManager().sendRequest(tLRPC$TL_account_updateStatus, new RequestDelegate() {
                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$updateTimerProc$111$MessagesController(tLObject, tLRPC$TL_error);
                        }
                    });
                }
            } else if (ApplicationLoader.mainInterfacePausedStageQueueTime != 0 && Math.abs(ApplicationLoader.mainInterfacePausedStageQueueTime - System.currentTimeMillis()) > 1000 && this.statusSettingState != 1 && (this.lastStatusUpdateTime == 0 || Math.abs(System.currentTimeMillis() - this.lastStatusUpdateTime) >= 55000 || this.offlineSent)) {
                this.statusSettingState = 1;
                if (this.statusRequest != 0) {
                    getConnectionsManager().cancelRequest(this.statusRequest, true);
                }
                TLRPC$TL_account_updateStatus tLRPC$TL_account_updateStatus2 = new TLRPC$TL_account_updateStatus();
                tLRPC$TL_account_updateStatus2.offline = false;
                this.statusRequest = getConnectionsManager().sendRequest(tLRPC$TL_account_updateStatus2, new RequestDelegate() {
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$updateTimerProc$110$MessagesController(tLObject, tLRPC$TL_error);
                    }
                });
            }
            if (this.updatesQueueChannels.size() != 0) {
                for (int i5 = 0; i5 < this.updatesQueueChannels.size(); i5++) {
                    int keyAt = this.updatesQueueChannels.keyAt(i5);
                    if (Math.abs(currentTimeMillis - this.updatesStartWaitTimeChannels.valueAt(i5)) >= 1500) {
                        if (BuildVars.LOGS_ENABLED) {
                            FileLog.d("QUEUE CHANNEL " + keyAt + " UPDATES WAIT TIMEOUT - CHECK QUEUE");
                        }
                        processChannelsUpdatesQueue(keyAt, 0);
                    }
                }
            }
            for (int i6 = 0; i6 < 3; i6++) {
                if (getUpdatesStartTime(i6) != 0 && Math.abs(currentTimeMillis - getUpdatesStartTime(i6)) >= 1500) {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d(i6 + " QUEUE UPDATES WAIT TIMEOUT - CHECK QUEUE");
                    }
                    processUpdatesQueue(i6, 0);
                }
            }
        }
        int currentTime = getConnectionsManager().getCurrentTime();
        if (Math.abs(System.currentTimeMillis() - this.lastViewsCheckTime) >= 5000) {
            this.lastViewsCheckTime = System.currentTimeMillis();
            if (this.channelViewsToSend.size() != 0) {
                int i7 = 0;
                while (i7 < this.channelViewsToSend.size()) {
                    int keyAt2 = this.channelViewsToSend.keyAt(i7);
                    TLRPC$TL_messages_getMessagesViews tLRPC$TL_messages_getMessagesViews = new TLRPC$TL_messages_getMessagesViews();
                    tLRPC$TL_messages_getMessagesViews.peer = getInputPeer(keyAt2);
                    tLRPC$TL_messages_getMessagesViews.id = this.channelViewsToSend.valueAt(i7);
                    tLRPC$TL_messages_getMessagesViews.increment = i7 == 0;
                    getConnectionsManager().sendRequest(tLRPC$TL_messages_getMessagesViews, new RequestDelegate(keyAt2, tLRPC$TL_messages_getMessagesViews) {
                        public final /* synthetic */ int f$1;
                        public final /* synthetic */ TLRPC$TL_messages_getMessagesViews f$2;

                        {
                            this.f$1 = r2;
                            this.f$2 = r3;
                        }

                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$updateTimerProc$113$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                        }
                    });
                    i7++;
                }
                this.channelViewsToSend.clear();
            }
            if (this.pollsToCheckSize > 0) {
                AndroidUtilities.runOnUIThread(new Runnable(currentTime) {
                    public final /* synthetic */ int f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run() {
                        MessagesController.this.lambda$updateTimerProc$115$MessagesController(this.f$1);
                    }
                });
            }
        }
        if (!this.onlinePrivacy.isEmpty()) {
            ArrayList arrayList2 = null;
            for (Map.Entry entry : this.onlinePrivacy.entrySet()) {
                if (((Integer) entry.getValue()).intValue() < currentTime - 30) {
                    if (arrayList2 == null) {
                        arrayList2 = new ArrayList();
                    }
                    arrayList2.add(entry.getKey());
                }
            }
            if (arrayList2 != null) {
                Iterator it = arrayList2.iterator();
                while (it.hasNext()) {
                    this.onlinePrivacy.remove((Integer) it.next());
                }
                AndroidUtilities.runOnUIThread(new Runnable() {
                    public final void run() {
                        MessagesController.this.lambda$updateTimerProc$116$MessagesController();
                    }
                });
            }
        }
        if (this.shortPollChannels.size() != 0) {
            int i8 = 0;
            while (i8 < this.shortPollChannels.size()) {
                int keyAt3 = this.shortPollChannels.keyAt(i8);
                if (((long) this.shortPollChannels.valueAt(i8)) < System.currentTimeMillis() / 1000) {
                    this.shortPollChannels.delete(keyAt3);
                    i8--;
                    if (this.needShortPollChannels.indexOfKey(keyAt3) >= 0) {
                        getChannelDifference(keyAt3);
                    }
                }
                i8++;
            }
        }
        if (this.shortPollOnlines.size() != 0) {
            long elapsedRealtime = SystemClock.elapsedRealtime() / 1000;
            int i9 = 0;
            while (i9 < this.shortPollOnlines.size()) {
                int keyAt4 = this.shortPollOnlines.keyAt(i9);
                if (((long) this.shortPollOnlines.valueAt(i9)) < elapsedRealtime) {
                    if (this.needShortPollChannels.indexOfKey(keyAt4) >= 0) {
                        this.shortPollOnlines.put(keyAt4, (int) (300 + elapsedRealtime));
                    } else {
                        this.shortPollOnlines.delete(keyAt4);
                        i9--;
                    }
                    TLRPC$TL_messages_getOnlines tLRPC$TL_messages_getOnlines = new TLRPC$TL_messages_getOnlines();
                    tLRPC$TL_messages_getOnlines.peer = getInputPeer(-keyAt4);
                    getConnectionsManager().sendRequest(tLRPC$TL_messages_getOnlines, new RequestDelegate(keyAt4) {
                        public final /* synthetic */ int f$1;

                        {
                            this.f$1 = r2;
                        }

                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$updateTimerProc$118$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                        }
                    });
                }
                i9++;
            }
        }
        if (!this.printingUsers.isEmpty() || this.lastPrintingStringCount != this.printingUsers.size()) {
            ArrayList arrayList3 = new ArrayList(this.printingUsers.keySet());
            int i10 = 0;
            boolean z = false;
            while (i10 < arrayList3.size()) {
                Long l = (Long) arrayList3.get(i10);
                ConcurrentHashMap concurrentHashMap = (ConcurrentHashMap) this.printingUsers.get(l);
                if (concurrentHashMap != null) {
                    ArrayList arrayList4 = new ArrayList(concurrentHashMap.keySet());
                    int i11 = 0;
                    while (i11 < arrayList4.size()) {
                        Integer num = (Integer) arrayList4.get(i11);
                        ArrayList arrayList5 = (ArrayList) concurrentHashMap.get(num);
                        if (arrayList5 != null) {
                            while (i4 < arrayList5.size()) {
                                PrintingUser printingUser = (PrintingUser) arrayList5.get(i4);
                                Long l2 = l;
                                ArrayList arrayList6 = arrayList3;
                                int i12 = i10;
                                if (printingUser.lastTime + ((long) (printingUser.action instanceof TLRPC$TL_sendMessageGamePlayAction ? 30000 : 5900)) < currentTimeMillis) {
                                    arrayList5.remove(printingUser);
                                    i4--;
                                    i3 = 1;
                                    z = true;
                                } else {
                                    i3 = 1;
                                }
                                i4 += i3;
                                l = l2;
                                arrayList3 = arrayList6;
                                i10 = i12;
                            }
                        }
                        ArrayList arrayList7 = arrayList3;
                        int i13 = i10;
                        Long l3 = l;
                        if (arrayList5 == null || arrayList5.isEmpty()) {
                            concurrentHashMap.remove(num);
                            arrayList4.remove(i11);
                            i11--;
                        }
                        i11++;
                        l = l3;
                        arrayList3 = arrayList7;
                        i10 = i13;
                        i4 = 0;
                    }
                }
                ArrayList arrayList8 = arrayList3;
                int i14 = i10;
                Long l4 = l;
                if (concurrentHashMap == null || concurrentHashMap.isEmpty()) {
                    this.printingUsers.remove(l4);
                    arrayList = arrayList8;
                    int i15 = i14;
                    arrayList.remove(i15);
                    i2 = i15 - 1;
                } else {
                    arrayList = arrayList8;
                    i2 = i14;
                }
                i10 = i2 + 1;
                arrayList3 = arrayList;
                i4 = 0;
            }
            i = 1;
            updatePrintingStrings();
            if (z) {
                AndroidUtilities.runOnUIThread(new Runnable() {
                    public final void run() {
                        MessagesController.this.lambda$updateTimerProc$119$MessagesController();
                    }
                });
            }
        } else {
            i = 1;
        }
        if (Theme.selectedAutoNightType == i && Math.abs(currentTimeMillis - lastThemeCheckTime) >= 60) {
            AndroidUtilities.runOnUIThread(this.themeCheckRunnable);
            lastThemeCheckTime = currentTimeMillis;
        }
        if (getUserConfig().savedPasswordHash != null && Math.abs(currentTimeMillis - lastPasswordCheckTime) >= 60) {
            AndroidUtilities.runOnUIThread(this.passwordCheckRunnable);
            lastPasswordCheckTime = currentTimeMillis;
        }
        if (this.lastPushRegisterSendTime != 0 && Math.abs(SystemClock.elapsedRealtime() - this.lastPushRegisterSendTime) >= 10800000) {
            GcmPushListenerService.sendRegistrationToServer(SharedConfig.pushString);
        }
        getLocationController().update();
        lambda$checkPromoInfo$122(false);
        checkTosUpdate();
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$updateTimerProc$110 */
    public /* synthetic */ void lambda$updateTimerProc$110$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            this.lastStatusUpdateTime = System.currentTimeMillis();
            this.offlineSent = false;
            this.statusSettingState = 0;
        } else {
            long j = this.lastStatusUpdateTime;
            if (j != 0) {
                this.lastStatusUpdateTime = j + 5000;
            }
        }
        this.statusRequest = 0;
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$updateTimerProc$111 */
    public /* synthetic */ void lambda$updateTimerProc$111$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            this.offlineSent = true;
        } else {
            long j = this.lastStatusUpdateTime;
            if (j != 0) {
                this.lastStatusUpdateTime = j + 5000;
            }
        }
        this.statusRequest = 0;
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$updateTimerProc$113 */
    public /* synthetic */ void lambda$updateTimerProc$113$MessagesController(int i, TLRPC$TL_messages_getMessagesViews tLRPC$TL_messages_getMessagesViews, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$TL_messages_messageViews tLRPC$TL_messages_messageViews = (TLRPC$TL_messages_messageViews) tLObject;
            SparseArray sparseArray = new SparseArray();
            SparseArray sparseArray2 = new SparseArray();
            SparseArray sparseArray3 = new SparseArray();
            SparseIntArray sparseIntArray = (SparseIntArray) sparseArray.get(i);
            SparseIntArray sparseIntArray2 = (SparseIntArray) sparseArray2.get(i);
            SparseArray sparseArray4 = (SparseArray) sparseArray3.get(i);
            int i2 = 0;
            while (i2 < tLRPC$TL_messages_getMessagesViews.id.size() && i2 < tLRPC$TL_messages_messageViews.views.size()) {
                TLRPC$TL_messageViews tLRPC$TL_messageViews = tLRPC$TL_messages_messageViews.views.get(i2);
                if ((1 & tLRPC$TL_messageViews.flags) != 0) {
                    if (sparseIntArray == null) {
                        sparseIntArray = new SparseIntArray();
                        sparseArray.put(i, sparseIntArray);
                    }
                    sparseIntArray.put(tLRPC$TL_messages_getMessagesViews.id.get(i2).intValue(), tLRPC$TL_messageViews.views);
                }
                if ((tLRPC$TL_messageViews.flags & 2) != 0) {
                    if (sparseIntArray2 == null) {
                        sparseIntArray2 = new SparseIntArray();
                        sparseArray2.put(i, sparseIntArray2);
                    }
                    sparseIntArray2.put(tLRPC$TL_messages_getMessagesViews.id.get(i2).intValue(), tLRPC$TL_messageViews.forwards);
                }
                if ((tLRPC$TL_messageViews.flags & 4) != 0) {
                    if (sparseArray4 == null) {
                        sparseArray4 = new SparseArray();
                        sparseArray3.put(i, sparseArray4);
                    }
                    sparseArray4.put(tLRPC$TL_messages_getMessagesViews.id.get(i2).intValue(), tLRPC$TL_messageViews.replies);
                }
                i2++;
            }
            getMessagesStorage().putUsersAndChats(tLRPC$TL_messages_messageViews.users, tLRPC$TL_messages_messageViews.chats, true, true);
            getMessagesStorage().putChannelViews(sparseArray, sparseArray2, sparseArray3, false, tLRPC$TL_messages_getMessagesViews.peer instanceof TLRPC$TL_inputPeerChannel);
            AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_messages_messageViews, sparseArray, sparseArray2, sparseArray3) {
                public final /* synthetic */ TLRPC$TL_messages_messageViews f$1;
                public final /* synthetic */ SparseArray f$2;
                public final /* synthetic */ SparseArray f$3;
                public final /* synthetic */ SparseArray f$4;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r5;
                }

                public final void run() {
                    MessagesController.this.lambda$null$112$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$112 */
    public /* synthetic */ void lambda$null$112$MessagesController(TLRPC$TL_messages_messageViews tLRPC$TL_messages_messageViews, SparseArray sparseArray, SparseArray sparseArray2, SparseArray sparseArray3) {
        putUsers(tLRPC$TL_messages_messageViews.users, false);
        putChats(tLRPC$TL_messages_messageViews.chats, false);
        getNotificationCenter().postNotificationName(NotificationCenter.didUpdateMessagesViews, sparseArray, sparseArray2, sparseArray3, Boolean.FALSE);
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Removed duplicated region for block: B:21:0x0063  */
    /* JADX WARNING: Removed duplicated region for block: B:25:0x0075  */
    /* renamed from: lambda$updateTimerProc$115 */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$updateTimerProc$115$MessagesController(int r18) {
        /*
            r17 = this;
            r0 = r17
            r1 = r18
            long r2 = android.os.SystemClock.elapsedRealtime()
            android.util.LongSparseArray<android.util.SparseArray<org.telegram.messenger.MessageObject>> r4 = r0.pollsToCheck
            int r4 = r4.size()
            r6 = 2147483647(0x7fffffff, float:NaN)
            r7 = 0
        L_0x0012:
            if (r7 >= r4) goto L_0x00cc
            android.util.LongSparseArray<android.util.SparseArray<org.telegram.messenger.MessageObject>> r8 = r0.pollsToCheck
            java.lang.Object r8 = r8.valueAt(r7)
            android.util.SparseArray r8 = (android.util.SparseArray) r8
            if (r8 != 0) goto L_0x0021
        L_0x001e:
            r5 = 1
            goto L_0x00c9
        L_0x0021:
            int r10 = r8.size()
            r11 = 0
        L_0x0026:
            r12 = 1000(0x3e8, float:1.401E-42)
            if (r11 >= r10) goto L_0x009f
            java.lang.Object r13 = r8.valueAt(r11)
            org.telegram.messenger.MessageObject r13 = (org.telegram.messenger.MessageObject) r13
            org.telegram.tgnet.TLRPC$Message r14 = r13.messageOwner
            org.telegram.tgnet.TLRPC$MessageMedia r14 = r14.media
            org.telegram.tgnet.TLRPC$TL_messageMediaPoll r14 = (org.telegram.tgnet.TLRPC$TL_messageMediaPoll) r14
            r15 = 30000(0x7530, float:4.2039E-41)
            org.telegram.tgnet.TLRPC$Poll r14 = r14.poll
            int r5 = r14.close_date
            if (r5 == 0) goto L_0x0044
            boolean r14 = r14.closed
            if (r14 != 0) goto L_0x0044
            r14 = 1
            goto L_0x0045
        L_0x0044:
            r14 = 0
        L_0x0045:
            if (r14 == 0) goto L_0x0051
            if (r5 > r1) goto L_0x004b
            r15 = r10
            goto L_0x0054
        L_0x004b:
            int r5 = r5 - r1
            int r5 = java.lang.Math.min(r6, r5)
            r6 = r5
        L_0x0051:
            r15 = r10
            r12 = 30000(0x7530, float:4.2039E-41)
        L_0x0054:
            long r9 = r13.pollLastCheckTime
            long r9 = r2 - r9
            long r9 = java.lang.Math.abs(r9)
            r16 = r6
            long r5 = (long) r12
            int r12 = (r9 > r5 ? 1 : (r9 == r5 ? 0 : -1))
            if (r12 >= 0) goto L_0x0075
            boolean r5 = r13.pollVisibleOnScreen
            if (r5 != 0) goto L_0x0099
            if (r14 != 0) goto L_0x0099
            int r5 = r13.getId()
            r8.remove(r5)
            int r10 = r15 + -1
            int r11 = r11 + -1
            goto L_0x009a
        L_0x0075:
            r13.pollLastCheckTime = r2
            org.telegram.tgnet.TLRPC$TL_messages_getPollResults r5 = new org.telegram.tgnet.TLRPC$TL_messages_getPollResults
            r5.<init>()
            long r9 = r13.getDialogId()
            int r6 = (int) r9
            org.telegram.tgnet.TLRPC$InputPeer r6 = r0.getInputPeer((int) r6)
            r5.peer = r6
            int r6 = r13.getId()
            r5.msg_id = r6
            org.telegram.tgnet.ConnectionsManager r6 = r17.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$var_q9SKogbJGToQhTq83u156acs r9 = new org.telegram.messenger.-$$Lambda$MessagesController$var_q9SKogbJGToQhTq83u156acs
            r9.<init>(r14)
            r6.sendRequest(r5, r9)
        L_0x0099:
            r10 = r15
        L_0x009a:
            r5 = 1
            int r11 = r11 + r5
            r6 = r16
            goto L_0x0026
        L_0x009f:
            r9 = 5
            if (r6 >= r9) goto L_0x00b4
            long r9 = r0.lastViewsCheckTime
            long r13 = java.lang.System.currentTimeMillis()
            int r11 = 5 - r6
            int r11 = r11 * 1000
            long r11 = (long) r11
            long r13 = r13 - r11
            long r9 = java.lang.Math.min(r9, r13)
            r0.lastViewsCheckTime = r9
        L_0x00b4:
            int r8 = r8.size()
            if (r8 != 0) goto L_0x001e
            android.util.LongSparseArray<android.util.SparseArray<org.telegram.messenger.MessageObject>> r8 = r0.pollsToCheck
            long r9 = r8.keyAt(r7)
            r8.remove(r9)
            int r4 = r4 + -1
            int r7 = r7 + -1
            goto L_0x001e
        L_0x00c9:
            int r7 = r7 + r5
            goto L_0x0012
        L_0x00cc:
            android.util.LongSparseArray<android.util.SparseArray<org.telegram.messenger.MessageObject>> r1 = r0.pollsToCheck
            int r1 = r1.size()
            r0.pollsToCheckSize = r1
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$updateTimerProc$115$MessagesController(int):void");
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$114 */
    public /* synthetic */ void lambda$null$114$MessagesController(boolean z, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        TLRPC$Poll tLRPC$Poll;
        if (tLRPC$TL_error == null) {
            TLRPC$Updates tLRPC$Updates = (TLRPC$Updates) tLObject;
            if (z) {
                for (int i = 0; i < tLRPC$Updates.updates.size(); i++) {
                    TLRPC$Update tLRPC$Update = tLRPC$Updates.updates.get(i);
                    if ((tLRPC$Update instanceof TLRPC$TL_updateMessagePoll) && (tLRPC$Poll = ((TLRPC$TL_updateMessagePoll) tLRPC$Update).poll) != null && !tLRPC$Poll.closed) {
                        this.lastViewsCheckTime = System.currentTimeMillis() - 4000;
                    }
                }
            }
            processUpdates(tLRPC$Updates, false);
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$updateTimerProc$116 */
    public /* synthetic */ void lambda$updateTimerProc$116$MessagesController() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 4);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$updateTimerProc$118 */
    public /* synthetic */ void lambda$updateTimerProc$118$MessagesController(int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$TL_chatOnlines tLRPC$TL_chatOnlines = (TLRPC$TL_chatOnlines) tLObject;
            getMessagesStorage().updateChatOnlineCount(i, tLRPC$TL_chatOnlines.onlines);
            AndroidUtilities.runOnUIThread(new Runnable(i, tLRPC$TL_chatOnlines) {
                public final /* synthetic */ int f$1;
                public final /* synthetic */ TLRPC$TL_chatOnlines f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    MessagesController.this.lambda$null$117$MessagesController(this.f$1, this.f$2);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$117 */
    public /* synthetic */ void lambda$null$117$MessagesController(int i, TLRPC$TL_chatOnlines tLRPC$TL_chatOnlines) {
        getNotificationCenter().postNotificationName(NotificationCenter.chatOnlineCountDidLoad, Integer.valueOf(i), Integer.valueOf(tLRPC$TL_chatOnlines.onlines));
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$updateTimerProc$119 */
    public /* synthetic */ void lambda$updateTimerProc$119$MessagesController() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 64);
    }

    private void checkTosUpdate() {
        if (this.nextTosCheckTime <= getConnectionsManager().getCurrentTime() && !this.checkingTosUpdate && getUserConfig().isClientActivated()) {
            this.checkingTosUpdate = true;
            getConnectionsManager().sendRequest(new TLRPC$TL_help_getTermsOfServiceUpdate(), new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$checkTosUpdate$121$MessagesController(tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$checkTosUpdate$121 */
    public /* synthetic */ void lambda$checkTosUpdate$121$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        this.checkingTosUpdate = false;
        if (tLObject instanceof TLRPC$TL_help_termsOfServiceUpdateEmpty) {
            this.nextTosCheckTime = ((TLRPC$TL_help_termsOfServiceUpdateEmpty) tLObject).expires;
        } else if (tLObject instanceof TLRPC$TL_help_termsOfServiceUpdate) {
            TLRPC$TL_help_termsOfServiceUpdate tLRPC$TL_help_termsOfServiceUpdate = (TLRPC$TL_help_termsOfServiceUpdate) tLObject;
            this.nextTosCheckTime = tLRPC$TL_help_termsOfServiceUpdate.expires;
            AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_help_termsOfServiceUpdate) {
                public final /* synthetic */ TLRPC$TL_help_termsOfServiceUpdate f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$120$MessagesController(this.f$1);
                }
            });
        } else {
            this.nextTosCheckTime = getConnectionsManager().getCurrentTime() + 3600;
        }
        this.notificationsPreferences.edit().putInt("nextTosCheckTime", this.nextTosCheckTime).commit();
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$120 */
    public /* synthetic */ void lambda$null$120$MessagesController(TLRPC$TL_help_termsOfServiceUpdate tLRPC$TL_help_termsOfServiceUpdate) {
        getNotificationCenter().postNotificationName(NotificationCenter.needShowAlert, 4, tLRPC$TL_help_termsOfServiceUpdate.terms_of_service);
    }

    public void checkPromoInfo(boolean z) {
        Utilities.stageQueue.postRunnable(new Runnable(z) {
            public final /* synthetic */ boolean f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$checkPromoInfo$122$MessagesController(this.f$1);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: checkPromoInfoInternal */
    public void lambda$checkPromoInfo$122(boolean z) {
        String str;
        boolean z2 = false;
        if (z && this.checkingPromoInfo) {
            this.checkingPromoInfo = false;
        }
        if ((z || this.nextPromoInfoCheckTime <= getConnectionsManager().getCurrentTime()) && !this.checkingPromoInfo) {
            if (this.checkingPromoInfoRequestId != 0) {
                getConnectionsManager().cancelRequest(this.checkingPromoInfoRequestId, true);
                this.checkingPromoInfoRequestId = 0;
            }
            SharedPreferences globalMainSettings = getGlobalMainSettings();
            globalMainSettings.getBoolean("proxy_enabled", false);
            String string = globalMainSettings.getString("proxy_ip", "");
            String string2 = globalMainSettings.getString("proxy_secret", "");
            if (!(this.promoDialogId == 0 || this.promoDialogType != 0 || (str = this.proxyDialogAddress) == null)) {
                if (!str.equals(string + string2)) {
                    z2 = true;
                }
            }
            int i = this.lastCheckPromoId + 1;
            this.lastCheckPromoId = i;
            this.checkingPromoInfo = true;
            this.checkingPromoInfoRequestId = getConnectionsManager().sendRequest(new TLRPC$TL_help_getPromoData(), new RequestDelegate(i, string, string2) {
                public final /* synthetic */ int f$1;
                public final /* synthetic */ String f$2;
                public final /* synthetic */ String f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$checkPromoInfoInternal$127$MessagesController(this.f$1, this.f$2, this.f$3, tLObject, tLRPC$TL_error);
                }
            });
            if (z2) {
                this.promoDialogId = 0;
                this.proxyDialogAddress = null;
                this.nextPromoInfoCheckTime = getConnectionsManager().getCurrentTime() + 3600;
                getGlobalMainSettings().edit().putLong("proxy_dialog", this.promoDialogId).remove("proxyDialogAddress").putInt("nextPromoInfoCheckTime", this.nextPromoInfoCheckTime).commit();
                AndroidUtilities.runOnUIThread(new Runnable() {
                    public final void run() {
                        MessagesController.this.removePromoDialog();
                    }
                });
            }
        }
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Removed duplicated region for block: B:40:0x0090  */
    /* JADX WARNING: Removed duplicated region for block: B:41:0x0093  */
    /* JADX WARNING: Removed duplicated region for block: B:47:0x00e1  */
    /* JADX WARNING: Removed duplicated region for block: B:48:0x00e5  */
    /* JADX WARNING: Removed duplicated region for block: B:51:0x00ee  */
    /* JADX WARNING: Removed duplicated region for block: B:52:0x00f2  */
    /* JADX WARNING: Removed duplicated region for block: B:55:0x00ff  */
    /* renamed from: lambda$checkPromoInfoInternal$127 */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$checkPromoInfoInternal$127$MessagesController(int r16, java.lang.String r17, java.lang.String r18, org.telegram.tgnet.TLObject r19, org.telegram.tgnet.TLRPC$TL_error r20) {
        /*
            r15 = this;
            r6 = r15
            r0 = r19
            int r1 = r6.lastCheckPromoId
            r5 = r16
            if (r5 == r1) goto L_0x000a
            return
        L_0x000a:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_help_promoDataEmpty
            java.lang.String r7 = "nextPromoInfoCheckTime"
            java.lang.String r8 = "proxyDialogAddress"
            java.lang.String r9 = "proxy_dialog"
            r10 = 0
            r2 = 1
            if (r1 == 0) goto L_0x001e
            org.telegram.tgnet.TLRPC$TL_help_promoDataEmpty r0 = (org.telegram.tgnet.TLRPC$TL_help_promoDataEmpty) r0
            int r0 = r0.expires
            r6.nextPromoInfoCheckTime = r0
            goto L_0x011a
        L_0x001e:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_help_promoData
            if (r1 == 0) goto L_0x010e
            r4 = r0
            org.telegram.tgnet.TLRPC$TL_help_promoData r4 = (org.telegram.tgnet.TLRPC$TL_help_promoData) r4
            org.telegram.tgnet.TLRPC$Peer r0 = r4.peer
            int r1 = r0.user_id
            if (r1 == 0) goto L_0x002f
            long r0 = (long) r1
        L_0x002c:
            r11 = r0
            r13 = 0
            goto L_0x008a
        L_0x002f:
            int r1 = r0.chat_id
            if (r1 == 0) goto L_0x005f
            int r0 = -r1
            long r0 = (long) r0
            r3 = 0
        L_0x0036:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r11 = r4.chats
            int r11 = r11.size()
            if (r3 >= r11) goto L_0x005b
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r11 = r4.chats
            java.lang.Object r11 = r11.get(r3)
            org.telegram.tgnet.TLRPC$Chat r11 = (org.telegram.tgnet.TLRPC$Chat) r11
            int r12 = r11.id
            org.telegram.tgnet.TLRPC$Peer r13 = r4.peer
            int r13 = r13.chat_id
            if (r12 != r13) goto L_0x0058
            boolean r3 = r11.kicked
            if (r3 != 0) goto L_0x0056
            boolean r3 = r11.restricted
            if (r3 == 0) goto L_0x005b
        L_0x0056:
            r3 = 1
            goto L_0x005c
        L_0x0058:
            int r3 = r3 + 1
            goto L_0x0036
        L_0x005b:
            r3 = 0
        L_0x005c:
            r11 = r0
            r13 = r3
            goto L_0x008a
        L_0x005f:
            int r0 = r0.channel_id
            int r0 = -r0
            long r0 = (long) r0
            r3 = 0
        L_0x0064:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r11 = r4.chats
            int r11 = r11.size()
            if (r3 >= r11) goto L_0x002c
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r11 = r4.chats
            java.lang.Object r11 = r11.get(r3)
            org.telegram.tgnet.TLRPC$Chat r11 = (org.telegram.tgnet.TLRPC$Chat) r11
            int r12 = r11.id
            org.telegram.tgnet.TLRPC$Peer r13 = r4.peer
            int r13 = r13.channel_id
            if (r12 != r13) goto L_0x0087
            boolean r3 = r11.kicked
            if (r3 != 0) goto L_0x0084
            boolean r3 = r11.restricted
            if (r3 == 0) goto L_0x002c
        L_0x0084:
            r11 = r0
            r13 = 1
            goto L_0x008a
        L_0x0087:
            int r3 = r3 + 1
            goto L_0x0064
        L_0x008a:
            r6.promoDialogId = r11
            boolean r0 = r4.proxy
            if (r0 == 0) goto L_0x0093
            r6.promoDialogType = r10
            goto L_0x00a5
        L_0x0093:
            java.lang.String r0 = r4.psa_type
            boolean r0 = android.text.TextUtils.isEmpty(r0)
            if (r0 != 0) goto L_0x00a2
            r6.promoDialogType = r2
            java.lang.String r0 = r4.psa_type
            r6.promoPsaType = r0
            goto L_0x00a5
        L_0x00a2:
            r0 = 2
            r6.promoDialogType = r0
        L_0x00a5:
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r1 = r17
            r0.append(r1)
            r1 = r18
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            r6.proxyDialogAddress = r0
            java.lang.String r0 = r4.psa_message
            r6.promoPsaMessage = r0
            int r0 = r4.expires
            r6.nextPromoInfoCheckTime = r0
            android.content.SharedPreferences r0 = getGlobalMainSettings()
            android.content.SharedPreferences$Editor r0 = r0.edit()
            long r1 = r6.promoDialogId
            r0.putLong(r9, r1)
            java.lang.String r1 = r6.proxyDialogAddress
            r0.putString(r8, r1)
            int r1 = r6.promoDialogType
            java.lang.String r2 = "promo_dialog_type"
            r0.putInt(r2, r1)
            java.lang.String r1 = r6.promoPsaMessage
            java.lang.String r2 = "promo_psa_message"
            if (r1 == 0) goto L_0x00e5
            r0.putString(r2, r1)
            goto L_0x00e8
        L_0x00e5:
            r0.remove(r2)
        L_0x00e8:
            java.lang.String r1 = r6.promoPsaType
            java.lang.String r2 = "promo_psa_type"
            if (r1 == 0) goto L_0x00f2
            r0.putString(r2, r1)
            goto L_0x00f5
        L_0x00f2:
            r0.remove(r2)
        L_0x00f5:
            int r1 = r6.nextPromoInfoCheckTime
            r0.putInt(r7, r1)
            r0.commit()
            if (r13 != 0) goto L_0x010c
            org.telegram.messenger.-$$Lambda$MessagesController$uhUI-xYcXJ-Hwe1R-XvgD-QsEU8 r14 = new org.telegram.messenger.-$$Lambda$MessagesController$uhUI-xYcXJ-Hwe1R-XvgD-QsEU8
            r0 = r14
            r1 = r15
            r2 = r11
            r5 = r16
            r0.<init>(r2, r4, r5)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r14)
        L_0x010c:
            r2 = r13
            goto L_0x011a
        L_0x010e:
            org.telegram.tgnet.ConnectionsManager r0 = r15.getConnectionsManager()
            int r0 = r0.getCurrentTime()
            int r0 = r0 + 3600
            r6.nextPromoInfoCheckTime = r0
        L_0x011a:
            if (r2 == 0) goto L_0x0147
            r0 = 0
            r6.promoDialogId = r0
            android.content.SharedPreferences r0 = getGlobalMainSettings()
            android.content.SharedPreferences$Editor r0 = r0.edit()
            long r1 = r6.promoDialogId
            android.content.SharedPreferences$Editor r0 = r0.putLong(r9, r1)
            android.content.SharedPreferences$Editor r0 = r0.remove(r8)
            int r1 = r6.nextPromoInfoCheckTime
            android.content.SharedPreferences$Editor r0 = r0.putInt(r7, r1)
            r0.commit()
            r6.checkingPromoInfoRequestId = r10
            r6.checkingPromoInfo = r10
            org.telegram.messenger.-$$Lambda$MessagesController$3glUIU4Rpam_ZmjiP-RPcrBSWg8 r0 = new org.telegram.messenger.-$$Lambda$MessagesController$3glUIU4Rpam_ZmjiP-RPcrBSWg8
            r0.<init>()
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r0)
        L_0x0147:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$checkPromoInfoInternal$127$MessagesController(int, java.lang.String, java.lang.String, org.telegram.tgnet.TLObject, org.telegram.tgnet.TLRPC$TL_error):void");
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$126 */
    public /* synthetic */ void lambda$null$126$MessagesController(long j, TLRPC$TL_help_promoData tLRPC$TL_help_promoData, int i) {
        TLRPC$Dialog tLRPC$Dialog = this.promoDialog;
        if (!(tLRPC$Dialog == null || j == tLRPC$Dialog.id)) {
            removePromoDialog();
        }
        TLRPC$Dialog tLRPC$Dialog2 = this.dialogs_dict.get(j);
        this.promoDialog = tLRPC$Dialog2;
        if (tLRPC$Dialog2 != null) {
            this.checkingPromoInfo = false;
            sortDialogs((SparseArray<TLRPC$Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
            return;
        }
        SparseArray sparseArray = new SparseArray();
        SparseArray sparseArray2 = new SparseArray();
        for (int i2 = 0; i2 < tLRPC$TL_help_promoData.users.size(); i2++) {
            TLRPC$User tLRPC$User = tLRPC$TL_help_promoData.users.get(i2);
            sparseArray.put(tLRPC$User.id, tLRPC$User);
        }
        for (int i3 = 0; i3 < tLRPC$TL_help_promoData.chats.size(); i3++) {
            TLRPC$Chat tLRPC$Chat = tLRPC$TL_help_promoData.chats.get(i3);
            sparseArray2.put(tLRPC$Chat.id, tLRPC$Chat);
        }
        TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs = new TLRPC$TL_messages_getPeerDialogs();
        TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
        TLRPC$Peer tLRPC$Peer = tLRPC$TL_help_promoData.peer;
        if (tLRPC$Peer.user_id != 0) {
            TLRPC$TL_inputPeerUser tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerUser();
            tLRPC$TL_inputDialogPeer.peer = tLRPC$TL_inputPeerUser;
            int i4 = tLRPC$TL_help_promoData.peer.user_id;
            tLRPC$TL_inputPeerUser.user_id = i4;
            TLRPC$User tLRPC$User2 = (TLRPC$User) sparseArray.get(i4);
            if (tLRPC$User2 != null) {
                tLRPC$TL_inputDialogPeer.peer.access_hash = tLRPC$User2.access_hash;
            }
        } else if (tLRPC$Peer.chat_id != 0) {
            TLRPC$TL_inputPeerChat tLRPC$TL_inputPeerChat = new TLRPC$TL_inputPeerChat();
            tLRPC$TL_inputDialogPeer.peer = tLRPC$TL_inputPeerChat;
            int i5 = tLRPC$TL_help_promoData.peer.chat_id;
            tLRPC$TL_inputPeerChat.chat_id = i5;
            TLRPC$Chat tLRPC$Chat2 = (TLRPC$Chat) sparseArray2.get(i5);
            if (tLRPC$Chat2 != null) {
                tLRPC$TL_inputDialogPeer.peer.access_hash = tLRPC$Chat2.access_hash;
            }
        } else {
            TLRPC$TL_inputPeerChannel tLRPC$TL_inputPeerChannel = new TLRPC$TL_inputPeerChannel();
            tLRPC$TL_inputDialogPeer.peer = tLRPC$TL_inputPeerChannel;
            int i6 = tLRPC$TL_help_promoData.peer.channel_id;
            tLRPC$TL_inputPeerChannel.channel_id = i6;
            TLRPC$Chat tLRPC$Chat3 = (TLRPC$Chat) sparseArray2.get(i6);
            if (tLRPC$Chat3 != null) {
                tLRPC$TL_inputDialogPeer.peer.access_hash = tLRPC$Chat3.access_hash;
            }
        }
        tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer);
        this.checkingPromoInfoRequestId = getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerDialogs, new RequestDelegate(i, tLRPC$TL_help_promoData, j) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ TLRPC$TL_help_promoData f$2;
            public final /* synthetic */ long f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$null$125$MessagesController(this.f$1, this.f$2, this.f$3, tLObject, tLRPC$TL_error);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$125 */
    public /* synthetic */ void lambda$null$125$MessagesController(int i, TLRPC$TL_help_promoData tLRPC$TL_help_promoData, long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (i == this.lastCheckPromoId) {
            this.checkingPromoInfoRequestId = 0;
            TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject;
            if (tLRPC$TL_messages_peerDialogs == null || tLRPC$TL_messages_peerDialogs.dialogs.isEmpty()) {
                AndroidUtilities.runOnUIThread(new Runnable() {
                    public final void run() {
                        MessagesController.this.lambda$null$124$MessagesController();
                    }
                });
            } else {
                getMessagesStorage().putUsersAndChats(tLRPC$TL_help_promoData.users, tLRPC$TL_help_promoData.chats, true, true);
                TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
                tLRPC$TL_messages_dialogs.chats = tLRPC$TL_messages_peerDialogs.chats;
                tLRPC$TL_messages_dialogs.users = tLRPC$TL_messages_peerDialogs.users;
                tLRPC$TL_messages_dialogs.dialogs = tLRPC$TL_messages_peerDialogs.dialogs;
                tLRPC$TL_messages_dialogs.messages = tLRPC$TL_messages_peerDialogs.messages;
                getMessagesStorage().putDialogs(tLRPC$TL_messages_dialogs, 2);
                AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_help_promoData, tLRPC$TL_messages_peerDialogs, j) {
                    public final /* synthetic */ TLRPC$TL_help_promoData f$1;
                    public final /* synthetic */ TLRPC$TL_messages_peerDialogs f$2;
                    public final /* synthetic */ long f$3;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                        this.f$3 = r4;
                    }

                    public final void run() {
                        MessagesController.this.lambda$null$123$MessagesController(this.f$1, this.f$2, this.f$3);
                    }
                });
            }
            this.checkingPromoInfo = false;
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$123 */
    public /* synthetic */ void lambda$null$123$MessagesController(TLRPC$TL_help_promoData tLRPC$TL_help_promoData, TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs, long j) {
        Integer num = 0;
        putUsers(tLRPC$TL_help_promoData.users, false);
        putChats(tLRPC$TL_help_promoData.chats, false);
        putUsers(tLRPC$TL_messages_peerDialogs.users, false);
        putChats(tLRPC$TL_messages_peerDialogs.chats, false);
        TLRPC$Dialog tLRPC$Dialog = this.promoDialog;
        if (tLRPC$Dialog != null) {
            int i = (int) tLRPC$Dialog.id;
            if (i < 0) {
                TLRPC$Chat chat = getChat(Integer.valueOf(-i));
                if (ChatObject.isNotInChat(chat) || chat.restricted) {
                    removeDialog(this.promoDialog);
                }
            } else {
                removeDialog(tLRPC$Dialog);
            }
        }
        TLRPC$Dialog tLRPC$Dialog2 = tLRPC$TL_messages_peerDialogs.dialogs.get(0);
        this.promoDialog = tLRPC$Dialog2;
        tLRPC$Dialog2.id = j;
        tLRPC$Dialog2.folder_id = 0;
        if (DialogObject.isChannel(tLRPC$Dialog2)) {
            SparseIntArray sparseIntArray = this.channelsPts;
            TLRPC$Dialog tLRPC$Dialog3 = this.promoDialog;
            sparseIntArray.put(-((int) tLRPC$Dialog3.id), tLRPC$Dialog3.pts);
        }
        Integer num2 = (Integer) this.dialogs_read_inbox_max.get(Long.valueOf(this.promoDialog.id));
        if (num2 == null) {
            num2 = num;
        }
        this.dialogs_read_inbox_max.put(Long.valueOf(this.promoDialog.id), Integer.valueOf(Math.max(num2.intValue(), this.promoDialog.read_inbox_max_id)));
        Integer num3 = (Integer) this.dialogs_read_outbox_max.get(Long.valueOf(this.promoDialog.id));
        if (num3 != null) {
            num = num3;
        }
        this.dialogs_read_outbox_max.put(Long.valueOf(this.promoDialog.id), Integer.valueOf(Math.max(num.intValue(), this.promoDialog.read_outbox_max_id)));
        this.dialogs_dict.put(j, this.promoDialog);
        if (!tLRPC$TL_messages_peerDialogs.messages.isEmpty()) {
            SparseArray sparseArray = new SparseArray();
            SparseArray sparseArray2 = new SparseArray();
            for (int i2 = 0; i2 < tLRPC$TL_messages_peerDialogs.users.size(); i2++) {
                TLRPC$User tLRPC$User = tLRPC$TL_messages_peerDialogs.users.get(i2);
                sparseArray.put(tLRPC$User.id, tLRPC$User);
            }
            for (int i3 = 0; i3 < tLRPC$TL_messages_peerDialogs.chats.size(); i3++) {
                TLRPC$Chat tLRPC$Chat = tLRPC$TL_messages_peerDialogs.chats.get(i3);
                sparseArray2.put(tLRPC$Chat.id, tLRPC$Chat);
            }
            MessageObject messageObject = new MessageObject(this.currentAccount, tLRPC$TL_messages_peerDialogs.messages.get(0), (SparseArray<TLRPC$User>) sparseArray, (SparseArray<TLRPC$Chat>) sparseArray2, false, true);
            this.dialogMessage.put(j, messageObject);
            TLRPC$Dialog tLRPC$Dialog4 = this.promoDialog;
            if (tLRPC$Dialog4.last_message_date == 0) {
                tLRPC$Dialog4.last_message_date = messageObject.messageOwner.date;
            }
        }
        sortDialogs((SparseArray<TLRPC$Chat>) null);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$124 */
    public /* synthetic */ void lambda$null$124$MessagesController() {
        TLRPC$Dialog tLRPC$Dialog = this.promoDialog;
        if (tLRPC$Dialog != null) {
            int i = (int) tLRPC$Dialog.id;
            if (i < 0) {
                TLRPC$Chat chat = getChat(Integer.valueOf(-i));
                if (ChatObject.isNotInChat(chat) || chat.restricted) {
                    removeDialog(this.promoDialog);
                }
            } else {
                removeDialog(tLRPC$Dialog);
            }
            this.promoDialog = null;
            sortDialogs((SparseArray<TLRPC$Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
    }

    /* access modifiers changed from: private */
    public void removePromoDialog() {
        TLRPC$Dialog tLRPC$Dialog = this.promoDialog;
        if (tLRPC$Dialog != null) {
            int i = (int) tLRPC$Dialog.id;
            if (i < 0) {
                TLRPC$Chat chat = getChat(Integer.valueOf(-i));
                if (ChatObject.isNotInChat(chat) || chat.restricted) {
                    removeDialog(this.promoDialog);
                }
            } else {
                removeDialog(tLRPC$Dialog);
            }
            this.promoDialog = null;
            sortDialogs((SparseArray<TLRPC$Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
    }

    public boolean isPromoDialog(long j, boolean z) {
        TLRPC$Dialog tLRPC$Dialog = this.promoDialog;
        return tLRPC$Dialog != null && tLRPC$Dialog.id == j && (!z || this.isLeftPromoChannel);
    }

    private String getUserNameForTyping(TLRPC$User tLRPC$User) {
        if (tLRPC$User == null) {
            return "";
        }
        String str = tLRPC$User.first_name;
        if (str != null && str.length() > 0) {
            return tLRPC$User.first_name;
        }
        String str2 = tLRPC$User.last_name;
        if (str2 == null || str2.length() <= 0) {
            return "";
        }
        return tLRPC$User.last_name;
    }

    private void updatePrintingStrings() {
        int i;
        int i2;
        int i3;
        LongSparseArray longSparseArray = new LongSparseArray();
        LongSparseArray longSparseArray2 = new LongSparseArray();
        for (Map.Entry entry : this.printingUsers.entrySet()) {
            Long l = (Long) entry.getKey();
            int longValue = (int) l.longValue();
            for (Map.Entry entry2 : ((ConcurrentHashMap) entry.getValue()).entrySet()) {
                Integer num = (Integer) entry2.getKey();
                ArrayList arrayList = (ArrayList) entry2.getValue();
                SparseArray sparseArray = new SparseArray();
                SparseArray sparseArray2 = new SparseArray();
                longSparseArray.put(l.longValue(), sparseArray);
                longSparseArray2.put(l.longValue(), sparseArray2);
                if (longValue > 0 || longValue == 0 || arrayList.size() == 1) {
                    PrintingUser printingUser = (PrintingUser) arrayList.get(0);
                    TLRPC$User user = getUser(Integer.valueOf(printingUser.userId));
                    if (user != null) {
                        TLRPC$SendMessageAction tLRPC$SendMessageAction = printingUser.action;
                        if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageRecordAudioAction) {
                            if (longValue < 0) {
                                sparseArray.put(num.intValue(), LocaleController.formatString("IsRecordingAudio", NUM, getUserNameForTyping(user)));
                            } else {
                                sparseArray.put(num.intValue(), LocaleController.getString("RecordingAudio", NUM));
                            }
                            sparseArray2.put(num.intValue(), 1);
                        } else if ((tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageRecordRoundAction) || (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageUploadRoundAction)) {
                            if (longValue < 0) {
                                sparseArray.put(num.intValue(), LocaleController.formatString("IsRecordingRound", NUM, getUserNameForTyping(user)));
                            } else {
                                sparseArray.put(num.intValue(), LocaleController.getString("RecordingRound", NUM));
                            }
                            sparseArray2.put(num.intValue(), 4);
                        } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageUploadAudioAction) {
                            if (longValue < 0) {
                                sparseArray.put(num.intValue(), LocaleController.formatString("IsSendingAudio", NUM, getUserNameForTyping(user)));
                            } else {
                                sparseArray.put(num.intValue(), LocaleController.getString("SendingAudio", NUM));
                            }
                            sparseArray2.put(num.intValue(), 2);
                        } else if ((tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageUploadVideoAction) || (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageRecordVideoAction)) {
                            if (longValue < 0) {
                                sparseArray.put(num.intValue(), LocaleController.formatString("IsSendingVideo", NUM, getUserNameForTyping(user)));
                            } else {
                                sparseArray.put(num.intValue(), LocaleController.getString("SendingVideoStatus", NUM));
                            }
                            sparseArray2.put(num.intValue(), 2);
                        } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageUploadDocumentAction) {
                            if (longValue < 0) {
                                sparseArray.put(num.intValue(), LocaleController.formatString("IsSendingFile", NUM, getUserNameForTyping(user)));
                            } else {
                                sparseArray.put(num.intValue(), LocaleController.getString("SendingFile", NUM));
                            }
                            sparseArray2.put(num.intValue(), 2);
                        } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageUploadPhotoAction) {
                            if (longValue < 0) {
                                sparseArray.put(num.intValue(), LocaleController.formatString("IsSendingPhoto", NUM, getUserNameForTyping(user)));
                            } else {
                                sparseArray.put(num.intValue(), LocaleController.getString("SendingPhoto", NUM));
                            }
                            sparseArray2.put(num.intValue(), 2);
                        } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageGamePlayAction) {
                            if (longValue < 0) {
                                sparseArray.put(num.intValue(), LocaleController.formatString("IsSendingGame", NUM, getUserNameForTyping(user)));
                            } else {
                                sparseArray.put(num.intValue(), LocaleController.getString("SendingGame", NUM));
                            }
                            sparseArray2.put(num.intValue(), 3);
                        } else {
                            if (longValue < 0) {
                                i = 0;
                                sparseArray.put(num.intValue(), LocaleController.formatString("IsTypingGroup", NUM, getUserNameForTyping(user)));
                            } else {
                                i = 0;
                                sparseArray.put(num.intValue(), LocaleController.getString("Typing", NUM));
                            }
                            sparseArray2.put(num.intValue(), Integer.valueOf(i));
                        }
                    }
                } else {
                    StringBuilder sb = new StringBuilder();
                    Iterator it = arrayList.iterator();
                    int i4 = 0;
                    while (true) {
                        if (!it.hasNext()) {
                            i2 = i4;
                            break;
                        }
                        TLRPC$User user2 = getUser(Integer.valueOf(((PrintingUser) it.next()).userId));
                        if (user2 != null) {
                            if (sb.length() != 0) {
                                sb.append(", ");
                            }
                            sb.append(getUserNameForTyping(user2));
                            i4++;
                        }
                        i2 = i4;
                        if (i2 == 2) {
                            break;
                        }
                        i4 = i2;
                    }
                    if (sb.length() != 0) {
                        if (i2 == 1) {
                            sparseArray.put(num.intValue(), LocaleController.formatString("IsTypingGroup", NUM, sb.toString()));
                        } else if (arrayList.size() > 2) {
                            String pluralString = LocaleController.getPluralString("AndMoreTypingGroup", arrayList.size() - 2);
                            try {
                                sparseArray.put(num.intValue(), String.format(pluralString, new Object[]{sb.toString(), Integer.valueOf(arrayList.size() - 2)}));
                            } catch (Exception unused) {
                                sparseArray.put(num.intValue(), "LOC_ERR: AndMoreTypingGroup");
                            }
                        } else {
                            i3 = 0;
                            sparseArray.put(num.intValue(), LocaleController.formatString("AreTypingGroup", NUM, sb.toString()));
                            sparseArray2.put(num.intValue(), Integer.valueOf(i3));
                        }
                        i3 = 0;
                        sparseArray2.put(num.intValue(), Integer.valueOf(i3));
                    }
                }
            }
        }
        this.lastPrintingStringCount = longSparseArray.size();
        AndroidUtilities.runOnUIThread(new Runnable(longSparseArray, longSparseArray2) {
            public final /* synthetic */ LongSparseArray f$1;
            public final /* synthetic */ LongSparseArray f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$updatePrintingStrings$128$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$updatePrintingStrings$128 */
    public /* synthetic */ void lambda$updatePrintingStrings$128$MessagesController(LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        this.printingStrings = longSparseArray;
        this.printingStringsTypes = longSparseArray2;
    }

    /* JADX WARNING: Code restructure failed: missing block: B:5:0x000c, code lost:
        r3 = r0[r3];
     */
    /* renamed from: cancelTyping */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void lambda$null$131(int r3, long r4, int r6) {
        /*
            r2 = this;
            if (r3 < 0) goto L_0x0023
            android.util.LongSparseArray<android.util.SparseArray<java.lang.Boolean>>[] r0 = r2.sendingTypings
            int r1 = r0.length
            if (r3 >= r1) goto L_0x0023
            r1 = r0[r3]
            if (r1 != 0) goto L_0x000c
            goto L_0x0023
        L_0x000c:
            r3 = r0[r3]
            java.lang.Object r0 = r3.get(r4)
            android.util.SparseArray r0 = (android.util.SparseArray) r0
            if (r0 != 0) goto L_0x0017
            return
        L_0x0017:
            r0.remove(r6)
            int r6 = r0.size()
            if (r6 != 0) goto L_0x0023
            r3.remove(r4)
        L_0x0023:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$null$131(int, long, int):void");
    }

    public boolean sendTyping(long j, int i, int i2, int i3) {
        TLRPC$Chat chat;
        long j2 = j;
        int i4 = i;
        int i5 = i2;
        int i6 = i3;
        Boolean bool = Boolean.TRUE;
        if (i5 < 0 || i5 >= this.sendingTypings.length || j2 == 0) {
            return false;
        }
        int i7 = (int) j2;
        if (i7 >= 0) {
            TLRPC$User user = getUser(Integer.valueOf(i7));
            if (user != null) {
                if (user.id == getUserConfig().getClientUserId()) {
                    return false;
                }
                TLRPC$UserStatus tLRPC$UserStatus = user.status;
                if (!(tLRPC$UserStatus == null || tLRPC$UserStatus.expires == -100 || this.onlinePrivacy.containsKey(Integer.valueOf(user.id)))) {
                    if (user.status.expires <= getConnectionsManager().getCurrentTime() - 30) {
                        return false;
                    }
                }
            }
        } else if (ChatObject.shouldSendAnonymously(getChat(Integer.valueOf(-i7)))) {
            return false;
        }
        LongSparseArray<SparseArray<Boolean>>[] longSparseArrayArr = this.sendingTypings;
        LongSparseArray<SparseArray<Boolean>> longSparseArray = longSparseArrayArr[i5];
        if (longSparseArray == null) {
            longSparseArray = new LongSparseArray<>();
            longSparseArrayArr[i5] = longSparseArray;
        }
        SparseArray sparseArray = longSparseArray.get(j2);
        if (sparseArray == null) {
            sparseArray = new SparseArray();
            longSparseArray.put(j2, sparseArray);
        }
        if (sparseArray.get(i4) != null) {
            return false;
        }
        int i8 = (int) (j2 >> 32);
        if (i7 != 0) {
            TLRPC$TL_messages_setTyping tLRPC$TL_messages_setTyping = new TLRPC$TL_messages_setTyping();
            if (i4 != 0) {
                tLRPC$TL_messages_setTyping.top_msg_id = i4;
                tLRPC$TL_messages_setTyping.flags |= 1;
            }
            TLRPC$InputPeer inputPeer = getInputPeer(i7);
            tLRPC$TL_messages_setTyping.peer = inputPeer;
            if (((inputPeer instanceof TLRPC$TL_inputPeerChannel) && ((chat = getChat(Integer.valueOf(inputPeer.channel_id))) == null || !chat.megagroup)) || tLRPC$TL_messages_setTyping.peer == null) {
                return false;
            }
            if (i5 == 0) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageTypingAction();
            } else if (i5 == 1) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageRecordAudioAction();
            } else if (i5 == 2) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageCancelAction();
            } else if (i5 == 3) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageUploadDocumentAction();
            } else if (i5 == 4) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageUploadPhotoAction();
            } else if (i5 == 5) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageUploadVideoAction();
            } else if (i5 == 6) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageGamePlayAction();
            } else if (i5 == 7) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageRecordRoundAction();
            } else if (i5 == 8) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageUploadRoundAction();
            } else if (i5 == 9) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageUploadAudioAction();
            }
            sparseArray.put(i4, bool);
            int sendRequest = getConnectionsManager().sendRequest(tLRPC$TL_messages_setTyping, new RequestDelegate(i2, j, i) {
                public final /* synthetic */ int f$1;
                public final /* synthetic */ long f$2;
                public final /* synthetic */ int f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r5;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$sendTyping$130$MessagesController(this.f$1, this.f$2, this.f$3, tLObject, tLRPC$TL_error);
                }
            }, 2);
            if (i6 != 0) {
                getConnectionsManager().bindRequestToGuid(sendRequest, i6);
            }
        } else if (i5 != 0) {
            return false;
        } else {
            TLRPC$EncryptedChat encryptedChat = getEncryptedChat(Integer.valueOf(i8));
            byte[] bArr = encryptedChat.auth_key;
            if (bArr != null && bArr.length > 1 && (encryptedChat instanceof TLRPC$TL_encryptedChat)) {
                TLRPC$TL_messages_setEncryptedTyping tLRPC$TL_messages_setEncryptedTyping = new TLRPC$TL_messages_setEncryptedTyping();
                TLRPC$TL_inputEncryptedChat tLRPC$TL_inputEncryptedChat = new TLRPC$TL_inputEncryptedChat();
                tLRPC$TL_messages_setEncryptedTyping.peer = tLRPC$TL_inputEncryptedChat;
                tLRPC$TL_inputEncryptedChat.chat_id = encryptedChat.id;
                tLRPC$TL_inputEncryptedChat.access_hash = encryptedChat.access_hash;
                tLRPC$TL_messages_setEncryptedTyping.typing = true;
                sparseArray.put(i4, bool);
                int sendRequest2 = getConnectionsManager().sendRequest(tLRPC$TL_messages_setEncryptedTyping, new RequestDelegate(i2, j, i) {
                    public final /* synthetic */ int f$1;
                    public final /* synthetic */ long f$2;
                    public final /* synthetic */ int f$3;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                        this.f$3 = r5;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$sendTyping$132$MessagesController(this.f$1, this.f$2, this.f$3, tLObject, tLRPC$TL_error);
                    }
                }, 2);
                if (i6 != 0) {
                    getConnectionsManager().bindRequestToGuid(sendRequest2, i6);
                }
            }
        }
        return true;
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$sendTyping$130 */
    public /* synthetic */ void lambda$sendTyping$130$MessagesController(int i, long j, int i2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable(i, j, i2) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ long f$2;
            public final /* synthetic */ int f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r5;
            }

            public final void run() {
                MessagesController.this.lambda$null$129$MessagesController(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$sendTyping$132 */
    public /* synthetic */ void lambda$sendTyping$132$MessagesController(int i, long j, int i2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable(i, j, i2) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ long f$2;
            public final /* synthetic */ int f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r5;
            }

            public final void run() {
                MessagesController.this.lambda$null$131$MessagesController(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    /* access modifiers changed from: protected */
    public void removeDeletedMessagesFromArray(long j, ArrayList<TLRPC$Message> arrayList) {
        int i = 0;
        int intValue = this.deletedHistory.get(j, 0).intValue();
        if (intValue != 0) {
            int size = arrayList.size();
            while (i < size) {
                if (arrayList.get(i).id <= intValue) {
                    arrayList.remove(i);
                    i--;
                    size--;
                }
                i++;
            }
        }
    }

    public void loadMessages(long j, long j2, boolean z, int i, int i2, int i3, boolean z2, int i4, int i5, int i6, int i7, boolean z3, int i8, int i9, int i10, int i11) {
        loadMessages(j, j2, z, i, i2, i3, z2, i4, i5, i6, i7, z3, i8, i9, i11, i9 != 0 ? i10 : 0, 0, 0, false, 0);
    }

    public void loadMessages(long j, long j2, boolean z, int i, int i2, int i3, boolean z2, int i4, int i5, int i6, int i7, boolean z3, int i8, int i9, int i10, int i11, int i12, int i13, boolean z4, int i14) {
        loadMessagesInternal(j, j2, z, i, i2, i3, z2, i4, i5, i6, i7, z3, i8, i9, i10, i11, i12, i13, z4, i14, true, true);
    }

    /* access modifiers changed from: private */
    public void loadMessagesInternal(long j, long j2, boolean z, int i, int i2, int i3, boolean z2, int i4, int i5, int i6, int i7, boolean z3, int i8, int i9, int i10, int i11, int i12, int i13, boolean z4, int i14, boolean z5, boolean z6) {
        long j3 = j;
        int i15 = i;
        int i16 = i2;
        int i17 = i3;
        boolean z7 = z2;
        int i18 = i4;
        int i19 = i5;
        int i20 = i6;
        int i21 = i7;
        int i22 = i8;
        int i23 = i9;
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("load messages in chat " + j3 + " count " + i15 + " max_id " + i16 + " cache " + z7 + " mindate = " + i18 + " guid " + i19 + " load_type " + i20 + " last_message_id " + i21 + " mode " + i22 + " index " + i10 + " firstUnread " + i11 + " unread_count " + i12 + " last_date " + i13 + " queryFromServer " + z4);
        } else {
            int i24 = i10;
            boolean z8 = z4;
        }
        int i25 = (int) j3;
        if (i23 == 0 && i22 != 2 && (z7 || i25 == 0)) {
            getMessagesStorage().getMessages(j, j2, z, i, i2, i3, i4, i5, i6, z3, i22 == 1, i9, i10, z6);
        } else if (i23 == 0) {
            int i26 = i19;
            if (i22 != 2) {
                if (i22 == 1) {
                    TLRPC$TL_messages_getScheduledHistory tLRPC$TL_messages_getScheduledHistory = new TLRPC$TL_messages_getScheduledHistory();
                    tLRPC$TL_messages_getScheduledHistory.peer = getInputPeer(i25);
                    tLRPC$TL_messages_getScheduledHistory.hash = i18;
                    $$Lambda$MessagesController$5dRwHLU9yf1VdE8b9oeprj33V9g r35 = r0;
                    ConnectionsManager connectionsManager = getConnectionsManager();
                    TLRPC$TL_messages_getScheduledHistory tLRPC$TL_messages_getScheduledHistory2 = tLRPC$TL_messages_getScheduledHistory;
                    int i27 = i20;
                    $$Lambda$MessagesController$5dRwHLU9yf1VdE8b9oeprj33V9g r0 = new RequestDelegate(this, i2, i3, j, j2, i, i5, i11, i7, i12, i13, i6, z3, i8, i9, i10, z4, i14, z6) {
                        public final /* synthetic */ MessagesController f$0;
                        public final /* synthetic */ int f$1;
                        public final /* synthetic */ int f$10;
                        public final /* synthetic */ int f$11;
                        public final /* synthetic */ boolean f$12;
                        public final /* synthetic */ int f$13;
                        public final /* synthetic */ int f$14;
                        public final /* synthetic */ int f$15;
                        public final /* synthetic */ boolean f$16;
                        public final /* synthetic */ int f$17;
                        public final /* synthetic */ boolean f$18;
                        public final /* synthetic */ int f$2;
                        public final /* synthetic */ long f$3;
                        public final /* synthetic */ long f$4;
                        public final /* synthetic */ int f$5;
                        public final /* synthetic */ int f$6;
                        public final /* synthetic */ int f$7;
                        public final /* synthetic */ int f$8;
                        public final /* synthetic */ int f$9;

                        {
                            this.f$0 = r4;
                            this.f$1 = r5;
                            this.f$2 = r6;
                            this.f$3 = r7;
                            this.f$4 = r9;
                            this.f$5 = r11;
                            this.f$6 = r12;
                            this.f$7 = r13;
                            this.f$8 = r14;
                            this.f$9 = r15;
                            this.f$10 = r16;
                            this.f$11 = r17;
                            this.f$12 = r18;
                            this.f$13 = r19;
                            this.f$14 = r20;
                            this.f$15 = r21;
                            this.f$16 = r22;
                            this.f$17 = r23;
                            this.f$18 = r24;
                        }

                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController messagesController = this.f$0;
                            MessagesController messagesController2 = messagesController;
                            messagesController2.lambda$loadMessagesInternal$135$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7, this.f$8, this.f$9, this.f$10, this.f$11, this.f$12, this.f$13, this.f$14, this.f$15, this.f$16, this.f$17, this.f$18, tLObject, tLRPC$TL_error);
                        }
                    };
                    getConnectionsManager().bindRequestToGuid(connectionsManager.sendRequest(tLRPC$TL_messages_getScheduledHistory2, r35), i5);
                    return;
                }
                int i28 = i20;
                if (!z5 || !((i28 == 3 || i28 == 2) && i7 == 0)) {
                    TLRPC$TL_messages_getHistory tLRPC$TL_messages_getHistory = new TLRPC$TL_messages_getHistory();
                    tLRPC$TL_messages_getHistory.peer = getInputPeer(i25);
                    if (i28 == 4) {
                        tLRPC$TL_messages_getHistory.add_offset = (-i15) + 5;
                    } else if (i28 == 3) {
                        tLRPC$TL_messages_getHistory.add_offset = (-i15) / 2;
                    } else if (i28 == 1) {
                        tLRPC$TL_messages_getHistory.add_offset = (-i15) - 1;
                    } else if (i28 == 2 && i16 != 0) {
                        tLRPC$TL_messages_getHistory.add_offset = (-i15) + 6;
                    } else if (i25 < 0 && i16 != 0 && ChatObject.isChannel(getChat(Integer.valueOf(-i25)))) {
                        tLRPC$TL_messages_getHistory.add_offset = -1;
                        tLRPC$TL_messages_getHistory.limit++;
                    }
                    tLRPC$TL_messages_getHistory.limit = i15;
                    tLRPC$TL_messages_getHistory.offset_id = i16;
                    tLRPC$TL_messages_getHistory.offset_date = i17;
                    TLRPC$TL_messages_getHistory tLRPC$TL_messages_getHistory2 = tLRPC$TL_messages_getHistory;
                    getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tLRPC$TL_messages_getHistory2, new RequestDelegate(this, j, i, i2, i3, j2, i5, i11, i7, i12, i13, i6, z3, i9, i10, z4, i14, z6, tLRPC$TL_messages_getHistory2) {
                        public final /* synthetic */ MessagesController f$0;
                        public final /* synthetic */ long f$1;
                        public final /* synthetic */ int f$10;
                        public final /* synthetic */ int f$11;
                        public final /* synthetic */ boolean f$12;
                        public final /* synthetic */ int f$13;
                        public final /* synthetic */ int f$14;
                        public final /* synthetic */ boolean f$15;
                        public final /* synthetic */ int f$16;
                        public final /* synthetic */ boolean f$17;
                        public final /* synthetic */ TLRPC$TL_messages_getHistory f$18;
                        public final /* synthetic */ int f$2;
                        public final /* synthetic */ int f$3;
                        public final /* synthetic */ int f$4;
                        public final /* synthetic */ long f$5;
                        public final /* synthetic */ int f$6;
                        public final /* synthetic */ int f$7;
                        public final /* synthetic */ int f$8;
                        public final /* synthetic */ int f$9;

                        {
                            this.f$0 = r4;
                            this.f$1 = r5;
                            this.f$2 = r7;
                            this.f$3 = r8;
                            this.f$4 = r9;
                            this.f$5 = r10;
                            this.f$6 = r12;
                            this.f$7 = r13;
                            this.f$8 = r14;
                            this.f$9 = r15;
                            this.f$10 = r16;
                            this.f$11 = r17;
                            this.f$12 = r18;
                            this.f$13 = r19;
                            this.f$14 = r20;
                            this.f$15 = r21;
                            this.f$16 = r22;
                            this.f$17 = r23;
                            this.f$18 = r24;
                        }

                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController messagesController = this.f$0;
                            MessagesController messagesController2 = messagesController;
                            messagesController2.lambda$loadMessagesInternal$139$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7, this.f$8, this.f$9, this.f$10, this.f$11, this.f$12, this.f$13, this.f$14, this.f$15, this.f$16, this.f$17, this.f$18, tLObject, tLRPC$TL_error);
                        }
                    }), i5);
                    return;
                }
                TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs = r13;
                TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs2 = new TLRPC$TL_messages_getPeerDialogs();
                TLRPC$InputPeer inputPeer = getInputPeer(i25);
                TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
                tLRPC$TL_inputDialogPeer.peer = inputPeer;
                tLRPC$TL_messages_getPeerDialogs2.peers.add(tLRPC$TL_inputDialogPeer);
                getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerDialogs2, new RequestDelegate(this, j, j2, z, i, i2, i3, i4, i5, i6, z3, i9, i10, i11, i13, z4, z6, tLRPC$TL_messages_getPeerDialogs) {
                    public final /* synthetic */ MessagesController f$0;
                    public final /* synthetic */ long f$1;
                    public final /* synthetic */ boolean f$10;
                    public final /* synthetic */ int f$11;
                    public final /* synthetic */ int f$12;
                    public final /* synthetic */ int f$13;
                    public final /* synthetic */ int f$14;
                    public final /* synthetic */ boolean f$15;
                    public final /* synthetic */ boolean f$16;
                    public final /* synthetic */ TLRPC$TL_messages_getPeerDialogs f$17;
                    public final /* synthetic */ long f$2;
                    public final /* synthetic */ boolean f$3;
                    public final /* synthetic */ int f$4;
                    public final /* synthetic */ int f$5;
                    public final /* synthetic */ int f$6;
                    public final /* synthetic */ int f$7;
                    public final /* synthetic */ int f$8;
                    public final /* synthetic */ int f$9;

                    {
                        this.f$0 = r4;
                        this.f$1 = r5;
                        this.f$2 = r7;
                        this.f$3 = r9;
                        this.f$4 = r10;
                        this.f$5 = r11;
                        this.f$6 = r12;
                        this.f$7 = r13;
                        this.f$8 = r14;
                        this.f$9 = r15;
                        this.f$10 = r16;
                        this.f$11 = r17;
                        this.f$12 = r18;
                        this.f$13 = r19;
                        this.f$14 = r20;
                        this.f$15 = r21;
                        this.f$16 = r22;
                        this.f$17 = r23;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController messagesController = this.f$0;
                        MessagesController messagesController2 = messagesController;
                        messagesController2.lambda$loadMessagesInternal$137$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7, this.f$8, this.f$9, this.f$10, this.f$11, this.f$12, this.f$13, this.f$14, this.f$15, this.f$16, this.f$17, tLObject, tLRPC$TL_error);
                    }
                });
            }
        } else if (i22 == 0) {
            TLRPC$TL_messages_getReplies tLRPC$TL_messages_getReplies = new TLRPC$TL_messages_getReplies();
            tLRPC$TL_messages_getReplies.peer = getInputPeer(i25);
            tLRPC$TL_messages_getReplies.msg_id = i23;
            tLRPC$TL_messages_getReplies.offset_date = i17;
            if (i20 == 4) {
                tLRPC$TL_messages_getReplies.add_offset = (-i15) + 5;
            } else if (i20 == 3) {
                tLRPC$TL_messages_getReplies.add_offset = (-i15) / 2;
            } else if (i20 == 1) {
                tLRPC$TL_messages_getReplies.add_offset = (-i15) - 1;
            } else if (i20 == 2 && i16 != 0) {
                tLRPC$TL_messages_getReplies.add_offset = (-i15) + 10;
            } else if (i25 < 0 && i16 != 0 && ChatObject.isChannel(getChat(Integer.valueOf(-i25)))) {
                tLRPC$TL_messages_getReplies.add_offset = -1;
                tLRPC$TL_messages_getReplies.limit++;
            }
            tLRPC$TL_messages_getReplies.limit = i15;
            tLRPC$TL_messages_getReplies.offset_id = i16;
            TLRPC$TL_messages_getReplies tLRPC$TL_messages_getReplies2 = tLRPC$TL_messages_getReplies;
            getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tLRPC$TL_messages_getReplies2, new RequestDelegate(this, i, i2, i3, i11, i6, j, j2, i5, i7, i12, i13, z3, i9, i10, z4, i14, z6, tLRPC$TL_messages_getReplies2) {
                public final /* synthetic */ MessagesController f$0;
                public final /* synthetic */ int f$1;
                public final /* synthetic */ int f$10;
                public final /* synthetic */ int f$11;
                public final /* synthetic */ boolean f$12;
                public final /* synthetic */ int f$13;
                public final /* synthetic */ int f$14;
                public final /* synthetic */ boolean f$15;
                public final /* synthetic */ int f$16;
                public final /* synthetic */ boolean f$17;
                public final /* synthetic */ TLRPC$TL_messages_getReplies f$18;
                public final /* synthetic */ int f$2;
                public final /* synthetic */ int f$3;
                public final /* synthetic */ int f$4;
                public final /* synthetic */ int f$5;
                public final /* synthetic */ long f$6;
                public final /* synthetic */ long f$7;
                public final /* synthetic */ int f$8;
                public final /* synthetic */ int f$9;

                {
                    this.f$0 = r4;
                    this.f$1 = r5;
                    this.f$2 = r6;
                    this.f$3 = r7;
                    this.f$4 = r8;
                    this.f$5 = r9;
                    this.f$6 = r10;
                    this.f$7 = r12;
                    this.f$8 = r14;
                    this.f$9 = r15;
                    this.f$10 = r16;
                    this.f$11 = r17;
                    this.f$12 = r18;
                    this.f$13 = r19;
                    this.f$14 = r20;
                    this.f$15 = r21;
                    this.f$16 = r22;
                    this.f$17 = r23;
                    this.f$18 = r24;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController messagesController = this.f$0;
                    MessagesController messagesController2 = messagesController;
                    messagesController2.lambda$loadMessagesInternal$134$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7, this.f$8, this.f$9, this.f$10, this.f$11, this.f$12, this.f$13, this.f$14, this.f$15, this.f$16, this.f$17, this.f$18, tLObject, tLRPC$TL_error);
                }
            }), i5);
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$loadMessagesInternal$134 */
    public /* synthetic */ void lambda$loadMessagesInternal$134$MessagesController(int i, int i2, int i3, int i4, int i5, long j, long j2, int i6, int i7, int i8, int i9, boolean z, int i10, int i11, boolean z2, int i12, boolean z3, TLRPC$TL_messages_getReplies tLRPC$TL_messages_getReplies, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        int i13;
        int i14;
        int i15 = i3;
        int i16 = i4;
        if (tLObject != null) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
            if (tLRPC$messages_Messages.messages.size() > i) {
                tLRPC$messages_Messages.messages.remove(0);
            }
            if (!tLRPC$messages_Messages.messages.isEmpty()) {
                if (i15 != 0) {
                    ArrayList<TLRPC$Message> arrayList = tLRPC$messages_Messages.messages;
                    int i17 = arrayList.get(arrayList.size() - 1).id;
                    int size = tLRPC$messages_Messages.messages.size() - 1;
                    while (true) {
                        if (size < 0) {
                            break;
                        }
                        TLRPC$Message tLRPC$Message = tLRPC$messages_Messages.messages.get(size);
                        if (tLRPC$Message.date > i15) {
                            i17 = tLRPC$Message.id;
                            break;
                        }
                        size--;
                    }
                    int i18 = i5;
                    i14 = i17;
                    i13 = 0;
                    processLoadedMessages(tLRPC$messages_Messages, tLRPC$messages_Messages.messages.size(), j, j2, i, i14, i3, false, i6, i13, i7, i8, i9, i5, z, false, 0, i10, i11, z2, i12, z3);
                    return;
                } else if (i16 != 0) {
                    if (i5 == 2 && i2 > 0) {
                        for (int size2 = tLRPC$messages_Messages.messages.size() - 1; size2 >= 0; size2--) {
                            TLRPC$Message tLRPC$Message2 = tLRPC$messages_Messages.messages.get(size2);
                            int i19 = tLRPC$Message2.id;
                            if (i19 > i16 && !tLRPC$Message2.out) {
                                i14 = i2;
                                i13 = i19;
                                break;
                            }
                        }
                    }
                    i14 = i2;
                    i13 = 0;
                    processLoadedMessages(tLRPC$messages_Messages, tLRPC$messages_Messages.messages.size(), j, j2, i, i14, i3, false, i6, i13, i7, i8, i9, i5, z, false, 0, i10, i11, z2, i12, z3);
                    return;
                }
            }
            int i20 = i5;
            i14 = i2;
            i13 = 0;
            processLoadedMessages(tLRPC$messages_Messages, tLRPC$messages_Messages.messages.size(), j, j2, i, i14, i3, false, i6, i13, i7, i8, i9, i5, z, false, 0, i10, i11, z2, i12, z3);
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable(i6, tLRPC$TL_messages_getReplies, tLRPC$TL_error) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ TLRPC$TL_messages_getReplies f$2;
            public final /* synthetic */ TLRPC$TL_error f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesController.this.lambda$null$133$MessagesController(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$133 */
    public /* synthetic */ void lambda$null$133$MessagesController(int i, TLRPC$TL_messages_getReplies tLRPC$TL_messages_getReplies, TLRPC$TL_error tLRPC$TL_error) {
        getNotificationCenter().postNotificationName(NotificationCenter.loadingMessagesFailed, Integer.valueOf(i), tLRPC$TL_messages_getReplies, tLRPC$TL_error);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$loadMessagesInternal$135 */
    public /* synthetic */ void lambda$loadMessagesInternal$135$MessagesController(int i, int i2, long j, long j2, int i3, int i4, int i5, int i6, int i7, int i8, int i9, boolean z, int i10, int i11, int i12, boolean z2, int i13, boolean z3, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        int i14;
        int i15 = i2;
        if (tLObject != null) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
            if (!(tLRPC$messages_Messages instanceof TLRPC$TL_messages_messagesNotModified)) {
                if (i15 == 0 || tLRPC$messages_Messages.messages.isEmpty()) {
                    i14 = i;
                } else {
                    ArrayList<TLRPC$Message> arrayList = tLRPC$messages_Messages.messages;
                    int i16 = arrayList.get(arrayList.size() - 1).id;
                    int size = tLRPC$messages_Messages.messages.size() - 1;
                    while (true) {
                        if (size < 0) {
                            break;
                        }
                        TLRPC$Message tLRPC$Message = tLRPC$messages_Messages.messages.get(size);
                        if (tLRPC$Message.date > i15) {
                            i16 = tLRPC$Message.id;
                            break;
                        }
                        size--;
                    }
                    i14 = i16;
                }
                processLoadedMessages(tLRPC$messages_Messages, tLRPC$messages_Messages.messages.size(), j, j2, i3, i14, i2, false, i4, i5, i6, i7, i8, i9, z, false, i10, i11, i12, z2, i13, z3);
            }
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$loadMessagesInternal$137 */
    public /* synthetic */ void lambda$loadMessagesInternal$137$MessagesController(long j, long j2, boolean z, int i, int i2, int i3, int i4, int i5, int i6, boolean z2, int i7, int i8, int i9, int i10, boolean z3, boolean z4, TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject;
            if (!tLRPC$TL_messages_peerDialogs.dialogs.isEmpty()) {
                TLRPC$Dialog tLRPC$Dialog = tLRPC$TL_messages_peerDialogs.dialogs.get(0);
                if (tLRPC$Dialog.top_message != 0) {
                    TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
                    tLRPC$TL_messages_dialogs.chats = tLRPC$TL_messages_peerDialogs.chats;
                    tLRPC$TL_messages_dialogs.users = tLRPC$TL_messages_peerDialogs.users;
                    tLRPC$TL_messages_dialogs.dialogs = tLRPC$TL_messages_peerDialogs.dialogs;
                    tLRPC$TL_messages_dialogs.messages = tLRPC$TL_messages_peerDialogs.messages;
                    getMessagesStorage().putDialogs(tLRPC$TL_messages_dialogs, 2);
                }
                loadMessagesInternal(j, j2, z, i, i2, i3, false, i4, i5, i6, tLRPC$Dialog.top_message, z2, 0, i7, i8, i9, tLRPC$Dialog.unread_count, i10, z3, tLRPC$Dialog.unread_mentions_count, false, z4);
            }
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable(i5, tLRPC$TL_messages_getPeerDialogs, tLRPC$TL_error) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ TLRPC$TL_messages_getPeerDialogs f$2;
            public final /* synthetic */ TLRPC$TL_error f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesController.this.lambda$null$136$MessagesController(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$136 */
    public /* synthetic */ void lambda$null$136$MessagesController(int i, TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs, TLRPC$TL_error tLRPC$TL_error) {
        getNotificationCenter().postNotificationName(NotificationCenter.loadingMessagesFailed, Integer.valueOf(i), tLRPC$TL_messages_getPeerDialogs, tLRPC$TL_error);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$loadMessagesInternal$139 */
    public /* synthetic */ void lambda$loadMessagesInternal$139$MessagesController(long j, int i, int i2, int i3, long j2, int i4, int i5, int i6, int i7, int i8, int i9, boolean z, int i10, int i11, boolean z2, int i12, boolean z3, TLRPC$TL_messages_getHistory tLRPC$TL_messages_getHistory, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        int i13;
        int i14 = i3;
        if (tLObject != null) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
            removeDeletedMessagesFromArray(j, tLRPC$messages_Messages.messages);
            if (tLRPC$messages_Messages.messages.size() > i) {
                tLRPC$messages_Messages.messages.remove(0);
            }
            if (i14 == 0 || tLRPC$messages_Messages.messages.isEmpty()) {
                i13 = i2;
            } else {
                ArrayList<TLRPC$Message> arrayList = tLRPC$messages_Messages.messages;
                int i15 = arrayList.get(arrayList.size() - 1).id;
                int size = tLRPC$messages_Messages.messages.size() - 1;
                while (true) {
                    if (size < 0) {
                        break;
                    }
                    TLRPC$Message tLRPC$Message = tLRPC$messages_Messages.messages.get(size);
                    if (tLRPC$Message.date > i14) {
                        i15 = tLRPC$Message.id;
                        break;
                    }
                    size--;
                }
                i13 = i15;
            }
            processLoadedMessages(tLRPC$messages_Messages, tLRPC$messages_Messages.messages.size(), j, j2, i, i13, i3, false, i4, i5, i6, i7, i8, i9, z, false, 0, i10, i11, z2, i12, z3);
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable(i4, tLRPC$TL_messages_getHistory, tLRPC$TL_error) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ TLRPC$TL_messages_getHistory f$2;
            public final /* synthetic */ TLRPC$TL_error f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesController.this.lambda$null$138$MessagesController(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$138 */
    public /* synthetic */ void lambda$null$138$MessagesController(int i, TLRPC$TL_messages_getHistory tLRPC$TL_messages_getHistory, TLRPC$TL_error tLRPC$TL_error) {
        getNotificationCenter().postNotificationName(NotificationCenter.loadingMessagesFailed, Integer.valueOf(i), tLRPC$TL_messages_getHistory, tLRPC$TL_error);
    }

    public void reloadWebPages(long j, HashMap<String, ArrayList<MessageObject>> hashMap, boolean z) {
        HashMap<String, ArrayList<MessageObject>> hashMap2 = z ? this.reloadingScheduledWebpages : this.reloadingWebpages;
        LongSparseArray<ArrayList<MessageObject>> longSparseArray = z ? this.reloadingScheduledWebpagesPending : this.reloadingWebpagesPending;
        for (Map.Entry next : hashMap.entrySet()) {
            String str = (String) next.getKey();
            ArrayList arrayList = (ArrayList) next.getValue();
            ArrayList arrayList2 = hashMap2.get(str);
            if (arrayList2 == null) {
                arrayList2 = new ArrayList();
                hashMap2.put(str, arrayList2);
            }
            arrayList2.addAll(arrayList);
            TLRPC$TL_messages_getWebPagePreview tLRPC$TL_messages_getWebPagePreview = new TLRPC$TL_messages_getWebPagePreview();
            tLRPC$TL_messages_getWebPagePreview.message = str;
            getConnectionsManager().sendRequest(tLRPC$TL_messages_getWebPagePreview, new RequestDelegate(hashMap2, str, longSparseArray, j, z) {
                public final /* synthetic */ HashMap f$1;
                public final /* synthetic */ String f$2;
                public final /* synthetic */ LongSparseArray f$3;
                public final /* synthetic */ long f$4;
                public final /* synthetic */ boolean f$5;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r5;
                    this.f$5 = r7;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$reloadWebPages$141$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$reloadWebPages$141 */
    public /* synthetic */ void lambda$reloadWebPages$141$MessagesController(HashMap hashMap, String str, LongSparseArray longSparseArray, long j, boolean z, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable(hashMap, str, tLObject, longSparseArray, j, z) {
            public final /* synthetic */ HashMap f$1;
            public final /* synthetic */ String f$2;
            public final /* synthetic */ TLObject f$3;
            public final /* synthetic */ LongSparseArray f$4;
            public final /* synthetic */ long f$5;
            public final /* synthetic */ boolean f$6;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r8;
            }

            public final void run() {
                MessagesController.this.lambda$null$140$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$140 */
    public /* synthetic */ void lambda$null$140$MessagesController(HashMap hashMap, String str, TLObject tLObject, LongSparseArray longSparseArray, long j, boolean z) {
        TLObject tLObject2 = tLObject;
        ArrayList arrayList = (ArrayList) hashMap.remove(str);
        if (arrayList != null) {
            TLRPC$TL_messages_messages tLRPC$TL_messages_messages = new TLRPC$TL_messages_messages();
            if (!(tLObject2 instanceof TLRPC$TL_messageMediaWebPage)) {
                for (int i = 0; i < arrayList.size(); i++) {
                    ((MessageObject) arrayList.get(i)).messageOwner.media.webpage = new TLRPC$TL_webPageEmpty();
                    tLRPC$TL_messages_messages.messages.add(((MessageObject) arrayList.get(i)).messageOwner);
                }
            } else {
                TLRPC$TL_messageMediaWebPage tLRPC$TL_messageMediaWebPage = (TLRPC$TL_messageMediaWebPage) tLObject2;
                TLRPC$WebPage tLRPC$WebPage = tLRPC$TL_messageMediaWebPage.webpage;
                if ((tLRPC$WebPage instanceof TLRPC$TL_webPage) || (tLRPC$WebPage instanceof TLRPC$TL_webPageEmpty)) {
                    for (int i2 = 0; i2 < arrayList.size(); i2++) {
                        ((MessageObject) arrayList.get(i2)).messageOwner.media.webpage = tLRPC$TL_messageMediaWebPage.webpage;
                        if (i2 == 0) {
                            ImageLoader.saveMessageThumbs(((MessageObject) arrayList.get(i2)).messageOwner);
                        }
                        tLRPC$TL_messages_messages.messages.add(((MessageObject) arrayList.get(i2)).messageOwner);
                    }
                } else {
                    LongSparseArray longSparseArray2 = longSparseArray;
                    longSparseArray.put(tLRPC$WebPage.id, arrayList);
                }
            }
            if (!tLRPC$TL_messages_messages.messages.isEmpty()) {
                getMessagesStorage().putMessages((TLRPC$messages_Messages) tLRPC$TL_messages_messages, j, -2, 0, false, z);
                getNotificationCenter().postNotificationName(NotificationCenter.replaceMessagesObjects, Long.valueOf(j), arrayList);
            }
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:143:0x03d9, code lost:
        if (r1[0] < 122) goto L_0x03df;
     */
    /* JADX WARNING: Removed duplicated region for block: B:115:0x0331  */
    /* JADX WARNING: Removed duplicated region for block: B:118:0x0336 A[ADDED_TO_REGION] */
    /* JADX WARNING: Removed duplicated region for block: B:123:0x0363  */
    /* JADX WARNING: Removed duplicated region for block: B:150:0x03f2  */
    /* JADX WARNING: Removed duplicated region for block: B:165:0x044d  */
    /* JADX WARNING: Removed duplicated region for block: B:180:0x0435 A[SYNTHETIC] */
    /* JADX WARNING: Removed duplicated region for block: B:23:0x0113  */
    /* JADX WARNING: Removed duplicated region for block: B:32:0x0140  */
    /* JADX WARNING: Removed duplicated region for block: B:35:0x0145  */
    /* JADX WARNING: Removed duplicated region for block: B:60:0x021a A[RETURN] */
    /* JADX WARNING: Removed duplicated region for block: B:65:0x0231 A[LOOP:1: B:63:0x0229->B:65:0x0231, LOOP_END] */
    /* JADX WARNING: Removed duplicated region for block: B:69:0x024a A[LOOP:2: B:67:0x0242->B:69:0x024a, LOOP_END] */
    /* JADX WARNING: Removed duplicated region for block: B:72:0x0264  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void processLoadedMessages(org.telegram.tgnet.TLRPC$messages_Messages r33, int r34, long r35, long r37, int r39, int r40, int r41, boolean r42, int r43, int r44, int r45, int r46, int r47, int r48, boolean r49, boolean r50, int r51, int r52, int r53, boolean r54, int r55, boolean r56) {
        /*
            r32 = this;
            r15 = r32
            r14 = r33
            r12 = r35
            r11 = r40
            r10 = r42
            r9 = r51
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x00a7
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "processLoadedMessages size "
            r0.append(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r14.messages
            int r1 = r1.size()
            r0.append(r1)
            java.lang.String r1 = " in chat "
            r0.append(r1)
            r0.append(r12)
            java.lang.String r1 = " count "
            r0.append(r1)
            r8 = r39
            r0.append(r8)
            java.lang.String r1 = " max_id "
            r0.append(r1)
            r0.append(r11)
            java.lang.String r1 = " cache "
            r0.append(r1)
            r0.append(r10)
            java.lang.String r1 = " guid "
            r0.append(r1)
            r7 = r43
            r0.append(r7)
            java.lang.String r1 = " load_type "
            r0.append(r1)
            r6 = r48
            r0.append(r6)
            java.lang.String r1 = " last_message_id "
            r0.append(r1)
            r5 = r45
            r0.append(r5)
            java.lang.String r1 = " isChannel "
            r0.append(r1)
            r3 = r49
            r0.append(r3)
            java.lang.String r1 = " index "
            r0.append(r1)
            r4 = r53
            r0.append(r4)
            java.lang.String r1 = " firstUnread "
            r0.append(r1)
            r2 = r44
            r0.append(r2)
            java.lang.String r1 = " unread_count "
            r0.append(r1)
            r1 = r46
            r0.append(r1)
            java.lang.String r1 = " last_date "
            r0.append(r1)
            r1 = r47
            r0.append(r1)
            java.lang.String r1 = " queryFromServer "
            r0.append(r1)
            r1 = r54
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
            goto L_0x00b7
        L_0x00a7:
            r8 = r39
            r7 = r43
            r2 = r44
            r5 = r45
            r6 = r48
            r3 = r49
            r4 = r53
            r1 = r54
        L_0x00b7:
            long r23 = android.os.SystemClock.elapsedRealtime()
            boolean r0 = r14 instanceof org.telegram.tgnet.TLRPC$TL_messages_channelMessages
            if (r0 == 0) goto L_0x0108
            int r0 = (int) r12
            int r0 = -r0
            if (r9 != 0) goto L_0x0108
            if (r52 != 0) goto L_0x0108
            android.util.SparseIntArray r5 = r15.channelsPts
            int r5 = r5.get(r0)
            if (r5 != 0) goto L_0x0108
            org.telegram.messenger.MessagesStorage r5 = r32.getMessagesStorage()
            int r5 = r5.getChannelPtsSync(r0)
            if (r5 != 0) goto L_0x0108
            android.util.SparseIntArray r5 = r15.channelsPts
            int r1 = r14.pts
            r5.put(r0, r1)
            android.util.SparseArray<java.util.ArrayList<java.lang.Integer>> r1 = r15.needShortPollChannels
            int r1 = r1.indexOfKey(r0)
            if (r1 < 0) goto L_0x0100
            android.util.SparseIntArray r1 = r15.shortPollChannels
            int r1 = r1.indexOfKey(r0)
            if (r1 >= 0) goto L_0x0100
            r5 = 2
            r18 = 0
            r20 = 0
            r1 = r0
            r0 = r32
            r2 = r5
            r3 = r18
            r8 = 1
            r5 = r20
            r0.getChannelDifference(r1, r2, r3, r5)
            goto L_0x0105
        L_0x0100:
            r1 = r0
            r8 = 1
            r15.getChannelDifference(r1)
        L_0x0105:
            r25 = 1
            goto L_0x010b
        L_0x0108:
            r8 = 1
            r25 = 0
        L_0x010b:
            int r4 = (int) r12
            r0 = 32
            long r0 = r12 >> r0
            int r1 = (int) r0
            if (r10 != 0) goto L_0x0118
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r0 = r14.messages
            org.telegram.messenger.ImageLoader.saveMessagesThumbs(r0)
        L_0x0118:
            if (r41 != 0) goto L_0x011e
            if (r11 != 0) goto L_0x011e
            r5 = 1
            goto L_0x011f
        L_0x011e:
            r5 = 0
        L_0x011f:
            r2 = 60000(0xea60, double:2.9644E-319)
            r26 = 0
            if (r9 != r8) goto L_0x0142
            long r16 = android.os.SystemClock.elapsedRealtime()
            android.util.LongSparseArray<java.lang.Long> r8 = r15.lastScheduledServerQueryTime
            java.lang.Long r0 = java.lang.Long.valueOf(r26)
            java.lang.Object r0 = r8.get(r12, r0)
            java.lang.Long r0 = (java.lang.Long) r0
            long r20 = r0.longValue()
            long r16 = r16 - r20
            int r0 = (r16 > r2 ? 1 : (r16 == r2 ? 0 : -1))
            if (r0 <= 0) goto L_0x0145
        L_0x0140:
            r0 = 1
            goto L_0x0146
        L_0x0142:
            r0 = 2
            if (r9 != r0) goto L_0x0148
        L_0x0145:
            r0 = 0
        L_0x0146:
            r2 = 1
            goto L_0x0163
        L_0x0148:
            long r16 = android.os.SystemClock.elapsedRealtime()
            android.util.LongSparseArray<java.lang.Long> r0 = r15.lastServerQueryTime
            java.lang.Long r8 = java.lang.Long.valueOf(r26)
            java.lang.Object r0 = r0.get(r12, r8)
            java.lang.Long r0 = (java.lang.Long) r0
            long r20 = r0.longValue()
            long r16 = r16 - r20
            int r0 = (r16 > r2 ? 1 : (r16 == r2 ? 0 : -1))
            if (r0 <= 0) goto L_0x0145
            goto L_0x0140
        L_0x0163:
            if (r1 == r2) goto L_0x021b
            if (r4 == 0) goto L_0x021b
            if (r10 == 0) goto L_0x021b
            if (r34 != 0) goto L_0x021b
            if (r5 == 0) goto L_0x016f
            if (r0 == 0) goto L_0x021b
        L_0x016f:
            r0 = 2
            if (r9 != r0) goto L_0x0176
            r8 = 1
        L_0x0173:
            r16 = 0
            goto L_0x01dc
        L_0x0176:
            if (r9 != r2) goto L_0x01cd
            android.util.LongSparseArray<java.lang.Long> r0 = r15.lastScheduledServerQueryTime
            long r1 = android.os.SystemClock.elapsedRealtime()
            java.lang.Long r1 = java.lang.Long.valueOf(r1)
            r0.put(r12, r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r0 = r14.messages
            int r0 = r0.size()
            r1 = r26
            r5 = 0
        L_0x018e:
            if (r5 >= r0) goto L_0x01c7
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r3 = r14.messages
            java.lang.Object r3 = r3.get(r5)
            org.telegram.tgnet.TLRPC$Message r3 = (org.telegram.tgnet.TLRPC$Message) r3
            int r8 = r3.id
            if (r8 >= 0) goto L_0x019d
            goto L_0x01c0
        L_0x019d:
            r16 = 20261(0x4var_, double:1.00103E-319)
            long r1 = r1 * r16
            r19 = 2147483648(0x80000000, double:1.0609978955E-314)
            long r1 = r1 + r19
            long r6 = (long) r8
            long r1 = r1 + r6
            long r1 = r1 % r19
            long r1 = r1 * r16
            long r1 = r1 + r19
            int r6 = r3.edit_date
            long r6 = (long) r6
            long r1 = r1 + r6
            long r1 = r1 % r19
            long r1 = r1 * r16
            long r1 = r1 + r19
            int r3 = r3.date
            long r6 = (long) r3
            long r1 = r1 + r6
            long r1 = r1 % r19
        L_0x01c0:
            int r5 = r5 + 1
            r7 = r43
            r6 = r48
            goto L_0x018e
        L_0x01c7:
            int r0 = (int) r1
            r8 = 1
            int r0 = r0 - r8
            r16 = r0
            goto L_0x01dc
        L_0x01cd:
            r8 = 1
            android.util.LongSparseArray<java.lang.Long> r0 = r15.lastServerQueryTime
            long r1 = android.os.SystemClock.elapsedRealtime()
            java.lang.Long r1 = java.lang.Long.valueOf(r1)
            r0.put(r12, r1)
            goto L_0x0173
        L_0x01dc:
            org.telegram.messenger.-$$Lambda$MessagesController$oa4bzDuIH9aDeBq7oVN6gdhj0Yc r28 = new org.telegram.messenger.-$$Lambda$MessagesController$oa4bzDuIH9aDeBq7oVN6gdhj0Yc
            r0 = r28
            r1 = r32
            r2 = r35
            r29 = r4
            r4 = r37
            r6 = r39
            r7 = r48
            r8 = r54
            r9 = r44
            r10 = r40
            r11 = r41
            r12 = r16
            r13 = r43
            r14 = r45
            r15 = r49
            r16 = r51
            r17 = r52
            r18 = r53
            r19 = r46
            r20 = r47
            r21 = r55
            r22 = r56
            r0.<init>(r1, r2, r4, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r28)
            r8 = r33
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r0 = r8.messages
            boolean r0 = r0.isEmpty()
            if (r0 == 0) goto L_0x021e
            return
        L_0x021b:
            r29 = r4
            r8 = r14
        L_0x021e:
            android.util.SparseArray r9 = new android.util.SparseArray
            r9.<init>()
            android.util.SparseArray r10 = new android.util.SparseArray
            r10.<init>()
            r5 = 0
        L_0x0229:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r0 = r8.users
            int r0 = r0.size()
            if (r5 >= r0) goto L_0x0241
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r0 = r8.users
            java.lang.Object r0 = r0.get(r5)
            org.telegram.tgnet.TLRPC$User r0 = (org.telegram.tgnet.TLRPC$User) r0
            int r1 = r0.id
            r9.put(r1, r0)
            int r5 = r5 + 1
            goto L_0x0229
        L_0x0241:
            r5 = 0
        L_0x0242:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r0 = r8.chats
            int r0 = r0.size()
            if (r5 >= r0) goto L_0x025a
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r0 = r8.chats
            java.lang.Object r0 = r0.get(r5)
            org.telegram.tgnet.TLRPC$Chat r0 = (org.telegram.tgnet.TLRPC$Chat) r0
            int r1 = r0.id
            r10.put(r1, r0)
            int r5 = r5 + 1
            goto L_0x0242
        L_0x025a:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r0 = r8.messages
            int r11 = r0.size()
            r15 = r32
            if (r42 != 0) goto L_0x0331
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r0 = r15.dialogs_read_inbox_max
            java.lang.Long r1 = java.lang.Long.valueOf(r35)
            java.lang.Object r0 = r0.get(r1)
            java.lang.Integer r0 = (java.lang.Integer) r0
            if (r0 != 0) goto L_0x028b
            org.telegram.messenger.MessagesStorage r0 = r32.getMessagesStorage()
            r12 = r35
            r14 = 0
            int r0 = r0.getDialogReadMax(r14, r12)
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r15.dialogs_read_inbox_max
            java.lang.Long r2 = java.lang.Long.valueOf(r35)
            r1.put(r2, r0)
            goto L_0x028e
        L_0x028b:
            r12 = r35
            r14 = 0
        L_0x028e:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r15.dialogs_read_outbox_max
            java.lang.Long r2 = java.lang.Long.valueOf(r35)
            java.lang.Object r1 = r1.get(r2)
            java.lang.Integer r1 = (java.lang.Integer) r1
            if (r1 != 0) goto L_0x02b3
            org.telegram.messenger.MessagesStorage r1 = r32.getMessagesStorage()
            r7 = 1
            int r1 = r1.getDialogReadMax(r7, r12)
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r2 = r15.dialogs_read_outbox_max
            java.lang.Long r3 = java.lang.Long.valueOf(r35)
            r2.put(r3, r1)
            goto L_0x02b4
        L_0x02b3:
            r7 = 1
        L_0x02b4:
            r5 = 0
        L_0x02b5:
            if (r5 >= r11) goto L_0x0310
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r2 = r8.messages
            java.lang.Object r2 = r2.get(r5)
            org.telegram.tgnet.TLRPC$Message r2 = (org.telegram.tgnet.TLRPC$Message) r2
            r6 = r51
            if (r6 != 0) goto L_0x030d
            org.telegram.tgnet.TLRPC$MessageAction r3 = r2.action
            boolean r4 = r3 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatDeleteUser
            if (r4 == 0) goto L_0x02e4
            int r3 = r3.user_id
            java.lang.Object r3 = r9.get(r3)
            org.telegram.tgnet.TLRPC$User r3 = (org.telegram.tgnet.TLRPC$User) r3
            if (r3 == 0) goto L_0x02e4
            boolean r3 = r3.bot
            if (r3 == 0) goto L_0x02e4
            org.telegram.tgnet.TLRPC$TL_replyKeyboardHide r3 = new org.telegram.tgnet.TLRPC$TL_replyKeyboardHide
            r3.<init>()
            r2.reply_markup = r3
            int r3 = r2.flags
            r3 = r3 | 64
            r2.flags = r3
        L_0x02e4:
            org.telegram.tgnet.TLRPC$MessageAction r3 = r2.action
            boolean r4 = r3 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatMigrateTo
            if (r4 != 0) goto L_0x0309
            boolean r3 = r3 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChannelCreate
            if (r3 == 0) goto L_0x02ef
            goto L_0x0309
        L_0x02ef:
            if (r52 != 0) goto L_0x0306
            boolean r3 = r2.out
            if (r3 == 0) goto L_0x02f7
            r3 = r1
            goto L_0x02f8
        L_0x02f7:
            r3 = r0
        L_0x02f8:
            int r3 = r3.intValue()
            int r4 = r2.id
            if (r3 >= r4) goto L_0x0302
            r3 = 1
            goto L_0x0303
        L_0x0302:
            r3 = 0
        L_0x0303:
            r2.unread = r3
            goto L_0x030d
        L_0x0306:
            r2.unread = r7
            goto L_0x030d
        L_0x0309:
            r2.unread = r14
            r2.media_unread = r14
        L_0x030d:
            int r5 = r5 + 1
            goto L_0x02b5
        L_0x0310:
            r6 = r51
            if (r52 != 0) goto L_0x0333
            org.telegram.messenger.MessagesStorage r0 = r32.getMessagesStorage()
            if (r6 != r7) goto L_0x031d
            r16 = 1
            goto L_0x031f
        L_0x031d:
            r16 = 0
        L_0x031f:
            r1 = r33
            r2 = r35
            r4 = r48
            r5 = r40
            r14 = r6
            r6 = r25
            r14 = 1
            r7 = r16
            r0.putMessages((org.telegram.tgnet.TLRPC$messages_Messages) r1, (long) r2, (int) r4, (int) r5, (boolean) r6, (boolean) r7)
            goto L_0x0334
        L_0x0331:
            r12 = r35
        L_0x0333:
            r14 = 1
        L_0x0334:
            if (r56 != 0) goto L_0x034f
            if (r29 != 0) goto L_0x034f
            org.telegram.messenger.-$$Lambda$MessagesController$Vi-glNa_ykUiSkkn7BJhcXQlUsE r0 = new org.telegram.messenger.-$$Lambda$MessagesController$Vi-glNa_ykUiSkkn7BJhcXQlUsE
            r34 = r0
            r35 = r32
            r36 = r43
            r37 = r33
            r38 = r42
            r39 = r50
            r40 = r45
            r34.<init>(r36, r37, r38, r39, r40)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r0)
            return
        L_0x034f:
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            java.util.ArrayList r7 = new java.util.ArrayList
            r7.<init>()
            java.util.HashMap r6 = new java.util.HashMap
            r6.<init>()
            r3 = r26
            r5 = 0
        L_0x0361:
            if (r5 >= r11) goto L_0x0443
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r8.messages
            java.lang.Object r1 = r1.get(r5)
            r2 = r1
            org.telegram.tgnet.TLRPC$Message r2 = (org.telegram.tgnet.TLRPC$Message) r2
            r2.dialog_id = r12
            long r16 = android.os.SystemClock.elapsedRealtime()
            org.telegram.messenger.MessageObject r1 = new org.telegram.messenger.MessageObject
            int r14 = r15.currentAccount
            r18 = 1
            r19 = 1
            r37 = r1
            r38 = r2
            r2 = r14
            r30 = r3
            r3 = r38
            r4 = r9
            r14 = r5
            r5 = r10
            r15 = r6
            r6 = r18
            r41 = r11
            r11 = r7
            r7 = r19
            r1.<init>((int) r2, (org.telegram.tgnet.TLRPC$Message) r3, (android.util.SparseArray<org.telegram.tgnet.TLRPC$User>) r4, (android.util.SparseArray<org.telegram.tgnet.TLRPC$Chat>) r5, (boolean) r6, (boolean) r7)
            long r1 = android.os.SystemClock.elapsedRealtime()
            long r1 = r1 - r16
            r3 = r30
            long r3 = r3 + r1
            r5 = r51
            r1 = 1
            r6 = r37
            if (r5 != r1) goto L_0x03a3
            r2 = 1
            goto L_0x03a4
        L_0x03a3:
            r2 = 0
        L_0x03a4:
            r6.scheduled = r2
            r0.add(r6)
            if (r42 == 0) goto L_0x0432
            r2 = r38
            boolean r7 = r2.legacy
            r1 = 122(0x7a, float:1.71E-43)
            if (r7 == 0) goto L_0x03c1
            int r7 = r2.layer
            if (r7 >= r1) goto L_0x03c1
            int r1 = r2.id
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            r11.add(r1)
            goto L_0x03e9
        L_0x03c1:
            org.telegram.tgnet.TLRPC$MessageMedia r7 = r2.media
            boolean r1 = r7 instanceof org.telegram.tgnet.TLRPC$TL_messageMediaUnsupported
            if (r1 == 0) goto L_0x03e9
            byte[] r1 = r7.bytes
            if (r1 == 0) goto L_0x03e9
            int r7 = r1.length
            if (r7 == 0) goto L_0x03dc
            int r7 = r1.length
            r38 = r0
            r0 = 1
            if (r7 != r0) goto L_0x03eb
            r7 = 0
            byte r1 = r1[r7]
            r0 = 122(0x7a, float:1.71E-43)
            if (r1 >= r0) goto L_0x03ec
            goto L_0x03df
        L_0x03dc:
            r38 = r0
            r7 = 0
        L_0x03df:
            int r0 = r2.id
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)
            r11.add(r0)
            goto L_0x03ec
        L_0x03e9:
            r38 = r0
        L_0x03eb:
            r7 = 0
        L_0x03ec:
            org.telegram.tgnet.TLRPC$MessageMedia r0 = r2.media
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_messageMediaWebPage
            if (r1 == 0) goto L_0x0435
            org.telegram.tgnet.TLRPC$WebPage r0 = r0.webpage
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_webPagePending
            if (r1 == 0) goto L_0x040e
            int r0 = r0.date
            org.telegram.tgnet.ConnectionsManager r1 = r32.getConnectionsManager()
            int r1 = r1.getCurrentTime()
            if (r0 > r1) goto L_0x040e
            int r0 = r2.id
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)
            r11.add(r0)
            goto L_0x0435
        L_0x040e:
            org.telegram.tgnet.TLRPC$MessageMedia r0 = r2.media
            org.telegram.tgnet.TLRPC$WebPage r0 = r0.webpage
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_webPageUrlPending
            if (r1 == 0) goto L_0x0435
            java.lang.String r0 = r0.url
            java.lang.Object r0 = r15.get(r0)
            java.util.ArrayList r0 = (java.util.ArrayList) r0
            if (r0 != 0) goto L_0x042e
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            org.telegram.tgnet.TLRPC$MessageMedia r1 = r2.media
            org.telegram.tgnet.TLRPC$WebPage r1 = r1.webpage
            java.lang.String r1 = r1.url
            r15.put(r1, r0)
        L_0x042e:
            r0.add(r6)
            goto L_0x0435
        L_0x0432:
            r38 = r0
            r7 = 0
        L_0x0435:
            int r0 = r14 + 1
            r5 = r0
            r7 = r11
            r6 = r15
            r14 = 1
            r15 = r32
            r0 = r38
            r11 = r41
            goto L_0x0361
        L_0x0443:
            r5 = r51
            r38 = r0
            r15 = r6
            r11 = r7
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0477
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "process time = "
            r0.append(r1)
            long r1 = android.os.SystemClock.elapsedRealtime()
            long r1 = r1 - r23
            r0.append(r1)
            java.lang.String r1 = " file time = "
            r0.append(r1)
            r0.append(r3)
            java.lang.String r1 = " for dialog = "
            r0.append(r1)
            r0.append(r12)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x0477:
            org.telegram.messenger.-$$Lambda$MessagesController$S8gHAqOndrfTXljv8tFZcu-BVN8 r24 = new org.telegram.messenger.-$$Lambda$MessagesController$S8gHAqOndrfTXljv8tFZcu-BVN8
            r14 = r38
            r0 = r24
            r1 = r32
            r2 = r33
            r3 = r42
            r4 = r51
            r5 = r54
            r6 = r48
            r7 = r44
            r8 = r39
            r9 = r35
            r22 = r11
            r11 = r14
            r12 = r56
            r13 = r43
            r14 = r34
            r23 = r15
            r15 = r50
            r16 = r45
            r17 = r46
            r18 = r47
            r19 = r53
            r20 = r40
            r21 = r55
            r0.<init>(r1, r2, r3, r4, r5, r6, r7, r8, r9, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r24)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.processLoadedMessages(org.telegram.tgnet.TLRPC$messages_Messages, int, long, long, int, int, int, boolean, int, int, int, int, int, int, boolean, boolean, int, int, int, boolean, int, boolean):void");
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$processLoadedMessages$142 */
    public /* synthetic */ void lambda$processLoadedMessages$142$MessagesController(long j, long j2, int i, int i2, boolean z, int i3, int i4, int i5, int i6, int i7, int i8, boolean z2, int i9, int i10, int i11, int i12, int i13, int i14, boolean z3) {
        loadMessagesInternal(j, j2, false, i, (i2 != 2 || !z) ? i4 : i3, i5, false, i6, i7, i2, i8, z2, i9, i10, i11, i3, i12, i13, z, i14, true, z3);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$processLoadedMessages$143 */
    public /* synthetic */ void lambda$processLoadedMessages$143$MessagesController(int i, TLRPC$messages_Messages tLRPC$messages_Messages, boolean z, boolean z2, int i2) {
        getNotificationCenter().postNotificationName(NotificationCenter.messagesDidLoadWithoutProcess, Integer.valueOf(i), Integer.valueOf(tLRPC$messages_Messages.messages.size()), Boolean.valueOf(z), Boolean.valueOf(z2), Integer.valueOf(i2));
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$processLoadedMessages$145 */
    public /* synthetic */ void lambda$processLoadedMessages$145$MessagesController(TLRPC$messages_Messages tLRPC$messages_Messages, boolean z, int i, boolean z2, int i2, int i3, int i4, long j, ArrayList arrayList, boolean z3, int i5, int i6, boolean z4, int i7, int i8, int i9, int i10, int i11, int i12, ArrayList arrayList2, HashMap hashMap) {
        int i13;
        boolean z5;
        long j2;
        MessagesController messagesController;
        int i14;
        HashMap hashMap2;
        int i15;
        int i16;
        TLRPC$messages_Messages tLRPC$messages_Messages2 = tLRPC$messages_Messages;
        boolean z6 = z;
        int i17 = i;
        long j3 = j;
        putUsers(tLRPC$messages_Messages2.users, z6);
        putChats(tLRPC$messages_Messages2.chats, z6);
        if (i17 == 1) {
            int i18 = i2;
            i13 = 0;
        } else {
            int i19 = i2;
            if (!z2 || i19 != 2) {
                i15 = i3;
                i16 = Integer.MAX_VALUE;
            } else {
                i16 = Integer.MAX_VALUE;
                for (int i20 = 0; i20 < tLRPC$messages_Messages2.messages.size(); i20++) {
                    TLRPC$Message tLRPC$Message = tLRPC$messages_Messages2.messages.get(i20);
                    if (!tLRPC$Message.out || tLRPC$Message.from_scheduled) {
                        int i21 = tLRPC$Message.id;
                        if (i21 > i3 && i21 < i16) {
                            i16 = i21;
                        }
                    } else {
                        int i22 = i3;
                    }
                }
                i15 = i3;
            }
            i13 = i16 == Integer.MAX_VALUE ? i15 : i16;
        }
        int i23 = i4;
        if (i17 == 1 && i23 == 1) {
            getNotificationCenter().postNotificationName(NotificationCenter.scheduledMessagesUpdated, Long.valueOf(j), Integer.valueOf(arrayList.size()));
        }
        if (((int) j3) != 0) {
            getMediaDataController().loadReplyMessagesForMessages(arrayList, j, i17 == 1, new Runnable(this, z3, i5, i6, z, z4, i7, j, i4, arrayList, i13, i8, i9, i2, i10, i11, i12, i) {
                public final /* synthetic */ MessagesController f$0;
                public final /* synthetic */ boolean f$1;
                public final /* synthetic */ int f$10;
                public final /* synthetic */ int f$11;
                public final /* synthetic */ int f$12;
                public final /* synthetic */ int f$13;
                public final /* synthetic */ int f$14;
                public final /* synthetic */ int f$15;
                public final /* synthetic */ int f$16;
                public final /* synthetic */ int f$17;
                public final /* synthetic */ int f$2;
                public final /* synthetic */ int f$3;
                public final /* synthetic */ boolean f$4;
                public final /* synthetic */ boolean f$5;
                public final /* synthetic */ int f$6;
                public final /* synthetic */ long f$7;
                public final /* synthetic */ int f$8;
                public final /* synthetic */ ArrayList f$9;

                {
                    this.f$0 = r4;
                    this.f$1 = r5;
                    this.f$2 = r6;
                    this.f$3 = r7;
                    this.f$4 = r8;
                    this.f$5 = r9;
                    this.f$6 = r10;
                    this.f$7 = r11;
                    this.f$8 = r13;
                    this.f$9 = r14;
                    this.f$10 = r15;
                    this.f$11 = r16;
                    this.f$12 = r17;
                    this.f$13 = r18;
                    this.f$14 = r19;
                    this.f$15 = r20;
                    this.f$16 = r21;
                    this.f$17 = r22;
                }

                public final void run() {
                    MessagesController messagesController = this.f$0;
                    MessagesController messagesController2 = messagesController;
                    messagesController2.lambda$null$144$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7, this.f$8, this.f$9, this.f$10, this.f$11, this.f$12, this.f$13, this.f$14, this.f$15, this.f$16, this.f$17);
                }
            });
            z5 = true;
        } else {
            z5 = true;
            getNotificationCenter().postNotificationName(NotificationCenter.messagesDidLoad, Long.valueOf(j), Integer.valueOf(i4), arrayList, Boolean.valueOf(z), Integer.valueOf(i13), Integer.valueOf(i7), Integer.valueOf(i8), Integer.valueOf(i9), Integer.valueOf(i2), Boolean.valueOf(z4), Integer.valueOf(i5), Integer.valueOf(i10), Integer.valueOf(i11), Integer.valueOf(i12), Integer.valueOf(i));
        }
        if (!arrayList2.isEmpty()) {
            i14 = i;
            messagesController = this;
            j2 = j;
            messagesController.reloadMessages(arrayList2, j2, i14 == z5);
        } else {
            messagesController = this;
            i14 = i;
            j2 = j;
        }
        if (!hashMap.isEmpty()) {
            if (i14 == z5) {
                hashMap2 = hashMap;
            } else {
                hashMap2 = hashMap;
                z5 = false;
            }
            messagesController.reloadWebPages(j2, hashMap2, z5);
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$144 */
    public /* synthetic */ void lambda$null$144$MessagesController(boolean z, int i, int i2, boolean z2, boolean z3, int i3, long j, int i4, ArrayList arrayList, int i5, int i6, int i7, int i8, int i9, int i10, int i11, int i12) {
        if (!z) {
            getNotificationCenter().postNotificationName(NotificationCenter.messagesDidLoadWithoutProcess, Integer.valueOf(i), Integer.valueOf(i2), Boolean.valueOf(z2), Boolean.valueOf(z3), Integer.valueOf(i3));
            return;
        }
        getNotificationCenter().postNotificationName(NotificationCenter.messagesDidLoad, Long.valueOf(j), Integer.valueOf(i4), arrayList, Boolean.valueOf(z2), Integer.valueOf(i5), Integer.valueOf(i3), Integer.valueOf(i6), Integer.valueOf(i7), Integer.valueOf(i8), Boolean.valueOf(z3), Integer.valueOf(i), Integer.valueOf(i9), Integer.valueOf(i10), Integer.valueOf(i11), Integer.valueOf(i12));
    }

    public void loadHintDialogs() {
        if (this.hintDialogs.isEmpty() && !TextUtils.isEmpty(this.installReferer)) {
            TLRPC$TL_help_getRecentMeUrls tLRPC$TL_help_getRecentMeUrls = new TLRPC$TL_help_getRecentMeUrls();
            tLRPC$TL_help_getRecentMeUrls.referer = this.installReferer;
            getConnectionsManager().sendRequest(tLRPC$TL_help_getRecentMeUrls, new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$loadHintDialogs$147$MessagesController(tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$loadHintDialogs$147 */
    public /* synthetic */ void lambda$loadHintDialogs$147$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            AndroidUtilities.runOnUIThread(new Runnable(tLObject) {
                public final /* synthetic */ TLObject f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$146$MessagesController(this.f$1);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$146 */
    public /* synthetic */ void lambda$null$146$MessagesController(TLObject tLObject) {
        TLRPC$TL_help_recentMeUrls tLRPC$TL_help_recentMeUrls = (TLRPC$TL_help_recentMeUrls) tLObject;
        putUsers(tLRPC$TL_help_recentMeUrls.users, false);
        putChats(tLRPC$TL_help_recentMeUrls.chats, false);
        this.hintDialogs.clear();
        this.hintDialogs.addAll(tLRPC$TL_help_recentMeUrls.urls);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    private TLRPC$TL_dialogFolder ensureFolderDialogExists(int i, boolean[] zArr) {
        if (i == 0) {
            return null;
        }
        long makeFolderDialogId = DialogObject.makeFolderDialogId(i);
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(makeFolderDialogId);
        if (tLRPC$Dialog instanceof TLRPC$TL_dialogFolder) {
            if (zArr != null) {
                zArr[0] = false;
            }
            return (TLRPC$TL_dialogFolder) tLRPC$Dialog;
        }
        if (zArr != null) {
            zArr[0] = true;
        }
        TLRPC$TL_dialogFolder tLRPC$TL_dialogFolder = new TLRPC$TL_dialogFolder();
        tLRPC$TL_dialogFolder.id = makeFolderDialogId;
        tLRPC$TL_dialogFolder.peer = new TLRPC$TL_peerUser();
        TLRPC$TL_folder tLRPC$TL_folder = new TLRPC$TL_folder();
        tLRPC$TL_dialogFolder.folder = tLRPC$TL_folder;
        tLRPC$TL_folder.id = i;
        tLRPC$TL_folder.title = LocaleController.getString("ArchivedChats", NUM);
        tLRPC$TL_dialogFolder.pinned = true;
        int i2 = 0;
        for (int i3 = 0; i3 < this.allDialogs.size(); i3++) {
            TLRPC$Dialog tLRPC$Dialog2 = this.allDialogs.get(i3);
            if (tLRPC$Dialog2.pinned) {
                i2 = Math.max(tLRPC$Dialog2.pinnedNum, i2);
            } else if (tLRPC$Dialog2.id != this.promoDialogId) {
                break;
            }
        }
        tLRPC$TL_dialogFolder.pinnedNum = i2 + 1;
        TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
        tLRPC$TL_messages_dialogs.dialogs.add(tLRPC$TL_dialogFolder);
        getMessagesStorage().putDialogs(tLRPC$TL_messages_dialogs, 1);
        this.dialogs_dict.put(makeFolderDialogId, tLRPC$TL_dialogFolder);
        this.allDialogs.add(0, tLRPC$TL_dialogFolder);
        return tLRPC$TL_dialogFolder;
    }

    /* access modifiers changed from: private */
    /* renamed from: removeFolder */
    public void lambda$onFolderEmpty$148(int i) {
        long makeFolderDialogId = DialogObject.makeFolderDialogId(i);
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(makeFolderDialogId);
        if (tLRPC$Dialog != null) {
            this.dialogs_dict.remove(makeFolderDialogId);
            this.allDialogs.remove(tLRPC$Dialog);
            sortDialogs((SparseArray<TLRPC$Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
            getNotificationCenter().postNotificationName(NotificationCenter.folderBecomeEmpty, Integer.valueOf(i));
        }
    }

    /* access modifiers changed from: protected */
    public void onFolderEmpty(int i) {
        if (getUserConfig().getDialogLoadOffsets(i)[0] == Integer.MAX_VALUE) {
            lambda$onFolderEmpty$148(i);
            return;
        }
        loadDialogs(i, 0, 10, false, new Runnable(i) {
            public final /* synthetic */ int f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$onFolderEmpty$148$MessagesController(this.f$1);
            }
        });
    }

    public void checkIfFolderEmpty(int i) {
        if (i != 0) {
            getMessagesStorage().checkIfFolderEmpty(i);
        }
    }

    public int addDialogToFolder(long j, int i, int i2, long j2) {
        ArrayList arrayList = new ArrayList(1);
        arrayList.add(Long.valueOf(j));
        return addDialogToFolder(arrayList, i, i2, (ArrayList<TLRPC$TL_inputFolderPeer>) null, j2);
    }

    /* JADX WARNING: Removed duplicated region for block: B:53:0x0127  */
    /* JADX WARNING: Removed duplicated region for block: B:55:0x0143 A[RETURN, SYNTHETIC] */
    /* JADX WARNING: Removed duplicated region for block: B:56:0x0145  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public int addDialogToFolder(java.util.ArrayList<java.lang.Long> r22, int r23, int r24, java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_inputFolderPeer> r25, long r26) {
        /*
            r21 = this;
            r1 = r21
            r8 = r23
            r0 = r24
            org.telegram.tgnet.TLRPC$TL_folders_editPeerFolders r9 = new org.telegram.tgnet.TLRPC$TL_folders_editPeerFolders
            r9.<init>()
            r10 = 0
            r13 = 1
            r14 = 0
            int r2 = (r26 > r10 ? 1 : (r26 == r10 ? 0 : -1))
            if (r2 != 0) goto L_0x0116
            org.telegram.messenger.UserConfig r2 = r21.getUserConfig()
            int r15 = r2.getClientUserId()
            int r7 = r22.size()
            r2 = 0
            r3 = 0
            r5 = 0
            r16 = 0
        L_0x0024:
            if (r5 >= r7) goto L_0x00ba
            r6 = r22
            java.lang.Object r4 = r6.get(r5)
            java.lang.Long r4 = (java.lang.Long) r4
            long r10 = r4.longValue()
            boolean r4 = org.telegram.messenger.DialogObject.isPeerDialogId(r10)
            if (r4 != 0) goto L_0x003f
            boolean r4 = org.telegram.messenger.DialogObject.isSecretDialogId(r10)
            if (r4 != 0) goto L_0x003f
            goto L_0x005e
        L_0x003f:
            if (r8 != r13) goto L_0x0054
            long r12 = (long) r15
            int r4 = (r10 > r12 ? 1 : (r10 == r12 ? 0 : -1))
            if (r4 == 0) goto L_0x005e
            r12 = 777000(0xbdb28, double:3.83889E-318)
            int r4 = (r10 > r12 ? 1 : (r10 == r12 ? 0 : -1))
            if (r4 == 0) goto L_0x005e
            boolean r4 = r1.isPromoDialog(r10, r14)
            if (r4 == 0) goto L_0x0054
            goto L_0x005e
        L_0x0054:
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r4 = r1.dialogs_dict
            java.lang.Object r4 = r4.get(r10)
            org.telegram.tgnet.TLRPC$Dialog r4 = (org.telegram.tgnet.TLRPC$Dialog) r4
            if (r4 != 0) goto L_0x0064
        L_0x005e:
            r19 = r5
            r20 = r7
            r12 = 1
            goto L_0x00b1
        L_0x0064:
            r4.folder_id = r8
            if (r0 <= 0) goto L_0x006e
            r12 = 1
            r4.pinned = r12
            r4.pinnedNum = r0
            goto L_0x0073
        L_0x006e:
            r12 = 1
            r4.pinned = r14
            r4.pinnedNum = r14
        L_0x0073:
            if (r3 != 0) goto L_0x007a
            boolean[] r3 = new boolean[r12]
            r1.ensureFolderDialogExists(r8, r3)
        L_0x007a:
            r13 = r3
            boolean r2 = org.telegram.messenger.DialogObject.isSecretDialogId(r10)
            if (r2 == 0) goto L_0x0092
            org.telegram.messenger.MessagesStorage r2 = r21.getMessagesStorage()
            r3 = 0
            r4 = 0
            r19 = r5
            r5 = r10
            r20 = r7
            r7 = r23
            r2.setDialogsFolderId(r3, r4, r5, r7)
            goto L_0x00af
        L_0x0092:
            r19 = r5
            r20 = r7
            org.telegram.tgnet.TLRPC$TL_inputFolderPeer r2 = new org.telegram.tgnet.TLRPC$TL_inputFolderPeer
            r2.<init>()
            r2.folder_id = r8
            int r3 = (int) r10
            org.telegram.tgnet.TLRPC$InputPeer r3 = r1.getInputPeer((int) r3)
            r2.peer = r3
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_inputFolderPeer> r3 = r9.folder_peers
            r3.add(r2)
            int r2 = r2.getObjectSize()
            int r16 = r16 + r2
        L_0x00af:
            r3 = r13
            r2 = 1
        L_0x00b1:
            int r5 = r19 + 1
            r7 = r20
            r10 = 0
            r13 = 1
            goto L_0x0024
        L_0x00ba:
            r12 = 1
            if (r2 != 0) goto L_0x00be
            return r14
        L_0x00be:
            r2 = 0
            r1.sortDialogs(r2)
            org.telegram.messenger.NotificationCenter r0 = r21.getNotificationCenter()
            int r4 = org.telegram.messenger.NotificationCenter.dialogsNeedReload
            java.lang.Object[] r5 = new java.lang.Object[r14]
            r0.postNotificationName(r4, r5)
            if (r16 == 0) goto L_0x0110
            org.telegram.tgnet.NativeByteBuffer r4 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x0100 }
            int r0 = r16 + 12
            r4.<init>((int) r0)     // Catch:{ Exception -> 0x0100 }
            r0 = 17
            r4.writeInt32(r0)     // Catch:{ Exception -> 0x00fe }
            r4.writeInt32(r8)     // Catch:{ Exception -> 0x00fe }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_inputFolderPeer> r0 = r9.folder_peers     // Catch:{ Exception -> 0x00fe }
            int r0 = r0.size()     // Catch:{ Exception -> 0x00fe }
            r4.writeInt32(r0)     // Catch:{ Exception -> 0x00fe }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_inputFolderPeer> r0 = r9.folder_peers     // Catch:{ Exception -> 0x00fe }
            int r0 = r0.size()     // Catch:{ Exception -> 0x00fe }
            r2 = 0
        L_0x00ee:
            if (r2 >= r0) goto L_0x0105
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_inputFolderPeer> r5 = r9.folder_peers     // Catch:{ Exception -> 0x00fe }
            java.lang.Object r5 = r5.get(r2)     // Catch:{ Exception -> 0x00fe }
            org.telegram.tgnet.TLRPC$TL_inputFolderPeer r5 = (org.telegram.tgnet.TLRPC$TL_inputFolderPeer) r5     // Catch:{ Exception -> 0x00fe }
            r5.serializeToStream(r4)     // Catch:{ Exception -> 0x00fe }
            int r2 = r2 + 1
            goto L_0x00ee
        L_0x00fe:
            r0 = move-exception
            goto L_0x0102
        L_0x0100:
            r0 = move-exception
            r4 = r2
        L_0x0102:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
        L_0x0105:
            org.telegram.messenger.MessagesStorage r0 = r21.getMessagesStorage()
            long r4 = r0.createPendingTask(r4)
            r17 = r4
            goto L_0x0112
        L_0x0110:
            r17 = 0
        L_0x0112:
            r0 = r3
            r2 = r17
            goto L_0x011f
        L_0x0116:
            r0 = r25
            r2 = 0
            r12 = 1
            r9.folder_peers = r0
            r0 = r2
            r2 = r26
        L_0x011f:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_inputFolderPeer> r4 = r9.folder_peers
            boolean r4 = r4.isEmpty()
            if (r4 != 0) goto L_0x0141
            org.telegram.tgnet.ConnectionsManager r4 = r21.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$VidxMXjf9JIZqIknFWznUbPKS2Y r5 = new org.telegram.messenger.-$$Lambda$MessagesController$VidxMXjf9JIZqIknFWznUbPKS2Y
            r5.<init>(r2)
            r4.sendRequest(r9, r5)
            org.telegram.messenger.MessagesStorage r2 = r21.getMessagesStorage()
            r3 = 0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_inputFolderPeer> r4 = r9.folder_peers
            r5 = 0
            r7 = r23
            r2.setDialogsFolderId(r3, r4, r5, r7)
        L_0x0141:
            if (r0 != 0) goto L_0x0145
            r13 = 0
            goto L_0x014c
        L_0x0145:
            boolean r0 = r0[r14]
            if (r0 == 0) goto L_0x014b
            r13 = 2
            goto L_0x014c
        L_0x014b:
            r13 = 1
        L_0x014c:
            return r13
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.addDialogToFolder(java.util.ArrayList, int, int, java.util.ArrayList, long):int");
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$addDialogToFolder$149 */
    public /* synthetic */ void lambda$addDialogToFolder$149$MessagesController(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public void loadDialogs(int i, int i2, int i3, boolean z) {
        loadDialogs(i, i2, i3, z, (Runnable) null);
    }

    public void loadDialogs(int i, int i2, int i3, boolean z, Runnable runnable) {
        MessageObject messageObject;
        int i4;
        if (!this.loadingDialogs.get(i) && !this.resetingDialogs) {
            boolean z2 = true;
            this.loadingDialogs.put(i, true);
            NotificationCenter notificationCenter = getNotificationCenter();
            int i5 = NotificationCenter.dialogsNeedReload;
            notificationCenter.postNotificationName(i5, new Object[0]);
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("folderId = " + i + " load cacheOffset = " + i2 + " count = " + i3 + " cache = " + z);
            }
            if (z) {
                MessagesStorage messagesStorage = getMessagesStorage();
                int i6 = i2 == 0 ? 0 : this.nextDialogsCacheOffset.get(i, 0);
                if (!(i == 0 && i2 == 0)) {
                    z2 = false;
                }
                messagesStorage.getDialogs(i, i6, i3, z2);
                return;
            }
            TLRPC$TL_messages_getDialogs tLRPC$TL_messages_getDialogs = new TLRPC$TL_messages_getDialogs();
            tLRPC$TL_messages_getDialogs.limit = i3;
            tLRPC$TL_messages_getDialogs.exclude_pinned = true;
            if (i != 0) {
                tLRPC$TL_messages_getDialogs.flags |= 2;
                tLRPC$TL_messages_getDialogs.folder_id = i;
            }
            int[] dialogLoadOffsets = getUserConfig().getDialogLoadOffsets(i);
            if (dialogLoadOffsets[0] == -1) {
                ArrayList<TLRPC$Dialog> dialogs = getDialogs(i);
                int size = dialogs.size() - 1;
                while (true) {
                    if (size < 0) {
                        z2 = false;
                        break;
                    }
                    TLRPC$Dialog tLRPC$Dialog = dialogs.get(size);
                    if (!tLRPC$Dialog.pinned) {
                        long j = tLRPC$Dialog.id;
                        int i7 = (int) (j >> 32);
                        if (!(((int) j) == 0 || i7 == 1 || tLRPC$Dialog.top_message <= 0 || (messageObject = this.dialogMessage.get(j)) == null || messageObject.getId() <= 0)) {
                            TLRPC$Message tLRPC$Message = messageObject.messageOwner;
                            tLRPC$TL_messages_getDialogs.offset_date = tLRPC$Message.date;
                            tLRPC$TL_messages_getDialogs.offset_id = tLRPC$Message.id;
                            TLRPC$Peer tLRPC$Peer = tLRPC$Message.peer_id;
                            int i8 = tLRPC$Peer.channel_id;
                            if (i8 == 0 && (i8 = tLRPC$Peer.chat_id) == 0) {
                                i4 = tLRPC$Peer.user_id;
                            } else {
                                i4 = -i8;
                            }
                            tLRPC$TL_messages_getDialogs.offset_peer = getInputPeer(i4);
                        }
                    }
                    size--;
                }
                if (!z2) {
                    tLRPC$TL_messages_getDialogs.offset_peer = new TLRPC$TL_inputPeerEmpty();
                }
            } else if (dialogLoadOffsets[0] == Integer.MAX_VALUE) {
                this.dialogsEndReached.put(i, true);
                this.serverDialogsEndReached.put(i, true);
                this.loadingDialogs.put(i, false);
                getNotificationCenter().postNotificationName(i5, new Object[0]);
                return;
            } else {
                int i9 = dialogLoadOffsets[0];
                tLRPC$TL_messages_getDialogs.offset_id = i9;
                tLRPC$TL_messages_getDialogs.offset_date = dialogLoadOffsets[1];
                if (i9 == 0) {
                    tLRPC$TL_messages_getDialogs.offset_peer = new TLRPC$TL_inputPeerEmpty();
                } else {
                    if (dialogLoadOffsets[4] != 0) {
                        TLRPC$TL_inputPeerChannel tLRPC$TL_inputPeerChannel = new TLRPC$TL_inputPeerChannel();
                        tLRPC$TL_messages_getDialogs.offset_peer = tLRPC$TL_inputPeerChannel;
                        tLRPC$TL_inputPeerChannel.channel_id = dialogLoadOffsets[4];
                    } else if (dialogLoadOffsets[2] != 0) {
                        TLRPC$TL_inputPeerUser tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerUser();
                        tLRPC$TL_messages_getDialogs.offset_peer = tLRPC$TL_inputPeerUser;
                        tLRPC$TL_inputPeerUser.user_id = dialogLoadOffsets[2];
                    } else {
                        TLRPC$TL_inputPeerChat tLRPC$TL_inputPeerChat = new TLRPC$TL_inputPeerChat();
                        tLRPC$TL_messages_getDialogs.offset_peer = tLRPC$TL_inputPeerChat;
                        tLRPC$TL_inputPeerChat.chat_id = dialogLoadOffsets[3];
                    }
                    tLRPC$TL_messages_getDialogs.offset_peer.access_hash = (((long) dialogLoadOffsets[5]) << 32) | ((long) dialogLoadOffsets[5]);
                }
            }
            getConnectionsManager().sendRequest(tLRPC$TL_messages_getDialogs, new RequestDelegate(i, i3, runnable) {
                public final /* synthetic */ int f$1;
                public final /* synthetic */ int f$2;
                public final /* synthetic */ Runnable f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$loadDialogs$150$MessagesController(this.f$1, this.f$2, this.f$3, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$loadDialogs$150 */
    public /* synthetic */ void lambda$loadDialogs$150$MessagesController(int i, int i2, Runnable runnable, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$messages_Dialogs tLRPC$messages_Dialogs = (TLRPC$messages_Dialogs) tLObject;
            processLoadedDialogs(tLRPC$messages_Dialogs, (ArrayList<TLRPC$EncryptedChat>) null, i, 0, i2, 0, false, false, false);
            if (runnable != null && tLRPC$messages_Dialogs.dialogs.isEmpty()) {
                AndroidUtilities.runOnUIThread(runnable);
            }
        }
    }

    public void loadGlobalNotificationsSettings() {
        if (this.loadingNotificationSettings == 0 && !getUserConfig().notificationsSettingsLoaded) {
            SharedPreferences notificationsSettings = getNotificationsSettings(this.currentAccount);
            SharedPreferences.Editor editor = null;
            if (notificationsSettings.contains("EnableGroup")) {
                boolean z = notificationsSettings.getBoolean("EnableGroup", true);
                SharedPreferences.Editor edit = notificationsSettings.edit();
                if (!z) {
                    edit.putInt("EnableGroup2", Integer.MAX_VALUE);
                    edit.putInt("EnableChannel2", Integer.MAX_VALUE);
                }
                edit.remove("EnableGroup").commit();
                editor = edit;
            }
            if (notificationsSettings.contains("EnableAll")) {
                boolean z2 = notificationsSettings.getBoolean("EnableAll", true);
                if (editor == null) {
                    editor = notificationsSettings.edit();
                }
                if (!z2) {
                    editor.putInt("EnableAll2", Integer.MAX_VALUE);
                }
                editor.remove("EnableAll").commit();
            }
            if (editor != null) {
                editor.commit();
            }
            this.loadingNotificationSettings = 3;
            for (int i = 0; i < 3; i++) {
                TLRPC$TL_account_getNotifySettings tLRPC$TL_account_getNotifySettings = new TLRPC$TL_account_getNotifySettings();
                if (i == 0) {
                    tLRPC$TL_account_getNotifySettings.peer = new TLRPC$TL_inputNotifyChats();
                } else if (i == 1) {
                    tLRPC$TL_account_getNotifySettings.peer = new TLRPC$TL_inputNotifyUsers();
                } else {
                    tLRPC$TL_account_getNotifySettings.peer = new TLRPC$TL_inputNotifyBroadcasts();
                }
                getConnectionsManager().sendRequest(tLRPC$TL_account_getNotifySettings, new RequestDelegate(i) {
                    public final /* synthetic */ int f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$loadGlobalNotificationsSettings$152$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                    }
                });
            }
        }
        if (!getUserConfig().notificationsSignUpSettingsLoaded) {
            loadSignUpNotificationsSettings();
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$loadGlobalNotificationsSettings$152 */
    public /* synthetic */ void lambda$loadGlobalNotificationsSettings$152$MessagesController(int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable(tLObject, i) {
            public final /* synthetic */ TLObject f$1;
            public final /* synthetic */ int f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$null$151$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$151 */
    public /* synthetic */ void lambda$null$151$MessagesController(TLObject tLObject, int i) {
        if (tLObject != null) {
            this.loadingNotificationSettings--;
            TLRPC$TL_peerNotifySettings tLRPC$TL_peerNotifySettings = (TLRPC$TL_peerNotifySettings) tLObject;
            SharedPreferences.Editor edit = this.notificationsPreferences.edit();
            if (i == 0) {
                if ((tLRPC$TL_peerNotifySettings.flags & 1) != 0) {
                    edit.putBoolean("EnablePreviewGroup", tLRPC$TL_peerNotifySettings.show_previews);
                }
                if ((tLRPC$TL_peerNotifySettings.flags & 4) != 0) {
                    edit.putInt("EnableGroup2", tLRPC$TL_peerNotifySettings.mute_until);
                }
            } else if (i == 1) {
                if ((tLRPC$TL_peerNotifySettings.flags & 1) != 0) {
                    edit.putBoolean("EnablePreviewAll", tLRPC$TL_peerNotifySettings.show_previews);
                }
                if ((tLRPC$TL_peerNotifySettings.flags & 4) != 0) {
                    edit.putInt("EnableAll2", tLRPC$TL_peerNotifySettings.mute_until);
                }
            } else {
                if ((tLRPC$TL_peerNotifySettings.flags & 1) != 0) {
                    edit.putBoolean("EnablePreviewChannel", tLRPC$TL_peerNotifySettings.show_previews);
                }
                if ((tLRPC$TL_peerNotifySettings.flags & 4) != 0) {
                    edit.putInt("EnableChannel2", tLRPC$TL_peerNotifySettings.mute_until);
                }
            }
            edit.commit();
            if (this.loadingNotificationSettings == 0) {
                getUserConfig().notificationsSettingsLoaded = true;
                getUserConfig().saveConfig(false);
            }
        }
    }

    public void loadSignUpNotificationsSettings() {
        if (!this.loadingNotificationSignUpSettings) {
            this.loadingNotificationSignUpSettings = true;
            getConnectionsManager().sendRequest(new TLRPC$TL_account_getContactSignUpNotification(), new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$loadSignUpNotificationsSettings$154$MessagesController(tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$loadSignUpNotificationsSettings$154 */
    public /* synthetic */ void lambda$loadSignUpNotificationsSettings$154$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable(tLObject) {
            public final /* synthetic */ TLObject f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$153$MessagesController(this.f$1);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$153 */
    public /* synthetic */ void lambda$null$153$MessagesController(TLObject tLObject) {
        this.loadingNotificationSignUpSettings = false;
        SharedPreferences.Editor edit = this.notificationsPreferences.edit();
        boolean z = tLObject instanceof TLRPC$TL_boolFalse;
        this.enableJoined = z;
        edit.putBoolean("EnableContactJoined", z);
        edit.commit();
        getUserConfig().notificationsSignUpSettingsLoaded = true;
        getUserConfig().saveConfig(false);
    }

    public void forceResetDialogs() {
        resetDialogs(true, getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
        getNotificationsController().deleteAllNotificationChannels();
    }

    /* access modifiers changed from: protected */
    public void loadUnknownDialog(TLRPC$InputPeer tLRPC$InputPeer, long j) {
        NativeByteBuffer nativeByteBuffer;
        if (tLRPC$InputPeer != null) {
            long peerDialogId = DialogObject.getPeerDialogId(tLRPC$InputPeer);
            if (this.gettingUnknownDialogs.indexOfKey(peerDialogId) < 0) {
                this.gettingUnknownDialogs.put(peerDialogId, Boolean.TRUE);
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("load unknown dialog " + peerDialogId);
                }
                TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs = new TLRPC$TL_messages_getPeerDialogs();
                TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
                tLRPC$TL_inputDialogPeer.peer = tLRPC$InputPeer;
                tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer);
                if (j == 0) {
                    NativeByteBuffer nativeByteBuffer2 = null;
                    try {
                        nativeByteBuffer = new NativeByteBuffer(tLRPC$InputPeer.getObjectSize() + 4);
                        try {
                            nativeByteBuffer.writeInt32(15);
                            tLRPC$InputPeer.serializeToStream(nativeByteBuffer);
                        } catch (Exception e) {
                            e = e;
                            nativeByteBuffer2 = nativeByteBuffer;
                        }
                    } catch (Exception e2) {
                        e = e2;
                        FileLog.e((Throwable) e);
                        nativeByteBuffer = nativeByteBuffer2;
                        j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                        getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerDialogs, new RequestDelegate(j, peerDialogId) {
                            public final /* synthetic */ long f$1;
                            public final /* synthetic */ long f$2;

                            {
                                this.f$1 = r2;
                                this.f$2 = r4;
                            }

                            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                MessagesController.this.lambda$loadUnknownDialog$155$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                            }
                        });
                    }
                    j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                }
                getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerDialogs, new RequestDelegate(j, peerDialogId) {
                    public final /* synthetic */ long f$1;
                    public final /* synthetic */ long f$2;

                    {
                        this.f$1 = r2;
                        this.f$2 = r4;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$loadUnknownDialog$155$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                    }
                });
            }
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$loadUnknownDialog$155 */
    public /* synthetic */ void lambda$loadUnknownDialog$155$MessagesController(long j, long j2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        long j3 = j;
        if (tLObject != null) {
            TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject;
            if (!tLRPC$TL_messages_peerDialogs.dialogs.isEmpty()) {
                TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
                tLRPC$TL_messages_dialogs.dialogs.addAll(tLRPC$TL_messages_peerDialogs.dialogs);
                tLRPC$TL_messages_dialogs.messages.addAll(tLRPC$TL_messages_peerDialogs.messages);
                tLRPC$TL_messages_dialogs.users.addAll(tLRPC$TL_messages_peerDialogs.users);
                tLRPC$TL_messages_dialogs.chats.addAll(tLRPC$TL_messages_peerDialogs.chats);
                processLoadedDialogs(tLRPC$TL_messages_dialogs, (ArrayList<TLRPC$EncryptedChat>) null, ((TLRPC$TL_dialog) tLRPC$TL_messages_peerDialogs.dialogs.get(0)).folder_id, 0, 1, this.DIALOGS_LOAD_TYPE_UNKNOWN, false, false, false);
            }
        }
        if (j3 != 0) {
            getMessagesStorage().removePendingTask(j3);
        }
        this.gettingUnknownDialogs.delete(j2);
    }

    private void fetchFolderInLoadedPinnedDialogs(TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs) {
        TLRPC$InputPeer tLRPC$InputPeer;
        int size = tLRPC$TL_messages_peerDialogs.dialogs.size();
        int i = 0;
        for (int i2 = 0; i2 < size; i2++) {
            TLRPC$Dialog tLRPC$Dialog = tLRPC$TL_messages_peerDialogs.dialogs.get(i2);
            if (tLRPC$Dialog instanceof TLRPC$TL_dialogFolder) {
                TLRPC$TL_dialogFolder tLRPC$TL_dialogFolder = (TLRPC$TL_dialogFolder) tLRPC$Dialog;
                long peerDialogId = DialogObject.getPeerDialogId(tLRPC$Dialog.peer);
                if (tLRPC$TL_dialogFolder.top_message == 0 || peerDialogId == 0) {
                    tLRPC$TL_messages_peerDialogs.dialogs.remove(tLRPC$TL_dialogFolder);
                } else {
                    int size2 = tLRPC$TL_messages_peerDialogs.messages.size();
                    for (int i3 = 0; i3 < size2; i3++) {
                        TLRPC$Message tLRPC$Message = tLRPC$TL_messages_peerDialogs.messages.get(i3);
                        if (peerDialogId == MessageObject.getDialogId(tLRPC$Message) && tLRPC$Dialog.top_message == tLRPC$Message.id) {
                            TLRPC$TL_dialog tLRPC$TL_dialog = new TLRPC$TL_dialog();
                            tLRPC$TL_dialog.peer = tLRPC$Dialog.peer;
                            tLRPC$TL_dialog.top_message = tLRPC$Dialog.top_message;
                            tLRPC$TL_dialog.folder_id = tLRPC$TL_dialogFolder.folder.id;
                            tLRPC$TL_dialog.flags |= 16;
                            tLRPC$TL_messages_peerDialogs.dialogs.add(tLRPC$TL_dialog);
                            TLRPC$Peer tLRPC$Peer = tLRPC$Dialog.peer;
                            if (!(tLRPC$Peer instanceof TLRPC$TL_peerChannel)) {
                                if (!(tLRPC$Peer instanceof TLRPC$TL_peerChat)) {
                                    tLRPC$InputPeer = new TLRPC$TL_inputPeerUser();
                                    tLRPC$InputPeer.user_id = tLRPC$Dialog.peer.user_id;
                                    int size3 = tLRPC$TL_messages_peerDialogs.users.size();
                                    while (true) {
                                        if (i >= size3) {
                                            break;
                                        }
                                        TLRPC$User tLRPC$User = tLRPC$TL_messages_peerDialogs.users.get(i);
                                        if (tLRPC$User.id == tLRPC$InputPeer.user_id) {
                                            tLRPC$InputPeer.access_hash = tLRPC$User.access_hash;
                                            break;
                                        }
                                        i++;
                                    }
                                } else {
                                    tLRPC$InputPeer = new TLRPC$TL_inputPeerChat();
                                    tLRPC$InputPeer.chat_id = tLRPC$Dialog.peer.chat_id;
                                }
                            } else {
                                tLRPC$InputPeer = new TLRPC$TL_inputPeerChannel();
                                tLRPC$InputPeer.channel_id = tLRPC$Dialog.peer.channel_id;
                                int size4 = tLRPC$TL_messages_peerDialogs.chats.size();
                                while (true) {
                                    if (i >= size4) {
                                        break;
                                    }
                                    TLRPC$Chat tLRPC$Chat = tLRPC$TL_messages_peerDialogs.chats.get(i);
                                    if (tLRPC$Chat.id == tLRPC$InputPeer.channel_id) {
                                        tLRPC$InputPeer.access_hash = tLRPC$Chat.access_hash;
                                        break;
                                    }
                                    i++;
                                }
                            }
                            loadUnknownDialog(tLRPC$InputPeer, 0);
                            return;
                        }
                    }
                    return;
                }
            }
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$resetDialogs$156 */
    public /* synthetic */ void lambda$resetDialogs$156$MessagesController(int i, int i2, int i3, int i4, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            this.resetDialogsPinned = (TLRPC$TL_messages_peerDialogs) tLObject;
            for (int i5 = 0; i5 < this.resetDialogsPinned.dialogs.size(); i5++) {
                this.resetDialogsPinned.dialogs.get(i5).pinned = true;
            }
            resetDialogs(false, i, i2, i3, i4);
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$resetDialogs$157 */
    public /* synthetic */ void lambda$resetDialogs$157$MessagesController(int i, int i2, int i3, int i4, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            this.resetDialogsAll = (TLRPC$messages_Dialogs) tLObject;
            resetDialogs(false, i, i2, i3, i4);
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:64:0x01b8, code lost:
        if (r11.migrated_to != null) goto L_0x016f;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void resetDialogs(boolean r27, int r28, int r29, int r30, int r31) {
        /*
            r26 = this;
            r6 = r26
            r7 = 1
            r0 = 0
            java.lang.Integer r1 = java.lang.Integer.valueOf(r0)
            if (r27 == 0) goto L_0x0055
            boolean r1 = r6.resetingDialogs
            if (r1 == 0) goto L_0x000f
            return
        L_0x000f:
            org.telegram.messenger.UserConfig r1 = r26.getUserConfig()
            r1.setPinnedDialogsLoaded(r7, r0)
            r6.resetingDialogs = r7
            org.telegram.tgnet.TLRPC$TL_messages_getPinnedDialogs r8 = new org.telegram.tgnet.TLRPC$TL_messages_getPinnedDialogs
            r8.<init>()
            org.telegram.tgnet.ConnectionsManager r9 = r26.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$1elFwodilCysTc2WdZgxV6f6Ul4 r10 = new org.telegram.messenger.-$$Lambda$MessagesController$1elFwodilCysTc2WdZgxV6f6Ul4
            r0 = r10
            r1 = r26
            r2 = r28
            r3 = r29
            r4 = r30
            r5 = r31
            r0.<init>(r2, r3, r4, r5)
            r9.sendRequest(r8, r10)
            org.telegram.tgnet.TLRPC$TL_messages_getDialogs r8 = new org.telegram.tgnet.TLRPC$TL_messages_getDialogs
            r8.<init>()
            r0 = 100
            r8.limit = r0
            r8.exclude_pinned = r7
            org.telegram.tgnet.TLRPC$TL_inputPeerEmpty r0 = new org.telegram.tgnet.TLRPC$TL_inputPeerEmpty
            r0.<init>()
            r8.offset_peer = r0
            org.telegram.tgnet.ConnectionsManager r7 = r26.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$5oQW4TmRHzez-a90P0r8rYy3-AI r9 = new org.telegram.messenger.-$$Lambda$MessagesController$5oQW4TmRHzez-a90P0r8rYy3-AI
            r0 = r9
            r0.<init>(r2, r3, r4, r5)
            r7.sendRequest(r8, r9)
            goto L_0x02c5
        L_0x0055:
            org.telegram.tgnet.TLRPC$TL_messages_peerDialogs r2 = r6.resetDialogsPinned
            if (r2 == 0) goto L_0x02c5
            org.telegram.tgnet.TLRPC$messages_Dialogs r2 = r6.resetDialogsAll
            if (r2 == 0) goto L_0x02c5
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r2 = r2.messages
            int r10 = r2.size()
            org.telegram.tgnet.TLRPC$messages_Dialogs r2 = r6.resetDialogsAll
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r2.dialogs
            int r18 = r2.size()
            org.telegram.tgnet.TLRPC$TL_messages_peerDialogs r2 = r6.resetDialogsPinned
            r6.fetchFolderInLoadedPinnedDialogs(r2)
            org.telegram.tgnet.TLRPC$messages_Dialogs r2 = r6.resetDialogsAll
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r2.dialogs
            org.telegram.tgnet.TLRPC$TL_messages_peerDialogs r3 = r6.resetDialogsPinned
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r3 = r3.dialogs
            r2.addAll(r3)
            org.telegram.tgnet.TLRPC$messages_Dialogs r2 = r6.resetDialogsAll
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r2 = r2.messages
            org.telegram.tgnet.TLRPC$TL_messages_peerDialogs r3 = r6.resetDialogsPinned
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r3 = r3.messages
            r2.addAll(r3)
            org.telegram.tgnet.TLRPC$messages_Dialogs r2 = r6.resetDialogsAll
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r2.users
            org.telegram.tgnet.TLRPC$TL_messages_peerDialogs r3 = r6.resetDialogsPinned
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r3 = r3.users
            r2.addAll(r3)
            org.telegram.tgnet.TLRPC$messages_Dialogs r2 = r6.resetDialogsAll
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r2 = r2.chats
            org.telegram.tgnet.TLRPC$TL_messages_peerDialogs r3 = r6.resetDialogsPinned
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r3 = r3.chats
            r2.addAll(r3)
            android.util.LongSparseArray r15 = new android.util.LongSparseArray
            r15.<init>()
            android.util.LongSparseArray r2 = new android.util.LongSparseArray
            r2.<init>()
            android.util.SparseArray r3 = new android.util.SparseArray
            r3.<init>()
            android.util.SparseArray r4 = new android.util.SparseArray
            r4.<init>()
            r5 = 0
        L_0x00b1:
            org.telegram.tgnet.TLRPC$messages_Dialogs r8 = r6.resetDialogsAll
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r8 = r8.users
            int r8 = r8.size()
            if (r5 >= r8) goto L_0x00cd
            org.telegram.tgnet.TLRPC$messages_Dialogs r8 = r6.resetDialogsAll
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r8 = r8.users
            java.lang.Object r8 = r8.get(r5)
            org.telegram.tgnet.TLRPC$User r8 = (org.telegram.tgnet.TLRPC$User) r8
            int r9 = r8.id
            r3.put(r9, r8)
            int r5 = r5 + 1
            goto L_0x00b1
        L_0x00cd:
            r5 = 0
        L_0x00ce:
            org.telegram.tgnet.TLRPC$messages_Dialogs r8 = r6.resetDialogsAll
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r8 = r8.chats
            int r8 = r8.size()
            if (r5 >= r8) goto L_0x00ea
            org.telegram.tgnet.TLRPC$messages_Dialogs r8 = r6.resetDialogsAll
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r8 = r8.chats
            java.lang.Object r8 = r8.get(r5)
            org.telegram.tgnet.TLRPC$Chat r8 = (org.telegram.tgnet.TLRPC$Chat) r8
            int r9 = r8.id
            r4.put(r9, r8)
            int r5 = r5 + 1
            goto L_0x00ce
        L_0x00ea:
            r5 = 0
            r14 = r5
            r8 = 0
        L_0x00ed:
            org.telegram.tgnet.TLRPC$messages_Dialogs r9 = r6.resetDialogsAll
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r9 = r9.messages
            int r9 = r9.size()
            if (r8 >= r9) goto L_0x014f
            org.telegram.tgnet.TLRPC$messages_Dialogs r9 = r6.resetDialogsAll
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r9 = r9.messages
            java.lang.Object r9 = r9.get(r8)
            org.telegram.tgnet.TLRPC$Message r9 = (org.telegram.tgnet.TLRPC$Message) r9
            if (r8 >= r10) goto L_0x010c
            if (r14 == 0) goto L_0x010b
            int r11 = r9.date
            int r12 = r14.date
            if (r11 >= r12) goto L_0x010c
        L_0x010b:
            r14 = r9
        L_0x010c:
            org.telegram.tgnet.TLRPC$Peer r11 = r9.peer_id
            int r12 = r11.channel_id
            if (r12 == 0) goto L_0x011f
            java.lang.Object r11 = r4.get(r12)
            org.telegram.tgnet.TLRPC$Chat r11 = (org.telegram.tgnet.TLRPC$Chat) r11
            if (r11 == 0) goto L_0x0130
            boolean r11 = r11.left
            if (r11 == 0) goto L_0x0130
            goto L_0x014c
        L_0x011f:
            int r11 = r11.chat_id
            if (r11 == 0) goto L_0x0130
            java.lang.Object r11 = r4.get(r11)
            org.telegram.tgnet.TLRPC$Chat r11 = (org.telegram.tgnet.TLRPC$Chat) r11
            if (r11 == 0) goto L_0x0130
            org.telegram.tgnet.TLRPC$InputChannel r11 = r11.migrated_to
            if (r11 == 0) goto L_0x0130
            goto L_0x014c
        L_0x0130:
            org.telegram.messenger.MessageObject r11 = new org.telegram.messenger.MessageObject
            int r12 = r6.currentAccount
            r24 = 0
            r25 = 1
            r19 = r11
            r20 = r12
            r21 = r9
            r22 = r3
            r23 = r4
            r19.<init>((int) r20, (org.telegram.tgnet.TLRPC$Message) r21, (android.util.SparseArray<org.telegram.tgnet.TLRPC$User>) r22, (android.util.SparseArray<org.telegram.tgnet.TLRPC$Chat>) r23, (boolean) r24, (boolean) r25)
            long r12 = r11.getDialogId()
            r2.put(r12, r11)
        L_0x014c:
            int r8 = r8 + 1
            goto L_0x00ed
        L_0x014f:
            r8 = 0
        L_0x0150:
            org.telegram.tgnet.TLRPC$messages_Dialogs r9 = r6.resetDialogsAll
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r9 = r9.dialogs
            int r9 = r9.size()
            if (r8 >= r9) goto L_0x021b
            org.telegram.tgnet.TLRPC$messages_Dialogs r9 = r6.resetDialogsAll
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r9 = r9.dialogs
            java.lang.Object r9 = r9.get(r8)
            org.telegram.tgnet.TLRPC$Dialog r9 = (org.telegram.tgnet.TLRPC$Dialog) r9
            org.telegram.messenger.DialogObject.initDialog(r9)
            long r11 = r9.id
            r16 = 0
            int r13 = (r11 > r16 ? 1 : (r11 == r16 ? 0 : -1))
            if (r13 != 0) goto L_0x0172
        L_0x016f:
            r13 = r1
            goto L_0x0215
        L_0x0172:
            int r13 = r9.last_message_date
            if (r13 != 0) goto L_0x0184
            java.lang.Object r11 = r2.get(r11)
            org.telegram.messenger.MessageObject r11 = (org.telegram.messenger.MessageObject) r11
            if (r11 == 0) goto L_0x0184
            org.telegram.tgnet.TLRPC$Message r11 = r11.messageOwner
            int r11 = r11.date
            r9.last_message_date = r11
        L_0x0184:
            boolean r11 = org.telegram.messenger.DialogObject.isChannel(r9)
            if (r11 == 0) goto L_0x01a7
            long r11 = r9.id
            int r12 = (int) r11
            int r11 = -r12
            java.lang.Object r11 = r4.get(r11)
            org.telegram.tgnet.TLRPC$Chat r11 = (org.telegram.tgnet.TLRPC$Chat) r11
            if (r11 == 0) goto L_0x019b
            boolean r11 = r11.left
            if (r11 == 0) goto L_0x019b
            goto L_0x016f
        L_0x019b:
            android.util.SparseIntArray r11 = r6.channelsPts
            long r12 = r9.id
            int r13 = (int) r12
            int r12 = -r13
            int r13 = r9.pts
            r11.put(r12, r13)
            goto L_0x01bb
        L_0x01a7:
            long r11 = r9.id
            int r13 = (int) r11
            if (r13 >= 0) goto L_0x01bb
            int r12 = (int) r11
            int r11 = -r12
            java.lang.Object r11 = r4.get(r11)
            org.telegram.tgnet.TLRPC$Chat r11 = (org.telegram.tgnet.TLRPC$Chat) r11
            if (r11 == 0) goto L_0x01bb
            org.telegram.tgnet.TLRPC$InputChannel r11 = r11.migrated_to
            if (r11 == 0) goto L_0x01bb
            goto L_0x016f
        L_0x01bb:
            long r11 = r9.id
            r15.put(r11, r9)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r11 = r6.dialogs_read_inbox_max
            long r12 = r9.id
            java.lang.Long r12 = java.lang.Long.valueOf(r12)
            java.lang.Object r11 = r11.get(r12)
            java.lang.Integer r11 = (java.lang.Integer) r11
            if (r11 != 0) goto L_0x01d1
            r11 = r1
        L_0x01d1:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r12 = r6.dialogs_read_inbox_max
            r13 = r1
            long r0 = r9.id
            java.lang.Long r0 = java.lang.Long.valueOf(r0)
            int r1 = r11.intValue()
            int r11 = r9.read_inbox_max_id
            int r1 = java.lang.Math.max(r1, r11)
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            r12.put(r0, r1)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r0 = r6.dialogs_read_outbox_max
            long r11 = r9.id
            java.lang.Long r1 = java.lang.Long.valueOf(r11)
            java.lang.Object r0 = r0.get(r1)
            java.lang.Integer r0 = (java.lang.Integer) r0
            if (r0 != 0) goto L_0x01fc
            r0 = r13
        L_0x01fc:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r6.dialogs_read_outbox_max
            long r11 = r9.id
            java.lang.Long r11 = java.lang.Long.valueOf(r11)
            int r0 = r0.intValue()
            int r9 = r9.read_outbox_max_id
            int r0 = java.lang.Math.max(r0, r9)
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)
            r1.put(r11, r0)
        L_0x0215:
            int r8 = r8 + 1
            r1 = r13
            r0 = 0
            goto L_0x0150
        L_0x021b:
            org.telegram.tgnet.TLRPC$messages_Dialogs r0 = r6.resetDialogsAll
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r0 = r0.messages
            org.telegram.messenger.ImageLoader.saveMessagesThumbs(r0)
            r0 = 0
        L_0x0223:
            org.telegram.tgnet.TLRPC$messages_Dialogs r1 = r6.resetDialogsAll
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r1.messages
            int r1 = r1.size()
            if (r0 >= r1) goto L_0x02ab
            org.telegram.tgnet.TLRPC$messages_Dialogs r1 = r6.resetDialogsAll
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r1.messages
            java.lang.Object r1 = r1.get(r0)
            org.telegram.tgnet.TLRPC$Message r1 = (org.telegram.tgnet.TLRPC$Message) r1
            org.telegram.tgnet.TLRPC$MessageAction r4 = r1.action
            boolean r8 = r4 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatDeleteUser
            if (r8 == 0) goto L_0x0258
            int r4 = r4.user_id
            java.lang.Object r4 = r3.get(r4)
            org.telegram.tgnet.TLRPC$User r4 = (org.telegram.tgnet.TLRPC$User) r4
            if (r4 == 0) goto L_0x0258
            boolean r4 = r4.bot
            if (r4 == 0) goto L_0x0258
            org.telegram.tgnet.TLRPC$TL_replyKeyboardHide r4 = new org.telegram.tgnet.TLRPC$TL_replyKeyboardHide
            r4.<init>()
            r1.reply_markup = r4
            int r4 = r1.flags
            r4 = r4 | 64
            r1.flags = r4
        L_0x0258:
            org.telegram.tgnet.TLRPC$MessageAction r4 = r1.action
            boolean r8 = r4 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatMigrateTo
            if (r8 != 0) goto L_0x02a2
            boolean r4 = r4 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChannelCreate
            if (r4 == 0) goto L_0x0263
            goto L_0x02a2
        L_0x0263:
            boolean r4 = r1.out
            if (r4 == 0) goto L_0x026a
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r4 = r6.dialogs_read_outbox_max
            goto L_0x026c
        L_0x026a:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r4 = r6.dialogs_read_inbox_max
        L_0x026c:
            long r8 = r1.dialog_id
            java.lang.Long r8 = java.lang.Long.valueOf(r8)
            java.lang.Object r8 = r4.get(r8)
            java.lang.Integer r8 = (java.lang.Integer) r8
            if (r8 != 0) goto L_0x0293
            org.telegram.messenger.MessagesStorage r8 = r26.getMessagesStorage()
            boolean r9 = r1.out
            long r11 = r1.dialog_id
            int r8 = r8.getDialogReadMax(r9, r11)
            java.lang.Integer r8 = java.lang.Integer.valueOf(r8)
            long r11 = r1.dialog_id
            java.lang.Long r9 = java.lang.Long.valueOf(r11)
            r4.put(r9, r8)
        L_0x0293:
            int r4 = r8.intValue()
            int r8 = r1.id
            if (r4 >= r8) goto L_0x029d
            r4 = 1
            goto L_0x029e
        L_0x029d:
            r4 = 0
        L_0x029e:
            r1.unread = r4
            r4 = 0
            goto L_0x02a7
        L_0x02a2:
            r4 = 0
            r1.unread = r4
            r1.media_unread = r4
        L_0x02a7:
            int r0 = r0 + 1
            goto L_0x0223
        L_0x02ab:
            org.telegram.messenger.MessagesStorage r8 = r26.getMessagesStorage()
            org.telegram.tgnet.TLRPC$messages_Dialogs r9 = r6.resetDialogsAll
            r11 = r28
            r12 = r29
            r13 = r30
            r0 = r14
            r14 = r31
            r16 = r2
            r17 = r0
            r8.resetDialogs(r9, r10, r11, r12, r13, r14, r15, r16, r17, r18)
            r6.resetDialogsPinned = r5
            r6.resetDialogsAll = r5
        L_0x02c5:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.resetDialogs(boolean, int, int, int, int):void");
    }

    /* access modifiers changed from: protected */
    public void completeDialogsReset(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, int i, int i2, int i3, int i4, int i5, LongSparseArray<TLRPC$Dialog> longSparseArray, LongSparseArray<MessageObject> longSparseArray2, TLRPC$Message tLRPC$Message) {
        Utilities.stageQueue.postRunnable(new Runnable(i3, i4, i5, tLRPC$messages_Dialogs, longSparseArray, longSparseArray2) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ int f$2;
            public final /* synthetic */ int f$3;
            public final /* synthetic */ TLRPC$messages_Dialogs f$4;
            public final /* synthetic */ LongSparseArray f$5;
            public final /* synthetic */ LongSparseArray f$6;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
            }

            public final void run() {
                MessagesController.this.lambda$completeDialogsReset$159$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$completeDialogsReset$159 */
    public /* synthetic */ void lambda$completeDialogsReset$159$MessagesController(int i, int i2, int i3, TLRPC$messages_Dialogs tLRPC$messages_Dialogs, LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        this.gettingDifference = false;
        getMessagesStorage().setLastPtsValue(i);
        getMessagesStorage().setLastDateValue(i2);
        getMessagesStorage().setLastQtsValue(i3);
        getDifference();
        AndroidUtilities.runOnUIThread(new Runnable(tLRPC$messages_Dialogs, longSparseArray, longSparseArray2) {
            public final /* synthetic */ TLRPC$messages_Dialogs f$1;
            public final /* synthetic */ LongSparseArray f$2;
            public final /* synthetic */ LongSparseArray f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesController.this.lambda$null$158$MessagesController(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$158 */
    public /* synthetic */ void lambda$null$158$MessagesController(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        TLRPC$Dialog tLRPC$Dialog;
        TLRPC$messages_Dialogs tLRPC$messages_Dialogs2 = tLRPC$messages_Dialogs;
        LongSparseArray longSparseArray3 = longSparseArray;
        this.resetingDialogs = false;
        applyDialogsNotificationsSettings(tLRPC$messages_Dialogs2.dialogs);
        MediaDataController mediaDataController = getMediaDataController();
        mediaDataController.clearAllDrafts(false);
        mediaDataController.loadDraftsIfNeed();
        putUsers(tLRPC$messages_Dialogs2.users, false);
        putChats(tLRPC$messages_Dialogs2.chats, false);
        for (int i = 0; i < this.allDialogs.size(); i++) {
            TLRPC$Dialog tLRPC$Dialog2 = this.allDialogs.get(i);
            if (!DialogObject.isSecretDialogId(tLRPC$Dialog2.id)) {
                this.dialogs_dict.remove(tLRPC$Dialog2.id);
                MessageObject messageObject = this.dialogMessage.get(tLRPC$Dialog2.id);
                this.dialogMessage.remove(tLRPC$Dialog2.id);
                if (messageObject != null) {
                    if (messageObject.messageOwner.peer_id.channel_id == 0) {
                        this.dialogMessagesByIds.remove(messageObject.getId());
                    }
                    long j = messageObject.messageOwner.random_id;
                    if (j != 0) {
                        this.dialogMessagesByRandomIds.remove(j);
                    }
                }
            }
        }
        for (int i2 = 0; i2 < longSparseArray.size(); i2++) {
            long keyAt = longSparseArray3.keyAt(i2);
            TLRPC$Dialog tLRPC$Dialog3 = (TLRPC$Dialog) longSparseArray3.valueAt(i2);
            TLRPC$DraftMessage tLRPC$DraftMessage = tLRPC$Dialog3.draft;
            if (tLRPC$DraftMessage instanceof TLRPC$TL_draftMessage) {
                tLRPC$Dialog = tLRPC$Dialog3;
                mediaDataController.saveDraft(tLRPC$Dialog3.id, 0, tLRPC$DraftMessage, (TLRPC$Message) null, false);
            } else {
                tLRPC$Dialog = tLRPC$Dialog3;
            }
            this.dialogs_dict.put(keyAt, tLRPC$Dialog);
            MessageObject messageObject2 = (MessageObject) longSparseArray2.get(tLRPC$Dialog.id);
            this.dialogMessage.put(keyAt, messageObject2);
            if (messageObject2 != null && messageObject2.messageOwner.peer_id.channel_id == 0) {
                this.dialogMessagesByIds.put(messageObject2.getId(), messageObject2);
                this.dialogsLoadedTillDate = Math.min(this.dialogsLoadedTillDate, messageObject2.messageOwner.date);
                long j2 = messageObject2.messageOwner.random_id;
                if (j2 != 0) {
                    this.dialogMessagesByRandomIds.put(j2, messageObject2);
                }
            }
        }
        this.allDialogs.clear();
        int size = this.dialogs_dict.size();
        for (int i3 = 0; i3 < size; i3++) {
            this.allDialogs.add(this.dialogs_dict.valueAt(i3));
        }
        sortDialogs((SparseArray<TLRPC$Chat>) null);
        this.dialogsEndReached.put(0, true);
        this.serverDialogsEndReached.put(0, false);
        this.dialogsEndReached.put(1, true);
        this.serverDialogsEndReached.put(1, false);
        int totalDialogsCount = getUserConfig().getTotalDialogsCount(0);
        int[] dialogLoadOffsets = getUserConfig().getDialogLoadOffsets(0);
        if (!(totalDialogsCount >= 400 || dialogLoadOffsets[0] == -1 || dialogLoadOffsets[0] == Integer.MAX_VALUE)) {
            loadDialogs(0, 0, 100, false);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    private void migrateDialogs(int i, int i2, int i3, int i4, int i5, long j) {
        if (!this.migratingDialogs && i != -1) {
            this.migratingDialogs = true;
            TLRPC$TL_messages_getDialogs tLRPC$TL_messages_getDialogs = new TLRPC$TL_messages_getDialogs();
            tLRPC$TL_messages_getDialogs.exclude_pinned = true;
            tLRPC$TL_messages_getDialogs.limit = 100;
            tLRPC$TL_messages_getDialogs.offset_id = i;
            tLRPC$TL_messages_getDialogs.offset_date = i2;
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("start migrate with id " + i + " date " + LocaleController.getInstance().formatterStats.format(((long) i2) * 1000));
            }
            if (i == 0) {
                tLRPC$TL_messages_getDialogs.offset_peer = new TLRPC$TL_inputPeerEmpty();
            } else {
                if (i5 != 0) {
                    TLRPC$TL_inputPeerChannel tLRPC$TL_inputPeerChannel = new TLRPC$TL_inputPeerChannel();
                    tLRPC$TL_messages_getDialogs.offset_peer = tLRPC$TL_inputPeerChannel;
                    tLRPC$TL_inputPeerChannel.channel_id = i5;
                } else if (i3 != 0) {
                    TLRPC$TL_inputPeerUser tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerUser();
                    tLRPC$TL_messages_getDialogs.offset_peer = tLRPC$TL_inputPeerUser;
                    tLRPC$TL_inputPeerUser.user_id = i3;
                } else {
                    TLRPC$TL_inputPeerChat tLRPC$TL_inputPeerChat = new TLRPC$TL_inputPeerChat();
                    tLRPC$TL_messages_getDialogs.offset_peer = tLRPC$TL_inputPeerChat;
                    tLRPC$TL_inputPeerChat.chat_id = i4;
                }
                tLRPC$TL_messages_getDialogs.offset_peer.access_hash = j;
            }
            getConnectionsManager().sendRequest(tLRPC$TL_messages_getDialogs, new RequestDelegate(i) {
                public final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$migrateDialogs$163$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$migrateDialogs$163 */
    public /* synthetic */ void lambda$migrateDialogs$163$MessagesController(int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            getMessagesStorage().getStorageQueue().postRunnable(new Runnable((TLRPC$messages_Dialogs) tLObject, i) {
                public final /* synthetic */ TLRPC$messages_Dialogs f$1;
                public final /* synthetic */ int f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    MessagesController.this.lambda$null$161$MessagesController(this.f$1, this.f$2);
                }
            });
        } else {
            AndroidUtilities.runOnUIThread(new Runnable() {
                public final void run() {
                    MessagesController.this.lambda$null$162$MessagesController();
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Removed duplicated region for block: B:104:0x0358 A[Catch:{ Exception -> 0x03f3 }] */
    /* JADX WARNING: Removed duplicated region for block: B:97:0x0319 A[Catch:{ Exception -> 0x03f3 }] */
    /* renamed from: lambda$null$161 */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$null$161$MessagesController(org.telegram.tgnet.TLRPC$messages_Dialogs r30, int r31) {
        /*
            r29 = this;
            r0 = r30
            r1 = r31
            org.telegram.messenger.UserConfig r2 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            r3 = 0
            int r2 = r2.getTotalDialogsCount(r3)     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.UserConfig r4 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r5 = r0.dialogs     // Catch:{ Exception -> 0x03f3 }
            int r5 = r5.size()     // Catch:{ Exception -> 0x03f3 }
            int r2 = r2 + r5
            r4.setTotalDialogsCount(r3, r2)     // Catch:{ Exception -> 0x03f3 }
            r2 = 0
            r4 = 0
        L_0x001d:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r5 = r0.messages     // Catch:{ Exception -> 0x03f3 }
            int r5 = r5.size()     // Catch:{ Exception -> 0x03f3 }
            java.lang.String r6 = " date "
            r7 = 1000(0x3e8, double:4.94E-321)
            if (r4 >= r5) goto L_0x006c
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r5 = r0.messages     // Catch:{ Exception -> 0x03f3 }
            java.lang.Object r5 = r5.get(r4)     // Catch:{ Exception -> 0x03f3 }
            org.telegram.tgnet.TLRPC$Message r5 = (org.telegram.tgnet.TLRPC$Message) r5     // Catch:{ Exception -> 0x03f3 }
            boolean r9 = org.telegram.messenger.BuildVars.LOGS_ENABLED     // Catch:{ Exception -> 0x03f3 }
            if (r9 == 0) goto L_0x0060
            java.lang.StringBuilder r9 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x03f3 }
            r9.<init>()     // Catch:{ Exception -> 0x03f3 }
            java.lang.String r10 = "search migrate id "
            r9.append(r10)     // Catch:{ Exception -> 0x03f3 }
            int r10 = r5.id     // Catch:{ Exception -> 0x03f3 }
            r9.append(r10)     // Catch:{ Exception -> 0x03f3 }
            r9.append(r6)     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.LocaleController r6 = org.telegram.messenger.LocaleController.getInstance()     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.time.FastDateFormat r6 = r6.formatterStats     // Catch:{ Exception -> 0x03f3 }
            int r10 = r5.date     // Catch:{ Exception -> 0x03f3 }
            long r10 = (long) r10     // Catch:{ Exception -> 0x03f3 }
            long r10 = r10 * r7
            java.lang.String r6 = r6.format((long) r10)     // Catch:{ Exception -> 0x03f3 }
            r9.append(r6)     // Catch:{ Exception -> 0x03f3 }
            java.lang.String r6 = r9.toString()     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.FileLog.d(r6)     // Catch:{ Exception -> 0x03f3 }
        L_0x0060:
            if (r2 == 0) goto L_0x0068
            int r6 = r5.date     // Catch:{ Exception -> 0x03f3 }
            int r7 = r2.date     // Catch:{ Exception -> 0x03f3 }
            if (r6 >= r7) goto L_0x0069
        L_0x0068:
            r2 = r5
        L_0x0069:
            int r4 = r4 + 1
            goto L_0x001d
        L_0x006c:
            boolean r4 = org.telegram.messenger.BuildVars.LOGS_ENABLED     // Catch:{ Exception -> 0x03f3 }
            if (r4 == 0) goto L_0x009b
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x03f3 }
            r4.<init>()     // Catch:{ Exception -> 0x03f3 }
            java.lang.String r5 = "migrate step with id "
            r4.append(r5)     // Catch:{ Exception -> 0x03f3 }
            int r5 = r2.id     // Catch:{ Exception -> 0x03f3 }
            r4.append(r5)     // Catch:{ Exception -> 0x03f3 }
            r4.append(r6)     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.LocaleController r5 = org.telegram.messenger.LocaleController.getInstance()     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.time.FastDateFormat r5 = r5.formatterStats     // Catch:{ Exception -> 0x03f3 }
            int r6 = r2.date     // Catch:{ Exception -> 0x03f3 }
            long r9 = (long) r6     // Catch:{ Exception -> 0x03f3 }
            long r9 = r9 * r7
            java.lang.String r5 = r5.format((long) r9)     // Catch:{ Exception -> 0x03f3 }
            r4.append(r5)     // Catch:{ Exception -> 0x03f3 }
            java.lang.String r4 = r4.toString()     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.FileLog.d(r4)     // Catch:{ Exception -> 0x03f3 }
        L_0x009b:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r4 = r0.dialogs     // Catch:{ Exception -> 0x03f3 }
            int r4 = r4.size()     // Catch:{ Exception -> 0x03f3 }
            r5 = 100
            r6 = 2
            r9 = -1
            if (r4 < r5) goto L_0x00aa
            int r4 = r2.id     // Catch:{ Exception -> 0x03f3 }
            goto L_0x00e9
        L_0x00aa:
            boolean r4 = org.telegram.messenger.BuildVars.LOGS_ENABLED     // Catch:{ Exception -> 0x03f3 }
            if (r4 == 0) goto L_0x00b3
            java.lang.String r4 = "migrate stop due to not 100 dialogs"
            org.telegram.messenger.FileLog.d(r4)     // Catch:{ Exception -> 0x03f3 }
        L_0x00b3:
            r4 = 0
        L_0x00b4:
            if (r4 >= r6) goto L_0x00e8
            org.telegram.messenger.UserConfig r10 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            r12 = 2147483647(0x7fffffff, float:NaN)
            org.telegram.messenger.UserConfig r5 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            int r13 = r5.migrateOffsetDate     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.UserConfig r5 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            int r14 = r5.migrateOffsetUserId     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.UserConfig r5 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            int r15 = r5.migrateOffsetChatId     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.UserConfig r5 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            int r5 = r5.migrateOffsetChannelId     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.UserConfig r11 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            long r7 = r11.migrateOffsetAccess     // Catch:{ Exception -> 0x03f3 }
            r11 = r4
            r16 = r5
            r17 = r7
            r10.setDialogsLoadOffset(r11, r12, r13, r14, r15, r16, r17)     // Catch:{ Exception -> 0x03f3 }
            int r4 = r4 + 1
            r7 = 1000(0x3e8, double:4.94E-321)
            goto L_0x00b4
        L_0x00e8:
            r4 = -1
        L_0x00e9:
            java.lang.StringBuilder r5 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x03f3 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r7 = r0.dialogs     // Catch:{ Exception -> 0x03f3 }
            int r7 = r7.size()     // Catch:{ Exception -> 0x03f3 }
            int r7 = r7 * 12
            r5.<init>(r7)     // Catch:{ Exception -> 0x03f3 }
            android.util.LongSparseArray r7 = new android.util.LongSparseArray     // Catch:{ Exception -> 0x03f3 }
            r7.<init>()     // Catch:{ Exception -> 0x03f3 }
            r8 = 0
        L_0x00fc:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r10 = r0.dialogs     // Catch:{ Exception -> 0x03f3 }
            int r10 = r10.size()     // Catch:{ Exception -> 0x03f3 }
            if (r8 >= r10) goto L_0x0127
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r10 = r0.dialogs     // Catch:{ Exception -> 0x03f3 }
            java.lang.Object r10 = r10.get(r8)     // Catch:{ Exception -> 0x03f3 }
            org.telegram.tgnet.TLRPC$Dialog r10 = (org.telegram.tgnet.TLRPC$Dialog) r10     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.DialogObject.initDialog(r10)     // Catch:{ Exception -> 0x03f3 }
            int r11 = r5.length()     // Catch:{ Exception -> 0x03f3 }
            if (r11 <= 0) goto L_0x011a
            java.lang.String r11 = ","
            r5.append(r11)     // Catch:{ Exception -> 0x03f3 }
        L_0x011a:
            long r11 = r10.id     // Catch:{ Exception -> 0x03f3 }
            r5.append(r11)     // Catch:{ Exception -> 0x03f3 }
            long r11 = r10.id     // Catch:{ Exception -> 0x03f3 }
            r7.put(r11, r10)     // Catch:{ Exception -> 0x03f3 }
            int r8 = r8 + 1
            goto L_0x00fc
        L_0x0127:
            org.telegram.messenger.MessagesStorage r8 = r29.getMessagesStorage()     // Catch:{ Exception -> 0x03f3 }
            org.telegram.SQLite.SQLiteDatabase r8 = r8.getDatabase()     // Catch:{ Exception -> 0x03f3 }
            java.util.Locale r10 = java.util.Locale.US     // Catch:{ Exception -> 0x03f3 }
            java.lang.String r11 = "SELECT did, folder_id FROM dialogs WHERE did IN (%s)"
            r12 = 1
            java.lang.Object[] r13 = new java.lang.Object[r12]     // Catch:{ Exception -> 0x03f3 }
            java.lang.String r5 = r5.toString()     // Catch:{ Exception -> 0x03f3 }
            r13[r3] = r5     // Catch:{ Exception -> 0x03f3 }
            java.lang.String r5 = java.lang.String.format(r10, r11, r13)     // Catch:{ Exception -> 0x03f3 }
            java.lang.Object[] r10 = new java.lang.Object[r3]     // Catch:{ Exception -> 0x03f3 }
            org.telegram.SQLite.SQLiteCursor r5 = r8.queryFinalized(r5, r10)     // Catch:{ Exception -> 0x03f3 }
        L_0x0146:
            boolean r8 = r5.next()     // Catch:{ Exception -> 0x03f3 }
            if (r8 == 0) goto L_0x0196
            long r10 = r5.longValue(r3)     // Catch:{ Exception -> 0x03f3 }
            int r8 = r5.intValue(r12)     // Catch:{ Exception -> 0x03f3 }
            java.lang.Object r13 = r7.get(r10)     // Catch:{ Exception -> 0x03f3 }
            org.telegram.tgnet.TLRPC$Dialog r13 = (org.telegram.tgnet.TLRPC$Dialog) r13     // Catch:{ Exception -> 0x03f3 }
            if (r13 == 0) goto L_0x0192
            int r14 = r13.folder_id     // Catch:{ Exception -> 0x03f3 }
            if (r14 == r8) goto L_0x0161
            goto L_0x0146
        L_0x0161:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r8 = r0.dialogs     // Catch:{ Exception -> 0x03f3 }
            r8.remove(r13)     // Catch:{ Exception -> 0x03f3 }
            r8 = 0
        L_0x0167:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r14 = r0.messages     // Catch:{ Exception -> 0x03f3 }
            int r14 = r14.size()     // Catch:{ Exception -> 0x03f3 }
            if (r8 >= r14) goto L_0x0192
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r14 = r0.messages     // Catch:{ Exception -> 0x03f3 }
            java.lang.Object r14 = r14.get(r8)     // Catch:{ Exception -> 0x03f3 }
            org.telegram.tgnet.TLRPC$Message r14 = (org.telegram.tgnet.TLRPC$Message) r14     // Catch:{ Exception -> 0x03f3 }
            long r15 = org.telegram.messenger.MessageObject.getDialogId(r14)     // Catch:{ Exception -> 0x03f3 }
            int r17 = (r15 > r10 ? 1 : (r15 == r10 ? 0 : -1))
            if (r17 == 0) goto L_0x0180
            goto L_0x0190
        L_0x0180:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r15 = r0.messages     // Catch:{ Exception -> 0x03f3 }
            r15.remove(r8)     // Catch:{ Exception -> 0x03f3 }
            int r8 = r8 + -1
            int r14 = r14.id     // Catch:{ Exception -> 0x03f3 }
            int r15 = r13.top_message     // Catch:{ Exception -> 0x03f3 }
            if (r14 != r15) goto L_0x0190
            r13.top_message = r3     // Catch:{ Exception -> 0x03f3 }
            goto L_0x0192
        L_0x0190:
            int r8 = r8 + r12
            goto L_0x0167
        L_0x0192:
            r7.remove(r10)     // Catch:{ Exception -> 0x03f3 }
            goto L_0x0146
        L_0x0196:
            r5.dispose()     // Catch:{ Exception -> 0x03f3 }
            boolean r5 = org.telegram.messenger.BuildVars.LOGS_ENABLED     // Catch:{ Exception -> 0x03f3 }
            if (r5 == 0) goto L_0x01b7
            java.lang.StringBuilder r5 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x03f3 }
            r5.<init>()     // Catch:{ Exception -> 0x03f3 }
            java.lang.String r8 = "migrate found missing dialogs "
            r5.append(r8)     // Catch:{ Exception -> 0x03f3 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r8 = r0.dialogs     // Catch:{ Exception -> 0x03f3 }
            int r8 = r8.size()     // Catch:{ Exception -> 0x03f3 }
            r5.append(r8)     // Catch:{ Exception -> 0x03f3 }
            java.lang.String r5 = r5.toString()     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.FileLog.d(r5)     // Catch:{ Exception -> 0x03f3 }
        L_0x01b7:
            org.telegram.messenger.MessagesStorage r5 = r29.getMessagesStorage()     // Catch:{ Exception -> 0x03f3 }
            org.telegram.SQLite.SQLiteDatabase r5 = r5.getDatabase()     // Catch:{ Exception -> 0x03f3 }
            java.lang.String r8 = "SELECT min(date) FROM dialogs WHERE date != 0 AND did >> 32 IN (0, -1)"
            java.lang.Object[] r10 = new java.lang.Object[r3]     // Catch:{ Exception -> 0x03f3 }
            org.telegram.SQLite.SQLiteCursor r5 = r5.queryFinalized(r8, r10)     // Catch:{ Exception -> 0x03f3 }
            boolean r8 = r5.next()     // Catch:{ Exception -> 0x03f3 }
            if (r8 == 0) goto L_0x0307
            r8 = 1441062000(0x55e4dCLASSNAME, float:3.14544279E13)
            int r10 = r5.intValue(r3)     // Catch:{ Exception -> 0x03f3 }
            int r8 = java.lang.Math.max(r8, r10)     // Catch:{ Exception -> 0x03f3 }
            r10 = 0
        L_0x01d9:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r11 = r0.messages     // Catch:{ Exception -> 0x03f3 }
            int r11 = r11.size()     // Catch:{ Exception -> 0x03f3 }
            java.lang.String r13 = "migrate stop due to reached loaded dialogs "
            if (r10 >= r11) goto L_0x028f
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r11 = r0.messages     // Catch:{ Exception -> 0x03f3 }
            java.lang.Object r11 = r11.get(r10)     // Catch:{ Exception -> 0x03f3 }
            org.telegram.tgnet.TLRPC$Message r11 = (org.telegram.tgnet.TLRPC$Message) r11     // Catch:{ Exception -> 0x03f3 }
            int r14 = r11.date     // Catch:{ Exception -> 0x03f3 }
            if (r14 >= r8) goto L_0x0281
            if (r1 == r9) goto L_0x0263
            r4 = 0
        L_0x01f2:
            if (r4 >= r6) goto L_0x023a
            org.telegram.messenger.UserConfig r19 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.UserConfig r14 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            int r14 = r14.migrateOffsetId     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.UserConfig r15 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            int r15 = r15.migrateOffsetDate     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.UserConfig r3 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            int r3 = r3.migrateOffsetUserId     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.UserConfig r6 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            int r6 = r6.migrateOffsetChatId     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.UserConfig r9 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            int r9 = r9.migrateOffsetChannelId     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.UserConfig r12 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            r28 = r2
            long r1 = r12.migrateOffsetAccess     // Catch:{ Exception -> 0x03f3 }
            r20 = r4
            r21 = r14
            r22 = r15
            r23 = r3
            r24 = r6
            r25 = r9
            r26 = r1
            r19.setDialogsLoadOffset(r20, r21, r22, r23, r24, r25, r26)     // Catch:{ Exception -> 0x03f3 }
            int r4 = r4 + 1
            r1 = r31
            r2 = r28
            r3 = 0
            r6 = 2
            r9 = -1
            r12 = 1
            goto L_0x01f2
        L_0x023a:
            r28 = r2
            boolean r1 = org.telegram.messenger.BuildVars.LOGS_ENABLED     // Catch:{ Exception -> 0x03f3 }
            if (r1 == 0) goto L_0x0261
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x03f3 }
            r1.<init>()     // Catch:{ Exception -> 0x03f3 }
            r1.append(r13)     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.LocaleController r2 = org.telegram.messenger.LocaleController.getInstance()     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.time.FastDateFormat r2 = r2.formatterStats     // Catch:{ Exception -> 0x03f3 }
            long r3 = (long) r8     // Catch:{ Exception -> 0x03f3 }
            r12 = 1000(0x3e8, double:4.94E-321)
            long r3 = r3 * r12
            java.lang.String r2 = r2.format((long) r3)     // Catch:{ Exception -> 0x03f3 }
            r1.append(r2)     // Catch:{ Exception -> 0x03f3 }
            java.lang.String r1 = r1.toString()     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.FileLog.d(r1)     // Catch:{ Exception -> 0x03f3 }
        L_0x0261:
            r4 = -1
            goto L_0x0265
        L_0x0263:
            r28 = r2
        L_0x0265:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r0.messages     // Catch:{ Exception -> 0x03f3 }
            r1.remove(r10)     // Catch:{ Exception -> 0x03f3 }
            int r10 = r10 + -1
            long r1 = org.telegram.messenger.MessageObject.getDialogId(r11)     // Catch:{ Exception -> 0x03f3 }
            java.lang.Object r3 = r7.get(r1)     // Catch:{ Exception -> 0x03f3 }
            org.telegram.tgnet.TLRPC$Dialog r3 = (org.telegram.tgnet.TLRPC$Dialog) r3     // Catch:{ Exception -> 0x03f3 }
            r7.remove(r1)     // Catch:{ Exception -> 0x03f3 }
            if (r3 == 0) goto L_0x0283
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r0.dialogs     // Catch:{ Exception -> 0x03f3 }
            r1.remove(r3)     // Catch:{ Exception -> 0x03f3 }
            goto L_0x0283
        L_0x0281:
            r28 = r2
        L_0x0283:
            r1 = 1
            int r10 = r10 + r1
            r1 = r31
            r2 = r28
            r3 = 0
            r6 = 2
            r9 = -1
            r12 = 1
            goto L_0x01d9
        L_0x028f:
            r28 = r2
            if (r28 == 0) goto L_0x0305
            r2 = r28
            int r1 = r2.date     // Catch:{ Exception -> 0x03f3 }
            if (r1 >= r8) goto L_0x0307
            r1 = r31
            r3 = -1
            if (r1 == r3) goto L_0x0307
            r1 = 0
            r4 = 2
        L_0x02a0:
            if (r1 >= r4) goto L_0x02de
            org.telegram.messenger.UserConfig r19 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.UserConfig r6 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            int r6 = r6.migrateOffsetId     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.UserConfig r7 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            int r7 = r7.migrateOffsetDate     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.UserConfig r9 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            int r9 = r9.migrateOffsetUserId     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.UserConfig r10 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            int r10 = r10.migrateOffsetChatId     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.UserConfig r11 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            int r11 = r11.migrateOffsetChannelId     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.UserConfig r12 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            long r14 = r12.migrateOffsetAccess     // Catch:{ Exception -> 0x03f3 }
            r20 = r1
            r21 = r6
            r22 = r7
            r23 = r9
            r24 = r10
            r25 = r11
            r26 = r14
            r19.setDialogsLoadOffset(r20, r21, r22, r23, r24, r25, r26)     // Catch:{ Exception -> 0x03f3 }
            int r1 = r1 + 1
            goto L_0x02a0
        L_0x02de:
            boolean r1 = org.telegram.messenger.BuildVars.LOGS_ENABLED     // Catch:{ Exception -> 0x03f3 }
            if (r1 == 0) goto L_0x0303
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x03f3 }
            r1.<init>()     // Catch:{ Exception -> 0x03f3 }
            r1.append(r13)     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.LocaleController r4 = org.telegram.messenger.LocaleController.getInstance()     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.time.FastDateFormat r4 = r4.formatterStats     // Catch:{ Exception -> 0x03f3 }
            long r6 = (long) r8     // Catch:{ Exception -> 0x03f3 }
            r8 = 1000(0x3e8, double:4.94E-321)
            long r6 = r6 * r8
            java.lang.String r4 = r4.format((long) r6)     // Catch:{ Exception -> 0x03f3 }
            r1.append(r4)     // Catch:{ Exception -> 0x03f3 }
            java.lang.String r1 = r1.toString()     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.FileLog.d(r1)     // Catch:{ Exception -> 0x03f3 }
        L_0x0303:
            r6 = -1
            goto L_0x0308
        L_0x0305:
            r2 = r28
        L_0x0307:
            r6 = r4
        L_0x0308:
            r5.dispose()     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.UserConfig r1 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            int r3 = r2.date     // Catch:{ Exception -> 0x03f3 }
            r1.migrateOffsetDate = r3     // Catch:{ Exception -> 0x03f3 }
            org.telegram.tgnet.TLRPC$Peer r1 = r2.peer_id     // Catch:{ Exception -> 0x03f3 }
            int r3 = r1.channel_id     // Catch:{ Exception -> 0x03f3 }
            if (r3 == 0) goto L_0x0358
            org.telegram.messenger.UserConfig r1 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            org.telegram.tgnet.TLRPC$Peer r2 = r2.peer_id     // Catch:{ Exception -> 0x03f3 }
            int r2 = r2.channel_id     // Catch:{ Exception -> 0x03f3 }
            r1.migrateOffsetChannelId = r2     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.UserConfig r1 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            r2 = 0
            r1.migrateOffsetChatId = r2     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.UserConfig r1 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            r1.migrateOffsetUserId = r2     // Catch:{ Exception -> 0x03f3 }
            r3 = 0
        L_0x0331:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r1 = r0.chats     // Catch:{ Exception -> 0x03f3 }
            int r1 = r1.size()     // Catch:{ Exception -> 0x03f3 }
            if (r3 >= r1) goto L_0x03dc
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r1 = r0.chats     // Catch:{ Exception -> 0x03f3 }
            java.lang.Object r1 = r1.get(r3)     // Catch:{ Exception -> 0x03f3 }
            org.telegram.tgnet.TLRPC$Chat r1 = (org.telegram.tgnet.TLRPC$Chat) r1     // Catch:{ Exception -> 0x03f3 }
            int r2 = r1.id     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.UserConfig r4 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            int r4 = r4.migrateOffsetChannelId     // Catch:{ Exception -> 0x03f3 }
            if (r2 != r4) goto L_0x0355
            org.telegram.messenger.UserConfig r2 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            long r3 = r1.access_hash     // Catch:{ Exception -> 0x03f3 }
            r2.migrateOffsetAccess = r3     // Catch:{ Exception -> 0x03f3 }
            goto L_0x03dc
        L_0x0355:
            int r3 = r3 + 1
            goto L_0x0331
        L_0x0358:
            int r3 = r1.chat_id     // Catch:{ Exception -> 0x03f3 }
            if (r3 == 0) goto L_0x039a
            org.telegram.messenger.UserConfig r1 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            org.telegram.tgnet.TLRPC$Peer r2 = r2.peer_id     // Catch:{ Exception -> 0x03f3 }
            int r2 = r2.chat_id     // Catch:{ Exception -> 0x03f3 }
            r1.migrateOffsetChatId = r2     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.UserConfig r1 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            r2 = 0
            r1.migrateOffsetChannelId = r2     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.UserConfig r1 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            r1.migrateOffsetUserId = r2     // Catch:{ Exception -> 0x03f3 }
            r3 = 0
        L_0x0374:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r1 = r0.chats     // Catch:{ Exception -> 0x03f3 }
            int r1 = r1.size()     // Catch:{ Exception -> 0x03f3 }
            if (r3 >= r1) goto L_0x03dc
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r1 = r0.chats     // Catch:{ Exception -> 0x03f3 }
            java.lang.Object r1 = r1.get(r3)     // Catch:{ Exception -> 0x03f3 }
            org.telegram.tgnet.TLRPC$Chat r1 = (org.telegram.tgnet.TLRPC$Chat) r1     // Catch:{ Exception -> 0x03f3 }
            int r2 = r1.id     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.UserConfig r4 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            int r4 = r4.migrateOffsetChatId     // Catch:{ Exception -> 0x03f3 }
            if (r2 != r4) goto L_0x0397
            org.telegram.messenger.UserConfig r2 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            long r3 = r1.access_hash     // Catch:{ Exception -> 0x03f3 }
            r2.migrateOffsetAccess = r3     // Catch:{ Exception -> 0x03f3 }
            goto L_0x03dc
        L_0x0397:
            int r3 = r3 + 1
            goto L_0x0374
        L_0x039a:
            int r1 = r1.user_id     // Catch:{ Exception -> 0x03f3 }
            if (r1 == 0) goto L_0x03dc
            org.telegram.messenger.UserConfig r1 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            org.telegram.tgnet.TLRPC$Peer r2 = r2.peer_id     // Catch:{ Exception -> 0x03f3 }
            int r2 = r2.user_id     // Catch:{ Exception -> 0x03f3 }
            r1.migrateOffsetUserId = r2     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.UserConfig r1 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            r2 = 0
            r1.migrateOffsetChatId = r2     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.UserConfig r1 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            r1.migrateOffsetChannelId = r2     // Catch:{ Exception -> 0x03f3 }
            r3 = 0
        L_0x03b6:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r1 = r0.users     // Catch:{ Exception -> 0x03f3 }
            int r1 = r1.size()     // Catch:{ Exception -> 0x03f3 }
            if (r3 >= r1) goto L_0x03dc
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r1 = r0.users     // Catch:{ Exception -> 0x03f3 }
            java.lang.Object r1 = r1.get(r3)     // Catch:{ Exception -> 0x03f3 }
            org.telegram.tgnet.TLRPC$User r1 = (org.telegram.tgnet.TLRPC$User) r1     // Catch:{ Exception -> 0x03f3 }
            int r2 = r1.id     // Catch:{ Exception -> 0x03f3 }
            org.telegram.messenger.UserConfig r4 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            int r4 = r4.migrateOffsetUserId     // Catch:{ Exception -> 0x03f3 }
            if (r2 != r4) goto L_0x03d9
            org.telegram.messenger.UserConfig r2 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f3 }
            long r3 = r1.access_hash     // Catch:{ Exception -> 0x03f3 }
            r2.migrateOffsetAccess = r3     // Catch:{ Exception -> 0x03f3 }
            goto L_0x03dc
        L_0x03d9:
            int r3 = r3 + 1
            goto L_0x03b6
        L_0x03dc:
            r3 = 0
            r4 = 0
            r7 = 0
            r8 = 0
            r9 = 0
            r10 = 1
            r11 = 0
            r1 = r29
            r2 = r30
            r5 = r6
            r6 = r7
            r7 = r8
            r8 = r9
            r9 = r10
            r10 = r11
            r1.processLoadedDialogs(r2, r3, r4, r5, r6, r7, r8, r9, r10)     // Catch:{ Exception -> 0x03f3 }
            r1 = r29
            goto L_0x0401
        L_0x03f3:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
            org.telegram.messenger.-$$Lambda$MessagesController$lmqg7o-52RrlsT8h5nEogDsiGYc r0 = new org.telegram.messenger.-$$Lambda$MessagesController$lmqg7o-52RrlsT8h5nEogDsiGYc
            r1 = r29
            r0.<init>()
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r0)
        L_0x0401:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$null$161$MessagesController(org.telegram.tgnet.TLRPC$messages_Dialogs, int):void");
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$160 */
    public /* synthetic */ void lambda$null$160$MessagesController() {
        this.migratingDialogs = false;
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$162 */
    public /* synthetic */ void lambda$null$162$MessagesController() {
        this.migratingDialogs = false;
    }

    public void processLoadedDialogs(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, ArrayList<TLRPC$EncryptedChat> arrayList, int i, int i2, int i3, int i4, boolean z, boolean z2, boolean z3) {
        Utilities.stageQueue.postRunnable(new Runnable(i, i4, tLRPC$messages_Dialogs, z, i3, arrayList, i2, z3, z2) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ int f$2;
            public final /* synthetic */ TLRPC$messages_Dialogs f$3;
            public final /* synthetic */ boolean f$4;
            public final /* synthetic */ int f$5;
            public final /* synthetic */ ArrayList f$6;
            public final /* synthetic */ int f$7;
            public final /* synthetic */ boolean f$8;
            public final /* synthetic */ boolean f$9;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
                this.f$7 = r8;
                this.f$8 = r9;
                this.f$9 = r10;
            }

            public final void run() {
                MessagesController.this.lambda$processLoadedDialogs$167$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7, this.f$8, this.f$9);
            }
        });
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Code restructure failed: missing block: B:116:0x028b, code lost:
        if (r2.get(r3) == null) goto L_0x028d;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:138:0x02d9, code lost:
        if (r5 == r1.id) goto L_0x02dd;
     */
    /* renamed from: lambda$processLoadedDialogs$167 */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$processLoadedDialogs$167$MessagesController(int r25, int r26, org.telegram.tgnet.TLRPC$messages_Dialogs r27, boolean r28, int r29, java.util.ArrayList r30, int r31, boolean r32, boolean r33) {
        /*
            r24 = this;
            r15 = r24
            r9 = r25
            r10 = r26
            r11 = r27
            r12 = r30
            boolean r0 = r15.firstGettingTask
            r1 = 0
            r13 = 1
            r14 = 0
            java.lang.Integer r16 = java.lang.Integer.valueOf(r14)
            if (r0 != 0) goto L_0x001a
            r15.getNewDeleteTask(r1, r14)
            r15.firstGettingTask = r13
        L_0x001a:
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0048
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r2 = "loaded folderId "
            r0.append(r2)
            r0.append(r9)
            java.lang.String r2 = " loadType "
            r0.append(r2)
            r0.append(r10)
            java.lang.String r2 = " count "
            r0.append(r2)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r11.dialogs
            int r2 = r2.size()
            r0.append(r2)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x0048:
            org.telegram.messenger.UserConfig r0 = r24.getUserConfig()
            int[] r5 = r0.getDialogLoadOffsets(r9)
            int r0 = r15.DIALOGS_LOAD_TYPE_CACHE
            if (r10 != r0) goto L_0x0070
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r0 = r11.dialogs
            int r0 = r0.size()
            if (r0 != 0) goto L_0x0070
            org.telegram.messenger.-$$Lambda$MessagesController$AeWz8p2u95yvuqvViHU8Pq-5jxc r7 = new org.telegram.messenger.-$$Lambda$MessagesController$AeWz8p2u95yvuqvViHU8Pq-5jxc
            r0 = r7
            r1 = r24
            r2 = r27
            r3 = r25
            r4 = r28
            r6 = r29
            r0.<init>(r2, r3, r4, r5, r6)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r7)
            return
        L_0x0070:
            android.util.LongSparseArray r7 = new android.util.LongSparseArray
            r7.<init>()
            android.util.LongSparseArray r8 = new android.util.LongSparseArray
            r8.<init>()
            android.util.SparseArray r6 = new android.util.SparseArray
            r6.<init>()
            android.util.SparseArray r4 = new android.util.SparseArray
            r4.<init>()
            r0 = 0
        L_0x0085:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r11.users
            int r2 = r2.size()
            if (r0 >= r2) goto L_0x009d
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r11.users
            java.lang.Object r2 = r2.get(r0)
            org.telegram.tgnet.TLRPC$User r2 = (org.telegram.tgnet.TLRPC$User) r2
            int r3 = r2.id
            r6.put(r3, r2)
            int r0 = r0 + 1
            goto L_0x0085
        L_0x009d:
            r0 = 0
        L_0x009e:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r2 = r11.chats
            int r2 = r2.size()
            if (r0 >= r2) goto L_0x00b6
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r2 = r11.chats
            java.lang.Object r2 = r2.get(r0)
            org.telegram.tgnet.TLRPC$Chat r2 = (org.telegram.tgnet.TLRPC$Chat) r2
            int r3 = r2.id
            r4.put(r3, r2)
            int r0 = r0 + 1
            goto L_0x009e
        L_0x00b6:
            if (r12 == 0) goto L_0x00d8
            android.util.SparseArray r0 = new android.util.SparseArray
            r0.<init>()
            int r2 = r30.size()
            r3 = 0
        L_0x00c2:
            if (r3 >= r2) goto L_0x00d6
            java.lang.Object r17 = r12.get(r3)
            r1 = r17
            org.telegram.tgnet.TLRPC$EncryptedChat r1 = (org.telegram.tgnet.TLRPC$EncryptedChat) r1
            int r13 = r1.id
            r0.put(r13, r1)
            int r3 = r3 + 1
            r1 = 0
            r13 = 1
            goto L_0x00c2
        L_0x00d6:
            r13 = r0
            goto L_0x00d9
        L_0x00d8:
            r13 = 0
        L_0x00d9:
            int r0 = r15.DIALOGS_LOAD_TYPE_CACHE
            if (r10 != r0) goto L_0x00e4
            android.util.SparseIntArray r0 = r15.nextDialogsCacheOffset
            int r1 = r31 + r29
            r0.put(r9, r1)
        L_0x00e4:
            r0 = 0
            r3 = 0
        L_0x00e6:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r11.messages
            int r1 = r1.size()
            r17 = 0
            if (r0 >= r1) goto L_0x0164
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r11.messages
            java.lang.Object r1 = r1.get(r0)
            org.telegram.tgnet.TLRPC$Message r1 = (org.telegram.tgnet.TLRPC$Message) r1
            if (r3 == 0) goto L_0x0100
            int r2 = r1.date
            int r14 = r3.date
            if (r2 >= r14) goto L_0x0101
        L_0x0100:
            r3 = r1
        L_0x0101:
            org.telegram.tgnet.TLRPC$Peer r2 = r1.peer_id
            int r14 = r2.channel_id
            if (r14 == 0) goto L_0x012b
            java.lang.Object r2 = r4.get(r14)
            org.telegram.tgnet.TLRPC$Chat r2 = (org.telegram.tgnet.TLRPC$Chat) r2
            if (r2 == 0) goto L_0x0127
            boolean r14 = r2.left
            if (r14 == 0) goto L_0x0127
            r28 = r13
            long r12 = r15.promoDialogId
            int r14 = (r12 > r17 ? 1 : (r12 == r17 ? 0 : -1))
            if (r14 == 0) goto L_0x0125
            int r2 = r2.id
            int r2 = -r2
            r14 = r3
            long r2 = (long) r2
            int r17 = (r12 > r2 ? 1 : (r12 == r2 ? 0 : -1))
            if (r17 == 0) goto L_0x013f
            goto L_0x015b
        L_0x0125:
            r14 = r3
            goto L_0x015b
        L_0x0127:
            r14 = r3
            r28 = r13
            goto L_0x013f
        L_0x012b:
            r14 = r3
            r28 = r13
            int r2 = r2.chat_id
            if (r2 == 0) goto L_0x013f
            java.lang.Object r2 = r4.get(r2)
            org.telegram.tgnet.TLRPC$Chat r2 = (org.telegram.tgnet.TLRPC$Chat) r2
            if (r2 == 0) goto L_0x013f
            org.telegram.tgnet.TLRPC$InputChannel r2 = r2.migrated_to
            if (r2 == 0) goto L_0x013f
            goto L_0x015b
        L_0x013f:
            org.telegram.messenger.MessageObject r2 = new org.telegram.messenger.MessageObject
            int r3 = r15.currentAccount
            r22 = 0
            r23 = 1
            r17 = r2
            r18 = r3
            r19 = r1
            r20 = r6
            r21 = r4
            r17.<init>((int) r18, (org.telegram.tgnet.TLRPC$Message) r19, (android.util.SparseArray<org.telegram.tgnet.TLRPC$User>) r20, (android.util.SparseArray<org.telegram.tgnet.TLRPC$Chat>) r21, (boolean) r22, (boolean) r23)
            long r12 = r2.getDialogId()
            r8.put(r12, r2)
        L_0x015b:
            int r0 = r0 + 1
            r13 = r28
            r12 = r30
            r3 = r14
            r14 = 0
            goto L_0x00e6
        L_0x0164:
            r28 = r13
            if (r32 != 0) goto L_0x0250
            if (r33 != 0) goto L_0x0250
            r0 = 0
            r1 = r5[r0]
            r2 = -1
            if (r1 == r2) goto L_0x0250
            if (r10 != 0) goto L_0x0250
            org.telegram.messenger.UserConfig r1 = r24.getUserConfig()
            int r1 = r1.getTotalDialogsCount(r9)
            if (r3 == 0) goto L_0x0219
            int r2 = r3.id
            r5 = r5[r0]
            if (r2 == r5) goto L_0x0219
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r0 = r11.dialogs
            int r0 = r0.size()
            int r1 = r1 + r0
            int r0 = r3.id
            int r2 = r3.date
            org.telegram.tgnet.TLRPC$Peer r5 = r3.peer_id
            int r12 = r5.channel_id
            if (r12 == 0) goto L_0x01bb
            r5 = 0
        L_0x0194:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r13 = r11.chats
            int r13 = r13.size()
            if (r5 >= r13) goto L_0x01ae
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r13 = r11.chats
            java.lang.Object r13 = r13.get(r5)
            org.telegram.tgnet.TLRPC$Chat r13 = (org.telegram.tgnet.TLRPC$Chat) r13
            int r14 = r13.id
            if (r14 != r12) goto L_0x01ab
            long r13 = r13.access_hash
            goto L_0x01b0
        L_0x01ab:
            int r5 = r5 + 1
            goto L_0x0194
        L_0x01ae:
            r13 = r17
        L_0x01b0:
            r5 = r2
            r19 = r12
            r20 = r13
            r13 = 0
            r14 = 0
            r2 = r0
        L_0x01b8:
            r12 = r1
            goto L_0x0227
        L_0x01bb:
            int r12 = r5.chat_id
            if (r12 == 0) goto L_0x01e5
            r5 = 0
        L_0x01c0:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r13 = r11.chats
            int r13 = r13.size()
            if (r5 >= r13) goto L_0x01da
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r13 = r11.chats
            java.lang.Object r13 = r13.get(r5)
            org.telegram.tgnet.TLRPC$Chat r13 = (org.telegram.tgnet.TLRPC$Chat) r13
            int r14 = r13.id
            if (r14 != r12) goto L_0x01d7
            long r13 = r13.access_hash
            goto L_0x01dc
        L_0x01d7:
            int r5 = r5 + 1
            goto L_0x01c0
        L_0x01da:
            r13 = r17
        L_0x01dc:
            r5 = r2
            r20 = r13
            r13 = 0
            r19 = 0
            r2 = r0
            r14 = r12
            goto L_0x01b8
        L_0x01e5:
            int r5 = r5.user_id
            if (r5 == 0) goto L_0x020f
            r12 = 0
        L_0x01ea:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r13 = r11.users
            int r13 = r13.size()
            if (r12 >= r13) goto L_0x0204
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r13 = r11.users
            java.lang.Object r13 = r13.get(r12)
            org.telegram.tgnet.TLRPC$User r13 = (org.telegram.tgnet.TLRPC$User) r13
            int r14 = r13.id
            if (r14 != r5) goto L_0x0201
            long r12 = r13.access_hash
            goto L_0x0206
        L_0x0201:
            int r12 = r12 + 1
            goto L_0x01ea
        L_0x0204:
            r12 = r17
        L_0x0206:
            r20 = r12
            r14 = 0
            r19 = 0
            r12 = r1
            r13 = r5
            r5 = r2
            goto L_0x0217
        L_0x020f:
            r12 = r1
            r5 = r2
            r20 = r17
            r13 = 0
            r14 = 0
            r19 = 0
        L_0x0217:
            r2 = r0
            goto L_0x0227
        L_0x0219:
            r0 = 2147483647(0x7fffffff, float:NaN)
            r12 = r1
            r20 = r17
            r2 = 2147483647(0x7fffffff, float:NaN)
            r5 = 0
            r13 = 0
            r14 = 0
            r19 = 0
        L_0x0227:
            org.telegram.messenger.UserConfig r0 = r24.getUserConfig()
            r1 = r25
            r22 = r3
            r3 = r5
            r5 = r4
            r4 = r13
            r13 = r5
            r5 = r14
            r14 = r6
            r6 = r19
            r10 = r8
            r19 = r14
            r14 = r7
            r7 = r20
            r0.setDialogsLoadOffset(r1, r2, r3, r4, r5, r6, r7)
            org.telegram.messenger.UserConfig r0 = r24.getUserConfig()
            r0.setTotalDialogsCount(r9, r12)
            org.telegram.messenger.UserConfig r0 = r24.getUserConfig()
            r1 = 0
            r0.saveConfig(r1)
            goto L_0x0257
        L_0x0250:
            r22 = r3
            r13 = r4
            r19 = r6
            r14 = r7
            r10 = r8
        L_0x0257:
            java.util.ArrayList r12 = new java.util.ArrayList
            r12.<init>()
            r0 = 0
        L_0x025d:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r11.dialogs
            int r1 = r1.size()
            if (r0 >= r1) goto L_0x0379
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r11.dialogs
            java.lang.Object r1 = r1.get(r0)
            org.telegram.tgnet.TLRPC$Dialog r1 = (org.telegram.tgnet.TLRPC$Dialog) r1
            org.telegram.messenger.DialogObject.initDialog(r1)
            long r2 = r1.id
            int r4 = (r2 > r17 ? 1 : (r2 == r17 ? 0 : -1))
            if (r4 != 0) goto L_0x027c
            r4 = r26
            r2 = r28
            goto L_0x0373
        L_0x027c:
            int r4 = (int) r2
            r5 = 32
            long r2 = r2 >> r5
            int r3 = (int) r2
            if (r4 != 0) goto L_0x0291
            if (r28 == 0) goto L_0x0291
            r2 = r28
            java.lang.Object r3 = r2.get(r3)
            if (r3 != 0) goto L_0x0293
        L_0x028d:
            r4 = r26
            goto L_0x0373
        L_0x0291:
            r2 = r28
        L_0x0293:
            long r3 = r15.promoDialogId
            int r5 = (r3 > r17 ? 1 : (r3 == r17 ? 0 : -1))
            if (r5 == 0) goto L_0x02a1
            long r5 = r1.id
            int r7 = (r3 > r5 ? 1 : (r3 == r5 ? 0 : -1))
            if (r7 != 0) goto L_0x02a1
            r15.promoDialog = r1
        L_0x02a1:
            int r3 = r1.last_message_date
            if (r3 != 0) goto L_0x02b5
            long r3 = r1.id
            java.lang.Object r3 = r10.get(r3)
            org.telegram.messenger.MessageObject r3 = (org.telegram.messenger.MessageObject) r3
            if (r3 == 0) goto L_0x02b5
            org.telegram.tgnet.TLRPC$Message r3 = r3.messageOwner
            int r3 = r3.date
            r1.last_message_date = r3
        L_0x02b5:
            boolean r3 = org.telegram.messenger.DialogObject.isChannel(r1)
            if (r3 == 0) goto L_0x02e9
            long r3 = r1.id
            int r4 = (int) r3
            int r3 = -r4
            java.lang.Object r3 = r13.get(r3)
            org.telegram.tgnet.TLRPC$Chat r3 = (org.telegram.tgnet.TLRPC$Chat) r3
            if (r3 == 0) goto L_0x02dc
            boolean r4 = r3.megagroup
            boolean r3 = org.telegram.messenger.ChatObject.isNotInChat(r3)
            if (r3 == 0) goto L_0x02dd
            long r5 = r15.promoDialogId
            int r3 = (r5 > r17 ? 1 : (r5 == r17 ? 0 : -1))
            if (r3 == 0) goto L_0x028d
            long r7 = r1.id
            int r3 = (r5 > r7 ? 1 : (r5 == r7 ? 0 : -1))
            if (r3 == 0) goto L_0x02dd
            goto L_0x028d
        L_0x02dc:
            r4 = 1
        L_0x02dd:
            android.util.SparseIntArray r3 = r15.channelsPts
            long r5 = r1.id
            int r6 = (int) r5
            int r5 = -r6
            int r6 = r1.pts
            r3.put(r5, r6)
            goto L_0x02fe
        L_0x02e9:
            long r3 = r1.id
            int r5 = (int) r3
            if (r5 >= 0) goto L_0x02fd
            int r4 = (int) r3
            int r3 = -r4
            java.lang.Object r3 = r13.get(r3)
            org.telegram.tgnet.TLRPC$Chat r3 = (org.telegram.tgnet.TLRPC$Chat) r3
            if (r3 == 0) goto L_0x02fd
            org.telegram.tgnet.TLRPC$InputChannel r3 = r3.migrated_to
            if (r3 == 0) goto L_0x02fd
            goto L_0x028d
        L_0x02fd:
            r4 = 1
        L_0x02fe:
            long r5 = r1.id
            r14.put(r5, r1)
            if (r4 == 0) goto L_0x031b
            int r3 = r15.DIALOGS_LOAD_TYPE_CACHE
            r4 = r26
            if (r4 != r3) goto L_0x031d
            int r3 = r1.read_outbox_max_id
            if (r3 == 0) goto L_0x0313
            int r3 = r1.read_inbox_max_id
            if (r3 != 0) goto L_0x031d
        L_0x0313:
            int r3 = r1.top_message
            if (r3 == 0) goto L_0x031d
            r12.add(r1)
            goto L_0x031d
        L_0x031b:
            r4 = r26
        L_0x031d:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r3 = r15.dialogs_read_inbox_max
            long r5 = r1.id
            java.lang.Long r5 = java.lang.Long.valueOf(r5)
            java.lang.Object r3 = r3.get(r5)
            java.lang.Integer r3 = (java.lang.Integer) r3
            if (r3 != 0) goto L_0x032f
            r3 = r16
        L_0x032f:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r5 = r15.dialogs_read_inbox_max
            long r6 = r1.id
            java.lang.Long r6 = java.lang.Long.valueOf(r6)
            int r3 = r3.intValue()
            int r7 = r1.read_inbox_max_id
            int r3 = java.lang.Math.max(r3, r7)
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)
            r5.put(r6, r3)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r3 = r15.dialogs_read_outbox_max
            long r5 = r1.id
            java.lang.Long r5 = java.lang.Long.valueOf(r5)
            java.lang.Object r3 = r3.get(r5)
            java.lang.Integer r3 = (java.lang.Integer) r3
            if (r3 != 0) goto L_0x035a
            r3 = r16
        L_0x035a:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r5 = r15.dialogs_read_outbox_max
            long r6 = r1.id
            java.lang.Long r6 = java.lang.Long.valueOf(r6)
            int r3 = r3.intValue()
            int r1 = r1.read_outbox_max_id
            int r1 = java.lang.Math.max(r3, r1)
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            r5.put(r6, r1)
        L_0x0373:
            int r0 = r0 + 1
            r28 = r2
            goto L_0x025d
        L_0x0379:
            r4 = r26
            int r0 = r15.DIALOGS_LOAD_TYPE_CACHE
            if (r4 == r0) goto L_0x041d
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r0 = r11.messages
            org.telegram.messenger.ImageLoader.saveMessagesThumbs(r0)
            r0 = 0
        L_0x0385:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r11.messages
            int r1 = r1.size()
            if (r0 >= r1) goto L_0x040f
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r11.messages
            java.lang.Object r1 = r1.get(r0)
            org.telegram.tgnet.TLRPC$Message r1 = (org.telegram.tgnet.TLRPC$Message) r1
            org.telegram.tgnet.TLRPC$MessageAction r2 = r1.action
            boolean r3 = r2 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatDeleteUser
            if (r3 == 0) goto L_0x03b9
            int r2 = r2.user_id
            r3 = r19
            java.lang.Object r2 = r3.get(r2)
            org.telegram.tgnet.TLRPC$User r2 = (org.telegram.tgnet.TLRPC$User) r2
            if (r2 == 0) goto L_0x03bb
            boolean r2 = r2.bot
            if (r2 == 0) goto L_0x03bb
            org.telegram.tgnet.TLRPC$TL_replyKeyboardHide r2 = new org.telegram.tgnet.TLRPC$TL_replyKeyboardHide
            r2.<init>()
            r1.reply_markup = r2
            int r2 = r1.flags
            r2 = r2 | 64
            r1.flags = r2
            goto L_0x03bb
        L_0x03b9:
            r3 = r19
        L_0x03bb:
            org.telegram.tgnet.TLRPC$MessageAction r2 = r1.action
            boolean r5 = r2 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatMigrateTo
            if (r5 != 0) goto L_0x0404
            boolean r2 = r2 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChannelCreate
            if (r2 == 0) goto L_0x03c6
            goto L_0x0404
        L_0x03c6:
            boolean r2 = r1.out
            if (r2 == 0) goto L_0x03cd
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r2 = r15.dialogs_read_outbox_max
            goto L_0x03cf
        L_0x03cd:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r2 = r15.dialogs_read_inbox_max
        L_0x03cf:
            long r5 = r1.dialog_id
            java.lang.Long r5 = java.lang.Long.valueOf(r5)
            java.lang.Object r5 = r2.get(r5)
            java.lang.Integer r5 = (java.lang.Integer) r5
            if (r5 != 0) goto L_0x03f6
            org.telegram.messenger.MessagesStorage r5 = r24.getMessagesStorage()
            boolean r6 = r1.out
            long r7 = r1.dialog_id
            int r5 = r5.getDialogReadMax(r6, r7)
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
            long r6 = r1.dialog_id
            java.lang.Long r6 = java.lang.Long.valueOf(r6)
            r2.put(r6, r5)
        L_0x03f6:
            int r2 = r5.intValue()
            int r5 = r1.id
            if (r2 >= r5) goto L_0x0400
            r2 = 1
            goto L_0x0401
        L_0x0400:
            r2 = 0
        L_0x0401:
            r1.unread = r2
            goto L_0x0409
        L_0x0404:
            r2 = 0
            r1.unread = r2
            r1.media_unread = r2
        L_0x0409:
            int r0 = r0 + 1
            r19 = r3
            goto L_0x0385
        L_0x040f:
            org.telegram.messenger.MessagesStorage r0 = r24.getMessagesStorage()
            int r1 = r15.DIALOGS_LOAD_TYPE_UNKNOWN
            if (r4 != r1) goto L_0x0419
            r1 = 3
            goto L_0x041a
        L_0x0419:
            r1 = 0
        L_0x041a:
            r0.putDialogs(r11, r1)
        L_0x041d:
            int r0 = r15.DIALOGS_LOAD_TYPE_CHANNEL
            if (r4 != r0) goto L_0x0437
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r0 = r11.chats
            r1 = 0
            java.lang.Object r0 = r0.get(r1)
            org.telegram.tgnet.TLRPC$Chat r0 = (org.telegram.tgnet.TLRPC$Chat) r0
            int r1 = r0.id
            r15.getChannelDifference(r1)
            org.telegram.messenger.-$$Lambda$MessagesController$le3kIdFG_RK1rOd8cJKpYbY1dr0 r1 = new org.telegram.messenger.-$$Lambda$MessagesController$le3kIdFG_RK1rOd8cJKpYbY1dr0
            r1.<init>(r0)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r1)
        L_0x0437:
            org.telegram.messenger.-$$Lambda$MessagesController$sszUke8YujNfvWUH-HjAsMEO11E r16 = new org.telegram.messenger.-$$Lambda$MessagesController$sszUke8YujNfvWUH-HjAsMEO11E
            r0 = r16
            r1 = r24
            r2 = r22
            r3 = r26
            r4 = r27
            r5 = r30
            r6 = r33
            r7 = r25
            r8 = r14
            r9 = r10
            r10 = r13
            r11 = r29
            r14 = r12
            r12 = r32
            r13 = r31
            r0.<init>(r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r16)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$processLoadedDialogs$167$MessagesController(int, int, org.telegram.tgnet.TLRPC$messages_Dialogs, boolean, int, java.util.ArrayList, int, boolean, boolean):void");
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$164 */
    public /* synthetic */ void lambda$null$164$MessagesController(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, int i, boolean z, int[] iArr, int i2) {
        putUsers(tLRPC$messages_Dialogs.users, true);
        this.loadingDialogs.put(i, false);
        if (z) {
            this.dialogsEndReached.put(i, false);
            this.serverDialogsEndReached.put(i, false);
        } else if (iArr[0] == Integer.MAX_VALUE) {
            this.dialogsEndReached.put(i, true);
            this.serverDialogsEndReached.put(i, true);
        } else {
            loadDialogs(i, 0, i2, false);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$165 */
    public /* synthetic */ void lambda$null$165$MessagesController(TLRPC$Chat tLRPC$Chat) {
        checkChatInviter(tLRPC$Chat.id, true);
    }

    /* JADX WARNING: type inference failed for: r1v18 */
    /* JADX WARNING: type inference failed for: r1v19 */
    /* access modifiers changed from: private */
    /* JADX WARNING: Incorrect type for immutable var: ssa=int, code=?, for r1v12, types: [boolean, int] */
    /* renamed from: lambda$null$166 */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$null$166$MessagesController(org.telegram.tgnet.TLRPC$Message r27, int r28, org.telegram.tgnet.TLRPC$messages_Dialogs r29, java.util.ArrayList r30, boolean r31, int r32, android.util.LongSparseArray r33, android.util.LongSparseArray r34, android.util.SparseArray r35, int r36, boolean r37, int r38, java.util.ArrayList r39) {
        /*
            r26 = this;
            r0 = r26
            r1 = r27
            r2 = r28
            r3 = r29
            r4 = r30
            r5 = r32
            r6 = r33
            r7 = r36
            if (r1 == 0) goto L_0x001d
            int r8 = r0.dialogsLoadedTillDate
            int r1 = r1.date
            int r1 = java.lang.Math.min(r8, r1)
            r0.dialogsLoadedTillDate = r1
            goto L_0x0021
        L_0x001d:
            r1 = -2147483648(0xfffffffvar_, float:-0.0)
            r0.dialogsLoadedTillDate = r1
        L_0x0021:
            int r1 = r0.DIALOGS_LOAD_TYPE_CACHE
            if (r2 == r1) goto L_0x0031
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r3.dialogs
            r0.applyDialogsNotificationsSettings(r1)
            org.telegram.messenger.MediaDataController r1 = r26.getMediaDataController()
            r1.loadDraftsIfNeed()
        L_0x0031:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r1 = r3.users
            int r8 = r0.DIALOGS_LOAD_TYPE_CACHE
            r9 = 1
            r10 = 0
            if (r2 != r8) goto L_0x003b
            r8 = 1
            goto L_0x003c
        L_0x003b:
            r8 = 0
        L_0x003c:
            r0.putUsers(r1, r8)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r1 = r3.chats
            int r8 = r0.DIALOGS_LOAD_TYPE_CACHE
            if (r2 != r8) goto L_0x0047
            r8 = 1
            goto L_0x0048
        L_0x0047:
            r8 = 0
        L_0x0048:
            r0.putChats(r1, r8)
            r1 = 0
            if (r4 == 0) goto L_0x0076
            r8 = 0
        L_0x004f:
            int r11 = r30.size()
            if (r8 >= r11) goto L_0x0076
            java.lang.Object r11 = r4.get(r8)
            org.telegram.tgnet.TLRPC$EncryptedChat r11 = (org.telegram.tgnet.TLRPC$EncryptedChat) r11
            boolean r12 = r11 instanceof org.telegram.tgnet.TLRPC$TL_encryptedChat
            if (r12 == 0) goto L_0x0070
            int r12 = r11.layer
            int r12 = org.telegram.messenger.AndroidUtilities.getMyLayerVersion(r12)
            r13 = 101(0x65, float:1.42E-43)
            if (r12 >= r13) goto L_0x0070
            org.telegram.messenger.SecretChatHelper r12 = r26.getSecretChatHelper()
            r12.sendNotifyLayerMessage(r11, r1)
        L_0x0070:
            r0.putEncryptedChat(r11, r9)
            int r8 = r8 + 1
            goto L_0x004f
        L_0x0076:
            if (r31 != 0) goto L_0x0085
            int r4 = r0.DIALOGS_LOAD_TYPE_UNKNOWN
            if (r2 == r4) goto L_0x0085
            int r4 = r0.DIALOGS_LOAD_TYPE_CHANNEL
            if (r2 == r4) goto L_0x0085
            android.util.SparseBooleanArray r4 = r0.loadingDialogs
            r4.put(r5, r10)
        L_0x0085:
            r0.dialogsLoaded = r9
            if (r31 == 0) goto L_0x00a1
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r4 = r0.allDialogs
            boolean r4 = r4.isEmpty()
            if (r4 != 0) goto L_0x00a1
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r4 = r0.allDialogs
            int r8 = r4.size()
            int r8 = r8 - r9
            java.lang.Object r4 = r4.get(r8)
            org.telegram.tgnet.TLRPC$Dialog r4 = (org.telegram.tgnet.TLRPC$Dialog) r4
            int r4 = r4.last_message_date
            goto L_0x00a2
        L_0x00a1:
            r4 = 0
        L_0x00a2:
            r8 = 0
            r11 = 0
            r12 = 0
        L_0x00a5:
            int r13 = r33.size()
            if (r8 >= r13) goto L_0x022c
            long r9 = r6.keyAt(r8)
            java.lang.Object r16 = r6.valueAt(r8)
            r1 = r16
            org.telegram.tgnet.TLRPC$Dialog r1 = (org.telegram.tgnet.TLRPC$Dialog) r1
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r13 = r0.dialogs_dict
            java.lang.Object r13 = r13.get(r9)
            org.telegram.tgnet.TLRPC$Dialog r13 = (org.telegram.tgnet.TLRPC$Dialog) r13
            if (r31 == 0) goto L_0x00c7
            if (r13 == 0) goto L_0x00c7
            int r14 = r1.folder_id
            r13.folder_id = r14
        L_0x00c7:
            if (r31 == 0) goto L_0x00d3
            if (r4 == 0) goto L_0x00d3
            int r14 = r1.last_message_date
            if (r14 >= r4) goto L_0x00d3
            r16 = r4
            goto L_0x0223
        L_0x00d3:
            int r14 = r0.DIALOGS_LOAD_TYPE_CACHE
            if (r2 == r14) goto L_0x00f5
            org.telegram.tgnet.TLRPC$DraftMessage r14 = r1.draft
            boolean r14 = r14 instanceof org.telegram.tgnet.TLRPC$TL_draftMessage
            if (r14 == 0) goto L_0x00f5
            org.telegram.messenger.MediaDataController r19 = r26.getMediaDataController()
            long r14 = r1.id
            r22 = 0
            r16 = r4
            org.telegram.tgnet.TLRPC$DraftMessage r4 = r1.draft
            r24 = 0
            r25 = 0
            r20 = r14
            r23 = r4
            r19.saveDraft(r20, r22, r23, r24, r25)
            goto L_0x00f7
        L_0x00f5:
            r16 = r4
        L_0x00f7:
            int r4 = r1.folder_id
            if (r4 == r5) goto L_0x00fd
            int r11 = r11 + 1
        L_0x00fd:
            long r14 = r1.id
            r4 = r34
            java.lang.Object r14 = r4.get(r14)
            org.telegram.messenger.MessageObject r14 = (org.telegram.messenger.MessageObject) r14
            if (r13 != 0) goto L_0x0138
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r12 = r0.dialogs_dict
            r12.put(r9, r1)
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessage
            r1.put(r9, r14)
            if (r14 == 0) goto L_0x0135
            org.telegram.tgnet.TLRPC$Message r1 = r14.messageOwner
            org.telegram.tgnet.TLRPC$Peer r1 = r1.peer_id
            int r1 = r1.channel_id
            if (r1 != 0) goto L_0x0135
            android.util.SparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessagesByIds
            int r9 = r14.getId()
            r1.put(r9, r14)
            org.telegram.tgnet.TLRPC$Message r1 = r14.messageOwner
            long r9 = r1.random_id
            r12 = 0
            int r1 = (r9 > r12 ? 1 : (r9 == r12 ? 0 : -1))
            if (r1 == 0) goto L_0x0135
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessagesByRandomIds
            r1.put(r9, r14)
        L_0x0135:
            r12 = 1
            goto L_0x0223
        L_0x0138:
            int r15 = r0.DIALOGS_LOAD_TYPE_CACHE
            if (r2 == r15) goto L_0x0140
            org.telegram.tgnet.TLRPC$PeerNotifySettings r15 = r1.notify_settings
            r13.notify_settings = r15
        L_0x0140:
            boolean r15 = r1.pinned
            r13.pinned = r15
            int r15 = r1.pinnedNum
            r13.pinnedNum = r15
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r15 = r0.dialogMessage
            java.lang.Object r15 = r15.get(r9)
            org.telegram.messenger.MessageObject r15 = (org.telegram.messenger.MessageObject) r15
            if (r15 == 0) goto L_0x0156
            boolean r4 = r15.deleted
            if (r4 != 0) goto L_0x01bf
        L_0x0156:
            if (r15 == 0) goto L_0x01bf
            int r4 = r13.top_message
            if (r4 <= 0) goto L_0x015d
            goto L_0x01bf
        L_0x015d:
            if (r14 != 0) goto L_0x0165
            boolean r4 = r15.isSent()
            if (r4 != 0) goto L_0x0171
        L_0x0165:
            if (r14 == 0) goto L_0x0223
            org.telegram.tgnet.TLRPC$Message r4 = r14.messageOwner
            int r4 = r4.date
            org.telegram.tgnet.TLRPC$Message r13 = r15.messageOwner
            int r13 = r13.date
            if (r4 <= r13) goto L_0x0223
        L_0x0171:
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r4 = r0.dialogs_dict
            r4.put(r9, r1)
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessage
            r1.put(r9, r14)
            org.telegram.tgnet.TLRPC$Message r1 = r15.messageOwner
            org.telegram.tgnet.TLRPC$Peer r1 = r1.peer_id
            int r1 = r1.channel_id
            if (r1 != 0) goto L_0x018c
            android.util.SparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessagesByIds
            int r4 = r15.getId()
            r1.remove(r4)
        L_0x018c:
            if (r14 == 0) goto L_0x01af
            org.telegram.tgnet.TLRPC$Message r1 = r14.messageOwner
            org.telegram.tgnet.TLRPC$Peer r1 = r1.peer_id
            int r1 = r1.channel_id
            if (r1 != 0) goto L_0x01af
            android.util.SparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessagesByIds
            int r4 = r14.getId()
            r1.put(r4, r14)
            org.telegram.tgnet.TLRPC$Message r1 = r14.messageOwner
            long r9 = r1.random_id
            r17 = 0
            int r1 = (r9 > r17 ? 1 : (r9 == r17 ? 0 : -1))
            if (r1 == 0) goto L_0x01b1
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessagesByRandomIds
            r1.put(r9, r14)
            goto L_0x01b1
        L_0x01af:
            r17 = 0
        L_0x01b1:
            org.telegram.tgnet.TLRPC$Message r1 = r15.messageOwner
            long r9 = r1.random_id
            int r1 = (r9 > r17 ? 1 : (r9 == r17 ? 0 : -1))
            if (r1 == 0) goto L_0x0223
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessagesByRandomIds
            r1.remove(r9)
            goto L_0x0223
        L_0x01bf:
            int r4 = r1.top_message
            int r13 = r13.top_message
            if (r4 < r13) goto L_0x0223
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r4 = r0.dialogs_dict
            r4.put(r9, r1)
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessage
            r1.put(r9, r14)
            if (r15 == 0) goto L_0x01f1
            org.telegram.tgnet.TLRPC$Message r1 = r15.messageOwner
            org.telegram.tgnet.TLRPC$Peer r1 = r1.peer_id
            int r1 = r1.channel_id
            if (r1 != 0) goto L_0x01e2
            android.util.SparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessagesByIds
            int r4 = r15.getId()
            r1.remove(r4)
        L_0x01e2:
            org.telegram.tgnet.TLRPC$Message r1 = r15.messageOwner
            long r9 = r1.random_id
            r17 = 0
            int r1 = (r9 > r17 ? 1 : (r9 == r17 ? 0 : -1))
            if (r1 == 0) goto L_0x01f1
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessagesByRandomIds
            r1.remove(r9)
        L_0x01f1:
            if (r14 == 0) goto L_0x0223
            if (r15 == 0) goto L_0x0203
            int r1 = r15.getId()
            int r4 = r14.getId()
            if (r1 != r4) goto L_0x0203
            boolean r1 = r15.deleted
            r14.deleted = r1
        L_0x0203:
            org.telegram.tgnet.TLRPC$Message r1 = r14.messageOwner
            org.telegram.tgnet.TLRPC$Peer r1 = r1.peer_id
            int r1 = r1.channel_id
            if (r1 != 0) goto L_0x0223
            android.util.SparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessagesByIds
            int r4 = r14.getId()
            r1.put(r4, r14)
            org.telegram.tgnet.TLRPC$Message r1 = r14.messageOwner
            long r9 = r1.random_id
            r17 = 0
            int r1 = (r9 > r17 ? 1 : (r9 == r17 ? 0 : -1))
            if (r1 == 0) goto L_0x0223
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessagesByRandomIds
            r1.put(r9, r14)
        L_0x0223:
            int r8 = r8 + 1
            r4 = r16
            r1 = 0
            r9 = 1
            r10 = 0
            goto L_0x00a5
        L_0x022c:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r0.allDialogs
            r1.clear()
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r1 = r0.dialogs_dict
            int r1 = r1.size()
            r13 = 0
        L_0x0238:
            if (r13 >= r1) goto L_0x0248
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r4 = r0.allDialogs
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r6 = r0.dialogs_dict
            java.lang.Object r6 = r6.valueAt(r13)
            r4.add(r6)
            int r13 = r13 + 1
            goto L_0x0238
        L_0x0248:
            if (r31 == 0) goto L_0x024d
            r1 = r35
            goto L_0x024e
        L_0x024d:
            r1 = 0
        L_0x024e:
            r0.sortDialogs(r1)
            r26.putAllNeededDraftDialogs()
            int r1 = r0.DIALOGS_LOAD_TYPE_CHANNEL
            r4 = 2147483647(0x7fffffff, float:NaN)
            if (r2 == r1) goto L_0x02b9
            int r1 = r0.DIALOGS_LOAD_TYPE_UNKNOWN
            if (r2 == r1) goto L_0x02b9
            if (r31 != 0) goto L_0x02b9
            android.util.SparseBooleanArray r1 = r0.dialogsEndReached
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r6 = r3.dialogs
            int r6 = r6.size()
            if (r6 == 0) goto L_0x0273
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r6 = r3.dialogs
            int r6 = r6.size()
            if (r6 == r7) goto L_0x0277
        L_0x0273:
            if (r2 != 0) goto L_0x0277
            r13 = 1
            goto L_0x0278
        L_0x0277:
            r13 = 0
        L_0x0278:
            r1.put(r5, r13)
            if (r11 <= 0) goto L_0x029c
            r1 = 20
            if (r11 >= r1) goto L_0x029c
            if (r5 != 0) goto L_0x029c
            android.util.SparseBooleanArray r1 = r0.dialogsEndReached
            r6 = 1
            r1.put(r6, r6)
            org.telegram.messenger.UserConfig r1 = r26.getUserConfig()
            int[] r1 = r1.getDialogLoadOffsets(r5)
            r8 = 0
            r1 = r1[r8]
            if (r1 != r4) goto L_0x029d
            android.util.SparseBooleanArray r1 = r0.serverDialogsEndReached
            r1.put(r6, r6)
            goto L_0x029d
        L_0x029c:
            r6 = 1
        L_0x029d:
            if (r37 != 0) goto L_0x02b9
            android.util.SparseBooleanArray r1 = r0.serverDialogsEndReached
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r8 = r3.dialogs
            int r8 = r8.size()
            if (r8 == 0) goto L_0x02b1
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r3 = r3.dialogs
            int r3 = r3.size()
            if (r3 == r7) goto L_0x02b5
        L_0x02b1:
            if (r2 != 0) goto L_0x02b5
            r9 = 1
            goto L_0x02b6
        L_0x02b5:
            r9 = 0
        L_0x02b6:
            r1.put(r5, r9)
        L_0x02b9:
            org.telegram.messenger.UserConfig r1 = r26.getUserConfig()
            int r1 = r1.getTotalDialogsCount(r5)
            org.telegram.messenger.UserConfig r3 = r26.getUserConfig()
            int[] r3 = r3.getDialogLoadOffsets(r5)
            if (r37 != 0) goto L_0x02e1
            if (r31 != 0) goto L_0x02e1
            r6 = 400(0x190, float:5.6E-43)
            if (r1 >= r6) goto L_0x02e1
            r1 = 0
            r6 = r3[r1]
            r8 = -1
            if (r6 == r8) goto L_0x02e2
            r3 = r3[r1]
            if (r3 == r4) goto L_0x02e2
            r3 = 100
            r0.loadDialogs(r5, r1, r3, r1)
            goto L_0x02e2
        L_0x02e1:
            r1 = 0
        L_0x02e2:
            org.telegram.messenger.NotificationCenter r3 = r26.getNotificationCenter()
            int r4 = org.telegram.messenger.NotificationCenter.dialogsNeedReload
            java.lang.Object[] r6 = new java.lang.Object[r1]
            r3.postNotificationName(r4, r6)
            if (r31 == 0) goto L_0x030c
            org.telegram.messenger.UserConfig r2 = r26.getUserConfig()
            r3 = r38
            r2.migrateOffsetId = r3
            org.telegram.messenger.UserConfig r2 = r26.getUserConfig()
            r2.saveConfig(r1)
            r0.migratingDialogs = r1
            org.telegram.messenger.NotificationCenter r2 = r26.getNotificationCenter()
            int r3 = org.telegram.messenger.NotificationCenter.needReloadRecentDialogsSearch
            java.lang.Object[] r1 = new java.lang.Object[r1]
            r2.postNotificationName(r3, r1)
            goto L_0x0320
        L_0x030c:
            r26.generateUpdateMessage()
            if (r12 != 0) goto L_0x0320
            int r3 = r0.DIALOGS_LOAD_TYPE_CACHE
            if (r2 != r3) goto L_0x0320
            android.util.SparseBooleanArray r2 = r0.dialogsEndReached
            boolean r2 = r2.get(r5)
            if (r2 == 0) goto L_0x0320
            r0.loadDialogs(r5, r1, r7, r1)
        L_0x0320:
            org.telegram.messenger.UserConfig r1 = r26.getUserConfig()
            int r1 = r1.migrateOffsetId
            org.telegram.messenger.UserConfig r2 = r26.getUserConfig()
            int r2 = r2.migrateOffsetDate
            org.telegram.messenger.UserConfig r3 = r26.getUserConfig()
            int r3 = r3.migrateOffsetUserId
            org.telegram.messenger.UserConfig r4 = r26.getUserConfig()
            int r4 = r4.migrateOffsetChatId
            org.telegram.messenger.UserConfig r5 = r26.getUserConfig()
            int r5 = r5.migrateOffsetChannelId
            org.telegram.messenger.UserConfig r6 = r26.getUserConfig()
            long r6 = r6.migrateOffsetAccess
            r27 = r26
            r28 = r1
            r29 = r2
            r30 = r3
            r31 = r4
            r32 = r5
            r33 = r6
            r27.migrateDialogs(r28, r29, r30, r31, r32, r33)
            boolean r1 = r39.isEmpty()
            if (r1 != 0) goto L_0x0362
            r1 = r39
            r2 = 0
            r0.reloadDialogsReadValue(r1, r2)
        L_0x0362:
            r26.loadUnreadDialogs()
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$null$166$MessagesController(org.telegram.tgnet.TLRPC$Message, int, org.telegram.tgnet.TLRPC$messages_Dialogs, java.util.ArrayList, boolean, int, android.util.LongSparseArray, android.util.LongSparseArray, android.util.SparseArray, int, boolean, int, java.util.ArrayList):void");
    }

    private void applyDialogNotificationsSettings(long j, TLRPC$PeerNotifySettings tLRPC$PeerNotifySettings) {
        int i;
        long j2 = j;
        TLRPC$PeerNotifySettings tLRPC$PeerNotifySettings2 = tLRPC$PeerNotifySettings;
        if (tLRPC$PeerNotifySettings2 != null) {
            SharedPreferences sharedPreferences = this.notificationsPreferences;
            int i2 = sharedPreferences.getInt("notify2_" + j2, -1);
            SharedPreferences sharedPreferences2 = this.notificationsPreferences;
            int i3 = sharedPreferences2.getInt("notifyuntil_" + j2, 0);
            SharedPreferences.Editor edit = this.notificationsPreferences.edit();
            TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j2);
            if (tLRPC$Dialog != null) {
                tLRPC$Dialog.notify_settings = tLRPC$PeerNotifySettings2;
            }
            if ((tLRPC$PeerNotifySettings2.flags & 2) != 0) {
                edit.putBoolean("silent_" + j2, tLRPC$PeerNotifySettings2.silent);
            } else {
                edit.remove("silent_" + j2);
            }
            boolean z = true;
            if ((tLRPC$PeerNotifySettings2.flags & 4) == 0) {
                if (i2 != -1) {
                    if (tLRPC$Dialog != null) {
                        tLRPC$Dialog.notify_settings.mute_until = 0;
                    }
                    edit.remove("notify2_" + j2);
                } else {
                    z = false;
                }
                getMessagesStorage().setDialogFlags(j2, 0);
            } else if (tLRPC$PeerNotifySettings2.mute_until > getConnectionsManager().getCurrentTime()) {
                if (tLRPC$PeerNotifySettings2.mute_until <= getConnectionsManager().getCurrentTime() + 31536000) {
                    if (i2 == 3 && i3 == tLRPC$PeerNotifySettings2.mute_until) {
                        z = false;
                    } else {
                        edit.putInt("notify2_" + j2, 3);
                        edit.putInt("notifyuntil_" + j2, tLRPC$PeerNotifySettings2.mute_until);
                        if (tLRPC$Dialog != null) {
                            tLRPC$Dialog.notify_settings.mute_until = 0;
                        }
                    }
                    i = tLRPC$PeerNotifySettings2.mute_until;
                } else if (i2 != 2) {
                    edit.putInt("notify2_" + j2, 2);
                    if (tLRPC$Dialog != null) {
                        tLRPC$Dialog.notify_settings.mute_until = Integer.MAX_VALUE;
                    }
                    i = 0;
                } else {
                    i = 0;
                    z = false;
                }
                getMessagesStorage().setDialogFlags(j2, (((long) i) << 32) | 1);
                getNotificationsController().removeNotificationsForDialog(j2);
            } else {
                if (i2 == 0 || i2 == 1) {
                    z = false;
                } else {
                    if (tLRPC$Dialog != null) {
                        tLRPC$Dialog.notify_settings.mute_until = 0;
                    }
                    edit.putInt("notify2_" + j2, 0);
                }
                getMessagesStorage().setDialogFlags(j2, 0);
            }
            edit.commit();
            if (z) {
                getNotificationCenter().postNotificationName(NotificationCenter.notificationsSettingsUpdated, new Object[0]);
            }
        }
    }

    private void applyDialogsNotificationsSettings(ArrayList<TLRPC$Dialog> arrayList) {
        SharedPreferences.Editor editor = null;
        for (int i = 0; i < arrayList.size(); i++) {
            TLRPC$Dialog tLRPC$Dialog = arrayList.get(i);
            if (tLRPC$Dialog.peer != null && (tLRPC$Dialog.notify_settings instanceof TLRPC$TL_peerNotifySettings)) {
                if (editor == null) {
                    editor = this.notificationsPreferences.edit();
                }
                TLRPC$Peer tLRPC$Peer = tLRPC$Dialog.peer;
                int i2 = tLRPC$Peer.user_id;
                if (i2 == 0) {
                    int i3 = tLRPC$Peer.chat_id;
                    if (i3 != 0) {
                        i2 = -i3;
                    } else {
                        i2 = -tLRPC$Peer.channel_id;
                    }
                }
                if ((tLRPC$Dialog.notify_settings.flags & 2) != 0) {
                    editor.putBoolean("silent_" + i2, tLRPC$Dialog.notify_settings.silent);
                } else {
                    editor.remove("silent_" + i2);
                }
                TLRPC$PeerNotifySettings tLRPC$PeerNotifySettings = tLRPC$Dialog.notify_settings;
                if ((tLRPC$PeerNotifySettings.flags & 4) == 0) {
                    editor.remove("notify2_" + i2);
                } else if (tLRPC$PeerNotifySettings.mute_until <= getConnectionsManager().getCurrentTime()) {
                    editor.putInt("notify2_" + i2, 0);
                } else if (tLRPC$Dialog.notify_settings.mute_until > getConnectionsManager().getCurrentTime() + 31536000) {
                    editor.putInt("notify2_" + i2, 2);
                    tLRPC$Dialog.notify_settings.mute_until = Integer.MAX_VALUE;
                } else {
                    editor.putInt("notify2_" + i2, 3);
                    editor.putInt("notifyuntil_" + i2, tLRPC$Dialog.notify_settings.mute_until);
                }
            }
        }
        if (editor != null) {
            editor.commit();
        }
    }

    public void reloadMentionsCountForChannel(TLRPC$InputPeer tLRPC$InputPeer, long j) {
        NativeByteBuffer nativeByteBuffer;
        Exception e;
        if (j == 0) {
            try {
                nativeByteBuffer = new NativeByteBuffer(tLRPC$InputPeer.getObjectSize() + 4);
                try {
                    nativeByteBuffer.writeInt32(22);
                    tLRPC$InputPeer.serializeToStream(nativeByteBuffer);
                } catch (Exception e2) {
                    e = e2;
                }
            } catch (Exception e3) {
                Exception exc = e3;
                nativeByteBuffer = null;
                e = exc;
                FileLog.e((Throwable) e);
                j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                TLRPC$TL_messages_getUnreadMentions tLRPC$TL_messages_getUnreadMentions = new TLRPC$TL_messages_getUnreadMentions();
                tLRPC$TL_messages_getUnreadMentions.peer = tLRPC$InputPeer;
                tLRPC$TL_messages_getUnreadMentions.limit = 1;
                getConnectionsManager().sendRequest(tLRPC$TL_messages_getUnreadMentions, new RequestDelegate(tLRPC$InputPeer, j) {
                    public final /* synthetic */ TLRPC$InputPeer f$1;
                    public final /* synthetic */ long f$2;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$reloadMentionsCountForChannel$168$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                    }
                });
            }
            j = getMessagesStorage().createPendingTask(nativeByteBuffer);
        }
        TLRPC$TL_messages_getUnreadMentions tLRPC$TL_messages_getUnreadMentions2 = new TLRPC$TL_messages_getUnreadMentions();
        tLRPC$TL_messages_getUnreadMentions2.peer = tLRPC$InputPeer;
        tLRPC$TL_messages_getUnreadMentions2.limit = 1;
        getConnectionsManager().sendRequest(tLRPC$TL_messages_getUnreadMentions2, new RequestDelegate(tLRPC$InputPeer, j) {
            public final /* synthetic */ TLRPC$InputPeer f$1;
            public final /* synthetic */ long f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$reloadMentionsCountForChannel$168$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$reloadMentionsCountForChannel$168 */
    public /* synthetic */ void lambda$reloadMentionsCountForChannel$168$MessagesController(TLRPC$InputPeer tLRPC$InputPeer, long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
        if (tLRPC$messages_Messages != null) {
            int i = tLRPC$messages_Messages.count;
            if (i == 0) {
                i = tLRPC$messages_Messages.messages.size();
            }
            getMessagesStorage().resetMentionsCount((long) (-tLRPC$InputPeer.channel_id), i);
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public void reloadMentionsCountForChannels(ArrayList<Integer> arrayList) {
        AndroidUtilities.runOnUIThread(new Runnable(arrayList) {
            public final /* synthetic */ ArrayList f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$reloadMentionsCountForChannels$169$MessagesController(this.f$1);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$reloadMentionsCountForChannels$169 */
    public /* synthetic */ void lambda$reloadMentionsCountForChannels$169$MessagesController(ArrayList arrayList) {
        for (int i = 0; i < arrayList.size(); i++) {
            reloadMentionsCountForChannel(getInputPeer((int) ((long) (-((Integer) arrayList.get(i)).intValue()))), 0);
        }
    }

    public void processDialogsUpdateRead(LongSparseArray<Integer> longSparseArray, LongSparseArray<Integer> longSparseArray2) {
        AndroidUtilities.runOnUIThread(new Runnable(longSparseArray, longSparseArray2) {
            public final /* synthetic */ LongSparseArray f$1;
            public final /* synthetic */ LongSparseArray f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$processDialogsUpdateRead$170$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$processDialogsUpdateRead$170 */
    public /* synthetic */ void lambda$processDialogsUpdateRead$170$MessagesController(LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        boolean z;
        if (longSparseArray != null) {
            z = false;
            for (int i = 0; i < longSparseArray.size(); i++) {
                long keyAt = longSparseArray.keyAt(i);
                TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(keyAt);
                if (tLRPC$Dialog != null) {
                    int i2 = tLRPC$Dialog.unread_count;
                    int intValue = ((Integer) longSparseArray.valueAt(i)).intValue();
                    tLRPC$Dialog.unread_count = intValue;
                    if (i2 != 0 && intValue == 0) {
                        if (!isDialogMuted(keyAt)) {
                            this.unreadUnmutedDialogs--;
                        }
                        if (!z) {
                            int i3 = 0;
                            while (true) {
                                DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                                if (i3 < dialogFilterArr.length) {
                                    if (dialogFilterArr[i3] != null && (dialogFilterArr[i3].flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                                        break;
                                    }
                                    i3++;
                                } else {
                                    break;
                                }
                            }
                        }
                    } else if (i2 == 0 && !tLRPC$Dialog.unread_mark && intValue != 0) {
                        if (!isDialogMuted(keyAt)) {
                            this.unreadUnmutedDialogs++;
                        }
                        if (!z) {
                            int i4 = 0;
                            while (true) {
                                DialogFilter[] dialogFilterArr2 = this.selectedDialogFilter;
                                if (i4 < dialogFilterArr2.length) {
                                    if (dialogFilterArr2[i4] != null && (dialogFilterArr2[i4].flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                                        break;
                                    }
                                    i4++;
                                } else {
                                    break;
                                }
                            }
                        }
                    }
                    z = true;
                }
            }
        } else {
            z = false;
        }
        if (longSparseArray2 != null) {
            for (int i5 = 0; i5 < longSparseArray2.size(); i5++) {
                TLRPC$Dialog tLRPC$Dialog2 = this.dialogs_dict.get(longSparseArray2.keyAt(i5));
                if (tLRPC$Dialog2 != null) {
                    tLRPC$Dialog2.unread_mentions_count = ((Integer) longSparseArray2.valueAt(i5)).intValue();
                    if (this.createdDialogMainThreadIds.contains(Long.valueOf(tLRPC$Dialog2.id))) {
                        getNotificationCenter().postNotificationName(NotificationCenter.updateMentionsCount, Long.valueOf(tLRPC$Dialog2.id), Integer.valueOf(tLRPC$Dialog2.unread_mentions_count));
                    }
                    if (!z) {
                        int i6 = 0;
                        while (true) {
                            DialogFilter[] dialogFilterArr3 = this.selectedDialogFilter;
                            if (i6 >= dialogFilterArr3.length) {
                                break;
                            } else if (dialogFilterArr3[i6] == null || ((dialogFilterArr3[i6].flags & DIALOG_FILTER_FLAG_EXCLUDE_MUTED) == 0 && (dialogFilterArr3[i6].flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) == 0)) {
                                i6++;
                            }
                        }
                        z = true;
                    }
                }
            }
        }
        if (z) {
            sortDialogs((SparseArray<TLRPC$Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 256);
        if (longSparseArray != null) {
            getNotificationsController().processDialogsUpdateRead(longSparseArray);
        }
    }

    /* access modifiers changed from: protected */
    public void checkLastDialogMessage(TLRPC$Dialog tLRPC$Dialog, TLRPC$InputPeer tLRPC$InputPeer, long j) {
        NativeByteBuffer nativeByteBuffer;
        Exception e;
        int i = (int) tLRPC$Dialog.id;
        if (i != 0 && this.checkingLastMessagesDialogs.indexOfKey(i) < 0) {
            TLRPC$TL_messages_getHistory tLRPC$TL_messages_getHistory = new TLRPC$TL_messages_getHistory();
            if (tLRPC$InputPeer == null) {
                tLRPC$InputPeer = getInputPeer(i);
            }
            tLRPC$TL_messages_getHistory.peer = tLRPC$InputPeer;
            if (tLRPC$InputPeer != null) {
                tLRPC$TL_messages_getHistory.limit = 1;
                this.checkingLastMessagesDialogs.put(i, true);
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("checkLastDialogMessage for " + i);
                }
                if (j == 0) {
                    try {
                        nativeByteBuffer = new NativeByteBuffer(tLRPC$TL_messages_getHistory.peer.getObjectSize() + 60);
                        try {
                            nativeByteBuffer.writeInt32(14);
                            nativeByteBuffer.writeInt64(tLRPC$Dialog.id);
                            nativeByteBuffer.writeInt32(tLRPC$Dialog.top_message);
                            nativeByteBuffer.writeInt32(tLRPC$Dialog.read_inbox_max_id);
                            nativeByteBuffer.writeInt32(tLRPC$Dialog.read_outbox_max_id);
                            nativeByteBuffer.writeInt32(tLRPC$Dialog.unread_count);
                            nativeByteBuffer.writeInt32(tLRPC$Dialog.last_message_date);
                            nativeByteBuffer.writeInt32(tLRPC$Dialog.pts);
                            nativeByteBuffer.writeInt32(tLRPC$Dialog.flags);
                            nativeByteBuffer.writeBool(tLRPC$Dialog.pinned);
                            nativeByteBuffer.writeInt32(tLRPC$Dialog.pinnedNum);
                            nativeByteBuffer.writeInt32(tLRPC$Dialog.unread_mentions_count);
                            nativeByteBuffer.writeBool(tLRPC$Dialog.unread_mark);
                            nativeByteBuffer.writeInt32(tLRPC$Dialog.folder_id);
                            tLRPC$TL_messages_getHistory.peer.serializeToStream(nativeByteBuffer);
                        } catch (Exception e2) {
                            e = e2;
                        }
                    } catch (Exception e3) {
                        Exception exc = e3;
                        nativeByteBuffer = null;
                        e = exc;
                        FileLog.e((Throwable) e);
                        j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                        getConnectionsManager().sendRequest(tLRPC$TL_messages_getHistory, new RequestDelegate(i, tLRPC$Dialog, j) {
                            public final /* synthetic */ int f$1;
                            public final /* synthetic */ TLRPC$Dialog f$2;
                            public final /* synthetic */ long f$3;

                            {
                                this.f$1 = r2;
                                this.f$2 = r3;
                                this.f$3 = r4;
                            }

                            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                MessagesController.this.lambda$checkLastDialogMessage$174$MessagesController(this.f$1, this.f$2, this.f$3, tLObject, tLRPC$TL_error);
                            }
                        });
                    }
                    j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                }
                getConnectionsManager().sendRequest(tLRPC$TL_messages_getHistory, new RequestDelegate(i, tLRPC$Dialog, j) {
                    public final /* synthetic */ int f$1;
                    public final /* synthetic */ TLRPC$Dialog f$2;
                    public final /* synthetic */ long f$3;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                        this.f$3 = r4;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$checkLastDialogMessage$174$MessagesController(this.f$1, this.f$2, this.f$3, tLObject, tLRPC$TL_error);
                    }
                });
            }
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$checkLastDialogMessage$174 */
    public /* synthetic */ void lambda$checkLastDialogMessage$174$MessagesController(int i, TLRPC$Dialog tLRPC$Dialog, long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        int i2 = i;
        TLRPC$Dialog tLRPC$Dialog2 = tLRPC$Dialog;
        long j2 = j;
        if (tLObject != null) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
            removeDeletedMessagesFromArray((long) i2, tLRPC$messages_Messages.messages);
            if (!tLRPC$messages_Messages.messages.isEmpty()) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("checkLastDialogMessage for " + i2 + " has message");
                }
                TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
                TLRPC$Message tLRPC$Message = tLRPC$messages_Messages.messages.get(0);
                TLRPC$TL_dialog tLRPC$TL_dialog = new TLRPC$TL_dialog();
                tLRPC$TL_dialog.flags = tLRPC$Dialog2.flags;
                tLRPC$TL_dialog.top_message = tLRPC$Message.id;
                tLRPC$TL_dialog.last_message_date = tLRPC$Message.date;
                tLRPC$TL_dialog.notify_settings = tLRPC$Dialog2.notify_settings;
                tLRPC$TL_dialog.pts = tLRPC$Dialog2.pts;
                tLRPC$TL_dialog.unread_count = tLRPC$Dialog2.unread_count;
                tLRPC$TL_dialog.unread_mark = tLRPC$Dialog2.unread_mark;
                tLRPC$TL_dialog.unread_mentions_count = tLRPC$Dialog2.unread_mentions_count;
                tLRPC$TL_dialog.read_inbox_max_id = tLRPC$Dialog2.read_inbox_max_id;
                tLRPC$TL_dialog.read_outbox_max_id = tLRPC$Dialog2.read_outbox_max_id;
                tLRPC$TL_dialog.pinned = tLRPC$Dialog2.pinned;
                tLRPC$TL_dialog.pinnedNum = tLRPC$Dialog2.pinnedNum;
                tLRPC$TL_dialog.folder_id = tLRPC$Dialog2.folder_id;
                long j3 = tLRPC$Dialog2.id;
                tLRPC$TL_dialog.id = j3;
                tLRPC$Message.dialog_id = j3;
                tLRPC$TL_messages_dialogs.users.addAll(tLRPC$messages_Messages.users);
                tLRPC$TL_messages_dialogs.chats.addAll(tLRPC$messages_Messages.chats);
                tLRPC$TL_messages_dialogs.dialogs.add(tLRPC$TL_dialog);
                tLRPC$TL_messages_dialogs.messages.addAll(tLRPC$messages_Messages.messages);
                tLRPC$TL_messages_dialogs.count = 1;
                processDialogsUpdate(tLRPC$TL_messages_dialogs, (ArrayList<TLRPC$EncryptedChat>) null, false);
                getMessagesStorage().putMessages(tLRPC$messages_Messages.messages, true, true, false, getDownloadController().getAutodownloadMask(), true, false);
            } else {
                AndroidUtilities.runOnUIThread(new Runnable(i2, tLRPC$Dialog2) {
                    public final /* synthetic */ int f$1;
                    public final /* synthetic */ TLRPC$Dialog f$2;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                    }

                    public final void run() {
                        MessagesController.this.lambda$null$172$MessagesController(this.f$1, this.f$2);
                    }
                });
            }
        }
        if (j2 != 0) {
            getMessagesStorage().removePendingTask(j2);
        }
        AndroidUtilities.runOnUIThread(new Runnable(i2) {
            public final /* synthetic */ int f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$173$MessagesController(this.f$1);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$172 */
    public /* synthetic */ void lambda$null$172$MessagesController(int i, TLRPC$Dialog tLRPC$Dialog) {
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("checkLastDialogMessage for " + i + " has not message");
        }
        if (getMediaDataController().getDraft(tLRPC$Dialog.id, 0) == null) {
            TLRPC$Dialog tLRPC$Dialog2 = this.dialogs_dict.get(tLRPC$Dialog.id);
            if (tLRPC$Dialog2 == null) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("checkLastDialogMessage for " + i + " current dialog not found");
                }
                getMessagesStorage().isDialogHasTopMessage(tLRPC$Dialog.id, new Runnable(tLRPC$Dialog) {
                    public final /* synthetic */ TLRPC$Dialog f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run() {
                        MessagesController.this.lambda$null$171$MessagesController(this.f$1);
                    }
                });
                return;
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("checkLastDialogMessage for " + i + " current dialog top message " + tLRPC$Dialog2.top_message);
            }
            if (tLRPC$Dialog2.top_message == 0) {
                deleteDialog(tLRPC$Dialog.id, 3);
            }
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$171 */
    public /* synthetic */ void lambda$null$171$MessagesController(TLRPC$Dialog tLRPC$Dialog) {
        deleteDialog(tLRPC$Dialog.id, 3);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$173 */
    public /* synthetic */ void lambda$null$173$MessagesController(int i) {
        this.checkingLastMessagesDialogs.delete(i);
    }

    public void processDialogsUpdate(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, ArrayList<TLRPC$EncryptedChat> arrayList, boolean z) {
        Utilities.stageQueue.postRunnable(new Runnable(tLRPC$messages_Dialogs, z) {
            public final /* synthetic */ TLRPC$messages_Dialogs f$1;
            public final /* synthetic */ boolean f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$processDialogsUpdate$176$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$processDialogsUpdate$176 */
    public /* synthetic */ void lambda$processDialogsUpdate$176$MessagesController(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, boolean z) {
        MessageObject messageObject;
        TLRPC$Chat tLRPC$Chat;
        int i;
        TLRPC$Peer tLRPC$Peer;
        int i2;
        int i3;
        TLRPC$Chat tLRPC$Chat2;
        TLRPC$Chat tLRPC$Chat3;
        TLRPC$messages_Dialogs tLRPC$messages_Dialogs2 = tLRPC$messages_Dialogs;
        LongSparseArray longSparseArray = new LongSparseArray();
        LongSparseArray longSparseArray2 = new LongSparseArray();
        SparseArray sparseArray = new SparseArray(tLRPC$messages_Dialogs2.users.size());
        SparseArray sparseArray2 = new SparseArray(tLRPC$messages_Dialogs2.chats.size());
        LongSparseArray longSparseArray3 = new LongSparseArray();
        for (int i4 = 0; i4 < tLRPC$messages_Dialogs2.users.size(); i4++) {
            TLRPC$User tLRPC$User = tLRPC$messages_Dialogs2.users.get(i4);
            sparseArray.put(tLRPC$User.id, tLRPC$User);
        }
        for (int i5 = 0; i5 < tLRPC$messages_Dialogs2.chats.size(); i5++) {
            TLRPC$Chat tLRPC$Chat4 = tLRPC$messages_Dialogs2.chats.get(i5);
            sparseArray2.put(tLRPC$Chat4.id, tLRPC$Chat4);
        }
        int i6 = 0;
        while (i6 < tLRPC$messages_Dialogs2.messages.size()) {
            TLRPC$Message tLRPC$Message = tLRPC$messages_Dialogs2.messages.get(i6);
            long j = this.promoDialogId;
            if ((j == 0 || j != tLRPC$Message.dialog_id) && ((i2 = (tLRPC$Peer = tLRPC$Message.peer_id).channel_id) == 0 ? !((i3 = tLRPC$Peer.chat_id) == 0 || (tLRPC$Chat2 = (TLRPC$Chat) sparseArray2.get(i3)) == null || tLRPC$Chat2.migrated_to == null) : !((tLRPC$Chat3 = (TLRPC$Chat) sparseArray2.get(i2)) == null || !ChatObject.isNotInChat(tLRPC$Chat3)))) {
                i = i6;
            } else {
                MessageObject messageObject2 = r8;
                i = i6;
                MessageObject messageObject3 = new MessageObject(this.currentAccount, tLRPC$Message, (SparseArray<TLRPC$User>) sparseArray, (SparseArray<TLRPC$Chat>) sparseArray2, false, true);
                longSparseArray2.put(messageObject2.getDialogId(), messageObject2);
            }
            i6 = i + 1;
        }
        for (int i7 = 0; i7 < tLRPC$messages_Dialogs2.dialogs.size(); i7++) {
            TLRPC$Dialog tLRPC$Dialog = tLRPC$messages_Dialogs2.dialogs.get(i7);
            DialogObject.initDialog(tLRPC$Dialog);
            long j2 = this.promoDialogId;
            if (j2 == 0 || j2 != tLRPC$Dialog.id) {
                if (DialogObject.isChannel(tLRPC$Dialog)) {
                    TLRPC$Chat tLRPC$Chat5 = (TLRPC$Chat) sparseArray2.get(-((int) tLRPC$Dialog.id));
                    if (tLRPC$Chat5 != null && ChatObject.isNotInChat(tLRPC$Chat5)) {
                    }
                } else {
                    long j3 = tLRPC$Dialog.id;
                    if (!(((int) j3) >= 0 || (tLRPC$Chat = (TLRPC$Chat) sparseArray2.get(-((int) j3))) == null || tLRPC$Chat.migrated_to == null)) {
                    }
                }
            }
            if (tLRPC$Dialog.last_message_date == 0 && (messageObject = (MessageObject) longSparseArray2.get(tLRPC$Dialog.id)) != null) {
                tLRPC$Dialog.last_message_date = messageObject.messageOwner.date;
            }
            longSparseArray.put(tLRPC$Dialog.id, tLRPC$Dialog);
            longSparseArray3.put(tLRPC$Dialog.id, Integer.valueOf(tLRPC$Dialog.unread_count));
            Integer num = (Integer) this.dialogs_read_inbox_max.get(Long.valueOf(tLRPC$Dialog.id));
            if (num == null) {
                num = 0;
            }
            this.dialogs_read_inbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num.intValue(), tLRPC$Dialog.read_inbox_max_id)));
            Integer num2 = (Integer) this.dialogs_read_outbox_max.get(Long.valueOf(tLRPC$Dialog.id));
            if (num2 == null) {
                num2 = 0;
            }
            this.dialogs_read_outbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num2.intValue(), tLRPC$Dialog.read_outbox_max_id)));
        }
        AndroidUtilities.runOnUIThread(new Runnable(tLRPC$messages_Dialogs, longSparseArray, longSparseArray2, z, longSparseArray3) {
            public final /* synthetic */ TLRPC$messages_Dialogs f$1;
            public final /* synthetic */ LongSparseArray f$2;
            public final /* synthetic */ LongSparseArray f$3;
            public final /* synthetic */ boolean f$4;
            public final /* synthetic */ LongSparseArray f$5;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
            }

            public final void run() {
                MessagesController.this.lambda$null$175$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5);
            }
        });
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Removed duplicated region for block: B:107:0x025e A[SYNTHETIC] */
    /* JADX WARNING: Removed duplicated region for block: B:111:0x025e A[SYNTHETIC] */
    /* JADX WARNING: Removed duplicated region for block: B:38:0x0110  */
    /* JADX WARNING: Removed duplicated region for block: B:48:0x015d  */
    /* JADX WARNING: Removed duplicated region for block: B:68:0x01cf  */
    /* JADX WARNING: Removed duplicated region for block: B:69:0x01d6 A[ADDED_TO_REGION] */
    /* JADX WARNING: Removed duplicated region for block: B:96:0x025b  */
    /* renamed from: lambda$null$175 */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$null$175$MessagesController(org.telegram.tgnet.TLRPC$messages_Dialogs r19, android.util.LongSparseArray r20, android.util.LongSparseArray r21, boolean r22, android.util.LongSparseArray r23) {
        /*
            r18 = this;
            r0 = r18
            r1 = r19
            r2 = r20
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r3 = r1.users
            r4 = 1
            r0.putUsers(r3, r4)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r1 = r1.chats
            r0.putChats(r1, r4)
            r1 = 0
            r3 = 0
        L_0x0013:
            int r5 = r20.size()
            r6 = 0
            if (r3 >= r5) goto L_0x0263
            long r7 = r2.keyAt(r3)
            boolean r5 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r5 == 0) goto L_0x0036
            java.lang.StringBuilder r5 = new java.lang.StringBuilder
            r5.<init>()
            java.lang.String r9 = "processDialogsUpdate "
            r5.append(r9)
            r5.append(r7)
            java.lang.String r5 = r5.toString()
            org.telegram.messenger.FileLog.d(r5)
        L_0x0036:
            java.lang.Object r5 = r2.valueAt(r3)
            org.telegram.tgnet.TLRPC$Dialog r5 = (org.telegram.tgnet.TLRPC$Dialog) r5
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r9 = r0.dialogs_dict
            java.lang.Object r9 = r9.get(r7)
            org.telegram.tgnet.TLRPC$Dialog r9 = (org.telegram.tgnet.TLRPC$Dialog) r9
            long r10 = r5.id
            r12 = r21
            java.lang.Object r10 = r12.get(r10)
            org.telegram.messenger.MessageObject r10 = (org.telegram.messenger.MessageObject) r10
            java.lang.String r11 = "processDialogsUpdate new message is null"
            r13 = 0
            if (r9 != 0) goto L_0x00bc
            boolean r9 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r9 == 0) goto L_0x005d
            java.lang.String r9 = "processDialogsUpdate dialog null"
            org.telegram.messenger.FileLog.d(r9)
        L_0x005d:
            android.util.SparseIntArray r9 = r0.nextDialogsCacheOffset
            int r15 = r5.folder_id
            int r9 = r9.get(r15, r1)
            int r9 = r9 + r4
            android.util.SparseIntArray r15 = r0.nextDialogsCacheOffset
            int r4 = r5.folder_id
            r15.put(r4, r9)
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r4 = r0.dialogs_dict
            r4.put(r7, r5)
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r4 = r0.dialogMessage
            r4.put(r7, r10)
            if (r10 != 0) goto L_0x0086
            if (r22 == 0) goto L_0x007e
            r0.checkLastDialogMessage(r5, r6, r13)
        L_0x007e:
            boolean r4 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r4 == 0) goto L_0x00b9
            org.telegram.messenger.FileLog.d(r11)
            goto L_0x00b9
        L_0x0086:
            org.telegram.tgnet.TLRPC$Message r4 = r10.messageOwner
            org.telegram.tgnet.TLRPC$Peer r4 = r4.peer_id
            int r4 = r4.channel_id
            if (r4 != 0) goto L_0x00b9
            android.util.SparseArray<org.telegram.messenger.MessageObject> r4 = r0.dialogMessagesByIds
            int r5 = r10.getId()
            r4.put(r5, r10)
            int r4 = r0.dialogsLoadedTillDate
            org.telegram.tgnet.TLRPC$Message r5 = r10.messageOwner
            int r5 = r5.date
            int r4 = java.lang.Math.min(r4, r5)
            r0.dialogsLoadedTillDate = r4
            org.telegram.tgnet.TLRPC$Message r4 = r10.messageOwner
            long r4 = r4.random_id
            int r6 = (r4 > r13 ? 1 : (r4 == r13 ? 0 : -1))
            if (r6 == 0) goto L_0x00b0
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r6 = r0.dialogMessagesByRandomIds
            r6.put(r4, r10)
        L_0x00b0:
            boolean r4 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r4 == 0) goto L_0x00b9
            java.lang.String r4 = "processDialogsUpdate new message not null"
            org.telegram.messenger.FileLog.d(r4)
        L_0x00b9:
            r7 = 1
            goto L_0x025e
        L_0x00bc:
            boolean r4 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r4 == 0) goto L_0x00c5
            java.lang.String r4 = "processDialogsUpdate dialog not null"
            org.telegram.messenger.FileLog.d(r4)
        L_0x00c5:
            int r4 = r5.unread_count
            r9.unread_count = r4
            int r4 = r9.unread_mentions_count
            int r15 = r5.unread_mentions_count
            if (r4 == r15) goto L_0x00ff
            r9.unread_mentions_count = r15
            java.util.ArrayList<java.lang.Long> r4 = r0.createdDialogMainThreadIds
            long r13 = r9.id
            java.lang.Long r13 = java.lang.Long.valueOf(r13)
            boolean r4 = r4.contains(r13)
            if (r4 == 0) goto L_0x00ff
            org.telegram.messenger.NotificationCenter r4 = r18.getNotificationCenter()
            int r13 = org.telegram.messenger.NotificationCenter.updateMentionsCount
            r14 = 2
            java.lang.Object[] r14 = new java.lang.Object[r14]
            r16 = r7
            long r6 = r9.id
            java.lang.Long r6 = java.lang.Long.valueOf(r6)
            r14[r1] = r6
            int r6 = r9.unread_mentions_count
            java.lang.Integer r6 = java.lang.Integer.valueOf(r6)
            r7 = 1
            r14[r7] = r6
            r4.postNotificationName(r13, r14)
            goto L_0x0102
        L_0x00ff:
            r16 = r7
            r7 = 1
        L_0x0102:
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r4 = r0.dialogMessage
            r13 = r16
            java.lang.Object r4 = r4.get(r13)
            org.telegram.messenger.MessageObject r4 = (org.telegram.messenger.MessageObject) r4
            boolean r6 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r6 == 0) goto L_0x0155
            java.lang.StringBuilder r6 = new java.lang.StringBuilder
            r6.<init>()
            java.lang.String r8 = "processDialogsUpdate oldMsg "
            r6.append(r8)
            r6.append(r4)
            java.lang.String r8 = " old top_message = "
            r6.append(r8)
            int r8 = r9.top_message
            r6.append(r8)
            java.lang.String r8 = " new top_message = "
            r6.append(r8)
            int r8 = r5.top_message
            r6.append(r8)
            java.lang.String r6 = r6.toString()
            org.telegram.messenger.FileLog.d(r6)
            java.lang.StringBuilder r6 = new java.lang.StringBuilder
            r6.<init>()
            java.lang.String r8 = "processDialogsUpdate oldMsgDeleted "
            r6.append(r8)
            if (r4 == 0) goto L_0x014a
            boolean r8 = r4.deleted
            if (r8 == 0) goto L_0x014a
            r8 = 1
            goto L_0x014b
        L_0x014a:
            r8 = 0
        L_0x014b:
            r6.append(r8)
            java.lang.String r6 = r6.toString()
            org.telegram.messenger.FileLog.d(r6)
        L_0x0155:
            if (r4 == 0) goto L_0x01d6
            int r6 = r9.top_message
            if (r6 <= 0) goto L_0x015d
            goto L_0x01d6
        L_0x015d:
            boolean r6 = r4.deleted
            if (r6 != 0) goto L_0x016d
            if (r10 == 0) goto L_0x016d
            org.telegram.tgnet.TLRPC$Message r6 = r10.messageOwner
            int r6 = r6.date
            org.telegram.tgnet.TLRPC$Message r8 = r4.messageOwner
            int r8 = r8.date
            if (r6 <= r8) goto L_0x025e
        L_0x016d:
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r6 = r0.dialogs_dict
            r6.put(r13, r5)
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r5 = r0.dialogMessage
            r5.put(r13, r10)
            org.telegram.tgnet.TLRPC$Message r5 = r4.messageOwner
            org.telegram.tgnet.TLRPC$Peer r5 = r5.peer_id
            int r5 = r5.channel_id
            if (r5 != 0) goto L_0x0188
            android.util.SparseArray<org.telegram.messenger.MessageObject> r5 = r0.dialogMessagesByIds
            int r6 = r4.getId()
            r5.remove(r6)
        L_0x0188:
            if (r10 == 0) goto L_0x01c5
            int r5 = r4.getId()
            int r6 = r10.getId()
            if (r5 != r6) goto L_0x0198
            boolean r5 = r4.deleted
            r10.deleted = r5
        L_0x0198:
            org.telegram.tgnet.TLRPC$Message r5 = r10.messageOwner
            org.telegram.tgnet.TLRPC$Peer r5 = r5.peer_id
            int r5 = r5.channel_id
            if (r5 != 0) goto L_0x01c5
            android.util.SparseArray<org.telegram.messenger.MessageObject> r5 = r0.dialogMessagesByIds
            int r6 = r10.getId()
            r5.put(r6, r10)
            int r5 = r0.dialogsLoadedTillDate
            org.telegram.tgnet.TLRPC$Message r6 = r10.messageOwner
            int r6 = r6.date
            int r5 = java.lang.Math.min(r5, r6)
            r0.dialogsLoadedTillDate = r5
            org.telegram.tgnet.TLRPC$Message r5 = r10.messageOwner
            long r5 = r5.random_id
            r8 = 0
            int r11 = (r5 > r8 ? 1 : (r5 == r8 ? 0 : -1))
            if (r11 == 0) goto L_0x01c7
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r11 = r0.dialogMessagesByRandomIds
            r11.put(r5, r10)
            goto L_0x01c7
        L_0x01c5:
            r8 = 0
        L_0x01c7:
            org.telegram.tgnet.TLRPC$Message r4 = r4.messageOwner
            long r4 = r4.random_id
            int r6 = (r4 > r8 ? 1 : (r4 == r8 ? 0 : -1))
            if (r6 == 0) goto L_0x025e
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r6 = r0.dialogMessagesByRandomIds
            r6.remove(r4)
            goto L_0x025e
        L_0x01d6:
            if (r4 == 0) goto L_0x01dc
            boolean r6 = r4.deleted
            if (r6 != 0) goto L_0x01e2
        L_0x01dc:
            int r6 = r5.top_message
            int r8 = r9.top_message
            if (r6 <= r8) goto L_0x024d
        L_0x01e2:
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r6 = r0.dialogs_dict
            r6.put(r13, r5)
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r6 = r0.dialogMessage
            r6.put(r13, r10)
            if (r4 == 0) goto L_0x020e
            org.telegram.tgnet.TLRPC$Message r6 = r4.messageOwner
            org.telegram.tgnet.TLRPC$Peer r6 = r6.peer_id
            int r6 = r6.channel_id
            if (r6 != 0) goto L_0x020e
            android.util.SparseArray<org.telegram.messenger.MessageObject> r6 = r0.dialogMessagesByIds
            int r8 = r4.getId()
            r6.remove(r8)
            org.telegram.tgnet.TLRPC$Message r6 = r4.messageOwner
            long r8 = r6.random_id
            r13 = 0
            int r6 = (r8 > r13 ? 1 : (r8 == r13 ? 0 : -1))
            if (r6 == 0) goto L_0x020e
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r6 = r0.dialogMessagesByRandomIds
            r6.remove(r8)
        L_0x020e:
            if (r10 == 0) goto L_0x024d
            if (r4 == 0) goto L_0x0220
            int r6 = r4.getId()
            int r8 = r10.getId()
            if (r6 != r8) goto L_0x0220
            boolean r4 = r4.deleted
            r10.deleted = r4
        L_0x0220:
            org.telegram.tgnet.TLRPC$Message r4 = r10.messageOwner
            org.telegram.tgnet.TLRPC$Peer r4 = r4.peer_id
            int r4 = r4.channel_id
            if (r4 != 0) goto L_0x024d
            android.util.SparseArray<org.telegram.messenger.MessageObject> r4 = r0.dialogMessagesByIds
            int r6 = r10.getId()
            r4.put(r6, r10)
            int r4 = r0.dialogsLoadedTillDate
            org.telegram.tgnet.TLRPC$Message r6 = r10.messageOwner
            int r6 = r6.date
            int r4 = java.lang.Math.min(r4, r6)
            r0.dialogsLoadedTillDate = r4
            org.telegram.tgnet.TLRPC$Message r4 = r10.messageOwner
            long r8 = r4.random_id
            r13 = 0
            int r4 = (r8 > r13 ? 1 : (r8 == r13 ? 0 : -1))
            if (r4 == 0) goto L_0x024f
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r4 = r0.dialogMessagesByRandomIds
            r4.put(r8, r10)
            goto L_0x024f
        L_0x024d:
            r13 = 0
        L_0x024f:
            if (r22 == 0) goto L_0x025e
            if (r10 != 0) goto L_0x025e
            r4 = 0
            r0.checkLastDialogMessage(r5, r4, r13)
            boolean r4 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r4 == 0) goto L_0x025e
            org.telegram.messenger.FileLog.d(r11)
        L_0x025e:
            int r3 = r3 + 1
            r4 = 1
            goto L_0x0013
        L_0x0263:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r0.allDialogs
            r2.clear()
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r2 = r0.dialogs_dict
            int r2 = r2.size()
            r3 = 0
        L_0x026f:
            if (r3 >= r2) goto L_0x027f
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r4 = r0.allDialogs
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r5 = r0.dialogs_dict
            java.lang.Object r5 = r5.valueAt(r3)
            r4.add(r5)
            int r3 = r3 + 1
            goto L_0x026f
        L_0x027f:
            r3 = 0
            r0.sortDialogs(r3)
            org.telegram.messenger.NotificationCenter r2 = r18.getNotificationCenter()
            int r3 = org.telegram.messenger.NotificationCenter.dialogsNeedReload
            java.lang.Object[] r1 = new java.lang.Object[r1]
            r2.postNotificationName(r3, r1)
            org.telegram.messenger.NotificationsController r1 = r18.getNotificationsController()
            r2 = r23
            r1.processDialogsUpdateRead(r2)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$null$175$MessagesController(org.telegram.tgnet.TLRPC$messages_Dialogs, android.util.LongSparseArray, android.util.LongSparseArray, boolean, android.util.LongSparseArray):void");
    }

    public void addToViewsQueue(MessageObject messageObject) {
        Utilities.stageQueue.postRunnable(new Runnable(messageObject) {
            public final /* synthetic */ MessageObject f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$addToViewsQueue$177$MessagesController(this.f$1);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$addToViewsQueue$177 */
    public /* synthetic */ void lambda$addToViewsQueue$177$MessagesController(MessageObject messageObject) {
        int dialogId = (int) messageObject.getDialogId();
        int id = messageObject.getId();
        ArrayList arrayList = this.channelViewsToSend.get(dialogId);
        if (arrayList == null) {
            arrayList = new ArrayList();
            this.channelViewsToSend.put(dialogId, arrayList);
        }
        if (!arrayList.contains(Integer.valueOf(id))) {
            arrayList.add(Integer.valueOf(id));
        }
    }

    public void addToPollsQueue(long j, ArrayList<MessageObject> arrayList) {
        int i;
        SparseArray sparseArray = this.pollsToCheck.get(j);
        if (sparseArray == null) {
            sparseArray = new SparseArray();
            this.pollsToCheck.put(j, sparseArray);
            this.pollsToCheckSize++;
        }
        int size = sparseArray.size();
        for (int i2 = 0; i2 < size; i2++) {
            ((MessageObject) sparseArray.valueAt(i2)).pollVisibleOnScreen = false;
        }
        int currentTime = getConnectionsManager().getCurrentTime();
        int size2 = arrayList.size();
        boolean z = false;
        int i3 = Integer.MAX_VALUE;
        for (int i4 = 0; i4 < size2; i4++) {
            MessageObject messageObject = arrayList.get(i4);
            if (messageObject.type == 17) {
                TLRPC$Poll tLRPC$Poll = ((TLRPC$TL_messageMediaPoll) messageObject.messageOwner.media).poll;
                if (!tLRPC$Poll.closed && (i = tLRPC$Poll.close_date) != 0) {
                    if (i <= currentTime) {
                        z = true;
                    } else {
                        i3 = Math.min(i3, i - currentTime);
                    }
                }
                int id = messageObject.getId();
                MessageObject messageObject2 = (MessageObject) sparseArray.get(id);
                if (messageObject2 != null) {
                    messageObject2.pollVisibleOnScreen = true;
                } else {
                    sparseArray.put(id, messageObject);
                }
            }
        }
        if (z) {
            this.lastViewsCheckTime = 0;
        } else if (i3 < 5) {
            this.lastViewsCheckTime = Math.min(this.lastViewsCheckTime, System.currentTimeMillis() - ((long) ((5 - i3) * 1000)));
        }
    }

    public void markMessageContentAsRead(MessageObject messageObject) {
        if (!messageObject.scheduled) {
            ArrayList arrayList = new ArrayList();
            long id = (long) messageObject.getId();
            TLRPC$Message tLRPC$Message = messageObject.messageOwner;
            int i = tLRPC$Message.peer_id.channel_id;
            if (i != 0) {
                id |= ((long) i) << 32;
            }
            if (tLRPC$Message.mentioned) {
                getMessagesStorage().markMentionMessageAsRead(messageObject.getId(), messageObject.messageOwner.peer_id.channel_id, messageObject.getDialogId());
            }
            arrayList.add(Long.valueOf(id));
            getMessagesStorage().markMessagesContentAsRead(arrayList, 0);
            getNotificationCenter().postNotificationName(NotificationCenter.messagesReadContent, arrayList);
            if (messageObject.getId() < 0) {
                markMessageAsRead(messageObject.getDialogId(), messageObject.messageOwner.random_id, Integer.MIN_VALUE);
            } else if (messageObject.messageOwner.peer_id.channel_id != 0) {
                TLRPC$TL_channels_readMessageContents tLRPC$TL_channels_readMessageContents = new TLRPC$TL_channels_readMessageContents();
                TLRPC$InputChannel inputChannel = getInputChannel(messageObject.messageOwner.peer_id.channel_id);
                tLRPC$TL_channels_readMessageContents.channel = inputChannel;
                if (inputChannel != null) {
                    tLRPC$TL_channels_readMessageContents.id.add(Integer.valueOf(messageObject.getId()));
                    getConnectionsManager().sendRequest(tLRPC$TL_channels_readMessageContents, $$Lambda$MessagesController$izTEVy9Jj17W90djB45f1BXGn0.INSTANCE);
                }
            } else {
                TLRPC$TL_messages_readMessageContents tLRPC$TL_messages_readMessageContents = new TLRPC$TL_messages_readMessageContents();
                tLRPC$TL_messages_readMessageContents.id.add(Integer.valueOf(messageObject.getId()));
                getConnectionsManager().sendRequest(tLRPC$TL_messages_readMessageContents, new RequestDelegate() {
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$markMessageContentAsRead$179$MessagesController(tLObject, tLRPC$TL_error);
                    }
                });
            }
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$markMessageContentAsRead$179 */
    public /* synthetic */ void lambda$markMessageContentAsRead$179$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedMessages tLRPC$TL_messages_affectedMessages = (TLRPC$TL_messages_affectedMessages) tLObject;
            processNewDifferenceParams(-1, tLRPC$TL_messages_affectedMessages.pts, -1, tLRPC$TL_messages_affectedMessages.pts_count);
        }
    }

    public void markMentionMessageAsRead(int i, int i2, long j) {
        getMessagesStorage().markMentionMessageAsRead(i, i2, j);
        if (i2 != 0) {
            TLRPC$TL_channels_readMessageContents tLRPC$TL_channels_readMessageContents = new TLRPC$TL_channels_readMessageContents();
            TLRPC$InputChannel inputChannel = getInputChannel(i2);
            tLRPC$TL_channels_readMessageContents.channel = inputChannel;
            if (inputChannel != null) {
                tLRPC$TL_channels_readMessageContents.id.add(Integer.valueOf(i));
                getConnectionsManager().sendRequest(tLRPC$TL_channels_readMessageContents, $$Lambda$MessagesController$KuCNYKsmhdecEF1Y2TuKWJgnC4.INSTANCE);
                return;
            }
            return;
        }
        TLRPC$TL_messages_readMessageContents tLRPC$TL_messages_readMessageContents = new TLRPC$TL_messages_readMessageContents();
        tLRPC$TL_messages_readMessageContents.id.add(Integer.valueOf(i));
        getConnectionsManager().sendRequest(tLRPC$TL_messages_readMessageContents, new RequestDelegate() {
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$markMentionMessageAsRead$181$MessagesController(tLObject, tLRPC$TL_error);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$markMentionMessageAsRead$181 */
    public /* synthetic */ void lambda$markMentionMessageAsRead$181$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedMessages tLRPC$TL_messages_affectedMessages = (TLRPC$TL_messages_affectedMessages) tLObject;
            processNewDifferenceParams(-1, tLRPC$TL_messages_affectedMessages.pts, -1, tLRPC$TL_messages_affectedMessages.pts_count);
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:28:0x0064  */
    /* JADX WARNING: Removed duplicated region for block: B:29:0x0081  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void markMessageAsRead(int r10, int r11, org.telegram.tgnet.TLRPC$InputChannel r12, int r13, long r14) {
        /*
            r9 = this;
            if (r10 == 0) goto L_0x009b
            if (r13 > 0) goto L_0x0006
            goto L_0x009b
        L_0x0006:
            if (r11 == 0) goto L_0x0011
            if (r12 != 0) goto L_0x0011
            org.telegram.tgnet.TLRPC$InputChannel r12 = r9.getInputChannel((int) r11)
            if (r12 != 0) goto L_0x0011
            return
        L_0x0011:
            r0 = 0
            int r2 = (r14 > r0 ? 1 : (r14 == r0 ? 0 : -1))
            if (r2 != 0) goto L_0x004e
            r14 = 0
            org.telegram.tgnet.NativeByteBuffer r15 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x0041 }
            r0 = 16
            if (r12 == 0) goto L_0x0023
            int r1 = r12.getObjectSize()     // Catch:{ Exception -> 0x0041 }
            goto L_0x0024
        L_0x0023:
            r1 = 0
        L_0x0024:
            int r0 = r0 + r1
            r15.<init>((int) r0)     // Catch:{ Exception -> 0x0041 }
            r14 = 11
            r15.writeInt32(r14)     // Catch:{ Exception -> 0x003c }
            r15.writeInt32(r10)     // Catch:{ Exception -> 0x003c }
            r15.writeInt32(r11)     // Catch:{ Exception -> 0x003c }
            r15.writeInt32(r13)     // Catch:{ Exception -> 0x003c }
            if (r11 == 0) goto L_0x0046
            r12.serializeToStream(r15)     // Catch:{ Exception -> 0x003c }
            goto L_0x0046
        L_0x003c:
            r14 = move-exception
            r8 = r15
            r15 = r14
            r14 = r8
            goto L_0x0042
        L_0x0041:
            r15 = move-exception
        L_0x0042:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r15)
            r15 = r14
        L_0x0046:
            org.telegram.messenger.MessagesStorage r14 = r9.getMessagesStorage()
            long r14 = r14.createPendingTask(r15)
        L_0x004e:
            org.telegram.tgnet.ConnectionsManager r0 = r9.getConnectionsManager()
            int r5 = r0.getCurrentTime()
            org.telegram.messenger.MessagesStorage r1 = r9.getMessagesStorage()
            r7 = 0
            r2 = r10
            r3 = r11
            r4 = r5
            r6 = r13
            r1.createTaskForMid(r2, r3, r4, r5, r6, r7)
            if (r11 == 0) goto L_0x0081
            org.telegram.tgnet.TLRPC$TL_channels_readMessageContents r11 = new org.telegram.tgnet.TLRPC$TL_channels_readMessageContents
            r11.<init>()
            r11.channel = r12
            java.util.ArrayList<java.lang.Integer> r12 = r11.id
            java.lang.Integer r10 = java.lang.Integer.valueOf(r10)
            r12.add(r10)
            org.telegram.tgnet.ConnectionsManager r10 = r9.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$R9qfEvrBT-9aq10YRW5nsMZ_8qI r12 = new org.telegram.messenger.-$$Lambda$MessagesController$R9qfEvrBT-9aq10YRW5nsMZ_8qI
            r12.<init>(r14)
            r10.sendRequest(r11, r12)
            goto L_0x009b
        L_0x0081:
            org.telegram.tgnet.TLRPC$TL_messages_readMessageContents r11 = new org.telegram.tgnet.TLRPC$TL_messages_readMessageContents
            r11.<init>()
            java.util.ArrayList<java.lang.Integer> r12 = r11.id
            java.lang.Integer r10 = java.lang.Integer.valueOf(r10)
            r12.add(r10)
            org.telegram.tgnet.ConnectionsManager r10 = r9.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$JzRbf7Rm0xPPHdC4y5CMVWZKGec r12 = new org.telegram.messenger.-$$Lambda$MessagesController$JzRbf7Rm0xPPHdC4y5CMVWZKGec
            r12.<init>(r14)
            r10.sendRequest(r11, r12)
        L_0x009b:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.markMessageAsRead(int, int, org.telegram.tgnet.TLRPC$InputChannel, int, long):void");
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$markMessageAsRead$182 */
    public /* synthetic */ void lambda$markMessageAsRead$182$MessagesController(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$markMessageAsRead$183 */
    public /* synthetic */ void lambda$markMessageAsRead$183$MessagesController(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedMessages tLRPC$TL_messages_affectedMessages = (TLRPC$TL_messages_affectedMessages) tLObject;
            processNewDifferenceParams(-1, tLRPC$TL_messages_affectedMessages.pts, -1, tLRPC$TL_messages_affectedMessages.pts_count);
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public void markMessageAsRead(long j, long j2, int i) {
        TLRPC$EncryptedChat encryptedChat;
        if (j2 != 0 && j != 0) {
            if (i > 0 || i == Integer.MIN_VALUE) {
                int i2 = (int) (j >> 32);
                if (((int) j) == 0 && (encryptedChat = getEncryptedChat(Integer.valueOf(i2))) != null) {
                    ArrayList arrayList = new ArrayList();
                    arrayList.add(Long.valueOf(j2));
                    getSecretChatHelper().sendMessagesReadMessage(encryptedChat, arrayList, (TLRPC$Message) null);
                    if (i > 0) {
                        int currentTime = getConnectionsManager().getCurrentTime();
                        getMessagesStorage().createTaskForSecretChat(encryptedChat.id, currentTime, currentTime, 0, arrayList);
                    }
                }
            }
        }
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v7, resolved type: org.telegram.tgnet.TLRPC$TL_messages_readHistory} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v8, resolved type: org.telegram.tgnet.TLRPC$TL_messages_readHistory} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v9, resolved type: org.telegram.tgnet.TLRPC$TL_channels_readHistory} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v11, resolved type: org.telegram.tgnet.TLRPC$TL_messages_readHistory} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void completeReadTask(org.telegram.messenger.MessagesController.ReadTask r8) {
        /*
            r7 = this;
            long r0 = r8.dialogId
            int r2 = (int) r0
            r3 = 32
            long r0 = r0 >> r3
            int r1 = (int) r0
            long r3 = r8.replyId
            r5 = 0
            int r0 = (r3 > r5 ? 1 : (r3 == r5 ? 0 : -1))
            if (r0 == 0) goto L_0x002d
            org.telegram.tgnet.TLRPC$TL_messages_readDiscussion r0 = new org.telegram.tgnet.TLRPC$TL_messages_readDiscussion
            r0.<init>()
            long r3 = r8.replyId
            int r1 = (int) r3
            r0.msg_id = r1
            org.telegram.tgnet.TLRPC$InputPeer r1 = r7.getInputPeer((int) r2)
            r0.peer = r1
            int r8 = r8.maxId
            r0.read_max_id = r8
            org.telegram.tgnet.ConnectionsManager r8 = r7.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$bvTG3hiDO9NIY_T8Eh-QGUgNzpE r1 = org.telegram.messenger.$$Lambda$MessagesController$bvTG3hiDO9NIY_T8EhQGUgNzpE.INSTANCE
            r8.sendRequest(r0, r1)
            goto L_0x0096
        L_0x002d:
            if (r2 == 0) goto L_0x0061
            org.telegram.tgnet.TLRPC$InputPeer r0 = r7.getInputPeer((int) r2)
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_inputPeerChannel
            if (r1 == 0) goto L_0x0048
            org.telegram.tgnet.TLRPC$TL_channels_readHistory r0 = new org.telegram.tgnet.TLRPC$TL_channels_readHistory
            r0.<init>()
            int r1 = -r2
            org.telegram.tgnet.TLRPC$InputChannel r1 = r7.getInputChannel((int) r1)
            r0.channel = r1
            int r8 = r8.maxId
            r0.max_id = r8
            goto L_0x0054
        L_0x0048:
            org.telegram.tgnet.TLRPC$TL_messages_readHistory r1 = new org.telegram.tgnet.TLRPC$TL_messages_readHistory
            r1.<init>()
            r1.peer = r0
            int r8 = r8.maxId
            r1.max_id = r8
            r0 = r1
        L_0x0054:
            org.telegram.tgnet.ConnectionsManager r8 = r7.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$ik7DZr9rnsOrFdzmy2H4I0pv0u8 r1 = new org.telegram.messenger.-$$Lambda$MessagesController$ik7DZr9rnsOrFdzmy2H4I0pv0u8
            r1.<init>()
            r8.sendRequest(r0, r1)
            goto L_0x0096
        L_0x0061:
            java.lang.Integer r0 = java.lang.Integer.valueOf(r1)
            org.telegram.tgnet.TLRPC$EncryptedChat r0 = r7.getEncryptedChat(r0)
            byte[] r1 = r0.auth_key
            if (r1 == 0) goto L_0x0096
            int r1 = r1.length
            r2 = 1
            if (r1 <= r2) goto L_0x0096
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_encryptedChat
            if (r1 == 0) goto L_0x0096
            org.telegram.tgnet.TLRPC$TL_messages_readEncryptedHistory r1 = new org.telegram.tgnet.TLRPC$TL_messages_readEncryptedHistory
            r1.<init>()
            org.telegram.tgnet.TLRPC$TL_inputEncryptedChat r2 = new org.telegram.tgnet.TLRPC$TL_inputEncryptedChat
            r2.<init>()
            r1.peer = r2
            int r3 = r0.id
            r2.chat_id = r3
            long r3 = r0.access_hash
            r2.access_hash = r3
            int r8 = r8.maxDate
            r1.max_date = r8
            org.telegram.tgnet.ConnectionsManager r8 = r7.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$Z4KbBoxA9VdKfZLNJKJhxfNKK9U r0 = org.telegram.messenger.$$Lambda$MessagesController$Z4KbBoxA9VdKfZLNJKJhxfNKK9U.INSTANCE
            r8.sendRequest(r1, r0)
        L_0x0096:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.completeReadTask(org.telegram.messenger.MessagesController$ReadTask):void");
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$completeReadTask$185 */
    public /* synthetic */ void lambda$completeReadTask$185$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null && (tLObject instanceof TLRPC$TL_messages_affectedMessages)) {
            TLRPC$TL_messages_affectedMessages tLRPC$TL_messages_affectedMessages = (TLRPC$TL_messages_affectedMessages) tLObject;
            processNewDifferenceParams(-1, tLRPC$TL_messages_affectedMessages.pts, -1, tLRPC$TL_messages_affectedMessages.pts_count);
        }
    }

    private void checkReadTasks() {
        long elapsedRealtime = SystemClock.elapsedRealtime();
        int size = this.readTasks.size();
        int i = 0;
        int i2 = 0;
        while (i2 < size) {
            ReadTask readTask = this.readTasks.get(i2);
            if (readTask.sendRequestTime <= elapsedRealtime) {
                completeReadTask(readTask);
                this.readTasks.remove(i2);
                this.readTasksMap.remove(readTask.dialogId);
                i2--;
                size--;
            }
            i2++;
        }
        int size2 = this.repliesReadTasks.size();
        while (i < size2) {
            ReadTask readTask2 = this.repliesReadTasks.get(i);
            if (readTask2.sendRequestTime <= elapsedRealtime) {
                completeReadTask(readTask2);
                this.repliesReadTasks.remove(i);
                this.threadsReadTasksMap.remove(readTask2.replyId);
                i--;
                size2--;
            }
            i++;
        }
    }

    public void markDialogAsReadNow(long j, long j2) {
        Utilities.stageQueue.postRunnable(new Runnable(j2, j) {
            public final /* synthetic */ long f$1;
            public final /* synthetic */ long f$2;

            {
                this.f$1 = r2;
                this.f$2 = r4;
            }

            public final void run() {
                MessagesController.this.lambda$markDialogAsReadNow$187$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$markDialogAsReadNow$187 */
    public /* synthetic */ void lambda$markDialogAsReadNow$187$MessagesController(long j, long j2) {
        if (j != 0) {
            ReadTask readTask = this.threadsReadTasksMap.get(j);
            if (readTask != null) {
                completeReadTask(readTask);
                this.repliesReadTasks.remove(readTask);
                this.threadsReadTasksMap.remove(j);
                return;
            }
            return;
        }
        ReadTask readTask2 = this.readTasksMap.get(j2);
        if (readTask2 != null) {
            completeReadTask(readTask2);
            this.readTasks.remove(readTask2);
            this.readTasksMap.remove(j2);
        }
    }

    public void markMentionsAsRead(long j) {
        int i = (int) j;
        if (i != 0) {
            getMessagesStorage().resetMentionsCount(j, 0);
            TLRPC$TL_messages_readMentions tLRPC$TL_messages_readMentions = new TLRPC$TL_messages_readMentions();
            tLRPC$TL_messages_readMentions.peer = getInputPeer(i);
            getConnectionsManager().sendRequest(tLRPC$TL_messages_readMentions, $$Lambda$MessagesController$NpOobCURJwZE8f6vdlbaPnYy0F0.INSTANCE);
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:18:0x009c, code lost:
        if (r12 == Integer.MAX_VALUE) goto L_0x0021;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:2:0x001d, code lost:
        if (r12 != Integer.MAX_VALUE) goto L_0x00f5;
     */
    /* JADX WARNING: Removed duplicated region for block: B:16:0x005d  */
    /* JADX WARNING: Removed duplicated region for block: B:27:0x00f7  */
    /* JADX WARNING: Removed duplicated region for block: B:29:? A[RETURN, SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void markDialogAsRead(long r19, int r21, int r22, int r23, boolean r24, long r25, int r27, boolean r28, int r29) {
        /*
            r18 = this;
            r9 = r18
            r10 = r19
            r12 = r21
            r13 = r22
            r14 = r23
            int r0 = (int) r10
            r1 = 32
            long r2 = r10 >> r1
            int r3 = (int) r2
            r15 = 2147483647(0x7fffffff, float:NaN)
            r16 = 1
            r17 = 0
            r4 = 0
            int r2 = (r25 > r4 ? 1 : (r25 == r4 ? 0 : -1))
            if (r2 == 0) goto L_0x0025
            if (r12 == r15) goto L_0x0021
            goto L_0x00f5
        L_0x0021:
            r16 = 0
            goto L_0x00f5
        L_0x0025:
            org.telegram.messenger.NotificationsController r2 = r18.getNotificationsController()
            boolean r2 = r2.showBadgeMessages
            if (r0 == 0) goto L_0x009f
            if (r12 != 0) goto L_0x0030
            return
        L_0x0030:
            long r2 = (long) r12
            long r4 = (long) r13
            if (r0 >= 0) goto L_0x004c
            int r0 = -r0
            java.lang.Integer r6 = java.lang.Integer.valueOf(r0)
            org.telegram.tgnet.TLRPC$Chat r6 = r9.getChat(r6)
            boolean r6 = org.telegram.messenger.ChatObject.isChannel(r6)
            if (r6 == 0) goto L_0x004c
            long r6 = (long) r0
            long r0 = r6 << r1
            long r2 = r2 | r0
            long r0 = r0 | r4
            r5 = r0
            r3 = r2
            r7 = 1
            goto L_0x004f
        L_0x004c:
            r5 = r4
            r7 = 0
            r3 = r2
        L_0x004f:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r0 = r9.dialogs_read_inbox_max
            java.lang.Long r1 = java.lang.Long.valueOf(r19)
            java.lang.Object r0 = r0.get(r1)
            java.lang.Integer r0 = (java.lang.Integer) r0
            if (r0 != 0) goto L_0x0061
            java.lang.Integer r0 = java.lang.Integer.valueOf(r17)
        L_0x0061:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r9.dialogs_read_inbox_max
            java.lang.Long r2 = java.lang.Long.valueOf(r19)
            int r0 = r0.intValue()
            int r0 = java.lang.Math.max(r0, r12)
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)
            r1.put(r2, r0)
            org.telegram.messenger.MessagesStorage r0 = r18.getMessagesStorage()
            r1 = r19
            r8 = r29
            r0.processPendingRead(r1, r3, r5, r7, r8)
            org.telegram.messenger.MessagesStorage r0 = r18.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r7 = r0.getStorageQueue()
            org.telegram.messenger.-$$Lambda$MessagesController$wMJkNGZXUr8JB5Haq-ZBzALnjnk r8 = new org.telegram.messenger.-$$Lambda$MessagesController$wMJkNGZXUr8JB5Haq-ZBzALnjnk
            r0 = r8
            r1 = r18
            r2 = r19
            r4 = r27
            r5 = r21
            r6 = r24
            r0.<init>(r2, r4, r5, r6)
            r7.postRunnable(r8)
            if (r12 == r15) goto L_0x0021
            goto L_0x00f5
        L_0x009f:
            if (r14 != 0) goto L_0x00a2
            return
        L_0x00a2:
            java.lang.Integer r0 = java.lang.Integer.valueOf(r3)
            org.telegram.tgnet.TLRPC$EncryptedChat r15 = r9.getEncryptedChat(r0)
            org.telegram.messenger.MessagesStorage r0 = r18.getMessagesStorage()
            long r3 = (long) r12
            long r5 = (long) r13
            r7 = 0
            r1 = r19
            r8 = r29
            r0.processPendingRead(r1, r3, r5, r7, r8)
            org.telegram.messenger.MessagesStorage r0 = r18.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r8 = r0.getStorageQueue()
            org.telegram.messenger.-$$Lambda$MessagesController$BBaMLUqIsp_-61GjOwV-6x0K1gw r7 = new org.telegram.messenger.-$$Lambda$MessagesController$BBaMLUqIsp_-61GjOwV-6x0K1gw
            r0 = r7
            r1 = r18
            r2 = r19
            r4 = r23
            r5 = r24
            r6 = r27
            r9 = r7
            r7 = r22
            r0.<init>(r2, r4, r5, r6, r7)
            r8.postRunnable(r9)
            if (r15 == 0) goto L_0x00f5
            int r0 = r15.ttl
            if (r0 <= 0) goto L_0x00f5
            org.telegram.tgnet.ConnectionsManager r0 = r18.getConnectionsManager()
            int r0 = r0.getCurrentTime()
            int r3 = java.lang.Math.max(r0, r14)
            org.telegram.messenger.MessagesStorage r0 = r18.getMessagesStorage()
            int r1 = r15.id
            r4 = 0
            r5 = 0
            r2 = r23
            r0.createTaskForSecretChat(r1, r2, r3, r4, r5)
        L_0x00f5:
            if (r16 == 0) goto L_0x010e
            org.telegram.messenger.DispatchQueue r9 = org.telegram.messenger.Utilities.stageQueue
            org.telegram.messenger.-$$Lambda$MessagesController$7wJOJIbM5h-Hp6vZiMkMwEVIZOo r13 = new org.telegram.messenger.-$$Lambda$MessagesController$7wJOJIbM5h-Hp6vZiMkMwEVIZOo
            r0 = r13
            r1 = r18
            r2 = r25
            r4 = r19
            r6 = r28
            r7 = r23
            r8 = r21
            r0.<init>(r2, r4, r6, r7, r8)
            r9.postRunnable(r13)
        L_0x010e:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.markDialogAsRead(long, int, int, int, boolean, long, int, boolean, int):void");
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$markDialogAsRead$190 */
    public /* synthetic */ void lambda$markDialogAsRead$190$MessagesController(long j, int i, int i2, boolean z) {
        AndroidUtilities.runOnUIThread(new Runnable(j, i, i2, z) {
            public final /* synthetic */ long f$1;
            public final /* synthetic */ int f$2;
            public final /* synthetic */ int f$3;
            public final /* synthetic */ boolean f$4;

            {
                this.f$1 = r2;
                this.f$2 = r4;
                this.f$3 = r5;
                this.f$4 = r6;
            }

            public final void run() {
                MessagesController.this.lambda$null$189$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$189 */
    public /* synthetic */ void lambda$null$189$MessagesController(long j, int i, int i2, boolean z) {
        long j2 = j;
        int i3 = i2;
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j2);
        if (tLRPC$Dialog != null) {
            int i4 = tLRPC$Dialog.unread_count;
            if (i == 0 || i3 >= tLRPC$Dialog.top_message) {
                tLRPC$Dialog.unread_count = 0;
            } else {
                int max = Math.max(i4 - i, 0);
                tLRPC$Dialog.unread_count = max;
                if (i3 != Integer.MIN_VALUE) {
                    int i5 = tLRPC$Dialog.top_message;
                    if (max > i5 - i3) {
                        tLRPC$Dialog.unread_count = i5 - i3;
                    }
                }
            }
            boolean z2 = tLRPC$Dialog.unread_mark;
            if (z2) {
                tLRPC$Dialog.unread_mark = false;
                getMessagesStorage().setDialogUnread(tLRPC$Dialog.id, false);
            }
            if ((i4 != 0 || z2) && tLRPC$Dialog.unread_count == 0) {
                if (!isDialogMuted(j)) {
                    this.unreadUnmutedDialogs--;
                }
                int i6 = 0;
                while (true) {
                    DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                    if (i6 < dialogFilterArr.length) {
                        if (dialogFilterArr[i6] != null && (dialogFilterArr[i6].flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                            sortDialogs((SparseArray<TLRPC$Chat>) null);
                            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                            break;
                        }
                        i6++;
                    } else {
                        break;
                    }
                }
            }
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 256);
        }
        if (!z) {
            getNotificationsController().processReadMessages((SparseLongArray) null, j, 0, i2, false);
            LongSparseArray longSparseArray = new LongSparseArray(1);
            longSparseArray.put(j2, 0);
            getNotificationsController().processDialogsUpdateRead(longSparseArray);
            return;
        }
        getNotificationsController().processReadMessages((SparseLongArray) null, j, 0, i2, true);
        LongSparseArray longSparseArray2 = new LongSparseArray(1);
        longSparseArray2.put(j2, -1);
        getNotificationsController().processDialogsUpdateRead(longSparseArray2);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$markDialogAsRead$192 */
    public /* synthetic */ void lambda$markDialogAsRead$192$MessagesController(long j, int i, boolean z, int i2, int i3) {
        AndroidUtilities.runOnUIThread(new Runnable(j, i, z, i2, i3) {
            public final /* synthetic */ long f$1;
            public final /* synthetic */ int f$2;
            public final /* synthetic */ boolean f$3;
            public final /* synthetic */ int f$4;
            public final /* synthetic */ int f$5;

            {
                this.f$1 = r2;
                this.f$2 = r4;
                this.f$3 = r5;
                this.f$4 = r6;
                this.f$5 = r7;
            }

            public final void run() {
                MessagesController.this.lambda$null$191$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$191 */
    public /* synthetic */ void lambda$null$191$MessagesController(long j, int i, boolean z, int i2, int i3) {
        getNotificationsController().processReadMessages((SparseLongArray) null, j, i, 0, z);
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
        if (tLRPC$Dialog != null) {
            int i4 = tLRPC$Dialog.unread_count;
            if (i2 == 0 || i3 <= tLRPC$Dialog.top_message) {
                tLRPC$Dialog.unread_count = 0;
            } else {
                int max = Math.max(i4 - i2, 0);
                tLRPC$Dialog.unread_count = max;
                if (i3 != Integer.MAX_VALUE) {
                    int i5 = tLRPC$Dialog.top_message;
                    if (max > i3 - i5) {
                        tLRPC$Dialog.unread_count = i3 - i5;
                    }
                }
            }
            boolean z2 = tLRPC$Dialog.unread_mark;
            if (z2) {
                tLRPC$Dialog.unread_mark = false;
                getMessagesStorage().setDialogUnread(tLRPC$Dialog.id, false);
            }
            if ((i4 != 0 || z2) && tLRPC$Dialog.unread_count == 0) {
                if (!isDialogMuted(j)) {
                    this.unreadUnmutedDialogs--;
                }
                int i6 = 0;
                while (true) {
                    DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                    if (i6 < dialogFilterArr.length) {
                        if (dialogFilterArr[i6] != null && (dialogFilterArr[i6].flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                            sortDialogs((SparseArray<TLRPC$Chat>) null);
                            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                            break;
                        }
                        i6++;
                    } else {
                        break;
                    }
                }
            }
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 256);
        }
        LongSparseArray longSparseArray = new LongSparseArray(1);
        longSparseArray.put(j, 0);
        getNotificationsController().processDialogsUpdateRead(longSparseArray);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$markDialogAsRead$193 */
    public /* synthetic */ void lambda$markDialogAsRead$193$MessagesController(long j, long j2, boolean z, int i, int i2) {
        ReadTask readTask;
        if (j != 0) {
            readTask = this.threadsReadTasksMap.get(j);
        } else {
            readTask = this.readTasksMap.get(j2);
        }
        if (readTask == null) {
            readTask = new ReadTask();
            readTask.dialogId = j2;
            readTask.replyId = j;
            readTask.sendRequestTime = SystemClock.elapsedRealtime() + 5000;
            if (!z) {
                if (j != 0) {
                    this.threadsReadTasksMap.put(j, readTask);
                    this.repliesReadTasks.add(readTask);
                } else {
                    this.readTasksMap.put(j2, readTask);
                    this.readTasks.add(readTask);
                }
            }
        }
        readTask.maxDate = i;
        readTask.maxId = i2;
        if (z) {
            completeReadTask(readTask);
        }
    }

    public int createChat(String str, ArrayList<Integer> arrayList, String str2, int i, Location location, String str3, BaseFragment baseFragment) {
        if (i == 0) {
            TLRPC$TL_messages_createChat tLRPC$TL_messages_createChat = new TLRPC$TL_messages_createChat();
            tLRPC$TL_messages_createChat.title = str;
            for (int i2 = 0; i2 < arrayList.size(); i2++) {
                TLRPC$User user = getUser(arrayList.get(i2));
                if (user != null) {
                    tLRPC$TL_messages_createChat.users.add(getInputUser(user));
                }
            }
            return getConnectionsManager().sendRequest(tLRPC$TL_messages_createChat, new RequestDelegate(baseFragment, tLRPC$TL_messages_createChat) {
                public final /* synthetic */ BaseFragment f$1;
                public final /* synthetic */ TLRPC$TL_messages_createChat f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$createChat$196$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                }
            }, 2);
        } else if (i != 2 && i != 4) {
            return 0;
        } else {
            TLRPC$TL_channels_createChannel tLRPC$TL_channels_createChannel = new TLRPC$TL_channels_createChannel();
            tLRPC$TL_channels_createChannel.title = str;
            if (str2 == null) {
                str2 = "";
            }
            tLRPC$TL_channels_createChannel.about = str2;
            if (i == 4) {
                tLRPC$TL_channels_createChannel.megagroup = true;
            } else {
                tLRPC$TL_channels_createChannel.broadcast = true;
            }
            if (location != null) {
                TLRPC$TL_inputGeoPoint tLRPC$TL_inputGeoPoint = new TLRPC$TL_inputGeoPoint();
                tLRPC$TL_channels_createChannel.geo_point = tLRPC$TL_inputGeoPoint;
                tLRPC$TL_inputGeoPoint.lat = location.getLatitude();
                tLRPC$TL_channels_createChannel.geo_point._long = location.getLongitude();
                tLRPC$TL_channels_createChannel.address = str3;
                tLRPC$TL_channels_createChannel.flags |= 4;
            }
            return getConnectionsManager().sendRequest(tLRPC$TL_channels_createChannel, new RequestDelegate(baseFragment, tLRPC$TL_channels_createChannel) {
                public final /* synthetic */ BaseFragment f$1;
                public final /* synthetic */ TLRPC$TL_channels_createChannel f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$createChat$199$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                }
            }, 2);
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$createChat$196 */
    public /* synthetic */ void lambda$createChat$196$MessagesController(BaseFragment baseFragment, TLRPC$TL_messages_createChat tLRPC$TL_messages_createChat, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null) {
            AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_error, baseFragment, tLRPC$TL_messages_createChat) {
                public final /* synthetic */ TLRPC$TL_error f$1;
                public final /* synthetic */ BaseFragment f$2;
                public final /* synthetic */ TLRPC$TL_messages_createChat f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run() {
                    MessagesController.this.lambda$null$194$MessagesController(this.f$1, this.f$2, this.f$3);
                }
            });
            return;
        }
        TLRPC$Updates tLRPC$Updates = (TLRPC$Updates) tLObject;
        processUpdates(tLRPC$Updates, false);
        AndroidUtilities.runOnUIThread(new Runnable(tLRPC$Updates) {
            public final /* synthetic */ TLRPC$Updates f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$195$MessagesController(this.f$1);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$194 */
    public /* synthetic */ void lambda$null$194$MessagesController(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_messages_createChat tLRPC$TL_messages_createChat) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_messages_createChat, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.chatDidFailCreate, new Object[0]);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$195 */
    public /* synthetic */ void lambda$null$195$MessagesController(TLRPC$Updates tLRPC$Updates) {
        putUsers(tLRPC$Updates.users, false);
        putChats(tLRPC$Updates.chats, false);
        ArrayList<TLRPC$Chat> arrayList = tLRPC$Updates.chats;
        if (arrayList == null || arrayList.isEmpty()) {
            getNotificationCenter().postNotificationName(NotificationCenter.chatDidFailCreate, new Object[0]);
            return;
        }
        getNotificationCenter().postNotificationName(NotificationCenter.chatDidCreated, Integer.valueOf(tLRPC$Updates.chats.get(0).id));
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$createChat$199 */
    public /* synthetic */ void lambda$createChat$199$MessagesController(BaseFragment baseFragment, TLRPC$TL_channels_createChannel tLRPC$TL_channels_createChannel, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null) {
            AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_error, baseFragment, tLRPC$TL_channels_createChannel) {
                public final /* synthetic */ TLRPC$TL_error f$1;
                public final /* synthetic */ BaseFragment f$2;
                public final /* synthetic */ TLRPC$TL_channels_createChannel f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run() {
                    MessagesController.this.lambda$null$197$MessagesController(this.f$1, this.f$2, this.f$3);
                }
            });
            return;
        }
        TLRPC$Updates tLRPC$Updates = (TLRPC$Updates) tLObject;
        processUpdates(tLRPC$Updates, false);
        AndroidUtilities.runOnUIThread(new Runnable(tLRPC$Updates) {
            public final /* synthetic */ TLRPC$Updates f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$198$MessagesController(this.f$1);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$197 */
    public /* synthetic */ void lambda$null$197$MessagesController(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_channels_createChannel tLRPC$TL_channels_createChannel) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_channels_createChannel, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.chatDidFailCreate, new Object[0]);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$198 */
    public /* synthetic */ void lambda$null$198$MessagesController(TLRPC$Updates tLRPC$Updates) {
        putUsers(tLRPC$Updates.users, false);
        putChats(tLRPC$Updates.chats, false);
        ArrayList<TLRPC$Chat> arrayList = tLRPC$Updates.chats;
        if (arrayList == null || arrayList.isEmpty()) {
            getNotificationCenter().postNotificationName(NotificationCenter.chatDidFailCreate, new Object[0]);
            return;
        }
        getNotificationCenter().postNotificationName(NotificationCenter.chatDidCreated, Integer.valueOf(tLRPC$Updates.chats.get(0).id));
    }

    public void convertToMegaGroup(Context context, int i, BaseFragment baseFragment, MessagesStorage.IntCallback intCallback) {
        TLRPC$TL_messages_migrateChat tLRPC$TL_messages_migrateChat = new TLRPC$TL_messages_migrateChat();
        tLRPC$TL_messages_migrateChat.chat_id = i;
        AlertDialog alertDialog = new AlertDialog(context, 3);
        alertDialog.setOnCancelListener(new DialogInterface.OnCancelListener(getConnectionsManager().sendRequest(tLRPC$TL_messages_migrateChat, new RequestDelegate(context, alertDialog, intCallback, baseFragment, tLRPC$TL_messages_migrateChat) {
            public final /* synthetic */ Context f$1;
            public final /* synthetic */ AlertDialog f$2;
            public final /* synthetic */ MessagesStorage.IntCallback f$3;
            public final /* synthetic */ BaseFragment f$4;
            public final /* synthetic */ TLRPC$TL_messages_migrateChat f$5;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
            }

            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$convertToMegaGroup$203$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, tLObject, tLRPC$TL_error);
            }
        })) {
            public final /* synthetic */ int f$1;

            {
                this.f$1 = r2;
            }

            public final void onCancel(DialogInterface dialogInterface) {
                MessagesController.this.lambda$convertToMegaGroup$204$MessagesController(this.f$1, dialogInterface);
            }
        });
        try {
            alertDialog.show();
        } catch (Exception unused) {
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$convertToMegaGroup$203 */
    public /* synthetic */ void lambda$convertToMegaGroup$203$MessagesController(Context context, AlertDialog alertDialog, MessagesStorage.IntCallback intCallback, BaseFragment baseFragment, TLRPC$TL_messages_migrateChat tLRPC$TL_messages_migrateChat, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            AndroidUtilities.runOnUIThread(new Runnable(context, alertDialog) {
                public final /* synthetic */ Context f$0;
                public final /* synthetic */ AlertDialog f$1;

                {
                    this.f$0 = r1;
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.lambda$null$200(this.f$0, this.f$1);
                }
            });
            TLRPC$Updates tLRPC$Updates = (TLRPC$Updates) tLObject;
            processUpdates(tLRPC$Updates, false);
            AndroidUtilities.runOnUIThread(new Runnable(tLRPC$Updates) {
                public final /* synthetic */ TLRPC$Updates f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.lambda$null$201(MessagesStorage.IntCallback.this, this.f$1);
                }
            });
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable(intCallback, context, alertDialog, tLRPC$TL_error, baseFragment, tLRPC$TL_messages_migrateChat) {
            public final /* synthetic */ MessagesStorage.IntCallback f$1;
            public final /* synthetic */ Context f$2;
            public final /* synthetic */ AlertDialog f$3;
            public final /* synthetic */ TLRPC$TL_error f$4;
            public final /* synthetic */ BaseFragment f$5;
            public final /* synthetic */ TLRPC$TL_messages_migrateChat f$6;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
            }

            public final void run() {
                MessagesController.this.lambda$null$202$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
            }
        });
    }

    static /* synthetic */ void lambda$null$200(Context context, AlertDialog alertDialog) {
        if (!((Activity) context).isFinishing()) {
            try {
                alertDialog.dismiss();
            } catch (Exception e) {
                FileLog.e((Throwable) e);
            }
        }
    }

    static /* synthetic */ void lambda$null$201(MessagesStorage.IntCallback intCallback, TLRPC$Updates tLRPC$Updates) {
        if (intCallback != null) {
            for (int i = 0; i < tLRPC$Updates.chats.size(); i++) {
                TLRPC$Chat tLRPC$Chat = tLRPC$Updates.chats.get(i);
                if (ChatObject.isChannel(tLRPC$Chat)) {
                    intCallback.run(tLRPC$Chat.id);
                    return;
                }
            }
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$202 */
    public /* synthetic */ void lambda$null$202$MessagesController(MessagesStorage.IntCallback intCallback, Context context, AlertDialog alertDialog, TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_messages_migrateChat tLRPC$TL_messages_migrateChat) {
        if (intCallback != null) {
            intCallback.run(0);
        }
        if (!((Activity) context).isFinishing()) {
            try {
                alertDialog.dismiss();
            } catch (Exception e) {
                FileLog.e((Throwable) e);
            }
            AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_messages_migrateChat, Boolean.FALSE);
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$convertToMegaGroup$204 */
    public /* synthetic */ void lambda$convertToMegaGroup$204$MessagesController(int i, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
    }

    public void addUsersToChannel(int i, ArrayList<TLRPC$InputUser> arrayList, BaseFragment baseFragment) {
        if (arrayList != null && !arrayList.isEmpty()) {
            TLRPC$TL_channels_inviteToChannel tLRPC$TL_channels_inviteToChannel = new TLRPC$TL_channels_inviteToChannel();
            tLRPC$TL_channels_inviteToChannel.channel = getInputChannel(i);
            tLRPC$TL_channels_inviteToChannel.users = arrayList;
            getConnectionsManager().sendRequest(tLRPC$TL_channels_inviteToChannel, new RequestDelegate(baseFragment, tLRPC$TL_channels_inviteToChannel) {
                public final /* synthetic */ BaseFragment f$1;
                public final /* synthetic */ TLRPC$TL_channels_inviteToChannel f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$addUsersToChannel$206$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$addUsersToChannel$206 */
    public /* synthetic */ void lambda$addUsersToChannel$206$MessagesController(BaseFragment baseFragment, TLRPC$TL_channels_inviteToChannel tLRPC$TL_channels_inviteToChannel, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null) {
            AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_error, baseFragment, tLRPC$TL_channels_inviteToChannel) {
                public final /* synthetic */ TLRPC$TL_error f$1;
                public final /* synthetic */ BaseFragment f$2;
                public final /* synthetic */ TLRPC$TL_channels_inviteToChannel f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run() {
                    MessagesController.this.lambda$null$205$MessagesController(this.f$1, this.f$2, this.f$3);
                }
            });
        } else {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$205 */
    public /* synthetic */ void lambda$null$205$MessagesController(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_channels_inviteToChannel tLRPC$TL_channels_inviteToChannel) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_channels_inviteToChannel, Boolean.TRUE);
    }

    public void toogleChannelSignatures(int i, boolean z) {
        TLRPC$TL_channels_toggleSignatures tLRPC$TL_channels_toggleSignatures = new TLRPC$TL_channels_toggleSignatures();
        tLRPC$TL_channels_toggleSignatures.channel = getInputChannel(i);
        tLRPC$TL_channels_toggleSignatures.enabled = z;
        getConnectionsManager().sendRequest(tLRPC$TL_channels_toggleSignatures, new RequestDelegate() {
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$toogleChannelSignatures$208$MessagesController(tLObject, tLRPC$TL_error);
            }
        }, 64);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$toogleChannelSignatures$208 */
    public /* synthetic */ void lambda$toogleChannelSignatures$208$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() {
                public final void run() {
                    MessagesController.this.lambda$null$207$MessagesController();
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$207 */
    public /* synthetic */ void lambda$null$207$MessagesController() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 8192);
    }

    public void toogleChannelInvitesHistory(int i, boolean z) {
        TLRPC$TL_channels_togglePreHistoryHidden tLRPC$TL_channels_togglePreHistoryHidden = new TLRPC$TL_channels_togglePreHistoryHidden();
        tLRPC$TL_channels_togglePreHistoryHidden.channel = getInputChannel(i);
        tLRPC$TL_channels_togglePreHistoryHidden.enabled = z;
        getConnectionsManager().sendRequest(tLRPC$TL_channels_togglePreHistoryHidden, new RequestDelegate() {
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$toogleChannelInvitesHistory$210$MessagesController(tLObject, tLRPC$TL_error);
            }
        }, 64);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$toogleChannelInvitesHistory$210 */
    public /* synthetic */ void lambda$toogleChannelInvitesHistory$210$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() {
                public final void run() {
                    MessagesController.this.lambda$null$209$MessagesController();
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$209 */
    public /* synthetic */ void lambda$null$209$MessagesController() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 8192);
    }

    public void updateChatAbout(int i, String str, TLRPC$ChatFull tLRPC$ChatFull) {
        if (tLRPC$ChatFull != null) {
            TLRPC$TL_messages_editChatAbout tLRPC$TL_messages_editChatAbout = new TLRPC$TL_messages_editChatAbout();
            tLRPC$TL_messages_editChatAbout.peer = getInputPeer(-i);
            tLRPC$TL_messages_editChatAbout.about = str;
            getConnectionsManager().sendRequest(tLRPC$TL_messages_editChatAbout, new RequestDelegate(tLRPC$ChatFull, str) {
                public final /* synthetic */ TLRPC$ChatFull f$1;
                public final /* synthetic */ String f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$updateChatAbout$212$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                }
            }, 64);
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$updateChatAbout$212 */
    public /* synthetic */ void lambda$updateChatAbout$212$MessagesController(TLRPC$ChatFull tLRPC$ChatFull, String str, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject instanceof TLRPC$TL_boolTrue) {
            AndroidUtilities.runOnUIThread(new Runnable(tLRPC$ChatFull, str) {
                public final /* synthetic */ TLRPC$ChatFull f$1;
                public final /* synthetic */ String f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    MessagesController.this.lambda$null$211$MessagesController(this.f$1, this.f$2);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$211 */
    public /* synthetic */ void lambda$null$211$MessagesController(TLRPC$ChatFull tLRPC$ChatFull, String str) {
        tLRPC$ChatFull.about = str;
        getMessagesStorage().updateChatInfo(tLRPC$ChatFull, false);
        getNotificationCenter().postNotificationName(NotificationCenter.chatInfoDidLoad, tLRPC$ChatFull, 0, Boolean.FALSE);
    }

    public void updateChannelUserName(int i, String str) {
        TLRPC$TL_channels_updateUsername tLRPC$TL_channels_updateUsername = new TLRPC$TL_channels_updateUsername();
        tLRPC$TL_channels_updateUsername.channel = getInputChannel(i);
        tLRPC$TL_channels_updateUsername.username = str;
        getConnectionsManager().sendRequest(tLRPC$TL_channels_updateUsername, new RequestDelegate(i, str) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ String f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$updateChannelUserName$214$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
            }
        }, 64);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$updateChannelUserName$214 */
    public /* synthetic */ void lambda$updateChannelUserName$214$MessagesController(int i, String str, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject instanceof TLRPC$TL_boolTrue) {
            AndroidUtilities.runOnUIThread(new Runnable(i, str) {
                public final /* synthetic */ int f$1;
                public final /* synthetic */ String f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    MessagesController.this.lambda$null$213$MessagesController(this.f$1, this.f$2);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$213 */
    public /* synthetic */ void lambda$null$213$MessagesController(int i, String str) {
        TLRPC$Chat chat = getChat(Integer.valueOf(i));
        if (str.length() != 0) {
            chat.flags |= 64;
        } else {
            chat.flags &= -65;
        }
        chat.username = str;
        ArrayList arrayList = new ArrayList();
        arrayList.add(chat);
        getMessagesStorage().putUsersAndChats((ArrayList<TLRPC$User>) null, arrayList, true, true);
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 8192);
    }

    public void sendBotStart(TLRPC$User tLRPC$User, String str) {
        if (tLRPC$User != null) {
            TLRPC$TL_messages_startBot tLRPC$TL_messages_startBot = new TLRPC$TL_messages_startBot();
            tLRPC$TL_messages_startBot.bot = getInputUser(tLRPC$User);
            tLRPC$TL_messages_startBot.peer = getInputPeer(tLRPC$User.id);
            tLRPC$TL_messages_startBot.start_param = str;
            tLRPC$TL_messages_startBot.random_id = Utilities.random.nextLong();
            getConnectionsManager().sendRequest(tLRPC$TL_messages_startBot, new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$sendBotStart$215$MessagesController(tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$sendBotStart$215 */
    public /* synthetic */ void lambda$sendBotStart$215$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
    }

    public boolean isJoiningChannel(int i) {
        return this.joiningToChannels.contains(Integer.valueOf(i));
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v1, resolved type: org.telegram.tgnet.TLRPC$TL_messages_addChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v5, resolved type: org.telegram.tgnet.TLRPC$TL_channels_inviteToChannel} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v8, resolved type: org.telegram.tgnet.TLRPC$TL_channels_joinChannel} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v9, resolved type: org.telegram.tgnet.TLRPC$TL_messages_startBot} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v10, resolved type: org.telegram.tgnet.TLRPC$TL_messages_addChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v11, resolved type: org.telegram.tgnet.TLRPC$TL_messages_addChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v12, resolved type: org.telegram.tgnet.TLRPC$TL_messages_addChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v13, resolved type: org.telegram.tgnet.TLRPC$TL_messages_addChatUser} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void addUserToChat(int r14, org.telegram.tgnet.TLRPC$User r15, int r16, java.lang.String r17, org.telegram.ui.ActionBar.BaseFragment r18, java.lang.Runnable r19) {
        /*
            r13 = this;
            r9 = r13
            r4 = r14
            r0 = r15
            r1 = r17
            if (r0 != 0) goto L_0x0008
            return
        L_0x0008:
            int r2 = r9.currentAccount
            boolean r2 = org.telegram.messenger.ChatObject.isChannel(r14, r2)
            if (r2 == 0) goto L_0x001f
            java.lang.Integer r3 = java.lang.Integer.valueOf(r14)
            org.telegram.tgnet.TLRPC$Chat r3 = r13.getChat(r3)
            boolean r3 = r3.megagroup
            if (r3 == 0) goto L_0x001f
            r3 = 1
            r7 = 1
            goto L_0x0021
        L_0x001f:
            r3 = 0
            r7 = 0
        L_0x0021:
            org.telegram.tgnet.TLRPC$InputUser r3 = r13.getInputUser((org.telegram.tgnet.TLRPC$User) r15)
            if (r1 == 0) goto L_0x0051
            if (r2 == 0) goto L_0x002c
            if (r7 != 0) goto L_0x002c
            goto L_0x0051
        L_0x002c:
            org.telegram.tgnet.TLRPC$TL_messages_startBot r0 = new org.telegram.tgnet.TLRPC$TL_messages_startBot
            r0.<init>()
            r0.bot = r3
            if (r2 == 0) goto L_0x003d
            int r5 = -r4
            org.telegram.tgnet.TLRPC$InputPeer r5 = r13.getInputPeer((int) r5)
            r0.peer = r5
            goto L_0x0046
        L_0x003d:
            org.telegram.tgnet.TLRPC$TL_inputPeerChat r5 = new org.telegram.tgnet.TLRPC$TL_inputPeerChat
            r5.<init>()
            r0.peer = r5
            r5.chat_id = r4
        L_0x0046:
            r0.start_param = r1
            java.security.SecureRandom r1 = org.telegram.messenger.Utilities.random
            long r5 = r1.nextLong()
            r0.random_id = r5
            goto L_0x0097
        L_0x0051:
            if (r2 == 0) goto L_0x008a
            boolean r0 = r3 instanceof org.telegram.tgnet.TLRPC$TL_inputUserSelf
            if (r0 == 0) goto L_0x0079
            java.util.ArrayList<java.lang.Integer> r0 = r9.joiningToChannels
            java.lang.Integer r1 = java.lang.Integer.valueOf(r14)
            boolean r0 = r0.contains(r1)
            if (r0 == 0) goto L_0x0064
            return
        L_0x0064:
            org.telegram.tgnet.TLRPC$TL_channels_joinChannel r0 = new org.telegram.tgnet.TLRPC$TL_channels_joinChannel
            r0.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r1 = r13.getInputChannel((int) r14)
            r0.channel = r1
            java.util.ArrayList<java.lang.Integer> r1 = r9.joiningToChannels
            java.lang.Integer r5 = java.lang.Integer.valueOf(r14)
            r1.add(r5)
            goto L_0x0097
        L_0x0079:
            org.telegram.tgnet.TLRPC$TL_channels_inviteToChannel r0 = new org.telegram.tgnet.TLRPC$TL_channels_inviteToChannel
            r0.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r1 = r13.getInputChannel((int) r14)
            r0.channel = r1
            java.util.ArrayList<org.telegram.tgnet.TLRPC$InputUser> r1 = r0.users
            r1.add(r3)
            goto L_0x0097
        L_0x008a:
            org.telegram.tgnet.TLRPC$TL_messages_addChatUser r0 = new org.telegram.tgnet.TLRPC$TL_messages_addChatUser
            r0.<init>()
            r0.chat_id = r4
            r1 = r16
            r0.fwd_limit = r1
            r0.user_id = r3
        L_0x0097:
            r10 = r0
            org.telegram.tgnet.ConnectionsManager r11 = r13.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$ve_RSkSYPUlca6AraWuKqO_KAIQ r12 = new org.telegram.messenger.-$$Lambda$MessagesController$ve_RSkSYPUlca6AraWuKqO_KAIQ
            r0 = r12
            r1 = r13
            r4 = r14
            r5 = r18
            r6 = r10
            r8 = r19
            r0.<init>(r2, r3, r4, r5, r6, r7, r8)
            r11.sendRequest(r10, r12)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.addUserToChat(int, org.telegram.tgnet.TLRPC$User, int, java.lang.String, org.telegram.ui.ActionBar.BaseFragment, java.lang.Runnable):void");
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$addUserToChat$219 */
    public /* synthetic */ void lambda$addUserToChat$219$MessagesController(boolean z, TLRPC$InputUser tLRPC$InputUser, int i, BaseFragment baseFragment, TLObject tLObject, boolean z2, Runnable runnable, TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error) {
        boolean z3;
        TLRPC$InputUser tLRPC$InputUser2 = tLRPC$InputUser;
        int i2 = i;
        if (z && (tLRPC$InputUser2 instanceof TLRPC$TL_inputUserSelf)) {
            AndroidUtilities.runOnUIThread(new Runnable(i) {
                public final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$216$MessagesController(this.f$1);
                }
            });
        }
        if (tLRPC$TL_error != null) {
            AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_error, baseFragment, tLObject, z, z2, tLRPC$InputUser) {
                public final /* synthetic */ TLRPC$TL_error f$1;
                public final /* synthetic */ BaseFragment f$2;
                public final /* synthetic */ TLObject f$3;
                public final /* synthetic */ boolean f$4;
                public final /* synthetic */ boolean f$5;
                public final /* synthetic */ TLRPC$InputUser f$6;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r5;
                    this.f$5 = r6;
                    this.f$6 = r7;
                }

                public final void run() {
                    MessagesController.this.lambda$null$217$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
                }
            });
            return;
        }
        TLRPC$Updates tLRPC$Updates = (TLRPC$Updates) tLObject2;
        int i3 = 0;
        while (true) {
            if (i3 >= tLRPC$Updates.updates.size()) {
                z3 = false;
                break;
            }
            TLRPC$Update tLRPC$Update = tLRPC$Updates.updates.get(i3);
            if ((tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) && (((TLRPC$TL_updateNewChannelMessage) tLRPC$Update).message.action instanceof TLRPC$TL_messageActionChatAddUser)) {
                z3 = true;
                break;
            }
            i3++;
        }
        processUpdates(tLRPC$Updates, false);
        if (z) {
            if (!z3 && (tLRPC$InputUser2 instanceof TLRPC$TL_inputUserSelf)) {
                generateJoinMessage(i, true);
            }
            AndroidUtilities.runOnUIThread(new Runnable(i) {
                public final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$218$MessagesController(this.f$1);
                }
            }, 1000);
        }
        if (z && (tLRPC$InputUser2 instanceof TLRPC$TL_inputUserSelf)) {
            getMessagesStorage().updateDialogsWithDeletedMessages(new ArrayList(), (ArrayList<Long>) null, true, i);
        }
        if (runnable != null) {
            AndroidUtilities.runOnUIThread(runnable);
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$216 */
    public /* synthetic */ void lambda$null$216$MessagesController(int i) {
        this.joiningToChannels.remove(Integer.valueOf(i));
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$217 */
    public /* synthetic */ void lambda$null$217$MessagesController(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLObject tLObject, boolean z, boolean z2, TLRPC$InputUser tLRPC$InputUser) {
        int i = this.currentAccount;
        Object[] objArr = new Object[1];
        objArr[0] = Boolean.valueOf(z && !z2);
        AlertsCreator.processError(i, tLRPC$TL_error, baseFragment, tLObject, objArr);
        if (z && (tLRPC$InputUser instanceof TLRPC$TL_inputUserSelf)) {
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 8192);
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$218 */
    public /* synthetic */ void lambda$null$218$MessagesController(int i) {
        loadFullChat(i, 0, true);
    }

    public void deleteUserFromChat(int i, TLRPC$User tLRPC$User, TLRPC$ChatFull tLRPC$ChatFull) {
        deleteUserFromChat(i, tLRPC$User, tLRPC$ChatFull, false, false);
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v17, resolved type: org.telegram.tgnet.TLRPC$TL_messages_deleteChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v19, resolved type: org.telegram.tgnet.TLRPC$TL_channels_editBanned} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v20, resolved type: org.telegram.tgnet.TLRPC$TL_channels_leaveChannel} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v21, resolved type: org.telegram.tgnet.TLRPC$TL_channels_deleteChannel} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v22, resolved type: org.telegram.tgnet.TLRPC$TL_messages_deleteChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v23, resolved type: org.telegram.tgnet.TLRPC$TL_messages_deleteChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v24, resolved type: org.telegram.tgnet.TLRPC$TL_messages_deleteChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v25, resolved type: org.telegram.tgnet.TLRPC$TL_messages_deleteChatUser} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void deleteUserFromChat(int r6, org.telegram.tgnet.TLRPC$User r7, org.telegram.tgnet.TLRPC$ChatFull r8, boolean r9, boolean r10) {
        /*
            r5 = this;
            if (r7 != 0) goto L_0x0003
            return
        L_0x0003:
            r0 = 0
            r1 = 1
            if (r6 <= 0) goto L_0x0096
            org.telegram.tgnet.TLRPC$InputUser r8 = r5.getInputUser((org.telegram.tgnet.TLRPC$User) r7)
            java.lang.Integer r2 = java.lang.Integer.valueOf(r6)
            org.telegram.tgnet.TLRPC$Chat r2 = r5.getChat(r2)
            boolean r3 = org.telegram.messenger.ChatObject.isChannel(r2)
            if (r3 == 0) goto L_0x0068
            boolean r4 = r8 instanceof org.telegram.tgnet.TLRPC$TL_inputUserSelf
            if (r4 == 0) goto L_0x003b
            boolean r1 = r2.creator
            if (r1 == 0) goto L_0x002f
            if (r9 == 0) goto L_0x002f
            org.telegram.tgnet.TLRPC$TL_channels_deleteChannel r9 = new org.telegram.tgnet.TLRPC$TL_channels_deleteChannel
            r9.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r1 = getInputChannel((org.telegram.tgnet.TLRPC$Chat) r2)
            r9.channel = r1
            goto L_0x0075
        L_0x002f:
            org.telegram.tgnet.TLRPC$TL_channels_leaveChannel r9 = new org.telegram.tgnet.TLRPC$TL_channels_leaveChannel
            r9.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r1 = getInputChannel((org.telegram.tgnet.TLRPC$Chat) r2)
            r9.channel = r1
            goto L_0x0075
        L_0x003b:
            org.telegram.tgnet.TLRPC$TL_channels_editBanned r9 = new org.telegram.tgnet.TLRPC$TL_channels_editBanned
            r9.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r2 = getInputChannel((org.telegram.tgnet.TLRPC$Chat) r2)
            r9.channel = r2
            r9.user_id = r8
            org.telegram.tgnet.TLRPC$TL_chatBannedRights r2 = new org.telegram.tgnet.TLRPC$TL_chatBannedRights
            r2.<init>()
            r9.banned_rights = r2
            r2.view_messages = r1
            r2.send_media = r1
            r2.send_messages = r1
            r2.send_stickers = r1
            r2.send_gifs = r1
            r2.send_games = r1
            r2.send_inline = r1
            r2.embed_links = r1
            r2.pin_messages = r1
            r2.send_polls = r1
            r2.invite_users = r1
            r2.change_info = r1
            goto L_0x0075
        L_0x0068:
            org.telegram.tgnet.TLRPC$TL_messages_deleteChatUser r9 = new org.telegram.tgnet.TLRPC$TL_messages_deleteChatUser
            r9.<init>()
            r9.chat_id = r6
            org.telegram.tgnet.TLRPC$InputUser r1 = r5.getInputUser((org.telegram.tgnet.TLRPC$User) r7)
            r9.user_id = r1
        L_0x0075:
            int r7 = r7.id
            org.telegram.messenger.UserConfig r1 = r5.getUserConfig()
            int r1 = r1.getClientUserId()
            if (r7 != r1) goto L_0x0086
            int r7 = -r6
            long r1 = (long) r7
            r5.deleteDialog(r1, r0, r10)
        L_0x0086:
            org.telegram.tgnet.ConnectionsManager r7 = r5.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$OSIpyp5y1F8doOwrBHHg3h9RW3s r10 = new org.telegram.messenger.-$$Lambda$MessagesController$OSIpyp5y1F8doOwrBHHg3h9RW3s
            r10.<init>(r3, r8, r6)
            r6 = 64
            r7.sendRequest(r9, r10, r6)
            goto L_0x0114
        L_0x0096:
            boolean r9 = r8 instanceof org.telegram.tgnet.TLRPC$TL_chatFull
            if (r9 == 0) goto L_0x0114
            java.lang.Integer r6 = java.lang.Integer.valueOf(r6)
            org.telegram.tgnet.TLRPC$Chat r6 = r5.getChat(r6)
            int r9 = r6.participants_count
            int r9 = r9 - r1
            r6.participants_count = r9
            java.util.ArrayList r9 = new java.util.ArrayList
            r9.<init>()
            r9.add(r6)
            org.telegram.messenger.MessagesStorage r6 = r5.getMessagesStorage()
            r10 = 0
            r6.putUsersAndChats(r10, r9, r1, r1)
            r6 = 0
        L_0x00b8:
            org.telegram.tgnet.TLRPC$ChatParticipants r9 = r8.participants
            java.util.ArrayList<org.telegram.tgnet.TLRPC$ChatParticipant> r9 = r9.participants
            int r9 = r9.size()
            if (r6 >= r9) goto L_0x00de
            org.telegram.tgnet.TLRPC$ChatParticipants r9 = r8.participants
            java.util.ArrayList<org.telegram.tgnet.TLRPC$ChatParticipant> r9 = r9.participants
            java.lang.Object r9 = r9.get(r6)
            org.telegram.tgnet.TLRPC$ChatParticipant r9 = (org.telegram.tgnet.TLRPC$ChatParticipant) r9
            int r9 = r9.user_id
            int r10 = r7.id
            if (r9 != r10) goto L_0x00db
            org.telegram.tgnet.TLRPC$ChatParticipants r7 = r8.participants
            java.util.ArrayList<org.telegram.tgnet.TLRPC$ChatParticipant> r7 = r7.participants
            r7.remove(r6)
            r6 = 1
            goto L_0x00df
        L_0x00db:
            int r6 = r6 + 1
            goto L_0x00b8
        L_0x00de:
            r6 = 0
        L_0x00df:
            if (r6 == 0) goto L_0x0101
            org.telegram.messenger.MessagesStorage r6 = r5.getMessagesStorage()
            r6.updateChatInfo(r8, r1)
            org.telegram.messenger.NotificationCenter r6 = r5.getNotificationCenter()
            int r7 = org.telegram.messenger.NotificationCenter.chatInfoDidLoad
            r9 = 3
            java.lang.Object[] r9 = new java.lang.Object[r9]
            r9[r0] = r8
            java.lang.Integer r8 = java.lang.Integer.valueOf(r0)
            r9[r1] = r8
            r8 = 2
            java.lang.Boolean r10 = java.lang.Boolean.FALSE
            r9[r8] = r10
            r6.postNotificationName(r7, r9)
        L_0x0101:
            org.telegram.messenger.NotificationCenter r6 = r5.getNotificationCenter()
            int r7 = org.telegram.messenger.NotificationCenter.updateInterfaces
            java.lang.Object[] r8 = new java.lang.Object[r1]
            r9 = 32
            java.lang.Integer r9 = java.lang.Integer.valueOf(r9)
            r8[r0] = r9
            r6.postNotificationName(r7, r8)
        L_0x0114:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.deleteUserFromChat(int, org.telegram.tgnet.TLRPC$User, org.telegram.tgnet.TLRPC$ChatFull, boolean, boolean):void");
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$deleteUserFromChat$221 */
    public /* synthetic */ void lambda$deleteUserFromChat$221$MessagesController(boolean z, TLRPC$InputUser tLRPC$InputUser, int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            if (z && !(tLRPC$InputUser instanceof TLRPC$TL_inputUserSelf)) {
                AndroidUtilities.runOnUIThread(new Runnable(i) {
                    public final /* synthetic */ int f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run() {
                        MessagesController.this.lambda$null$220$MessagesController(this.f$1);
                    }
                }, 1000);
            }
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$220 */
    public /* synthetic */ void lambda$null$220$MessagesController(int i) {
        loadFullChat(i, 0, true);
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v4, resolved type: org.telegram.tgnet.TLRPC$TL_messages_editChatTitle} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v6, resolved type: org.telegram.tgnet.TLRPC$TL_channels_editTitle} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v7, resolved type: org.telegram.tgnet.TLRPC$TL_messages_editChatTitle} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v8, resolved type: org.telegram.tgnet.TLRPC$TL_messages_editChatTitle} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void changeChatTitle(int r4, java.lang.String r5) {
        /*
            r3 = this;
            if (r4 <= 0) goto L_0x0030
            int r0 = r3.currentAccount
            boolean r0 = org.telegram.messenger.ChatObject.isChannel(r4, r0)
            if (r0 == 0) goto L_0x0018
            org.telegram.tgnet.TLRPC$TL_channels_editTitle r0 = new org.telegram.tgnet.TLRPC$TL_channels_editTitle
            r0.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r4 = r3.getInputChannel((int) r4)
            r0.channel = r4
            r0.title = r5
            goto L_0x0021
        L_0x0018:
            org.telegram.tgnet.TLRPC$TL_messages_editChatTitle r0 = new org.telegram.tgnet.TLRPC$TL_messages_editChatTitle
            r0.<init>()
            r0.chat_id = r4
            r0.title = r5
        L_0x0021:
            org.telegram.tgnet.ConnectionsManager r4 = r3.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$Xr5EOcLn-U0mOOFelwowv1vIL5o r5 = new org.telegram.messenger.-$$Lambda$MessagesController$Xr5EOcLn-U0mOOFelwowv1vIL5o
            r5.<init>()
            r1 = 64
            r4.sendRequest(r0, r5, r1)
            goto L_0x006a
        L_0x0030:
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)
            org.telegram.tgnet.TLRPC$Chat r4 = r3.getChat(r4)
            r4.title = r5
            java.util.ArrayList r5 = new java.util.ArrayList
            r5.<init>()
            r5.add(r4)
            org.telegram.messenger.MessagesStorage r4 = r3.getMessagesStorage()
            r0 = 0
            r1 = 1
            r4.putUsersAndChats(r0, r5, r1, r1)
            org.telegram.messenger.NotificationCenter r4 = r3.getNotificationCenter()
            int r5 = org.telegram.messenger.NotificationCenter.dialogsNeedReload
            r0 = 0
            java.lang.Object[] r2 = new java.lang.Object[r0]
            r4.postNotificationName(r5, r2)
            org.telegram.messenger.NotificationCenter r4 = r3.getNotificationCenter()
            int r5 = org.telegram.messenger.NotificationCenter.updateInterfaces
            java.lang.Object[] r1 = new java.lang.Object[r1]
            r2 = 16
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)
            r1[r0] = r2
            r4.postNotificationName(r5, r1)
        L_0x006a:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.changeChatTitle(int, java.lang.String):void");
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$changeChatTitle$222 */
    public /* synthetic */ void lambda$changeChatTitle$222$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v3, resolved type: org.telegram.tgnet.TLRPC$TL_messages_editChatPhoto} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v5, resolved type: org.telegram.tgnet.TLRPC$TL_channels_editPhoto} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v6, resolved type: org.telegram.tgnet.TLRPC$TL_messages_editChatPhoto} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v7, resolved type: org.telegram.tgnet.TLRPC$TL_messages_editChatPhoto} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void changeChatAvatar(int r7, org.telegram.tgnet.TLRPC$TL_inputChatPhoto r8, org.telegram.tgnet.TLRPC$InputFile r9, org.telegram.tgnet.TLRPC$InputFile r10, double r11, java.lang.String r13, org.telegram.tgnet.TLRPC$FileLocation r14, org.telegram.tgnet.TLRPC$FileLocation r15) {
        /*
            r6 = this;
            if (r8 == 0) goto L_0x0004
            r9 = r8
            goto L_0x002f
        L_0x0004:
            if (r9 != 0) goto L_0x000f
            if (r10 == 0) goto L_0x0009
            goto L_0x000f
        L_0x0009:
            org.telegram.tgnet.TLRPC$TL_inputChatPhotoEmpty r9 = new org.telegram.tgnet.TLRPC$TL_inputChatPhotoEmpty
            r9.<init>()
            goto L_0x002f
        L_0x000f:
            org.telegram.tgnet.TLRPC$TL_inputChatUploadedPhoto r0 = new org.telegram.tgnet.TLRPC$TL_inputChatUploadedPhoto
            r0.<init>()
            if (r9 == 0) goto L_0x001e
            r0.file = r9
            int r9 = r0.flags
            r9 = r9 | 1
            r0.flags = r9
        L_0x001e:
            if (r10 == 0) goto L_0x002e
            r0.video = r10
            int r9 = r0.flags
            r9 = r9 | 2
            r0.flags = r9
            r0.video_start_ts = r11
            r9 = r9 | 4
            r0.flags = r9
        L_0x002e:
            r9 = r0
        L_0x002f:
            int r10 = r6.currentAccount
            boolean r10 = org.telegram.messenger.ChatObject.isChannel(r7, r10)
            if (r10 == 0) goto L_0x0045
            org.telegram.tgnet.TLRPC$TL_channels_editPhoto r10 = new org.telegram.tgnet.TLRPC$TL_channels_editPhoto
            r10.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r7 = r6.getInputChannel((int) r7)
            r10.channel = r7
            r10.photo = r9
            goto L_0x004e
        L_0x0045:
            org.telegram.tgnet.TLRPC$TL_messages_editChatPhoto r10 = new org.telegram.tgnet.TLRPC$TL_messages_editChatPhoto
            r10.<init>()
            r10.chat_id = r7
            r10.photo = r9
        L_0x004e:
            org.telegram.tgnet.ConnectionsManager r7 = r6.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$1ConGrlloUVPNgqvPzQBfoOCaA4 r9 = new org.telegram.messenger.-$$Lambda$MessagesController$1ConGrlloUVPNgqvPzQBfoOCaA4
            r0 = r9
            r1 = r6
            r2 = r8
            r3 = r14
            r4 = r15
            r5 = r13
            r0.<init>(r2, r3, r4, r5)
            r8 = 64
            r7.sendRequest(r10, r9, r8)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.changeChatAvatar(int, org.telegram.tgnet.TLRPC$TL_inputChatPhoto, org.telegram.tgnet.TLRPC$InputFile, org.telegram.tgnet.TLRPC$InputFile, double, java.lang.String, org.telegram.tgnet.TLRPC$FileLocation, org.telegram.tgnet.TLRPC$FileLocation):void");
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$changeChatAvatar$224 */
    public /* synthetic */ void lambda$changeChatAvatar$224$MessagesController(TLRPC$TL_inputChatPhoto tLRPC$TL_inputChatPhoto, TLRPC$FileLocation tLRPC$FileLocation, TLRPC$FileLocation tLRPC$FileLocation2, String str, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        TLRPC$VideoSize tLRPC$VideoSize;
        TLRPC$Photo tLRPC$Photo;
        if (tLRPC$TL_error == null) {
            TLRPC$Updates tLRPC$Updates = (TLRPC$Updates) tLObject;
            if (tLRPC$TL_inputChatPhoto == null) {
                int size = tLRPC$Updates.updates.size();
                int i = 0;
                while (true) {
                    tLRPC$VideoSize = null;
                    if (i >= size) {
                        tLRPC$Photo = null;
                        break;
                    }
                    TLRPC$Update tLRPC$Update = tLRPC$Updates.updates.get(i);
                    if (tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) {
                        TLRPC$MessageAction tLRPC$MessageAction = ((TLRPC$TL_updateNewChannelMessage) tLRPC$Update).message.action;
                        if (tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatEditPhoto) {
                            tLRPC$Photo = tLRPC$MessageAction.photo;
                            if (tLRPC$Photo instanceof TLRPC$TL_photo) {
                                break;
                            }
                        } else {
                            continue;
                        }
                    } else if (tLRPC$Update instanceof TLRPC$TL_updateNewMessage) {
                        TLRPC$MessageAction tLRPC$MessageAction2 = ((TLRPC$TL_updateNewMessage) tLRPC$Update).message.action;
                        if (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChatEditPhoto) {
                            tLRPC$Photo = tLRPC$MessageAction2.photo;
                            if (tLRPC$Photo instanceof TLRPC$TL_photo) {
                                break;
                            }
                        } else {
                            continue;
                        }
                    } else {
                        continue;
                    }
                    i++;
                }
                if (tLRPC$Photo != null) {
                    TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo.sizes, 150);
                    if (!tLRPC$Photo.video_sizes.isEmpty()) {
                        tLRPC$VideoSize = tLRPC$Photo.video_sizes.get(0);
                    }
                    if (!(closestPhotoSizeWithSize == null || tLRPC$FileLocation == null)) {
                        FileLoader.getPathToAttach(tLRPC$FileLocation, true).renameTo(FileLoader.getPathToAttach(closestPhotoSizeWithSize, true));
                        ImageLoader.getInstance().replaceImageInCache(tLRPC$FileLocation.volume_id + "_" + tLRPC$FileLocation.local_id + "@50_50", closestPhotoSizeWithSize.location.volume_id + "_" + closestPhotoSizeWithSize.location.local_id + "@50_50", ImageLocation.getForPhoto(closestPhotoSizeWithSize, tLRPC$Photo), true);
                    }
                    TLRPC$PhotoSize closestPhotoSizeWithSize2 = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo.sizes, 800);
                    if (!(closestPhotoSizeWithSize2 == null || tLRPC$FileLocation2 == null)) {
                        FileLoader.getPathToAttach(tLRPC$FileLocation2, true).renameTo(FileLoader.getPathToAttach(closestPhotoSizeWithSize2, true));
                    }
                    if (!(tLRPC$VideoSize == null || str == null)) {
                        new File(str).renameTo(FileLoader.getPathToAttach(tLRPC$VideoSize, "mp4", true));
                    }
                }
            }
            processUpdates(tLRPC$Updates, false);
            AndroidUtilities.runOnUIThread(new Runnable() {
                public final void run() {
                    MessagesController.this.lambda$null$223$MessagesController();
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$223 */
    public /* synthetic */ void lambda$null$223$MessagesController() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 2);
    }

    public void unregistedPush() {
        if (getUserConfig().registeredForPush && SharedConfig.pushString.length() == 0) {
            TLRPC$TL_account_unregisterDevice tLRPC$TL_account_unregisterDevice = new TLRPC$TL_account_unregisterDevice();
            tLRPC$TL_account_unregisterDevice.token = SharedConfig.pushString;
            tLRPC$TL_account_unregisterDevice.token_type = 2;
            for (int i = 0; i < 3; i++) {
                UserConfig instance = UserConfig.getInstance(i);
                if (i != this.currentAccount && instance.isClientActivated()) {
                    tLRPC$TL_account_unregisterDevice.other_uids.add(Integer.valueOf(instance.getClientUserId()));
                }
            }
            getConnectionsManager().sendRequest(tLRPC$TL_account_unregisterDevice, $$Lambda$MessagesController$ODz_jV3aD_XGfZzxQsH4uTinsI.INSTANCE);
        }
    }

    public void performLogout(int i) {
        boolean z = true;
        if (i == 1) {
            unregistedPush();
            getConnectionsManager().sendRequest(new TLRPC$TL_auth_logOut(), new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$performLogout$226$MessagesController(tLObject, tLRPC$TL_error);
                }
            });
        } else {
            ConnectionsManager connectionsManager = getConnectionsManager();
            if (i != 2) {
                z = false;
            }
            connectionsManager.cleanup(z);
        }
        getUserConfig().clearConfig();
        getNotificationCenter().postNotificationName(NotificationCenter.appDidLogout, new Object[0]);
        getMessagesStorage().cleanup(false);
        cleanup();
        getContactsController().deleteUnknownAppAccounts();
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$performLogout$226 */
    public /* synthetic */ void lambda$performLogout$226$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        getConnectionsManager().cleanup(false);
    }

    public void generateUpdateMessage() {
        String str;
        if (!this.gettingAppChangelog && !BuildVars.DEBUG_VERSION && (str = SharedConfig.lastUpdateVersion) != null && !str.equals(BuildVars.BUILD_VERSION_STRING)) {
            this.gettingAppChangelog = true;
            TLRPC$TL_help_getAppChangelog tLRPC$TL_help_getAppChangelog = new TLRPC$TL_help_getAppChangelog();
            tLRPC$TL_help_getAppChangelog.prev_app_version = SharedConfig.lastUpdateVersion;
            getConnectionsManager().sendRequest(tLRPC$TL_help_getAppChangelog, new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$generateUpdateMessage$227$MessagesController(tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$generateUpdateMessage$227 */
    public /* synthetic */ void lambda$generateUpdateMessage$227$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            SharedConfig.lastUpdateVersion = BuildVars.BUILD_VERSION_STRING;
            SharedConfig.saveConfig();
        }
        if (tLObject instanceof TLRPC$Updates) {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
    }

    public void registerForPush(String str) {
        if (!TextUtils.isEmpty(str) && !this.registeringForPush && getUserConfig().getClientUserId() != 0) {
            if (!getUserConfig().registeredForPush || !str.equals(SharedConfig.pushString)) {
                this.registeringForPush = true;
                this.lastPushRegisterSendTime = SystemClock.elapsedRealtime();
                if (SharedConfig.pushAuthKey == null) {
                    SharedConfig.pushAuthKey = new byte[256];
                    Utilities.random.nextBytes(SharedConfig.pushAuthKey);
                    SharedConfig.saveConfig();
                }
                TLRPC$TL_account_registerDevice tLRPC$TL_account_registerDevice = new TLRPC$TL_account_registerDevice();
                tLRPC$TL_account_registerDevice.token_type = 2;
                tLRPC$TL_account_registerDevice.token = str;
                tLRPC$TL_account_registerDevice.no_muted = false;
                tLRPC$TL_account_registerDevice.secret = SharedConfig.pushAuthKey;
                for (int i = 0; i < 3; i++) {
                    UserConfig instance = UserConfig.getInstance(i);
                    if (i != this.currentAccount && instance.isClientActivated()) {
                        int clientUserId = instance.getClientUserId();
                        tLRPC$TL_account_registerDevice.other_uids.add(Integer.valueOf(clientUserId));
                        if (BuildVars.LOGS_ENABLED) {
                            FileLog.d("add other uid = " + clientUserId + " for account " + this.currentAccount);
                        }
                    }
                }
                getConnectionsManager().sendRequest(tLRPC$TL_account_registerDevice, new RequestDelegate(str) {
                    public final /* synthetic */ String f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$registerForPush$229$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                    }
                });
            }
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$registerForPush$229 */
    public /* synthetic */ void lambda$registerForPush$229$MessagesController(String str, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject instanceof TLRPC$TL_boolTrue) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("account " + this.currentAccount + " registered for push");
            }
            getUserConfig().registeredForPush = true;
            SharedConfig.pushString = str;
            getUserConfig().saveConfig(false);
        }
        AndroidUtilities.runOnUIThread(new Runnable() {
            public final void run() {
                MessagesController.this.lambda$null$228$MessagesController();
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$228 */
    public /* synthetic */ void lambda$null$228$MessagesController() {
        this.registeringForPush = false;
    }

    public void loadCurrentState() {
        if (!this.updatingState) {
            this.updatingState = true;
            getConnectionsManager().sendRequest(new TLRPC$TL_updates_getState(), new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$loadCurrentState$230$MessagesController(tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$loadCurrentState$230 */
    public /* synthetic */ void lambda$loadCurrentState$230$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        this.updatingState = false;
        if (tLRPC$TL_error == null) {
            TLRPC$TL_updates_state tLRPC$TL_updates_state = (TLRPC$TL_updates_state) tLObject;
            getMessagesStorage().setLastDateValue(tLRPC$TL_updates_state.date);
            getMessagesStorage().setLastPtsValue(tLRPC$TL_updates_state.pts);
            getMessagesStorage().setLastSeqValue(tLRPC$TL_updates_state.seq);
            getMessagesStorage().setLastQtsValue(tLRPC$TL_updates_state.qts);
            for (int i = 0; i < 3; i++) {
                processUpdatesQueue(i, 2);
            }
            getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
        } else if (tLRPC$TL_error.code != 401) {
            loadCurrentState();
        }
    }

    private int getUpdateSeq(TLRPC$Updates tLRPC$Updates) {
        if (tLRPC$Updates instanceof TLRPC$TL_updatesCombined) {
            return tLRPC$Updates.seq_start;
        }
        return tLRPC$Updates.seq;
    }

    private void setUpdatesStartTime(int i, long j) {
        if (i == 0) {
            this.updatesStartWaitTimeSeq = j;
        } else if (i == 1) {
            this.updatesStartWaitTimePts = j;
        } else if (i == 2) {
            this.updatesStartWaitTimeQts = j;
        }
    }

    public long getUpdatesStartTime(int i) {
        if (i == 0) {
            return this.updatesStartWaitTimeSeq;
        }
        if (i == 1) {
            return this.updatesStartWaitTimePts;
        }
        if (i == 2) {
            return this.updatesStartWaitTimeQts;
        }
        return 0;
    }

    private int isValidUpdate(TLRPC$Updates tLRPC$Updates, int i) {
        if (i == 0) {
            int updateSeq = getUpdateSeq(tLRPC$Updates);
            if (getMessagesStorage().getLastSeqValue() + 1 == updateSeq || getMessagesStorage().getLastSeqValue() == updateSeq) {
                return 0;
            }
            return getMessagesStorage().getLastSeqValue() < updateSeq ? 1 : 2;
        } else if (i == 1) {
            if (tLRPC$Updates.pts <= getMessagesStorage().getLastPtsValue()) {
                return 2;
            }
            return getMessagesStorage().getLastPtsValue() + tLRPC$Updates.pts_count == tLRPC$Updates.pts ? 0 : 1;
        } else if (i != 2) {
            return 0;
        } else {
            if (tLRPC$Updates.pts <= getMessagesStorage().getLastQtsValue()) {
                return 2;
            }
            return getMessagesStorage().getLastQtsValue() + tLRPC$Updates.updates.size() == tLRPC$Updates.pts ? 0 : 1;
        }
    }

    private void processChannelsUpdatesQueue(int i, int i2) {
        char c;
        ArrayList arrayList = this.updatesQueueChannels.get(i);
        if (arrayList != null) {
            int i3 = this.channelsPts.get(i);
            if (arrayList.isEmpty() || i3 == 0) {
                this.updatesQueueChannels.remove(i);
                return;
            }
            Collections.sort(arrayList, $$Lambda$MessagesController$yjMqBHIqZjujMIHbWjCAFzT1m0Y.INSTANCE);
            if (i2 == 2) {
                this.channelsPts.put(i, ((TLRPC$Updates) arrayList.get(0)).pts);
            }
            boolean z = false;
            while (arrayList.size() > 0) {
                TLRPC$Updates tLRPC$Updates = (TLRPC$Updates) arrayList.get(0);
                int i4 = tLRPC$Updates.pts;
                if (i4 <= i3) {
                    c = 2;
                } else {
                    c = tLRPC$Updates.pts_count + i3 == i4 ? (char) 0 : 1;
                }
                if (c == 0) {
                    processUpdates(tLRPC$Updates, true);
                    arrayList.remove(0);
                    z = true;
                } else if (c == 1) {
                    long j = this.updatesStartWaitTimeChannels.get(i);
                    if (j == 0 || (!z && Math.abs(System.currentTimeMillis() - j) > 1500)) {
                        if (BuildVars.LOGS_ENABLED) {
                            FileLog.d("HOLE IN CHANNEL " + i + " UPDATES QUEUE - getChannelDifference ");
                        }
                        this.updatesStartWaitTimeChannels.delete(i);
                        this.updatesQueueChannels.remove(i);
                        getChannelDifference(i);
                        return;
                    }
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("HOLE IN CHANNEL " + i + " UPDATES QUEUE - will wait more time");
                    }
                    if (z) {
                        this.updatesStartWaitTimeChannels.put(i, System.currentTimeMillis());
                        return;
                    }
                    return;
                } else {
                    arrayList.remove(0);
                }
            }
            this.updatesQueueChannels.remove(i);
            this.updatesStartWaitTimeChannels.delete(i);
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("UPDATES CHANNEL " + i + " QUEUE PROCEED - OK");
            }
        }
    }

    private void processUpdatesQueue(int i, int i2) {
        ArrayList<TLRPC$Updates> arrayList;
        if (i == 0) {
            arrayList = this.updatesQueueSeq;
            Collections.sort(arrayList, new Object() {
                public final int compare(Object obj, Object obj2) {
                    return MessagesController.this.lambda$processUpdatesQueue$232$MessagesController((TLRPC$Updates) obj, (TLRPC$Updates) obj2);
                }

                public /* synthetic */ java.util.Comparator reversed() {
                    return Comparator.CC.$default$reversed(this);
                }

                public /* synthetic */ java.util.Comparator thenComparing(Function function) {
                    return Comparator.CC.$default$thenComparing((java.util.Comparator) this, function);
                }

                public /* synthetic */ java.util.Comparator thenComparing(Function function, java.util.Comparator comparator) {
                    return Comparator.CC.$default$thenComparing(this, function, comparator);
                }

                public /* synthetic */ java.util.Comparator thenComparing(java.util.Comparator comparator) {
                    return Comparator.CC.$default$thenComparing((java.util.Comparator) this, comparator);
                }

                public /* synthetic */ java.util.Comparator thenComparingDouble(ToDoubleFunction toDoubleFunction) {
                    return Comparator.CC.$default$thenComparingDouble(this, toDoubleFunction);
                }

                public /* synthetic */ java.util.Comparator thenComparingInt(ToIntFunction toIntFunction) {
                    return Comparator.CC.$default$thenComparingInt(this, toIntFunction);
                }

                public /* synthetic */ java.util.Comparator thenComparingLong(ToLongFunction toLongFunction) {
                    return Comparator.CC.$default$thenComparingLong(this, toLongFunction);
                }
            });
        } else if (i == 1) {
            arrayList = this.updatesQueuePts;
            Collections.sort(arrayList, $$Lambda$MessagesController$TbboG11UhAioBax0dLZV6WCfVHM.INSTANCE);
        } else if (i == 2) {
            arrayList = this.updatesQueueQts;
            Collections.sort(arrayList, $$Lambda$MessagesController$pngT0JxKlwslFDh3yUMfAujYhRA.INSTANCE);
        } else {
            arrayList = null;
        }
        if (arrayList != null && !arrayList.isEmpty()) {
            if (i2 == 2) {
                TLRPC$Updates tLRPC$Updates = arrayList.get(0);
                if (i == 0) {
                    getMessagesStorage().setLastSeqValue(getUpdateSeq(tLRPC$Updates));
                } else if (i == 1) {
                    getMessagesStorage().setLastPtsValue(tLRPC$Updates.pts);
                } else {
                    getMessagesStorage().setLastQtsValue(tLRPC$Updates.pts);
                }
            }
            boolean z = false;
            while (arrayList.size() > 0) {
                TLRPC$Updates tLRPC$Updates2 = arrayList.get(0);
                int isValidUpdate = isValidUpdate(tLRPC$Updates2, i);
                if (isValidUpdate == 0) {
                    processUpdates(tLRPC$Updates2, true);
                    arrayList.remove(0);
                    z = true;
                } else if (isValidUpdate != 1) {
                    arrayList.remove(0);
                } else if (getUpdatesStartTime(i) == 0 || (!z && Math.abs(System.currentTimeMillis() - getUpdatesStartTime(i)) > 1500)) {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("HOLE IN UPDATES QUEUE - getDifference");
                    }
                    setUpdatesStartTime(i, 0);
                    arrayList.clear();
                    getDifference();
                    return;
                } else {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("HOLE IN UPDATES QUEUE - will wait more time");
                    }
                    if (z) {
                        setUpdatesStartTime(i, System.currentTimeMillis());
                        return;
                    }
                    return;
                }
            }
            arrayList.clear();
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("UPDATES QUEUE PROCEED - OK");
            }
        }
        setUpdatesStartTime(i, 0);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$processUpdatesQueue$232 */
    public /* synthetic */ int lambda$processUpdatesQueue$232$MessagesController(TLRPC$Updates tLRPC$Updates, TLRPC$Updates tLRPC$Updates2) {
        return AndroidUtilities.compare(getUpdateSeq(tLRPC$Updates), getUpdateSeq(tLRPC$Updates2));
    }

    /* access modifiers changed from: protected */
    public void loadUnknownChannel(TLRPC$Chat tLRPC$Chat, long j) {
        NativeByteBuffer nativeByteBuffer;
        Exception e;
        if ((tLRPC$Chat instanceof TLRPC$TL_channel) && this.gettingUnknownChannels.indexOfKey(tLRPC$Chat.id) < 0) {
            if (tLRPC$Chat.access_hash != 0) {
                TLRPC$TL_inputPeerChannel tLRPC$TL_inputPeerChannel = new TLRPC$TL_inputPeerChannel();
                int i = tLRPC$Chat.id;
                tLRPC$TL_inputPeerChannel.channel_id = i;
                tLRPC$TL_inputPeerChannel.access_hash = tLRPC$Chat.access_hash;
                this.gettingUnknownChannels.put(i, true);
                TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs = new TLRPC$TL_messages_getPeerDialogs();
                TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
                tLRPC$TL_inputDialogPeer.peer = tLRPC$TL_inputPeerChannel;
                tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer);
                if (j == 0) {
                    try {
                        nativeByteBuffer = new NativeByteBuffer(tLRPC$Chat.getObjectSize() + 4);
                        try {
                            nativeByteBuffer.writeInt32(0);
                            tLRPC$Chat.serializeToStream(nativeByteBuffer);
                        } catch (Exception e2) {
                            e = e2;
                        }
                    } catch (Exception e3) {
                        Exception exc = e3;
                        nativeByteBuffer = null;
                        e = exc;
                        FileLog.e((Throwable) e);
                        j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                        getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerDialogs, new RequestDelegate(j, tLRPC$Chat) {
                            public final /* synthetic */ long f$1;
                            public final /* synthetic */ TLRPC$Chat f$2;

                            {
                                this.f$1 = r2;
                                this.f$2 = r4;
                            }

                            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                MessagesController.this.lambda$loadUnknownChannel$235$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                            }
                        });
                    }
                    j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                }
                getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerDialogs, new RequestDelegate(j, tLRPC$Chat) {
                    public final /* synthetic */ long f$1;
                    public final /* synthetic */ TLRPC$Chat f$2;

                    {
                        this.f$1 = r2;
                        this.f$2 = r4;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$loadUnknownChannel$235$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                    }
                });
            } else if (j != 0) {
                getMessagesStorage().removePendingTask(j);
            }
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$loadUnknownChannel$235 */
    public /* synthetic */ void lambda$loadUnknownChannel$235$MessagesController(long j, TLRPC$Chat tLRPC$Chat, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject;
            if (!tLRPC$TL_messages_peerDialogs.dialogs.isEmpty() && !tLRPC$TL_messages_peerDialogs.chats.isEmpty()) {
                TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
                tLRPC$TL_messages_dialogs.dialogs.addAll(tLRPC$TL_messages_peerDialogs.dialogs);
                tLRPC$TL_messages_dialogs.messages.addAll(tLRPC$TL_messages_peerDialogs.messages);
                tLRPC$TL_messages_dialogs.users.addAll(tLRPC$TL_messages_peerDialogs.users);
                tLRPC$TL_messages_dialogs.chats.addAll(tLRPC$TL_messages_peerDialogs.chats);
                processLoadedDialogs(tLRPC$TL_messages_dialogs, (ArrayList<TLRPC$EncryptedChat>) null, ((TLRPC$TL_dialog) tLRPC$TL_messages_peerDialogs.dialogs.get(0)).folder_id, 0, 1, this.DIALOGS_LOAD_TYPE_CHANNEL, false, false, false);
            }
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
        this.gettingUnknownChannels.delete(tLRPC$Chat.id);
    }

    public void startShortPoll(TLRPC$Chat tLRPC$Chat, int i, boolean z) {
        if (tLRPC$Chat != null) {
            Utilities.stageQueue.postRunnable(new Runnable(tLRPC$Chat, z, i) {
                public final /* synthetic */ TLRPC$Chat f$1;
                public final /* synthetic */ boolean f$2;
                public final /* synthetic */ int f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run() {
                    MessagesController.this.lambda$startShortPoll$236$MessagesController(this.f$1, this.f$2, this.f$3);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$startShortPoll$236 */
    public /* synthetic */ void lambda$startShortPoll$236$MessagesController(TLRPC$Chat tLRPC$Chat, boolean z, int i) {
        ArrayList arrayList = this.needShortPollChannels.get(tLRPC$Chat.id);
        ArrayList arrayList2 = this.needShortPollOnlines.get(tLRPC$Chat.id);
        if (z) {
            if (arrayList != null) {
                arrayList.remove(Integer.valueOf(i));
            }
            if (arrayList == null || arrayList.isEmpty()) {
                this.needShortPollChannels.delete(tLRPC$Chat.id);
            }
            if (tLRPC$Chat.megagroup) {
                if (arrayList2 != null) {
                    arrayList2.remove(Integer.valueOf(i));
                }
                if (arrayList2 == null || arrayList2.isEmpty()) {
                    this.needShortPollOnlines.delete(tLRPC$Chat.id);
                    return;
                }
                return;
            }
            return;
        }
        if (arrayList == null) {
            arrayList = new ArrayList();
            this.needShortPollChannels.put(tLRPC$Chat.id, arrayList);
        }
        if (!arrayList.contains(Integer.valueOf(i))) {
            arrayList.add(Integer.valueOf(i));
        }
        if (this.shortPollChannels.indexOfKey(tLRPC$Chat.id) < 0) {
            getChannelDifference(tLRPC$Chat.id, 3, 0, (TLRPC$InputChannel) null);
        }
        if (tLRPC$Chat.megagroup) {
            if (arrayList2 == null) {
                arrayList2 = new ArrayList();
                this.needShortPollOnlines.put(tLRPC$Chat.id, arrayList2);
            }
            if (!arrayList2.contains(Integer.valueOf(i))) {
                arrayList2.add(Integer.valueOf(i));
            }
            if (this.shortPollOnlines.indexOfKey(tLRPC$Chat.id) < 0) {
                this.shortPollOnlines.put(tLRPC$Chat.id, 0);
            }
        }
    }

    private void getChannelDifference(int i) {
        getChannelDifference(i, 0, 0, (TLRPC$InputChannel) null);
    }

    /* JADX WARNING: Code restructure failed: missing block: B:3:0x0006, code lost:
        r1 = r1.id;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public static boolean isSupportUser(org.telegram.tgnet.TLRPC$User r1) {
        /*
            if (r1 == 0) goto L_0x009b
            boolean r0 = r1.support
            if (r0 != 0) goto L_0x0099
            int r1 = r1.id
            r0 = 777000(0xbdb28, float:1.088809E-39)
            if (r1 == r0) goto L_0x0099
            r0 = 333000(0x514c8, float:4.66632E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 4240000(0x40b280, float:5.941505E-39)
            if (r1 == r0) goto L_0x0099
            r0 = 4244000(0x40CLASSNAME, float:5.94711E-39)
            if (r1 == r0) goto L_0x0099
            r0 = 4245000(0x40CLASSNAME, float:5.948512E-39)
            if (r1 == r0) goto L_0x0099
            r0 = 4246000(0x40c9f0, float:5.949913E-39)
            if (r1 == r0) goto L_0x0099
            r0 = 410000(0x64190, float:5.74532E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 420000(0x668a0, float:5.88545E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 431000(0x69398, float:6.0396E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 431415000(0x19b6ded8, float:1.8908365E-23)
            if (r1 == r0) goto L_0x0099
            r0 = 434000(0x69var_, float:6.08164E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 4243000(0x40be38, float:5.94571E-39)
            if (r1 == r0) goto L_0x0099
            r0 = 439000(0x6b2d8, float:6.1517E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 449000(0x6d9e8, float:6.29183E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 450000(0x6ddd0, float:6.30584E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 452000(0x6e5a0, float:6.33387E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 454000(0x6ed70, float:6.3619E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 4254000(0x40e930, float:5.961124E-39)
            if (r1 == r0) goto L_0x0099
            r0 = 455000(0x6var_, float:6.37591E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 460000(0x704e0, float:6.44597E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 470000(0x72bf0, float:6.5861E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 479000(0x74var_, float:6.71222E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 796000(0xCLASSNAME, float:1.115434E-39)
            if (r1 == r0) goto L_0x0099
            r0 = 482000(0x75ad0, float:6.75426E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 490000(0x77a10, float:6.86636E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 496000(0x79180, float:6.95044E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 497000(0x79568, float:6.96445E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 498000(0x79950, float:6.97847E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 4298000(0x419510, float:6.022781E-39)
            if (r1 != r0) goto L_0x009b
        L_0x0099:
            r1 = 1
            goto L_0x009c
        L_0x009b:
            r1 = 0
        L_0x009c:
            return r1
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.isSupportUser(org.telegram.tgnet.TLRPC$User):boolean");
    }

    /* access modifiers changed from: protected */
    /* JADX WARNING: Removed duplicated region for block: B:48:0x00c1  */
    /* JADX WARNING: Removed duplicated region for block: B:51:0x00c8  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void getChannelDifference(int r16, int r17, long r18, org.telegram.tgnet.TLRPC$InputChannel r20) {
        /*
            r15 = this;
            r7 = r15
            r3 = r16
            r4 = r17
            r0 = r18
            android.util.SparseBooleanArray r2 = r7.gettingDifferenceChannels
            boolean r2 = r2.get(r3)
            if (r2 == 0) goto L_0x0010
            return
        L_0x0010:
            r2 = 100
            r5 = 3
            r6 = 1
            if (r4 != r6) goto L_0x0022
            android.util.SparseIntArray r2 = r7.channelsPts
            int r2 = r2.get(r3)
            if (r2 == 0) goto L_0x001f
            return
        L_0x001f:
            r2 = 1
            r8 = 1
            goto L_0x0044
        L_0x0022:
            android.util.SparseIntArray r8 = r7.channelsPts
            int r8 = r8.get(r3)
            if (r8 != 0) goto L_0x0041
            org.telegram.messenger.MessagesStorage r8 = r15.getMessagesStorage()
            int r8 = r8.getChannelPtsSync(r3)
            if (r8 == 0) goto L_0x0039
            android.util.SparseIntArray r9 = r7.channelsPts
            r9.put(r3, r8)
        L_0x0039:
            if (r8 != 0) goto L_0x0041
            r9 = 2
            if (r4 == r9) goto L_0x0040
            if (r4 != r5) goto L_0x0041
        L_0x0040:
            return
        L_0x0041:
            if (r8 != 0) goto L_0x0044
            return
        L_0x0044:
            if (r20 != 0) goto L_0x0062
            java.lang.Integer r9 = java.lang.Integer.valueOf(r16)
            org.telegram.tgnet.TLRPC$Chat r9 = r15.getChat(r9)
            if (r9 != 0) goto L_0x005d
            org.telegram.messenger.MessagesStorage r9 = r15.getMessagesStorage()
            org.telegram.tgnet.TLRPC$Chat r9 = r9.getChatSync(r3)
            if (r9 == 0) goto L_0x005d
            r15.putChat(r9, r6)
        L_0x005d:
            org.telegram.tgnet.TLRPC$InputChannel r9 = getInputChannel((org.telegram.tgnet.TLRPC$Chat) r9)
            goto L_0x0064
        L_0x0062:
            r9 = r20
        L_0x0064:
            long r10 = r9.access_hash
            r12 = 0
            int r14 = (r10 > r12 ? 1 : (r10 == r12 ? 0 : -1))
            if (r14 != 0) goto L_0x0078
            int r2 = (r0 > r12 ? 1 : (r0 == r12 ? 0 : -1))
            if (r2 == 0) goto L_0x0077
            org.telegram.messenger.MessagesStorage r2 = r15.getMessagesStorage()
            r2.removePendingTask(r0)
        L_0x0077:
            return
        L_0x0078:
            int r10 = (r0 > r12 ? 1 : (r0 == r12 ? 0 : -1))
            if (r10 != 0) goto L_0x00a6
            r1 = 0
            org.telegram.tgnet.NativeByteBuffer r10 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x0099 }
            int r0 = r9.getObjectSize()     // Catch:{ Exception -> 0x0099 }
            int r0 = r0 + 12
            r10.<init>((int) r0)     // Catch:{ Exception -> 0x0099 }
            r0 = 6
            r10.writeInt32(r0)     // Catch:{ Exception -> 0x0096 }
            r10.writeInt32(r3)     // Catch:{ Exception -> 0x0096 }
            r10.writeInt32(r4)     // Catch:{ Exception -> 0x0096 }
            r9.serializeToStream(r10)     // Catch:{ Exception -> 0x0096 }
            goto L_0x009e
        L_0x0096:
            r0 = move-exception
            r1 = r10
            goto L_0x009a
        L_0x0099:
            r0 = move-exception
        L_0x009a:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
            r10 = r1
        L_0x009e:
            org.telegram.messenger.MessagesStorage r0 = r15.getMessagesStorage()
            long r0 = r0.createPendingTask(r10)
        L_0x00a6:
            r10 = r0
            android.util.SparseBooleanArray r0 = r7.gettingDifferenceChannels
            r0.put(r3, r6)
            org.telegram.tgnet.TLRPC$TL_updates_getChannelDifference r0 = new org.telegram.tgnet.TLRPC$TL_updates_getChannelDifference
            r0.<init>()
            r0.channel = r9
            org.telegram.tgnet.TLRPC$TL_channelMessagesFilterEmpty r1 = new org.telegram.tgnet.TLRPC$TL_channelMessagesFilterEmpty
            r1.<init>()
            r0.filter = r1
            r0.pts = r8
            r0.limit = r2
            if (r4 == r5) goto L_0x00c1
            goto L_0x00c2
        L_0x00c1:
            r6 = 0
        L_0x00c2:
            r0.force = r6
            boolean r1 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r1 == 0) goto L_0x00e4
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "start getChannelDifference with pts = "
            r1.append(r2)
            r1.append(r8)
            java.lang.String r2 = " channelId = "
            r1.append(r2)
            r1.append(r3)
            java.lang.String r1 = r1.toString()
            org.telegram.messenger.FileLog.d(r1)
        L_0x00e4:
            org.telegram.tgnet.ConnectionsManager r8 = r15.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$VGx-JdVHSO1V6vGsQauDbKjycAM r9 = new org.telegram.messenger.-$$Lambda$MessagesController$VGx-JdVHSO1V6vGsQauDbKjycAM
            r1 = r9
            r2 = r15
            r3 = r16
            r4 = r17
            r5 = r10
            r1.<init>(r3, r4, r5)
            r8.sendRequest(r0, r9)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.getChannelDifference(int, int, long, org.telegram.tgnet.TLRPC$InputChannel):void");
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$getChannelDifference$245 */
    public /* synthetic */ void lambda$getChannelDifference$245$MessagesController(int i, int i2, long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        TLRPC$Chat tLRPC$Chat;
        int i3 = i;
        long j2 = j;
        TLRPC$TL_error tLRPC$TL_error2 = tLRPC$TL_error;
        if (tLObject != null) {
            TLRPC$updates_ChannelDifference tLRPC$updates_ChannelDifference = (TLRPC$updates_ChannelDifference) tLObject;
            SparseArray sparseArray = new SparseArray();
            int i4 = 0;
            for (int i5 = 0; i5 < tLRPC$updates_ChannelDifference.users.size(); i5++) {
                TLRPC$User tLRPC$User = tLRPC$updates_ChannelDifference.users.get(i5);
                sparseArray.put(tLRPC$User.id, tLRPC$User);
            }
            int i6 = 0;
            while (true) {
                if (i6 >= tLRPC$updates_ChannelDifference.chats.size()) {
                    tLRPC$Chat = null;
                    break;
                }
                tLRPC$Chat = tLRPC$updates_ChannelDifference.chats.get(i6);
                if (tLRPC$Chat.id == i3) {
                    break;
                }
                i6++;
            }
            ArrayList arrayList = new ArrayList();
            if (!tLRPC$updates_ChannelDifference.other_updates.isEmpty()) {
                while (i4 < tLRPC$updates_ChannelDifference.other_updates.size()) {
                    TLRPC$Update tLRPC$Update = tLRPC$updates_ChannelDifference.other_updates.get(i4);
                    if (tLRPC$Update instanceof TLRPC$TL_updateMessageID) {
                        arrayList.add((TLRPC$TL_updateMessageID) tLRPC$Update);
                        tLRPC$updates_ChannelDifference.other_updates.remove(i4);
                        i4--;
                    }
                    i4++;
                }
            }
            getMessagesStorage().putUsersAndChats(tLRPC$updates_ChannelDifference.users, tLRPC$updates_ChannelDifference.chats, true, true);
            AndroidUtilities.runOnUIThread(new Runnable(tLRPC$updates_ChannelDifference) {
                public final /* synthetic */ TLRPC$updates_ChannelDifference f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$237$MessagesController(this.f$1);
                }
            });
            getMessagesStorage().getStorageQueue().postRunnable(new Runnable(arrayList, i, tLRPC$updates_ChannelDifference, tLRPC$Chat, sparseArray, i2, j) {
                public final /* synthetic */ ArrayList f$1;
                public final /* synthetic */ int f$2;
                public final /* synthetic */ TLRPC$updates_ChannelDifference f$3;
                public final /* synthetic */ TLRPC$Chat f$4;
                public final /* synthetic */ SparseArray f$5;
                public final /* synthetic */ int f$6;
                public final /* synthetic */ long f$7;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r5;
                    this.f$5 = r6;
                    this.f$6 = r7;
                    this.f$7 = r8;
                }

                public final void run() {
                    MessagesController.this.lambda$null$243$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7);
                }
            });
        } else if (tLRPC$TL_error2 != null) {
            AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_error2, i) {
                public final /* synthetic */ TLRPC$TL_error f$1;
                public final /* synthetic */ int f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    MessagesController.this.lambda$null$244$MessagesController(this.f$1, this.f$2);
                }
            });
            this.gettingDifferenceChannels.delete(i);
            if (j2 != 0) {
                getMessagesStorage().removePendingTask(j2);
            }
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$237 */
    public /* synthetic */ void lambda$null$237$MessagesController(TLRPC$updates_ChannelDifference tLRPC$updates_ChannelDifference) {
        putUsers(tLRPC$updates_ChannelDifference.users, false);
        putChats(tLRPC$updates_ChannelDifference.chats, false);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$243 */
    public /* synthetic */ void lambda$null$243$MessagesController(ArrayList arrayList, int i, TLRPC$updates_ChannelDifference tLRPC$updates_ChannelDifference, TLRPC$Chat tLRPC$Chat, SparseArray sparseArray, int i2, long j) {
        if (!arrayList.isEmpty()) {
            SparseArray sparseArray2 = new SparseArray();
            Iterator it = arrayList.iterator();
            while (it.hasNext()) {
                TLRPC$TL_updateMessageID tLRPC$TL_updateMessageID = (TLRPC$TL_updateMessageID) it.next();
                long[] updateMessageStateAndId = getMessagesStorage().updateMessageStateAndId(tLRPC$TL_updateMessageID.random_id, (Long) null, tLRPC$TL_updateMessageID.id, 0, false, i, -1);
                if (updateMessageStateAndId != null) {
                    sparseArray2.put(tLRPC$TL_updateMessageID.id, updateMessageStateAndId);
                }
            }
            if (sparseArray2.size() != 0) {
                AndroidUtilities.runOnUIThread(new Runnable(sparseArray2) {
                    public final /* synthetic */ SparseArray f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run() {
                        MessagesController.this.lambda$null$238$MessagesController(this.f$1);
                    }
                });
                Utilities.stageQueue.postRunnable(new Runnable(tLRPC$updates_ChannelDifference, i, tLRPC$Chat, sparseArray, i2, j) {
                    public final /* synthetic */ TLRPC$updates_ChannelDifference f$1;
                    public final /* synthetic */ int f$2;
                    public final /* synthetic */ TLRPC$Chat f$3;
                    public final /* synthetic */ SparseArray f$4;
                    public final /* synthetic */ int f$5;
                    public final /* synthetic */ long f$6;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                        this.f$3 = r4;
                        this.f$4 = r5;
                        this.f$5 = r6;
                        this.f$6 = r7;
                    }

                    public final void run() {
                        MessagesController.this.lambda$null$242$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
                    }
                });
            }
        }
        Utilities.stageQueue.postRunnable(new Runnable(tLRPC$updates_ChannelDifference, i, tLRPC$Chat, sparseArray, i2, j) {
            public final /* synthetic */ TLRPC$updates_ChannelDifference f$1;
            public final /* synthetic */ int f$2;
            public final /* synthetic */ TLRPC$Chat f$3;
            public final /* synthetic */ SparseArray f$4;
            public final /* synthetic */ int f$5;
            public final /* synthetic */ long f$6;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
            }

            public final void run() {
                MessagesController.this.lambda$null$242$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$238 */
    public /* synthetic */ void lambda$null$238$MessagesController(SparseArray sparseArray) {
        for (int i = 0; i < sparseArray.size(); i++) {
            int keyAt = sparseArray.keyAt(i);
            long[] jArr = (long[]) sparseArray.valueAt(i);
            int i2 = (int) jArr[1];
            getSendMessagesHelper().processSentMessage(i2);
            getNotificationCenter().postNotificationName(NotificationCenter.messageReceivedByServer, Integer.valueOf(i2), Integer.valueOf(keyAt), null, Long.valueOf(jArr[0]), 0L, -1, Boolean.FALSE);
        }
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Removed duplicated region for block: B:64:0x016e  */
    /* JADX WARNING: Removed duplicated region for block: B:88:0x0176 A[SYNTHETIC] */
    /* renamed from: lambda$null$242 */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$null$242$MessagesController(org.telegram.tgnet.TLRPC$updates_ChannelDifference r23, int r24, org.telegram.tgnet.TLRPC$Chat r25, android.util.SparseArray r26, int r27, long r28) {
        /*
            r22 = this;
            r6 = r22
            r7 = r23
            r8 = r24
            r0 = r25
            r9 = r28
            boolean r1 = r7 instanceof org.telegram.tgnet.TLRPC$TL_updates_channelDifference
            r2 = 0
            r11 = 1
            if (r1 != 0) goto L_0x00a6
            boolean r1 = r7 instanceof org.telegram.tgnet.TLRPC$TL_updates_channelDifferenceEmpty
            if (r1 == 0) goto L_0x0016
            goto L_0x00a6
        L_0x0016:
            boolean r1 = r7 instanceof org.telegram.tgnet.TLRPC$TL_updates_channelDifferenceTooLong
            if (r1 == 0) goto L_0x01b8
            int r1 = -r8
            long r3 = (long) r1
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r6.dialogs_read_inbox_max
            java.lang.Long r5 = java.lang.Long.valueOf(r3)
            java.lang.Object r1 = r1.get(r5)
            java.lang.Integer r1 = (java.lang.Integer) r1
            if (r1 != 0) goto L_0x003f
            org.telegram.messenger.MessagesStorage r1 = r22.getMessagesStorage()
            int r1 = r1.getDialogReadMax(r2, r3)
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r5 = r6.dialogs_read_inbox_max
            java.lang.Long r12 = java.lang.Long.valueOf(r3)
            r5.put(r12, r1)
        L_0x003f:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r5 = r6.dialogs_read_outbox_max
            java.lang.Long r12 = java.lang.Long.valueOf(r3)
            java.lang.Object r5 = r5.get(r12)
            java.lang.Integer r5 = (java.lang.Integer) r5
            if (r5 != 0) goto L_0x0062
            org.telegram.messenger.MessagesStorage r5 = r22.getMessagesStorage()
            int r5 = r5.getDialogReadMax(r11, r3)
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r12 = r6.dialogs_read_outbox_max
            java.lang.Long r13 = java.lang.Long.valueOf(r3)
            r12.put(r13, r5)
        L_0x0062:
            r12 = 0
        L_0x0063:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r13 = r7.messages
            int r13 = r13.size()
            if (r12 >= r13) goto L_0x0098
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r13 = r7.messages
            java.lang.Object r13 = r13.get(r12)
            org.telegram.tgnet.TLRPC$Message r13 = (org.telegram.tgnet.TLRPC$Message) r13
            r13.dialog_id = r3
            org.telegram.tgnet.TLRPC$MessageAction r14 = r13.action
            boolean r14 = r14 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChannelCreate
            if (r14 != 0) goto L_0x0092
            if (r0 == 0) goto L_0x0081
            boolean r14 = r0.left
            if (r14 != 0) goto L_0x0092
        L_0x0081:
            boolean r14 = r13.out
            if (r14 == 0) goto L_0x0087
            r14 = r5
            goto L_0x0088
        L_0x0087:
            r14 = r1
        L_0x0088:
            int r14 = r14.intValue()
            int r15 = r13.id
            if (r14 >= r15) goto L_0x0092
            r14 = 1
            goto L_0x0093
        L_0x0092:
            r14 = 0
        L_0x0093:
            r13.unread = r14
            int r12 = r12 + 1
            goto L_0x0063
        L_0x0098:
            org.telegram.messenger.MessagesStorage r0 = r22.getMessagesStorage()
            r1 = r7
            org.telegram.tgnet.TLRPC$TL_updates_channelDifferenceTooLong r1 = (org.telegram.tgnet.TLRPC$TL_updates_channelDifferenceTooLong) r1
            r2 = r27
            r0.overwriteChannel(r8, r1, r2)
            goto L_0x01b8
        L_0x00a6:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r7.new_messages
            boolean r1 = r1.isEmpty()
            if (r1 != 0) goto L_0x0196
            android.util.LongSparseArray r1 = new android.util.LongSparseArray
            r1.<init>()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r3 = r7.new_messages
            org.telegram.messenger.ImageLoader.saveMessagesThumbs(r3)
            java.util.ArrayList r3 = new java.util.ArrayList
            r3.<init>()
            int r4 = -r8
            long r4 = (long) r4
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r12 = r6.dialogs_read_inbox_max
            java.lang.Long r13 = java.lang.Long.valueOf(r4)
            java.lang.Object r12 = r12.get(r13)
            java.lang.Integer r12 = (java.lang.Integer) r12
            if (r12 != 0) goto L_0x00e2
            org.telegram.messenger.MessagesStorage r12 = r22.getMessagesStorage()
            int r12 = r12.getDialogReadMax(r2, r4)
            java.lang.Integer r12 = java.lang.Integer.valueOf(r12)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r13 = r6.dialogs_read_inbox_max
            java.lang.Long r14 = java.lang.Long.valueOf(r4)
            r13.put(r14, r12)
        L_0x00e2:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r13 = r6.dialogs_read_outbox_max
            java.lang.Long r14 = java.lang.Long.valueOf(r4)
            java.lang.Object r13 = r13.get(r14)
            java.lang.Integer r13 = (java.lang.Integer) r13
            if (r13 != 0) goto L_0x0105
            org.telegram.messenger.MessagesStorage r13 = r22.getMessagesStorage()
            int r13 = r13.getDialogReadMax(r11, r4)
            java.lang.Integer r13 = java.lang.Integer.valueOf(r13)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r14 = r6.dialogs_read_outbox_max
            java.lang.Long r15 = java.lang.Long.valueOf(r4)
            r14.put(r15, r13)
        L_0x0105:
            r14 = 0
        L_0x0106:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r15 = r7.new_messages
            int r15 = r15.size()
            if (r14 >= r15) goto L_0x017e
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r15 = r7.new_messages
            java.lang.Object r15 = r15.get(r14)
            org.telegram.tgnet.TLRPC$Message r15 = (org.telegram.tgnet.TLRPC$Message) r15
            if (r0 == 0) goto L_0x011c
            boolean r2 = r0.left
            if (r2 != 0) goto L_0x0133
        L_0x011c:
            boolean r2 = r15.out
            if (r2 == 0) goto L_0x0122
            r2 = r13
            goto L_0x0123
        L_0x0122:
            r2 = r12
        L_0x0123:
            int r2 = r2.intValue()
            int r11 = r15.id
            if (r2 >= r11) goto L_0x0133
            org.telegram.tgnet.TLRPC$MessageAction r2 = r15.action
            boolean r2 = r2 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChannelCreate
            if (r2 != 0) goto L_0x0133
            r2 = 1
            goto L_0x0134
        L_0x0133:
            r2 = 0
        L_0x0134:
            r15.unread = r2
            java.util.ArrayList<java.lang.Long> r2 = r6.createdDialogIds
            java.lang.Long r11 = java.lang.Long.valueOf(r4)
            boolean r21 = r2.contains(r11)
            org.telegram.messenger.MessageObject r2 = new org.telegram.messenger.MessageObject
            int r11 = r6.currentAccount
            r16 = r2
            r17 = r11
            r18 = r15
            r19 = r26
            r20 = r21
            r16.<init>((int) r17, (org.telegram.tgnet.TLRPC$Message) r18, (android.util.SparseArray<org.telegram.tgnet.TLRPC$User>) r19, (boolean) r20, (boolean) r21)
            boolean r11 = r2.isOut()
            if (r11 == 0) goto L_0x015d
            org.telegram.tgnet.TLRPC$Message r11 = r2.messageOwner
            boolean r11 = r11.from_scheduled
            if (r11 == 0) goto L_0x0166
        L_0x015d:
            boolean r11 = r2.isUnread()
            if (r11 == 0) goto L_0x0166
            r3.add(r2)
        L_0x0166:
            java.lang.Object r11 = r1.get(r4)
            java.util.ArrayList r11 = (java.util.ArrayList) r11
            if (r11 != 0) goto L_0x0176
            java.util.ArrayList r11 = new java.util.ArrayList
            r11.<init>()
            r1.put(r4, r11)
        L_0x0176:
            r11.add(r2)
            int r14 = r14 + 1
            r2 = 0
            r11 = 1
            goto L_0x0106
        L_0x017e:
            org.telegram.messenger.-$$Lambda$MessagesController$gVjraL4E217RfQsFMyRwEDApwUc r0 = new org.telegram.messenger.-$$Lambda$MessagesController$gVjraL4E217RfQsFMyRwEDApwUc
            r0.<init>(r1)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r0)
            org.telegram.messenger.MessagesStorage r0 = r22.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r0 = r0.getStorageQueue()
            org.telegram.messenger.-$$Lambda$MessagesController$M1ADaFJiDAiGXTGfVs40KlMeMFU r1 = new org.telegram.messenger.-$$Lambda$MessagesController$M1ADaFJiDAiGXTGfVs40KlMeMFU
            r1.<init>(r3, r7)
            r0.postRunnable(r1)
        L_0x0196:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r0 = r7.other_updates
            boolean r0 = r0.isEmpty()
            if (r0 != 0) goto L_0x01ab
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r7.other_updates
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r7.users
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r3 = r7.chats
            r4 = 1
            r5 = 0
            r0 = r22
            r0.processUpdateArray(r1, r2, r3, r4, r5)
        L_0x01ab:
            r0 = 1
            r6.processChannelsUpdatesQueue(r8, r0)
            org.telegram.messenger.MessagesStorage r0 = r22.getMessagesStorage()
            int r1 = r7.pts
            r0.saveChannelPts(r8, r1)
        L_0x01b8:
            android.util.SparseBooleanArray r0 = r6.gettingDifferenceChannels
            r0.delete(r8)
            android.util.SparseIntArray r0 = r6.channelsPts
            int r1 = r7.pts
            r0.put(r8, r1)
            int r0 = r7.flags
            r0 = r0 & 2
            if (r0 == 0) goto L_0x01da
            android.util.SparseIntArray r0 = r6.shortPollChannels
            long r1 = java.lang.System.currentTimeMillis()
            r3 = 1000(0x3e8, double:4.94E-321)
            long r1 = r1 / r3
            int r2 = (int) r1
            int r1 = r7.timeout
            int r2 = r2 + r1
            r0.put(r8, r2)
        L_0x01da:
            boolean r0 = r7.isFinal
            if (r0 != 0) goto L_0x01e1
            r6.getChannelDifference(r8)
        L_0x01e1:
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0255
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "received channel difference with pts = "
            r0.append(r1)
            int r1 = r7.pts
            r0.append(r1)
            java.lang.String r1 = " channelId = "
            r0.append(r1)
            r0.append(r8)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "new_messages = "
            r0.append(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r7.new_messages
            int r1 = r1.size()
            r0.append(r1)
            java.lang.String r1 = " messages = "
            r0.append(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r7.messages
            int r1 = r1.size()
            r0.append(r1)
            java.lang.String r1 = " users = "
            r0.append(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r1 = r7.users
            int r1 = r1.size()
            r0.append(r1)
            java.lang.String r1 = " chats = "
            r0.append(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r1 = r7.chats
            int r1 = r1.size()
            r0.append(r1)
            java.lang.String r1 = " other updates = "
            r0.append(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r7.other_updates
            int r1 = r1.size()
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x0255:
            r0 = 0
            int r2 = (r9 > r0 ? 1 : (r9 == r0 ? 0 : -1))
            if (r2 == 0) goto L_0x0262
            org.telegram.messenger.MessagesStorage r0 = r22.getMessagesStorage()
            r0.removePendingTask(r9)
        L_0x0262:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$null$242$MessagesController(org.telegram.tgnet.TLRPC$updates_ChannelDifference, int, org.telegram.tgnet.TLRPC$Chat, android.util.SparseArray, int, long):void");
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$239 */
    public /* synthetic */ void lambda$null$239$MessagesController(LongSparseArray longSparseArray) {
        for (int i = 0; i < longSparseArray.size(); i++) {
            updateInterfaceWithMessages(longSparseArray.keyAt(i), (ArrayList) longSparseArray.valueAt(i), false);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$241 */
    public /* synthetic */ void lambda$null$241$MessagesController(ArrayList arrayList, TLRPC$updates_ChannelDifference tLRPC$updates_ChannelDifference) {
        if (!arrayList.isEmpty()) {
            AndroidUtilities.runOnUIThread(new Runnable(arrayList) {
                public final /* synthetic */ ArrayList f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$240$MessagesController(this.f$1);
                }
            });
        }
        getMessagesStorage().putMessages(tLRPC$updates_ChannelDifference.new_messages, true, false, false, getDownloadController().getAutodownloadMask(), false);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$240 */
    public /* synthetic */ void lambda$null$240$MessagesController(ArrayList arrayList) {
        getNotificationsController().processNewMessages(arrayList, true, false, (CountDownLatch) null);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$244 */
    public /* synthetic */ void lambda$null$244$MessagesController(TLRPC$TL_error tLRPC$TL_error, int i) {
        checkChannelError(tLRPC$TL_error.text, i);
    }

    private void checkChannelError(String str, int i) {
        str.hashCode();
        char c = 65535;
        switch (str.hashCode()) {
            case -1809401834:
                if (str.equals("USER_BANNED_IN_CHANNEL")) {
                    c = 0;
                    break;
                }
                break;
            case -795226617:
                if (str.equals("CHANNEL_PRIVATE")) {
                    c = 1;
                    break;
                }
                break;
            case -471086771:
                if (str.equals("CHANNEL_PUBLIC_GROUP_NA")) {
                    c = 2;
                    break;
                }
                break;
        }
        switch (c) {
            case 0:
                getNotificationCenter().postNotificationName(NotificationCenter.chatInfoCantLoad, Integer.valueOf(i), 2);
                return;
            case 1:
                getNotificationCenter().postNotificationName(NotificationCenter.chatInfoCantLoad, Integer.valueOf(i), 0);
                return;
            case 2:
                getNotificationCenter().postNotificationName(NotificationCenter.chatInfoCantLoad, Integer.valueOf(i), 1);
                return;
            default:
                return;
        }
    }

    public void getDifference() {
        getDifference(getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue(), false);
    }

    public void getDifference(int i, int i2, int i3, boolean z) {
        registerForPush(SharedConfig.pushString);
        if (getMessagesStorage().getLastPtsValue() == 0) {
            loadCurrentState();
        } else if (z || !this.gettingDifference) {
            this.gettingDifference = true;
            TLRPC$TL_updates_getDifference tLRPC$TL_updates_getDifference = new TLRPC$TL_updates_getDifference();
            tLRPC$TL_updates_getDifference.pts = i;
            tLRPC$TL_updates_getDifference.date = i2;
            tLRPC$TL_updates_getDifference.qts = i3;
            if (this.getDifferenceFirstSync) {
                tLRPC$TL_updates_getDifference.flags |= 1;
                if (ApplicationLoader.isConnectedOrConnectingToWiFi()) {
                    tLRPC$TL_updates_getDifference.pts_total_limit = 5000;
                } else {
                    tLRPC$TL_updates_getDifference.pts_total_limit = 1000;
                }
                this.getDifferenceFirstSync = false;
            }
            if (tLRPC$TL_updates_getDifference.date == 0) {
                tLRPC$TL_updates_getDifference.date = getConnectionsManager().getCurrentTime();
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("start getDifference with date = " + i2 + " pts = " + i + " qts = " + i3);
            }
            getConnectionsManager().setIsUpdating(true);
            getConnectionsManager().sendRequest(tLRPC$TL_updates_getDifference, new RequestDelegate(i2, i3) {
                public final /* synthetic */ int f$1;
                public final /* synthetic */ int f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$getDifference$254$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$getDifference$254 */
    public /* synthetic */ void lambda$getDifference$254$MessagesController(int i, int i2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        int i3 = 0;
        if (tLRPC$TL_error == null) {
            TLRPC$updates_Difference tLRPC$updates_Difference = (TLRPC$updates_Difference) tLObject;
            if (tLRPC$updates_Difference instanceof TLRPC$TL_updates_differenceTooLong) {
                AndroidUtilities.runOnUIThread(new Runnable(tLRPC$updates_Difference, i, i2) {
                    public final /* synthetic */ TLRPC$updates_Difference f$1;
                    public final /* synthetic */ int f$2;
                    public final /* synthetic */ int f$3;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                        this.f$3 = r4;
                    }

                    public final void run() {
                        MessagesController.this.lambda$null$246$MessagesController(this.f$1, this.f$2, this.f$3);
                    }
                });
                return;
            }
            if (tLRPC$updates_Difference instanceof TLRPC$TL_updates_differenceSlice) {
                TLRPC$TL_updates_state tLRPC$TL_updates_state = tLRPC$updates_Difference.intermediate_state;
                getDifference(tLRPC$TL_updates_state.pts, tLRPC$TL_updates_state.date, tLRPC$TL_updates_state.qts, true);
            }
            SparseArray sparseArray = new SparseArray();
            SparseArray sparseArray2 = new SparseArray();
            for (int i4 = 0; i4 < tLRPC$updates_Difference.users.size(); i4++) {
                TLRPC$User tLRPC$User = tLRPC$updates_Difference.users.get(i4);
                sparseArray.put(tLRPC$User.id, tLRPC$User);
            }
            for (int i5 = 0; i5 < tLRPC$updates_Difference.chats.size(); i5++) {
                TLRPC$Chat tLRPC$Chat = tLRPC$updates_Difference.chats.get(i5);
                sparseArray2.put(tLRPC$Chat.id, tLRPC$Chat);
            }
            ArrayList arrayList = new ArrayList();
            if (!tLRPC$updates_Difference.other_updates.isEmpty()) {
                while (i3 < tLRPC$updates_Difference.other_updates.size()) {
                    TLRPC$Update tLRPC$Update = tLRPC$updates_Difference.other_updates.get(i3);
                    if (tLRPC$Update instanceof TLRPC$TL_updateMessageID) {
                        arrayList.add((TLRPC$TL_updateMessageID) tLRPC$Update);
                        tLRPC$updates_Difference.other_updates.remove(i3);
                    } else {
                        if (getUpdateType(tLRPC$Update) == 2) {
                            int updateChannelId = getUpdateChannelId(tLRPC$Update);
                            int i6 = this.channelsPts.get(updateChannelId);
                            if (i6 == 0 && (i6 = getMessagesStorage().getChannelPtsSync(updateChannelId)) != 0) {
                                this.channelsPts.put(updateChannelId, i6);
                            }
                            if (i6 != 0 && getUpdatePts(tLRPC$Update) <= i6) {
                                tLRPC$updates_Difference.other_updates.remove(i3);
                            }
                        }
                        i3++;
                    }
                    i3--;
                    i3++;
                }
            }
            AndroidUtilities.runOnUIThread(new Runnable(tLRPC$updates_Difference) {
                public final /* synthetic */ TLRPC$updates_Difference f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$247$MessagesController(this.f$1);
                }
            });
            getMessagesStorage().getStorageQueue().postRunnable(new Runnable(tLRPC$updates_Difference, arrayList, sparseArray, sparseArray2) {
                public final /* synthetic */ TLRPC$updates_Difference f$1;
                public final /* synthetic */ ArrayList f$2;
                public final /* synthetic */ SparseArray f$3;
                public final /* synthetic */ SparseArray f$4;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r5;
                }

                public final void run() {
                    MessagesController.this.lambda$null$253$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4);
                }
            });
            return;
        }
        this.gettingDifference = false;
        getConnectionsManager().setIsUpdating(false);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$246 */
    public /* synthetic */ void lambda$null$246$MessagesController(TLRPC$updates_Difference tLRPC$updates_Difference, int i, int i2) {
        this.loadedFullUsers.clear();
        this.loadedFullChats.clear();
        resetDialogs(true, getMessagesStorage().getLastSeqValue(), tLRPC$updates_Difference.pts, i, i2);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$247 */
    public /* synthetic */ void lambda$null$247$MessagesController(TLRPC$updates_Difference tLRPC$updates_Difference) {
        this.loadedFullUsers.clear();
        this.loadedFullChats.clear();
        putUsers(tLRPC$updates_Difference.users, false);
        putChats(tLRPC$updates_Difference.chats, false);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$253 */
    public /* synthetic */ void lambda$null$253$MessagesController(TLRPC$updates_Difference tLRPC$updates_Difference, ArrayList arrayList, SparseArray sparseArray, SparseArray sparseArray2) {
        TLRPC$updates_Difference tLRPC$updates_Difference2 = tLRPC$updates_Difference;
        getMessagesStorage().putUsersAndChats(tLRPC$updates_Difference2.users, tLRPC$updates_Difference2.chats, true, false);
        if (!arrayList.isEmpty()) {
            SparseArray sparseArray3 = new SparseArray();
            for (int i = 0; i < arrayList.size(); i++) {
                TLRPC$TL_updateMessageID tLRPC$TL_updateMessageID = (TLRPC$TL_updateMessageID) arrayList.get(i);
                long[] updateMessageStateAndId = getMessagesStorage().updateMessageStateAndId(tLRPC$TL_updateMessageID.random_id, (Long) null, tLRPC$TL_updateMessageID.id, 0, false, 0, -1);
                if (updateMessageStateAndId != null) {
                    sparseArray3.put(tLRPC$TL_updateMessageID.id, updateMessageStateAndId);
                }
            }
            if (sparseArray3.size() != 0) {
                AndroidUtilities.runOnUIThread(new Runnable(sparseArray3) {
                    public final /* synthetic */ SparseArray f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run() {
                        MessagesController.this.lambda$null$248$MessagesController(this.f$1);
                    }
                });
            }
        }
        Utilities.stageQueue.postRunnable(new Runnable(tLRPC$updates_Difference2, sparseArray, sparseArray2) {
            public final /* synthetic */ TLRPC$updates_Difference f$1;
            public final /* synthetic */ SparseArray f$2;
            public final /* synthetic */ SparseArray f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesController.this.lambda$null$252$MessagesController(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$248 */
    public /* synthetic */ void lambda$null$248$MessagesController(SparseArray sparseArray) {
        for (int i = 0; i < sparseArray.size(); i++) {
            int keyAt = sparseArray.keyAt(i);
            long[] jArr = (long[]) sparseArray.valueAt(i);
            int i2 = (int) jArr[1];
            getSendMessagesHelper().processSentMessage(i2);
            getNotificationCenter().postNotificationName(NotificationCenter.messageReceivedByServer, Integer.valueOf(i2), Integer.valueOf(keyAt), null, Long.valueOf(jArr[0]), 0L, -1, Boolean.FALSE);
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$252 */
    public /* synthetic */ void lambda$null$252$MessagesController(TLRPC$updates_Difference tLRPC$updates_Difference, SparseArray sparseArray, SparseArray sparseArray2) {
        TLRPC$updates_Difference tLRPC$updates_Difference2 = tLRPC$updates_Difference;
        int i = 0;
        if (!tLRPC$updates_Difference2.new_messages.isEmpty() || !tLRPC$updates_Difference2.new_encrypted_messages.isEmpty()) {
            LongSparseArray longSparseArray = new LongSparseArray();
            for (int i2 = 0; i2 < tLRPC$updates_Difference2.new_encrypted_messages.size(); i2++) {
                ArrayList<TLRPC$Message> decryptMessage = getSecretChatHelper().decryptMessage(tLRPC$updates_Difference2.new_encrypted_messages.get(i2));
                if (decryptMessage != null && !decryptMessage.isEmpty()) {
                    tLRPC$updates_Difference2.new_messages.addAll(decryptMessage);
                }
            }
            ImageLoader.saveMessagesThumbs(tLRPC$updates_Difference2.new_messages);
            ArrayList arrayList = new ArrayList();
            int clientUserId = getUserConfig().getClientUserId();
            for (int i3 = 0; i3 < tLRPC$updates_Difference2.new_messages.size(); i3++) {
                TLRPC$Message tLRPC$Message = tLRPC$updates_Difference2.new_messages.get(i3);
                MessageObject.getDialogId(tLRPC$Message);
                if (((int) tLRPC$Message.dialog_id) != 0) {
                    TLRPC$MessageAction tLRPC$MessageAction = tLRPC$Message.action;
                    if (tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatDeleteUser) {
                        TLRPC$User tLRPC$User = (TLRPC$User) sparseArray.get(tLRPC$MessageAction.user_id);
                        if (tLRPC$User != null && tLRPC$User.bot) {
                            tLRPC$Message.reply_markup = new TLRPC$TL_replyKeyboardHide();
                            tLRPC$Message.flags |= 64;
                        }
                    } else {
                        SparseArray sparseArray3 = sparseArray;
                    }
                    TLRPC$MessageAction tLRPC$MessageAction2 = tLRPC$Message.action;
                    if ((tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChatMigrateTo) || (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChannelCreate)) {
                        tLRPC$Message.unread = false;
                        tLRPC$Message.media_unread = false;
                    } else {
                        ConcurrentHashMap<Long, Integer> concurrentHashMap = tLRPC$Message.out ? this.dialogs_read_outbox_max : this.dialogs_read_inbox_max;
                        Integer num = (Integer) concurrentHashMap.get(Long.valueOf(tLRPC$Message.dialog_id));
                        if (num == null) {
                            num = Integer.valueOf(getMessagesStorage().getDialogReadMax(tLRPC$Message.out, tLRPC$Message.dialog_id));
                            concurrentHashMap.put(Long.valueOf(tLRPC$Message.dialog_id), num);
                        }
                        tLRPC$Message.unread = num.intValue() < tLRPC$Message.id;
                    }
                } else {
                    SparseArray sparseArray4 = sparseArray;
                }
                long j = tLRPC$Message.dialog_id;
                if (j == ((long) clientUserId)) {
                    tLRPC$Message.unread = false;
                    tLRPC$Message.media_unread = false;
                    tLRPC$Message.out = true;
                }
                boolean contains = this.createdDialogIds.contains(Long.valueOf(j));
                MessageObject messageObject = new MessageObject(this.currentAccount, tLRPC$Message, (SparseArray<TLRPC$User>) sparseArray, (SparseArray<TLRPC$Chat>) sparseArray2, contains, contains);
                if ((!messageObject.isOut() || messageObject.messageOwner.from_scheduled) && messageObject.isUnread()) {
                    arrayList.add(messageObject);
                }
                ArrayList arrayList2 = (ArrayList) longSparseArray.get(tLRPC$Message.dialog_id);
                if (arrayList2 == null) {
                    arrayList2 = new ArrayList();
                    longSparseArray.put(tLRPC$Message.dialog_id, arrayList2);
                }
                arrayList2.add(messageObject);
            }
            AndroidUtilities.runOnUIThread(new Runnable(longSparseArray) {
                public final /* synthetic */ LongSparseArray f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$249$MessagesController(this.f$1);
                }
            });
            getMessagesStorage().getStorageQueue().postRunnable(new Runnable(arrayList, tLRPC$updates_Difference2) {
                public final /* synthetic */ ArrayList f$1;
                public final /* synthetic */ TLRPC$updates_Difference f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    MessagesController.this.lambda$null$251$MessagesController(this.f$1, this.f$2);
                }
            });
            getSecretChatHelper().processPendingEncMessages();
        }
        if (!tLRPC$updates_Difference2.other_updates.isEmpty()) {
            processUpdateArray(tLRPC$updates_Difference2.other_updates, tLRPC$updates_Difference2.users, tLRPC$updates_Difference2.chats, true, 0);
        }
        if (tLRPC$updates_Difference2 instanceof TLRPC$TL_updates_difference) {
            this.gettingDifference = false;
            getMessagesStorage().setLastSeqValue(tLRPC$updates_Difference2.state.seq);
            getMessagesStorage().setLastDateValue(tLRPC$updates_Difference2.state.date);
            getMessagesStorage().setLastPtsValue(tLRPC$updates_Difference2.state.pts);
            getMessagesStorage().setLastQtsValue(tLRPC$updates_Difference2.state.qts);
            getConnectionsManager().setIsUpdating(false);
            while (i < 3) {
                processUpdatesQueue(i, 1);
                i++;
            }
        } else if (tLRPC$updates_Difference2 instanceof TLRPC$TL_updates_differenceSlice) {
            getMessagesStorage().setLastDateValue(tLRPC$updates_Difference2.intermediate_state.date);
            getMessagesStorage().setLastPtsValue(tLRPC$updates_Difference2.intermediate_state.pts);
            getMessagesStorage().setLastQtsValue(tLRPC$updates_Difference2.intermediate_state.qts);
        } else if (tLRPC$updates_Difference2 instanceof TLRPC$TL_updates_differenceEmpty) {
            this.gettingDifference = false;
            getMessagesStorage().setLastSeqValue(tLRPC$updates_Difference2.seq);
            getMessagesStorage().setLastDateValue(tLRPC$updates_Difference2.date);
            getConnectionsManager().setIsUpdating(false);
            while (i < 3) {
                processUpdatesQueue(i, 1);
                i++;
            }
        }
        getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("received difference with date = " + getMessagesStorage().getLastDateValue() + " pts = " + getMessagesStorage().getLastPtsValue() + " seq = " + getMessagesStorage().getLastSeqValue() + " messages = " + tLRPC$updates_Difference2.new_messages.size() + " users = " + tLRPC$updates_Difference2.users.size() + " chats = " + tLRPC$updates_Difference2.chats.size() + " other updates = " + tLRPC$updates_Difference2.other_updates.size());
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$249 */
    public /* synthetic */ void lambda$null$249$MessagesController(LongSparseArray longSparseArray) {
        for (int i = 0; i < longSparseArray.size(); i++) {
            updateInterfaceWithMessages(longSparseArray.keyAt(i), (ArrayList) longSparseArray.valueAt(i), false);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$251 */
    public /* synthetic */ void lambda$null$251$MessagesController(ArrayList arrayList, TLRPC$updates_Difference tLRPC$updates_Difference) {
        if (!arrayList.isEmpty()) {
            AndroidUtilities.runOnUIThread(new Runnable(arrayList, tLRPC$updates_Difference) {
                public final /* synthetic */ ArrayList f$1;
                public final /* synthetic */ TLRPC$updates_Difference f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    MessagesController.this.lambda$null$250$MessagesController(this.f$1, this.f$2);
                }
            });
        }
        getMessagesStorage().putMessages(tLRPC$updates_Difference.new_messages, true, false, false, getDownloadController().getAutodownloadMask(), false);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$250 */
    public /* synthetic */ void lambda$null$250$MessagesController(ArrayList arrayList, TLRPC$updates_Difference tLRPC$updates_Difference) {
        getNotificationsController().processNewMessages(arrayList, !(tLRPC$updates_Difference instanceof TLRPC$TL_updates_differenceSlice), false, (CountDownLatch) null);
    }

    public void markDialogAsUnread(long j, TLRPC$InputPeer tLRPC$InputPeer, long j2) {
        NativeByteBuffer nativeByteBuffer;
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
        NativeByteBuffer nativeByteBuffer2 = null;
        if (tLRPC$Dialog != null) {
            tLRPC$Dialog.unread_mark = true;
            if (tLRPC$Dialog.unread_count == 0 && !isDialogMuted(j)) {
                this.unreadUnmutedDialogs++;
            }
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 256);
            getMessagesStorage().setDialogUnread(j, true);
            int i = 0;
            while (true) {
                DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                if (i < dialogFilterArr.length) {
                    if (dialogFilterArr[i] != null && (dialogFilterArr[i].flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                        sortDialogs((SparseArray<TLRPC$Chat>) null);
                        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                        break;
                    }
                    i++;
                } else {
                    break;
                }
            }
        }
        int i2 = (int) j;
        if (i2 != 0) {
            TLRPC$TL_messages_markDialogUnread tLRPC$TL_messages_markDialogUnread = new TLRPC$TL_messages_markDialogUnread();
            tLRPC$TL_messages_markDialogUnread.unread = true;
            if (tLRPC$InputPeer == null) {
                tLRPC$InputPeer = getInputPeer(i2);
            }
            if (!(tLRPC$InputPeer instanceof TLRPC$TL_inputPeerEmpty)) {
                TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
                tLRPC$TL_inputDialogPeer.peer = tLRPC$InputPeer;
                tLRPC$TL_messages_markDialogUnread.peer = tLRPC$TL_inputDialogPeer;
                if (j2 == 0) {
                    try {
                        nativeByteBuffer = new NativeByteBuffer(tLRPC$InputPeer.getObjectSize() + 12);
                        try {
                            nativeByteBuffer.writeInt32(9);
                            nativeByteBuffer.writeInt64(j);
                            tLRPC$InputPeer.serializeToStream(nativeByteBuffer);
                        } catch (Exception e) {
                            e = e;
                            nativeByteBuffer2 = nativeByteBuffer;
                        }
                    } catch (Exception e2) {
                        e = e2;
                        FileLog.e((Throwable) e);
                        nativeByteBuffer = nativeByteBuffer2;
                        j2 = getMessagesStorage().createPendingTask(nativeByteBuffer);
                        getConnectionsManager().sendRequest(tLRPC$TL_messages_markDialogUnread, new RequestDelegate(j2) {
                            public final /* synthetic */ long f$1;

                            {
                                this.f$1 = r2;
                            }

                            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                MessagesController.this.lambda$markDialogAsUnread$255$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                            }
                        });
                    }
                    j2 = getMessagesStorage().createPendingTask(nativeByteBuffer);
                }
                getConnectionsManager().sendRequest(tLRPC$TL_messages_markDialogUnread, new RequestDelegate(j2) {
                    public final /* synthetic */ long f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$markDialogAsUnread$255$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                    }
                });
            }
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$markDialogAsUnread$255 */
    public /* synthetic */ void lambda$markDialogAsUnread$255$MessagesController(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public void loadUnreadDialogs() {
        if (!this.loadingUnreadDialogs && !getUserConfig().unreadDialogsLoaded) {
            this.loadingUnreadDialogs = true;
            getConnectionsManager().sendRequest(new TLRPC$TL_messages_getDialogUnreadMarks(), new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$loadUnreadDialogs$257$MessagesController(tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$loadUnreadDialogs$257 */
    public /* synthetic */ void lambda$loadUnreadDialogs$257$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable(tLObject) {
            public final /* synthetic */ TLObject f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$256$MessagesController(this.f$1);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$256 */
    public /* synthetic */ void lambda$null$256$MessagesController(TLObject tLObject) {
        long j;
        int i;
        if (tLObject != null) {
            TLRPC$Vector tLRPC$Vector = (TLRPC$Vector) tLObject;
            int size = tLRPC$Vector.objects.size();
            for (int i2 = 0; i2 < size; i2++) {
                TLRPC$DialogPeer tLRPC$DialogPeer = (TLRPC$DialogPeer) tLRPC$Vector.objects.get(i2);
                if (tLRPC$DialogPeer instanceof TLRPC$TL_dialogPeer) {
                    TLRPC$Peer tLRPC$Peer = ((TLRPC$TL_dialogPeer) tLRPC$DialogPeer).peer;
                    int i3 = tLRPC$Peer.user_id;
                    if (i3 != 0) {
                        j = (long) i3;
                    } else {
                        int i4 = tLRPC$Peer.chat_id;
                        if (i4 != 0) {
                            i = -i4;
                        } else {
                            i = -tLRPC$Peer.channel_id;
                        }
                        j = (long) i;
                    }
                    getMessagesStorage().setDialogUnread(j, true);
                    TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
                    if (tLRPC$Dialog != null && !tLRPC$Dialog.unread_mark) {
                        tLRPC$Dialog.unread_mark = true;
                        if (tLRPC$Dialog.unread_count == 0 && !isDialogMuted(j)) {
                            this.unreadUnmutedDialogs++;
                        }
                    }
                }
            }
            getUserConfig().unreadDialogsLoaded = true;
            getUserConfig().saveConfig(false);
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 256);
            this.loadingUnreadDialogs = false;
        }
    }

    public void reorderPinnedDialogs(int i, ArrayList<TLRPC$InputDialogPeer> arrayList, long j) {
        NativeByteBuffer nativeByteBuffer;
        TLRPC$TL_messages_reorderPinnedDialogs tLRPC$TL_messages_reorderPinnedDialogs = new TLRPC$TL_messages_reorderPinnedDialogs();
        tLRPC$TL_messages_reorderPinnedDialogs.folder_id = i;
        tLRPC$TL_messages_reorderPinnedDialogs.force = true;
        if (j == 0) {
            ArrayList<TLRPC$Dialog> dialogs = getDialogs(i);
            if (!dialogs.isEmpty()) {
                ArrayList arrayList2 = new ArrayList();
                ArrayList arrayList3 = new ArrayList();
                int size = dialogs.size();
                int i2 = 0;
                for (int i3 = 0; i3 < size; i3++) {
                    TLRPC$Dialog tLRPC$Dialog = dialogs.get(i3);
                    if (!(tLRPC$Dialog instanceof TLRPC$TL_dialogFolder)) {
                        if (tLRPC$Dialog.pinned) {
                            arrayList2.add(Long.valueOf(tLRPC$Dialog.id));
                            arrayList3.add(Integer.valueOf(tLRPC$Dialog.pinnedNum));
                            if (((int) tLRPC$Dialog.id) != 0) {
                                TLRPC$InputPeer inputPeer = getInputPeer((int) dialogs.get(i3).id);
                                TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
                                tLRPC$TL_inputDialogPeer.peer = inputPeer;
                                tLRPC$TL_messages_reorderPinnedDialogs.order.add(tLRPC$TL_inputDialogPeer);
                                i2 += tLRPC$TL_inputDialogPeer.getObjectSize();
                            }
                        } else if (tLRPC$Dialog.id != this.promoDialogId) {
                            break;
                        }
                    }
                }
                getMessagesStorage().setDialogsPinned(arrayList2, arrayList3);
                NativeByteBuffer nativeByteBuffer2 = null;
                try {
                    nativeByteBuffer = new NativeByteBuffer(i2 + 12);
                    try {
                        nativeByteBuffer.writeInt32(16);
                        nativeByteBuffer.writeInt32(i);
                        nativeByteBuffer.writeInt32(tLRPC$TL_messages_reorderPinnedDialogs.order.size());
                        int size2 = tLRPC$TL_messages_reorderPinnedDialogs.order.size();
                        for (int i4 = 0; i4 < size2; i4++) {
                            tLRPC$TL_messages_reorderPinnedDialogs.order.get(i4).serializeToStream(nativeByteBuffer);
                        }
                    } catch (Exception e) {
                        e = e;
                        nativeByteBuffer2 = nativeByteBuffer;
                        FileLog.e((Throwable) e);
                        nativeByteBuffer = nativeByteBuffer2;
                        j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                        getConnectionsManager().sendRequest(tLRPC$TL_messages_reorderPinnedDialogs, new RequestDelegate(j) {
                            public final /* synthetic */ long f$1;

                            {
                                this.f$1 = r2;
                            }

                            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                MessagesController.this.lambda$reorderPinnedDialogs$258$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                            }
                        });
                    }
                } catch (Exception e2) {
                    e = e2;
                    FileLog.e((Throwable) e);
                    nativeByteBuffer = nativeByteBuffer2;
                    j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                    getConnectionsManager().sendRequest(tLRPC$TL_messages_reorderPinnedDialogs, new RequestDelegate(j) {
                        public final /* synthetic */ long f$1;

                        {
                            this.f$1 = r2;
                        }

                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$reorderPinnedDialogs$258$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                        }
                    });
                }
                j = getMessagesStorage().createPendingTask(nativeByteBuffer);
            } else {
                return;
            }
        } else {
            tLRPC$TL_messages_reorderPinnedDialogs.order = arrayList;
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_reorderPinnedDialogs, new RequestDelegate(j) {
            public final /* synthetic */ long f$1;

            {
                this.f$1 = r2;
            }

            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$reorderPinnedDialogs$258$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$reorderPinnedDialogs$258 */
    public /* synthetic */ void lambda$reorderPinnedDialogs$258$MessagesController(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public boolean pinDialog(long j, boolean z, TLRPC$InputPeer tLRPC$InputPeer, long j2) {
        long j3;
        NativeByteBuffer nativeByteBuffer;
        long j4 = j;
        boolean z2 = z;
        int i = (int) j4;
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j4);
        if (tLRPC$Dialog != null && tLRPC$Dialog.pinned != z2) {
            int i2 = tLRPC$Dialog.folder_id;
            ArrayList<TLRPC$Dialog> dialogs = getDialogs(i2);
            tLRPC$Dialog.pinned = z2;
            if (z2) {
                int i3 = 0;
                for (int i4 = 0; i4 < dialogs.size(); i4++) {
                    TLRPC$Dialog tLRPC$Dialog2 = dialogs.get(i4);
                    if (!(tLRPC$Dialog2 instanceof TLRPC$TL_dialogFolder)) {
                        if (tLRPC$Dialog2.pinned) {
                            i3 = Math.max(tLRPC$Dialog2.pinnedNum, i3);
                        } else if (tLRPC$Dialog2.id != this.promoDialogId) {
                            break;
                        }
                    }
                }
                tLRPC$Dialog.pinnedNum = i3 + 1;
            } else {
                tLRPC$Dialog.pinnedNum = 0;
            }
            NativeByteBuffer nativeByteBuffer2 = null;
            sortDialogs((SparseArray<TLRPC$Chat>) null);
            if (!z2 && !dialogs.isEmpty() && dialogs.get(dialogs.size() - 1) == tLRPC$Dialog && !this.dialogsEndReached.get(i2)) {
                dialogs.remove(dialogs.size() - 1);
            }
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
            if (!(i == 0 || j2 == -1)) {
                TLRPC$TL_messages_toggleDialogPin tLRPC$TL_messages_toggleDialogPin = new TLRPC$TL_messages_toggleDialogPin();
                tLRPC$TL_messages_toggleDialogPin.pinned = z2;
                TLRPC$InputPeer inputPeer = tLRPC$InputPeer == null ? getInputPeer(i) : tLRPC$InputPeer;
                if (inputPeer instanceof TLRPC$TL_inputPeerEmpty) {
                    return false;
                }
                TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
                tLRPC$TL_inputDialogPeer.peer = inputPeer;
                tLRPC$TL_messages_toggleDialogPin.peer = tLRPC$TL_inputDialogPeer;
                if (j2 == 0) {
                    try {
                        nativeByteBuffer = new NativeByteBuffer(inputPeer.getObjectSize() + 16);
                        try {
                            nativeByteBuffer.writeInt32(4);
                            nativeByteBuffer.writeInt64(j4);
                            nativeByteBuffer.writeBool(z2);
                            inputPeer.serializeToStream(nativeByteBuffer);
                        } catch (Exception e) {
                            e = e;
                            nativeByteBuffer2 = nativeByteBuffer;
                        }
                    } catch (Exception e2) {
                        e = e2;
                        FileLog.e((Throwable) e);
                        nativeByteBuffer = nativeByteBuffer2;
                        j3 = getMessagesStorage().createPendingTask(nativeByteBuffer);
                        getConnectionsManager().sendRequest(tLRPC$TL_messages_toggleDialogPin, new RequestDelegate(j3) {
                            public final /* synthetic */ long f$1;

                            {
                                this.f$1 = r2;
                            }

                            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                MessagesController.this.lambda$pinDialog$259$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                            }
                        });
                        getMessagesStorage().setDialogPinned(j4, tLRPC$Dialog.pinnedNum);
                        return true;
                    }
                    j3 = getMessagesStorage().createPendingTask(nativeByteBuffer);
                } else {
                    j3 = j2;
                }
                getConnectionsManager().sendRequest(tLRPC$TL_messages_toggleDialogPin, new RequestDelegate(j3) {
                    public final /* synthetic */ long f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$pinDialog$259$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                    }
                });
            }
            getMessagesStorage().setDialogPinned(j4, tLRPC$Dialog.pinnedNum);
            return true;
        } else if (tLRPC$Dialog != null) {
            return true;
        } else {
            return false;
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$pinDialog$259 */
    public /* synthetic */ void lambda$pinDialog$259$MessagesController(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public void loadPinnedDialogs(int i, long j, ArrayList<Long> arrayList) {
        if (this.loadingPinnedDialogs.indexOfKey(i) < 0 && !getUserConfig().isPinnedDialogsLoaded(i)) {
            this.loadingPinnedDialogs.put(i, 1);
            TLRPC$TL_messages_getPinnedDialogs tLRPC$TL_messages_getPinnedDialogs = new TLRPC$TL_messages_getPinnedDialogs();
            tLRPC$TL_messages_getPinnedDialogs.folder_id = i;
            getConnectionsManager().sendRequest(tLRPC$TL_messages_getPinnedDialogs, new RequestDelegate(i) {
                public final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$loadPinnedDialogs$262$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$loadPinnedDialogs$262 */
    public /* synthetic */ void lambda$loadPinnedDialogs$262$MessagesController(int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        MessageObject messageObject;
        TLRPC$Chat tLRPC$Chat;
        TLRPC$Chat tLRPC$Chat2;
        if (tLObject != null) {
            TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject;
            ArrayList arrayList = new ArrayList(tLRPC$TL_messages_peerDialogs.dialogs);
            fetchFolderInLoadedPinnedDialogs(tLRPC$TL_messages_peerDialogs);
            TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
            tLRPC$TL_messages_dialogs.users.addAll(tLRPC$TL_messages_peerDialogs.users);
            tLRPC$TL_messages_dialogs.chats.addAll(tLRPC$TL_messages_peerDialogs.chats);
            tLRPC$TL_messages_dialogs.dialogs.addAll(tLRPC$TL_messages_peerDialogs.dialogs);
            tLRPC$TL_messages_dialogs.messages.addAll(tLRPC$TL_messages_peerDialogs.messages);
            LongSparseArray longSparseArray = new LongSparseArray();
            SparseArray sparseArray = new SparseArray();
            SparseArray sparseArray2 = new SparseArray();
            for (int i2 = 0; i2 < tLRPC$TL_messages_peerDialogs.users.size(); i2++) {
                TLRPC$User tLRPC$User = tLRPC$TL_messages_peerDialogs.users.get(i2);
                sparseArray.put(tLRPC$User.id, tLRPC$User);
            }
            for (int i3 = 0; i3 < tLRPC$TL_messages_peerDialogs.chats.size(); i3++) {
                TLRPC$Chat tLRPC$Chat3 = tLRPC$TL_messages_peerDialogs.chats.get(i3);
                sparseArray2.put(tLRPC$Chat3.id, tLRPC$Chat3);
            }
            for (int i4 = 0; i4 < tLRPC$TL_messages_peerDialogs.messages.size(); i4++) {
                TLRPC$Message tLRPC$Message = tLRPC$TL_messages_peerDialogs.messages.get(i4);
                TLRPC$Peer tLRPC$Peer = tLRPC$Message.peer_id;
                int i5 = tLRPC$Peer.channel_id;
                if (i5 != 0) {
                    TLRPC$Chat tLRPC$Chat4 = (TLRPC$Chat) sparseArray2.get(i5);
                    if (tLRPC$Chat4 != null && tLRPC$Chat4.left) {
                    }
                } else {
                    int i6 = tLRPC$Peer.chat_id;
                    if (!(i6 == 0 || (tLRPC$Chat2 = (TLRPC$Chat) sparseArray2.get(i6)) == null || tLRPC$Chat2.migrated_to == null)) {
                    }
                }
                MessageObject messageObject2 = r9;
                MessageObject messageObject3 = new MessageObject(this.currentAccount, tLRPC$Message, (SparseArray<TLRPC$User>) sparseArray, (SparseArray<TLRPC$Chat>) sparseArray2, false, true);
                longSparseArray.put(messageObject2.getDialogId(), messageObject2);
            }
            boolean z = !arrayList.isEmpty() && (arrayList.get(0) instanceof TLRPC$TL_dialogFolder);
            int size = arrayList.size();
            for (int i7 = 0; i7 < size; i7++) {
                TLRPC$Dialog tLRPC$Dialog = (TLRPC$Dialog) arrayList.get(i7);
                tLRPC$Dialog.pinned = true;
                DialogObject.initDialog(tLRPC$Dialog);
                if (DialogObject.isChannel(tLRPC$Dialog)) {
                    TLRPC$Chat tLRPC$Chat5 = (TLRPC$Chat) sparseArray2.get(-((int) tLRPC$Dialog.id));
                    if (tLRPC$Chat5 != null && tLRPC$Chat5.left) {
                    }
                } else {
                    long j = tLRPC$Dialog.id;
                    if (!(((int) j) >= 0 || (tLRPC$Chat = (TLRPC$Chat) sparseArray2.get(-((int) j))) == null || tLRPC$Chat.migrated_to == null)) {
                    }
                }
                if (tLRPC$Dialog.last_message_date == 0 && (messageObject = (MessageObject) longSparseArray.get(tLRPC$Dialog.id)) != null) {
                    tLRPC$Dialog.last_message_date = messageObject.messageOwner.date;
                }
                Integer num = (Integer) this.dialogs_read_inbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                if (num == null) {
                    num = 0;
                }
                this.dialogs_read_inbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num.intValue(), tLRPC$Dialog.read_inbox_max_id)));
                Integer num2 = (Integer) this.dialogs_read_outbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                if (num2 == null) {
                    num2 = 0;
                }
                this.dialogs_read_outbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num2.intValue(), tLRPC$Dialog.read_outbox_max_id)));
            }
            getMessagesStorage().getStorageQueue().postRunnable(new Runnable(i, arrayList, z, tLRPC$TL_messages_peerDialogs, longSparseArray, tLRPC$TL_messages_dialogs) {
                public final /* synthetic */ int f$1;
                public final /* synthetic */ ArrayList f$2;
                public final /* synthetic */ boolean f$3;
                public final /* synthetic */ TLRPC$TL_messages_peerDialogs f$4;
                public final /* synthetic */ LongSparseArray f$5;
                public final /* synthetic */ TLRPC$TL_messages_dialogs f$6;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r5;
                    this.f$5 = r6;
                    this.f$6 = r7;
                }

                public final void run() {
                    MessagesController.this.lambda$null$261$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$261 */
    public /* synthetic */ void lambda$null$261$MessagesController(int i, ArrayList arrayList, boolean z, TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs, LongSparseArray longSparseArray, TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs) {
        AndroidUtilities.runOnUIThread(new Runnable(i, arrayList, z, tLRPC$TL_messages_peerDialogs, longSparseArray, tLRPC$TL_messages_dialogs) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ ArrayList f$2;
            public final /* synthetic */ boolean f$3;
            public final /* synthetic */ TLRPC$TL_messages_peerDialogs f$4;
            public final /* synthetic */ LongSparseArray f$5;
            public final /* synthetic */ TLRPC$TL_messages_dialogs f$6;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
            }

            public final void run() {
                MessagesController.this.lambda$null$260$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$260 */
    public /* synthetic */ void lambda$null$260$MessagesController(int i, ArrayList arrayList, boolean z, TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs, LongSparseArray longSparseArray, TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs) {
        boolean z2;
        boolean z3;
        ArrayList arrayList2;
        int i2 = i;
        ArrayList arrayList3 = arrayList;
        TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs2 = tLRPC$TL_messages_peerDialogs;
        this.loadingPinnedDialogs.delete(i2);
        applyDialogsNotificationsSettings(arrayList3);
        ArrayList<TLRPC$Dialog> dialogs = getDialogs(i);
        int i3 = z;
        int i4 = 0;
        boolean z4 = false;
        for (int i5 = 0; i5 < dialogs.size(); i5++) {
            TLRPC$Dialog tLRPC$Dialog = dialogs.get(i5);
            if (!(tLRPC$Dialog instanceof TLRPC$TL_dialogFolder)) {
                long j = tLRPC$Dialog.id;
                if (((int) j) == 0) {
                    if (i3 < arrayList.size()) {
                        arrayList3.add(i3, tLRPC$Dialog);
                    } else {
                        arrayList3.add(tLRPC$Dialog);
                    }
                    i3++;
                } else if (tLRPC$Dialog.pinned) {
                    i4 = Math.max(tLRPC$Dialog.pinnedNum, i4);
                    tLRPC$Dialog.pinned = false;
                    tLRPC$Dialog.pinnedNum = 0;
                    i3++;
                    z4 = true;
                } else if (j != this.promoDialogId) {
                    break;
                }
            }
        }
        ArrayList arrayList4 = new ArrayList();
        if (!arrayList.isEmpty()) {
            putUsers(tLRPC$TL_messages_peerDialogs2.users, false);
            putChats(tLRPC$TL_messages_peerDialogs2.chats, false);
            ArrayList arrayList5 = new ArrayList();
            ArrayList arrayList6 = new ArrayList();
            int size = arrayList.size();
            int i6 = 0;
            z2 = false;
            while (i6 < size) {
                TLRPC$Dialog tLRPC$Dialog2 = (TLRPC$Dialog) arrayList3.get(i6);
                tLRPC$Dialog2.pinnedNum = (size - i6) + i4;
                arrayList4.add(Long.valueOf(tLRPC$Dialog2.id));
                TLRPC$Dialog tLRPC$Dialog3 = this.dialogs_dict.get(tLRPC$Dialog2.id);
                if (tLRPC$Dialog3 != null) {
                    tLRPC$Dialog3.pinned = true;
                    tLRPC$Dialog3.pinnedNum = tLRPC$Dialog2.pinnedNum;
                    arrayList5.add(Long.valueOf(tLRPC$Dialog2.id));
                    arrayList6.add(Integer.valueOf(tLRPC$Dialog2.pinnedNum));
                    LongSparseArray longSparseArray2 = longSparseArray;
                    arrayList2 = arrayList6;
                } else {
                    this.dialogs_dict.put(tLRPC$Dialog2.id, tLRPC$Dialog2);
                    MessageObject messageObject = (MessageObject) longSparseArray.get(tLRPC$Dialog2.id);
                    arrayList2 = arrayList6;
                    this.dialogMessage.put(tLRPC$Dialog2.id, messageObject);
                    if (messageObject != null && messageObject.messageOwner.peer_id.channel_id == 0) {
                        this.dialogMessagesByIds.put(messageObject.getId(), messageObject);
                        this.dialogsLoadedTillDate = Math.min(this.dialogsLoadedTillDate, messageObject.messageOwner.date);
                        long j2 = messageObject.messageOwner.random_id;
                        if (j2 != 0) {
                            this.dialogMessagesByRandomIds.put(j2, messageObject);
                        }
                    }
                    z2 = true;
                }
                i6++;
                arrayList6 = arrayList2;
                z4 = true;
            }
            getMessagesStorage().setDialogsPinned(arrayList5, arrayList6);
        } else {
            z2 = false;
        }
        if (z4) {
            if (z2) {
                this.allDialogs.clear();
                int size2 = this.dialogs_dict.size();
                for (int i7 = 0; i7 < size2; i7++) {
                    this.allDialogs.add(this.dialogs_dict.valueAt(i7));
                }
            }
            sortDialogs((SparseArray<TLRPC$Chat>) null);
            z3 = false;
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        } else {
            z3 = false;
        }
        getMessagesStorage().unpinAllDialogsExceptNew(arrayList4, i2);
        getMessagesStorage().putDialogs(tLRPC$TL_messages_dialogs, 1);
        getUserConfig().setPinnedDialogsLoaded(i2, true);
        getUserConfig().saveConfig(z3);
    }

    public void generateJoinMessage(int i, boolean z) {
        TLRPC$Chat chat = getChat(Integer.valueOf(i));
        if (chat != null && ChatObject.isChannel(i, this.currentAccount)) {
            if ((!chat.left && !chat.kicked) || z) {
                TLRPC$TL_messageService tLRPC$TL_messageService = new TLRPC$TL_messageService();
                tLRPC$TL_messageService.flags = 256;
                int newMessageId = getUserConfig().getNewMessageId();
                tLRPC$TL_messageService.id = newMessageId;
                tLRPC$TL_messageService.local_id = newMessageId;
                tLRPC$TL_messageService.date = getConnectionsManager().getCurrentTime();
                TLRPC$TL_peerUser tLRPC$TL_peerUser = new TLRPC$TL_peerUser();
                tLRPC$TL_messageService.from_id = tLRPC$TL_peerUser;
                tLRPC$TL_peerUser.user_id = getUserConfig().getClientUserId();
                TLRPC$TL_peerChannel tLRPC$TL_peerChannel = new TLRPC$TL_peerChannel();
                tLRPC$TL_messageService.peer_id = tLRPC$TL_peerChannel;
                tLRPC$TL_peerChannel.channel_id = i;
                tLRPC$TL_messageService.dialog_id = (long) (-i);
                tLRPC$TL_messageService.post = true;
                TLRPC$TL_messageActionChatAddUser tLRPC$TL_messageActionChatAddUser = new TLRPC$TL_messageActionChatAddUser();
                tLRPC$TL_messageService.action = tLRPC$TL_messageActionChatAddUser;
                tLRPC$TL_messageActionChatAddUser.users.add(Integer.valueOf(getUserConfig().getClientUserId()));
                getUserConfig().saveConfig(false);
                ArrayList arrayList = new ArrayList();
                ArrayList arrayList2 = new ArrayList();
                arrayList2.add(tLRPC$TL_messageService);
                arrayList.add(new MessageObject(this.currentAccount, tLRPC$TL_messageService, true, false));
                getMessagesStorage().getStorageQueue().postRunnable(new Runnable(arrayList) {
                    public final /* synthetic */ ArrayList f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run() {
                        MessagesController.this.lambda$generateJoinMessage$264$MessagesController(this.f$1);
                    }
                });
                getMessagesStorage().putMessages((ArrayList<TLRPC$Message>) arrayList2, true, true, false, 0, false);
                AndroidUtilities.runOnUIThread(new Runnable(i, arrayList) {
                    public final /* synthetic */ int f$1;
                    public final /* synthetic */ ArrayList f$2;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                    }

                    public final void run() {
                        MessagesController.this.lambda$generateJoinMessage$265$MessagesController(this.f$1, this.f$2);
                    }
                });
            }
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$generateJoinMessage$264 */
    public /* synthetic */ void lambda$generateJoinMessage$264$MessagesController(ArrayList arrayList) {
        AndroidUtilities.runOnUIThread(new Runnable(arrayList) {
            public final /* synthetic */ ArrayList f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$263$MessagesController(this.f$1);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$263 */
    public /* synthetic */ void lambda$null$263$MessagesController(ArrayList arrayList) {
        getNotificationsController().processNewMessages(arrayList, true, false, (CountDownLatch) null);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$generateJoinMessage$265 */
    public /* synthetic */ void lambda$generateJoinMessage$265$MessagesController(int i, ArrayList arrayList) {
        updateInterfaceWithMessages((long) (-i), arrayList, false);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    /* access modifiers changed from: protected */
    public void deleteMessagesByPush(long j, ArrayList<Integer> arrayList, int i) {
        getMessagesStorage().getStorageQueue().postRunnable(new Runnable(arrayList, i, j) {
            public final /* synthetic */ ArrayList f$1;
            public final /* synthetic */ int f$2;
            public final /* synthetic */ long f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesController.this.lambda$deleteMessagesByPush$267$MessagesController(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$deleteMessagesByPush$267 */
    public /* synthetic */ void lambda$deleteMessagesByPush$267$MessagesController(ArrayList arrayList, int i, long j) {
        AndroidUtilities.runOnUIThread(new Runnable(arrayList, i) {
            public final /* synthetic */ ArrayList f$1;
            public final /* synthetic */ int f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$null$266$MessagesController(this.f$1, this.f$2);
            }
        });
        getMessagesStorage().deletePushMessages(j, arrayList);
        getMessagesStorage().updateDialogsWithDeletedMessages(arrayList, getMessagesStorage().markMessagesAsDeleted(arrayList, false, i, true, false), false, i);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$266 */
    public /* synthetic */ void lambda$null$266$MessagesController(ArrayList arrayList, int i) {
        int i2 = 0;
        getNotificationCenter().postNotificationName(NotificationCenter.messagesDeleted, arrayList, Integer.valueOf(i), Boolean.FALSE);
        if (i == 0) {
            int size = arrayList.size();
            while (i2 < size) {
                MessageObject messageObject = this.dialogMessagesByIds.get(((Integer) arrayList.get(i2)).intValue());
                if (messageObject != null) {
                    messageObject.deleted = true;
                }
                i2++;
            }
            return;
        }
        MessageObject messageObject2 = this.dialogMessage.get((long) (-i));
        if (messageObject2 != null) {
            int size2 = arrayList.size();
            while (i2 < size2) {
                if (messageObject2.getId() == ((Integer) arrayList.get(i2)).intValue()) {
                    messageObject2.deleted = true;
                    return;
                }
                i2++;
            }
        }
    }

    public void checkChatInviter(int i, boolean z) {
        TLRPC$Chat chat = getChat(Integer.valueOf(i));
        if (ChatObject.isChannel(chat) && !chat.creator && this.gettingChatInviters.indexOfKey(i) < 0) {
            this.gettingChatInviters.put(i, true);
            TLRPC$TL_channels_getParticipant tLRPC$TL_channels_getParticipant = new TLRPC$TL_channels_getParticipant();
            tLRPC$TL_channels_getParticipant.channel = getInputChannel(i);
            tLRPC$TL_channels_getParticipant.user_id = new TLRPC$TL_inputUserSelf();
            getConnectionsManager().sendRequest(tLRPC$TL_channels_getParticipant, new RequestDelegate(chat, z, i) {
                public final /* synthetic */ TLRPC$Chat f$1;
                public final /* synthetic */ boolean f$2;
                public final /* synthetic */ int f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$checkChatInviter$272$MessagesController(this.f$1, this.f$2, this.f$3, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$checkChatInviter$272 */
    public /* synthetic */ void lambda$checkChatInviter$272$MessagesController(TLRPC$Chat tLRPC$Chat, boolean z, int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        TLRPC$Chat tLRPC$Chat2 = tLRPC$Chat;
        int i2 = i;
        TLRPC$TL_channels_channelParticipant tLRPC$TL_channels_channelParticipant = (TLRPC$TL_channels_channelParticipant) tLObject;
        if (tLRPC$TL_channels_channelParticipant != null) {
            TLRPC$ChannelParticipant tLRPC$ChannelParticipant = tLRPC$TL_channels_channelParticipant.participant;
            if ((tLRPC$ChannelParticipant instanceof TLRPC$TL_channelParticipantSelf) && tLRPC$ChannelParticipant.inviter_id != getUserConfig().getClientUserId()) {
                if (!tLRPC$Chat2.megagroup || !getMessagesStorage().isMigratedChat(tLRPC$Chat2.id)) {
                    AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_channels_channelParticipant) {
                        public final /* synthetic */ TLRPC$TL_channels_channelParticipant f$1;

                        {
                            this.f$1 = r2;
                        }

                        public final void run() {
                            MessagesController.this.lambda$null$268$MessagesController(this.f$1);
                        }
                    });
                    ArrayList arrayList = null;
                    getMessagesStorage().putUsersAndChats(tLRPC$TL_channels_channelParticipant.users, (ArrayList<TLRPC$Chat>) null, true, true);
                    if (z && !getMessagesStorage().hasInviteMeMessage(i2)) {
                        TLRPC$TL_messageService tLRPC$TL_messageService = new TLRPC$TL_messageService();
                        tLRPC$TL_messageService.media_unread = true;
                        tLRPC$TL_messageService.unread = true;
                        tLRPC$TL_messageService.flags = 256;
                        tLRPC$TL_messageService.post = true;
                        int newMessageId = getUserConfig().getNewMessageId();
                        tLRPC$TL_messageService.id = newMessageId;
                        tLRPC$TL_messageService.local_id = newMessageId;
                        tLRPC$TL_messageService.date = tLRPC$TL_channels_channelParticipant.participant.date;
                        tLRPC$TL_messageService.action = new TLRPC$TL_messageActionChatAddUser();
                        TLRPC$TL_peerUser tLRPC$TL_peerUser = new TLRPC$TL_peerUser();
                        tLRPC$TL_messageService.from_id = tLRPC$TL_peerUser;
                        tLRPC$TL_peerUser.user_id = tLRPC$TL_channels_channelParticipant.participant.inviter_id;
                        tLRPC$TL_messageService.action.users.add(Integer.valueOf(getUserConfig().getClientUserId()));
                        TLRPC$TL_peerChannel tLRPC$TL_peerChannel = new TLRPC$TL_peerChannel();
                        tLRPC$TL_messageService.peer_id = tLRPC$TL_peerChannel;
                        tLRPC$TL_peerChannel.channel_id = i2;
                        tLRPC$TL_messageService.dialog_id = (long) (-i2);
                        getUserConfig().saveConfig(false);
                        arrayList = new ArrayList();
                        ArrayList arrayList2 = new ArrayList();
                        ConcurrentHashMap concurrentHashMap = new ConcurrentHashMap();
                        for (int i3 = 0; i3 < tLRPC$TL_channels_channelParticipant.users.size(); i3++) {
                            TLRPC$User tLRPC$User = tLRPC$TL_channels_channelParticipant.users.get(i3);
                            concurrentHashMap.put(Integer.valueOf(tLRPC$User.id), tLRPC$User);
                        }
                        arrayList2.add(tLRPC$TL_messageService);
                        arrayList.add(new MessageObject(this.currentAccount, (TLRPC$Message) tLRPC$TL_messageService, (AbstractMap<Integer, TLRPC$User>) concurrentHashMap, true, false));
                        getMessagesStorage().getStorageQueue().postRunnable(new Runnable(arrayList) {
                            public final /* synthetic */ ArrayList f$1;

                            {
                                this.f$1 = r2;
                            }

                            public final void run() {
                                MessagesController.this.lambda$null$270$MessagesController(this.f$1);
                            }
                        });
                        getMessagesStorage().putMessages((ArrayList<TLRPC$Message>) arrayList2, true, true, false, 0, false);
                    }
                    getMessagesStorage().saveChatInviter(i2, tLRPC$TL_channels_channelParticipant.participant.inviter_id);
                    AndroidUtilities.runOnUIThread(new Runnable(i2, arrayList, tLRPC$TL_channels_channelParticipant) {
                        public final /* synthetic */ int f$1;
                        public final /* synthetic */ ArrayList f$2;
                        public final /* synthetic */ TLRPC$TL_channels_channelParticipant f$3;

                        {
                            this.f$1 = r2;
                            this.f$2 = r3;
                            this.f$3 = r4;
                        }

                        public final void run() {
                            MessagesController.this.lambda$null$271$MessagesController(this.f$1, this.f$2, this.f$3);
                        }
                    });
                }
            }
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$268 */
    public /* synthetic */ void lambda$null$268$MessagesController(TLRPC$TL_channels_channelParticipant tLRPC$TL_channels_channelParticipant) {
        putUsers(tLRPC$TL_channels_channelParticipant.users, false);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$269 */
    public /* synthetic */ void lambda$null$269$MessagesController(ArrayList arrayList) {
        getNotificationsController().processNewMessages(arrayList, true, false, (CountDownLatch) null);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$270 */
    public /* synthetic */ void lambda$null$270$MessagesController(ArrayList arrayList) {
        AndroidUtilities.runOnUIThread(new Runnable(arrayList) {
            public final /* synthetic */ ArrayList f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$269$MessagesController(this.f$1);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$271 */
    public /* synthetic */ void lambda$null$271$MessagesController(int i, ArrayList arrayList, TLRPC$TL_channels_channelParticipant tLRPC$TL_channels_channelParticipant) {
        this.gettingChatInviters.delete(i);
        if (arrayList != null) {
            updateInterfaceWithMessages((long) (-i), arrayList, false);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.didLoadChatInviter, Integer.valueOf(i), Integer.valueOf(tLRPC$TL_channels_channelParticipant.participant.inviter_id));
    }

    private int getUpdateType(TLRPC$Update tLRPC$Update) {
        if ((tLRPC$Update instanceof TLRPC$TL_updateNewMessage) || (tLRPC$Update instanceof TLRPC$TL_updateReadMessagesContents) || (tLRPC$Update instanceof TLRPC$TL_updateReadHistoryInbox) || (tLRPC$Update instanceof TLRPC$TL_updateReadHistoryOutbox) || (tLRPC$Update instanceof TLRPC$TL_updateDeleteMessages) || (tLRPC$Update instanceof TLRPC$TL_updateWebPage) || (tLRPC$Update instanceof TLRPC$TL_updateEditMessage) || (tLRPC$Update instanceof TLRPC$TL_updateFolderPeers) || (tLRPC$Update instanceof TLRPC$TL_updatePinnedMessages)) {
            return 0;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateNewEncryptedMessage) {
            return 1;
        }
        return ((tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) || (tLRPC$Update instanceof TLRPC$TL_updateDeleteChannelMessages) || (tLRPC$Update instanceof TLRPC$TL_updateEditChannelMessage) || (tLRPC$Update instanceof TLRPC$TL_updateChannelWebPage) || (tLRPC$Update instanceof TLRPC$TL_updatePinnedChannelMessages)) ? 2 : 3;
    }

    private static int getUpdatePts(TLRPC$Update tLRPC$Update) {
        if (tLRPC$Update instanceof TLRPC$TL_updateDeleteMessages) {
            return ((TLRPC$TL_updateDeleteMessages) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) {
            return ((TLRPC$TL_updateNewChannelMessage) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadHistoryOutbox) {
            return ((TLRPC$TL_updateReadHistoryOutbox) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateNewMessage) {
            return ((TLRPC$TL_updateNewMessage) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateEditMessage) {
            return ((TLRPC$TL_updateEditMessage) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateWebPage) {
            return ((TLRPC$TL_updateWebPage) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadHistoryInbox) {
            return ((TLRPC$TL_updateReadHistoryInbox) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelWebPage) {
            return ((TLRPC$TL_updateChannelWebPage) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateDeleteChannelMessages) {
            return ((TLRPC$TL_updateDeleteChannelMessages) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateEditChannelMessage) {
            return ((TLRPC$TL_updateEditChannelMessage) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadMessagesContents) {
            return ((TLRPC$TL_updateReadMessagesContents) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelTooLong) {
            return ((TLRPC$TL_updateChannelTooLong) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateFolderPeers) {
            return ((TLRPC$TL_updateFolderPeers) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updatePinnedChannelMessages) {
            return ((TLRPC$TL_updatePinnedChannelMessages) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updatePinnedMessages) {
            return ((TLRPC$TL_updatePinnedMessages) tLRPC$Update).pts;
        }
        return 0;
    }

    private static int getUpdatePtsCount(TLRPC$Update tLRPC$Update) {
        if (tLRPC$Update instanceof TLRPC$TL_updateDeleteMessages) {
            return ((TLRPC$TL_updateDeleteMessages) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) {
            return ((TLRPC$TL_updateNewChannelMessage) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadHistoryOutbox) {
            return ((TLRPC$TL_updateReadHistoryOutbox) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateNewMessage) {
            return ((TLRPC$TL_updateNewMessage) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateEditMessage) {
            return ((TLRPC$TL_updateEditMessage) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateWebPage) {
            return ((TLRPC$TL_updateWebPage) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadHistoryInbox) {
            return ((TLRPC$TL_updateReadHistoryInbox) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelWebPage) {
            return ((TLRPC$TL_updateChannelWebPage) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateDeleteChannelMessages) {
            return ((TLRPC$TL_updateDeleteChannelMessages) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateEditChannelMessage) {
            return ((TLRPC$TL_updateEditChannelMessage) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadMessagesContents) {
            return ((TLRPC$TL_updateReadMessagesContents) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateFolderPeers) {
            return ((TLRPC$TL_updateFolderPeers) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updatePinnedChannelMessages) {
            return ((TLRPC$TL_updatePinnedChannelMessages) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updatePinnedMessages) {
            return ((TLRPC$TL_updatePinnedMessages) tLRPC$Update).pts_count;
        }
        return 0;
    }

    private static int getUpdateQts(TLRPC$Update tLRPC$Update) {
        if (tLRPC$Update instanceof TLRPC$TL_updateNewEncryptedMessage) {
            return ((TLRPC$TL_updateNewEncryptedMessage) tLRPC$Update).qts;
        }
        return 0;
    }

    public static int getUpdateChannelId(TLRPC$Update tLRPC$Update) {
        if (tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) {
            return ((TLRPC$TL_updateNewChannelMessage) tLRPC$Update).message.peer_id.channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateEditChannelMessage) {
            return ((TLRPC$TL_updateEditChannelMessage) tLRPC$Update).message.peer_id.channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadChannelOutbox) {
            return ((TLRPC$TL_updateReadChannelOutbox) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelMessageViews) {
            return ((TLRPC$TL_updateChannelMessageViews) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelMessageForwards) {
            return ((TLRPC$TL_updateChannelMessageForwards) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelTooLong) {
            return ((TLRPC$TL_updateChannelTooLong) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelReadMessagesContents) {
            return ((TLRPC$TL_updateChannelReadMessagesContents) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelAvailableMessages) {
            return ((TLRPC$TL_updateChannelAvailableMessages) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannel) {
            return ((TLRPC$TL_updateChannel) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelWebPage) {
            return ((TLRPC$TL_updateChannelWebPage) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateDeleteChannelMessages) {
            return ((TLRPC$TL_updateDeleteChannelMessages) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadChannelInbox) {
            return ((TLRPC$TL_updateReadChannelInbox) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadChannelDiscussionInbox) {
            return ((TLRPC$TL_updateReadChannelDiscussionInbox) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadChannelDiscussionOutbox) {
            return ((TLRPC$TL_updateReadChannelDiscussionOutbox) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelUserTyping) {
            return ((TLRPC$TL_updateChannelUserTyping) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updatePinnedChannelMessages) {
            return ((TLRPC$TL_updatePinnedChannelMessages) tLRPC$Update).channel_id;
        }
        if (!BuildVars.LOGS_ENABLED) {
            return 0;
        }
        FileLog.e("trying to get unknown update channel_id for " + tLRPC$Update);
        return 0;
    }

    /* JADX WARNING: Code restructure failed: missing block: B:295:0x06ef, code lost:
        if (r3 != null) goto L_0x06f1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:297:0x06f3, code lost:
        if (r5 != null) goto L_0x06f6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:307:0x071c, code lost:
        if (r3 != null) goto L_0x071e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:309:0x0720, code lost:
        if (r5 != null) goto L_0x06f6;
     */
    /* JADX WARNING: Removed duplicated region for block: B:247:0x061f  */
    /* JADX WARNING: Removed duplicated region for block: B:285:0x06c9  */
    /* JADX WARNING: Removed duplicated region for block: B:289:0x06e3  */
    /* JADX WARNING: Removed duplicated region for block: B:292:0x06e9  */
    /* JADX WARNING: Removed duplicated region for block: B:300:0x06fa  */
    /* JADX WARNING: Removed duplicated region for block: B:316:0x0736  */
    /* JADX WARNING: Removed duplicated region for block: B:333:0x0772 A[ADDED_TO_REGION] */
    /* JADX WARNING: Removed duplicated region for block: B:344:0x07a8  */
    /* JADX WARNING: Removed duplicated region for block: B:410:0x0989  */
    /* JADX WARNING: Removed duplicated region for block: B:428:0x09c3  */
    /* JADX WARNING: Removed duplicated region for block: B:430:0x09dd  */
    /* JADX WARNING: Removed duplicated region for block: B:461:0x076e A[EDGE_INSN: B:461:0x076e->B:331:0x076e ?: BREAK  , SYNTHETIC] */
    /* JADX WARNING: Removed duplicated region for block: B:61:0x0110  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void processUpdates(org.telegram.tgnet.TLRPC$Updates r26, boolean r27) {
        /*
            r25 = this;
            r6 = r25
            r7 = r26
            boolean r0 = r7 instanceof org.telegram.tgnet.TLRPC$TL_updateShort
            r8 = 0
            r9 = 0
            r10 = 1
            if (r0 == 0) goto L_0x0020
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            org.telegram.tgnet.TLRPC$Update r0 = r7.update
            r1.add(r0)
            r2 = 0
            r3 = 0
            r4 = 0
            int r5 = r7.date
            r0 = r25
            r0.processUpdateArray(r1, r2, r3, r4, r5)
            goto L_0x007b
        L_0x0020:
            boolean r0 = r7 instanceof org.telegram.tgnet.TLRPC$TL_updateShortChatMessage
            java.lang.String r11 = " count = "
            java.lang.String r12 = "add to queue"
            java.lang.String r15 = " "
            if (r0 != 0) goto L_0x0627
            boolean r1 = r7 instanceof org.telegram.tgnet.TLRPC$TL_updateShortMessage
            if (r1 == 0) goto L_0x0030
            goto L_0x0627
        L_0x0030:
            boolean r3 = r7 instanceof org.telegram.tgnet.TLRPC$TL_updatesCombined
            if (r3 != 0) goto L_0x007f
            boolean r0 = r7 instanceof org.telegram.tgnet.TLRPC$TL_updates
            if (r0 == 0) goto L_0x0039
            goto L_0x007f
        L_0x0039:
            boolean r0 = r7 instanceof org.telegram.tgnet.TLRPC$TL_updatesTooLong
            if (r0 == 0) goto L_0x0049
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0046
            java.lang.String r0 = "need get diff TL_updatesTooLong"
            org.telegram.messenger.FileLog.d(r0)
        L_0x0046:
            r1 = 0
            goto L_0x0980
        L_0x0049:
            boolean r0 = r7 instanceof org.telegram.messenger.MessagesController.UserActionUpdatesSeq
            if (r0 == 0) goto L_0x0057
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            int r1 = r7.seq
            r0.setLastSeqValue(r1)
            goto L_0x007b
        L_0x0057:
            boolean r0 = r7 instanceof org.telegram.messenger.MessagesController.UserActionUpdatesPts
            if (r0 == 0) goto L_0x007b
            int r0 = r7.chat_id
            if (r0 == 0) goto L_0x0072
            android.util.SparseIntArray r1 = r6.channelsPts
            int r2 = r7.pts
            r1.put(r0, r2)
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            int r1 = r7.chat_id
            int r2 = r7.pts
            r0.saveChannelPts(r1, r2)
            goto L_0x007b
        L_0x0072:
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            int r1 = r7.pts
            r0.setLastPtsValue(r1)
        L_0x007b:
            r1 = 0
            r10 = 0
            goto L_0x0980
        L_0x007f:
            r1 = r8
            r0 = 0
        L_0x0081:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r2 = r7.chats
            int r2 = r2.size()
            if (r0 >= r2) goto L_0x00cb
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r2 = r7.chats
            java.lang.Object r2 = r2.get(r0)
            org.telegram.tgnet.TLRPC$Chat r2 = (org.telegram.tgnet.TLRPC$Chat) r2
            boolean r4 = r2 instanceof org.telegram.tgnet.TLRPC$TL_channel
            if (r4 == 0) goto L_0x00c8
            boolean r4 = r2.min
            if (r4 == 0) goto L_0x00c8
            int r4 = r2.id
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)
            org.telegram.tgnet.TLRPC$Chat r4 = r6.getChat(r4)
            if (r4 == 0) goto L_0x00a9
            boolean r5 = r4.min
            if (r5 == 0) goto L_0x00b6
        L_0x00a9:
            org.telegram.messenger.MessagesStorage r4 = r25.getMessagesStorage()
            int r5 = r7.chat_id
            org.telegram.tgnet.TLRPC$Chat r4 = r4.getChatSync(r5)
            r6.putChat(r4, r10)
        L_0x00b6:
            if (r4 == 0) goto L_0x00bc
            boolean r4 = r4.min
            if (r4 == 0) goto L_0x00c8
        L_0x00bc:
            if (r1 != 0) goto L_0x00c3
            android.util.SparseArray r1 = new android.util.SparseArray
            r1.<init>()
        L_0x00c3:
            int r4 = r2.id
            r1.put(r4, r2)
        L_0x00c8:
            int r0 = r0 + 1
            goto L_0x0081
        L_0x00cb:
            if (r1 == 0) goto L_0x010d
            r0 = 0
        L_0x00ce:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r2 = r7.updates
            int r2 = r2.size()
            if (r0 >= r2) goto L_0x010d
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r2 = r7.updates
            java.lang.Object r2 = r2.get(r0)
            org.telegram.tgnet.TLRPC$Update r2 = (org.telegram.tgnet.TLRPC$Update) r2
            boolean r4 = r2 instanceof org.telegram.tgnet.TLRPC$TL_updateNewChannelMessage
            if (r4 == 0) goto L_0x010a
            org.telegram.tgnet.TLRPC$TL_updateNewChannelMessage r2 = (org.telegram.tgnet.TLRPC$TL_updateNewChannelMessage) r2
            org.telegram.tgnet.TLRPC$Message r2 = r2.message
            org.telegram.tgnet.TLRPC$Peer r2 = r2.peer_id
            int r2 = r2.channel_id
            int r4 = r1.indexOfKey(r2)
            if (r4 < 0) goto L_0x010a
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0108
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "need get diff because of min channel "
            r0.append(r1)
            r0.append(r2)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x0108:
            r0 = 1
            goto L_0x010e
        L_0x010a:
            int r0 = r0 + 1
            goto L_0x00ce
        L_0x010d:
            r0 = 0
        L_0x010e:
            if (r0 != 0) goto L_0x061f
            org.telegram.messenger.MessagesStorage r1 = r25.getMessagesStorage()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r7.users
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r4 = r7.chats
            r1.putUsersAndChats(r2, r4, r10, r10)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r7.updates
            java.util.Comparator<org.telegram.tgnet.TLRPC$Update> r2 = r6.updatesComparator
            java.util.Collections.sort(r1, r2)
            r5 = r8
            r18 = 0
            r8 = r0
        L_0x0126:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r0 = r7.updates
            int r0 = r0.size()
            if (r0 <= 0) goto L_0x0522
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r0 = r7.updates
            java.lang.Object r0 = r0.get(r9)
            org.telegram.tgnet.TLRPC$Update r0 = (org.telegram.tgnet.TLRPC$Update) r0
            int r1 = r6.getUpdateType(r0)
            if (r1 != 0) goto L_0x026c
            org.telegram.tgnet.TLRPC$TL_updates r4 = new org.telegram.tgnet.TLRPC$TL_updates
            r4.<init>()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r4.updates
            r1.add(r0)
            int r1 = getUpdatePts(r0)
            r4.pts = r1
            int r1 = getUpdatePtsCount(r0)
            r4.pts_count = r1
        L_0x0152:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r7.updates
            int r1 = r1.size()
            if (r10 >= r1) goto L_0x018a
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r7.updates
            java.lang.Object r1 = r1.get(r10)
            org.telegram.tgnet.TLRPC$Update r1 = (org.telegram.tgnet.TLRPC$Update) r1
            int r2 = getUpdatePts(r1)
            int r19 = getUpdatePtsCount(r1)
            int r20 = r6.getUpdateType(r1)
            if (r20 != 0) goto L_0x018a
            int r9 = r4.pts
            int r9 = r9 + r19
            if (r9 != r2) goto L_0x018a
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r9 = r4.updates
            r9.add(r1)
            r4.pts = r2
            int r1 = r4.pts_count
            int r1 = r1 + r19
            r4.pts_count = r1
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r7.updates
            r1.remove(r10)
            r9 = 0
            goto L_0x0152
        L_0x018a:
            org.telegram.messenger.MessagesStorage r1 = r25.getMessagesStorage()
            int r1 = r1.getLastPtsValue()
            int r2 = r4.pts_count
            int r1 = r1 + r2
            int r2 = r4.pts
            if (r1 != r2) goto L_0x01ef
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r4.updates
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r7.users
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r9 = r7.chats
            r19 = 0
            int r0 = r7.date
            r21 = r0
            r0 = r25
            r22 = r3
            r3 = r9
            r9 = r4
            r13 = 0
            r4 = r19
            r23 = r5
            r5 = r21
            boolean r0 = r0.processUpdateArray(r1, r2, r3, r4, r5)
            if (r0 != 0) goto L_0x01e4
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x01e1
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "need get diff inner TL_updates, pts: "
            r0.append(r1)
            org.telegram.messenger.MessagesStorage r1 = r25.getMessagesStorage()
            int r1 = r1.getLastPtsValue()
            r0.append(r1)
            r0.append(r15)
            int r1 = r7.seq
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x01e1:
            r8 = 1
            goto L_0x0268
        L_0x01e4:
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            int r1 = r9.pts
            r0.setLastPtsValue(r1)
            goto L_0x0268
        L_0x01ef:
            r22 = r3
            r9 = r4
            r23 = r5
            r13 = 0
            org.telegram.messenger.MessagesStorage r1 = r25.getMessagesStorage()
            int r1 = r1.getLastPtsValue()
            int r2 = r9.pts
            if (r1 == r2) goto L_0x0268
            boolean r1 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r1 == 0) goto L_0x0235
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            r1.append(r0)
            java.lang.String r0 = " need get diff, pts: "
            r1.append(r0)
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            int r0 = r0.getLastPtsValue()
            r1.append(r0)
            r1.append(r15)
            int r0 = r9.pts
            r1.append(r0)
            r1.append(r11)
            int r0 = r9.pts_count
            r1.append(r0)
            java.lang.String r0 = r1.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x0235:
            boolean r0 = r6.gettingDifference
            if (r0 != 0) goto L_0x0250
            long r0 = r6.updatesStartWaitTimePts
            int r2 = (r0 > r13 ? 1 : (r0 == r13 ? 0 : -1))
            if (r2 == 0) goto L_0x0250
            long r0 = java.lang.System.currentTimeMillis()
            long r2 = r6.updatesStartWaitTimePts
            long r0 = r0 - r2
            long r0 = java.lang.Math.abs(r0)
            r2 = 1500(0x5dc, double:7.41E-321)
            int r4 = (r0 > r2 ? 1 : (r0 == r2 ? 0 : -1))
            if (r4 > 0) goto L_0x01e1
        L_0x0250:
            long r0 = r6.updatesStartWaitTimePts
            int r2 = (r0 > r13 ? 1 : (r0 == r13 ? 0 : -1))
            if (r2 != 0) goto L_0x025c
            long r0 = java.lang.System.currentTimeMillis()
            r6.updatesStartWaitTimePts = r0
        L_0x025c:
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0263
            org.telegram.messenger.FileLog.d(r12)
        L_0x0263:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Updates> r0 = r6.updatesQueuePts
            r0.add(r9)
        L_0x0268:
            r5 = r23
            goto L_0x0513
        L_0x026c:
            r22 = r3
            r23 = r5
            r13 = 0
            int r1 = r6.getUpdateType(r0)
            if (r1 != r10) goto L_0x0359
            org.telegram.tgnet.TLRPC$TL_updates r9 = new org.telegram.tgnet.TLRPC$TL_updates
            r9.<init>()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r9.updates
            r1.add(r0)
            int r1 = getUpdateQts(r0)
            r9.pts = r1
        L_0x0288:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r7.updates
            int r1 = r1.size()
            if (r10 >= r1) goto L_0x02b4
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r7.updates
            java.lang.Object r1 = r1.get(r10)
            org.telegram.tgnet.TLRPC$Update r1 = (org.telegram.tgnet.TLRPC$Update) r1
            int r2 = getUpdateQts(r1)
            int r3 = r6.getUpdateType(r1)
            if (r3 != r10) goto L_0x02b4
            int r3 = r9.pts
            int r3 = r3 + r10
            if (r3 != r2) goto L_0x02b4
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r3 = r9.updates
            r3.add(r1)
            r9.pts = r2
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r7.updates
            r1.remove(r10)
            goto L_0x0288
        L_0x02b4:
            org.telegram.messenger.MessagesStorage r1 = r25.getMessagesStorage()
            int r1 = r1.getLastQtsValue()
            if (r1 == 0) goto L_0x033e
            org.telegram.messenger.MessagesStorage r1 = r25.getMessagesStorage()
            int r1 = r1.getLastQtsValue()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r2 = r9.updates
            int r2 = r2.size()
            int r1 = r1 + r2
            int r2 = r9.pts
            if (r1 != r2) goto L_0x02d2
            goto L_0x033e
        L_0x02d2:
            org.telegram.messenger.MessagesStorage r1 = r25.getMessagesStorage()
            int r1 = r1.getLastPtsValue()
            int r2 = r9.pts
            if (r1 == r2) goto L_0x0268
            boolean r1 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r1 == 0) goto L_0x0309
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            r1.append(r0)
            java.lang.String r0 = " need get diff, qts: "
            r1.append(r0)
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            int r0 = r0.getLastQtsValue()
            r1.append(r0)
            r1.append(r15)
            int r0 = r9.pts
            r1.append(r0)
            java.lang.String r0 = r1.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x0309:
            boolean r0 = r6.gettingDifference
            if (r0 != 0) goto L_0x0324
            long r0 = r6.updatesStartWaitTimeQts
            int r2 = (r0 > r13 ? 1 : (r0 == r13 ? 0 : -1))
            if (r2 == 0) goto L_0x0324
            long r0 = java.lang.System.currentTimeMillis()
            long r2 = r6.updatesStartWaitTimeQts
            long r0 = r0 - r2
            long r0 = java.lang.Math.abs(r0)
            r2 = 1500(0x5dc, double:7.41E-321)
            int r4 = (r0 > r2 ? 1 : (r0 == r2 ? 0 : -1))
            if (r4 > 0) goto L_0x01e1
        L_0x0324:
            long r0 = r6.updatesStartWaitTimeQts
            int r2 = (r0 > r13 ? 1 : (r0 == r13 ? 0 : -1))
            if (r2 != 0) goto L_0x0330
            long r0 = java.lang.System.currentTimeMillis()
            r6.updatesStartWaitTimeQts = r0
        L_0x0330:
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0337
            org.telegram.messenger.FileLog.d(r12)
        L_0x0337:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Updates> r0 = r6.updatesQueueQts
            r0.add(r9)
            goto L_0x0268
        L_0x033e:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r9.updates
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r7.users
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r3 = r7.chats
            r4 = 0
            int r5 = r7.date
            r0 = r25
            r0.processUpdateArray(r1, r2, r3, r4, r5)
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            int r1 = r9.pts
            r0.setLastQtsValue(r1)
            r18 = 1
            goto L_0x0268
        L_0x0359:
            int r1 = r6.getUpdateType(r0)
            r2 = 2
            if (r1 != r2) goto L_0x051f
            int r9 = getUpdateChannelId(r0)
            android.util.SparseIntArray r1 = r6.channelsPts
            int r1 = r1.get(r9)
            if (r1 != 0) goto L_0x0398
            org.telegram.messenger.MessagesStorage r1 = r25.getMessagesStorage()
            int r1 = r1.getChannelPtsSync(r9)
            if (r1 != 0) goto L_0x0393
            r3 = 0
        L_0x0377:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r4 = r7.chats
            int r4 = r4.size()
            if (r3 >= r4) goto L_0x0398
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r4 = r7.chats
            java.lang.Object r4 = r4.get(r3)
            org.telegram.tgnet.TLRPC$Chat r4 = (org.telegram.tgnet.TLRPC$Chat) r4
            int r5 = r4.id
            if (r5 != r9) goto L_0x0390
            r6.loadUnknownChannel(r4, r13)
            r3 = 1
            goto L_0x0399
        L_0x0390:
            int r3 = r3 + 1
            goto L_0x0377
        L_0x0393:
            android.util.SparseIntArray r3 = r6.channelsPts
            r3.put(r9, r1)
        L_0x0398:
            r3 = 0
        L_0x0399:
            org.telegram.tgnet.TLRPC$TL_updates r5 = new org.telegram.tgnet.TLRPC$TL_updates
            r5.<init>()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r4 = r5.updates
            r4.add(r0)
            int r4 = getUpdatePts(r0)
            r5.pts = r4
            int r4 = getUpdatePtsCount(r0)
            r5.pts_count = r4
        L_0x03af:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r4 = r7.updates
            int r4 = r4.size()
            if (r10 >= r4) goto L_0x03ed
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r4 = r7.updates
            java.lang.Object r4 = r4.get(r10)
            org.telegram.tgnet.TLRPC$Update r4 = (org.telegram.tgnet.TLRPC$Update) r4
            int r13 = getUpdatePts(r4)
            int r14 = getUpdatePtsCount(r4)
            int r10 = r6.getUpdateType(r4)
            if (r10 != r2) goto L_0x03ed
            int r10 = getUpdateChannelId(r4)
            if (r9 != r10) goto L_0x03ed
            int r10 = r5.pts
            int r10 = r10 + r14
            if (r10 != r13) goto L_0x03ed
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r10 = r5.updates
            r10.add(r4)
            r5.pts = r13
            int r4 = r5.pts_count
            int r4 = r4 + r14
            r5.pts_count = r4
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r4 = r7.updates
            r10 = 1
            r4.remove(r10)
            r13 = 0
            goto L_0x03af
        L_0x03ed:
            if (r3 != 0) goto L_0x04f8
            int r2 = r5.pts_count
            int r2 = r2 + r1
            int r3 = r5.pts
            if (r2 != r3) goto L_0x0454
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r5.updates
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r7.users
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r3 = r7.chats
            r4 = 0
            int r10 = r7.date
            r0 = r25
            r13 = r5
            r5 = r10
            boolean r0 = r0.processUpdateArray(r1, r2, r3, r4, r5)
            if (r0 != 0) goto L_0x0440
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0421
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "need get channel diff inner TL_updates, channel_id = "
            r0.append(r1)
            r0.append(r9)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x0421:
            r10 = r23
            if (r10 != 0) goto L_0x042d
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r5 = r0
            goto L_0x0513
        L_0x042d:
            java.lang.Integer r0 = java.lang.Integer.valueOf(r9)
            boolean r0 = r10.contains(r0)
            if (r0 != 0) goto L_0x0512
            java.lang.Integer r0 = java.lang.Integer.valueOf(r9)
            r10.add(r0)
            goto L_0x0512
        L_0x0440:
            r10 = r23
            android.util.SparseIntArray r0 = r6.channelsPts
            int r1 = r13.pts
            r0.put(r9, r1)
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            int r1 = r13.pts
            r0.saveChannelPts(r9, r1)
            goto L_0x0512
        L_0x0454:
            r13 = r5
            r10 = r23
            if (r1 == r3) goto L_0x0512
            boolean r2 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r2 == 0) goto L_0x048c
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            r2.append(r0)
            java.lang.String r0 = " need get channel diff, pts: "
            r2.append(r0)
            r2.append(r1)
            r2.append(r15)
            int r0 = r13.pts
            r2.append(r0)
            r2.append(r11)
            int r0 = r13.pts_count
            r2.append(r0)
            java.lang.String r0 = " channelId = "
            r2.append(r0)
            r2.append(r9)
            java.lang.String r0 = r2.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x048c:
            org.telegram.messenger.support.SparseLongArray r0 = r6.updatesStartWaitTimeChannels
            long r0 = r0.get(r9)
            android.util.SparseBooleanArray r2 = r6.gettingDifferenceChannels
            boolean r2 = r2.get(r9)
            if (r2 != 0) goto L_0x04ca
            r2 = 0
            int r4 = (r0 > r2 ? 1 : (r0 == r2 ? 0 : -1))
            if (r4 == 0) goto L_0x04ca
            long r2 = java.lang.System.currentTimeMillis()
            long r2 = r2 - r0
            long r2 = java.lang.Math.abs(r2)
            r4 = 1500(0x5dc, double:7.41E-321)
            int r14 = (r2 > r4 ? 1 : (r2 == r4 ? 0 : -1))
            if (r14 > 0) goto L_0x04b0
            goto L_0x04ca
        L_0x04b0:
            if (r10 != 0) goto L_0x04b8
            java.util.ArrayList r5 = new java.util.ArrayList
            r5.<init>()
            goto L_0x0513
        L_0x04b8:
            java.lang.Integer r0 = java.lang.Integer.valueOf(r9)
            boolean r0 = r10.contains(r0)
            if (r0 != 0) goto L_0x0512
            java.lang.Integer r0 = java.lang.Integer.valueOf(r9)
            r10.add(r0)
            goto L_0x0512
        L_0x04ca:
            r2 = 0
            int r4 = (r0 > r2 ? 1 : (r0 == r2 ? 0 : -1))
            if (r4 != 0) goto L_0x04d9
            org.telegram.messenger.support.SparseLongArray r0 = r6.updatesStartWaitTimeChannels
            long r1 = java.lang.System.currentTimeMillis()
            r0.put(r9, r1)
        L_0x04d9:
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x04e0
            org.telegram.messenger.FileLog.d(r12)
        L_0x04e0:
            android.util.SparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Updates>> r0 = r6.updatesQueueChannels
            java.lang.Object r0 = r0.get(r9)
            java.util.ArrayList r0 = (java.util.ArrayList) r0
            if (r0 != 0) goto L_0x04f4
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            android.util.SparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Updates>> r1 = r6.updatesQueueChannels
            r1.put(r9, r0)
        L_0x04f4:
            r0.add(r13)
            goto L_0x0512
        L_0x04f8:
            r10 = r23
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0512
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "need load unknown channel = "
            r0.append(r1)
            r0.append(r9)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x0512:
            r5 = r10
        L_0x0513:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r0 = r7.updates
            r1 = 0
            r0.remove(r1)
            r3 = r22
            r9 = 0
            r10 = 1
            goto L_0x0126
        L_0x051f:
            r10 = r23
            goto L_0x0525
        L_0x0522:
            r22 = r3
            r10 = r5
        L_0x0525:
            if (r22 == 0) goto L_0x0546
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            int r0 = r0.getLastSeqValue()
            r1 = 1
            int r0 = r0 + r1
            int r1 = r7.seq_start
            if (r0 == r1) goto L_0x0544
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            int r0 = r0.getLastSeqValue()
            int r1 = r7.seq_start
            if (r0 != r1) goto L_0x0542
            goto L_0x0544
        L_0x0542:
            r0 = 0
            goto L_0x0561
        L_0x0544:
            r0 = 1
            goto L_0x0561
        L_0x0546:
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            int r0 = r0.getLastSeqValue()
            r1 = 1
            int r0 = r0 + r1
            int r1 = r7.seq
            if (r0 == r1) goto L_0x0544
            if (r1 == 0) goto L_0x0544
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            int r0 = r0.getLastSeqValue()
            if (r1 != r0) goto L_0x0542
            goto L_0x0544
        L_0x0561:
            if (r0 == 0) goto L_0x058d
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r7.updates
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r7.users
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r3 = r7.chats
            r4 = 0
            int r5 = r7.date
            r0 = r25
            r0.processUpdateArray(r1, r2, r3, r4, r5)
            int r0 = r7.seq
            if (r0 == 0) goto L_0x0619
            int r0 = r7.date
            if (r0 == 0) goto L_0x0582
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            int r1 = r7.date
            r0.setLastDateValue(r1)
        L_0x0582:
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            int r1 = r7.seq
            r0.setLastSeqValue(r1)
            goto L_0x0619
        L_0x058d:
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x05dc
            if (r22 == 0) goto L_0x05b8
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "need get diff TL_updatesCombined, seq: "
            r0.append(r1)
            org.telegram.messenger.MessagesStorage r1 = r25.getMessagesStorage()
            int r1 = r1.getLastSeqValue()
            r0.append(r1)
            r0.append(r15)
            int r1 = r7.seq_start
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
            goto L_0x05dc
        L_0x05b8:
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "need get diff TL_updates, seq: "
            r0.append(r1)
            org.telegram.messenger.MessagesStorage r1 = r25.getMessagesStorage()
            int r1 = r1.getLastSeqValue()
            r0.append(r1)
            r0.append(r15)
            int r1 = r7.seq
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x05dc:
            boolean r0 = r6.gettingDifference
            if (r0 != 0) goto L_0x05fd
            long r0 = r6.updatesStartWaitTimeSeq
            r2 = 0
            int r4 = (r0 > r2 ? 1 : (r0 == r2 ? 0 : -1))
            if (r4 == 0) goto L_0x05fd
            long r0 = java.lang.System.currentTimeMillis()
            long r2 = r6.updatesStartWaitTimeSeq
            long r0 = r0 - r2
            long r0 = java.lang.Math.abs(r0)
            r2 = 1500(0x5dc, double:7.41E-321)
            int r4 = (r0 > r2 ? 1 : (r0 == r2 ? 0 : -1))
            if (r4 > 0) goto L_0x05fa
            goto L_0x05fd
        L_0x05fa:
            r8 = r10
            r10 = 1
            goto L_0x0622
        L_0x05fd:
            long r0 = r6.updatesStartWaitTimeSeq
            r2 = 0
            int r4 = (r0 > r2 ? 1 : (r0 == r2 ? 0 : -1))
            if (r4 != 0) goto L_0x060b
            long r0 = java.lang.System.currentTimeMillis()
            r6.updatesStartWaitTimeSeq = r0
        L_0x060b:
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0614
            java.lang.String r0 = "add TL_updates/Combined to queue"
            org.telegram.messenger.FileLog.d(r0)
        L_0x0614:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Updates> r0 = r6.updatesQueueSeq
            r0.add(r7)
        L_0x0619:
            r24 = r10
            r10 = r8
            r8 = r24
            goto L_0x0622
        L_0x061f:
            r10 = r0
            r18 = 0
        L_0x0622:
            r1 = r18
            r9 = 0
            goto L_0x0980
        L_0x0627:
            if (r0 == 0) goto L_0x062c
            int r0 = r7.from_id
            goto L_0x062e
        L_0x062c:
            int r0 = r7.user_id
        L_0x062e:
            java.lang.Integer r1 = java.lang.Integer.valueOf(r0)
            org.telegram.tgnet.TLRPC$User r1 = r6.getUser(r1)
            if (r1 == 0) goto L_0x063c
            boolean r2 = r1.min
            if (r2 == 0) goto L_0x064f
        L_0x063c:
            org.telegram.messenger.MessagesStorage r1 = r25.getMessagesStorage()
            org.telegram.tgnet.TLRPC$User r1 = r1.getUserSync(r0)
            if (r1 == 0) goto L_0x064b
            boolean r2 = r1.min
            if (r2 == 0) goto L_0x064b
            r1 = r8
        L_0x064b:
            r2 = 1
            r6.putUser(r1, r2)
        L_0x064f:
            org.telegram.tgnet.TLRPC$MessageFwdHeader r2 = r7.fwd_from
            if (r2 == 0) goto L_0x06c2
            org.telegram.tgnet.TLRPC$Peer r2 = r2.from_id
            boolean r3 = r2 instanceof org.telegram.tgnet.TLRPC$TL_peerUser
            if (r3 == 0) goto L_0x067a
            int r2 = r2.user_id
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)
            org.telegram.tgnet.TLRPC$User r2 = r6.getUser(r2)
            if (r2 != 0) goto L_0x0677
            org.telegram.messenger.MessagesStorage r2 = r25.getMessagesStorage()
            org.telegram.tgnet.TLRPC$MessageFwdHeader r3 = r7.fwd_from
            org.telegram.tgnet.TLRPC$Peer r3 = r3.from_id
            int r3 = r3.user_id
            org.telegram.tgnet.TLRPC$User r2 = r2.getUserSync(r3)
            r3 = 1
            r6.putUser(r2, r3)
        L_0x0677:
            r3 = r8
        L_0x0678:
            r4 = 1
            goto L_0x06c5
        L_0x067a:
            boolean r3 = r2 instanceof org.telegram.tgnet.TLRPC$TL_peerChannel
            if (r3 == 0) goto L_0x069f
            int r2 = r2.channel_id
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)
            org.telegram.tgnet.TLRPC$Chat r2 = r6.getChat(r2)
            if (r2 != 0) goto L_0x069c
            org.telegram.messenger.MessagesStorage r2 = r25.getMessagesStorage()
            org.telegram.tgnet.TLRPC$MessageFwdHeader r3 = r7.fwd_from
            org.telegram.tgnet.TLRPC$Peer r3 = r3.from_id
            int r3 = r3.channel_id
            org.telegram.tgnet.TLRPC$Chat r2 = r2.getChatSync(r3)
            r3 = 1
            r6.putChat(r2, r3)
        L_0x069c:
            r3 = r2
            r2 = r8
            goto L_0x0678
        L_0x069f:
            boolean r3 = r2 instanceof org.telegram.tgnet.TLRPC$TL_peerChat
            if (r3 == 0) goto L_0x06c2
            int r2 = r2.chat_id
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)
            org.telegram.tgnet.TLRPC$Chat r2 = r6.getChat(r2)
            if (r2 != 0) goto L_0x069c
            org.telegram.messenger.MessagesStorage r2 = r25.getMessagesStorage()
            org.telegram.tgnet.TLRPC$MessageFwdHeader r3 = r7.fwd_from
            org.telegram.tgnet.TLRPC$Peer r3 = r3.from_id
            int r3 = r3.chat_id
            org.telegram.tgnet.TLRPC$Chat r2 = r2.getChatSync(r3)
            r3 = 1
            r6.putChat(r2, r3)
            goto L_0x069c
        L_0x06c2:
            r2 = r8
            r3 = r2
            r4 = 0
        L_0x06c5:
            int r5 = r7.via_bot_id
            if (r5 == 0) goto L_0x06e3
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
            org.telegram.tgnet.TLRPC$User r5 = r6.getUser(r5)
            if (r5 != 0) goto L_0x06e1
            org.telegram.messenger.MessagesStorage r5 = r25.getMessagesStorage()
            int r9 = r7.via_bot_id
            org.telegram.tgnet.TLRPC$User r5 = r5.getUserSync(r9)
            r9 = 1
            r6.putUser(r5, r9)
        L_0x06e1:
            r9 = 1
            goto L_0x06e5
        L_0x06e3:
            r5 = r8
            r9 = 0
        L_0x06e5:
            boolean r10 = r7 instanceof org.telegram.tgnet.TLRPC$TL_updateShortMessage
            if (r10 == 0) goto L_0x06fa
            if (r1 == 0) goto L_0x06f8
            if (r4 == 0) goto L_0x06f1
            if (r2 != 0) goto L_0x06f1
            if (r3 == 0) goto L_0x06f8
        L_0x06f1:
            if (r9 == 0) goto L_0x06f6
            if (r5 != 0) goto L_0x06f6
            goto L_0x06f8
        L_0x06f6:
            r2 = 0
            goto L_0x0723
        L_0x06f8:
            r2 = 1
            goto L_0x0723
        L_0x06fa:
            int r13 = r7.chat_id
            java.lang.Integer r13 = java.lang.Integer.valueOf(r13)
            org.telegram.tgnet.TLRPC$Chat r13 = r6.getChat(r13)
            if (r13 != 0) goto L_0x0714
            org.telegram.messenger.MessagesStorage r13 = r25.getMessagesStorage()
            int r14 = r7.chat_id
            org.telegram.tgnet.TLRPC$Chat r13 = r13.getChatSync(r14)
            r14 = 1
            r6.putChat(r13, r14)
        L_0x0714:
            if (r13 == 0) goto L_0x06f8
            if (r1 == 0) goto L_0x06f8
            if (r4 == 0) goto L_0x071e
            if (r2 != 0) goto L_0x071e
            if (r3 == 0) goto L_0x06f8
        L_0x071e:
            if (r9 == 0) goto L_0x06f6
            if (r5 != 0) goto L_0x06f6
            goto L_0x06f8
        L_0x0723:
            if (r2 != 0) goto L_0x076e
            java.util.ArrayList<org.telegram.tgnet.TLRPC$MessageEntity> r3 = r7.entities
            boolean r3 = r3.isEmpty()
            if (r3 != 0) goto L_0x076e
            r3 = 0
        L_0x072e:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$MessageEntity> r4 = r7.entities
            int r4 = r4.size()
            if (r3 >= r4) goto L_0x076e
            java.util.ArrayList<org.telegram.tgnet.TLRPC$MessageEntity> r4 = r7.entities
            java.lang.Object r4 = r4.get(r3)
            org.telegram.tgnet.TLRPC$MessageEntity r4 = (org.telegram.tgnet.TLRPC$MessageEntity) r4
            boolean r5 = r4 instanceof org.telegram.tgnet.TLRPC$TL_messageEntityMentionName
            if (r5 == 0) goto L_0x076b
            org.telegram.tgnet.TLRPC$TL_messageEntityMentionName r4 = (org.telegram.tgnet.TLRPC$TL_messageEntityMentionName) r4
            int r4 = r4.user_id
            java.lang.Integer r5 = java.lang.Integer.valueOf(r4)
            org.telegram.tgnet.TLRPC$User r5 = r6.getUser(r5)
            if (r5 == 0) goto L_0x0754
            boolean r5 = r5.min
            if (r5 == 0) goto L_0x076b
        L_0x0754:
            org.telegram.messenger.MessagesStorage r5 = r25.getMessagesStorage()
            org.telegram.tgnet.TLRPC$User r4 = r5.getUserSync(r4)
            if (r4 == 0) goto L_0x0763
            boolean r5 = r4.min
            if (r5 == 0) goto L_0x0763
            r4 = r8
        L_0x0763:
            if (r4 != 0) goto L_0x0767
            r2 = 1
            goto L_0x076e
        L_0x0767:
            r4 = 1
            r6.putUser(r1, r4)
        L_0x076b:
            int r3 = r3 + 1
            goto L_0x072e
        L_0x076e:
            boolean r3 = r7.out
            if (r3 != 0) goto L_0x07a2
            if (r1 == 0) goto L_0x07a2
            org.telegram.tgnet.TLRPC$UserStatus r3 = r1.status
            if (r3 == 0) goto L_0x07a2
            int r3 = r3.expires
            if (r3 > 0) goto L_0x07a2
            org.telegram.tgnet.ConnectionsManager r3 = r25.getConnectionsManager()
            int r3 = r3.getCurrentTime()
            int r4 = r7.date
            int r3 = r3 - r4
            int r3 = java.lang.Math.abs(r3)
            r4 = 30
            if (r3 >= r4) goto L_0x07a2
            j$.util.concurrent.ConcurrentHashMap<java.lang.Integer, java.lang.Integer> r3 = r6.onlinePrivacy
            int r1 = r1.id
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            int r4 = r7.date
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)
            r3.put(r1, r4)
            r1 = 1
            goto L_0x07a3
        L_0x07a2:
            r1 = 0
        L_0x07a3:
            if (r2 == 0) goto L_0x07a8
        L_0x07a5:
            r10 = 1
            goto L_0x097d
        L_0x07a8:
            org.telegram.messenger.MessagesStorage r2 = r25.getMessagesStorage()
            int r2 = r2.getLastPtsValue()
            int r3 = r7.pts_count
            int r2 = r2 + r3
            int r3 = r7.pts
            if (r2 != r3) goto L_0x0908
            org.telegram.tgnet.TLRPC$TL_message r2 = new org.telegram.tgnet.TLRPC$TL_message
            r2.<init>()
            int r3 = r7.id
            r2.id = r3
            org.telegram.messenger.UserConfig r3 = r25.getUserConfig()
            int r3 = r3.getClientUserId()
            if (r10 == 0) goto L_0x07e7
            org.telegram.tgnet.TLRPC$TL_peerUser r4 = new org.telegram.tgnet.TLRPC$TL_peerUser
            r4.<init>()
            r2.from_id = r4
            boolean r5 = r7.out
            if (r5 == 0) goto L_0x07d8
            r4.user_id = r3
            goto L_0x07da
        L_0x07d8:
            r4.user_id = r0
        L_0x07da:
            org.telegram.tgnet.TLRPC$TL_peerUser r4 = new org.telegram.tgnet.TLRPC$TL_peerUser
            r4.<init>()
            r2.peer_id = r4
            r4.user_id = r0
            long r4 = (long) r0
            r2.dialog_id = r4
            goto L_0x07ff
        L_0x07e7:
            org.telegram.tgnet.TLRPC$TL_peerUser r4 = new org.telegram.tgnet.TLRPC$TL_peerUser
            r4.<init>()
            r2.from_id = r4
            r4.user_id = r0
            org.telegram.tgnet.TLRPC$TL_peerChat r4 = new org.telegram.tgnet.TLRPC$TL_peerChat
            r4.<init>()
            r2.peer_id = r4
            int r5 = r7.chat_id
            r4.chat_id = r5
            int r4 = -r5
            long r4 = (long) r4
            r2.dialog_id = r4
        L_0x07ff:
            org.telegram.tgnet.TLRPC$MessageFwdHeader r4 = r7.fwd_from
            r2.fwd_from = r4
            boolean r4 = r7.silent
            r2.silent = r4
            boolean r4 = r7.out
            r2.out = r4
            boolean r4 = r7.mentioned
            r2.mentioned = r4
            boolean r4 = r7.media_unread
            r2.media_unread = r4
            java.util.ArrayList<org.telegram.tgnet.TLRPC$MessageEntity> r4 = r7.entities
            r2.entities = r4
            java.lang.String r4 = r7.message
            r2.message = r4
            int r4 = r7.date
            r2.date = r4
            int r4 = r7.via_bot_id
            r2.via_bot_id = r4
            int r4 = r7.flags
            r4 = r4 | 256(0x100, float:3.59E-43)
            r2.flags = r4
            org.telegram.tgnet.TLRPC$TL_messageReplyHeader r4 = r7.reply_to
            r2.reply_to = r4
            org.telegram.tgnet.TLRPC$TL_messageMediaEmpty r4 = new org.telegram.tgnet.TLRPC$TL_messageMediaEmpty
            r4.<init>()
            r2.media = r4
            boolean r4 = r2.out
            if (r4 == 0) goto L_0x083b
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r4 = r6.dialogs_read_outbox_max
            goto L_0x083d
        L_0x083b:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r4 = r6.dialogs_read_inbox_max
        L_0x083d:
            long r11 = r2.dialog_id
            java.lang.Long r5 = java.lang.Long.valueOf(r11)
            java.lang.Object r5 = r4.get(r5)
            java.lang.Integer r5 = (java.lang.Integer) r5
            if (r5 != 0) goto L_0x0864
            org.telegram.messenger.MessagesStorage r5 = r25.getMessagesStorage()
            boolean r9 = r2.out
            long r11 = r2.dialog_id
            int r5 = r5.getDialogReadMax(r9, r11)
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
            long r11 = r2.dialog_id
            java.lang.Long r9 = java.lang.Long.valueOf(r11)
            r4.put(r9, r5)
        L_0x0864:
            int r4 = r5.intValue()
            int r5 = r2.id
            if (r4 >= r5) goto L_0x086e
            r4 = 1
            goto L_0x086f
        L_0x086e:
            r4 = 0
        L_0x086f:
            r2.unread = r4
            long r4 = r2.dialog_id
            long r11 = (long) r3
            int r3 = (r4 > r11 ? 1 : (r4 == r11 ? 0 : -1))
            if (r3 != 0) goto L_0x0881
            r3 = 0
            r2.unread = r3
            r2.media_unread = r3
            r3 = 1
            r2.out = r3
            goto L_0x0882
        L_0x0881:
            r3 = 1
        L_0x0882:
            org.telegram.messenger.MessagesStorage r4 = r25.getMessagesStorage()
            int r5 = r7.pts
            r4.setLastPtsValue(r5)
            java.util.ArrayList<java.lang.Long> r4 = r6.createdDialogIds
            long r11 = r2.dialog_id
            java.lang.Long r5 = java.lang.Long.valueOf(r11)
            boolean r4 = r4.contains(r5)
            org.telegram.messenger.MessageObject r5 = new org.telegram.messenger.MessageObject
            int r9 = r6.currentAccount
            r5.<init>(r9, r2, r4, r4)
            java.util.ArrayList r4 = new java.util.ArrayList
            r4.<init>()
            r4.add(r5)
            java.util.ArrayList r12 = new java.util.ArrayList
            r12.<init>()
            r12.add(r2)
            if (r10 == 0) goto L_0x08ce
            boolean r2 = r7.out
            if (r2 != 0) goto L_0x08bf
            int r2 = r7.user_id
            long r9 = (long) r2
            boolean r2 = r6.updatePrintingUsersWithNewMessages(r9, r4)
            if (r2 == 0) goto L_0x08bf
            r10 = 1
            goto L_0x08c0
        L_0x08bf:
            r10 = 0
        L_0x08c0:
            if (r10 == 0) goto L_0x08c5
            r25.updatePrintingStrings()
        L_0x08c5:
            org.telegram.messenger.-$$Lambda$MessagesController$FNiFlCcZ53Oqkh37cNxGpkrPCCA r2 = new org.telegram.messenger.-$$Lambda$MessagesController$FNiFlCcZ53Oqkh37cNxGpkrPCCA
            r2.<init>(r10, r0, r4)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r2)
            goto L_0x08e3
        L_0x08ce:
            int r0 = r7.chat_id
            int r0 = -r0
            long r2 = (long) r0
            boolean r0 = r6.updatePrintingUsersWithNewMessages(r2, r4)
            if (r0 == 0) goto L_0x08db
            r25.updatePrintingStrings()
        L_0x08db:
            org.telegram.messenger.-$$Lambda$MessagesController$RFfrabg7HljHW7Sy7Krzau_dhiI r2 = new org.telegram.messenger.-$$Lambda$MessagesController$RFfrabg7HljHW7Sy7Krzau_dhiI
            r2.<init>(r0, r7, r4)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r2)
        L_0x08e3:
            boolean r0 = r5.isOut()
            if (r0 != 0) goto L_0x08f9
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r0 = r0.getStorageQueue()
            org.telegram.messenger.-$$Lambda$MessagesController$isxlcJD8Hgk4pqu1N8oIIECHkHQ r2 = new org.telegram.messenger.-$$Lambda$MessagesController$isxlcJD8Hgk4pqu1N8oIIECHkHQ
            r2.<init>(r4)
            r0.postRunnable(r2)
        L_0x08f9:
            org.telegram.messenger.MessagesStorage r11 = r25.getMessagesStorage()
            r13 = 0
            r14 = 1
            r15 = 0
            r16 = 0
            r17 = 0
            r11.putMessages((java.util.ArrayList<org.telegram.tgnet.TLRPC$Message>) r12, (boolean) r13, (boolean) r14, (boolean) r15, (int) r16, (boolean) r17)
            goto L_0x097c
        L_0x0908:
            r3 = 1
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            int r0 = r0.getLastPtsValue()
            int r2 = r7.pts
            if (r0 == r2) goto L_0x097c
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0945
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r2 = "need get diff short message, pts: "
            r0.append(r2)
            org.telegram.messenger.MessagesStorage r2 = r25.getMessagesStorage()
            int r2 = r2.getLastPtsValue()
            r0.append(r2)
            r0.append(r15)
            int r2 = r7.pts
            r0.append(r2)
            r0.append(r11)
            int r2 = r7.pts_count
            r0.append(r2)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x0945:
            boolean r0 = r6.gettingDifference
            if (r0 != 0) goto L_0x0962
            long r4 = r6.updatesStartWaitTimePts
            r9 = 0
            int r0 = (r4 > r9 ? 1 : (r4 == r9 ? 0 : -1))
            if (r0 == 0) goto L_0x0962
            long r4 = java.lang.System.currentTimeMillis()
            long r9 = r6.updatesStartWaitTimePts
            long r4 = r4 - r9
            long r4 = java.lang.Math.abs(r4)
            r9 = 1500(0x5dc, double:7.41E-321)
            int r0 = (r4 > r9 ? 1 : (r4 == r9 ? 0 : -1))
            if (r0 > 0) goto L_0x07a5
        L_0x0962:
            long r2 = r6.updatesStartWaitTimePts
            r4 = 0
            int r0 = (r2 > r4 ? 1 : (r2 == r4 ? 0 : -1))
            if (r0 != 0) goto L_0x0970
            long r2 = java.lang.System.currentTimeMillis()
            r6.updatesStartWaitTimePts = r2
        L_0x0970:
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0977
            org.telegram.messenger.FileLog.d(r12)
        L_0x0977:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Updates> r0 = r6.updatesQueuePts
            r0.add(r7)
        L_0x097c:
            r10 = 0
        L_0x097d:
            r9 = r1
            goto L_0x0046
        L_0x0980:
            org.telegram.messenger.SecretChatHelper r0 = r25.getSecretChatHelper()
            r0.processPendingEncMessages()
            if (r27 != 0) goto L_0x09c1
            r0 = 0
        L_0x098a:
            android.util.SparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Updates>> r2 = r6.updatesQueueChannels
            int r2 = r2.size()
            if (r0 >= r2) goto L_0x09b0
            android.util.SparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Updates>> r2 = r6.updatesQueueChannels
            int r2 = r2.keyAt(r0)
            if (r8 == 0) goto L_0x09a9
            java.lang.Integer r3 = java.lang.Integer.valueOf(r2)
            boolean r3 = r8.contains(r3)
            if (r3 == 0) goto L_0x09a9
            r6.getChannelDifference(r2)
            r3 = 0
            goto L_0x09ad
        L_0x09a9:
            r3 = 0
            r6.processChannelsUpdatesQueue(r2, r3)
        L_0x09ad:
            int r0 = r0 + 1
            goto L_0x098a
        L_0x09b0:
            r3 = 0
            if (r10 == 0) goto L_0x09b7
            r25.getDifference()
            goto L_0x09c1
        L_0x09b7:
            r0 = 0
        L_0x09b8:
            r2 = 3
            if (r0 >= r2) goto L_0x09c1
            r6.processUpdatesQueue(r0, r3)
            int r0 = r0 + 1
            goto L_0x09b8
        L_0x09c1:
            if (r1 == 0) goto L_0x09db
            org.telegram.tgnet.TLRPC$TL_messages_receivedQueue r0 = new org.telegram.tgnet.TLRPC$TL_messages_receivedQueue
            r0.<init>()
            org.telegram.messenger.MessagesStorage r1 = r25.getMessagesStorage()
            int r1 = r1.getLastQtsValue()
            r0.max_qts = r1
            org.telegram.tgnet.ConnectionsManager r1 = r25.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$HeQGMFM8_hvKfKTgwvqBQh90EC4 r2 = org.telegram.messenger.$$Lambda$MessagesController$HeQGMFM8_hvKfKTgwvqBQh90EC4.INSTANCE
            r1.sendRequest(r0, r2)
        L_0x09db:
            if (r9 == 0) goto L_0x09e5
            org.telegram.messenger.-$$Lambda$MessagesController$KPLhGDomJxmqn8fgGGZnbiDgI3A r0 = new org.telegram.messenger.-$$Lambda$MessagesController$KPLhGDomJxmqn8fgGGZnbiDgI3A
            r0.<init>()
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r0)
        L_0x09e5:
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            org.telegram.messenger.MessagesStorage r1 = r25.getMessagesStorage()
            int r1 = r1.getLastSeqValue()
            org.telegram.messenger.MessagesStorage r2 = r25.getMessagesStorage()
            int r2 = r2.getLastPtsValue()
            org.telegram.messenger.MessagesStorage r3 = r25.getMessagesStorage()
            int r3 = r3.getLastDateValue()
            org.telegram.messenger.MessagesStorage r4 = r25.getMessagesStorage()
            int r4 = r4.getLastQtsValue()
            r0.saveDiffParams(r1, r2, r3, r4)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.processUpdates(org.telegram.tgnet.TLRPC$Updates, boolean):void");
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$processUpdates$273 */
    public /* synthetic */ void lambda$processUpdates$273$MessagesController(boolean z, int i, ArrayList arrayList) {
        if (z) {
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 64);
        }
        updateInterfaceWithMessages((long) i, arrayList, false);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$processUpdates$274 */
    public /* synthetic */ void lambda$processUpdates$274$MessagesController(boolean z, TLRPC$Updates tLRPC$Updates, ArrayList arrayList) {
        if (z) {
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 64);
        }
        updateInterfaceWithMessages((long) (-tLRPC$Updates.chat_id), arrayList, false);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$275 */
    public /* synthetic */ void lambda$null$275$MessagesController(ArrayList arrayList) {
        getNotificationsController().processNewMessages(arrayList, true, false, (CountDownLatch) null);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$processUpdates$276 */
    public /* synthetic */ void lambda$processUpdates$276$MessagesController(ArrayList arrayList) {
        AndroidUtilities.runOnUIThread(new Runnable(arrayList) {
            public final /* synthetic */ ArrayList f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$275$MessagesController(this.f$1);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$processUpdates$278 */
    public /* synthetic */ void lambda$processUpdates$278$MessagesController() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 4);
    }

    private boolean applyFoldersUpdates(ArrayList<TLRPC$TL_updateFolderPeers> arrayList) {
        int i;
        if (arrayList == null) {
            return false;
        }
        int size = arrayList.size();
        int i2 = 0;
        boolean z = false;
        while (i2 < size) {
            TLRPC$TL_updateFolderPeers tLRPC$TL_updateFolderPeers = arrayList.get(i2);
            int size2 = tLRPC$TL_updateFolderPeers.folder_peers.size();
            for (int i3 = 0; i3 < size2; i3++) {
                TLRPC$TL_folderPeer tLRPC$TL_folderPeer = tLRPC$TL_updateFolderPeers.folder_peers.get(i3);
                TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(DialogObject.getPeerDialogId(tLRPC$TL_folderPeer.peer));
                if (!(tLRPC$Dialog == null || tLRPC$Dialog.folder_id == (i = tLRPC$TL_folderPeer.folder_id))) {
                    tLRPC$Dialog.pinned = false;
                    tLRPC$Dialog.pinnedNum = 0;
                    tLRPC$Dialog.folder_id = i;
                    ensureFolderDialogExists(i, (boolean[]) null);
                }
            }
            getMessagesStorage().setDialogsFolderId(arrayList.get(i2).folder_peers, (ArrayList<TLRPC$TL_inputFolderPeer>) null, 0, 0);
            i2++;
            z = true;
        }
        return z;
    }

    /* JADX WARNING: Code restructure failed: missing block: B:850:0x12fc, code lost:
        if (r0.action.user_id == r14) goto L_0x12fe;
     */
    /* JADX WARNING: Removed duplicated region for block: B:1013:0x16da  */
    /* JADX WARNING: Removed duplicated region for block: B:1016:0x16ed  */
    /* JADX WARNING: Removed duplicated region for block: B:1021:0x1719  */
    /* JADX WARNING: Removed duplicated region for block: B:1026:0x1740  */
    /* JADX WARNING: Removed duplicated region for block: B:1031:0x1766  */
    /* JADX WARNING: Removed duplicated region for block: B:616:0x0e6a  */
    /* JADX WARNING: Removed duplicated region for block: B:622:0x0e78  */
    /* JADX WARNING: Removed duplicated region for block: B:647:0x0ee3  */
    /* JADX WARNING: Removed duplicated region for block: B:648:0x0ee6  */
    /* JADX WARNING: Removed duplicated region for block: B:651:0x0ef6  */
    /* JADX WARNING: Removed duplicated region for block: B:654:0x0var_  */
    /* JADX WARNING: Removed duplicated region for block: B:655:0x0var_  */
    /* JADX WARNING: Removed duplicated region for block: B:658:0x0var_  */
    /* JADX WARNING: Removed duplicated region for block: B:666:0x0var_  */
    /* JADX WARNING: Removed duplicated region for block: B:667:0x0var_  */
    /* JADX WARNING: Removed duplicated region for block: B:670:0x0var_  */
    /* JADX WARNING: Removed duplicated region for block: B:732:0x1106  */
    /* JADX WARNING: Removed duplicated region for block: B:803:0x1232  */
    /* JADX WARNING: Removed duplicated region for block: B:836:0x12c0  */
    /* JADX WARNING: Removed duplicated region for block: B:917:0x145b  */
    /* JADX WARNING: Removed duplicated region for block: B:922:0x146a  */
    /* JADX WARNING: Removed duplicated region for block: B:925:0x148b  */
    /* JADX WARNING: Removed duplicated region for block: B:926:0x148e  */
    /* JADX WARNING: Removed duplicated region for block: B:930:0x1496  */
    /* JADX WARNING: Removed duplicated region for block: B:931:0x149c  */
    /* JADX WARNING: Removed duplicated region for block: B:934:0x14a7  */
    /* JADX WARNING: Removed duplicated region for block: B:947:0x14d4  */
    /* JADX WARNING: Removed duplicated region for block: B:948:0x14da  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean processUpdateArray(java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r64, java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r65, java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r66, boolean r67, int r68) {
        /*
            r63 = this;
            r15 = r63
            r0 = r65
            r1 = r66
            boolean r2 = r64.isEmpty()
            r14 = 1
            if (r2 == 0) goto L_0x001a
            if (r0 != 0) goto L_0x0011
            if (r1 == 0) goto L_0x0019
        L_0x0011:
            org.telegram.messenger.-$$Lambda$MessagesController$3rUoCzgTB2CJJVn61L3S2Kdmyy0 r2 = new org.telegram.messenger.-$$Lambda$MessagesController$3rUoCzgTB2CJJVn61L3S2Kdmyy0
            r2.<init>(r0, r1)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r2)
        L_0x0019:
            return r14
        L_0x001a:
            long r2 = java.lang.System.currentTimeMillis()
            if (r0 == 0) goto L_0x0040
            j$.util.concurrent.ConcurrentHashMap r4 = new j$.util.concurrent.ConcurrentHashMap
            r4.<init>()
            int r5 = r65.size()
            r6 = 0
        L_0x002a:
            if (r6 >= r5) goto L_0x003e
            java.lang.Object r7 = r0.get(r6)
            org.telegram.tgnet.TLRPC$User r7 = (org.telegram.tgnet.TLRPC$User) r7
            int r8 = r7.id
            java.lang.Integer r8 = java.lang.Integer.valueOf(r8)
            r4.put(r8, r7)
            int r6 = r6 + 1
            goto L_0x002a
        L_0x003e:
            r5 = 1
            goto L_0x0043
        L_0x0040:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Integer, org.telegram.tgnet.TLRPC$User> r4 = r15.users
            r5 = 0
        L_0x0043:
            if (r1 == 0) goto L_0x0065
            j$.util.concurrent.ConcurrentHashMap r6 = new j$.util.concurrent.ConcurrentHashMap
            r6.<init>()
            int r7 = r66.size()
            r8 = 0
        L_0x004f:
            if (r8 >= r7) goto L_0x0063
            java.lang.Object r9 = r1.get(r8)
            org.telegram.tgnet.TLRPC$Chat r9 = (org.telegram.tgnet.TLRPC$Chat) r9
            int r10 = r9.id
            java.lang.Integer r10 = java.lang.Integer.valueOf(r10)
            r6.put(r10, r9)
            int r8 = r8 + 1
            goto L_0x004f
        L_0x0063:
            r12 = r6
            goto L_0x0069
        L_0x0065:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Integer, org.telegram.tgnet.TLRPC$Chat> r6 = r15.chats
            r12 = r6
            r5 = 0
        L_0x0069:
            if (r67 == 0) goto L_0x006e
            r16 = 0
            goto L_0x0070
        L_0x006e:
            r16 = r5
        L_0x0070:
            if (r0 != 0) goto L_0x0074
            if (r1 == 0) goto L_0x007c
        L_0x0074:
            org.telegram.messenger.-$$Lambda$MessagesController$190TV0nOpum43bmS1WWmcF8lw74 r5 = new org.telegram.messenger.-$$Lambda$MessagesController$190TV0nOpum43bmS1WWmcF8lw74
            r5.<init>(r0, r1)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r5)
        L_0x007c:
            org.telegram.messenger.UserConfig r0 = r63.getUserConfig()
            int r0 = r0.getClientUserId()
            int r1 = r64.size()
            r17 = 0
            r65 = r0
            r24 = r2
            r0 = r17
            r2 = r0
            r3 = r2
            r5 = r3
            r7 = r5
            r8 = r7
            r9 = r8
            r10 = r9
            r13 = r10
            r14 = r13
            r18 = r14
            r19 = r18
            r20 = r19
            r21 = r20
            r23 = r21
            r28 = r23
            r29 = r28
            r30 = r29
            r31 = r30
            r33 = r31
            r41 = r33
            r42 = r41
            r43 = r42
            r44 = r43
            r6 = 0
            r11 = 0
            r22 = 0
        L_0x00b9:
            if (r6 >= r1) goto L_0x1502
            r66 = r1
            r1 = r64
            java.lang.Object r26 = r1.get(r6)
            r1 = r26
            org.telegram.tgnet.TLRPC$Update r1 = (org.telegram.tgnet.TLRPC$Update) r1
            boolean r26 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r26 == 0) goto L_0x00e4
            r26 = r5
            java.lang.StringBuilder r5 = new java.lang.StringBuilder
            r5.<init>()
            r27 = r6
            java.lang.String r6 = "process update "
            r5.append(r6)
            r5.append(r1)
            java.lang.String r5 = r5.toString()
            org.telegram.messenger.FileLog.d(r5)
            goto L_0x00e8
        L_0x00e4:
            r26 = r5
            r27 = r6
        L_0x00e8:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateNewMessage
            r32 = r7
            java.lang.String r7 = " channelId = "
            if (r5 != 0) goto L_0x1119
            boolean r6 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateNewChannelMessage
            if (r6 != 0) goto L_0x1119
            boolean r6 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateNewScheduledMessage
            if (r6 == 0) goto L_0x00fa
            goto L_0x1119
        L_0x00fa:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateReadMessagesContents
            if (r5 == 0) goto L_0x013e
            org.telegram.tgnet.TLRPC$TL_updateReadMessagesContents r1 = (org.telegram.tgnet.TLRPC$TL_updateReadMessagesContents) r1
            if (r14 != 0) goto L_0x0107
            java.util.ArrayList r14 = new java.util.ArrayList
            r14.<init>()
        L_0x0107:
            java.util.ArrayList<java.lang.Integer> r5 = r1.messages
            int r5 = r5.size()
            r6 = 0
        L_0x010e:
            if (r6 >= r5) goto L_0x012b
            java.util.ArrayList<java.lang.Integer> r7 = r1.messages
            java.lang.Object r7 = r7.get(r6)
            java.lang.Integer r7 = (java.lang.Integer) r7
            int r7 = r7.intValue()
            r38 = r8
            long r7 = (long) r7
            java.lang.Long r7 = java.lang.Long.valueOf(r7)
            r14.add(r7)
            int r6 = r6 + 1
            r8 = r38
            goto L_0x010e
        L_0x012b:
            r38 = r8
            r48 = r14
            r5 = r26
            r7 = r32
        L_0x0133:
            r52 = r43
            r14 = r65
            r43 = r13
            r25 = r24
        L_0x013b:
            r13 = r4
            goto L_0x14f1
        L_0x013e:
            r38 = r8
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateChannelReadMessagesContents
            if (r5 == 0) goto L_0x0186
            org.telegram.tgnet.TLRPC$TL_updateChannelReadMessagesContents r1 = (org.telegram.tgnet.TLRPC$TL_updateChannelReadMessagesContents) r1
            if (r14 != 0) goto L_0x014d
            java.util.ArrayList r14 = new java.util.ArrayList
            r14.<init>()
        L_0x014d:
            java.util.ArrayList<java.lang.Integer> r5 = r1.messages
            int r5 = r5.size()
            r7 = 0
        L_0x0154:
            if (r7 >= r5) goto L_0x017b
            java.util.ArrayList<java.lang.Integer> r8 = r1.messages
            java.lang.Object r8 = r8.get(r7)
            java.lang.Integer r8 = (java.lang.Integer) r8
            int r8 = r8.intValue()
            r34 = r7
            long r6 = (long) r8
            int r8 = r1.channel_id
            r40 = r9
            long r8 = (long) r8
            r35 = 32
            long r8 = r8 << r35
            long r6 = r6 | r8
            java.lang.Long r6 = java.lang.Long.valueOf(r6)
            r14.add(r6)
            int r7 = r34 + 1
            r9 = r40
            goto L_0x0154
        L_0x017b:
            r40 = r9
            r48 = r14
            r5 = r26
            r7 = r32
            r8 = r38
            goto L_0x0133
        L_0x0186:
            r40 = r9
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateReadHistoryInbox
            if (r5 == 0) goto L_0x01e9
            org.telegram.tgnet.TLRPC$TL_updateReadHistoryInbox r1 = (org.telegram.tgnet.TLRPC$TL_updateReadHistoryInbox) r1
            if (r13 != 0) goto L_0x0195
            org.telegram.messenger.support.SparseLongArray r13 = new org.telegram.messenger.support.SparseLongArray
            r13.<init>()
        L_0x0195:
            org.telegram.tgnet.TLRPC$Peer r5 = r1.peer
            int r6 = r5.chat_id
            if (r6 == 0) goto L_0x01a8
            int r5 = -r6
            int r6 = r1.max_id
            long r6 = (long) r6
            r13.put(r5, r6)
            org.telegram.tgnet.TLRPC$Peer r5 = r1.peer
            int r5 = r5.chat_id
            int r5 = -r5
            goto L_0x01b4
        L_0x01a8:
            int r5 = r5.user_id
            int r6 = r1.max_id
            long r6 = (long) r6
            r13.put(r5, r6)
            org.telegram.tgnet.TLRPC$Peer r5 = r1.peer
            int r5 = r5.user_id
        L_0x01b4:
            long r5 = (long) r5
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r7 = r15.dialogs_read_inbox_max
            java.lang.Long r8 = java.lang.Long.valueOf(r5)
            java.lang.Object r7 = r7.get(r8)
            java.lang.Integer r7 = (java.lang.Integer) r7
            if (r7 != 0) goto L_0x01d0
            org.telegram.messenger.MessagesStorage r7 = r63.getMessagesStorage()
            r8 = 0
            int r7 = r7.getDialogReadMax(r8, r5)
            java.lang.Integer r7 = java.lang.Integer.valueOf(r7)
        L_0x01d0:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r8 = r15.dialogs_read_inbox_max
            java.lang.Long r5 = java.lang.Long.valueOf(r5)
            int r6 = r7.intValue()
            int r1 = r1.max_id
            int r1 = java.lang.Math.max(r6, r1)
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            r8.put(r5, r1)
            goto L_0x02a5
        L_0x01e9:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateReadHistoryOutbox
            if (r5 == 0) goto L_0x0282
            org.telegram.tgnet.TLRPC$TL_updateReadHistoryOutbox r1 = (org.telegram.tgnet.TLRPC$TL_updateReadHistoryOutbox) r1
            if (r0 != 0) goto L_0x01f6
            org.telegram.messenger.support.SparseLongArray r0 = new org.telegram.messenger.support.SparseLongArray
            r0.<init>()
        L_0x01f6:
            org.telegram.tgnet.TLRPC$Peer r5 = r1.peer
            int r6 = r5.chat_id
            if (r6 == 0) goto L_0x020a
            int r5 = -r6
            int r6 = r1.max_id
            long r6 = (long) r6
            r0.put(r5, r6)
            org.telegram.tgnet.TLRPC$Peer r5 = r1.peer
            int r5 = r5.chat_id
            int r5 = -r5
            long r5 = (long) r5
            goto L_0x024f
        L_0x020a:
            int r5 = r5.user_id
            int r6 = r1.max_id
            long r6 = (long) r6
            r0.put(r5, r6)
            org.telegram.tgnet.TLRPC$Peer r5 = r1.peer
            int r5 = r5.user_id
            long r6 = (long) r5
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
            org.telegram.tgnet.TLRPC$User r5 = r15.getUser(r5)
            if (r5 == 0) goto L_0x024e
            org.telegram.tgnet.TLRPC$UserStatus r5 = r5.status
            if (r5 == 0) goto L_0x024e
            int r5 = r5.expires
            if (r5 > 0) goto L_0x024e
            org.telegram.tgnet.ConnectionsManager r5 = r63.getConnectionsManager()
            int r5 = r5.getCurrentTime()
            int r5 = r5 - r68
            int r5 = java.lang.Math.abs(r5)
            r8 = 30
            if (r5 >= r8) goto L_0x024e
            j$.util.concurrent.ConcurrentHashMap<java.lang.Integer, java.lang.Integer> r5 = r15.onlinePrivacy
            org.telegram.tgnet.TLRPC$Peer r8 = r1.peer
            int r8 = r8.user_id
            java.lang.Integer r8 = java.lang.Integer.valueOf(r8)
            java.lang.Integer r9 = java.lang.Integer.valueOf(r68)
            r5.put(r8, r9)
            r11 = r11 | 4
        L_0x024e:
            r5 = r6
        L_0x024f:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r7 = r15.dialogs_read_outbox_max
            java.lang.Long r8 = java.lang.Long.valueOf(r5)
            java.lang.Object r7 = r7.get(r8)
            java.lang.Integer r7 = (java.lang.Integer) r7
            if (r7 != 0) goto L_0x026a
            org.telegram.messenger.MessagesStorage r7 = r63.getMessagesStorage()
            r8 = 1
            int r7 = r7.getDialogReadMax(r8, r5)
            java.lang.Integer r7 = java.lang.Integer.valueOf(r7)
        L_0x026a:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r8 = r15.dialogs_read_outbox_max
            java.lang.Long r5 = java.lang.Long.valueOf(r5)
            int r6 = r7.intValue()
            int r1 = r1.max_id
            int r1 = java.lang.Math.max(r6, r1)
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            r8.put(r5, r1)
            goto L_0x02a5
        L_0x0282:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateDeleteMessages
            if (r5 == 0) goto L_0x02b1
            org.telegram.tgnet.TLRPC$TL_updateDeleteMessages r1 = (org.telegram.tgnet.TLRPC$TL_updateDeleteMessages) r1
            if (r2 != 0) goto L_0x028f
            android.util.SparseArray r2 = new android.util.SparseArray
            r2.<init>()
        L_0x028f:
            r5 = 0
            java.lang.Object r6 = r2.get(r5)
            java.util.ArrayList r6 = (java.util.ArrayList) r6
            if (r6 != 0) goto L_0x02a0
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            r2.put(r5, r6)
        L_0x02a0:
            java.util.ArrayList<java.lang.Integer> r1 = r1.messages
            r6.addAll(r1)
        L_0x02a5:
            r48 = r14
            r5 = r26
            r7 = r32
        L_0x02ab:
            r8 = r38
            r9 = r40
            goto L_0x0133
        L_0x02b1:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateDeleteScheduledMessages
            if (r5 == 0) goto L_0x02e5
            org.telegram.tgnet.TLRPC$TL_updateDeleteScheduledMessages r1 = (org.telegram.tgnet.TLRPC$TL_updateDeleteScheduledMessages) r1
            if (r3 != 0) goto L_0x02be
            android.util.SparseArray r3 = new android.util.SparseArray
            r3.<init>()
        L_0x02be:
            org.telegram.tgnet.TLRPC$Peer r5 = r1.peer
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_peerChannel
            if (r6 == 0) goto L_0x02cd
            int r5 = r5.channel_id
            java.lang.Object r6 = r3.get(r5)
            java.util.ArrayList r6 = (java.util.ArrayList) r6
            goto L_0x02d5
        L_0x02cd:
            r5 = 0
            java.lang.Object r6 = r3.get(r5)
            java.util.ArrayList r6 = (java.util.ArrayList) r6
            r5 = 0
        L_0x02d5:
            if (r6 != 0) goto L_0x02df
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            r3.put(r5, r6)
        L_0x02df:
            java.util.ArrayList<java.lang.Integer> r1 = r1.messages
            r6.addAll(r1)
            goto L_0x02a5
        L_0x02e5:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateUserTyping
            if (r5 != 0) goto L_0x0fbd
            boolean r6 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateChatUserTyping
            if (r6 != 0) goto L_0x0fbd
            boolean r6 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateChannelUserTyping
            if (r6 == 0) goto L_0x02f3
            goto L_0x0fbd
        L_0x02f3:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateChatParticipants
            if (r5 == 0) goto L_0x030c
            org.telegram.tgnet.TLRPC$TL_updateChatParticipants r1 = (org.telegram.tgnet.TLRPC$TL_updateChatParticipants) r1
            r11 = r11 | 32
            if (r21 != 0) goto L_0x0302
            java.util.ArrayList r21 = new java.util.ArrayList
            r21.<init>()
        L_0x0302:
            r5 = r21
            org.telegram.tgnet.TLRPC$ChatParticipants r1 = r1.participants
            r5.add(r1)
            r21 = r5
            goto L_0x02a5
        L_0x030c:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateUserStatus
            if (r5 == 0) goto L_0x0321
            r11 = r11 | 4
            if (r18 != 0) goto L_0x0319
            java.util.ArrayList r18 = new java.util.ArrayList
            r18.<init>()
        L_0x0319:
            r5 = r18
            r5.add(r1)
        L_0x031e:
            r18 = r5
            goto L_0x02a5
        L_0x0321:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateUserName
            if (r5 == 0) goto L_0x0334
            r11 = r11 | 1
            if (r18 != 0) goto L_0x032e
            java.util.ArrayList r18 = new java.util.ArrayList
            r18.<init>()
        L_0x032e:
            r5 = r18
            r5.add(r1)
            goto L_0x031e
        L_0x0334:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateUserPhoto
            if (r5 == 0) goto L_0x0353
            r5 = r1
            org.telegram.tgnet.TLRPC$TL_updateUserPhoto r5 = (org.telegram.tgnet.TLRPC$TL_updateUserPhoto) r5
            r11 = r11 | 2
            org.telegram.messenger.MessagesStorage r6 = r63.getMessagesStorage()
            int r5 = r5.user_id
            r6.clearUserPhotos(r5)
            if (r18 != 0) goto L_0x034d
            java.util.ArrayList r18 = new java.util.ArrayList
            r18.<init>()
        L_0x034d:
            r5 = r18
            r5.add(r1)
            goto L_0x031e
        L_0x0353:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateUserPhone
            if (r5 == 0) goto L_0x0366
            r11 = r11 | 1024(0x400, float:1.435E-42)
            if (r18 != 0) goto L_0x0360
            java.util.ArrayList r18 = new java.util.ArrayList
            r18.<init>()
        L_0x0360:
            r5 = r18
            r5.add(r1)
            goto L_0x031e
        L_0x0366:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updatePeerSettings
            if (r5 == 0) goto L_0x03fb
            r5 = r1
            org.telegram.tgnet.TLRPC$TL_updatePeerSettings r5 = (org.telegram.tgnet.TLRPC$TL_updatePeerSettings) r5
            if (r32 != 0) goto L_0x0375
            java.util.ArrayList r7 = new java.util.ArrayList
            r7.<init>()
            goto L_0x0377
        L_0x0375:
            r7 = r32
        L_0x0377:
            org.telegram.tgnet.TLRPC$Peer r6 = r5.peer
            boolean r8 = r6 instanceof org.telegram.tgnet.TLRPC$TL_peerUser
            if (r8 == 0) goto L_0x03e7
            int r6 = r6.user_id
            java.lang.Integer r6 = java.lang.Integer.valueOf(r6)
            java.lang.Object r6 = r4.get(r6)
            org.telegram.tgnet.TLRPC$User r6 = (org.telegram.tgnet.TLRPC$User) r6
            if (r6 == 0) goto L_0x03e7
            boolean r6 = r6.contact
            r8 = -1
            if (r6 == 0) goto L_0x03bc
            org.telegram.tgnet.TLRPC$Peer r6 = r5.peer
            int r6 = r6.user_id
            int r6 = -r6
            java.lang.Integer r6 = java.lang.Integer.valueOf(r6)
            int r6 = r7.indexOf(r6)
            if (r6 == r8) goto L_0x03a2
            r7.remove(r6)
        L_0x03a2:
            org.telegram.tgnet.TLRPC$Peer r6 = r5.peer
            int r6 = r6.user_id
            java.lang.Integer r6 = java.lang.Integer.valueOf(r6)
            boolean r6 = r7.contains(r6)
            if (r6 != 0) goto L_0x03e7
            org.telegram.tgnet.TLRPC$Peer r5 = r5.peer
            int r5 = r5.user_id
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
            r7.add(r5)
            goto L_0x03e7
        L_0x03bc:
            org.telegram.tgnet.TLRPC$Peer r6 = r5.peer
            int r6 = r6.user_id
            java.lang.Integer r6 = java.lang.Integer.valueOf(r6)
            int r6 = r7.indexOf(r6)
            if (r6 == r8) goto L_0x03cd
            r7.remove(r6)
        L_0x03cd:
            org.telegram.tgnet.TLRPC$Peer r6 = r5.peer
            int r6 = r6.user_id
            java.lang.Integer r6 = java.lang.Integer.valueOf(r6)
            boolean r6 = r7.contains(r6)
            if (r6 != 0) goto L_0x03e7
            org.telegram.tgnet.TLRPC$Peer r5 = r5.peer
            int r5 = r5.user_id
            int r5 = -r5
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
            r7.add(r5)
        L_0x03e7:
            if (r18 != 0) goto L_0x03ee
            java.util.ArrayList r18 = new java.util.ArrayList
            r18.<init>()
        L_0x03ee:
            r5 = r18
            r5.add(r1)
            r18 = r5
            r48 = r14
            r5 = r26
            goto L_0x02ab
        L_0x03fb:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateNewEncryptedMessage
            if (r5 == 0) goto L_0x04e2
            org.telegram.messenger.SecretChatHelper r5 = r63.getSecretChatHelper()
            org.telegram.tgnet.TLRPC$TL_updateNewEncryptedMessage r1 = (org.telegram.tgnet.TLRPC$TL_updateNewEncryptedMessage) r1
            org.telegram.tgnet.TLRPC$EncryptedMessage r6 = r1.message
            java.util.ArrayList r9 = r5.decryptMessage(r6)
            if (r9 == 0) goto L_0x04c3
            boolean r5 = r9.isEmpty()
            if (r5 != 0) goto L_0x04c3
            org.telegram.tgnet.TLRPC$EncryptedMessage r1 = r1.message
            int r1 = r1.chat_id
            long r5 = (long) r1
            r1 = 32
            long r7 = r5 << r1
            if (r10 != 0) goto L_0x0423
            android.util.LongSparseArray r10 = new android.util.LongSparseArray
            r10.<init>()
        L_0x0423:
            r1 = r10
            java.lang.Object r5 = r1.get(r7)
            java.util.ArrayList r5 = (java.util.ArrayList) r5
            if (r5 != 0) goto L_0x0434
            java.util.ArrayList r5 = new java.util.ArrayList
            r5.<init>()
            r1.put(r7, r5)
        L_0x0434:
            r10 = r5
            int r6 = r9.size()
            r5 = 0
        L_0x043a:
            if (r5 >= r6) goto L_0x04b2
            java.lang.Object r34 = r9.get(r5)
            r35 = r1
            r1 = r34
            org.telegram.tgnet.TLRPC$Message r1 = (org.telegram.tgnet.TLRPC$Message) r1
            org.telegram.messenger.ImageLoader.saveMessageThumbs(r1)
            if (r23 != 0) goto L_0x0450
            java.util.ArrayList r23 = new java.util.ArrayList
            r23.<init>()
        L_0x0450:
            r45 = r3
            r3 = r23
            r3.add(r1)
            r23 = r3
            java.util.ArrayList<java.lang.Long> r3 = r15.createdDialogIds
            r34 = r5
            java.lang.Long r5 = java.lang.Long.valueOf(r7)
            boolean r3 = r3.contains(r5)
            org.telegram.messenger.MessageObject r5 = new org.telegram.messenger.MessageObject
            r36 = r6
            int r6 = r15.currentAccount
            r37 = r5
            r46 = r7
            r8 = r32
            r7 = r1
            r48 = r14
            r1 = r38
            r14 = r8
            r8 = r4
            r32 = r9
            r49 = r14
            r14 = r40
            r9 = r12
            r1 = r10
            r10 = r3
            r50 = r11
            r11 = r3
            r5.<init>((int) r6, (org.telegram.tgnet.TLRPC$Message) r7, (java.util.AbstractMap<java.lang.Integer, org.telegram.tgnet.TLRPC$User>) r8, (java.util.AbstractMap<java.lang.Integer, org.telegram.tgnet.TLRPC$Chat>) r9, (boolean) r10, (boolean) r11)
            r3 = r37
            r1.add(r3)
            if (r26 != 0) goto L_0x0494
            java.util.ArrayList r5 = new java.util.ArrayList
            r5.<init>()
            goto L_0x0496
        L_0x0494:
            r5 = r26
        L_0x0496:
            r5.add(r3)
            int r3 = r34 + 1
            r10 = r1
            r26 = r5
            r40 = r14
            r9 = r32
            r1 = r35
            r6 = r36
            r7 = r46
            r14 = r48
            r32 = r49
            r11 = r50
            r5 = r3
            r3 = r45
            goto L_0x043a
        L_0x04b2:
            r35 = r1
            r45 = r3
            r50 = r11
            r48 = r14
            r49 = r32
            r14 = r40
            r5 = r26
            r10 = r35
            goto L_0x04cf
        L_0x04c3:
            r45 = r3
            r50 = r11
            r48 = r14
            r49 = r32
            r14 = r40
            r5 = r26
        L_0x04cf:
            r9 = r14
            r25 = r24
            r8 = r38
            r52 = r43
            r3 = r45
            r7 = r49
            r11 = r50
            r14 = r65
            r43 = r13
            goto L_0x013b
        L_0x04e2:
            r45 = r3
            r50 = r11
            r48 = r14
            r49 = r32
            r3 = r38
            r14 = r40
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateEncryptedChatTyping
            if (r5 == 0) goto L_0x05c8
            org.telegram.tgnet.TLRPC$TL_updateEncryptedChatTyping r1 = (org.telegram.tgnet.TLRPC$TL_updateEncryptedChatTyping) r1
            int r5 = r1.chat_id
            r6 = 1
            org.telegram.tgnet.TLRPC$EncryptedChat r5 = r15.getEncryptedChatDB(r5, r6)
            if (r5 == 0) goto L_0x05ab
            int r1 = r1.chat_id
            long r6 = (long) r1
            r1 = 32
            long r6 = r6 << r1
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, j$.util.concurrent.ConcurrentHashMap<java.lang.Integer, java.util.ArrayList<org.telegram.messenger.MessagesController$PrintingUser>>> r1 = r15.printingUsers
            java.lang.Long r8 = java.lang.Long.valueOf(r6)
            java.lang.Object r1 = r1.get(r8)
            j$.util.concurrent.ConcurrentHashMap r1 = (j$.util.concurrent.ConcurrentHashMap) r1
            if (r1 != 0) goto L_0x051f
            j$.util.concurrent.ConcurrentHashMap r1 = new j$.util.concurrent.ConcurrentHashMap
            r1.<init>()
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, j$.util.concurrent.ConcurrentHashMap<java.lang.Integer, java.util.ArrayList<org.telegram.messenger.MessagesController$PrintingUser>>> r8 = r15.printingUsers
            java.lang.Long r6 = java.lang.Long.valueOf(r6)
            r8.put(r6, r1)
        L_0x051f:
            r6 = 0
            java.lang.Integer r7 = java.lang.Integer.valueOf(r6)
            java.lang.Object r7 = r1.get(r7)
            java.util.ArrayList r7 = (java.util.ArrayList) r7
            if (r7 != 0) goto L_0x0538
            java.util.ArrayList r7 = new java.util.ArrayList
            r7.<init>()
            java.lang.Integer r8 = java.lang.Integer.valueOf(r6)
            r1.put(r8, r7)
        L_0x0538:
            int r1 = r7.size()
            r6 = 0
        L_0x053d:
            if (r6 >= r1) goto L_0x0569
            java.lang.Object r8 = r7.get(r6)
            org.telegram.messenger.MessagesController$PrintingUser r8 = (org.telegram.messenger.MessagesController.PrintingUser) r8
            int r9 = r8.userId
            int r11 = r5.user_id
            if (r9 != r11) goto L_0x055c
            r46 = r2
            r47 = r3
            r2 = r24
            r8.lastTime = r2
            org.telegram.tgnet.TLRPC$TL_sendMessageTypingAction r1 = new org.telegram.tgnet.TLRPC$TL_sendMessageTypingAction
            r1.<init>()
            r8.action = r1
            r1 = 1
            goto L_0x0570
        L_0x055c:
            r46 = r2
            r47 = r3
            r2 = r24
            int r6 = r6 + 1
            r2 = r46
            r3 = r47
            goto L_0x053d
        L_0x0569:
            r46 = r2
            r47 = r3
            r2 = r24
            r1 = 0
        L_0x0570:
            if (r1 != 0) goto L_0x0589
            org.telegram.messenger.MessagesController$PrintingUser r1 = new org.telegram.messenger.MessagesController$PrintingUser
            r1.<init>()
            int r6 = r5.user_id
            r1.userId = r6
            r1.lastTime = r2
            org.telegram.tgnet.TLRPC$TL_sendMessageTypingAction r6 = new org.telegram.tgnet.TLRPC$TL_sendMessageTypingAction
            r6.<init>()
            r1.action = r6
            r7.add(r1)
            r22 = 1
        L_0x0589:
            org.telegram.tgnet.ConnectionsManager r1 = r63.getConnectionsManager()
            int r1 = r1.getCurrentTime()
            int r1 = r1 - r68
            int r1 = java.lang.Math.abs(r1)
            r6 = 30
            if (r1 >= r6) goto L_0x05b1
            j$.util.concurrent.ConcurrentHashMap<java.lang.Integer, java.lang.Integer> r1 = r15.onlinePrivacy
            int r5 = r5.user_id
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
            java.lang.Integer r6 = java.lang.Integer.valueOf(r68)
            r1.put(r5, r6)
            goto L_0x05b1
        L_0x05ab:
            r46 = r2
            r47 = r3
            r2 = r24
        L_0x05b1:
            r9 = r14
            r5 = r26
            r52 = r43
            r8 = r47
            r7 = r49
            r11 = r50
            r14 = r65
            r25 = r2
            r43 = r13
            r3 = r45
            r2 = r46
            goto L_0x013b
        L_0x05c8:
            r46 = r2
            r47 = r3
            r2 = r24
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateEncryptedMessagesRead
            if (r5 == 0) goto L_0x05f9
            org.telegram.tgnet.TLRPC$TL_updateEncryptedMessagesRead r1 = (org.telegram.tgnet.TLRPC$TL_updateEncryptedMessagesRead) r1
            r11 = r42
            if (r11 != 0) goto L_0x05df
            android.util.SparseIntArray r42 = new android.util.SparseIntArray
            r42.<init>()
            r11 = r42
        L_0x05df:
            int r5 = r1.chat_id
            int r6 = r1.max_date
            r11.put(r5, r6)
            r9 = r44
            if (r9 != 0) goto L_0x05f1
            java.util.ArrayList r44 = new java.util.ArrayList
            r44.<init>()
            r9 = r44
        L_0x05f1:
            r9.add(r1)
        L_0x05f4:
            r44 = r9
            r42 = r11
            goto L_0x05b1
        L_0x05f9:
            r11 = r42
            r9 = r44
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateChatParticipantAdd
            if (r5 == 0) goto L_0x0632
            org.telegram.tgnet.TLRPC$TL_updateChatParticipantAdd r1 = (org.telegram.tgnet.TLRPC$TL_updateChatParticipantAdd) r1
            org.telegram.messenger.MessagesStorage r34 = r63.getMessagesStorage()
            int r5 = r1.chat_id
            int r6 = r1.user_id
            r37 = 0
            int r7 = r1.inviter_id
            int r1 = r1.version
            r35 = r5
            r36 = r6
            r38 = r7
            r39 = r1
            r34.updateChatInfo(r35, r36, r37, r38, r39)
        L_0x061c:
            r24 = r2
            r51 = r9
            r42 = r11
            r44 = r14
            r2 = r26
            r52 = r43
            r14 = r65
            r65 = r0
            r43 = r13
            r13 = r4
            r4 = r10
            goto L_0x0fa9
        L_0x0632:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateChatParticipantDelete
            if (r5 == 0) goto L_0x0650
            org.telegram.tgnet.TLRPC$TL_updateChatParticipantDelete r1 = (org.telegram.tgnet.TLRPC$TL_updateChatParticipantDelete) r1
            org.telegram.messenger.MessagesStorage r34 = r63.getMessagesStorage()
            int r5 = r1.chat_id
            int r6 = r1.user_id
            r37 = 1
            r38 = 0
            int r1 = r1.version
            r35 = r5
            r36 = r6
            r39 = r1
            r34.updateChatInfo(r35, r36, r37, r38, r39)
            goto L_0x061c
        L_0x0650:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateDcOptions
            if (r5 != 0) goto L_0x0f8e
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateConfig
            if (r5 == 0) goto L_0x065a
            goto L_0x0f8e
        L_0x065a:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateEncryption
            if (r5 == 0) goto L_0x0668
            org.telegram.messenger.SecretChatHelper r5 = r63.getSecretChatHelper()
            org.telegram.tgnet.TLRPC$TL_updateEncryption r1 = (org.telegram.tgnet.TLRPC$TL_updateEncryption) r1
            r5.processUpdateEncryption(r1, r4)
            goto L_0x061c
        L_0x0668:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updatePeerBlocked
            if (r5 == 0) goto L_0x067f
            org.telegram.tgnet.TLRPC$TL_updatePeerBlocked r1 = (org.telegram.tgnet.TLRPC$TL_updatePeerBlocked) r1
            org.telegram.messenger.MessagesStorage r5 = r63.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r5 = r5.getStorageQueue()
            org.telegram.messenger.-$$Lambda$MessagesController$var_Bh381rIO3T4YmKq-BGxLfpP0 r6 = new org.telegram.messenger.-$$Lambda$MessagesController$var_Bh381rIO3T4YmKq-BGxLfpP0
            r6.<init>(r1)
            r5.postRunnable(r6)
            goto L_0x061c
        L_0x067f:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateNotifySettings
            if (r5 == 0) goto L_0x0693
            if (r18 != 0) goto L_0x068a
            java.util.ArrayList r18 = new java.util.ArrayList
            r18.<init>()
        L_0x068a:
            r5 = r18
            r5.add(r1)
            r18 = r5
            goto L_0x05f4
        L_0x0693:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateServiceNotification
            if (r5 == 0) goto L_0x0797
            org.telegram.tgnet.TLRPC$TL_updateServiceNotification r1 = (org.telegram.tgnet.TLRPC$TL_updateServiceNotification) r1
            boolean r5 = r1.popup
            if (r5 == 0) goto L_0x06af
            java.lang.String r5 = r1.message
            if (r5 == 0) goto L_0x06af
            int r5 = r5.length()
            if (r5 <= 0) goto L_0x06af
            org.telegram.messenger.-$$Lambda$MessagesController$4hDa1jeR29QTm5JuznTKQmlbNx0 r5 = new org.telegram.messenger.-$$Lambda$MessagesController$4hDa1jeR29QTm5JuznTKQmlbNx0
            r5.<init>(r1)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r5)
        L_0x06af:
            int r5 = r1.flags
            r6 = 2
            r5 = r5 & r6
            if (r5 == 0) goto L_0x078a
            org.telegram.tgnet.TLRPC$TL_message r8 = new org.telegram.tgnet.TLRPC$TL_message
            r8.<init>()
            org.telegram.messenger.UserConfig r5 = r63.getUserConfig()
            int r5 = r5.getNewMessageId()
            r8.id = r5
            r8.local_id = r5
            org.telegram.messenger.UserConfig r5 = r63.getUserConfig()
            r6 = 0
            r5.saveConfig(r6)
            r5 = 1
            r8.unread = r5
            r5 = 256(0x100, float:3.59E-43)
            r8.flags = r5
            int r5 = r1.inbox_date
            if (r5 == 0) goto L_0x06dc
            r8.date = r5
            goto L_0x06e7
        L_0x06dc:
            long r5 = java.lang.System.currentTimeMillis()
            r24 = 1000(0x3e8, double:4.94E-321)
            long r5 = r5 / r24
            int r6 = (int) r5
            r8.date = r6
        L_0x06e7:
            org.telegram.tgnet.TLRPC$TL_peerUser r5 = new org.telegram.tgnet.TLRPC$TL_peerUser
            r5.<init>()
            r8.from_id = r5
            r6 = 777000(0xbdb28, float:1.088809E-39)
            r5.user_id = r6
            org.telegram.tgnet.TLRPC$TL_peerUser r5 = new org.telegram.tgnet.TLRPC$TL_peerUser
            r5.<init>()
            r8.peer_id = r5
            org.telegram.messenger.UserConfig r6 = r63.getUserConfig()
            int r6 = r6.getClientUserId()
            r5.user_id = r6
            r5 = 777000(0xbdb28, double:3.83889E-318)
            r8.dialog_id = r5
            org.telegram.tgnet.TLRPC$MessageMedia r5 = r1.media
            if (r5 == 0) goto L_0x0715
            r8.media = r5
            int r5 = r8.flags
            r5 = r5 | 512(0x200, float:7.175E-43)
            r8.flags = r5
        L_0x0715:
            java.lang.String r5 = r1.message
            r8.message = r5
            java.util.ArrayList<org.telegram.tgnet.TLRPC$MessageEntity> r1 = r1.entities
            if (r1 == 0) goto L_0x0725
            r8.entities = r1
            int r1 = r8.flags
            r1 = r1 | 128(0x80, float:1.794E-43)
            r8.flags = r1
        L_0x0725:
            if (r23 != 0) goto L_0x072c
            java.util.ArrayList r23 = new java.util.ArrayList
            r23.<init>()
        L_0x072c:
            r1 = r23
            r1.add(r8)
            java.util.ArrayList<java.lang.Long> r5 = r15.createdDialogIds
            long r6 = r8.dialog_id
            java.lang.Long r6 = java.lang.Long.valueOf(r6)
            boolean r23 = r5.contains(r6)
            org.telegram.messenger.MessageObject r7 = new org.telegram.messenger.MessageObject
            int r6 = r15.currentAccount
            r24 = r2
            r2 = r26
            r5 = r7
            r3 = r7
            r7 = r8
            r26 = r1
            r1 = r8
            r8 = r4
            r51 = r9
            r9 = r12
            r32 = r4
            r4 = r10
            r10 = r23
            r42 = r11
            r11 = r23
            r5.<init>((int) r6, (org.telegram.tgnet.TLRPC$Message) r7, (java.util.AbstractMap<java.lang.Integer, org.telegram.tgnet.TLRPC$User>) r8, (java.util.AbstractMap<java.lang.Integer, org.telegram.tgnet.TLRPC$Chat>) r9, (boolean) r10, (boolean) r11)
            if (r4 != 0) goto L_0x0763
            android.util.LongSparseArray r10 = new android.util.LongSparseArray
            r10.<init>()
            goto L_0x0764
        L_0x0763:
            r10 = r4
        L_0x0764:
            long r4 = r1.dialog_id
            java.lang.Object r4 = r10.get(r4)
            java.util.ArrayList r4 = (java.util.ArrayList) r4
            if (r4 != 0) goto L_0x0778
            java.util.ArrayList r4 = new java.util.ArrayList
            r4.<init>()
            long r5 = r1.dialog_id
            r10.put(r5, r4)
        L_0x0778:
            r4.add(r3)
            if (r2 != 0) goto L_0x0783
            java.util.ArrayList r5 = new java.util.ArrayList
            r5.<init>()
            goto L_0x0784
        L_0x0783:
            r5 = r2
        L_0x0784:
            r5.add(r3)
            r23 = r26
            goto L_0x07b6
        L_0x078a:
            r24 = r2
            r32 = r4
            r51 = r9
            r4 = r10
            r42 = r11
            r2 = r26
            r5 = r2
            goto L_0x07b6
        L_0x0797:
            r24 = r2
            r32 = r4
            r51 = r9
            r4 = r10
            r42 = r11
            r2 = r26
            boolean r3 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateDialogPinned
            if (r3 == 0) goto L_0x07cf
            if (r18 != 0) goto L_0x07ad
            java.util.ArrayList r18 = new java.util.ArrayList
            r18.<init>()
        L_0x07ad:
            r3 = r18
            r3.add(r1)
        L_0x07b2:
            r5 = r2
            r18 = r3
        L_0x07b5:
            r10 = r4
        L_0x07b6:
            r9 = r14
            r25 = r24
            r52 = r43
            r3 = r45
            r2 = r46
            r8 = r47
            r7 = r49
            r11 = r50
            r44 = r51
            r14 = r65
        L_0x07c9:
            r43 = r13
            r13 = r32
            goto L_0x14f1
        L_0x07cf:
            boolean r3 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updatePinnedDialogs
            if (r3 == 0) goto L_0x07e0
            if (r18 != 0) goto L_0x07da
            java.util.ArrayList r18 = new java.util.ArrayList
            r18.<init>()
        L_0x07da:
            r3 = r18
            r3.add(r1)
            goto L_0x07b2
        L_0x07e0:
            boolean r3 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateFolderPeers
            if (r3 == 0) goto L_0x0807
            org.telegram.tgnet.TLRPC$TL_updateFolderPeers r1 = (org.telegram.tgnet.TLRPC$TL_updateFolderPeers) r1
            if (r14 != 0) goto L_0x07ee
            java.util.ArrayList r9 = new java.util.ArrayList
            r9.<init>()
            goto L_0x07ef
        L_0x07ee:
            r9 = r14
        L_0x07ef:
            r9.add(r1)
            r14 = r65
            r5 = r2
            r10 = r4
            r25 = r24
            r52 = r43
            r3 = r45
            r2 = r46
            r8 = r47
            r7 = r49
            r11 = r50
            r44 = r51
            goto L_0x07c9
        L_0x0807:
            boolean r3 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updatePrivacy
            if (r3 == 0) goto L_0x0818
            if (r18 != 0) goto L_0x0812
            java.util.ArrayList r18 = new java.util.ArrayList
            r18.<init>()
        L_0x0812:
            r3 = r18
            r3.add(r1)
            goto L_0x07b2
        L_0x0818:
            boolean r3 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateWebPage
            if (r3 == 0) goto L_0x0834
            org.telegram.tgnet.TLRPC$TL_updateWebPage r1 = (org.telegram.tgnet.TLRPC$TL_updateWebPage) r1
            r3 = r41
            if (r3 != 0) goto L_0x0829
            android.util.LongSparseArray r41 = new android.util.LongSparseArray
            r41.<init>()
            r3 = r41
        L_0x0829:
            org.telegram.tgnet.TLRPC$WebPage r1 = r1.webpage
            long r5 = r1.id
            r3.put(r5, r1)
        L_0x0830:
            r5 = r2
            r41 = r3
            goto L_0x07b5
        L_0x0834:
            r3 = r41
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateChannelWebPage
            if (r5 == 0) goto L_0x084d
            org.telegram.tgnet.TLRPC$TL_updateChannelWebPage r1 = (org.telegram.tgnet.TLRPC$TL_updateChannelWebPage) r1
            if (r3 != 0) goto L_0x0845
            android.util.LongSparseArray r41 = new android.util.LongSparseArray
            r41.<init>()
            r3 = r41
        L_0x0845:
            org.telegram.tgnet.TLRPC$WebPage r1 = r1.webpage
            long r5 = r1.id
            r3.put(r5, r1)
            goto L_0x0830
        L_0x084d:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateChannelTooLong
            if (r5 == 0) goto L_0x08ef
            r5 = r1
            org.telegram.tgnet.TLRPC$TL_updateChannelTooLong r5 = (org.telegram.tgnet.TLRPC$TL_updateChannelTooLong) r5
            boolean r6 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r6 == 0) goto L_0x086f
            java.lang.StringBuilder r6 = new java.lang.StringBuilder
            r6.<init>()
            r6.append(r1)
            r6.append(r7)
            int r1 = r5.channel_id
            r6.append(r1)
            java.lang.String r1 = r6.toString()
            org.telegram.messenger.FileLog.d(r1)
        L_0x086f:
            android.util.SparseIntArray r1 = r15.channelsPts
            int r6 = r5.channel_id
            int r1 = r1.get(r6)
            if (r1 != 0) goto L_0x08c8
            org.telegram.messenger.MessagesStorage r1 = r63.getMessagesStorage()
            int r6 = r5.channel_id
            int r1 = r1.getChannelPtsSync(r6)
            if (r1 != 0) goto L_0x08c1
            int r6 = r5.channel_id
            java.lang.Integer r6 = java.lang.Integer.valueOf(r6)
            java.lang.Object r6 = r12.get(r6)
            org.telegram.tgnet.TLRPC$Chat r6 = (org.telegram.tgnet.TLRPC$Chat) r6
            if (r6 == 0) goto L_0x0897
            boolean r7 = r6.min
            if (r7 == 0) goto L_0x08a1
        L_0x0897:
            int r6 = r5.channel_id
            java.lang.Integer r6 = java.lang.Integer.valueOf(r6)
            org.telegram.tgnet.TLRPC$Chat r6 = r15.getChat(r6)
        L_0x08a1:
            if (r6 == 0) goto L_0x08a7
            boolean r7 = r6.min
            if (r7 == 0) goto L_0x08b5
        L_0x08a7:
            org.telegram.messenger.MessagesStorage r6 = r63.getMessagesStorage()
            int r7 = r5.channel_id
            org.telegram.tgnet.TLRPC$Chat r6 = r6.getChatSync(r7)
            r7 = 1
            r15.putChat(r6, r7)
        L_0x08b5:
            if (r6 == 0) goto L_0x08c8
            boolean r7 = r6.min
            if (r7 != 0) goto L_0x08c8
            r7 = 0
            r15.loadUnknownChannel(r6, r7)
            goto L_0x08c8
        L_0x08c1:
            android.util.SparseIntArray r6 = r15.channelsPts
            int r7 = r5.channel_id
            r6.put(r7, r1)
        L_0x08c8:
            if (r1 == 0) goto L_0x08df
            int r6 = r5.flags
            r7 = 1
            r6 = r6 & r7
            if (r6 == 0) goto L_0x08da
            int r6 = r5.pts
            if (r6 <= r1) goto L_0x08df
            int r1 = r5.channel_id
            r15.getChannelDifference(r1)
            goto L_0x08df
        L_0x08da:
            int r1 = r5.channel_id
            r15.getChannelDifference(r1)
        L_0x08df:
            r41 = r3
            r44 = r14
            r52 = r43
            r14 = r65
            r65 = r0
            r43 = r13
            r13 = r32
            goto L_0x0fa9
        L_0x08ef:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateReadChannelInbox
            if (r5 == 0) goto L_0x0942
            org.telegram.tgnet.TLRPC$TL_updateReadChannelInbox r1 = (org.telegram.tgnet.TLRPC$TL_updateReadChannelInbox) r1
            int r5 = r1.max_id
            long r5 = (long) r5
            int r7 = r1.channel_id
            long r8 = (long) r7
            r10 = 32
            long r8 = r8 << r10
            long r5 = r5 | r8
            int r7 = -r7
            long r7 = (long) r7
            if (r13 != 0) goto L_0x0908
            org.telegram.messenger.support.SparseLongArray r13 = new org.telegram.messenger.support.SparseLongArray
            r13.<init>()
        L_0x0908:
            int r9 = r1.channel_id
            int r9 = -r9
            r13.put(r9, r5)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r5 = r15.dialogs_read_inbox_max
            java.lang.Long r6 = java.lang.Long.valueOf(r7)
            java.lang.Object r5 = r5.get(r6)
            java.lang.Integer r5 = (java.lang.Integer) r5
            if (r5 != 0) goto L_0x0929
            org.telegram.messenger.MessagesStorage r5 = r63.getMessagesStorage()
            r6 = 0
            int r5 = r5.getDialogReadMax(r6, r7)
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
        L_0x0929:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r6 = r15.dialogs_read_inbox_max
            java.lang.Long r7 = java.lang.Long.valueOf(r7)
            int r5 = r5.intValue()
            int r1 = r1.max_id
            int r1 = java.lang.Math.max(r5, r1)
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            r6.put(r7, r1)
            goto L_0x0830
        L_0x0942:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateReadChannelOutbox
            if (r5 == 0) goto L_0x0995
            org.telegram.tgnet.TLRPC$TL_updateReadChannelOutbox r1 = (org.telegram.tgnet.TLRPC$TL_updateReadChannelOutbox) r1
            int r5 = r1.max_id
            long r5 = (long) r5
            int r7 = r1.channel_id
            long r8 = (long) r7
            r10 = 32
            long r8 = r8 << r10
            long r5 = r5 | r8
            int r7 = -r7
            long r7 = (long) r7
            if (r0 != 0) goto L_0x095b
            org.telegram.messenger.support.SparseLongArray r0 = new org.telegram.messenger.support.SparseLongArray
            r0.<init>()
        L_0x095b:
            int r9 = r1.channel_id
            int r9 = -r9
            r0.put(r9, r5)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r5 = r15.dialogs_read_outbox_max
            java.lang.Long r6 = java.lang.Long.valueOf(r7)
            java.lang.Object r5 = r5.get(r6)
            java.lang.Integer r5 = (java.lang.Integer) r5
            if (r5 != 0) goto L_0x097c
            org.telegram.messenger.MessagesStorage r5 = r63.getMessagesStorage()
            r6 = 1
            int r5 = r5.getDialogReadMax(r6, r7)
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
        L_0x097c:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r6 = r15.dialogs_read_outbox_max
            java.lang.Long r7 = java.lang.Long.valueOf(r7)
            int r5 = r5.intValue()
            int r1 = r1.max_id
            int r1 = java.lang.Math.max(r5, r1)
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            r6.put(r7, r1)
            goto L_0x0830
        L_0x0995:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateDeleteChannelMessages
            if (r5 == 0) goto L_0x09f2
            r5 = r1
            org.telegram.tgnet.TLRPC$TL_updateDeleteChannelMessages r5 = (org.telegram.tgnet.TLRPC$TL_updateDeleteChannelMessages) r5
            boolean r6 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r6 == 0) goto L_0x09b7
            java.lang.StringBuilder r6 = new java.lang.StringBuilder
            r6.<init>()
            r6.append(r1)
            r6.append(r7)
            int r1 = r5.channel_id
            r6.append(r1)
            java.lang.String r1 = r6.toString()
            org.telegram.messenger.FileLog.d(r1)
        L_0x09b7:
            if (r46 != 0) goto L_0x09bf
            android.util.SparseArray r1 = new android.util.SparseArray
            r1.<init>()
            goto L_0x09c1
        L_0x09bf:
            r1 = r46
        L_0x09c1:
            int r6 = r5.channel_id
            java.lang.Object r6 = r1.get(r6)
            java.util.ArrayList r6 = (java.util.ArrayList) r6
            if (r6 != 0) goto L_0x09d5
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            int r7 = r5.channel_id
            r1.put(r7, r6)
        L_0x09d5:
            java.util.ArrayList<java.lang.Integer> r5 = r5.messages
            r6.addAll(r5)
            r5 = r2
            r41 = r3
            r10 = r4
            r9 = r14
            r25 = r24
            r52 = r43
            r3 = r45
            r8 = r47
            r7 = r49
            r11 = r50
            r44 = r51
            r14 = r65
            r2 = r1
            goto L_0x07c9
        L_0x09f2:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateChannel
            if (r5 == 0) goto L_0x0a21
            boolean r5 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r5 == 0) goto L_0x0a14
            r5 = r1
            org.telegram.tgnet.TLRPC$TL_updateChannel r5 = (org.telegram.tgnet.TLRPC$TL_updateChannel) r5
            java.lang.StringBuilder r6 = new java.lang.StringBuilder
            r6.<init>()
            r6.append(r1)
            r6.append(r7)
            int r5 = r5.channel_id
            r6.append(r5)
            java.lang.String r5 = r6.toString()
            org.telegram.messenger.FileLog.d(r5)
        L_0x0a14:
            if (r18 != 0) goto L_0x0a1b
            java.util.ArrayList r18 = new java.util.ArrayList
            r18.<init>()
        L_0x0a1b:
            r5 = r18
            r5.add(r1)
            goto L_0x0a31
        L_0x0a21:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateChat
            if (r5 == 0) goto L_0x0a50
            if (r18 != 0) goto L_0x0a2c
            java.util.ArrayList r18 = new java.util.ArrayList
            r18.<init>()
        L_0x0a2c:
            r5 = r18
            r5.add(r1)
        L_0x0a31:
            r41 = r3
            r10 = r4
            r18 = r5
            r9 = r14
            r25 = r24
            r52 = r43
            r3 = r45
            r8 = r47
            r7 = r49
            r11 = r50
            r44 = r51
            r14 = r65
            r5 = r2
            r43 = r13
            r13 = r32
        L_0x0a4c:
            r2 = r46
            goto L_0x14f1
        L_0x0a50:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateChannelMessageViews
            if (r5 == 0) goto L_0x0a9a
            r5 = r1
            org.telegram.tgnet.TLRPC$TL_updateChannelMessageViews r5 = (org.telegram.tgnet.TLRPC$TL_updateChannelMessageViews) r5
            boolean r6 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r6 == 0) goto L_0x0a72
            java.lang.StringBuilder r6 = new java.lang.StringBuilder
            r6.<init>()
            r6.append(r1)
            r6.append(r7)
            int r1 = r5.channel_id
            r6.append(r1)
            java.lang.String r1 = r6.toString()
            org.telegram.messenger.FileLog.d(r1)
        L_0x0a72:
            if (r28 != 0) goto L_0x0a79
            android.util.SparseArray r28 = new android.util.SparseArray
            r28.<init>()
        L_0x0a79:
            r1 = r28
            int r6 = r5.channel_id
            java.lang.Object r6 = r1.get(r6)
            android.util.SparseIntArray r6 = (android.util.SparseIntArray) r6
            if (r6 != 0) goto L_0x0a8f
            android.util.SparseIntArray r6 = new android.util.SparseIntArray
            r6.<init>()
            int r7 = r5.channel_id
            r1.put(r7, r6)
        L_0x0a8f:
            int r7 = r5.id
            int r5 = r5.views
            r6.put(r7, r5)
            r28 = r1
            goto L_0x0830
        L_0x0a9a:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateChannelMessageForwards
            if (r5 == 0) goto L_0x0ae4
            r5 = r1
            org.telegram.tgnet.TLRPC$TL_updateChannelMessageForwards r5 = (org.telegram.tgnet.TLRPC$TL_updateChannelMessageForwards) r5
            boolean r6 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r6 == 0) goto L_0x0abc
            java.lang.StringBuilder r6 = new java.lang.StringBuilder
            r6.<init>()
            r6.append(r1)
            r6.append(r7)
            int r1 = r5.channel_id
            r6.append(r1)
            java.lang.String r1 = r6.toString()
            org.telegram.messenger.FileLog.d(r1)
        L_0x0abc:
            if (r29 != 0) goto L_0x0ac3
            android.util.SparseArray r29 = new android.util.SparseArray
            r29.<init>()
        L_0x0ac3:
            r1 = r29
            int r6 = r5.channel_id
            java.lang.Object r6 = r1.get(r6)
            android.util.SparseIntArray r6 = (android.util.SparseIntArray) r6
            if (r6 != 0) goto L_0x0ad9
            android.util.SparseIntArray r6 = new android.util.SparseIntArray
            r6.<init>()
            int r7 = r5.channel_id
            r1.put(r7, r6)
        L_0x0ad9:
            int r7 = r5.id
            int r5 = r5.forwards
            r6.put(r7, r5)
            r29 = r1
            goto L_0x0830
        L_0x0ae4:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateChatParticipantAdmin
            if (r5 == 0) goto L_0x0afc
            org.telegram.tgnet.TLRPC$TL_updateChatParticipantAdmin r1 = (org.telegram.tgnet.TLRPC$TL_updateChatParticipantAdmin) r1
            org.telegram.messenger.MessagesStorage r5 = r63.getMessagesStorage()
            int r6 = r1.chat_id
            int r7 = r1.user_id
            r8 = 2
            boolean r9 = r1.is_admin
            int r10 = r1.version
            r5.updateChatInfo(r6, r7, r8, r9, r10)
            goto L_0x08df
        L_0x0afc:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateChatDefaultBannedRights
            if (r5 == 0) goto L_0x0b25
            r5 = r1
            org.telegram.tgnet.TLRPC$TL_updateChatDefaultBannedRights r5 = (org.telegram.tgnet.TLRPC$TL_updateChatDefaultBannedRights) r5
            org.telegram.tgnet.TLRPC$Peer r6 = r5.peer
            int r7 = r6.channel_id
            if (r7 == 0) goto L_0x0b0a
            goto L_0x0b0c
        L_0x0b0a:
            int r7 = r6.chat_id
        L_0x0b0c:
            org.telegram.messenger.MessagesStorage r6 = r63.getMessagesStorage()
            org.telegram.tgnet.TLRPC$TL_chatBannedRights r8 = r5.default_banned_rights
            int r5 = r5.version
            r6.updateChatDefaultBannedRights(r7, r8, r5)
            if (r18 != 0) goto L_0x0b1e
            java.util.ArrayList r18 = new java.util.ArrayList
            r18.<init>()
        L_0x0b1e:
            r5 = r18
            r5.add(r1)
            goto L_0x0a31
        L_0x0b25:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateStickerSets
            if (r5 == 0) goto L_0x0b37
            if (r18 != 0) goto L_0x0b30
            java.util.ArrayList r18 = new java.util.ArrayList
            r18.<init>()
        L_0x0b30:
            r5 = r18
            r5.add(r1)
            goto L_0x0a31
        L_0x0b37:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateStickerSetsOrder
            if (r5 == 0) goto L_0x0b49
            if (r18 != 0) goto L_0x0b42
            java.util.ArrayList r18 = new java.util.ArrayList
            r18.<init>()
        L_0x0b42:
            r5 = r18
            r5.add(r1)
            goto L_0x0a31
        L_0x0b49:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateNewStickerSet
            if (r5 == 0) goto L_0x0b5b
            if (r18 != 0) goto L_0x0b54
            java.util.ArrayList r18 = new java.util.ArrayList
            r18.<init>()
        L_0x0b54:
            r5 = r18
            r5.add(r1)
            goto L_0x0a31
        L_0x0b5b:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateDraftMessage
            if (r5 == 0) goto L_0x0b6d
            if (r18 != 0) goto L_0x0b66
            java.util.ArrayList r18 = new java.util.ArrayList
            r18.<init>()
        L_0x0b66:
            r5 = r18
            r5.add(r1)
            goto L_0x0a31
        L_0x0b6d:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateSavedGifs
            if (r5 == 0) goto L_0x0b7f
            if (r18 != 0) goto L_0x0b78
            java.util.ArrayList r18 = new java.util.ArrayList
            r18.<init>()
        L_0x0b78:
            r5 = r18
            r5.add(r1)
            goto L_0x0a31
        L_0x0b7f:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateEditChannelMessage
            if (r5 != 0) goto L_0x0e17
            boolean r6 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateEditMessage
            if (r6 == 0) goto L_0x0b89
            goto L_0x0e17
        L_0x0b89:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updatePinnedChannelMessages
            if (r5 == 0) goto L_0x0bca
            r5 = r1
            org.telegram.tgnet.TLRPC$TL_updatePinnedChannelMessages r5 = (org.telegram.tgnet.TLRPC$TL_updatePinnedChannelMessages) r5
            boolean r6 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r6 == 0) goto L_0x0bab
            java.lang.StringBuilder r6 = new java.lang.StringBuilder
            r6.<init>()
            r6.append(r1)
            r6.append(r7)
            int r1 = r5.channel_id
            r6.append(r1)
            java.lang.String r1 = r6.toString()
            org.telegram.messenger.FileLog.d(r1)
        L_0x0bab:
            org.telegram.messenger.MessagesStorage r52 = r63.getMessagesStorage()
            int r1 = r5.channel_id
            int r1 = -r1
            long r6 = (long) r1
            java.util.ArrayList<java.lang.Integer> r1 = r5.messages
            boolean r5 = r5.pinned
            r57 = -1
            r58 = 0
            r59 = 0
            r60 = 0
            r53 = r6
            r55 = r1
            r56 = r5
            r52.updatePinnedMessages(r53, r55, r56, r57, r58, r59, r60)
            goto L_0x08df
        L_0x0bca:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updatePinnedMessages
            if (r5 == 0) goto L_0x0bf2
            org.telegram.tgnet.TLRPC$TL_updatePinnedMessages r1 = (org.telegram.tgnet.TLRPC$TL_updatePinnedMessages) r1
            org.telegram.messenger.MessagesStorage r52 = r63.getMessagesStorage()
            org.telegram.tgnet.TLRPC$Peer r5 = r1.peer
            int r5 = org.telegram.messenger.MessageObject.getPeerId(r5)
            long r5 = (long) r5
            java.util.ArrayList<java.lang.Integer> r7 = r1.messages
            boolean r1 = r1.pinned
            r57 = -1
            r58 = 0
            r59 = 0
            r60 = 0
            r53 = r5
            r55 = r7
            r56 = r1
            r52.updatePinnedMessages(r53, r55, r56, r57, r58, r59, r60)
            goto L_0x08df
        L_0x0bf2:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateReadFeaturedStickers
            if (r5 == 0) goto L_0x0CLASSNAME
            if (r18 != 0) goto L_0x0bfd
            java.util.ArrayList r18 = new java.util.ArrayList
            r18.<init>()
        L_0x0bfd:
            r5 = r18
            r5.add(r1)
            goto L_0x0a31
        L_0x0CLASSNAME:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updatePhoneCall
            if (r5 == 0) goto L_0x0CLASSNAME
            if (r18 != 0) goto L_0x0c0f
            java.util.ArrayList r18 = new java.util.ArrayList
            r18.<init>()
        L_0x0c0f:
            r5 = r18
            r5.add(r1)
            goto L_0x0a31
        L_0x0CLASSNAME:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateGroupCallParticipants
            if (r5 == 0) goto L_0x0CLASSNAME
            if (r18 != 0) goto L_0x0CLASSNAME
            java.util.ArrayList r18 = new java.util.ArrayList
            r18.<init>()
        L_0x0CLASSNAME:
            r5 = r18
            r5.add(r1)
            goto L_0x0a31
        L_0x0CLASSNAME:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateGroupCall
            if (r5 == 0) goto L_0x0c3a
            if (r18 != 0) goto L_0x0CLASSNAME
            java.util.ArrayList r18 = new java.util.ArrayList
            r18.<init>()
        L_0x0CLASSNAME:
            r5 = r18
            r5.add(r1)
            goto L_0x0a31
        L_0x0c3a:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updatePhoneCallSignalingData
            if (r5 == 0) goto L_0x0c4c
            if (r18 != 0) goto L_0x0CLASSNAME
            java.util.ArrayList r18 = new java.util.ArrayList
            r18.<init>()
        L_0x0CLASSNAME:
            r5 = r18
            r5.add(r1)
            goto L_0x0a31
        L_0x0c4c:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateLangPack
            if (r5 == 0) goto L_0x0c5c
            org.telegram.tgnet.TLRPC$TL_updateLangPack r1 = (org.telegram.tgnet.TLRPC$TL_updateLangPack) r1
            org.telegram.messenger.-$$Lambda$MessagesController$rA8pR4mM8kil50mpsZlBI1svWXE r5 = new org.telegram.messenger.-$$Lambda$MessagesController$rA8pR4mM8kil50mpsZlBI1svWXE
            r5.<init>(r1)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r5)
            goto L_0x08df
        L_0x0c5c:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateLangPackTooLong
            if (r5 == 0) goto L_0x0CLASSNAME
            org.telegram.tgnet.TLRPC$TL_updateLangPackTooLong r1 = (org.telegram.tgnet.TLRPC$TL_updateLangPackTooLong) r1
            org.telegram.messenger.LocaleController r5 = org.telegram.messenger.LocaleController.getInstance()
            int r6 = r15.currentAccount
            java.lang.String r1 = r1.lang_code
            r7 = 0
            r5.reloadCurrentRemoteLocale(r6, r1, r7)
            goto L_0x08df
        L_0x0CLASSNAME:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateFavedStickers
            if (r5 == 0) goto L_0x0CLASSNAME
            if (r18 != 0) goto L_0x0c7b
            java.util.ArrayList r18 = new java.util.ArrayList
            r18.<init>()
        L_0x0c7b:
            r5 = r18
            r5.add(r1)
            goto L_0x0a31
        L_0x0CLASSNAME:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateContactsReset
            if (r5 == 0) goto L_0x0CLASSNAME
            if (r18 != 0) goto L_0x0c8d
            java.util.ArrayList r18 = new java.util.ArrayList
            r18.<init>()
        L_0x0c8d:
            r5 = r18
            r5.add(r1)
            goto L_0x0a31
        L_0x0CLASSNAME:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateChannelAvailableMessages
            if (r5 == 0) goto L_0x0cd5
            org.telegram.tgnet.TLRPC$TL_updateChannelAvailableMessages r1 = (org.telegram.tgnet.TLRPC$TL_updateChannelAvailableMessages) r1
            r11 = r43
            if (r11 != 0) goto L_0x0ca5
            android.util.SparseIntArray r43 = new android.util.SparseIntArray
            r43.<init>()
            r11 = r43
        L_0x0ca5:
            int r5 = r1.channel_id
            int r5 = r11.get(r5)
            if (r5 == 0) goto L_0x0cb1
            int r6 = r1.available_min_id
            if (r5 >= r6) goto L_0x0cb8
        L_0x0cb1:
            int r5 = r1.channel_id
            int r1 = r1.available_min_id
            r11.put(r5, r1)
        L_0x0cb8:
            r5 = r2
            r41 = r3
            r10 = r4
            r52 = r11
            r43 = r13
            r9 = r14
            r25 = r24
            r13 = r32
            r3 = r45
            r2 = r46
            r8 = r47
            r7 = r49
            r11 = r50
            r44 = r51
            r14 = r65
            goto L_0x14f1
        L_0x0cd5:
            r11 = r43
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateDialogUnreadMark
            if (r5 == 0) goto L_0x0d04
            if (r18 != 0) goto L_0x0ce2
            java.util.ArrayList r18 = new java.util.ArrayList
            r18.<init>()
        L_0x0ce2:
            r5 = r18
            r5.add(r1)
        L_0x0ce7:
            r41 = r3
            r10 = r4
            r18 = r5
            r52 = r11
            r43 = r13
            r9 = r14
            r25 = r24
            r13 = r32
            r3 = r45
            r8 = r47
            r7 = r49
            r11 = r50
            r44 = r51
            r14 = r65
            r5 = r2
            goto L_0x0a4c
        L_0x0d04:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateMessagePoll
            if (r5 == 0) goto L_0x0d4e
            r5 = r1
            org.telegram.tgnet.TLRPC$TL_updateMessagePoll r5 = (org.telegram.tgnet.TLRPC$TL_updateMessagePoll) r5
            org.telegram.messenger.SendMessagesHelper r6 = r63.getSendMessagesHelper()
            long r7 = r5.poll_id
            long r6 = r6.getVoteSendTime(r7)
            long r8 = android.os.SystemClock.elapsedRealtime()
            long r8 = r8 - r6
            long r6 = java.lang.Math.abs(r8)
            r8 = 600(0x258, double:2.964E-321)
            int r10 = (r6 > r8 ? 1 : (r6 == r8 ? 0 : -1))
            if (r10 >= 0) goto L_0x0d34
        L_0x0d24:
            r41 = r3
            r52 = r11
            r43 = r13
            r44 = r14
            r13 = r32
            r14 = r65
            r65 = r0
            goto L_0x0fa9
        L_0x0d34:
            org.telegram.messenger.MessagesStorage r6 = r63.getMessagesStorage()
            long r7 = r5.poll_id
            org.telegram.tgnet.TLRPC$Poll r9 = r5.poll
            org.telegram.tgnet.TLRPC$PollResults r5 = r5.results
            r6.updateMessagePollResults(r7, r9, r5)
            if (r18 != 0) goto L_0x0d48
            java.util.ArrayList r18 = new java.util.ArrayList
            r18.<init>()
        L_0x0d48:
            r5 = r18
            r5.add(r1)
            goto L_0x0ce7
        L_0x0d4e:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateMessageReactions
            if (r5 == 0) goto L_0x0d8b
            r5 = r1
            org.telegram.tgnet.TLRPC$TL_updateMessageReactions r5 = (org.telegram.tgnet.TLRPC$TL_updateMessageReactions) r5
            org.telegram.tgnet.TLRPC$Peer r6 = r5.peer
            int r7 = r6.chat_id
            if (r7 == 0) goto L_0x0d60
        L_0x0d5b:
            int r6 = -r7
        L_0x0d5c:
            long r6 = (long) r6
            r35 = r6
            goto L_0x0d68
        L_0x0d60:
            int r7 = r6.channel_id
            if (r7 == 0) goto L_0x0d65
            goto L_0x0d5b
        L_0x0d65:
            int r6 = r6.user_id
            goto L_0x0d5c
        L_0x0d68:
            org.telegram.messenger.MessagesStorage r34 = r63.getMessagesStorage()
            int r6 = r5.msg_id
            org.telegram.tgnet.TLRPC$Peer r7 = r5.peer
            int r7 = r7.channel_id
            org.telegram.tgnet.TLRPC$TL_messageReactions r5 = r5.reactions
            r37 = r6
            r38 = r7
            r39 = r5
            r34.updateMessageReactions(r35, r37, r38, r39)
            if (r18 != 0) goto L_0x0d84
            java.util.ArrayList r18 = new java.util.ArrayList
            r18.<init>()
        L_0x0d84:
            r5 = r18
            r5.add(r1)
            goto L_0x0ce7
        L_0x0d8b:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updatePeerLocated
            if (r5 == 0) goto L_0x0d9d
            if (r18 != 0) goto L_0x0d96
            java.util.ArrayList r18 = new java.util.ArrayList
            r18.<init>()
        L_0x0d96:
            r5 = r18
            r5.add(r1)
            goto L_0x0ce7
        L_0x0d9d:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateTheme
            if (r5 == 0) goto L_0x0daf
            if (r18 != 0) goto L_0x0da8
            java.util.ArrayList r18 = new java.util.ArrayList
            r18.<init>()
        L_0x0da8:
            r5 = r18
            r5.add(r1)
            goto L_0x0ce7
        L_0x0daf:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateGeoLiveViewed
            if (r5 == 0) goto L_0x0dbc
            org.telegram.messenger.LocationController r1 = r63.getLocationController()
            r1.setNewLocationEndWatchTime()
            goto L_0x0d24
        L_0x0dbc:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateDialogFilter
            if (r5 == 0) goto L_0x0dce
            if (r18 != 0) goto L_0x0dc7
            java.util.ArrayList r18 = new java.util.ArrayList
            r18.<init>()
        L_0x0dc7:
            r5 = r18
            r5.add(r1)
            goto L_0x0ce7
        L_0x0dce:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateDialogFilterOrder
            if (r5 == 0) goto L_0x0de0
            if (r18 != 0) goto L_0x0dd9
            java.util.ArrayList r18 = new java.util.ArrayList
            r18.<init>()
        L_0x0dd9:
            r5 = r18
            r5.add(r1)
            goto L_0x0ce7
        L_0x0de0:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateDialogFilters
            if (r5 == 0) goto L_0x0df2
            if (r18 != 0) goto L_0x0deb
            java.util.ArrayList r18 = new java.util.ArrayList
            r18.<init>()
        L_0x0deb:
            r5 = r18
            r5.add(r1)
            goto L_0x0ce7
        L_0x0df2:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateReadChannelDiscussionInbox
            if (r5 == 0) goto L_0x0e04
            if (r18 != 0) goto L_0x0dfd
            java.util.ArrayList r18 = new java.util.ArrayList
            r18.<init>()
        L_0x0dfd:
            r5 = r18
            r5.add(r1)
            goto L_0x0ce7
        L_0x0e04:
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateReadChannelDiscussionOutbox
            if (r5 == 0) goto L_0x0d24
            if (r18 != 0) goto L_0x0e10
            java.util.ArrayList r5 = new java.util.ArrayList
            r5.<init>()
            goto L_0x0e12
        L_0x0e10:
            r5 = r18
        L_0x0e12:
            r5.add(r1)
            goto L_0x0ce7
        L_0x0e17:
            r11 = r43
            if (r5 == 0) goto L_0x0e51
            org.telegram.tgnet.TLRPC$TL_updateEditChannelMessage r1 = (org.telegram.tgnet.TLRPC$TL_updateEditChannelMessage) r1
            org.telegram.tgnet.TLRPC$Message r1 = r1.message
            org.telegram.tgnet.TLRPC$Peer r5 = r1.peer_id
            int r5 = r5.channel_id
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
            java.lang.Object r5 = r12.get(r5)
            org.telegram.tgnet.TLRPC$Chat r5 = (org.telegram.tgnet.TLRPC$Chat) r5
            if (r5 != 0) goto L_0x0e3b
            org.telegram.tgnet.TLRPC$Peer r5 = r1.peer_id
            int r5 = r5.channel_id
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
            org.telegram.tgnet.TLRPC$Chat r5 = r15.getChat(r5)
        L_0x0e3b:
            if (r5 != 0) goto L_0x0e4d
            org.telegram.messenger.MessagesStorage r5 = r63.getMessagesStorage()
            org.telegram.tgnet.TLRPC$Peer r6 = r1.peer_id
            int r6 = r6.channel_id
            org.telegram.tgnet.TLRPC$Chat r5 = r5.getChatSync(r6)
            r6 = 1
            r15.putChat(r5, r6)
        L_0x0e4d:
            r10 = r65
        L_0x0e4f:
            r5 = 1
            goto L_0x0e66
        L_0x0e51:
            org.telegram.tgnet.TLRPC$TL_updateEditMessage r1 = (org.telegram.tgnet.TLRPC$TL_updateEditMessage) r1
            org.telegram.tgnet.TLRPC$Message r1 = r1.message
            long r5 = r1.dialog_id
            r10 = r65
            long r7 = (long) r10
            int r9 = (r5 > r7 ? 1 : (r5 == r7 ? 0 : -1))
            if (r9 != 0) goto L_0x0e4f
            r5 = 0
            r1.unread = r5
            r1.media_unread = r5
            r5 = 1
            r1.out = r5
        L_0x0e66:
            boolean r6 = r1.out
            if (r6 != 0) goto L_0x0e76
            org.telegram.tgnet.TLRPC$Peer r6 = r1.from_id
            boolean r7 = r6 instanceof org.telegram.tgnet.TLRPC$TL_peerUser
            if (r7 == 0) goto L_0x0e76
            int r6 = r6.user_id
            if (r6 != r10) goto L_0x0e76
            r1.out = r5
        L_0x0e76:
            if (r67 != 0) goto L_0x0ed8
            java.util.ArrayList<org.telegram.tgnet.TLRPC$MessageEntity> r5 = r1.entities
            int r5 = r5.size()
            r6 = 0
        L_0x0e7f:
            if (r6 >= r5) goto L_0x0ed8
            java.util.ArrayList<org.telegram.tgnet.TLRPC$MessageEntity> r7 = r1.entities
            java.lang.Object r7 = r7.get(r6)
            org.telegram.tgnet.TLRPC$MessageEntity r7 = (org.telegram.tgnet.TLRPC$MessageEntity) r7
            boolean r8 = r7 instanceof org.telegram.tgnet.TLRPC$TL_messageEntityMentionName
            if (r8 == 0) goto L_0x0ecd
            org.telegram.tgnet.TLRPC$TL_messageEntityMentionName r7 = (org.telegram.tgnet.TLRPC$TL_messageEntityMentionName) r7
            int r7 = r7.user_id
            java.lang.Integer r8 = java.lang.Integer.valueOf(r7)
            r9 = r32
            java.lang.Object r8 = r9.get(r8)
            org.telegram.tgnet.TLRPC$User r8 = (org.telegram.tgnet.TLRPC$User) r8
            r65 = r0
            if (r8 == 0) goto L_0x0ea5
            boolean r0 = r8.min
            if (r0 == 0) goto L_0x0ead
        L_0x0ea5:
            java.lang.Integer r0 = java.lang.Integer.valueOf(r7)
            org.telegram.tgnet.TLRPC$User r8 = r15.getUser(r0)
        L_0x0ead:
            if (r8 == 0) goto L_0x0eb3
            boolean r0 = r8.min
            if (r0 == 0) goto L_0x0ec9
        L_0x0eb3:
            org.telegram.messenger.MessagesStorage r0 = r63.getMessagesStorage()
            org.telegram.tgnet.TLRPC$User r0 = r0.getUserSync(r7)
            if (r0 == 0) goto L_0x0ec4
            boolean r7 = r0.min
            if (r7 == 0) goto L_0x0ec4
            r8 = r17
            goto L_0x0ec5
        L_0x0ec4:
            r8 = r0
        L_0x0ec5:
            r0 = 1
            r15.putUser(r8, r0)
        L_0x0ec9:
            if (r8 != 0) goto L_0x0ed1
            r0 = 0
            return r0
        L_0x0ecd:
            r65 = r0
            r9 = r32
        L_0x0ed1:
            int r6 = r6 + 1
            r0 = r65
            r32 = r9
            goto L_0x0e7f
        L_0x0ed8:
            r65 = r0
            r9 = r32
            org.telegram.messenger.MessageObject.getDialogId(r1)
            boolean r0 = r1.out
            if (r0 == 0) goto L_0x0ee6
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r0 = r15.dialogs_read_outbox_max
            goto L_0x0ee8
        L_0x0ee6:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r0 = r15.dialogs_read_inbox_max
        L_0x0ee8:
            long r5 = r1.dialog_id
            java.lang.Long r5 = java.lang.Long.valueOf(r5)
            java.lang.Object r5 = r0.get(r5)
            java.lang.Integer r5 = (java.lang.Integer) r5
            if (r5 != 0) goto L_0x0f0f
            org.telegram.messenger.MessagesStorage r5 = r63.getMessagesStorage()
            boolean r6 = r1.out
            long r7 = r1.dialog_id
            int r5 = r5.getDialogReadMax(r6, r7)
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
            long r6 = r1.dialog_id
            java.lang.Long r6 = java.lang.Long.valueOf(r6)
            r0.put(r6, r5)
        L_0x0f0f:
            int r0 = r5.intValue()
            int r5 = r1.id
            if (r0 >= r5) goto L_0x0var_
            r0 = 1
            goto L_0x0f1a
        L_0x0var_:
            r0 = 0
        L_0x0f1a:
            r1.unread = r0
            long r5 = r1.dialog_id
            long r7 = (long) r10
            int r0 = (r5 > r7 ? 1 : (r5 == r7 ? 0 : -1))
            if (r0 != 0) goto L_0x0f2b
            r0 = 1
            r1.out = r0
            r0 = 0
            r1.unread = r0
            r1.media_unread = r0
        L_0x0f2b:
            boolean r0 = r1.out
            if (r0 == 0) goto L_0x0var_
            java.lang.String r0 = r1.message
            if (r0 != 0) goto L_0x0var_
            java.lang.String r0 = ""
            r1.message = r0
            r1.attachPath = r0
        L_0x0var_:
            org.telegram.messenger.ImageLoader.saveMessageThumbs(r1)
            java.util.ArrayList<java.lang.Long> r0 = r15.createdDialogIds
            long r5 = r1.dialog_id
            java.lang.Long r5 = java.lang.Long.valueOf(r5)
            boolean r0 = r0.contains(r5)
            org.telegram.messenger.MessageObject r8 = new org.telegram.messenger.MessageObject
            int r6 = r15.currentAccount
            r5 = r8
            r7 = r1
            r41 = r3
            r3 = r8
            r8 = r9
            r43 = r13
            r13 = r9
            r9 = r12
            r44 = r14
            r14 = r10
            r10 = r0
            r52 = r11
            r11 = r0
            r5.<init>((int) r6, (org.telegram.tgnet.TLRPC$Message) r7, (java.util.AbstractMap<java.lang.Integer, org.telegram.tgnet.TLRPC$User>) r8, (java.util.AbstractMap<java.lang.Integer, org.telegram.tgnet.TLRPC$Chat>) r9, (boolean) r10, (boolean) r11)
            if (r47 != 0) goto L_0x0var_
            android.util.LongSparseArray r8 = new android.util.LongSparseArray
            r8.<init>()
            goto L_0x0f6a
        L_0x0var_:
            r8 = r47
        L_0x0f6a:
            long r5 = r1.dialog_id
            java.lang.Object r0 = r8.get(r5)
            java.util.ArrayList r0 = (java.util.ArrayList) r0
            if (r0 != 0) goto L_0x0f7e
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            long r5 = r1.dialog_id
            r8.put(r5, r0)
        L_0x0f7e:
            r0.add(r3)
            r0 = r65
            r5 = r2
            r10 = r4
            r25 = r24
            r9 = r44
            r3 = r45
            r2 = r46
            goto L_0x0fb7
        L_0x0f8e:
            r24 = r2
            r51 = r9
            r42 = r11
            r44 = r14
            r2 = r26
            r52 = r43
            r14 = r65
            r65 = r0
            r43 = r13
            r13 = r4
            r4 = r10
            org.telegram.tgnet.ConnectionsManager r0 = r63.getConnectionsManager()
            r0.updateDcSettings()
        L_0x0fa9:
            r0 = r65
            r5 = r2
            r10 = r4
            r25 = r24
            r9 = r44
            r3 = r45
            r2 = r46
            r8 = r47
        L_0x0fb7:
            r7 = r49
            r11 = r50
            goto L_0x14ef
        L_0x0fbd:
            r46 = r2
            r45 = r3
            r50 = r11
            r48 = r14
            r2 = r26
            r49 = r32
            r47 = r38
            r52 = r43
            r51 = r44
            r14 = r65
            r65 = r0
            r43 = r13
            r44 = r40
            r13 = r4
            r4 = r10
            boolean r0 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateChannelUserTyping
            if (r0 == 0) goto L_0x0fe8
            org.telegram.tgnet.TLRPC$TL_updateChannelUserTyping r1 = (org.telegram.tgnet.TLRPC$TL_updateChannelUserTyping) r1
            int r0 = r1.user_id
            int r3 = r1.channel_id
            org.telegram.tgnet.TLRPC$SendMessageAction r5 = r1.action
            int r1 = r1.top_msg_id
            goto L_0x1001
        L_0x0fe8:
            if (r5 == 0) goto L_0x0ff3
            org.telegram.tgnet.TLRPC$TL_updateUserTyping r1 = (org.telegram.tgnet.TLRPC$TL_updateUserTyping) r1
            int r0 = r1.user_id
            org.telegram.tgnet.TLRPC$SendMessageAction r5 = r1.action
            r1 = 0
            r3 = 0
            goto L_0x1001
        L_0x0ff3:
            org.telegram.tgnet.TLRPC$TL_updateChatUserTyping r1 = (org.telegram.tgnet.TLRPC$TL_updateChatUserTyping) r1
            int r0 = r1.chat_id
            int r3 = r1.user_id
            org.telegram.tgnet.TLRPC$SendMessageAction r5 = r1.action
            r1 = 0
            r62 = r3
            r3 = r0
            r0 = r62
        L_0x1001:
            org.telegram.messenger.UserConfig r6 = r63.getUserConfig()
            int r6 = r6.getClientUserId()
            if (r0 == r6) goto L_0x1115
            int r6 = -r3
            long r6 = (long) r6
            r8 = 0
            int r10 = (r6 > r8 ? 1 : (r6 == r8 ? 0 : -1))
            if (r10 != 0) goto L_0x1014
            long r6 = (long) r0
        L_0x1014:
            boolean r8 = r5 instanceof org.telegram.tgnet.TLRPC$TL_speakingInGroupCallAction
            if (r8 == 0) goto L_0x103d
            if (r3 == 0) goto L_0x1094
            if (r19 != 0) goto L_0x1021
            android.util.SparseArray r19 = new android.util.SparseArray
            r19.<init>()
        L_0x1021:
            r1 = r19
            java.lang.Object r5 = r1.get(r3)
            java.util.ArrayList r5 = (java.util.ArrayList) r5
            if (r5 != 0) goto L_0x1033
            java.util.ArrayList r5 = new java.util.ArrayList
            r5.<init>()
            r1.put(r3, r5)
        L_0x1033:
            java.lang.Integer r3 = java.lang.Integer.valueOf(r0)
            r5.add(r3)
            r19 = r1
            goto L_0x1094
        L_0x103d:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, j$.util.concurrent.ConcurrentHashMap<java.lang.Integer, java.util.ArrayList<org.telegram.messenger.MessagesController$PrintingUser>>> r3 = r15.printingUsers
            java.lang.Long r8 = java.lang.Long.valueOf(r6)
            java.lang.Object r3 = r3.get(r8)
            j$.util.concurrent.ConcurrentHashMap r3 = (j$.util.concurrent.ConcurrentHashMap) r3
            if (r3 == 0) goto L_0x1056
            java.lang.Integer r8 = java.lang.Integer.valueOf(r1)
            java.lang.Object r8 = r3.get(r8)
            java.util.ArrayList r8 = (java.util.ArrayList) r8
            goto L_0x1058
        L_0x1056:
            r8 = r17
        L_0x1058:
            boolean r9 = r5 instanceof org.telegram.tgnet.TLRPC$TL_sendMessageCancelAction
            if (r9 == 0) goto L_0x1097
            if (r8 == 0) goto L_0x1094
            int r5 = r8.size()
            r9 = 0
        L_0x1063:
            if (r9 >= r5) goto L_0x1078
            java.lang.Object r10 = r8.get(r9)
            org.telegram.messenger.MessagesController$PrintingUser r10 = (org.telegram.messenger.MessagesController.PrintingUser) r10
            int r10 = r10.userId
            if (r10 != r0) goto L_0x1075
            r8.remove(r9)
            r22 = 1
            goto L_0x1078
        L_0x1075:
            int r9 = r9 + 1
            goto L_0x1063
        L_0x1078:
            boolean r5 = r8.isEmpty()
            if (r5 == 0) goto L_0x1094
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            r3.remove(r1)
            boolean r1 = r3.isEmpty()
            if (r1 == 0) goto L_0x1094
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, j$.util.concurrent.ConcurrentHashMap<java.lang.Integer, java.util.ArrayList<org.telegram.messenger.MessagesController$PrintingUser>>> r1 = r15.printingUsers
            java.lang.Long r3 = java.lang.Long.valueOf(r6)
            r1.remove(r3)
        L_0x1094:
            r10 = r24
            goto L_0x10f4
        L_0x1097:
            if (r3 != 0) goto L_0x10a7
            j$.util.concurrent.ConcurrentHashMap r3 = new j$.util.concurrent.ConcurrentHashMap
            r3.<init>()
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, j$.util.concurrent.ConcurrentHashMap<java.lang.Integer, java.util.ArrayList<org.telegram.messenger.MessagesController$PrintingUser>>> r9 = r15.printingUsers
            java.lang.Long r6 = java.lang.Long.valueOf(r6)
            r9.put(r6, r3)
        L_0x10a7:
            if (r8 != 0) goto L_0x10b5
            java.util.ArrayList r8 = new java.util.ArrayList
            r8.<init>()
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            r3.put(r1, r8)
        L_0x10b5:
            java.util.Iterator r1 = r8.iterator()
        L_0x10b9:
            boolean r3 = r1.hasNext()
            if (r3 == 0) goto L_0x10df
            java.lang.Object r3 = r1.next()
            org.telegram.messenger.MessagesController$PrintingUser r3 = (org.telegram.messenger.MessagesController.PrintingUser) r3
            int r6 = r3.userId
            if (r6 != r0) goto L_0x10b9
            r10 = r24
            r3.lastTime = r10
            org.telegram.tgnet.TLRPC$SendMessageAction r1 = r3.action
            java.lang.Class r1 = r1.getClass()
            java.lang.Class r6 = r5.getClass()
            if (r1 == r6) goto L_0x10db
            r22 = 1
        L_0x10db:
            r3.action = r5
            r1 = 1
            goto L_0x10e2
        L_0x10df:
            r10 = r24
            r1 = 0
        L_0x10e2:
            if (r1 != 0) goto L_0x10f4
            org.telegram.messenger.MessagesController$PrintingUser r1 = new org.telegram.messenger.MessagesController$PrintingUser
            r1.<init>()
            r1.userId = r0
            r1.lastTime = r10
            r1.action = r5
            r8.add(r1)
            r22 = 1
        L_0x10f4:
            org.telegram.tgnet.ConnectionsManager r1 = r63.getConnectionsManager()
            int r1 = r1.getCurrentTime()
            int r1 = r1 - r68
            int r1 = java.lang.Math.abs(r1)
            r3 = 30
            if (r1 >= r3) goto L_0x12fe
            j$.util.concurrent.ConcurrentHashMap<java.lang.Integer, java.lang.Integer> r1 = r15.onlinePrivacy
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)
            java.lang.Integer r3 = java.lang.Integer.valueOf(r68)
            r1.put(r0, r3)
            goto L_0x12fe
        L_0x1115:
            r10 = r24
            goto L_0x12fe
        L_0x1119:
            r46 = r2
            r45 = r3
            r47 = r8
            r50 = r11
            r48 = r14
            r2 = r26
            r49 = r32
            r52 = r43
            r51 = r44
            r14 = r65
            r65 = r0
            r44 = r9
            r43 = r13
            r13 = r4
            r4 = r10
            r10 = r24
            if (r5 == 0) goto L_0x113f
            r0 = r1
            org.telegram.tgnet.TLRPC$TL_updateNewMessage r0 = (org.telegram.tgnet.TLRPC$TL_updateNewMessage) r0
            org.telegram.tgnet.TLRPC$Message r0 = r0.message
            goto L_0x1184
        L_0x113f:
            boolean r0 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateNewScheduledMessage
            if (r0 == 0) goto L_0x1149
            r0 = r1
            org.telegram.tgnet.TLRPC$TL_updateNewScheduledMessage r0 = (org.telegram.tgnet.TLRPC$TL_updateNewScheduledMessage) r0
            org.telegram.tgnet.TLRPC$Message r0 = r0.message
            goto L_0x1184
        L_0x1149:
            r0 = r1
            org.telegram.tgnet.TLRPC$TL_updateNewChannelMessage r0 = (org.telegram.tgnet.TLRPC$TL_updateNewChannelMessage) r0
            org.telegram.tgnet.TLRPC$Message r0 = r0.message
            boolean r3 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r3 == 0) goto L_0x116b
            java.lang.StringBuilder r3 = new java.lang.StringBuilder
            r3.<init>()
            r3.append(r1)
            r3.append(r7)
            org.telegram.tgnet.TLRPC$Peer r5 = r0.peer_id
            int r5 = r5.channel_id
            r3.append(r5)
            java.lang.String r3 = r3.toString()
            org.telegram.messenger.FileLog.d(r3)
        L_0x116b:
            boolean r3 = r0.out
            if (r3 != 0) goto L_0x1184
            org.telegram.tgnet.TLRPC$Peer r3 = r0.from_id
            boolean r5 = r3 instanceof org.telegram.tgnet.TLRPC$TL_peerUser
            if (r5 == 0) goto L_0x1184
            int r3 = r3.user_id
            org.telegram.messenger.UserConfig r5 = r63.getUserConfig()
            int r5 = r5.getClientUserId()
            if (r3 != r5) goto L_0x1184
            r3 = 1
            r0.out = r3
        L_0x1184:
            org.telegram.tgnet.TLRPC$Peer r3 = r0.peer_id
            int r5 = r3.channel_id
            if (r5 == 0) goto L_0x118c
        L_0x118a:
            r3 = 0
            goto L_0x1198
        L_0x118c:
            int r5 = r3.chat_id
            if (r5 == 0) goto L_0x1191
            goto L_0x118a
        L_0x1191:
            int r3 = r3.user_id
            if (r3 == 0) goto L_0x1196
            goto L_0x1197
        L_0x1196:
            r3 = 0
        L_0x1197:
            r5 = 0
        L_0x1198:
            if (r5 == 0) goto L_0x11c6
            java.lang.Integer r6 = java.lang.Integer.valueOf(r5)
            java.lang.Object r6 = r12.get(r6)
            org.telegram.tgnet.TLRPC$Chat r6 = (org.telegram.tgnet.TLRPC$Chat) r6
            if (r6 == 0) goto L_0x11aa
            boolean r7 = r6.min
            if (r7 == 0) goto L_0x11b2
        L_0x11aa:
            java.lang.Integer r6 = java.lang.Integer.valueOf(r5)
            org.telegram.tgnet.TLRPC$Chat r6 = r15.getChat(r6)
        L_0x11b2:
            if (r6 == 0) goto L_0x11b8
            boolean r7 = r6.min
            if (r7 == 0) goto L_0x11c4
        L_0x11b8:
            org.telegram.messenger.MessagesStorage r6 = r63.getMessagesStorage()
            org.telegram.tgnet.TLRPC$Chat r6 = r6.getChatSync(r5)
            r7 = 1
            r15.putChat(r6, r7)
        L_0x11c4:
            r9 = r6
            goto L_0x11c8
        L_0x11c6:
            r9 = r17
        L_0x11c8:
            if (r16 == 0) goto L_0x12c8
            if (r5 == 0) goto L_0x11e8
            if (r9 != 0) goto L_0x11e8
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x11e6
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "not found chat "
            r0.append(r1)
            r0.append(r5)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x11e6:
            r0 = 0
            return r0
        L_0x11e8:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$MessageEntity> r5 = r0.entities
            int r5 = r5.size()
            int r5 = r5 + 3
            r6 = 0
        L_0x11f1:
            if (r6 >= r5) goto L_0x12c8
            if (r6 == 0) goto L_0x122e
            r7 = 1
            if (r6 != r7) goto L_0x1209
            org.telegram.tgnet.TLRPC$Peer r3 = r0.from_id
            boolean r7 = r3 instanceof org.telegram.tgnet.TLRPC$TL_peerUser
            if (r7 == 0) goto L_0x1201
            int r3 = r3.user_id
            goto L_0x1202
        L_0x1201:
            r3 = 0
        L_0x1202:
            boolean r7 = r0.post
            if (r7 == 0) goto L_0x122e
            r7 = 2
            r8 = 1
            goto L_0x1230
        L_0x1209:
            r7 = 2
            if (r6 != r7) goto L_0x121b
            org.telegram.tgnet.TLRPC$MessageFwdHeader r3 = r0.fwd_from
            if (r3 == 0) goto L_0x1219
            org.telegram.tgnet.TLRPC$Peer r3 = r3.from_id
            boolean r8 = r3 instanceof org.telegram.tgnet.TLRPC$TL_peerUser
            if (r8 == 0) goto L_0x1219
            int r3 = r3.user_id
            goto L_0x122f
        L_0x1219:
            r3 = 0
            goto L_0x122f
        L_0x121b:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$MessageEntity> r3 = r0.entities
            int r8 = r6 + -3
            java.lang.Object r3 = r3.get(r8)
            org.telegram.tgnet.TLRPC$MessageEntity r3 = (org.telegram.tgnet.TLRPC$MessageEntity) r3
            boolean r8 = r3 instanceof org.telegram.tgnet.TLRPC$TL_messageEntityMentionName
            if (r8 == 0) goto L_0x1219
            org.telegram.tgnet.TLRPC$TL_messageEntityMentionName r3 = (org.telegram.tgnet.TLRPC$TL_messageEntityMentionName) r3
            int r3 = r3.user_id
            goto L_0x122f
        L_0x122e:
            r7 = 2
        L_0x122f:
            r8 = 0
        L_0x1230:
            if (r3 <= 0) goto L_0x12c0
            java.lang.Integer r7 = java.lang.Integer.valueOf(r3)
            java.lang.Object r7 = r13.get(r7)
            org.telegram.tgnet.TLRPC$User r7 = (org.telegram.tgnet.TLRPC$User) r7
            r24 = r5
            if (r7 == 0) goto L_0x1246
            if (r8 != 0) goto L_0x124e
            boolean r5 = r7.min
            if (r5 == 0) goto L_0x124e
        L_0x1246:
            java.lang.Integer r5 = java.lang.Integer.valueOf(r3)
            org.telegram.tgnet.TLRPC$User r7 = r15.getUser(r5)
        L_0x124e:
            if (r7 == 0) goto L_0x1256
            if (r8 != 0) goto L_0x126e
            boolean r5 = r7.min
            if (r5 == 0) goto L_0x126e
        L_0x1256:
            org.telegram.messenger.MessagesStorage r5 = r63.getMessagesStorage()
            org.telegram.tgnet.TLRPC$User r5 = r5.getUserSync(r3)
            if (r5 == 0) goto L_0x1269
            if (r8 != 0) goto L_0x1269
            boolean r7 = r5.min
            if (r7 == 0) goto L_0x1269
            r7 = r17
            goto L_0x126a
        L_0x1269:
            r7 = r5
        L_0x126a:
            r5 = 1
            r15.putUser(r7, r5)
        L_0x126e:
            if (r7 != 0) goto L_0x128a
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x1288
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "not found user "
            r0.append(r1)
            r0.append(r3)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x1288:
            r0 = 0
            return r0
        L_0x128a:
            boolean r5 = r0.out
            if (r5 != 0) goto L_0x12c2
            r5 = 1
            if (r6 != r5) goto L_0x12c2
            org.telegram.tgnet.TLRPC$UserStatus r5 = r7.status
            if (r5 == 0) goto L_0x12c2
            int r5 = r5.expires
            if (r5 > 0) goto L_0x12c2
            org.telegram.tgnet.ConnectionsManager r5 = r63.getConnectionsManager()
            int r5 = r5.getCurrentTime()
            int r7 = r0.date
            int r5 = r5 - r7
            int r5 = java.lang.Math.abs(r5)
            r7 = 30
            if (r5 >= r7) goto L_0x12c2
            j$.util.concurrent.ConcurrentHashMap<java.lang.Integer, java.lang.Integer> r5 = r15.onlinePrivacy
            java.lang.Integer r8 = java.lang.Integer.valueOf(r3)
            int r7 = r0.date
            java.lang.Integer r7 = java.lang.Integer.valueOf(r7)
            r5.put(r8, r7)
            r5 = r50 | 4
            r50 = r5
            goto L_0x12c2
        L_0x12c0:
            r24 = r5
        L_0x12c2:
            int r6 = r6 + 1
            r5 = r24
            goto L_0x11f1
        L_0x12c8:
            org.telegram.tgnet.TLRPC$MessageAction r3 = r0.action
            boolean r5 = r3 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatDeleteUser
            if (r5 == 0) goto L_0x1314
            int r3 = r3.user_id
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)
            java.lang.Object r3 = r13.get(r3)
            org.telegram.tgnet.TLRPC$User r3 = (org.telegram.tgnet.TLRPC$User) r3
            if (r3 == 0) goto L_0x12ee
            boolean r3 = r3.bot
            if (r3 == 0) goto L_0x12ee
            org.telegram.tgnet.TLRPC$TL_replyKeyboardHide r3 = new org.telegram.tgnet.TLRPC$TL_replyKeyboardHide
            r3.<init>()
            r0.reply_markup = r3
            int r3 = r0.flags
            r3 = r3 | 64
            r0.flags = r3
            goto L_0x1314
        L_0x12ee:
            org.telegram.tgnet.TLRPC$Peer r3 = r0.from_id
            boolean r5 = r3 instanceof org.telegram.tgnet.TLRPC$TL_peerUser
            if (r5 == 0) goto L_0x1314
            int r3 = r3.user_id
            if (r3 != r14) goto L_0x1314
            org.telegram.tgnet.TLRPC$MessageAction r3 = r0.action
            int r3 = r3.user_id
            if (r3 != r14) goto L_0x1314
        L_0x12fe:
            r0 = r65
            r5 = r2
            r25 = r10
            r9 = r44
            r3 = r45
            r2 = r46
            r8 = r47
            r7 = r49
            r11 = r50
            r44 = r51
            r10 = r4
            goto L_0x14f1
        L_0x1314:
            org.telegram.messenger.ImageLoader.saveMessageThumbs(r0)
            org.telegram.messenger.MessageObject.getDialogId(r0)
            boolean r3 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateNewChannelMessage
            if (r3 == 0) goto L_0x1372
            org.telegram.tgnet.TLRPC$TL_messageReplyHeader r3 = r0.reply_to
            if (r3 == 0) goto L_0x1372
            org.telegram.tgnet.TLRPC$MessageAction r3 = r0.action
            boolean r3 = r3 instanceof org.telegram.tgnet.TLRPC$TL_messageActionPinMessage
            if (r3 != 0) goto L_0x1372
            if (r30 != 0) goto L_0x132f
            android.util.SparseArray r30 = new android.util.SparseArray
            r30.<init>()
        L_0x132f:
            r3 = r30
            long r5 = r0.dialog_id
            int r6 = (int) r5
            java.lang.Object r5 = r3.get(r6)
            android.util.SparseArray r5 = (android.util.SparseArray) r5
            if (r5 != 0) goto L_0x1347
            android.util.SparseArray r5 = new android.util.SparseArray
            r5.<init>()
            long r6 = r0.dialog_id
            int r7 = (int) r6
            r3.put(r7, r5)
        L_0x1347:
            org.telegram.tgnet.TLRPC$TL_messageReplyHeader r6 = r0.reply_to
            int r7 = r6.reply_to_top_id
            if (r7 == 0) goto L_0x134e
            goto L_0x1350
        L_0x134e:
            int r7 = r6.reply_to_msg_id
        L_0x1350:
            java.lang.Object r6 = r5.get(r7)
            org.telegram.tgnet.TLRPC$TL_messageReplies r6 = (org.telegram.tgnet.TLRPC$TL_messageReplies) r6
            if (r6 != 0) goto L_0x1360
            org.telegram.tgnet.TLRPC$TL_messageReplies r6 = new org.telegram.tgnet.TLRPC$TL_messageReplies
            r6.<init>()
            r5.put(r7, r6)
        L_0x1360:
            org.telegram.tgnet.TLRPC$Peer r5 = r0.from_id
            if (r5 == 0) goto L_0x136a
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Peer> r7 = r6.recent_repliers
            r8 = 0
            r7.add(r8, r5)
        L_0x136a:
            int r5 = r6.replies
            r7 = 1
            int r5 = r5 + r7
            r6.replies = r5
            r30 = r3
        L_0x1372:
            java.util.ArrayList<java.lang.Long> r3 = r15.createdDialogIds
            long r5 = r0.dialog_id
            java.lang.Long r5 = java.lang.Long.valueOf(r5)
            boolean r3 = r3.contains(r5)
            if (r3 == 0) goto L_0x139c
            long r5 = r0.grouped_id
            r7 = 0
            int r3 = (r5 > r7 ? 1 : (r5 == r7 ? 0 : -1))
            if (r3 != 0) goto L_0x139c
            org.telegram.messenger.ImageLoader$MessageThumb r3 = org.telegram.messenger.ImageLoader.generateMessageThumb(r0)
            if (r3 == 0) goto L_0x139c
            if (r31 != 0) goto L_0x1395
            java.util.ArrayList r31 = new java.util.ArrayList
            r31.<init>()
        L_0x1395:
            r5 = r31
            r5.add(r3)
            r31 = r5
        L_0x139c:
            boolean r1 = r1 instanceof org.telegram.tgnet.TLRPC$TL_updateNewScheduledMessage
            if (r1 == 0) goto L_0x13f7
            if (r33 != 0) goto L_0x13a7
            java.util.ArrayList r33 = new java.util.ArrayList
            r33.<init>()
        L_0x13a7:
            r1 = r33
            r1.add(r0)
            java.util.ArrayList<java.lang.Long> r3 = r15.createdScheduledDialogIds
            long r5 = r0.dialog_id
            java.lang.Long r5 = java.lang.Long.valueOf(r5)
            boolean r3 = r3.contains(r5)
            org.telegram.messenger.MessageObject r9 = new org.telegram.messenger.MessageObject
            int r6 = r15.currentAccount
            r5 = r9
            r7 = r0
            r8 = r13
            r24 = r1
            r1 = r9
            r9 = r12
            r25 = r10
            r10 = r3
            r11 = r3
            r5.<init>((int) r6, (org.telegram.tgnet.TLRPC$Message) r7, (java.util.AbstractMap<java.lang.Integer, org.telegram.tgnet.TLRPC$User>) r8, (java.util.AbstractMap<java.lang.Integer, org.telegram.tgnet.TLRPC$Chat>) r9, (boolean) r10, (boolean) r11)
            r3 = 1
            r1.scheduled = r3
            if (r20 != 0) goto L_0x13d4
            android.util.LongSparseArray r20 = new android.util.LongSparseArray
            r20.<init>()
        L_0x13d4:
            r3 = r20
            long r5 = r0.dialog_id
            java.lang.Object r5 = r3.get(r5)
            java.util.ArrayList r5 = (java.util.ArrayList) r5
            if (r5 != 0) goto L_0x13ea
            java.util.ArrayList r5 = new java.util.ArrayList
            r5.<init>()
            long r6 = r0.dialog_id
            r3.put(r6, r5)
        L_0x13ea:
            r5.add(r1)
            r5 = r2
            r20 = r3
            r10 = r4
            r33 = r24
        L_0x13f3:
            r11 = r50
            goto L_0x14e3
        L_0x13f7:
            r25 = r10
            if (r23 != 0) goto L_0x1400
            java.util.ArrayList r23 = new java.util.ArrayList
            r23.<init>()
        L_0x1400:
            r1 = r23
            r1.add(r0)
            boolean r3 = r0.out
            if (r3 == 0) goto L_0x140c
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r3 = r15.dialogs_read_outbox_max
            goto L_0x140e
        L_0x140c:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r3 = r15.dialogs_read_inbox_max
        L_0x140e:
            long r5 = r0.dialog_id
            java.lang.Long r5 = java.lang.Long.valueOf(r5)
            java.lang.Object r5 = r3.get(r5)
            java.lang.Integer r5 = (java.lang.Integer) r5
            if (r5 != 0) goto L_0x1435
            org.telegram.messenger.MessagesStorage r5 = r63.getMessagesStorage()
            boolean r6 = r0.out
            long r7 = r0.dialog_id
            int r5 = r5.getDialogReadMax(r6, r7)
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
            long r6 = r0.dialog_id
            java.lang.Long r6 = java.lang.Long.valueOf(r6)
            r3.put(r6, r5)
        L_0x1435:
            int r3 = r5.intValue()
            int r5 = r0.id
            if (r3 >= r5) goto L_0x1451
            if (r9 == 0) goto L_0x1445
            boolean r3 = org.telegram.messenger.ChatObject.isNotInChat(r9)
            if (r3 != 0) goto L_0x1451
        L_0x1445:
            org.telegram.tgnet.TLRPC$MessageAction r3 = r0.action
            boolean r5 = r3 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatMigrateTo
            if (r5 != 0) goto L_0x1451
            boolean r3 = r3 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChannelCreate
            if (r3 != 0) goto L_0x1451
            r3 = 1
            goto L_0x1452
        L_0x1451:
            r3 = 0
        L_0x1452:
            r0.unread = r3
            long r5 = r0.dialog_id
            long r7 = (long) r14
            int r3 = (r5 > r7 ? 1 : (r5 == r7 ? 0 : -1))
            if (r3 != 0) goto L_0x146a
            boolean r3 = r0.from_scheduled
            if (r3 != 0) goto L_0x1463
            r3 = 0
            r0.unread = r3
            goto L_0x1464
        L_0x1463:
            r3 = 0
        L_0x1464:
            r0.media_unread = r3
            r7 = 1
            r0.out = r7
            goto L_0x146b
        L_0x146a:
            r3 = 0
        L_0x146b:
            java.util.ArrayList<java.lang.Long> r7 = r15.createdDialogIds
            java.lang.Long r5 = java.lang.Long.valueOf(r5)
            boolean r11 = r7.contains(r5)
            org.telegram.messenger.MessageObject r10 = new org.telegram.messenger.MessageObject
            int r6 = r15.currentAccount
            r5 = r10
            r7 = r0
            r8 = r13
            r3 = r9
            r9 = r12
            r23 = r1
            r1 = r10
            r10 = r11
            r5.<init>((int) r6, (org.telegram.tgnet.TLRPC$Message) r7, (java.util.AbstractMap<java.lang.Integer, org.telegram.tgnet.TLRPC$User>) r8, (java.util.AbstractMap<java.lang.Integer, org.telegram.tgnet.TLRPC$Chat>) r9, (boolean) r10, (boolean) r11)
            int r5 = r1.type
            r6 = 11
            if (r5 != r6) goto L_0x148e
            r50 = r50 | 8
            goto L_0x1494
        L_0x148e:
            r6 = 10
            if (r5 != r6) goto L_0x1494
            r50 = r50 | 16
        L_0x1494:
            if (r4 != 0) goto L_0x149c
            android.util.LongSparseArray r10 = new android.util.LongSparseArray
            r10.<init>()
            goto L_0x149d
        L_0x149c:
            r10 = r4
        L_0x149d:
            long r4 = r0.dialog_id
            java.lang.Object r4 = r10.get(r4)
            java.util.ArrayList r4 = (java.util.ArrayList) r4
            if (r4 != 0) goto L_0x14b1
            java.util.ArrayList r4 = new java.util.ArrayList
            r4.<init>()
            long r5 = r0.dialog_id
            r10.put(r5, r4)
        L_0x14b1:
            r4.add(r1)
            boolean r0 = r1.isOut()
            if (r0 == 0) goto L_0x14c0
            org.telegram.tgnet.TLRPC$Message r0 = r1.messageOwner
            boolean r0 = r0.from_scheduled
            if (r0 == 0) goto L_0x14e0
        L_0x14c0:
            boolean r0 = r1.isUnread()
            if (r0 == 0) goto L_0x14e0
            if (r3 == 0) goto L_0x14d2
            boolean r0 = org.telegram.messenger.ChatObject.isNotInChat(r3)
            if (r0 != 0) goto L_0x14e0
            boolean r0 = r3.min
            if (r0 != 0) goto L_0x14e0
        L_0x14d2:
            if (r2 != 0) goto L_0x14da
            java.util.ArrayList r5 = new java.util.ArrayList
            r5.<init>()
            goto L_0x14db
        L_0x14da:
            r5 = r2
        L_0x14db:
            r5.add(r1)
            goto L_0x13f3
        L_0x14e0:
            r5 = r2
            goto L_0x13f3
        L_0x14e3:
            r0 = r65
            r9 = r44
            r3 = r45
            r2 = r46
            r8 = r47
            r7 = r49
        L_0x14ef:
            r44 = r51
        L_0x14f1:
            int r6 = r27 + 1
            r1 = r66
            r4 = r13
            r65 = r14
            r24 = r25
            r13 = r43
            r14 = r48
            r43 = r52
            goto L_0x00b9
        L_0x1502:
            r65 = r0
            r46 = r2
            r45 = r3
            r2 = r5
            r49 = r7
            r47 = r8
            r50 = r11
            r48 = r14
            r52 = r43
            r51 = r44
            r44 = r9
            r43 = r13
            r13 = r4
            r4 = r10
            if (r4 == 0) goto L_0x1539
            int r0 = r4.size()
            r8 = 0
        L_0x1522:
            if (r8 >= r0) goto L_0x1539
            long r5 = r4.keyAt(r8)
            java.lang.Object r1 = r4.valueAt(r8)
            java.util.ArrayList r1 = (java.util.ArrayList) r1
            boolean r1 = r15.updatePrintingUsersWithNewMessages(r5, r1)
            if (r1 == 0) goto L_0x1536
            r22 = 1
        L_0x1536:
            int r8 = r8 + 1
            goto L_0x1522
        L_0x1539:
            r11 = r22
            if (r11 == 0) goto L_0x1540
            r63.updatePrintingStrings()
        L_0x1540:
            if (r49 == 0) goto L_0x154c
            org.telegram.messenger.ContactsController r0 = r63.getContactsController()
            r12 = r49
            r0.processContactsUpdates(r12, r13)
            goto L_0x154e
        L_0x154c:
            r12 = r49
        L_0x154e:
            if (r2 == 0) goto L_0x1560
            org.telegram.messenger.MessagesStorage r0 = r63.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r0 = r0.getStorageQueue()
            org.telegram.messenger.-$$Lambda$MessagesController$OmntkR1bSwbM2qECw_uG461v8sI r1 = new org.telegram.messenger.-$$Lambda$MessagesController$OmntkR1bSwbM2qECw_uG461v8sI
            r1.<init>(r2)
            r0.postRunnable(r1)
        L_0x1560:
            if (r33 == 0) goto L_0x1579
            org.telegram.messenger.MessagesStorage r32 = r63.getMessagesStorage()
            r34 = 1
            r35 = 1
            r36 = 0
            org.telegram.messenger.DownloadController r0 = r63.getDownloadController()
            int r37 = r0.getAutodownloadMask()
            r38 = 1
            r32.putMessages((java.util.ArrayList<org.telegram.tgnet.TLRPC$Message>) r33, (boolean) r34, (boolean) r35, (boolean) r36, (int) r37, (boolean) r38)
        L_0x1579:
            if (r23 == 0) goto L_0x15a5
            org.telegram.messenger.StatsController r0 = r63.getStatsController()
            int r1 = org.telegram.messenger.ApplicationLoader.getCurrentNetworkType()
            int r2 = r23.size()
            r14 = 1
            r0.incrementReceivedItemsCount(r1, r14, r2)
            org.telegram.messenger.MessagesStorage r34 = r63.getMessagesStorage()
            r36 = 1
            r37 = 1
            r38 = 0
            org.telegram.messenger.DownloadController r0 = r63.getDownloadController()
            int r39 = r0.getAutodownloadMask()
            r40 = 0
            r35 = r23
            r34.putMessages((java.util.ArrayList<org.telegram.tgnet.TLRPC$Message>) r35, (boolean) r36, (boolean) r37, (boolean) r38, (int) r39, (boolean) r40)
            goto L_0x15a6
        L_0x15a5:
            r14 = 1
        L_0x15a6:
            if (r47 == 0) goto L_0x1600
            int r0 = r47.size()
            r8 = 0
        L_0x15ad:
            if (r8 >= r0) goto L_0x15ed
            org.telegram.tgnet.TLRPC$TL_messages_messages r1 = new org.telegram.tgnet.TLRPC$TL_messages_messages
            r1.<init>()
            r3 = r47
            java.lang.Object r2 = r3.valueAt(r8)
            java.util.ArrayList r2 = (java.util.ArrayList) r2
            int r5 = r2.size()
            r6 = 0
        L_0x15c1:
            if (r6 >= r5) goto L_0x15d3
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r7 = r1.messages
            java.lang.Object r9 = r2.get(r6)
            org.telegram.messenger.MessageObject r9 = (org.telegram.messenger.MessageObject) r9
            org.telegram.tgnet.TLRPC$Message r9 = r9.messageOwner
            r7.add(r9)
            int r6 = r6 + 1
            goto L_0x15c1
        L_0x15d3:
            org.telegram.messenger.MessagesStorage r32 = r63.getMessagesStorage()
            long r34 = r3.keyAt(r8)
            r36 = -2
            r37 = 0
            r38 = 0
            r39 = 0
            r33 = r1
            r32.putMessages((org.telegram.tgnet.TLRPC$messages_Messages) r33, (long) r34, (int) r36, (int) r37, (boolean) r38, (boolean) r39)
            int r8 = r8 + 1
            r47 = r3
            goto L_0x15ad
        L_0x15ed:
            r3 = r47
            org.telegram.messenger.MessagesStorage r0 = r63.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r0 = r0.getStorageQueue()
            org.telegram.messenger.-$$Lambda$MessagesController$H31iY_zIEhqSTNYmOuactepKtLM r1 = new org.telegram.messenger.-$$Lambda$MessagesController$H31iY_zIEhqSTNYmOuactepKtLM
            r1.<init>(r3)
            r0.postRunnable(r1)
            goto L_0x1602
        L_0x1600:
            r3 = r47
        L_0x1602:
            if (r28 != 0) goto L_0x1608
            if (r29 != 0) goto L_0x1608
            if (r30 == 0) goto L_0x1619
        L_0x1608:
            org.telegram.messenger.MessagesStorage r22 = r63.getMessagesStorage()
            r26 = 1
            r27 = 1
            r23 = r28
            r24 = r29
            r25 = r30
            r22.putChannelViews(r23, r24, r25, r26, r27)
        L_0x1619:
            if (r44 == 0) goto L_0x163e
            int r0 = r44.size()
            r8 = 0
        L_0x1620:
            if (r8 >= r0) goto L_0x163e
            org.telegram.messenger.MessagesStorage r22 = r63.getMessagesStorage()
            r9 = r44
            java.lang.Object r1 = r9.get(r8)
            org.telegram.tgnet.TLRPC$TL_updateFolderPeers r1 = (org.telegram.tgnet.TLRPC$TL_updateFolderPeers) r1
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_folderPeer> r1 = r1.folder_peers
            r24 = 0
            r25 = 0
            r27 = 0
            r23 = r1
            r22.setDialogsFolderId(r23, r24, r25, r27)
            int r8 = r8 + 1
            goto L_0x1620
        L_0x163e:
            r9 = r44
            org.telegram.messenger.-$$Lambda$MessagesController$Ol0k481YrLX4gDIPwl7wfvY0eVc r22 = new org.telegram.messenger.-$$Lambda$MessagesController$Ol0k481YrLX4gDIPwl7wfvY0eVc
            r13 = r65
            r0 = r22
            r1 = r63
            r10 = r46
            r2 = r50
            r17 = r3
            r7 = r41
            r8 = r45
            r16 = 0
            r3 = r18
            r18 = r4
            r4 = r19
            r5 = r68
            r6 = r7
            r61 = r7
            r7 = r18
            r8 = r9
            r9 = r20
            r10 = r17
            r18 = 0
            r13 = r21
            r64 = r48
            r14 = r28
            r15 = r29
            r16 = r30
            r17 = r31
            r0.<init>(r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r22)
            org.telegram.messenger.MessagesStorage r0 = r63.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r9 = r0.getStorageQueue()
            org.telegram.messenger.-$$Lambda$MessagesController$8jmrwXNZGJ0MfV4driiycOMw1-o r10 = new org.telegram.messenger.-$$Lambda$MessagesController$8jmrwXNZGJ0MfV4driiycOMw1-o
            r0 = r10
            r2 = r43
            r3 = r65
            r4 = r42
            r5 = r64
            r6 = r46
            r7 = r45
            r8 = r52
            r0.<init>(r2, r3, r4, r5, r6, r7, r8)
            r9.postRunnable(r10)
            r0 = r61
            if (r0 == 0) goto L_0x16a4
            org.telegram.messenger.MessagesStorage r1 = r63.getMessagesStorage()
            r1.putWebPages(r0)
        L_0x16a4:
            r0 = r43
            if (r0 != 0) goto L_0x16ba
            r1 = r65
            if (r1 != 0) goto L_0x16b7
            r2 = r42
            r3 = r64
            if (r2 != 0) goto L_0x16c0
            if (r3 == 0) goto L_0x16b5
            goto L_0x16c0
        L_0x16b5:
            r5 = 1
            goto L_0x16d8
        L_0x16b7:
            r3 = r64
            goto L_0x16be
        L_0x16ba:
            r3 = r64
            r1 = r65
        L_0x16be:
            r2 = r42
        L_0x16c0:
            if (r0 != 0) goto L_0x16c9
            if (r1 != 0) goto L_0x16c9
            if (r3 == 0) goto L_0x16c7
            goto L_0x16c9
        L_0x16c7:
            r5 = 1
            goto L_0x16d1
        L_0x16c9:
            org.telegram.messenger.MessagesStorage r4 = r63.getMessagesStorage()
            r5 = 1
            r4.updateDialogsWithReadMessages(r0, r1, r3, r5)
        L_0x16d1:
            org.telegram.messenger.MessagesStorage r4 = r63.getMessagesStorage()
            r4.markMessagesAsRead(r0, r1, r2, r5)
        L_0x16d8:
            if (r3 == 0) goto L_0x16e9
            org.telegram.messenger.MessagesStorage r0 = r63.getMessagesStorage()
            org.telegram.tgnet.ConnectionsManager r1 = r63.getConnectionsManager()
            int r1 = r1.getCurrentTime()
            r0.markMessagesContentAsRead(r3, r1)
        L_0x16e9:
            r2 = r46
            if (r2 == 0) goto L_0x1713
            int r0 = r2.size()
            r13 = 0
        L_0x16f2:
            if (r13 >= r0) goto L_0x1713
            int r1 = r2.keyAt(r13)
            java.lang.Object r3 = r2.valueAt(r13)
            java.util.ArrayList r3 = (java.util.ArrayList) r3
            org.telegram.messenger.MessagesStorage r4 = r63.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r4 = r4.getStorageQueue()
            org.telegram.messenger.-$$Lambda$MessagesController$K0CmRJi8VOT8Y55GIEVtguLK1AM r6 = new org.telegram.messenger.-$$Lambda$MessagesController$K0CmRJi8VOT8Y55GIEVtguLK1AM
            r7 = r63
            r6.<init>(r3, r1)
            r4.postRunnable(r6)
            int r13 = r13 + 1
            goto L_0x16f2
        L_0x1713:
            r7 = r63
            r3 = r45
            if (r3 == 0) goto L_0x173c
            int r0 = r3.size()
            r13 = 0
        L_0x171e:
            if (r13 >= r0) goto L_0x173c
            int r22 = r3.keyAt(r13)
            java.lang.Object r1 = r3.valueAt(r13)
            r20 = r1
            java.util.ArrayList r20 = (java.util.ArrayList) r20
            org.telegram.messenger.MessagesStorage r19 = r63.getMessagesStorage()
            r21 = 1
            r23 = 0
            r24 = 1
            r19.markMessagesAsDeleted(r20, r21, r22, r23, r24)
            int r13 = r13 + 1
            goto L_0x171e
        L_0x173c:
            r0 = r52
            if (r0 == 0) goto L_0x1762
            int r1 = r0.size()
            r13 = 0
        L_0x1745:
            if (r13 >= r1) goto L_0x1762
            int r2 = r0.keyAt(r13)
            int r3 = r0.valueAt(r13)
            org.telegram.messenger.MessagesStorage r4 = r63.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r4 = r4.getStorageQueue()
            org.telegram.messenger.-$$Lambda$MessagesController$GlObDkh_76jpQXYBJr9yCPnWVyc r6 = new org.telegram.messenger.-$$Lambda$MessagesController$GlObDkh_76jpQXYBJr9yCPnWVyc
            r6.<init>(r2, r3)
            r4.postRunnable(r6)
            int r13 = r13 + 1
            goto L_0x1745
        L_0x1762:
            r0 = r51
            if (r0 == 0) goto L_0x178b
            int r1 = r0.size()
            r13 = 0
        L_0x176b:
            if (r13 >= r1) goto L_0x178b
            java.lang.Object r2 = r0.get(r13)
            org.telegram.tgnet.TLRPC$TL_updateEncryptedMessagesRead r2 = (org.telegram.tgnet.TLRPC$TL_updateEncryptedMessagesRead) r2
            org.telegram.messenger.MessagesStorage r14 = r63.getMessagesStorage()
            int r15 = r2.chat_id
            int r3 = r2.max_date
            int r2 = r2.date
            r18 = 1
            r19 = 0
            r16 = r3
            r17 = r2
            r14.createTaskForSecretChat(r15, r16, r17, r18, r19)
            int r13 = r13 + 1
            goto L_0x176b
        L_0x178b:
            return r5
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.processUpdateArray(java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, boolean, int):boolean");
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$processUpdateArray$279 */
    public /* synthetic */ void lambda$processUpdateArray$279$MessagesController(ArrayList arrayList, ArrayList arrayList2) {
        putUsers(arrayList, false);
        putChats(arrayList2, false);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$processUpdateArray$280 */
    public /* synthetic */ void lambda$processUpdateArray$280$MessagesController(ArrayList arrayList, ArrayList arrayList2) {
        putUsers(arrayList, false);
        putChats(arrayList2, false);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$processUpdateArray$282 */
    public /* synthetic */ void lambda$processUpdateArray$282$MessagesController(TLRPC$TL_updatePeerBlocked tLRPC$TL_updatePeerBlocked) {
        AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_updatePeerBlocked) {
            public final /* synthetic */ TLRPC$TL_updatePeerBlocked f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$281$MessagesController(this.f$1);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$281 */
    public /* synthetic */ void lambda$null$281$MessagesController(TLRPC$TL_updatePeerBlocked tLRPC$TL_updatePeerBlocked) {
        int peerId = MessageObject.getPeerId(tLRPC$TL_updatePeerBlocked.peer_id);
        if (!tLRPC$TL_updatePeerBlocked.blocked) {
            this.blockePeers.delete(peerId);
        } else if (this.blockePeers.indexOfKey(peerId) < 0) {
            this.blockePeers.put(peerId, 1);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$processUpdateArray$283 */
    public /* synthetic */ void lambda$processUpdateArray$283$MessagesController(TLRPC$TL_updateServiceNotification tLRPC$TL_updateServiceNotification) {
        getNotificationCenter().postNotificationName(NotificationCenter.needShowAlert, 2, tLRPC$TL_updateServiceNotification.message, tLRPC$TL_updateServiceNotification.type);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$processUpdateArray$284 */
    public /* synthetic */ void lambda$processUpdateArray$284$MessagesController(TLRPC$TL_updateLangPack tLRPC$TL_updateLangPack) {
        LocaleController.getInstance().saveRemoteLocaleStringsForCurrentLocale(tLRPC$TL_updateLangPack.difference, this.currentAccount);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$285 */
    public /* synthetic */ void lambda$null$285$MessagesController(ArrayList arrayList) {
        getNotificationsController().processNewMessages(arrayList, true, false, (CountDownLatch) null);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$processUpdateArray$286 */
    public /* synthetic */ void lambda$processUpdateArray$286$MessagesController(ArrayList arrayList) {
        AndroidUtilities.runOnUIThread(new Runnable(arrayList) {
            public final /* synthetic */ ArrayList f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$285$MessagesController(this.f$1);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$287 */
    public /* synthetic */ void lambda$null$287$MessagesController(LongSparseArray longSparseArray) {
        getNotificationsController().processEditedMessages(longSparseArray);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$processUpdateArray$288 */
    public /* synthetic */ void lambda$processUpdateArray$288$MessagesController(LongSparseArray longSparseArray) {
        AndroidUtilities.runOnUIThread(new Runnable(longSparseArray) {
            public final /* synthetic */ LongSparseArray f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$287$MessagesController(this.f$1);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$289 */
    public /* synthetic */ void lambda$null$289$MessagesController(TLRPC$User tLRPC$User) {
        getContactsController().addContactToPhoneBook(tLRPC$User, true);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$290 */
    public /* synthetic */ void lambda$null$290$MessagesController(TLRPC$TL_updateChannel tLRPC$TL_updateChannel) {
        getChannelDifference(tLRPC$TL_updateChannel.channel_id, 1, 0, (TLRPC$InputChannel) null);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$291 */
    public /* synthetic */ void lambda$null$291$MessagesController(TLRPC$Chat tLRPC$Chat) {
        getNotificationCenter().postNotificationName(NotificationCenter.channelRightsUpdated, tLRPC$Chat);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$292 */
    public /* synthetic */ void lambda$null$292$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Removed duplicated region for block: B:521:0x0CLASSNAME  */
    /* JADX WARNING: Removed duplicated region for block: B:526:0x0CLASSNAME  */
    /* JADX WARNING: Removed duplicated region for block: B:554:0x0cd1  */
    /* JADX WARNING: Removed duplicated region for block: B:556:0x0cdf  */
    /* JADX WARNING: Removed duplicated region for block: B:558:0x0ce3  */
    /* JADX WARNING: Removed duplicated region for block: B:561:0x0ceb  */
    /* JADX WARNING: Removed duplicated region for block: B:570:0x0d26  */
    /* JADX WARNING: Removed duplicated region for block: B:573:0x0d3c  */
    /* JADX WARNING: Removed duplicated region for block: B:613:? A[RETURN, SYNTHETIC] */
    /* renamed from: lambda$processUpdateArray$293 */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$processUpdateArray$293$MessagesController(int r42, java.util.ArrayList r43, android.util.SparseArray r44, int r45, android.util.LongSparseArray r46, android.util.LongSparseArray r47, java.util.ArrayList r48, android.util.LongSparseArray r49, android.util.LongSparseArray r50, boolean r51, java.util.ArrayList r52, java.util.ArrayList r53, android.util.SparseArray r54, android.util.SparseArray r55, android.util.SparseArray r56, java.util.ArrayList r57) {
        /*
            r41 = this;
            r8 = r41
            r9 = r43
            r10 = r44
            r11 = r46
            r12 = r47
            r13 = r48
            r14 = r49
            r15 = r50
            r6 = r53
            r7 = r57
            r7 = 0
            java.lang.Integer r16 = java.lang.Integer.valueOf(r7)
            if (r9 == 0) goto L_0x0a92
            java.util.ArrayList r4 = new java.util.ArrayList
            r4.<init>()
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            int r5 = r43.size()
            r21 = r42
            r23 = 0
            r24 = 0
            r25 = 0
        L_0x0031:
            if (r7 >= r5) goto L_0x0a65
            java.lang.Object r0 = r9.get(r7)
            org.telegram.tgnet.TLRPC$Update r0 = (org.telegram.tgnet.TLRPC$Update) r0
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updatePrivacy
            if (r1 == 0) goto L_0x00c8
            org.telegram.tgnet.TLRPC$TL_updatePrivacy r0 = (org.telegram.tgnet.TLRPC$TL_updatePrivacy) r0
            org.telegram.tgnet.TLRPC$PrivacyKey r1 = r0.key
            boolean r2 = r1 instanceof org.telegram.tgnet.TLRPC$TL_privacyKeyStatusTimestamp
            if (r2 == 0) goto L_0x0052
            org.telegram.messenger.ContactsController r1 = r41.getContactsController()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PrivacyRule> r0 = r0.rules
            r2 = 0
            r1.setPrivacyRules(r0, r2)
            r3 = 1
            goto L_0x00bc
        L_0x0052:
            r2 = 0
            boolean r3 = r1 instanceof org.telegram.tgnet.TLRPC$TL_privacyKeyChatInvite
            if (r3 == 0) goto L_0x0062
            org.telegram.messenger.ContactsController r1 = r41.getContactsController()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PrivacyRule> r0 = r0.rules
            r3 = 1
            r1.setPrivacyRules(r0, r3)
            goto L_0x00bc
        L_0x0062:
            r3 = 1
            boolean r2 = r1 instanceof org.telegram.tgnet.TLRPC$TL_privacyKeyPhoneCall
            if (r2 == 0) goto L_0x0072
            org.telegram.messenger.ContactsController r1 = r41.getContactsController()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PrivacyRule> r0 = r0.rules
            r2 = 2
            r1.setPrivacyRules(r0, r2)
            goto L_0x00bc
        L_0x0072:
            boolean r2 = r1 instanceof org.telegram.tgnet.TLRPC$TL_privacyKeyPhoneP2P
            if (r2 == 0) goto L_0x0081
            org.telegram.messenger.ContactsController r1 = r41.getContactsController()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PrivacyRule> r0 = r0.rules
            r2 = 3
            r1.setPrivacyRules(r0, r2)
            goto L_0x00bc
        L_0x0081:
            boolean r2 = r1 instanceof org.telegram.tgnet.TLRPC$TL_privacyKeyProfilePhoto
            if (r2 == 0) goto L_0x0090
            org.telegram.messenger.ContactsController r1 = r41.getContactsController()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PrivacyRule> r0 = r0.rules
            r2 = 4
            r1.setPrivacyRules(r0, r2)
            goto L_0x00bc
        L_0x0090:
            boolean r2 = r1 instanceof org.telegram.tgnet.TLRPC$TL_privacyKeyForwards
            if (r2 == 0) goto L_0x009f
            org.telegram.messenger.ContactsController r1 = r41.getContactsController()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PrivacyRule> r0 = r0.rules
            r2 = 5
            r1.setPrivacyRules(r0, r2)
            goto L_0x00bc
        L_0x009f:
            boolean r2 = r1 instanceof org.telegram.tgnet.TLRPC$TL_privacyKeyPhoneNumber
            if (r2 == 0) goto L_0x00ae
            org.telegram.messenger.ContactsController r1 = r41.getContactsController()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PrivacyRule> r0 = r0.rules
            r2 = 6
            r1.setPrivacyRules(r0, r2)
            goto L_0x00bc
        L_0x00ae:
            boolean r1 = r1 instanceof org.telegram.tgnet.TLRPC$TL_privacyKeyAddedByPhone
            if (r1 == 0) goto L_0x00bc
            org.telegram.messenger.ContactsController r1 = r41.getContactsController()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PrivacyRule> r0 = r0.rules
            r2 = 7
            r1.setPrivacyRules(r0, r2)
        L_0x00bc:
            r19 = r5
            r33 = r6
            r22 = r7
            r1 = r21
            r6 = r4
        L_0x00c5:
            r4 = 4
            goto L_0x0a54
        L_0x00c8:
            r3 = 1
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateUserStatus
            if (r1 == 0) goto L_0x0125
            org.telegram.tgnet.TLRPC$TL_updateUserStatus r0 = (org.telegram.tgnet.TLRPC$TL_updateUserStatus) r0
            int r1 = r0.user_id
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            org.telegram.tgnet.TLRPC$User r1 = r8.getUser(r1)
            org.telegram.tgnet.TLRPC$UserStatus r2 = r0.status
            boolean r3 = r2 instanceof org.telegram.tgnet.TLRPC$TL_userStatusRecently
            if (r3 == 0) goto L_0x00e4
            r3 = -100
            r2.expires = r3
            goto L_0x00f5
        L_0x00e4:
            boolean r3 = r2 instanceof org.telegram.tgnet.TLRPC$TL_userStatusLastWeek
            if (r3 == 0) goto L_0x00ed
            r3 = -101(0xffffffffffffff9b, float:NaN)
            r2.expires = r3
            goto L_0x00f5
        L_0x00ed:
            boolean r3 = r2 instanceof org.telegram.tgnet.TLRPC$TL_userStatusLastMonth
            if (r3 == 0) goto L_0x00f5
            r3 = -102(0xffffffffffffff9a, float:NaN)
            r2.expires = r3
        L_0x00f5:
            if (r1 == 0) goto L_0x00fd
            int r3 = r0.user_id
            r1.id = r3
            r1.status = r2
        L_0x00fd:
            org.telegram.tgnet.TLRPC$TL_user r1 = new org.telegram.tgnet.TLRPC$TL_user
            r1.<init>()
            int r2 = r0.user_id
            r1.id = r2
            org.telegram.tgnet.TLRPC$UserStatus r2 = r0.status
            r1.status = r2
            r6.add(r1)
            int r1 = r0.user_id
            org.telegram.messenger.UserConfig r2 = r41.getUserConfig()
            int r2 = r2.getClientUserId()
            if (r1 != r2) goto L_0x00bc
            org.telegram.messenger.NotificationsController r1 = r41.getNotificationsController()
            org.telegram.tgnet.TLRPC$UserStatus r0 = r0.status
            int r0 = r0.expires
            r1.setLastOnlineFromOtherDevice(r0)
            goto L_0x00bc
        L_0x0125:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateUserName
            if (r1 == 0) goto L_0x0181
            org.telegram.tgnet.TLRPC$TL_updateUserName r0 = (org.telegram.tgnet.TLRPC$TL_updateUserName) r0
            int r1 = r0.user_id
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            org.telegram.tgnet.TLRPC$User r1 = r8.getUser(r1)
            if (r1 == 0) goto L_0x0167
            boolean r2 = org.telegram.messenger.UserObject.isContact(r1)
            if (r2 != 0) goto L_0x0145
            java.lang.String r2 = r0.first_name
            r1.first_name = r2
            java.lang.String r2 = r0.last_name
            r1.last_name = r2
        L_0x0145:
            java.lang.String r2 = r1.username
            boolean r2 = android.text.TextUtils.isEmpty(r2)
            if (r2 != 0) goto L_0x0154
            j$.util.concurrent.ConcurrentHashMap<java.lang.String, org.telegram.tgnet.TLObject> r2 = r8.objectsByUsernames
            java.lang.String r3 = r1.username
            r2.remove(r3)
        L_0x0154:
            java.lang.String r2 = r0.username
            boolean r2 = android.text.TextUtils.isEmpty(r2)
            if (r2 == 0) goto L_0x0163
            j$.util.concurrent.ConcurrentHashMap<java.lang.String, org.telegram.tgnet.TLObject> r2 = r8.objectsByUsernames
            java.lang.String r3 = r0.username
            r2.put(r3, r1)
        L_0x0163:
            java.lang.String r2 = r0.username
            r1.username = r2
        L_0x0167:
            org.telegram.tgnet.TLRPC$TL_user r1 = new org.telegram.tgnet.TLRPC$TL_user
            r1.<init>()
            int r2 = r0.user_id
            r1.id = r2
            java.lang.String r2 = r0.first_name
            r1.first_name = r2
            java.lang.String r2 = r0.last_name
            r1.last_name = r2
            java.lang.String r0 = r0.username
            r1.username = r0
            r4.add(r1)
            goto L_0x00bc
        L_0x0181:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateDialogPinned
            if (r1 == 0) goto L_0x01e1
            org.telegram.tgnet.TLRPC$TL_updateDialogPinned r0 = (org.telegram.tgnet.TLRPC$TL_updateDialogPinned) r0
            org.telegram.tgnet.TLRPC$DialogPeer r1 = r0.peer
            boolean r2 = r1 instanceof org.telegram.tgnet.TLRPC$TL_dialogPeer
            if (r2 == 0) goto L_0x0197
            org.telegram.tgnet.TLRPC$TL_dialogPeer r1 = (org.telegram.tgnet.TLRPC$TL_dialogPeer) r1
            org.telegram.tgnet.TLRPC$Peer r1 = r1.peer
            long r1 = org.telegram.messenger.DialogObject.getPeerDialogId((org.telegram.tgnet.TLRPC$Peer) r1)
            r2 = r1
            goto L_0x0199
        L_0x0197:
            r2 = 0
        L_0x0199:
            boolean r1 = r0.pinned
            r29 = 0
            r30 = -1
            r26 = r1
            r1 = r41
            r17 = r2
            r19 = 4
            r20 = 3
            r22 = 2
            r27 = 0
            r28 = 1
            r32 = r4
            r4 = r26
            r19 = r5
            r9 = 1
            r5 = r29
            r33 = r6
            r22 = r7
            r9 = 0
            r6 = r30
            boolean r1 = r1.pinDialog(r2, r4, r5, r6)
            if (r1 != 0) goto L_0x01df
            org.telegram.messenger.UserConfig r1 = r41.getUserConfig()
            int r2 = r0.folder_id
            r1.setPinnedDialogsLoaded(r2, r9)
            org.telegram.messenger.UserConfig r1 = r41.getUserConfig()
            r1.saveConfig(r9)
            int r0 = r0.folder_id
            r1 = r17
            r3 = 0
            r8.loadPinnedDialogs(r0, r1, r3)
            goto L_0x0248
        L_0x01df:
            r3 = 0
            goto L_0x0248
        L_0x01e1:
            r32 = r4
            r19 = r5
            r33 = r6
            r22 = r7
            r3 = 0
            r9 = 0
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updatePinnedDialogs
            if (r1 == 0) goto L_0x024e
            org.telegram.tgnet.TLRPC$TL_updatePinnedDialogs r0 = (org.telegram.tgnet.TLRPC$TL_updatePinnedDialogs) r0
            org.telegram.messenger.UserConfig r1 = r41.getUserConfig()
            int r2 = r0.folder_id
            r1.setPinnedDialogsLoaded(r2, r9)
            org.telegram.messenger.UserConfig r1 = r41.getUserConfig()
            r1.saveConfig(r9)
            int r1 = r0.flags
            r2 = 1
            r1 = r1 & r2
            if (r1 == 0) goto L_0x0240
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$DialogPeer> r2 = r0.order
            int r4 = r2.size()
            r7 = 0
        L_0x0213:
            if (r7 >= r4) goto L_0x0241
            java.lang.Object r5 = r2.get(r7)
            org.telegram.tgnet.TLRPC$DialogPeer r5 = (org.telegram.tgnet.TLRPC$DialogPeer) r5
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_dialogPeer
            if (r6 == 0) goto L_0x0234
            org.telegram.tgnet.TLRPC$TL_dialogPeer r5 = (org.telegram.tgnet.TLRPC$TL_dialogPeer) r5
            org.telegram.tgnet.TLRPC$Peer r5 = r5.peer
            int r6 = r5.user_id
            if (r6 == 0) goto L_0x0229
            long r5 = (long) r6
            goto L_0x0236
        L_0x0229:
            int r6 = r5.chat_id
            if (r6 == 0) goto L_0x022f
            int r5 = -r6
            goto L_0x0232
        L_0x022f:
            int r5 = r5.channel_id
            int r5 = -r5
        L_0x0232:
            long r5 = (long) r5
            goto L_0x0236
        L_0x0234:
            r5 = 0
        L_0x0236:
            java.lang.Long r5 = java.lang.Long.valueOf(r5)
            r1.add(r5)
            int r7 = r7 + 1
            goto L_0x0213
        L_0x0240:
            r1 = r3
        L_0x0241:
            int r0 = r0.folder_id
            r4 = 0
            r8.loadPinnedDialogs(r0, r4, r1)
        L_0x0248:
            r1 = r21
            r6 = r32
            goto L_0x00c5
        L_0x024e:
            r4 = 0
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateUserPhoto
            if (r1 == 0) goto L_0x028a
            org.telegram.tgnet.TLRPC$TL_updateUserPhoto r0 = (org.telegram.tgnet.TLRPC$TL_updateUserPhoto) r0
            int r1 = r0.user_id
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            org.telegram.tgnet.TLRPC$User r1 = r8.getUser(r1)
            if (r1 == 0) goto L_0x0266
            org.telegram.tgnet.TLRPC$UserProfilePhoto r2 = r0.photo
            r1.photo = r2
        L_0x0266:
            org.telegram.tgnet.TLRPC$TL_user r2 = new org.telegram.tgnet.TLRPC$TL_user
            r2.<init>()
            int r6 = r0.user_id
            r2.id = r6
            org.telegram.tgnet.TLRPC$UserProfilePhoto r0 = r0.photo
            r2.photo = r0
            r6 = r32
            r6.add(r2)
            boolean r0 = org.telegram.messenger.UserObject.isUserSelf(r1)
            if (r0 == 0) goto L_0x02cd
            org.telegram.messenger.NotificationCenter r0 = r41.getNotificationCenter()
            int r1 = org.telegram.messenger.NotificationCenter.mainUserInfoChanged
            java.lang.Object[] r2 = new java.lang.Object[r9]
            r0.postNotificationName(r1, r2)
            goto L_0x02cd
        L_0x028a:
            r6 = r32
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateUserPhone
            if (r1 == 0) goto L_0x02d1
            org.telegram.tgnet.TLRPC$TL_updateUserPhone r0 = (org.telegram.tgnet.TLRPC$TL_updateUserPhone) r0
            int r1 = r0.user_id
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            org.telegram.tgnet.TLRPC$User r1 = r8.getUser(r1)
            if (r1 == 0) goto L_0x02bd
            java.lang.String r2 = r0.phone
            r1.phone = r2
            org.telegram.messenger.DispatchQueue r2 = org.telegram.messenger.Utilities.phoneBookQueue
            org.telegram.messenger.-$$Lambda$MessagesController$Z6zrHuqP0BmgKiDOxOwzneg36vw r7 = new org.telegram.messenger.-$$Lambda$MessagesController$Z6zrHuqP0BmgKiDOxOwzneg36vw
            r7.<init>(r1)
            r2.postRunnable(r7)
            boolean r1 = org.telegram.messenger.UserObject.isUserSelf(r1)
            if (r1 == 0) goto L_0x02bd
            org.telegram.messenger.NotificationCenter r1 = r41.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.mainUserInfoChanged
            java.lang.Object[] r7 = new java.lang.Object[r9]
            r1.postNotificationName(r2, r7)
        L_0x02bd:
            org.telegram.tgnet.TLRPC$TL_user r1 = new org.telegram.tgnet.TLRPC$TL_user
            r1.<init>()
            int r2 = r0.user_id
            r1.id = r2
            java.lang.String r0 = r0.phone
            r1.phone = r0
            r6.add(r1)
        L_0x02cd:
            r1 = r21
            goto L_0x00c5
        L_0x02d1:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateNotifySettings
            if (r1 == 0) goto L_0x049b
            org.telegram.tgnet.TLRPC$TL_updateNotifySettings r0 = (org.telegram.tgnet.TLRPC$TL_updateNotifySettings) r0
            org.telegram.tgnet.TLRPC$PeerNotifySettings r1 = r0.notify_settings
            boolean r1 = r1 instanceof org.telegram.tgnet.TLRPC$TL_peerNotifySettings
            if (r1 == 0) goto L_0x0498
            int r1 = DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r24 = r24 | r1
            if (r23 != 0) goto L_0x02e9
            android.content.SharedPreferences r1 = r8.notificationsPreferences
            android.content.SharedPreferences$Editor r23 = r1.edit()
        L_0x02e9:
            r1 = r23
            org.telegram.tgnet.ConnectionsManager r2 = r41.getConnectionsManager()
            int r2 = r2.getCurrentTime()
            org.telegram.tgnet.TLRPC$NotifyPeer r7 = r0.peer
            boolean r3 = r7 instanceof org.telegram.tgnet.TLRPC$TL_notifyPeer
            if (r3 == 0) goto L_0x040f
            org.telegram.tgnet.TLRPC$TL_notifyPeer r7 = (org.telegram.tgnet.TLRPC$TL_notifyPeer) r7
            org.telegram.tgnet.TLRPC$Peer r3 = r7.peer
            int r7 = r3.user_id
            if (r7 == 0) goto L_0x0303
            long r4 = (long) r7
            goto L_0x030d
        L_0x0303:
            int r4 = r3.chat_id
            if (r4 == 0) goto L_0x0309
            int r3 = -r4
            goto L_0x030c
        L_0x0309:
            int r3 = r3.channel_id
            int r3 = -r3
        L_0x030c:
            long r4 = (long) r3
        L_0x030d:
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r3 = r8.dialogs_dict
            java.lang.Object r3 = r3.get(r4)
            org.telegram.tgnet.TLRPC$Dialog r3 = (org.telegram.tgnet.TLRPC$Dialog) r3
            if (r3 == 0) goto L_0x031b
            org.telegram.tgnet.TLRPC$PeerNotifySettings r7 = r0.notify_settings
            r3.notify_settings = r7
        L_0x031b:
            org.telegram.tgnet.TLRPC$PeerNotifySettings r7 = r0.notify_settings
            int r7 = r7.flags
            r9 = 2
            r7 = r7 & r9
            java.lang.String r9 = "silent_"
            if (r7 == 0) goto L_0x033c
            java.lang.StringBuilder r7 = new java.lang.StringBuilder
            r7.<init>()
            r7.append(r9)
            r7.append(r4)
            java.lang.String r7 = r7.toString()
            org.telegram.tgnet.TLRPC$PeerNotifySettings r9 = r0.notify_settings
            boolean r9 = r9.silent
            r1.putBoolean(r7, r9)
            goto L_0x034e
        L_0x033c:
            java.lang.StringBuilder r7 = new java.lang.StringBuilder
            r7.<init>()
            r7.append(r9)
            r7.append(r4)
            java.lang.String r7 = r7.toString()
            r1.remove(r7)
        L_0x034e:
            org.telegram.tgnet.TLRPC$PeerNotifySettings r7 = r0.notify_settings
            int r9 = r7.flags
            r15 = 4
            r9 = r9 & r15
            java.lang.String r15 = "notify2_"
            if (r9 == 0) goto L_0x03ed
            int r9 = r7.mute_until
            if (r9 <= r2) goto L_0x03ca
            r7 = 31536000(0x1e13380, float:8.2725845E-38)
            int r2 = r2 + r7
            if (r9 <= r2) goto L_0x0381
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            r2.append(r15)
            r2.append(r4)
            java.lang.String r2 = r2.toString()
            r7 = 2
            r1.putInt(r2, r7)
            if (r3 == 0) goto L_0x037e
            org.telegram.tgnet.TLRPC$PeerNotifySettings r0 = r0.notify_settings
            r2 = 2147483647(0x7fffffff, float:NaN)
            r0.mute_until = r2
        L_0x037e:
            r7 = 3
            r9 = 0
            goto L_0x03b2
        L_0x0381:
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            r2.append(r15)
            r2.append(r4)
            java.lang.String r2 = r2.toString()
            r7 = 3
            r1.putInt(r2, r7)
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            java.lang.String r15 = "notifyuntil_"
            r2.append(r15)
            r2.append(r4)
            java.lang.String r2 = r2.toString()
            org.telegram.tgnet.TLRPC$PeerNotifySettings r15 = r0.notify_settings
            int r15 = r15.mute_until
            r1.putInt(r2, r15)
            if (r3 == 0) goto L_0x03b2
            org.telegram.tgnet.TLRPC$PeerNotifySettings r0 = r0.notify_settings
            r0.mute_until = r9
        L_0x03b2:
            org.telegram.messenger.MessagesStorage r0 = r41.getMessagesStorage()
            long r2 = (long) r9
            r9 = 32
            long r2 = r2 << r9
            r17 = 1
            long r2 = r2 | r17
            r0.setDialogFlags(r4, r2)
            org.telegram.messenger.NotificationsController r0 = r41.getNotificationsController()
            r0.removeNotificationsForDialog(r4)
            goto L_0x048f
        L_0x03ca:
            r2 = 3
            r9 = 0
            if (r3 == 0) goto L_0x03d0
            r7.mute_until = r9
        L_0x03d0:
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r15)
            r0.append(r4)
            java.lang.String r0 = r0.toString()
            r1.putInt(r0, r9)
            org.telegram.messenger.MessagesStorage r0 = r41.getMessagesStorage()
            r2 = 0
            r0.setDialogFlags(r4, r2)
            goto L_0x048f
        L_0x03ed:
            r9 = 0
            if (r3 == 0) goto L_0x03f2
            r7.mute_until = r9
        L_0x03f2:
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r15)
            r0.append(r4)
            java.lang.String r0 = r0.toString()
            r1.remove(r0)
            org.telegram.messenger.MessagesStorage r0 = r41.getMessagesStorage()
            r2 = 0
            r0.setDialogFlags(r4, r2)
            goto L_0x048f
        L_0x040f:
            boolean r2 = r7 instanceof org.telegram.tgnet.TLRPC$TL_notifyChats
            if (r2 == 0) goto L_0x043a
            org.telegram.tgnet.TLRPC$PeerNotifySettings r2 = r0.notify_settings
            int r3 = r2.flags
            r4 = 1
            r3 = r3 & r4
            if (r3 == 0) goto L_0x0422
            boolean r2 = r2.show_previews
            java.lang.String r3 = "EnablePreviewGroup"
            r1.putBoolean(r3, r2)
        L_0x0422:
            org.telegram.tgnet.TLRPC$PeerNotifySettings r0 = r0.notify_settings
            int r2 = r0.flags
            r3 = 4
            r2 = r2 & r3
            if (r2 == 0) goto L_0x048f
            int r0 = r0.mute_until
            java.lang.String r2 = "EnableGroup2"
            r1.putInt(r2, r0)
            org.telegram.messenger.NotificationsController r0 = r41.getNotificationsController()
            r2 = 0
            r0.deleteNotificationChannelGlobal(r2)
            goto L_0x048f
        L_0x043a:
            boolean r2 = r7 instanceof org.telegram.tgnet.TLRPC$TL_notifyUsers
            if (r2 == 0) goto L_0x0465
            org.telegram.tgnet.TLRPC$PeerNotifySettings r2 = r0.notify_settings
            int r3 = r2.flags
            r4 = 1
            r3 = r3 & r4
            if (r3 == 0) goto L_0x044d
            boolean r2 = r2.show_previews
            java.lang.String r3 = "EnablePreviewAll"
            r1.putBoolean(r3, r2)
        L_0x044d:
            org.telegram.tgnet.TLRPC$PeerNotifySettings r0 = r0.notify_settings
            int r2 = r0.flags
            r3 = 4
            r2 = r2 & r3
            if (r2 == 0) goto L_0x048f
            int r0 = r0.mute_until
            java.lang.String r2 = "EnableAll2"
            r1.putInt(r2, r0)
            org.telegram.messenger.NotificationsController r0 = r41.getNotificationsController()
            r2 = 1
            r0.deleteNotificationChannelGlobal(r2)
            goto L_0x048f
        L_0x0465:
            r2 = 1
            boolean r3 = r7 instanceof org.telegram.tgnet.TLRPC$TL_notifyBroadcasts
            if (r3 == 0) goto L_0x048f
            org.telegram.tgnet.TLRPC$PeerNotifySettings r3 = r0.notify_settings
            int r4 = r3.flags
            r4 = r4 & r2
            if (r4 == 0) goto L_0x0478
            boolean r2 = r3.show_previews
            java.lang.String r3 = "EnablePreviewChannel"
            r1.putBoolean(r3, r2)
        L_0x0478:
            org.telegram.tgnet.TLRPC$PeerNotifySettings r0 = r0.notify_settings
            int r2 = r0.flags
            r3 = 4
            r2 = r2 & r3
            if (r2 == 0) goto L_0x048f
            int r0 = r0.mute_until
            java.lang.String r2 = "EnableChannel2"
            r1.putInt(r2, r0)
            org.telegram.messenger.NotificationsController r0 = r41.getNotificationsController()
            r2 = 2
            r0.deleteNotificationChannelGlobal(r2)
        L_0x048f:
            org.telegram.messenger.MessagesStorage r0 = r41.getMessagesStorage()
            r0.updateMutedDialogsFiltersCounters()
            r23 = r1
        L_0x0498:
            r4 = 4
            goto L_0x0a56
        L_0x049b:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateChannel
            if (r1 == 0) goto L_0x0536
            org.telegram.tgnet.TLRPC$TL_updateChannel r0 = (org.telegram.tgnet.TLRPC$TL_updateChannel) r0
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r1 = r8.dialogs_dict
            int r2 = r0.channel_id
            long r2 = (long) r2
            long r2 = -r2
            java.lang.Object r1 = r1.get(r2)
            org.telegram.tgnet.TLRPC$Dialog r1 = (org.telegram.tgnet.TLRPC$Dialog) r1
            int r2 = r0.channel_id
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)
            org.telegram.tgnet.TLRPC$Chat r2 = r8.getChat(r2)
            if (r2 == 0) goto L_0x0527
            if (r1 != 0) goto L_0x04ce
            boolean r3 = r2 instanceof org.telegram.tgnet.TLRPC$TL_channel
            if (r3 == 0) goto L_0x04ce
            boolean r3 = r2.left
            if (r3 != 0) goto L_0x04ce
            org.telegram.messenger.DispatchQueue r1 = org.telegram.messenger.Utilities.stageQueue
            org.telegram.messenger.-$$Lambda$MessagesController$gLYnrGmK8uuQktG5OBs0MiqfuC8 r3 = new org.telegram.messenger.-$$Lambda$MessagesController$gLYnrGmK8uuQktG5OBs0MiqfuC8
            r3.<init>(r0)
            r1.postRunnable(r3)
            goto L_0x04e6
        L_0x04ce:
            boolean r3 = r2.left
            if (r3 == 0) goto L_0x04e6
            if (r1 == 0) goto L_0x04e6
            org.telegram.tgnet.TLRPC$Dialog r3 = r8.promoDialog
            if (r3 == 0) goto L_0x04e0
            long r3 = r3.id
            long r14 = r1.id
            int r5 = (r3 > r14 ? 1 : (r3 == r14 ? 0 : -1))
            if (r5 == 0) goto L_0x04e6
        L_0x04e0:
            long r3 = r1.id
            r1 = 0
            r8.deleteDialog(r3, r1)
        L_0x04e6:
            boolean r1 = r2 instanceof org.telegram.tgnet.TLRPC$TL_channelForbidden
            if (r1 != 0) goto L_0x04ee
            boolean r1 = r2.kicked
            if (r1 == 0) goto L_0x0527
        L_0x04ee:
            int r1 = r2.id
            r3 = 0
            org.telegram.messenger.ChatObject$Call r1 = r8.getGroupCall(r1, r3)
            if (r1 == 0) goto L_0x0527
            org.telegram.tgnet.TLRPC$TL_updateGroupCall r3 = new org.telegram.tgnet.TLRPC$TL_updateGroupCall
            r3.<init>()
            int r2 = r2.id
            r3.chat_id = r2
            org.telegram.tgnet.TLRPC$TL_groupCallDiscarded r2 = new org.telegram.tgnet.TLRPC$TL_groupCallDiscarded
            r2.<init>()
            r3.call = r2
            org.telegram.tgnet.TLRPC$GroupCall r4 = r1.call
            long r14 = r4.id
            r2.id = r14
            long r4 = r4.access_hash
            r2.access_hash = r4
            org.telegram.messenger.AccountInstance r2 = r41.getAccountInstance()
            r1.processGroupCallUpdate(r2, r3)
            org.telegram.messenger.voip.VoIPService r1 = org.telegram.messenger.voip.VoIPService.getSharedInstance()
            if (r1 == 0) goto L_0x0527
            org.telegram.messenger.voip.VoIPService r1 = org.telegram.messenger.voip.VoIPService.getSharedInstance()
            org.telegram.tgnet.TLRPC$GroupCall r2 = r3.call
            r1.onGroupCallUpdated(r2)
        L_0x0527:
            r1 = r21
            r1 = r1 | 8192(0x2000, float:1.14794E-41)
            int r0 = r0.channel_id
            r2 = 0
            r3 = 1
            r8.loadFullChat(r0, r2, r3)
        L_0x0532:
            r21 = r1
            goto L_0x0498
        L_0x0536:
            r1 = r21
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateChat
            if (r2 == 0) goto L_0x0595
            org.telegram.tgnet.TLRPC$TL_updateChat r0 = (org.telegram.tgnet.TLRPC$TL_updateChat) r0
            int r2 = r0.chat_id
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)
            org.telegram.tgnet.TLRPC$Chat r2 = r8.getChat(r2)
            if (r2 == 0) goto L_0x058b
            boolean r3 = r2 instanceof org.telegram.tgnet.TLRPC$TL_chatForbidden
            if (r3 != 0) goto L_0x0552
            boolean r3 = r2.kicked
            if (r3 == 0) goto L_0x058b
        L_0x0552:
            int r3 = r2.id
            r4 = 0
            org.telegram.messenger.ChatObject$Call r3 = r8.getGroupCall(r3, r4)
            if (r3 == 0) goto L_0x058b
            org.telegram.tgnet.TLRPC$TL_updateGroupCall r4 = new org.telegram.tgnet.TLRPC$TL_updateGroupCall
            r4.<init>()
            int r2 = r2.id
            r4.chat_id = r2
            org.telegram.tgnet.TLRPC$TL_groupCallDiscarded r2 = new org.telegram.tgnet.TLRPC$TL_groupCallDiscarded
            r2.<init>()
            r4.call = r2
            org.telegram.tgnet.TLRPC$GroupCall r5 = r3.call
            long r14 = r5.id
            r2.id = r14
            long r14 = r5.access_hash
            r2.access_hash = r14
            org.telegram.messenger.AccountInstance r2 = r41.getAccountInstance()
            r3.processGroupCallUpdate(r2, r4)
            org.telegram.messenger.voip.VoIPService r2 = org.telegram.messenger.voip.VoIPService.getSharedInstance()
            if (r2 == 0) goto L_0x058b
            org.telegram.messenger.voip.VoIPService r2 = org.telegram.messenger.voip.VoIPService.getSharedInstance()
            org.telegram.tgnet.TLRPC$GroupCall r3 = r4.call
            r2.onGroupCallUpdated(r3)
        L_0x058b:
            r1 = r1 | 8192(0x2000, float:1.14794E-41)
            int r0 = r0.chat_id
            r2 = 0
            r3 = 1
            r8.loadFullChat(r0, r2, r3)
            goto L_0x0532
        L_0x0595:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateChatDefaultBannedRights
            if (r2 == 0) goto L_0x05bc
            org.telegram.tgnet.TLRPC$TL_updateChatDefaultBannedRights r0 = (org.telegram.tgnet.TLRPC$TL_updateChatDefaultBannedRights) r0
            org.telegram.tgnet.TLRPC$Peer r2 = r0.peer
            int r3 = r2.channel_id
            if (r3 == 0) goto L_0x05a2
            goto L_0x05a4
        L_0x05a2:
            int r3 = r2.chat_id
        L_0x05a4:
            java.lang.Integer r2 = java.lang.Integer.valueOf(r3)
            org.telegram.tgnet.TLRPC$Chat r2 = r8.getChat(r2)
            if (r2 == 0) goto L_0x00c5
            org.telegram.tgnet.TLRPC$TL_chatBannedRights r0 = r0.default_banned_rights
            r2.default_banned_rights = r0
            org.telegram.messenger.-$$Lambda$MessagesController$LPSTWNn0W5B50dmVGei038_lscM r0 = new org.telegram.messenger.-$$Lambda$MessagesController$LPSTWNn0W5B50dmVGei038_lscM
            r0.<init>(r2)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r0)
            goto L_0x00c5
        L_0x05bc:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateStickerSets
            if (r2 == 0) goto L_0x05cd
            org.telegram.tgnet.TLRPC$TL_updateStickerSets r0 = (org.telegram.tgnet.TLRPC$TL_updateStickerSets) r0
            org.telegram.messenger.MediaDataController r0 = r41.getMediaDataController()
            r2 = 0
            r3 = 1
            r0.loadStickers(r2, r2, r3)
            goto L_0x00c5
        L_0x05cd:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateStickerSetsOrder
            if (r2 == 0) goto L_0x05e0
            org.telegram.tgnet.TLRPC$TL_updateStickerSetsOrder r0 = (org.telegram.tgnet.TLRPC$TL_updateStickerSetsOrder) r0
            org.telegram.messenger.MediaDataController r2 = r41.getMediaDataController()
            boolean r3 = r0.masks
            java.util.ArrayList<java.lang.Long> r0 = r0.order
            r2.reorderStickers(r3, r0)
            goto L_0x00c5
        L_0x05e0:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateFavedStickers
            if (r2 == 0) goto L_0x05f0
            org.telegram.messenger.MediaDataController r0 = r41.getMediaDataController()
            r2 = 2
            r3 = 0
            r4 = 1
            r0.loadRecents(r2, r3, r3, r4)
            goto L_0x00c5
        L_0x05f0:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateContactsReset
            if (r2 == 0) goto L_0x05fd
            org.telegram.messenger.ContactsController r0 = r41.getContactsController()
            r0.forceImportContacts()
            goto L_0x00c5
        L_0x05fd:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateNewStickerSet
            if (r2 == 0) goto L_0x060e
            org.telegram.tgnet.TLRPC$TL_updateNewStickerSet r0 = (org.telegram.tgnet.TLRPC$TL_updateNewStickerSet) r0
            org.telegram.messenger.MediaDataController r2 = r41.getMediaDataController()
            org.telegram.tgnet.TLRPC$TL_messages_stickerSet r0 = r0.stickerset
            r2.addNewStickerSet(r0)
            goto L_0x00c5
        L_0x060e:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateSavedGifs
            if (r2 == 0) goto L_0x0625
            android.content.SharedPreferences r0 = r8.emojiPreferences
            android.content.SharedPreferences$Editor r0 = r0.edit()
            java.lang.String r2 = "lastGifLoadTime"
            r3 = 0
            android.content.SharedPreferences$Editor r0 = r0.putLong(r2, r3)
            r0.commit()
            goto L_0x00c5
        L_0x0625:
            r3 = 0
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateRecentStickers
            if (r2 == 0) goto L_0x063c
            android.content.SharedPreferences r0 = r8.emojiPreferences
            android.content.SharedPreferences$Editor r0 = r0.edit()
            java.lang.String r2 = "lastStickersLoadTime"
            android.content.SharedPreferences$Editor r0 = r0.putLong(r2, r3)
            r0.commit()
            goto L_0x00c5
        L_0x063c:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateDraftMessage
            if (r2 == 0) goto L_0x066f
            org.telegram.tgnet.TLRPC$TL_updateDraftMessage r0 = (org.telegram.tgnet.TLRPC$TL_updateDraftMessage) r0
            org.telegram.tgnet.TLRPC$Peer r2 = r0.peer
            int r5 = r2.user_id
            if (r5 == 0) goto L_0x064c
            long r14 = (long) r5
        L_0x0649:
            r35 = r14
            goto L_0x0657
        L_0x064c:
            int r5 = r2.channel_id
            if (r5 == 0) goto L_0x0652
            int r2 = -r5
            goto L_0x0655
        L_0x0652:
            int r2 = r2.chat_id
            int r2 = -r2
        L_0x0655:
            long r14 = (long) r2
            goto L_0x0649
        L_0x0657:
            org.telegram.messenger.MediaDataController r34 = r41.getMediaDataController()
            r37 = 0
            org.telegram.tgnet.TLRPC$DraftMessage r0 = r0.draft
            r39 = 0
            r40 = 1
            r38 = r0
            r34.saveDraft(r35, r37, r38, r39, r40)
            r21 = r1
            r4 = 4
            r25 = 1
            goto L_0x0a56
        L_0x066f:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateReadFeaturedStickers
            if (r2 == 0) goto L_0x067d
            org.telegram.messenger.MediaDataController r0 = r41.getMediaDataController()
            r2 = 0
            r0.markFaturedStickersAsRead(r2)
            goto L_0x00c5
        L_0x067d:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updatePhoneCallSignalingData
            if (r2 == 0) goto L_0x068e
            org.telegram.tgnet.TLRPC$TL_updatePhoneCallSignalingData r0 = (org.telegram.tgnet.TLRPC$TL_updatePhoneCallSignalingData) r0
            org.telegram.messenger.voip.VoIPService r2 = org.telegram.messenger.voip.VoIPService.getSharedInstance()
            if (r2 == 0) goto L_0x00c5
            r2.onSignalingData((org.telegram.tgnet.TLRPC$TL_updatePhoneCallSignalingData) r0)
            goto L_0x00c5
        L_0x068e:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateGroupCallParticipants
            if (r2 == 0) goto L_0x06b5
            org.telegram.tgnet.TLRPC$TL_updateGroupCallParticipants r0 = (org.telegram.tgnet.TLRPC$TL_updateGroupCallParticipants) r0
            android.util.LongSparseArray<org.telegram.messenger.ChatObject$Call> r2 = r8.groupCalls
            org.telegram.tgnet.TLRPC$TL_inputGroupCall r5 = r0.call
            long r14 = r5.id
            java.lang.Object r2 = r2.get(r14)
            org.telegram.messenger.ChatObject$Call r2 = (org.telegram.messenger.ChatObject.Call) r2
            if (r2 == 0) goto L_0x06a6
            r5 = 0
            r2.processParticipantsUpdate(r0, r5)
        L_0x06a6:
            org.telegram.messenger.voip.VoIPService r2 = org.telegram.messenger.voip.VoIPService.getSharedInstance()
            if (r2 == 0) goto L_0x00c5
            org.telegram.messenger.voip.VoIPService r2 = org.telegram.messenger.voip.VoIPService.getSharedInstance()
            r2.onGroupCallParticipantsUpdate(r0)
            goto L_0x00c5
        L_0x06b5:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateGroupCall
            if (r2 == 0) goto L_0x0713
            org.telegram.tgnet.TLRPC$TL_updateGroupCall r0 = (org.telegram.tgnet.TLRPC$TL_updateGroupCall) r0
            android.util.LongSparseArray<org.telegram.messenger.ChatObject$Call> r2 = r8.groupCalls
            org.telegram.tgnet.TLRPC$GroupCall r5 = r0.call
            long r14 = r5.id
            java.lang.Object r2 = r2.get(r14)
            org.telegram.messenger.ChatObject$Call r2 = (org.telegram.messenger.ChatObject.Call) r2
            if (r2 == 0) goto L_0x06e3
            org.telegram.messenger.AccountInstance r5 = r41.getAccountInstance()
            r2.processGroupCallUpdate(r5, r0)
            int r2 = r2.chatId
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)
            org.telegram.tgnet.TLRPC$Chat r2 = r8.getChat(r2)
            if (r2 == 0) goto L_0x0702
            org.telegram.tgnet.TLRPC$GroupCall r5 = r0.call
            boolean r5 = r5 instanceof org.telegram.tgnet.TLRPC$TL_groupCall
            r2.call_active = r5
            goto L_0x0702
        L_0x06e3:
            int r2 = r0.chat_id
            org.telegram.tgnet.TLRPC$ChatFull r2 = r8.getChatFull(r2)
            if (r2 == 0) goto L_0x0702
            org.telegram.tgnet.TLRPC$TL_inputGroupCall r2 = r2.call
            if (r2 == 0) goto L_0x06fb
            if (r2 == 0) goto L_0x0702
            long r14 = r2.id
            org.telegram.tgnet.TLRPC$GroupCall r2 = r0.call
            long r3 = r2.id
            int r2 = (r14 > r3 ? 1 : (r14 == r3 ? 0 : -1))
            if (r2 == 0) goto L_0x0702
        L_0x06fb:
            int r2 = r0.chat_id
            r3 = 0
            r4 = 1
            r8.loadFullChat(r2, r3, r4)
        L_0x0702:
            org.telegram.messenger.voip.VoIPService r2 = org.telegram.messenger.voip.VoIPService.getSharedInstance()
            if (r2 == 0) goto L_0x00c5
            org.telegram.messenger.voip.VoIPService r2 = org.telegram.messenger.voip.VoIPService.getSharedInstance()
            org.telegram.tgnet.TLRPC$GroupCall r0 = r0.call
            r2.onGroupCallUpdated(r0)
            goto L_0x00c5
        L_0x0713:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updatePhoneCall
            if (r2 == 0) goto L_0x088c
            org.telegram.tgnet.TLRPC$TL_updatePhoneCall r0 = (org.telegram.tgnet.TLRPC$TL_updatePhoneCall) r0
            org.telegram.tgnet.TLRPC$PhoneCall r0 = r0.phone_call
            org.telegram.messenger.voip.VoIPService r2 = org.telegram.messenger.voip.VoIPService.getSharedInstance()
            boolean r3 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r3 == 0) goto L_0x074d
            java.lang.StringBuilder r3 = new java.lang.StringBuilder
            r3.<init>()
            java.lang.String r4 = "Received call in update: "
            r3.append(r4)
            r3.append(r0)
            java.lang.String r3 = r3.toString()
            org.telegram.messenger.FileLog.d(r3)
            java.lang.StringBuilder r3 = new java.lang.StringBuilder
            r3.<init>()
            java.lang.String r4 = "call id "
            r3.append(r4)
            long r4 = r0.id
            r3.append(r4)
            java.lang.String r3 = r3.toString()
            org.telegram.messenger.FileLog.d(r3)
        L_0x074d:
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_phoneCallRequested
            if (r3 == 0) goto L_0x0868
            int r3 = r0.date
            int r4 = r8.callRingTimeout
            int r4 = r4 / 1000
            int r3 = r3 + r4
            org.telegram.tgnet.ConnectionsManager r4 = r41.getConnectionsManager()
            int r4 = r4.getCurrentTime()
            if (r3 >= r4) goto L_0x076d
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x00c5
            java.lang.String r0 = "ignoring too old call"
            org.telegram.messenger.FileLog.d(r0)
            goto L_0x00c5
        L_0x076d:
            int r3 = android.os.Build.VERSION.SDK_INT
            r4 = 21
            if (r3 < r4) goto L_0x0795
            android.content.Context r4 = org.telegram.messenger.ApplicationLoader.applicationContext
            androidx.core.app.NotificationManagerCompat r4 = androidx.core.app.NotificationManagerCompat.from(r4)
            boolean r4 = r4.areNotificationsEnabled()
            if (r4 != 0) goto L_0x0795
            boolean r4 = org.telegram.messenger.ApplicationLoader.mainInterfacePaused
            if (r4 != 0) goto L_0x078a
            boolean r4 = org.telegram.messenger.ApplicationLoader.isScreenOn
            if (r4 != 0) goto L_0x0788
            goto L_0x078a
        L_0x0788:
            r7 = 1
            goto L_0x0796
        L_0x078a:
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x00c5
            java.lang.String r0 = "Ignoring incoming call because notifications are disabled in system"
            org.telegram.messenger.FileLog.d(r0)
            goto L_0x00c5
        L_0x0795:
            r7 = 0
        L_0x0796:
            android.content.Context r4 = org.telegram.messenger.ApplicationLoader.applicationContext
            java.lang.String r5 = "phone"
            java.lang.Object r4 = r4.getSystemService(r5)
            android.telephony.TelephonyManager r4 = (android.telephony.TelephonyManager) r4
            if (r2 != 0) goto L_0x0820
            org.telegram.tgnet.TLRPC$PhoneCall r2 = org.telegram.messenger.voip.VoIPService.callIShouldHavePutIntoIntent
            if (r2 != 0) goto L_0x0820
            int r2 = r4.getCallState()
            if (r2 == 0) goto L_0x07ae
            goto L_0x0820
        L_0x07ae:
            boolean r2 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r2 == 0) goto L_0x07c8
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            java.lang.String r4 = "Starting service for call "
            r2.append(r4)
            long r4 = r0.id
            r2.append(r4)
            java.lang.String r2 = r2.toString()
            org.telegram.messenger.FileLog.d(r2)
        L_0x07c8:
            org.telegram.messenger.voip.VoIPService.callIShouldHavePutIntoIntent = r0
            android.content.Intent r2 = new android.content.Intent
            android.content.Context r4 = org.telegram.messenger.ApplicationLoader.applicationContext
            java.lang.Class<org.telegram.messenger.voip.VoIPService> r5 = org.telegram.messenger.voip.VoIPService.class
            r2.<init>(r4, r5)
            java.lang.String r4 = "is_outgoing"
            r5 = 0
            r2.putExtra(r4, r5)
            int r4 = r0.participant_id
            org.telegram.messenger.UserConfig r5 = r41.getUserConfig()
            int r5 = r5.getClientUserId()
            if (r4 != r5) goto L_0x07e8
            int r0 = r0.admin_id
            goto L_0x07ea
        L_0x07e8:
            int r0 = r0.participant_id
        L_0x07ea:
            java.lang.String r4 = "user_id"
            r2.putExtra(r4, r0)
            int r0 = r8.currentAccount
            java.lang.String r4 = "account"
            r2.putExtra(r4, r0)
            java.lang.String r0 = "notifications_disabled"
            r2.putExtra(r0, r7)
            if (r7 != 0) goto L_0x0808
            r0 = 26
            if (r3 < r0) goto L_0x0808
            android.content.Context r0 = org.telegram.messenger.ApplicationLoader.applicationContext     // Catch:{ all -> 0x081a }
            r0.startForegroundService(r2)     // Catch:{ all -> 0x081a }
            goto L_0x080d
        L_0x0808:
            android.content.Context r0 = org.telegram.messenger.ApplicationLoader.applicationContext     // Catch:{ all -> 0x081a }
            r0.startService(r2)     // Catch:{ all -> 0x081a }
        L_0x080d:
            boolean r0 = org.telegram.messenger.ApplicationLoader.mainInterfacePaused     // Catch:{ all -> 0x081a }
            if (r0 != 0) goto L_0x0815
            boolean r0 = org.telegram.messenger.ApplicationLoader.isScreenOn     // Catch:{ all -> 0x081a }
            if (r0 != 0) goto L_0x00c5
        L_0x0815:
            r2 = 1
            r8.ignoreSetOnline = r2     // Catch:{ all -> 0x081a }
            goto L_0x00c5
        L_0x081a:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
            goto L_0x00c5
        L_0x0820:
            boolean r2 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r2 == 0) goto L_0x083f
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            java.lang.String r3 = "Auto-declining call "
            r2.append(r3)
            long r3 = r0.id
            r2.append(r3)
            java.lang.String r3 = " because there's already active one"
            r2.append(r3)
            java.lang.String r2 = r2.toString()
            org.telegram.messenger.FileLog.d(r2)
        L_0x083f:
            org.telegram.tgnet.TLRPC$TL_phone_discardCall r2 = new org.telegram.tgnet.TLRPC$TL_phone_discardCall
            r2.<init>()
            org.telegram.tgnet.TLRPC$TL_inputPhoneCall r3 = new org.telegram.tgnet.TLRPC$TL_inputPhoneCall
            r3.<init>()
            r2.peer = r3
            long r4 = r0.access_hash
            r3.access_hash = r4
            long r4 = r0.id
            r3.id = r4
            org.telegram.tgnet.TLRPC$TL_phoneCallDiscardReasonBusy r0 = new org.telegram.tgnet.TLRPC$TL_phoneCallDiscardReasonBusy
            r0.<init>()
            r2.reason = r0
            org.telegram.tgnet.ConnectionsManager r0 = r41.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$GVDXvi5AM-VxUI2GP7VbMeTlU5o r3 = new org.telegram.messenger.-$$Lambda$MessagesController$GVDXvi5AM-VxUI2GP7VbMeTlU5o
            r3.<init>()
            r0.sendRequest(r2, r3)
            goto L_0x00c5
        L_0x0868:
            if (r2 == 0) goto L_0x0871
            if (r0 == 0) goto L_0x0871
            r2.onCallUpdated(r0)
            goto L_0x00c5
        L_0x0871:
            org.telegram.tgnet.TLRPC$PhoneCall r2 = org.telegram.messenger.voip.VoIPService.callIShouldHavePutIntoIntent
            if (r2 == 0) goto L_0x00c5
            boolean r2 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r2 == 0) goto L_0x087e
            java.lang.String r2 = "Updated the call while the service is starting"
            org.telegram.messenger.FileLog.d(r2)
        L_0x087e:
            long r2 = r0.id
            org.telegram.tgnet.TLRPC$PhoneCall r4 = org.telegram.messenger.voip.VoIPService.callIShouldHavePutIntoIntent
            long r4 = r4.id
            int r7 = (r2 > r4 ? 1 : (r2 == r4 ? 0 : -1))
            if (r7 != 0) goto L_0x00c5
            org.telegram.messenger.voip.VoIPService.callIShouldHavePutIntoIntent = r0
            goto L_0x00c5
        L_0x088c:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateDialogUnreadMark
            if (r2 == 0) goto L_0x08ef
            org.telegram.tgnet.TLRPC$TL_updateDialogUnreadMark r0 = (org.telegram.tgnet.TLRPC$TL_updateDialogUnreadMark) r0
            org.telegram.tgnet.TLRPC$DialogPeer r2 = r0.peer
            boolean r3 = r2 instanceof org.telegram.tgnet.TLRPC$TL_dialogPeer
            if (r3 == 0) goto L_0x08ad
            org.telegram.tgnet.TLRPC$TL_dialogPeer r2 = (org.telegram.tgnet.TLRPC$TL_dialogPeer) r2
            org.telegram.tgnet.TLRPC$Peer r2 = r2.peer
            int r3 = r2.user_id
            if (r3 == 0) goto L_0x08a2
            long r2 = (long) r3
            goto L_0x08af
        L_0x08a2:
            int r3 = r2.chat_id
            if (r3 == 0) goto L_0x08a8
            int r2 = -r3
            goto L_0x08ab
        L_0x08a8:
            int r2 = r2.channel_id
            int r2 = -r2
        L_0x08ab:
            long r2 = (long) r2
            goto L_0x08af
        L_0x08ad:
            r2 = 0
        L_0x08af:
            org.telegram.messenger.MessagesStorage r4 = r41.getMessagesStorage()
            boolean r5 = r0.unread
            r4.setDialogUnread(r2, r5)
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r4 = r8.dialogs_dict
            java.lang.Object r4 = r4.get(r2)
            org.telegram.tgnet.TLRPC$Dialog r4 = (org.telegram.tgnet.TLRPC$Dialog) r4
            if (r4 == 0) goto L_0x0532
            boolean r5 = r4.unread_mark
            boolean r0 = r0.unread
            if (r5 == r0) goto L_0x0532
            r4.unread_mark = r0
            int r0 = r4.unread_count
            if (r0 != 0) goto L_0x08e5
            boolean r0 = r8.isDialogMuted(r2)
            if (r0 != 0) goto L_0x08e5
            boolean r0 = r4.unread_mark
            if (r0 == 0) goto L_0x08df
            int r0 = r8.unreadUnmutedDialogs
            r2 = 1
            int r0 = r0 + r2
            r8.unreadUnmutedDialogs = r0
            goto L_0x08e5
        L_0x08df:
            r2 = 1
            int r0 = r8.unreadUnmutedDialogs
            int r0 = r0 - r2
            r8.unreadUnmutedDialogs = r0
        L_0x08e5:
            r0 = r1 | 256(0x100, float:3.59E-43)
            int r1 = DIALOG_FILTER_FLAG_EXCLUDE_READ
            r24 = r24 | r1
            r21 = r0
            goto L_0x0498
        L_0x08ef:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateMessagePoll
            if (r2 == 0) goto L_0x0916
            org.telegram.tgnet.TLRPC$TL_updateMessagePoll r0 = (org.telegram.tgnet.TLRPC$TL_updateMessagePoll) r0
            org.telegram.messenger.NotificationCenter r2 = r41.getNotificationCenter()
            int r3 = org.telegram.messenger.NotificationCenter.didUpdatePollResults
            r4 = 3
            java.lang.Object[] r5 = new java.lang.Object[r4]
            long r14 = r0.poll_id
            java.lang.Long r4 = java.lang.Long.valueOf(r14)
            r7 = 0
            r5[r7] = r4
            org.telegram.tgnet.TLRPC$Poll r4 = r0.poll
            r7 = 1
            r5[r7] = r4
            org.telegram.tgnet.TLRPC$PollResults r0 = r0.results
            r4 = 2
            r5[r4] = r0
            r2.postNotificationName(r3, r5)
            goto L_0x00c5
        L_0x0916:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updatePeerSettings
            if (r2 == 0) goto L_0x0939
            org.telegram.tgnet.TLRPC$TL_updatePeerSettings r0 = (org.telegram.tgnet.TLRPC$TL_updatePeerSettings) r0
            org.telegram.tgnet.TLRPC$Peer r2 = r0.peer
            boolean r3 = r2 instanceof org.telegram.tgnet.TLRPC$TL_peerUser
            if (r3 == 0) goto L_0x0926
            int r2 = r2.user_id
        L_0x0924:
            long r2 = (long) r2
            goto L_0x0931
        L_0x0926:
            boolean r3 = r2 instanceof org.telegram.tgnet.TLRPC$TL_peerChat
            if (r3 == 0) goto L_0x092d
            int r2 = r2.chat_id
            goto L_0x092f
        L_0x092d:
            int r2 = r2.channel_id
        L_0x092f:
            int r2 = -r2
            goto L_0x0924
        L_0x0931:
            org.telegram.tgnet.TLRPC$TL_peerSettings r0 = r0.settings
            r4 = 1
            r8.savePeerSettings(r2, r0, r4)
            goto L_0x00c5
        L_0x0939:
            r4 = 1
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updatePeerLocated
            if (r2 == 0) goto L_0x094e
            org.telegram.messenger.NotificationCenter r2 = r41.getNotificationCenter()
            int r3 = org.telegram.messenger.NotificationCenter.newPeopleNearbyAvailable
            java.lang.Object[] r5 = new java.lang.Object[r4]
            r4 = 0
            r5[r4] = r0
            r2.postNotificationName(r3, r5)
            goto L_0x00c5
        L_0x094e:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateMessageReactions
            if (r2 == 0) goto L_0x0988
            org.telegram.tgnet.TLRPC$TL_updateMessageReactions r0 = (org.telegram.tgnet.TLRPC$TL_updateMessageReactions) r0
            org.telegram.tgnet.TLRPC$Peer r2 = r0.peer
            int r3 = r2.chat_id
            if (r3 == 0) goto L_0x095d
        L_0x095a:
            int r2 = -r3
        L_0x095b:
            long r2 = (long) r2
            goto L_0x0965
        L_0x095d:
            int r3 = r2.channel_id
            if (r3 == 0) goto L_0x0962
            goto L_0x095a
        L_0x0962:
            int r2 = r2.user_id
            goto L_0x095b
        L_0x0965:
            org.telegram.messenger.NotificationCenter r4 = r41.getNotificationCenter()
            int r5 = org.telegram.messenger.NotificationCenter.didUpdateReactions
            r7 = 3
            java.lang.Object[] r9 = new java.lang.Object[r7]
            java.lang.Long r2 = java.lang.Long.valueOf(r2)
            r3 = 0
            r9[r3] = r2
            int r2 = r0.msg_id
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)
            r3 = 1
            r9[r3] = r2
            org.telegram.tgnet.TLRPC$TL_messageReactions r0 = r0.reactions
            r2 = 2
            r9[r2] = r0
            r4.postNotificationName(r5, r9)
            goto L_0x00c5
        L_0x0988:
            r3 = 1
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateTheme
            if (r2 == 0) goto L_0x099b
            org.telegram.tgnet.TLRPC$TL_updateTheme r0 = (org.telegram.tgnet.TLRPC$TL_updateTheme) r0
            org.telegram.tgnet.TLRPC$Theme r0 = r0.theme
            org.telegram.tgnet.TLRPC$TL_theme r0 = (org.telegram.tgnet.TLRPC$TL_theme) r0
            int r2 = r8.currentAccount
            r4 = 0
            org.telegram.ui.ActionBar.Theme.setThemeUploadInfo(r4, r4, r0, r2, r3)
            goto L_0x00c5
        L_0x099b:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateDialogFilter
            if (r2 == 0) goto L_0x09a4
            r8.loadRemoteFilters(r3)
            goto L_0x00c5
        L_0x09a4:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateDialogFilterOrder
            if (r2 == 0) goto L_0x09ad
            r8.loadRemoteFilters(r3)
            goto L_0x00c5
        L_0x09ad:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateDialogFilters
            if (r2 == 0) goto L_0x09b6
            r8.loadRemoteFilters(r3)
            goto L_0x00c5
        L_0x09b6:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateReadChannelDiscussionInbox
            if (r2 == 0) goto L_0x0a22
            org.telegram.tgnet.TLRPC$TL_updateReadChannelDiscussionInbox r0 = (org.telegram.tgnet.TLRPC$TL_updateReadChannelDiscussionInbox) r0
            org.telegram.messenger.NotificationCenter r2 = r41.getNotificationCenter()
            int r3 = org.telegram.messenger.NotificationCenter.threadMessagesRead
            r4 = 4
            java.lang.Object[] r5 = new java.lang.Object[r4]
            int r4 = r0.channel_id
            int r4 = -r4
            long r14 = (long) r4
            java.lang.Long r4 = java.lang.Long.valueOf(r14)
            r7 = 0
            r5[r7] = r4
            int r4 = r0.top_msg_id
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)
            r7 = 1
            r5[r7] = r4
            int r4 = r0.read_max_id
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)
            r9 = 2
            r5[r9] = r4
            r4 = 3
            r5[r4] = r16
            r2.postNotificationName(r3, r5)
            int r2 = r0.flags
            r2 = r2 & r7
            if (r2 == 0) goto L_0x00c5
            org.telegram.messenger.MessagesStorage r2 = r41.getMessagesStorage()
            int r3 = r0.broadcast_id
            int r4 = r0.broadcast_post
            int r5 = r0.read_max_id
            r2.updateRepliesMaxReadId(r3, r4, r5, r7)
            org.telegram.messenger.NotificationCenter r2 = r41.getNotificationCenter()
            int r3 = org.telegram.messenger.NotificationCenter.commentsRead
            r4 = 3
            java.lang.Object[] r5 = new java.lang.Object[r4]
            int r4 = r0.broadcast_id
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)
            r9 = 0
            r5[r9] = r4
            int r4 = r0.broadcast_post
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)
            r5[r7] = r4
            int r0 = r0.read_max_id
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)
            r4 = 2
            r5[r4] = r0
            r2.postNotificationName(r3, r5)
            goto L_0x00c5
        L_0x0a22:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateReadChannelDiscussionOutbox
            if (r2 == 0) goto L_0x00c5
            org.telegram.tgnet.TLRPC$TL_updateReadChannelDiscussionOutbox r0 = (org.telegram.tgnet.TLRPC$TL_updateReadChannelDiscussionOutbox) r0
            org.telegram.messenger.NotificationCenter r2 = r41.getNotificationCenter()
            int r3 = org.telegram.messenger.NotificationCenter.threadMessagesRead
            r4 = 4
            java.lang.Object[] r5 = new java.lang.Object[r4]
            int r7 = r0.channel_id
            int r7 = -r7
            long r14 = (long) r7
            java.lang.Long r7 = java.lang.Long.valueOf(r14)
            r9 = 0
            r5[r9] = r7
            int r7 = r0.top_msg_id
            java.lang.Integer r7 = java.lang.Integer.valueOf(r7)
            r9 = 1
            r5[r9] = r7
            r7 = 2
            r5[r7] = r16
            int r0 = r0.read_max_id
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)
            r7 = 3
            r5[r7] = r0
            r2.postNotificationName(r3, r5)
        L_0x0a54:
            r21 = r1
        L_0x0a56:
            int r7 = r22 + 1
            r9 = r43
            r14 = r49
            r15 = r50
            r4 = r6
            r5 = r19
            r6 = r33
            goto L_0x0031
        L_0x0a65:
            r33 = r6
            r1 = r21
            r6 = r4
            r4 = 4
            if (r23 == 0) goto L_0x0a7d
            r23.commit()
            org.telegram.messenger.NotificationCenter r0 = r41.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.notificationsSettingsUpdated
            r3 = 0
            java.lang.Object[] r5 = new java.lang.Object[r3]
            r0.postNotificationName(r2, r5)
            goto L_0x0a7e
        L_0x0a7d:
            r3 = 0
        L_0x0a7e:
            org.telegram.messenger.MessagesStorage r0 = r41.getMessagesStorage()
            r2 = r33
            r5 = 1
            r0.updateUsers(r2, r5, r5, r5)
            org.telegram.messenger.MessagesStorage r0 = r41.getMessagesStorage()
            r0.updateUsers(r6, r3, r5, r5)
            r7 = r24
            goto L_0x0a98
        L_0x0a92:
            r4 = 4
            r1 = r42
            r7 = 0
            r25 = 0
        L_0x0a98:
            if (r10 == 0) goto L_0x0ac4
            int r0 = r44.size()
            r2 = 0
        L_0x0a9f:
            if (r2 >= r0) goto L_0x0ac4
            int r3 = r10.keyAt(r2)
            android.util.SparseArray<org.telegram.messenger.ChatObject$Call> r5 = r8.groupCallsByChatId
            java.lang.Object r3 = r5.get(r3)
            org.telegram.messenger.ChatObject$Call r3 = (org.telegram.messenger.ChatObject.Call) r3
            if (r3 == 0) goto L_0x0abf
            org.telegram.messenger.AccountInstance r5 = r41.getAccountInstance()
            java.lang.Object r6 = r10.valueAt(r2)
            java.util.ArrayList r6 = (java.util.ArrayList) r6
            r9 = r45
            r3.processTypingsUpdate(r5, r6, r9)
            goto L_0x0ac1
        L_0x0abf:
            r9 = r45
        L_0x0ac1:
            int r2 = r2 + 1
            goto L_0x0a9f
        L_0x0ac4:
            if (r11 == 0) goto L_0x0ba2
            org.telegram.messenger.NotificationCenter r0 = r41.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.didReceivedWebpagesInUpdates
            r3 = 1
            java.lang.Object[] r5 = new java.lang.Object[r3]
            r6 = 0
            r5[r6] = r11
            r0.postNotificationName(r2, r5)
            r0 = 0
            r2 = 2
        L_0x0ad7:
            if (r0 >= r2) goto L_0x0ba2
            if (r0 != r3) goto L_0x0ade
            android.util.LongSparseArray<java.util.ArrayList<org.telegram.messenger.MessageObject>> r2 = r8.reloadingScheduledWebpagesPending
            goto L_0x0ae0
        L_0x0ade:
            android.util.LongSparseArray<java.util.ArrayList<org.telegram.messenger.MessageObject>> r2 = r8.reloadingWebpagesPending
        L_0x0ae0:
            int r3 = r46.size()
            r5 = 0
        L_0x0ae5:
            if (r5 >= r3) goto L_0x0b9b
            long r9 = r11.keyAt(r5)
            java.lang.Object r6 = r2.get(r9)
            java.util.ArrayList r6 = (java.util.ArrayList) r6
            r2.remove(r9)
            if (r6 == 0) goto L_0x0b92
            java.lang.Object r9 = r11.valueAt(r5)
            org.telegram.tgnet.TLRPC$WebPage r9 = (org.telegram.tgnet.TLRPC$WebPage) r9
            java.util.ArrayList r10 = new java.util.ArrayList
            r10.<init>()
            boolean r14 = r9 instanceof org.telegram.tgnet.TLRPC$TL_webPage
            if (r14 != 0) goto L_0x0b14
            boolean r14 = r9 instanceof org.telegram.tgnet.TLRPC$TL_webPageEmpty
            if (r14 == 0) goto L_0x0b0a
            goto L_0x0b14
        L_0x0b0a:
            long r14 = r9.id
            r2.put(r14, r6)
            r18 = r2
            r15 = 0
            goto L_0x0b56
        L_0x0b14:
            int r14 = r6.size()
            r4 = 0
            r15 = 0
        L_0x0b1b:
            if (r4 >= r14) goto L_0x0b54
            java.lang.Object r17 = r6.get(r4)
            r18 = r2
            r2 = r17
            org.telegram.messenger.MessageObject r2 = (org.telegram.messenger.MessageObject) r2
            org.telegram.tgnet.TLRPC$Message r2 = r2.messageOwner
            org.telegram.tgnet.TLRPC$MessageMedia r2 = r2.media
            r2.webpage = r9
            if (r4 != 0) goto L_0x0b44
            java.lang.Object r2 = r6.get(r4)
            org.telegram.messenger.MessageObject r2 = (org.telegram.messenger.MessageObject) r2
            long r15 = r2.getDialogId()
            java.lang.Object r2 = r6.get(r4)
            org.telegram.messenger.MessageObject r2 = (org.telegram.messenger.MessageObject) r2
            org.telegram.tgnet.TLRPC$Message r2 = r2.messageOwner
            org.telegram.messenger.ImageLoader.saveMessageThumbs(r2)
        L_0x0b44:
            java.lang.Object r2 = r6.get(r4)
            org.telegram.messenger.MessageObject r2 = (org.telegram.messenger.MessageObject) r2
            org.telegram.tgnet.TLRPC$Message r2 = r2.messageOwner
            r10.add(r2)
            int r4 = r4 + 1
            r2 = r18
            goto L_0x0b1b
        L_0x0b54:
            r18 = r2
        L_0x0b56:
            boolean r2 = r10.isEmpty()
            if (r2 != 0) goto L_0x0b94
            org.telegram.messenger.MessagesStorage r34 = r41.getMessagesStorage()
            r36 = 1
            r37 = 1
            r38 = 0
            org.telegram.messenger.DownloadController r2 = r41.getDownloadController()
            int r39 = r2.getAutodownloadMask()
            r2 = 1
            if (r0 != r2) goto L_0x0b74
            r40 = 1
            goto L_0x0b76
        L_0x0b74:
            r40 = 0
        L_0x0b76:
            r35 = r10
            r34.putMessages((java.util.ArrayList<org.telegram.tgnet.TLRPC$Message>) r35, (boolean) r36, (boolean) r37, (boolean) r38, (int) r39, (boolean) r40)
            org.telegram.messenger.NotificationCenter r2 = r41.getNotificationCenter()
            int r4 = org.telegram.messenger.NotificationCenter.replaceMessagesObjects
            r9 = 2
            java.lang.Object[] r10 = new java.lang.Object[r9]
            java.lang.Long r9 = java.lang.Long.valueOf(r15)
            r14 = 0
            r10[r14] = r9
            r9 = 1
            r10[r9] = r6
            r2.postNotificationName(r4, r10)
            goto L_0x0b94
        L_0x0b92:
            r18 = r2
        L_0x0b94:
            int r5 = r5 + 1
            r2 = r18
            r4 = 4
            goto L_0x0ae5
        L_0x0b9b:
            int r0 = r0 + 1
            r2 = 2
            r3 = 1
            r4 = 4
            goto L_0x0ad7
        L_0x0ba2:
            if (r7 == 0) goto L_0x0bba
            r0 = 0
        L_0x0ba5:
            org.telegram.messenger.MessagesController$DialogFilter[] r2 = r8.selectedDialogFilter
            int r3 = r2.length
            if (r0 >= r3) goto L_0x0bba
            r3 = r2[r0]
            if (r3 == 0) goto L_0x0bb7
            r2 = r2[r0]
            int r2 = r2.flags
            r2 = r2 & r7
            if (r2 == 0) goto L_0x0bb7
            r5 = 1
            goto L_0x0bbc
        L_0x0bb7:
            int r0 = r0 + 1
            goto L_0x0ba5
        L_0x0bba:
            r5 = r25
        L_0x0bbc:
            if (r12 == 0) goto L_0x0bed
            int r0 = r47.size()
            r2 = 0
            r7 = 0
        L_0x0bc4:
            if (r7 >= r0) goto L_0x0bdb
            long r3 = r12.keyAt(r7)
            java.lang.Object r6 = r12.valueAt(r7)
            java.util.ArrayList r6 = (java.util.ArrayList) r6
            r9 = 0
            boolean r3 = r8.updateInterfaceWithMessages(r3, r6, r9)
            if (r3 == 0) goto L_0x0bd8
            r2 = 1
        L_0x0bd8:
            int r7 = r7 + 1
            goto L_0x0bc4
        L_0x0bdb:
            boolean r0 = r8.applyFoldersUpdates(r13)
            if (r0 != 0) goto L_0x0be8
            if (r2 != 0) goto L_0x0be6
            if (r5 == 0) goto L_0x0be6
            goto L_0x0be8
        L_0x0be6:
            r2 = 0
            goto L_0x0bfe
        L_0x0be8:
            r2 = 0
            r8.sortDialogs(r2)
            goto L_0x0bfe
        L_0x0bed:
            r2 = 0
            boolean r0 = r8.applyFoldersUpdates(r13)
            if (r5 != 0) goto L_0x0bfb
            if (r0 == 0) goto L_0x0bf7
            goto L_0x0bfb
        L_0x0bf7:
            r2 = r49
            r7 = 0
            goto L_0x0CLASSNAME
        L_0x0bfb:
            r8.sortDialogs(r2)
        L_0x0bfe:
            r2 = r49
            r7 = 1
        L_0x0CLASSNAME:
            if (r2 == 0) goto L_0x0c1b
            int r0 = r49.size()
            r3 = 0
        L_0x0CLASSNAME:
            if (r3 >= r0) goto L_0x0c1b
            long r4 = r2.keyAt(r3)
            java.lang.Object r6 = r2.valueAt(r3)
            java.util.ArrayList r6 = (java.util.ArrayList) r6
            r9 = 1
            r8.updateInterfaceWithMessages(r4, r6, r9)
            int r3 = r3 + 1
            goto L_0x0CLASSNAME
        L_0x0c1b:
            r2 = r50
            r3 = 4
            if (r2 == 0) goto L_0x0ccf
            int r0 = r50.size()
            r5 = r7
            r7 = 0
        L_0x0CLASSNAME:
            if (r7 >= r0) goto L_0x0cce
            long r9 = r2.keyAt(r7)
            java.lang.Object r4 = r2.valueAt(r7)
            java.util.ArrayList r4 = (java.util.ArrayList) r4
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r6 = r8.dialogMessage
            java.lang.Object r6 = r6.get(r9)
            org.telegram.messenger.MessageObject r6 = (org.telegram.messenger.MessageObject) r6
            if (r6 == 0) goto L_0x0c6c
            int r11 = r4.size()
            r12 = 0
        L_0x0CLASSNAME:
            if (r12 >= r11) goto L_0x0c6c
            java.lang.Object r13 = r4.get(r12)
            org.telegram.messenger.MessageObject r13 = (org.telegram.messenger.MessageObject) r13
            int r14 = r6.getId()
            int r15 = r13.getId()
            if (r14 != r15) goto L_0x0c6e
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r5 = r8.dialogMessage
            r5.put(r9, r13)
            org.telegram.tgnet.TLRPC$Message r5 = r13.messageOwner
            org.telegram.tgnet.TLRPC$Peer r5 = r5.peer_id
            if (r5 == 0) goto L_0x0c6b
            int r5 = r5.channel_id
            if (r5 != 0) goto L_0x0c6b
            android.util.SparseArray<org.telegram.messenger.MessageObject> r5 = r8.dialogMessagesByIds
            int r6 = r13.getId()
            r5.put(r6, r13)
        L_0x0c6b:
            r5 = 1
        L_0x0c6c:
            r13 = 0
            goto L_0x0c9c
        L_0x0c6e:
            long r14 = r6.getDialogId()
            long r16 = r13.getDialogId()
            int r18 = (r14 > r16 ? 1 : (r14 == r16 ? 0 : -1))
            if (r18 != 0) goto L_0x0CLASSNAME
            org.telegram.tgnet.TLRPC$Message r14 = r6.messageOwner
            org.telegram.tgnet.TLRPC$MessageAction r14 = r14.action
            boolean r14 = r14 instanceof org.telegram.tgnet.TLRPC$TL_messageActionPinMessage
            if (r14 == 0) goto L_0x0CLASSNAME
            org.telegram.messenger.MessageObject r14 = r6.replyMessageObject
            if (r14 == 0) goto L_0x0CLASSNAME
            int r14 = r14.getId()
            int r15 = r13.getId()
            if (r14 != r15) goto L_0x0CLASSNAME
            r6.replyMessageObject = r13
            r13 = 0
            r6.generatePinMessageText(r13, r13)
            r5 = 1
            goto L_0x0c9c
        L_0x0CLASSNAME:
            r13 = 0
            int r12 = r12 + 1
            goto L_0x0CLASSNAME
        L_0x0c9c:
            org.telegram.messenger.MediaDataController r6 = r41.getMediaDataController()
            r11 = 0
            r12 = 0
            r42 = r6
            r43 = r4
            r44 = r9
            r46 = r11
            r47 = r12
            r42.loadReplyMessagesForMessages(r43, r44, r46, r47)
            org.telegram.messenger.NotificationCenter r6 = r41.getNotificationCenter()
            int r11 = org.telegram.messenger.NotificationCenter.replaceMessagesObjects
            r12 = 3
            java.lang.Object[] r14 = new java.lang.Object[r12]
            java.lang.Long r9 = java.lang.Long.valueOf(r9)
            r10 = 0
            r14[r10] = r9
            r9 = 1
            r14[r9] = r4
            java.lang.Boolean r4 = java.lang.Boolean.FALSE
            r9 = 2
            r14[r9] = r4
            r6.postNotificationName(r11, r14)
            int r7 = r7 + 1
            goto L_0x0CLASSNAME
        L_0x0cce:
            r7 = r5
        L_0x0ccf:
            if (r7 == 0) goto L_0x0cdd
            org.telegram.messenger.NotificationCenter r0 = r41.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.dialogsNeedReload
            r4 = 0
            java.lang.Object[] r5 = new java.lang.Object[r4]
            r0.postNotificationName(r2, r5)
        L_0x0cdd:
            if (r51 == 0) goto L_0x0ce1
            r1 = r1 | 64
        L_0x0ce1:
            if (r52 == 0) goto L_0x0ce7
            r0 = r1 | 1
            r1 = r0 | 128(0x80, float:1.794E-43)
        L_0x0ce7:
            r2 = r53
            if (r2 == 0) goto L_0x0d02
            int r0 = r53.size()
            r7 = 0
        L_0x0cf0:
            if (r7 >= r0) goto L_0x0d02
            java.lang.Object r4 = r2.get(r7)
            org.telegram.tgnet.TLRPC$ChatParticipants r4 = (org.telegram.tgnet.TLRPC$ChatParticipants) r4
            org.telegram.messenger.MessagesStorage r5 = r41.getMessagesStorage()
            r5.updateChatParticipants(r4)
            int r7 = r7 + 1
            goto L_0x0cf0
        L_0x0d02:
            if (r54 != 0) goto L_0x0d0b
            if (r55 != 0) goto L_0x0d0b
            if (r56 == 0) goto L_0x0d09
            goto L_0x0d0b
        L_0x0d09:
            r4 = 1
            goto L_0x0d24
        L_0x0d0b:
            org.telegram.messenger.NotificationCenter r0 = r41.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.didUpdateMessagesViews
            java.lang.Object[] r3 = new java.lang.Object[r3]
            r4 = 0
            r3[r4] = r54
            r4 = 1
            r3[r4] = r55
            r5 = 2
            r3[r5] = r56
            java.lang.Boolean r5 = java.lang.Boolean.TRUE
            r6 = 3
            r3[r6] = r5
            r0.postNotificationName(r2, r3)
        L_0x0d24:
            if (r1 == 0) goto L_0x0d38
            org.telegram.messenger.NotificationCenter r0 = r41.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.updateInterfaces
            java.lang.Object[] r3 = new java.lang.Object[r4]
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            r4 = 0
            r3[r4] = r1
            r0.postNotificationName(r2, r3)
        L_0x0d38:
            r1 = r57
            if (r1 == 0) goto L_0x0d43
            org.telegram.messenger.ImageLoader r0 = org.telegram.messenger.ImageLoader.getInstance()
            r0.putThumbsToCache(r1)
        L_0x0d43:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$processUpdateArray$293$MessagesController(int, java.util.ArrayList, android.util.SparseArray, int, android.util.LongSparseArray, android.util.LongSparseArray, java.util.ArrayList, android.util.LongSparseArray, android.util.LongSparseArray, boolean, java.util.ArrayList, java.util.ArrayList, android.util.SparseArray, android.util.SparseArray, android.util.SparseArray, java.util.ArrayList):void");
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$processUpdateArray$295 */
    public /* synthetic */ void lambda$processUpdateArray$295$MessagesController(SparseLongArray sparseLongArray, SparseLongArray sparseLongArray2, SparseIntArray sparseIntArray, ArrayList arrayList, SparseArray sparseArray, SparseArray sparseArray2, SparseIntArray sparseIntArray2) {
        AndroidUtilities.runOnUIThread(new Runnable(sparseLongArray, sparseLongArray2, sparseIntArray, arrayList, sparseArray, sparseArray2, sparseIntArray2) {
            public final /* synthetic */ SparseLongArray f$1;
            public final /* synthetic */ SparseLongArray f$2;
            public final /* synthetic */ SparseIntArray f$3;
            public final /* synthetic */ ArrayList f$4;
            public final /* synthetic */ SparseArray f$5;
            public final /* synthetic */ SparseArray f$6;
            public final /* synthetic */ SparseIntArray f$7;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
                this.f$7 = r8;
            }

            public final void run() {
                MessagesController.this.lambda$null$294$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$294 */
    public /* synthetic */ void lambda$null$294$MessagesController(SparseLongArray sparseLongArray, SparseLongArray sparseLongArray2, SparseIntArray sparseIntArray, ArrayList arrayList, SparseArray sparseArray, SparseArray sparseArray2, SparseIntArray sparseIntArray2) {
        int i;
        MessageObject messageObject;
        int i2;
        MessageObject messageObject2;
        int i3;
        MessageObject messageObject3;
        SparseLongArray sparseLongArray3 = sparseLongArray;
        SparseLongArray sparseLongArray4 = sparseLongArray2;
        SparseIntArray sparseIntArray3 = sparseIntArray;
        SparseArray sparseArray3 = sparseArray;
        SparseArray sparseArray4 = sparseArray2;
        SparseIntArray sparseIntArray4 = sparseIntArray2;
        if (sparseLongArray3 == null && sparseLongArray4 == null) {
            i = 0;
        } else {
            getNotificationCenter().postNotificationName(NotificationCenter.messagesRead, sparseLongArray3, sparseLongArray4);
            if (sparseLongArray3 != null) {
                getNotificationsController().processReadMessages(sparseLongArray, 0, 0, 0, false);
                SharedPreferences.Editor edit = this.notificationsPreferences.edit();
                int size = sparseLongArray.size();
                i = 0;
                for (int i4 = 0; i4 < size; i4++) {
                    int keyAt = sparseLongArray3.keyAt(i4);
                    int valueAt = (int) sparseLongArray3.valueAt(i4);
                    TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get((long) keyAt);
                    if (tLRPC$Dialog != null && (i3 = tLRPC$Dialog.top_message) > 0 && i3 <= valueAt && (messageObject3 = this.dialogMessage.get(tLRPC$Dialog.id)) != null && !messageObject3.isOut()) {
                        messageObject3.setIsRead();
                        i |= 256;
                    }
                    if (keyAt != getUserConfig().getClientUserId()) {
                        edit.remove("diditem" + keyAt);
                        edit.remove("diditemo" + keyAt);
                    }
                }
                edit.commit();
            } else {
                i = 0;
            }
            if (sparseLongArray4 != null) {
                int size2 = sparseLongArray2.size();
                for (int i5 = 0; i5 < size2; i5++) {
                    int keyAt2 = sparseLongArray4.keyAt(i5);
                    int valueAt2 = (int) sparseLongArray4.valueAt(i5);
                    TLRPC$Dialog tLRPC$Dialog2 = this.dialogs_dict.get((long) keyAt2);
                    if (tLRPC$Dialog2 != null && (i2 = tLRPC$Dialog2.top_message) > 0 && i2 <= valueAt2 && (messageObject2 = this.dialogMessage.get(tLRPC$Dialog2.id)) != null && messageObject2.isOut()) {
                        messageObject2.setIsRead();
                        i |= 256;
                    }
                }
            }
        }
        if (sparseIntArray3 != null) {
            int size3 = sparseIntArray.size();
            for (int i6 = 0; i6 < size3; i6++) {
                int keyAt3 = sparseIntArray3.keyAt(i6);
                int valueAt3 = sparseIntArray3.valueAt(i6);
                getNotificationCenter().postNotificationName(NotificationCenter.messagesReadEncrypted, Integer.valueOf(keyAt3), Integer.valueOf(valueAt3));
                long j = ((long) keyAt3) << 32;
                if (!(this.dialogs_dict.get(j) == null || (messageObject = this.dialogMessage.get(j)) == null || messageObject.messageOwner.date > valueAt3)) {
                    messageObject.setIsRead();
                    i |= 256;
                }
            }
        }
        if (arrayList != null) {
            getNotificationCenter().postNotificationName(NotificationCenter.messagesReadContent, arrayList);
        }
        if (sparseArray3 != null) {
            int size4 = sparseArray.size();
            for (int i7 = 0; i7 < size4; i7++) {
                int keyAt4 = sparseArray3.keyAt(i7);
                ArrayList arrayList2 = (ArrayList) sparseArray3.valueAt(i7);
                if (arrayList2 != null) {
                    getNotificationCenter().postNotificationName(NotificationCenter.messagesDeleted, arrayList2, Integer.valueOf(keyAt4), Boolean.FALSE);
                    if (keyAt4 == 0) {
                        int size5 = arrayList2.size();
                        for (int i8 = 0; i8 < size5; i8++) {
                            MessageObject messageObject4 = this.dialogMessagesByIds.get(((Integer) arrayList2.get(i8)).intValue());
                            if (messageObject4 != null) {
                                if (BuildVars.LOGS_ENABLED) {
                                    FileLog.d("mark messages " + messageObject4.getId() + " deleted");
                                }
                                messageObject4.deleted = true;
                            }
                        }
                    } else {
                        MessageObject messageObject5 = this.dialogMessage.get((long) (-keyAt4));
                        if (messageObject5 != null) {
                            int size6 = arrayList2.size();
                            int i9 = 0;
                            while (true) {
                                if (i9 >= size6) {
                                    break;
                                } else if (messageObject5.getId() == ((Integer) arrayList2.get(i9)).intValue()) {
                                    messageObject5.deleted = true;
                                    break;
                                } else {
                                    i9++;
                                }
                            }
                        }
                    }
                }
            }
            getNotificationsController().removeDeletedMessagesFromNotifications(sparseArray3);
        }
        if (sparseArray4 != null) {
            int size7 = sparseArray2.size();
            for (int i10 = 0; i10 < size7; i10++) {
                int keyAt5 = sparseArray4.keyAt(i10);
                ArrayList arrayList3 = (ArrayList) sparseArray4.valueAt(i10);
                if (arrayList3 != null) {
                    getNotificationCenter().postNotificationName(NotificationCenter.messagesDeleted, arrayList3, Integer.valueOf(keyAt5), Boolean.TRUE);
                }
            }
        }
        if (sparseIntArray4 != null) {
            int size8 = sparseIntArray2.size();
            int i11 = 0;
            while (true) {
                if (i11 >= size8) {
                    break;
                }
                int keyAt6 = sparseIntArray4.keyAt(i11);
                int valueAt4 = sparseIntArray4.valueAt(i11);
                long j2 = (long) (-keyAt6);
                getNotificationCenter().postNotificationName(NotificationCenter.historyCleared, Long.valueOf(j2), Integer.valueOf(valueAt4));
                MessageObject messageObject6 = this.dialogMessage.get(j2);
                if (messageObject6 != null && messageObject6.getId() <= valueAt4) {
                    messageObject6.deleted = true;
                    break;
                }
                i11++;
            }
            getNotificationsController().removeDeletedHisoryFromNotifications(sparseIntArray4);
        }
        if (i != 0) {
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(i));
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$processUpdateArray$296 */
    public /* synthetic */ void lambda$processUpdateArray$296$MessagesController(ArrayList arrayList, int i) {
        getMessagesStorage().updateDialogsWithDeletedMessages(arrayList, getMessagesStorage().markMessagesAsDeleted(arrayList, false, i, true, false), false, i);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$processUpdateArray$297 */
    public /* synthetic */ void lambda$processUpdateArray$297$MessagesController(int i, int i2) {
        getMessagesStorage().updateDialogsWithDeletedMessages(new ArrayList(), getMessagesStorage().markMessagesAsDeleted(i, i2, false, true), false, i);
    }

    public boolean isDialogMuted(long j) {
        return isDialogMuted(j, (TLRPC$Chat) null);
    }

    public boolean isDialogMuted(long j, TLRPC$Chat tLRPC$Chat) {
        Boolean bool;
        SharedPreferences sharedPreferences = this.notificationsPreferences;
        int i = sharedPreferences.getInt("notify2_" + j, -1);
        boolean z = false;
        if (i == -1) {
            if (tLRPC$Chat != null) {
                if (ChatObject.isChannel(tLRPC$Chat) && !tLRPC$Chat.megagroup) {
                    z = true;
                }
                bool = Boolean.valueOf(z);
            } else {
                bool = null;
            }
            return !getNotificationsController().isGlobalNotificationsEnabled(j, bool);
        } else if (i == 2) {
            return true;
        } else {
            if (i == 3) {
                SharedPreferences sharedPreferences2 = this.notificationsPreferences;
                if (sharedPreferences2.getInt("notifyuntil_" + j, 0) >= getConnectionsManager().getCurrentTime()) {
                    return true;
                }
            }
            return false;
        }
    }

    public CharSequence getPrintingString(long j, int i, boolean z) {
        SparseArray sparseArray;
        int i2;
        TLRPC$User user;
        TLRPC$UserStatus tLRPC$UserStatus;
        if ((!z || (i2 = (int) j) <= 0 || (user = getUser(Integer.valueOf(i2))) == null || (tLRPC$UserStatus = user.status) == null || tLRPC$UserStatus.expires >= 0) && (sparseArray = this.printingStrings.get(j)) != null) {
            return (CharSequence) sparseArray.get(i);
        }
        return null;
    }

    public Integer getPrintingStringType(long j, int i) {
        SparseArray sparseArray = this.printingStringsTypes.get(j);
        if (sparseArray == null) {
            return null;
        }
        return (Integer) sparseArray.get(i);
    }

    private boolean updatePrintingUsersWithNewMessages(long j, ArrayList<MessageObject> arrayList) {
        boolean z;
        if (j > 0) {
            if (((ConcurrentHashMap) this.printingUsers.get(Long.valueOf(j))) != null) {
                this.printingUsers.remove(Long.valueOf(j));
                return true;
            }
        } else if (j < 0) {
            ArrayList arrayList2 = new ArrayList();
            Iterator<MessageObject> it = arrayList.iterator();
            while (it.hasNext()) {
                MessageObject next = it.next();
                if (next.isFromUser() && !arrayList2.contains(Integer.valueOf(next.messageOwner.from_id.user_id))) {
                    arrayList2.add(Integer.valueOf(next.messageOwner.from_id.user_id));
                }
            }
            ConcurrentHashMap concurrentHashMap = (ConcurrentHashMap) this.printingUsers.get(Long.valueOf(j));
            if (concurrentHashMap != null) {
                ArrayList arrayList3 = null;
                z = false;
                for (Map.Entry entry : concurrentHashMap.entrySet()) {
                    Integer num = (Integer) entry.getKey();
                    ArrayList arrayList4 = (ArrayList) entry.getValue();
                    int i = 0;
                    while (i < arrayList4.size()) {
                        if (arrayList2.contains(Integer.valueOf(((PrintingUser) arrayList4.get(i)).userId))) {
                            arrayList4.remove(i);
                            i--;
                            if (arrayList4.isEmpty()) {
                                if (arrayList3 == null) {
                                    arrayList3 = new ArrayList();
                                }
                                arrayList3.add(num);
                            }
                            z = true;
                        }
                        i++;
                    }
                }
                if (arrayList3 != null) {
                    int size = arrayList3.size();
                    for (int i2 = 0; i2 < size; i2++) {
                        concurrentHashMap.remove(arrayList3.get(i2));
                    }
                    if (concurrentHashMap.isEmpty()) {
                        this.printingUsers.remove(Long.valueOf(j));
                    }
                }
            } else {
                z = false;
            }
            if (z) {
                return true;
            }
        }
        return false;
    }

    /* access modifiers changed from: protected */
    /* JADX WARNING: Code restructure failed: missing block: B:38:0x0089, code lost:
        if (r13.id != r14.messageOwner.action.call.id) goto L_0x008e;
     */
    /* JADX WARNING: Removed duplicated region for block: B:165:0x0396  */
    /* JADX WARNING: Removed duplicated region for block: B:167:0x039c  */
    /* JADX WARNING: Removed duplicated region for block: B:54:0x00bd  */
    /* JADX WARNING: Removed duplicated region for block: B:60:0x00e3  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean updateInterfaceWithMessages(long r23, java.util.ArrayList<org.telegram.messenger.MessageObject> r25, boolean r26) {
        /*
            r22 = this;
            r0 = r22
            r7 = r23
            r9 = r25
            if (r9 == 0) goto L_0x03a6
            boolean r1 = r25.isEmpty()
            if (r1 == 0) goto L_0x0010
            goto L_0x03a6
        L_0x0010:
            int r11 = (int) r7
            if (r11 != 0) goto L_0x0015
            r1 = 1
            goto L_0x0016
        L_0x0015:
            r1 = 0
        L_0x0016:
            if (r26 != 0) goto L_0x0127
            r2 = 0
            r3 = 0
            r4 = 0
            r5 = 0
            r6 = 0
        L_0x001d:
            int r14 = r25.size()
            if (r2 >= r14) goto L_0x0121
            java.lang.Object r14 = r9.get(r2)
            org.telegram.messenger.MessageObject r14 = (org.telegram.messenger.MessageObject) r14
            if (r3 == 0) goto L_0x0059
            if (r1 != 0) goto L_0x0037
            int r15 = r14.getId()
            int r13 = r3.getId()
            if (r15 > r13) goto L_0x0059
        L_0x0037:
            if (r1 != 0) goto L_0x0045
            int r13 = r14.getId()
            if (r13 >= 0) goto L_0x004f
            int r13 = r3.getId()
            if (r13 >= 0) goto L_0x004f
        L_0x0045:
            int r13 = r14.getId()
            int r15 = r3.getId()
            if (r13 < r15) goto L_0x0059
        L_0x004f:
            org.telegram.tgnet.TLRPC$Message r13 = r14.messageOwner
            int r13 = r13.date
            org.telegram.tgnet.TLRPC$Message r15 = r3.messageOwner
            int r15 = r15.date
            if (r13 <= r15) goto L_0x0063
        L_0x0059:
            org.telegram.tgnet.TLRPC$Message r3 = r14.messageOwner
            org.telegram.tgnet.TLRPC$Peer r3 = r3.peer_id
            int r3 = r3.channel_id
            if (r3 == 0) goto L_0x0062
            r4 = r3
        L_0x0062:
            r3 = r14
        L_0x0063:
            org.telegram.tgnet.TLRPC$Message r13 = r14.messageOwner
            org.telegram.tgnet.TLRPC$MessageAction r15 = r13.action
            boolean r15 = r15 instanceof org.telegram.tgnet.TLRPC$TL_messageActionGroupCall
            if (r15 == 0) goto L_0x009a
            org.telegram.tgnet.TLRPC$Peer r13 = r13.peer_id
            int r13 = r13.channel_id
            org.telegram.tgnet.TLRPC$ChatFull r13 = r0.getChatFull(r13)
            if (r13 == 0) goto L_0x009a
            org.telegram.tgnet.TLRPC$TL_inputGroupCall r13 = r13.call
            if (r13 == 0) goto L_0x008c
            if (r13 == 0) goto L_0x009a
            r21 = r11
            long r10 = r13.id
            org.telegram.tgnet.TLRPC$Message r13 = r14.messageOwner
            org.telegram.tgnet.TLRPC$MessageAction r13 = r13.action
            org.telegram.tgnet.TLRPC$TL_inputGroupCall r13 = r13.call
            long r12 = r13.id
            int r15 = (r10 > r12 ? 1 : (r10 == r12 ? 0 : -1))
            if (r15 == 0) goto L_0x009c
            goto L_0x008e
        L_0x008c:
            r21 = r11
        L_0x008e:
            org.telegram.tgnet.TLRPC$Message r10 = r14.messageOwner
            org.telegram.tgnet.TLRPC$Peer r10 = r10.peer_id
            int r10 = r10.channel_id
            r11 = 1
            r12 = 0
            r0.loadFullChat(r10, r12, r11)
            goto L_0x009c
        L_0x009a:
            r21 = r11
        L_0x009c:
            if (r5 != 0) goto L_0x00a5
            boolean r10 = r14.isOut()
            if (r10 != 0) goto L_0x00a5
            r5 = 1
        L_0x00a5:
            boolean r10 = r14.isOut()
            if (r10 == 0) goto L_0x010e
            boolean r10 = r14.isSending()
            if (r10 != 0) goto L_0x010e
            boolean r10 = r14.isForwarded()
            if (r10 != 0) goto L_0x010e
            boolean r10 = r14.isNewGif()
            if (r10 == 0) goto L_0x00e3
            org.telegram.tgnet.TLRPC$Message r10 = r14.messageOwner
            org.telegram.tgnet.TLRPC$MessageMedia r10 = r10.media
            org.telegram.tgnet.TLRPC$Document r10 = r10.document
            boolean r10 = org.telegram.messenger.MessageObject.isDocumentHasAttachedStickers(r10)
            if (r10 == 0) goto L_0x00d0
            org.telegram.messenger.MessagesController r10 = r22.getMessagesController()
            boolean r10 = r10.saveGifsWithStickers
            goto L_0x00d1
        L_0x00d0:
            r10 = 1
        L_0x00d1:
            if (r10 == 0) goto L_0x010e
            org.telegram.messenger.MediaDataController r10 = r22.getMediaDataController()
            org.telegram.tgnet.TLRPC$Message r11 = r14.messageOwner
            org.telegram.tgnet.TLRPC$MessageMedia r12 = r11.media
            org.telegram.tgnet.TLRPC$Document r12 = r12.document
            int r11 = r11.date
            r10.addRecentGif(r12, r11)
            goto L_0x010e
        L_0x00e3:
            boolean r10 = r14.isAnimatedEmoji()
            if (r10 != 0) goto L_0x010e
            boolean r10 = r14.isSticker()
            if (r10 != 0) goto L_0x00f5
            boolean r10 = r14.isAnimatedSticker()
            if (r10 == 0) goto L_0x010e
        L_0x00f5:
            org.telegram.messenger.MediaDataController r15 = r22.getMediaDataController()
            r16 = 0
            org.telegram.tgnet.TLRPC$Message r10 = r14.messageOwner
            org.telegram.tgnet.TLRPC$MessageMedia r11 = r10.media
            org.telegram.tgnet.TLRPC$Document r11 = r11.document
            int r10 = r10.date
            r20 = 0
            r17 = r14
            r18 = r11
            r19 = r10
            r15.addRecentSticker(r16, r17, r18, r19, r20)
        L_0x010e:
            boolean r10 = r14.isOut()
            if (r10 == 0) goto L_0x011b
            boolean r10 = r14.isSent()
            if (r10 == 0) goto L_0x011b
            r6 = 1
        L_0x011b:
            int r2 = r2 + 1
            r11 = r21
            goto L_0x001d
        L_0x0121:
            r21 = r11
            r10 = r3
            r11 = r4
            r12 = r6
            goto L_0x012c
        L_0x0127:
            r21 = r11
            r10 = 0
            r11 = 0
            r12 = 0
        L_0x012c:
            org.telegram.messenger.MediaDataController r1 = r22.getMediaDataController()
            r6 = 0
            r2 = r25
            r3 = r23
            r5 = r26
            r1.loadReplyMessagesForMessages(r2, r3, r5, r6)
            org.telegram.messenger.NotificationCenter r1 = r22.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.didReceiveNewMessages
            r3 = 3
            java.lang.Object[] r3 = new java.lang.Object[r3]
            java.lang.Long r4 = java.lang.Long.valueOf(r23)
            r5 = 0
            r3[r5] = r4
            r4 = 1
            r3[r4] = r9
            r4 = 2
            java.lang.Boolean r5 = java.lang.Boolean.valueOf(r26)
            r3[r4] = r5
            r1.postNotificationName(r2, r3)
            if (r10 == 0) goto L_0x03a4
            if (r26 == 0) goto L_0x015d
            goto L_0x03a4
        L_0x015d:
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r1 = r0.dialogs_dict
            java.lang.Object r1 = r1.get(r7)
            org.telegram.tgnet.TLRPC$TL_dialog r1 = (org.telegram.tgnet.TLRPC$TL_dialog) r1
            org.telegram.tgnet.TLRPC$Message r2 = r10.messageOwner
            org.telegram.tgnet.TLRPC$MessageAction r2 = r2.action
            boolean r2 = r2 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatMigrateTo
            r3 = 0
            if (r2 == 0) goto L_0x0257
            if (r1 == 0) goto L_0x0236
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r0.allDialogs
            r2.remove(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r0.dialogsServerOnly
            r2.remove(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r0.dialogsCanAddUsers
            r2.remove(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r0.dialogsChannelsOnly
            r2.remove(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r0.dialogsGroupsOnly
            r2.remove(r1)
            r2 = 0
        L_0x018b:
            org.telegram.messenger.MessagesController$DialogFilter[] r5 = r0.selectedDialogFilter
            int r6 = r5.length
            if (r2 >= r6) goto L_0x019e
            r6 = r5[r2]
            if (r6 == 0) goto L_0x019b
            r5 = r5[r2]
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r5 = r5.dialogs
            r5.remove(r1)
        L_0x019b:
            int r2 = r2 + 1
            goto L_0x018b
        L_0x019e:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r0.dialogsUsersOnly
            r2.remove(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r0.dialogsForBlock
            r2.remove(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r0.dialogsForward
            r2.remove(r1)
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r2 = r0.dialogs_dict
            long r5 = r1.id
            r2.remove(r5)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r2 = r0.dialogs_read_inbox_max
            long r5 = r1.id
            java.lang.Long r5 = java.lang.Long.valueOf(r5)
            r2.remove(r5)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r2 = r0.dialogs_read_outbox_max
            long r5 = r1.id
            java.lang.Long r5 = java.lang.Long.valueOf(r5)
            r2.remove(r5)
            android.util.SparseIntArray r2 = r0.nextDialogsCacheOffset
            int r5 = r1.folder_id
            r6 = 0
            int r2 = r2.get(r5, r6)
            if (r2 <= 0) goto L_0x01de
            android.util.SparseIntArray r5 = r0.nextDialogsCacheOffset
            int r6 = r1.folder_id
            r9 = 1
            int r2 = r2 - r9
            r5.put(r6, r2)
        L_0x01de:
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r2 = r0.dialogMessage
            long r5 = r1.id
            r2.remove(r5)
            android.util.SparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog>> r2 = r0.dialogsByFolder
            int r5 = r1.folder_id
            java.lang.Object r2 = r2.get(r5)
            java.util.ArrayList r2 = (java.util.ArrayList) r2
            if (r2 == 0) goto L_0x01f4
            r2.remove(r1)
        L_0x01f4:
            android.util.SparseArray<org.telegram.messenger.MessageObject> r2 = r0.dialogMessagesByIds
            int r5 = r1.top_message
            java.lang.Object r2 = r2.get(r5)
            org.telegram.messenger.MessageObject r2 = (org.telegram.messenger.MessageObject) r2
            if (r2 == 0) goto L_0x020f
            org.telegram.tgnet.TLRPC$Message r5 = r2.messageOwner
            org.telegram.tgnet.TLRPC$Peer r5 = r5.peer_id
            int r5 = r5.channel_id
            if (r5 != 0) goto L_0x020f
            android.util.SparseArray<org.telegram.messenger.MessageObject> r5 = r0.dialogMessagesByIds
            int r6 = r1.top_message
            r5.remove(r6)
        L_0x020f:
            if (r2 == 0) goto L_0x021e
            org.telegram.tgnet.TLRPC$Message r2 = r2.messageOwner
            long r5 = r2.random_id
            int r2 = (r5 > r3 ? 1 : (r5 == r3 ? 0 : -1))
            if (r2 == 0) goto L_0x021e
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r2 = r0.dialogMessagesByRandomIds
            r2.remove(r5)
        L_0x021e:
            r2 = 0
            r1.top_message = r2
            org.telegram.messenger.NotificationsController r3 = r22.getNotificationsController()
            long r4 = r1.id
            r3.removeNotificationsForDialog(r4)
            org.telegram.messenger.NotificationCenter r1 = r22.getNotificationCenter()
            int r3 = org.telegram.messenger.NotificationCenter.needReloadRecentDialogsSearch
            java.lang.Object[] r4 = new java.lang.Object[r2]
            r1.postNotificationName(r3, r4)
            goto L_0x0237
        L_0x0236:
            r2 = 0
        L_0x0237:
            if (r21 >= 0) goto L_0x0255
            r1 = r21
            int r1 = -r1
            org.telegram.messenger.ChatObject$Call r1 = r0.getGroupCall(r1, r2)
            if (r1 == 0) goto L_0x0255
            org.telegram.tgnet.TLRPC$Message r2 = r10.messageOwner
            org.telegram.tgnet.TLRPC$MessageAction r2 = r2.action
            int r2 = r2.channel_id
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)
            org.telegram.tgnet.TLRPC$Chat r2 = r0.getChat(r2)
            if (r2 == 0) goto L_0x0255
            r1.migrateToChat(r2)
        L_0x0255:
            r1 = 0
            return r1
        L_0x0257:
            r9 = 1
            if (r1 != 0) goto L_0x02ff
            java.lang.Integer r1 = java.lang.Integer.valueOf(r11)
            org.telegram.tgnet.TLRPC$Chat r1 = r0.getChat(r1)
            if (r11 == 0) goto L_0x0269
            if (r1 == 0) goto L_0x0267
            goto L_0x0269
        L_0x0267:
            r1 = 0
            goto L_0x0276
        L_0x0269:
            if (r1 == 0) goto L_0x0277
            boolean r2 = org.telegram.messenger.ChatObject.isNotInChat(r1)
            if (r2 != 0) goto L_0x0267
            boolean r2 = r1.min
            if (r2 == 0) goto L_0x0277
            goto L_0x0267
        L_0x0276:
            return r1
        L_0x0277:
            boolean r2 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r2 == 0) goto L_0x02ab
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            java.lang.String r5 = "not found dialog with id "
            r2.append(r5)
            r2.append(r7)
            java.lang.String r5 = " dictCount = "
            r2.append(r5)
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r5 = r0.dialogs_dict
            int r5 = r5.size()
            r2.append(r5)
            java.lang.String r5 = " allCount = "
            r2.append(r5)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r5 = r0.allDialogs
            int r5 = r5.size()
            r2.append(r5)
            java.lang.String r2 = r2.toString()
            org.telegram.messenger.FileLog.d(r2)
        L_0x02ab:
            org.telegram.tgnet.TLRPC$TL_dialog r2 = new org.telegram.tgnet.TLRPC$TL_dialog
            r2.<init>()
            r2.id = r7
            int r5 = r10.getId()
            r2.top_message = r5
            org.telegram.tgnet.TLRPC$Message r5 = r10.messageOwner
            int r5 = r5.date
            r2.last_message_date = r5
            boolean r1 = org.telegram.messenger.ChatObject.isChannel(r1)
            r2.flags = r1
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r1 = r0.dialogs_dict
            r1.put(r7, r2)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r0.allDialogs
            r1.add(r2)
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessage
            r1.put(r7, r10)
            org.telegram.tgnet.TLRPC$Message r1 = r10.messageOwner
            org.telegram.tgnet.TLRPC$Peer r1 = r1.peer_id
            int r1 = r1.channel_id
            if (r1 != 0) goto L_0x02f1
            android.util.SparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessagesByIds
            int r5 = r10.getId()
            r1.put(r5, r10)
            org.telegram.tgnet.TLRPC$Message r1 = r10.messageOwner
            long r5 = r1.random_id
            int r1 = (r5 > r3 ? 1 : (r5 == r3 ? 0 : -1))
            if (r1 == 0) goto L_0x02f1
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessagesByRandomIds
            r1.put(r5, r10)
        L_0x02f1:
            org.telegram.messenger.MessagesStorage r1 = r22.getMessagesStorage()
            org.telegram.messenger.-$$Lambda$MessagesController$1PkDlQfFd6oT8hg9_YZNWBxZaqY r3 = new org.telegram.messenger.-$$Lambda$MessagesController$1PkDlQfFd6oT8hg9_YZNWBxZaqY
            r3.<init>(r2, r7)
            r1.getDialogFolderId(r7, r3)
            goto L_0x0393
        L_0x02ff:
            int r2 = r1.top_message
            if (r2 <= 0) goto L_0x0311
            int r2 = r10.getId()
            if (r2 <= 0) goto L_0x0311
            int r2 = r10.getId()
            int r5 = r1.top_message
            if (r2 > r5) goto L_0x033a
        L_0x0311:
            int r2 = r1.top_message
            if (r2 >= 0) goto L_0x0323
            int r2 = r10.getId()
            if (r2 >= 0) goto L_0x0323
            int r2 = r10.getId()
            int r5 = r1.top_message
            if (r2 < r5) goto L_0x033a
        L_0x0323:
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r2 = r0.dialogMessage
            int r2 = r2.indexOfKey(r7)
            if (r2 < 0) goto L_0x033a
            int r2 = r1.top_message
            if (r2 < 0) goto L_0x033a
            int r2 = r1.last_message_date
            org.telegram.tgnet.TLRPC$Message r5 = r10.messageOwner
            int r5 = r5.date
            if (r2 > r5) goto L_0x0338
            goto L_0x033a
        L_0x0338:
            r10 = 0
            goto L_0x0394
        L_0x033a:
            android.util.SparseArray<org.telegram.messenger.MessageObject> r2 = r0.dialogMessagesByIds
            int r5 = r1.top_message
            java.lang.Object r2 = r2.get(r5)
            org.telegram.messenger.MessageObject r2 = (org.telegram.messenger.MessageObject) r2
            if (r2 == 0) goto L_0x0355
            org.telegram.tgnet.TLRPC$Message r5 = r2.messageOwner
            org.telegram.tgnet.TLRPC$Peer r5 = r5.peer_id
            int r5 = r5.channel_id
            if (r5 != 0) goto L_0x0355
            android.util.SparseArray<org.telegram.messenger.MessageObject> r5 = r0.dialogMessagesByIds
            int r6 = r1.top_message
            r5.remove(r6)
        L_0x0355:
            if (r2 == 0) goto L_0x0364
            org.telegram.tgnet.TLRPC$Message r2 = r2.messageOwner
            long r5 = r2.random_id
            int r2 = (r5 > r3 ? 1 : (r5 == r3 ? 0 : -1))
            if (r2 == 0) goto L_0x0364
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r2 = r0.dialogMessagesByRandomIds
            r2.remove(r5)
        L_0x0364:
            int r2 = r10.getId()
            r1.top_message = r2
            org.telegram.tgnet.TLRPC$Message r2 = r10.messageOwner
            int r2 = r2.date
            r1.last_message_date = r2
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessage
            r1.put(r7, r10)
            org.telegram.tgnet.TLRPC$Message r1 = r10.messageOwner
            org.telegram.tgnet.TLRPC$Peer r1 = r1.peer_id
            int r1 = r1.channel_id
            if (r1 != 0) goto L_0x0393
            android.util.SparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessagesByIds
            int r2 = r10.getId()
            r1.put(r2, r10)
            org.telegram.tgnet.TLRPC$Message r1 = r10.messageOwner
            long r1 = r1.random_id
            int r5 = (r1 > r3 ? 1 : (r1 == r3 ? 0 : -1))
            if (r5 == 0) goto L_0x0393
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r3 = r0.dialogMessagesByRandomIds
            r3.put(r1, r10)
        L_0x0393:
            r10 = 1
        L_0x0394:
            if (r10 == 0) goto L_0x039a
            r1 = 0
            r0.sortDialogs(r1)
        L_0x039a:
            if (r12 == 0) goto L_0x03a3
            org.telegram.messenger.MediaDataController r1 = r22.getMediaDataController()
            r1.increasePeerRaiting(r7)
        L_0x03a3:
            return r10
        L_0x03a4:
            r1 = 0
            return r1
        L_0x03a6:
            r1 = 0
            return r1
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.updateInterfaceWithMessages(long, java.util.ArrayList, boolean):boolean");
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$updateInterfaceWithMessages$298 */
    public /* synthetic */ void lambda$updateInterfaceWithMessages$298$MessagesController(TLRPC$Dialog tLRPC$Dialog, long j, int i) {
        if (i == -1) {
            int i2 = (int) j;
            if (i2 != 0) {
                loadUnknownDialog(getInputPeer(i2), 0);
            }
        } else if (i != 0) {
            tLRPC$Dialog.folder_id = i;
            sortDialogs((SparseArray<TLRPC$Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
        }
    }

    public void addDialogAction(long j, boolean z) {
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
        if (tLRPC$Dialog != null) {
            if (z) {
                this.clearingHistoryDialogs.put(j, tLRPC$Dialog);
            } else {
                this.deletingDialogs.put(j, tLRPC$Dialog);
                this.allDialogs.remove(tLRPC$Dialog);
                sortDialogs((SparseArray<TLRPC$Chat>) null);
            }
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
        }
    }

    public void removeDialogAction(long j, boolean z, boolean z2) {
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
        if (tLRPC$Dialog != null) {
            if (z) {
                this.clearingHistoryDialogs.remove(j);
            } else {
                this.deletingDialogs.remove(j);
                if (!z2) {
                    this.allDialogs.add(tLRPC$Dialog);
                    sortDialogs((SparseArray<TLRPC$Chat>) null);
                }
            }
            if (!z2) {
                getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
            }
        }
    }

    public boolean isClearingDialog(long j) {
        return this.clearingHistoryDialogs.get(j) != null;
    }

    /* JADX WARNING: Removed duplicated region for block: B:98:0x01a8  */
    /* JADX WARNING: Removed duplicated region for block: B:99:0x01af  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void sortDialogs(android.util.SparseArray<org.telegram.tgnet.TLRPC$Chat> r14) {
        /*
            r13 = this;
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r0 = r13.dialogsServerOnly
            r0.clear()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r0 = r13.dialogsCanAddUsers
            r0.clear()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r0 = r13.dialogsChannelsOnly
            r0.clear()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r0 = r13.dialogsGroupsOnly
            r0.clear()
            r0 = 0
            r1 = 0
        L_0x0016:
            org.telegram.messenger.MessagesController$DialogFilter[] r2 = r13.selectedDialogFilter
            int r3 = r2.length
            if (r1 >= r3) goto L_0x0029
            r3 = r2[r1]
            if (r3 == 0) goto L_0x0026
            r2 = r2[r1]
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r2.dialogs
            r2.clear()
        L_0x0026:
            int r1 = r1 + 1
            goto L_0x0016
        L_0x0029:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r13.dialogsUsersOnly
            r1.clear()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r13.dialogsForBlock
            r1.clear()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r13.dialogsForward
            r1.clear()
            r1 = 0
        L_0x0039:
            android.util.SparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog>> r2 = r13.dialogsByFolder
            int r2 = r2.size()
            if (r1 >= r2) goto L_0x0051
            android.util.SparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog>> r2 = r13.dialogsByFolder
            java.lang.Object r2 = r2.valueAt(r1)
            java.util.ArrayList r2 = (java.util.ArrayList) r2
            if (r2 == 0) goto L_0x004e
            r2.clear()
        L_0x004e:
            int r1 = r1 + 1
            goto L_0x0039
        L_0x0051:
            r13.unreadUnmutedDialogs = r0
            org.telegram.messenger.UserConfig r1 = r13.getUserConfig()
            int r1 = r1.getClientUserId()
            org.telegram.messenger.MessagesController$DialogFilter[] r2 = r13.selectedDialogFilter
            r3 = r2[r0]
            r4 = 32
            r5 = 1
            if (r3 != 0) goto L_0x0068
            r2 = r2[r5]
            if (r2 == 0) goto L_0x00c0
        L_0x0068:
            r2 = 0
        L_0x0069:
            org.telegram.messenger.MessagesController$DialogFilter[] r3 = r13.selectedDialogFilter
            int r6 = r3.length
            if (r2 >= r6) goto L_0x00c0
            r3 = r3[r2]
            r13.sortingDialogFilter = r3
            if (r3 != 0) goto L_0x0075
            goto L_0x00bd
        L_0x0075:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r3 = r13.allDialogs
            java.util.Comparator<org.telegram.tgnet.TLRPC$Dialog> r6 = r13.dialogDateComparator
            java.util.Collections.sort(r3, r6)
            org.telegram.messenger.MessagesController$DialogFilter r3 = r13.sortingDialogFilter
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r3 = r3.dialogs
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r6 = r13.allDialogs
            int r6 = r6.size()
            r7 = 0
        L_0x0087:
            if (r7 >= r6) goto L_0x00bd
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r8 = r13.allDialogs
            java.lang.Object r8 = r8.get(r7)
            org.telegram.tgnet.TLRPC$Dialog r8 = (org.telegram.tgnet.TLRPC$Dialog) r8
            boolean r9 = r8 instanceof org.telegram.tgnet.TLRPC$TL_dialog
            if (r9 == 0) goto L_0x00ba
            long r9 = r8.id
            long r11 = r9 >> r4
            int r12 = (int) r11
            int r10 = (int) r9
            if (r10 != 0) goto L_0x00ab
            if (r12 == 0) goto L_0x00ab
            java.lang.Integer r9 = java.lang.Integer.valueOf(r12)
            org.telegram.tgnet.TLRPC$EncryptedChat r9 = r13.getEncryptedChat(r9)
            if (r9 == 0) goto L_0x00ab
            int r10 = r9.user_id
        L_0x00ab:
            org.telegram.messenger.MessagesController$DialogFilter r9 = r13.sortingDialogFilter
            org.telegram.messenger.AccountInstance r11 = r13.getAccountInstance()
            boolean r9 = r9.includesDialog(r11, r10, r8)
            if (r9 == 0) goto L_0x00ba
            r3.add(r8)
        L_0x00ba:
            int r7 = r7 + 1
            goto L_0x0087
        L_0x00bd:
            int r2 = r2 + 1
            goto L_0x0069
        L_0x00c0:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r13.allDialogs
            java.util.Comparator<org.telegram.tgnet.TLRPC$Dialog> r3 = r13.dialogComparator
            java.util.Collections.sort(r2, r3)
            r13.isLeftPromoChannel = r5
            org.telegram.tgnet.TLRPC$Dialog r2 = r13.promoDialog
            if (r2 == 0) goto L_0x00e7
            long r2 = r2.id
            r6 = 0
            int r8 = (r2 > r6 ? 1 : (r2 == r6 ? 0 : -1))
            if (r8 >= 0) goto L_0x00e7
            int r3 = (int) r2
            int r2 = -r3
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)
            org.telegram.tgnet.TLRPC$Chat r2 = r13.getChat(r2)
            if (r2 == 0) goto L_0x00e7
            boolean r2 = r2.left
            if (r2 != 0) goto L_0x00e7
            r13.isLeftPromoChannel = r0
        L_0x00e7:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r13.allDialogs
            int r2 = r2.size()
            r3 = 0
            r6 = 0
        L_0x00ef:
            if (r3 >= r2) goto L_0x01ea
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r7 = r13.allDialogs
            java.lang.Object r7 = r7.get(r3)
            org.telegram.tgnet.TLRPC$Dialog r7 = (org.telegram.tgnet.TLRPC$Dialog) r7
            long r8 = r7.id
            long r10 = r8 >> r4
            int r11 = (int) r10
            int r10 = (int) r8
            boolean r12 = r7 instanceof org.telegram.tgnet.TLRPC$TL_dialog
            if (r12 == 0) goto L_0x01b4
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r12 = r13.dialogMessage
            java.lang.Object r8 = r12.get(r8)
            org.telegram.messenger.MessageObject r8 = (org.telegram.messenger.MessageObject) r8
            if (r8 == 0) goto L_0x0117
            org.telegram.tgnet.TLRPC$Message r8 = r8.messageOwner
            int r8 = r8.date
            int r9 = r13.dialogsLoadedTillDate
            if (r8 >= r9) goto L_0x0117
            goto L_0x01e7
        L_0x0117:
            if (r10 == 0) goto L_0x019f
            if (r11 == r5) goto L_0x019f
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r8 = r13.dialogsServerOnly
            r8.add(r7)
            boolean r8 = org.telegram.messenger.DialogObject.isChannel(r7)
            if (r8 == 0) goto L_0x016a
            int r8 = -r10
            java.lang.Integer r8 = java.lang.Integer.valueOf(r8)
            org.telegram.tgnet.TLRPC$Chat r8 = r13.getChat(r8)
            if (r8 == 0) goto L_0x014a
            boolean r9 = r8.megagroup
            if (r9 == 0) goto L_0x014a
            org.telegram.tgnet.TLRPC$TL_chatAdminRights r9 = r8.admin_rights
            if (r9 == 0) goto L_0x0141
            boolean r11 = r9.post_messages
            if (r11 != 0) goto L_0x0145
            boolean r9 = r9.add_admins
            if (r9 != 0) goto L_0x0145
        L_0x0141:
            boolean r9 = r8.creator
            if (r9 == 0) goto L_0x014a
        L_0x0145:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r9 = r13.dialogsCanAddUsers
            r9.add(r7)
        L_0x014a:
            if (r8 == 0) goto L_0x0156
            boolean r9 = r8.megagroup
            if (r9 == 0) goto L_0x0156
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r8 = r13.dialogsGroupsOnly
            r8.add(r7)
            goto L_0x019f
        L_0x0156:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r9 = r13.dialogsChannelsOnly
            r9.add(r7)
            boolean r9 = org.telegram.messenger.ChatObject.hasAdminRights(r8)
            if (r9 == 0) goto L_0x0168
            boolean r8 = org.telegram.messenger.ChatObject.canPost(r8)
            if (r8 == 0) goto L_0x0168
            goto L_0x019f
        L_0x0168:
            r8 = 0
            goto L_0x01a0
        L_0x016a:
            if (r10 >= 0) goto L_0x018c
            if (r14 == 0) goto L_0x0181
            int r8 = -r10
            java.lang.Object r8 = r14.get(r8)
            org.telegram.tgnet.TLRPC$Chat r8 = (org.telegram.tgnet.TLRPC$Chat) r8
            if (r8 == 0) goto L_0x0181
            org.telegram.tgnet.TLRPC$InputChannel r8 = r8.migrated_to
            if (r8 == 0) goto L_0x0181
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r7 = r13.allDialogs
            r7.remove(r3)
            goto L_0x01de
        L_0x0181:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r8 = r13.dialogsCanAddUsers
            r8.add(r7)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r8 = r13.dialogsGroupsOnly
            r8.add(r7)
            goto L_0x019f
        L_0x018c:
            if (r10 == r1) goto L_0x019f
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r8 = r13.dialogsUsersOnly
            r8.add(r7)
            long r8 = (long) r10
            boolean r8 = org.telegram.messenger.UserObject.isReplyUser((long) r8)
            if (r8 != 0) goto L_0x019f
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r8 = r13.dialogsForBlock
            r8.add(r7)
        L_0x019f:
            r8 = 1
        L_0x01a0:
            if (r8 == 0) goto L_0x01b4
            int r8 = r7.folder_id
            if (r8 != 0) goto L_0x01b4
            if (r10 != r1) goto L_0x01af
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r6 = r13.dialogsForward
            r6.add(r0, r7)
            r6 = 1
            goto L_0x01b4
        L_0x01af:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r8 = r13.dialogsForward
            r8.add(r7)
        L_0x01b4:
            int r8 = r7.unread_count
            if (r8 != 0) goto L_0x01bc
            boolean r8 = r7.unread_mark
            if (r8 == 0) goto L_0x01c9
        L_0x01bc:
            long r8 = r7.id
            boolean r8 = r13.isDialogMuted(r8)
            if (r8 != 0) goto L_0x01c9
            int r8 = r13.unreadUnmutedDialogs
            int r8 = r8 + r5
            r13.unreadUnmutedDialogs = r8
        L_0x01c9:
            org.telegram.tgnet.TLRPC$Dialog r8 = r13.promoDialog
            if (r8 == 0) goto L_0x01e3
            long r9 = r7.id
            long r11 = r8.id
            int r8 = (r9 > r11 ? 1 : (r9 == r11 ? 0 : -1))
            if (r8 != 0) goto L_0x01e3
            boolean r8 = r13.isLeftPromoChannel
            if (r8 == 0) goto L_0x01e3
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r7 = r13.allDialogs
            r7.remove(r3)
        L_0x01de:
            int r3 = r3 + -1
            int r2 = r2 + -1
            goto L_0x01e7
        L_0x01e3:
            r8 = -1
            r13.addDialogToItsFolder(r8, r7)
        L_0x01e7:
            int r3 = r3 + r5
            goto L_0x00ef
        L_0x01ea:
            org.telegram.tgnet.TLRPC$Dialog r14 = r13.promoDialog
            if (r14 == 0) goto L_0x01fd
            boolean r1 = r13.isLeftPromoChannel
            if (r1 == 0) goto L_0x01fd
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r13.allDialogs
            r1.add(r0, r14)
            r14 = -2
            org.telegram.tgnet.TLRPC$Dialog r1 = r13.promoDialog
            r13.addDialogToItsFolder(r14, r1)
        L_0x01fd:
            if (r6 != 0) goto L_0x022a
            org.telegram.messenger.UserConfig r14 = r13.getUserConfig()
            org.telegram.tgnet.TLRPC$User r14 = r14.getCurrentUser()
            if (r14 == 0) goto L_0x022a
            org.telegram.tgnet.TLRPC$TL_dialog r1 = new org.telegram.tgnet.TLRPC$TL_dialog
            r1.<init>()
            int r2 = r14.id
            long r2 = (long) r2
            r1.id = r2
            org.telegram.tgnet.TLRPC$TL_peerNotifySettings r2 = new org.telegram.tgnet.TLRPC$TL_peerNotifySettings
            r2.<init>()
            r1.notify_settings = r2
            org.telegram.tgnet.TLRPC$TL_peerUser r2 = new org.telegram.tgnet.TLRPC$TL_peerUser
            r2.<init>()
            r1.peer = r2
            int r14 = r14.id
            r2.user_id = r14
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r14 = r13.dialogsForward
            r14.add(r0, r1)
        L_0x022a:
            android.util.SparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog>> r14 = r13.dialogsByFolder
            int r14 = r14.size()
            if (r0 >= r14) goto L_0x024e
            android.util.SparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog>> r14 = r13.dialogsByFolder
            int r14 = r14.keyAt(r0)
            android.util.SparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog>> r1 = r13.dialogsByFolder
            java.lang.Object r1 = r1.valueAt(r0)
            java.util.ArrayList r1 = (java.util.ArrayList) r1
            boolean r1 = r1.isEmpty()
            if (r1 == 0) goto L_0x024b
            android.util.SparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog>> r1 = r13.dialogsByFolder
            r1.remove(r14)
        L_0x024b:
            int r0 = r0 + 1
            goto L_0x022a
        L_0x024e:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.sortDialogs(android.util.SparseArray):void");
    }

    private void addDialogToItsFolder(int i, TLRPC$Dialog tLRPC$Dialog) {
        int i2;
        if (tLRPC$Dialog instanceof TLRPC$TL_dialogFolder) {
            i2 = 0;
        } else {
            i2 = tLRPC$Dialog.folder_id;
        }
        ArrayList arrayList = this.dialogsByFolder.get(i2);
        if (arrayList == null) {
            arrayList = new ArrayList();
            this.dialogsByFolder.put(i2, arrayList);
        }
        if (i == -1) {
            arrayList.add(tLRPC$Dialog);
        } else if (i != -2) {
            arrayList.add(i, tLRPC$Dialog);
        } else if (arrayList.isEmpty() || !(arrayList.get(0) instanceof TLRPC$TL_dialogFolder)) {
            arrayList.add(0, tLRPC$Dialog);
        } else {
            arrayList.add(1, tLRPC$Dialog);
        }
    }

    public static String getRestrictionReason(ArrayList<TLRPC$TL_restrictionReason> arrayList) {
        if (arrayList.isEmpty()) {
            return null;
        }
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            TLRPC$TL_restrictionReason tLRPC$TL_restrictionReason = arrayList.get(i);
            if ("all".equals(tLRPC$TL_restrictionReason.platform) || "android".equals(tLRPC$TL_restrictionReason.platform)) {
                return tLRPC$TL_restrictionReason.text;
            }
        }
        return null;
    }

    private static void showCantOpenAlert(BaseFragment baseFragment, String str) {
        if (baseFragment != null && baseFragment.getParentActivity() != null) {
            AlertDialog.Builder builder = new AlertDialog.Builder((Context) baseFragment.getParentActivity());
            builder.setTitle(LocaleController.getString("AppName", NUM));
            builder.setPositiveButton(LocaleController.getString("OK", NUM), (DialogInterface.OnClickListener) null);
            builder.setMessage(str);
            baseFragment.showDialog(builder.create());
        }
    }

    public boolean checkCanOpenChat(Bundle bundle, BaseFragment baseFragment) {
        return checkCanOpenChat(bundle, baseFragment, (MessageObject) null);
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v6, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getMessages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v8, resolved type: org.telegram.tgnet.TLRPC$TL_channels_getMessages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v13, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getMessages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v14, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getMessages} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean checkCanOpenChat(android.os.Bundle r10, org.telegram.ui.ActionBar.BaseFragment r11, org.telegram.messenger.MessageObject r12) {
        /*
            r9 = this;
            r0 = 1
            if (r10 == 0) goto L_0x00d3
            if (r11 != 0) goto L_0x0007
            goto L_0x00d3
        L_0x0007:
            java.lang.String r1 = "user_id"
            r2 = 0
            int r1 = r10.getInt(r1, r2)
            java.lang.String r3 = "chat_id"
            int r3 = r10.getInt(r3, r2)
            java.lang.String r4 = "message_id"
            int r4 = r10.getInt(r4, r2)
            r5 = 0
            if (r1 == 0) goto L_0x002a
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            org.telegram.tgnet.TLRPC$User r1 = r9.getUser(r1)
            r8 = r5
            r5 = r1
            r1 = r8
            goto L_0x0036
        L_0x002a:
            if (r3 == 0) goto L_0x0035
            java.lang.Integer r1 = java.lang.Integer.valueOf(r3)
            org.telegram.tgnet.TLRPC$Chat r1 = r9.getChat(r1)
            goto L_0x0036
        L_0x0035:
            r1 = r5
        L_0x0036:
            if (r5 != 0) goto L_0x003b
            if (r1 != 0) goto L_0x003b
            return r0
        L_0x003b:
            if (r1 == 0) goto L_0x0044
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_restrictionReason> r3 = r1.restriction_reason
            java.lang.String r3 = getRestrictionReason(r3)
            goto L_0x004a
        L_0x0044:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_restrictionReason> r3 = r5.restriction_reason
            java.lang.String r3 = getRestrictionReason(r3)
        L_0x004a:
            if (r3 == 0) goto L_0x0050
            showCantOpenAlert(r11, r3)
            return r2
        L_0x0050:
            if (r4 == 0) goto L_0x00d3
            if (r12 == 0) goto L_0x00d3
            if (r1 == 0) goto L_0x00d3
            long r3 = r1.access_hash
            r5 = 0
            int r7 = (r3 > r5 ? 1 : (r3 == r5 ? 0 : -1))
            if (r7 != 0) goto L_0x00d3
            long r3 = r12.getDialogId()
            int r4 = (int) r3
            if (r4 == 0) goto L_0x00d3
            org.telegram.ui.ActionBar.AlertDialog r0 = new org.telegram.ui.ActionBar.AlertDialog
            android.app.Activity r3 = r11.getParentActivity()
            r5 = 3
            r0.<init>(r3, r5)
            if (r4 >= 0) goto L_0x007a
            int r1 = -r4
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            org.telegram.tgnet.TLRPC$Chat r1 = r9.getChat(r1)
        L_0x007a:
            if (r4 > 0) goto L_0x00a5
            boolean r1 = org.telegram.messenger.ChatObject.isChannel(r1)
            if (r1 != 0) goto L_0x0083
            goto L_0x00a5
        L_0x0083:
            int r1 = -r4
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            org.telegram.tgnet.TLRPC$Chat r1 = r9.getChat(r1)
            org.telegram.tgnet.TLRPC$TL_channels_getMessages r3 = new org.telegram.tgnet.TLRPC$TL_channels_getMessages
            r3.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r1 = getInputChannel((org.telegram.tgnet.TLRPC$Chat) r1)
            r3.channel = r1
            java.util.ArrayList<java.lang.Integer> r1 = r3.id
            int r12 = r12.getId()
            java.lang.Integer r12 = java.lang.Integer.valueOf(r12)
            r1.add(r12)
            goto L_0x00b7
        L_0x00a5:
            org.telegram.tgnet.TLRPC$TL_messages_getMessages r3 = new org.telegram.tgnet.TLRPC$TL_messages_getMessages
            r3.<init>()
            java.util.ArrayList<java.lang.Integer> r1 = r3.id
            int r12 = r12.getId()
            java.lang.Integer r12 = java.lang.Integer.valueOf(r12)
            r1.add(r12)
        L_0x00b7:
            org.telegram.tgnet.ConnectionsManager r12 = r9.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$Vzlp8hP49Gircnp-Cf7_CDVaXcc r1 = new org.telegram.messenger.-$$Lambda$MessagesController$Vzlp8hP49Gircnp-Cf7_CDVaXcc
            r1.<init>(r0, r11, r10)
            int r10 = r12.sendRequest(r3, r1)
            org.telegram.messenger.-$$Lambda$MessagesController$T5cn_kJHNjOoM9UFx6epXcOnJPI r12 = new org.telegram.messenger.-$$Lambda$MessagesController$T5cn_kJHNjOoM9UFx6epXcOnJPI
            r12.<init>(r10, r11)
            r0.setOnCancelListener(r12)
            r11.setVisibleDialog(r0)
            r0.show()
            return r2
        L_0x00d3:
            return r0
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.checkCanOpenChat(android.os.Bundle, org.telegram.ui.ActionBar.BaseFragment, org.telegram.messenger.MessageObject):boolean");
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$checkCanOpenChat$300 */
    public /* synthetic */ void lambda$checkCanOpenChat$300$MessagesController(AlertDialog alertDialog, BaseFragment baseFragment, Bundle bundle, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            AndroidUtilities.runOnUIThread(new Runnable(alertDialog, tLObject, baseFragment, bundle) {
                public final /* synthetic */ AlertDialog f$1;
                public final /* synthetic */ TLObject f$2;
                public final /* synthetic */ BaseFragment f$3;
                public final /* synthetic */ Bundle f$4;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r5;
                }

                public final void run() {
                    MessagesController.this.lambda$null$299$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$299 */
    public /* synthetic */ void lambda$null$299$MessagesController(AlertDialog alertDialog, TLObject tLObject, BaseFragment baseFragment, Bundle bundle) {
        try {
            alertDialog.dismiss();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
        putUsers(tLRPC$messages_Messages.users, false);
        putChats(tLRPC$messages_Messages.chats, false);
        getMessagesStorage().putUsersAndChats(tLRPC$messages_Messages.users, tLRPC$messages_Messages.chats, true, true);
        baseFragment.presentFragment(new ChatActivity(bundle), true);
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$checkCanOpenChat$301 */
    public /* synthetic */ void lambda$checkCanOpenChat$301$MessagesController(int i, BaseFragment baseFragment, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
        baseFragment.setVisibleDialog((Dialog) null);
    }

    public static void openChatOrProfileWith(TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat, BaseFragment baseFragment, int i, boolean z) {
        String str;
        if ((tLRPC$User != null || tLRPC$Chat != null) && baseFragment != null) {
            if (tLRPC$Chat != null) {
                str = getRestrictionReason(tLRPC$Chat.restriction_reason);
            } else {
                str = getRestrictionReason(tLRPC$User.restriction_reason);
                if (i != 3 && tLRPC$User.bot) {
                    i = 1;
                    z = true;
                }
            }
            if (str != null) {
                showCantOpenAlert(baseFragment, str);
                return;
            }
            Bundle bundle = new Bundle();
            if (tLRPC$Chat != null) {
                bundle.putInt("chat_id", tLRPC$Chat.id);
            } else {
                bundle.putInt("user_id", tLRPC$User.id);
            }
            if (i == 0) {
                baseFragment.presentFragment(new ProfileActivity(bundle));
            } else if (i == 2) {
                baseFragment.presentFragment(new ChatActivity(bundle), true, true);
            } else {
                baseFragment.presentFragment(new ChatActivity(bundle), z);
            }
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:15:0x002b  */
    /* JADX WARNING: Removed duplicated region for block: B:16:0x002f  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void openByUserName(java.lang.String r6, org.telegram.ui.ActionBar.BaseFragment r7, int r8) {
        /*
            r5 = this;
            if (r6 == 0) goto L_0x0069
            if (r7 != 0) goto L_0x0006
            goto L_0x0069
        L_0x0006:
            org.telegram.tgnet.TLObject r0 = r5.getUserOrChat(r6)
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$User
            r2 = 0
            if (r1 == 0) goto L_0x0018
            org.telegram.tgnet.TLRPC$User r0 = (org.telegram.tgnet.TLRPC$User) r0
            boolean r1 = r0.min
            if (r1 == 0) goto L_0x0016
            goto L_0x0026
        L_0x0016:
            r1 = r2
            goto L_0x0028
        L_0x0018:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$Chat
            if (r1 == 0) goto L_0x0026
            org.telegram.tgnet.TLRPC$Chat r0 = (org.telegram.tgnet.TLRPC$Chat) r0
            boolean r1 = r0.min
            if (r1 == 0) goto L_0x0023
            goto L_0x0026
        L_0x0023:
            r1 = r0
            r0 = r2
            goto L_0x0028
        L_0x0026:
            r0 = r2
            r1 = r0
        L_0x0028:
            r3 = 0
            if (r0 == 0) goto L_0x002f
            openChatOrProfileWith(r0, r2, r7, r8, r3)
            goto L_0x0069
        L_0x002f:
            r0 = 1
            if (r1 == 0) goto L_0x0036
            openChatOrProfileWith(r2, r1, r7, r0, r3)
            goto L_0x0069
        L_0x0036:
            android.app.Activity r1 = r7.getParentActivity()
            if (r1 != 0) goto L_0x003d
            return
        L_0x003d:
            org.telegram.ui.ActionBar.AlertDialog[] r0 = new org.telegram.ui.ActionBar.AlertDialog[r0]
            org.telegram.ui.ActionBar.AlertDialog r1 = new org.telegram.ui.ActionBar.AlertDialog
            android.app.Activity r2 = r7.getParentActivity()
            r4 = 3
            r1.<init>(r2, r4)
            r0[r3] = r1
            org.telegram.tgnet.TLRPC$TL_contacts_resolveUsername r1 = new org.telegram.tgnet.TLRPC$TL_contacts_resolveUsername
            r1.<init>()
            r1.username = r6
            org.telegram.tgnet.ConnectionsManager r6 = r5.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$8nw_gNBzCCSNEtbIIlvTRJZnVzA r2 = new org.telegram.messenger.-$$Lambda$MessagesController$8nw_gNBzCCSNEtbIIlvTRJZnVzA
            r2.<init>(r0, r7, r8)
            int r6 = r6.sendRequest(r1, r2)
            org.telegram.messenger.-$$Lambda$MessagesController$5d6rx0hl10RR2ha_eoyfPPuaphI r8 = new org.telegram.messenger.-$$Lambda$MessagesController$5d6rx0hl10RR2ha_eoyfPPuaphI
            r8.<init>(r0, r6, r7)
            r6 = 500(0x1f4, double:2.47E-321)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r8, r6)
        L_0x0069:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.openByUserName(java.lang.String, org.telegram.ui.ActionBar.BaseFragment, int):void");
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$openByUserName$303 */
    public /* synthetic */ void lambda$openByUserName$303$MessagesController(AlertDialog[] alertDialogArr, BaseFragment baseFragment, int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable(alertDialogArr, baseFragment, tLRPC$TL_error, tLObject, i) {
            public final /* synthetic */ AlertDialog[] f$1;
            public final /* synthetic */ BaseFragment f$2;
            public final /* synthetic */ TLRPC$TL_error f$3;
            public final /* synthetic */ TLObject f$4;
            public final /* synthetic */ int f$5;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
            }

            public final void run() {
                MessagesController.this.lambda$null$302$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$302 */
    public /* synthetic */ void lambda$null$302$MessagesController(AlertDialog[] alertDialogArr, BaseFragment baseFragment, TLRPC$TL_error tLRPC$TL_error, TLObject tLObject, int i) {
        try {
            alertDialogArr[0].dismiss();
        } catch (Exception unused) {
        }
        alertDialogArr[0] = null;
        baseFragment.setVisibleDialog((Dialog) null);
        if (tLRPC$TL_error == null) {
            TLRPC$TL_contacts_resolvedPeer tLRPC$TL_contacts_resolvedPeer = (TLRPC$TL_contacts_resolvedPeer) tLObject;
            putUsers(tLRPC$TL_contacts_resolvedPeer.users, false);
            putChats(tLRPC$TL_contacts_resolvedPeer.chats, false);
            getMessagesStorage().putUsersAndChats(tLRPC$TL_contacts_resolvedPeer.users, tLRPC$TL_contacts_resolvedPeer.chats, false, true);
            if (!tLRPC$TL_contacts_resolvedPeer.chats.isEmpty()) {
                openChatOrProfileWith((TLRPC$User) null, tLRPC$TL_contacts_resolvedPeer.chats.get(0), baseFragment, 1, false);
            } else if (!tLRPC$TL_contacts_resolvedPeer.users.isEmpty()) {
                openChatOrProfileWith(tLRPC$TL_contacts_resolvedPeer.users.get(0), (TLRPC$Chat) null, baseFragment, i, false);
            }
        } else if (baseFragment.getParentActivity() != null) {
            try {
                Toast.makeText(baseFragment.getParentActivity(), LocaleController.getString("NoUsernameFound", NUM), 0).show();
            } catch (Exception e) {
                FileLog.e((Throwable) e);
            }
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$openByUserName$305 */
    public /* synthetic */ void lambda$openByUserName$305$MessagesController(AlertDialog[] alertDialogArr, int i, BaseFragment baseFragment) {
        if (alertDialogArr[0] != null) {
            alertDialogArr[0].setOnCancelListener(new DialogInterface.OnCancelListener(i) {
                public final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void onCancel(DialogInterface dialogInterface) {
                    MessagesController.this.lambda$null$304$MessagesController(this.f$1, dialogInterface);
                }
            });
            baseFragment.showDialog(alertDialogArr[0]);
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$304 */
    public /* synthetic */ void lambda$null$304$MessagesController(int i, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
    }

    public void ensureMessagesLoaded(long j, int i, MessagesLoadedCallback messagesLoadedCallback) {
        int i2;
        long j2 = j;
        SharedPreferences notificationsSettings = getNotificationsSettings(this.currentAccount);
        if (i == 0) {
            i2 = notificationsSettings.getInt("diditem" + j2, 0);
        } else {
            i2 = i;
        }
        int generateClassGuid = ConnectionsManager.generateClassGuid();
        int i3 = (int) j2;
        int i4 = i3 < 0 ? -i3 : 0;
        TLRPC$Chat tLRPC$Chat = null;
        if (i4 == 0 || (tLRPC$Chat = getMessagesController().getChat(Integer.valueOf(i4))) != null) {
            boolean isChannel = ChatObject.isChannel(tLRPC$Chat);
            int i5 = AndroidUtilities.isTablet() ? 30 : 20;
            final int i6 = generateClassGuid;
            final int i7 = i5;
            final int i8 = i2;
            final long j3 = j;
            final boolean z = isChannel;
            final MessagesLoadedCallback messagesLoadedCallback2 = messagesLoadedCallback;
            AnonymousClass1 r0 = new NotificationCenter.NotificationCenterDelegate() {
                public void didReceivedNotification(int i, int i2, Object... objArr) {
                    int i3 = i;
                    int i4 = NotificationCenter.messagesDidLoadWithoutProcess;
                    if (i3 == i4 && objArr[0].intValue() == i6) {
                        int intValue = objArr[1].intValue();
                        boolean booleanValue = objArr[2].booleanValue();
                        boolean booleanValue2 = objArr[3].booleanValue();
                        int intValue2 = objArr[4].intValue();
                        int i5 = i7;
                        if (intValue >= i5 / 2 || booleanValue2 || !booleanValue) {
                            MessagesController.this.getNotificationCenter().removeObserver(this, i4);
                            MessagesController.this.getNotificationCenter().removeObserver(this, NotificationCenter.loadingMessagesFailed);
                            MessagesLoadedCallback messagesLoadedCallback = messagesLoadedCallback2;
                            if (messagesLoadedCallback != null) {
                                messagesLoadedCallback.onMessagesLoaded(booleanValue);
                                return;
                            }
                            return;
                        }
                        int i6 = i8;
                        if (i6 != 0) {
                            MessagesController.this.loadMessagesInternal(j3, 0, false, i5, i6, 0, false, 0, i6, 3, intValue2, z, 0, 0, 0, 0, 0, 0, false, 0, true, false);
                        } else {
                            MessagesController.this.loadMessagesInternal(j3, 0, false, i5, i6, 0, false, 0, i6, 2, intValue2, z, 0, 0, 0, 0, 0, 0, false, 0, true, false);
                        }
                    } else {
                        int i7 = NotificationCenter.loadingMessagesFailed;
                        if (i3 == i7 && objArr[0].intValue() == i6) {
                            MessagesController.this.getNotificationCenter().removeObserver(this, i4);
                            MessagesController.this.getNotificationCenter().removeObserver(this, i7);
                            MessagesLoadedCallback messagesLoadedCallback2 = messagesLoadedCallback2;
                            if (messagesLoadedCallback2 != null) {
                                messagesLoadedCallback2.onError();
                            }
                        }
                    }
                }
            };
            getNotificationCenter().addObserver(r0, NotificationCenter.messagesDidLoadWithoutProcess);
            getNotificationCenter().addObserver(r0, NotificationCenter.loadingMessagesFailed);
            if (i2 != 0) {
                loadMessagesInternal(j, 0, true, i5, i2, 0, true, 0, generateClassGuid, 3, 0, isChannel, 0, 0, 0, 0, 0, 0, false, 0, true, false);
            } else {
                loadMessagesInternal(j, 0, true, i5, i2, 0, true, 0, generateClassGuid, 2, 0, isChannel, 0, 0, 0, 0, 0, 0, false, 0, true, false);
            }
        } else {
            MessagesStorage messagesStorage = getMessagesStorage();
            messagesStorage.getStorageQueue().postRunnable(new Runnable(messagesStorage, i4, j, i2, messagesLoadedCallback) {
                public final /* synthetic */ MessagesStorage f$1;
                public final /* synthetic */ int f$2;
                public final /* synthetic */ long f$3;
                public final /* synthetic */ int f$4;
                public final /* synthetic */ MessagesController.MessagesLoadedCallback f$5;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r6;
                    this.f$5 = r7;
                }

                public final void run() {
                    MessagesController.this.lambda$ensureMessagesLoaded$307$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5);
                }
            });
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$ensureMessagesLoaded$307 */
    public /* synthetic */ void lambda$ensureMessagesLoaded$307$MessagesController(MessagesStorage messagesStorage, int i, long j, int i2, MessagesLoadedCallback messagesLoadedCallback) {
        AndroidUtilities.runOnUIThread(new Runnable(messagesStorage.getChat(i), j, i2, messagesLoadedCallback) {
            public final /* synthetic */ TLRPC$Chat f$1;
            public final /* synthetic */ long f$2;
            public final /* synthetic */ int f$3;
            public final /* synthetic */ MessagesController.MessagesLoadedCallback f$4;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r5;
                this.f$4 = r6;
            }

            public final void run() {
                MessagesController.this.lambda$null$306$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: lambda$null$306 */
    public /* synthetic */ void lambda$null$306$MessagesController(TLRPC$Chat tLRPC$Chat, long j, int i, MessagesLoadedCallback messagesLoadedCallback) {
        if (tLRPC$Chat != null) {
            getMessagesController().putChat(tLRPC$Chat, true);
            ensureMessagesLoaded(j, i, messagesLoadedCallback);
        } else if (messagesLoadedCallback != null) {
            messagesLoadedCallback.onError();
        }
    }
}
