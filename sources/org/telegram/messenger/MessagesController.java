package org.telegram.messenger;

import android.app.Activity;
import android.app.Dialog;
import android.appwidget.AppWidgetManager;
import android.content.Context;
import android.content.DialogInterface;
import android.content.SharedPreferences;
import android.location.Location;
import android.os.Bundle;
import android.os.Looper;
import android.os.SystemClock;
import android.text.TextUtils;
import android.util.Base64;
import android.util.SparseArray;
import android.util.SparseBooleanArray;
import android.util.SparseIntArray;
import androidx.collection.LongSparseArray;
import j$.util.concurrent.ConcurrentHashMap;
import java.io.File;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CountDownLatch;
import org.telegram.messenger.ChatObject;
import org.telegram.messenger.MessagesStorage;
import org.telegram.messenger.NotificationCenter;
import org.telegram.messenger.support.LongSparseIntArray;
import org.telegram.messenger.support.LongSparseLongArray;
import org.telegram.tgnet.ConnectionsManager;
import org.telegram.tgnet.NativeByteBuffer;
import org.telegram.tgnet.RequestDelegate;
import org.telegram.tgnet.SerializedData;
import org.telegram.tgnet.TLObject;
import org.telegram.tgnet.TLRPC$ChannelParticipant;
import org.telegram.tgnet.TLRPC$Chat;
import org.telegram.tgnet.TLRPC$ChatFull;
import org.telegram.tgnet.TLRPC$Dialog;
import org.telegram.tgnet.TLRPC$DialogPeer;
import org.telegram.tgnet.TLRPC$Document;
import org.telegram.tgnet.TLRPC$DraftMessage;
import org.telegram.tgnet.TLRPC$EncryptedChat;
import org.telegram.tgnet.TLRPC$FileLocation;
import org.telegram.tgnet.TLRPC$InputChannel;
import org.telegram.tgnet.TLRPC$InputDialogPeer;
import org.telegram.tgnet.TLRPC$InputFile;
import org.telegram.tgnet.TLRPC$InputPeer;
import org.telegram.tgnet.TLRPC$InputPhoto;
import org.telegram.tgnet.TLRPC$InputUser;
import org.telegram.tgnet.TLRPC$Message;
import org.telegram.tgnet.TLRPC$MessageAction;
import org.telegram.tgnet.TLRPC$MessageMedia;
import org.telegram.tgnet.TLRPC$Peer;
import org.telegram.tgnet.TLRPC$PeerNotifySettings;
import org.telegram.tgnet.TLRPC$Photo;
import org.telegram.tgnet.TLRPC$PhotoSize;
import org.telegram.tgnet.TLRPC$Poll;
import org.telegram.tgnet.TLRPC$RecentMeUrl;
import org.telegram.tgnet.TLRPC$SendMessageAction;
import org.telegram.tgnet.TLRPC$TL_account_createTheme;
import org.telegram.tgnet.TLRPC$TL_account_getContactSignUpNotification;
import org.telegram.tgnet.TLRPC$TL_account_getNotifySettings;
import org.telegram.tgnet.TLRPC$TL_account_installTheme;
import org.telegram.tgnet.TLRPC$TL_account_installWallPaper;
import org.telegram.tgnet.TLRPC$TL_account_registerDevice;
import org.telegram.tgnet.TLRPC$TL_account_reportPeer;
import org.telegram.tgnet.TLRPC$TL_account_saveTheme;
import org.telegram.tgnet.TLRPC$TL_account_unregisterDevice;
import org.telegram.tgnet.TLRPC$TL_account_updateStatus;
import org.telegram.tgnet.TLRPC$TL_account_updateTheme;
import org.telegram.tgnet.TLRPC$TL_account_uploadTheme;
import org.telegram.tgnet.TLRPC$TL_account_uploadWallPaper;
import org.telegram.tgnet.TLRPC$TL_auth_logOut;
import org.telegram.tgnet.TLRPC$TL_boolFalse;
import org.telegram.tgnet.TLRPC$TL_boolTrue;
import org.telegram.tgnet.TLRPC$TL_botInfo;
import org.telegram.tgnet.TLRPC$TL_channel;
import org.telegram.tgnet.TLRPC$TL_channelForbidden;
import org.telegram.tgnet.TLRPC$TL_channelFull;
import org.telegram.tgnet.TLRPC$TL_channelParticipantSelf;
import org.telegram.tgnet.TLRPC$TL_channelParticipantsAdmins;
import org.telegram.tgnet.TLRPC$TL_channelParticipantsRecent;
import org.telegram.tgnet.TLRPC$TL_channels_channelParticipant;
import org.telegram.tgnet.TLRPC$TL_channels_channelParticipants;
import org.telegram.tgnet.TLRPC$TL_channels_convertToGigagroup;
import org.telegram.tgnet.TLRPC$TL_channels_createChannel;
import org.telegram.tgnet.TLRPC$TL_channels_deleteMessages;
import org.telegram.tgnet.TLRPC$TL_channels_deleteUserHistory;
import org.telegram.tgnet.TLRPC$TL_channels_editAdmin;
import org.telegram.tgnet.TLRPC$TL_channels_editBanned;
import org.telegram.tgnet.TLRPC$TL_channels_getChannels;
import org.telegram.tgnet.TLRPC$TL_channels_getParticipant;
import org.telegram.tgnet.TLRPC$TL_channels_getParticipants;
import org.telegram.tgnet.TLRPC$TL_channels_getSponsoredMessages;
import org.telegram.tgnet.TLRPC$TL_channels_inviteToChannel;
import org.telegram.tgnet.TLRPC$TL_channels_readMessageContents;
import org.telegram.tgnet.TLRPC$TL_channels_togglePreHistoryHidden;
import org.telegram.tgnet.TLRPC$TL_channels_toggleSignatures;
import org.telegram.tgnet.TLRPC$TL_channels_toggleSlowMode;
import org.telegram.tgnet.TLRPC$TL_channels_updateUsername;
import org.telegram.tgnet.TLRPC$TL_chatAdminRights;
import org.telegram.tgnet.TLRPC$TL_chatBannedRights;
import org.telegram.tgnet.TLRPC$TL_chatInviteExported;
import org.telegram.tgnet.TLRPC$TL_chatOnlines;
import org.telegram.tgnet.TLRPC$TL_config;
import org.telegram.tgnet.TLRPC$TL_contacts_block;
import org.telegram.tgnet.TLRPC$TL_contacts_getBlocked;
import org.telegram.tgnet.TLRPC$TL_contacts_resolvedPeer;
import org.telegram.tgnet.TLRPC$TL_contacts_unblock;
import org.telegram.tgnet.TLRPC$TL_dialog;
import org.telegram.tgnet.TLRPC$TL_dialogFilterSuggested;
import org.telegram.tgnet.TLRPC$TL_dialogFolder;
import org.telegram.tgnet.TLRPC$TL_dialogPeer;
import org.telegram.tgnet.TLRPC$TL_documentEmpty;
import org.telegram.tgnet.TLRPC$TL_draftMessage;
import org.telegram.tgnet.TLRPC$TL_encryptedChat;
import org.telegram.tgnet.TLRPC$TL_encryptedChatRequested;
import org.telegram.tgnet.TLRPC$TL_encryptedChatWaiting;
import org.telegram.tgnet.TLRPC$TL_error;
import org.telegram.tgnet.TLRPC$TL_folder;
import org.telegram.tgnet.TLRPC$TL_folderPeer;
import org.telegram.tgnet.TLRPC$TL_groupCallDiscarded;
import org.telegram.tgnet.TLRPC$TL_help_dismissSuggestion;
import org.telegram.tgnet.TLRPC$TL_help_getAppChangelog;
import org.telegram.tgnet.TLRPC$TL_help_getAppConfig;
import org.telegram.tgnet.TLRPC$TL_help_getPromoData;
import org.telegram.tgnet.TLRPC$TL_help_getRecentMeUrls;
import org.telegram.tgnet.TLRPC$TL_help_getTermsOfServiceUpdate;
import org.telegram.tgnet.TLRPC$TL_help_hidePromoData;
import org.telegram.tgnet.TLRPC$TL_help_promoData;
import org.telegram.tgnet.TLRPC$TL_help_recentMeUrls;
import org.telegram.tgnet.TLRPC$TL_help_termsOfServiceUpdate;
import org.telegram.tgnet.TLRPC$TL_help_termsOfServiceUpdateEmpty;
import org.telegram.tgnet.TLRPC$TL_inputChannel;
import org.telegram.tgnet.TLRPC$TL_inputChannelEmpty;
import org.telegram.tgnet.TLRPC$TL_inputChatPhoto;
import org.telegram.tgnet.TLRPC$TL_inputDialogPeer;
import org.telegram.tgnet.TLRPC$TL_inputDocument;
import org.telegram.tgnet.TLRPC$TL_inputEncryptedChat;
import org.telegram.tgnet.TLRPC$TL_inputFolderPeer;
import org.telegram.tgnet.TLRPC$TL_inputGeoPoint;
import org.telegram.tgnet.TLRPC$TL_inputGroupCall;
import org.telegram.tgnet.TLRPC$TL_inputMessagesFilterChatPhotos;
import org.telegram.tgnet.TLRPC$TL_inputNotifyBroadcasts;
import org.telegram.tgnet.TLRPC$TL_inputNotifyChats;
import org.telegram.tgnet.TLRPC$TL_inputNotifyUsers;
import org.telegram.tgnet.TLRPC$TL_inputPeerChannel;
import org.telegram.tgnet.TLRPC$TL_inputPeerChat;
import org.telegram.tgnet.TLRPC$TL_inputPeerEmpty;
import org.telegram.tgnet.TLRPC$TL_inputPeerSelf;
import org.telegram.tgnet.TLRPC$TL_inputPeerUser;
import org.telegram.tgnet.TLRPC$TL_inputPhotoEmpty;
import org.telegram.tgnet.TLRPC$TL_inputReportReasonGeoIrrelevant;
import org.telegram.tgnet.TLRPC$TL_inputTheme;
import org.telegram.tgnet.TLRPC$TL_inputThemeSettings;
import org.telegram.tgnet.TLRPC$TL_inputUser;
import org.telegram.tgnet.TLRPC$TL_inputUserEmpty;
import org.telegram.tgnet.TLRPC$TL_inputUserSelf;
import org.telegram.tgnet.TLRPC$TL_inputWallPaperNoFile;
import org.telegram.tgnet.TLRPC$TL_inputWallPaperSlug;
import org.telegram.tgnet.TLRPC$TL_message;
import org.telegram.tgnet.TLRPC$TL_messageActionChannelCreate;
import org.telegram.tgnet.TLRPC$TL_messageActionChatAddUser;
import org.telegram.tgnet.TLRPC$TL_messageActionChatDeleteUser;
import org.telegram.tgnet.TLRPC$TL_messageActionChatEditPhoto;
import org.telegram.tgnet.TLRPC$TL_messageActionChatMigrateTo;
import org.telegram.tgnet.TLRPC$TL_messageMediaPoll;
import org.telegram.tgnet.TLRPC$TL_messageMediaWebPage;
import org.telegram.tgnet.TLRPC$TL_messageService;
import org.telegram.tgnet.TLRPC$TL_messageViews;
import org.telegram.tgnet.TLRPC$TL_messages_affectedHistory;
import org.telegram.tgnet.TLRPC$TL_messages_affectedMessages;
import org.telegram.tgnet.TLRPC$TL_messages_chatFull;
import org.telegram.tgnet.TLRPC$TL_messages_chats;
import org.telegram.tgnet.TLRPC$TL_messages_createChat;
import org.telegram.tgnet.TLRPC$TL_messages_deleteMessages;
import org.telegram.tgnet.TLRPC$TL_messages_deleteScheduledMessages;
import org.telegram.tgnet.TLRPC$TL_messages_dialogs;
import org.telegram.tgnet.TLRPC$TL_messages_editChatAbout;
import org.telegram.tgnet.TLRPC$TL_messages_editChatAdmin;
import org.telegram.tgnet.TLRPC$TL_messages_editChatDefaultBannedRights;
import org.telegram.tgnet.TLRPC$TL_messages_getChats;
import org.telegram.tgnet.TLRPC$TL_messages_getDialogFilters;
import org.telegram.tgnet.TLRPC$TL_messages_getDialogUnreadMarks;
import org.telegram.tgnet.TLRPC$TL_messages_getDialogs;
import org.telegram.tgnet.TLRPC$TL_messages_getHistory;
import org.telegram.tgnet.TLRPC$TL_messages_getMessagesViews;
import org.telegram.tgnet.TLRPC$TL_messages_getOnlines;
import org.telegram.tgnet.TLRPC$TL_messages_getPeerDialogs;
import org.telegram.tgnet.TLRPC$TL_messages_getPeerSettings;
import org.telegram.tgnet.TLRPC$TL_messages_getPinnedDialogs;
import org.telegram.tgnet.TLRPC$TL_messages_getReplies;
import org.telegram.tgnet.TLRPC$TL_messages_getScheduledHistory;
import org.telegram.tgnet.TLRPC$TL_messages_getSuggestedDialogFilters;
import org.telegram.tgnet.TLRPC$TL_messages_getUnreadMentions;
import org.telegram.tgnet.TLRPC$TL_messages_getWebPagePreview;
import org.telegram.tgnet.TLRPC$TL_messages_hidePeerSettingsBar;
import org.telegram.tgnet.TLRPC$TL_messages_markDialogUnread;
import org.telegram.tgnet.TLRPC$TL_messages_messageViews;
import org.telegram.tgnet.TLRPC$TL_messages_messages;
import org.telegram.tgnet.TLRPC$TL_messages_messagesNotModified;
import org.telegram.tgnet.TLRPC$TL_messages_migrateChat;
import org.telegram.tgnet.TLRPC$TL_messages_peerDialogs;
import org.telegram.tgnet.TLRPC$TL_messages_readMentions;
import org.telegram.tgnet.TLRPC$TL_messages_readMessageContents;
import org.telegram.tgnet.TLRPC$TL_messages_reorderPinnedDialogs;
import org.telegram.tgnet.TLRPC$TL_messages_reportEncryptedSpam;
import org.telegram.tgnet.TLRPC$TL_messages_reportSpam;
import org.telegram.tgnet.TLRPC$TL_messages_saveGif;
import org.telegram.tgnet.TLRPC$TL_messages_saveRecentSticker;
import org.telegram.tgnet.TLRPC$TL_messages_search;
import org.telegram.tgnet.TLRPC$TL_messages_setEncryptedTyping;
import org.telegram.tgnet.TLRPC$TL_messages_setHistoryTTL;
import org.telegram.tgnet.TLRPC$TL_messages_setTyping;
import org.telegram.tgnet.TLRPC$TL_messages_sponsoredMessages;
import org.telegram.tgnet.TLRPC$TL_messages_startBot;
import org.telegram.tgnet.TLRPC$TL_messages_toggleDialogPin;
import org.telegram.tgnet.TLRPC$TL_messages_unpinAllMessages;
import org.telegram.tgnet.TLRPC$TL_messages_updatePinnedMessage;
import org.telegram.tgnet.TLRPC$TL_peerChannel;
import org.telegram.tgnet.TLRPC$TL_peerChat;
import org.telegram.tgnet.TLRPC$TL_peerNotifySettings;
import org.telegram.tgnet.TLRPC$TL_peerSettings;
import org.telegram.tgnet.TLRPC$TL_peerUser;
import org.telegram.tgnet.TLRPC$TL_phone_getGroupCall;
import org.telegram.tgnet.TLRPC$TL_phone_groupCall;
import org.telegram.tgnet.TLRPC$TL_photo;
import org.telegram.tgnet.TLRPC$TL_photoEmpty;
import org.telegram.tgnet.TLRPC$TL_photos_deletePhotos;
import org.telegram.tgnet.TLRPC$TL_photos_getUserPhotos;
import org.telegram.tgnet.TLRPC$TL_photos_photo;
import org.telegram.tgnet.TLRPC$TL_photos_photos;
import org.telegram.tgnet.TLRPC$TL_photos_updateProfilePhoto;
import org.telegram.tgnet.TLRPC$TL_photos_uploadProfilePhoto;
import org.telegram.tgnet.TLRPC$TL_replyKeyboardHide;
import org.telegram.tgnet.TLRPC$TL_restrictionReason;
import org.telegram.tgnet.TLRPC$TL_sendMessageCancelAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageChooseContactAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageChooseStickerAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageEmojiInteraction;
import org.telegram.tgnet.TLRPC$TL_sendMessageEmojiInteractionSeen;
import org.telegram.tgnet.TLRPC$TL_sendMessageGamePlayAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageGeoLocationAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageRecordAudioAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageRecordRoundAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageRecordVideoAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageTypingAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageUploadAudioAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageUploadDocumentAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageUploadPhotoAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageUploadRoundAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageUploadVideoAction;
import org.telegram.tgnet.TLRPC$TL_sponsoredMessage;
import org.telegram.tgnet.TLRPC$TL_theme;
import org.telegram.tgnet.TLRPC$TL_updateChannel;
import org.telegram.tgnet.TLRPC$TL_updateChannelAvailableMessages;
import org.telegram.tgnet.TLRPC$TL_updateChannelMessageForwards;
import org.telegram.tgnet.TLRPC$TL_updateChannelMessageViews;
import org.telegram.tgnet.TLRPC$TL_updateChannelReadMessagesContents;
import org.telegram.tgnet.TLRPC$TL_updateChannelTooLong;
import org.telegram.tgnet.TLRPC$TL_updateChannelUserTyping;
import org.telegram.tgnet.TLRPC$TL_updateChannelWebPage;
import org.telegram.tgnet.TLRPC$TL_updateChatUserTyping;
import org.telegram.tgnet.TLRPC$TL_updateDeleteChannelMessages;
import org.telegram.tgnet.TLRPC$TL_updateDeleteMessages;
import org.telegram.tgnet.TLRPC$TL_updateEditChannelMessage;
import org.telegram.tgnet.TLRPC$TL_updateEditMessage;
import org.telegram.tgnet.TLRPC$TL_updateFolderPeers;
import org.telegram.tgnet.TLRPC$TL_updateLangPack;
import org.telegram.tgnet.TLRPC$TL_updateMessageID;
import org.telegram.tgnet.TLRPC$TL_updateMessagePoll;
import org.telegram.tgnet.TLRPC$TL_updateNewChannelMessage;
import org.telegram.tgnet.TLRPC$TL_updateNewEncryptedMessage;
import org.telegram.tgnet.TLRPC$TL_updateNewMessage;
import org.telegram.tgnet.TLRPC$TL_updatePeerBlocked;
import org.telegram.tgnet.TLRPC$TL_updatePinnedChannelMessages;
import org.telegram.tgnet.TLRPC$TL_updatePinnedMessages;
import org.telegram.tgnet.TLRPC$TL_updateReadChannelDiscussionInbox;
import org.telegram.tgnet.TLRPC$TL_updateReadChannelDiscussionOutbox;
import org.telegram.tgnet.TLRPC$TL_updateReadChannelInbox;
import org.telegram.tgnet.TLRPC$TL_updateReadChannelOutbox;
import org.telegram.tgnet.TLRPC$TL_updateReadHistoryInbox;
import org.telegram.tgnet.TLRPC$TL_updateReadHistoryOutbox;
import org.telegram.tgnet.TLRPC$TL_updateReadMessagesContents;
import org.telegram.tgnet.TLRPC$TL_updateServiceNotification;
import org.telegram.tgnet.TLRPC$TL_updateUserTyping;
import org.telegram.tgnet.TLRPC$TL_updateWebPage;
import org.telegram.tgnet.TLRPC$TL_updatesCombined;
import org.telegram.tgnet.TLRPC$TL_updates_differenceSlice;
import org.telegram.tgnet.TLRPC$TL_updates_differenceTooLong;
import org.telegram.tgnet.TLRPC$TL_updates_getDifference;
import org.telegram.tgnet.TLRPC$TL_updates_getState;
import org.telegram.tgnet.TLRPC$TL_updates_state;
import org.telegram.tgnet.TLRPC$TL_userForeign_old2;
import org.telegram.tgnet.TLRPC$TL_userProfilePhoto;
import org.telegram.tgnet.TLRPC$TL_userProfilePhotoEmpty;
import org.telegram.tgnet.TLRPC$TL_users_getFullUser;
import org.telegram.tgnet.TLRPC$TL_users_getUsers;
import org.telegram.tgnet.TLRPC$TL_wallPaperSettings;
import org.telegram.tgnet.TLRPC$TL_webPage;
import org.telegram.tgnet.TLRPC$TL_webPageEmpty;
import org.telegram.tgnet.TLRPC$Update;
import org.telegram.tgnet.TLRPC$Updates;
import org.telegram.tgnet.TLRPC$User;
import org.telegram.tgnet.TLRPC$UserFull;
import org.telegram.tgnet.TLRPC$UserProfilePhoto;
import org.telegram.tgnet.TLRPC$UserStatus;
import org.telegram.tgnet.TLRPC$Vector;
import org.telegram.tgnet.TLRPC$VideoSize;
import org.telegram.tgnet.TLRPC$WallPaper;
import org.telegram.tgnet.TLRPC$WallPaperSettings;
import org.telegram.tgnet.TLRPC$WebPage;
import org.telegram.tgnet.TLRPC$contacts_Blocked;
import org.telegram.tgnet.TLRPC$messages_Dialogs;
import org.telegram.tgnet.TLRPC$messages_Messages;
import org.telegram.tgnet.TLRPC$photos_Photos;
import org.telegram.tgnet.TLRPC$updates_ChannelDifference;
import org.telegram.tgnet.TLRPC$updates_Difference;
import org.telegram.ui.ActionBar.AlertDialog;
import org.telegram.ui.ActionBar.BaseFragment;
import org.telegram.ui.ActionBar.Theme;
import org.telegram.ui.ChatActivity;
import org.telegram.ui.Components.AlertsCreator;
import org.telegram.ui.Components.BulletinFactory;
import org.telegram.ui.DialogsActivity;
import org.telegram.ui.LaunchActivity;
import org.telegram.ui.ProfileActivity;

public class MessagesController extends BaseController implements NotificationCenter.NotificationCenterDelegate {
    public static int DIALOG_FILTER_FLAG_ALL_CHATS = ((((1 | 2) | 4) | 8) | 16);
    public static int DIALOG_FILTER_FLAG_BOTS = 16;
    public static int DIALOG_FILTER_FLAG_CHANNELS = 8;
    public static int DIALOG_FILTER_FLAG_CONTACTS = 1;
    public static int DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED = 128;
    public static int DIALOG_FILTER_FLAG_EXCLUDE_MUTED = 32;
    public static int DIALOG_FILTER_FLAG_EXCLUDE_READ = 64;
    public static int DIALOG_FILTER_FLAG_GROUPS = 4;
    public static int DIALOG_FILTER_FLAG_NON_CONTACTS = 2;
    public static int DIALOG_FILTER_FLAG_ONLY_ARCHIVED = 256;
    private static volatile MessagesController[] Instance = new MessagesController[3];
    public static int PROMO_TYPE_OTHER = 2;
    public static int PROMO_TYPE_PROXY = 0;
    public static int PROMO_TYPE_PSA = 1;
    public static int UPDATE_MASK_ALL = (((((((((2 | 4) | 1) | 8) | 16) | 32) | 64) | 128) | 256) | 1024);
    public static int UPDATE_MASK_AVATAR = 2;
    public static int UPDATE_MASK_CHAT = 8192;
    public static int UPDATE_MASK_CHAT_AVATAR = 8;
    public static int UPDATE_MASK_CHAT_MEMBERS = 32;
    public static int UPDATE_MASK_CHAT_NAME = 16;
    public static int UPDATE_MASK_CHECK = 65536;
    public static int UPDATE_MASK_EMOJI_INTERACTIONS = 262144;
    public static int UPDATE_MASK_MESSAGE_TEXT = 32768;
    public static int UPDATE_MASK_NAME = 1;
    public static int UPDATE_MASK_NEW_MESSAGE = 2048;
    public static int UPDATE_MASK_PHONE = 1024;
    public static int UPDATE_MASK_READ_DIALOG_MESSAGE = 256;
    public static int UPDATE_MASK_REORDER = 131072;
    public static int UPDATE_MASK_SELECT_DIALOG = 512;
    public static int UPDATE_MASK_SEND_STATE = 4096;
    public static int UPDATE_MASK_STATUS = 4;
    public static int UPDATE_MASK_USER_PHONE = 128;
    public static int UPDATE_MASK_USER_PRINT = 64;
    private static volatile long lastPasswordCheckTime;
    private static volatile long lastThemeCheckTime;
    private int DIALOGS_LOAD_TYPE_CACHE;
    private int DIALOGS_LOAD_TYPE_CHANNEL;
    private int DIALOGS_LOAD_TYPE_UNKNOWN;
    private HashMap<Long, TLRPC$Chat> activeVoiceChatsMap = new HashMap<>();
    protected ArrayList<TLRPC$Dialog> allDialogs = new ArrayList<>();
    public float animatedEmojisZoom;
    public Set<String> authDomains;
    public boolean autoarchiveAvailable;
    public Set<String> autologinDomains;
    public String autologinToken;
    public int availableMapProviders;
    public boolean backgroundConnection;
    public LongSparseIntArray blockePeers;
    public boolean blockedCountry;
    public boolean blockedEndReached;
    public int callConnectTimeout;
    public int callPacketTimeout;
    public int callReceiveTimeout;
    public int callRingTimeout;
    public boolean canRevokePmInbox;
    private LongSparseArray<LongSparseArray<TLRPC$ChannelParticipant>> channelAdmins;
    private LongSparseArray<ArrayList<Integer>> channelViewsToSend;
    private LongSparseIntArray channelsPts;
    private ConcurrentHashMap<Long, TLRPC$Chat> chats = new ConcurrentHashMap<>(100, 1.0f, 2);
    private LongSparseArray<Boolean> checkingLastMessagesDialogs;
    private boolean checkingPromoInfo;
    private int checkingPromoInfoRequestId;
    private boolean checkingTosUpdate;
    private LongSparseArray<TLRPC$Dialog> clearingHistoryDialogs = new LongSparseArray<>();
    private ArrayList<Long> createdDialogIds = new ArrayList<>();
    private ArrayList<Long> createdDialogMainThreadIds = new ArrayList<>();
    private ArrayList<Long> createdScheduledDialogIds = new ArrayList<>();
    private Runnable currentDeleteTaskRunnable;
    private LongSparseArray<ArrayList<Integer>> currentDeletingTaskMediaMids;
    private LongSparseArray<ArrayList<Integer>> currentDeletingTaskMids;
    private int currentDeletingTaskTime;
    public String dcDomainName;
    public LongSparseIntArray deletedHistory = new LongSparseIntArray();
    private LongSparseArray<TLRPC$Dialog> deletingDialogs = new LongSparseArray<>();
    private Comparator<TLRPC$Dialog> dialogComparator;
    private Comparator<TLRPC$Dialog> dialogDateComparator;
    public ArrayList<DialogFilter> dialogFilters;
    public SparseArray<DialogFilter> dialogFiltersById;
    public boolean dialogFiltersLoaded;
    public LongSparseArray<MessageObject> dialogMessage = new LongSparseArray<>();
    public SparseArray<MessageObject> dialogMessagesByIds = new SparseArray<>();
    public LongSparseArray<MessageObject> dialogMessagesByRandomIds = new LongSparseArray<>();
    public SparseArray<ArrayList<TLRPC$Dialog>> dialogsByFolder = new SparseArray<>();
    public ArrayList<TLRPC$Dialog> dialogsCanAddUsers = new ArrayList<>();
    public ArrayList<TLRPC$Dialog> dialogsChannelsOnly = new ArrayList<>();
    private SparseBooleanArray dialogsEndReached;
    public ArrayList<TLRPC$Dialog> dialogsForBlock = new ArrayList<>();
    public ArrayList<TLRPC$Dialog> dialogsForward = new ArrayList<>();
    public ArrayList<TLRPC$Dialog> dialogsGroupsOnly = new ArrayList<>();
    private boolean dialogsInTransaction;
    public boolean dialogsLoaded;
    private int dialogsLoadedTillDate = Integer.MAX_VALUE;
    public ArrayList<TLRPC$Dialog> dialogsServerOnly = new ArrayList<>();
    public ArrayList<TLRPC$Dialog> dialogsUsersOnly = new ArrayList<>();
    public LongSparseArray<TLRPC$Dialog> dialogs_dict = new LongSparseArray<>();
    public ConcurrentHashMap<Long, Integer> dialogs_read_inbox_max = new ConcurrentHashMap<>(100, 1.0f, 2);
    public ConcurrentHashMap<Long, Integer> dialogs_read_outbox_max = new ConcurrentHashMap<>(100, 1.0f, 2);
    public HashSet<String> diceEmojies;
    public HashMap<String, DiceFrameSuccess> diceSuccess;
    public HashMap<Long, ArrayList<TLRPC$TL_sendMessageEmojiInteraction>> emojiInteractions;
    private SharedPreferences emojiPreferences;
    public HashMap<String, EmojiSound> emojiSounds;
    public boolean enableJoined;
    private ConcurrentHashMap<Integer, TLRPC$EncryptedChat> encryptedChats = new ConcurrentHashMap<>(10, 1.0f, 2);
    public Set<String> exportGroupUri;
    public Set<String> exportPrivateUri;
    public Set<String> exportUri;
    private LongSparseArray<TLRPC$TL_chatInviteExported> exportedChats = new LongSparseArray<>();
    public ArrayList<FaqSearchResult> faqSearchArray;
    public TLRPC$WebPage faqWebPage;
    public boolean filtersEnabled;
    public boolean firstGettingTask;
    private LongSparseArray<TLRPC$ChatFull> fullChats;
    private LongSparseArray<TLRPC$UserFull> fullUsers;
    private boolean getDifferenceFirstSync;
    private boolean gettingAppChangelog;
    private LongSparseArray<Boolean> gettingChatInviters;
    public boolean gettingDifference;
    private LongSparseArray<Boolean> gettingDifferenceChannels;
    private boolean gettingNewDeleteTask;
    private LongSparseArray<Boolean> gettingUnknownChannels;
    private LongSparseArray<Boolean> gettingUnknownDialogs;
    public String gifSearchBot;
    public ArrayList<String> gifSearchEmojies;
    public int groipCallVideoMaxParticipants;
    private LongSparseArray<ChatObject.Call> groupCalls;
    private LongSparseArray<ChatObject.Call> groupCallsByChatId;
    public ArrayList<TLRPC$RecentMeUrl> hintDialogs = new ArrayList<>();
    public volatile boolean ignoreSetOnline;
    public String imageSearchBot;
    private String installReferer;
    private boolean isLeftPromoChannel;
    private ArrayList<Long> joiningToChannels = new ArrayList<>();
    public boolean keepAliveService;
    private int lastCheckPromoId;
    private int lastPrintingStringCount;
    private long lastPushRegisterSendTime;
    private LongSparseArray<Long> lastScheduledServerQueryTime;
    private LongSparseArray<Long> lastServerQueryTime;
    private long lastStatusUpdateTime;
    private long lastViewsCheckTime;
    public String linkPrefix;
    private ArrayList<Long> loadedFullChats;
    private ArrayList<Long> loadedFullParticipants;
    private ArrayList<Long> loadedFullUsers;
    private boolean loadingAppConfig;
    public boolean loadingBlockedPeers;
    private LongSparseIntArray loadingChannelAdmins;
    private SparseBooleanArray loadingDialogs;
    private ArrayList<Long> loadingFullChats;
    private ArrayList<Long> loadingFullParticipants;
    private ArrayList<Long> loadingFullUsers;
    private ArrayList<Long> loadingGroupCalls;
    private int loadingNotificationSettings;
    private boolean loadingNotificationSignUpSettings;
    private LongSparseArray<Boolean> loadingPeerSettings = new LongSparseArray<>();
    private SparseIntArray loadingPinnedDialogs;
    private boolean loadingRemoteFilters;
    private boolean loadingSuggestedFilters;
    private boolean loadingUnreadDialogs;
    private SharedPreferences mainPreferences;
    public String mapKey;
    public int mapProvider;
    public int maxBroadcastCount;
    public int maxCaptionLength;
    public int maxEditTime;
    public int maxFaveStickersCount;
    public int maxFolderPinnedDialogsCount;
    public int maxGroupCount;
    public int maxMegagroupCount;
    public int maxMessageLength;
    public int maxPinnedDialogsCount;
    public int maxRecentGifsCount;
    public int maxRecentStickersCount;
    private SparseIntArray migratedChats;
    private boolean migratingDialogs;
    public int minGroupConvertSize;
    private LongSparseArray<ArrayList<Integer>> needShortPollChannels = new LongSparseArray<>();
    private LongSparseArray<ArrayList<Integer>> needShortPollOnlines = new LongSparseArray<>();
    private SparseIntArray nextDialogsCacheOffset;
    private int nextPromoInfoCheckTime;
    private int nextTosCheckTime;
    private SharedPreferences notificationsPreferences;
    private ConcurrentHashMap<String, TLObject> objectsByUsernames = new ConcurrentHashMap<>(100, 1.0f, 2);
    private boolean offlineSent;
    public ConcurrentHashMap<Long, Integer> onlinePrivacy = new ConcurrentHashMap<>(20, 1.0f, 2);
    private Runnable passwordCheckRunnable;
    public Set<String> pendingSuggestions;
    private LongSparseArray<SparseArray<MessageObject>> pollsToCheck;
    private int pollsToCheckSize;
    public boolean preloadFeaturedStickers;
    public LongSparseArray<SparseArray<CharSequence>> printingStrings = new LongSparseArray<>();
    public LongSparseArray<SparseArray<Integer>> printingStringsTypes = new LongSparseArray<>();
    public ConcurrentHashMap<Long, ConcurrentHashMap<Integer, ArrayList<PrintingUser>>> printingUsers = new ConcurrentHashMap<>(20, 1.0f, 2);
    private TLRPC$Dialog promoDialog;
    private long promoDialogId;
    public int promoDialogType;
    public String promoPsaMessage;
    public String promoPsaType;
    private String proxyDialogAddress;
    public boolean qrLoginCamera;
    public int ratingDecay;
    private ArrayList<ReadTask> readTasks;
    private LongSparseArray<ReadTask> readTasksMap;
    public boolean registeringForPush;
    private LongSparseArray<ArrayList<Integer>> reloadingMessages;
    private HashMap<String, ArrayList<MessageObject>> reloadingScheduledWebpages;
    private LongSparseArray<ArrayList<MessageObject>> reloadingScheduledWebpagesPending;
    private HashMap<String, ArrayList<MessageObject>> reloadingWebpages;
    private LongSparseArray<ArrayList<MessageObject>> reloadingWebpagesPending;
    private ArrayList<ReadTask> repliesReadTasks;
    private TLRPC$messages_Dialogs resetDialogsAll;
    private TLRPC$TL_messages_peerDialogs resetDialogsPinned;
    private boolean resetingDialogs;
    public int revokeTimeLimit;
    public int revokeTimePmLimit;
    public int roundAudioBitrate;
    public int roundVideoBitrate;
    public int roundVideoSize;
    public boolean saveGifsWithStickers;
    public int secretWebpagePreview;
    public DialogFilter[] selectedDialogFilter = new DialogFilter[2];
    public LongSparseArray<SparseArray<Boolean>>[] sendingTypings = new LongSparseArray[12];
    private SparseBooleanArray serverDialogsEndReached;
    private LongSparseIntArray shortPollChannels = new LongSparseIntArray();
    private LongSparseIntArray shortPollOnlines = new LongSparseIntArray();
    public boolean showFiltersTooltip;
    private DialogFilter sortingDialogFilter;
    private LongSparseArray<SponsoredMessagesInfo> sponsoredMessages;
    private int statusRequest;
    private int statusSettingState;
    public boolean suggestContacts;
    public boolean suggestStickersApiOnly;
    public ArrayList<TLRPC$TL_dialogFilterSuggested> suggestedFilters;
    public String suggestedLangCode;
    private Runnable themeCheckRunnable;
    private HashMap<String, ReadTask> threadsReadTasksMap;
    public int totalBlockedCount;
    public int unreadUnmutedDialogs;
    public int updateCheckDelay;
    private Comparator<TLRPC$Update> updatesComparator;
    private LongSparseArray<ArrayList<TLRPC$Updates>> updatesQueueChannels;
    private ArrayList<TLRPC$Updates> updatesQueuePts;
    private ArrayList<TLRPC$Updates> updatesQueueQts;
    private ArrayList<TLRPC$Updates> updatesQueueSeq;
    private LongSparseLongArray updatesStartWaitTimeChannels;
    private long updatesStartWaitTimePts;
    private long updatesStartWaitTimeQts;
    private long updatesStartWaitTimeSeq;
    public boolean updatingState;
    private String uploadingAvatar;
    private HashMap<String, Object> uploadingThemes;
    private String uploadingWallpaper;
    private Theme.OverrideWallpaperInfo uploadingWallpaperInfo;
    private ConcurrentHashMap<Long, TLRPC$User> users = new ConcurrentHashMap<>(100, 1.0f, 2);
    public String venueSearchBot;
    private ArrayList<Long> visibleDialogMainThreadIds = new ArrayList<>();
    private ArrayList<Long> visibleScheduledDialogMainThreadIds = new ArrayList<>();
    public int webFileDatacenterId;
    public String youtubePipType;

    public interface MessagesLoadedCallback {
        void onError();

        void onMessagesLoaded(boolean z);
    }

    public static class PrintingUser {
        public TLRPC$SendMessageAction action;
        public long lastTime;
        public long userId;
    }

    /* access modifiers changed from: private */
    public static /* synthetic */ void lambda$blockPeer$62(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    /* access modifiers changed from: private */
    public static /* synthetic */ void lambda$completeReadTask$186(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    /* access modifiers changed from: private */
    public static /* synthetic */ void lambda$completeReadTask$188(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    /* access modifiers changed from: private */
    public static /* synthetic */ void lambda$deleteParticipantFromChat$227(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    /* access modifiers changed from: private */
    public static /* synthetic */ void lambda$deleteUserPhoto$83(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    /* access modifiers changed from: private */
    public static /* synthetic */ void lambda$hidePeerSettingsBar$47(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    /* access modifiers changed from: private */
    public static /* synthetic */ void lambda$hidePromoDialog$98(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    /* access modifiers changed from: private */
    public static /* synthetic */ void lambda$installTheme$86(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    /* access modifiers changed from: private */
    public static /* synthetic */ void lambda$installTheme$87(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    /* access modifiers changed from: private */
    public static /* synthetic */ void lambda$markMentionMessageAsRead$182(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    /* access modifiers changed from: private */
    public static /* synthetic */ void lambda$markMentionsAsRead$190(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    /* access modifiers changed from: private */
    public static /* synthetic */ void lambda$markMessageContentAsRead$180(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    /* access modifiers changed from: private */
    public static /* synthetic */ void lambda$processUpdates$285(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    /* access modifiers changed from: private */
    public static /* synthetic */ void lambda$removeSuggestion$16(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    /* access modifiers changed from: private */
    public static /* synthetic */ void lambda$reportSpam$48(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    /* access modifiers changed from: private */
    public static /* synthetic */ void lambda$reportSpam$49(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    /* access modifiers changed from: private */
    public static /* synthetic */ void lambda$reportSpam$50(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    /* access modifiers changed from: private */
    public static /* synthetic */ void lambda$saveTheme$85(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    /* access modifiers changed from: private */
    public static /* synthetic */ void lambda$unblockPeer$78(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    /* access modifiers changed from: private */
    public static /* synthetic */ void lambda$unregistedPush$233(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$new$0() {
        getUserConfig().checkSavedPassword();
    }

    private class SponsoredMessagesInfo {
        /* access modifiers changed from: private */
        public long loadTime;
        /* access modifiers changed from: private */
        public boolean loading;
        /* access modifiers changed from: private */
        public ArrayList<MessageObject> messages;

        private SponsoredMessagesInfo() {
        }
    }

    public static class FaqSearchResult {
        public int num;
        public String[] path;
        public String title;
        public String url;

        public FaqSearchResult(String str, String[] strArr, String str2) {
            this.title = str;
            this.path = strArr;
            this.url = str2;
        }

        public boolean equals(Object obj) {
            if (!(obj instanceof FaqSearchResult)) {
                return false;
            }
            return this.title.equals(((FaqSearchResult) obj).title);
        }

        public String toString() {
            SerializedData serializedData = new SerializedData();
            serializedData.writeInt32(this.num);
            int i = 0;
            serializedData.writeInt32(0);
            serializedData.writeString(this.title);
            String[] strArr = this.path;
            serializedData.writeInt32(strArr != null ? strArr.length : 0);
            if (this.path != null) {
                while (true) {
                    String[] strArr2 = this.path;
                    if (i >= strArr2.length) {
                        break;
                    }
                    serializedData.writeString(strArr2[i]);
                    i++;
                }
            }
            serializedData.writeString(this.url);
            return Utilities.bytesToHex(serializedData.toByteArray());
        }
    }

    public static class EmojiSound {
        public long accessHash;
        public byte[] fileReference;
        public long id;

        public EmojiSound(long j, long j2, String str) {
            this.id = j;
            this.accessHash = j2;
            this.fileReference = Base64.decode(str, 8);
        }

        public EmojiSound(long j, long j2, byte[] bArr) {
            this.id = j;
            this.accessHash = j2;
            this.fileReference = bArr;
        }

        public boolean equals(Object obj) {
            if (!(obj instanceof EmojiSound)) {
                return false;
            }
            EmojiSound emojiSound = (EmojiSound) obj;
            if (this.id == emojiSound.id && this.accessHash == emojiSound.accessHash && Arrays.equals(this.fileReference, emojiSound.fileReference)) {
                return true;
            }
            return false;
        }
    }

    public void clearQueryTime() {
        this.lastServerQueryTime.clear();
        this.lastScheduledServerQueryTime.clear();
    }

    public static class DiceFrameSuccess {
        public int frame;
        public int num;

        public DiceFrameSuccess(int i, int i2) {
            this.frame = i;
            this.num = i2;
        }

        public boolean equals(Object obj) {
            if (!(obj instanceof DiceFrameSuccess)) {
                return false;
            }
            DiceFrameSuccess diceFrameSuccess = (DiceFrameSuccess) obj;
            if (this.frame == diceFrameSuccess.frame && this.num == diceFrameSuccess.num) {
                return true;
            }
            return false;
        }
    }

    private static class UserActionUpdatesSeq extends TLRPC$Updates {
        private UserActionUpdatesSeq() {
        }
    }

    private static class UserActionUpdatesPts extends TLRPC$Updates {
        private UserActionUpdatesPts() {
        }
    }

    private static class ReadTask {
        public long dialogId;
        public int maxDate;
        public int maxId;
        public long replyId;
        public long sendRequestTime;

        private ReadTask() {
        }
    }

    public static class DialogFilter {
        private static int dialogFilterPointer = 10;
        public ArrayList<Long> alwaysShow = new ArrayList<>();
        public ArrayList<TLRPC$Dialog> dialogs = new ArrayList<>();
        public int flags;
        public int id;
        public int localId;
        public String name;
        public ArrayList<Long> neverShow = new ArrayList<>();
        public int order;
        public volatile int pendingUnreadCount;
        public LongSparseIntArray pinnedDialogs = new LongSparseIntArray();
        public int unreadCount;

        public DialogFilter() {
            int i = dialogFilterPointer;
            dialogFilterPointer = i + 1;
            this.localId = i;
        }

        public boolean includesDialog(AccountInstance accountInstance, long j) {
            TLRPC$Dialog tLRPC$Dialog = accountInstance.getMessagesController().dialogs_dict.get(j);
            if (tLRPC$Dialog == null) {
                return false;
            }
            return includesDialog(accountInstance, j, tLRPC$Dialog);
        }

        public boolean includesDialog(AccountInstance accountInstance, long j, TLRPC$Dialog tLRPC$Dialog) {
            TLRPC$Chat chat;
            if (this.neverShow.contains(Long.valueOf(j))) {
                return false;
            }
            if (this.alwaysShow.contains(Long.valueOf(j))) {
                return true;
            }
            if (tLRPC$Dialog.folder_id != 0 && (this.flags & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED) != 0) {
                return false;
            }
            MessagesController messagesController = accountInstance.getMessagesController();
            ContactsController contactsController = accountInstance.getContactsController();
            if (((this.flags & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED) != 0 && messagesController.isDialogMuted(tLRPC$Dialog.id) && tLRPC$Dialog.unread_mentions_count == 0) || ((this.flags & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0 && tLRPC$Dialog.unread_count == 0 && !tLRPC$Dialog.unread_mark && tLRPC$Dialog.unread_mentions_count == 0)) {
                return false;
            }
            if (j > 0) {
                TLRPC$User user = messagesController.getUser(Long.valueOf(j));
                if (user != null) {
                    if (!user.bot) {
                        if (user.self || user.contact || contactsController.isContact(j)) {
                            if ((this.flags & MessagesController.DIALOG_FILTER_FLAG_CONTACTS) != 0) {
                                return true;
                            }
                        } else if ((this.flags & MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS) != 0) {
                            return true;
                        }
                    } else if ((this.flags & MessagesController.DIALOG_FILTER_FLAG_BOTS) != 0) {
                        return true;
                    }
                }
            } else if (j < 0 && (chat = messagesController.getChat(Long.valueOf(-j))) != null) {
                if (!ChatObject.isChannel(chat) || chat.megagroup) {
                    if ((this.flags & MessagesController.DIALOG_FILTER_FLAG_GROUPS) != 0) {
                        return true;
                    }
                } else if ((this.flags & MessagesController.DIALOG_FILTER_FLAG_CHANNELS) != 0) {
                    return true;
                }
            }
            return false;
        }

        public boolean alwaysShow(int i, TLRPC$Dialog tLRPC$Dialog) {
            TLRPC$EncryptedChat encryptedChat;
            if (tLRPC$Dialog == null) {
                return false;
            }
            long j = tLRPC$Dialog.id;
            if (DialogObject.isEncryptedDialog(j) && (encryptedChat = MessagesController.getInstance(i).getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(j)))) != null) {
                j = encryptedChat.user_id;
            }
            return this.alwaysShow.contains(Long.valueOf(j));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ int lambda$new$1(TLRPC$Dialog tLRPC$Dialog, TLRPC$Dialog tLRPC$Dialog2) {
        int i = this.sortingDialogFilter.pinnedDialogs.get(tLRPC$Dialog.id, Integer.MIN_VALUE);
        int i2 = this.sortingDialogFilter.pinnedDialogs.get(tLRPC$Dialog2.id, Integer.MIN_VALUE);
        boolean z = tLRPC$Dialog instanceof TLRPC$TL_dialogFolder;
        if (z && !(tLRPC$Dialog2 instanceof TLRPC$TL_dialogFolder)) {
            return -1;
        }
        if (!z && (tLRPC$Dialog2 instanceof TLRPC$TL_dialogFolder)) {
            return 1;
        }
        if (i == Integer.MIN_VALUE && i2 != Integer.MIN_VALUE) {
            return 1;
        }
        if (i != Integer.MIN_VALUE && i2 == Integer.MIN_VALUE) {
            return -1;
        }
        if (i == Integer.MIN_VALUE) {
            MediaDataController mediaDataController = getMediaDataController();
            long lastMessageOrDraftDate = DialogObject.getLastMessageOrDraftDate(tLRPC$Dialog, mediaDataController.getDraft(tLRPC$Dialog.id, 0));
            long lastMessageOrDraftDate2 = DialogObject.getLastMessageOrDraftDate(tLRPC$Dialog2, mediaDataController.getDraft(tLRPC$Dialog2.id, 0));
            if (lastMessageOrDraftDate < lastMessageOrDraftDate2) {
                return 1;
            }
            if (lastMessageOrDraftDate > lastMessageOrDraftDate2) {
                return -1;
            }
            return 0;
        } else if (i > i2) {
            return 1;
        } else {
            if (i < i2) {
                return -1;
            }
            return 0;
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ int lambda$new$2(TLRPC$Dialog tLRPC$Dialog, TLRPC$Dialog tLRPC$Dialog2) {
        boolean z = tLRPC$Dialog instanceof TLRPC$TL_dialogFolder;
        if (z && !(tLRPC$Dialog2 instanceof TLRPC$TL_dialogFolder)) {
            return -1;
        }
        if (!z && (tLRPC$Dialog2 instanceof TLRPC$TL_dialogFolder)) {
            return 1;
        }
        boolean z2 = tLRPC$Dialog.pinned;
        if (!z2 && tLRPC$Dialog2.pinned) {
            return 1;
        }
        if (z2 && !tLRPC$Dialog2.pinned) {
            return -1;
        }
        if (z2) {
            int i = tLRPC$Dialog.pinnedNum;
            int i2 = tLRPC$Dialog2.pinnedNum;
            if (i < i2) {
                return 1;
            }
            if (i > i2) {
                return -1;
            }
            return 0;
        }
        MediaDataController mediaDataController = getMediaDataController();
        long lastMessageOrDraftDate = DialogObject.getLastMessageOrDraftDate(tLRPC$Dialog, mediaDataController.getDraft(tLRPC$Dialog.id, 0));
        long lastMessageOrDraftDate2 = DialogObject.getLastMessageOrDraftDate(tLRPC$Dialog2, mediaDataController.getDraft(tLRPC$Dialog2.id, 0));
        if (lastMessageOrDraftDate < lastMessageOrDraftDate2) {
            return 1;
        }
        if (lastMessageOrDraftDate > lastMessageOrDraftDate2) {
            return -1;
        }
        return 0;
    }

    /* access modifiers changed from: private */
    public /* synthetic */ int lambda$new$3(TLRPC$Update tLRPC$Update, TLRPC$Update tLRPC$Update2) {
        int updateType = getUpdateType(tLRPC$Update);
        int updateType2 = getUpdateType(tLRPC$Update2);
        if (updateType != updateType2) {
            return AndroidUtilities.compare(updateType, updateType2);
        }
        if (updateType == 0) {
            return AndroidUtilities.compare(getUpdatePts(tLRPC$Update), getUpdatePts(tLRPC$Update2));
        }
        if (updateType == 1) {
            return AndroidUtilities.compare(getUpdateQts(tLRPC$Update), getUpdateQts(tLRPC$Update2));
        }
        if (updateType != 2) {
            return 0;
        }
        long updateChannelId = getUpdateChannelId(tLRPC$Update);
        long updateChannelId2 = getUpdateChannelId(tLRPC$Update2);
        if (updateChannelId == updateChannelId2) {
            return AndroidUtilities.compare(getUpdatePts(tLRPC$Update), getUpdatePts(tLRPC$Update2));
        }
        return AndroidUtilities.compare(updateChannelId, updateChannelId2);
    }

    public static MessagesController getInstance(int i) {
        MessagesController messagesController = Instance[i];
        if (messagesController == null) {
            synchronized (MessagesController.class) {
                messagesController = Instance[i];
                if (messagesController == null) {
                    MessagesController[] messagesControllerArr = Instance;
                    MessagesController messagesController2 = new MessagesController(i);
                    messagesControllerArr[i] = messagesController2;
                    messagesController = messagesController2;
                }
            }
        }
        return messagesController;
    }

    public static SharedPreferences getNotificationsSettings(int i) {
        return getInstance(i).notificationsPreferences;
    }

    public static SharedPreferences getGlobalNotificationsSettings() {
        return getInstance(0).notificationsPreferences;
    }

    public static SharedPreferences getMainSettings(int i) {
        return getInstance(i).mainPreferences;
    }

    public static SharedPreferences getGlobalMainSettings() {
        return getInstance(0).mainPreferences;
    }

    public static SharedPreferences getEmojiSettings(int i) {
        return getInstance(i).emojiPreferences;
    }

    public static SharedPreferences getGlobalEmojiSettings() {
        return getInstance(0).emojiPreferences;
    }

    public MessagesController(int i) {
        super(i);
        int i2 = 2;
        this.loadingBlockedPeers = false;
        this.blockePeers = new LongSparseIntArray();
        this.totalBlockedCount = -1;
        this.channelViewsToSend = new LongSparseArray<>();
        this.pollsToCheck = new LongSparseArray<>();
        this.dialogFilters = new ArrayList<>();
        this.dialogFiltersById = new SparseArray<>();
        this.suggestedFilters = new ArrayList<>();
        this.updatesQueueChannels = new LongSparseArray<>();
        this.updatesStartWaitTimeChannels = new LongSparseLongArray();
        this.channelsPts = new LongSparseIntArray();
        this.gettingDifferenceChannels = new LongSparseArray<>();
        this.gettingChatInviters = new LongSparseArray<>();
        this.gettingUnknownChannels = new LongSparseArray<>();
        this.gettingUnknownDialogs = new LongSparseArray<>();
        this.checkingLastMessagesDialogs = new LongSparseArray<>();
        this.updatesQueueSeq = new ArrayList<>();
        this.updatesQueuePts = new ArrayList<>();
        this.updatesQueueQts = new ArrayList<>();
        this.fullUsers = new LongSparseArray<>();
        this.fullChats = new LongSparseArray<>();
        this.groupCalls = new LongSparseArray<>();
        this.groupCallsByChatId = new LongSparseArray<>();
        this.loadingFullUsers = new ArrayList<>();
        this.loadedFullUsers = new ArrayList<>();
        this.loadingFullChats = new ArrayList<>();
        this.loadingGroupCalls = new ArrayList<>();
        this.loadingFullParticipants = new ArrayList<>();
        this.loadedFullParticipants = new ArrayList<>();
        this.loadedFullChats = new ArrayList<>();
        this.channelAdmins = new LongSparseArray<>();
        this.loadingChannelAdmins = new LongSparseIntArray();
        this.migratedChats = new SparseIntArray();
        this.sponsoredMessages = new LongSparseArray<>();
        this.reloadingWebpages = new HashMap<>();
        this.reloadingWebpagesPending = new LongSparseArray<>();
        this.reloadingScheduledWebpages = new HashMap<>();
        this.reloadingScheduledWebpagesPending = new LongSparseArray<>();
        this.lastScheduledServerQueryTime = new LongSparseArray<>();
        this.lastServerQueryTime = new LongSparseArray<>();
        this.reloadingMessages = new LongSparseArray<>();
        this.readTasks = new ArrayList<>();
        this.readTasksMap = new LongSparseArray<>();
        this.repliesReadTasks = new ArrayList<>();
        this.threadsReadTasksMap = new HashMap<>();
        this.nextDialogsCacheOffset = new SparseIntArray();
        this.loadingDialogs = new SparseBooleanArray();
        this.dialogsEndReached = new SparseBooleanArray();
        this.serverDialogsEndReached = new SparseBooleanArray();
        this.getDifferenceFirstSync = true;
        this.loadingPinnedDialogs = new SparseIntArray();
        this.faqSearchArray = new ArrayList<>();
        this.suggestContacts = true;
        this.themeCheckRunnable = MessagesController$$ExternalSyntheticLambda195.INSTANCE;
        this.passwordCheckRunnable = new MessagesController$$ExternalSyntheticLambda12(this);
        this.uploadingThemes = new HashMap<>();
        this.maxBroadcastCount = 100;
        this.minGroupConvertSize = 200;
        this.gifSearchEmojies = new ArrayList<>();
        this.diceSuccess = new HashMap<>();
        this.emojiSounds = new HashMap<>();
        this.emojiInteractions = new HashMap<>();
        this.dialogDateComparator = new MessagesController$$ExternalSyntheticLambda196(this);
        this.dialogComparator = new MessagesController$$ExternalSyntheticLambda197(this);
        this.updatesComparator = new MessagesController$$ExternalSyntheticLambda198(this);
        this.DIALOGS_LOAD_TYPE_CACHE = 1;
        this.DIALOGS_LOAD_TYPE_CHANNEL = 2;
        this.DIALOGS_LOAD_TYPE_UNKNOWN = 3;
        this.currentAccount = i;
        ImageLoader.getInstance();
        getMessagesStorage();
        getLocationController();
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda11(this));
        addSupportUser();
        if (this.currentAccount == 0) {
            this.notificationsPreferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", 0);
            this.mainPreferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", 0);
            this.emojiPreferences = ApplicationLoader.applicationContext.getSharedPreferences("emoji", 0);
        } else {
            Context context = ApplicationLoader.applicationContext;
            this.notificationsPreferences = context.getSharedPreferences("Notifications" + this.currentAccount, 0);
            Context context2 = ApplicationLoader.applicationContext;
            this.mainPreferences = context2.getSharedPreferences("mainconfig" + this.currentAccount, 0);
            Context context3 = ApplicationLoader.applicationContext;
            this.emojiPreferences = context3.getSharedPreferences("emoji" + this.currentAccount, 0);
        }
        this.enableJoined = this.notificationsPreferences.getBoolean("EnableContactJoined", true);
        this.secretWebpagePreview = this.mainPreferences.getInt("secretWebpage2", 2);
        this.maxGroupCount = this.mainPreferences.getInt("maxGroupCount", 200);
        this.maxMegagroupCount = this.mainPreferences.getInt("maxMegagroupCount", 10000);
        this.maxRecentGifsCount = this.mainPreferences.getInt("maxRecentGifsCount", 200);
        this.maxRecentStickersCount = this.mainPreferences.getInt("maxRecentStickersCount", 30);
        this.maxFaveStickersCount = this.mainPreferences.getInt("maxFaveStickersCount", 5);
        this.maxEditTime = this.mainPreferences.getInt("maxEditTime", 3600);
        this.ratingDecay = this.mainPreferences.getInt("ratingDecay", 2419200);
        this.linkPrefix = this.mainPreferences.getString("linkPrefix", "t.me");
        this.callReceiveTimeout = this.mainPreferences.getInt("callReceiveTimeout", 20000);
        this.callRingTimeout = this.mainPreferences.getInt("callRingTimeout", 90000);
        this.callConnectTimeout = this.mainPreferences.getInt("callConnectTimeout", 30000);
        this.callPacketTimeout = this.mainPreferences.getInt("callPacketTimeout", 10000);
        this.updateCheckDelay = this.mainPreferences.getInt("updateCheckDelay", 86400);
        this.maxPinnedDialogsCount = this.mainPreferences.getInt("maxPinnedDialogsCount", 5);
        this.maxFolderPinnedDialogsCount = this.mainPreferences.getInt("maxFolderPinnedDialogsCount", 100);
        this.maxMessageLength = this.mainPreferences.getInt("maxMessageLength", 4096);
        this.maxCaptionLength = this.mainPreferences.getInt("maxCaptionLength", 1024);
        this.mapProvider = this.mainPreferences.getInt("mapProvider", 0);
        this.availableMapProviders = this.mainPreferences.getInt("availableMapProviders", 3);
        this.mapKey = this.mainPreferences.getString("pk", (String) null);
        this.installReferer = this.mainPreferences.getString("installReferer", (String) null);
        this.revokeTimeLimit = this.mainPreferences.getInt("revokeTimeLimit", this.revokeTimeLimit);
        this.revokeTimePmLimit = this.mainPreferences.getInt("revokeTimePmLimit", this.revokeTimePmLimit);
        this.canRevokePmInbox = this.mainPreferences.getBoolean("canRevokePmInbox", this.canRevokePmInbox);
        this.preloadFeaturedStickers = this.mainPreferences.getBoolean("preloadFeaturedStickers", false);
        this.youtubePipType = this.mainPreferences.getString("youtubePipType", "disabled");
        this.keepAliveService = this.mainPreferences.getBoolean("keepAliveService", false);
        this.backgroundConnection = this.mainPreferences.getBoolean("keepAliveService", false);
        this.promoDialogId = this.mainPreferences.getLong("proxy_dialog", 0);
        this.nextPromoInfoCheckTime = this.mainPreferences.getInt("nextPromoInfoCheckTime", 0);
        this.promoDialogType = this.mainPreferences.getInt("promo_dialog_type", 0);
        this.promoPsaMessage = this.mainPreferences.getString("promo_psa_message", (String) null);
        this.promoPsaType = this.mainPreferences.getString("promo_psa_type", (String) null);
        this.proxyDialogAddress = this.mainPreferences.getString("proxyDialogAddress", (String) null);
        this.nextTosCheckTime = this.notificationsPreferences.getInt("nextTosCheckTime", 0);
        this.venueSearchBot = this.mainPreferences.getString("venueSearchBot", "foursquare");
        this.gifSearchBot = this.mainPreferences.getString("gifSearchBot", "gif");
        this.imageSearchBot = this.mainPreferences.getString("imageSearchBot", "pic");
        this.blockedCountry = this.mainPreferences.getBoolean("blockedCountry", false);
        this.dcDomainName = this.mainPreferences.getString("dcDomainName2", ConnectionsManager.native_isTestBackend(this.currentAccount) != 0 ? "tapv3.stel.com" : "apv3.stel.com");
        this.webFileDatacenterId = this.mainPreferences.getInt("webFileDatacenterId", ConnectionsManager.native_isTestBackend(this.currentAccount) == 0 ? 4 : i2);
        this.suggestedLangCode = this.mainPreferences.getString("suggestedLangCode", "en");
        this.animatedEmojisZoom = this.mainPreferences.getFloat("animatedEmojisZoom", 0.625f);
        this.qrLoginCamera = this.mainPreferences.getBoolean("qrLoginCamera", false);
        this.saveGifsWithStickers = this.mainPreferences.getBoolean("saveGifsWithStickers", false);
        this.filtersEnabled = this.mainPreferences.getBoolean("filtersEnabled", false);
        this.showFiltersTooltip = this.mainPreferences.getBoolean("showFiltersTooltip", false);
        this.autoarchiveAvailable = this.mainPreferences.getBoolean("autoarchiveAvailable", false);
        this.groipCallVideoMaxParticipants = this.mainPreferences.getInt("groipCallVideoMaxParticipants", 30);
        this.suggestStickersApiOnly = this.mainPreferences.getBoolean("suggestStickersApiOnly", false);
        this.roundVideoSize = this.mainPreferences.getInt("roundVideoSize", 384);
        this.roundVideoBitrate = this.mainPreferences.getInt("roundVideoBitrate", 1000);
        this.roundAudioBitrate = this.mainPreferences.getInt("roundAudioBitrate", 64);
        Set<String> stringSet = this.mainPreferences.getStringSet("pendingSuggestions", (Set) null);
        this.pendingSuggestions = stringSet;
        if (stringSet != null) {
            this.pendingSuggestions = new HashSet(this.pendingSuggestions);
        } else {
            this.pendingSuggestions = new HashSet();
        }
        Set<String> stringSet2 = this.mainPreferences.getStringSet("exportUri2", (Set) null);
        this.exportUri = stringSet2;
        if (stringSet2 != null) {
            this.exportUri = new HashSet(this.exportUri);
        } else {
            HashSet hashSet = new HashSet();
            this.exportUri = hashSet;
            hashSet.add("content://(\\d+@)?com\\.whatsapp\\.provider\\.media/export_chat/");
            this.exportUri.add("content://(\\d+@)?com\\.whatsapp\\.w4b\\.provider\\.media/export_chat/");
            this.exportUri.add("content://jp\\.naver\\.line\\.android\\.line\\.common\\.FileProvider/export-chat/");
            this.exportUri.add(".*WhatsApp.*\\.txt$");
        }
        Set<String> stringSet3 = this.mainPreferences.getStringSet("exportGroupUri", (Set) null);
        this.exportGroupUri = stringSet3;
        if (stringSet3 != null) {
            this.exportGroupUri = new HashSet(this.exportGroupUri);
        } else {
            HashSet hashSet2 = new HashSet();
            this.exportGroupUri = hashSet2;
            hashSet2.add("@g.us/");
        }
        Set<String> stringSet4 = this.mainPreferences.getStringSet("exportPrivateUri", (Set) null);
        this.exportPrivateUri = stringSet4;
        if (stringSet4 != null) {
            this.exportPrivateUri = new HashSet(this.exportPrivateUri);
        } else {
            HashSet hashSet3 = new HashSet();
            this.exportPrivateUri = hashSet3;
            hashSet3.add("@s.whatsapp.net/");
        }
        Set<String> stringSet5 = this.mainPreferences.getStringSet("autologinDomains", (Set) null);
        this.autologinDomains = stringSet5;
        if (stringSet5 != null) {
            this.autologinDomains = new HashSet(this.autologinDomains);
        } else {
            this.autologinDomains = new HashSet();
        }
        Set<String> stringSet6 = this.mainPreferences.getStringSet("authDomains", (Set) null);
        this.authDomains = stringSet6;
        if (stringSet6 != null) {
            this.authDomains = new HashSet(this.authDomains);
        } else {
            this.authDomains = new HashSet();
        }
        this.autologinToken = this.mainPreferences.getString("autologinToken", (String) null);
        Set<String> stringSet7 = this.mainPreferences.getStringSet("diceEmojies", (Set) null);
        if (stringSet7 == null) {
            HashSet<String> hashSet4 = new HashSet<>();
            this.diceEmojies = hashSet4;
            hashSet4.add("🎲");
            this.diceEmojies.add("🎯");
        } else {
            this.diceEmojies = new HashSet<>(stringSet7);
        }
        String string = this.mainPreferences.getString("diceSuccess", (String) null);
        if (string == null) {
            this.diceSuccess.put("🎯", new DiceFrameSuccess(62, 6));
        } else {
            try {
                byte[] decode = Base64.decode(string, 0);
                if (decode != null) {
                    SerializedData serializedData = new SerializedData(decode);
                    int readInt32 = serializedData.readInt32(true);
                    for (int i3 = 0; i3 < readInt32; i3++) {
                        this.diceSuccess.put(serializedData.readString(true), new DiceFrameSuccess(serializedData.readInt32(true), serializedData.readInt32(true)));
                    }
                    serializedData.cleanup();
                }
            } catch (Exception e) {
                FileLog.e((Throwable) e);
            }
        }
        String string2 = this.mainPreferences.getString("emojiSounds", (String) null);
        if (string2 != null) {
            try {
                byte[] decode2 = Base64.decode(string2, 0);
                if (decode2 != null) {
                    SerializedData serializedData2 = new SerializedData(decode2);
                    int readInt322 = serializedData2.readInt32(true);
                    for (int i4 = 0; i4 < readInt322; i4++) {
                        this.emojiSounds.put(serializedData2.readString(true), new EmojiSound(serializedData2.readInt64(true), serializedData2.readInt64(true), serializedData2.readByteArray(true)));
                    }
                    serializedData2.cleanup();
                }
            } catch (Exception e2) {
                FileLog.e((Throwable) e2);
            }
        }
        String string3 = this.mainPreferences.getString("gifSearchEmojies", (String) null);
        if (string3 == null) {
            this.gifSearchEmojies.add("👍");
            this.gifSearchEmojies.add("👎");
            this.gifSearchEmojies.add("😍");
            this.gifSearchEmojies.add("😂");
            this.gifSearchEmojies.add("😮");
            this.gifSearchEmojies.add("🙄");
            this.gifSearchEmojies.add("😥");
            this.gifSearchEmojies.add("😡");
            this.gifSearchEmojies.add("🥳");
            this.gifSearchEmojies.add("😎");
            return;
        }
        try {
            byte[] decode3 = Base64.decode(string3, 0);
            if (decode3 != null) {
                SerializedData serializedData3 = new SerializedData(decode3);
                int readInt323 = serializedData3.readInt32(true);
                for (int i5 = 0; i5 < readInt323; i5++) {
                    this.gifSearchEmojies.add(serializedData3.readString(true));
                }
                serializedData3.cleanup();
            }
        } catch (Exception e3) {
            FileLog.e((Throwable) e3);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$new$4() {
        MessagesController messagesController = getMessagesController();
        getNotificationCenter().addObserver(messagesController, NotificationCenter.fileUploaded);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.fileUploadFailed);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.fileLoaded);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.fileLoadFailed);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.messageReceivedByServer);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.updateMessageMedia);
    }

    private void sendLoadPeersRequest(TLObject tLObject, ArrayList<TLObject> arrayList, TLRPC$messages_Dialogs tLRPC$messages_Dialogs, TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, ArrayList<TLRPC$User> arrayList2, ArrayList<TLRPC$Chat> arrayList3, ArrayList<DialogFilter> arrayList4, SparseArray<DialogFilter> sparseArray, ArrayList<Integer> arrayList5, HashMap<Integer, HashSet<Long>> hashMap, HashMap<Integer, HashSet<Long>> hashMap2, HashSet<Integer> hashSet) {
        getConnectionsManager().sendRequest(tLObject, new MessagesController$$ExternalSyntheticLambda282(this, arrayList3, arrayList2, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, tLObject, arrayList4, sparseArray, arrayList5, hashMap, hashMap2, hashSet));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$sendLoadPeersRequest$5(ArrayList arrayList, ArrayList arrayList2, TLRPC$messages_Dialogs tLRPC$messages_Dialogs, TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, ArrayList arrayList3, TLObject tLObject, ArrayList arrayList4, SparseArray sparseArray, ArrayList arrayList5, HashMap hashMap, HashMap hashMap2, HashSet hashSet, TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error) {
        ArrayList arrayList6 = arrayList;
        ArrayList arrayList7 = arrayList2;
        TLRPC$messages_Dialogs tLRPC$messages_Dialogs3 = tLRPC$messages_Dialogs;
        TLRPC$messages_Dialogs tLRPC$messages_Dialogs4 = tLRPC$messages_Dialogs2;
        TLObject tLObject3 = tLObject2;
        if (tLObject3 instanceof TLRPC$TL_messages_chats) {
            arrayList.addAll(((TLRPC$TL_messages_chats) tLObject3).chats);
        } else if (tLObject3 instanceof TLRPC$Vector) {
            TLRPC$Vector tLRPC$Vector = (TLRPC$Vector) tLObject3;
            int size = tLRPC$Vector.objects.size();
            for (int i = 0; i < size; i++) {
                arrayList2.add((TLRPC$User) tLRPC$Vector.objects.get(i));
            }
        } else if (tLObject3 instanceof TLRPC$TL_messages_peerDialogs) {
            TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject3;
            tLRPC$messages_Dialogs3.dialogs.addAll(tLRPC$TL_messages_peerDialogs.dialogs);
            tLRPC$messages_Dialogs3.messages.addAll(tLRPC$TL_messages_peerDialogs.messages);
            tLRPC$messages_Dialogs4.dialogs.addAll(tLRPC$TL_messages_peerDialogs.dialogs);
            tLRPC$messages_Dialogs4.messages.addAll(tLRPC$TL_messages_peerDialogs.messages);
            arrayList2.addAll(tLRPC$TL_messages_peerDialogs.users);
            arrayList.addAll(tLRPC$TL_messages_peerDialogs.chats);
        }
        arrayList3.remove(tLObject);
        if (arrayList3.isEmpty()) {
            getMessagesStorage().processLoadedFilterPeers(tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList2, arrayList, arrayList4, sparseArray, arrayList5, hashMap, hashMap2, hashSet);
        }
    }

    /* access modifiers changed from: protected */
    public void loadFilterPeers(HashMap<Long, TLRPC$InputPeer> hashMap, HashMap<Long, TLRPC$InputPeer> hashMap2, HashMap<Long, TLRPC$InputPeer> hashMap3, TLRPC$messages_Dialogs tLRPC$messages_Dialogs, TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, ArrayList<TLRPC$User> arrayList, ArrayList<TLRPC$Chat> arrayList2, ArrayList<DialogFilter> arrayList3, SparseArray<DialogFilter> sparseArray, ArrayList<Integer> arrayList4, HashMap<Integer, HashSet<Long>> hashMap4, HashMap<Integer, HashSet<Long>> hashMap5, HashSet<Integer> hashSet) {
        DispatchQueue dispatchQueue = Utilities.stageQueue;
        MessagesController$$ExternalSyntheticLambda108 messagesController$$ExternalSyntheticLambda108 = r1;
        MessagesController$$ExternalSyntheticLambda108 messagesController$$ExternalSyntheticLambda1082 = new MessagesController$$ExternalSyntheticLambda108(this, hashMap2, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap4, hashMap5, hashSet, hashMap3, hashMap);
        dispatchQueue.postRunnable(messagesController$$ExternalSyntheticLambda108);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadFilterPeers$6(HashMap hashMap, TLRPC$messages_Dialogs tLRPC$messages_Dialogs, TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, ArrayList arrayList, ArrayList arrayList2, ArrayList arrayList3, SparseArray sparseArray, ArrayList arrayList4, HashMap hashMap2, HashMap hashMap3, HashSet hashSet, HashMap hashMap4, HashMap hashMap5) {
        TLRPC$TL_users_getUsers tLRPC$TL_users_getUsers;
        int i;
        TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs;
        TLRPC$TL_channels_getChannels tLRPC$TL_channels_getChannels;
        TLRPC$TL_messages_getChats tLRPC$TL_messages_getChats;
        ArrayList arrayList5 = new ArrayList();
        loop0:
        while (true) {
            tLRPC$TL_users_getUsers = null;
            for (Map.Entry entry : hashMap.entrySet()) {
                if (tLRPC$TL_users_getUsers == null) {
                    tLRPC$TL_users_getUsers = new TLRPC$TL_users_getUsers();
                    arrayList5.add(tLRPC$TL_users_getUsers);
                }
                tLRPC$TL_users_getUsers.id.add(getInputUser((TLRPC$InputPeer) entry.getValue()));
                if (tLRPC$TL_users_getUsers.id.size() == 100) {
                    sendLoadPeersRequest(tLRPC$TL_users_getUsers, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashMap3, hashSet);
                }
            }
            break loop0;
        }
        if (tLRPC$TL_users_getUsers != null) {
            i = 100;
            sendLoadPeersRequest(tLRPC$TL_users_getUsers, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashMap3, hashSet);
        } else {
            i = 100;
        }
        TLRPC$TL_messages_getChats tLRPC$TL_messages_getChats2 = null;
        TLRPC$TL_channels_getChannels tLRPC$TL_channels_getChannels2 = null;
        for (Map.Entry entry2 : hashMap4.entrySet()) {
            TLRPC$InputPeer tLRPC$InputPeer = (TLRPC$InputPeer) entry2.getValue();
            if (tLRPC$InputPeer.chat_id != 0) {
                if (tLRPC$TL_messages_getChats2 == null) {
                    tLRPC$TL_messages_getChats = new TLRPC$TL_messages_getChats();
                    arrayList5.add(tLRPC$TL_messages_getChats);
                } else {
                    tLRPC$TL_messages_getChats = tLRPC$TL_messages_getChats2;
                }
                tLRPC$TL_messages_getChats.id.add((Long) entry2.getKey());
                if (tLRPC$TL_messages_getChats.id.size() == i) {
                    sendLoadPeersRequest(tLRPC$TL_messages_getChats, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashMap3, hashSet);
                    tLRPC$TL_messages_getChats2 = null;
                } else {
                    tLRPC$TL_messages_getChats2 = tLRPC$TL_messages_getChats;
                }
            } else if (tLRPC$InputPeer.channel_id != 0) {
                if (tLRPC$TL_channels_getChannels2 == null) {
                    TLRPC$TL_channels_getChannels tLRPC$TL_channels_getChannels3 = new TLRPC$TL_channels_getChannels();
                    arrayList5.add(tLRPC$TL_channels_getChannels3);
                    tLRPC$TL_channels_getChannels = tLRPC$TL_channels_getChannels3;
                } else {
                    tLRPC$TL_channels_getChannels = tLRPC$TL_channels_getChannels2;
                }
                tLRPC$TL_channels_getChannels.id.add(getInputChannel(tLRPC$InputPeer));
                if (tLRPC$TL_channels_getChannels.id.size() == i) {
                    sendLoadPeersRequest(tLRPC$TL_channels_getChannels, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashMap3, hashSet);
                    tLRPC$TL_channels_getChannels2 = null;
                } else {
                    tLRPC$TL_channels_getChannels2 = tLRPC$TL_channels_getChannels;
                }
            }
        }
        if (tLRPC$TL_messages_getChats2 != null) {
            sendLoadPeersRequest(tLRPC$TL_messages_getChats2, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashMap3, hashSet);
        }
        if (tLRPC$TL_channels_getChannels2 != null) {
            sendLoadPeersRequest(tLRPC$TL_channels_getChannels2, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashMap3, hashSet);
        }
        loop3:
        while (true) {
            tLRPC$TL_messages_getPeerDialogs = null;
            for (Map.Entry entry3 : hashMap5.entrySet()) {
                if (tLRPC$TL_messages_getPeerDialogs == null) {
                    tLRPC$TL_messages_getPeerDialogs = new TLRPC$TL_messages_getPeerDialogs();
                    arrayList5.add(tLRPC$TL_messages_getPeerDialogs);
                }
                TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
                tLRPC$TL_inputDialogPeer.peer = (TLRPC$InputPeer) entry3.getValue();
                tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer);
                if (tLRPC$TL_messages_getPeerDialogs.peers.size() == i) {
                    sendLoadPeersRequest(tLRPC$TL_messages_getPeerDialogs, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashMap3, hashSet);
                }
            }
            break loop3;
        }
        if (tLRPC$TL_messages_getPeerDialogs != null) {
            sendLoadPeersRequest(tLRPC$TL_messages_getPeerDialogs, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashMap3, hashSet);
        }
    }

    /* access modifiers changed from: protected */
    public void processLoadedDialogFilters(ArrayList<DialogFilter> arrayList, TLRPC$messages_Dialogs tLRPC$messages_Dialogs, TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, ArrayList<TLRPC$User> arrayList2, ArrayList<TLRPC$Chat> arrayList3, ArrayList<TLRPC$EncryptedChat> arrayList4, int i) {
        Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda172(this, tLRPC$messages_Dialogs, arrayList4, tLRPC$messages_Dialogs2, i, arrayList, arrayList2, arrayList3));
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Code restructure failed: missing block: B:25:0x00a5, code lost:
        if (r6 == (-r3.id)) goto L_0x00bc;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:32:0x00b9, code lost:
        if (r3.migrated_to != null) goto L_0x00a7;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$processLoadedDialogFilters$9(org.telegram.tgnet.TLRPC$messages_Dialogs r20, java.util.ArrayList r21, org.telegram.tgnet.TLRPC$messages_Dialogs r22, int r23, java.util.ArrayList r24, java.util.ArrayList r25, java.util.ArrayList r26) {
        /*
            r19 = this;
            r10 = r19
            r0 = r20
            r7 = r21
            r6 = r22
            androidx.collection.LongSparseArray r8 = new androidx.collection.LongSparseArray
            r8.<init>()
            androidx.collection.LongSparseArray r9 = new androidx.collection.LongSparseArray
            r9.<init>()
            androidx.collection.LongSparseArray r1 = new androidx.collection.LongSparseArray
            r1.<init>()
            androidx.collection.LongSparseArray r2 = new androidx.collection.LongSparseArray
            r2.<init>()
            r3 = 0
            java.lang.Integer r4 = java.lang.Integer.valueOf(r3)
            r5 = 0
        L_0x0022:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r11 = r0.users
            int r11 = r11.size()
            if (r5 >= r11) goto L_0x003a
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r11 = r0.users
            java.lang.Object r11 = r11.get(r5)
            org.telegram.tgnet.TLRPC$User r11 = (org.telegram.tgnet.TLRPC$User) r11
            long r12 = r11.id
            r1.put(r12, r11)
            int r5 = r5 + 1
            goto L_0x0022
        L_0x003a:
            r5 = 0
        L_0x003b:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r11 = r0.chats
            int r11 = r11.size()
            if (r5 >= r11) goto L_0x0053
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r11 = r0.chats
            java.lang.Object r11 = r11.get(r5)
            org.telegram.tgnet.TLRPC$Chat r11 = (org.telegram.tgnet.TLRPC$Chat) r11
            long r12 = r11.id
            r2.put(r12, r11)
            int r5 = r5 + 1
            goto L_0x003b
        L_0x0053:
            if (r7 == 0) goto L_0x006f
            android.util.SparseArray r5 = new android.util.SparseArray
            r5.<init>()
            int r11 = r21.size()
            r12 = 0
        L_0x005f:
            if (r12 >= r11) goto L_0x0070
            java.lang.Object r13 = r7.get(r12)
            org.telegram.tgnet.TLRPC$EncryptedChat r13 = (org.telegram.tgnet.TLRPC$EncryptedChat) r13
            int r14 = r13.id
            r5.put(r14, r13)
            int r12 = r12 + 1
            goto L_0x005f
        L_0x006f:
            r5 = 0
        L_0x0070:
            r15 = 0
        L_0x0071:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r11 = r0.messages
            int r11 = r11.size()
            r12 = 0
            if (r15 >= r11) goto L_0x00dd
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r11 = r0.messages
            java.lang.Object r11 = r11.get(r15)
            r14 = r11
            org.telegram.tgnet.TLRPC$Message r14 = (org.telegram.tgnet.TLRPC$Message) r14
            org.telegram.tgnet.TLRPC$Peer r11 = r14.peer_id
            r18 = r4
            long r3 = r11.channel_id
            int r16 = (r3 > r12 ? 1 : (r3 == r12 ? 0 : -1))
            if (r16 == 0) goto L_0x00a9
            java.lang.Object r3 = r2.get(r3)
            org.telegram.tgnet.TLRPC$Chat r3 = (org.telegram.tgnet.TLRPC$Chat) r3
            if (r3 == 0) goto L_0x00bc
            boolean r4 = r3.left
            if (r4 == 0) goto L_0x00bc
            long r6 = r10.promoDialogId
            int r4 = (r6 > r12 ? 1 : (r6 == r12 ? 0 : -1))
            if (r4 == 0) goto L_0x00a7
            long r3 = r3.id
            long r3 = -r3
            int r11 = (r6 > r3 ? 1 : (r6 == r3 ? 0 : -1))
            if (r11 == 0) goto L_0x00bc
        L_0x00a7:
            r4 = r15
            goto L_0x00d3
        L_0x00a9:
            long r3 = r11.chat_id
            int r6 = (r3 > r12 ? 1 : (r3 == r12 ? 0 : -1))
            if (r6 == 0) goto L_0x00bc
            java.lang.Object r3 = r2.get(r3)
            org.telegram.tgnet.TLRPC$Chat r3 = (org.telegram.tgnet.TLRPC$Chat) r3
            if (r3 == 0) goto L_0x00bc
            org.telegram.tgnet.TLRPC$InputChannel r3 = r3.migrated_to
            if (r3 == 0) goto L_0x00bc
            goto L_0x00a7
        L_0x00bc:
            org.telegram.messenger.MessageObject r3 = new org.telegram.messenger.MessageObject
            int r12 = r10.currentAccount
            r16 = 0
            r17 = 1
            r11 = r3
            r13 = r14
            r14 = r1
            r4 = r15
            r15 = r2
            r11.<init>((int) r12, (org.telegram.tgnet.TLRPC$Message) r13, (androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$User>) r14, (androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Chat>) r15, (boolean) r16, (boolean) r17)
            long r6 = r3.getDialogId()
            r9.put(r6, r3)
        L_0x00d3:
            int r15 = r4 + 1
            r7 = r21
            r6 = r22
            r4 = r18
            r3 = 0
            goto L_0x0071
        L_0x00dd:
            r18 = r4
            r3 = 0
        L_0x00e0:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r4 = r0.dialogs
            int r4 = r4.size()
            if (r3 >= r4) goto L_0x01d4
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r4 = r0.dialogs
            java.lang.Object r4 = r4.get(r3)
            org.telegram.tgnet.TLRPC$Dialog r4 = (org.telegram.tgnet.TLRPC$Dialog) r4
            org.telegram.messenger.DialogObject.initDialog(r4)
            long r6 = r4.id
            int r11 = (r6 > r12 ? 1 : (r6 == r12 ? 0 : -1))
            if (r11 != 0) goto L_0x00fb
            goto L_0x01d0
        L_0x00fb:
            boolean r6 = org.telegram.messenger.DialogObject.isEncryptedDialog(r6)
            if (r6 == 0) goto L_0x0111
            if (r5 == 0) goto L_0x0111
            long r6 = r4.id
            int r6 = org.telegram.messenger.DialogObject.getEncryptedChatId(r6)
            java.lang.Object r6 = r5.get(r6)
            if (r6 != 0) goto L_0x0111
            goto L_0x01d0
        L_0x0111:
            long r6 = r10.promoDialogId
            int r11 = (r6 > r12 ? 1 : (r6 == r12 ? 0 : -1))
            if (r11 == 0) goto L_0x011f
            long r14 = r4.id
            int r11 = (r6 > r14 ? 1 : (r6 == r14 ? 0 : -1))
            if (r11 != 0) goto L_0x011f
            r10.promoDialog = r4
        L_0x011f:
            int r6 = r4.last_message_date
            if (r6 != 0) goto L_0x0133
            long r6 = r4.id
            java.lang.Object r6 = r9.get(r6)
            org.telegram.messenger.MessageObject r6 = (org.telegram.messenger.MessageObject) r6
            if (r6 == 0) goto L_0x0133
            org.telegram.tgnet.TLRPC$Message r6 = r6.messageOwner
            int r6 = r6.date
            r4.last_message_date = r6
        L_0x0133:
            boolean r6 = org.telegram.messenger.DialogObject.isChannel(r4)
            if (r6 == 0) goto L_0x0161
            long r6 = r4.id
            long r6 = -r6
            java.lang.Object r6 = r2.get(r6)
            org.telegram.tgnet.TLRPC$Chat r6 = (org.telegram.tgnet.TLRPC$Chat) r6
            if (r6 == 0) goto L_0x0156
            boolean r6 = r6.left
            if (r6 == 0) goto L_0x0156
            long r6 = r10.promoDialogId
            int r11 = (r6 > r12 ? 1 : (r6 == r12 ? 0 : -1))
            if (r11 == 0) goto L_0x01d0
            long r14 = r4.id
            int r11 = (r6 > r14 ? 1 : (r6 == r14 ? 0 : -1))
            if (r11 == 0) goto L_0x0156
            goto L_0x01d0
        L_0x0156:
            org.telegram.messenger.support.LongSparseIntArray r6 = r10.channelsPts
            long r14 = r4.id
            long r14 = -r14
            int r7 = r4.pts
            r6.put(r14, r7)
            goto L_0x0175
        L_0x0161:
            long r6 = r4.id
            int r11 = (r6 > r12 ? 1 : (r6 == r12 ? 0 : -1))
            if (r11 >= 0) goto L_0x0175
            long r6 = -r6
            java.lang.Object r6 = r2.get(r6)
            org.telegram.tgnet.TLRPC$Chat r6 = (org.telegram.tgnet.TLRPC$Chat) r6
            if (r6 == 0) goto L_0x0175
            org.telegram.tgnet.TLRPC$InputChannel r6 = r6.migrated_to
            if (r6 == 0) goto L_0x0175
            goto L_0x01d0
        L_0x0175:
            long r6 = r4.id
            r8.put(r6, r4)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r6 = r10.dialogs_read_inbox_max
            long r14 = r4.id
            java.lang.Long r7 = java.lang.Long.valueOf(r14)
            java.lang.Object r6 = r6.get(r7)
            java.lang.Integer r6 = (java.lang.Integer) r6
            if (r6 != 0) goto L_0x018c
            r6 = r18
        L_0x018c:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r7 = r10.dialogs_read_inbox_max
            long r14 = r4.id
            java.lang.Long r11 = java.lang.Long.valueOf(r14)
            int r6 = r6.intValue()
            int r14 = r4.read_inbox_max_id
            int r6 = java.lang.Math.max(r6, r14)
            java.lang.Integer r6 = java.lang.Integer.valueOf(r6)
            r7.put(r11, r6)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r6 = r10.dialogs_read_outbox_max
            long r14 = r4.id
            java.lang.Long r7 = java.lang.Long.valueOf(r14)
            java.lang.Object r6 = r6.get(r7)
            java.lang.Integer r6 = (java.lang.Integer) r6
            if (r6 != 0) goto L_0x01b7
            r6 = r18
        L_0x01b7:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r7 = r10.dialogs_read_outbox_max
            long r14 = r4.id
            java.lang.Long r11 = java.lang.Long.valueOf(r14)
            int r6 = r6.intValue()
            int r4 = r4.read_outbox_max_id
            int r4 = java.lang.Math.max(r6, r4)
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)
            r7.put(r11, r4)
        L_0x01d0:
            int r3 = r3 + 1
            goto L_0x00e0
        L_0x01d4:
            r6 = r22
            if (r6 == 0) goto L_0x0272
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r0 = r6.dialogs
            boolean r0 = r0.isEmpty()
            if (r0 != 0) goto L_0x0272
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r0 = r6.messages
            org.telegram.messenger.ImageLoader.saveMessagesThumbs(r0)
            r0 = 0
        L_0x01e6:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r2 = r6.messages
            int r2 = r2.size()
            if (r0 >= r2) goto L_0x026a
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r2 = r6.messages
            java.lang.Object r2 = r2.get(r0)
            org.telegram.tgnet.TLRPC$Message r2 = (org.telegram.tgnet.TLRPC$Message) r2
            org.telegram.tgnet.TLRPC$MessageAction r3 = r2.action
            boolean r4 = r3 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatDeleteUser
            if (r4 == 0) goto L_0x0217
            long r3 = r3.user_id
            java.lang.Object r3 = r1.get(r3)
            org.telegram.tgnet.TLRPC$User r3 = (org.telegram.tgnet.TLRPC$User) r3
            if (r3 == 0) goto L_0x0217
            boolean r3 = r3.bot
            if (r3 == 0) goto L_0x0217
            org.telegram.tgnet.TLRPC$TL_replyKeyboardHide r3 = new org.telegram.tgnet.TLRPC$TL_replyKeyboardHide
            r3.<init>()
            r2.reply_markup = r3
            int r3 = r2.flags
            r3 = r3 | 64
            r2.flags = r3
        L_0x0217:
            org.telegram.tgnet.TLRPC$MessageAction r3 = r2.action
            boolean r4 = r3 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatMigrateTo
            if (r4 != 0) goto L_0x0261
            boolean r3 = r3 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChannelCreate
            if (r3 == 0) goto L_0x0222
            goto L_0x0261
        L_0x0222:
            boolean r3 = r2.out
            if (r3 == 0) goto L_0x0229
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r3 = r10.dialogs_read_outbox_max
            goto L_0x022b
        L_0x0229:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r3 = r10.dialogs_read_inbox_max
        L_0x022b:
            long r4 = r2.dialog_id
            java.lang.Long r4 = java.lang.Long.valueOf(r4)
            java.lang.Object r4 = r3.get(r4)
            java.lang.Integer r4 = (java.lang.Integer) r4
            if (r4 != 0) goto L_0x0252
            org.telegram.messenger.MessagesStorage r4 = r19.getMessagesStorage()
            boolean r5 = r2.out
            long r11 = r2.dialog_id
            int r4 = r4.getDialogReadMax(r5, r11)
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)
            long r11 = r2.dialog_id
            java.lang.Long r5 = java.lang.Long.valueOf(r11)
            r3.put(r5, r4)
        L_0x0252:
            int r3 = r4.intValue()
            int r4 = r2.id
            if (r3 >= r4) goto L_0x025c
            r3 = 1
            goto L_0x025d
        L_0x025c:
            r3 = 0
        L_0x025d:
            r2.unread = r3
            r3 = 0
            goto L_0x0266
        L_0x0261:
            r3 = 0
            r2.unread = r3
            r2.media_unread = r3
        L_0x0266:
            int r0 = r0 + 1
            goto L_0x01e6
        L_0x026a:
            r3 = 0
            org.telegram.messenger.MessagesStorage r0 = r19.getMessagesStorage()
            r0.putDialogs(r6, r3)
        L_0x0272:
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda39 r11 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda39
            r0 = r11
            r1 = r19
            r2 = r23
            r3 = r24
            r4 = r25
            r5 = r26
            r6 = r22
            r7 = r21
            r0.<init>(r1, r2, r3, r4, r5, r6, r7, r8, r9)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r11)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$processLoadedDialogFilters$9(org.telegram.tgnet.TLRPC$messages_Dialogs, java.util.ArrayList, org.telegram.tgnet.TLRPC$messages_Dialogs, int, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList):void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processLoadedDialogFilters$8(int i, ArrayList arrayList, ArrayList arrayList2, ArrayList arrayList3, TLRPC$messages_Dialogs tLRPC$messages_Dialogs, ArrayList arrayList4, LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        int i2 = i;
        TLRPC$messages_Dialogs tLRPC$messages_Dialogs2 = tLRPC$messages_Dialogs;
        ArrayList arrayList5 = arrayList4;
        LongSparseArray longSparseArray3 = longSparseArray;
        if (i2 != 2) {
            this.dialogFilters = arrayList;
            this.dialogFiltersById.clear();
            int size = this.dialogFilters.size();
            for (int i3 = 0; i3 < size; i3++) {
                DialogFilter dialogFilter = this.dialogFilters.get(i3);
                this.dialogFiltersById.put(dialogFilter.id, dialogFilter);
            }
            Collections.sort(this.dialogFilters, MessagesController$$ExternalSyntheticLambda200.INSTANCE);
            putUsers(arrayList2, true);
            putChats(arrayList3, true);
            this.dialogFiltersLoaded = true;
            getNotificationCenter().postNotificationName(NotificationCenter.dialogFiltersUpdated, new Object[0]);
            if (i2 == 0) {
                loadRemoteFilters(false);
            }
            if (tLRPC$messages_Dialogs2 != null && !tLRPC$messages_Dialogs2.dialogs.isEmpty()) {
                applyDialogsNotificationsSettings(tLRPC$messages_Dialogs2.dialogs);
            }
            if (arrayList5 != null) {
                for (int i4 = 0; i4 < arrayList4.size(); i4++) {
                    TLRPC$EncryptedChat tLRPC$EncryptedChat = (TLRPC$EncryptedChat) arrayList5.get(i4);
                    if ((tLRPC$EncryptedChat instanceof TLRPC$TL_encryptedChat) && AndroidUtilities.getMyLayerVersion(tLRPC$EncryptedChat.layer) < SecretChatHelper.CURRENT_SECRET_CHAT_LAYER) {
                        getSecretChatHelper().sendNotifyLayerMessage(tLRPC$EncryptedChat, (TLRPC$Message) null);
                    }
                    putEncryptedChat(tLRPC$EncryptedChat, true);
                }
            }
            for (int i5 = 0; i5 < longSparseArray.size(); i5++) {
                long keyAt = longSparseArray3.keyAt(i5);
                TLRPC$Dialog tLRPC$Dialog = (TLRPC$Dialog) longSparseArray3.valueAt(i5);
                TLRPC$Dialog tLRPC$Dialog2 = this.dialogs_dict.get(keyAt);
                if (tLRPC$messages_Dialogs2 != null && tLRPC$messages_Dialogs2.dialogs.contains(tLRPC$Dialog)) {
                    if (tLRPC$Dialog.draft instanceof TLRPC$TL_draftMessage) {
                        getMediaDataController().saveDraft(tLRPC$Dialog.id, 0, tLRPC$Dialog.draft, (TLRPC$Message) null, false);
                    }
                    if (tLRPC$Dialog2 != null) {
                        tLRPC$Dialog2.notify_settings = tLRPC$Dialog.notify_settings;
                    }
                }
                MessageObject messageObject = (MessageObject) longSparseArray2.get(tLRPC$Dialog.id);
                if (tLRPC$Dialog2 == null) {
                    this.dialogs_dict.put(keyAt, tLRPC$Dialog);
                    this.dialogMessage.put(keyAt, messageObject);
                    if (messageObject != null && messageObject.messageOwner.peer_id.channel_id == 0) {
                        this.dialogMessagesByIds.put(messageObject.getId(), messageObject);
                        long j = messageObject.messageOwner.random_id;
                        if (j != 0) {
                            this.dialogMessagesByRandomIds.put(j, messageObject);
                        }
                    }
                } else {
                    tLRPC$Dialog2.pinned = tLRPC$Dialog.pinned;
                    tLRPC$Dialog2.pinnedNum = tLRPC$Dialog.pinnedNum;
                    MessageObject messageObject2 = this.dialogMessage.get(keyAt);
                    if ((messageObject2 == null || !messageObject2.deleted) && messageObject2 != null && tLRPC$Dialog2.top_message <= 0) {
                        if (messageObject == null || messageObject.messageOwner.date > messageObject2.messageOwner.date) {
                            this.dialogs_dict.put(keyAt, tLRPC$Dialog);
                            this.dialogMessage.put(keyAt, messageObject);
                            if (messageObject2.messageOwner.peer_id.channel_id == 0) {
                                this.dialogMessagesByIds.remove(messageObject2.getId());
                            }
                            if (messageObject != null) {
                                if (messageObject2.getId() == messageObject.getId()) {
                                    messageObject.deleted = messageObject2.deleted;
                                }
                                if (messageObject.messageOwner.peer_id.channel_id == 0) {
                                    this.dialogMessagesByIds.put(messageObject.getId(), messageObject);
                                    long j2 = messageObject.messageOwner.random_id;
                                    if (j2 != 0) {
                                        this.dialogMessagesByRandomIds.put(j2, messageObject);
                                    }
                                }
                            }
                            long j3 = messageObject2.messageOwner.random_id;
                            if (j3 != 0) {
                                this.dialogMessagesByRandomIds.remove(j3);
                            }
                        }
                    } else if (tLRPC$Dialog.top_message >= tLRPC$Dialog2.top_message) {
                        this.dialogs_dict.put(keyAt, tLRPC$Dialog);
                        this.dialogMessage.put(keyAt, messageObject);
                        if (messageObject2 != null) {
                            if (messageObject2.messageOwner.peer_id.channel_id == 0) {
                                this.dialogMessagesByIds.remove(messageObject2.getId());
                            }
                            long j4 = messageObject2.messageOwner.random_id;
                            if (j4 != 0) {
                                this.dialogMessagesByRandomIds.remove(j4);
                            }
                        }
                        if (messageObject != null && messageObject.messageOwner.peer_id.channel_id == 0) {
                            if (messageObject2 != null && messageObject2.getId() == messageObject.getId()) {
                                messageObject.deleted = messageObject2.deleted;
                            }
                            this.dialogMessagesByIds.put(messageObject.getId(), messageObject);
                            long j5 = messageObject.messageOwner.random_id;
                            if (j5 != 0) {
                                this.dialogMessagesByRandomIds.put(j5, messageObject);
                            }
                        }
                    }
                }
            }
            this.allDialogs.clear();
            int size2 = this.dialogs_dict.size();
            for (int i6 = 0; i6 < size2; i6++) {
                TLRPC$Dialog valueAt = this.dialogs_dict.valueAt(i6);
                if (this.deletingDialogs.indexOfKey(valueAt.id) < 0) {
                    this.allDialogs.add(valueAt);
                }
            }
            sortDialogs((LongSparseArray<TLRPC$Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
        if (i2 != 0) {
            getUserConfig().filtersLoaded = true;
            getUserConfig().saveConfig(false);
            this.loadingRemoteFilters = false;
            getNotificationCenter().postNotificationName(NotificationCenter.filterSettingsUpdated, new Object[0]);
        }
    }

    /* access modifiers changed from: private */
    public static /* synthetic */ int lambda$processLoadedDialogFilters$7(DialogFilter dialogFilter, DialogFilter dialogFilter2) {
        int i = dialogFilter.order;
        int i2 = dialogFilter2.order;
        if (i > i2) {
            return 1;
        }
        return i < i2 ? -1 : 0;
    }

    public void loadSuggestedFilters() {
        if (!this.loadingSuggestedFilters) {
            this.loadingSuggestedFilters = true;
            getConnectionsManager().sendRequest(new TLRPC$TL_messages_getSuggestedDialogFilters(), new MessagesController$$ExternalSyntheticLambda219(this));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadSuggestedFilters$11(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda119(this, tLObject));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadSuggestedFilters$10(TLObject tLObject) {
        this.loadingSuggestedFilters = false;
        this.suggestedFilters.clear();
        if (tLObject instanceof TLRPC$Vector) {
            TLRPC$Vector tLRPC$Vector = (TLRPC$Vector) tLObject;
            int size = tLRPC$Vector.objects.size();
            for (int i = 0; i < size; i++) {
                this.suggestedFilters.add((TLRPC$TL_dialogFilterSuggested) tLRPC$Vector.objects.get(i));
            }
        }
        getNotificationCenter().postNotificationName(NotificationCenter.suggestedFiltersLoaded, new Object[0]);
    }

    public void loadRemoteFilters(boolean z) {
        if (!this.loadingRemoteFilters && getUserConfig().isClientActivated()) {
            if (z || !getUserConfig().filtersLoaded) {
                if (z) {
                    getUserConfig().filtersLoaded = false;
                    getUserConfig().saveConfig(false);
                }
                getConnectionsManager().sendRequest(new TLRPC$TL_messages_getDialogFilters(), new MessagesController$$ExternalSyntheticLambda212(this));
            }
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadRemoteFilters$13(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject instanceof TLRPC$Vector) {
            getMessagesStorage().checkLoadedRemoteFilters((TLRPC$Vector) tLObject);
        } else {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda6(this));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadRemoteFilters$12() {
        this.loadingRemoteFilters = false;
    }

    public void selectDialogFilter(DialogFilter dialogFilter, int i) {
        DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
        if (dialogFilterArr[i] != dialogFilter) {
            DialogFilter dialogFilter2 = dialogFilterArr[i];
            dialogFilterArr[i] = dialogFilter;
            char c = 1;
            if (dialogFilterArr[i == 0 ? (char) 1 : 0] == dialogFilter) {
                if (i != 0) {
                    c = 0;
                }
                dialogFilterArr[c] = null;
            }
            if (dialogFilterArr[i] != null) {
                sortDialogs((LongSparseArray<TLRPC$Chat>) null);
            } else if (dialogFilter2 != null) {
                dialogFilter2.dialogs.clear();
            }
        }
    }

    public void onFilterUpdate(DialogFilter dialogFilter) {
        for (int i = 0; i < 2; i++) {
            if (this.selectedDialogFilter[i] == dialogFilter) {
                sortDialogs((LongSparseArray<TLRPC$Chat>) null);
                getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
                return;
            }
        }
    }

    public void addFilter(DialogFilter dialogFilter, boolean z) {
        if (z) {
            int i = 254;
            int size = this.dialogFilters.size();
            for (int i2 = 0; i2 < size; i2++) {
                i = Math.min(i, this.dialogFilters.get(i2).order);
            }
            dialogFilter.order = i - 1;
            this.dialogFilters.add(0, dialogFilter);
        } else {
            int size2 = this.dialogFilters.size();
            int i3 = 0;
            for (int i4 = 0; i4 < size2; i4++) {
                i3 = Math.max(i3, this.dialogFilters.get(i4).order);
            }
            dialogFilter.order = i3 + 1;
            this.dialogFilters.add(dialogFilter);
        }
        this.dialogFiltersById.put(dialogFilter.id, dialogFilter);
        if (this.dialogFilters.size() == 1 && SharedConfig.getChatSwipeAction(this.currentAccount) != 5) {
            SharedConfig.updateChatListSwipeSetting(5);
        }
    }

    public void removeFilter(DialogFilter dialogFilter) {
        this.dialogFilters.remove(dialogFilter);
        this.dialogFiltersById.remove(dialogFilter.id);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogFiltersUpdated, new Object[0]);
    }

    private void loadAppConfig() {
        if (!this.loadingAppConfig) {
            this.loadingAppConfig = true;
            getConnectionsManager().sendRequest(new TLRPC$TL_help_getAppConfig(), new MessagesController$$ExternalSyntheticLambda220(this));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadAppConfig$15(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda116(this, tLObject));
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* JADX WARNING: Code restructure failed: missing block: B:175:0x0396, code lost:
        r7 = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:303:0x06d9, code lost:
        r7 = true;
        r8 = true;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:86:0x018d, code lost:
        r25 = r4;
        r26 = r5;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$loadAppConfig$14(org.telegram.tgnet.TLObject r28) {
        /*
            r27 = this;
            r1 = r27
            r0 = r28
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonObject
            if (r2 == 0) goto L_0x0869
            android.content.SharedPreferences r2 = r1.mainPreferences
            android.content.SharedPreferences$Editor r2 = r2.edit()
            r4 = r0
            org.telegram.tgnet.TLRPC$TL_jsonObject r4 = (org.telegram.tgnet.TLRPC$TL_jsonObject) r4
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_jsonObjectValue> r0 = r4.value
            int r5 = r0.size()
            r6 = 0
            r7 = 0
            r8 = 0
        L_0x001a:
            if (r6 >= r5) goto L_0x0854
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_jsonObjectValue> r0 = r4.value
            java.lang.Object r0 = r0.get(r6)
            org.telegram.tgnet.TLRPC$TL_jsonObjectValue r0 = (org.telegram.tgnet.TLRPC$TL_jsonObjectValue) r0
            java.lang.String r9 = r0.key
            r9.hashCode()
            int r10 = r9.hashCode()
            r11 = 2
            r12 = -1
            switch(r10) {
                case -1688620344: goto L_0x0163;
                case -1683918311: goto L_0x0157;
                case -1391086521: goto L_0x014b;
                case -1032177933: goto L_0x013f;
                case -980397720: goto L_0x0132;
                case -515715076: goto L_0x0126;
                case -404170231: goto L_0x011a;
                case -253815153: goto L_0x010e;
                case -232883529: goto L_0x0100;
                case -111779186: goto L_0x00f2;
                case -76561797: goto L_0x00e3;
                case -24016028: goto L_0x00d5;
                case 169095108: goto L_0x00c6;
                case 222975416: goto L_0x00b8;
                case 227342346: goto L_0x00aa;
                case 246778895: goto L_0x009d;
                case 314452116: goto L_0x0090;
                case 676199595: goto L_0x0083;
                case 684764449: goto L_0x0076;
                case 992898905: goto L_0x0069;
                case 1322701672: goto L_0x005c;
                case 1850325103: goto L_0x004f;
                case 2074702027: goto L_0x0042;
                case 2136829446: goto L_0x0035;
                default: goto L_0x0032;
            }
        L_0x0032:
            r9 = -1
            goto L_0x016e
        L_0x0035:
            java.lang.String r10 = "dialog_filters_enabled"
            boolean r9 = r9.equals(r10)
            if (r9 != 0) goto L_0x003e
            goto L_0x0032
        L_0x003e:
            r9 = 23
            goto L_0x016e
        L_0x0042:
            java.lang.String r10 = "export_private_urls"
            boolean r9 = r9.equals(r10)
            if (r9 != 0) goto L_0x004b
            goto L_0x0032
        L_0x004b:
            r9 = 22
            goto L_0x016e
        L_0x004f:
            java.lang.String r10 = "emojies_sounds"
            boolean r9 = r9.equals(r10)
            if (r9 != 0) goto L_0x0058
            goto L_0x0032
        L_0x0058:
            r9 = 21
            goto L_0x016e
        L_0x005c:
            java.lang.String r10 = "round_video_encoding"
            boolean r9 = r9.equals(r10)
            if (r9 != 0) goto L_0x0065
            goto L_0x0032
        L_0x0065:
            r9 = 20
            goto L_0x016e
        L_0x0069:
            java.lang.String r10 = "inapp_update_check_delay"
            boolean r9 = r9.equals(r10)
            if (r9 != 0) goto L_0x0072
            goto L_0x0032
        L_0x0072:
            r9 = 19
            goto L_0x016e
        L_0x0076:
            java.lang.String r10 = "save_gifs_with_stickers"
            boolean r9 = r9.equals(r10)
            if (r9 != 0) goto L_0x007f
            goto L_0x0032
        L_0x007f:
            r9 = 18
            goto L_0x016e
        L_0x0083:
            java.lang.String r10 = "groupcall_video_participants_max"
            boolean r9 = r9.equals(r10)
            if (r9 != 0) goto L_0x008c
            goto L_0x0032
        L_0x008c:
            r9 = 17
            goto L_0x016e
        L_0x0090:
            java.lang.String r10 = "autologin_token"
            boolean r9 = r9.equals(r10)
            if (r9 != 0) goto L_0x0099
            goto L_0x0032
        L_0x0099:
            r9 = 16
            goto L_0x016e
        L_0x009d:
            java.lang.String r10 = "export_group_urls"
            boolean r9 = r9.equals(r10)
            if (r9 != 0) goto L_0x00a6
            goto L_0x0032
        L_0x00a6:
            r9 = 15
            goto L_0x016e
        L_0x00aa:
            java.lang.String r10 = "autologin_domains"
            boolean r9 = r9.equals(r10)
            if (r9 != 0) goto L_0x00b4
            goto L_0x0032
        L_0x00b4:
            r9 = 14
            goto L_0x016e
        L_0x00b8:
            java.lang.String r10 = "gif_search_emojies"
            boolean r9 = r9.equals(r10)
            if (r9 != 0) goto L_0x00c2
            goto L_0x0032
        L_0x00c2:
            r9 = 13
            goto L_0x016e
        L_0x00c6:
            java.lang.String r10 = "stickers_emoji_suggest_only_api"
            boolean r9 = r9.equals(r10)
            if (r9 != 0) goto L_0x00d1
            goto L_0x0032
        L_0x00d1:
            r9 = 12
            goto L_0x016e
        L_0x00d5:
            java.lang.String r10 = "emojies_animated_zoom"
            boolean r9 = r9.equals(r10)
            if (r9 != 0) goto L_0x00df
            goto L_0x0032
        L_0x00df:
            r9 = 11
            goto L_0x016e
        L_0x00e3:
            java.lang.String r10 = "youtube_pip"
            boolean r9 = r9.equals(r10)
            if (r9 != 0) goto L_0x00ee
            goto L_0x0032
        L_0x00ee:
            r9 = 10
            goto L_0x016e
        L_0x00f2:
            java.lang.String r10 = "autoarchive_setting_available"
            boolean r9 = r9.equals(r10)
            if (r9 != 0) goto L_0x00fc
            goto L_0x0032
        L_0x00fc:
            r9 = 9
            goto L_0x016e
        L_0x0100:
            java.lang.String r10 = "emojies_send_dice_success"
            boolean r9 = r9.equals(r10)
            if (r9 != 0) goto L_0x010a
            goto L_0x0032
        L_0x010a:
            r9 = 8
            goto L_0x016e
        L_0x010e:
            java.lang.String r10 = "background_connection"
            boolean r9 = r9.equals(r10)
            if (r9 != 0) goto L_0x0118
            goto L_0x0032
        L_0x0118:
            r9 = 7
            goto L_0x016e
        L_0x011a:
            java.lang.String r10 = "keep_alive_service"
            boolean r9 = r9.equals(r10)
            if (r9 != 0) goto L_0x0124
            goto L_0x0032
        L_0x0124:
            r9 = 6
            goto L_0x016e
        L_0x0126:
            java.lang.String r10 = "export_regex"
            boolean r9 = r9.equals(r10)
            if (r9 != 0) goto L_0x0130
            goto L_0x0032
        L_0x0130:
            r9 = 5
            goto L_0x016e
        L_0x0132:
            java.lang.String r10 = "url_auth_domains"
            boolean r9 = r9.equals(r10)
            if (r9 != 0) goto L_0x013d
            goto L_0x0032
        L_0x013d:
            r9 = 4
            goto L_0x016e
        L_0x013f:
            java.lang.String r10 = "emojies_send_dice"
            boolean r9 = r9.equals(r10)
            if (r9 != 0) goto L_0x0149
            goto L_0x0032
        L_0x0149:
            r9 = 3
            goto L_0x016e
        L_0x014b:
            java.lang.String r10 = "pending_suggestions"
            boolean r9 = r9.equals(r10)
            if (r9 != 0) goto L_0x0155
            goto L_0x0032
        L_0x0155:
            r9 = 2
            goto L_0x016e
        L_0x0157:
            java.lang.String r10 = "qr_login_camera"
            boolean r9 = r9.equals(r10)
            if (r9 != 0) goto L_0x0161
            goto L_0x0032
        L_0x0161:
            r9 = 1
            goto L_0x016e
        L_0x0163:
            java.lang.String r10 = "dialog_filters_tooltip"
            boolean r9 = r9.equals(r10)
            if (r9 != 0) goto L_0x016d
            goto L_0x0032
        L_0x016d:
            r9 = 0
        L_0x016e:
            java.lang.String r10 = ""
            java.lang.String r14 = "️"
            switch(r9) {
                case 0: goto L_0x0825;
                case 1: goto L_0x080a;
                case 2: goto L_0x07bd;
                case 3: goto L_0x0779;
                case 4: goto L_0x0737;
                case 5: goto L_0x06f7;
                case 6: goto L_0x06dd;
                case 7: goto L_0x06c0;
                case 8: goto L_0x05bc;
                case 9: goto L_0x05a1;
                case 10: goto L_0x057f;
                case 11: goto L_0x0560;
                case 12: goto L_0x0544;
                case 13: goto L_0x04ce;
                case 14: goto L_0x048d;
                case 15: goto L_0x044c;
                case 16: goto L_0x042b;
                case 17: goto L_0x040c;
                case 18: goto L_0x03f1;
                case 19: goto L_0x03b6;
                case 20: goto L_0x0313;
                case 21: goto L_0x01d4;
                case 22: goto L_0x0193;
                case 23: goto L_0x0177;
                default: goto L_0x0176;
            }
        L_0x0176:
            goto L_0x018d
        L_0x0177:
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value
            boolean r9 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonBool
            if (r9 == 0) goto L_0x018d
            org.telegram.tgnet.TLRPC$TL_jsonBool r0 = (org.telegram.tgnet.TLRPC$TL_jsonBool) r0
            boolean r0 = r0.value
            boolean r9 = r1.filtersEnabled
            if (r0 == r9) goto L_0x018d
            r1.filtersEnabled = r0
            java.lang.String r7 = "filtersEnabled"
            r2.putBoolean(r7, r0)
            r7 = 1
        L_0x018d:
            r25 = r4
            r26 = r5
            goto L_0x084c
        L_0x0193:
            java.util.HashSet r9 = new java.util.HashSet
            r9.<init>()
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value
            boolean r10 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonArray
            if (r10 == 0) goto L_0x01bf
            org.telegram.tgnet.TLRPC$TL_jsonArray r0 = (org.telegram.tgnet.TLRPC$TL_jsonArray) r0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r10 = r0.value
            int r10 = r10.size()
            r11 = 0
        L_0x01a7:
            if (r11 >= r10) goto L_0x01bf
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r12 = r0.value
            java.lang.Object r12 = r12.get(r11)
            org.telegram.tgnet.TLRPC$JSONValue r12 = (org.telegram.tgnet.TLRPC$JSONValue) r12
            boolean r14 = r12 instanceof org.telegram.tgnet.TLRPC$TL_jsonString
            if (r14 == 0) goto L_0x01bc
            org.telegram.tgnet.TLRPC$TL_jsonString r12 = (org.telegram.tgnet.TLRPC$TL_jsonString) r12
            java.lang.String r12 = r12.value
            r9.add(r12)
        L_0x01bc:
            int r11 = r11 + 1
            goto L_0x01a7
        L_0x01bf:
            java.util.Set<java.lang.String> r0 = r1.exportPrivateUri
            boolean r0 = r0.equals(r9)
            if (r0 != 0) goto L_0x018d
            r1.exportPrivateUri = r9
            java.lang.String r0 = "exportPrivateUri"
            r2.putStringSet(r0, r9)
            r25 = r4
            r26 = r5
            goto L_0x0776
        L_0x01d4:
            java.util.HashMap r9 = new java.util.HashMap     // Catch:{ Exception -> 0x0309 }
            r9.<init>()     // Catch:{ Exception -> 0x0309 }
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value     // Catch:{ Exception -> 0x0309 }
            boolean r11 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonObject     // Catch:{ Exception -> 0x0309 }
            if (r11 == 0) goto L_0x02a3
            org.telegram.tgnet.TLRPC$TL_jsonObject r0 = (org.telegram.tgnet.TLRPC$TL_jsonObject) r0     // Catch:{ Exception -> 0x0309 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_jsonObjectValue> r11 = r0.value     // Catch:{ Exception -> 0x0309 }
            int r11 = r11.size()     // Catch:{ Exception -> 0x0309 }
            r12 = 0
        L_0x01e8:
            if (r12 >= r11) goto L_0x02a3
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_jsonObjectValue> r15 = r0.value     // Catch:{ Exception -> 0x0309 }
            java.lang.Object r15 = r15.get(r12)     // Catch:{ Exception -> 0x0309 }
            org.telegram.tgnet.TLRPC$TL_jsonObjectValue r15 = (org.telegram.tgnet.TLRPC$TL_jsonObjectValue) r15     // Catch:{ Exception -> 0x0309 }
            org.telegram.tgnet.TLRPC$JSONValue r13 = r15.value     // Catch:{ Exception -> 0x0309 }
            boolean r3 = r13 instanceof org.telegram.tgnet.TLRPC$TL_jsonObject     // Catch:{ Exception -> 0x0309 }
            if (r3 == 0) goto L_0x0293
            org.telegram.tgnet.TLRPC$TL_jsonObject r13 = (org.telegram.tgnet.TLRPC$TL_jsonObject) r13     // Catch:{ Exception -> 0x0309 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_jsonObjectValue> r3 = r13.value     // Catch:{ Exception -> 0x0309 }
            int r3 = r3.size()     // Catch:{ Exception -> 0x0309 }
            r17 = 0
            r16 = r0
            r20 = r17
            r22 = r20
            r0 = 0
            r24 = 0
        L_0x020b:
            if (r0 >= r3) goto L_0x0274
            r19 = r3
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_jsonObjectValue> r3 = r13.value     // Catch:{ Exception -> 0x0309 }
            java.lang.Object r3 = r3.get(r0)     // Catch:{ Exception -> 0x0309 }
            org.telegram.tgnet.TLRPC$TL_jsonObjectValue r3 = (org.telegram.tgnet.TLRPC$TL_jsonObjectValue) r3     // Catch:{ Exception -> 0x0309 }
            r25 = r4
            org.telegram.tgnet.TLRPC$JSONValue r4 = r3.value     // Catch:{ Exception -> 0x0271 }
            boolean r4 = r4 instanceof org.telegram.tgnet.TLRPC$TL_jsonString     // Catch:{ Exception -> 0x0271 }
            if (r4 == 0) goto L_0x0266
            java.lang.String r4 = "id"
            r26 = r5
            java.lang.String r5 = r3.key     // Catch:{ Exception -> 0x0307 }
            boolean r4 = r4.equals(r5)     // Catch:{ Exception -> 0x0307 }
            if (r4 == 0) goto L_0x023a
            org.telegram.tgnet.TLRPC$JSONValue r3 = r3.value     // Catch:{ Exception -> 0x0307 }
            org.telegram.tgnet.TLRPC$TL_jsonString r3 = (org.telegram.tgnet.TLRPC$TL_jsonString) r3     // Catch:{ Exception -> 0x0307 }
            java.lang.String r3 = r3.value     // Catch:{ Exception -> 0x0307 }
            java.lang.Long r3 = org.telegram.messenger.Utilities.parseLong(r3)     // Catch:{ Exception -> 0x0307 }
            long r20 = r3.longValue()     // Catch:{ Exception -> 0x0307 }
            goto L_0x0268
        L_0x023a:
            java.lang.String r4 = "access_hash"
            java.lang.String r5 = r3.key     // Catch:{ Exception -> 0x0307 }
            boolean r4 = r4.equals(r5)     // Catch:{ Exception -> 0x0307 }
            if (r4 == 0) goto L_0x0253
            org.telegram.tgnet.TLRPC$JSONValue r3 = r3.value     // Catch:{ Exception -> 0x0307 }
            org.telegram.tgnet.TLRPC$TL_jsonString r3 = (org.telegram.tgnet.TLRPC$TL_jsonString) r3     // Catch:{ Exception -> 0x0307 }
            java.lang.String r3 = r3.value     // Catch:{ Exception -> 0x0307 }
            java.lang.Long r3 = org.telegram.messenger.Utilities.parseLong(r3)     // Catch:{ Exception -> 0x0307 }
            long r22 = r3.longValue()     // Catch:{ Exception -> 0x0307 }
            goto L_0x0268
        L_0x0253:
            java.lang.String r4 = "file_reference_base64"
            java.lang.String r5 = r3.key     // Catch:{ Exception -> 0x0307 }
            boolean r4 = r4.equals(r5)     // Catch:{ Exception -> 0x0307 }
            if (r4 == 0) goto L_0x0268
            org.telegram.tgnet.TLRPC$JSONValue r3 = r3.value     // Catch:{ Exception -> 0x0307 }
            org.telegram.tgnet.TLRPC$TL_jsonString r3 = (org.telegram.tgnet.TLRPC$TL_jsonString) r3     // Catch:{ Exception -> 0x0307 }
            java.lang.String r3 = r3.value     // Catch:{ Exception -> 0x0307 }
            r24 = r3
            goto L_0x0268
        L_0x0266:
            r26 = r5
        L_0x0268:
            int r0 = r0 + 1
            r3 = r19
            r4 = r25
            r5 = r26
            goto L_0x020b
        L_0x0271:
            r0 = move-exception
            goto L_0x030c
        L_0x0274:
            r25 = r4
            r26 = r5
            int r0 = (r20 > r17 ? 1 : (r20 == r17 ? 0 : -1))
            if (r0 == 0) goto L_0x0299
            int r0 = (r22 > r17 ? 1 : (r22 == r17 ? 0 : -1))
            if (r0 == 0) goto L_0x0299
            if (r24 == 0) goto L_0x0299
            java.lang.String r0 = r15.key     // Catch:{ Exception -> 0x0307 }
            java.lang.String r0 = r0.replace(r14, r10)     // Catch:{ Exception -> 0x0307 }
            org.telegram.messenger.MessagesController$EmojiSound r3 = new org.telegram.messenger.MessagesController$EmojiSound     // Catch:{ Exception -> 0x0307 }
            r19 = r3
            r19.<init>((long) r20, (long) r22, (java.lang.String) r24)     // Catch:{ Exception -> 0x0307 }
            r9.put(r0, r3)     // Catch:{ Exception -> 0x0307 }
            goto L_0x0299
        L_0x0293:
            r16 = r0
            r25 = r4
            r26 = r5
        L_0x0299:
            int r12 = r12 + 1
            r0 = r16
            r4 = r25
            r5 = r26
            goto L_0x01e8
        L_0x02a3:
            r25 = r4
            r26 = r5
            java.util.HashMap<java.lang.String, org.telegram.messenger.MessagesController$EmojiSound> r0 = r1.emojiSounds     // Catch:{ Exception -> 0x0307 }
            boolean r0 = r0.equals(r9)     // Catch:{ Exception -> 0x0307 }
            if (r0 != 0) goto L_0x084c
            r1.emojiSounds = r9     // Catch:{ Exception -> 0x0307 }
            org.telegram.tgnet.SerializedData r0 = new org.telegram.tgnet.SerializedData     // Catch:{ Exception -> 0x0307 }
            r0.<init>()     // Catch:{ Exception -> 0x0307 }
            java.util.HashMap<java.lang.String, org.telegram.messenger.MessagesController$EmojiSound> r3 = r1.emojiSounds     // Catch:{ Exception -> 0x0307 }
            int r3 = r3.size()     // Catch:{ Exception -> 0x0307 }
            r0.writeInt32(r3)     // Catch:{ Exception -> 0x0307 }
            java.util.HashMap<java.lang.String, org.telegram.messenger.MessagesController$EmojiSound> r3 = r1.emojiSounds     // Catch:{ Exception -> 0x0307 }
            java.util.Set r3 = r3.entrySet()     // Catch:{ Exception -> 0x0307 }
            java.util.Iterator r3 = r3.iterator()     // Catch:{ Exception -> 0x0307 }
        L_0x02c9:
            boolean r4 = r3.hasNext()     // Catch:{ Exception -> 0x0307 }
            if (r4 == 0) goto L_0x02f4
            java.lang.Object r4 = r3.next()     // Catch:{ Exception -> 0x0307 }
            java.util.Map$Entry r4 = (java.util.Map.Entry) r4     // Catch:{ Exception -> 0x0307 }
            java.lang.Object r5 = r4.getKey()     // Catch:{ Exception -> 0x0307 }
            java.lang.String r5 = (java.lang.String) r5     // Catch:{ Exception -> 0x0307 }
            r0.writeString(r5)     // Catch:{ Exception -> 0x0307 }
            java.lang.Object r4 = r4.getValue()     // Catch:{ Exception -> 0x0307 }
            org.telegram.messenger.MessagesController$EmojiSound r4 = (org.telegram.messenger.MessagesController.EmojiSound) r4     // Catch:{ Exception -> 0x0307 }
            long r9 = r4.id     // Catch:{ Exception -> 0x0307 }
            r0.writeInt64(r9)     // Catch:{ Exception -> 0x0307 }
            long r9 = r4.accessHash     // Catch:{ Exception -> 0x0307 }
            r0.writeInt64(r9)     // Catch:{ Exception -> 0x0307 }
            byte[] r4 = r4.fileReference     // Catch:{ Exception -> 0x0307 }
            r0.writeByteArray(r4)     // Catch:{ Exception -> 0x0307 }
            goto L_0x02c9
        L_0x02f4:
            java.lang.String r3 = "emojiSounds"
            byte[] r4 = r0.toByteArray()     // Catch:{ Exception -> 0x0307 }
            r5 = 0
            java.lang.String r4 = android.util.Base64.encodeToString(r4, r5)     // Catch:{ Exception -> 0x0307 }
            r2.putString(r3, r4)     // Catch:{ Exception -> 0x0307 }
            r0.cleanup()     // Catch:{ Exception -> 0x0307 }
            goto L_0x0776
        L_0x0307:
            r0 = move-exception
            goto L_0x030e
        L_0x0309:
            r0 = move-exception
            r25 = r4
        L_0x030c:
            r26 = r5
        L_0x030e:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
            goto L_0x084c
        L_0x0313:
            r25 = r4
            r26 = r5
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonObject
            if (r3 == 0) goto L_0x084c
            org.telegram.tgnet.TLRPC$TL_jsonObject r0 = (org.telegram.tgnet.TLRPC$TL_jsonObject) r0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_jsonObjectValue> r3 = r0.value
            int r3 = r3.size()
            r4 = 0
        L_0x0326:
            if (r4 >= r3) goto L_0x084c
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_jsonObjectValue> r5 = r0.value
            java.lang.Object r5 = r5.get(r4)
            org.telegram.tgnet.TLRPC$TL_jsonObjectValue r5 = (org.telegram.tgnet.TLRPC$TL_jsonObjectValue) r5
            java.lang.String r9 = r5.key
            r9.hashCode()
            int r10 = r9.hashCode()
            switch(r10) {
                case -233204595: goto L_0x0355;
                case 258902020: goto L_0x034a;
                case 1924434857: goto L_0x033e;
                default: goto L_0x033c;
            }
        L_0x033c:
            r9 = -1
            goto L_0x035f
        L_0x033e:
            java.lang.String r10 = "video_bitrate"
            boolean r9 = r9.equals(r10)
            if (r9 != 0) goto L_0x0348
            goto L_0x033c
        L_0x0348:
            r9 = 2
            goto L_0x035f
        L_0x034a:
            java.lang.String r10 = "audio_bitrate"
            boolean r9 = r9.equals(r10)
            if (r9 != 0) goto L_0x0353
            goto L_0x033c
        L_0x0353:
            r9 = 1
            goto L_0x035f
        L_0x0355:
            java.lang.String r10 = "diameter"
            boolean r9 = r9.equals(r10)
            if (r9 != 0) goto L_0x035e
            goto L_0x033c
        L_0x035e:
            r9 = 0
        L_0x035f:
            switch(r9) {
                case 0: goto L_0x0398;
                case 1: goto L_0x037d;
                case 2: goto L_0x0363;
                default: goto L_0x0362;
            }
        L_0x0362:
            goto L_0x03b2
        L_0x0363:
            org.telegram.tgnet.TLRPC$JSONValue r5 = r5.value
            boolean r9 = r5 instanceof org.telegram.tgnet.TLRPC$TL_jsonNumber
            if (r9 == 0) goto L_0x03b2
            org.telegram.tgnet.TLRPC$TL_jsonNumber r5 = (org.telegram.tgnet.TLRPC$TL_jsonNumber) r5
            double r9 = r5.value
            int r5 = r1.roundVideoBitrate
            double r13 = (double) r5
            int r5 = (r9 > r13 ? 1 : (r9 == r13 ? 0 : -1))
            if (r5 == 0) goto L_0x03b2
            int r5 = (int) r9
            r1.roundVideoBitrate = r5
            java.lang.String r7 = "roundVideoBitrate"
            r2.putInt(r7, r5)
            goto L_0x0396
        L_0x037d:
            org.telegram.tgnet.TLRPC$JSONValue r5 = r5.value
            boolean r9 = r5 instanceof org.telegram.tgnet.TLRPC$TL_jsonNumber
            if (r9 == 0) goto L_0x03b2
            org.telegram.tgnet.TLRPC$TL_jsonNumber r5 = (org.telegram.tgnet.TLRPC$TL_jsonNumber) r5
            double r9 = r5.value
            int r5 = r1.roundAudioBitrate
            double r13 = (double) r5
            int r5 = (r9 > r13 ? 1 : (r9 == r13 ? 0 : -1))
            if (r5 == 0) goto L_0x03b2
            int r5 = (int) r9
            r1.roundAudioBitrate = r5
            java.lang.String r7 = "roundAudioBitrate"
            r2.putInt(r7, r5)
        L_0x0396:
            r7 = 1
            goto L_0x03b2
        L_0x0398:
            org.telegram.tgnet.TLRPC$JSONValue r5 = r5.value
            boolean r9 = r5 instanceof org.telegram.tgnet.TLRPC$TL_jsonNumber
            if (r9 == 0) goto L_0x03b2
            org.telegram.tgnet.TLRPC$TL_jsonNumber r5 = (org.telegram.tgnet.TLRPC$TL_jsonNumber) r5
            double r9 = r5.value
            int r5 = r1.roundVideoSize
            double r13 = (double) r5
            int r5 = (r9 > r13 ? 1 : (r9 == r13 ? 0 : -1))
            if (r5 == 0) goto L_0x03b2
            int r5 = (int) r9
            r1.roundVideoSize = r5
            java.lang.String r7 = "roundVideoSize"
            r2.putInt(r7, r5)
            goto L_0x0396
        L_0x03b2:
            int r4 = r4 + 1
            goto L_0x0326
        L_0x03b6:
            r25 = r4
            r26 = r5
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonNumber
            java.lang.String r4 = "updateCheckDelay"
            if (r3 == 0) goto L_0x03d6
            org.telegram.tgnet.TLRPC$TL_jsonNumber r0 = (org.telegram.tgnet.TLRPC$TL_jsonNumber) r0
            double r9 = r0.value
            int r0 = r1.updateCheckDelay
            double r11 = (double) r0
            int r0 = (r9 > r11 ? 1 : (r9 == r11 ? 0 : -1))
            if (r0 == 0) goto L_0x084c
            int r0 = (int) r9
            r1.updateCheckDelay = r0
            r2.putInt(r4, r0)
            goto L_0x0776
        L_0x03d6:
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonString
            if (r3 == 0) goto L_0x084c
            org.telegram.tgnet.TLRPC$TL_jsonString r0 = (org.telegram.tgnet.TLRPC$TL_jsonString) r0
            java.lang.String r0 = r0.value
            java.lang.Integer r0 = org.telegram.messenger.Utilities.parseInt(r0)
            int r0 = r0.intValue()
            int r3 = r1.updateCheckDelay
            if (r0 == r3) goto L_0x084c
            r1.updateCheckDelay = r0
            r2.putInt(r4, r0)
            goto L_0x0776
        L_0x03f1:
            r25 = r4
            r26 = r5
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonBool
            if (r3 == 0) goto L_0x084c
            org.telegram.tgnet.TLRPC$TL_jsonBool r0 = (org.telegram.tgnet.TLRPC$TL_jsonBool) r0
            boolean r0 = r0.value
            boolean r3 = r1.saveGifsWithStickers
            if (r0 == r3) goto L_0x084c
            r1.saveGifsWithStickers = r0
            java.lang.String r3 = "saveGifsWithStickers"
            r2.putBoolean(r3, r0)
            goto L_0x0776
        L_0x040c:
            r25 = r4
            r26 = r5
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonNumber
            if (r3 == 0) goto L_0x084c
            org.telegram.tgnet.TLRPC$TL_jsonNumber r0 = (org.telegram.tgnet.TLRPC$TL_jsonNumber) r0
            double r3 = r0.value
            int r0 = r1.groipCallVideoMaxParticipants
            double r9 = (double) r0
            int r0 = (r3 > r9 ? 1 : (r3 == r9 ? 0 : -1))
            if (r0 == 0) goto L_0x084c
            int r0 = (int) r3
            r1.groipCallVideoMaxParticipants = r0
            java.lang.String r3 = "groipCallVideoMaxParticipants"
            r2.putInt(r3, r0)
            goto L_0x0776
        L_0x042b:
            r25 = r4
            r26 = r5
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonString
            if (r3 == 0) goto L_0x084c
            org.telegram.tgnet.TLRPC$TL_jsonString r0 = (org.telegram.tgnet.TLRPC$TL_jsonString) r0
            java.lang.String r3 = r0.value
            java.lang.String r4 = r1.autologinToken
            boolean r3 = r3.equals(r4)
            if (r3 != 0) goto L_0x084c
            java.lang.String r0 = r0.value
            r1.autologinToken = r0
            java.lang.String r3 = "autologinToken"
            r2.putString(r3, r0)
            goto L_0x0776
        L_0x044c:
            r25 = r4
            r26 = r5
            java.util.HashSet r3 = new java.util.HashSet
            r3.<init>()
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value
            boolean r4 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonArray
            if (r4 == 0) goto L_0x047c
            org.telegram.tgnet.TLRPC$TL_jsonArray r0 = (org.telegram.tgnet.TLRPC$TL_jsonArray) r0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r4 = r0.value
            int r4 = r4.size()
            r5 = 0
        L_0x0464:
            if (r5 >= r4) goto L_0x047c
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r9 = r0.value
            java.lang.Object r9 = r9.get(r5)
            org.telegram.tgnet.TLRPC$JSONValue r9 = (org.telegram.tgnet.TLRPC$JSONValue) r9
            boolean r10 = r9 instanceof org.telegram.tgnet.TLRPC$TL_jsonString
            if (r10 == 0) goto L_0x0479
            org.telegram.tgnet.TLRPC$TL_jsonString r9 = (org.telegram.tgnet.TLRPC$TL_jsonString) r9
            java.lang.String r9 = r9.value
            r3.add(r9)
        L_0x0479:
            int r5 = r5 + 1
            goto L_0x0464
        L_0x047c:
            java.util.Set<java.lang.String> r0 = r1.exportGroupUri
            boolean r0 = r0.equals(r3)
            if (r0 != 0) goto L_0x084c
            r1.exportGroupUri = r3
            java.lang.String r0 = "exportGroupUri"
            r2.putStringSet(r0, r3)
            goto L_0x0776
        L_0x048d:
            r25 = r4
            r26 = r5
            java.util.HashSet r3 = new java.util.HashSet
            r3.<init>()
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value
            boolean r4 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonArray
            if (r4 == 0) goto L_0x04bd
            org.telegram.tgnet.TLRPC$TL_jsonArray r0 = (org.telegram.tgnet.TLRPC$TL_jsonArray) r0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r4 = r0.value
            int r4 = r4.size()
            r5 = 0
        L_0x04a5:
            if (r5 >= r4) goto L_0x04bd
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r9 = r0.value
            java.lang.Object r9 = r9.get(r5)
            org.telegram.tgnet.TLRPC$JSONValue r9 = (org.telegram.tgnet.TLRPC$JSONValue) r9
            boolean r10 = r9 instanceof org.telegram.tgnet.TLRPC$TL_jsonString
            if (r10 == 0) goto L_0x04ba
            org.telegram.tgnet.TLRPC$TL_jsonString r9 = (org.telegram.tgnet.TLRPC$TL_jsonString) r9
            java.lang.String r9 = r9.value
            r3.add(r9)
        L_0x04ba:
            int r5 = r5 + 1
            goto L_0x04a5
        L_0x04bd:
            java.util.Set<java.lang.String> r0 = r1.autologinDomains
            boolean r0 = r0.equals(r3)
            if (r0 != 0) goto L_0x084c
            r1.autologinDomains = r3
            java.lang.String r0 = "autologinDomains"
            r2.putStringSet(r0, r3)
            goto L_0x0776
        L_0x04ce:
            r25 = r4
            r26 = r5
            java.util.ArrayList r3 = new java.util.ArrayList
            r3.<init>()
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value
            boolean r4 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonArray
            if (r4 == 0) goto L_0x0502
            org.telegram.tgnet.TLRPC$TL_jsonArray r0 = (org.telegram.tgnet.TLRPC$TL_jsonArray) r0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r4 = r0.value
            int r4 = r4.size()
            r5 = 0
        L_0x04e6:
            if (r5 >= r4) goto L_0x0502
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r9 = r0.value
            java.lang.Object r9 = r9.get(r5)
            org.telegram.tgnet.TLRPC$JSONValue r9 = (org.telegram.tgnet.TLRPC$JSONValue) r9
            boolean r11 = r9 instanceof org.telegram.tgnet.TLRPC$TL_jsonString
            if (r11 == 0) goto L_0x04ff
            org.telegram.tgnet.TLRPC$TL_jsonString r9 = (org.telegram.tgnet.TLRPC$TL_jsonString) r9
            java.lang.String r9 = r9.value
            java.lang.String r9 = r9.replace(r14, r10)
            r3.add(r9)
        L_0x04ff:
            int r5 = r5 + 1
            goto L_0x04e6
        L_0x0502:
            java.util.ArrayList<java.lang.String> r0 = r1.gifSearchEmojies
            boolean r0 = r0.equals(r3)
            if (r0 != 0) goto L_0x084c
            r1.gifSearchEmojies = r3
            org.telegram.tgnet.SerializedData r0 = new org.telegram.tgnet.SerializedData
            r0.<init>()
            java.util.ArrayList<java.lang.String> r3 = r1.gifSearchEmojies
            int r3 = r3.size()
            r0.writeInt32(r3)
            java.util.ArrayList<java.lang.String> r3 = r1.gifSearchEmojies
            int r3 = r3.size()
            r4 = 0
        L_0x0521:
            if (r4 >= r3) goto L_0x0531
            java.util.ArrayList<java.lang.String> r5 = r1.gifSearchEmojies
            java.lang.Object r5 = r5.get(r4)
            java.lang.String r5 = (java.lang.String) r5
            r0.writeString(r5)
            int r4 = r4 + 1
            goto L_0x0521
        L_0x0531:
            byte[] r3 = r0.toByteArray()
            r4 = 0
            java.lang.String r3 = android.util.Base64.encodeToString(r3, r4)
            java.lang.String r4 = "gifSearchEmojies"
            r2.putString(r4, r3)
            r0.cleanup()
            goto L_0x0776
        L_0x0544:
            r25 = r4
            r26 = r5
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonBool
            if (r3 == 0) goto L_0x084c
            org.telegram.tgnet.TLRPC$TL_jsonBool r0 = (org.telegram.tgnet.TLRPC$TL_jsonBool) r0
            boolean r0 = r0.value
            boolean r3 = r1.suggestStickersApiOnly
            if (r0 == r3) goto L_0x084c
            r1.suggestStickersApiOnly = r0
            java.lang.String r3 = "suggestStickersApiOnly"
            r2.putBoolean(r3, r0)
            goto L_0x0776
        L_0x0560:
            r25 = r4
            r26 = r5
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonNumber
            if (r3 == 0) goto L_0x084c
            org.telegram.tgnet.TLRPC$TL_jsonNumber r0 = (org.telegram.tgnet.TLRPC$TL_jsonNumber) r0
            float r3 = r1.animatedEmojisZoom
            double r3 = (double) r3
            double r9 = r0.value
            int r0 = (r3 > r9 ? 1 : (r3 == r9 ? 0 : -1))
            if (r0 == 0) goto L_0x084c
            float r0 = (float) r9
            r1.animatedEmojisZoom = r0
            java.lang.String r3 = "animatedEmojisZoom"
            r2.putFloat(r3, r0)
            goto L_0x0776
        L_0x057f:
            r25 = r4
            r26 = r5
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonString
            if (r3 == 0) goto L_0x084c
            org.telegram.tgnet.TLRPC$TL_jsonString r0 = (org.telegram.tgnet.TLRPC$TL_jsonString) r0
            java.lang.String r3 = r0.value
            java.lang.String r4 = r1.youtubePipType
            boolean r3 = r3.equals(r4)
            if (r3 != 0) goto L_0x084c
            java.lang.String r0 = r0.value
            r1.youtubePipType = r0
            java.lang.String r3 = "youtubePipType"
            r2.putString(r3, r0)
            goto L_0x0776
        L_0x05a1:
            r25 = r4
            r26 = r5
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonBool
            if (r3 == 0) goto L_0x084c
            org.telegram.tgnet.TLRPC$TL_jsonBool r0 = (org.telegram.tgnet.TLRPC$TL_jsonBool) r0
            boolean r0 = r0.value
            boolean r3 = r1.autoarchiveAvailable
            if (r0 == r3) goto L_0x084c
            r1.autoarchiveAvailable = r0
            java.lang.String r3 = "autoarchiveAvailable"
            r2.putBoolean(r3, r0)
            goto L_0x0776
        L_0x05bc:
            r25 = r4
            r26 = r5
            java.util.HashMap r3 = new java.util.HashMap     // Catch:{ Exception -> 0x06ba }
            r3.<init>()     // Catch:{ Exception -> 0x06ba }
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value     // Catch:{ Exception -> 0x06ba }
            boolean r4 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonObject     // Catch:{ Exception -> 0x06ba }
            if (r4 == 0) goto L_0x065f
            org.telegram.tgnet.TLRPC$TL_jsonObject r0 = (org.telegram.tgnet.TLRPC$TL_jsonObject) r0     // Catch:{ Exception -> 0x06ba }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_jsonObjectValue> r4 = r0.value     // Catch:{ Exception -> 0x06ba }
            int r4 = r4.size()     // Catch:{ Exception -> 0x06ba }
            r5 = 0
        L_0x05d4:
            if (r5 >= r4) goto L_0x065f
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_jsonObjectValue> r9 = r0.value     // Catch:{ Exception -> 0x06ba }
            java.lang.Object r9 = r9.get(r5)     // Catch:{ Exception -> 0x06ba }
            org.telegram.tgnet.TLRPC$TL_jsonObjectValue r9 = (org.telegram.tgnet.TLRPC$TL_jsonObjectValue) r9     // Catch:{ Exception -> 0x06ba }
            org.telegram.tgnet.TLRPC$JSONValue r11 = r9.value     // Catch:{ Exception -> 0x06ba }
            boolean r12 = r11 instanceof org.telegram.tgnet.TLRPC$TL_jsonObject     // Catch:{ Exception -> 0x06ba }
            if (r12 == 0) goto L_0x0653
            org.telegram.tgnet.TLRPC$TL_jsonObject r11 = (org.telegram.tgnet.TLRPC$TL_jsonObject) r11     // Catch:{ Exception -> 0x06ba }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_jsonObjectValue> r12 = r11.value     // Catch:{ Exception -> 0x06ba }
            int r12 = r12.size()     // Catch:{ Exception -> 0x06ba }
            r17 = r0
            r0 = 2147483647(0x7fffffff, float:NaN)
            r13 = 2147483647(0x7fffffff, float:NaN)
            r15 = 0
        L_0x05f5:
            if (r15 >= r12) goto L_0x063b
            r18 = r4
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_jsonObjectValue> r4 = r11.value     // Catch:{ Exception -> 0x06ba }
            java.lang.Object r4 = r4.get(r15)     // Catch:{ Exception -> 0x06ba }
            org.telegram.tgnet.TLRPC$TL_jsonObjectValue r4 = (org.telegram.tgnet.TLRPC$TL_jsonObjectValue) r4     // Catch:{ Exception -> 0x06ba }
            r19 = r11
            org.telegram.tgnet.TLRPC$JSONValue r11 = r4.value     // Catch:{ Exception -> 0x06ba }
            boolean r11 = r11 instanceof org.telegram.tgnet.TLRPC$TL_jsonNumber     // Catch:{ Exception -> 0x06ba }
            if (r11 == 0) goto L_0x0630
            java.lang.String r11 = "value"
            r20 = r12
            java.lang.String r12 = r4.key     // Catch:{ Exception -> 0x06ba }
            boolean r11 = r11.equals(r12)     // Catch:{ Exception -> 0x06ba }
            if (r11 == 0) goto L_0x061e
            org.telegram.tgnet.TLRPC$JSONValue r0 = r4.value     // Catch:{ Exception -> 0x06ba }
            org.telegram.tgnet.TLRPC$TL_jsonNumber r0 = (org.telegram.tgnet.TLRPC$TL_jsonNumber) r0     // Catch:{ Exception -> 0x06ba }
            double r11 = r0.value     // Catch:{ Exception -> 0x06ba }
            int r0 = (int) r11     // Catch:{ Exception -> 0x06ba }
            goto L_0x0632
        L_0x061e:
            java.lang.String r11 = "frame_start"
            java.lang.String r12 = r4.key     // Catch:{ Exception -> 0x06ba }
            boolean r11 = r11.equals(r12)     // Catch:{ Exception -> 0x06ba }
            if (r11 == 0) goto L_0x0632
            org.telegram.tgnet.TLRPC$JSONValue r4 = r4.value     // Catch:{ Exception -> 0x06ba }
            org.telegram.tgnet.TLRPC$TL_jsonNumber r4 = (org.telegram.tgnet.TLRPC$TL_jsonNumber) r4     // Catch:{ Exception -> 0x06ba }
            double r11 = r4.value     // Catch:{ Exception -> 0x06ba }
            int r13 = (int) r11     // Catch:{ Exception -> 0x06ba }
            goto L_0x0632
        L_0x0630:
            r20 = r12
        L_0x0632:
            int r15 = r15 + 1
            r4 = r18
            r11 = r19
            r12 = r20
            goto L_0x05f5
        L_0x063b:
            r18 = r4
            r4 = 2147483647(0x7fffffff, float:NaN)
            if (r13 == r4) goto L_0x0657
            if (r0 == r4) goto L_0x0657
            java.lang.String r4 = r9.key     // Catch:{ Exception -> 0x06ba }
            java.lang.String r4 = r4.replace(r14, r10)     // Catch:{ Exception -> 0x06ba }
            org.telegram.messenger.MessagesController$DiceFrameSuccess r9 = new org.telegram.messenger.MessagesController$DiceFrameSuccess     // Catch:{ Exception -> 0x06ba }
            r9.<init>(r13, r0)     // Catch:{ Exception -> 0x06ba }
            r3.put(r4, r9)     // Catch:{ Exception -> 0x06ba }
            goto L_0x0657
        L_0x0653:
            r17 = r0
            r18 = r4
        L_0x0657:
            int r5 = r5 + 1
            r0 = r17
            r4 = r18
            goto L_0x05d4
        L_0x065f:
            java.util.HashMap<java.lang.String, org.telegram.messenger.MessagesController$DiceFrameSuccess> r0 = r1.diceSuccess     // Catch:{ Exception -> 0x06ba }
            boolean r0 = r0.equals(r3)     // Catch:{ Exception -> 0x06ba }
            if (r0 != 0) goto L_0x084c
            r1.diceSuccess = r3     // Catch:{ Exception -> 0x06ba }
            org.telegram.tgnet.SerializedData r0 = new org.telegram.tgnet.SerializedData     // Catch:{ Exception -> 0x06ba }
            r0.<init>()     // Catch:{ Exception -> 0x06ba }
            java.util.HashMap<java.lang.String, org.telegram.messenger.MessagesController$DiceFrameSuccess> r3 = r1.diceSuccess     // Catch:{ Exception -> 0x06ba }
            int r3 = r3.size()     // Catch:{ Exception -> 0x06ba }
            r0.writeInt32(r3)     // Catch:{ Exception -> 0x06ba }
            java.util.HashMap<java.lang.String, org.telegram.messenger.MessagesController$DiceFrameSuccess> r3 = r1.diceSuccess     // Catch:{ Exception -> 0x06ba }
            java.util.Set r3 = r3.entrySet()     // Catch:{ Exception -> 0x06ba }
            java.util.Iterator r3 = r3.iterator()     // Catch:{ Exception -> 0x06ba }
        L_0x0681:
            boolean r4 = r3.hasNext()     // Catch:{ Exception -> 0x06ba }
            if (r4 == 0) goto L_0x06a7
            java.lang.Object r4 = r3.next()     // Catch:{ Exception -> 0x06ba }
            java.util.Map$Entry r4 = (java.util.Map.Entry) r4     // Catch:{ Exception -> 0x06ba }
            java.lang.Object r5 = r4.getKey()     // Catch:{ Exception -> 0x06ba }
            java.lang.String r5 = (java.lang.String) r5     // Catch:{ Exception -> 0x06ba }
            r0.writeString(r5)     // Catch:{ Exception -> 0x06ba }
            java.lang.Object r4 = r4.getValue()     // Catch:{ Exception -> 0x06ba }
            org.telegram.messenger.MessagesController$DiceFrameSuccess r4 = (org.telegram.messenger.MessagesController.DiceFrameSuccess) r4     // Catch:{ Exception -> 0x06ba }
            int r5 = r4.frame     // Catch:{ Exception -> 0x06ba }
            r0.writeInt32(r5)     // Catch:{ Exception -> 0x06ba }
            int r4 = r4.num     // Catch:{ Exception -> 0x06ba }
            r0.writeInt32(r4)     // Catch:{ Exception -> 0x06ba }
            goto L_0x0681
        L_0x06a7:
            java.lang.String r3 = "diceSuccess"
            byte[] r4 = r0.toByteArray()     // Catch:{ Exception -> 0x06ba }
            r5 = 0
            java.lang.String r4 = android.util.Base64.encodeToString(r4, r5)     // Catch:{ Exception -> 0x06ba }
            r2.putString(r3, r4)     // Catch:{ Exception -> 0x06ba }
            r0.cleanup()     // Catch:{ Exception -> 0x06ba }
            goto L_0x0776
        L_0x06ba:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
            goto L_0x084c
        L_0x06c0:
            r25 = r4
            r26 = r5
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonBool
            if (r3 == 0) goto L_0x084c
            org.telegram.tgnet.TLRPC$TL_jsonBool r0 = (org.telegram.tgnet.TLRPC$TL_jsonBool) r0
            boolean r0 = r0.value
            boolean r3 = r1.backgroundConnection
            if (r0 == r3) goto L_0x084c
            r1.backgroundConnection = r0
            java.lang.String r3 = "backgroundConnection"
            r2.putBoolean(r3, r0)
        L_0x06d9:
            r7 = 1
            r8 = 1
            goto L_0x084c
        L_0x06dd:
            r25 = r4
            r26 = r5
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonBool
            if (r3 == 0) goto L_0x084c
            org.telegram.tgnet.TLRPC$TL_jsonBool r0 = (org.telegram.tgnet.TLRPC$TL_jsonBool) r0
            boolean r0 = r0.value
            boolean r3 = r1.keepAliveService
            if (r0 == r3) goto L_0x084c
            r1.keepAliveService = r0
            java.lang.String r3 = "keepAliveService"
            r2.putBoolean(r3, r0)
            goto L_0x06d9
        L_0x06f7:
            r25 = r4
            r26 = r5
            java.util.HashSet r3 = new java.util.HashSet
            r3.<init>()
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value
            boolean r4 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonArray
            if (r4 == 0) goto L_0x0727
            org.telegram.tgnet.TLRPC$TL_jsonArray r0 = (org.telegram.tgnet.TLRPC$TL_jsonArray) r0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r4 = r0.value
            int r4 = r4.size()
            r5 = 0
        L_0x070f:
            if (r5 >= r4) goto L_0x0727
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r9 = r0.value
            java.lang.Object r9 = r9.get(r5)
            org.telegram.tgnet.TLRPC$JSONValue r9 = (org.telegram.tgnet.TLRPC$JSONValue) r9
            boolean r10 = r9 instanceof org.telegram.tgnet.TLRPC$TL_jsonString
            if (r10 == 0) goto L_0x0724
            org.telegram.tgnet.TLRPC$TL_jsonString r9 = (org.telegram.tgnet.TLRPC$TL_jsonString) r9
            java.lang.String r9 = r9.value
            r3.add(r9)
        L_0x0724:
            int r5 = r5 + 1
            goto L_0x070f
        L_0x0727:
            java.util.Set<java.lang.String> r0 = r1.exportUri
            boolean r0 = r0.equals(r3)
            if (r0 != 0) goto L_0x084c
            r1.exportUri = r3
            java.lang.String r0 = "exportUri2"
            r2.putStringSet(r0, r3)
            goto L_0x0776
        L_0x0737:
            r25 = r4
            r26 = r5
            java.util.HashSet r3 = new java.util.HashSet
            r3.<init>()
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value
            boolean r4 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonArray
            if (r4 == 0) goto L_0x0767
            org.telegram.tgnet.TLRPC$TL_jsonArray r0 = (org.telegram.tgnet.TLRPC$TL_jsonArray) r0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r4 = r0.value
            int r4 = r4.size()
            r5 = 0
        L_0x074f:
            if (r5 >= r4) goto L_0x0767
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r9 = r0.value
            java.lang.Object r9 = r9.get(r5)
            org.telegram.tgnet.TLRPC$JSONValue r9 = (org.telegram.tgnet.TLRPC$JSONValue) r9
            boolean r10 = r9 instanceof org.telegram.tgnet.TLRPC$TL_jsonString
            if (r10 == 0) goto L_0x0764
            org.telegram.tgnet.TLRPC$TL_jsonString r9 = (org.telegram.tgnet.TLRPC$TL_jsonString) r9
            java.lang.String r9 = r9.value
            r3.add(r9)
        L_0x0764:
            int r5 = r5 + 1
            goto L_0x074f
        L_0x0767:
            java.util.Set<java.lang.String> r0 = r1.authDomains
            boolean r0 = r0.equals(r3)
            if (r0 != 0) goto L_0x084c
            r1.authDomains = r3
            java.lang.String r0 = "authDomains"
            r2.putStringSet(r0, r3)
        L_0x0776:
            r7 = 1
            goto L_0x084c
        L_0x0779:
            r25 = r4
            r26 = r5
            java.util.HashSet r3 = new java.util.HashSet
            r3.<init>()
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value
            boolean r4 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonArray
            if (r4 == 0) goto L_0x07ad
            org.telegram.tgnet.TLRPC$TL_jsonArray r0 = (org.telegram.tgnet.TLRPC$TL_jsonArray) r0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r4 = r0.value
            int r4 = r4.size()
            r5 = 0
        L_0x0791:
            if (r5 >= r4) goto L_0x07ad
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r9 = r0.value
            java.lang.Object r9 = r9.get(r5)
            org.telegram.tgnet.TLRPC$JSONValue r9 = (org.telegram.tgnet.TLRPC$JSONValue) r9
            boolean r11 = r9 instanceof org.telegram.tgnet.TLRPC$TL_jsonString
            if (r11 == 0) goto L_0x07aa
            org.telegram.tgnet.TLRPC$TL_jsonString r9 = (org.telegram.tgnet.TLRPC$TL_jsonString) r9
            java.lang.String r9 = r9.value
            java.lang.String r9 = r9.replace(r14, r10)
            r3.add(r9)
        L_0x07aa:
            int r5 = r5 + 1
            goto L_0x0791
        L_0x07ad:
            java.util.HashSet<java.lang.String> r0 = r1.diceEmojies
            boolean r0 = r0.equals(r3)
            if (r0 != 0) goto L_0x084c
            r1.diceEmojies = r3
            java.lang.String r0 = "diceEmojies"
            r2.putStringSet(r0, r3)
            goto L_0x0776
        L_0x07bd:
            r25 = r4
            r26 = r5
            java.util.HashSet r3 = new java.util.HashSet
            r3.<init>()
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value
            boolean r4 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonArray
            if (r4 == 0) goto L_0x07ed
            org.telegram.tgnet.TLRPC$TL_jsonArray r0 = (org.telegram.tgnet.TLRPC$TL_jsonArray) r0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r4 = r0.value
            int r4 = r4.size()
            r5 = 0
        L_0x07d5:
            if (r5 >= r4) goto L_0x07ed
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r9 = r0.value
            java.lang.Object r9 = r9.get(r5)
            org.telegram.tgnet.TLRPC$JSONValue r9 = (org.telegram.tgnet.TLRPC$JSONValue) r9
            boolean r10 = r9 instanceof org.telegram.tgnet.TLRPC$TL_jsonString
            if (r10 == 0) goto L_0x07ea
            org.telegram.tgnet.TLRPC$TL_jsonString r9 = (org.telegram.tgnet.TLRPC$TL_jsonString) r9
            java.lang.String r9 = r9.value
            r3.add(r9)
        L_0x07ea:
            int r5 = r5 + 1
            goto L_0x07d5
        L_0x07ed:
            java.util.Set<java.lang.String> r0 = r1.pendingSuggestions
            boolean r0 = r0.equals(r3)
            if (r0 != 0) goto L_0x084c
            r1.pendingSuggestions = r3
            java.lang.String r0 = "pendingSuggestions"
            r2.putStringSet(r0, r3)
            org.telegram.messenger.NotificationCenter r0 = r27.getNotificationCenter()
            int r3 = org.telegram.messenger.NotificationCenter.newSuggestionsAvailable
            r4 = 0
            java.lang.Object[] r5 = new java.lang.Object[r4]
            r0.postNotificationName(r3, r5)
            goto L_0x0776
        L_0x080a:
            r25 = r4
            r26 = r5
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonBool
            if (r3 == 0) goto L_0x084c
            org.telegram.tgnet.TLRPC$TL_jsonBool r0 = (org.telegram.tgnet.TLRPC$TL_jsonBool) r0
            boolean r0 = r0.value
            boolean r3 = r1.qrLoginCamera
            if (r0 == r3) goto L_0x084c
            r1.qrLoginCamera = r0
            java.lang.String r3 = "qrLoginCamera"
            r2.putBoolean(r3, r0)
            goto L_0x0776
        L_0x0825:
            r25 = r4
            r26 = r5
            org.telegram.tgnet.TLRPC$JSONValue r0 = r0.value
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_jsonBool
            if (r3 == 0) goto L_0x084c
            org.telegram.tgnet.TLRPC$TL_jsonBool r0 = (org.telegram.tgnet.TLRPC$TL_jsonBool) r0
            boolean r0 = r0.value
            boolean r3 = r1.showFiltersTooltip
            if (r0 == r3) goto L_0x084c
            r1.showFiltersTooltip = r0
            java.lang.String r3 = "showFiltersTooltip"
            r2.putBoolean(r3, r0)
            org.telegram.messenger.NotificationCenter r0 = r27.getNotificationCenter()
            int r3 = org.telegram.messenger.NotificationCenter.filterSettingsUpdated
            r4 = 0
            java.lang.Object[] r5 = new java.lang.Object[r4]
            r0.postNotificationName(r3, r5)
            goto L_0x0776
        L_0x084c:
            int r6 = r6 + 1
            r4 = r25
            r5 = r26
            goto L_0x001a
        L_0x0854:
            if (r7 == 0) goto L_0x0859
            r2.commit()
        L_0x0859:
            if (r8 == 0) goto L_0x0869
            org.telegram.messenger.ApplicationLoader.startPushService()
            org.telegram.tgnet.ConnectionsManager r0 = r27.getConnectionsManager()
            boolean r2 = r0.isPushConnectionEnabled()
            r0.setPushConnectionEnabled(r2)
        L_0x0869:
            r2 = 0
            r1.loadingAppConfig = r2
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$loadAppConfig$14(org.telegram.tgnet.TLObject):void");
    }

    public void removeSuggestion(long j, String str) {
        if (!TextUtils.isEmpty(str)) {
            if (j == 0) {
                if (this.pendingSuggestions.remove(str)) {
                    SharedPreferences.Editor edit = this.mainPreferences.edit();
                    edit.putStringSet("pendingSuggestions", this.pendingSuggestions);
                    edit.commit();
                    getNotificationCenter().postNotificationName(NotificationCenter.newSuggestionsAvailable, new Object[0]);
                } else {
                    return;
                }
            }
            TLRPC$TL_help_dismissSuggestion tLRPC$TL_help_dismissSuggestion = new TLRPC$TL_help_dismissSuggestion();
            tLRPC$TL_help_dismissSuggestion.suggestion = str;
            if (j == 0) {
                tLRPC$TL_help_dismissSuggestion.peer = new TLRPC$TL_inputPeerEmpty();
            } else {
                tLRPC$TL_help_dismissSuggestion.peer = getInputPeer(j);
            }
            getConnectionsManager().sendRequest(tLRPC$TL_help_dismissSuggestion, MessagesController$$ExternalSyntheticLambda323.INSTANCE);
        }
    }

    public void updateConfig(TLRPC$TL_config tLRPC$TL_config) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda138(this, tLRPC$TL_config));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateConfig$17(TLRPC$TL_config tLRPC$TL_config) {
        String str;
        getDownloadController().loadAutoDownloadConfig(false);
        loadAppConfig();
        this.maxMegagroupCount = tLRPC$TL_config.megagroup_size_max;
        this.maxGroupCount = tLRPC$TL_config.chat_size_max;
        this.maxEditTime = tLRPC$TL_config.edit_time_limit;
        this.ratingDecay = tLRPC$TL_config.rating_e_decay;
        this.maxRecentGifsCount = tLRPC$TL_config.saved_gifs_limit;
        this.maxRecentStickersCount = tLRPC$TL_config.stickers_recent_limit;
        this.maxFaveStickersCount = tLRPC$TL_config.stickers_faved_limit;
        this.revokeTimeLimit = tLRPC$TL_config.revoke_time_limit;
        this.revokeTimePmLimit = tLRPC$TL_config.revoke_pm_time_limit;
        this.canRevokePmInbox = tLRPC$TL_config.revoke_pm_inbox;
        String str2 = tLRPC$TL_config.me_url_prefix;
        this.linkPrefix = str2;
        if (str2.endsWith("/")) {
            String str3 = this.linkPrefix;
            this.linkPrefix = str3.substring(0, str3.length() - 1);
        }
        if (this.linkPrefix.startsWith("https://")) {
            this.linkPrefix = this.linkPrefix.substring(8);
        } else if (this.linkPrefix.startsWith("http://")) {
            this.linkPrefix = this.linkPrefix.substring(7);
        }
        this.callReceiveTimeout = tLRPC$TL_config.call_receive_timeout_ms;
        this.callRingTimeout = tLRPC$TL_config.call_ring_timeout_ms;
        this.callConnectTimeout = tLRPC$TL_config.call_connect_timeout_ms;
        this.callPacketTimeout = tLRPC$TL_config.call_packet_timeout_ms;
        this.maxPinnedDialogsCount = tLRPC$TL_config.pinned_dialogs_count_max;
        this.maxFolderPinnedDialogsCount = tLRPC$TL_config.pinned_infolder_count_max;
        this.maxMessageLength = tLRPC$TL_config.message_length_max;
        this.maxCaptionLength = tLRPC$TL_config.caption_length_max;
        this.preloadFeaturedStickers = tLRPC$TL_config.preload_featured_stickers;
        String str4 = tLRPC$TL_config.venue_search_username;
        if (str4 != null) {
            this.venueSearchBot = str4;
        }
        String str5 = tLRPC$TL_config.gif_search_username;
        if (str5 != null) {
            this.gifSearchBot = str5;
        }
        if (this.imageSearchBot != null) {
            this.imageSearchBot = tLRPC$TL_config.img_search_username;
        }
        this.blockedCountry = tLRPC$TL_config.blocked_mode;
        this.dcDomainName = tLRPC$TL_config.dc_txt_domain_name;
        this.webFileDatacenterId = tLRPC$TL_config.webfile_dc_id;
        String str6 = tLRPC$TL_config.suggested_lang_code;
        if (str6 != null && ((str = this.suggestedLangCode) == null || !str.equals(str6))) {
            this.suggestedLangCode = tLRPC$TL_config.suggested_lang_code;
            LocaleController.getInstance().loadRemoteLanguages(this.currentAccount);
        }
        Theme.loadRemoteThemes(this.currentAccount, false);
        Theme.checkCurrentRemoteTheme(false);
        if (tLRPC$TL_config.static_maps_provider == null) {
            tLRPC$TL_config.static_maps_provider = "telegram";
        }
        this.mapKey = null;
        this.mapProvider = 2;
        this.availableMapProviders = 0;
        FileLog.d("map providers = " + tLRPC$TL_config.static_maps_provider);
        String[] split = tLRPC$TL_config.static_maps_provider.split(",");
        for (int i = 0; i < split.length; i++) {
            String[] split2 = split[i].split("\\+");
            if (split2.length > 0) {
                String[] split3 = split2[0].split(":");
                if (split3.length > 0) {
                    if ("yandex".equals(split3[0])) {
                        if (i == 0) {
                            if (split2.length > 1) {
                                this.mapProvider = 3;
                            } else {
                                this.mapProvider = 1;
                            }
                        }
                        this.availableMapProviders |= 4;
                    } else if ("google".equals(split3[0])) {
                        if (i == 0 && split2.length > 1) {
                            this.mapProvider = 4;
                        }
                        this.availableMapProviders |= 1;
                    } else if ("telegram".equals(split3[0])) {
                        if (i == 0) {
                            this.mapProvider = 2;
                        }
                        this.availableMapProviders |= 2;
                    }
                    if (split3.length > 1) {
                        this.mapKey = split3[1];
                    }
                }
            }
        }
        SharedPreferences.Editor edit = this.mainPreferences.edit();
        edit.putInt("maxGroupCount", this.maxGroupCount);
        edit.putInt("maxMegagroupCount", this.maxMegagroupCount);
        edit.putInt("maxEditTime", this.maxEditTime);
        edit.putInt("ratingDecay", this.ratingDecay);
        edit.putInt("maxRecentGifsCount", this.maxRecentGifsCount);
        edit.putInt("maxRecentStickersCount", this.maxRecentStickersCount);
        edit.putInt("maxFaveStickersCount", this.maxFaveStickersCount);
        edit.putInt("callReceiveTimeout", this.callReceiveTimeout);
        edit.putInt("callRingTimeout", this.callRingTimeout);
        edit.putInt("callConnectTimeout", this.callConnectTimeout);
        edit.putInt("callPacketTimeout", this.callPacketTimeout);
        edit.putString("linkPrefix", this.linkPrefix);
        edit.putInt("maxPinnedDialogsCount", this.maxPinnedDialogsCount);
        edit.putInt("maxFolderPinnedDialogsCount", this.maxFolderPinnedDialogsCount);
        edit.putInt("maxMessageLength", this.maxMessageLength);
        edit.putInt("maxCaptionLength", this.maxCaptionLength);
        edit.putBoolean("preloadFeaturedStickers", this.preloadFeaturedStickers);
        edit.putInt("revokeTimeLimit", this.revokeTimeLimit);
        edit.putInt("revokeTimePmLimit", this.revokeTimePmLimit);
        edit.putInt("mapProvider", this.mapProvider);
        String str7 = this.mapKey;
        if (str7 != null) {
            edit.putString("pk", str7);
        } else {
            edit.remove("pk");
        }
        edit.putBoolean("canRevokePmInbox", this.canRevokePmInbox);
        edit.putBoolean("blockedCountry", this.blockedCountry);
        edit.putString("venueSearchBot", this.venueSearchBot);
        edit.putString("gifSearchBot", this.gifSearchBot);
        edit.putString("imageSearchBot", this.imageSearchBot);
        edit.putString("dcDomainName2", this.dcDomainName);
        edit.putInt("webFileDatacenterId", this.webFileDatacenterId);
        edit.putString("suggestedLangCode", this.suggestedLangCode);
        edit.commit();
        LocaleController.getInstance().checkUpdateForCurrentRemoteLocale(this.currentAccount, tLRPC$TL_config.lang_pack_version, tLRPC$TL_config.base_lang_pack_version);
        getNotificationCenter().postNotificationName(NotificationCenter.configLoaded, new Object[0]);
    }

    public void addSupportUser() {
        TLRPC$TL_userForeign_old2 tLRPC$TL_userForeign_old2 = new TLRPC$TL_userForeign_old2();
        tLRPC$TL_userForeign_old2.phone = "333";
        tLRPC$TL_userForeign_old2.id = 333000;
        tLRPC$TL_userForeign_old2.first_name = "Telegram";
        tLRPC$TL_userForeign_old2.last_name = "";
        tLRPC$TL_userForeign_old2.status = null;
        tLRPC$TL_userForeign_old2.photo = new TLRPC$TL_userProfilePhotoEmpty();
        putUser(tLRPC$TL_userForeign_old2, true);
        TLRPC$TL_userForeign_old2 tLRPC$TL_userForeign_old22 = new TLRPC$TL_userForeign_old2();
        tLRPC$TL_userForeign_old22.phone = "42777";
        tLRPC$TL_userForeign_old22.id = 777000;
        tLRPC$TL_userForeign_old22.verified = true;
        tLRPC$TL_userForeign_old22.first_name = "Telegram";
        tLRPC$TL_userForeign_old22.last_name = "Notifications";
        tLRPC$TL_userForeign_old22.status = null;
        tLRPC$TL_userForeign_old22.photo = new TLRPC$TL_userProfilePhotoEmpty();
        putUser(tLRPC$TL_userForeign_old22, true);
    }

    public TLRPC$InputUser getInputUser(TLRPC$User tLRPC$User) {
        if (tLRPC$User == null) {
            return new TLRPC$TL_inputUserEmpty();
        }
        if (tLRPC$User.id == getUserConfig().getClientUserId()) {
            return new TLRPC$TL_inputUserSelf();
        }
        TLRPC$TL_inputUser tLRPC$TL_inputUser = new TLRPC$TL_inputUser();
        tLRPC$TL_inputUser.user_id = tLRPC$User.id;
        tLRPC$TL_inputUser.access_hash = tLRPC$User.access_hash;
        return tLRPC$TL_inputUser;
    }

    public TLRPC$InputUser getInputUser(TLRPC$InputPeer tLRPC$InputPeer) {
        if (tLRPC$InputPeer == null) {
            return new TLRPC$TL_inputUserEmpty();
        }
        if (tLRPC$InputPeer instanceof TLRPC$TL_inputPeerSelf) {
            return new TLRPC$TL_inputUserSelf();
        }
        TLRPC$TL_inputUser tLRPC$TL_inputUser = new TLRPC$TL_inputUser();
        tLRPC$TL_inputUser.user_id = tLRPC$InputPeer.user_id;
        tLRPC$TL_inputUser.access_hash = tLRPC$InputPeer.access_hash;
        return tLRPC$TL_inputUser;
    }

    public TLRPC$InputUser getInputUser(long j) {
        return getInputUser(getUser(Long.valueOf(j)));
    }

    public static TLRPC$InputChannel getInputChannel(TLRPC$Chat tLRPC$Chat) {
        if (!(tLRPC$Chat instanceof TLRPC$TL_channel) && !(tLRPC$Chat instanceof TLRPC$TL_channelForbidden)) {
            return new TLRPC$TL_inputChannelEmpty();
        }
        TLRPC$TL_inputChannel tLRPC$TL_inputChannel = new TLRPC$TL_inputChannel();
        tLRPC$TL_inputChannel.channel_id = tLRPC$Chat.id;
        tLRPC$TL_inputChannel.access_hash = tLRPC$Chat.access_hash;
        return tLRPC$TL_inputChannel;
    }

    public static TLRPC$InputChannel getInputChannel(TLRPC$InputPeer tLRPC$InputPeer) {
        TLRPC$TL_inputChannel tLRPC$TL_inputChannel = new TLRPC$TL_inputChannel();
        tLRPC$TL_inputChannel.channel_id = tLRPC$InputPeer.channel_id;
        tLRPC$TL_inputChannel.access_hash = tLRPC$InputPeer.access_hash;
        return tLRPC$TL_inputChannel;
    }

    public TLRPC$InputChannel getInputChannel(long j) {
        return getInputChannel(getChat(Long.valueOf(j)));
    }

    public TLRPC$InputPeer getInputPeer(TLRPC$Peer tLRPC$Peer) {
        if (tLRPC$Peer instanceof TLRPC$TL_peerChat) {
            TLRPC$TL_inputPeerChat tLRPC$TL_inputPeerChat = new TLRPC$TL_inputPeerChat();
            tLRPC$TL_inputPeerChat.chat_id = tLRPC$Peer.chat_id;
            return tLRPC$TL_inputPeerChat;
        } else if (tLRPC$Peer instanceof TLRPC$TL_peerChannel) {
            TLRPC$TL_inputPeerChannel tLRPC$TL_inputPeerChannel = new TLRPC$TL_inputPeerChannel();
            long j = tLRPC$Peer.channel_id;
            tLRPC$TL_inputPeerChannel.channel_id = j;
            TLRPC$Chat chat = getChat(Long.valueOf(j));
            if (chat == null) {
                return tLRPC$TL_inputPeerChannel;
            }
            tLRPC$TL_inputPeerChannel.access_hash = chat.access_hash;
            return tLRPC$TL_inputPeerChannel;
        } else {
            TLRPC$TL_inputPeerUser tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerUser();
            long j2 = tLRPC$Peer.user_id;
            tLRPC$TL_inputPeerUser.user_id = j2;
            TLRPC$User user = getUser(Long.valueOf(j2));
            if (user == null) {
                return tLRPC$TL_inputPeerUser;
            }
            tLRPC$TL_inputPeerUser.access_hash = user.access_hash;
            return tLRPC$TL_inputPeerUser;
        }
    }

    public TLRPC$InputPeer getInputPeer(long j) {
        if (j < 0) {
            long j2 = -j;
            TLRPC$Chat chat = getChat(Long.valueOf(j2));
            if (ChatObject.isChannel(chat)) {
                TLRPC$TL_inputPeerChannel tLRPC$TL_inputPeerChannel = new TLRPC$TL_inputPeerChannel();
                tLRPC$TL_inputPeerChannel.channel_id = j2;
                tLRPC$TL_inputPeerChannel.access_hash = chat.access_hash;
                return tLRPC$TL_inputPeerChannel;
            }
            TLRPC$TL_inputPeerChat tLRPC$TL_inputPeerChat = new TLRPC$TL_inputPeerChat();
            tLRPC$TL_inputPeerChat.chat_id = j2;
            return tLRPC$TL_inputPeerChat;
        }
        TLRPC$User user = getUser(Long.valueOf(j));
        TLRPC$TL_inputPeerUser tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerUser();
        tLRPC$TL_inputPeerUser.user_id = j;
        if (user == null) {
            return tLRPC$TL_inputPeerUser;
        }
        tLRPC$TL_inputPeerUser.access_hash = user.access_hash;
        return tLRPC$TL_inputPeerUser;
    }

    public static TLRPC$InputPeer getInputPeer(TLRPC$Chat tLRPC$Chat) {
        if (ChatObject.isChannel(tLRPC$Chat)) {
            TLRPC$TL_inputPeerChannel tLRPC$TL_inputPeerChannel = new TLRPC$TL_inputPeerChannel();
            tLRPC$TL_inputPeerChannel.channel_id = tLRPC$Chat.id;
            tLRPC$TL_inputPeerChannel.access_hash = tLRPC$Chat.access_hash;
            return tLRPC$TL_inputPeerChannel;
        }
        TLRPC$TL_inputPeerChat tLRPC$TL_inputPeerChat = new TLRPC$TL_inputPeerChat();
        tLRPC$TL_inputPeerChat.chat_id = tLRPC$Chat.id;
        return tLRPC$TL_inputPeerChat;
    }

    public static TLRPC$InputPeer getInputPeer(TLRPC$User tLRPC$User) {
        TLRPC$TL_inputPeerUser tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerUser();
        tLRPC$TL_inputPeerUser.user_id = tLRPC$User.id;
        tLRPC$TL_inputPeerUser.access_hash = tLRPC$User.access_hash;
        return tLRPC$TL_inputPeerUser;
    }

    public TLRPC$Peer getPeer(long j) {
        if (j < 0) {
            long j2 = -j;
            TLRPC$Chat chat = getChat(Long.valueOf(j2));
            if ((chat instanceof TLRPC$TL_channel) || (chat instanceof TLRPC$TL_channelForbidden)) {
                TLRPC$TL_peerChannel tLRPC$TL_peerChannel = new TLRPC$TL_peerChannel();
                tLRPC$TL_peerChannel.channel_id = j2;
                return tLRPC$TL_peerChannel;
            }
            TLRPC$TL_peerChat tLRPC$TL_peerChat = new TLRPC$TL_peerChat();
            tLRPC$TL_peerChat.chat_id = j2;
            return tLRPC$TL_peerChat;
        }
        getUser(Long.valueOf(j));
        TLRPC$TL_peerUser tLRPC$TL_peerUser = new TLRPC$TL_peerUser();
        tLRPC$TL_peerUser.user_id = j;
        return tLRPC$TL_peerUser;
    }

    public void didReceivedNotification(int i, int i2, Object... objArr) {
        MessageObject messageObject;
        TLRPC$InputFile tLRPC$InputFile;
        Theme.ThemeAccent themeAccent;
        Theme.ThemeInfo themeInfo;
        TLRPC$InputFile tLRPC$InputFile2;
        TLRPC$TL_theme tLRPC$TL_theme;
        TLRPC$TL_inputThemeSettings tLRPC$TL_inputThemeSettings = null;
        if (i == NotificationCenter.fileUploaded) {
            String str = objArr[0];
            TLRPC$InputFile tLRPC$InputFile3 = objArr[1];
            String str2 = this.uploadingAvatar;
            if (str2 == null || !str2.equals(str)) {
                String str3 = this.uploadingWallpaper;
                if (str3 == null || !str3.equals(str)) {
                    Object obj = this.uploadingThemes.get(str);
                    if (obj instanceof Theme.ThemeInfo) {
                        Theme.ThemeInfo themeInfo2 = (Theme.ThemeInfo) obj;
                        if (str.equals(themeInfo2.uploadingThumb)) {
                            themeInfo2.uploadedThumb = tLRPC$InputFile3;
                            themeInfo2.uploadingThumb = null;
                        } else if (str.equals(themeInfo2.uploadingFile)) {
                            themeInfo2.uploadedFile = tLRPC$InputFile3;
                            themeInfo2.uploadingFile = null;
                        }
                        tLRPC$InputFile = themeInfo2.uploadedThumb;
                        tLRPC$InputFile2 = themeInfo2.uploadedFile;
                        themeInfo = themeInfo2;
                        themeAccent = null;
                    } else if (obj instanceof Theme.ThemeAccent) {
                        Theme.ThemeAccent themeAccent2 = (Theme.ThemeAccent) obj;
                        if (str.equals(themeAccent2.uploadingThumb)) {
                            themeAccent2.uploadedThumb = tLRPC$InputFile3;
                            themeAccent2.uploadingThumb = null;
                        } else if (str.equals(themeAccent2.uploadingFile)) {
                            themeAccent2.uploadedFile = tLRPC$InputFile3;
                            themeAccent2.uploadingFile = null;
                        }
                        themeInfo = themeAccent2.parentTheme;
                        themeAccent = themeAccent2;
                        tLRPC$InputFile = themeAccent2.uploadedThumb;
                        tLRPC$InputFile2 = themeAccent2.uploadedFile;
                    } else {
                        tLRPC$InputFile = null;
                        tLRPC$InputFile2 = null;
                        themeInfo = null;
                        themeAccent = null;
                    }
                    this.uploadingThemes.remove(str);
                    if (tLRPC$InputFile2 != null && tLRPC$InputFile != null) {
                        new File(str);
                        TLRPC$TL_account_uploadTheme tLRPC$TL_account_uploadTheme = new TLRPC$TL_account_uploadTheme();
                        tLRPC$TL_account_uploadTheme.mime_type = "application/x-tgtheme-android";
                        tLRPC$TL_account_uploadTheme.file_name = "theme.attheme";
                        tLRPC$TL_account_uploadTheme.file = tLRPC$InputFile2;
                        tLRPC$InputFile2.name = "theme.attheme";
                        tLRPC$TL_account_uploadTheme.thumb = tLRPC$InputFile;
                        tLRPC$InputFile.name = "theme-preview.jpg";
                        tLRPC$TL_account_uploadTheme.flags |= 1;
                        if (themeAccent != null) {
                            themeAccent.uploadedFile = null;
                            themeAccent.uploadedThumb = null;
                            tLRPC$TL_theme = themeAccent.info;
                            tLRPC$TL_inputThemeSettings = new TLRPC$TL_inputThemeSettings();
                            tLRPC$TL_inputThemeSettings.base_theme = Theme.getBaseThemeByKey(themeInfo.name);
                            tLRPC$TL_inputThemeSettings.accent_color = themeAccent.accentColor;
                            int i3 = themeAccent.accentColor2;
                            if (i3 != 0) {
                                tLRPC$TL_inputThemeSettings.flags |= 8;
                                tLRPC$TL_inputThemeSettings.outbox_accent_color = i3;
                            }
                            int i4 = themeAccent.myMessagesAccentColor;
                            if (i4 != 0) {
                                tLRPC$TL_inputThemeSettings.message_colors.add(Integer.valueOf(i4));
                                tLRPC$TL_inputThemeSettings.flags |= 1;
                                int i5 = themeAccent.myMessagesGradientAccentColor1;
                                if (i5 != 0) {
                                    tLRPC$TL_inputThemeSettings.message_colors.add(Integer.valueOf(i5));
                                    int i6 = themeAccent.myMessagesGradientAccentColor2;
                                    if (i6 != 0) {
                                        tLRPC$TL_inputThemeSettings.message_colors.add(Integer.valueOf(i6));
                                        int i7 = themeAccent.myMessagesGradientAccentColor3;
                                        if (i7 != 0) {
                                            tLRPC$TL_inputThemeSettings.message_colors.add(Integer.valueOf(i7));
                                        }
                                    }
                                }
                                tLRPC$TL_inputThemeSettings.message_colors_animated = themeAccent.myMessagesAnimated;
                            }
                            tLRPC$TL_inputThemeSettings.flags |= 2;
                            tLRPC$TL_inputThemeSettings.wallpaper_settings = new TLRPC$TL_wallPaperSettings();
                            if (!TextUtils.isEmpty(themeAccent.patternSlug)) {
                                TLRPC$TL_inputWallPaperSlug tLRPC$TL_inputWallPaperSlug = new TLRPC$TL_inputWallPaperSlug();
                                tLRPC$TL_inputWallPaperSlug.slug = themeAccent.patternSlug;
                                tLRPC$TL_inputThemeSettings.wallpaper = tLRPC$TL_inputWallPaperSlug;
                                TLRPC$WallPaperSettings tLRPC$WallPaperSettings = tLRPC$TL_inputThemeSettings.wallpaper_settings;
                                tLRPC$WallPaperSettings.intensity = (int) (themeAccent.patternIntensity * 100.0f);
                                tLRPC$WallPaperSettings.flags |= 8;
                            } else {
                                TLRPC$TL_inputWallPaperNoFile tLRPC$TL_inputWallPaperNoFile = new TLRPC$TL_inputWallPaperNoFile();
                                tLRPC$TL_inputWallPaperNoFile.id = 0;
                                tLRPC$TL_inputThemeSettings.wallpaper = tLRPC$TL_inputWallPaperNoFile;
                            }
                            TLRPC$WallPaperSettings tLRPC$WallPaperSettings2 = tLRPC$TL_inputThemeSettings.wallpaper_settings;
                            tLRPC$WallPaperSettings2.motion = themeAccent.patternMotion;
                            long j = themeAccent.backgroundOverrideColor;
                            if (j != 0) {
                                tLRPC$WallPaperSettings2.background_color = (int) j;
                                tLRPC$WallPaperSettings2.flags |= 1;
                            }
                            long j2 = themeAccent.backgroundGradientOverrideColor1;
                            if (j2 != 0) {
                                tLRPC$WallPaperSettings2.second_background_color = (int) j2;
                                tLRPC$WallPaperSettings2.flags |= 16;
                                tLRPC$WallPaperSettings2.rotation = AndroidUtilities.getWallpaperRotation(themeAccent.backgroundRotation, true);
                            }
                            long j3 = themeAccent.backgroundGradientOverrideColor2;
                            if (j3 != 0) {
                                TLRPC$WallPaperSettings tLRPC$WallPaperSettings3 = tLRPC$TL_inputThemeSettings.wallpaper_settings;
                                tLRPC$WallPaperSettings3.third_background_color = (int) j3;
                                tLRPC$WallPaperSettings3.flags |= 32;
                            }
                            long j4 = themeAccent.backgroundGradientOverrideColor3;
                            if (j4 != 0) {
                                TLRPC$WallPaperSettings tLRPC$WallPaperSettings4 = tLRPC$TL_inputThemeSettings.wallpaper_settings;
                                tLRPC$WallPaperSettings4.fourth_background_color = (int) j4;
                                tLRPC$WallPaperSettings4.flags |= 64;
                            }
                        } else {
                            themeInfo.uploadedFile = null;
                            themeInfo.uploadedThumb = null;
                            tLRPC$TL_theme = themeInfo.info;
                        }
                        getConnectionsManager().sendRequest(tLRPC$TL_account_uploadTheme, new MessagesController$$ExternalSyntheticLambda292(this, tLRPC$TL_theme, themeInfo, tLRPC$TL_inputThemeSettings, themeAccent));
                        return;
                    }
                    return;
                }
                TLRPC$TL_account_uploadWallPaper tLRPC$TL_account_uploadWallPaper = new TLRPC$TL_account_uploadWallPaper();
                tLRPC$TL_account_uploadWallPaper.file = tLRPC$InputFile3;
                tLRPC$TL_account_uploadWallPaper.mime_type = "image/jpeg";
                Theme.OverrideWallpaperInfo overrideWallpaperInfo = this.uploadingWallpaperInfo;
                TLRPC$TL_wallPaperSettings tLRPC$TL_wallPaperSettings = new TLRPC$TL_wallPaperSettings();
                tLRPC$TL_wallPaperSettings.blur = overrideWallpaperInfo.isBlurred;
                tLRPC$TL_wallPaperSettings.motion = overrideWallpaperInfo.isMotion;
                tLRPC$TL_account_uploadWallPaper.settings = tLRPC$TL_wallPaperSettings;
                getConnectionsManager().sendRequest(tLRPC$TL_account_uploadWallPaper, new MessagesController$$ExternalSyntheticLambda298(this, overrideWallpaperInfo, tLRPC$TL_wallPaperSettings));
                return;
            }
            TLRPC$TL_photos_uploadProfilePhoto tLRPC$TL_photos_uploadProfilePhoto = new TLRPC$TL_photos_uploadProfilePhoto();
            tLRPC$TL_photos_uploadProfilePhoto.file = tLRPC$InputFile3;
            tLRPC$TL_photos_uploadProfilePhoto.flags |= 1;
            getConnectionsManager().sendRequest(tLRPC$TL_photos_uploadProfilePhoto, new MessagesController$$ExternalSyntheticLambda207(this));
        } else if (i == NotificationCenter.fileUploadFailed) {
            String str4 = objArr[0];
            String str5 = this.uploadingAvatar;
            if (str5 == null || !str5.equals(str4)) {
                String str6 = this.uploadingWallpaper;
                if (str6 == null || !str6.equals(str4)) {
                    Object remove = this.uploadingThemes.remove(str4);
                    if (remove instanceof Theme.ThemeInfo) {
                        Theme.ThemeInfo themeInfo3 = (Theme.ThemeInfo) remove;
                        themeInfo3.uploadedFile = null;
                        themeInfo3.uploadedThumb = null;
                        getNotificationCenter().postNotificationName(NotificationCenter.themeUploadError, themeInfo3, null);
                    } else if (remove instanceof Theme.ThemeAccent) {
                        Theme.ThemeAccent themeAccent3 = (Theme.ThemeAccent) remove;
                        themeAccent3.uploadingThumb = null;
                        getNotificationCenter().postNotificationName(NotificationCenter.themeUploadError, themeAccent3.parentTheme, themeAccent3);
                    }
                } else {
                    this.uploadingWallpaper = null;
                    this.uploadingWallpaperInfo = null;
                }
            } else {
                this.uploadingAvatar = null;
            }
        } else if (i == NotificationCenter.messageReceivedByServer) {
            if (!objArr[6].booleanValue()) {
                Integer num = objArr[0];
                Integer num2 = objArr[1];
                Long l = objArr[3];
                MessageObject messageObject2 = this.dialogMessage.get(l.longValue());
                if (messageObject2 != null && (messageObject2.getId() == num.intValue() || messageObject2.messageOwner.local_id == num.intValue())) {
                    messageObject2.messageOwner.id = num2.intValue();
                    messageObject2.messageOwner.send_state = 0;
                }
                TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(l.longValue());
                if (tLRPC$Dialog != null && tLRPC$Dialog.top_message == num.intValue()) {
                    tLRPC$Dialog.top_message = num2.intValue();
                    getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                }
                MessageObject messageObject3 = this.dialogMessagesByIds.get(num.intValue());
                if (messageObject3 != null) {
                    this.dialogMessagesByIds.remove(num.intValue());
                    this.dialogMessagesByIds.put(num2.intValue(), messageObject3);
                }
                if (DialogObject.isChatDialog(l.longValue())) {
                    TLRPC$ChatFull tLRPC$ChatFull = this.fullChats.get(-l.longValue());
                    TLRPC$Chat chat = getChat(Long.valueOf(-l.longValue()));
                    if (chat != null && !ChatObject.hasAdminRights(chat) && tLRPC$ChatFull != null && tLRPC$ChatFull.slowmode_seconds != 0) {
                        tLRPC$ChatFull.slowmode_next_send_date = getConnectionsManager().getCurrentTime() + tLRPC$ChatFull.slowmode_seconds;
                        tLRPC$ChatFull.flags |= 262144;
                        getMessagesStorage().updateChatInfo(tLRPC$ChatFull, false);
                    }
                }
            }
        } else if (i == NotificationCenter.updateMessageMedia) {
            TLRPC$Message tLRPC$Message = objArr[0];
            if (tLRPC$Message.peer_id.channel_id == 0 && (messageObject = this.dialogMessagesByIds.get(tLRPC$Message.id)) != null) {
                messageObject.messageOwner.media = tLRPC$Message.media;
                TLRPC$MessageMedia tLRPC$MessageMedia = tLRPC$Message.media;
                if (tLRPC$MessageMedia.ttl_seconds == 0) {
                    return;
                }
                if ((tLRPC$MessageMedia.photo instanceof TLRPC$TL_photoEmpty) || (tLRPC$MessageMedia.document instanceof TLRPC$TL_documentEmpty)) {
                    messageObject.setType();
                    getNotificationCenter().postNotificationName(NotificationCenter.notificationsSettingsUpdated, new Object[0]);
                }
            }
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$19(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$User user = getUser(Long.valueOf(getUserConfig().getClientUserId()));
            if (user == null) {
                user = getUserConfig().getCurrentUser();
                putUser(user, true);
            } else {
                getUserConfig().setCurrentUser(user);
            }
            if (user != null) {
                TLRPC$TL_photos_photo tLRPC$TL_photos_photo = (TLRPC$TL_photos_photo) tLObject;
                ArrayList<TLRPC$PhotoSize> arrayList = tLRPC$TL_photos_photo.photo.sizes;
                TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(arrayList, 100);
                TLRPC$PhotoSize closestPhotoSizeWithSize2 = FileLoader.getClosestPhotoSizeWithSize(arrayList, 1000);
                TLRPC$TL_userProfilePhoto tLRPC$TL_userProfilePhoto = new TLRPC$TL_userProfilePhoto();
                user.photo = tLRPC$TL_userProfilePhoto;
                tLRPC$TL_userProfilePhoto.photo_id = tLRPC$TL_photos_photo.photo.id;
                if (closestPhotoSizeWithSize != null) {
                    tLRPC$TL_userProfilePhoto.photo_small = closestPhotoSizeWithSize.location;
                }
                if (closestPhotoSizeWithSize2 != null) {
                    tLRPC$TL_userProfilePhoto.photo_big = closestPhotoSizeWithSize2.location;
                }
                getMessagesStorage().clearUserPhotos(user.id);
                ArrayList arrayList2 = new ArrayList();
                arrayList2.add(user);
                getMessagesStorage().putUsersAndChats(arrayList2, (ArrayList<TLRPC$Chat>) null, false, true);
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda9(this));
            }
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$18() {
        getNotificationCenter().postNotificationName(NotificationCenter.mainUserInfoChanged, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_AVATAR));
        getUserConfig().saveConfig(true);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$21(Theme.OverrideWallpaperInfo overrideWallpaperInfo, TLRPC$TL_wallPaperSettings tLRPC$TL_wallPaperSettings, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        TLRPC$WallPaper tLRPC$WallPaper = (TLRPC$WallPaper) tLObject;
        File file = new File(ApplicationLoader.getFilesDirFixed(), overrideWallpaperInfo.originalFileName);
        if (tLRPC$WallPaper != null) {
            try {
                AndroidUtilities.copyFile(file, FileLoader.getPathToAttach(tLRPC$WallPaper.document, true));
            } catch (Exception unused) {
            }
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda167(this, tLRPC$WallPaper, tLRPC$TL_wallPaperSettings, overrideWallpaperInfo, file));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$20(TLRPC$WallPaper tLRPC$WallPaper, TLRPC$TL_wallPaperSettings tLRPC$TL_wallPaperSettings, Theme.OverrideWallpaperInfo overrideWallpaperInfo, File file) {
        if (this.uploadingWallpaper != null && tLRPC$WallPaper != null) {
            tLRPC$WallPaper.settings = tLRPC$TL_wallPaperSettings;
            tLRPC$WallPaper.flags |= 4;
            overrideWallpaperInfo.slug = tLRPC$WallPaper.slug;
            overrideWallpaperInfo.saveOverrideWallpaper();
            ArrayList arrayList = new ArrayList();
            arrayList.add(tLRPC$WallPaper);
            getMessagesStorage().putWallpapers(arrayList, 2);
            TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(tLRPC$WallPaper.document.thumbs, 320);
            if (closestPhotoSizeWithSize != null) {
                ImageLoader.getInstance().replaceImageInCache(Utilities.MD5(file.getAbsolutePath()) + "@100_100", closestPhotoSizeWithSize.location.volume_id + "_" + closestPhotoSizeWithSize.location.local_id + "@100_100", ImageLocation.getForDocument(closestPhotoSizeWithSize, tLRPC$WallPaper.document), false);
            }
            NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.wallpapersNeedReload, tLRPC$WallPaper.slug);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$27(TLRPC$TL_theme tLRPC$TL_theme, Theme.ThemeInfo themeInfo, TLRPC$TL_inputThemeSettings tLRPC$TL_inputThemeSettings, Theme.ThemeAccent themeAccent, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        String name = tLRPC$TL_theme != null ? tLRPC$TL_theme.title : themeInfo.getName();
        int lastIndexOf = name.lastIndexOf(".attheme");
        if (lastIndexOf > 0) {
            name = name.substring(0, lastIndexOf);
        }
        if (tLObject != null) {
            TLRPC$Document tLRPC$Document = (TLRPC$Document) tLObject;
            TLRPC$TL_inputDocument tLRPC$TL_inputDocument = new TLRPC$TL_inputDocument();
            tLRPC$TL_inputDocument.access_hash = tLRPC$Document.access_hash;
            tLRPC$TL_inputDocument.id = tLRPC$Document.id;
            tLRPC$TL_inputDocument.file_reference = tLRPC$Document.file_reference;
            if (tLRPC$TL_theme == null || !tLRPC$TL_theme.creator) {
                TLRPC$TL_account_createTheme tLRPC$TL_account_createTheme = new TLRPC$TL_account_createTheme();
                tLRPC$TL_account_createTheme.document = tLRPC$TL_inputDocument;
                tLRPC$TL_account_createTheme.flags |= 4;
                tLRPC$TL_account_createTheme.slug = (tLRPC$TL_theme == null || TextUtils.isEmpty(tLRPC$TL_theme.slug)) ? "" : tLRPC$TL_theme.slug;
                tLRPC$TL_account_createTheme.title = name;
                if (tLRPC$TL_inputThemeSettings != null) {
                    tLRPC$TL_account_createTheme.settings = tLRPC$TL_inputThemeSettings;
                    tLRPC$TL_account_createTheme.flags |= 8;
                }
                getConnectionsManager().sendRequest(tLRPC$TL_account_createTheme, new MessagesController$$ExternalSyntheticLambda300(this, themeInfo, themeAccent));
                return;
            }
            TLRPC$TL_account_updateTheme tLRPC$TL_account_updateTheme = new TLRPC$TL_account_updateTheme();
            TLRPC$TL_inputTheme tLRPC$TL_inputTheme = new TLRPC$TL_inputTheme();
            tLRPC$TL_inputTheme.id = tLRPC$TL_theme.id;
            tLRPC$TL_inputTheme.access_hash = tLRPC$TL_theme.access_hash;
            tLRPC$TL_account_updateTheme.theme = tLRPC$TL_inputTheme;
            tLRPC$TL_account_updateTheme.slug = tLRPC$TL_theme.slug;
            int i = tLRPC$TL_account_updateTheme.flags | 1;
            tLRPC$TL_account_updateTheme.flags = i;
            tLRPC$TL_account_updateTheme.title = name;
            int i2 = i | 2;
            tLRPC$TL_account_updateTheme.flags = i2;
            tLRPC$TL_account_updateTheme.document = tLRPC$TL_inputDocument;
            int i3 = i2 | 4;
            tLRPC$TL_account_updateTheme.flags = i3;
            if (tLRPC$TL_inputThemeSettings != null) {
                tLRPC$TL_account_updateTheme.settings = tLRPC$TL_inputThemeSettings;
                tLRPC$TL_account_updateTheme.flags = i3 | 8;
            }
            tLRPC$TL_account_updateTheme.format = "android";
            getConnectionsManager().sendRequest(tLRPC$TL_account_updateTheme, new MessagesController$$ExternalSyntheticLambda299(this, themeInfo, themeAccent));
            return;
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda183(this, themeInfo, themeAccent));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$23(Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda123(this, tLObject, themeInfo, themeAccent));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$22(TLObject tLObject, Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent) {
        if (tLObject instanceof TLRPC$TL_theme) {
            Theme.setThemeUploadInfo(themeInfo, themeAccent, (TLRPC$TL_theme) tLObject, this.currentAccount, false);
            installTheme(themeInfo, themeAccent, themeInfo == Theme.getCurrentNightTheme());
            getNotificationCenter().postNotificationName(NotificationCenter.themeUploadedToServer, themeInfo, themeAccent);
            return;
        }
        getNotificationCenter().postNotificationName(NotificationCenter.themeUploadError, themeInfo, themeAccent);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$25(Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda124(this, tLObject, themeInfo, themeAccent));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$24(TLObject tLObject, Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent) {
        if (tLObject instanceof TLRPC$TL_theme) {
            Theme.setThemeUploadInfo(themeInfo, themeAccent, (TLRPC$TL_theme) tLObject, this.currentAccount, false);
            getNotificationCenter().postNotificationName(NotificationCenter.themeUploadedToServer, themeInfo, themeAccent);
            return;
        }
        getNotificationCenter().postNotificationName(NotificationCenter.themeUploadError, themeInfo, themeAccent);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$didReceivedNotification$26(Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent) {
        getNotificationCenter().postNotificationName(NotificationCenter.themeUploadError, themeInfo, themeAccent);
    }

    public void cleanup() {
        getContactsController().cleanup();
        MediaController.getInstance().cleanup();
        getNotificationsController().cleanup();
        getSendMessagesHelper().cleanup();
        getSecretChatHelper().cleanup();
        getLocationController().cleanup();
        getMediaDataController().cleanup();
        this.showFiltersTooltip = false;
        DialogsActivity.dialogsLoaded[this.currentAccount] = false;
        this.notificationsPreferences.edit().clear().commit();
        this.emojiPreferences.edit().putLong("lastGifLoadTime", 0).putLong("lastStickersLoadTime", 0).putLong("lastStickersLoadTimeMask", 0).putLong("lastStickersLoadTimeFavs", 0).commit();
        this.mainPreferences.edit().remove("archivehint").remove("proximityhint").remove("archivehint_l").remove("gifhint").remove("reminderhint").remove("soundHint").remove("dcDomainName2").remove("webFileDatacenterId").remove("themehint").remove("showFiltersTooltip").commit();
        SharedPreferences sharedPreferences = ApplicationLoader.applicationContext.getSharedPreferences("shortcut_widget", 0);
        SharedPreferences.Editor editor = null;
        ArrayList arrayList = null;
        ArrayList arrayList2 = null;
        AppWidgetManager appWidgetManager = null;
        for (Map.Entry next : sharedPreferences.getAll().entrySet()) {
            String str = (String) next.getKey();
            if (str.startsWith("account") && ((Integer) next.getValue()).intValue() == this.currentAccount) {
                int intValue = Utilities.parseInt(str).intValue();
                if (editor == null) {
                    editor = sharedPreferences.edit();
                    appWidgetManager = AppWidgetManager.getInstance(ApplicationLoader.applicationContext);
                }
                editor.putBoolean("deleted" + intValue, true);
                if (sharedPreferences.getInt("type" + intValue, 0) == 0) {
                    if (arrayList == null) {
                        arrayList = new ArrayList();
                    }
                    arrayList.add(Integer.valueOf(intValue));
                } else {
                    if (arrayList2 == null) {
                        arrayList2 = new ArrayList();
                    }
                    arrayList2.add(Integer.valueOf(intValue));
                }
            }
        }
        if (editor != null) {
            editor.commit();
        }
        if (arrayList != null) {
            int size = arrayList.size();
            for (int i = 0; i < size; i++) {
                ChatsWidgetProvider.updateWidget(ApplicationLoader.applicationContext, appWidgetManager, ((Integer) arrayList.get(i)).intValue());
            }
        }
        if (arrayList2 != null) {
            int size2 = arrayList2.size();
            for (int i2 = 0; i2 < size2; i2++) {
                ContactsWidgetProvider.updateWidget(ApplicationLoader.applicationContext, appWidgetManager, ((Integer) arrayList2.get(i2)).intValue());
            }
        }
        this.lastScheduledServerQueryTime.clear();
        this.lastServerQueryTime.clear();
        this.reloadingWebpages.clear();
        this.reloadingWebpagesPending.clear();
        this.reloadingScheduledWebpages.clear();
        this.reloadingScheduledWebpagesPending.clear();
        this.sponsoredMessages.clear();
        this.dialogs_dict.clear();
        this.dialogs_read_inbox_max.clear();
        this.loadingPinnedDialogs.clear();
        this.dialogs_read_outbox_max.clear();
        this.exportedChats.clear();
        this.fullUsers.clear();
        this.fullChats.clear();
        this.activeVoiceChatsMap.clear();
        this.loadingGroupCalls.clear();
        this.groupCallsByChatId.clear();
        this.dialogsByFolder.clear();
        this.unreadUnmutedDialogs = 0;
        this.joiningToChannels.clear();
        this.migratedChats.clear();
        this.channelViewsToSend.clear();
        this.pollsToCheck.clear();
        this.pollsToCheckSize = 0;
        this.dialogsServerOnly.clear();
        this.dialogsForward.clear();
        this.allDialogs.clear();
        this.dialogsLoadedTillDate = Integer.MAX_VALUE;
        this.dialogsCanAddUsers.clear();
        this.dialogsChannelsOnly.clear();
        this.dialogsGroupsOnly.clear();
        this.dialogsUsersOnly.clear();
        this.dialogsForBlock.clear();
        this.dialogMessagesByIds.clear();
        this.dialogMessagesByRandomIds.clear();
        this.channelAdmins.clear();
        this.loadingChannelAdmins.clear();
        this.users.clear();
        this.objectsByUsernames.clear();
        this.chats.clear();
        this.dialogMessage.clear();
        this.deletedHistory.clear();
        this.printingUsers.clear();
        this.printingStrings.clear();
        this.printingStringsTypes.clear();
        this.onlinePrivacy.clear();
        this.loadingPeerSettings.clear();
        this.deletingDialogs.clear();
        this.clearingHistoryDialogs.clear();
        this.lastPrintingStringCount = 0;
        DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
        dialogFilterArr[1] = null;
        dialogFilterArr[0] = null;
        this.dialogFilters.clear();
        this.dialogFiltersById.clear();
        this.loadingSuggestedFilters = false;
        this.loadingRemoteFilters = false;
        this.suggestedFilters.clear();
        this.gettingAppChangelog = false;
        this.dialogFiltersLoaded = false;
        this.ignoreSetOnline = false;
        Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda13(this));
        this.createdDialogMainThreadIds.clear();
        this.visibleDialogMainThreadIds.clear();
        this.visibleScheduledDialogMainThreadIds.clear();
        this.blockePeers.clear();
        int i3 = 0;
        while (true) {
            LongSparseArray<SparseArray<Boolean>>[] longSparseArrayArr = this.sendingTypings;
            if (i3 >= longSparseArrayArr.length) {
                break;
            }
            if (longSparseArrayArr[i3] != null) {
                longSparseArrayArr[i3].clear();
            }
            i3++;
        }
        this.loadingFullUsers.clear();
        this.loadedFullUsers.clear();
        this.reloadingMessages.clear();
        this.loadingFullChats.clear();
        this.loadingFullParticipants.clear();
        this.loadedFullParticipants.clear();
        this.loadedFullChats.clear();
        this.dialogsLoaded = false;
        this.nextDialogsCacheOffset.clear();
        this.loadingDialogs.clear();
        this.dialogsEndReached.clear();
        this.serverDialogsEndReached.clear();
        this.loadingAppConfig = false;
        this.checkingTosUpdate = false;
        this.nextTosCheckTime = 0;
        this.nextPromoInfoCheckTime = 0;
        this.checkingPromoInfo = false;
        this.loadingUnreadDialogs = false;
        this.currentDeletingTaskTime = 0;
        this.currentDeletingTaskMids = null;
        this.currentDeletingTaskMediaMids = null;
        this.gettingNewDeleteTask = false;
        this.loadingBlockedPeers = false;
        this.totalBlockedCount = -1;
        this.blockedEndReached = false;
        this.firstGettingTask = false;
        this.updatingState = false;
        this.resetingDialogs = false;
        this.lastStatusUpdateTime = 0;
        this.offlineSent = false;
        this.registeringForPush = false;
        this.getDifferenceFirstSync = true;
        this.uploadingAvatar = null;
        this.uploadingWallpaper = null;
        this.uploadingWallpaperInfo = null;
        this.uploadingThemes.clear();
        this.gettingChatInviters.clear();
        this.statusRequest = 0;
        this.statusSettingState = 0;
        Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda28(this));
        if (this.currentDeleteTaskRunnable != null) {
            Utilities.stageQueue.cancelRunnable(this.currentDeleteTaskRunnable);
            this.currentDeleteTaskRunnable = null;
        }
        addSupportUser();
        getNotificationCenter().postNotificationName(NotificationCenter.suggestedFiltersLoaded, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogFiltersUpdated, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$cleanup$28() {
        this.readTasks.clear();
        this.readTasksMap.clear();
        this.repliesReadTasks.clear();
        this.threadsReadTasksMap.clear();
        this.updatesQueueSeq.clear();
        this.updatesQueuePts.clear();
        this.updatesQueueQts.clear();
        this.gettingUnknownChannels.clear();
        this.gettingUnknownDialogs.clear();
        this.updatesStartWaitTimeSeq = 0;
        this.updatesStartWaitTimePts = 0;
        this.updatesStartWaitTimeQts = 0;
        this.createdDialogIds.clear();
        this.createdScheduledDialogIds.clear();
        this.gettingDifference = false;
        this.resetDialogsPinned = null;
        this.resetDialogsAll = null;
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$cleanup$29() {
        getConnectionsManager().setIsUpdating(false);
        this.updatesQueueChannels.clear();
        this.updatesStartWaitTimeChannels.clear();
        this.gettingDifferenceChannels.clear();
        this.channelsPts.clear();
        this.shortPollChannels.clear();
        this.needShortPollChannels.clear();
        this.shortPollOnlines.clear();
        this.needShortPollOnlines.clear();
    }

    public TLRPC$User getUser(Long l) {
        return this.users.get(l);
    }

    public TLObject getUserOrChat(String str) {
        if (str == null || str.length() == 0) {
            return null;
        }
        return this.objectsByUsernames.get(str.toLowerCase());
    }

    public ConcurrentHashMap<Long, TLRPC$User> getUsers() {
        return this.users;
    }

    public ConcurrentHashMap<Long, TLRPC$Chat> getChats() {
        return this.chats;
    }

    public TLRPC$Chat getChat(Long l) {
        return this.chats.get(l);
    }

    public TLRPC$EncryptedChat getEncryptedChat(Integer num) {
        return this.encryptedChats.get(num);
    }

    public TLRPC$EncryptedChat getEncryptedChatDB(int i, boolean z) {
        TLRPC$EncryptedChat tLRPC$EncryptedChat = this.encryptedChats.get(Integer.valueOf(i));
        if (tLRPC$EncryptedChat != null) {
            if (!z) {
                return tLRPC$EncryptedChat;
            }
            if (!(tLRPC$EncryptedChat instanceof TLRPC$TL_encryptedChatWaiting) && !(tLRPC$EncryptedChat instanceof TLRPC$TL_encryptedChatRequested)) {
                return tLRPC$EncryptedChat;
            }
        }
        CountDownLatch countDownLatch = new CountDownLatch(1);
        ArrayList arrayList = new ArrayList();
        getMessagesStorage().getEncryptedChat((long) i, countDownLatch, arrayList);
        try {
            countDownLatch.await();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        if (arrayList.size() != 2) {
            return tLRPC$EncryptedChat;
        }
        TLRPC$EncryptedChat tLRPC$EncryptedChat2 = (TLRPC$EncryptedChat) arrayList.get(0);
        putEncryptedChat(tLRPC$EncryptedChat2, false);
        putUser((TLRPC$User) arrayList.get(1), true);
        return tLRPC$EncryptedChat2;
    }

    public boolean isDialogVisible(long j, boolean z) {
        return (z ? this.visibleScheduledDialogMainThreadIds : this.visibleDialogMainThreadIds).contains(Long.valueOf(j));
    }

    public void setLastVisibleDialogId(long j, boolean z, boolean z2) {
        ArrayList<Long> arrayList = z ? this.visibleScheduledDialogMainThreadIds : this.visibleDialogMainThreadIds;
        if (!z2) {
            arrayList.remove(Long.valueOf(j));
        } else if (!arrayList.contains(Long.valueOf(j))) {
            arrayList.add(Long.valueOf(j));
        }
    }

    public void setLastCreatedDialogId(long j, boolean z, boolean z2) {
        if (!z) {
            ArrayList<Long> arrayList = this.createdDialogMainThreadIds;
            if (!z2) {
                arrayList.remove(Long.valueOf(j));
                SparseArray sparseArray = this.pollsToCheck.get(j);
                if (sparseArray != null) {
                    int size = sparseArray.size();
                    for (int i = 0; i < size; i++) {
                        ((MessageObject) sparseArray.valueAt(i)).pollVisibleOnScreen = false;
                    }
                }
            } else if (!arrayList.contains(Long.valueOf(j))) {
                arrayList.add(Long.valueOf(j));
            } else {
                return;
            }
        }
        Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda190(this, z, z2, j));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$setLastCreatedDialogId$30(boolean z, boolean z2, long j) {
        ArrayList<Long> arrayList = z ? this.createdScheduledDialogIds : this.createdDialogIds;
        if (!z2) {
            arrayList.remove(Long.valueOf(j));
        } else if (!arrayList.contains(Long.valueOf(j))) {
            arrayList.add(Long.valueOf(j));
        }
    }

    public TLRPC$TL_chatInviteExported getExportedInvite(long j) {
        return this.exportedChats.get(j);
    }

    /* JADX WARNING: Code restructure failed: missing block: B:43:0x00cc, code lost:
        r9 = r9.status;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:45:0x00d0, code lost:
        r10 = r2.status;
     */
    /* JADX WARNING: Removed duplicated region for block: B:13:0x002d A[RETURN] */
    /* JADX WARNING: Removed duplicated region for block: B:14:0x002e A[ADDED_TO_REGION] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean putUser(org.telegram.tgnet.TLRPC$User r9, boolean r10) {
        /*
            r8 = this;
            r0 = 0
            if (r9 != 0) goto L_0x0004
            return r0
        L_0x0004:
            r1 = 1
            if (r10 == 0) goto L_0x001c
            long r2 = r9.id
            r4 = 1000(0x3e8, double:4.94E-321)
            long r4 = r2 / r4
            r6 = 333(0x14d, double:1.645E-321)
            int r10 = (r4 > r6 ? 1 : (r4 == r6 ? 0 : -1))
            if (r10 == 0) goto L_0x001c
            r4 = 777000(0xbdb28, double:3.83889E-318)
            int r10 = (r2 > r4 ? 1 : (r2 == r4 ? 0 : -1))
            if (r10 == 0) goto L_0x001c
            r10 = 1
            goto L_0x001d
        L_0x001c:
            r10 = 0
        L_0x001d:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, org.telegram.tgnet.TLRPC$User> r2 = r8.users
            long r3 = r9.id
            java.lang.Long r3 = java.lang.Long.valueOf(r3)
            java.lang.Object r2 = r2.get(r3)
            org.telegram.tgnet.TLRPC$User r2 = (org.telegram.tgnet.TLRPC$User) r2
            if (r2 != r9) goto L_0x002e
            return r0
        L_0x002e:
            if (r2 == 0) goto L_0x0043
            java.lang.String r3 = r2.username
            boolean r3 = android.text.TextUtils.isEmpty(r3)
            if (r3 != 0) goto L_0x0043
            j$.util.concurrent.ConcurrentHashMap<java.lang.String, org.telegram.tgnet.TLObject> r3 = r8.objectsByUsernames
            java.lang.String r4 = r2.username
            java.lang.String r4 = r4.toLowerCase()
            r3.remove(r4)
        L_0x0043:
            java.lang.String r3 = r9.username
            boolean r3 = android.text.TextUtils.isEmpty(r3)
            if (r3 != 0) goto L_0x0056
            j$.util.concurrent.ConcurrentHashMap<java.lang.String, org.telegram.tgnet.TLObject> r3 = r8.objectsByUsernames
            java.lang.String r4 = r9.username
            java.lang.String r4 = r4.toLowerCase()
            r3.put(r4, r9)
        L_0x0056:
            boolean r3 = r9.min
            r4 = 0
            if (r3 == 0) goto L_0x00a1
            if (r2 == 0) goto L_0x0094
            if (r10 != 0) goto L_0x012a
            boolean r10 = r9.bot
            if (r10 == 0) goto L_0x0078
            java.lang.String r10 = r9.username
            if (r10 == 0) goto L_0x0070
            r2.username = r10
            int r10 = r2.flags
            r10 = r10 | 8
            r2.flags = r10
            goto L_0x0078
        L_0x0070:
            int r10 = r2.flags
            r10 = r10 & -9
            r2.flags = r10
            r2.username = r4
        L_0x0078:
            boolean r10 = r9.apply_min_photo
            if (r10 == 0) goto L_0x012a
            org.telegram.tgnet.TLRPC$UserProfilePhoto r9 = r9.photo
            if (r9 == 0) goto L_0x008a
            r2.photo = r9
            int r9 = r2.flags
            r9 = r9 | 32
            r2.flags = r9
            goto L_0x012a
        L_0x008a:
            int r9 = r2.flags
            r9 = r9 & -33
            r2.flags = r9
            r2.photo = r4
            goto L_0x012a
        L_0x0094:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, org.telegram.tgnet.TLRPC$User> r10 = r8.users
            long r1 = r9.id
            java.lang.Long r1 = java.lang.Long.valueOf(r1)
            r10.put(r1, r9)
            goto L_0x012a
        L_0x00a1:
            if (r10 != 0) goto L_0x00db
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, org.telegram.tgnet.TLRPC$User> r10 = r8.users
            long r3 = r9.id
            java.lang.Long r3 = java.lang.Long.valueOf(r3)
            r10.put(r3, r9)
            long r3 = r9.id
            org.telegram.messenger.UserConfig r10 = r8.getUserConfig()
            long r5 = r10.getClientUserId()
            int r10 = (r3 > r5 ? 1 : (r3 == r5 ? 0 : -1))
            if (r10 != 0) goto L_0x00ca
            org.telegram.messenger.UserConfig r10 = r8.getUserConfig()
            r10.setCurrentUser(r9)
            org.telegram.messenger.UserConfig r10 = r8.getUserConfig()
            r10.saveConfig(r1)
        L_0x00ca:
            if (r2 == 0) goto L_0x012a
            org.telegram.tgnet.TLRPC$UserStatus r9 = r9.status
            if (r9 == 0) goto L_0x012a
            org.telegram.tgnet.TLRPC$UserStatus r10 = r2.status
            if (r10 == 0) goto L_0x012a
            int r9 = r9.expires
            int r10 = r10.expires
            if (r9 == r10) goto L_0x012a
            return r1
        L_0x00db:
            if (r2 != 0) goto L_0x00e9
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, org.telegram.tgnet.TLRPC$User> r10 = r8.users
            long r1 = r9.id
            java.lang.Long r1 = java.lang.Long.valueOf(r1)
            r10.put(r1, r9)
            goto L_0x012a
        L_0x00e9:
            boolean r10 = r2.min
            if (r10 == 0) goto L_0x012a
            boolean r10 = r2.bot
            if (r10 == 0) goto L_0x0106
            java.lang.String r10 = r2.username
            if (r10 == 0) goto L_0x00fe
            r9.username = r10
            int r10 = r9.flags
            r10 = r10 | 8
            r9.flags = r10
            goto L_0x0106
        L_0x00fe:
            int r10 = r9.flags
            r10 = r10 & -9
            r9.flags = r10
            r9.username = r4
        L_0x0106:
            boolean r10 = r2.apply_min_photo
            if (r10 == 0) goto L_0x011f
            org.telegram.tgnet.TLRPC$UserProfilePhoto r10 = r2.photo
            if (r10 == 0) goto L_0x0117
            r9.photo = r10
            int r10 = r9.flags
            r10 = r10 | 32
            r9.flags = r10
            goto L_0x011f
        L_0x0117:
            int r10 = r9.flags
            r10 = r10 & -33
            r9.flags = r10
            r9.photo = r4
        L_0x011f:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, org.telegram.tgnet.TLRPC$User> r10 = r8.users
            long r1 = r9.id
            java.lang.Long r1 = java.lang.Long.valueOf(r1)
            r10.put(r1, r9)
        L_0x012a:
            return r0
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.putUser(org.telegram.tgnet.TLRPC$User, boolean):boolean");
    }

    public void putUsers(ArrayList<TLRPC$User> arrayList, boolean z) {
        if (arrayList != null && !arrayList.isEmpty()) {
            int size = arrayList.size();
            boolean z2 = false;
            for (int i = 0; i < size; i++) {
                if (putUser(arrayList.get(i), z)) {
                    z2 = true;
                }
            }
            if (z2) {
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda14(this));
            }
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$putUsers$31() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_STATUS));
    }

    public void putChat(TLRPC$Chat tLRPC$Chat, boolean z) {
        TLRPC$Chat tLRPC$Chat2;
        if (tLRPC$Chat != null && (tLRPC$Chat2 = this.chats.get(Long.valueOf(tLRPC$Chat.id))) != tLRPC$Chat) {
            if (tLRPC$Chat2 != null && !TextUtils.isEmpty(tLRPC$Chat2.username)) {
                this.objectsByUsernames.remove(tLRPC$Chat2.username.toLowerCase());
            }
            if (!TextUtils.isEmpty(tLRPC$Chat.username)) {
                this.objectsByUsernames.put(tLRPC$Chat.username.toLowerCase(), tLRPC$Chat);
            }
            if (!tLRPC$Chat.min) {
                if (!z) {
                    if (tLRPC$Chat2 != null) {
                        if (tLRPC$Chat.version != tLRPC$Chat2.version) {
                            this.loadedFullChats.remove(Long.valueOf(tLRPC$Chat.id));
                        }
                        int i = tLRPC$Chat2.participants_count;
                        if (i != 0 && tLRPC$Chat.participants_count == 0) {
                            tLRPC$Chat.participants_count = i;
                            tLRPC$Chat.flags |= 131072;
                        }
                        TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights = tLRPC$Chat2.banned_rights;
                        int i2 = 0;
                        int i3 = tLRPC$TL_chatBannedRights != null ? tLRPC$TL_chatBannedRights.flags : 0;
                        TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights2 = tLRPC$Chat.banned_rights;
                        int i4 = tLRPC$TL_chatBannedRights2 != null ? tLRPC$TL_chatBannedRights2.flags : 0;
                        TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights3 = tLRPC$Chat2.default_banned_rights;
                        int i5 = tLRPC$TL_chatBannedRights3 != null ? tLRPC$TL_chatBannedRights3.flags : 0;
                        TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights4 = tLRPC$Chat.default_banned_rights;
                        if (tLRPC$TL_chatBannedRights4 != null) {
                            i2 = tLRPC$TL_chatBannedRights4.flags;
                        }
                        tLRPC$Chat2.default_banned_rights = tLRPC$TL_chatBannedRights4;
                        if (tLRPC$TL_chatBannedRights4 == null) {
                            tLRPC$Chat2.flags &= -262145;
                        } else {
                            tLRPC$Chat2.flags = 262144 | tLRPC$Chat2.flags;
                        }
                        tLRPC$Chat2.banned_rights = tLRPC$TL_chatBannedRights2;
                        if (tLRPC$TL_chatBannedRights2 == null) {
                            tLRPC$Chat2.flags &= -32769;
                        } else {
                            tLRPC$Chat2.flags |= 32768;
                        }
                        TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights = tLRPC$Chat.admin_rights;
                        tLRPC$Chat2.admin_rights = tLRPC$TL_chatAdminRights;
                        if (tLRPC$TL_chatAdminRights == null) {
                            tLRPC$Chat2.flags &= -16385;
                        } else {
                            tLRPC$Chat2.flags |= 16384;
                        }
                        if (!(i3 == i4 && i5 == i2)) {
                            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda127(this, tLRPC$Chat));
                        }
                    }
                    this.chats.put(Long.valueOf(tLRPC$Chat.id), tLRPC$Chat);
                } else if (tLRPC$Chat2 == null) {
                    this.chats.put(Long.valueOf(tLRPC$Chat.id), tLRPC$Chat);
                } else if (tLRPC$Chat2.min) {
                    tLRPC$Chat.title = tLRPC$Chat2.title;
                    tLRPC$Chat.photo = tLRPC$Chat2.photo;
                    tLRPC$Chat.broadcast = tLRPC$Chat2.broadcast;
                    tLRPC$Chat.verified = tLRPC$Chat2.verified;
                    tLRPC$Chat.megagroup = tLRPC$Chat2.megagroup;
                    TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights5 = tLRPC$Chat2.default_banned_rights;
                    if (tLRPC$TL_chatBannedRights5 != null) {
                        tLRPC$Chat.default_banned_rights = tLRPC$TL_chatBannedRights5;
                        tLRPC$Chat.flags |= 262144;
                    }
                    TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights2 = tLRPC$Chat2.admin_rights;
                    if (tLRPC$TL_chatAdminRights2 != null) {
                        tLRPC$Chat.admin_rights = tLRPC$TL_chatAdminRights2;
                        tLRPC$Chat.flags |= 16384;
                    }
                    TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights6 = tLRPC$Chat2.banned_rights;
                    if (tLRPC$TL_chatBannedRights6 != null) {
                        tLRPC$Chat.banned_rights = tLRPC$TL_chatBannedRights6;
                        tLRPC$Chat.flags |= 32768;
                    }
                    String str = tLRPC$Chat2.username;
                    if (str != null) {
                        tLRPC$Chat.username = str;
                        tLRPC$Chat.flags |= 64;
                    } else {
                        tLRPC$Chat.flags &= -65;
                        tLRPC$Chat.username = null;
                    }
                    int i6 = tLRPC$Chat2.participants_count;
                    if (i6 != 0 && tLRPC$Chat.participants_count == 0) {
                        tLRPC$Chat.participants_count = i6;
                        tLRPC$Chat.flags |= 131072;
                    }
                    this.chats.put(Long.valueOf(tLRPC$Chat.id), tLRPC$Chat);
                }
                addOrRemoveActiveVoiceChat(tLRPC$Chat);
            } else if (tLRPC$Chat2 == null) {
                this.chats.put(Long.valueOf(tLRPC$Chat.id), tLRPC$Chat);
                addOrRemoveActiveVoiceChat(tLRPC$Chat);
            } else if (!z) {
                tLRPC$Chat2.title = tLRPC$Chat.title;
                tLRPC$Chat2.photo = tLRPC$Chat.photo;
                tLRPC$Chat2.broadcast = tLRPC$Chat.broadcast;
                tLRPC$Chat2.verified = tLRPC$Chat.verified;
                tLRPC$Chat2.megagroup = tLRPC$Chat.megagroup;
                tLRPC$Chat2.call_not_empty = tLRPC$Chat.call_not_empty;
                tLRPC$Chat2.call_active = tLRPC$Chat.call_active;
                TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights7 = tLRPC$Chat.default_banned_rights;
                if (tLRPC$TL_chatBannedRights7 != null) {
                    tLRPC$Chat2.default_banned_rights = tLRPC$TL_chatBannedRights7;
                    tLRPC$Chat2.flags |= 262144;
                }
                TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights3 = tLRPC$Chat.admin_rights;
                if (tLRPC$TL_chatAdminRights3 != null) {
                    tLRPC$Chat2.admin_rights = tLRPC$TL_chatAdminRights3;
                    tLRPC$Chat2.flags |= 16384;
                }
                TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights8 = tLRPC$Chat.banned_rights;
                if (tLRPC$TL_chatBannedRights8 != null) {
                    tLRPC$Chat2.banned_rights = tLRPC$TL_chatBannedRights8;
                    tLRPC$Chat2.flags |= 32768;
                }
                String str2 = tLRPC$Chat.username;
                if (str2 != null) {
                    tLRPC$Chat2.username = str2;
                    tLRPC$Chat2.flags |= 64;
                } else {
                    tLRPC$Chat2.flags &= -65;
                    tLRPC$Chat2.username = null;
                }
                int i7 = tLRPC$Chat.participants_count;
                if (i7 != 0) {
                    tLRPC$Chat2.participants_count = i7;
                }
                addOrRemoveActiveVoiceChat(tLRPC$Chat2);
            }
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$putChat$32(TLRPC$Chat tLRPC$Chat) {
        getNotificationCenter().postNotificationName(NotificationCenter.channelRightsUpdated, tLRPC$Chat);
    }

    public void putChats(ArrayList<TLRPC$Chat> arrayList, boolean z) {
        if (arrayList != null && !arrayList.isEmpty()) {
            int size = arrayList.size();
            for (int i = 0; i < size; i++) {
                putChat(arrayList.get(i), z);
            }
        }
    }

    private void addOrRemoveActiveVoiceChat(TLRPC$Chat tLRPC$Chat) {
        if (Thread.currentThread() != Looper.getMainLooper().getThread()) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda128(this, tLRPC$Chat));
        } else {
            lambda$addOrRemoveActiveVoiceChat$33(tLRPC$Chat);
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: addOrRemoveActiveVoiceChatInternal */
    public void lambda$addOrRemoveActiveVoiceChat$33(TLRPC$Chat tLRPC$Chat) {
        TLRPC$Chat tLRPC$Chat2 = this.activeVoiceChatsMap.get(Long.valueOf(tLRPC$Chat.id));
        if (!tLRPC$Chat.call_active || !tLRPC$Chat.call_not_empty || tLRPC$Chat.migrated_to != null || ChatObject.isNotInChat(tLRPC$Chat)) {
            if (tLRPC$Chat2 != null) {
                this.activeVoiceChatsMap.remove(Long.valueOf(tLRPC$Chat.id));
                getNotificationCenter().postNotificationName(NotificationCenter.activeGroupCallsUpdated, new Object[0]);
            }
        } else if (tLRPC$Chat2 == null) {
            this.activeVoiceChatsMap.put(Long.valueOf(tLRPC$Chat.id), tLRPC$Chat);
            getNotificationCenter().postNotificationName(NotificationCenter.activeGroupCallsUpdated, new Object[0]);
        }
    }

    public ArrayList<Long> getActiveGroupCalls() {
        return new ArrayList<>(this.activeVoiceChatsMap.keySet());
    }

    public void setReferer(String str) {
        if (str != null) {
            this.installReferer = str;
            this.mainPreferences.edit().putString("installReferer", str).commit();
        }
    }

    public void putEncryptedChat(TLRPC$EncryptedChat tLRPC$EncryptedChat, boolean z) {
        if (tLRPC$EncryptedChat != null) {
            if (z) {
                this.encryptedChats.putIfAbsent(Integer.valueOf(tLRPC$EncryptedChat.id), tLRPC$EncryptedChat);
            } else {
                this.encryptedChats.put(Integer.valueOf(tLRPC$EncryptedChat.id), tLRPC$EncryptedChat);
            }
        }
    }

    public void putEncryptedChats(ArrayList<TLRPC$EncryptedChat> arrayList, boolean z) {
        if (arrayList != null && !arrayList.isEmpty()) {
            int size = arrayList.size();
            for (int i = 0; i < size; i++) {
                putEncryptedChat(arrayList.get(i), z);
            }
        }
    }

    public TLRPC$UserFull getUserFull(long j) {
        return this.fullUsers.get(j);
    }

    public TLRPC$ChatFull getChatFull(long j) {
        return this.fullChats.get(j);
    }

    public void putGroupCall(long j, ChatObject.Call call) {
        this.groupCalls.put(call.call.id, call);
        this.groupCallsByChatId.put(j, call);
        TLRPC$ChatFull chatFull = getChatFull(j);
        if (chatFull != null) {
            chatFull.call = call.getInputGroupCall();
        }
        getNotificationCenter().postNotificationName(NotificationCenter.groupCallUpdated, Long.valueOf(j), Long.valueOf(call.call.id), Boolean.FALSE);
        loadFullChat(j, 0, true);
    }

    public ChatObject.Call getGroupCall(long j, boolean z) {
        return getGroupCall(j, z, (Runnable) null);
    }

    public ChatObject.Call getGroupCall(long j, boolean z, Runnable runnable) {
        TLRPC$TL_inputGroupCall tLRPC$TL_inputGroupCall;
        TLRPC$ChatFull chatFull = getChatFull(j);
        if (chatFull == null || (tLRPC$TL_inputGroupCall = chatFull.call) == null) {
            return null;
        }
        ChatObject.Call call = this.groupCalls.get(tLRPC$TL_inputGroupCall.id);
        if (call == null && z && !this.loadingGroupCalls.contains(Long.valueOf(j))) {
            this.loadingGroupCalls.add(Long.valueOf(j));
            if (chatFull.call != null) {
                TLRPC$TL_phone_getGroupCall tLRPC$TL_phone_getGroupCall = new TLRPC$TL_phone_getGroupCall();
                tLRPC$TL_phone_getGroupCall.call = chatFull.call;
                tLRPC$TL_phone_getGroupCall.limit = 20;
                getConnectionsManager().sendRequest(tLRPC$TL_phone_getGroupCall, new MessagesController$$ExternalSyntheticLambda266(this, j, runnable));
            }
        }
        if (call == null || !(call.call instanceof TLRPC$TL_groupCallDiscarded)) {
            return call;
        }
        return null;
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getGroupCall$35(long j, Runnable runnable, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda122(this, tLObject, j, runnable));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getGroupCall$34(TLObject tLObject, long j, Runnable runnable) {
        if (tLObject != null) {
            TLRPC$TL_phone_groupCall tLRPC$TL_phone_groupCall = (TLRPC$TL_phone_groupCall) tLObject;
            putUsers(tLRPC$TL_phone_groupCall.users, false);
            putChats(tLRPC$TL_phone_groupCall.chats, false);
            ChatObject.Call call = new ChatObject.Call();
            call.setCall(getAccountInstance(), j, tLRPC$TL_phone_groupCall);
            this.groupCalls.put(tLRPC$TL_phone_groupCall.call.id, call);
            this.groupCallsByChatId.put(j, call);
            getNotificationCenter().postNotificationName(NotificationCenter.groupCallUpdated, Long.valueOf(j), Long.valueOf(tLRPC$TL_phone_groupCall.call.id), Boolean.FALSE);
            if (runnable != null) {
                runnable.run();
            }
        }
        this.loadingGroupCalls.remove(Long.valueOf(j));
    }

    public void cancelLoadFullUser(long j) {
        this.loadingFullUsers.remove(Long.valueOf(j));
    }

    public void cancelLoadFullChat(long j) {
        this.loadingFullChats.remove(Long.valueOf(j));
    }

    /* access modifiers changed from: protected */
    public void clearFullUsers() {
        this.loadedFullUsers.clear();
        this.loadedFullChats.clear();
    }

    private void reloadDialogsReadValue(ArrayList<TLRPC$Dialog> arrayList, long j) {
        if (j != 0 || (arrayList != null && !arrayList.isEmpty())) {
            TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs = new TLRPC$TL_messages_getPeerDialogs();
            if (arrayList != null) {
                for (int i = 0; i < arrayList.size(); i++) {
                    TLRPC$InputPeer inputPeer = getInputPeer(arrayList.get(i).id);
                    if (!(inputPeer instanceof TLRPC$TL_inputPeerChannel) || inputPeer.access_hash != 0) {
                        TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
                        tLRPC$TL_inputDialogPeer.peer = inputPeer;
                        tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer);
                    }
                }
            } else {
                TLRPC$InputPeer inputPeer2 = getInputPeer(j);
                if (!(inputPeer2 instanceof TLRPC$TL_inputPeerChannel) || inputPeer2.access_hash != 0) {
                    TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer2 = new TLRPC$TL_inputDialogPeer();
                    tLRPC$TL_inputDialogPeer2.peer = inputPeer2;
                    tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer2);
                } else {
                    return;
                }
            }
            if (!tLRPC$TL_messages_getPeerDialogs.peers.isEmpty()) {
                getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerDialogs, new MessagesController$$ExternalSyntheticLambda213(this));
            }
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$reloadDialogsReadValue$36(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject;
            ArrayList arrayList = new ArrayList();
            for (int i = 0; i < tLRPC$TL_messages_peerDialogs.dialogs.size(); i++) {
                TLRPC$Dialog tLRPC$Dialog = tLRPC$TL_messages_peerDialogs.dialogs.get(i);
                DialogObject.initDialog(tLRPC$Dialog);
                Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                if (num == null) {
                    num = 0;
                }
                this.dialogs_read_inbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(tLRPC$Dialog.read_inbox_max_id, num.intValue())));
                if (num.intValue() == 0) {
                    if (tLRPC$Dialog.peer.channel_id != 0) {
                        TLRPC$TL_updateReadChannelInbox tLRPC$TL_updateReadChannelInbox = new TLRPC$TL_updateReadChannelInbox();
                        tLRPC$TL_updateReadChannelInbox.channel_id = tLRPC$Dialog.peer.channel_id;
                        tLRPC$TL_updateReadChannelInbox.max_id = tLRPC$Dialog.read_inbox_max_id;
                        arrayList.add(tLRPC$TL_updateReadChannelInbox);
                    } else {
                        TLRPC$TL_updateReadHistoryInbox tLRPC$TL_updateReadHistoryInbox = new TLRPC$TL_updateReadHistoryInbox();
                        tLRPC$TL_updateReadHistoryInbox.peer = tLRPC$Dialog.peer;
                        tLRPC$TL_updateReadHistoryInbox.max_id = tLRPC$Dialog.read_inbox_max_id;
                        arrayList.add(tLRPC$TL_updateReadHistoryInbox);
                    }
                }
                Integer num2 = this.dialogs_read_outbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                if (num2 == null) {
                    num2 = 0;
                }
                this.dialogs_read_outbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(tLRPC$Dialog.read_outbox_max_id, num2.intValue())));
                if (tLRPC$Dialog.read_outbox_max_id > num2.intValue()) {
                    if (tLRPC$Dialog.peer.channel_id != 0) {
                        TLRPC$TL_updateReadChannelOutbox tLRPC$TL_updateReadChannelOutbox = new TLRPC$TL_updateReadChannelOutbox();
                        tLRPC$TL_updateReadChannelOutbox.channel_id = tLRPC$Dialog.peer.channel_id;
                        tLRPC$TL_updateReadChannelOutbox.max_id = tLRPC$Dialog.read_outbox_max_id;
                        arrayList.add(tLRPC$TL_updateReadChannelOutbox);
                    } else {
                        TLRPC$TL_updateReadHistoryOutbox tLRPC$TL_updateReadHistoryOutbox = new TLRPC$TL_updateReadHistoryOutbox();
                        tLRPC$TL_updateReadHistoryOutbox.peer = tLRPC$Dialog.peer;
                        tLRPC$TL_updateReadHistoryOutbox.max_id = tLRPC$Dialog.read_outbox_max_id;
                        arrayList.add(tLRPC$TL_updateReadHistoryOutbox);
                    }
                }
            }
            if (!arrayList.isEmpty()) {
                processUpdateArray(arrayList, (ArrayList<TLRPC$User>) null, (ArrayList<TLRPC$Chat>) null, false, 0);
            }
        }
    }

    public TLRPC$ChannelParticipant getAdminInChannel(long j, long j2) {
        LongSparseArray longSparseArray = this.channelAdmins.get(j2);
        if (longSparseArray == null) {
            return null;
        }
        return (TLRPC$ChannelParticipant) longSparseArray.get(j);
    }

    public String getAdminRank(long j, long j2) {
        TLRPC$ChannelParticipant tLRPC$ChannelParticipant;
        LongSparseArray longSparseArray = this.channelAdmins.get(j);
        if (longSparseArray == null || (tLRPC$ChannelParticipant = (TLRPC$ChannelParticipant) longSparseArray.get(j2)) == null) {
            return null;
        }
        String str = tLRPC$ChannelParticipant.rank;
        return str != null ? str : "";
    }

    public boolean isChannelAdminsLoaded(long j) {
        return this.channelAdmins.get(j) != null;
    }

    public void loadChannelAdmins(long j, boolean z) {
        if (SystemClock.elapsedRealtime() - ((long) this.loadingChannelAdmins.get(j)) >= 60) {
            this.loadingChannelAdmins.put(j, (int) (SystemClock.elapsedRealtime() / 1000));
            if (z) {
                getMessagesStorage().loadChannelAdmins(j);
                return;
            }
            TLRPC$TL_channels_getParticipants tLRPC$TL_channels_getParticipants = new TLRPC$TL_channels_getParticipants();
            tLRPC$TL_channels_getParticipants.channel = getInputChannel(j);
            tLRPC$TL_channels_getParticipants.limit = 100;
            tLRPC$TL_channels_getParticipants.filter = new TLRPC$TL_channelParticipantsAdmins();
            getConnectionsManager().sendRequest(tLRPC$TL_channels_getParticipants, new MessagesController$$ExternalSyntheticLambda255(this, j));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadChannelAdmins$37(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject instanceof TLRPC$TL_channels_channelParticipants) {
            processLoadedAdminsResponse(j, (TLRPC$TL_channels_channelParticipants) tLObject);
        }
    }

    public void processLoadedAdminsResponse(long j, TLRPC$TL_channels_channelParticipants tLRPC$TL_channels_channelParticipants) {
        LongSparseArray longSparseArray = new LongSparseArray(tLRPC$TL_channels_channelParticipants.participants.size());
        for (int i = 0; i < tLRPC$TL_channels_channelParticipants.participants.size(); i++) {
            TLRPC$ChannelParticipant tLRPC$ChannelParticipant = tLRPC$TL_channels_channelParticipants.participants.get(i);
            longSparseArray.put(MessageObject.getPeerId(tLRPC$ChannelParticipant.peer), tLRPC$ChannelParticipant);
        }
        processLoadedChannelAdmins(longSparseArray, j, false);
    }

    public void processLoadedChannelAdmins(LongSparseArray<TLRPC$ChannelParticipant> longSparseArray, long j, boolean z) {
        if (!z) {
            getMessagesStorage().putChannelAdmins(j, longSparseArray);
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda64(this, j, longSparseArray, z));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processLoadedChannelAdmins$38(long j, LongSparseArray longSparseArray, boolean z) {
        this.channelAdmins.put(j, longSparseArray);
        if (z) {
            this.loadingChannelAdmins.delete(j);
            loadChannelAdmins(j, false);
            getNotificationCenter().postNotificationName(NotificationCenter.didLoadChatAdmins, Long.valueOf(j));
        }
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r14v4, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getFullChat} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r14v6, resolved type: org.telegram.tgnet.TLRPC$TL_channels_getFullChannel} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r14v7, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getFullChat} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r14v8, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getFullChat} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r14v9, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getFullChat} */
    /* JADX WARNING: Code restructure failed: missing block: B:10:0x0061, code lost:
        if (r10.dialogs_read_outbox_max.get(java.lang.Long.valueOf(r5)) == null) goto L_0x0063;
     */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void loadFullChat(long r11, int r13, boolean r14) {
        /*
            r10 = this;
            java.util.ArrayList<java.lang.Long> r0 = r10.loadedFullChats
            java.lang.Long r1 = java.lang.Long.valueOf(r11)
            boolean r0 = r0.contains(r1)
            java.util.ArrayList<java.lang.Long> r1 = r10.loadingFullChats
            java.lang.Long r2 = java.lang.Long.valueOf(r11)
            boolean r1 = r1.contains(r2)
            if (r1 != 0) goto L_0x0081
            if (r14 != 0) goto L_0x001b
            if (r0 == 0) goto L_0x001b
            goto L_0x0081
        L_0x001b:
            java.util.ArrayList<java.lang.Long> r14 = r10.loadingFullChats
            java.lang.Long r1 = java.lang.Long.valueOf(r11)
            r14.add(r1)
            long r5 = -r11
            java.lang.Long r14 = java.lang.Long.valueOf(r11)
            org.telegram.tgnet.TLRPC$Chat r4 = r10.getChat(r14)
            boolean r14 = org.telegram.messenger.ChatObject.isChannel(r4)
            if (r14 == 0) goto L_0x0044
            org.telegram.tgnet.TLRPC$TL_channels_getFullChannel r14 = new org.telegram.tgnet.TLRPC$TL_channels_getFullChannel
            r14.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r1 = getInputChannel((org.telegram.tgnet.TLRPC$Chat) r4)
            r14.channel = r1
            r0 = r0 ^ 1
            r10.loadChannelAdmins(r11, r0)
            goto L_0x0067
        L_0x0044:
            org.telegram.tgnet.TLRPC$TL_messages_getFullChat r14 = new org.telegram.tgnet.TLRPC$TL_messages_getFullChat
            r14.<init>()
            r14.chat_id = r11
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r0 = r10.dialogs_read_inbox_max
            java.lang.Long r1 = java.lang.Long.valueOf(r5)
            java.lang.Object r0 = r0.get(r1)
            if (r0 == 0) goto L_0x0063
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r0 = r10.dialogs_read_outbox_max
            java.lang.Long r1 = java.lang.Long.valueOf(r5)
            java.lang.Object r0 = r0.get(r1)
            if (r0 != 0) goto L_0x0067
        L_0x0063:
            r0 = 0
            r10.reloadDialogsReadValue(r0, r5)
        L_0x0067:
            org.telegram.tgnet.ConnectionsManager r0 = r10.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda284 r1 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda284
            r2 = r1
            r3 = r10
            r7 = r11
            r9 = r13
            r2.<init>(r3, r4, r5, r7, r9)
            int r11 = r0.sendRequest(r14, r1)
            if (r13 == 0) goto L_0x0081
            org.telegram.tgnet.ConnectionsManager r12 = r10.getConnectionsManager()
            r12.bindRequestToGuid(r11, r13)
        L_0x0081:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.loadFullChat(long, int, boolean):void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadFullChat$41(TLRPC$Chat tLRPC$Chat, long j, long j2, int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        long j3 = j;
        long j4 = j2;
        TLRPC$TL_error tLRPC$TL_error2 = tLRPC$TL_error;
        if (tLRPC$TL_error2 == null) {
            TLRPC$TL_messages_chatFull tLRPC$TL_messages_chatFull = (TLRPC$TL_messages_chatFull) tLObject;
            getMessagesStorage().putUsersAndChats(tLRPC$TL_messages_chatFull.users, tLRPC$TL_messages_chatFull.chats, true, true);
            getMessagesStorage().updateChatInfo(tLRPC$TL_messages_chatFull.full_chat, false);
            if (ChatObject.isChannel(tLRPC$Chat)) {
                Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(j));
                if (num == null) {
                    num = Integer.valueOf(getMessagesStorage().getDialogReadMax(false, j3));
                }
                this.dialogs_read_inbox_max.put(Long.valueOf(j), Integer.valueOf(Math.max(tLRPC$TL_messages_chatFull.full_chat.read_inbox_max_id, num.intValue())));
                if (tLRPC$TL_messages_chatFull.full_chat.read_inbox_max_id > num.intValue()) {
                    ArrayList arrayList = new ArrayList();
                    TLRPC$TL_updateReadChannelInbox tLRPC$TL_updateReadChannelInbox = new TLRPC$TL_updateReadChannelInbox();
                    tLRPC$TL_updateReadChannelInbox.channel_id = j4;
                    tLRPC$TL_updateReadChannelInbox.max_id = tLRPC$TL_messages_chatFull.full_chat.read_inbox_max_id;
                    arrayList.add(tLRPC$TL_updateReadChannelInbox);
                    processUpdateArray(arrayList, (ArrayList<TLRPC$User>) null, (ArrayList<TLRPC$Chat>) null, false, 0);
                }
                Integer num2 = this.dialogs_read_outbox_max.get(Long.valueOf(j));
                if (num2 == null) {
                    num2 = Integer.valueOf(getMessagesStorage().getDialogReadMax(true, j3));
                }
                this.dialogs_read_outbox_max.put(Long.valueOf(j), Integer.valueOf(Math.max(tLRPC$TL_messages_chatFull.full_chat.read_outbox_max_id, num2.intValue())));
                if (tLRPC$TL_messages_chatFull.full_chat.read_outbox_max_id > num2.intValue()) {
                    ArrayList arrayList2 = new ArrayList();
                    TLRPC$TL_updateReadChannelOutbox tLRPC$TL_updateReadChannelOutbox = new TLRPC$TL_updateReadChannelOutbox();
                    tLRPC$TL_updateReadChannelOutbox.channel_id = j4;
                    tLRPC$TL_updateReadChannelOutbox.max_id = tLRPC$TL_messages_chatFull.full_chat.read_outbox_max_id;
                    arrayList2.add(tLRPC$TL_updateReadChannelOutbox);
                    processUpdateArray(arrayList2, (ArrayList<TLRPC$User>) null, (ArrayList<TLRPC$Chat>) null, false, 0);
                }
            }
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda73(this, j2, tLRPC$TL_messages_chatFull, i));
            return;
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda139(this, tLRPC$TL_error2, j4));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadFullChat$39(long j, TLRPC$TL_messages_chatFull tLRPC$TL_messages_chatFull, int i) {
        TLRPC$Dialog tLRPC$Dialog;
        int i2;
        TLRPC$ChatFull tLRPC$ChatFull = this.fullChats.get(j);
        if (tLRPC$ChatFull != null) {
            tLRPC$TL_messages_chatFull.full_chat.inviterId = tLRPC$ChatFull.inviterId;
        }
        this.fullChats.put(j, tLRPC$TL_messages_chatFull.full_chat);
        long j2 = -j;
        applyDialogNotificationsSettings(j2, tLRPC$TL_messages_chatFull.full_chat.notify_settings);
        for (int i3 = 0; i3 < tLRPC$TL_messages_chatFull.full_chat.bot_info.size(); i3++) {
            getMediaDataController().putBotInfo(j2, tLRPC$TL_messages_chatFull.full_chat.bot_info.get(i3));
        }
        int indexOfKey = this.blockePeers.indexOfKey(j2);
        if (tLRPC$TL_messages_chatFull.full_chat.blocked) {
            if (indexOfKey < 0) {
                this.blockePeers.put(j2, 1);
                getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
            }
        } else if (indexOfKey >= 0) {
            this.blockePeers.removeAt(indexOfKey);
            getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
        }
        this.exportedChats.put(j, tLRPC$TL_messages_chatFull.full_chat.exported_invite);
        this.loadingFullChats.remove(Long.valueOf(j));
        this.loadedFullChats.add(Long.valueOf(j));
        putUsers(tLRPC$TL_messages_chatFull.users, false);
        putChats(tLRPC$TL_messages_chatFull.chats, false);
        if (tLRPC$TL_messages_chatFull.full_chat.stickerset != null) {
            getMediaDataController().getGroupStickerSetById(tLRPC$TL_messages_chatFull.full_chat.stickerset);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.chatInfoDidLoad, tLRPC$TL_messages_chatFull.full_chat, Integer.valueOf(i), Boolean.FALSE, Boolean.TRUE);
        if ((tLRPC$TL_messages_chatFull.full_chat.flags & 2048) != 0 && (tLRPC$Dialog = this.dialogs_dict.get(j2)) != null && tLRPC$Dialog.folder_id != (i2 = tLRPC$TL_messages_chatFull.full_chat.folder_id)) {
            tLRPC$Dialog.folder_id = i2;
            sortDialogs((LongSparseArray<TLRPC$Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadFullChat$40(TLRPC$TL_error tLRPC$TL_error, long j) {
        checkChannelError(tLRPC$TL_error.text, j);
        this.loadingFullChats.remove(Long.valueOf(j));
    }

    public void loadFullUser(TLRPC$User tLRPC$User, int i, boolean z) {
        if (tLRPC$User != null && !this.loadingFullUsers.contains(Long.valueOf(tLRPC$User.id))) {
            if (z || !this.loadedFullUsers.contains(Long.valueOf(tLRPC$User.id))) {
                this.loadingFullUsers.add(Long.valueOf(tLRPC$User.id));
                TLRPC$TL_users_getFullUser tLRPC$TL_users_getFullUser = new TLRPC$TL_users_getFullUser();
                tLRPC$TL_users_getFullUser.id = getInputUser(tLRPC$User);
                long j = tLRPC$User.id;
                if (this.dialogs_read_inbox_max.get(Long.valueOf(j)) == null || this.dialogs_read_outbox_max.get(Long.valueOf(j)) == null) {
                    reloadDialogsReadValue((ArrayList<TLRPC$Dialog>) null, j);
                }
                getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tLRPC$TL_users_getFullUser, new MessagesController$$ExternalSyntheticLambda293(this, tLRPC$User, i)), i);
            }
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadFullUser$44(TLRPC$User tLRPC$User, int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$UserFull tLRPC$UserFull = (TLRPC$UserFull) tLObject;
            getMessagesStorage().updateUserInfo(tLRPC$UserFull, false);
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda166(this, tLRPC$UserFull, tLRPC$User, i));
            return;
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda165(this, tLRPC$User));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadFullUser$42(TLRPC$UserFull tLRPC$UserFull, TLRPC$User tLRPC$User, int i) {
        TLRPC$Dialog tLRPC$Dialog;
        int i2;
        savePeerSettings(tLRPC$UserFull.user.id, tLRPC$UserFull.settings, false);
        applyDialogNotificationsSettings(tLRPC$User.id, tLRPC$UserFull.notify_settings);
        if (tLRPC$UserFull.bot_info instanceof TLRPC$TL_botInfo) {
            getMediaDataController().putBotInfo(tLRPC$User.id, tLRPC$UserFull.bot_info);
        }
        int indexOfKey = this.blockePeers.indexOfKey(tLRPC$User.id);
        if (tLRPC$UserFull.blocked) {
            if (indexOfKey < 0) {
                this.blockePeers.put(tLRPC$User.id, 1);
                getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
            }
        } else if (indexOfKey >= 0) {
            this.blockePeers.removeAt(indexOfKey);
            getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
        }
        this.fullUsers.put(tLRPC$User.id, tLRPC$UserFull);
        this.loadingFullUsers.remove(Long.valueOf(tLRPC$User.id));
        this.loadedFullUsers.add(Long.valueOf(tLRPC$User.id));
        String str = tLRPC$User.first_name + tLRPC$User.last_name + tLRPC$User.username;
        ArrayList arrayList = new ArrayList();
        arrayList.add(tLRPC$UserFull.user);
        putUsers(arrayList, false);
        getMessagesStorage().putUsersAndChats(arrayList, (ArrayList<TLRPC$Chat>) null, false, true);
        if (!str.equals(tLRPC$UserFull.user.first_name + tLRPC$UserFull.user.last_name + tLRPC$UserFull.user.username)) {
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_NAME));
        }
        if (tLRPC$UserFull.bot_info instanceof TLRPC$TL_botInfo) {
            getNotificationCenter().postNotificationName(NotificationCenter.botInfoDidLoad, tLRPC$UserFull.bot_info, Integer.valueOf(i));
        }
        getNotificationCenter().postNotificationName(NotificationCenter.userInfoDidLoad, Long.valueOf(tLRPC$User.id), tLRPC$UserFull);
        if ((tLRPC$UserFull.flags & 2048) != 0 && (tLRPC$Dialog = this.dialogs_dict.get(tLRPC$User.id)) != null && tLRPC$Dialog.folder_id != (i2 = tLRPC$UserFull.folder_id)) {
            tLRPC$Dialog.folder_id = i2;
            sortDialogs((LongSparseArray<TLRPC$Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadFullUser$43(TLRPC$User tLRPC$User) {
        this.loadingFullUsers.remove(Long.valueOf(tLRPC$User.id));
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v1, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getMessages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v9, resolved type: org.telegram.tgnet.TLRPC$TL_channels_getMessages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v10, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getMessages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v11, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getMessages} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void reloadMessages(java.util.ArrayList<java.lang.Integer> r9, long r10, boolean r12) {
        /*
            r8 = this;
            boolean r0 = r9.isEmpty()
            if (r0 == 0) goto L_0x0007
            return
        L_0x0007:
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            boolean r0 = org.telegram.messenger.DialogObject.isChatDialog(r10)
            if (r0 == 0) goto L_0x001c
            long r0 = -r10
            java.lang.Long r0 = java.lang.Long.valueOf(r0)
            org.telegram.tgnet.TLRPC$Chat r0 = r8.getChat(r0)
            goto L_0x001d
        L_0x001c:
            r0 = 0
        L_0x001d:
            boolean r1 = org.telegram.messenger.ChatObject.isChannel(r0)
            if (r1 == 0) goto L_0x0031
            org.telegram.tgnet.TLRPC$TL_channels_getMessages r1 = new org.telegram.tgnet.TLRPC$TL_channels_getMessages
            r1.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r0 = getInputChannel((org.telegram.tgnet.TLRPC$Chat) r0)
            r1.channel = r0
            r1.id = r6
            goto L_0x0038
        L_0x0031:
            org.telegram.tgnet.TLRPC$TL_messages_getMessages r1 = new org.telegram.tgnet.TLRPC$TL_messages_getMessages
            r1.<init>()
            r1.id = r6
        L_0x0038:
            r0 = r1
            androidx.collection.LongSparseArray<java.util.ArrayList<java.lang.Integer>> r1 = r8.reloadingMessages
            java.lang.Object r1 = r1.get(r10)
            java.util.ArrayList r1 = (java.util.ArrayList) r1
            r2 = 0
        L_0x0042:
            int r3 = r9.size()
            if (r2 >= r3) goto L_0x005d
            java.lang.Object r3 = r9.get(r2)
            java.lang.Integer r3 = (java.lang.Integer) r3
            if (r1 == 0) goto L_0x0057
            boolean r4 = r1.contains(r3)
            if (r4 == 0) goto L_0x0057
            goto L_0x005a
        L_0x0057:
            r6.add(r3)
        L_0x005a:
            int r2 = r2 + 1
            goto L_0x0042
        L_0x005d:
            boolean r9 = r6.isEmpty()
            if (r9 == 0) goto L_0x0064
            return
        L_0x0064:
            if (r1 != 0) goto L_0x0070
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            androidx.collection.LongSparseArray<java.util.ArrayList<java.lang.Integer>> r9 = r8.reloadingMessages
            r9.put(r10, r1)
        L_0x0070:
            r1.addAll(r6)
            org.telegram.tgnet.ConnectionsManager r9 = r8.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda275 r7 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda275
            r1 = r7
            r2 = r8
            r3 = r10
            r5 = r12
            r1.<init>(r2, r3, r5, r6)
            r9.sendRequest(r0, r7)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.reloadMessages(java.util.ArrayList, long, boolean):void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$reloadMessages$46(long j, boolean z, ArrayList arrayList, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        long j2 = j;
        if (tLRPC$TL_error == null) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
            LongSparseArray longSparseArray = new LongSparseArray();
            for (int i = 0; i < tLRPC$messages_Messages.users.size(); i++) {
                TLRPC$User tLRPC$User = tLRPC$messages_Messages.users.get(i);
                longSparseArray.put(tLRPC$User.id, tLRPC$User);
            }
            LongSparseArray longSparseArray2 = new LongSparseArray();
            for (int i2 = 0; i2 < tLRPC$messages_Messages.chats.size(); i2++) {
                TLRPC$Chat tLRPC$Chat = tLRPC$messages_Messages.chats.get(i2);
                longSparseArray2.put(tLRPC$Chat.id, tLRPC$Chat);
            }
            Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(j));
            if (num == null) {
                num = Integer.valueOf(getMessagesStorage().getDialogReadMax(false, j2));
                this.dialogs_read_inbox_max.put(Long.valueOf(j), num);
            }
            Integer num2 = this.dialogs_read_outbox_max.get(Long.valueOf(j));
            if (num2 == null) {
                num2 = Integer.valueOf(getMessagesStorage().getDialogReadMax(true, j2));
                this.dialogs_read_outbox_max.put(Long.valueOf(j), num2);
            }
            ArrayList arrayList2 = new ArrayList();
            int i3 = 0;
            while (i3 < tLRPC$messages_Messages.messages.size()) {
                TLRPC$Message tLRPC$Message = tLRPC$messages_Messages.messages.get(i3);
                tLRPC$Message.dialog_id = j2;
                if (!z) {
                    tLRPC$Message.unread = (tLRPC$Message.out ? num2 : num).intValue() < tLRPC$Message.id;
                }
                MessageObject messageObject = r9;
                Integer num3 = num;
                ArrayList arrayList3 = arrayList2;
                MessageObject messageObject2 = new MessageObject(this.currentAccount, tLRPC$Message, (LongSparseArray<TLRPC$User>) longSparseArray, (LongSparseArray<TLRPC$Chat>) longSparseArray2, true, true);
                arrayList3.add(messageObject);
                i3++;
                arrayList2 = arrayList3;
                num = num3;
            }
            ImageLoader.saveMessagesThumbs(tLRPC$messages_Messages.messages);
            getMessagesStorage().putMessages(tLRPC$messages_Messages, j, -1, 0, false, z);
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda68(this, j, arrayList, arrayList2));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$reloadMessages$45(long j, ArrayList arrayList, ArrayList arrayList2) {
        ArrayList arrayList3 = this.reloadingMessages.get(j);
        if (arrayList3 != null) {
            arrayList3.removeAll(arrayList);
            if (arrayList3.isEmpty()) {
                this.reloadingMessages.remove(j);
            }
        }
        MessageObject messageObject = this.dialogMessage.get(j);
        if (messageObject != null) {
            int i = 0;
            while (true) {
                if (i >= arrayList2.size()) {
                    break;
                }
                MessageObject messageObject2 = (MessageObject) arrayList2.get(i);
                if (messageObject.getId() == messageObject2.getId()) {
                    this.dialogMessage.put(j, messageObject2);
                    if (messageObject2.messageOwner.peer_id.channel_id == 0) {
                        MessageObject messageObject3 = this.dialogMessagesByIds.get(messageObject2.getId());
                        this.dialogMessagesByIds.remove(messageObject2.getId());
                        if (messageObject3 != null) {
                            this.dialogMessagesByIds.put(messageObject3.getId(), messageObject3);
                        }
                    }
                    getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                } else {
                    i++;
                }
            }
        }
        getNotificationCenter().postNotificationName(NotificationCenter.replaceMessagesObjects, Long.valueOf(j), arrayList2);
    }

    public void hidePeerSettingsBar(long j, TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat) {
        if (tLRPC$User != null || tLRPC$Chat != null) {
            SharedPreferences.Editor edit = this.notificationsPreferences.edit();
            edit.putInt("dialog_bar_vis3" + j, 3);
            edit.remove("dialog_bar_invite" + j);
            edit.commit();
            if (!DialogObject.isEncryptedDialog(j)) {
                TLRPC$TL_messages_hidePeerSettingsBar tLRPC$TL_messages_hidePeerSettingsBar = new TLRPC$TL_messages_hidePeerSettingsBar();
                if (tLRPC$User != null) {
                    tLRPC$TL_messages_hidePeerSettingsBar.peer = getInputPeer(tLRPC$User.id);
                } else {
                    tLRPC$TL_messages_hidePeerSettingsBar.peer = getInputPeer(-tLRPC$Chat.id);
                }
                getConnectionsManager().sendRequest(tLRPC$TL_messages_hidePeerSettingsBar, MessagesController$$ExternalSyntheticLambda319.INSTANCE);
            }
        }
    }

    public void reportSpam(long j, TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat, TLRPC$EncryptedChat tLRPC$EncryptedChat, boolean z) {
        if (tLRPC$User != null || tLRPC$Chat != null || tLRPC$EncryptedChat != null) {
            SharedPreferences.Editor edit = this.notificationsPreferences.edit();
            edit.putInt("dialog_bar_vis3" + j, 3);
            edit.commit();
            if (DialogObject.isEncryptedDialog(j)) {
                if (tLRPC$EncryptedChat != null && tLRPC$EncryptedChat.access_hash != 0) {
                    TLRPC$TL_messages_reportEncryptedSpam tLRPC$TL_messages_reportEncryptedSpam = new TLRPC$TL_messages_reportEncryptedSpam();
                    TLRPC$TL_inputEncryptedChat tLRPC$TL_inputEncryptedChat = new TLRPC$TL_inputEncryptedChat();
                    tLRPC$TL_messages_reportEncryptedSpam.peer = tLRPC$TL_inputEncryptedChat;
                    tLRPC$TL_inputEncryptedChat.chat_id = tLRPC$EncryptedChat.id;
                    tLRPC$TL_inputEncryptedChat.access_hash = tLRPC$EncryptedChat.access_hash;
                    getConnectionsManager().sendRequest(tLRPC$TL_messages_reportEncryptedSpam, MessagesController$$ExternalSyntheticLambda311.INSTANCE, 2);
                }
            } else if (z) {
                TLRPC$TL_account_reportPeer tLRPC$TL_account_reportPeer = new TLRPC$TL_account_reportPeer();
                if (tLRPC$Chat != null) {
                    tLRPC$TL_account_reportPeer.peer = getInputPeer(-tLRPC$Chat.id);
                } else if (tLRPC$User != null) {
                    tLRPC$TL_account_reportPeer.peer = getInputPeer(tLRPC$User.id);
                }
                tLRPC$TL_account_reportPeer.message = "";
                tLRPC$TL_account_reportPeer.reason = new TLRPC$TL_inputReportReasonGeoIrrelevant();
                getConnectionsManager().sendRequest(tLRPC$TL_account_reportPeer, MessagesController$$ExternalSyntheticLambda310.INSTANCE, 2);
            } else {
                TLRPC$TL_messages_reportSpam tLRPC$TL_messages_reportSpam = new TLRPC$TL_messages_reportSpam();
                if (tLRPC$Chat != null) {
                    tLRPC$TL_messages_reportSpam.peer = getInputPeer(-tLRPC$Chat.id);
                } else if (tLRPC$User != null) {
                    tLRPC$TL_messages_reportSpam.peer = getInputPeer(tLRPC$User.id);
                }
                getConnectionsManager().sendRequest(tLRPC$TL_messages_reportSpam, MessagesController$$ExternalSyntheticLambda325.INSTANCE, 2);
            }
        }
    }

    private void savePeerSettings(long j, TLRPC$TL_peerSettings tLRPC$TL_peerSettings, boolean z) {
        if (tLRPC$TL_peerSettings != null) {
            SharedPreferences sharedPreferences = this.notificationsPreferences;
            if (sharedPreferences.getInt("dialog_bar_vis3" + j, 0) != 3) {
                SharedPreferences.Editor edit = this.notificationsPreferences.edit();
                boolean z2 = !tLRPC$TL_peerSettings.report_spam && !tLRPC$TL_peerSettings.add_contact && !tLRPC$TL_peerSettings.block_contact && !tLRPC$TL_peerSettings.share_contact && !tLRPC$TL_peerSettings.report_geo && !tLRPC$TL_peerSettings.invite_members;
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("peer settings loaded for " + j + " add = " + tLRPC$TL_peerSettings.add_contact + " block = " + tLRPC$TL_peerSettings.block_contact + " spam = " + tLRPC$TL_peerSettings.report_spam + " share = " + tLRPC$TL_peerSettings.share_contact + " geo = " + tLRPC$TL_peerSettings.report_geo + " hide = " + z2 + " distance = " + tLRPC$TL_peerSettings.geo_distance + " invite = " + tLRPC$TL_peerSettings.invite_members);
                }
                edit.putInt("dialog_bar_vis3" + j, z2 ? 1 : 2);
                edit.putBoolean("dialog_bar_share" + j, tLRPC$TL_peerSettings.share_contact);
                edit.putBoolean("dialog_bar_report" + j, tLRPC$TL_peerSettings.report_spam);
                edit.putBoolean("dialog_bar_add" + j, tLRPC$TL_peerSettings.add_contact);
                edit.putBoolean("dialog_bar_block" + j, tLRPC$TL_peerSettings.block_contact);
                edit.putBoolean("dialog_bar_exception" + j, tLRPC$TL_peerSettings.need_contacts_exception);
                edit.putBoolean("dialog_bar_location" + j, tLRPC$TL_peerSettings.report_geo);
                edit.putBoolean("dialog_bar_archived" + j, tLRPC$TL_peerSettings.autoarchived);
                edit.putBoolean("dialog_bar_invite" + j, tLRPC$TL_peerSettings.invite_members);
                SharedPreferences sharedPreferences2 = this.notificationsPreferences;
                if (sharedPreferences2.getInt("dialog_bar_distance" + j, -1) != -2) {
                    if ((tLRPC$TL_peerSettings.flags & 64) != 0) {
                        edit.putInt("dialog_bar_distance" + j, tLRPC$TL_peerSettings.geo_distance);
                    } else {
                        edit.remove("dialog_bar_distance" + j);
                    }
                }
                edit.apply();
                getNotificationCenter().postNotificationName(NotificationCenter.peerSettingsDidLoad, Long.valueOf(j));
            }
        }
    }

    public void loadPeerSettings(TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat) {
        long j;
        if (tLRPC$User != null || tLRPC$Chat != null) {
            if (tLRPC$User != null) {
                j = tLRPC$User.id;
            } else {
                j = -tLRPC$Chat.id;
            }
            if (this.loadingPeerSettings.indexOfKey(j) < 0) {
                this.loadingPeerSettings.put(j, Boolean.TRUE);
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("request spam button for " + j);
                }
                SharedPreferences sharedPreferences = this.notificationsPreferences;
                int i = sharedPreferences.getInt("dialog_bar_vis3" + j, 0);
                if (i != 1 && i != 3) {
                    TLRPC$TL_messages_getPeerSettings tLRPC$TL_messages_getPeerSettings = new TLRPC$TL_messages_getPeerSettings();
                    if (tLRPC$User != null) {
                        tLRPC$TL_messages_getPeerSettings.peer = getInputPeer(tLRPC$User.id);
                    } else {
                        tLRPC$TL_messages_getPeerSettings.peer = getInputPeer(-tLRPC$Chat.id);
                    }
                    getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerSettings, new MessagesController$$ExternalSyntheticLambda250(this, j));
                } else if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("dialog bar already hidden for " + j);
                }
            }
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPeerSettings$52(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda70(this, j, tLObject));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPeerSettings$51(long j, TLObject tLObject) {
        this.loadingPeerSettings.remove(j);
        if (tLObject != null) {
            savePeerSettings(j, (TLRPC$TL_peerSettings) tLObject, false);
        }
    }

    /* access modifiers changed from: protected */
    public void processNewChannelDifferenceParams(int i, int i2, long j) {
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("processNewChannelDifferenceParams pts = " + i + " pts_count = " + i2 + " channeldId = " + j);
        }
        int i3 = this.channelsPts.get(j);
        if (i3 == 0) {
            i3 = getMessagesStorage().getChannelPtsSync(j);
            if (i3 == 0) {
                i3 = 1;
            }
            this.channelsPts.put(j, i3);
        }
        if (i3 + i2 == i) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("APPLY CHANNEL PTS");
            }
            this.channelsPts.put(j, i);
            getMessagesStorage().saveChannelPts(j, i);
        } else if (i3 != i) {
            long j2 = this.updatesStartWaitTimeChannels.get(j);
            if (this.gettingDifferenceChannels.get(j, Boolean.FALSE).booleanValue() || j2 == 0 || Math.abs(System.currentTimeMillis() - j2) <= 1500) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("ADD CHANNEL UPDATE TO QUEUE pts = " + i + " pts_count = " + i2);
                }
                if (j2 == 0) {
                    this.updatesStartWaitTimeChannels.put(j, System.currentTimeMillis());
                }
                UserActionUpdatesPts userActionUpdatesPts = new UserActionUpdatesPts();
                userActionUpdatesPts.pts = i;
                userActionUpdatesPts.pts_count = i2;
                userActionUpdatesPts.chat_id = j;
                ArrayList arrayList = this.updatesQueueChannels.get(j);
                if (arrayList == null) {
                    arrayList = new ArrayList();
                    this.updatesQueueChannels.put(j, arrayList);
                }
                arrayList.add(userActionUpdatesPts);
                return;
            }
            getChannelDifference(j);
        }
    }

    public void processNewDifferenceParams(int i, int i2, int i3, int i4) {
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("processNewDifferenceParams seq = " + i + " pts = " + i2 + " date = " + i3 + " pts_count = " + i4);
        }
        if (i2 != -1) {
            if (getMessagesStorage().getLastPtsValue() + i4 == i2) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("APPLY PTS");
                }
                getMessagesStorage().setLastPtsValue(i2);
                getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
            } else if (getMessagesStorage().getLastPtsValue() != i2) {
                if (this.gettingDifference || this.updatesStartWaitTimePts == 0 || Math.abs(System.currentTimeMillis() - this.updatesStartWaitTimePts) <= 1500) {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("ADD UPDATE TO QUEUE pts = " + i2 + " pts_count = " + i4);
                    }
                    if (this.updatesStartWaitTimePts == 0) {
                        this.updatesStartWaitTimePts = System.currentTimeMillis();
                    }
                    UserActionUpdatesPts userActionUpdatesPts = new UserActionUpdatesPts();
                    userActionUpdatesPts.pts = i2;
                    userActionUpdatesPts.pts_count = i4;
                    this.updatesQueuePts.add(userActionUpdatesPts);
                } else {
                    getDifference();
                }
            }
        }
        if (i == -1) {
            return;
        }
        if (getMessagesStorage().getLastSeqValue() + 1 == i) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("APPLY SEQ");
            }
            getMessagesStorage().setLastSeqValue(i);
            if (i3 != -1) {
                getMessagesStorage().setLastDateValue(i3);
            }
            getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
        } else if (getMessagesStorage().getLastSeqValue() == i) {
        } else {
            if (this.gettingDifference || this.updatesStartWaitTimeSeq == 0 || Math.abs(System.currentTimeMillis() - this.updatesStartWaitTimeSeq) <= 1500) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("ADD UPDATE TO QUEUE seq = " + i);
                }
                if (this.updatesStartWaitTimeSeq == 0) {
                    this.updatesStartWaitTimeSeq = System.currentTimeMillis();
                }
                UserActionUpdatesSeq userActionUpdatesSeq = new UserActionUpdatesSeq();
                userActionUpdatesSeq.seq = i;
                this.updatesQueueSeq.add(userActionUpdatesSeq);
                return;
            }
            getDifference();
        }
    }

    public void didAddedNewTask(int i, long j, SparseArray<ArrayList<Integer>> sparseArray) {
        Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda30(this, i));
        if (sparseArray != null) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda63(this, j, sparseArray));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$didAddedNewTask$53(int i) {
        int i2;
        if ((this.currentDeletingTaskMids == null && this.currentDeletingTaskMediaMids == null && !this.gettingNewDeleteTask) || ((i2 = this.currentDeletingTaskTime) != 0 && i < i2)) {
            getNewDeleteTask((LongSparseArray<ArrayList<Integer>>) null, (LongSparseArray<ArrayList<Integer>>) null);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$didAddedNewTask$54(long j, SparseArray sparseArray) {
        getNotificationCenter().postNotificationName(NotificationCenter.didCreatedNewDeleteTask, Long.valueOf(j), sparseArray);
    }

    public void getNewDeleteTask(LongSparseArray<ArrayList<Integer>> longSparseArray, LongSparseArray<ArrayList<Integer>> longSparseArray2) {
        Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda82(this, longSparseArray, longSparseArray2));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getNewDeleteTask$55(LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        this.gettingNewDeleteTask = true;
        getMessagesStorage().getNewTask(longSparseArray, longSparseArray2);
    }

    private boolean checkDeletingTask(boolean z) {
        int i;
        int currentTime = getConnectionsManager().getCurrentTime();
        if ((this.currentDeletingTaskMids == null && this.currentDeletingTaskMediaMids == null) || (!z && ((i = this.currentDeletingTaskTime) == 0 || i > currentTime))) {
            return false;
        }
        this.currentDeletingTaskTime = 0;
        if (this.currentDeleteTaskRunnable != null && !z) {
            Utilities.stageQueue.cancelRunnable(this.currentDeleteTaskRunnable);
        }
        LongSparseArray<ArrayList<Integer>> longSparseArray = null;
        this.currentDeleteTaskRunnable = null;
        LongSparseArray<ArrayList<Integer>> longSparseArray2 = this.currentDeletingTaskMids;
        LongSparseArray<ArrayList<Integer>> clone = longSparseArray2 != null ? longSparseArray2.clone() : null;
        LongSparseArray<ArrayList<Integer>> longSparseArray3 = this.currentDeletingTaskMediaMids;
        if (longSparseArray3 != null) {
            longSparseArray = longSparseArray3.clone();
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda83(this, clone, longSparseArray));
        return true;
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$checkDeletingTask$57(LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        if (longSparseArray != null) {
            int size = longSparseArray.size();
            for (int i = 0; i < size; i++) {
                ArrayList arrayList = (ArrayList) longSparseArray.valueAt(i);
                deleteMessages(arrayList, (ArrayList<Long>) null, (TLRPC$EncryptedChat) null, longSparseArray.keyAt(i), true, false, !arrayList.isEmpty() && ((Integer) arrayList.get(0)).intValue() > 0);
            }
        }
        if (longSparseArray2 != null) {
            int size2 = longSparseArray2.size();
            for (int i2 = 0; i2 < size2; i2++) {
                getMessagesStorage().emptyMessagesMedia(longSparseArray2.keyAt(i2), (ArrayList) longSparseArray2.valueAt(i2));
            }
        }
        Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda80(this, longSparseArray, longSparseArray2));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$checkDeletingTask$56(LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        getNewDeleteTask(longSparseArray, longSparseArray2);
        this.currentDeletingTaskTime = 0;
        this.currentDeletingTaskMids = null;
        this.currentDeletingTaskMediaMids = null;
    }

    public void processLoadedDeleteTask(int i, LongSparseArray<ArrayList<Integer>> longSparseArray, LongSparseArray<ArrayList<Integer>> longSparseArray2) {
        Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda84(this, longSparseArray, longSparseArray2, i));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processLoadedDeleteTask$59(LongSparseArray longSparseArray, LongSparseArray longSparseArray2, int i) {
        this.gettingNewDeleteTask = false;
        if (longSparseArray == null && longSparseArray2 == null) {
            this.currentDeletingTaskTime = 0;
            this.currentDeletingTaskMids = null;
            this.currentDeletingTaskMediaMids = null;
            return;
        }
        this.currentDeletingTaskTime = i;
        this.currentDeletingTaskMids = longSparseArray;
        this.currentDeletingTaskMediaMids = longSparseArray2;
        if (this.currentDeleteTaskRunnable != null) {
            Utilities.stageQueue.cancelRunnable(this.currentDeleteTaskRunnable);
            this.currentDeleteTaskRunnable = null;
        }
        if (!checkDeletingTask(false)) {
            this.currentDeleteTaskRunnable = new MessagesController$$ExternalSyntheticLambda24(this);
            Utilities.stageQueue.postRunnable(this.currentDeleteTaskRunnable, ((long) Math.abs(getConnectionsManager().getCurrentTime() - this.currentDeletingTaskTime)) * 1000);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processLoadedDeleteTask$58() {
        checkDeletingTask(true);
    }

    public void loadDialogPhotos(long j, int i, int i2, boolean z, int i3) {
        if (z) {
            getMessagesStorage().getDialogPhotos(j, i, i2, i3);
        } else if (j > 0) {
            TLRPC$User user = getUser(Long.valueOf(j));
            if (user != null) {
                TLRPC$TL_photos_getUserPhotos tLRPC$TL_photos_getUserPhotos = new TLRPC$TL_photos_getUserPhotos();
                tLRPC$TL_photos_getUserPhotos.limit = i;
                tLRPC$TL_photos_getUserPhotos.offset = 0;
                tLRPC$TL_photos_getUserPhotos.max_id = (long) i2;
                tLRPC$TL_photos_getUserPhotos.user_id = getInputUser(user);
                getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tLRPC$TL_photos_getUserPhotos, new MessagesController$$ExternalSyntheticLambda259(this, j, i, i2, i3)), i3);
            }
        } else if (j < 0) {
            TLRPC$TL_messages_search tLRPC$TL_messages_search = new TLRPC$TL_messages_search();
            tLRPC$TL_messages_search.filter = new TLRPC$TL_inputMessagesFilterChatPhotos();
            tLRPC$TL_messages_search.limit = i;
            tLRPC$TL_messages_search.offset_id = i2;
            tLRPC$TL_messages_search.q = "";
            tLRPC$TL_messages_search.peer = getInputPeer(j);
            getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tLRPC$TL_messages_search, new MessagesController$$ExternalSyntheticLambda258(this, j, i, i2, i3)), i3);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadDialogPhotos$60(long j, int i, int i2, int i3, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processLoadedUserPhotos((TLRPC$photos_Photos) tLObject, (ArrayList<TLRPC$Message>) null, j, i, i2, false, i3);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadDialogPhotos$61(long j, int i, int i2, int i3, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        TLRPC$Photo tLRPC$Photo;
        if (tLRPC$TL_error == null) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
            TLRPC$TL_photos_photos tLRPC$TL_photos_photos = new TLRPC$TL_photos_photos();
            ArrayList arrayList = new ArrayList();
            tLRPC$TL_photos_photos.count = tLRPC$messages_Messages.count;
            tLRPC$TL_photos_photos.users.addAll(tLRPC$messages_Messages.users);
            for (int i4 = 0; i4 < tLRPC$messages_Messages.messages.size(); i4++) {
                TLRPC$Message tLRPC$Message = tLRPC$messages_Messages.messages.get(i4);
                TLRPC$MessageAction tLRPC$MessageAction = tLRPC$Message.action;
                if (!(tLRPC$MessageAction == null || (tLRPC$Photo = tLRPC$MessageAction.photo) == null)) {
                    tLRPC$TL_photos_photos.photos.add(tLRPC$Photo);
                    arrayList.add(tLRPC$Message);
                }
            }
            processLoadedUserPhotos(tLRPC$TL_photos_photos, arrayList, j, i, i2, false, i3);
        }
    }

    public void blockPeer(long j) {
        TLRPC$Chat tLRPC$Chat;
        TLRPC$User tLRPC$User = null;
        if (j > 0) {
            TLRPC$User user = getUser(Long.valueOf(j));
            if (user != null) {
                TLRPC$User tLRPC$User2 = user;
                tLRPC$Chat = null;
                tLRPC$User = tLRPC$User2;
            } else {
                return;
            }
        } else {
            tLRPC$Chat = getChat(Long.valueOf(-j));
            if (tLRPC$Chat == null) {
                return;
            }
        }
        if (this.blockePeers.indexOfKey(j) < 0) {
            this.blockePeers.put(j, 1);
            if (tLRPC$User != null) {
                if (tLRPC$User.bot) {
                    getMediaDataController().removeInline(j);
                } else {
                    getMediaDataController().removePeer(j);
                }
            }
            int i = this.totalBlockedCount;
            if (i >= 0) {
                this.totalBlockedCount = i + 1;
            }
            getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
            TLRPC$TL_contacts_block tLRPC$TL_contacts_block = new TLRPC$TL_contacts_block();
            if (tLRPC$User != null) {
                tLRPC$TL_contacts_block.id = getInputPeer(tLRPC$User);
            } else {
                tLRPC$TL_contacts_block.id = getInputPeer(tLRPC$Chat);
            }
            getConnectionsManager().sendRequest(tLRPC$TL_contacts_block, MessagesController$$ExternalSyntheticLambda309.INSTANCE);
        }
    }

    public void setParticipantBannedRole(long j, TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat, TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights, boolean z, BaseFragment baseFragment) {
        if ((tLRPC$User != null || tLRPC$Chat != null) && tLRPC$TL_chatBannedRights != null) {
            TLRPC$TL_channels_editBanned tLRPC$TL_channels_editBanned = new TLRPC$TL_channels_editBanned();
            tLRPC$TL_channels_editBanned.channel = getInputChannel(j);
            if (tLRPC$User != null) {
                tLRPC$TL_channels_editBanned.participant = getInputPeer(tLRPC$User);
            } else {
                tLRPC$TL_channels_editBanned.participant = getInputPeer(tLRPC$Chat);
            }
            tLRPC$TL_channels_editBanned.banned_rights = tLRPC$TL_chatBannedRights;
            getConnectionsManager().sendRequest(tLRPC$TL_channels_editBanned, new MessagesController$$ExternalSyntheticLambda272(this, j, baseFragment, tLRPC$TL_channels_editBanned, z));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$setParticipantBannedRole$65(long j, BaseFragment baseFragment, TLRPC$TL_channels_editBanned tLRPC$TL_channels_editBanned, boolean z, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda52(this, j), 1000);
            return;
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda145(this, tLRPC$TL_error, baseFragment, tLRPC$TL_channels_editBanned, z));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$setParticipantBannedRole$63(long j) {
        loadFullChat(j, 0, true);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$setParticipantBannedRole$64(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_channels_editBanned tLRPC$TL_channels_editBanned, boolean z) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_channels_editBanned, Boolean.valueOf(z));
    }

    public void setChannelSlowMode(long j, int i) {
        TLRPC$TL_channels_toggleSlowMode tLRPC$TL_channels_toggleSlowMode = new TLRPC$TL_channels_toggleSlowMode();
        tLRPC$TL_channels_toggleSlowMode.seconds = i;
        tLRPC$TL_channels_toggleSlowMode.channel = getInputChannel(j);
        getConnectionsManager().sendRequest(tLRPC$TL_channels_toggleSlowMode, new MessagesController$$ExternalSyntheticLambda254(this, j));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$setChannelSlowMode$67(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            getMessagesController().processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda46(this, j), 1000);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$setChannelSlowMode$66(long j) {
        loadFullChat(j, 0, true);
    }

    public void setDefaultBannedRole(long j, TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights, boolean z, BaseFragment baseFragment) {
        if (tLRPC$TL_chatBannedRights != null) {
            TLRPC$TL_messages_editChatDefaultBannedRights tLRPC$TL_messages_editChatDefaultBannedRights = new TLRPC$TL_messages_editChatDefaultBannedRights();
            tLRPC$TL_messages_editChatDefaultBannedRights.peer = getInputPeer(-j);
            tLRPC$TL_messages_editChatDefaultBannedRights.banned_rights = tLRPC$TL_chatBannedRights;
            getConnectionsManager().sendRequest(tLRPC$TL_messages_editChatDefaultBannedRights, new MessagesController$$ExternalSyntheticLambda274(this, j, baseFragment, tLRPC$TL_messages_editChatDefaultBannedRights, z));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$setDefaultBannedRole$70(long j, BaseFragment baseFragment, TLRPC$TL_messages_editChatDefaultBannedRights tLRPC$TL_messages_editChatDefaultBannedRights, boolean z, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda51(this, j), 1000);
            return;
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda149(this, tLRPC$TL_error, baseFragment, tLRPC$TL_messages_editChatDefaultBannedRights, z));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$setDefaultBannedRole$68(long j) {
        loadFullChat(j, 0, true);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$setDefaultBannedRole$69(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_messages_editChatDefaultBannedRights tLRPC$TL_messages_editChatDefaultBannedRights, boolean z) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_messages_editChatDefaultBannedRights, Boolean.valueOf(z));
    }

    public void setUserAdminRole(long j, TLRPC$User tLRPC$User, TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights, String str, boolean z, BaseFragment baseFragment, boolean z2) {
        TLRPC$User tLRPC$User2 = tLRPC$User;
        TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights2 = tLRPC$TL_chatAdminRights;
        if (tLRPC$User2 != null && tLRPC$TL_chatAdminRights2 != null) {
            TLRPC$Chat chat = getChat(Long.valueOf(j));
            if (ChatObject.isChannel(chat)) {
                TLRPC$TL_channels_editAdmin tLRPC$TL_channels_editAdmin = new TLRPC$TL_channels_editAdmin();
                tLRPC$TL_channels_editAdmin.channel = getInputChannel(chat);
                tLRPC$TL_channels_editAdmin.user_id = getInputUser(tLRPC$User2);
                tLRPC$TL_channels_editAdmin.admin_rights = tLRPC$TL_chatAdminRights2;
                tLRPC$TL_channels_editAdmin.rank = str;
                getConnectionsManager().sendRequest(tLRPC$TL_channels_editAdmin, new MessagesController$$ExternalSyntheticLambda271(this, j, baseFragment, tLRPC$TL_channels_editAdmin, z));
                return;
            }
            TLRPC$TL_messages_editChatAdmin tLRPC$TL_messages_editChatAdmin = new TLRPC$TL_messages_editChatAdmin();
            tLRPC$TL_messages_editChatAdmin.chat_id = j;
            tLRPC$TL_messages_editChatAdmin.user_id = getInputUser(tLRPC$User2);
            tLRPC$TL_messages_editChatAdmin.is_admin = tLRPC$TL_chatAdminRights2.change_info || tLRPC$TL_chatAdminRights2.delete_messages || tLRPC$TL_chatAdminRights2.ban_users || tLRPC$TL_chatAdminRights2.invite_users || tLRPC$TL_chatAdminRights2.pin_messages || tLRPC$TL_chatAdminRights2.add_admins || tLRPC$TL_chatAdminRights2.manage_call;
            MessagesController$$ExternalSyntheticLambda273 messagesController$$ExternalSyntheticLambda273 = new MessagesController$$ExternalSyntheticLambda273(this, j, baseFragment, tLRPC$TL_messages_editChatAdmin);
            if (!tLRPC$TL_messages_editChatAdmin.is_admin || !z2) {
                getConnectionsManager().sendRequest(tLRPC$TL_messages_editChatAdmin, messagesController$$ExternalSyntheticLambda273);
            } else {
                addUserToChat(j, tLRPC$User, 0, (String) null, baseFragment, new MessagesController$$ExternalSyntheticLambda152(this, tLRPC$TL_messages_editChatAdmin, messagesController$$ExternalSyntheticLambda273));
            }
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$setUserAdminRole$73(long j, BaseFragment baseFragment, TLRPC$TL_channels_editAdmin tLRPC$TL_channels_editAdmin, boolean z, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda54(this, j), 1000);
            return;
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda144(this, tLRPC$TL_error, baseFragment, tLRPC$TL_channels_editAdmin, z));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$setUserAdminRole$71(long j) {
        loadFullChat(j, 0, true);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$setUserAdminRole$72(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_channels_editAdmin tLRPC$TL_channels_editAdmin, boolean z) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_channels_editAdmin, Boolean.valueOf(z));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$setUserAdminRole$74(long j) {
        loadFullChat(j, 0, true);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$setUserAdminRole$76(long j, BaseFragment baseFragment, TLRPC$TL_messages_editChatAdmin tLRPC$TL_messages_editChatAdmin, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda50(this, j), 1000);
        } else {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda148(this, tLRPC$TL_error, baseFragment, tLRPC$TL_messages_editChatAdmin));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$setUserAdminRole$75(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_messages_editChatAdmin tLRPC$TL_messages_editChatAdmin) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_messages_editChatAdmin, Boolean.FALSE);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$setUserAdminRole$77(TLRPC$TL_messages_editChatAdmin tLRPC$TL_messages_editChatAdmin, RequestDelegate requestDelegate) {
        getConnectionsManager().sendRequest(tLRPC$TL_messages_editChatAdmin, requestDelegate);
    }

    public void unblockPeer(long j) {
        TLRPC$Chat tLRPC$Chat;
        TLRPC$TL_contacts_unblock tLRPC$TL_contacts_unblock = new TLRPC$TL_contacts_unblock();
        TLRPC$User tLRPC$User = null;
        if (j > 0) {
            TLRPC$User user = getUser(Long.valueOf(j));
            if (user != null) {
                TLRPC$User tLRPC$User2 = user;
                tLRPC$Chat = null;
                tLRPC$User = tLRPC$User2;
            } else {
                return;
            }
        } else {
            tLRPC$Chat = getChat(Long.valueOf(-j));
            if (tLRPC$Chat == null) {
                return;
            }
        }
        this.totalBlockedCount--;
        this.blockePeers.delete(j);
        if (tLRPC$User != null) {
            tLRPC$TL_contacts_unblock.id = getInputPeer(tLRPC$User);
        } else {
            tLRPC$TL_contacts_unblock.id = getInputPeer(tLRPC$Chat);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
        getConnectionsManager().sendRequest(tLRPC$TL_contacts_unblock, MessagesController$$ExternalSyntheticLambda320.INSTANCE);
    }

    public void getBlockedPeers(boolean z) {
        int i;
        if (getUserConfig().isClientActivated() && !this.loadingBlockedPeers) {
            this.loadingBlockedPeers = true;
            TLRPC$TL_contacts_getBlocked tLRPC$TL_contacts_getBlocked = new TLRPC$TL_contacts_getBlocked();
            if (z) {
                i = 0;
            } else {
                i = this.blockePeers.size();
            }
            tLRPC$TL_contacts_getBlocked.offset = i;
            tLRPC$TL_contacts_getBlocked.limit = z ? 20 : 100;
            getConnectionsManager().sendRequest(tLRPC$TL_contacts_getBlocked, new MessagesController$$ExternalSyntheticLambda303(this, z, tLRPC$TL_contacts_getBlocked));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getBlockedPeers$80(boolean z, TLRPC$TL_contacts_getBlocked tLRPC$TL_contacts_getBlocked, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda125(this, tLObject, z, tLRPC$TL_contacts_getBlocked));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getBlockedPeers$79(TLObject tLObject, boolean z, TLRPC$TL_contacts_getBlocked tLRPC$TL_contacts_getBlocked) {
        if (tLObject != null) {
            TLRPC$contacts_Blocked tLRPC$contacts_Blocked = (TLRPC$contacts_Blocked) tLObject;
            putUsers(tLRPC$contacts_Blocked.users, false);
            putChats(tLRPC$contacts_Blocked.chats, false);
            getMessagesStorage().putUsersAndChats(tLRPC$contacts_Blocked.users, tLRPC$contacts_Blocked.chats, true, true);
            if (z) {
                this.blockePeers.clear();
            }
            this.totalBlockedCount = Math.max(tLRPC$contacts_Blocked.count, tLRPC$contacts_Blocked.blocked.size());
            this.blockedEndReached = tLRPC$contacts_Blocked.blocked.size() < tLRPC$TL_contacts_getBlocked.limit;
            int size = tLRPC$contacts_Blocked.blocked.size();
            for (int i = 0; i < size; i++) {
                this.blockePeers.put(MessageObject.getPeerId(tLRPC$contacts_Blocked.blocked.get(i).peer_id), 1);
            }
            this.loadingBlockedPeers = false;
            getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
        }
    }

    public void deleteUserPhoto(TLRPC$InputPhoto tLRPC$InputPhoto) {
        if (tLRPC$InputPhoto == null) {
            TLRPC$TL_photos_updateProfilePhoto tLRPC$TL_photos_updateProfilePhoto = new TLRPC$TL_photos_updateProfilePhoto();
            tLRPC$TL_photos_updateProfilePhoto.id = new TLRPC$TL_inputPhotoEmpty();
            getUserConfig().getCurrentUser().photo = new TLRPC$TL_userProfilePhotoEmpty();
            TLRPC$User user = getUser(Long.valueOf(getUserConfig().getClientUserId()));
            if (user == null) {
                user = getUserConfig().getCurrentUser();
            }
            if (user != null) {
                user.photo = getUserConfig().getCurrentUser().photo;
                getNotificationCenter().postNotificationName(NotificationCenter.mainUserInfoChanged, new Object[0]);
                getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_ALL));
                getConnectionsManager().sendRequest(tLRPC$TL_photos_updateProfilePhoto, new MessagesController$$ExternalSyntheticLambda227(this));
                return;
            }
            return;
        }
        TLRPC$TL_photos_deletePhotos tLRPC$TL_photos_deletePhotos = new TLRPC$TL_photos_deletePhotos();
        tLRPC$TL_photos_deletePhotos.id.add(tLRPC$InputPhoto);
        getConnectionsManager().sendRequest(tLRPC$TL_photos_deletePhotos, MessagesController$$ExternalSyntheticLambda322.INSTANCE);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteUserPhoto$82(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_photos_photo tLRPC$TL_photos_photo = (TLRPC$TL_photos_photo) tLObject;
            TLRPC$User user = getUser(Long.valueOf(getUserConfig().getClientUserId()));
            if (user == null) {
                user = getUserConfig().getCurrentUser();
                putUser(user, false);
            } else {
                getUserConfig().setCurrentUser(user);
            }
            if (user != null) {
                getMessagesStorage().clearUserPhotos(user.id);
                ArrayList arrayList = new ArrayList();
                arrayList.add(user);
                getMessagesStorage().putUsersAndChats(arrayList, (ArrayList<TLRPC$Chat>) null, false, true);
                if (tLRPC$TL_photos_photo.photo instanceof TLRPC$TL_photo) {
                    TLRPC$TL_userProfilePhoto tLRPC$TL_userProfilePhoto = new TLRPC$TL_userProfilePhoto();
                    user.photo = tLRPC$TL_userProfilePhoto;
                    tLRPC$TL_userProfilePhoto.has_video = !tLRPC$TL_photos_photo.photo.video_sizes.isEmpty();
                    TLRPC$UserProfilePhoto tLRPC$UserProfilePhoto = user.photo;
                    TLRPC$Photo tLRPC$Photo = tLRPC$TL_photos_photo.photo;
                    tLRPC$UserProfilePhoto.photo_id = tLRPC$Photo.id;
                    tLRPC$UserProfilePhoto.photo_small = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo.sizes, 150).location;
                    user.photo.photo_big = FileLoader.getClosestPhotoSizeWithSize(tLRPC$TL_photos_photo.photo.sizes, 800).location;
                    user.photo.dc_id = tLRPC$TL_photos_photo.photo.dc_id;
                } else {
                    user.photo = new TLRPC$TL_userProfilePhotoEmpty();
                }
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda25(this));
            }
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteUserPhoto$81() {
        getNotificationCenter().postNotificationName(NotificationCenter.mainUserInfoChanged, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_ALL));
        getUserConfig().saveConfig(true);
    }

    public void processLoadedUserPhotos(TLRPC$photos_Photos tLRPC$photos_Photos, ArrayList<TLRPC$Message> arrayList, long j, int i, int i2, boolean z, int i3) {
        TLRPC$photos_Photos tLRPC$photos_Photos2 = tLRPC$photos_Photos;
        if (!z) {
            getMessagesStorage().putUsersAndChats(tLRPC$photos_Photos2.users, (ArrayList<TLRPC$Chat>) null, true, true);
            ArrayList<TLRPC$Message> arrayList2 = arrayList;
            long j2 = j;
            getMessagesStorage().putDialogPhotos(j, tLRPC$photos_Photos, arrayList);
        } else {
            ArrayList<TLRPC$Message> arrayList3 = arrayList;
            long j3 = j;
            if (tLRPC$photos_Photos2 == null || tLRPC$photos_Photos2.photos.isEmpty()) {
                loadDialogPhotos(j, i, i2, false, i3);
                return;
            }
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda175(this, tLRPC$photos_Photos, z, j, i, i3, arrayList));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processLoadedUserPhotos$84(TLRPC$photos_Photos tLRPC$photos_Photos, boolean z, long j, int i, int i2, ArrayList arrayList) {
        putUsers(tLRPC$photos_Photos.users, z);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogPhotosLoaded, Long.valueOf(j), Integer.valueOf(i), Boolean.valueOf(z), Integer.valueOf(i2), tLRPC$photos_Photos.photos, arrayList);
    }

    public void uploadAndApplyUserAvatar(TLRPC$FileLocation tLRPC$FileLocation) {
        if (tLRPC$FileLocation != null) {
            this.uploadingAvatar = FileLoader.getDirectory(4) + "/" + tLRPC$FileLocation.volume_id + "_" + tLRPC$FileLocation.local_id + ".jpg";
            getFileLoader().uploadFile(this.uploadingAvatar, false, true, 16777216);
        }
    }

    public void saveTheme(Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent, boolean z, boolean z2) {
        TLRPC$TL_theme tLRPC$TL_theme = themeAccent != null ? themeAccent.info : themeInfo.info;
        if (tLRPC$TL_theme != null) {
            TLRPC$TL_account_saveTheme tLRPC$TL_account_saveTheme = new TLRPC$TL_account_saveTheme();
            TLRPC$TL_inputTheme tLRPC$TL_inputTheme = new TLRPC$TL_inputTheme();
            tLRPC$TL_inputTheme.id = tLRPC$TL_theme.id;
            tLRPC$TL_inputTheme.access_hash = tLRPC$TL_theme.access_hash;
            tLRPC$TL_account_saveTheme.theme = tLRPC$TL_inputTheme;
            tLRPC$TL_account_saveTheme.unsave = z2;
            getConnectionsManager().sendRequest(tLRPC$TL_account_saveTheme, MessagesController$$ExternalSyntheticLambda308.INSTANCE);
            getConnectionsManager().resumeNetworkMaybe();
        }
        if (!z2) {
            installTheme(themeInfo, themeAccent, z);
        }
    }

    public void installTheme(Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent, boolean z) {
        TLRPC$TL_theme tLRPC$TL_theme = themeAccent != null ? themeAccent.info : themeInfo.info;
        String str = themeAccent != null ? themeAccent.patternSlug : themeInfo.slug;
        boolean z2 = themeAccent == null && themeInfo.isBlured;
        boolean z3 = themeAccent != null ? themeAccent.patternMotion : themeInfo.isMotion;
        TLRPC$TL_account_installTheme tLRPC$TL_account_installTheme = new TLRPC$TL_account_installTheme();
        tLRPC$TL_account_installTheme.dark = z;
        if (tLRPC$TL_theme != null) {
            tLRPC$TL_account_installTheme.format = "android";
            TLRPC$TL_inputTheme tLRPC$TL_inputTheme = new TLRPC$TL_inputTheme();
            tLRPC$TL_inputTheme.id = tLRPC$TL_theme.id;
            tLRPC$TL_inputTheme.access_hash = tLRPC$TL_theme.access_hash;
            tLRPC$TL_account_installTheme.theme = tLRPC$TL_inputTheme;
            tLRPC$TL_account_installTheme.flags |= 2;
        }
        getConnectionsManager().sendRequest(tLRPC$TL_account_installTheme, MessagesController$$ExternalSyntheticLambda316.INSTANCE);
        if (!TextUtils.isEmpty(str)) {
            TLRPC$TL_account_installWallPaper tLRPC$TL_account_installWallPaper = new TLRPC$TL_account_installWallPaper();
            TLRPC$TL_inputWallPaperSlug tLRPC$TL_inputWallPaperSlug = new TLRPC$TL_inputWallPaperSlug();
            tLRPC$TL_inputWallPaperSlug.slug = str;
            tLRPC$TL_account_installWallPaper.wallpaper = tLRPC$TL_inputWallPaperSlug;
            TLRPC$TL_wallPaperSettings tLRPC$TL_wallPaperSettings = new TLRPC$TL_wallPaperSettings();
            tLRPC$TL_account_installWallPaper.settings = tLRPC$TL_wallPaperSettings;
            tLRPC$TL_wallPaperSettings.blur = z2;
            tLRPC$TL_wallPaperSettings.motion = z3;
            getConnectionsManager().sendRequest(tLRPC$TL_account_installWallPaper, MessagesController$$ExternalSyntheticLambda315.INSTANCE);
        }
    }

    public void saveThemeToServer(Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent) {
        File file;
        String str;
        if (themeInfo != null) {
            if (themeAccent != null) {
                str = themeAccent.saveToFile().getAbsolutePath();
                file = themeAccent.getPathToWallpaper();
            } else {
                str = themeInfo.pathToFile;
                file = null;
            }
            String str2 = str;
            File file2 = file;
            if (str2 != null && !this.uploadingThemes.containsKey(str2)) {
                this.uploadingThemes.put(str2, themeAccent != null ? themeAccent : themeInfo);
                Utilities.globalQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda86(this, str2, file2, themeAccent, themeInfo));
            }
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$saveThemeToServer$89(String str, File file, Theme.ThemeAccent themeAccent, Theme.ThemeInfo themeInfo) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda87(this, Theme.createThemePreviewImage(str, file != null ? file.getAbsolutePath() : null, themeAccent), str, themeAccent, themeInfo));
    }

    /* JADX WARNING: type inference failed for: r6v0, types: [org.telegram.ui.ActionBar.Theme$ThemeInfo] */
    /* access modifiers changed from: private */
    /* JADX WARNING: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$saveThemeToServer$88(java.lang.String r3, java.lang.String r4, org.telegram.ui.ActionBar.Theme.ThemeAccent r5, org.telegram.ui.ActionBar.Theme.ThemeInfo r6) {
        /*
            r2 = this;
            if (r3 != 0) goto L_0x0008
            java.util.HashMap<java.lang.String, java.lang.Object> r3 = r2.uploadingThemes
            r3.remove(r4)
            return
        L_0x0008:
            java.util.HashMap<java.lang.String, java.lang.Object> r0 = r2.uploadingThemes
            if (r5 == 0) goto L_0x000e
            r1 = r5
            goto L_0x000f
        L_0x000e:
            r1 = r6
        L_0x000f:
            r0.put(r3, r1)
            if (r5 != 0) goto L_0x0019
            r6.uploadingFile = r4
            r6.uploadingThumb = r3
            goto L_0x001d
        L_0x0019:
            r5.uploadingFile = r4
            r5.uploadingThumb = r3
        L_0x001d:
            org.telegram.messenger.FileLoader r5 = r2.getFileLoader()
            r6 = 67108864(0x4000000, float:1.5046328E-36)
            r0 = 0
            r1 = 1
            r5.uploadFile(r4, r0, r1, r6)
            org.telegram.messenger.FileLoader r4 = r2.getFileLoader()
            r5 = 16777216(0x1000000, float:2.3509887E-38)
            r4.uploadFile(r3, r0, r1, r5)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$saveThemeToServer$88(java.lang.String, java.lang.String, org.telegram.ui.ActionBar.Theme$ThemeAccent, org.telegram.ui.ActionBar.Theme$ThemeInfo):void");
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v15, resolved type: org.telegram.tgnet.TLRPC$TL_inputWallPaperSlug} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v8, resolved type: org.telegram.tgnet.TLRPC$TL_account_saveWallPaper} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v10, resolved type: org.telegram.tgnet.TLRPC$TL_account_installWallPaper} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v22, resolved type: org.telegram.tgnet.TLRPC$TL_inputWallPaper} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v28, resolved type: org.telegram.tgnet.TLRPC$TL_account_saveWallPaper} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v29, resolved type: org.telegram.tgnet.TLRPC$TL_account_saveWallPaper} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v25, resolved type: org.telegram.tgnet.TLRPC$TL_inputWallPaperSlug} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v26, resolved type: org.telegram.tgnet.TLRPC$TL_inputWallPaperSlug} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* JADX WARNING: Removed duplicated region for block: B:60:0x0162  */
    /* JADX WARNING: Removed duplicated region for block: B:85:? A[RETURN, SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void saveWallpaperToServer(java.io.File r10, org.telegram.ui.ActionBar.Theme.OverrideWallpaperInfo r11, boolean r12, long r13) {
        /*
            r9 = this;
            java.lang.String r0 = r9.uploadingWallpaper
            r1 = 0
            r2 = 0
            if (r0 == 0) goto L_0x0035
            java.io.File r0 = new java.io.File
            java.io.File r3 = org.telegram.messenger.ApplicationLoader.getFilesDirFixed()
            java.lang.String r4 = r11.originalFileName
            r0.<init>(r3, r4)
            if (r10 == 0) goto L_0x0028
            java.lang.String r3 = r10.getAbsolutePath()
            java.lang.String r4 = r9.uploadingWallpaper
            boolean r3 = r3.equals(r4)
            if (r3 != 0) goto L_0x0025
            boolean r0 = r10.equals(r0)
            if (r0 == 0) goto L_0x0028
        L_0x0025:
            r9.uploadingWallpaperInfo = r11
            return
        L_0x0028:
            org.telegram.messenger.FileLoader r0 = r9.getFileLoader()
            java.lang.String r3 = r9.uploadingWallpaper
            r0.cancelFileUpload(r3, r1)
            r9.uploadingWallpaper = r2
            r9.uploadingWallpaperInfo = r2
        L_0x0035:
            r0 = 1120403456(0x42CLASSNAME, float:100.0)
            r3 = 1
            r4 = 0
            if (r10 == 0) goto L_0x0051
            java.lang.String r10 = r10.getAbsolutePath()
            r9.uploadingWallpaper = r10
            r9.uploadingWallpaperInfo = r11
            org.telegram.messenger.FileLoader r10 = r9.getFileLoader()
            java.lang.String r12 = r9.uploadingWallpaper
            r13 = 16777216(0x1000000, float:2.3509887E-38)
            r10.uploadFile(r12, r1, r3, r13)
            goto L_0x0152
        L_0x0051:
            boolean r10 = r11.isDefault()
            if (r10 != 0) goto L_0x0152
            boolean r10 = r11.isColor()
            if (r10 != 0) goto L_0x0152
            long r6 = r11.wallpaperId
            int r10 = (r6 > r4 ? 1 : (r6 == r4 ? 0 : -1))
            if (r10 <= 0) goto L_0x0152
            boolean r10 = r11.isTheme()
            if (r10 != 0) goto L_0x0152
            long r6 = r11.wallpaperId
            int r10 = (r6 > r4 ? 1 : (r6 == r4 ? 0 : -1))
            if (r10 <= 0) goto L_0x007d
            org.telegram.tgnet.TLRPC$TL_inputWallPaper r10 = new org.telegram.tgnet.TLRPC$TL_inputWallPaper
            r10.<init>()
            long r6 = r11.wallpaperId
            r10.id = r6
            long r6 = r11.accessHash
            r10.access_hash = r6
            goto L_0x0086
        L_0x007d:
            org.telegram.tgnet.TLRPC$TL_inputWallPaperSlug r10 = new org.telegram.tgnet.TLRPC$TL_inputWallPaperSlug
            r10.<init>()
            java.lang.String r1 = r11.slug
            r10.slug = r1
        L_0x0086:
            org.telegram.tgnet.TLRPC$TL_wallPaperSettings r1 = new org.telegram.tgnet.TLRPC$TL_wallPaperSettings
            r1.<init>()
            boolean r6 = r11.isBlurred
            r1.blur = r6
            boolean r6 = r11.isMotion
            r1.motion = r6
            int r6 = r11.color
            r7 = 16777215(0xffffff, float:2.3509886E-38)
            if (r6 == 0) goto L_0x00ad
            r6 = r6 & r7
            r1.background_color = r6
            int r6 = r1.flags
            r6 = r6 | r3
            r1.flags = r6
            float r8 = r11.intensity
            float r8 = r8 * r0
            int r8 = (int) r8
            r1.intensity = r8
            r6 = r6 | 8
            r1.flags = r6
        L_0x00ad:
            int r6 = r11.gradientColor1
            if (r6 == 0) goto L_0x00c2
            r6 = r6 & r7
            r1.second_background_color = r6
            int r6 = r11.rotation
            int r6 = org.telegram.messenger.AndroidUtilities.getWallpaperRotation(r6, r3)
            r1.rotation = r6
            int r6 = r1.flags
            r6 = r6 | 16
            r1.flags = r6
        L_0x00c2:
            int r6 = r11.gradientColor2
            if (r6 == 0) goto L_0x00cf
            r6 = r6 & r7
            r1.third_background_color = r6
            int r6 = r1.flags
            r6 = r6 | 32
            r1.flags = r6
        L_0x00cf:
            int r6 = r11.gradientColor3
            if (r6 == 0) goto L_0x00dc
            r6 = r6 & r7
            r1.fourth_background_color = r6
            int r6 = r1.flags
            r6 = r6 | 64
            r1.flags = r6
        L_0x00dc:
            if (r12 == 0) goto L_0x00e8
            org.telegram.tgnet.TLRPC$TL_account_installWallPaper r6 = new org.telegram.tgnet.TLRPC$TL_account_installWallPaper
            r6.<init>()
            r6.wallpaper = r10
            r6.settings = r1
            goto L_0x00f1
        L_0x00e8:
            org.telegram.tgnet.TLRPC$TL_account_saveWallPaper r6 = new org.telegram.tgnet.TLRPC$TL_account_saveWallPaper
            r6.<init>()
            r6.wallpaper = r10
            r6.settings = r1
        L_0x00f1:
            int r10 = (r13 > r4 ? 1 : (r13 == r4 ? 0 : -1))
            if (r10 == 0) goto L_0x00f6
            goto L_0x0146
        L_0x00f6:
            org.telegram.tgnet.NativeByteBuffer r10 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x0139 }
            r13 = 1024(0x400, float:1.435E-42)
            r10.<init>((int) r13)     // Catch:{ Exception -> 0x0139 }
            r13 = 21
            r10.writeInt32(r13)     // Catch:{ Exception -> 0x0136 }
            boolean r13 = r11.isBlurred     // Catch:{ Exception -> 0x0136 }
            r10.writeBool(r13)     // Catch:{ Exception -> 0x0136 }
            boolean r13 = r11.isMotion     // Catch:{ Exception -> 0x0136 }
            r10.writeBool(r13)     // Catch:{ Exception -> 0x0136 }
            int r13 = r11.color     // Catch:{ Exception -> 0x0136 }
            r10.writeInt32(r13)     // Catch:{ Exception -> 0x0136 }
            int r13 = r11.gradientColor1     // Catch:{ Exception -> 0x0136 }
            r10.writeInt32(r13)     // Catch:{ Exception -> 0x0136 }
            int r13 = r11.rotation     // Catch:{ Exception -> 0x0136 }
            r10.writeInt32(r13)     // Catch:{ Exception -> 0x0136 }
            float r13 = r11.intensity     // Catch:{ Exception -> 0x0136 }
            double r13 = (double) r13     // Catch:{ Exception -> 0x0136 }
            r10.writeDouble(r13)     // Catch:{ Exception -> 0x0136 }
            r10.writeBool(r12)     // Catch:{ Exception -> 0x0136 }
            java.lang.String r12 = r11.slug     // Catch:{ Exception -> 0x0136 }
            r10.writeString(r12)     // Catch:{ Exception -> 0x0136 }
            java.lang.String r12 = r11.originalFileName     // Catch:{ Exception -> 0x0136 }
            r10.writeString(r12)     // Catch:{ Exception -> 0x0136 }
            int r12 = r10.position()     // Catch:{ Exception -> 0x0136 }
            r10.limit(r12)     // Catch:{ Exception -> 0x0136 }
            goto L_0x013e
        L_0x0136:
            r12 = move-exception
            r2 = r10
            goto L_0x013a
        L_0x0139:
            r12 = move-exception
        L_0x013a:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r12)
            r10 = r2
        L_0x013e:
            org.telegram.messenger.MessagesStorage r12 = r9.getMessagesStorage()
            long r13 = r12.createPendingTask(r10)
        L_0x0146:
            org.telegram.tgnet.ConnectionsManager r10 = r9.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda249 r12 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda249
            r12.<init>(r9, r13)
            r10.sendRequest(r6, r12)
        L_0x0152:
            boolean r10 = r11.isColor()
            if (r10 != 0) goto L_0x015c
            int r10 = r11.gradientColor2
            if (r10 == 0) goto L_0x0218
        L_0x015c:
            long r12 = r11.wallpaperId
            int r10 = (r12 > r4 ? 1 : (r12 == r4 ? 0 : -1))
            if (r10 > 0) goto L_0x0218
            boolean r10 = r11.isColor()
            if (r10 == 0) goto L_0x016e
            org.telegram.tgnet.TLRPC$TL_wallPaperNoFile r10 = new org.telegram.tgnet.TLRPC$TL_wallPaperNoFile
            r10.<init>()
            goto L_0x017e
        L_0x016e:
            org.telegram.tgnet.TLRPC$TL_wallPaper r10 = new org.telegram.tgnet.TLRPC$TL_wallPaper
            r10.<init>()
            java.lang.String r12 = r11.slug
            r10.slug = r12
            org.telegram.tgnet.TLRPC$TL_documentEmpty r12 = new org.telegram.tgnet.TLRPC$TL_documentEmpty
            r12.<init>()
            r10.document = r12
        L_0x017e:
            long r12 = r11.wallpaperId
            int r14 = (r12 > r4 ? 1 : (r12 == r4 ? 0 : -1))
            if (r14 != 0) goto L_0x0194
            java.security.SecureRandom r12 = org.telegram.messenger.Utilities.random
            long r12 = r12.nextLong()
            r10.id = r12
            int r14 = (r12 > r4 ? 1 : (r12 == r4 ? 0 : -1))
            if (r14 <= 0) goto L_0x0196
            long r12 = -r12
            r10.id = r12
            goto L_0x0196
        L_0x0194:
            r10.id = r12
        L_0x0196:
            int r12 = r11.color
            int r13 = r11.gradientColor1
            int r14 = r11.gradientColor2
            int r1 = r11.gradientColor3
            boolean r12 = org.telegram.ui.Components.MotionBackgroundDrawable.isDark(r12, r13, r14, r1)
            r10.dark = r12
            int r12 = r10.flags
            r12 = r12 | 4
            r10.flags = r12
            org.telegram.tgnet.TLRPC$TL_wallPaperSettings r12 = new org.telegram.tgnet.TLRPC$TL_wallPaperSettings
            r12.<init>()
            r10.settings = r12
            boolean r13 = r11.isBlurred
            r12.blur = r13
            boolean r13 = r11.isMotion
            r12.motion = r13
            int r13 = r11.color
            if (r13 == 0) goto L_0x01cf
            r12.background_color = r13
            int r13 = r12.flags
            r13 = r13 | r3
            r12.flags = r13
            float r14 = r11.intensity
            float r14 = r14 * r0
            int r14 = (int) r14
            r12.intensity = r14
            r13 = r13 | 8
            r12.flags = r13
        L_0x01cf:
            int r13 = r11.gradientColor1
            if (r13 == 0) goto L_0x01e5
            r12.second_background_color = r13
            int r13 = r11.rotation
            int r13 = org.telegram.messenger.AndroidUtilities.getWallpaperRotation(r13, r3)
            r12.rotation = r13
            org.telegram.tgnet.TLRPC$WallPaperSettings r12 = r10.settings
            int r13 = r12.flags
            r13 = r13 | 16
            r12.flags = r13
        L_0x01e5:
            int r12 = r11.gradientColor2
            if (r12 == 0) goto L_0x01f3
            org.telegram.tgnet.TLRPC$WallPaperSettings r13 = r10.settings
            r13.third_background_color = r12
            int r12 = r13.flags
            r12 = r12 | 32
            r13.flags = r12
        L_0x01f3:
            int r11 = r11.gradientColor3
            if (r11 == 0) goto L_0x0201
            org.telegram.tgnet.TLRPC$WallPaperSettings r12 = r10.settings
            r12.fourth_background_color = r11
            int r11 = r12.flags
            r11 = r11 | 64
            r12.flags = r11
        L_0x0201:
            java.util.ArrayList r11 = new java.util.ArrayList
            r11.<init>()
            r11.add(r10)
            org.telegram.messenger.MessagesStorage r10 = r9.getMessagesStorage()
            r12 = -3
            r10.putWallpapers(r11, r12)
            org.telegram.messenger.MessagesStorage r10 = r9.getMessagesStorage()
            r10.getWallpapers()
        L_0x0218:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.saveWallpaperToServer(java.io.File, org.telegram.ui.ActionBar.Theme$OverrideWallpaperInfo, boolean, long):void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$saveWallpaperToServer$90(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        getMessagesStorage().removePendingTask(j);
    }

    public void markDialogMessageAsDeleted(long j, ArrayList<Integer> arrayList) {
        MessageObject messageObject = this.dialogMessage.get(j);
        if (messageObject != null) {
            for (int i = 0; i < arrayList.size(); i++) {
                if (messageObject.getId() == arrayList.get(i).intValue()) {
                    messageObject.deleted = true;
                    return;
                }
            }
        }
    }

    public void deleteMessages(ArrayList<Integer> arrayList, ArrayList<Long> arrayList2, TLRPC$EncryptedChat tLRPC$EncryptedChat, long j, boolean z, boolean z2) {
        deleteMessages(arrayList, arrayList2, tLRPC$EncryptedChat, j, z, z2, false, 0, (TLObject) null);
    }

    public void deleteMessages(ArrayList<Integer> arrayList, ArrayList<Long> arrayList2, TLRPC$EncryptedChat tLRPC$EncryptedChat, long j, boolean z, boolean z2, boolean z3) {
        deleteMessages(arrayList, arrayList2, tLRPC$EncryptedChat, j, z, z2, z3, 0, (TLObject) null);
    }

    public void deleteMessages(ArrayList<Integer> arrayList, ArrayList<Long> arrayList2, TLRPC$EncryptedChat tLRPC$EncryptedChat, long j, boolean z, boolean z2, boolean z3, long j2, TLObject tLObject) {
        ArrayList<Integer> arrayList3;
        long j3;
        NativeByteBuffer nativeByteBuffer;
        long j4;
        TLRPC$TL_messages_deleteMessages tLRPC$TL_messages_deleteMessages;
        NativeByteBuffer nativeByteBuffer2;
        long j5;
        TLRPC$TL_channels_deleteMessages tLRPC$TL_channels_deleteMessages;
        NativeByteBuffer nativeByteBuffer3;
        long j6;
        TLRPC$TL_messages_deleteScheduledMessages tLRPC$TL_messages_deleteScheduledMessages;
        NativeByteBuffer nativeByteBuffer4;
        long j7;
        ArrayList<Integer> arrayList4;
        char c;
        ArrayList<Integer> arrayList5 = arrayList;
        ArrayList<Long> arrayList6 = arrayList2;
        TLRPC$EncryptedChat tLRPC$EncryptedChat2 = tLRPC$EncryptedChat;
        long j8 = j;
        TLObject tLObject2 = tLObject;
        if ((arrayList5 != null && !arrayList.isEmpty()) || j2 != 0) {
            if (j2 == 0) {
                if (j8 == 0 || !DialogObject.isChatDialog(j)) {
                    j7 = 0;
                } else {
                    TLRPC$Chat chat = getChat(Long.valueOf(-j8));
                    j7 = ChatObject.isChannel(chat) ? chat.id : 0;
                }
                if (!z3) {
                    ArrayList<Integer> arrayList7 = new ArrayList<>();
                    int size = arrayList.size();
                    for (int i = 0; i < size; i++) {
                        Integer num = arrayList5.get(i);
                        if (num.intValue() > 0) {
                            arrayList7.add(num);
                        }
                    }
                    arrayList4 = arrayList7;
                } else {
                    arrayList4 = null;
                }
                if (z2) {
                    getMessagesStorage().markMessagesAsDeleted(j, arrayList, true, false, true);
                    c = 1;
                } else {
                    if (j7 == 0) {
                        for (int i2 = 0; i2 < arrayList.size(); i2++) {
                            MessageObject messageObject = this.dialogMessagesByIds.get(arrayList5.get(i2).intValue());
                            if (messageObject != null) {
                                messageObject.deleted = true;
                            }
                        }
                    } else {
                        markDialogMessageAsDeleted(j8, arrayList5);
                    }
                    long j9 = j;
                    getMessagesStorage().markMessagesAsDeleted(j9, arrayList, true, z, false);
                    c = 1;
                    getMessagesStorage().updateDialogsWithDeletedMessages(j9, j7, arrayList, (ArrayList<Long>) null, true);
                }
                NotificationCenter notificationCenter = getNotificationCenter();
                int i3 = NotificationCenter.messagesDeleted;
                Object[] objArr = new Object[3];
                objArr[0] = arrayList5;
                objArr[c] = Long.valueOf(j7);
                objArr[2] = Boolean.valueOf(z2);
                notificationCenter.postNotificationName(i3, objArr);
                j3 = j7;
                arrayList3 = arrayList4;
            } else {
                j3 = tLObject2 instanceof TLRPC$TL_channels_deleteMessages ? ((TLRPC$TL_channels_deleteMessages) tLObject2).channel.channel_id : 0;
                arrayList3 = null;
            }
            if (!z3) {
                if (z2) {
                    if (tLObject2 instanceof TLRPC$TL_messages_deleteScheduledMessages) {
                        tLRPC$TL_messages_deleteScheduledMessages = (TLRPC$TL_messages_deleteScheduledMessages) tLObject2;
                        j6 = j2;
                    } else {
                        TLRPC$TL_messages_deleteScheduledMessages tLRPC$TL_messages_deleteScheduledMessages2 = new TLRPC$TL_messages_deleteScheduledMessages();
                        tLRPC$TL_messages_deleteScheduledMessages2.id = arrayList3;
                        tLRPC$TL_messages_deleteScheduledMessages2.peer = getInputPeer(j8);
                        try {
                            nativeByteBuffer4 = new NativeByteBuffer(tLRPC$TL_messages_deleteScheduledMessages2.getObjectSize() + 12);
                            try {
                                nativeByteBuffer4.writeInt32(24);
                                nativeByteBuffer4.writeInt64(j8);
                                tLRPC$TL_messages_deleteScheduledMessages2.serializeToStream(nativeByteBuffer4);
                            } catch (Exception e) {
                                e = e;
                            }
                        } catch (Exception e2) {
                            e = e2;
                            nativeByteBuffer4 = null;
                            FileLog.e((Throwable) e);
                            j6 = getMessagesStorage().createPendingTask(nativeByteBuffer4);
                            tLRPC$TL_messages_deleteScheduledMessages = tLRPC$TL_messages_deleteScheduledMessages2;
                            getConnectionsManager().sendRequest(tLRPC$TL_messages_deleteScheduledMessages, new MessagesController$$ExternalSyntheticLambda247(this, j6));
                        }
                        j6 = getMessagesStorage().createPendingTask(nativeByteBuffer4);
                        tLRPC$TL_messages_deleteScheduledMessages = tLRPC$TL_messages_deleteScheduledMessages2;
                    }
                    getConnectionsManager().sendRequest(tLRPC$TL_messages_deleteScheduledMessages, new MessagesController$$ExternalSyntheticLambda247(this, j6));
                } else if (j3 != 0) {
                    if (tLObject2 != null) {
                        tLRPC$TL_channels_deleteMessages = (TLRPC$TL_channels_deleteMessages) tLObject2;
                        j5 = j2;
                    } else {
                        TLRPC$TL_channels_deleteMessages tLRPC$TL_channels_deleteMessages2 = new TLRPC$TL_channels_deleteMessages();
                        tLRPC$TL_channels_deleteMessages2.id = arrayList3;
                        tLRPC$TL_channels_deleteMessages2.channel = getInputChannel(j3);
                        try {
                            nativeByteBuffer3 = new NativeByteBuffer(tLRPC$TL_channels_deleteMessages2.getObjectSize() + 12);
                            try {
                                nativeByteBuffer3.writeInt32(24);
                                nativeByteBuffer3.writeInt64(j8);
                                tLRPC$TL_channels_deleteMessages2.serializeToStream(nativeByteBuffer3);
                            } catch (Exception e3) {
                                e = e3;
                            }
                        } catch (Exception e4) {
                            e = e4;
                            nativeByteBuffer3 = null;
                            FileLog.e((Throwable) e);
                            j5 = getMessagesStorage().createPendingTask(nativeByteBuffer3);
                            tLRPC$TL_channels_deleteMessages = tLRPC$TL_channels_deleteMessages2;
                            getConnectionsManager().sendRequest(tLRPC$TL_channels_deleteMessages, new MessagesController$$ExternalSyntheticLambda263(this, j3, j5));
                        }
                        j5 = getMessagesStorage().createPendingTask(nativeByteBuffer3);
                        tLRPC$TL_channels_deleteMessages = tLRPC$TL_channels_deleteMessages2;
                    }
                    getConnectionsManager().sendRequest(tLRPC$TL_channels_deleteMessages, new MessagesController$$ExternalSyntheticLambda263(this, j3, j5));
                } else {
                    if (arrayList6 == null || tLRPC$EncryptedChat2 == null || arrayList2.isEmpty()) {
                        nativeByteBuffer = null;
                    } else {
                        nativeByteBuffer = null;
                        getSecretChatHelper().sendMessagesDeleteMessage(tLRPC$EncryptedChat2, arrayList6, (TLRPC$Message) null);
                    }
                    if (tLObject2 instanceof TLRPC$TL_messages_deleteMessages) {
                        tLRPC$TL_messages_deleteMessages = (TLRPC$TL_messages_deleteMessages) tLObject2;
                        j4 = j2;
                    } else {
                        TLRPC$TL_messages_deleteMessages tLRPC$TL_messages_deleteMessages2 = new TLRPC$TL_messages_deleteMessages();
                        tLRPC$TL_messages_deleteMessages2.id = arrayList3;
                        tLRPC$TL_messages_deleteMessages2.revoke = z;
                        try {
                            nativeByteBuffer2 = new NativeByteBuffer(tLRPC$TL_messages_deleteMessages2.getObjectSize() + 12);
                            try {
                                nativeByteBuffer2.writeInt32(24);
                                nativeByteBuffer2.writeInt64(j8);
                                tLRPC$TL_messages_deleteMessages2.serializeToStream(nativeByteBuffer2);
                            } catch (Exception e5) {
                                e = e5;
                            }
                        } catch (Exception e6) {
                            e = e6;
                            nativeByteBuffer2 = nativeByteBuffer;
                            FileLog.e((Throwable) e);
                            j4 = getMessagesStorage().createPendingTask(nativeByteBuffer2);
                            tLRPC$TL_messages_deleteMessages = tLRPC$TL_messages_deleteMessages2;
                            getConnectionsManager().sendRequest(tLRPC$TL_messages_deleteMessages, new MessagesController$$ExternalSyntheticLambda248(this, j4));
                        }
                        j4 = getMessagesStorage().createPendingTask(nativeByteBuffer2);
                        tLRPC$TL_messages_deleteMessages = tLRPC$TL_messages_deleteMessages2;
                    }
                    getConnectionsManager().sendRequest(tLRPC$TL_messages_deleteMessages, new MessagesController$$ExternalSyntheticLambda248(this, j4));
                }
            }
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteMessages$91(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteMessages$92(long j, long j2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedMessages tLRPC$TL_messages_affectedMessages = (TLRPC$TL_messages_affectedMessages) tLObject;
            processNewChannelDifferenceParams(tLRPC$TL_messages_affectedMessages.pts, tLRPC$TL_messages_affectedMessages.pts_count, j);
        }
        if (j2 != 0) {
            getMessagesStorage().removePendingTask(j2);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteMessages$93(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedMessages tLRPC$TL_messages_affectedMessages = (TLRPC$TL_messages_affectedMessages) tLObject;
            processNewDifferenceParams(-1, tLRPC$TL_messages_affectedMessages.pts, -1, tLRPC$TL_messages_affectedMessages.pts_count);
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public void unpinAllMessages(TLRPC$Chat tLRPC$Chat, TLRPC$User tLRPC$User) {
        if (tLRPC$Chat != null || tLRPC$User != null) {
            TLRPC$TL_messages_unpinAllMessages tLRPC$TL_messages_unpinAllMessages = new TLRPC$TL_messages_unpinAllMessages();
            tLRPC$TL_messages_unpinAllMessages.peer = getInputPeer(tLRPC$Chat != null ? -tLRPC$Chat.id : tLRPC$User.id);
            getConnectionsManager().sendRequest(tLRPC$TL_messages_unpinAllMessages, new MessagesController$$ExternalSyntheticLambda285(this, tLRPC$Chat, tLRPC$User));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$unpinAllMessages$94(TLRPC$Chat tLRPC$Chat, TLRPC$User tLRPC$User, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$TL_messages_affectedHistory tLRPC$TL_messages_affectedHistory = (TLRPC$TL_messages_affectedHistory) tLObject;
            if (ChatObject.isChannel(tLRPC$Chat)) {
                processNewChannelDifferenceParams(tLRPC$TL_messages_affectedHistory.pts, tLRPC$TL_messages_affectedHistory.pts_count, tLRPC$Chat.id);
            } else {
                processNewDifferenceParams(-1, tLRPC$TL_messages_affectedHistory.pts, -1, tLRPC$TL_messages_affectedHistory.pts_count);
            }
            new ArrayList();
            getMessagesStorage().updatePinnedMessages(tLRPC$Chat != null ? -tLRPC$Chat.id : tLRPC$User.id, (ArrayList<Integer>) null, false, 0, 0, false, (HashMap<Integer, MessageObject>) null);
        }
    }

    public void pinMessage(TLRPC$Chat tLRPC$Chat, TLRPC$User tLRPC$User, int i, boolean z, boolean z2, boolean z3) {
        if (tLRPC$Chat != null || tLRPC$User != null) {
            TLRPC$TL_messages_updatePinnedMessage tLRPC$TL_messages_updatePinnedMessage = new TLRPC$TL_messages_updatePinnedMessage();
            tLRPC$TL_messages_updatePinnedMessage.peer = getInputPeer(tLRPC$Chat != null ? -tLRPC$Chat.id : tLRPC$User.id);
            tLRPC$TL_messages_updatePinnedMessage.id = i;
            tLRPC$TL_messages_updatePinnedMessage.unpin = z;
            tLRPC$TL_messages_updatePinnedMessage.silent = !z3;
            tLRPC$TL_messages_updatePinnedMessage.pm_oneside = z2;
            getConnectionsManager().sendRequest(tLRPC$TL_messages_updatePinnedMessage, new MessagesController$$ExternalSyntheticLambda242(this, i, tLRPC$Chat, tLRPC$User, z));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$pinMessage$95(int i, TLRPC$Chat tLRPC$Chat, TLRPC$User tLRPC$User, boolean z, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            ArrayList arrayList = new ArrayList();
            arrayList.add(Integer.valueOf(i));
            getMessagesStorage().updatePinnedMessages(tLRPC$Chat != null ? -tLRPC$Chat.id : tLRPC$User.id, arrayList, !z, -1, 0, false, (HashMap<Integer, MessageObject>) null);
            processUpdates((TLRPC$Updates) tLObject, false);
        }
    }

    public void deleteUserChannelHistory(TLRPC$Chat tLRPC$Chat, TLRPC$User tLRPC$User, int i) {
        if (i == 0) {
            getMessagesStorage().deleteUserChatHistory(-tLRPC$Chat.id, tLRPC$User.id);
        }
        TLRPC$TL_channels_deleteUserHistory tLRPC$TL_channels_deleteUserHistory = new TLRPC$TL_channels_deleteUserHistory();
        tLRPC$TL_channels_deleteUserHistory.channel = getInputChannel(tLRPC$Chat);
        tLRPC$TL_channels_deleteUserHistory.user_id = getInputUser(tLRPC$User);
        getConnectionsManager().sendRequest(tLRPC$TL_channels_deleteUserHistory, new MessagesController$$ExternalSyntheticLambda286(this, tLRPC$Chat, tLRPC$User));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteUserChannelHistory$96(TLRPC$Chat tLRPC$Chat, TLRPC$User tLRPC$User, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedHistory tLRPC$TL_messages_affectedHistory = (TLRPC$TL_messages_affectedHistory) tLObject;
            int i = tLRPC$TL_messages_affectedHistory.offset;
            if (i > 0) {
                deleteUserChannelHistory(tLRPC$Chat, tLRPC$User, i);
            }
            processNewChannelDifferenceParams(tLRPC$TL_messages_affectedHistory.pts, tLRPC$TL_messages_affectedHistory.pts_count, tLRPC$Chat.id);
        }
    }

    public ArrayList<TLRPC$Dialog> getAllDialogs() {
        return this.allDialogs;
    }

    public boolean isDialogsEndReached(int i) {
        return this.dialogsEndReached.get(i);
    }

    public boolean isLoadingDialogs(int i) {
        return this.loadingDialogs.get(i);
    }

    public boolean isServerDialogsEndReached(int i) {
        return this.serverDialogsEndReached.get(i);
    }

    public boolean hasHiddenArchive() {
        return SharedConfig.archiveHidden && this.dialogs_dict.get(DialogObject.makeFolderDialogId(1)) != null;
    }

    public ArrayList<TLRPC$Dialog> getDialogs(int i) {
        ArrayList<TLRPC$Dialog> arrayList = this.dialogsByFolder.get(i);
        return arrayList == null ? new ArrayList<>() : arrayList;
    }

    public int getTotalDialogsCount() {
        ArrayList arrayList = this.dialogsByFolder.get(0);
        if (arrayList != null) {
            return 0 + arrayList.size();
        }
        return 0;
    }

    public void putAllNeededDraftDialogs() {
        LongSparseArray<SparseArray<TLRPC$DraftMessage>> drafts = getMediaDataController().getDrafts();
        int size = drafts.size();
        for (int i = 0; i < size; i++) {
            TLRPC$DraftMessage tLRPC$DraftMessage = (TLRPC$DraftMessage) drafts.valueAt(i).get(0);
            if (tLRPC$DraftMessage != null) {
                putDraftDialogIfNeed(drafts.keyAt(i), tLRPC$DraftMessage);
            }
        }
    }

    public void putDraftDialogIfNeed(long j, TLRPC$DraftMessage tLRPC$DraftMessage) {
        if (this.dialogs_dict.indexOfKey(j) < 0) {
            MediaDataController mediaDataController = getMediaDataController();
            int size = this.allDialogs.size();
            int i = 0;
            if (size > 0) {
                TLRPC$Dialog tLRPC$Dialog = this.allDialogs.get(size - 1);
                if (((long) tLRPC$DraftMessage.date) < DialogObject.getLastMessageOrDraftDate(tLRPC$Dialog, mediaDataController.getDraft(tLRPC$Dialog.id, 0))) {
                    return;
                }
            }
            TLRPC$TL_dialog tLRPC$TL_dialog = new TLRPC$TL_dialog();
            tLRPC$TL_dialog.id = j;
            tLRPC$TL_dialog.draft = tLRPC$DraftMessage;
            tLRPC$TL_dialog.folder_id = mediaDataController.getDraftFolderId(j);
            if (j < 0 && ChatObject.isChannel(getChat(Long.valueOf(-j)))) {
                i = 1;
            }
            tLRPC$TL_dialog.flags = i;
            this.dialogs_dict.put(j, tLRPC$TL_dialog);
            this.allDialogs.add(tLRPC$TL_dialog);
            sortDialogs((LongSparseArray<TLRPC$Chat>) null);
        }
    }

    public void removeDraftDialogIfNeed(long j) {
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
        if (tLRPC$Dialog != null && tLRPC$Dialog.top_message == 0) {
            this.dialogs_dict.remove(tLRPC$Dialog.id);
            this.allDialogs.remove(tLRPC$Dialog);
        }
    }

    private void removeDialog(TLRPC$Dialog tLRPC$Dialog) {
        if (tLRPC$Dialog != null) {
            long j = tLRPC$Dialog.id;
            if (this.dialogsServerOnly.remove(tLRPC$Dialog) && DialogObject.isChannel(tLRPC$Dialog)) {
                Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda53(this, j));
            }
            this.allDialogs.remove(tLRPC$Dialog);
            this.dialogsCanAddUsers.remove(tLRPC$Dialog);
            this.dialogsChannelsOnly.remove(tLRPC$Dialog);
            this.dialogsGroupsOnly.remove(tLRPC$Dialog);
            this.dialogsUsersOnly.remove(tLRPC$Dialog);
            this.dialogsForBlock.remove(tLRPC$Dialog);
            this.dialogsForward.remove(tLRPC$Dialog);
            int i = 0;
            while (true) {
                DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                if (i >= dialogFilterArr.length) {
                    break;
                }
                if (dialogFilterArr[i] != null) {
                    dialogFilterArr[i].dialogs.remove(tLRPC$Dialog);
                }
                i++;
            }
            this.dialogs_dict.remove(j);
            ArrayList arrayList = this.dialogsByFolder.get(tLRPC$Dialog.folder_id);
            if (arrayList != null) {
                arrayList.remove(tLRPC$Dialog);
            }
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$removeDialog$97(long j) {
        long j2 = -j;
        this.channelsPts.delete(j2);
        this.shortPollChannels.delete(j2);
        this.needShortPollChannels.delete(j2);
        this.shortPollOnlines.delete(j2);
        this.needShortPollOnlines.delete(j2);
    }

    public void hidePromoDialog() {
        if (this.promoDialog != null) {
            TLRPC$TL_help_hidePromoData tLRPC$TL_help_hidePromoData = new TLRPC$TL_help_hidePromoData();
            tLRPC$TL_help_hidePromoData.peer = getInputPeer(this.promoDialog.id);
            getConnectionsManager().sendRequest(tLRPC$TL_help_hidePromoData, MessagesController$$ExternalSyntheticLambda307.INSTANCE);
            Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda17(this));
            removePromoDialog();
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$hidePromoDialog$99() {
        this.promoDialogId = 0;
        this.proxyDialogAddress = null;
        this.nextPromoInfoCheckTime = getConnectionsManager().getCurrentTime() + 3600;
        getGlobalMainSettings().edit().putLong("proxy_dialog", this.promoDialogId).remove("proxyDialogAddress").putInt("nextPromoInfoCheckTime", this.nextPromoInfoCheckTime).commit();
    }

    public void deleteDialog(long j, int i) {
        deleteDialog(j, i, false);
    }

    public void deleteDialog(long j, int i, boolean z) {
        deleteDialog(j, 1, i, 0, z, (TLRPC$InputPeer) null, 0);
    }

    public void setDialogHistoryTTL(long j, int i) {
        TLRPC$UserFull tLRPC$UserFull;
        TLRPC$TL_messages_setHistoryTTL tLRPC$TL_messages_setHistoryTTL = new TLRPC$TL_messages_setHistoryTTL();
        tLRPC$TL_messages_setHistoryTTL.peer = getInputPeer(j);
        tLRPC$TL_messages_setHistoryTTL.period = i;
        getConnectionsManager().sendRequest(tLRPC$TL_messages_setHistoryTTL, new MessagesController$$ExternalSyntheticLambda217(this));
        TLRPC$ChatFull tLRPC$ChatFull = null;
        if (j > 0) {
            tLRPC$UserFull = getUserFull(j);
            if (tLRPC$UserFull != null) {
                tLRPC$UserFull.ttl_period = i;
                tLRPC$UserFull.flags |= 16384;
            } else {
                return;
            }
        } else {
            TLRPC$ChatFull chatFull = getChatFull(-j);
            if (chatFull != null) {
                chatFull.ttl_period = i;
                if (chatFull instanceof TLRPC$TL_channelFull) {
                    chatFull.flags |= 16777216;
                } else {
                    chatFull.flags |= 16384;
                }
                TLRPC$ChatFull tLRPC$ChatFull2 = chatFull;
                tLRPC$UserFull = null;
                tLRPC$ChatFull = tLRPC$ChatFull2;
            } else {
                return;
            }
        }
        if (tLRPC$ChatFull != null) {
            NotificationCenter notificationCenter = getNotificationCenter();
            int i2 = NotificationCenter.chatInfoDidLoad;
            Boolean bool = Boolean.FALSE;
            notificationCenter.postNotificationName(i2, tLRPC$ChatFull, 0, bool, bool);
            return;
        }
        getNotificationCenter().postNotificationName(NotificationCenter.userInfoDidLoad, Long.valueOf(j), tLRPC$UserFull);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$setDialogHistoryTTL$100(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
    }

    public void setDialogsInTransaction(boolean z) {
        this.dialogsInTransaction = z;
        if (!z) {
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
        }
    }

    /* access modifiers changed from: protected */
    /* JADX WARNING: Removed duplicated region for block: B:132:0x02f2  */
    /* JADX WARNING: Removed duplicated region for block: B:140:0x0329  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void deleteDialog(long r27, int r29, int r30, int r31, boolean r32, org.telegram.tgnet.TLRPC$InputPeer r33, long r34) {
        /*
            r26 = this;
            r11 = r26
            r12 = r27
            r0 = r29
            r7 = r30
            r9 = r32
            r1 = 2
            if (r7 != r1) goto L_0x0015
            org.telegram.messenger.MessagesStorage r0 = r26.getMessagesStorage()
            r0.deleteDialog(r12, r7)
            return
        L_0x0015:
            r2 = 1
            if (r0 != r2) goto L_0x0034
            if (r31 != 0) goto L_0x0034
            org.telegram.messenger.MessagesStorage r0 = r26.getMessagesStorage()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda204 r10 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda204
            r1 = r10
            r2 = r26
            r3 = r27
            r5 = r30
            r6 = r32
            r7 = r33
            r8 = r34
            r1.<init>(r2, r3, r5, r6, r7, r8)
            r0.getDialogMaxMessageId(r12, r10)
            return
        L_0x0034:
            r3 = 3
            if (r7 == 0) goto L_0x0039
            if (r7 != r3) goto L_0x0040
        L_0x0039:
            org.telegram.messenger.MediaDataController r4 = r26.getMediaDataController()
            r4.uninstallShortcut(r12)
        L_0x0040:
            r5 = 0
            r8 = 0
            if (r0 == 0) goto L_0x0268
            boolean r10 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r10 == 0) goto L_0x005d
            java.lang.StringBuilder r10 = new java.lang.StringBuilder
            r10.<init>()
            java.lang.String r14 = "delete dialog with id "
            r10.append(r14)
            r10.append(r12)
            java.lang.String r10 = r10.toString()
            org.telegram.messenger.FileLog.d(r10)
        L_0x005d:
            org.telegram.messenger.MessagesStorage r10 = r26.getMessagesStorage()
            r10.deleteDialog(r12, r7)
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r10 = r11.dialogs_dict
            java.lang.Object r10 = r10.get(r12)
            org.telegram.tgnet.TLRPC$Dialog r10 = (org.telegram.tgnet.TLRPC$Dialog) r10
            if (r7 == 0) goto L_0x0070
            if (r7 != r3) goto L_0x008d
        L_0x0070:
            org.telegram.messenger.NotificationCenter r14 = r26.getNotificationCenter()
            int r15 = org.telegram.messenger.NotificationCenter.dialogDeleted
            java.lang.Object[] r4 = new java.lang.Object[r2]
            java.lang.Long r17 = java.lang.Long.valueOf(r27)
            r4[r8] = r17
            r14.postNotificationName(r15, r4)
            org.telegram.messenger.NotificationsController r4 = r26.getNotificationsController()
            r4.deleteNotificationChannel(r12)
            int r4 = r11.currentAccount
            org.telegram.ui.Components.JoinCallAlert.processDeletedChat(r4, r12)
        L_0x008d:
            if (r7 != 0) goto L_0x0096
            org.telegram.messenger.MediaDataController r4 = r26.getMediaDataController()
            r4.cleanDraft(r12, r8, r8)
        L_0x0096:
            if (r10 == 0) goto L_0x01e5
            if (r0 != r1) goto L_0x00ad
            int r4 = r10.top_message
            int r4 = java.lang.Math.max(r8, r4)
            int r14 = r10.read_inbox_max_id
            int r4 = java.lang.Math.max(r4, r14)
            int r14 = r10.read_outbox_max_id
            int r4 = java.lang.Math.max(r4, r14)
            goto L_0x00af
        L_0x00ad:
            r4 = r31
        L_0x00af:
            if (r7 == 0) goto L_0x00ba
            if (r7 != r3) goto L_0x00b4
            goto L_0x00ba
        L_0x00b4:
            r10.unread_count = r8
            r31 = r4
            r3 = 0
            goto L_0x00fb
        L_0x00ba:
            org.telegram.tgnet.TLRPC$Dialog r14 = r11.promoDialog
            r31 = r4
            if (r14 == 0) goto L_0x00c8
            long r3 = r14.id
            int r17 = (r3 > r12 ? 1 : (r3 == r12 ? 0 : -1))
            if (r17 != 0) goto L_0x00c8
            r3 = 1
            goto L_0x00c9
        L_0x00c8:
            r3 = 0
        L_0x00c9:
            if (r3 == 0) goto L_0x00e5
            r11.isLeftPromoChannel = r2
            long r8 = r14.id
            int r14 = (r8 > r5 ? 1 : (r8 == r5 ? 0 : -1))
            if (r14 >= 0) goto L_0x00e0
            long r8 = -r8
            java.lang.Long r8 = java.lang.Long.valueOf(r8)
            org.telegram.tgnet.TLRPC$Chat r8 = r11.getChat(r8)
            if (r8 == 0) goto L_0x00e0
            r8.left = r2
        L_0x00e0:
            r8 = 0
            r11.sortDialogs(r8)
            goto L_0x00fb
        L_0x00e5:
            r11.removeDialog(r10)
            android.util.SparseIntArray r8 = r11.nextDialogsCacheOffset
            int r9 = r10.folder_id
            r4 = 0
            int r8 = r8.get(r9, r4)
            if (r8 <= 0) goto L_0x00fb
            android.util.SparseIntArray r9 = r11.nextDialogsCacheOffset
            int r14 = r10.folder_id
            int r8 = r8 - r2
            r9.put(r14, r8)
        L_0x00fb:
            if (r3 != 0) goto L_0x01e1
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r8 = r11.dialogMessage
            long r1 = r10.id
            java.lang.Object r1 = r8.get(r1)
            org.telegram.messenger.MessageObject r1 = (org.telegram.messenger.MessageObject) r1
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r2 = r11.dialogMessage
            long r14 = r10.id
            r2.remove(r14)
            if (r1 == 0) goto L_0x0128
            int r2 = r1.getId()
            org.telegram.tgnet.TLRPC$Message r14 = r1.messageOwner
            org.telegram.tgnet.TLRPC$Peer r14 = r14.peer_id
            long r14 = r14.channel_id
            int r18 = (r14 > r5 ? 1 : (r14 == r5 ? 0 : -1))
            if (r18 != 0) goto L_0x0145
            android.util.SparseArray<org.telegram.messenger.MessageObject> r14 = r11.dialogMessagesByIds
            int r15 = r1.getId()
            r14.remove(r15)
            goto L_0x0145
        L_0x0128:
            int r2 = r10.top_message
            android.util.SparseArray<org.telegram.messenger.MessageObject> r1 = r11.dialogMessagesByIds
            java.lang.Object r1 = r1.get(r2)
            org.telegram.messenger.MessageObject r1 = (org.telegram.messenger.MessageObject) r1
            if (r1 == 0) goto L_0x0145
            org.telegram.tgnet.TLRPC$Message r14 = r1.messageOwner
            org.telegram.tgnet.TLRPC$Peer r14 = r14.peer_id
            long r14 = r14.channel_id
            int r18 = (r14 > r5 ? 1 : (r14 == r5 ? 0 : -1))
            if (r18 != 0) goto L_0x0145
            android.util.SparseArray<org.telegram.messenger.MessageObject> r14 = r11.dialogMessagesByIds
            int r15 = r10.top_message
            r14.remove(r15)
        L_0x0145:
            if (r1 == 0) goto L_0x0154
            org.telegram.tgnet.TLRPC$Message r1 = r1.messageOwner
            long r14 = r1.random_id
            int r1 = (r14 > r5 ? 1 : (r14 == r5 ? 0 : -1))
            if (r1 == 0) goto L_0x0154
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r1 = r11.dialogMessagesByRandomIds
            r1.remove(r14)
        L_0x0154:
            r1 = 1
            if (r7 != r1) goto L_0x01de
            boolean r1 = org.telegram.messenger.DialogObject.isEncryptedDialog(r27)
            if (r1 != 0) goto L_0x01de
            if (r2 <= 0) goto L_0x01de
            org.telegram.tgnet.TLRPC$TL_messageService r1 = new org.telegram.tgnet.TLRPC$TL_messageService
            r1.<init>()
            int r2 = r10.top_message
            r1.id = r2
            org.telegram.messenger.UserConfig r2 = r26.getUserConfig()
            long r17 = r2.getClientUserId()
            int r2 = (r17 > r12 ? 1 : (r17 == r12 ? 0 : -1))
            if (r2 != 0) goto L_0x0176
            r2 = 1
            goto L_0x0177
        L_0x0176:
            r2 = 0
        L_0x0177:
            r1.out = r2
            org.telegram.tgnet.TLRPC$TL_peerUser r2 = new org.telegram.tgnet.TLRPC$TL_peerUser
            r2.<init>()
            r1.from_id = r2
            org.telegram.messenger.UserConfig r15 = r26.getUserConfig()
            long r8 = r15.getClientUserId()
            r2.user_id = r8
            int r2 = r1.flags
            r2 = r2 | 256(0x100, float:3.59E-43)
            r1.flags = r2
            org.telegram.tgnet.TLRPC$TL_messageActionHistoryClear r2 = new org.telegram.tgnet.TLRPC$TL_messageActionHistoryClear
            r2.<init>()
            r1.action = r2
            int r2 = r10.last_message_date
            r1.date = r2
            r1.dialog_id = r12
            org.telegram.tgnet.TLRPC$Peer r2 = r26.getPeer(r27)
            r1.peer_id = r2
            java.util.ArrayList<java.lang.Long> r2 = r11.createdDialogIds
            long r8 = r1.dialog_id
            java.lang.Long r8 = java.lang.Long.valueOf(r8)
            boolean r2 = r2.contains(r8)
            org.telegram.messenger.MessageObject r8 = new org.telegram.messenger.MessageObject
            int r9 = r11.currentAccount
            r8.<init>(r9, r1, r2, r2)
            java.util.ArrayList r2 = new java.util.ArrayList
            r2.<init>()
            r2.add(r8)
            java.util.ArrayList r8 = new java.util.ArrayList
            r8.<init>()
            r8.add(r1)
            r1 = 0
            r11.updateInterfaceWithMessages(r12, r2, r1)
            org.telegram.messenger.MessagesStorage r19 = r26.getMessagesStorage()
            r21 = 0
            r22 = 1
            r23 = 0
            r24 = 0
            r25 = 0
            r20 = r8
            r19.putMessages((java.util.ArrayList<org.telegram.tgnet.TLRPC$Message>) r20, (boolean) r21, (boolean) r22, (boolean) r23, (int) r24, (boolean) r25)
            goto L_0x01e1
        L_0x01de:
            r1 = 0
            r10.top_message = r1
        L_0x01e1:
            r1 = r31
            r2 = 2
            goto L_0x01e9
        L_0x01e5:
            r1 = r31
            r2 = 2
            r3 = 0
        L_0x01e9:
            if (r0 != r2) goto L_0x0217
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r2 = r11.dialogs_read_inbox_max
            java.lang.Long r8 = java.lang.Long.valueOf(r27)
            java.lang.Object r2 = r2.get(r8)
            java.lang.Integer r2 = (java.lang.Integer) r2
            if (r2 == 0) goto L_0x0201
            int r2 = r2.intValue()
            int r1 = java.lang.Math.max(r2, r1)
        L_0x0201:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r2 = r11.dialogs_read_outbox_max
            java.lang.Long r8 = java.lang.Long.valueOf(r27)
            java.lang.Object r2 = r2.get(r8)
            java.lang.Integer r2 = (java.lang.Integer) r2
            if (r2 == 0) goto L_0x0217
            int r2 = r2.intValue()
            int r1 = java.lang.Math.max(r2, r1)
        L_0x0217:
            boolean r2 = r11.dialogsInTransaction
            if (r2 != 0) goto L_0x0256
            if (r3 == 0) goto L_0x022f
            org.telegram.messenger.NotificationCenter r2 = r26.getNotificationCenter()
            int r3 = org.telegram.messenger.NotificationCenter.dialogsNeedReload
            r8 = 1
            java.lang.Object[] r9 = new java.lang.Object[r8]
            java.lang.Boolean r8 = java.lang.Boolean.TRUE
            r4 = 0
            r9[r4] = r8
            r2.postNotificationName(r3, r9)
            goto L_0x0256
        L_0x022f:
            r4 = 0
            org.telegram.messenger.NotificationCenter r2 = r26.getNotificationCenter()
            int r3 = org.telegram.messenger.NotificationCenter.dialogsNeedReload
            java.lang.Object[] r8 = new java.lang.Object[r4]
            r2.postNotificationName(r3, r8)
            org.telegram.messenger.NotificationCenter r2 = r26.getNotificationCenter()
            int r3 = org.telegram.messenger.NotificationCenter.removeAllMessagesFromDialog
            r8 = 3
            java.lang.Object[] r10 = new java.lang.Object[r8]
            java.lang.Long r8 = java.lang.Long.valueOf(r27)
            r10[r4] = r8
            java.lang.Boolean r8 = java.lang.Boolean.FALSE
            r14 = 1
            r10[r14] = r8
            r8 = 0
            r9 = 2
            r10[r9] = r8
            r2.postNotificationName(r3, r10)
        L_0x0256:
            org.telegram.messenger.MessagesStorage r2 = r26.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r2 = r2.getStorageQueue()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda56 r3 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda56
            r3.<init>(r11, r12)
            r2.postRunnable(r3)
            r8 = r1
            goto L_0x026a
        L_0x0268:
            r8 = r31
        L_0x026a:
            r1 = 3
            if (r7 != r1) goto L_0x026e
            return
        L_0x026e:
            boolean r1 = org.telegram.messenger.DialogObject.isEncryptedDialog(r27)
            if (r1 != 0) goto L_0x035a
            if (r33 != 0) goto L_0x027c
            org.telegram.tgnet.TLRPC$InputPeer r1 = r26.getInputPeer((long) r27)
            r10 = r1
            goto L_0x027e
        L_0x027c:
            r10 = r33
        L_0x027e:
            if (r10 != 0) goto L_0x0281
            return
        L_0x0281:
            boolean r1 = r10 instanceof org.telegram.tgnet.TLRPC$TL_inputPeerChannel
            r2 = 2147483647(0x7fffffff, float:NaN)
            if (r1 == 0) goto L_0x028f
            if (r7 == 0) goto L_0x028b
            goto L_0x028f
        L_0x028b:
            r9 = r32
            r4 = 0
            goto L_0x02ec
        L_0x028f:
            if (r8 <= 0) goto L_0x02a4
            if (r8 == r2) goto L_0x02a4
            org.telegram.messenger.support.LongSparseIntArray r3 = r11.deletedHistory
            r4 = 0
            int r3 = r3.get(r12, r4)
            org.telegram.messenger.support.LongSparseIntArray r9 = r11.deletedHistory
            int r3 = java.lang.Math.max(r3, r8)
            r9.put(r12, r3)
            goto L_0x02a5
        L_0x02a4:
            r4 = 0
        L_0x02a5:
            int r3 = (r34 > r5 ? 1 : (r34 == r5 ? 0 : -1))
            if (r3 != 0) goto L_0x02ea
            org.telegram.tgnet.NativeByteBuffer r3 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x02d9 }
            int r9 = r10.getObjectSize()     // Catch:{ Exception -> 0x02d9 }
            int r9 = r9 + 28
            r3.<init>((int) r9)     // Catch:{ Exception -> 0x02d9 }
            r9 = 13
            r3.writeInt32(r9)     // Catch:{ Exception -> 0x02d5 }
            r3.writeInt64(r12)     // Catch:{ Exception -> 0x02d5 }
            if (r0 == 0) goto L_0x02c0
            r0 = 1
            goto L_0x02c1
        L_0x02c0:
            r0 = 0
        L_0x02c1:
            r3.writeBool(r0)     // Catch:{ Exception -> 0x02d5 }
            r3.writeInt32(r7)     // Catch:{ Exception -> 0x02d5 }
            r3.writeInt32(r8)     // Catch:{ Exception -> 0x02d5 }
            r9 = r32
            r3.writeBool(r9)     // Catch:{ Exception -> 0x02d3 }
            r10.serializeToStream(r3)     // Catch:{ Exception -> 0x02d3 }
            goto L_0x02e0
        L_0x02d3:
            r0 = move-exception
            goto L_0x02dd
        L_0x02d5:
            r0 = move-exception
            r9 = r32
            goto L_0x02dd
        L_0x02d9:
            r0 = move-exception
            r9 = r32
            r3 = 0
        L_0x02dd:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
        L_0x02e0:
            org.telegram.messenger.MessagesStorage r0 = r26.getMessagesStorage()
            long r15 = r0.createPendingTask(r3)
            r14 = r15
            goto L_0x02ee
        L_0x02ea:
            r9 = r32
        L_0x02ec:
            r14 = r34
        L_0x02ee:
            r0 = 64
            if (r1 == 0) goto L_0x0329
            if (r7 != 0) goto L_0x0300
            int r0 = (r14 > r5 ? 1 : (r14 == r5 ? 0 : -1))
            if (r0 == 0) goto L_0x02ff
            org.telegram.messenger.MessagesStorage r0 = r26.getMessagesStorage()
            r0.removePendingTask(r14)
        L_0x02ff:
            return
        L_0x0300:
            org.telegram.tgnet.TLRPC$TL_channels_deleteHistory r1 = new org.telegram.tgnet.TLRPC$TL_channels_deleteHistory
            r1.<init>()
            org.telegram.tgnet.TLRPC$TL_inputChannel r3 = new org.telegram.tgnet.TLRPC$TL_inputChannel
            r3.<init>()
            r1.channel = r3
            long r4 = r10.channel_id
            r3.channel_id = r4
            long r4 = r10.access_hash
            r3.access_hash = r4
            if (r8 <= 0) goto L_0x0317
            goto L_0x031a
        L_0x0317:
            r8 = 2147483647(0x7fffffff, float:NaN)
        L_0x031a:
            r1.max_id = r8
            org.telegram.tgnet.ConnectionsManager r2 = r26.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda256 r3 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda256
            r3.<init>(r11, r14)
            r2.sendRequest(r1, r3, r0)
            goto L_0x037b
        L_0x0329:
            org.telegram.tgnet.TLRPC$TL_messages_deleteHistory r5 = new org.telegram.tgnet.TLRPC$TL_messages_deleteHistory
            r5.<init>()
            r5.peer = r10
            if (r8 <= 0) goto L_0x0333
            r2 = r8
        L_0x0333:
            r5.max_id = r2
            if (r7 == 0) goto L_0x0339
            r2 = 1
            goto L_0x033a
        L_0x0339:
            r2 = 0
        L_0x033a:
            r5.just_clear = r2
            r5.revoke = r9
            org.telegram.tgnet.ConnectionsManager r6 = r26.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda264 r3 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda264
            r1 = r3
            r2 = r26
            r0 = r3
            r3 = r14
            r14 = r5
            r15 = r6
            r5 = r27
            r7 = r30
            r9 = r32
            r1.<init>(r2, r3, r5, r7, r8, r9, r10)
            r1 = 64
            r15.sendRequest(r14, r0, r1)
            goto L_0x037b
        L_0x035a:
            r9 = r32
            int r0 = org.telegram.messenger.DialogObject.getEncryptedChatId(r27)
            r1 = 1
            if (r7 != r1) goto L_0x0374
            org.telegram.messenger.SecretChatHelper r1 = r26.getSecretChatHelper()
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)
            org.telegram.tgnet.TLRPC$EncryptedChat r0 = r11.getEncryptedChat(r0)
            r2 = 0
            r1.sendClearHistoryMessage(r0, r2)
            goto L_0x037b
        L_0x0374:
            org.telegram.messenger.SecretChatHelper r1 = r26.getSecretChatHelper()
            r1.declineSecretChat(r0, r9)
        L_0x037b:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.deleteDialog(long, int, int, int, boolean, org.telegram.tgnet.TLRPC$InputPeer, long):void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteDialog$101(long j, int i, boolean z, TLRPC$InputPeer tLRPC$InputPeer, long j2, int i2) {
        deleteDialog(j, 2, i, Math.max(0, i2), z, tLRPC$InputPeer, j2);
        checkIfFolderEmpty(1);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteDialog$102(long j) {
        getNotificationsController().removeNotificationsForDialog(j);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteDialog$103(long j) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda49(this, j));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteDialog$104(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteDialog$105(long j, long j2, int i, int i2, boolean z, TLRPC$InputPeer tLRPC$InputPeer, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedHistory tLRPC$TL_messages_affectedHistory = (TLRPC$TL_messages_affectedHistory) tLObject;
            if (tLRPC$TL_messages_affectedHistory.offset > 0) {
                deleteDialog(j2, 0, i, i2, z, tLRPC$InputPeer, 0);
            }
            processNewDifferenceParams(-1, tLRPC$TL_messages_affectedHistory.pts, -1, tLRPC$TL_messages_affectedHistory.pts_count);
            getMessagesStorage().onDeleteQueryComplete(j2);
            return;
        }
    }

    public void saveGif(Object obj, TLRPC$Document tLRPC$Document) {
        if (obj != null && MessageObject.isGifDocument(tLRPC$Document)) {
            TLRPC$TL_messages_saveGif tLRPC$TL_messages_saveGif = new TLRPC$TL_messages_saveGif();
            TLRPC$TL_inputDocument tLRPC$TL_inputDocument = new TLRPC$TL_inputDocument();
            tLRPC$TL_messages_saveGif.id = tLRPC$TL_inputDocument;
            tLRPC$TL_inputDocument.id = tLRPC$Document.id;
            tLRPC$TL_inputDocument.access_hash = tLRPC$Document.access_hash;
            byte[] bArr = tLRPC$Document.file_reference;
            tLRPC$TL_inputDocument.file_reference = bArr;
            if (bArr == null) {
                tLRPC$TL_inputDocument.file_reference = new byte[0];
            }
            tLRPC$TL_messages_saveGif.unsave = false;
            getConnectionsManager().sendRequest(tLRPC$TL_messages_saveGif, new MessagesController$$ExternalSyntheticLambda279(this, obj, tLRPC$TL_messages_saveGif));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$saveGif$106(Object obj, TLRPC$TL_messages_saveGif tLRPC$TL_messages_saveGif, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null && FileRefController.isFileRefError(tLRPC$TL_error.text)) {
            getFileRefController().requestReference(obj, tLRPC$TL_messages_saveGif);
        }
    }

    public void saveRecentSticker(Object obj, TLRPC$Document tLRPC$Document, boolean z) {
        if (obj != null && tLRPC$Document != null) {
            TLRPC$TL_messages_saveRecentSticker tLRPC$TL_messages_saveRecentSticker = new TLRPC$TL_messages_saveRecentSticker();
            TLRPC$TL_inputDocument tLRPC$TL_inputDocument = new TLRPC$TL_inputDocument();
            tLRPC$TL_messages_saveRecentSticker.id = tLRPC$TL_inputDocument;
            tLRPC$TL_inputDocument.id = tLRPC$Document.id;
            tLRPC$TL_inputDocument.access_hash = tLRPC$Document.access_hash;
            byte[] bArr = tLRPC$Document.file_reference;
            tLRPC$TL_inputDocument.file_reference = bArr;
            if (bArr == null) {
                tLRPC$TL_inputDocument.file_reference = new byte[0];
            }
            tLRPC$TL_messages_saveRecentSticker.unsave = false;
            tLRPC$TL_messages_saveRecentSticker.attached = z;
            getConnectionsManager().sendRequest(tLRPC$TL_messages_saveRecentSticker, new MessagesController$$ExternalSyntheticLambda280(this, obj, tLRPC$TL_messages_saveRecentSticker));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$saveRecentSticker$107(Object obj, TLRPC$TL_messages_saveRecentSticker tLRPC$TL_messages_saveRecentSticker, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null && FileRefController.isFileRefError(tLRPC$TL_error.text)) {
            getFileRefController().requestReference(obj, tLRPC$TL_messages_saveRecentSticker);
        }
    }

    public void loadChannelParticipants(Long l) {
        if (!this.loadingFullParticipants.contains(l) && !this.loadedFullParticipants.contains(l)) {
            this.loadingFullParticipants.add(l);
            TLRPC$TL_channels_getParticipants tLRPC$TL_channels_getParticipants = new TLRPC$TL_channels_getParticipants();
            tLRPC$TL_channels_getParticipants.channel = getInputChannel(l.longValue());
            tLRPC$TL_channels_getParticipants.filter = new TLRPC$TL_channelParticipantsRecent();
            tLRPC$TL_channels_getParticipants.offset = 0;
            tLRPC$TL_channels_getParticipants.limit = 32;
            getConnectionsManager().sendRequest(tLRPC$TL_channels_getParticipants, new MessagesController$$ExternalSyntheticLambda278(this, l));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadChannelParticipants$109(Long l, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda141(this, tLRPC$TL_error, tLObject, l));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadChannelParticipants$108(TLRPC$TL_error tLRPC$TL_error, TLObject tLObject, Long l) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_channels_channelParticipants tLRPC$TL_channels_channelParticipants = (TLRPC$TL_channels_channelParticipants) tLObject;
            putUsers(tLRPC$TL_channels_channelParticipants.users, false);
            putChats(tLRPC$TL_channels_channelParticipants.chats, false);
            getMessagesStorage().putUsersAndChats(tLRPC$TL_channels_channelParticipants.users, tLRPC$TL_channels_channelParticipants.chats, true, true);
            getMessagesStorage().updateChannelUsers(l.longValue(), tLRPC$TL_channels_channelParticipants.participants);
            this.loadedFullParticipants.add(l);
        }
        this.loadingFullParticipants.remove(l);
    }

    public void putChatFull(TLRPC$ChatFull tLRPC$ChatFull) {
        this.fullChats.put(tLRPC$ChatFull.id, tLRPC$ChatFull);
    }

    public void processChatInfo(long j, TLRPC$ChatFull tLRPC$ChatFull, ArrayList<TLRPC$User> arrayList, boolean z, boolean z2, boolean z3, ArrayList<Integer> arrayList2, HashMap<Integer, MessageObject> hashMap, int i, boolean z4) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda187(this, z, j, z3, z2, tLRPC$ChatFull, arrayList, arrayList2, hashMap, i, z4));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processChatInfo$110(boolean z, long j, boolean z2, boolean z3, TLRPC$ChatFull tLRPC$ChatFull, ArrayList arrayList, ArrayList arrayList2, HashMap hashMap, int i, boolean z4) {
        long j2 = j;
        TLRPC$ChatFull tLRPC$ChatFull2 = tLRPC$ChatFull;
        if (z && j2 > 0 && !z2) {
            loadFullChat(j, 0, z3);
        }
        if (tLRPC$ChatFull2 != null) {
            if (this.fullChats.get(j) == null) {
                this.fullChats.put(j, tLRPC$ChatFull2);
            }
            putUsers(arrayList, z);
            if (tLRPC$ChatFull2.stickerset != null) {
                getMediaDataController().getGroupStickerSetById(tLRPC$ChatFull2.stickerset);
            }
            getNotificationCenter().postNotificationName(NotificationCenter.chatInfoDidLoad, tLRPC$ChatFull2, 0, Boolean.valueOf(z2), Boolean.FALSE);
        }
        if (arrayList2 != null) {
            getNotificationCenter().postNotificationName(NotificationCenter.pinnedInfoDidLoad, Long.valueOf(-j2), arrayList2, hashMap, Integer.valueOf(i), Boolean.valueOf(z4));
        }
    }

    public void loadUserInfo(TLRPC$User tLRPC$User, boolean z, int i) {
        loadUserInfo(tLRPC$User, z, i, 0);
    }

    public void loadUserInfo(TLRPC$User tLRPC$User, boolean z, int i, int i2) {
        getMessagesStorage().loadUserInfo(tLRPC$User, z, i, i2);
    }

    public void processUserInfo(TLRPC$User tLRPC$User, TLRPC$UserFull tLRPC$UserFull, boolean z, boolean z2, int i, ArrayList<Integer> arrayList, HashMap<Integer, MessageObject> hashMap, int i2, boolean z3) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda189(this, z, tLRPC$User, i, z2, tLRPC$UserFull, arrayList, hashMap, i2, z3));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processUserInfo$111(boolean z, TLRPC$User tLRPC$User, int i, boolean z2, TLRPC$UserFull tLRPC$UserFull, ArrayList arrayList, HashMap hashMap, int i2, boolean z3) {
        if (z) {
            loadFullUser(tLRPC$User, i, z2);
        }
        if (tLRPC$UserFull != null) {
            if (this.fullUsers.get(tLRPC$User.id) == null) {
                this.fullUsers.put(tLRPC$User.id, tLRPC$UserFull);
                int indexOfKey = this.blockePeers.indexOfKey(tLRPC$User.id);
                if (tLRPC$UserFull.blocked) {
                    if (indexOfKey < 0) {
                        this.blockePeers.put(tLRPC$User.id, 1);
                        getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
                    }
                } else if (indexOfKey >= 0) {
                    this.blockePeers.removeAt(indexOfKey);
                    getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
                }
            }
            getNotificationCenter().postNotificationName(NotificationCenter.userInfoDidLoad, Long.valueOf(tLRPC$User.id), tLRPC$UserFull);
        }
        if (arrayList != null) {
            getNotificationCenter().postNotificationName(NotificationCenter.pinnedInfoDidLoad, Long.valueOf(tLRPC$User.id), arrayList, hashMap, Integer.valueOf(i2), Boolean.valueOf(z3));
        }
    }

    public void updateTimerProc() {
        int i;
        int i2;
        ArrayList arrayList;
        int i3;
        long currentTimeMillis = System.currentTimeMillis();
        int i4 = 0;
        checkDeletingTask(false);
        checkReadTasks();
        if (getUserConfig().isClientActivated()) {
            if (this.ignoreSetOnline || getConnectionsManager().getPauseTime() != 0 || !ApplicationLoader.isScreenOn || ApplicationLoader.mainInterfacePausedStageQueue) {
                if (this.statusSettingState != 2 && !this.offlineSent && Math.abs(System.currentTimeMillis() - getConnectionsManager().getPauseTime()) >= 2000) {
                    this.statusSettingState = 2;
                    if (this.statusRequest != 0) {
                        getConnectionsManager().cancelRequest(this.statusRequest, true);
                    }
                    TLRPC$TL_account_updateStatus tLRPC$TL_account_updateStatus = new TLRPC$TL_account_updateStatus();
                    tLRPC$TL_account_updateStatus.offline = true;
                    this.statusRequest = getConnectionsManager().sendRequest(tLRPC$TL_account_updateStatus, new MessagesController$$ExternalSyntheticLambda224(this));
                }
            } else if (ApplicationLoader.mainInterfacePausedStageQueueTime != 0 && Math.abs(ApplicationLoader.mainInterfacePausedStageQueueTime - System.currentTimeMillis()) > 1000 && this.statusSettingState != 1 && (this.lastStatusUpdateTime == 0 || Math.abs(System.currentTimeMillis() - this.lastStatusUpdateTime) >= 55000 || this.offlineSent)) {
                this.statusSettingState = 1;
                if (this.statusRequest != 0) {
                    getConnectionsManager().cancelRequest(this.statusRequest, true);
                }
                TLRPC$TL_account_updateStatus tLRPC$TL_account_updateStatus2 = new TLRPC$TL_account_updateStatus();
                tLRPC$TL_account_updateStatus2.offline = false;
                this.statusRequest = getConnectionsManager().sendRequest(tLRPC$TL_account_updateStatus2, new MessagesController$$ExternalSyntheticLambda210(this));
            }
            if (this.updatesQueueChannels.size() != 0) {
                for (int i5 = 0; i5 < this.updatesQueueChannels.size(); i5++) {
                    long keyAt = this.updatesQueueChannels.keyAt(i5);
                    if (Math.abs(currentTimeMillis - this.updatesStartWaitTimeChannels.valueAt(i5)) >= 1500) {
                        if (BuildVars.LOGS_ENABLED) {
                            FileLog.d("QUEUE CHANNEL " + keyAt + " UPDATES WAIT TIMEOUT - CHECK QUEUE");
                        }
                        processChannelsUpdatesQueue(keyAt, 0);
                    }
                }
            }
            for (int i6 = 0; i6 < 3; i6++) {
                if (getUpdatesStartTime(i6) != 0 && Math.abs(currentTimeMillis - getUpdatesStartTime(i6)) >= 1500) {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d(i6 + " QUEUE UPDATES WAIT TIMEOUT - CHECK QUEUE");
                    }
                    processUpdatesQueue(i6, 0);
                }
            }
        }
        int currentTime = getConnectionsManager().getCurrentTime();
        if (Math.abs(System.currentTimeMillis() - this.lastViewsCheckTime) >= 5000) {
            this.lastViewsCheckTime = System.currentTimeMillis();
            if (this.channelViewsToSend.size() != 0) {
                int i7 = 0;
                while (i7 < this.channelViewsToSend.size()) {
                    long keyAt2 = this.channelViewsToSend.keyAt(i7);
                    TLRPC$TL_messages_getMessagesViews tLRPC$TL_messages_getMessagesViews = new TLRPC$TL_messages_getMessagesViews();
                    tLRPC$TL_messages_getMessagesViews.peer = getInputPeer(keyAt2);
                    tLRPC$TL_messages_getMessagesViews.id = this.channelViewsToSend.valueAt(i7);
                    tLRPC$TL_messages_getMessagesViews.increment = i7 == 0;
                    getConnectionsManager().sendRequest(tLRPC$TL_messages_getMessagesViews, new MessagesController$$ExternalSyntheticLambda270(this, keyAt2, tLRPC$TL_messages_getMessagesViews));
                    i7++;
                }
                this.channelViewsToSend.clear();
            }
            if (this.pollsToCheckSize > 0) {
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda31(this, currentTime));
            }
        }
        if (!this.onlinePrivacy.isEmpty()) {
            ArrayList arrayList2 = null;
            for (Map.Entry next : this.onlinePrivacy.entrySet()) {
                if (((Integer) next.getValue()).intValue() < currentTime - 30) {
                    if (arrayList2 == null) {
                        arrayList2 = new ArrayList();
                    }
                    arrayList2.add((Long) next.getKey());
                }
            }
            if (arrayList2 != null) {
                Iterator it = arrayList2.iterator();
                while (it.hasNext()) {
                    this.onlinePrivacy.remove((Long) it.next());
                }
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda16(this));
            }
        }
        if (this.shortPollChannels.size() != 0) {
            int i8 = 0;
            while (i8 < this.shortPollChannels.size()) {
                long keyAt3 = this.shortPollChannels.keyAt(i8);
                if (((long) this.shortPollChannels.valueAt(i8)) < System.currentTimeMillis() / 1000) {
                    this.shortPollChannels.delete(keyAt3);
                    i8--;
                    if (this.needShortPollChannels.indexOfKey(keyAt3) >= 0) {
                        getChannelDifference(keyAt3);
                    }
                }
                i8++;
            }
        }
        if (this.shortPollOnlines.size() != 0) {
            long elapsedRealtime = SystemClock.elapsedRealtime() / 1000;
            int i9 = 0;
            while (i9 < this.shortPollOnlines.size()) {
                long keyAt4 = this.shortPollOnlines.keyAt(i9);
                if (((long) this.shortPollOnlines.valueAt(i9)) < elapsedRealtime) {
                    if (this.needShortPollChannels.indexOfKey(keyAt4) >= 0) {
                        this.shortPollOnlines.put(keyAt4, (int) (300 + elapsedRealtime));
                    } else {
                        this.shortPollOnlines.delete(keyAt4);
                        i9--;
                    }
                    TLRPC$TL_messages_getOnlines tLRPC$TL_messages_getOnlines = new TLRPC$TL_messages_getOnlines();
                    tLRPC$TL_messages_getOnlines.peer = getInputPeer(-keyAt4);
                    getConnectionsManager().sendRequest(tLRPC$TL_messages_getOnlines, new MessagesController$$ExternalSyntheticLambda245(this, keyAt4));
                }
                i9++;
            }
        }
        if (!this.printingUsers.isEmpty() || this.lastPrintingStringCount != this.printingUsers.size()) {
            ArrayList arrayList3 = new ArrayList(this.printingUsers.keySet());
            int i10 = 0;
            boolean z = false;
            while (i10 < arrayList3.size()) {
                Long l = (Long) arrayList3.get(i10);
                ConcurrentHashMap concurrentHashMap = this.printingUsers.get(l);
                if (concurrentHashMap != null) {
                    ArrayList arrayList4 = new ArrayList(concurrentHashMap.keySet());
                    int i11 = 0;
                    while (i11 < arrayList4.size()) {
                        Integer num = (Integer) arrayList4.get(i11);
                        ArrayList arrayList5 = (ArrayList) concurrentHashMap.get(num);
                        if (arrayList5 != null) {
                            while (i4 < arrayList5.size()) {
                                PrintingUser printingUser = (PrintingUser) arrayList5.get(i4);
                                Long l2 = l;
                                ArrayList arrayList6 = arrayList3;
                                int i12 = i10;
                                if (printingUser.lastTime + ((long) (printingUser.action instanceof TLRPC$TL_sendMessageGamePlayAction ? 30000 : 5900)) < currentTimeMillis) {
                                    arrayList5.remove(printingUser);
                                    i4--;
                                    i3 = 1;
                                    z = true;
                                } else {
                                    i3 = 1;
                                }
                                i4 += i3;
                                l = l2;
                                arrayList3 = arrayList6;
                                i10 = i12;
                            }
                        }
                        ArrayList arrayList7 = arrayList3;
                        int i13 = i10;
                        Long l3 = l;
                        if (arrayList5 == null || arrayList5.isEmpty()) {
                            concurrentHashMap.remove(num);
                            arrayList4.remove(i11);
                            i11--;
                        }
                        i11++;
                        l = l3;
                        arrayList3 = arrayList7;
                        i10 = i13;
                        i4 = 0;
                    }
                }
                ArrayList arrayList8 = arrayList3;
                int i14 = i10;
                Long l4 = l;
                if (concurrentHashMap == null || concurrentHashMap.isEmpty()) {
                    this.printingUsers.remove(l4);
                    arrayList = arrayList8;
                    int i15 = i14;
                    arrayList.remove(i15);
                    i2 = i15 - 1;
                } else {
                    arrayList = arrayList8;
                    i2 = i14;
                }
                i10 = i2 + 1;
                arrayList3 = arrayList;
                i4 = 0;
            }
            i = 1;
            updatePrintingStrings();
            if (z) {
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda15(this));
            }
        } else {
            i = 1;
        }
        if (Theme.selectedAutoNightType == i && Math.abs(currentTimeMillis - lastThemeCheckTime) >= 60) {
            AndroidUtilities.runOnUIThread(this.themeCheckRunnable);
            lastThemeCheckTime = currentTimeMillis;
        }
        if (getUserConfig().savedPasswordHash != null && Math.abs(currentTimeMillis - lastPasswordCheckTime) >= 60) {
            AndroidUtilities.runOnUIThread(this.passwordCheckRunnable);
            lastPasswordCheckTime = currentTimeMillis;
        }
        if (this.lastPushRegisterSendTime != 0 && Math.abs(SystemClock.elapsedRealtime() - this.lastPushRegisterSendTime) >= 10800000) {
            GcmPushListenerService.sendRegistrationToServer(SharedConfig.pushString);
        }
        getLocationController().update();
        lambda$checkPromoInfo$124(false);
        checkTosUpdate();
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateTimerProc$112(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            this.lastStatusUpdateTime = System.currentTimeMillis();
            this.offlineSent = false;
            this.statusSettingState = 0;
        } else {
            long j = this.lastStatusUpdateTime;
            if (j != 0) {
                this.lastStatusUpdateTime = j + 5000;
            }
        }
        this.statusRequest = 0;
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateTimerProc$113(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            this.offlineSent = true;
        } else {
            long j = this.lastStatusUpdateTime;
            if (j != 0) {
                this.lastStatusUpdateTime = j + 5000;
            }
        }
        this.statusRequest = 0;
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateTimerProc$115(long j, TLRPC$TL_messages_getMessagesViews tLRPC$TL_messages_getMessagesViews, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$TL_messages_messageViews tLRPC$TL_messages_messageViews = (TLRPC$TL_messages_messageViews) tLObject;
            LongSparseArray longSparseArray = new LongSparseArray();
            LongSparseArray longSparseArray2 = new LongSparseArray();
            LongSparseArray longSparseArray3 = new LongSparseArray();
            SparseIntArray sparseIntArray = (SparseIntArray) longSparseArray.get(j);
            SparseIntArray sparseIntArray2 = (SparseIntArray) longSparseArray2.get(j);
            SparseArray sparseArray = (SparseArray) longSparseArray3.get(j);
            int i = 0;
            while (i < tLRPC$TL_messages_getMessagesViews.id.size() && i < tLRPC$TL_messages_messageViews.views.size()) {
                TLRPC$TL_messageViews tLRPC$TL_messageViews = tLRPC$TL_messages_messageViews.views.get(i);
                if ((1 & tLRPC$TL_messageViews.flags) != 0) {
                    if (sparseIntArray == null) {
                        sparseIntArray = new SparseIntArray();
                        longSparseArray.put(j, sparseIntArray);
                    }
                    sparseIntArray.put(tLRPC$TL_messages_getMessagesViews.id.get(i).intValue(), tLRPC$TL_messageViews.views);
                }
                if ((tLRPC$TL_messageViews.flags & 2) != 0) {
                    if (sparseIntArray2 == null) {
                        sparseIntArray2 = new SparseIntArray();
                        longSparseArray2.put(j, sparseIntArray2);
                    }
                    sparseIntArray2.put(tLRPC$TL_messages_getMessagesViews.id.get(i).intValue(), tLRPC$TL_messageViews.forwards);
                }
                if ((tLRPC$TL_messageViews.flags & 4) != 0) {
                    if (sparseArray == null) {
                        sparseArray = new SparseArray();
                        longSparseArray3.put(j, sparseArray);
                    }
                    sparseArray.put(tLRPC$TL_messages_getMessagesViews.id.get(i).intValue(), tLRPC$TL_messageViews.replies);
                }
                i++;
            }
            getMessagesStorage().putUsersAndChats(tLRPC$TL_messages_messageViews.users, tLRPC$TL_messages_messageViews.chats, true, true);
            getMessagesStorage().putChannelViews(longSparseArray, longSparseArray2, longSparseArray3, false);
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda153(this, tLRPC$TL_messages_messageViews, longSparseArray, longSparseArray2, longSparseArray3));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateTimerProc$114(TLRPC$TL_messages_messageViews tLRPC$TL_messages_messageViews, LongSparseArray longSparseArray, LongSparseArray longSparseArray2, LongSparseArray longSparseArray3) {
        putUsers(tLRPC$TL_messages_messageViews.users, false);
        putChats(tLRPC$TL_messages_messageViews.chats, false);
        getNotificationCenter().postNotificationName(NotificationCenter.didUpdateMessagesViews, longSparseArray, longSparseArray2, longSparseArray3, Boolean.FALSE);
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Removed duplicated region for block: B:21:0x0063  */
    /* JADX WARNING: Removed duplicated region for block: B:25:0x0075  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$updateTimerProc$117(int r18) {
        /*
            r17 = this;
            r0 = r17
            r1 = r18
            long r2 = android.os.SystemClock.elapsedRealtime()
            androidx.collection.LongSparseArray<android.util.SparseArray<org.telegram.messenger.MessageObject>> r4 = r0.pollsToCheck
            int r4 = r4.size()
            r6 = 2147483647(0x7fffffff, float:NaN)
            r7 = 0
        L_0x0012:
            if (r7 >= r4) goto L_0x00cb
            androidx.collection.LongSparseArray<android.util.SparseArray<org.telegram.messenger.MessageObject>> r8 = r0.pollsToCheck
            java.lang.Object r8 = r8.valueAt(r7)
            android.util.SparseArray r8 = (android.util.SparseArray) r8
            if (r8 != 0) goto L_0x0021
        L_0x001e:
            r5 = 1
            goto L_0x00c8
        L_0x0021:
            int r10 = r8.size()
            r11 = 0
        L_0x0026:
            r12 = 1000(0x3e8, float:1.401E-42)
            if (r11 >= r10) goto L_0x009e
            java.lang.Object r13 = r8.valueAt(r11)
            org.telegram.messenger.MessageObject r13 = (org.telegram.messenger.MessageObject) r13
            org.telegram.tgnet.TLRPC$Message r14 = r13.messageOwner
            org.telegram.tgnet.TLRPC$MessageMedia r14 = r14.media
            org.telegram.tgnet.TLRPC$TL_messageMediaPoll r14 = (org.telegram.tgnet.TLRPC$TL_messageMediaPoll) r14
            r15 = 30000(0x7530, float:4.2039E-41)
            org.telegram.tgnet.TLRPC$Poll r14 = r14.poll
            int r5 = r14.close_date
            if (r5 == 0) goto L_0x0044
            boolean r14 = r14.closed
            if (r14 != 0) goto L_0x0044
            r14 = 1
            goto L_0x0045
        L_0x0044:
            r14 = 0
        L_0x0045:
            if (r14 == 0) goto L_0x0051
            if (r5 > r1) goto L_0x004b
            r15 = r10
            goto L_0x0054
        L_0x004b:
            int r5 = r5 - r1
            int r5 = java.lang.Math.min(r6, r5)
            r6 = r5
        L_0x0051:
            r15 = r10
            r12 = 30000(0x7530, float:4.2039E-41)
        L_0x0054:
            long r9 = r13.pollLastCheckTime
            long r9 = r2 - r9
            long r9 = java.lang.Math.abs(r9)
            r16 = r6
            long r5 = (long) r12
            int r12 = (r9 > r5 ? 1 : (r9 == r5 ? 0 : -1))
            if (r12 >= 0) goto L_0x0075
            boolean r5 = r13.pollVisibleOnScreen
            if (r5 != 0) goto L_0x0098
            if (r14 != 0) goto L_0x0098
            int r5 = r13.getId()
            r8.remove(r5)
            int r10 = r15 + -1
            int r11 = r11 + -1
            goto L_0x0099
        L_0x0075:
            r13.pollLastCheckTime = r2
            org.telegram.tgnet.TLRPC$TL_messages_getPollResults r5 = new org.telegram.tgnet.TLRPC$TL_messages_getPollResults
            r5.<init>()
            long r9 = r13.getDialogId()
            org.telegram.tgnet.TLRPC$InputPeer r6 = r0.getInputPeer((long) r9)
            r5.peer = r6
            int r6 = r13.getId()
            r5.msg_id = r6
            org.telegram.tgnet.ConnectionsManager r6 = r17.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda301 r9 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda301
            r9.<init>(r0, r14)
            r6.sendRequest(r5, r9)
        L_0x0098:
            r10 = r15
        L_0x0099:
            r5 = 1
            int r11 = r11 + r5
            r6 = r16
            goto L_0x0026
        L_0x009e:
            r9 = 5
            if (r6 >= r9) goto L_0x00b3
            long r9 = r0.lastViewsCheckTime
            long r13 = java.lang.System.currentTimeMillis()
            int r11 = 5 - r6
            int r11 = r11 * 1000
            long r11 = (long) r11
            long r13 = r13 - r11
            long r9 = java.lang.Math.min(r9, r13)
            r0.lastViewsCheckTime = r9
        L_0x00b3:
            int r8 = r8.size()
            if (r8 != 0) goto L_0x001e
            androidx.collection.LongSparseArray<android.util.SparseArray<org.telegram.messenger.MessageObject>> r8 = r0.pollsToCheck
            long r9 = r8.keyAt(r7)
            r8.remove(r9)
            int r4 = r4 + -1
            int r7 = r7 + -1
            goto L_0x001e
        L_0x00c8:
            int r7 = r7 + r5
            goto L_0x0012
        L_0x00cb:
            androidx.collection.LongSparseArray<android.util.SparseArray<org.telegram.messenger.MessageObject>> r1 = r0.pollsToCheck
            int r1 = r1.size()
            r0.pollsToCheckSize = r1
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$updateTimerProc$117(int):void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateTimerProc$116(boolean z, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        TLRPC$Poll tLRPC$Poll;
        if (tLRPC$TL_error == null) {
            TLRPC$Updates tLRPC$Updates = (TLRPC$Updates) tLObject;
            if (z) {
                for (int i = 0; i < tLRPC$Updates.updates.size(); i++) {
                    TLRPC$Update tLRPC$Update = tLRPC$Updates.updates.get(i);
                    if ((tLRPC$Update instanceof TLRPC$TL_updateMessagePoll) && (tLRPC$Poll = ((TLRPC$TL_updateMessagePoll) tLRPC$Update).poll) != null && !tLRPC$Poll.closed) {
                        this.lastViewsCheckTime = System.currentTimeMillis() - 4000;
                    }
                }
            }
            processUpdates(tLRPC$Updates, false);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateTimerProc$118() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_STATUS));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateTimerProc$120(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$TL_chatOnlines tLRPC$TL_chatOnlines = (TLRPC$TL_chatOnlines) tLObject;
            getMessagesStorage().updateChatOnlineCount(j, tLRPC$TL_chatOnlines.onlines);
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda71(this, j, tLRPC$TL_chatOnlines));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateTimerProc$119(long j, TLRPC$TL_chatOnlines tLRPC$TL_chatOnlines) {
        getNotificationCenter().postNotificationName(NotificationCenter.chatOnlineCountDidLoad, Long.valueOf(j), Integer.valueOf(tLRPC$TL_chatOnlines.onlines));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateTimerProc$121() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_USER_PRINT));
    }

    private void checkTosUpdate() {
        if (this.nextTosCheckTime <= getConnectionsManager().getCurrentTime() && !this.checkingTosUpdate && getUserConfig().isClientActivated()) {
            this.checkingTosUpdate = true;
            getConnectionsManager().sendRequest(new TLRPC$TL_help_getTermsOfServiceUpdate(), new MessagesController$$ExternalSyntheticLambda208(this));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$checkTosUpdate$123(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        this.checkingTosUpdate = false;
        if (tLObject instanceof TLRPC$TL_help_termsOfServiceUpdateEmpty) {
            this.nextTosCheckTime = ((TLRPC$TL_help_termsOfServiceUpdateEmpty) tLObject).expires;
        } else if (tLObject instanceof TLRPC$TL_help_termsOfServiceUpdate) {
            TLRPC$TL_help_termsOfServiceUpdate tLRPC$TL_help_termsOfServiceUpdate = (TLRPC$TL_help_termsOfServiceUpdate) tLObject;
            this.nextTosCheckTime = tLRPC$TL_help_termsOfServiceUpdate.expires;
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda151(this, tLRPC$TL_help_termsOfServiceUpdate));
        } else {
            this.nextTosCheckTime = getConnectionsManager().getCurrentTime() + 3600;
        }
        this.notificationsPreferences.edit().putInt("nextTosCheckTime", this.nextTosCheckTime).commit();
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$checkTosUpdate$122(TLRPC$TL_help_termsOfServiceUpdate tLRPC$TL_help_termsOfServiceUpdate) {
        getNotificationCenter().postNotificationName(NotificationCenter.needShowAlert, 4, tLRPC$TL_help_termsOfServiceUpdate.terms_of_service);
    }

    public void checkPromoInfo(boolean z) {
        Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda184(this, z));
    }

    /* access modifiers changed from: private */
    /* renamed from: checkPromoInfoInternal */
    public void lambda$checkPromoInfo$124(boolean z) {
        String str;
        boolean z2 = false;
        if (z && this.checkingPromoInfo) {
            this.checkingPromoInfo = false;
        }
        if ((z || this.nextPromoInfoCheckTime <= getConnectionsManager().getCurrentTime()) && !this.checkingPromoInfo) {
            if (this.checkingPromoInfoRequestId != 0) {
                getConnectionsManager().cancelRequest(this.checkingPromoInfoRequestId, true);
                this.checkingPromoInfoRequestId = 0;
            }
            SharedPreferences globalMainSettings = getGlobalMainSettings();
            globalMainSettings.getBoolean("proxy_enabled", false);
            String string = globalMainSettings.getString("proxy_ip", "");
            String string2 = globalMainSettings.getString("proxy_secret", "");
            if (!(this.promoDialogId == 0 || this.promoDialogType != PROMO_TYPE_PROXY || (str = this.proxyDialogAddress) == null)) {
                if (!str.equals(string + string2)) {
                    z2 = true;
                }
            }
            int i = this.lastCheckPromoId + 1;
            this.lastCheckPromoId = i;
            this.checkingPromoInfo = true;
            this.checkingPromoInfoRequestId = getConnectionsManager().sendRequest(new TLRPC$TL_help_getPromoData(), new MessagesController$$ExternalSyntheticLambda241(this, i, string, string2));
            if (z2) {
                this.promoDialogId = 0;
                this.proxyDialogAddress = null;
                this.nextPromoInfoCheckTime = getConnectionsManager().getCurrentTime() + 3600;
                getGlobalMainSettings().edit().putLong("proxy_dialog", this.promoDialogId).remove("proxyDialogAddress").putInt("nextPromoInfoCheckTime", this.nextPromoInfoCheckTime).commit();
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda10(this));
            }
        }
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Code restructure failed: missing block: B:26:0x0065, code lost:
        r2 = false;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:39:0x0095, code lost:
        r2 = r0;
     */
    /* JADX WARNING: Removed duplicated region for block: B:42:0x009d  */
    /* JADX WARNING: Removed duplicated region for block: B:43:0x00a2  */
    /* JADX WARNING: Removed duplicated region for block: B:49:0x00f3  */
    /* JADX WARNING: Removed duplicated region for block: B:50:0x00f7  */
    /* JADX WARNING: Removed duplicated region for block: B:53:0x0100  */
    /* JADX WARNING: Removed duplicated region for block: B:54:0x0104  */
    /* JADX WARNING: Removed duplicated region for block: B:57:0x0111  */
    /* JADX WARNING: Removed duplicated region for block: B:61:0x0130  */
    /* JADX WARNING: Removed duplicated region for block: B:67:? A[RETURN, SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$checkPromoInfoInternal$129(int r17, java.lang.String r18, java.lang.String r19, org.telegram.tgnet.TLObject r20, org.telegram.tgnet.TLRPC$TL_error r21) {
        /*
            r16 = this;
            r6 = r16
            r0 = r20
            int r1 = r6.lastCheckPromoId
            r5 = r17
            if (r5 == r1) goto L_0x000b
            return
        L_0x000b:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_help_promoDataEmpty
            java.lang.String r7 = "nextPromoInfoCheckTime"
            java.lang.String r8 = "proxyDialogAddress"
            java.lang.String r9 = "proxy_dialog"
            r10 = 0
            r12 = 0
            if (r1 == 0) goto L_0x0021
            org.telegram.tgnet.TLRPC$TL_help_promoDataEmpty r0 = (org.telegram.tgnet.TLRPC$TL_help_promoDataEmpty) r0
            int r0 = r0.expires
            r6.nextPromoInfoCheckTime = r0
        L_0x001e:
            r2 = 1
            goto L_0x012e
        L_0x0021:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_help_promoData
            if (r1 == 0) goto L_0x0120
            r4 = r0
            org.telegram.tgnet.TLRPC$TL_help_promoData r4 = (org.telegram.tgnet.TLRPC$TL_help_promoData) r4
            org.telegram.tgnet.TLRPC$Peer r0 = r4.peer
            long r13 = r0.user_id
            int r1 = (r13 > r10 ? 1 : (r13 == r10 ? 0 : -1))
            if (r1 == 0) goto L_0x0034
            r2 = r13
        L_0x0031:
            r10 = 0
            goto L_0x0097
        L_0x0034:
            long r13 = r0.chat_id
            int r1 = (r13 > r10 ? 1 : (r13 == r10 ? 0 : -1))
            if (r1 == 0) goto L_0x0069
            long r0 = -r13
            r3 = 0
        L_0x003c:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r13 = r4.chats
            int r13 = r13.size()
            if (r3 >= r13) goto L_0x0065
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r13 = r4.chats
            java.lang.Object r13 = r13.get(r3)
            org.telegram.tgnet.TLRPC$Chat r13 = (org.telegram.tgnet.TLRPC$Chat) r13
            long r14 = r13.id
            org.telegram.tgnet.TLRPC$Peer r2 = r4.peer
            long r10 = r2.chat_id
            int r2 = (r14 > r10 ? 1 : (r14 == r10 ? 0 : -1))
            if (r2 != 0) goto L_0x0060
            boolean r2 = r13.kicked
            if (r2 != 0) goto L_0x005e
            boolean r2 = r13.restricted
            if (r2 == 0) goto L_0x0065
        L_0x005e:
            r2 = 1
            goto L_0x0066
        L_0x0060:
            int r3 = r3 + 1
            r10 = 0
            goto L_0x003c
        L_0x0065:
            r2 = 0
        L_0x0066:
            r10 = r2
            r2 = r0
            goto L_0x0097
        L_0x0069:
            long r0 = r0.channel_id
            long r0 = -r0
            r2 = 0
        L_0x006d:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r3 = r4.chats
            int r3 = r3.size()
            if (r2 >= r3) goto L_0x0095
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r3 = r4.chats
            java.lang.Object r3 = r3.get(r2)
            org.telegram.tgnet.TLRPC$Chat r3 = (org.telegram.tgnet.TLRPC$Chat) r3
            long r10 = r3.id
            org.telegram.tgnet.TLRPC$Peer r13 = r4.peer
            long r13 = r13.channel_id
            int r15 = (r10 > r13 ? 1 : (r10 == r13 ? 0 : -1))
            if (r15 != 0) goto L_0x0092
            boolean r2 = r3.kicked
            if (r2 != 0) goto L_0x008f
            boolean r2 = r3.restricted
            if (r2 == 0) goto L_0x0095
        L_0x008f:
            r2 = r0
            r10 = 1
            goto L_0x0097
        L_0x0092:
            int r2 = r2 + 1
            goto L_0x006d
        L_0x0095:
            r2 = r0
            goto L_0x0031
        L_0x0097:
            r6.promoDialogId = r2
            boolean r0 = r4.proxy
            if (r0 == 0) goto L_0x00a2
            int r0 = PROMO_TYPE_PROXY
            r6.promoDialogType = r0
            goto L_0x00b7
        L_0x00a2:
            java.lang.String r0 = r4.psa_type
            boolean r0 = android.text.TextUtils.isEmpty(r0)
            if (r0 != 0) goto L_0x00b3
            int r0 = PROMO_TYPE_PSA
            r6.promoDialogType = r0
            java.lang.String r0 = r4.psa_type
            r6.promoPsaType = r0
            goto L_0x00b7
        L_0x00b3:
            int r0 = PROMO_TYPE_OTHER
            r6.promoDialogType = r0
        L_0x00b7:
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r1 = r18
            r0.append(r1)
            r1 = r19
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            r6.proxyDialogAddress = r0
            java.lang.String r0 = r4.psa_message
            r6.promoPsaMessage = r0
            int r0 = r4.expires
            r6.nextPromoInfoCheckTime = r0
            android.content.SharedPreferences r0 = getGlobalMainSettings()
            android.content.SharedPreferences$Editor r0 = r0.edit()
            long r13 = r6.promoDialogId
            r0.putLong(r9, r13)
            java.lang.String r1 = r6.proxyDialogAddress
            r0.putString(r8, r1)
            int r1 = r6.promoDialogType
            java.lang.String r11 = "promo_dialog_type"
            r0.putInt(r11, r1)
            java.lang.String r1 = r6.promoPsaMessage
            java.lang.String r11 = "promo_psa_message"
            if (r1 == 0) goto L_0x00f7
            r0.putString(r11, r1)
            goto L_0x00fa
        L_0x00f7:
            r0.remove(r11)
        L_0x00fa:
            java.lang.String r1 = r6.promoPsaType
            java.lang.String r11 = "promo_psa_type"
            if (r1 == 0) goto L_0x0104
            r0.putString(r11, r1)
            goto L_0x0107
        L_0x0104:
            r0.remove(r11)
        L_0x0107:
            int r1 = r6.nextPromoInfoCheckTime
            r0.putInt(r7, r1)
            r0.commit()
            if (r10 != 0) goto L_0x011e
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda72 r11 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda72
            r0 = r11
            r1 = r16
            r5 = r17
            r0.<init>(r1, r2, r4, r5)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r11)
        L_0x011e:
            r2 = r10
            goto L_0x012e
        L_0x0120:
            org.telegram.tgnet.ConnectionsManager r0 = r16.getConnectionsManager()
            int r0 = r0.getCurrentTime()
            int r0 = r0 + 3600
            r6.nextPromoInfoCheckTime = r0
            goto L_0x001e
        L_0x012e:
            if (r2 == 0) goto L_0x015b
            r0 = 0
            r6.promoDialogId = r0
            android.content.SharedPreferences r0 = getGlobalMainSettings()
            android.content.SharedPreferences$Editor r0 = r0.edit()
            long r1 = r6.promoDialogId
            android.content.SharedPreferences$Editor r0 = r0.putLong(r9, r1)
            android.content.SharedPreferences$Editor r0 = r0.remove(r8)
            int r1 = r6.nextPromoInfoCheckTime
            android.content.SharedPreferences$Editor r0 = r0.putInt(r7, r1)
            r0.commit()
            r6.checkingPromoInfoRequestId = r12
            r6.checkingPromoInfo = r12
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda10 r0 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda10
            r0.<init>(r6)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r0)
        L_0x015b:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$checkPromoInfoInternal$129(int, java.lang.String, java.lang.String, org.telegram.tgnet.TLObject, org.telegram.tgnet.TLRPC$TL_error):void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$checkPromoInfoInternal$128(long j, TLRPC$TL_help_promoData tLRPC$TL_help_promoData, int i) {
        TLRPC$Dialog tLRPC$Dialog = this.promoDialog;
        if (!(tLRPC$Dialog == null || j == tLRPC$Dialog.id)) {
            removePromoDialog();
        }
        TLRPC$Dialog tLRPC$Dialog2 = this.dialogs_dict.get(j);
        this.promoDialog = tLRPC$Dialog2;
        if (tLRPC$Dialog2 != null) {
            this.checkingPromoInfo = false;
            sortDialogs((LongSparseArray<TLRPC$Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
            return;
        }
        LongSparseArray longSparseArray = new LongSparseArray();
        LongSparseArray longSparseArray2 = new LongSparseArray();
        for (int i2 = 0; i2 < tLRPC$TL_help_promoData.users.size(); i2++) {
            TLRPC$User tLRPC$User = tLRPC$TL_help_promoData.users.get(i2);
            longSparseArray.put(tLRPC$User.id, tLRPC$User);
        }
        for (int i3 = 0; i3 < tLRPC$TL_help_promoData.chats.size(); i3++) {
            TLRPC$Chat tLRPC$Chat = tLRPC$TL_help_promoData.chats.get(i3);
            longSparseArray2.put(tLRPC$Chat.id, tLRPC$Chat);
        }
        TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs = new TLRPC$TL_messages_getPeerDialogs();
        TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
        TLRPC$Peer tLRPC$Peer = tLRPC$TL_help_promoData.peer;
        if (tLRPC$Peer.user_id != 0) {
            TLRPC$TL_inputPeerUser tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerUser();
            tLRPC$TL_inputDialogPeer.peer = tLRPC$TL_inputPeerUser;
            long j2 = tLRPC$TL_help_promoData.peer.user_id;
            tLRPC$TL_inputPeerUser.user_id = j2;
            TLRPC$User tLRPC$User2 = (TLRPC$User) longSparseArray.get(j2);
            if (tLRPC$User2 != null) {
                tLRPC$TL_inputDialogPeer.peer.access_hash = tLRPC$User2.access_hash;
            }
        } else if (tLRPC$Peer.chat_id != 0) {
            TLRPC$TL_inputPeerChat tLRPC$TL_inputPeerChat = new TLRPC$TL_inputPeerChat();
            tLRPC$TL_inputDialogPeer.peer = tLRPC$TL_inputPeerChat;
            long j3 = tLRPC$TL_help_promoData.peer.chat_id;
            tLRPC$TL_inputPeerChat.chat_id = j3;
            TLRPC$Chat tLRPC$Chat2 = (TLRPC$Chat) longSparseArray2.get(j3);
            if (tLRPC$Chat2 != null) {
                tLRPC$TL_inputDialogPeer.peer.access_hash = tLRPC$Chat2.access_hash;
            }
        } else {
            TLRPC$TL_inputPeerChannel tLRPC$TL_inputPeerChannel = new TLRPC$TL_inputPeerChannel();
            tLRPC$TL_inputDialogPeer.peer = tLRPC$TL_inputPeerChannel;
            long j4 = tLRPC$TL_help_promoData.peer.channel_id;
            tLRPC$TL_inputPeerChannel.channel_id = j4;
            TLRPC$Chat tLRPC$Chat3 = (TLRPC$Chat) longSparseArray2.get(j4);
            if (tLRPC$Chat3 != null) {
                tLRPC$TL_inputDialogPeer.peer.access_hash = tLRPC$Chat3.access_hash;
            }
        }
        tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer);
        this.checkingPromoInfoRequestId = getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerDialogs, new MessagesController$$ExternalSyntheticLambda243(this, i, tLRPC$TL_help_promoData, j));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$checkPromoInfoInternal$127(int i, TLRPC$TL_help_promoData tLRPC$TL_help_promoData, long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (i == this.lastCheckPromoId) {
            this.checkingPromoInfoRequestId = 0;
            TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject;
            if (tLRPC$TL_messages_peerDialogs == null || tLRPC$TL_messages_peerDialogs.dialogs.isEmpty()) {
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda7(this));
            } else {
                getMessagesStorage().putUsersAndChats(tLRPC$TL_help_promoData.users, tLRPC$TL_help_promoData.chats, true, true);
                TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
                tLRPC$TL_messages_dialogs.chats = tLRPC$TL_messages_peerDialogs.chats;
                tLRPC$TL_messages_dialogs.users = tLRPC$TL_messages_peerDialogs.users;
                tLRPC$TL_messages_dialogs.dialogs = tLRPC$TL_messages_peerDialogs.dialogs;
                tLRPC$TL_messages_dialogs.messages = tLRPC$TL_messages_peerDialogs.messages;
                getMessagesStorage().putDialogs(tLRPC$TL_messages_dialogs, 2);
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda150(this, tLRPC$TL_help_promoData, tLRPC$TL_messages_peerDialogs, j));
            }
            this.checkingPromoInfo = false;
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$checkPromoInfoInternal$125(TLRPC$TL_help_promoData tLRPC$TL_help_promoData, TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs, long j) {
        Integer num = 0;
        putUsers(tLRPC$TL_help_promoData.users, false);
        putChats(tLRPC$TL_help_promoData.chats, false);
        putUsers(tLRPC$TL_messages_peerDialogs.users, false);
        putChats(tLRPC$TL_messages_peerDialogs.chats, false);
        TLRPC$Dialog tLRPC$Dialog = this.promoDialog;
        if (tLRPC$Dialog != null) {
            long j2 = tLRPC$Dialog.id;
            if (j2 < 0) {
                TLRPC$Chat chat = getChat(Long.valueOf(-j2));
                if (ChatObject.isNotInChat(chat) || chat.restricted) {
                    removeDialog(this.promoDialog);
                }
            } else {
                removeDialog(tLRPC$Dialog);
            }
        }
        TLRPC$Dialog tLRPC$Dialog2 = tLRPC$TL_messages_peerDialogs.dialogs.get(0);
        this.promoDialog = tLRPC$Dialog2;
        tLRPC$Dialog2.id = j;
        tLRPC$Dialog2.folder_id = 0;
        if (DialogObject.isChannel(tLRPC$Dialog2)) {
            LongSparseIntArray longSparseIntArray = this.channelsPts;
            TLRPC$Dialog tLRPC$Dialog3 = this.promoDialog;
            longSparseIntArray.put(-tLRPC$Dialog3.id, tLRPC$Dialog3.pts);
        }
        Integer num2 = this.dialogs_read_inbox_max.get(Long.valueOf(this.promoDialog.id));
        if (num2 == null) {
            num2 = num;
        }
        this.dialogs_read_inbox_max.put(Long.valueOf(this.promoDialog.id), Integer.valueOf(Math.max(num2.intValue(), this.promoDialog.read_inbox_max_id)));
        Integer num3 = this.dialogs_read_outbox_max.get(Long.valueOf(this.promoDialog.id));
        if (num3 != null) {
            num = num3;
        }
        this.dialogs_read_outbox_max.put(Long.valueOf(this.promoDialog.id), Integer.valueOf(Math.max(num.intValue(), this.promoDialog.read_outbox_max_id)));
        this.dialogs_dict.put(j, this.promoDialog);
        if (!tLRPC$TL_messages_peerDialogs.messages.isEmpty()) {
            LongSparseArray longSparseArray = new LongSparseArray();
            LongSparseArray longSparseArray2 = new LongSparseArray();
            for (int i = 0; i < tLRPC$TL_messages_peerDialogs.users.size(); i++) {
                TLRPC$User tLRPC$User = tLRPC$TL_messages_peerDialogs.users.get(i);
                longSparseArray.put(tLRPC$User.id, tLRPC$User);
            }
            for (int i2 = 0; i2 < tLRPC$TL_messages_peerDialogs.chats.size(); i2++) {
                TLRPC$Chat tLRPC$Chat = tLRPC$TL_messages_peerDialogs.chats.get(i2);
                longSparseArray2.put(tLRPC$Chat.id, tLRPC$Chat);
            }
            MessageObject messageObject = new MessageObject(this.currentAccount, tLRPC$TL_messages_peerDialogs.messages.get(0), (LongSparseArray<TLRPC$User>) longSparseArray, (LongSparseArray<TLRPC$Chat>) longSparseArray2, false, true);
            this.dialogMessage.put(j, messageObject);
            TLRPC$Dialog tLRPC$Dialog4 = this.promoDialog;
            if (tLRPC$Dialog4.last_message_date == 0) {
                tLRPC$Dialog4.last_message_date = messageObject.messageOwner.date;
            }
        }
        sortDialogs((LongSparseArray<TLRPC$Chat>) null);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$checkPromoInfoInternal$126() {
        TLRPC$Dialog tLRPC$Dialog = this.promoDialog;
        if (tLRPC$Dialog != null) {
            long j = tLRPC$Dialog.id;
            if (j < 0) {
                TLRPC$Chat chat = getChat(Long.valueOf(-j));
                if (ChatObject.isNotInChat(chat) || chat.restricted) {
                    removeDialog(this.promoDialog);
                }
            } else {
                removeDialog(tLRPC$Dialog);
            }
            this.promoDialog = null;
            sortDialogs((LongSparseArray<TLRPC$Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
    }

    /* access modifiers changed from: private */
    public void removePromoDialog() {
        TLRPC$Dialog tLRPC$Dialog = this.promoDialog;
        if (tLRPC$Dialog != null) {
            long j = tLRPC$Dialog.id;
            if (j < 0) {
                TLRPC$Chat chat = getChat(Long.valueOf(-j));
                if (ChatObject.isNotInChat(chat) || chat.restricted) {
                    removeDialog(this.promoDialog);
                }
            } else {
                removeDialog(tLRPC$Dialog);
            }
            this.promoDialog = null;
            sortDialogs((LongSparseArray<TLRPC$Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
    }

    public boolean isPromoDialog(long j, boolean z) {
        TLRPC$Dialog tLRPC$Dialog = this.promoDialog;
        return tLRPC$Dialog != null && tLRPC$Dialog.id == j && (!z || this.isLeftPromoChannel);
    }

    private String getUserNameForTyping(TLRPC$User tLRPC$User) {
        if (tLRPC$User == null) {
            return "";
        }
        String str = tLRPC$User.first_name;
        if (str != null && str.length() > 0) {
            return tLRPC$User.first_name;
        }
        String str2 = tLRPC$User.last_name;
        if (str2 == null || str2.length() <= 0) {
            return "";
        }
        return tLRPC$User.last_name;
    }

    private void updatePrintingStrings() {
        String str;
        String str2;
        int i;
        int i2;
        LongSparseArray longSparseArray = new LongSparseArray();
        LongSparseArray longSparseArray2 = new LongSparseArray();
        for (Map.Entry next : this.printingUsers.entrySet()) {
            Long l = (Long) next.getKey();
            boolean isEncryptedDialog = DialogObject.isEncryptedDialog(l.longValue());
            for (Map.Entry entry : ((ConcurrentHashMap) next.getValue()).entrySet()) {
                Integer num = (Integer) entry.getKey();
                ArrayList arrayList = (ArrayList) entry.getValue();
                SparseArray sparseArray = new SparseArray();
                SparseArray sparseArray2 = new SparseArray();
                longSparseArray.put(l.longValue(), sparseArray);
                longSparseArray2.put(l.longValue(), sparseArray2);
                String str3 = "IsTypingGroup";
                if (l.longValue() > 0 || isEncryptedDialog || arrayList.size() == 1) {
                    String str4 = str3;
                    PrintingUser printingUser = (PrintingUser) arrayList.get(0);
                    TLRPC$User user = getUser(Long.valueOf(printingUser.userId));
                    if (user != null) {
                        TLRPC$SendMessageAction tLRPC$SendMessageAction = printingUser.action;
                        if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageRecordAudioAction) {
                            if (l.longValue() >= 0 || isEncryptedDialog) {
                                sparseArray.put(num.intValue(), LocaleController.getString("RecordingAudio", NUM));
                            } else {
                                sparseArray.put(num.intValue(), LocaleController.formatString("IsRecordingAudio", NUM, getUserNameForTyping(user)));
                            }
                            sparseArray2.put(num.intValue(), 1);
                        } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageRecordRoundAction) {
                            if (l.longValue() >= 0 || isEncryptedDialog) {
                                sparseArray.put(num.intValue(), LocaleController.getString("RecordingRound", NUM));
                            } else {
                                sparseArray.put(num.intValue(), LocaleController.formatString("IsRecordingRound", NUM, getUserNameForTyping(user)));
                            }
                            sparseArray2.put(num.intValue(), 4);
                        } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageUploadRoundAction) {
                            if (l.longValue() >= 0 || isEncryptedDialog) {
                                sparseArray.put(num.intValue(), LocaleController.getString("SendingVideoStatus", NUM));
                            } else {
                                sparseArray.put(num.intValue(), LocaleController.formatString("IsSendingVideo", NUM, getUserNameForTyping(user)));
                            }
                            sparseArray2.put(num.intValue(), 4);
                        } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageUploadAudioAction) {
                            if (l.longValue() >= 0 || isEncryptedDialog) {
                                sparseArray.put(num.intValue(), LocaleController.getString("SendingAudio", NUM));
                            } else {
                                sparseArray.put(num.intValue(), LocaleController.formatString("IsSendingAudio", NUM, getUserNameForTyping(user)));
                            }
                            sparseArray2.put(num.intValue(), 2);
                        } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageUploadVideoAction) {
                            if (l.longValue() >= 0 || isEncryptedDialog) {
                                sparseArray.put(num.intValue(), LocaleController.getString("SendingVideoStatus", NUM));
                            } else {
                                sparseArray.put(num.intValue(), LocaleController.formatString("IsSendingVideo", NUM, getUserNameForTyping(user)));
                            }
                            sparseArray2.put(num.intValue(), 2);
                        } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageRecordVideoAction) {
                            if (l.longValue() >= 0 || isEncryptedDialog) {
                                sparseArray.put(num.intValue(), LocaleController.getString("RecordingVideoStatus", NUM));
                            } else {
                                sparseArray.put(num.intValue(), LocaleController.formatString("IsRecordingVideo", NUM, getUserNameForTyping(user)));
                            }
                            sparseArray2.put(num.intValue(), 2);
                        } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageUploadDocumentAction) {
                            if (l.longValue() >= 0 || isEncryptedDialog) {
                                sparseArray.put(num.intValue(), LocaleController.getString("SendingFile", NUM));
                            } else {
                                sparseArray.put(num.intValue(), LocaleController.formatString("IsSendingFile", NUM, getUserNameForTyping(user)));
                            }
                            sparseArray2.put(num.intValue(), 2);
                        } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageUploadPhotoAction) {
                            if (l.longValue() >= 0 || isEncryptedDialog) {
                                sparseArray.put(num.intValue(), LocaleController.getString("SendingPhoto", NUM));
                            } else {
                                sparseArray.put(num.intValue(), LocaleController.formatString("IsSendingPhoto", NUM, getUserNameForTyping(user)));
                            }
                            sparseArray2.put(num.intValue(), 2);
                        } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageGamePlayAction) {
                            if (l.longValue() >= 0 || isEncryptedDialog) {
                                sparseArray.put(num.intValue(), LocaleController.getString("SendingGame", NUM));
                            } else {
                                sparseArray.put(num.intValue(), LocaleController.formatString("IsSendingGame", NUM, getUserNameForTyping(user)));
                            }
                            sparseArray2.put(num.intValue(), 3);
                        } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageGeoLocationAction) {
                            if (l.longValue() >= 0 || isEncryptedDialog) {
                                sparseArray.put(num.intValue(), LocaleController.getString("SelectingLocation", NUM));
                            } else {
                                sparseArray.put(num.intValue(), LocaleController.formatString("IsSelectingLocation", NUM, getUserNameForTyping(user)));
                            }
                            sparseArray2.put(num.intValue(), 0);
                        } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageChooseContactAction) {
                            if (l.longValue() >= 0 || isEncryptedDialog) {
                                sparseArray.put(num.intValue(), LocaleController.getString("SelectingContact", NUM));
                            } else {
                                sparseArray.put(num.intValue(), LocaleController.formatString("IsSelectingContact", NUM, getUserNameForTyping(user)));
                            }
                            sparseArray2.put(num.intValue(), 0);
                        } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageEmojiInteractionSeen) {
                            String str5 = ((TLRPC$TL_sendMessageEmojiInteractionSeen) tLRPC$SendMessageAction).emoticon;
                            if (l.longValue() >= 0 || isEncryptedDialog) {
                                str = LocaleController.formatString("EnjoyngAnimations", NUM, str5);
                            } else {
                                str = LocaleController.formatString("IsEnjoyngAnimations", NUM, getUserNameForTyping(user), str5);
                            }
                            sparseArray.put(num.intValue(), str);
                            sparseArray2.put(num.intValue(), 5);
                        } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageChooseStickerAction) {
                            if (l.longValue() >= 0 || isEncryptedDialog) {
                                sparseArray.put(num.intValue(), LocaleController.getString("ChoosingSticker", NUM));
                            } else {
                                sparseArray.put(num.intValue(), LocaleController.formatString("IsChoosingSticker", NUM, getUserNameForTyping(user)));
                            }
                            sparseArray2.put(num.intValue(), 5);
                        } else {
                            if (l.longValue() >= 0 || isEncryptedDialog) {
                                sparseArray.put(num.intValue(), LocaleController.getString("Typing", NUM));
                            } else {
                                sparseArray.put(num.intValue(), LocaleController.formatString(str4, NUM, getUserNameForTyping(user)));
                            }
                            sparseArray2.put(num.intValue(), 0);
                        }
                    }
                } else {
                    StringBuilder sb = new StringBuilder();
                    Iterator it = arrayList.iterator();
                    int i3 = 0;
                    while (true) {
                        if (!it.hasNext()) {
                            str2 = str3;
                            i = i3;
                            break;
                        }
                        str2 = str3;
                        TLRPC$User user2 = getUser(Long.valueOf(((PrintingUser) it.next()).userId));
                        if (user2 != null) {
                            if (sb.length() != 0) {
                                sb.append(", ");
                            }
                            sb.append(getUserNameForTyping(user2));
                            i3++;
                        }
                        i = i3;
                        if (i == 2) {
                            break;
                        }
                        i3 = i;
                        str3 = str2;
                    }
                    if (sb.length() != 0) {
                        if (i == 1) {
                            sparseArray.put(num.intValue(), LocaleController.formatString(str2, NUM, sb.toString()));
                        } else if (arrayList.size() > 2) {
                            String pluralString = LocaleController.getPluralString("AndMoreTypingGroup", arrayList.size() - 2);
                            try {
                                sparseArray.put(num.intValue(), String.format(pluralString, new Object[]{sb.toString(), Integer.valueOf(arrayList.size() - 2)}));
                            } catch (Exception unused) {
                                sparseArray.put(num.intValue(), "LOC_ERR: AndMoreTypingGroup");
                            }
                        } else {
                            i2 = 0;
                            sparseArray.put(num.intValue(), LocaleController.formatString("AreTypingGroup", NUM, sb.toString()));
                            sparseArray2.put(num.intValue(), Integer.valueOf(i2));
                        }
                        i2 = 0;
                        sparseArray2.put(num.intValue(), Integer.valueOf(i2));
                    }
                }
            }
        }
        this.lastPrintingStringCount = longSparseArray.size();
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda81(this, longSparseArray, longSparseArray2));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updatePrintingStrings$130(LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        this.printingStrings = longSparseArray;
        this.printingStringsTypes = longSparseArray2;
    }

    /* JADX WARNING: Code restructure failed: missing block: B:5:0x000c, code lost:
        r3 = r0[r3];
     */
    /* renamed from: cancelTyping */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void lambda$sendTyping$133(int r3, long r4, int r6) {
        /*
            r2 = this;
            if (r3 < 0) goto L_0x0023
            androidx.collection.LongSparseArray<android.util.SparseArray<java.lang.Boolean>>[] r0 = r2.sendingTypings
            int r1 = r0.length
            if (r3 >= r1) goto L_0x0023
            r1 = r0[r3]
            if (r1 != 0) goto L_0x000c
            goto L_0x0023
        L_0x000c:
            r3 = r0[r3]
            java.lang.Object r0 = r3.get(r4)
            android.util.SparseArray r0 = (android.util.SparseArray) r0
            if (r0 != 0) goto L_0x0017
            return
        L_0x0017:
            r0.remove(r6)
            int r6 = r0.size()
            if (r6 != 0) goto L_0x0023
            r3.remove(r4)
        L_0x0023:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$sendTyping$133(int, long, int):void");
    }

    public boolean sendTyping(long j, int i, int i2, int i3) {
        return sendTyping(j, i, i2, (String) null, i3);
    }

    public boolean sendTyping(long j, int i, int i2, String str, int i3) {
        TLRPC$Chat chat;
        long j2 = j;
        int i4 = i;
        int i5 = i2;
        int i6 = i3;
        if (i5 < 0 || i5 >= this.sendingTypings.length || j2 == 0) {
            return false;
        }
        if (j2 >= 0) {
            TLRPC$User user = getUser(Long.valueOf(j));
            if (user != null) {
                if (user.id == getUserConfig().getClientUserId()) {
                    return false;
                }
                TLRPC$UserStatus tLRPC$UserStatus = user.status;
                if (!(tLRPC$UserStatus == null || tLRPC$UserStatus.expires == -100 || this.onlinePrivacy.containsKey(Long.valueOf(user.id)))) {
                    if (user.status.expires <= getConnectionsManager().getCurrentTime() - 30) {
                        return false;
                    }
                }
            }
        } else if (ChatObject.shouldSendAnonymously(getChat(Long.valueOf(-j2)))) {
            return false;
        }
        LongSparseArray<SparseArray<Boolean>>[] longSparseArrayArr = this.sendingTypings;
        LongSparseArray<SparseArray<Boolean>> longSparseArray = longSparseArrayArr[i5];
        if (longSparseArray == null) {
            longSparseArray = new LongSparseArray<>();
            longSparseArrayArr[i5] = longSparseArray;
        }
        SparseArray sparseArray = longSparseArray.get(j2);
        if (sparseArray == null) {
            sparseArray = new SparseArray();
            longSparseArray.put(j2, sparseArray);
        }
        if (sparseArray.get(i4) != null) {
            return false;
        }
        if (!DialogObject.isEncryptedDialog(j)) {
            TLRPC$TL_messages_setTyping tLRPC$TL_messages_setTyping = new TLRPC$TL_messages_setTyping();
            if (i4 != 0) {
                tLRPC$TL_messages_setTyping.top_msg_id = i4;
                tLRPC$TL_messages_setTyping.flags |= 1;
            }
            TLRPC$InputPeer inputPeer = getInputPeer(j);
            tLRPC$TL_messages_setTyping.peer = inputPeer;
            if (((inputPeer instanceof TLRPC$TL_inputPeerChannel) && ((chat = getChat(Long.valueOf(inputPeer.channel_id))) == null || !chat.megagroup)) || tLRPC$TL_messages_setTyping.peer == null) {
                return false;
            }
            if (i5 == 0) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageTypingAction();
            } else if (i5 == 1) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageRecordAudioAction();
            } else if (i5 == 2) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageCancelAction();
            } else if (i5 == 3) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageUploadDocumentAction();
            } else if (i5 == 4) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageUploadPhotoAction();
            } else if (i5 == 5) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageUploadVideoAction();
            } else if (i5 == 6) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageGamePlayAction();
            } else if (i5 == 7) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageRecordRoundAction();
            } else if (i5 == 8) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageUploadRoundAction();
            } else if (i5 == 9) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageUploadAudioAction();
            } else if (i5 == 10) {
                tLRPC$TL_messages_setTyping.action = new TLRPC$TL_sendMessageChooseStickerAction();
            } else if (i5 == 11) {
                TLRPC$TL_sendMessageEmojiInteractionSeen tLRPC$TL_sendMessageEmojiInteractionSeen = new TLRPC$TL_sendMessageEmojiInteractionSeen();
                tLRPC$TL_sendMessageEmojiInteractionSeen.emoticon = str;
                tLRPC$TL_messages_setTyping.action = tLRPC$TL_sendMessageEmojiInteractionSeen;
            }
            sparseArray.put(i4, Boolean.TRUE);
            int sendRequest = getConnectionsManager().sendRequest(tLRPC$TL_messages_setTyping, new MessagesController$$ExternalSyntheticLambda240(this, i2, j, i), 2);
            if (i6 != 0) {
                getConnectionsManager().bindRequestToGuid(sendRequest, i6);
            }
        } else if (i5 != 0) {
            return false;
        } else {
            TLRPC$EncryptedChat encryptedChat = getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(j)));
            byte[] bArr = encryptedChat.auth_key;
            if (bArr != null && bArr.length > 1 && (encryptedChat instanceof TLRPC$TL_encryptedChat)) {
                TLRPC$TL_messages_setEncryptedTyping tLRPC$TL_messages_setEncryptedTyping = new TLRPC$TL_messages_setEncryptedTyping();
                TLRPC$TL_inputEncryptedChat tLRPC$TL_inputEncryptedChat = new TLRPC$TL_inputEncryptedChat();
                tLRPC$TL_messages_setEncryptedTyping.peer = tLRPC$TL_inputEncryptedChat;
                tLRPC$TL_inputEncryptedChat.chat_id = encryptedChat.id;
                tLRPC$TL_inputEncryptedChat.access_hash = encryptedChat.access_hash;
                tLRPC$TL_messages_setEncryptedTyping.typing = true;
                sparseArray.put(i4, Boolean.TRUE);
                int sendRequest2 = getConnectionsManager().sendRequest(tLRPC$TL_messages_setEncryptedTyping, new MessagesController$$ExternalSyntheticLambda239(this, i2, j, i), 2);
                if (i6 != 0) {
                    getConnectionsManager().bindRequestToGuid(sendRequest2, i6);
                }
            }
        }
        return true;
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$sendTyping$132(int i, long j, int i2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda36(this, i, j, i2));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$sendTyping$134(int i, long j, int i2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda35(this, i, j, i2));
    }

    /* access modifiers changed from: protected */
    public void removeDeletedMessagesFromArray(long j, ArrayList<TLRPC$Message> arrayList) {
        int i = 0;
        int i2 = this.deletedHistory.get(j, 0);
        if (i2 != 0) {
            int size = arrayList.size();
            while (i < size) {
                if (arrayList.get(i).id <= i2) {
                    arrayList.remove(i);
                    i--;
                    size--;
                }
                i++;
            }
        }
    }

    public void loadMessages(long j, long j2, boolean z, int i, int i2, int i3, boolean z2, int i4, int i5, int i6, int i7, int i8, int i9, int i10, int i11) {
        loadMessages(j, j2, z, i, i2, i3, z2, i4, i5, i6, i7, i8, i9, i11, i9 != 0 ? i10 : 0, 0, 0, false, 0);
    }

    public void loadMessages(long j, long j2, boolean z, int i, int i2, int i3, boolean z2, int i4, int i5, int i6, int i7, int i8, int i9, int i10, int i11, int i12, int i13, boolean z3, int i14) {
        loadMessagesInternal(j, j2, z, i, i2, i3, z2, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, z3, i14, true, true);
    }

    /* access modifiers changed from: private */
    public void loadMessagesInternal(long j, long j2, boolean z, int i, int i2, int i3, boolean z2, int i4, int i5, int i6, int i7, int i8, int i9, int i10, int i11, int i12, int i13, boolean z3, int i14, boolean z4, boolean z5) {
        long j3 = j;
        int i15 = i;
        int i16 = i2;
        int i17 = i3;
        boolean z6 = z2;
        int i18 = i4;
        int i19 = i5;
        int i20 = i6;
        int i21 = i7;
        int i22 = i8;
        int i23 = i9;
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("load messages in chat " + j3 + " count " + i15 + " max_id " + i16 + " cache " + z6 + " mindate = " + i18 + " guid " + i19 + " load_type " + i20 + " last_message_id " + i21 + " mode " + i22 + " index " + i10 + " firstUnread " + i11 + " unread_count " + i12 + " last_date " + i13 + " queryFromServer " + z3);
        } else {
            int i24 = i10;
            boolean z7 = z3;
        }
        if (i23 == 0 && i22 != 2 && (z6 || DialogObject.isEncryptedDialog(j))) {
            getMessagesStorage().getMessages(j, j2, z, i, i2, i3, i4, i5, i6, i22 == 1, i9, i10, z5);
        } else if (i23 == 0) {
            int i25 = i19;
            if (i22 != 2) {
                if (i22 == 1) {
                    TLRPC$TL_messages_getScheduledHistory tLRPC$TL_messages_getScheduledHistory = new TLRPC$TL_messages_getScheduledHistory();
                    tLRPC$TL_messages_getScheduledHistory.peer = getInputPeer(j);
                    tLRPC$TL_messages_getScheduledHistory.hash = (long) i18;
                    MessagesController$$ExternalSyntheticLambda237 messagesController$$ExternalSyntheticLambda237 = r0;
                    ConnectionsManager connectionsManager = getConnectionsManager();
                    TLRPC$TL_messages_getScheduledHistory tLRPC$TL_messages_getScheduledHistory2 = tLRPC$TL_messages_getScheduledHistory;
                    int i26 = i20;
                    MessagesController$$ExternalSyntheticLambda237 messagesController$$ExternalSyntheticLambda2372 = new MessagesController$$ExternalSyntheticLambda237(this, i2, i3, j, j2, i, i5, i11, i7, i12, i13, i6, i8, i9, i10, z3, i14, z5);
                    getConnectionsManager().bindRequestToGuid(connectionsManager.sendRequest(tLRPC$TL_messages_getScheduledHistory2, messagesController$$ExternalSyntheticLambda237), i5);
                    return;
                }
                int i27 = i20;
                if (!z4 || !((i27 == 3 || i27 == 2) && i7 == 0)) {
                    TLRPC$TL_messages_getHistory tLRPC$TL_messages_getHistory = new TLRPC$TL_messages_getHistory();
                    tLRPC$TL_messages_getHistory.peer = getInputPeer(j);
                    if (i27 == 4) {
                        tLRPC$TL_messages_getHistory.add_offset = (-i15) + 5;
                    } else if (i27 == 3) {
                        tLRPC$TL_messages_getHistory.add_offset = (-i15) / 2;
                    } else if (i27 == 1) {
                        tLRPC$TL_messages_getHistory.add_offset = (-i15) - 1;
                    } else if (i27 == 2 && i16 != 0) {
                        tLRPC$TL_messages_getHistory.add_offset = (-i15) + 6;
                    } else if (j3 < 0 && i16 != 0) {
                        if (ChatObject.isChannel(getChat(Long.valueOf(-j3)))) {
                            tLRPC$TL_messages_getHistory.add_offset = -1;
                            tLRPC$TL_messages_getHistory.limit++;
                        }
                        tLRPC$TL_messages_getHistory.limit = i15;
                        tLRPC$TL_messages_getHistory.offset_id = i16;
                        tLRPC$TL_messages_getHistory.offset_date = i17;
                        TLRPC$TL_messages_getHistory tLRPC$TL_messages_getHistory2 = tLRPC$TL_messages_getHistory;
                        getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tLRPC$TL_messages_getHistory2, new MessagesController$$ExternalSyntheticLambda260(this, j, i, i2, i3, j2, i5, i11, i7, i12, i13, i6, i9, i10, z3, i14, z5, tLRPC$TL_messages_getHistory2)), i5);
                        return;
                    }
                    tLRPC$TL_messages_getHistory.limit = i15;
                    tLRPC$TL_messages_getHistory.offset_id = i16;
                    tLRPC$TL_messages_getHistory.offset_date = i17;
                    TLRPC$TL_messages_getHistory tLRPC$TL_messages_getHistory22 = tLRPC$TL_messages_getHistory;
                    getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tLRPC$TL_messages_getHistory22, new MessagesController$$ExternalSyntheticLambda260(this, j, i, i2, i3, j2, i5, i11, i7, i12, i13, i6, i9, i10, z3, i14, z5, tLRPC$TL_messages_getHistory22)), i5);
                    return;
                }
                TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs = r13;
                TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs2 = new TLRPC$TL_messages_getPeerDialogs();
                TLRPC$InputPeer inputPeer = getInputPeer(j);
                TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
                tLRPC$TL_inputDialogPeer.peer = inputPeer;
                tLRPC$TL_messages_getPeerDialogs2.peers.add(tLRPC$TL_inputDialogPeer);
                getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerDialogs2, new MessagesController$$ExternalSyntheticLambda265(this, j, j2, z, i, i2, i3, i4, i5, i6, i9, i10, i11, i13, z3, z5, tLRPC$TL_messages_getPeerDialogs));
            }
        } else if (i22 == 0) {
            TLRPC$TL_messages_getReplies tLRPC$TL_messages_getReplies = new TLRPC$TL_messages_getReplies();
            tLRPC$TL_messages_getReplies.peer = getInputPeer(j);
            tLRPC$TL_messages_getReplies.msg_id = i23;
            tLRPC$TL_messages_getReplies.offset_date = i17;
            if (i20 == 4) {
                tLRPC$TL_messages_getReplies.add_offset = (-i15) + 5;
            } else if (i20 == 3) {
                tLRPC$TL_messages_getReplies.add_offset = (-i15) / 2;
            } else if (i20 == 1) {
                tLRPC$TL_messages_getReplies.add_offset = (-i15) - 1;
            } else if (i20 == 2 && i16 != 0) {
                tLRPC$TL_messages_getReplies.add_offset = (-i15) + 10;
            } else if (j3 < 0 && i16 != 0 && ChatObject.isChannel(getChat(Long.valueOf(-j3)))) {
                tLRPC$TL_messages_getReplies.add_offset = -1;
                tLRPC$TL_messages_getReplies.limit++;
            }
            tLRPC$TL_messages_getReplies.limit = i15;
            tLRPC$TL_messages_getReplies.offset_id = i16;
            MessagesController$$ExternalSyntheticLambda236 messagesController$$ExternalSyntheticLambda236 = r0;
            TLRPC$TL_messages_getReplies tLRPC$TL_messages_getReplies2 = tLRPC$TL_messages_getReplies;
            MessagesController$$ExternalSyntheticLambda236 messagesController$$ExternalSyntheticLambda2362 = new MessagesController$$ExternalSyntheticLambda236(this, i, i2, i3, i11, i6, j, j2, i5, i7, i12, i13, i9, i10, z3, i14, z5, tLRPC$TL_messages_getReplies2);
            getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tLRPC$TL_messages_getReplies2, messagesController$$ExternalSyntheticLambda236), i5);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadMessagesInternal$136(int i, int i2, int i3, int i4, int i5, long j, long j2, int i6, int i7, int i8, int i9, int i10, int i11, boolean z, int i12, boolean z2, TLRPC$TL_messages_getReplies tLRPC$TL_messages_getReplies, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        int i13;
        int i14;
        int i15 = i3;
        int i16 = i4;
        if (tLObject != null) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
            if (tLRPC$messages_Messages.messages.size() > i) {
                tLRPC$messages_Messages.messages.remove(0);
            }
            if (!tLRPC$messages_Messages.messages.isEmpty()) {
                if (i15 != 0) {
                    ArrayList<TLRPC$Message> arrayList = tLRPC$messages_Messages.messages;
                    int i17 = arrayList.get(arrayList.size() - 1).id;
                    int size = tLRPC$messages_Messages.messages.size() - 1;
                    while (true) {
                        if (size < 0) {
                            break;
                        }
                        TLRPC$Message tLRPC$Message = tLRPC$messages_Messages.messages.get(size);
                        if (tLRPC$Message.date > i15) {
                            i17 = tLRPC$Message.id;
                            break;
                        }
                        size--;
                    }
                    int i18 = i5;
                    i14 = i17;
                    i13 = 0;
                    processLoadedMessages(tLRPC$messages_Messages, tLRPC$messages_Messages.messages.size(), j, j2, i, i14, i3, false, i6, i13, i7, i8, i9, i5, false, 0, i10, i11, z, i12, z2);
                    return;
                } else if (i16 != 0) {
                    if (i5 == 2 && i2 > 0) {
                        for (int size2 = tLRPC$messages_Messages.messages.size() - 1; size2 >= 0; size2--) {
                            TLRPC$Message tLRPC$Message2 = tLRPC$messages_Messages.messages.get(size2);
                            int i19 = tLRPC$Message2.id;
                            if (i19 > i16 && !tLRPC$Message2.out) {
                                i14 = i2;
                                i13 = i19;
                                break;
                            }
                        }
                    }
                    i14 = i2;
                    i13 = 0;
                    processLoadedMessages(tLRPC$messages_Messages, tLRPC$messages_Messages.messages.size(), j, j2, i, i14, i3, false, i6, i13, i7, i8, i9, i5, false, 0, i10, i11, z, i12, z2);
                    return;
                }
            }
            int i20 = i5;
            i14 = i2;
            i13 = 0;
            processLoadedMessages(tLRPC$messages_Messages, tLRPC$messages_Messages.messages.size(), j, j2, i, i14, i3, false, i6, i13, i7, i8, i9, i5, false, 0, i10, i11, z, i12, z2);
            return;
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda44(this, i6, tLRPC$TL_messages_getReplies, tLRPC$TL_error));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadMessagesInternal$135(int i, TLRPC$TL_messages_getReplies tLRPC$TL_messages_getReplies, TLRPC$TL_error tLRPC$TL_error) {
        getNotificationCenter().postNotificationName(NotificationCenter.loadingMessagesFailed, Integer.valueOf(i), tLRPC$TL_messages_getReplies, tLRPC$TL_error);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadMessagesInternal$137(int i, int i2, long j, long j2, int i3, int i4, int i5, int i6, int i7, int i8, int i9, int i10, int i11, int i12, boolean z, int i13, boolean z2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        int i14;
        int i15 = i2;
        if (tLObject != null) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
            if (!(tLRPC$messages_Messages instanceof TLRPC$TL_messages_messagesNotModified)) {
                if (i15 == 0 || tLRPC$messages_Messages.messages.isEmpty()) {
                    i14 = i;
                } else {
                    ArrayList<TLRPC$Message> arrayList = tLRPC$messages_Messages.messages;
                    int i16 = arrayList.get(arrayList.size() - 1).id;
                    int size = tLRPC$messages_Messages.messages.size() - 1;
                    while (true) {
                        if (size < 0) {
                            break;
                        }
                        TLRPC$Message tLRPC$Message = tLRPC$messages_Messages.messages.get(size);
                        if (tLRPC$Message.date > i15) {
                            i16 = tLRPC$Message.id;
                            break;
                        }
                        size--;
                    }
                    i14 = i16;
                }
                processLoadedMessages(tLRPC$messages_Messages, tLRPC$messages_Messages.messages.size(), j, j2, i3, i14, i2, false, i4, i5, i6, i7, i8, i9, false, i10, i11, i12, z, i13, z2);
            }
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadMessagesInternal$139(long j, long j2, boolean z, int i, int i2, int i3, int i4, int i5, int i6, int i7, int i8, int i9, int i10, boolean z2, boolean z3, TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject;
            if (!tLRPC$TL_messages_peerDialogs.dialogs.isEmpty()) {
                TLRPC$Dialog tLRPC$Dialog = tLRPC$TL_messages_peerDialogs.dialogs.get(0);
                if (tLRPC$Dialog.top_message != 0) {
                    TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
                    tLRPC$TL_messages_dialogs.chats = tLRPC$TL_messages_peerDialogs.chats;
                    tLRPC$TL_messages_dialogs.users = tLRPC$TL_messages_peerDialogs.users;
                    tLRPC$TL_messages_dialogs.dialogs = tLRPC$TL_messages_peerDialogs.dialogs;
                    tLRPC$TL_messages_dialogs.messages = tLRPC$TL_messages_peerDialogs.messages;
                    getMessagesStorage().putDialogs(tLRPC$TL_messages_dialogs, 2);
                }
                loadMessagesInternal(j, j2, z, i, i2, i3, false, i4, i5, i6, tLRPC$Dialog.top_message, 0, i7, i8, i9, tLRPC$Dialog.unread_count, i10, z2, tLRPC$Dialog.unread_mentions_count, false, z3);
            }
            return;
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda43(this, i5, tLRPC$TL_messages_getPeerDialogs, tLRPC$TL_error));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadMessagesInternal$138(int i, TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs, TLRPC$TL_error tLRPC$TL_error) {
        getNotificationCenter().postNotificationName(NotificationCenter.loadingMessagesFailed, Integer.valueOf(i), tLRPC$TL_messages_getPeerDialogs, tLRPC$TL_error);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadMessagesInternal$141(long j, int i, int i2, int i3, long j2, int i4, int i5, int i6, int i7, int i8, int i9, int i10, int i11, boolean z, int i12, boolean z2, TLRPC$TL_messages_getHistory tLRPC$TL_messages_getHistory, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        int i13;
        int i14 = i3;
        if (tLObject != null) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
            removeDeletedMessagesFromArray(j, tLRPC$messages_Messages.messages);
            if (tLRPC$messages_Messages.messages.size() > i) {
                tLRPC$messages_Messages.messages.remove(0);
            }
            if (i14 == 0 || tLRPC$messages_Messages.messages.isEmpty()) {
                i13 = i2;
            } else {
                ArrayList<TLRPC$Message> arrayList = tLRPC$messages_Messages.messages;
                int i15 = arrayList.get(arrayList.size() - 1).id;
                int size = tLRPC$messages_Messages.messages.size() - 1;
                while (true) {
                    if (size < 0) {
                        break;
                    }
                    TLRPC$Message tLRPC$Message = tLRPC$messages_Messages.messages.get(size);
                    if (tLRPC$Message.date > i14) {
                        i15 = tLRPC$Message.id;
                        break;
                    }
                    size--;
                }
                i13 = i15;
            }
            processLoadedMessages(tLRPC$messages_Messages, tLRPC$messages_Messages.messages.size(), j, j2, i, i13, i3, false, i4, i5, i6, i7, i8, i9, false, 0, i10, i11, z, i12, z2);
            return;
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda42(this, i4, tLRPC$TL_messages_getHistory, tLRPC$TL_error));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadMessagesInternal$140(int i, TLRPC$TL_messages_getHistory tLRPC$TL_messages_getHistory, TLRPC$TL_error tLRPC$TL_error) {
        getNotificationCenter().postNotificationName(NotificationCenter.loadingMessagesFailed, Integer.valueOf(i), tLRPC$TL_messages_getHistory, tLRPC$TL_error);
    }

    public void reloadWebPages(long j, HashMap<String, ArrayList<MessageObject>> hashMap, boolean z) {
        HashMap<String, ArrayList<MessageObject>> hashMap2 = z ? this.reloadingScheduledWebpages : this.reloadingWebpages;
        LongSparseArray<ArrayList<MessageObject>> longSparseArray = z ? this.reloadingScheduledWebpagesPending : this.reloadingWebpagesPending;
        for (Map.Entry next : hashMap.entrySet()) {
            String str = (String) next.getKey();
            ArrayList arrayList = (ArrayList) next.getValue();
            ArrayList arrayList2 = hashMap2.get(str);
            if (arrayList2 == null) {
                arrayList2 = new ArrayList();
                hashMap2.put(str, arrayList2);
            }
            arrayList2.addAll(arrayList);
            TLRPC$TL_messages_getWebPagePreview tLRPC$TL_messages_getWebPagePreview = new TLRPC$TL_messages_getWebPagePreview();
            tLRPC$TL_messages_getWebPagePreview.message = str;
            getConnectionsManager().sendRequest(tLRPC$TL_messages_getWebPagePreview, new MessagesController$$ExternalSyntheticLambda283(this, hashMap2, str, longSparseArray, j, z));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$reloadWebPages$143(HashMap hashMap, String str, LongSparseArray longSparseArray, long j, boolean z, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda107(this, hashMap, str, tLObject, longSparseArray, j, z));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$reloadWebPages$142(HashMap hashMap, String str, TLObject tLObject, LongSparseArray longSparseArray, long j, boolean z) {
        TLObject tLObject2 = tLObject;
        ArrayList arrayList = (ArrayList) hashMap.remove(str);
        if (arrayList != null) {
            TLRPC$TL_messages_messages tLRPC$TL_messages_messages = new TLRPC$TL_messages_messages();
            if (!(tLObject2 instanceof TLRPC$TL_messageMediaWebPage)) {
                for (int i = 0; i < arrayList.size(); i++) {
                    ((MessageObject) arrayList.get(i)).messageOwner.media.webpage = new TLRPC$TL_webPageEmpty();
                    tLRPC$TL_messages_messages.messages.add(((MessageObject) arrayList.get(i)).messageOwner);
                }
            } else {
                TLRPC$TL_messageMediaWebPage tLRPC$TL_messageMediaWebPage = (TLRPC$TL_messageMediaWebPage) tLObject2;
                TLRPC$WebPage tLRPC$WebPage = tLRPC$TL_messageMediaWebPage.webpage;
                if ((tLRPC$WebPage instanceof TLRPC$TL_webPage) || (tLRPC$WebPage instanceof TLRPC$TL_webPageEmpty)) {
                    for (int i2 = 0; i2 < arrayList.size(); i2++) {
                        ((MessageObject) arrayList.get(i2)).messageOwner.media.webpage = tLRPC$TL_messageMediaWebPage.webpage;
                        if (i2 == 0) {
                            ImageLoader.saveMessageThumbs(((MessageObject) arrayList.get(i2)).messageOwner);
                        }
                        tLRPC$TL_messages_messages.messages.add(((MessageObject) arrayList.get(i2)).messageOwner);
                    }
                } else {
                    LongSparseArray longSparseArray2 = longSparseArray;
                    longSparseArray.put(tLRPC$WebPage.id, arrayList);
                }
            }
            if (!tLRPC$TL_messages_messages.messages.isEmpty()) {
                getMessagesStorage().putMessages((TLRPC$messages_Messages) tLRPC$TL_messages_messages, j, -2, 0, false, z);
                getNotificationCenter().postNotificationName(NotificationCenter.replaceMessagesObjects, Long.valueOf(j), arrayList);
            }
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:139:0x03b3, code lost:
        if (r1[0] >= 133) goto L_0x03b8;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:144:0x03c2, code lost:
        if (org.telegram.messenger.Utilities.bytesToInt(r1) < 133) goto L_0x03c7;
     */
    /* JADX WARNING: Removed duplicated region for block: B:110:0x0307  */
    /* JADX WARNING: Removed duplicated region for block: B:115:0x0312  */
    /* JADX WARNING: Removed duplicated region for block: B:117:0x0329  */
    /* JADX WARNING: Removed duplicated region for block: B:150:0x03d9  */
    /* JADX WARNING: Removed duplicated region for block: B:180:0x041b A[SYNTHETIC] */
    /* JADX WARNING: Removed duplicated region for block: B:22:0x0107  */
    /* JADX WARNING: Removed duplicated region for block: B:39:0x015b A[ADDED_TO_REGION] */
    /* JADX WARNING: Removed duplicated region for block: B:55:0x01f1 A[RETURN] */
    /* JADX WARNING: Removed duplicated region for block: B:60:0x0206 A[LOOP:1: B:58:0x01fe->B:60:0x0206, LOOP_END] */
    /* JADX WARNING: Removed duplicated region for block: B:64:0x021f A[LOOP:2: B:62:0x0217->B:64:0x021f, LOOP_END] */
    /* JADX WARNING: Removed duplicated region for block: B:67:0x0239  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void processLoadedMessages(org.telegram.tgnet.TLRPC$messages_Messages r31, int r32, long r33, long r35, int r37, int r38, int r39, boolean r40, int r41, int r42, int r43, int r44, int r45, int r46, boolean r47, int r48, int r49, int r50, boolean r51, int r52, boolean r53) {
        /*
            r30 = this;
            r15 = r30
            r14 = r31
            r12 = r33
            r11 = r38
            r10 = r40
            r9 = r48
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x009d
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "processLoadedMessages size "
            r0.append(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r14.messages
            int r1 = r1.size()
            r0.append(r1)
            java.lang.String r1 = " in chat "
            r0.append(r1)
            r0.append(r12)
            java.lang.String r1 = " count "
            r0.append(r1)
            r8 = r37
            r0.append(r8)
            java.lang.String r1 = " max_id "
            r0.append(r1)
            r0.append(r11)
            java.lang.String r1 = " cache "
            r0.append(r1)
            r0.append(r10)
            java.lang.String r1 = " guid "
            r0.append(r1)
            r7 = r41
            r0.append(r7)
            java.lang.String r1 = " load_type "
            r0.append(r1)
            r6 = r46
            r0.append(r6)
            java.lang.String r1 = " last_message_id "
            r0.append(r1)
            r4 = r43
            r0.append(r4)
            java.lang.String r1 = " index "
            r0.append(r1)
            r5 = r50
            r0.append(r5)
            java.lang.String r1 = " firstUnread "
            r0.append(r1)
            r3 = r42
            r0.append(r3)
            java.lang.String r1 = " unread_count "
            r0.append(r1)
            r1 = r44
            r0.append(r1)
            java.lang.String r2 = " last_date "
            r0.append(r2)
            r2 = r45
            r0.append(r2)
            java.lang.String r1 = " queryFromServer "
            r0.append(r1)
            r1 = r51
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
            goto L_0x00ad
        L_0x009d:
            r8 = r37
            r7 = r41
            r3 = r42
            r4 = r43
            r2 = r45
            r6 = r46
            r5 = r50
            r1 = r51
        L_0x00ad:
            long r22 = android.os.SystemClock.elapsedRealtime()
            boolean r0 = r14 instanceof org.telegram.tgnet.TLRPC$TL_messages_channelMessages
            if (r0 == 0) goto L_0x0101
            long r6 = -r12
            if (r9 != 0) goto L_0x0101
            if (r49 != 0) goto L_0x0101
            org.telegram.messenger.support.LongSparseIntArray r0 = r15.channelsPts
            int r0 = r0.get(r6)
            if (r0 != 0) goto L_0x0101
            org.telegram.messenger.MessagesStorage r0 = r30.getMessagesStorage()
            int r0 = r0.getChannelPtsSync(r6)
            if (r0 != 0) goto L_0x0101
            org.telegram.messenger.support.LongSparseIntArray r0 = r15.channelsPts
            int r1 = r14.pts
            r0.put(r6, r1)
            androidx.collection.LongSparseArray<java.util.ArrayList<java.lang.Integer>> r0 = r15.needShortPollChannels
            int r0 = r0.indexOfKey(r6)
            if (r0 < 0) goto L_0x00f9
            org.telegram.messenger.support.LongSparseIntArray r0 = r15.shortPollChannels
            int r0 = r0.indexOfKey(r6)
            if (r0 >= 0) goto L_0x00f9
            r18 = 2
            r19 = 0
            r21 = 0
            r0 = r30
            r1 = r6
            r3 = r18
            r4 = r19
            r7 = 0
            r8 = 1
            r6 = r21
            r0.getChannelDifference(r1, r3, r4, r6)
            r4 = 0
            goto L_0x00fe
        L_0x00f9:
            r4 = 0
            r8 = 1
            r15.getChannelDifference(r6)
        L_0x00fe:
            r24 = 1
            goto L_0x0105
        L_0x0101:
            r4 = 0
            r8 = 1
            r24 = 0
        L_0x0105:
            if (r10 != 0) goto L_0x010c
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r0 = r14.messages
            org.telegram.messenger.ImageLoader.saveMessagesThumbs(r0)
        L_0x010c:
            if (r39 != 0) goto L_0x0112
            if (r11 != 0) goto L_0x0112
            r6 = 1
            goto L_0x0113
        L_0x0112:
            r6 = 0
        L_0x0113:
            r0 = 60000(0xea60, double:2.9644E-319)
            r25 = 0
            if (r9 != r8) goto L_0x0137
            long r2 = android.os.SystemClock.elapsedRealtime()
            androidx.collection.LongSparseArray<java.lang.Long> r5 = r15.lastScheduledServerQueryTime
            java.lang.Long r6 = java.lang.Long.valueOf(r25)
            java.lang.Object r5 = r5.get(r12, r6)
            java.lang.Long r5 = (java.lang.Long) r5
            long r5 = r5.longValue()
            long r2 = r2 - r5
            int r5 = (r2 > r0 ? 1 : (r2 == r0 ? 0 : -1))
            if (r5 <= 0) goto L_0x0135
        L_0x0133:
            r6 = 1
            goto L_0x0155
        L_0x0135:
            r6 = 0
            goto L_0x0155
        L_0x0137:
            if (r32 != 0) goto L_0x0135
            if (r6 == 0) goto L_0x0133
            long r2 = android.os.SystemClock.elapsedRealtime()
            androidx.collection.LongSparseArray<java.lang.Long> r5 = r15.lastServerQueryTime
            java.lang.Long r6 = java.lang.Long.valueOf(r25)
            java.lang.Object r5 = r5.get(r12, r6)
            java.lang.Long r5 = (java.lang.Long) r5
            long r5 = r5.longValue()
            long r2 = r2 - r5
            int r5 = (r2 > r0 ? 1 : (r2 == r0 ? 0 : -1))
            if (r5 <= 0) goto L_0x0135
            goto L_0x0133
        L_0x0155:
            boolean r0 = org.telegram.messenger.DialogObject.isEncryptedDialog(r33)
            if (r0 != 0) goto L_0x01f2
            if (r10 == 0) goto L_0x01f2
            if (r6 == 0) goto L_0x01f2
            r0 = 2
            if (r9 != r0) goto L_0x0165
        L_0x0162:
            r16 = 0
            goto L_0x01b6
        L_0x0165:
            if (r9 != r8) goto L_0x01a8
            androidx.collection.LongSparseArray<java.lang.Long> r0 = r15.lastScheduledServerQueryTime
            long r1 = android.os.SystemClock.elapsedRealtime()
            java.lang.Long r1 = java.lang.Long.valueOf(r1)
            r0.put(r12, r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r0 = r14.messages
            int r0 = r0.size()
            r1 = r25
            r6 = 0
        L_0x017d:
            if (r6 >= r0) goto L_0x01a3
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r3 = r14.messages
            java.lang.Object r3 = r3.get(r6)
            org.telegram.tgnet.TLRPC$Message r3 = (org.telegram.tgnet.TLRPC$Message) r3
            int r5 = r3.id
            if (r5 >= 0) goto L_0x018c
            goto L_0x019f
        L_0x018c:
            long r4 = (long) r5
            long r1 = org.telegram.messenger.MediaDataController.calcHash(r1, r4)
            int r4 = r3.edit_date
            long r4 = (long) r4
            long r1 = org.telegram.messenger.MediaDataController.calcHash(r1, r4)
            int r3 = r3.date
            long r3 = (long) r3
            long r1 = org.telegram.messenger.MediaDataController.calcHash(r1, r3)
        L_0x019f:
            int r6 = r6 + 1
            r4 = 0
            goto L_0x017d
        L_0x01a3:
            int r0 = (int) r1
            int r0 = r0 - r8
            r16 = r0
            goto L_0x01b6
        L_0x01a8:
            androidx.collection.LongSparseArray<java.lang.Long> r0 = r15.lastServerQueryTime
            long r1 = android.os.SystemClock.elapsedRealtime()
            java.lang.Long r1 = java.lang.Long.valueOf(r1)
            r0.put(r12, r1)
            goto L_0x0162
        L_0x01b6:
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda62 r27 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda62
            r0 = r27
            r1 = r30
            r2 = r33
            r7 = 0
            r4 = r35
            r6 = r37
            r7 = r46
            r8 = r51
            r9 = r42
            r10 = r38
            r11 = r39
            r12 = r16
            r13 = r41
            r14 = r43
            r15 = r48
            r16 = r49
            r17 = r50
            r18 = r44
            r19 = r45
            r20 = r52
            r21 = r53
            r0.<init>(r1, r2, r4, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r27)
            r8 = r31
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r0 = r8.messages
            boolean r0 = r0.isEmpty()
            if (r0 == 0) goto L_0x01f3
            return
        L_0x01f2:
            r8 = r14
        L_0x01f3:
            androidx.collection.LongSparseArray r9 = new androidx.collection.LongSparseArray
            r9.<init>()
            androidx.collection.LongSparseArray r10 = new androidx.collection.LongSparseArray
            r10.<init>()
            r6 = 0
        L_0x01fe:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r0 = r8.users
            int r0 = r0.size()
            if (r6 >= r0) goto L_0x0216
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r0 = r8.users
            java.lang.Object r0 = r0.get(r6)
            org.telegram.tgnet.TLRPC$User r0 = (org.telegram.tgnet.TLRPC$User) r0
            long r1 = r0.id
            r9.put(r1, r0)
            int r6 = r6 + 1
            goto L_0x01fe
        L_0x0216:
            r6 = 0
        L_0x0217:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r0 = r8.chats
            int r0 = r0.size()
            if (r6 >= r0) goto L_0x022f
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r0 = r8.chats
            java.lang.Object r0 = r0.get(r6)
            org.telegram.tgnet.TLRPC$Chat r0 = (org.telegram.tgnet.TLRPC$Chat) r0
            long r1 = r0.id
            r10.put(r1, r0)
            int r6 = r6 + 1
            goto L_0x0217
        L_0x022f:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r0 = r8.messages
            int r11 = r0.size()
            r15 = r30
            if (r40 != 0) goto L_0x0307
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r0 = r15.dialogs_read_inbox_max
            java.lang.Long r1 = java.lang.Long.valueOf(r33)
            java.lang.Object r0 = r0.get(r1)
            java.lang.Integer r0 = (java.lang.Integer) r0
            if (r0 != 0) goto L_0x0260
            org.telegram.messenger.MessagesStorage r0 = r30.getMessagesStorage()
            r12 = r33
            r14 = 0
            int r0 = r0.getDialogReadMax(r14, r12)
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r15.dialogs_read_inbox_max
            java.lang.Long r2 = java.lang.Long.valueOf(r33)
            r1.put(r2, r0)
            goto L_0x0263
        L_0x0260:
            r12 = r33
            r14 = 0
        L_0x0263:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r15.dialogs_read_outbox_max
            java.lang.Long r2 = java.lang.Long.valueOf(r33)
            java.lang.Object r1 = r1.get(r2)
            java.lang.Integer r1 = (java.lang.Integer) r1
            if (r1 != 0) goto L_0x0288
            org.telegram.messenger.MessagesStorage r1 = r30.getMessagesStorage()
            r7 = 1
            int r1 = r1.getDialogReadMax(r7, r12)
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r2 = r15.dialogs_read_outbox_max
            java.lang.Long r3 = java.lang.Long.valueOf(r33)
            r2.put(r3, r1)
            goto L_0x0289
        L_0x0288:
            r7 = 1
        L_0x0289:
            r6 = 0
        L_0x028a:
            if (r6 >= r11) goto L_0x02e5
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r2 = r8.messages
            java.lang.Object r2 = r2.get(r6)
            org.telegram.tgnet.TLRPC$Message r2 = (org.telegram.tgnet.TLRPC$Message) r2
            r5 = r48
            if (r5 != 0) goto L_0x02e2
            org.telegram.tgnet.TLRPC$MessageAction r3 = r2.action
            boolean r4 = r3 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatDeleteUser
            if (r4 == 0) goto L_0x02b9
            long r3 = r3.user_id
            java.lang.Object r3 = r9.get(r3)
            org.telegram.tgnet.TLRPC$User r3 = (org.telegram.tgnet.TLRPC$User) r3
            if (r3 == 0) goto L_0x02b9
            boolean r3 = r3.bot
            if (r3 == 0) goto L_0x02b9
            org.telegram.tgnet.TLRPC$TL_replyKeyboardHide r3 = new org.telegram.tgnet.TLRPC$TL_replyKeyboardHide
            r3.<init>()
            r2.reply_markup = r3
            int r3 = r2.flags
            r3 = r3 | 64
            r2.flags = r3
        L_0x02b9:
            org.telegram.tgnet.TLRPC$MessageAction r3 = r2.action
            boolean r4 = r3 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatMigrateTo
            if (r4 != 0) goto L_0x02de
            boolean r3 = r3 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChannelCreate
            if (r3 == 0) goto L_0x02c4
            goto L_0x02de
        L_0x02c4:
            if (r49 != 0) goto L_0x02db
            boolean r3 = r2.out
            if (r3 == 0) goto L_0x02cc
            r3 = r1
            goto L_0x02cd
        L_0x02cc:
            r3 = r0
        L_0x02cd:
            int r3 = r3.intValue()
            int r4 = r2.id
            if (r3 >= r4) goto L_0x02d7
            r3 = 1
            goto L_0x02d8
        L_0x02d7:
            r3 = 0
        L_0x02d8:
            r2.unread = r3
            goto L_0x02e2
        L_0x02db:
            r2.unread = r7
            goto L_0x02e2
        L_0x02de:
            r2.unread = r14
            r2.media_unread = r14
        L_0x02e2:
            int r6 = r6 + 1
            goto L_0x028a
        L_0x02e5:
            r5 = r48
            if (r49 != 0) goto L_0x0309
            org.telegram.messenger.MessagesStorage r0 = r30.getMessagesStorage()
            if (r5 != r7) goto L_0x02f2
            r16 = 1
            goto L_0x02f4
        L_0x02f2:
            r16 = 0
        L_0x02f4:
            r1 = r31
            r2 = r33
            r4 = r46
            r6 = r5
            r5 = r38
            r14 = r6
            r6 = r24
            r14 = 1
            r7 = r16
            r0.putMessages((org.telegram.tgnet.TLRPC$messages_Messages) r1, (long) r2, (int) r4, (int) r5, (boolean) r6, (boolean) r7)
            goto L_0x030a
        L_0x0307:
            r12 = r33
        L_0x0309:
            r14 = 1
        L_0x030a:
            if (r53 != 0) goto L_0x0329
            boolean r0 = org.telegram.messenger.DialogObject.isEncryptedDialog(r33)
            if (r0 == 0) goto L_0x0329
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda45 r0 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda45
            r32 = r0
            r33 = r30
            r34 = r41
            r35 = r31
            r36 = r40
            r37 = r47
            r38 = r43
            r32.<init>(r33, r34, r35, r36, r37, r38)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r0)
            return
        L_0x0329:
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            java.util.ArrayList r7 = new java.util.ArrayList
            r7.<init>()
            java.util.HashMap r6 = new java.util.HashMap
            r6.<init>()
            r3 = r25
            r5 = 0
        L_0x033b:
            if (r5 >= r11) goto L_0x0429
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r8.messages
            java.lang.Object r1 = r1.get(r5)
            r2 = r1
            org.telegram.tgnet.TLRPC$Message r2 = (org.telegram.tgnet.TLRPC$Message) r2
            r2.dialog_id = r12
            long r16 = android.os.SystemClock.elapsedRealtime()
            org.telegram.messenger.MessageObject r1 = new org.telegram.messenger.MessageObject
            int r14 = r15.currentAccount
            r18 = 1
            r19 = 1
            r35 = r1
            r36 = r2
            r2 = r14
            r28 = r3
            r3 = r36
            r4 = r9
            r14 = r5
            r5 = r10
            r15 = r6
            r6 = r18
            r39 = r11
            r11 = r7
            r7 = r19
            r1.<init>((int) r2, (org.telegram.tgnet.TLRPC$Message) r3, (androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$User>) r4, (androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Chat>) r5, (boolean) r6, (boolean) r7)
            long r1 = android.os.SystemClock.elapsedRealtime()
            long r1 = r1 - r16
            r3 = r28
            long r3 = r3 + r1
            r5 = r48
            r1 = 1
            r2 = r35
            if (r5 != r1) goto L_0x037d
            r6 = 1
            goto L_0x037e
        L_0x037d:
            r6 = 0
        L_0x037e:
            r2.scheduled = r6
            r0.add(r2)
            if (r40 == 0) goto L_0x0419
            r6 = r36
            boolean r7 = r6.legacy
            r1 = 133(0x85, float:1.86E-43)
            if (r7 == 0) goto L_0x039b
            int r7 = r6.layer
            if (r7 >= r1) goto L_0x039b
            int r1 = r6.id
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            r11.add(r1)
            goto L_0x03d1
        L_0x039b:
            org.telegram.tgnet.TLRPC$MessageMedia r7 = r6.media
            boolean r1 = r7 instanceof org.telegram.tgnet.TLRPC$TL_messageMediaUnsupported
            if (r1 == 0) goto L_0x03d1
            byte[] r1 = r7.bytes
            if (r1 == 0) goto L_0x03d1
            int r7 = r1.length
            if (r7 == 0) goto L_0x03c5
            int r7 = r1.length
            r36 = r0
            r0 = 1
            if (r7 != r0) goto L_0x03b6
            r7 = 0
            byte r0 = r1[r7]
            r7 = 133(0x85, float:1.86E-43)
            if (r0 < r7) goto L_0x03c7
            goto L_0x03b8
        L_0x03b6:
            r7 = 133(0x85, float:1.86E-43)
        L_0x03b8:
            int r0 = r1.length
            r7 = 4
            if (r0 != r7) goto L_0x03d3
            int r0 = org.telegram.messenger.Utilities.bytesToInt(r1)
            r1 = 133(0x85, float:1.86E-43)
            if (r0 >= r1) goto L_0x03d3
            goto L_0x03c7
        L_0x03c5:
            r36 = r0
        L_0x03c7:
            int r0 = r6.id
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)
            r11.add(r0)
            goto L_0x03d3
        L_0x03d1:
            r36 = r0
        L_0x03d3:
            org.telegram.tgnet.TLRPC$MessageMedia r0 = r6.media
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_messageMediaWebPage
            if (r1 == 0) goto L_0x041b
            org.telegram.tgnet.TLRPC$WebPage r0 = r0.webpage
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_webPagePending
            if (r1 == 0) goto L_0x03f5
            int r0 = r0.date
            org.telegram.tgnet.ConnectionsManager r1 = r30.getConnectionsManager()
            int r1 = r1.getCurrentTime()
            if (r0 > r1) goto L_0x03f5
            int r0 = r6.id
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)
            r11.add(r0)
            goto L_0x041b
        L_0x03f5:
            org.telegram.tgnet.TLRPC$MessageMedia r0 = r6.media
            org.telegram.tgnet.TLRPC$WebPage r0 = r0.webpage
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_webPageUrlPending
            if (r1 == 0) goto L_0x041b
            java.lang.String r0 = r0.url
            java.lang.Object r0 = r15.get(r0)
            java.util.ArrayList r0 = (java.util.ArrayList) r0
            if (r0 != 0) goto L_0x0415
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            org.telegram.tgnet.TLRPC$MessageMedia r1 = r6.media
            org.telegram.tgnet.TLRPC$WebPage r1 = r1.webpage
            java.lang.String r1 = r1.url
            r15.put(r1, r0)
        L_0x0415:
            r0.add(r2)
            goto L_0x041b
        L_0x0419:
            r36 = r0
        L_0x041b:
            int r0 = r14 + 1
            r5 = r0
            r7 = r11
            r6 = r15
            r14 = 1
            r15 = r30
            r0 = r36
            r11 = r39
            goto L_0x033b
        L_0x0429:
            r5 = r48
            r36 = r0
            r15 = r6
            r11 = r7
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x045d
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "process time = "
            r0.append(r1)
            long r1 = android.os.SystemClock.elapsedRealtime()
            long r1 = r1 - r22
            r0.append(r1)
            java.lang.String r1 = " file time = "
            r0.append(r1)
            r0.append(r3)
            java.lang.String r1 = " for dialog = "
            r0.append(r1)
            r0.append(r12)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x045d:
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda174 r24 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda174
            r14 = r36
            r0 = r24
            r1 = r30
            r2 = r31
            r3 = r40
            r4 = r48
            r5 = r51
            r6 = r46
            r7 = r42
            r8 = r37
            r9 = r33
            r22 = r11
            r11 = r14
            r12 = r53
            r13 = r41
            r14 = r32
            r23 = r15
            r15 = r47
            r16 = r43
            r17 = r44
            r18 = r45
            r19 = r50
            r20 = r38
            r21 = r52
            r0.<init>(r1, r2, r3, r4, r5, r6, r7, r8, r9, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r24)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.processLoadedMessages(org.telegram.tgnet.TLRPC$messages_Messages, int, long, long, int, int, int, boolean, int, int, int, int, int, int, boolean, int, int, int, boolean, int, boolean):void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processLoadedMessages$144(long j, long j2, int i, int i2, boolean z, int i3, int i4, int i5, int i6, int i7, int i8, int i9, int i10, int i11, int i12, int i13, int i14, boolean z2) {
        loadMessagesInternal(j, j2, false, i, (i2 != 2 || !z) ? i4 : i3, i5, false, i6, i7, i2, i8, i9, i10, i11, i3, i12, i13, z, i14, true, z2);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processLoadedMessages$145(int i, TLRPC$messages_Messages tLRPC$messages_Messages, boolean z, boolean z2, int i2) {
        getNotificationCenter().postNotificationName(NotificationCenter.messagesDidLoadWithoutProcess, Integer.valueOf(i), Integer.valueOf(tLRPC$messages_Messages.messages.size()), Boolean.valueOf(z), Boolean.valueOf(z2), Integer.valueOf(i2));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processLoadedMessages$147(TLRPC$messages_Messages tLRPC$messages_Messages, boolean z, int i, boolean z2, int i2, int i3, int i4, long j, ArrayList arrayList, boolean z3, int i5, int i6, boolean z4, int i7, int i8, int i9, int i10, int i11, int i12, ArrayList arrayList2, HashMap hashMap) {
        int i13;
        boolean z5;
        long j2;
        MessagesController messagesController;
        int i14;
        HashMap hashMap2;
        int i15;
        int i16;
        TLRPC$messages_Messages tLRPC$messages_Messages2 = tLRPC$messages_Messages;
        boolean z6 = z;
        int i17 = i;
        long j3 = j;
        putUsers(tLRPC$messages_Messages2.users, z6);
        putChats(tLRPC$messages_Messages2.chats, z6);
        if (i17 == 1) {
            int i18 = i2;
            i13 = 0;
        } else {
            int i19 = i2;
            if (!z2 || i19 != 2) {
                i15 = i3;
                i16 = Integer.MAX_VALUE;
            } else {
                i16 = Integer.MAX_VALUE;
                for (int i20 = 0; i20 < tLRPC$messages_Messages2.messages.size(); i20++) {
                    TLRPC$Message tLRPC$Message = tLRPC$messages_Messages2.messages.get(i20);
                    if (!tLRPC$Message.out || tLRPC$Message.from_scheduled) {
                        int i21 = tLRPC$Message.id;
                        if (i21 > i3 && i21 < i16) {
                            i16 = i21;
                        }
                    } else {
                        int i22 = i3;
                    }
                }
                i15 = i3;
            }
            i13 = i16 == Integer.MAX_VALUE ? i15 : i16;
        }
        int i23 = i4;
        if (i17 == 1 && i23 == 1) {
            getNotificationCenter().postNotificationName(NotificationCenter.scheduledMessagesUpdated, Long.valueOf(j), Integer.valueOf(arrayList.size()));
        }
        if (!DialogObject.isEncryptedDialog(j)) {
            getMediaDataController().loadReplyMessagesForMessages(arrayList, j, i17 == 1, new MessagesController$$ExternalSyntheticLambda185(this, z3, i5, i6, z, z4, i7, j, i4, arrayList, i13, i8, i9, i2, i10, i11, i12, i));
            z5 = true;
        } else {
            z5 = true;
            getNotificationCenter().postNotificationName(NotificationCenter.messagesDidLoad, Long.valueOf(j), Integer.valueOf(i4), arrayList, Boolean.valueOf(z), Integer.valueOf(i13), Integer.valueOf(i7), Integer.valueOf(i8), Integer.valueOf(i9), Integer.valueOf(i2), Boolean.valueOf(z4), Integer.valueOf(i5), Integer.valueOf(i10), Integer.valueOf(i11), Integer.valueOf(i12), Integer.valueOf(i));
        }
        if (!arrayList2.isEmpty()) {
            i14 = i;
            messagesController = this;
            j2 = j;
            messagesController.reloadMessages(arrayList2, j2, i14 == z5);
        } else {
            messagesController = this;
            i14 = i;
            j2 = j;
        }
        if (!hashMap.isEmpty()) {
            if (i14 == z5) {
                hashMap2 = hashMap;
            } else {
                hashMap2 = hashMap;
                z5 = false;
            }
            messagesController.reloadWebPages(j2, hashMap2, z5);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processLoadedMessages$146(boolean z, int i, int i2, boolean z2, boolean z3, int i3, long j, int i4, ArrayList arrayList, int i5, int i6, int i7, int i8, int i9, int i10, int i11, int i12) {
        if (!z) {
            getNotificationCenter().postNotificationName(NotificationCenter.messagesDidLoadWithoutProcess, Integer.valueOf(i), Integer.valueOf(i2), Boolean.valueOf(z2), Boolean.valueOf(z3), Integer.valueOf(i3));
            return;
        }
        getNotificationCenter().postNotificationName(NotificationCenter.messagesDidLoad, Long.valueOf(j), Integer.valueOf(i4), arrayList, Boolean.valueOf(z2), Integer.valueOf(i5), Integer.valueOf(i3), Integer.valueOf(i6), Integer.valueOf(i7), Integer.valueOf(i8), Boolean.valueOf(z3), Integer.valueOf(i), Integer.valueOf(i9), Integer.valueOf(i10), Integer.valueOf(i11), Integer.valueOf(i12));
    }

    public void loadHintDialogs() {
        if (this.hintDialogs.isEmpty() && !TextUtils.isEmpty(this.installReferer)) {
            TLRPC$TL_help_getRecentMeUrls tLRPC$TL_help_getRecentMeUrls = new TLRPC$TL_help_getRecentMeUrls();
            tLRPC$TL_help_getRecentMeUrls.referer = this.installReferer;
            getConnectionsManager().sendRequest(tLRPC$TL_help_getRecentMeUrls, new MessagesController$$ExternalSyntheticLambda216(this));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadHintDialogs$149(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda120(this, tLObject));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadHintDialogs$148(TLObject tLObject) {
        TLRPC$TL_help_recentMeUrls tLRPC$TL_help_recentMeUrls = (TLRPC$TL_help_recentMeUrls) tLObject;
        putUsers(tLRPC$TL_help_recentMeUrls.users, false);
        putChats(tLRPC$TL_help_recentMeUrls.chats, false);
        this.hintDialogs.clear();
        this.hintDialogs.addAll(tLRPC$TL_help_recentMeUrls.urls);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    private TLRPC$TL_dialogFolder ensureFolderDialogExists(int i, boolean[] zArr) {
        if (i == 0) {
            return null;
        }
        long makeFolderDialogId = DialogObject.makeFolderDialogId(i);
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(makeFolderDialogId);
        if (tLRPC$Dialog instanceof TLRPC$TL_dialogFolder) {
            if (zArr != null) {
                zArr[0] = false;
            }
            return (TLRPC$TL_dialogFolder) tLRPC$Dialog;
        }
        if (zArr != null) {
            zArr[0] = true;
        }
        TLRPC$TL_dialogFolder tLRPC$TL_dialogFolder = new TLRPC$TL_dialogFolder();
        tLRPC$TL_dialogFolder.id = makeFolderDialogId;
        tLRPC$TL_dialogFolder.peer = new TLRPC$TL_peerUser();
        TLRPC$TL_folder tLRPC$TL_folder = new TLRPC$TL_folder();
        tLRPC$TL_dialogFolder.folder = tLRPC$TL_folder;
        tLRPC$TL_folder.id = i;
        tLRPC$TL_folder.title = LocaleController.getString("ArchivedChats", NUM);
        tLRPC$TL_dialogFolder.pinned = true;
        int i2 = 0;
        for (int i3 = 0; i3 < this.allDialogs.size(); i3++) {
            TLRPC$Dialog tLRPC$Dialog2 = this.allDialogs.get(i3);
            if (tLRPC$Dialog2.pinned) {
                i2 = Math.max(tLRPC$Dialog2.pinnedNum, i2);
            } else if (tLRPC$Dialog2.id != this.promoDialogId) {
                break;
            }
        }
        tLRPC$TL_dialogFolder.pinnedNum = i2 + 1;
        TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
        tLRPC$TL_messages_dialogs.dialogs.add(tLRPC$TL_dialogFolder);
        getMessagesStorage().putDialogs(tLRPC$TL_messages_dialogs, 1);
        this.dialogs_dict.put(makeFolderDialogId, tLRPC$TL_dialogFolder);
        this.allDialogs.add(0, tLRPC$TL_dialogFolder);
        return tLRPC$TL_dialogFolder;
    }

    /* access modifiers changed from: private */
    /* renamed from: removeFolder */
    public void lambda$onFolderEmpty$150(int i) {
        long makeFolderDialogId = DialogObject.makeFolderDialogId(i);
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(makeFolderDialogId);
        if (tLRPC$Dialog != null) {
            this.dialogs_dict.remove(makeFolderDialogId);
            this.allDialogs.remove(tLRPC$Dialog);
            sortDialogs((LongSparseArray<TLRPC$Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
            getNotificationCenter().postNotificationName(NotificationCenter.folderBecomeEmpty, Integer.valueOf(i));
        }
    }

    /* access modifiers changed from: protected */
    public void onFolderEmpty(int i) {
        if (getUserConfig().getDialogLoadOffsets(i)[0] == 2147483647L) {
            lambda$onFolderEmpty$150(i);
            return;
        }
        loadDialogs(i, 0, 10, false, new MessagesController$$ExternalSyntheticLambda29(this, i));
    }

    public void checkIfFolderEmpty(int i) {
        if (i != 0) {
            getMessagesStorage().checkIfFolderEmpty(i);
        }
    }

    public int addDialogToFolder(long j, int i, int i2, long j2) {
        ArrayList arrayList = new ArrayList(1);
        arrayList.add(Long.valueOf(j));
        return addDialogToFolder(arrayList, i, i2, (ArrayList<TLRPC$TL_inputFolderPeer>) null, j2);
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r12v0, resolved type: boolean[]} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v9, resolved type: org.telegram.tgnet.NativeByteBuffer} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r12v3, resolved type: boolean[]} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v10, resolved type: org.telegram.tgnet.NativeByteBuffer} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v11, resolved type: org.telegram.tgnet.NativeByteBuffer} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r12v4, resolved type: boolean[]} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v19, resolved type: org.telegram.tgnet.NativeByteBuffer} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* JADX WARNING: Removed duplicated region for block: B:55:0x0129  */
    /* JADX WARNING: Removed duplicated region for block: B:57:0x0145 A[RETURN, SYNTHETIC] */
    /* JADX WARNING: Removed duplicated region for block: B:58:0x0147  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public int addDialogToFolder(java.util.ArrayList<java.lang.Long> r24, int r25, int r26, java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_inputFolderPeer> r27, long r28) {
        /*
            r23 = this;
            r1 = r23
            r8 = r25
            r0 = r26
            org.telegram.tgnet.TLRPC$TL_folders_editPeerFolders r9 = new org.telegram.tgnet.TLRPC$TL_folders_editPeerFolders
            r9.<init>()
            r10 = 0
            r12 = 0
            r13 = 1
            r14 = 0
            int r2 = (r28 > r10 ? 1 : (r28 == r10 ? 0 : -1))
            if (r2 != 0) goto L_0x011b
            org.telegram.messenger.UserConfig r2 = r23.getUserConfig()
            long r15 = r2.getClientUserId()
            int r7 = r24.size()
            r3 = r12
            r2 = 0
            r5 = 0
            r17 = 0
        L_0x0025:
            if (r5 >= r7) goto L_0x00c0
            r6 = r24
            java.lang.Object r4 = r6.get(r5)
            java.lang.Long r4 = (java.lang.Long) r4
            long r10 = r4.longValue()
            boolean r4 = org.telegram.messenger.DialogObject.isChatDialog(r10)
            if (r4 != 0) goto L_0x0046
            boolean r4 = org.telegram.messenger.DialogObject.isUserDialog(r10)
            if (r4 != 0) goto L_0x0046
            boolean r4 = org.telegram.messenger.DialogObject.isEncryptedDialog(r10)
            if (r4 != 0) goto L_0x0046
            goto L_0x0064
        L_0x0046:
            if (r8 != r13) goto L_0x005a
            int r4 = (r10 > r15 ? 1 : (r10 == r15 ? 0 : -1))
            if (r4 == 0) goto L_0x0064
            r20 = 777000(0xbdb28, double:3.83889E-318)
            int r4 = (r10 > r20 ? 1 : (r10 == r20 ? 0 : -1))
            if (r4 == 0) goto L_0x0064
            boolean r4 = r1.isPromoDialog(r10, r14)
            if (r4 == 0) goto L_0x005a
            goto L_0x0064
        L_0x005a:
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r4 = r1.dialogs_dict
            java.lang.Object r4 = r4.get(r10)
            org.telegram.tgnet.TLRPC$Dialog r4 = (org.telegram.tgnet.TLRPC$Dialog) r4
            if (r4 != 0) goto L_0x0069
        L_0x0064:
            r21 = r5
            r22 = r7
            goto L_0x00b8
        L_0x0069:
            r4.folder_id = r8
            if (r0 <= 0) goto L_0x0072
            r4.pinned = r13
            r4.pinnedNum = r0
            goto L_0x0076
        L_0x0072:
            r4.pinned = r14
            r4.pinnedNum = r14
        L_0x0076:
            if (r3 != 0) goto L_0x0080
            boolean[] r2 = new boolean[r13]
            r1.ensureFolderDialogExists(r8, r2)
            r20 = r2
            goto L_0x0082
        L_0x0080:
            r20 = r3
        L_0x0082:
            boolean r2 = org.telegram.messenger.DialogObject.isEncryptedDialog(r10)
            if (r2 == 0) goto L_0x0099
            org.telegram.messenger.MessagesStorage r2 = r23.getMessagesStorage()
            r3 = 0
            r4 = 0
            r21 = r5
            r5 = r10
            r22 = r7
            r7 = r25
            r2.setDialogsFolderId(r3, r4, r5, r7)
            goto L_0x00b5
        L_0x0099:
            r21 = r5
            r22 = r7
            org.telegram.tgnet.TLRPC$TL_inputFolderPeer r2 = new org.telegram.tgnet.TLRPC$TL_inputFolderPeer
            r2.<init>()
            r2.folder_id = r8
            org.telegram.tgnet.TLRPC$InputPeer r3 = r1.getInputPeer((long) r10)
            r2.peer = r3
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_inputFolderPeer> r3 = r9.folder_peers
            r3.add(r2)
            int r2 = r2.getObjectSize()
            int r17 = r17 + r2
        L_0x00b5:
            r3 = r20
            r2 = 1
        L_0x00b8:
            int r5 = r21 + 1
            r7 = r22
            r10 = 0
            goto L_0x0025
        L_0x00c0:
            if (r2 != 0) goto L_0x00c3
            return r14
        L_0x00c3:
            r1.sortDialogs(r12)
            org.telegram.messenger.NotificationCenter r0 = r23.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.dialogsNeedReload
            java.lang.Object[] r4 = new java.lang.Object[r14]
            r0.postNotificationName(r2, r4)
            if (r17 == 0) goto L_0x0115
            org.telegram.tgnet.NativeByteBuffer r2 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x0105 }
            int r0 = r17 + 12
            r2.<init>((int) r0)     // Catch:{ Exception -> 0x0105 }
            r0 = 17
            r2.writeInt32(r0)     // Catch:{ Exception -> 0x0102 }
            r2.writeInt32(r8)     // Catch:{ Exception -> 0x0102 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_inputFolderPeer> r0 = r9.folder_peers     // Catch:{ Exception -> 0x0102 }
            int r0 = r0.size()     // Catch:{ Exception -> 0x0102 }
            r2.writeInt32(r0)     // Catch:{ Exception -> 0x0102 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_inputFolderPeer> r0 = r9.folder_peers     // Catch:{ Exception -> 0x0102 }
            int r0 = r0.size()     // Catch:{ Exception -> 0x0102 }
            r4 = 0
        L_0x00f2:
            if (r4 >= r0) goto L_0x010a
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_inputFolderPeer> r5 = r9.folder_peers     // Catch:{ Exception -> 0x0102 }
            java.lang.Object r5 = r5.get(r4)     // Catch:{ Exception -> 0x0102 }
            org.telegram.tgnet.TLRPC$TL_inputFolderPeer r5 = (org.telegram.tgnet.TLRPC$TL_inputFolderPeer) r5     // Catch:{ Exception -> 0x0102 }
            r5.serializeToStream(r2)     // Catch:{ Exception -> 0x0102 }
            int r4 = r4 + 1
            goto L_0x00f2
        L_0x0102:
            r0 = move-exception
            r12 = r2
            goto L_0x0106
        L_0x0105:
            r0 = move-exception
        L_0x0106:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
            r2 = r12
        L_0x010a:
            org.telegram.messenger.MessagesStorage r0 = r23.getMessagesStorage()
            long r4 = r0.createPendingTask(r2)
            r18 = r4
            goto L_0x0117
        L_0x0115:
            r18 = 0
        L_0x0117:
            r12 = r3
            r2 = r18
            goto L_0x0121
        L_0x011b:
            r0 = r27
            r9.folder_peers = r0
            r2 = r28
        L_0x0121:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_inputFolderPeer> r0 = r9.folder_peers
            boolean r0 = r0.isEmpty()
            if (r0 != 0) goto L_0x0143
            org.telegram.tgnet.ConnectionsManager r0 = r23.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda257 r4 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda257
            r4.<init>(r1, r2)
            r0.sendRequest(r9, r4)
            org.telegram.messenger.MessagesStorage r2 = r23.getMessagesStorage()
            r3 = 0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_inputFolderPeer> r4 = r9.folder_peers
            r5 = 0
            r7 = r25
            r2.setDialogsFolderId(r3, r4, r5, r7)
        L_0x0143:
            if (r12 != 0) goto L_0x0147
            r13 = 0
            goto L_0x014c
        L_0x0147:
            boolean r0 = r12[r14]
            if (r0 == 0) goto L_0x014c
            r13 = 2
        L_0x014c:
            return r13
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.addDialogToFolder(java.util.ArrayList, int, int, java.util.ArrayList, long):int");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$addDialogToFolder$151(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public void loadDialogs(int i, int i2, int i3, boolean z) {
        loadDialogs(i, i2, i3, z, (Runnable) null);
    }

    public void loadDialogs(int i, int i2, int i3, boolean z, Runnable runnable) {
        MessageObject messageObject;
        long j;
        int i4 = i;
        int i5 = i2;
        int i6 = i3;
        boolean z2 = z;
        if (!this.loadingDialogs.get(i4) && !this.resetingDialogs) {
            boolean z3 = true;
            this.loadingDialogs.put(i4, true);
            NotificationCenter notificationCenter = getNotificationCenter();
            int i7 = NotificationCenter.dialogsNeedReload;
            notificationCenter.postNotificationName(i7, new Object[0]);
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("folderId = " + i4 + " load cacheOffset = " + i5 + " count = " + i6 + " cache = " + z2);
            }
            if (z2) {
                MessagesStorage messagesStorage = getMessagesStorage();
                int i8 = i5 == 0 ? 0 : this.nextDialogsCacheOffset.get(i4, 0);
                if (!(i4 == 0 && i5 == 0)) {
                    z3 = false;
                }
                messagesStorage.getDialogs(i4, i8, i6, z3);
                return;
            }
            TLRPC$TL_messages_getDialogs tLRPC$TL_messages_getDialogs = new TLRPC$TL_messages_getDialogs();
            tLRPC$TL_messages_getDialogs.limit = i6;
            tLRPC$TL_messages_getDialogs.exclude_pinned = true;
            if (i4 != 0) {
                tLRPC$TL_messages_getDialogs.flags |= 2;
                tLRPC$TL_messages_getDialogs.folder_id = i4;
            }
            long[] dialogLoadOffsets = getUserConfig().getDialogLoadOffsets(i4);
            if (dialogLoadOffsets[0] == -1) {
                ArrayList<TLRPC$Dialog> dialogs = getDialogs(i);
                int size = dialogs.size() - 1;
                while (true) {
                    if (size < 0) {
                        z3 = false;
                        break;
                    }
                    TLRPC$Dialog tLRPC$Dialog = dialogs.get(size);
                    if (!tLRPC$Dialog.pinned && !DialogObject.isEncryptedDialog(tLRPC$Dialog.id) && tLRPC$Dialog.top_message > 0 && (messageObject = this.dialogMessage.get(tLRPC$Dialog.id)) != null && messageObject.getId() > 0) {
                        TLRPC$Message tLRPC$Message = messageObject.messageOwner;
                        tLRPC$TL_messages_getDialogs.offset_date = tLRPC$Message.date;
                        tLRPC$TL_messages_getDialogs.offset_id = tLRPC$Message.id;
                        TLRPC$Peer tLRPC$Peer = tLRPC$Message.peer_id;
                        long j2 = tLRPC$Peer.channel_id;
                        if (j2 == 0) {
                            j2 = tLRPC$Peer.chat_id;
                            if (j2 == 0) {
                                j = tLRPC$Peer.user_id;
                                tLRPC$TL_messages_getDialogs.offset_peer = getInputPeer(j);
                            }
                        }
                        j = -j2;
                        tLRPC$TL_messages_getDialogs.offset_peer = getInputPeer(j);
                    } else {
                        size--;
                    }
                }
                if (!z3) {
                    tLRPC$TL_messages_getDialogs.offset_peer = new TLRPC$TL_inputPeerEmpty();
                }
            } else if (dialogLoadOffsets[0] == 2147483647L) {
                this.dialogsEndReached.put(i4, true);
                this.serverDialogsEndReached.put(i4, true);
                this.loadingDialogs.put(i4, false);
                getNotificationCenter().postNotificationName(i7, new Object[0]);
                return;
            } else {
                int i9 = (int) dialogLoadOffsets[0];
                tLRPC$TL_messages_getDialogs.offset_id = i9;
                tLRPC$TL_messages_getDialogs.offset_date = (int) dialogLoadOffsets[1];
                if (i9 == 0) {
                    tLRPC$TL_messages_getDialogs.offset_peer = new TLRPC$TL_inputPeerEmpty();
                } else {
                    if (dialogLoadOffsets[4] != 0) {
                        TLRPC$TL_inputPeerChannel tLRPC$TL_inputPeerChannel = new TLRPC$TL_inputPeerChannel();
                        tLRPC$TL_messages_getDialogs.offset_peer = tLRPC$TL_inputPeerChannel;
                        tLRPC$TL_inputPeerChannel.channel_id = dialogLoadOffsets[4];
                    } else if (dialogLoadOffsets[2] != 0) {
                        TLRPC$TL_inputPeerUser tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerUser();
                        tLRPC$TL_messages_getDialogs.offset_peer = tLRPC$TL_inputPeerUser;
                        tLRPC$TL_inputPeerUser.user_id = dialogLoadOffsets[2];
                    } else {
                        TLRPC$TL_inputPeerChat tLRPC$TL_inputPeerChat = new TLRPC$TL_inputPeerChat();
                        tLRPC$TL_messages_getDialogs.offset_peer = tLRPC$TL_inputPeerChat;
                        tLRPC$TL_inputPeerChat.chat_id = dialogLoadOffsets[3];
                    }
                    tLRPC$TL_messages_getDialogs.offset_peer.access_hash = dialogLoadOffsets[5];
                }
            }
            getConnectionsManager().sendRequest(tLRPC$TL_messages_getDialogs, new MessagesController$$ExternalSyntheticLambda238(this, i4, i6, runnable));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadDialogs$152(int i, int i2, Runnable runnable, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$messages_Dialogs tLRPC$messages_Dialogs = (TLRPC$messages_Dialogs) tLObject;
            processLoadedDialogs(tLRPC$messages_Dialogs, (ArrayList<TLRPC$EncryptedChat>) null, i, 0, i2, 0, false, false, false);
            if (runnable != null && tLRPC$messages_Dialogs.dialogs.isEmpty()) {
                AndroidUtilities.runOnUIThread(runnable);
            }
        }
    }

    public void loadGlobalNotificationsSettings() {
        if (this.loadingNotificationSettings == 0 && !getUserConfig().notificationsSettingsLoaded) {
            SharedPreferences notificationsSettings = getNotificationsSettings(this.currentAccount);
            SharedPreferences.Editor editor = null;
            if (notificationsSettings.contains("EnableGroup")) {
                boolean z = notificationsSettings.getBoolean("EnableGroup", true);
                SharedPreferences.Editor edit = notificationsSettings.edit();
                if (!z) {
                    edit.putInt("EnableGroup2", Integer.MAX_VALUE);
                    edit.putInt("EnableChannel2", Integer.MAX_VALUE);
                }
                edit.remove("EnableGroup").commit();
                editor = edit;
            }
            if (notificationsSettings.contains("EnableAll")) {
                boolean z2 = notificationsSettings.getBoolean("EnableAll", true);
                if (editor == null) {
                    editor = notificationsSettings.edit();
                }
                if (!z2) {
                    editor.putInt("EnableAll2", Integer.MAX_VALUE);
                }
                editor.remove("EnableAll").commit();
            }
            if (editor != null) {
                editor.commit();
            }
            this.loadingNotificationSettings = 3;
            for (int i = 0; i < 3; i++) {
                TLRPC$TL_account_getNotifySettings tLRPC$TL_account_getNotifySettings = new TLRPC$TL_account_getNotifySettings();
                if (i == 0) {
                    tLRPC$TL_account_getNotifySettings.peer = new TLRPC$TL_inputNotifyChats();
                } else if (i == 1) {
                    tLRPC$TL_account_getNotifySettings.peer = new TLRPC$TL_inputNotifyUsers();
                } else {
                    tLRPC$TL_account_getNotifySettings.peer = new TLRPC$TL_inputNotifyBroadcasts();
                }
                getConnectionsManager().sendRequest(tLRPC$TL_account_getNotifySettings, new MessagesController$$ExternalSyntheticLambda230(this, i));
            }
        }
        if (!getUserConfig().notificationsSignUpSettingsLoaded) {
            loadSignUpNotificationsSettings();
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadGlobalNotificationsSettings$154(int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda121(this, tLObject, i));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadGlobalNotificationsSettings$153(TLObject tLObject, int i) {
        if (tLObject != null) {
            this.loadingNotificationSettings--;
            TLRPC$TL_peerNotifySettings tLRPC$TL_peerNotifySettings = (TLRPC$TL_peerNotifySettings) tLObject;
            SharedPreferences.Editor edit = this.notificationsPreferences.edit();
            if (i == 0) {
                if ((tLRPC$TL_peerNotifySettings.flags & 1) != 0) {
                    edit.putBoolean("EnablePreviewGroup", tLRPC$TL_peerNotifySettings.show_previews);
                }
                if ((tLRPC$TL_peerNotifySettings.flags & 4) != 0) {
                    edit.putInt("EnableGroup2", tLRPC$TL_peerNotifySettings.mute_until);
                }
            } else if (i == 1) {
                if ((tLRPC$TL_peerNotifySettings.flags & 1) != 0) {
                    edit.putBoolean("EnablePreviewAll", tLRPC$TL_peerNotifySettings.show_previews);
                }
                if ((tLRPC$TL_peerNotifySettings.flags & 4) != 0) {
                    edit.putInt("EnableAll2", tLRPC$TL_peerNotifySettings.mute_until);
                }
            } else {
                if ((tLRPC$TL_peerNotifySettings.flags & 1) != 0) {
                    edit.putBoolean("EnablePreviewChannel", tLRPC$TL_peerNotifySettings.show_previews);
                }
                if ((tLRPC$TL_peerNotifySettings.flags & 4) != 0) {
                    edit.putInt("EnableChannel2", tLRPC$TL_peerNotifySettings.mute_until);
                }
            }
            edit.commit();
            if (this.loadingNotificationSettings == 0) {
                getUserConfig().notificationsSettingsLoaded = true;
                getUserConfig().saveConfig(false);
            }
        }
    }

    public void loadSignUpNotificationsSettings() {
        if (!this.loadingNotificationSignUpSettings) {
            this.loadingNotificationSignUpSettings = true;
            getConnectionsManager().sendRequest(new TLRPC$TL_account_getContactSignUpNotification(), new MessagesController$$ExternalSyntheticLambda222(this));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadSignUpNotificationsSettings$156(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda118(this, tLObject));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadSignUpNotificationsSettings$155(TLObject tLObject) {
        this.loadingNotificationSignUpSettings = false;
        SharedPreferences.Editor edit = this.notificationsPreferences.edit();
        boolean z = tLObject instanceof TLRPC$TL_boolFalse;
        this.enableJoined = z;
        edit.putBoolean("EnableContactJoined", z);
        edit.commit();
        getUserConfig().notificationsSignUpSettingsLoaded = true;
        getUserConfig().saveConfig(false);
    }

    public void forceResetDialogs() {
        resetDialogs(true, getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
        getNotificationsController().deleteAllNotificationChannels();
    }

    /* access modifiers changed from: protected */
    public void loadUnknownDialog(TLRPC$InputPeer tLRPC$InputPeer, long j) {
        NativeByteBuffer nativeByteBuffer;
        if (tLRPC$InputPeer != null) {
            long peerDialogId = DialogObject.getPeerDialogId(tLRPC$InputPeer);
            if (this.gettingUnknownDialogs.indexOfKey(peerDialogId) < 0) {
                this.gettingUnknownDialogs.put(peerDialogId, Boolean.TRUE);
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("load unknown dialog " + peerDialogId);
                }
                TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs = new TLRPC$TL_messages_getPeerDialogs();
                TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
                tLRPC$TL_inputDialogPeer.peer = tLRPC$InputPeer;
                tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer);
                if (j == 0) {
                    NativeByteBuffer nativeByteBuffer2 = null;
                    try {
                        nativeByteBuffer = new NativeByteBuffer(tLRPC$InputPeer.getObjectSize() + 4);
                        try {
                            nativeByteBuffer.writeInt32(15);
                            tLRPC$InputPeer.serializeToStream(nativeByteBuffer);
                        } catch (Exception e) {
                            e = e;
                            nativeByteBuffer2 = nativeByteBuffer;
                        }
                    } catch (Exception e2) {
                        e = e2;
                        FileLog.e((Throwable) e);
                        nativeByteBuffer = nativeByteBuffer2;
                        j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                        getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerDialogs, new MessagesController$$ExternalSyntheticLambda262(this, j, peerDialogId));
                    }
                    j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                }
                getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerDialogs, new MessagesController$$ExternalSyntheticLambda262(this, j, peerDialogId));
            }
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadUnknownDialog$157(long j, long j2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        long j3 = j;
        if (tLObject != null) {
            TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject;
            if (!tLRPC$TL_messages_peerDialogs.dialogs.isEmpty()) {
                TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
                tLRPC$TL_messages_dialogs.dialogs.addAll(tLRPC$TL_messages_peerDialogs.dialogs);
                tLRPC$TL_messages_dialogs.messages.addAll(tLRPC$TL_messages_peerDialogs.messages);
                tLRPC$TL_messages_dialogs.users.addAll(tLRPC$TL_messages_peerDialogs.users);
                tLRPC$TL_messages_dialogs.chats.addAll(tLRPC$TL_messages_peerDialogs.chats);
                processLoadedDialogs(tLRPC$TL_messages_dialogs, (ArrayList<TLRPC$EncryptedChat>) null, ((TLRPC$TL_dialog) tLRPC$TL_messages_peerDialogs.dialogs.get(0)).folder_id, 0, 1, this.DIALOGS_LOAD_TYPE_UNKNOWN, false, false, false);
            }
        }
        if (j3 != 0) {
            getMessagesStorage().removePendingTask(j3);
        }
        this.gettingUnknownDialogs.delete(j2);
    }

    private void fetchFolderInLoadedPinnedDialogs(TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs) {
        TLRPC$InputPeer tLRPC$InputPeer;
        int size = tLRPC$TL_messages_peerDialogs.dialogs.size();
        int i = 0;
        for (int i2 = 0; i2 < size; i2++) {
            TLRPC$Dialog tLRPC$Dialog = tLRPC$TL_messages_peerDialogs.dialogs.get(i2);
            if (tLRPC$Dialog instanceof TLRPC$TL_dialogFolder) {
                TLRPC$TL_dialogFolder tLRPC$TL_dialogFolder = (TLRPC$TL_dialogFolder) tLRPC$Dialog;
                long peerDialogId = DialogObject.getPeerDialogId(tLRPC$Dialog.peer);
                if (tLRPC$TL_dialogFolder.top_message == 0 || peerDialogId == 0) {
                    tLRPC$TL_messages_peerDialogs.dialogs.remove(tLRPC$TL_dialogFolder);
                } else {
                    int size2 = tLRPC$TL_messages_peerDialogs.messages.size();
                    for (int i3 = 0; i3 < size2; i3++) {
                        TLRPC$Message tLRPC$Message = tLRPC$TL_messages_peerDialogs.messages.get(i3);
                        if (peerDialogId == MessageObject.getDialogId(tLRPC$Message) && tLRPC$Dialog.top_message == tLRPC$Message.id) {
                            TLRPC$TL_dialog tLRPC$TL_dialog = new TLRPC$TL_dialog();
                            tLRPC$TL_dialog.peer = tLRPC$Dialog.peer;
                            tLRPC$TL_dialog.top_message = tLRPC$Dialog.top_message;
                            tLRPC$TL_dialog.folder_id = tLRPC$TL_dialogFolder.folder.id;
                            tLRPC$TL_dialog.flags |= 16;
                            tLRPC$TL_messages_peerDialogs.dialogs.add(tLRPC$TL_dialog);
                            TLRPC$Peer tLRPC$Peer = tLRPC$Dialog.peer;
                            if (!(tLRPC$Peer instanceof TLRPC$TL_peerChannel)) {
                                if (!(tLRPC$Peer instanceof TLRPC$TL_peerChat)) {
                                    tLRPC$InputPeer = new TLRPC$TL_inputPeerUser();
                                    tLRPC$InputPeer.user_id = tLRPC$Dialog.peer.user_id;
                                    int size3 = tLRPC$TL_messages_peerDialogs.users.size();
                                    while (true) {
                                        if (i >= size3) {
                                            break;
                                        }
                                        TLRPC$User tLRPC$User = tLRPC$TL_messages_peerDialogs.users.get(i);
                                        if (tLRPC$User.id == tLRPC$InputPeer.user_id) {
                                            tLRPC$InputPeer.access_hash = tLRPC$User.access_hash;
                                            break;
                                        }
                                        i++;
                                    }
                                } else {
                                    tLRPC$InputPeer = new TLRPC$TL_inputPeerChat();
                                    tLRPC$InputPeer.chat_id = tLRPC$Dialog.peer.chat_id;
                                }
                            } else {
                                tLRPC$InputPeer = new TLRPC$TL_inputPeerChannel();
                                tLRPC$InputPeer.channel_id = tLRPC$Dialog.peer.channel_id;
                                int size4 = tLRPC$TL_messages_peerDialogs.chats.size();
                                while (true) {
                                    if (i >= size4) {
                                        break;
                                    }
                                    TLRPC$Chat tLRPC$Chat = tLRPC$TL_messages_peerDialogs.chats.get(i);
                                    if (tLRPC$Chat.id == tLRPC$InputPeer.channel_id) {
                                        tLRPC$InputPeer.access_hash = tLRPC$Chat.access_hash;
                                        break;
                                    }
                                    i++;
                                }
                            }
                            loadUnknownDialog(tLRPC$InputPeer, 0);
                            return;
                        }
                    }
                    return;
                }
            }
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$resetDialogs$158(int i, int i2, int i3, int i4, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            this.resetDialogsPinned = (TLRPC$TL_messages_peerDialogs) tLObject;
            for (int i5 = 0; i5 < this.resetDialogsPinned.dialogs.size(); i5++) {
                this.resetDialogsPinned.dialogs.get(i5).pinned = true;
            }
            resetDialogs(false, i, i2, i3, i4);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$resetDialogs$159(int i, int i2, int i3, int i4, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            this.resetDialogsAll = (TLRPC$messages_Dialogs) tLObject;
            resetDialogs(false, i, i2, i3, i4);
        }
    }

    private void resetDialogs(boolean z, int i, int i2, int i3, int i4) {
        TLRPC$messages_Dialogs tLRPC$messages_Dialogs;
        long j;
        TLRPC$User tLRPC$User;
        TLRPC$Chat tLRPC$Chat;
        MessageObject messageObject;
        TLRPC$Chat tLRPC$Chat2;
        int i5 = 0;
        if (z) {
            if (!this.resetingDialogs) {
                getUserConfig().setPinnedDialogsLoaded(1, false);
                this.resetingDialogs = true;
                int i6 = i;
                int i7 = i2;
                int i8 = i3;
                int i9 = i4;
                getConnectionsManager().sendRequest(new TLRPC$TL_messages_getPinnedDialogs(), new MessagesController$$ExternalSyntheticLambda235(this, i6, i7, i8, i9));
                TLRPC$TL_messages_getDialogs tLRPC$TL_messages_getDialogs = new TLRPC$TL_messages_getDialogs();
                tLRPC$TL_messages_getDialogs.limit = 100;
                tLRPC$TL_messages_getDialogs.exclude_pinned = true;
                tLRPC$TL_messages_getDialogs.offset_peer = new TLRPC$TL_inputPeerEmpty();
                getConnectionsManager().sendRequest(tLRPC$TL_messages_getDialogs, new MessagesController$$ExternalSyntheticLambda234(this, i6, i7, i8, i9));
            }
        } else if (this.resetDialogsPinned != null && (tLRPC$messages_Dialogs = this.resetDialogsAll) != null) {
            int size = tLRPC$messages_Dialogs.messages.size();
            int size2 = this.resetDialogsAll.dialogs.size();
            fetchFolderInLoadedPinnedDialogs(this.resetDialogsPinned);
            this.resetDialogsAll.dialogs.addAll(this.resetDialogsPinned.dialogs);
            this.resetDialogsAll.messages.addAll(this.resetDialogsPinned.messages);
            this.resetDialogsAll.users.addAll(this.resetDialogsPinned.users);
            this.resetDialogsAll.chats.addAll(this.resetDialogsPinned.chats);
            LongSparseArray longSparseArray = new LongSparseArray();
            LongSparseArray longSparseArray2 = new LongSparseArray();
            LongSparseArray longSparseArray3 = new LongSparseArray();
            LongSparseArray longSparseArray4 = new LongSparseArray();
            for (int i10 = 0; i10 < this.resetDialogsAll.users.size(); i10++) {
                TLRPC$User tLRPC$User2 = this.resetDialogsAll.users.get(i10);
                longSparseArray3.put(tLRPC$User2.id, tLRPC$User2);
            }
            for (int i11 = 0; i11 < this.resetDialogsAll.chats.size(); i11++) {
                TLRPC$Chat tLRPC$Chat3 = this.resetDialogsAll.chats.get(i11);
                longSparseArray4.put(tLRPC$Chat3.id, tLRPC$Chat3);
            }
            TLRPC$Message tLRPC$Message = null;
            int i12 = 0;
            while (true) {
                j = 0;
                if (i12 >= this.resetDialogsAll.messages.size()) {
                    break;
                }
                TLRPC$Message tLRPC$Message2 = this.resetDialogsAll.messages.get(i12);
                if (i12 < size && (tLRPC$Message == null || tLRPC$Message2.date < tLRPC$Message.date)) {
                    tLRPC$Message = tLRPC$Message2;
                }
                TLRPC$Peer tLRPC$Peer = tLRPC$Message2.peer_id;
                Integer num = i5;
                long j2 = tLRPC$Peer.channel_id;
                if (j2 != 0) {
                    TLRPC$Chat tLRPC$Chat4 = (TLRPC$Chat) longSparseArray4.get(j2);
                    if (tLRPC$Chat4 != null && tLRPC$Chat4.left) {
                        i12++;
                        i5 = num;
                    }
                } else {
                    long j3 = tLRPC$Peer.chat_id;
                    if (!(j3 == 0 || (tLRPC$Chat2 = (TLRPC$Chat) longSparseArray4.get(j3)) == null || tLRPC$Chat2.migrated_to == null)) {
                        i12++;
                        i5 = num;
                    }
                }
                MessageObject messageObject2 = new MessageObject(this.currentAccount, tLRPC$Message2, (LongSparseArray<TLRPC$User>) longSparseArray3, (LongSparseArray<TLRPC$Chat>) longSparseArray4, false, true);
                longSparseArray2.put(messageObject2.getDialogId(), messageObject2);
                i12++;
                i5 = num;
            }
            Integer num2 = i5;
            int i13 = 0;
            while (i13 < this.resetDialogsAll.dialogs.size()) {
                TLRPC$Dialog tLRPC$Dialog = this.resetDialogsAll.dialogs.get(i13);
                DialogObject.initDialog(tLRPC$Dialog);
                long j4 = tLRPC$Dialog.id;
                if (j4 != j) {
                    if (tLRPC$Dialog.last_message_date == 0 && (messageObject = (MessageObject) longSparseArray2.get(j4)) != null) {
                        tLRPC$Dialog.last_message_date = messageObject.messageOwner.date;
                    }
                    if (DialogObject.isChannel(tLRPC$Dialog)) {
                        TLRPC$Chat tLRPC$Chat5 = (TLRPC$Chat) longSparseArray4.get(-tLRPC$Dialog.id);
                        if (tLRPC$Chat5 == null || !tLRPC$Chat5.left) {
                            this.channelsPts.put(-tLRPC$Dialog.id, tLRPC$Dialog.pts);
                        }
                    } else if (!(!DialogObject.isChatDialog(tLRPC$Dialog.id) || (tLRPC$Chat = (TLRPC$Chat) longSparseArray4.get(-tLRPC$Dialog.id)) == null || tLRPC$Chat.migrated_to == null)) {
                    }
                    longSparseArray.put(tLRPC$Dialog.id, tLRPC$Dialog);
                    Integer num3 = this.dialogs_read_inbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                    if (num3 == null) {
                        num3 = num2;
                    }
                    this.dialogs_read_inbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num3.intValue(), tLRPC$Dialog.read_inbox_max_id)));
                    Integer num4 = this.dialogs_read_outbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                    if (num4 == null) {
                        num4 = num2;
                    }
                    this.dialogs_read_outbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num4.intValue(), tLRPC$Dialog.read_outbox_max_id)));
                }
                i13++;
                j = 0;
            }
            ImageLoader.saveMessagesThumbs(this.resetDialogsAll.messages);
            for (int i14 = 0; i14 < this.resetDialogsAll.messages.size(); i14++) {
                TLRPC$Message tLRPC$Message3 = this.resetDialogsAll.messages.get(i14);
                TLRPC$MessageAction tLRPC$MessageAction = tLRPC$Message3.action;
                if ((tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatDeleteUser) && (tLRPC$User = (TLRPC$User) longSparseArray3.get(tLRPC$MessageAction.user_id)) != null && tLRPC$User.bot) {
                    tLRPC$Message3.reply_markup = new TLRPC$TL_replyKeyboardHide();
                    tLRPC$Message3.flags |= 64;
                }
                TLRPC$MessageAction tLRPC$MessageAction2 = tLRPC$Message3.action;
                if ((tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChatMigrateTo) || (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChannelCreate)) {
                    tLRPC$Message3.unread = false;
                    tLRPC$Message3.media_unread = false;
                } else {
                    ConcurrentHashMap<Long, Integer> concurrentHashMap = tLRPC$Message3.out ? this.dialogs_read_outbox_max : this.dialogs_read_inbox_max;
                    Integer num5 = concurrentHashMap.get(Long.valueOf(tLRPC$Message3.dialog_id));
                    if (num5 == null) {
                        num5 = Integer.valueOf(getMessagesStorage().getDialogReadMax(tLRPC$Message3.out, tLRPC$Message3.dialog_id));
                        concurrentHashMap.put(Long.valueOf(tLRPC$Message3.dialog_id), num5);
                    }
                    tLRPC$Message3.unread = num5.intValue() < tLRPC$Message3.id;
                }
            }
            getMessagesStorage().resetDialogs(this.resetDialogsAll, size, i, i2, i3, i4, longSparseArray, longSparseArray2, tLRPC$Message, size2);
            this.resetDialogsPinned = null;
            this.resetDialogsAll = null;
        }
    }

    /* access modifiers changed from: protected */
    public void completeDialogsReset(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, int i, int i2, int i3, int i4, int i5, LongSparseArray<TLRPC$Dialog> longSparseArray, LongSparseArray<MessageObject> longSparseArray2, TLRPC$Message tLRPC$Message) {
        Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda32(this, i3, i4, i5, tLRPC$messages_Dialogs, longSparseArray, longSparseArray2));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$completeDialogsReset$161(int i, int i2, int i3, TLRPC$messages_Dialogs tLRPC$messages_Dialogs, LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        this.gettingDifference = false;
        getMessagesStorage().setLastPtsValue(i);
        getMessagesStorage().setLastDateValue(i2);
        getMessagesStorage().setLastQtsValue(i3);
        getDifference();
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda170(this, tLRPC$messages_Dialogs, longSparseArray, longSparseArray2));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$completeDialogsReset$160(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        TLRPC$Dialog tLRPC$Dialog;
        TLRPC$messages_Dialogs tLRPC$messages_Dialogs2 = tLRPC$messages_Dialogs;
        LongSparseArray longSparseArray3 = longSparseArray;
        this.resetingDialogs = false;
        applyDialogsNotificationsSettings(tLRPC$messages_Dialogs2.dialogs);
        MediaDataController mediaDataController = getMediaDataController();
        mediaDataController.clearAllDrafts(false);
        mediaDataController.loadDraftsIfNeed();
        putUsers(tLRPC$messages_Dialogs2.users, false);
        putChats(tLRPC$messages_Dialogs2.chats, false);
        for (int i = 0; i < this.allDialogs.size(); i++) {
            TLRPC$Dialog tLRPC$Dialog2 = this.allDialogs.get(i);
            if (!DialogObject.isEncryptedDialog(tLRPC$Dialog2.id)) {
                this.dialogs_dict.remove(tLRPC$Dialog2.id);
                MessageObject messageObject = this.dialogMessage.get(tLRPC$Dialog2.id);
                this.dialogMessage.remove(tLRPC$Dialog2.id);
                if (messageObject != null) {
                    if (messageObject.messageOwner.peer_id.channel_id == 0) {
                        this.dialogMessagesByIds.remove(messageObject.getId());
                    }
                    long j = messageObject.messageOwner.random_id;
                    if (j != 0) {
                        this.dialogMessagesByRandomIds.remove(j);
                    }
                }
            }
        }
        for (int i2 = 0; i2 < longSparseArray.size(); i2++) {
            long keyAt = longSparseArray3.keyAt(i2);
            TLRPC$Dialog tLRPC$Dialog3 = (TLRPC$Dialog) longSparseArray3.valueAt(i2);
            TLRPC$DraftMessage tLRPC$DraftMessage = tLRPC$Dialog3.draft;
            if (tLRPC$DraftMessage instanceof TLRPC$TL_draftMessage) {
                tLRPC$Dialog = tLRPC$Dialog3;
                mediaDataController.saveDraft(tLRPC$Dialog3.id, 0, tLRPC$DraftMessage, (TLRPC$Message) null, false);
            } else {
                tLRPC$Dialog = tLRPC$Dialog3;
            }
            this.dialogs_dict.put(keyAt, tLRPC$Dialog);
            MessageObject messageObject2 = (MessageObject) longSparseArray2.get(tLRPC$Dialog.id);
            this.dialogMessage.put(keyAt, messageObject2);
            if (messageObject2 != null && messageObject2.messageOwner.peer_id.channel_id == 0) {
                this.dialogMessagesByIds.put(messageObject2.getId(), messageObject2);
                this.dialogsLoadedTillDate = Math.min(this.dialogsLoadedTillDate, messageObject2.messageOwner.date);
                long j2 = messageObject2.messageOwner.random_id;
                if (j2 != 0) {
                    this.dialogMessagesByRandomIds.put(j2, messageObject2);
                }
            }
        }
        this.allDialogs.clear();
        int size = this.dialogs_dict.size();
        for (int i3 = 0; i3 < size; i3++) {
            TLRPC$Dialog valueAt = this.dialogs_dict.valueAt(i3);
            if (this.deletingDialogs.indexOfKey(valueAt.id) < 0) {
                this.allDialogs.add(valueAt);
            }
        }
        sortDialogs((LongSparseArray<TLRPC$Chat>) null);
        this.dialogsEndReached.put(0, true);
        this.serverDialogsEndReached.put(0, false);
        this.dialogsEndReached.put(1, true);
        this.serverDialogsEndReached.put(1, false);
        int totalDialogsCount = getUserConfig().getTotalDialogsCount(0);
        long[] dialogLoadOffsets = getUserConfig().getDialogLoadOffsets(0);
        if (!(totalDialogsCount >= 400 || dialogLoadOffsets[0] == -1 || dialogLoadOffsets[0] == 2147483647L)) {
            loadDialogs(0, 0, 100, false);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    private void migrateDialogs(int i, int i2, long j, long j2, long j3, long j4) {
        int i3 = i;
        int i4 = i2;
        long j5 = j;
        long j6 = j3;
        if (!this.migratingDialogs && i3 != -1) {
            this.migratingDialogs = true;
            TLRPC$TL_messages_getDialogs tLRPC$TL_messages_getDialogs = new TLRPC$TL_messages_getDialogs();
            tLRPC$TL_messages_getDialogs.exclude_pinned = true;
            tLRPC$TL_messages_getDialogs.limit = 100;
            tLRPC$TL_messages_getDialogs.offset_id = i3;
            tLRPC$TL_messages_getDialogs.offset_date = i4;
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("start migrate with id " + i + " date " + LocaleController.getInstance().formatterStats.format(((long) i4) * 1000));
            }
            if (i3 == 0) {
                tLRPC$TL_messages_getDialogs.offset_peer = new TLRPC$TL_inputPeerEmpty();
            } else {
                if (j6 != 0) {
                    TLRPC$TL_inputPeerChannel tLRPC$TL_inputPeerChannel = new TLRPC$TL_inputPeerChannel();
                    tLRPC$TL_messages_getDialogs.offset_peer = tLRPC$TL_inputPeerChannel;
                    tLRPC$TL_inputPeerChannel.channel_id = j6;
                } else if (j5 != 0) {
                    TLRPC$TL_inputPeerUser tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerUser();
                    tLRPC$TL_messages_getDialogs.offset_peer = tLRPC$TL_inputPeerUser;
                    tLRPC$TL_inputPeerUser.user_id = j5;
                } else {
                    TLRPC$TL_inputPeerChat tLRPC$TL_inputPeerChat = new TLRPC$TL_inputPeerChat();
                    tLRPC$TL_messages_getDialogs.offset_peer = tLRPC$TL_inputPeerChat;
                    tLRPC$TL_inputPeerChat.chat_id = j2;
                }
                tLRPC$TL_messages_getDialogs.offset_peer.access_hash = j4;
            }
            getConnectionsManager().sendRequest(tLRPC$TL_messages_getDialogs, new MessagesController$$ExternalSyntheticLambda232(this, i));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$migrateDialogs$165(int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            getMessagesStorage().getStorageQueue().postRunnable(new MessagesController$$ExternalSyntheticLambda168(this, (TLRPC$messages_Dialogs) tLObject, i));
        } else {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda23(this));
        }
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Removed duplicated region for block: B:100:0x0344 A[Catch:{ Exception -> 0x041f }] */
    /* JADX WARNING: Removed duplicated region for block: B:107:0x0384 A[Catch:{ Exception -> 0x041f }] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$migrateDialogs$163(org.telegram.tgnet.TLRPC$messages_Dialogs r36, int r37) {
        /*
            r35 = this;
            r0 = r36
            r1 = r37
            org.telegram.messenger.UserConfig r2 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            r3 = 0
            int r2 = r2.getTotalDialogsCount(r3)     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.UserConfig r4 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r5 = r0.dialogs     // Catch:{ Exception -> 0x041f }
            int r5 = r5.size()     // Catch:{ Exception -> 0x041f }
            int r2 = r2 + r5
            r4.setTotalDialogsCount(r3, r2)     // Catch:{ Exception -> 0x041f }
            r2 = 0
            r4 = 0
        L_0x001d:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r5 = r0.messages     // Catch:{ Exception -> 0x041f }
            int r5 = r5.size()     // Catch:{ Exception -> 0x041f }
            java.lang.String r6 = " date "
            r7 = 1000(0x3e8, double:4.94E-321)
            if (r4 >= r5) goto L_0x006c
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r5 = r0.messages     // Catch:{ Exception -> 0x041f }
            java.lang.Object r5 = r5.get(r4)     // Catch:{ Exception -> 0x041f }
            org.telegram.tgnet.TLRPC$Message r5 = (org.telegram.tgnet.TLRPC$Message) r5     // Catch:{ Exception -> 0x041f }
            boolean r9 = org.telegram.messenger.BuildVars.LOGS_ENABLED     // Catch:{ Exception -> 0x041f }
            if (r9 == 0) goto L_0x0060
            java.lang.StringBuilder r9 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x041f }
            r9.<init>()     // Catch:{ Exception -> 0x041f }
            java.lang.String r10 = "search migrate id "
            r9.append(r10)     // Catch:{ Exception -> 0x041f }
            int r10 = r5.id     // Catch:{ Exception -> 0x041f }
            r9.append(r10)     // Catch:{ Exception -> 0x041f }
            r9.append(r6)     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.LocaleController r6 = org.telegram.messenger.LocaleController.getInstance()     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.time.FastDateFormat r6 = r6.formatterStats     // Catch:{ Exception -> 0x041f }
            int r10 = r5.date     // Catch:{ Exception -> 0x041f }
            long r10 = (long) r10     // Catch:{ Exception -> 0x041f }
            long r10 = r10 * r7
            java.lang.String r6 = r6.format((long) r10)     // Catch:{ Exception -> 0x041f }
            r9.append(r6)     // Catch:{ Exception -> 0x041f }
            java.lang.String r6 = r9.toString()     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.FileLog.d(r6)     // Catch:{ Exception -> 0x041f }
        L_0x0060:
            if (r2 == 0) goto L_0x0068
            int r6 = r5.date     // Catch:{ Exception -> 0x041f }
            int r7 = r2.date     // Catch:{ Exception -> 0x041f }
            if (r6 >= r7) goto L_0x0069
        L_0x0068:
            r2 = r5
        L_0x0069:
            int r4 = r4 + 1
            goto L_0x001d
        L_0x006c:
            boolean r4 = org.telegram.messenger.BuildVars.LOGS_ENABLED     // Catch:{ Exception -> 0x041f }
            if (r4 == 0) goto L_0x009b
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x041f }
            r4.<init>()     // Catch:{ Exception -> 0x041f }
            java.lang.String r5 = "migrate step with id "
            r4.append(r5)     // Catch:{ Exception -> 0x041f }
            int r5 = r2.id     // Catch:{ Exception -> 0x041f }
            r4.append(r5)     // Catch:{ Exception -> 0x041f }
            r4.append(r6)     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.LocaleController r5 = org.telegram.messenger.LocaleController.getInstance()     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.time.FastDateFormat r5 = r5.formatterStats     // Catch:{ Exception -> 0x041f }
            int r6 = r2.date     // Catch:{ Exception -> 0x041f }
            long r9 = (long) r6     // Catch:{ Exception -> 0x041f }
            long r9 = r9 * r7
            java.lang.String r5 = r5.format((long) r9)     // Catch:{ Exception -> 0x041f }
            r4.append(r5)     // Catch:{ Exception -> 0x041f }
            java.lang.String r4 = r4.toString()     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.FileLog.d(r4)     // Catch:{ Exception -> 0x041f }
        L_0x009b:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r4 = r0.dialogs     // Catch:{ Exception -> 0x041f }
            int r4 = r4.size()     // Catch:{ Exception -> 0x041f }
            r5 = 100
            r6 = 2
            r9 = -1
            if (r4 < r5) goto L_0x00aa
            int r4 = r2.id     // Catch:{ Exception -> 0x041f }
            goto L_0x00f1
        L_0x00aa:
            boolean r4 = org.telegram.messenger.BuildVars.LOGS_ENABLED     // Catch:{ Exception -> 0x041f }
            if (r4 == 0) goto L_0x00b3
            java.lang.String r4 = "migrate stop due to not 100 dialogs"
            org.telegram.messenger.FileLog.d(r4)     // Catch:{ Exception -> 0x041f }
        L_0x00b3:
            r4 = 0
        L_0x00b4:
            if (r4 >= r6) goto L_0x00f0
            org.telegram.messenger.UserConfig r10 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.UserConfig r5 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            int r13 = r5.migrateOffsetDate     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.UserConfig r5 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            long r14 = r5.migrateOffsetUserId     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.UserConfig r5 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            long r7 = r5.migrateOffsetChatId     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.UserConfig r5 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            r16 = r7
            long r6 = r5.migrateOffsetChannelId     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.UserConfig r5 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            r18 = r13
            long r12 = r5.migrateOffsetAccess     // Catch:{ Exception -> 0x041f }
            r11 = r4
            r20 = r12
            r5 = 2147483647(0x7fffffff, float:NaN)
            r12 = r5
            r13 = r18
            r18 = r6
            r10.setDialogsLoadOffset(r11, r12, r13, r14, r16, r18, r20)     // Catch:{ Exception -> 0x041f }
            int r4 = r4 + 1
            r6 = 2
            r7 = 1000(0x3e8, double:4.94E-321)
            goto L_0x00b4
        L_0x00f0:
            r4 = -1
        L_0x00f1:
            java.lang.StringBuilder r5 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x041f }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r6 = r0.dialogs     // Catch:{ Exception -> 0x041f }
            int r6 = r6.size()     // Catch:{ Exception -> 0x041f }
            int r6 = r6 * 12
            r5.<init>(r6)     // Catch:{ Exception -> 0x041f }
            androidx.collection.LongSparseArray r6 = new androidx.collection.LongSparseArray     // Catch:{ Exception -> 0x041f }
            r6.<init>()     // Catch:{ Exception -> 0x041f }
            r7 = 0
        L_0x0104:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r8 = r0.dialogs     // Catch:{ Exception -> 0x041f }
            int r8 = r8.size()     // Catch:{ Exception -> 0x041f }
            if (r7 >= r8) goto L_0x012f
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r8 = r0.dialogs     // Catch:{ Exception -> 0x041f }
            java.lang.Object r8 = r8.get(r7)     // Catch:{ Exception -> 0x041f }
            org.telegram.tgnet.TLRPC$Dialog r8 = (org.telegram.tgnet.TLRPC$Dialog) r8     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.DialogObject.initDialog(r8)     // Catch:{ Exception -> 0x041f }
            int r10 = r5.length()     // Catch:{ Exception -> 0x041f }
            if (r10 <= 0) goto L_0x0122
            java.lang.String r10 = ","
            r5.append(r10)     // Catch:{ Exception -> 0x041f }
        L_0x0122:
            long r10 = r8.id     // Catch:{ Exception -> 0x041f }
            r5.append(r10)     // Catch:{ Exception -> 0x041f }
            long r10 = r8.id     // Catch:{ Exception -> 0x041f }
            r6.put(r10, r8)     // Catch:{ Exception -> 0x041f }
            int r7 = r7 + 1
            goto L_0x0104
        L_0x012f:
            org.telegram.messenger.MessagesStorage r7 = r35.getMessagesStorage()     // Catch:{ Exception -> 0x041f }
            org.telegram.SQLite.SQLiteDatabase r7 = r7.getDatabase()     // Catch:{ Exception -> 0x041f }
            java.util.Locale r8 = java.util.Locale.US     // Catch:{ Exception -> 0x041f }
            java.lang.String r10 = "SELECT did, folder_id FROM dialogs WHERE did IN (%s)"
            r11 = 1
            java.lang.Object[] r12 = new java.lang.Object[r11]     // Catch:{ Exception -> 0x041f }
            java.lang.String r5 = r5.toString()     // Catch:{ Exception -> 0x041f }
            r12[r3] = r5     // Catch:{ Exception -> 0x041f }
            java.lang.String r5 = java.lang.String.format(r8, r10, r12)     // Catch:{ Exception -> 0x041f }
            java.lang.Object[] r8 = new java.lang.Object[r3]     // Catch:{ Exception -> 0x041f }
            org.telegram.SQLite.SQLiteCursor r5 = r7.queryFinalized(r5, r8)     // Catch:{ Exception -> 0x041f }
        L_0x014e:
            boolean r7 = r5.next()     // Catch:{ Exception -> 0x041f }
            if (r7 == 0) goto L_0x019e
            long r7 = r5.longValue(r3)     // Catch:{ Exception -> 0x041f }
            int r10 = r5.intValue(r11)     // Catch:{ Exception -> 0x041f }
            java.lang.Object r12 = r6.get(r7)     // Catch:{ Exception -> 0x041f }
            org.telegram.tgnet.TLRPC$Dialog r12 = (org.telegram.tgnet.TLRPC$Dialog) r12     // Catch:{ Exception -> 0x041f }
            if (r12 == 0) goto L_0x019a
            int r13 = r12.folder_id     // Catch:{ Exception -> 0x041f }
            if (r13 == r10) goto L_0x0169
            goto L_0x014e
        L_0x0169:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r10 = r0.dialogs     // Catch:{ Exception -> 0x041f }
            r10.remove(r12)     // Catch:{ Exception -> 0x041f }
            r10 = 0
        L_0x016f:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r13 = r0.messages     // Catch:{ Exception -> 0x041f }
            int r13 = r13.size()     // Catch:{ Exception -> 0x041f }
            if (r10 >= r13) goto L_0x019a
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r13 = r0.messages     // Catch:{ Exception -> 0x041f }
            java.lang.Object r13 = r13.get(r10)     // Catch:{ Exception -> 0x041f }
            org.telegram.tgnet.TLRPC$Message r13 = (org.telegram.tgnet.TLRPC$Message) r13     // Catch:{ Exception -> 0x041f }
            long r14 = org.telegram.messenger.MessageObject.getDialogId(r13)     // Catch:{ Exception -> 0x041f }
            int r16 = (r14 > r7 ? 1 : (r14 == r7 ? 0 : -1))
            if (r16 == 0) goto L_0x0188
            goto L_0x0198
        L_0x0188:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r14 = r0.messages     // Catch:{ Exception -> 0x041f }
            r14.remove(r10)     // Catch:{ Exception -> 0x041f }
            int r10 = r10 + -1
            int r13 = r13.id     // Catch:{ Exception -> 0x041f }
            int r14 = r12.top_message     // Catch:{ Exception -> 0x041f }
            if (r13 != r14) goto L_0x0198
            r12.top_message = r3     // Catch:{ Exception -> 0x041f }
            goto L_0x019a
        L_0x0198:
            int r10 = r10 + r11
            goto L_0x016f
        L_0x019a:
            r6.remove(r7)     // Catch:{ Exception -> 0x041f }
            goto L_0x014e
        L_0x019e:
            r5.dispose()     // Catch:{ Exception -> 0x041f }
            boolean r5 = org.telegram.messenger.BuildVars.LOGS_ENABLED     // Catch:{ Exception -> 0x041f }
            if (r5 == 0) goto L_0x01bf
            java.lang.StringBuilder r5 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x041f }
            r5.<init>()     // Catch:{ Exception -> 0x041f }
            java.lang.String r7 = "migrate found missing dialogs "
            r5.append(r7)     // Catch:{ Exception -> 0x041f }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r7 = r0.dialogs     // Catch:{ Exception -> 0x041f }
            int r7 = r7.size()     // Catch:{ Exception -> 0x041f }
            r5.append(r7)     // Catch:{ Exception -> 0x041f }
            java.lang.String r5 = r5.toString()     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.FileLog.d(r5)     // Catch:{ Exception -> 0x041f }
        L_0x01bf:
            org.telegram.messenger.MessagesStorage r5 = r35.getMessagesStorage()     // Catch:{ Exception -> 0x041f }
            org.telegram.SQLite.SQLiteDatabase r5 = r5.getDatabase()     // Catch:{ Exception -> 0x041f }
            java.lang.String r7 = "SELECT min(date) FROM dialogs WHERE date != 0 AND did >> 32 NOT IN (NUM, NUM)"
            java.lang.Object[] r8 = new java.lang.Object[r3]     // Catch:{ Exception -> 0x041f }
            org.telegram.SQLite.SQLiteCursor r5 = r5.queryFinalized(r7, r8)     // Catch:{ Exception -> 0x041f }
            boolean r7 = r5.next()     // Catch:{ Exception -> 0x041f }
            if (r7 == 0) goto L_0x032b
            r7 = 1441062000(0x55e4dCLASSNAME, float:3.14544279E13)
            int r8 = r5.intValue(r3)     // Catch:{ Exception -> 0x041f }
            int r7 = java.lang.Math.max(r7, r8)     // Catch:{ Exception -> 0x041f }
            r8 = 0
        L_0x01e1:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r10 = r0.messages     // Catch:{ Exception -> 0x041f }
            int r10 = r10.size()     // Catch:{ Exception -> 0x041f }
            java.lang.String r12 = "migrate stop due to reached loaded dialogs "
            if (r8 >= r10) goto L_0x02a8
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r10 = r0.messages     // Catch:{ Exception -> 0x041f }
            java.lang.Object r10 = r10.get(r8)     // Catch:{ Exception -> 0x041f }
            org.telegram.tgnet.TLRPC$Message r10 = (org.telegram.tgnet.TLRPC$Message) r10     // Catch:{ Exception -> 0x041f }
            int r13 = r10.date     // Catch:{ Exception -> 0x041f }
            if (r13 >= r7) goto L_0x029b
            if (r1 == r9) goto L_0x027b
            r4 = 0
        L_0x01fa:
            r13 = 2
            if (r4 >= r13) goto L_0x024c
            org.telegram.messenger.UserConfig r22 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.UserConfig r13 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            int r13 = r13.migrateOffsetId     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.UserConfig r14 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            int r14 = r14.migrateOffsetDate     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.UserConfig r15 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            r17 = r10
            long r9 = r15.migrateOffsetUserId     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.UserConfig r15 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            r19 = r12
            long r11 = r15.migrateOffsetChatId     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.UserConfig r15 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            r21 = r4
            long r3 = r15.migrateOffsetChannelId     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.UserConfig r15 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            r34 = r2
            long r1 = r15.migrateOffsetAccess     // Catch:{ Exception -> 0x041f }
            r23 = r21
            r24 = r13
            r25 = r14
            r26 = r9
            r28 = r11
            r30 = r3
            r32 = r1
            r22.setDialogsLoadOffset(r23, r24, r25, r26, r28, r30, r32)     // Catch:{ Exception -> 0x041f }
            int r4 = r21 + 1
            r1 = r37
            r10 = r17
            r12 = r19
            r2 = r34
            r3 = 0
            r9 = -1
            r11 = 1
            goto L_0x01fa
        L_0x024c:
            r34 = r2
            r17 = r10
            r19 = r12
            boolean r1 = org.telegram.messenger.BuildVars.LOGS_ENABLED     // Catch:{ Exception -> 0x041f }
            if (r1 == 0) goto L_0x0279
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x041f }
            r1.<init>()     // Catch:{ Exception -> 0x041f }
            r2 = r19
            r1.append(r2)     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.LocaleController r2 = org.telegram.messenger.LocaleController.getInstance()     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.time.FastDateFormat r2 = r2.formatterStats     // Catch:{ Exception -> 0x041f }
            long r3 = (long) r7     // Catch:{ Exception -> 0x041f }
            r9 = 1000(0x3e8, double:4.94E-321)
            long r3 = r3 * r9
            java.lang.String r2 = r2.format((long) r3)     // Catch:{ Exception -> 0x041f }
            r1.append(r2)     // Catch:{ Exception -> 0x041f }
            java.lang.String r1 = r1.toString()     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.FileLog.d(r1)     // Catch:{ Exception -> 0x041f }
        L_0x0279:
            r4 = -1
            goto L_0x027f
        L_0x027b:
            r34 = r2
            r17 = r10
        L_0x027f:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r0.messages     // Catch:{ Exception -> 0x041f }
            r1.remove(r8)     // Catch:{ Exception -> 0x041f }
            int r8 = r8 + -1
            long r1 = org.telegram.messenger.MessageObject.getDialogId(r17)     // Catch:{ Exception -> 0x041f }
            java.lang.Object r3 = r6.get(r1)     // Catch:{ Exception -> 0x041f }
            org.telegram.tgnet.TLRPC$Dialog r3 = (org.telegram.tgnet.TLRPC$Dialog) r3     // Catch:{ Exception -> 0x041f }
            r6.remove(r1)     // Catch:{ Exception -> 0x041f }
            if (r3 == 0) goto L_0x029d
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r0.dialogs     // Catch:{ Exception -> 0x041f }
            r1.remove(r3)     // Catch:{ Exception -> 0x041f }
            goto L_0x029d
        L_0x029b:
            r34 = r2
        L_0x029d:
            r1 = 1
            int r8 = r8 + r1
            r1 = r37
            r2 = r34
            r3 = 0
            r9 = -1
            r11 = 1
            goto L_0x01e1
        L_0x02a8:
            r34 = r2
            r2 = r12
            if (r34 == 0) goto L_0x0326
            r1 = r34
            int r3 = r1.date     // Catch:{ Exception -> 0x041f }
            if (r3 >= r7) goto L_0x032c
            r3 = r37
            r6 = -1
            if (r3 == r6) goto L_0x032c
            r3 = 0
            r4 = 2
        L_0x02ba:
            if (r3 >= r4) goto L_0x02f9
            org.telegram.messenger.UserConfig r8 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.UserConfig r9 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            int r10 = r9.migrateOffsetId     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.UserConfig r9 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            int r11 = r9.migrateOffsetDate     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.UserConfig r9 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            long r12 = r9.migrateOffsetUserId     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.UserConfig r9 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            long r14 = r9.migrateOffsetChatId     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.UserConfig r9 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            r21 = r5
            long r4 = r9.migrateOffsetChannelId     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.UserConfig r9 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            r22 = r7
            long r6 = r9.migrateOffsetAccess     // Catch:{ Exception -> 0x041f }
            r9 = r3
            r16 = r4
            r18 = r6
            r8.setDialogsLoadOffset(r9, r10, r11, r12, r14, r16, r18)     // Catch:{ Exception -> 0x041f }
            int r3 = r3 + 1
            r5 = r21
            r7 = r22
            r4 = 2
            r6 = -1
            goto L_0x02ba
        L_0x02f9:
            r21 = r5
            r22 = r7
            boolean r3 = org.telegram.messenger.BuildVars.LOGS_ENABLED     // Catch:{ Exception -> 0x041f }
            if (r3 == 0) goto L_0x0324
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x041f }
            r3.<init>()     // Catch:{ Exception -> 0x041f }
            r3.append(r2)     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.LocaleController r2 = org.telegram.messenger.LocaleController.getInstance()     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.time.FastDateFormat r2 = r2.formatterStats     // Catch:{ Exception -> 0x041f }
            r4 = r22
            long r4 = (long) r4     // Catch:{ Exception -> 0x041f }
            r6 = 1000(0x3e8, double:4.94E-321)
            long r4 = r4 * r6
            java.lang.String r2 = r2.format((long) r4)     // Catch:{ Exception -> 0x041f }
            r3.append(r2)     // Catch:{ Exception -> 0x041f }
            java.lang.String r2 = r3.toString()     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.FileLog.d(r2)     // Catch:{ Exception -> 0x041f }
        L_0x0324:
            r5 = -1
            goto L_0x032f
        L_0x0326:
            r21 = r5
            r1 = r34
            goto L_0x032e
        L_0x032b:
            r1 = r2
        L_0x032c:
            r21 = r5
        L_0x032e:
            r5 = r4
        L_0x032f:
            r21.dispose()     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.UserConfig r2 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            int r3 = r1.date     // Catch:{ Exception -> 0x041f }
            r2.migrateOffsetDate = r3     // Catch:{ Exception -> 0x041f }
            org.telegram.tgnet.TLRPC$Peer r2 = r1.peer_id     // Catch:{ Exception -> 0x041f }
            long r3 = r2.channel_id     // Catch:{ Exception -> 0x041f }
            r6 = 0
            int r8 = (r3 > r6 ? 1 : (r3 == r6 ? 0 : -1))
            if (r8 == 0) goto L_0x0384
            org.telegram.messenger.UserConfig r2 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            org.telegram.tgnet.TLRPC$Peer r1 = r1.peer_id     // Catch:{ Exception -> 0x041f }
            long r3 = r1.channel_id     // Catch:{ Exception -> 0x041f }
            r2.migrateOffsetChannelId = r3     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.UserConfig r1 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            r1.migrateOffsetChatId = r6     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.UserConfig r1 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            r1.migrateOffsetUserId = r6     // Catch:{ Exception -> 0x041f }
            r3 = 0
        L_0x035b:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r1 = r0.chats     // Catch:{ Exception -> 0x041f }
            int r1 = r1.size()     // Catch:{ Exception -> 0x041f }
            if (r3 >= r1) goto L_0x040e
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r1 = r0.chats     // Catch:{ Exception -> 0x041f }
            java.lang.Object r1 = r1.get(r3)     // Catch:{ Exception -> 0x041f }
            org.telegram.tgnet.TLRPC$Chat r1 = (org.telegram.tgnet.TLRPC$Chat) r1     // Catch:{ Exception -> 0x041f }
            long r6 = r1.id     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.UserConfig r2 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            long r8 = r2.migrateOffsetChannelId     // Catch:{ Exception -> 0x041f }
            int r2 = (r6 > r8 ? 1 : (r6 == r8 ? 0 : -1))
            if (r2 != 0) goto L_0x0381
            org.telegram.messenger.UserConfig r2 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            long r3 = r1.access_hash     // Catch:{ Exception -> 0x041f }
            r2.migrateOffsetAccess = r3     // Catch:{ Exception -> 0x041f }
            goto L_0x040e
        L_0x0381:
            int r3 = r3 + 1
            goto L_0x035b
        L_0x0384:
            long r3 = r2.chat_id     // Catch:{ Exception -> 0x041f }
            int r8 = (r3 > r6 ? 1 : (r3 == r6 ? 0 : -1))
            if (r8 == 0) goto L_0x03c9
            org.telegram.messenger.UserConfig r2 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            org.telegram.tgnet.TLRPC$Peer r1 = r1.peer_id     // Catch:{ Exception -> 0x041f }
            long r3 = r1.chat_id     // Catch:{ Exception -> 0x041f }
            r2.migrateOffsetChatId = r3     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.UserConfig r1 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            r1.migrateOffsetChannelId = r6     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.UserConfig r1 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            r1.migrateOffsetUserId = r6     // Catch:{ Exception -> 0x041f }
            r3 = 0
        L_0x03a1:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r1 = r0.chats     // Catch:{ Exception -> 0x041f }
            int r1 = r1.size()     // Catch:{ Exception -> 0x041f }
            if (r3 >= r1) goto L_0x040e
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r1 = r0.chats     // Catch:{ Exception -> 0x041f }
            java.lang.Object r1 = r1.get(r3)     // Catch:{ Exception -> 0x041f }
            org.telegram.tgnet.TLRPC$Chat r1 = (org.telegram.tgnet.TLRPC$Chat) r1     // Catch:{ Exception -> 0x041f }
            long r6 = r1.id     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.UserConfig r2 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            long r8 = r2.migrateOffsetChatId     // Catch:{ Exception -> 0x041f }
            int r2 = (r6 > r8 ? 1 : (r6 == r8 ? 0 : -1))
            if (r2 != 0) goto L_0x03c6
            org.telegram.messenger.UserConfig r2 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            long r3 = r1.access_hash     // Catch:{ Exception -> 0x041f }
            r2.migrateOffsetAccess = r3     // Catch:{ Exception -> 0x041f }
            goto L_0x040e
        L_0x03c6:
            int r3 = r3 + 1
            goto L_0x03a1
        L_0x03c9:
            long r2 = r2.user_id     // Catch:{ Exception -> 0x041f }
            int r4 = (r2 > r6 ? 1 : (r2 == r6 ? 0 : -1))
            if (r4 == 0) goto L_0x040e
            org.telegram.messenger.UserConfig r2 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            org.telegram.tgnet.TLRPC$Peer r1 = r1.peer_id     // Catch:{ Exception -> 0x041f }
            long r3 = r1.user_id     // Catch:{ Exception -> 0x041f }
            r2.migrateOffsetUserId = r3     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.UserConfig r1 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            r1.migrateOffsetChatId = r6     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.UserConfig r1 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            r1.migrateOffsetChannelId = r6     // Catch:{ Exception -> 0x041f }
            r3 = 0
        L_0x03e6:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r1 = r0.users     // Catch:{ Exception -> 0x041f }
            int r1 = r1.size()     // Catch:{ Exception -> 0x041f }
            if (r3 >= r1) goto L_0x040e
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r1 = r0.users     // Catch:{ Exception -> 0x041f }
            java.lang.Object r1 = r1.get(r3)     // Catch:{ Exception -> 0x041f }
            org.telegram.tgnet.TLRPC$User r1 = (org.telegram.tgnet.TLRPC$User) r1     // Catch:{ Exception -> 0x041f }
            long r6 = r1.id     // Catch:{ Exception -> 0x041f }
            org.telegram.messenger.UserConfig r2 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            long r8 = r2.migrateOffsetUserId     // Catch:{ Exception -> 0x041f }
            int r2 = (r6 > r8 ? 1 : (r6 == r8 ? 0 : -1))
            if (r2 != 0) goto L_0x040b
            org.telegram.messenger.UserConfig r2 = r35.getUserConfig()     // Catch:{ Exception -> 0x041f }
            long r3 = r1.access_hash     // Catch:{ Exception -> 0x041f }
            r2.migrateOffsetAccess = r3     // Catch:{ Exception -> 0x041f }
            goto L_0x040e
        L_0x040b:
            int r3 = r3 + 1
            goto L_0x03e6
        L_0x040e:
            r3 = 0
            r4 = 0
            r6 = 0
            r7 = 0
            r8 = 0
            r9 = 1
            r10 = 0
            r1 = r35
            r2 = r36
            r1.processLoadedDialogs(r2, r3, r4, r5, r6, r7, r8, r9, r10)     // Catch:{ Exception -> 0x041f }
            r1 = r35
            goto L_0x042d
        L_0x041f:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda19 r0 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda19
            r1 = r35
            r0.<init>(r1)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r0)
        L_0x042d:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$migrateDialogs$163(org.telegram.tgnet.TLRPC$messages_Dialogs, int):void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$migrateDialogs$162() {
        this.migratingDialogs = false;
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$migrateDialogs$164() {
        this.migratingDialogs = false;
    }

    public void processLoadedDialogs(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, ArrayList<TLRPC$EncryptedChat> arrayList, int i, int i2, int i3, int i4, boolean z, boolean z2, boolean z3) {
        Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda33(this, i, i4, tLRPC$messages_Dialogs, z, i3, arrayList, i2, z3, z2));
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Code restructure failed: missing block: B:137:0x0330, code lost:
        if (r5 == r0.id) goto L_0x0334;
     */
    /* JADX WARNING: Removed duplicated region for block: B:152:0x036e  */
    /* JADX WARNING: Removed duplicated region for block: B:161:0x0384  */
    /* JADX WARNING: Removed duplicated region for block: B:164:0x0396  */
    /* JADX WARNING: Removed duplicated region for block: B:167:0x03c3  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$processLoadedDialogs$169(int r34, int r35, org.telegram.tgnet.TLRPC$messages_Dialogs r36, boolean r37, int r38, java.util.ArrayList r39, int r40, boolean r41, boolean r42) {
        /*
            r33 = this;
            r15 = r33
            r12 = r34
            r13 = r35
            r14 = r36
            r10 = r39
            boolean r0 = r15.firstGettingTask
            r1 = 0
            r11 = 1
            if (r0 != 0) goto L_0x0015
            r15.getNewDeleteTask(r1, r1)
            r15.firstGettingTask = r11
        L_0x0015:
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0043
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r2 = "loaded folderId "
            r0.append(r2)
            r0.append(r12)
            java.lang.String r2 = " loadType "
            r0.append(r2)
            r0.append(r13)
            java.lang.String r2 = " count "
            r0.append(r2)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r14.dialogs
            int r2 = r2.size()
            r0.append(r2)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x0043:
            org.telegram.messenger.UserConfig r0 = r33.getUserConfig()
            long[] r5 = r0.getDialogLoadOffsets(r12)
            int r0 = r15.DIALOGS_LOAD_TYPE_CACHE
            if (r13 != r0) goto L_0x006b
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r0 = r14.dialogs
            int r0 = r0.size()
            if (r0 != 0) goto L_0x006b
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda169 r7 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda169
            r0 = r7
            r1 = r33
            r2 = r36
            r3 = r34
            r4 = r37
            r6 = r38
            r0.<init>(r1, r2, r3, r4, r5, r6)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r7)
            return
        L_0x006b:
            androidx.collection.LongSparseArray r8 = new androidx.collection.LongSparseArray
            r8.<init>()
            androidx.collection.LongSparseArray r9 = new androidx.collection.LongSparseArray
            r9.<init>()
            androidx.collection.LongSparseArray r6 = new androidx.collection.LongSparseArray
            r6.<init>()
            androidx.collection.LongSparseArray r7 = new androidx.collection.LongSparseArray
            r7.<init>()
            r0 = 0
        L_0x0080:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r14.users
            int r2 = r2.size()
            if (r0 >= r2) goto L_0x009a
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r14.users
            java.lang.Object r2 = r2.get(r0)
            org.telegram.tgnet.TLRPC$User r2 = (org.telegram.tgnet.TLRPC$User) r2
            r3 = r5
            long r4 = r2.id
            r6.put(r4, r2)
            int r0 = r0 + 1
            r5 = r3
            goto L_0x0080
        L_0x009a:
            r3 = r5
            r0 = 0
        L_0x009c:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r2 = r14.chats
            int r2 = r2.size()
            if (r0 >= r2) goto L_0x00b4
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r2 = r14.chats
            java.lang.Object r2 = r2.get(r0)
            org.telegram.tgnet.TLRPC$Chat r2 = (org.telegram.tgnet.TLRPC$Chat) r2
            long r4 = r2.id
            r7.put(r4, r2)
            int r0 = r0 + 1
            goto L_0x009c
        L_0x00b4:
            if (r10 == 0) goto L_0x00d3
            android.util.SparseArray r0 = new android.util.SparseArray
            r0.<init>()
            int r2 = r39.size()
            r4 = 0
        L_0x00c0:
            if (r4 >= r2) goto L_0x00d1
            java.lang.Object r5 = r10.get(r4)
            org.telegram.tgnet.TLRPC$EncryptedChat r5 = (org.telegram.tgnet.TLRPC$EncryptedChat) r5
            int r1 = r5.id
            r0.put(r1, r5)
            int r4 = r4 + 1
            r1 = 0
            goto L_0x00c0
        L_0x00d1:
            r4 = r0
            goto L_0x00d4
        L_0x00d3:
            r4 = 0
        L_0x00d4:
            int r0 = r15.DIALOGS_LOAD_TYPE_CACHE
            if (r13 != r0) goto L_0x00df
            android.util.SparseIntArray r0 = r15.nextDialogsCacheOffset
            int r1 = r40 + r38
            r0.put(r12, r1)
        L_0x00df:
            r0 = 0
            r5 = 0
        L_0x00e1:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r14.messages
            int r1 = r1.size()
            r16 = 0
            if (r0 >= r1) goto L_0x0161
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r14.messages
            java.lang.Object r1 = r1.get(r0)
            org.telegram.tgnet.TLRPC$Message r1 = (org.telegram.tgnet.TLRPC$Message) r1
            if (r5 == 0) goto L_0x00fb
            int r2 = r1.date
            int r11 = r5.date
            if (r2 >= r11) goto L_0x00fc
        L_0x00fb:
            r5 = r1
        L_0x00fc:
            org.telegram.tgnet.TLRPC$Peer r2 = r1.peer_id
            r11 = r4
            r23 = r5
            long r4 = r2.channel_id
            int r18 = (r4 > r16 ? 1 : (r4 == r16 ? 0 : -1))
            if (r18 == 0) goto L_0x0126
            java.lang.Object r2 = r7.get(r4)
            org.telegram.tgnet.TLRPC$Chat r2 = (org.telegram.tgnet.TLRPC$Chat) r2
            if (r2 == 0) goto L_0x0123
            boolean r4 = r2.left
            if (r4 == 0) goto L_0x0123
            long r4 = r15.promoDialogId
            int r18 = (r4 > r16 ? 1 : (r4 == r16 ? 0 : -1))
            r24 = r11
            if (r18 == 0) goto L_0x0157
            long r10 = r2.id
            long r10 = -r10
            int r2 = (r4 > r10 ? 1 : (r4 == r10 ? 0 : -1))
            if (r2 == 0) goto L_0x013b
            goto L_0x0157
        L_0x0123:
            r24 = r11
            goto L_0x013b
        L_0x0126:
            r24 = r11
            long r4 = r2.chat_id
            int r2 = (r4 > r16 ? 1 : (r4 == r16 ? 0 : -1))
            if (r2 == 0) goto L_0x013b
            java.lang.Object r2 = r7.get(r4)
            org.telegram.tgnet.TLRPC$Chat r2 = (org.telegram.tgnet.TLRPC$Chat) r2
            if (r2 == 0) goto L_0x013b
            org.telegram.tgnet.TLRPC$InputChannel r2 = r2.migrated_to
            if (r2 == 0) goto L_0x013b
            goto L_0x0157
        L_0x013b:
            org.telegram.messenger.MessageObject r2 = new org.telegram.messenger.MessageObject
            int r4 = r15.currentAccount
            r21 = 0
            r22 = 1
            r16 = r2
            r17 = r4
            r18 = r1
            r19 = r6
            r20 = r7
            r16.<init>((int) r17, (org.telegram.tgnet.TLRPC$Message) r18, (androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$User>) r19, (androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Chat>) r20, (boolean) r21, (boolean) r22)
            long r4 = r2.getDialogId()
            r9.put(r4, r2)
        L_0x0157:
            int r0 = r0 + 1
            r10 = r39
            r5 = r23
            r4 = r24
            r11 = 1
            goto L_0x00e1
        L_0x0161:
            r24 = r4
            if (r41 != 0) goto L_0x028b
            if (r42 != 0) goto L_0x028b
            r4 = 0
            r0 = r3[r4]
            r10 = -1
            int r2 = (r0 > r10 ? 1 : (r0 == r10 ? 0 : -1))
            if (r2 == 0) goto L_0x028b
            if (r13 != 0) goto L_0x028b
            org.telegram.messenger.UserConfig r0 = r33.getUserConfig()
            int r0 = r0.getTotalDialogsCount(r12)
            if (r5 == 0) goto L_0x024a
            int r1 = r5.id
            long r1 = (long) r1
            r10 = r3[r4]
            int r3 = (r1 > r10 ? 1 : (r1 == r10 ? 0 : -1))
            if (r3 == 0) goto L_0x024a
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r14.dialogs
            int r1 = r1.size()
            int r0 = r0 + r1
            int r1 = r5.id
            int r2 = r5.date
            org.telegram.tgnet.TLRPC$Peer r3 = r5.peer_id
            long r10 = r3.channel_id
            int r18 = (r10 > r16 ? 1 : (r10 == r16 ? 0 : -1))
            if (r18 == 0) goto L_0x01d2
            r3 = 0
        L_0x0199:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r4 = r14.chats
            int r4 = r4.size()
            if (r3 >= r4) goto L_0x01bd
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r4 = r14.chats
            java.lang.Object r4 = r4.get(r3)
            org.telegram.tgnet.TLRPC$Chat r4 = (org.telegram.tgnet.TLRPC$Chat) r4
            r18 = r0
            r19 = r1
            long r0 = r4.id
            int r20 = (r0 > r10 ? 1 : (r0 == r10 ? 0 : -1))
            if (r20 != 0) goto L_0x01b6
            long r0 = r4.access_hash
            goto L_0x01c3
        L_0x01b6:
            int r3 = r3 + 1
            r0 = r18
            r1 = r19
            goto L_0x0199
        L_0x01bd:
            r18 = r0
            r19 = r1
            r0 = r16
        L_0x01c3:
            r27 = r0
            r3 = r2
            r25 = r10
            r20 = r16
            r10 = r18
            r2 = r19
            r18 = r20
            goto L_0x025a
        L_0x01d2:
            r18 = r0
            r19 = r1
            long r0 = r3.chat_id
            int r4 = (r0 > r16 ? 1 : (r0 == r16 ? 0 : -1))
            if (r4 == 0) goto L_0x0209
            r3 = 0
        L_0x01dd:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r4 = r14.chats
            int r4 = r4.size()
            if (r3 >= r4) goto L_0x01f9
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r4 = r14.chats
            java.lang.Object r4 = r4.get(r3)
            org.telegram.tgnet.TLRPC$Chat r4 = (org.telegram.tgnet.TLRPC$Chat) r4
            long r10 = r4.id
            int r20 = (r10 > r0 ? 1 : (r10 == r0 ? 0 : -1))
            if (r20 != 0) goto L_0x01f6
            long r3 = r4.access_hash
            goto L_0x01fb
        L_0x01f6:
            int r3 = r3 + 1
            goto L_0x01dd
        L_0x01f9:
            r3 = r16
        L_0x01fb:
            r20 = r0
            r27 = r3
            r25 = r16
            r10 = r18
            r3 = r2
            r2 = r19
            r18 = r25
            goto L_0x025a
        L_0x0209:
            long r0 = r3.user_id
            int r3 = (r0 > r16 ? 1 : (r0 == r16 ? 0 : -1))
            if (r3 == 0) goto L_0x023c
            r3 = 0
        L_0x0210:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r4 = r14.users
            int r4 = r4.size()
            if (r3 >= r4) goto L_0x022c
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r4 = r14.users
            java.lang.Object r4 = r4.get(r3)
            org.telegram.tgnet.TLRPC$User r4 = (org.telegram.tgnet.TLRPC$User) r4
            long r10 = r4.id
            int r20 = (r10 > r0 ? 1 : (r10 == r0 ? 0 : -1))
            if (r20 != 0) goto L_0x0229
            long r3 = r4.access_hash
            goto L_0x022e
        L_0x0229:
            int r3 = r3 + 1
            goto L_0x0210
        L_0x022c:
            r3 = r16
        L_0x022e:
            r27 = r3
            r20 = r16
            r25 = r20
            r10 = r18
            r3 = r2
            r2 = r19
            r18 = r0
            goto L_0x025a
        L_0x023c:
            r3 = r2
            r20 = r16
            r25 = r20
            r27 = r25
            r10 = r18
            r2 = r19
            r18 = r27
            goto L_0x025a
        L_0x024a:
            r1 = 2147483647(0x7fffffff, float:NaN)
            r10 = r0
            r18 = r16
            r20 = r18
            r25 = r20
            r27 = r25
            r2 = 2147483647(0x7fffffff, float:NaN)
            r3 = 0
        L_0x025a:
            org.telegram.messenger.UserConfig r0 = r33.getUserConfig()
            r1 = r34
            r23 = r5
            r13 = r24
            r11 = 0
            r4 = r18
            r29 = r6
            r30 = r7
            r6 = r20
            r31 = r8
            r32 = r9
            r8 = r25
            r15 = r10
            r13 = 0
            r18 = 1
            r10 = r27
            r0.setDialogsLoadOffset(r1, r2, r3, r4, r6, r8, r10)
            org.telegram.messenger.UserConfig r0 = r33.getUserConfig()
            r0.setTotalDialogsCount(r12, r15)
            org.telegram.messenger.UserConfig r0 = r33.getUserConfig()
            r0.saveConfig(r13)
            goto L_0x0298
        L_0x028b:
            r23 = r5
            r29 = r6
            r30 = r7
            r31 = r8
            r32 = r9
            r13 = 0
            r18 = 1
        L_0x0298:
            java.util.ArrayList r15 = new java.util.ArrayList
            r15.<init>()
            r4 = 0
        L_0x029e:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r0 = r14.dialogs
            int r0 = r0.size()
            if (r4 >= r0) goto L_0x03ec
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r0 = r14.dialogs
            java.lang.Object r0 = r0.get(r4)
            org.telegram.tgnet.TLRPC$Dialog r0 = (org.telegram.tgnet.TLRPC$Dialog) r0
            org.telegram.messenger.DialogObject.initDialog(r0)
            long r1 = r0.id
            int r3 = (r1 > r16 ? 1 : (r1 == r16 ? 0 : -1))
            if (r3 != 0) goto L_0x02c5
            r11 = r33
            r3 = r35
            r2 = r24
        L_0x02bd:
            r10 = r30
            r8 = r31
            r9 = r32
            goto L_0x03e0
        L_0x02c5:
            boolean r1 = org.telegram.messenger.DialogObject.isEncryptedDialog(r1)
            if (r1 == 0) goto L_0x02e0
            if (r24 == 0) goto L_0x02e0
            long r1 = r0.id
            int r1 = org.telegram.messenger.DialogObject.getEncryptedChatId(r1)
            r2 = r24
            java.lang.Object r1 = r2.get(r1)
            r11 = r33
            if (r1 != 0) goto L_0x02e4
            r3 = r35
            goto L_0x02bd
        L_0x02e0:
            r2 = r24
            r11 = r33
        L_0x02e4:
            long r5 = r11.promoDialogId
            int r1 = (r5 > r16 ? 1 : (r5 == r16 ? 0 : -1))
            if (r1 == 0) goto L_0x02f2
            long r7 = r0.id
            int r1 = (r5 > r7 ? 1 : (r5 == r7 ? 0 : -1))
            if (r1 != 0) goto L_0x02f2
            r11.promoDialog = r0
        L_0x02f2:
            int r1 = r0.last_message_date
            if (r1 != 0) goto L_0x0309
            long r5 = r0.id
            r9 = r32
            java.lang.Object r1 = r9.get(r5)
            org.telegram.messenger.MessageObject r1 = (org.telegram.messenger.MessageObject) r1
            if (r1 == 0) goto L_0x030b
            org.telegram.tgnet.TLRPC$Message r1 = r1.messageOwner
            int r1 = r1.date
            r0.last_message_date = r1
            goto L_0x030b
        L_0x0309:
            r9 = r32
        L_0x030b:
            boolean r1 = org.telegram.messenger.DialogObject.isChannel(r0)
            if (r1 == 0) goto L_0x033f
            long r5 = r0.id
            long r5 = -r5
            r10 = r30
            java.lang.Object r1 = r10.get(r5)
            org.telegram.tgnet.TLRPC$Chat r1 = (org.telegram.tgnet.TLRPC$Chat) r1
            if (r1 == 0) goto L_0x0333
            boolean r3 = r1.megagroup
            boolean r1 = org.telegram.messenger.ChatObject.isNotInChat(r1)
            if (r1 == 0) goto L_0x0334
            long r5 = r11.promoDialogId
            int r1 = (r5 > r16 ? 1 : (r5 == r16 ? 0 : -1))
            if (r1 == 0) goto L_0x035e
            long r7 = r0.id
            int r1 = (r5 > r7 ? 1 : (r5 == r7 ? 0 : -1))
            if (r1 == 0) goto L_0x0334
            goto L_0x035e
        L_0x0333:
            r3 = 1
        L_0x0334:
            org.telegram.messenger.support.LongSparseIntArray r1 = r11.channelsPts
            long r5 = r0.id
            long r5 = -r5
            int r7 = r0.pts
            r1.put(r5, r7)
            goto L_0x0365
        L_0x033f:
            r10 = r30
            long r5 = r0.id
            boolean r1 = org.telegram.messenger.DialogObject.isChatDialog(r5)
            if (r1 == 0) goto L_0x0364
            long r5 = r0.id
            long r5 = -r5
            java.lang.Object r1 = r10.get(r5)
            org.telegram.tgnet.TLRPC$Chat r1 = (org.telegram.tgnet.TLRPC$Chat) r1
            if (r1 == 0) goto L_0x0364
            org.telegram.tgnet.TLRPC$InputChannel r3 = r1.migrated_to
            if (r3 != 0) goto L_0x035e
            boolean r1 = org.telegram.messenger.ChatObject.isNotInChat(r1)
            if (r1 == 0) goto L_0x0364
        L_0x035e:
            r3 = r35
            r8 = r31
            goto L_0x03e0
        L_0x0364:
            r3 = 1
        L_0x0365:
            long r5 = r0.id
            r8 = r31
            r8.put(r5, r0)
            if (r3 == 0) goto L_0x0384
            int r1 = r11.DIALOGS_LOAD_TYPE_CACHE
            r3 = r35
            if (r3 != r1) goto L_0x0386
            int r1 = r0.read_outbox_max_id
            if (r1 == 0) goto L_0x037c
            int r1 = r0.read_inbox_max_id
            if (r1 != 0) goto L_0x0386
        L_0x037c:
            int r1 = r0.top_message
            if (r1 == 0) goto L_0x0386
            r15.add(r0)
            goto L_0x0386
        L_0x0384:
            r3 = r35
        L_0x0386:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r11.dialogs_read_inbox_max
            long r5 = r0.id
            java.lang.Long r5 = java.lang.Long.valueOf(r5)
            java.lang.Object r1 = r1.get(r5)
            java.lang.Integer r1 = (java.lang.Integer) r1
            if (r1 != 0) goto L_0x039a
            java.lang.Integer r1 = java.lang.Integer.valueOf(r13)
        L_0x039a:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r5 = r11.dialogs_read_inbox_max
            long r6 = r0.id
            java.lang.Long r6 = java.lang.Long.valueOf(r6)
            int r1 = r1.intValue()
            int r7 = r0.read_inbox_max_id
            int r1 = java.lang.Math.max(r1, r7)
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            r5.put(r6, r1)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r11.dialogs_read_outbox_max
            long r5 = r0.id
            java.lang.Long r5 = java.lang.Long.valueOf(r5)
            java.lang.Object r1 = r1.get(r5)
            java.lang.Integer r1 = (java.lang.Integer) r1
            if (r1 != 0) goto L_0x03c7
            java.lang.Integer r1 = java.lang.Integer.valueOf(r13)
        L_0x03c7:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r5 = r11.dialogs_read_outbox_max
            long r6 = r0.id
            java.lang.Long r6 = java.lang.Long.valueOf(r6)
            int r1 = r1.intValue()
            int r0 = r0.read_outbox_max_id
            int r0 = java.lang.Math.max(r1, r0)
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)
            r5.put(r6, r0)
        L_0x03e0:
            int r4 = r4 + 1
            r24 = r2
            r31 = r8
            r32 = r9
            r30 = r10
            goto L_0x029e
        L_0x03ec:
            r11 = r33
            r3 = r35
            r10 = r30
            r8 = r31
            r9 = r32
            int r0 = r11.DIALOGS_LOAD_TYPE_CACHE
            if (r3 == r0) goto L_0x04a0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r0 = r14.messages
            org.telegram.messenger.ImageLoader.saveMessagesThumbs(r0)
            r4 = 0
        L_0x0400:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r0 = r14.messages
            int r0 = r0.size()
            if (r4 >= r0) goto L_0x048d
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r0 = r14.messages
            java.lang.Object r0 = r0.get(r4)
            org.telegram.tgnet.TLRPC$Message r0 = (org.telegram.tgnet.TLRPC$Message) r0
            org.telegram.tgnet.TLRPC$MessageAction r1 = r0.action
            boolean r2 = r1 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatDeleteUser
            if (r2 == 0) goto L_0x0434
            long r1 = r1.user_id
            r5 = r29
            java.lang.Object r1 = r5.get(r1)
            org.telegram.tgnet.TLRPC$User r1 = (org.telegram.tgnet.TLRPC$User) r1
            if (r1 == 0) goto L_0x0436
            boolean r1 = r1.bot
            if (r1 == 0) goto L_0x0436
            org.telegram.tgnet.TLRPC$TL_replyKeyboardHide r1 = new org.telegram.tgnet.TLRPC$TL_replyKeyboardHide
            r1.<init>()
            r0.reply_markup = r1
            int r1 = r0.flags
            r1 = r1 | 64
            r0.flags = r1
            goto L_0x0436
        L_0x0434:
            r5 = r29
        L_0x0436:
            org.telegram.tgnet.TLRPC$MessageAction r1 = r0.action
            boolean r2 = r1 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatMigrateTo
            if (r2 != 0) goto L_0x047f
            boolean r1 = r1 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChannelCreate
            if (r1 == 0) goto L_0x0441
            goto L_0x047f
        L_0x0441:
            boolean r1 = r0.out
            if (r1 == 0) goto L_0x0448
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r11.dialogs_read_outbox_max
            goto L_0x044a
        L_0x0448:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r11.dialogs_read_inbox_max
        L_0x044a:
            long r6 = r0.dialog_id
            java.lang.Long r2 = java.lang.Long.valueOf(r6)
            java.lang.Object r2 = r1.get(r2)
            java.lang.Integer r2 = (java.lang.Integer) r2
            if (r2 != 0) goto L_0x0471
            org.telegram.messenger.MessagesStorage r2 = r33.getMessagesStorage()
            boolean r6 = r0.out
            long r13 = r0.dialog_id
            int r2 = r2.getDialogReadMax(r6, r13)
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)
            long r6 = r0.dialog_id
            java.lang.Long r6 = java.lang.Long.valueOf(r6)
            r1.put(r6, r2)
        L_0x0471:
            int r1 = r2.intValue()
            int r2 = r0.id
            if (r1 >= r2) goto L_0x047b
            r1 = 1
            goto L_0x047c
        L_0x047b:
            r1 = 0
        L_0x047c:
            r0.unread = r1
            goto L_0x0484
        L_0x047f:
            r1 = 0
            r0.unread = r1
            r0.media_unread = r1
        L_0x0484:
            int r4 = r4 + 1
            r14 = r36
            r29 = r5
            r13 = 0
            goto L_0x0400
        L_0x048d:
            org.telegram.messenger.MessagesStorage r0 = r33.getMessagesStorage()
            int r1 = r11.DIALOGS_LOAD_TYPE_UNKNOWN
            if (r3 != r1) goto L_0x0499
            r4 = 3
            r5 = r36
            goto L_0x049c
        L_0x0499:
            r5 = r36
            r4 = 0
        L_0x049c:
            r0.putDialogs(r5, r4)
            goto L_0x04a1
        L_0x04a0:
            r5 = r14
        L_0x04a1:
            int r0 = r11.DIALOGS_LOAD_TYPE_CHANNEL
            if (r3 != r0) goto L_0x04bb
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r0 = r5.chats
            r1 = 0
            java.lang.Object r0 = r0.get(r1)
            org.telegram.tgnet.TLRPC$Chat r0 = (org.telegram.tgnet.TLRPC$Chat) r0
            long r1 = r0.id
            r11.getChannelDifference(r1)
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda129 r1 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda129
            r1.<init>(r11, r0)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r1)
        L_0x04bb:
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda136 r16 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda136
            r0 = r16
            r1 = r33
            r2 = r23
            r3 = r35
            r4 = r36
            r5 = r39
            r6 = r42
            r7 = r34
            r11 = r38
            r12 = r41
            r13 = r40
            r14 = r15
            r0.<init>(r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r16)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$processLoadedDialogs$169(int, int, org.telegram.tgnet.TLRPC$messages_Dialogs, boolean, int, java.util.ArrayList, int, boolean, boolean):void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processLoadedDialogs$166(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, int i, boolean z, long[] jArr, int i2) {
        putUsers(tLRPC$messages_Dialogs.users, true);
        this.loadingDialogs.put(i, false);
        if (z) {
            this.dialogsEndReached.put(i, false);
            this.serverDialogsEndReached.put(i, false);
        } else if (jArr[0] == 2147483647L) {
            this.dialogsEndReached.put(i, true);
            this.serverDialogsEndReached.put(i, true);
        } else {
            loadDialogs(i, 0, i2, false);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processLoadedDialogs$167(TLRPC$Chat tLRPC$Chat) {
        checkChatInviter(tLRPC$Chat.id, true);
    }

    /* JADX WARNING: type inference failed for: r1v18 */
    /* JADX WARNING: type inference failed for: r1v19 */
    /* access modifiers changed from: private */
    /* JADX WARNING: Incorrect type for immutable var: ssa=int, code=?, for r1v12, types: [boolean, int] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$processLoadedDialogs$168(org.telegram.tgnet.TLRPC$Message r27, int r28, org.telegram.tgnet.TLRPC$messages_Dialogs r29, java.util.ArrayList r30, boolean r31, int r32, androidx.collection.LongSparseArray r33, androidx.collection.LongSparseArray r34, androidx.collection.LongSparseArray r35, int r36, boolean r37, int r38, java.util.ArrayList r39) {
        /*
            r26 = this;
            r0 = r26
            r1 = r27
            r2 = r28
            r3 = r29
            r4 = r30
            r5 = r32
            r6 = r33
            r7 = r36
            if (r1 == 0) goto L_0x001d
            int r8 = r0.dialogsLoadedTillDate
            int r1 = r1.date
            int r1 = java.lang.Math.min(r8, r1)
            r0.dialogsLoadedTillDate = r1
            goto L_0x0021
        L_0x001d:
            r1 = -2147483648(0xfffffffvar_, float:-0.0)
            r0.dialogsLoadedTillDate = r1
        L_0x0021:
            int r1 = r0.DIALOGS_LOAD_TYPE_CACHE
            if (r2 == r1) goto L_0x0031
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r3.dialogs
            r0.applyDialogsNotificationsSettings(r1)
            org.telegram.messenger.MediaDataController r1 = r26.getMediaDataController()
            r1.loadDraftsIfNeed()
        L_0x0031:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r1 = r3.users
            int r8 = r0.DIALOGS_LOAD_TYPE_CACHE
            r9 = 1
            r10 = 0
            if (r2 != r8) goto L_0x003b
            r8 = 1
            goto L_0x003c
        L_0x003b:
            r8 = 0
        L_0x003c:
            r0.putUsers(r1, r8)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r1 = r3.chats
            int r8 = r0.DIALOGS_LOAD_TYPE_CACHE
            if (r2 != r8) goto L_0x0047
            r8 = 1
            goto L_0x0048
        L_0x0047:
            r8 = 0
        L_0x0048:
            r0.putChats(r1, r8)
            r1 = 0
            if (r4 == 0) goto L_0x0076
            r8 = 0
        L_0x004f:
            int r11 = r30.size()
            if (r8 >= r11) goto L_0x0076
            java.lang.Object r11 = r4.get(r8)
            org.telegram.tgnet.TLRPC$EncryptedChat r11 = (org.telegram.tgnet.TLRPC$EncryptedChat) r11
            boolean r12 = r11 instanceof org.telegram.tgnet.TLRPC$TL_encryptedChat
            if (r12 == 0) goto L_0x0070
            int r12 = r11.layer
            int r12 = org.telegram.messenger.AndroidUtilities.getMyLayerVersion(r12)
            int r13 = org.telegram.messenger.SecretChatHelper.CURRENT_SECRET_CHAT_LAYER
            if (r12 >= r13) goto L_0x0070
            org.telegram.messenger.SecretChatHelper r12 = r26.getSecretChatHelper()
            r12.sendNotifyLayerMessage(r11, r1)
        L_0x0070:
            r0.putEncryptedChat(r11, r9)
            int r8 = r8 + 1
            goto L_0x004f
        L_0x0076:
            if (r31 != 0) goto L_0x0085
            int r4 = r0.DIALOGS_LOAD_TYPE_UNKNOWN
            if (r2 == r4) goto L_0x0085
            int r4 = r0.DIALOGS_LOAD_TYPE_CHANNEL
            if (r2 == r4) goto L_0x0085
            android.util.SparseBooleanArray r4 = r0.loadingDialogs
            r4.put(r5, r10)
        L_0x0085:
            r0.dialogsLoaded = r9
            if (r31 == 0) goto L_0x00a1
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r4 = r0.allDialogs
            boolean r4 = r4.isEmpty()
            if (r4 != 0) goto L_0x00a1
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r4 = r0.allDialogs
            int r8 = r4.size()
            int r8 = r8 - r9
            java.lang.Object r4 = r4.get(r8)
            org.telegram.tgnet.TLRPC$Dialog r4 = (org.telegram.tgnet.TLRPC$Dialog) r4
            int r4 = r4.last_message_date
            goto L_0x00a2
        L_0x00a1:
            r4 = 0
        L_0x00a2:
            r8 = 0
            r11 = 0
            r12 = 0
        L_0x00a5:
            int r13 = r33.size()
            if (r8 >= r13) goto L_0x0233
            long r9 = r6.keyAt(r8)
            java.lang.Object r16 = r6.valueAt(r8)
            r1 = r16
            org.telegram.tgnet.TLRPC$Dialog r1 = (org.telegram.tgnet.TLRPC$Dialog) r1
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r13 = r0.dialogs_dict
            java.lang.Object r13 = r13.get(r9)
            org.telegram.tgnet.TLRPC$Dialog r13 = (org.telegram.tgnet.TLRPC$Dialog) r13
            if (r31 == 0) goto L_0x00c7
            if (r13 == 0) goto L_0x00c7
            int r14 = r1.folder_id
            r13.folder_id = r14
        L_0x00c7:
            if (r31 == 0) goto L_0x00d3
            if (r4 == 0) goto L_0x00d3
            int r14 = r1.last_message_date
            if (r14 >= r4) goto L_0x00d3
            r16 = r4
            goto L_0x022a
        L_0x00d3:
            int r14 = r0.DIALOGS_LOAD_TYPE_CACHE
            if (r2 == r14) goto L_0x00f5
            org.telegram.tgnet.TLRPC$DraftMessage r14 = r1.draft
            boolean r14 = r14 instanceof org.telegram.tgnet.TLRPC$TL_draftMessage
            if (r14 == 0) goto L_0x00f5
            org.telegram.messenger.MediaDataController r19 = r26.getMediaDataController()
            long r14 = r1.id
            r22 = 0
            r16 = r4
            org.telegram.tgnet.TLRPC$DraftMessage r4 = r1.draft
            r24 = 0
            r25 = 0
            r20 = r14
            r23 = r4
            r19.saveDraft(r20, r22, r23, r24, r25)
            goto L_0x00f7
        L_0x00f5:
            r16 = r4
        L_0x00f7:
            int r4 = r1.folder_id
            if (r4 == r5) goto L_0x00fd
            int r11 = r11 + 1
        L_0x00fd:
            long r14 = r1.id
            r4 = r34
            java.lang.Object r14 = r4.get(r14)
            org.telegram.messenger.MessageObject r14 = (org.telegram.messenger.MessageObject) r14
            if (r13 != 0) goto L_0x013a
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r12 = r0.dialogs_dict
            r12.put(r9, r1)
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessage
            r1.put(r9, r14)
            if (r14 == 0) goto L_0x0137
            org.telegram.tgnet.TLRPC$Message r1 = r14.messageOwner
            org.telegram.tgnet.TLRPC$Peer r1 = r1.peer_id
            long r9 = r1.channel_id
            r12 = 0
            int r1 = (r9 > r12 ? 1 : (r9 == r12 ? 0 : -1))
            if (r1 != 0) goto L_0x0137
            android.util.SparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessagesByIds
            int r9 = r14.getId()
            r1.put(r9, r14)
            org.telegram.tgnet.TLRPC$Message r1 = r14.messageOwner
            long r9 = r1.random_id
            int r1 = (r9 > r12 ? 1 : (r9 == r12 ? 0 : -1))
            if (r1 == 0) goto L_0x0137
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessagesByRandomIds
            r1.put(r9, r14)
        L_0x0137:
            r12 = 1
            goto L_0x022a
        L_0x013a:
            int r15 = r0.DIALOGS_LOAD_TYPE_CACHE
            if (r2 == r15) goto L_0x0142
            org.telegram.tgnet.TLRPC$PeerNotifySettings r15 = r1.notify_settings
            r13.notify_settings = r15
        L_0x0142:
            boolean r15 = r1.pinned
            r13.pinned = r15
            int r15 = r1.pinnedNum
            r13.pinnedNum = r15
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r15 = r0.dialogMessage
            java.lang.Object r15 = r15.get(r9)
            org.telegram.messenger.MessageObject r15 = (org.telegram.messenger.MessageObject) r15
            if (r15 == 0) goto L_0x0158
            boolean r4 = r15.deleted
            if (r4 != 0) goto L_0x01c2
        L_0x0158:
            if (r15 == 0) goto L_0x01c2
            int r4 = r13.top_message
            if (r4 <= 0) goto L_0x015f
            goto L_0x01c2
        L_0x015f:
            if (r14 != 0) goto L_0x0167
            int r4 = r15.getId()
            if (r4 > 0) goto L_0x0173
        L_0x0167:
            if (r14 == 0) goto L_0x022a
            org.telegram.tgnet.TLRPC$Message r4 = r14.messageOwner
            int r4 = r4.date
            org.telegram.tgnet.TLRPC$Message r13 = r15.messageOwner
            int r13 = r13.date
            if (r4 <= r13) goto L_0x022a
        L_0x0173:
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r4 = r0.dialogs_dict
            r4.put(r9, r1)
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessage
            r1.put(r9, r14)
            org.telegram.tgnet.TLRPC$Message r1 = r15.messageOwner
            org.telegram.tgnet.TLRPC$Peer r1 = r1.peer_id
            long r9 = r1.channel_id
            r17 = 0
            int r1 = (r9 > r17 ? 1 : (r9 == r17 ? 0 : -1))
            if (r1 != 0) goto L_0x0192
            android.util.SparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessagesByIds
            int r4 = r15.getId()
            r1.remove(r4)
        L_0x0192:
            if (r14 == 0) goto L_0x01b4
            org.telegram.tgnet.TLRPC$Message r1 = r14.messageOwner
            org.telegram.tgnet.TLRPC$Peer r1 = r1.peer_id
            long r9 = r1.channel_id
            int r1 = (r9 > r17 ? 1 : (r9 == r17 ? 0 : -1))
            if (r1 != 0) goto L_0x01b4
            android.util.SparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessagesByIds
            int r4 = r14.getId()
            r1.put(r4, r14)
            org.telegram.tgnet.TLRPC$Message r1 = r14.messageOwner
            long r9 = r1.random_id
            int r1 = (r9 > r17 ? 1 : (r9 == r17 ? 0 : -1))
            if (r1 == 0) goto L_0x01b4
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessagesByRandomIds
            r1.put(r9, r14)
        L_0x01b4:
            org.telegram.tgnet.TLRPC$Message r1 = r15.messageOwner
            long r9 = r1.random_id
            int r1 = (r9 > r17 ? 1 : (r9 == r17 ? 0 : -1))
            if (r1 == 0) goto L_0x022a
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessagesByRandomIds
            r1.remove(r9)
            goto L_0x022a
        L_0x01c2:
            int r4 = r1.top_message
            int r13 = r13.top_message
            if (r4 < r13) goto L_0x022a
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r4 = r0.dialogs_dict
            r4.put(r9, r1)
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessage
            r1.put(r9, r14)
            if (r15 == 0) goto L_0x01f6
            org.telegram.tgnet.TLRPC$Message r1 = r15.messageOwner
            org.telegram.tgnet.TLRPC$Peer r1 = r1.peer_id
            long r9 = r1.channel_id
            r17 = 0
            int r1 = (r9 > r17 ? 1 : (r9 == r17 ? 0 : -1))
            if (r1 != 0) goto L_0x01e9
            android.util.SparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessagesByIds
            int r4 = r15.getId()
            r1.remove(r4)
        L_0x01e9:
            org.telegram.tgnet.TLRPC$Message r1 = r15.messageOwner
            long r9 = r1.random_id
            int r1 = (r9 > r17 ? 1 : (r9 == r17 ? 0 : -1))
            if (r1 == 0) goto L_0x01f6
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessagesByRandomIds
            r1.remove(r9)
        L_0x01f6:
            if (r14 == 0) goto L_0x022a
            if (r15 == 0) goto L_0x0208
            int r1 = r15.getId()
            int r4 = r14.getId()
            if (r1 != r4) goto L_0x0208
            boolean r1 = r15.deleted
            r14.deleted = r1
        L_0x0208:
            org.telegram.tgnet.TLRPC$Message r1 = r14.messageOwner
            org.telegram.tgnet.TLRPC$Peer r1 = r1.peer_id
            long r9 = r1.channel_id
            r17 = 0
            int r1 = (r9 > r17 ? 1 : (r9 == r17 ? 0 : -1))
            if (r1 != 0) goto L_0x022a
            android.util.SparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessagesByIds
            int r4 = r14.getId()
            r1.put(r4, r14)
            org.telegram.tgnet.TLRPC$Message r1 = r14.messageOwner
            long r9 = r1.random_id
            int r1 = (r9 > r17 ? 1 : (r9 == r17 ? 0 : -1))
            if (r1 == 0) goto L_0x022a
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessagesByRandomIds
            r1.put(r9, r14)
        L_0x022a:
            int r8 = r8 + 1
            r4 = r16
            r1 = 0
            r9 = 1
            r10 = 0
            goto L_0x00a5
        L_0x0233:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r0.allDialogs
            r1.clear()
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r1 = r0.dialogs_dict
            int r1 = r1.size()
            r13 = 0
        L_0x023f:
            if (r13 >= r1) goto L_0x025c
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r4 = r0.dialogs_dict
            java.lang.Object r4 = r4.valueAt(r13)
            org.telegram.tgnet.TLRPC$Dialog r4 = (org.telegram.tgnet.TLRPC$Dialog) r4
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r6 = r0.deletingDialogs
            long r8 = r4.id
            int r6 = r6.indexOfKey(r8)
            if (r6 < 0) goto L_0x0254
            goto L_0x0259
        L_0x0254:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r6 = r0.allDialogs
            r6.add(r4)
        L_0x0259:
            int r13 = r13 + 1
            goto L_0x023f
        L_0x025c:
            if (r31 == 0) goto L_0x0261
            r1 = r35
            goto L_0x0262
        L_0x0261:
            r1 = 0
        L_0x0262:
            r0.sortDialogs(r1)
            r26.putAllNeededDraftDialogs()
            int r1 = r0.DIALOGS_LOAD_TYPE_CHANNEL
            r8 = 2147483647(0x7fffffff, double:1.060997895E-314)
            if (r2 == r1) goto L_0x02ce
            int r1 = r0.DIALOGS_LOAD_TYPE_UNKNOWN
            if (r2 == r1) goto L_0x02ce
            if (r31 != 0) goto L_0x02ce
            android.util.SparseBooleanArray r1 = r0.dialogsEndReached
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r4 = r3.dialogs
            int r4 = r4.size()
            if (r4 == 0) goto L_0x0287
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r4 = r3.dialogs
            int r4 = r4.size()
            if (r4 == r7) goto L_0x028b
        L_0x0287:
            if (r2 != 0) goto L_0x028b
            r13 = 1
            goto L_0x028c
        L_0x028b:
            r13 = 0
        L_0x028c:
            r1.put(r5, r13)
            if (r11 <= 0) goto L_0x02b2
            r1 = 20
            if (r11 >= r1) goto L_0x02b2
            if (r5 != 0) goto L_0x02b2
            android.util.SparseBooleanArray r1 = r0.dialogsEndReached
            r4 = 1
            r1.put(r4, r4)
            org.telegram.messenger.UserConfig r1 = r26.getUserConfig()
            long[] r1 = r1.getDialogLoadOffsets(r5)
            r6 = 0
            r10 = r1[r6]
            int r1 = (r10 > r8 ? 1 : (r10 == r8 ? 0 : -1))
            if (r1 != 0) goto L_0x02b3
            android.util.SparseBooleanArray r1 = r0.serverDialogsEndReached
            r1.put(r4, r4)
            goto L_0x02b3
        L_0x02b2:
            r4 = 1
        L_0x02b3:
            if (r37 != 0) goto L_0x02ce
            android.util.SparseBooleanArray r1 = r0.serverDialogsEndReached
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r6 = r3.dialogs
            int r6 = r6.size()
            if (r6 == 0) goto L_0x02c7
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r3 = r3.dialogs
            int r3 = r3.size()
            if (r3 == r7) goto L_0x02ca
        L_0x02c7:
            if (r2 != 0) goto L_0x02ca
            goto L_0x02cb
        L_0x02ca:
            r4 = 0
        L_0x02cb:
            r1.put(r5, r4)
        L_0x02ce:
            org.telegram.messenger.UserConfig r1 = r26.getUserConfig()
            int r1 = r1.getTotalDialogsCount(r5)
            org.telegram.messenger.UserConfig r3 = r26.getUserConfig()
            long[] r3 = r3.getDialogLoadOffsets(r5)
            if (r37 != 0) goto L_0x02fb
            if (r31 != 0) goto L_0x02fb
            r4 = 400(0x190, float:5.6E-43)
            if (r1 >= r4) goto L_0x02fb
            r1 = 0
            r10 = r3[r1]
            r13 = -1
            int r4 = (r10 > r13 ? 1 : (r10 == r13 ? 0 : -1))
            if (r4 == 0) goto L_0x02fc
            r10 = r3[r1]
            int r3 = (r10 > r8 ? 1 : (r10 == r8 ? 0 : -1))
            if (r3 == 0) goto L_0x02fc
            r3 = 100
            r0.loadDialogs(r5, r1, r3, r1)
            goto L_0x02fc
        L_0x02fb:
            r1 = 0
        L_0x02fc:
            org.telegram.messenger.NotificationCenter r3 = r26.getNotificationCenter()
            int r4 = org.telegram.messenger.NotificationCenter.dialogsNeedReload
            java.lang.Object[] r6 = new java.lang.Object[r1]
            r3.postNotificationName(r4, r6)
            if (r31 == 0) goto L_0x0326
            org.telegram.messenger.UserConfig r2 = r26.getUserConfig()
            r3 = r38
            r2.migrateOffsetId = r3
            org.telegram.messenger.UserConfig r2 = r26.getUserConfig()
            r2.saveConfig(r1)
            r0.migratingDialogs = r1
            org.telegram.messenger.NotificationCenter r2 = r26.getNotificationCenter()
            int r3 = org.telegram.messenger.NotificationCenter.needReloadRecentDialogsSearch
            java.lang.Object[] r1 = new java.lang.Object[r1]
            r2.postNotificationName(r3, r1)
            goto L_0x033a
        L_0x0326:
            r26.generateUpdateMessage()
            if (r12 != 0) goto L_0x033a
            int r3 = r0.DIALOGS_LOAD_TYPE_CACHE
            if (r2 != r3) goto L_0x033a
            android.util.SparseBooleanArray r2 = r0.dialogsEndReached
            boolean r2 = r2.get(r5)
            if (r2 == 0) goto L_0x033a
            r0.loadDialogs(r5, r1, r7, r1)
        L_0x033a:
            org.telegram.messenger.UserConfig r1 = r26.getUserConfig()
            int r1 = r1.migrateOffsetId
            org.telegram.messenger.UserConfig r2 = r26.getUserConfig()
            int r2 = r2.migrateOffsetDate
            org.telegram.messenger.UserConfig r3 = r26.getUserConfig()
            long r3 = r3.migrateOffsetUserId
            org.telegram.messenger.UserConfig r5 = r26.getUserConfig()
            long r5 = r5.migrateOffsetChatId
            org.telegram.messenger.UserConfig r7 = r26.getUserConfig()
            long r7 = r7.migrateOffsetChannelId
            org.telegram.messenger.UserConfig r9 = r26.getUserConfig()
            long r9 = r9.migrateOffsetAccess
            r27 = r26
            r28 = r1
            r29 = r2
            r30 = r3
            r32 = r5
            r34 = r7
            r36 = r9
            r27.migrateDialogs(r28, r29, r30, r32, r34, r36)
            boolean r1 = r39.isEmpty()
            if (r1 != 0) goto L_0x037c
            r1 = r39
            r2 = 0
            r0.reloadDialogsReadValue(r1, r2)
        L_0x037c:
            r26.loadUnreadDialogs()
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$processLoadedDialogs$168(org.telegram.tgnet.TLRPC$Message, int, org.telegram.tgnet.TLRPC$messages_Dialogs, java.util.ArrayList, boolean, int, androidx.collection.LongSparseArray, androidx.collection.LongSparseArray, androidx.collection.LongSparseArray, int, boolean, int, java.util.ArrayList):void");
    }

    private void applyDialogNotificationsSettings(long j, TLRPC$PeerNotifySettings tLRPC$PeerNotifySettings) {
        int i;
        long j2 = j;
        TLRPC$PeerNotifySettings tLRPC$PeerNotifySettings2 = tLRPC$PeerNotifySettings;
        if (tLRPC$PeerNotifySettings2 != null) {
            SharedPreferences sharedPreferences = this.notificationsPreferences;
            int i2 = sharedPreferences.getInt("notify2_" + j2, -1);
            SharedPreferences sharedPreferences2 = this.notificationsPreferences;
            int i3 = sharedPreferences2.getInt("notifyuntil_" + j2, 0);
            SharedPreferences.Editor edit = this.notificationsPreferences.edit();
            TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j2);
            if (tLRPC$Dialog != null) {
                tLRPC$Dialog.notify_settings = tLRPC$PeerNotifySettings2;
            }
            if ((tLRPC$PeerNotifySettings2.flags & 2) != 0) {
                edit.putBoolean("silent_" + j2, tLRPC$PeerNotifySettings2.silent);
            } else {
                edit.remove("silent_" + j2);
            }
            boolean z = true;
            if ((tLRPC$PeerNotifySettings2.flags & 4) == 0) {
                if (i2 != -1) {
                    if (tLRPC$Dialog != null) {
                        tLRPC$Dialog.notify_settings.mute_until = 0;
                    }
                    edit.remove("notify2_" + j2);
                } else {
                    z = false;
                }
                getMessagesStorage().setDialogFlags(j2, 0);
            } else if (tLRPC$PeerNotifySettings2.mute_until > getConnectionsManager().getCurrentTime()) {
                if (tLRPC$PeerNotifySettings2.mute_until <= getConnectionsManager().getCurrentTime() + 31536000) {
                    if (i2 == 3 && i3 == tLRPC$PeerNotifySettings2.mute_until) {
                        z = false;
                    } else {
                        edit.putInt("notify2_" + j2, 3);
                        edit.putInt("notifyuntil_" + j2, tLRPC$PeerNotifySettings2.mute_until);
                        if (tLRPC$Dialog != null) {
                            tLRPC$Dialog.notify_settings.mute_until = 0;
                        }
                    }
                    i = tLRPC$PeerNotifySettings2.mute_until;
                } else if (i2 != 2) {
                    edit.putInt("notify2_" + j2, 2);
                    if (tLRPC$Dialog != null) {
                        tLRPC$Dialog.notify_settings.mute_until = Integer.MAX_VALUE;
                    }
                    i = 0;
                } else {
                    i = 0;
                    z = false;
                }
                getMessagesStorage().setDialogFlags(j2, (((long) i) << 32) | 1);
                getNotificationsController().removeNotificationsForDialog(j2);
            } else {
                if (i2 == 0 || i2 == 1) {
                    z = false;
                } else {
                    if (tLRPC$Dialog != null) {
                        tLRPC$Dialog.notify_settings.mute_until = 0;
                    }
                    edit.putInt("notify2_" + j2, 0);
                }
                getMessagesStorage().setDialogFlags(j2, 0);
            }
            edit.commit();
            if (z) {
                getNotificationCenter().postNotificationName(NotificationCenter.notificationsSettingsUpdated, new Object[0]);
            }
        }
    }

    private void applyDialogsNotificationsSettings(ArrayList<TLRPC$Dialog> arrayList) {
        SharedPreferences.Editor editor = null;
        for (int i = 0; i < arrayList.size(); i++) {
            TLRPC$Dialog tLRPC$Dialog = arrayList.get(i);
            if (tLRPC$Dialog.peer != null && (tLRPC$Dialog.notify_settings instanceof TLRPC$TL_peerNotifySettings)) {
                if (editor == null) {
                    editor = this.notificationsPreferences.edit();
                }
                long peerId = MessageObject.getPeerId(tLRPC$Dialog.peer);
                if ((tLRPC$Dialog.notify_settings.flags & 2) != 0) {
                    editor.putBoolean("silent_" + peerId, tLRPC$Dialog.notify_settings.silent);
                } else {
                    editor.remove("silent_" + peerId);
                }
                TLRPC$PeerNotifySettings tLRPC$PeerNotifySettings = tLRPC$Dialog.notify_settings;
                if ((tLRPC$PeerNotifySettings.flags & 4) == 0) {
                    editor.remove("notify2_" + peerId);
                } else if (tLRPC$PeerNotifySettings.mute_until <= getConnectionsManager().getCurrentTime()) {
                    editor.putInt("notify2_" + peerId, 0);
                } else if (tLRPC$Dialog.notify_settings.mute_until > getConnectionsManager().getCurrentTime() + 31536000) {
                    editor.putInt("notify2_" + peerId, 2);
                    tLRPC$Dialog.notify_settings.mute_until = Integer.MAX_VALUE;
                } else {
                    editor.putInt("notify2_" + peerId, 3);
                    editor.putInt("notifyuntil_" + peerId, tLRPC$Dialog.notify_settings.mute_until);
                }
            }
        }
        if (editor != null) {
            editor.commit();
        }
    }

    public void reloadMentionsCountForChannel(TLRPC$InputPeer tLRPC$InputPeer, long j) {
        NativeByteBuffer nativeByteBuffer;
        Exception e;
        if (j == 0) {
            try {
                nativeByteBuffer = new NativeByteBuffer(tLRPC$InputPeer.getObjectSize() + 4);
                try {
                    nativeByteBuffer.writeInt32(22);
                    tLRPC$InputPeer.serializeToStream(nativeByteBuffer);
                } catch (Exception e2) {
                    e = e2;
                }
            } catch (Exception e3) {
                Exception exc = e3;
                nativeByteBuffer = null;
                e = exc;
                FileLog.e((Throwable) e);
                j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                TLRPC$TL_messages_getUnreadMentions tLRPC$TL_messages_getUnreadMentions = new TLRPC$TL_messages_getUnreadMentions();
                tLRPC$TL_messages_getUnreadMentions.peer = tLRPC$InputPeer;
                tLRPC$TL_messages_getUnreadMentions.limit = 1;
                getConnectionsManager().sendRequest(tLRPC$TL_messages_getUnreadMentions, new MessagesController$$ExternalSyntheticLambda290(this, tLRPC$InputPeer, j));
            }
            j = getMessagesStorage().createPendingTask(nativeByteBuffer);
        }
        TLRPC$TL_messages_getUnreadMentions tLRPC$TL_messages_getUnreadMentions2 = new TLRPC$TL_messages_getUnreadMentions();
        tLRPC$TL_messages_getUnreadMentions2.peer = tLRPC$InputPeer;
        tLRPC$TL_messages_getUnreadMentions2.limit = 1;
        getConnectionsManager().sendRequest(tLRPC$TL_messages_getUnreadMentions2, new MessagesController$$ExternalSyntheticLambda290(this, tLRPC$InputPeer, j));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$reloadMentionsCountForChannel$170(TLRPC$InputPeer tLRPC$InputPeer, long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
        if (tLRPC$messages_Messages != null) {
            int i = tLRPC$messages_Messages.count;
            if (i == 0) {
                i = tLRPC$messages_Messages.messages.size();
            }
            getMessagesStorage().resetMentionsCount(-tLRPC$InputPeer.channel_id, i);
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public void reloadMentionsCountForChannels(ArrayList<Long> arrayList) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda95(this, arrayList));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$reloadMentionsCountForChannels$171(ArrayList arrayList) {
        for (int i = 0; i < arrayList.size(); i++) {
            reloadMentionsCountForChannel(getInputPeer(-((Long) arrayList.get(i)).longValue()), 0);
        }
    }

    public void processDialogsUpdateRead(LongSparseIntArray longSparseIntArray, LongSparseIntArray longSparseIntArray2) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda113(this, longSparseIntArray, longSparseIntArray2));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processDialogsUpdateRead$172(LongSparseIntArray longSparseIntArray, LongSparseIntArray longSparseIntArray2) {
        boolean z;
        if (longSparseIntArray != null) {
            z = false;
            for (int i = 0; i < longSparseIntArray.size(); i++) {
                long keyAt = longSparseIntArray.keyAt(i);
                TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(keyAt);
                if (tLRPC$Dialog != null) {
                    int i2 = tLRPC$Dialog.unread_count;
                    int valueAt = longSparseIntArray.valueAt(i);
                    tLRPC$Dialog.unread_count = valueAt;
                    if (i2 != 0 && valueAt == 0) {
                        if (!isDialogMuted(keyAt)) {
                            this.unreadUnmutedDialogs--;
                        }
                        if (!z) {
                            int i3 = 0;
                            while (true) {
                                DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                                if (i3 < dialogFilterArr.length) {
                                    if (dialogFilterArr[i3] != null && (dialogFilterArr[i3].flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                                        break;
                                    }
                                    i3++;
                                } else {
                                    break;
                                }
                            }
                        }
                    } else if (i2 == 0 && !tLRPC$Dialog.unread_mark && valueAt != 0) {
                        if (!isDialogMuted(keyAt)) {
                            this.unreadUnmutedDialogs++;
                        }
                        if (!z) {
                            int i4 = 0;
                            while (true) {
                                DialogFilter[] dialogFilterArr2 = this.selectedDialogFilter;
                                if (i4 < dialogFilterArr2.length) {
                                    if (dialogFilterArr2[i4] != null && (dialogFilterArr2[i4].flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                                        break;
                                    }
                                    i4++;
                                } else {
                                    break;
                                }
                            }
                        }
                    }
                    z = true;
                }
            }
        } else {
            z = false;
        }
        if (longSparseIntArray2 != null) {
            for (int i5 = 0; i5 < longSparseIntArray2.size(); i5++) {
                TLRPC$Dialog tLRPC$Dialog2 = this.dialogs_dict.get(longSparseIntArray2.keyAt(i5));
                if (tLRPC$Dialog2 != null) {
                    tLRPC$Dialog2.unread_mentions_count = longSparseIntArray2.valueAt(i5);
                    if (this.createdDialogMainThreadIds.contains(Long.valueOf(tLRPC$Dialog2.id))) {
                        getNotificationCenter().postNotificationName(NotificationCenter.updateMentionsCount, Long.valueOf(tLRPC$Dialog2.id), Integer.valueOf(tLRPC$Dialog2.unread_mentions_count));
                    }
                    if (!z) {
                        int i6 = 0;
                        while (true) {
                            DialogFilter[] dialogFilterArr3 = this.selectedDialogFilter;
                            if (i6 >= dialogFilterArr3.length) {
                                break;
                            } else if (dialogFilterArr3[i6] == null || ((dialogFilterArr3[i6].flags & DIALOG_FILTER_FLAG_EXCLUDE_MUTED) == 0 && (dialogFilterArr3[i6].flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) == 0)) {
                                i6++;
                            }
                        }
                        z = true;
                    }
                }
            }
        }
        if (z) {
            sortDialogs((LongSparseArray<TLRPC$Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_READ_DIALOG_MESSAGE));
        if (longSparseIntArray != null) {
            getNotificationsController().processDialogsUpdateRead(longSparseIntArray);
        }
    }

    /* access modifiers changed from: protected */
    public void checkLastDialogMessage(TLRPC$Dialog tLRPC$Dialog, TLRPC$InputPeer tLRPC$InputPeer, long j) {
        NativeByteBuffer nativeByteBuffer;
        Exception e;
        if (!DialogObject.isEncryptedDialog(tLRPC$Dialog.id) && this.checkingLastMessagesDialogs.indexOfKey(tLRPC$Dialog.id) < 0) {
            TLRPC$TL_messages_getHistory tLRPC$TL_messages_getHistory = new TLRPC$TL_messages_getHistory();
            if (tLRPC$InputPeer == null) {
                tLRPC$InputPeer = getInputPeer(tLRPC$Dialog.id);
            }
            tLRPC$TL_messages_getHistory.peer = tLRPC$InputPeer;
            if (tLRPC$InputPeer != null) {
                tLRPC$TL_messages_getHistory.limit = 1;
                this.checkingLastMessagesDialogs.put(tLRPC$Dialog.id, Boolean.TRUE);
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("checkLastDialogMessage for " + tLRPC$Dialog.id);
                }
                if (j == 0) {
                    try {
                        nativeByteBuffer = new NativeByteBuffer(tLRPC$TL_messages_getHistory.peer.getObjectSize() + 60);
                        try {
                            nativeByteBuffer.writeInt32(14);
                            nativeByteBuffer.writeInt64(tLRPC$Dialog.id);
                            nativeByteBuffer.writeInt32(tLRPC$Dialog.top_message);
                            nativeByteBuffer.writeInt32(tLRPC$Dialog.read_inbox_max_id);
                            nativeByteBuffer.writeInt32(tLRPC$Dialog.read_outbox_max_id);
                            nativeByteBuffer.writeInt32(tLRPC$Dialog.unread_count);
                            nativeByteBuffer.writeInt32(tLRPC$Dialog.last_message_date);
                            nativeByteBuffer.writeInt32(tLRPC$Dialog.pts);
                            nativeByteBuffer.writeInt32(tLRPC$Dialog.flags);
                            nativeByteBuffer.writeBool(tLRPC$Dialog.pinned);
                            nativeByteBuffer.writeInt32(tLRPC$Dialog.pinnedNum);
                            nativeByteBuffer.writeInt32(tLRPC$Dialog.unread_mentions_count);
                            nativeByteBuffer.writeBool(tLRPC$Dialog.unread_mark);
                            nativeByteBuffer.writeInt32(tLRPC$Dialog.folder_id);
                            tLRPC$TL_messages_getHistory.peer.serializeToStream(nativeByteBuffer);
                        } catch (Exception e2) {
                            e = e2;
                        }
                    } catch (Exception e3) {
                        Exception exc = e3;
                        nativeByteBuffer = null;
                        e = exc;
                        FileLog.e((Throwable) e);
                        j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                        getConnectionsManager().sendRequest(tLRPC$TL_messages_getHistory, new MessagesController$$ExternalSyntheticLambda289(this, tLRPC$Dialog, j));
                    }
                    j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                }
                getConnectionsManager().sendRequest(tLRPC$TL_messages_getHistory, new MessagesController$$ExternalSyntheticLambda289(this, tLRPC$Dialog, j));
            }
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$checkLastDialogMessage$176(TLRPC$Dialog tLRPC$Dialog, long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
            removeDeletedMessagesFromArray(tLRPC$Dialog.id, tLRPC$messages_Messages.messages);
            if (!tLRPC$messages_Messages.messages.isEmpty()) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("checkLastDialogMessage for " + tLRPC$Dialog.id + " has message");
                }
                TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
                TLRPC$Message tLRPC$Message = tLRPC$messages_Messages.messages.get(0);
                TLRPC$TL_dialog tLRPC$TL_dialog = new TLRPC$TL_dialog();
                tLRPC$TL_dialog.flags = tLRPC$Dialog.flags;
                tLRPC$TL_dialog.top_message = tLRPC$Message.id;
                tLRPC$TL_dialog.last_message_date = tLRPC$Message.date;
                tLRPC$TL_dialog.notify_settings = tLRPC$Dialog.notify_settings;
                tLRPC$TL_dialog.pts = tLRPC$Dialog.pts;
                tLRPC$TL_dialog.unread_count = tLRPC$Dialog.unread_count;
                tLRPC$TL_dialog.unread_mark = tLRPC$Dialog.unread_mark;
                tLRPC$TL_dialog.unread_mentions_count = tLRPC$Dialog.unread_mentions_count;
                tLRPC$TL_dialog.read_inbox_max_id = tLRPC$Dialog.read_inbox_max_id;
                tLRPC$TL_dialog.read_outbox_max_id = tLRPC$Dialog.read_outbox_max_id;
                tLRPC$TL_dialog.pinned = tLRPC$Dialog.pinned;
                tLRPC$TL_dialog.pinnedNum = tLRPC$Dialog.pinnedNum;
                tLRPC$TL_dialog.folder_id = tLRPC$Dialog.folder_id;
                long j2 = tLRPC$Dialog.id;
                tLRPC$TL_dialog.id = j2;
                tLRPC$Message.dialog_id = j2;
                tLRPC$TL_messages_dialogs.users.addAll(tLRPC$messages_Messages.users);
                tLRPC$TL_messages_dialogs.chats.addAll(tLRPC$messages_Messages.chats);
                tLRPC$TL_messages_dialogs.dialogs.add(tLRPC$TL_dialog);
                tLRPC$TL_messages_dialogs.messages.addAll(tLRPC$messages_Messages.messages);
                tLRPC$TL_messages_dialogs.count = 1;
                processDialogsUpdate(tLRPC$TL_messages_dialogs, (ArrayList<TLRPC$EncryptedChat>) null, false);
                getMessagesStorage().putMessages(tLRPC$messages_Messages.messages, true, true, false, getDownloadController().getAutodownloadMask(), true, false);
            } else {
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda134(this, tLRPC$Dialog));
            }
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda135(this, tLRPC$Dialog));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$checkLastDialogMessage$174(TLRPC$Dialog tLRPC$Dialog) {
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("checkLastDialogMessage for " + tLRPC$Dialog.id + " has not message");
        }
        if (getMediaDataController().getDraft(tLRPC$Dialog.id, 0) == null) {
            TLRPC$Dialog tLRPC$Dialog2 = this.dialogs_dict.get(tLRPC$Dialog.id);
            if (tLRPC$Dialog2 == null) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("checkLastDialogMessage for " + tLRPC$Dialog.id + " current dialog not found");
                }
                getMessagesStorage().isDialogHasTopMessage(tLRPC$Dialog.id, new MessagesController$$ExternalSyntheticLambda133(this, tLRPC$Dialog));
                return;
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("checkLastDialogMessage for " + tLRPC$Dialog.id + " current dialog top message " + tLRPC$Dialog2.top_message);
            }
            if (tLRPC$Dialog2.top_message == 0) {
                deleteDialog(tLRPC$Dialog.id, 3);
            }
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$checkLastDialogMessage$173(TLRPC$Dialog tLRPC$Dialog) {
        deleteDialog(tLRPC$Dialog.id, 3);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$checkLastDialogMessage$175(TLRPC$Dialog tLRPC$Dialog) {
        this.checkingLastMessagesDialogs.delete(tLRPC$Dialog.id);
    }

    public void processDialogsUpdate(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, ArrayList<TLRPC$EncryptedChat> arrayList, boolean z) {
        Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda173(this, tLRPC$messages_Dialogs, z));
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Code restructure failed: missing block: B:20:0x0096, code lost:
        if (org.telegram.messenger.ChatObject.isNotInChat(r5) != false) goto L_0x00b1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:28:0x00af, code lost:
        if (org.telegram.messenger.ChatObject.isNotInChat(r5) != false) goto L_0x00b1;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$processDialogsUpdate$178(org.telegram.tgnet.TLRPC$messages_Dialogs r19, boolean r20) {
        /*
            r18 = this;
            r7 = r18
            r2 = r19
            androidx.collection.LongSparseArray r3 = new androidx.collection.LongSparseArray
            r3.<init>()
            androidx.collection.LongSparseArray r4 = new androidx.collection.LongSparseArray
            r4.<init>()
            androidx.collection.LongSparseArray r0 = new androidx.collection.LongSparseArray
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r1 = r2.users
            int r1 = r1.size()
            r0.<init>(r1)
            androidx.collection.LongSparseArray r1 = new androidx.collection.LongSparseArray
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r5 = r2.chats
            int r5 = r5.size()
            r1.<init>(r5)
            org.telegram.messenger.support.LongSparseIntArray r6 = new org.telegram.messenger.support.LongSparseIntArray
            r6.<init>()
            r5 = 0
            java.lang.Integer r15 = java.lang.Integer.valueOf(r5)
            r8 = 0
        L_0x002f:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r9 = r2.users
            int r9 = r9.size()
            if (r8 >= r9) goto L_0x0047
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r9 = r2.users
            java.lang.Object r9 = r9.get(r8)
            org.telegram.tgnet.TLRPC$User r9 = (org.telegram.tgnet.TLRPC$User) r9
            long r10 = r9.id
            r0.put(r10, r9)
            int r8 = r8 + 1
            goto L_0x002f
        L_0x0047:
            r8 = 0
        L_0x0048:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r9 = r2.chats
            int r9 = r9.size()
            if (r8 >= r9) goto L_0x0060
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r9 = r2.chats
            java.lang.Object r9 = r9.get(r8)
            org.telegram.tgnet.TLRPC$Chat r9 = (org.telegram.tgnet.TLRPC$Chat) r9
            long r10 = r9.id
            r1.put(r10, r9)
            int r8 = r8 + 1
            goto L_0x0048
        L_0x0060:
            r14 = 0
        L_0x0061:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r8 = r2.messages
            int r8 = r8.size()
            r9 = 0
            if (r14 >= r8) goto L_0x00d1
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r8 = r2.messages
            java.lang.Object r8 = r8.get(r14)
            r11 = r8
            org.telegram.tgnet.TLRPC$Message r11 = (org.telegram.tgnet.TLRPC$Message) r11
            long r12 = r7.promoDialogId
            int r8 = (r12 > r9 ? 1 : (r12 == r9 ? 0 : -1))
            r16 = r6
            if (r8 == 0) goto L_0x0082
            long r5 = r11.dialog_id
            int r8 = (r12 > r5 ? 1 : (r12 == r5 ? 0 : -1))
            if (r8 == 0) goto L_0x00b4
        L_0x0082:
            org.telegram.tgnet.TLRPC$Peer r5 = r11.peer_id
            long r12 = r5.channel_id
            int r6 = (r12 > r9 ? 1 : (r12 == r9 ? 0 : -1))
            if (r6 == 0) goto L_0x0099
            java.lang.Object r5 = r1.get(r12)
            org.telegram.tgnet.TLRPC$Chat r5 = (org.telegram.tgnet.TLRPC$Chat) r5
            if (r5 == 0) goto L_0x00b4
            boolean r5 = org.telegram.messenger.ChatObject.isNotInChat(r5)
            if (r5 == 0) goto L_0x00b4
            goto L_0x00b1
        L_0x0099:
            long r5 = r5.chat_id
            int r8 = (r5 > r9 ? 1 : (r5 == r9 ? 0 : -1))
            if (r8 == 0) goto L_0x00b4
            java.lang.Object r5 = r1.get(r5)
            org.telegram.tgnet.TLRPC$Chat r5 = (org.telegram.tgnet.TLRPC$Chat) r5
            if (r5 == 0) goto L_0x00b4
            org.telegram.tgnet.TLRPC$InputChannel r6 = r5.migrated_to
            if (r6 != 0) goto L_0x00b1
            boolean r5 = org.telegram.messenger.ChatObject.isNotInChat(r5)
            if (r5 == 0) goto L_0x00b4
        L_0x00b1:
            r17 = r14
            goto L_0x00cb
        L_0x00b4:
            org.telegram.messenger.MessageObject r5 = new org.telegram.messenger.MessageObject
            int r9 = r7.currentAccount
            r13 = 0
            r6 = 1
            r8 = r5
            r10 = r11
            r11 = r0
            r12 = r1
            r17 = r14
            r14 = r6
            r8.<init>((int) r9, (org.telegram.tgnet.TLRPC$Message) r10, (androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$User>) r11, (androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Chat>) r12, (boolean) r13, (boolean) r14)
            long r8 = r5.getDialogId()
            r4.put(r8, r5)
        L_0x00cb:
            int r14 = r17 + 1
            r6 = r16
            r5 = 0
            goto L_0x0061
        L_0x00d1:
            r16 = r6
            r5 = 0
        L_0x00d4:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r0 = r2.dialogs
            int r0 = r0.size()
            if (r5 >= r0) goto L_0x01a8
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r0 = r2.dialogs
            java.lang.Object r0 = r0.get(r5)
            org.telegram.tgnet.TLRPC$Dialog r0 = (org.telegram.tgnet.TLRPC$Dialog) r0
            org.telegram.messenger.DialogObject.initDialog(r0)
            long r11 = r7.promoDialogId
            int r6 = (r11 > r9 ? 1 : (r11 == r9 ? 0 : -1))
            if (r6 == 0) goto L_0x00f3
            long r13 = r0.id
            int r6 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1))
            if (r6 == 0) goto L_0x012c
        L_0x00f3:
            boolean r6 = org.telegram.messenger.DialogObject.isChannel(r0)
            if (r6 == 0) goto L_0x010b
            long r11 = r0.id
            long r11 = -r11
            java.lang.Object r6 = r1.get(r11)
            org.telegram.tgnet.TLRPC$Chat r6 = (org.telegram.tgnet.TLRPC$Chat) r6
            if (r6 == 0) goto L_0x012c
            boolean r6 = org.telegram.messenger.ChatObject.isNotInChat(r6)
            if (r6 == 0) goto L_0x012c
            goto L_0x0128
        L_0x010b:
            long r11 = r0.id
            boolean r6 = org.telegram.messenger.DialogObject.isChatDialog(r11)
            if (r6 == 0) goto L_0x012c
            long r11 = r0.id
            long r11 = -r11
            java.lang.Object r6 = r1.get(r11)
            org.telegram.tgnet.TLRPC$Chat r6 = (org.telegram.tgnet.TLRPC$Chat) r6
            if (r6 == 0) goto L_0x012c
            org.telegram.tgnet.TLRPC$InputChannel r8 = r6.migrated_to
            if (r8 != 0) goto L_0x0128
            boolean r6 = org.telegram.messenger.ChatObject.isNotInChat(r6)
            if (r6 == 0) goto L_0x012c
        L_0x0128:
            r8 = r16
            goto L_0x01a2
        L_0x012c:
            int r6 = r0.last_message_date
            if (r6 != 0) goto L_0x0140
            long r11 = r0.id
            java.lang.Object r6 = r4.get(r11)
            org.telegram.messenger.MessageObject r6 = (org.telegram.messenger.MessageObject) r6
            if (r6 == 0) goto L_0x0140
            org.telegram.tgnet.TLRPC$Message r6 = r6.messageOwner
            int r6 = r6.date
            r0.last_message_date = r6
        L_0x0140:
            long r11 = r0.id
            r3.put(r11, r0)
            long r11 = r0.id
            int r6 = r0.unread_count
            r8 = r16
            r8.put(r11, r6)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r6 = r7.dialogs_read_inbox_max
            long r11 = r0.id
            java.lang.Long r11 = java.lang.Long.valueOf(r11)
            java.lang.Object r6 = r6.get(r11)
            java.lang.Integer r6 = (java.lang.Integer) r6
            if (r6 != 0) goto L_0x015f
            r6 = r15
        L_0x015f:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r11 = r7.dialogs_read_inbox_max
            long r12 = r0.id
            java.lang.Long r12 = java.lang.Long.valueOf(r12)
            int r6 = r6.intValue()
            int r13 = r0.read_inbox_max_id
            int r6 = java.lang.Math.max(r6, r13)
            java.lang.Integer r6 = java.lang.Integer.valueOf(r6)
            r11.put(r12, r6)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r6 = r7.dialogs_read_outbox_max
            long r11 = r0.id
            java.lang.Long r11 = java.lang.Long.valueOf(r11)
            java.lang.Object r6 = r6.get(r11)
            java.lang.Integer r6 = (java.lang.Integer) r6
            if (r6 != 0) goto L_0x0189
            r6 = r15
        L_0x0189:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r11 = r7.dialogs_read_outbox_max
            long r12 = r0.id
            java.lang.Long r12 = java.lang.Long.valueOf(r12)
            int r6 = r6.intValue()
            int r0 = r0.read_outbox_max_id
            int r0 = java.lang.Math.max(r6, r0)
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)
            r11.put(r12, r0)
        L_0x01a2:
            int r5 = r5 + 1
            r16 = r8
            goto L_0x00d4
        L_0x01a8:
            r8 = r16
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda171 r9 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda171
            r0 = r9
            r1 = r18
            r2 = r19
            r5 = r20
            r6 = r8
            r0.<init>(r1, r2, r3, r4, r5, r6)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r9)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$processDialogsUpdate$178(org.telegram.tgnet.TLRPC$messages_Dialogs, boolean):void");
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Removed duplicated region for block: B:110:0x026e A[SYNTHETIC] */
    /* JADX WARNING: Removed duplicated region for block: B:114:0x026e A[SYNTHETIC] */
    /* JADX WARNING: Removed duplicated region for block: B:38:0x0112  */
    /* JADX WARNING: Removed duplicated region for block: B:48:0x015f  */
    /* JADX WARNING: Removed duplicated region for block: B:68:0x01d9  */
    /* JADX WARNING: Removed duplicated region for block: B:69:0x01e0 A[ADDED_TO_REGION] */
    /* JADX WARNING: Removed duplicated region for block: B:96:0x026b  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$processDialogsUpdate$177(org.telegram.tgnet.TLRPC$messages_Dialogs r19, androidx.collection.LongSparseArray r20, androidx.collection.LongSparseArray r21, boolean r22, org.telegram.messenger.support.LongSparseIntArray r23) {
        /*
            r18 = this;
            r0 = r18
            r1 = r19
            r2 = r20
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r3 = r1.users
            r4 = 1
            r0.putUsers(r3, r4)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r1 = r1.chats
            r0.putChats(r1, r4)
            r1 = 0
            r3 = 0
        L_0x0013:
            int r5 = r20.size()
            r6 = 0
            if (r3 >= r5) goto L_0x0273
            long r7 = r2.keyAt(r3)
            boolean r5 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r5 == 0) goto L_0x0036
            java.lang.StringBuilder r5 = new java.lang.StringBuilder
            r5.<init>()
            java.lang.String r9 = "processDialogsUpdate "
            r5.append(r9)
            r5.append(r7)
            java.lang.String r5 = r5.toString()
            org.telegram.messenger.FileLog.d(r5)
        L_0x0036:
            java.lang.Object r5 = r2.valueAt(r3)
            org.telegram.tgnet.TLRPC$Dialog r5 = (org.telegram.tgnet.TLRPC$Dialog) r5
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r9 = r0.dialogs_dict
            java.lang.Object r9 = r9.get(r7)
            org.telegram.tgnet.TLRPC$Dialog r9 = (org.telegram.tgnet.TLRPC$Dialog) r9
            long r10 = r5.id
            r12 = r21
            java.lang.Object r10 = r12.get(r10)
            org.telegram.messenger.MessageObject r10 = (org.telegram.messenger.MessageObject) r10
            java.lang.String r11 = "processDialogsUpdate new message is null"
            r13 = 0
            if (r9 != 0) goto L_0x00be
            boolean r9 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r9 == 0) goto L_0x005d
            java.lang.String r9 = "processDialogsUpdate dialog null"
            org.telegram.messenger.FileLog.d(r9)
        L_0x005d:
            android.util.SparseIntArray r9 = r0.nextDialogsCacheOffset
            int r15 = r5.folder_id
            int r9 = r9.get(r15, r1)
            int r9 = r9 + r4
            android.util.SparseIntArray r15 = r0.nextDialogsCacheOffset
            int r4 = r5.folder_id
            r15.put(r4, r9)
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r4 = r0.dialogs_dict
            r4.put(r7, r5)
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r4 = r0.dialogMessage
            r4.put(r7, r10)
            if (r10 != 0) goto L_0x0086
            if (r22 == 0) goto L_0x007e
            r0.checkLastDialogMessage(r5, r6, r13)
        L_0x007e:
            boolean r4 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r4 == 0) goto L_0x00bb
            org.telegram.messenger.FileLog.d(r11)
            goto L_0x00bb
        L_0x0086:
            org.telegram.tgnet.TLRPC$Message r4 = r10.messageOwner
            org.telegram.tgnet.TLRPC$Peer r4 = r4.peer_id
            long r4 = r4.channel_id
            int r6 = (r4 > r13 ? 1 : (r4 == r13 ? 0 : -1))
            if (r6 != 0) goto L_0x00bb
            android.util.SparseArray<org.telegram.messenger.MessageObject> r4 = r0.dialogMessagesByIds
            int r5 = r10.getId()
            r4.put(r5, r10)
            int r4 = r0.dialogsLoadedTillDate
            org.telegram.tgnet.TLRPC$Message r5 = r10.messageOwner
            int r5 = r5.date
            int r4 = java.lang.Math.min(r4, r5)
            r0.dialogsLoadedTillDate = r4
            org.telegram.tgnet.TLRPC$Message r4 = r10.messageOwner
            long r4 = r4.random_id
            int r6 = (r4 > r13 ? 1 : (r4 == r13 ? 0 : -1))
            if (r6 == 0) goto L_0x00b2
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r6 = r0.dialogMessagesByRandomIds
            r6.put(r4, r10)
        L_0x00b2:
            boolean r4 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r4 == 0) goto L_0x00bb
            java.lang.String r4 = "processDialogsUpdate new message not null"
            org.telegram.messenger.FileLog.d(r4)
        L_0x00bb:
            r7 = 1
            goto L_0x026e
        L_0x00be:
            boolean r4 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r4 == 0) goto L_0x00c7
            java.lang.String r4 = "processDialogsUpdate dialog not null"
            org.telegram.messenger.FileLog.d(r4)
        L_0x00c7:
            int r4 = r5.unread_count
            r9.unread_count = r4
            int r4 = r9.unread_mentions_count
            int r15 = r5.unread_mentions_count
            if (r4 == r15) goto L_0x0101
            r9.unread_mentions_count = r15
            java.util.ArrayList<java.lang.Long> r4 = r0.createdDialogMainThreadIds
            long r13 = r9.id
            java.lang.Long r13 = java.lang.Long.valueOf(r13)
            boolean r4 = r4.contains(r13)
            if (r4 == 0) goto L_0x0101
            org.telegram.messenger.NotificationCenter r4 = r18.getNotificationCenter()
            int r13 = org.telegram.messenger.NotificationCenter.updateMentionsCount
            r14 = 2
            java.lang.Object[] r14 = new java.lang.Object[r14]
            r16 = r7
            long r6 = r9.id
            java.lang.Long r6 = java.lang.Long.valueOf(r6)
            r14[r1] = r6
            int r6 = r9.unread_mentions_count
            java.lang.Integer r6 = java.lang.Integer.valueOf(r6)
            r7 = 1
            r14[r7] = r6
            r4.postNotificationName(r13, r14)
            goto L_0x0104
        L_0x0101:
            r16 = r7
            r7 = 1
        L_0x0104:
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r4 = r0.dialogMessage
            r13 = r16
            java.lang.Object r4 = r4.get(r13)
            org.telegram.messenger.MessageObject r4 = (org.telegram.messenger.MessageObject) r4
            boolean r6 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r6 == 0) goto L_0x0157
            java.lang.StringBuilder r6 = new java.lang.StringBuilder
            r6.<init>()
            java.lang.String r8 = "processDialogsUpdate oldMsg "
            r6.append(r8)
            r6.append(r4)
            java.lang.String r8 = " old top_message = "
            r6.append(r8)
            int r8 = r9.top_message
            r6.append(r8)
            java.lang.String r8 = " new top_message = "
            r6.append(r8)
            int r8 = r5.top_message
            r6.append(r8)
            java.lang.String r6 = r6.toString()
            org.telegram.messenger.FileLog.d(r6)
            java.lang.StringBuilder r6 = new java.lang.StringBuilder
            r6.<init>()
            java.lang.String r8 = "processDialogsUpdate oldMsgDeleted "
            r6.append(r8)
            if (r4 == 0) goto L_0x014c
            boolean r8 = r4.deleted
            if (r8 == 0) goto L_0x014c
            r8 = 1
            goto L_0x014d
        L_0x014c:
            r8 = 0
        L_0x014d:
            r6.append(r8)
            java.lang.String r6 = r6.toString()
            org.telegram.messenger.FileLog.d(r6)
        L_0x0157:
            if (r4 == 0) goto L_0x01e0
            int r6 = r9.top_message
            if (r6 <= 0) goto L_0x015f
            goto L_0x01e0
        L_0x015f:
            boolean r6 = r4.deleted
            if (r6 != 0) goto L_0x016f
            if (r10 == 0) goto L_0x016f
            org.telegram.tgnet.TLRPC$Message r6 = r10.messageOwner
            int r6 = r6.date
            org.telegram.tgnet.TLRPC$Message r8 = r4.messageOwner
            int r8 = r8.date
            if (r6 <= r8) goto L_0x026e
        L_0x016f:
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r6 = r0.dialogs_dict
            r6.put(r13, r5)
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r5 = r0.dialogMessage
            r5.put(r13, r10)
            org.telegram.tgnet.TLRPC$Message r5 = r4.messageOwner
            org.telegram.tgnet.TLRPC$Peer r5 = r5.peer_id
            long r5 = r5.channel_id
            r8 = 0
            int r11 = (r5 > r8 ? 1 : (r5 == r8 ? 0 : -1))
            if (r11 != 0) goto L_0x018e
            android.util.SparseArray<org.telegram.messenger.MessageObject> r5 = r0.dialogMessagesByIds
            int r6 = r4.getId()
            r5.remove(r6)
        L_0x018e:
            if (r10 == 0) goto L_0x01cf
            int r5 = r4.getId()
            int r6 = r10.getId()
            if (r5 != r6) goto L_0x019e
            boolean r5 = r4.deleted
            r10.deleted = r5
        L_0x019e:
            org.telegram.tgnet.TLRPC$Message r5 = r10.messageOwner
            org.telegram.tgnet.TLRPC$Peer r5 = r5.peer_id
            long r5 = r5.channel_id
            r8 = 0
            int r11 = (r5 > r8 ? 1 : (r5 == r8 ? 0 : -1))
            if (r11 != 0) goto L_0x01cf
            android.util.SparseArray<org.telegram.messenger.MessageObject> r5 = r0.dialogMessagesByIds
            int r6 = r10.getId()
            r5.put(r6, r10)
            int r5 = r0.dialogsLoadedTillDate
            org.telegram.tgnet.TLRPC$Message r6 = r10.messageOwner
            int r6 = r6.date
            int r5 = java.lang.Math.min(r5, r6)
            r0.dialogsLoadedTillDate = r5
            org.telegram.tgnet.TLRPC$Message r5 = r10.messageOwner
            long r5 = r5.random_id
            r8 = 0
            int r11 = (r5 > r8 ? 1 : (r5 == r8 ? 0 : -1))
            if (r11 == 0) goto L_0x01d1
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r11 = r0.dialogMessagesByRandomIds
            r11.put(r5, r10)
            goto L_0x01d1
        L_0x01cf:
            r8 = 0
        L_0x01d1:
            org.telegram.tgnet.TLRPC$Message r4 = r4.messageOwner
            long r4 = r4.random_id
            int r6 = (r4 > r8 ? 1 : (r4 == r8 ? 0 : -1))
            if (r6 == 0) goto L_0x026e
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r6 = r0.dialogMessagesByRandomIds
            r6.remove(r4)
            goto L_0x026e
        L_0x01e0:
            if (r4 == 0) goto L_0x01e6
            boolean r6 = r4.deleted
            if (r6 != 0) goto L_0x01ec
        L_0x01e6:
            int r6 = r5.top_message
            int r8 = r9.top_message
            if (r6 <= r8) goto L_0x025d
        L_0x01ec:
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r6 = r0.dialogs_dict
            r6.put(r13, r5)
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r6 = r0.dialogMessage
            r6.put(r13, r10)
            if (r4 == 0) goto L_0x021a
            org.telegram.tgnet.TLRPC$Message r6 = r4.messageOwner
            org.telegram.tgnet.TLRPC$Peer r6 = r6.peer_id
            long r8 = r6.channel_id
            r13 = 0
            int r6 = (r8 > r13 ? 1 : (r8 == r13 ? 0 : -1))
            if (r6 != 0) goto L_0x021a
            android.util.SparseArray<org.telegram.messenger.MessageObject> r6 = r0.dialogMessagesByIds
            int r8 = r4.getId()
            r6.remove(r8)
            org.telegram.tgnet.TLRPC$Message r6 = r4.messageOwner
            long r8 = r6.random_id
            int r6 = (r8 > r13 ? 1 : (r8 == r13 ? 0 : -1))
            if (r6 == 0) goto L_0x021a
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r6 = r0.dialogMessagesByRandomIds
            r6.remove(r8)
        L_0x021a:
            if (r10 == 0) goto L_0x025d
            if (r4 == 0) goto L_0x022c
            int r6 = r4.getId()
            int r8 = r10.getId()
            if (r6 != r8) goto L_0x022c
            boolean r4 = r4.deleted
            r10.deleted = r4
        L_0x022c:
            org.telegram.tgnet.TLRPC$Message r4 = r10.messageOwner
            org.telegram.tgnet.TLRPC$Peer r4 = r4.peer_id
            long r8 = r4.channel_id
            r13 = 0
            int r4 = (r8 > r13 ? 1 : (r8 == r13 ? 0 : -1))
            if (r4 != 0) goto L_0x025d
            android.util.SparseArray<org.telegram.messenger.MessageObject> r4 = r0.dialogMessagesByIds
            int r6 = r10.getId()
            r4.put(r6, r10)
            int r4 = r0.dialogsLoadedTillDate
            org.telegram.tgnet.TLRPC$Message r6 = r10.messageOwner
            int r6 = r6.date
            int r4 = java.lang.Math.min(r4, r6)
            r0.dialogsLoadedTillDate = r4
            org.telegram.tgnet.TLRPC$Message r4 = r10.messageOwner
            long r8 = r4.random_id
            r13 = 0
            int r4 = (r8 > r13 ? 1 : (r8 == r13 ? 0 : -1))
            if (r4 == 0) goto L_0x025f
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r4 = r0.dialogMessagesByRandomIds
            r4.put(r8, r10)
            goto L_0x025f
        L_0x025d:
            r13 = 0
        L_0x025f:
            if (r22 == 0) goto L_0x026e
            if (r10 != 0) goto L_0x026e
            r4 = 0
            r0.checkLastDialogMessage(r5, r4, r13)
            boolean r4 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r4 == 0) goto L_0x026e
            org.telegram.messenger.FileLog.d(r11)
        L_0x026e:
            int r3 = r3 + 1
            r4 = 1
            goto L_0x0013
        L_0x0273:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r0.allDialogs
            r2.clear()
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r2 = r0.dialogs_dict
            int r2 = r2.size()
            r3 = 0
        L_0x027f:
            if (r3 >= r2) goto L_0x029c
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r4 = r0.dialogs_dict
            java.lang.Object r4 = r4.valueAt(r3)
            org.telegram.tgnet.TLRPC$Dialog r4 = (org.telegram.tgnet.TLRPC$Dialog) r4
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r5 = r0.deletingDialogs
            long r6 = r4.id
            int r5 = r5.indexOfKey(r6)
            if (r5 < 0) goto L_0x0294
            goto L_0x0299
        L_0x0294:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r5 = r0.allDialogs
            r5.add(r4)
        L_0x0299:
            int r3 = r3 + 1
            goto L_0x027f
        L_0x029c:
            r3 = 0
            r0.sortDialogs(r3)
            org.telegram.messenger.NotificationCenter r2 = r18.getNotificationCenter()
            int r3 = org.telegram.messenger.NotificationCenter.dialogsNeedReload
            java.lang.Object[] r1 = new java.lang.Object[r1]
            r2.postNotificationName(r3, r1)
            org.telegram.messenger.NotificationsController r1 = r18.getNotificationsController()
            r2 = r23
            r1.processDialogsUpdateRead(r2)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$processDialogsUpdate$177(org.telegram.tgnet.TLRPC$messages_Dialogs, androidx.collection.LongSparseArray, androidx.collection.LongSparseArray, boolean, org.telegram.messenger.support.LongSparseIntArray):void");
    }

    public void addToViewsQueue(MessageObject messageObject) {
        Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda109(this, messageObject));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$addToViewsQueue$179(MessageObject messageObject) {
        long dialogId = messageObject.getDialogId();
        int id = messageObject.getId();
        ArrayList arrayList = this.channelViewsToSend.get(dialogId);
        if (arrayList == null) {
            arrayList = new ArrayList();
            this.channelViewsToSend.put(dialogId, arrayList);
        }
        if (!arrayList.contains(Integer.valueOf(id))) {
            arrayList.add(Integer.valueOf(id));
        }
    }

    public void addToPollsQueue(long j, ArrayList<MessageObject> arrayList) {
        int i;
        SparseArray sparseArray = this.pollsToCheck.get(j);
        if (sparseArray == null) {
            sparseArray = new SparseArray();
            this.pollsToCheck.put(j, sparseArray);
            this.pollsToCheckSize++;
        }
        int size = sparseArray.size();
        for (int i2 = 0; i2 < size; i2++) {
            ((MessageObject) sparseArray.valueAt(i2)).pollVisibleOnScreen = false;
        }
        int currentTime = getConnectionsManager().getCurrentTime();
        int size2 = arrayList.size();
        boolean z = false;
        int i3 = Integer.MAX_VALUE;
        for (int i4 = 0; i4 < size2; i4++) {
            MessageObject messageObject = arrayList.get(i4);
            if (messageObject.type == 17) {
                TLRPC$Poll tLRPC$Poll = ((TLRPC$TL_messageMediaPoll) messageObject.messageOwner.media).poll;
                if (!tLRPC$Poll.closed && (i = tLRPC$Poll.close_date) != 0) {
                    if (i <= currentTime) {
                        z = true;
                    } else {
                        i3 = Math.min(i3, i - currentTime);
                    }
                }
                int id = messageObject.getId();
                MessageObject messageObject2 = (MessageObject) sparseArray.get(id);
                if (messageObject2 != null) {
                    messageObject2.pollVisibleOnScreen = true;
                } else {
                    sparseArray.put(id, messageObject);
                }
            }
        }
        if (z) {
            this.lastViewsCheckTime = 0;
        } else if (i3 < 5) {
            this.lastViewsCheckTime = Math.min(this.lastViewsCheckTime, System.currentTimeMillis() - ((long) ((5 - i3) * 1000)));
        }
    }

    public void markMessageContentAsRead(MessageObject messageObject) {
        if (!messageObject.scheduled) {
            ArrayList arrayList = new ArrayList();
            if (messageObject.messageOwner.mentioned) {
                getMessagesStorage().markMentionMessageAsRead(-messageObject.messageOwner.peer_id.channel_id, messageObject.getId(), messageObject.getDialogId());
            }
            arrayList.add(Integer.valueOf(messageObject.getId()));
            long dialogId = messageObject.getDialogId();
            getMessagesStorage().markMessagesContentAsRead(dialogId, arrayList, 0);
            getNotificationCenter().postNotificationName(NotificationCenter.messagesReadContent, Long.valueOf(dialogId), arrayList);
            if (messageObject.getId() < 0) {
                markMessageAsRead(messageObject.getDialogId(), messageObject.messageOwner.random_id, Integer.MIN_VALUE);
            } else if (messageObject.messageOwner.peer_id.channel_id != 0) {
                TLRPC$TL_channels_readMessageContents tLRPC$TL_channels_readMessageContents = new TLRPC$TL_channels_readMessageContents();
                TLRPC$InputChannel inputChannel = getInputChannel(messageObject.messageOwner.peer_id.channel_id);
                tLRPC$TL_channels_readMessageContents.channel = inputChannel;
                if (inputChannel != null) {
                    tLRPC$TL_channels_readMessageContents.id.add(Integer.valueOf(messageObject.getId()));
                    getConnectionsManager().sendRequest(tLRPC$TL_channels_readMessageContents, MessagesController$$ExternalSyntheticLambda313.INSTANCE);
                }
            } else {
                TLRPC$TL_messages_readMessageContents tLRPC$TL_messages_readMessageContents = new TLRPC$TL_messages_readMessageContents();
                tLRPC$TL_messages_readMessageContents.id.add(Integer.valueOf(messageObject.getId()));
                getConnectionsManager().sendRequest(tLRPC$TL_messages_readMessageContents, new MessagesController$$ExternalSyntheticLambda223(this));
            }
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessageContentAsRead$181(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedMessages tLRPC$TL_messages_affectedMessages = (TLRPC$TL_messages_affectedMessages) tLObject;
            processNewDifferenceParams(-1, tLRPC$TL_messages_affectedMessages.pts, -1, tLRPC$TL_messages_affectedMessages.pts_count);
        }
    }

    public void markMentionMessageAsRead(int i, long j, long j2) {
        getMessagesStorage().markMentionMessageAsRead(-j, i, j2);
        if (j != 0) {
            TLRPC$TL_channels_readMessageContents tLRPC$TL_channels_readMessageContents = new TLRPC$TL_channels_readMessageContents();
            TLRPC$InputChannel inputChannel = getInputChannel(j);
            tLRPC$TL_channels_readMessageContents.channel = inputChannel;
            if (inputChannel != null) {
                tLRPC$TL_channels_readMessageContents.id.add(Integer.valueOf(i));
                getConnectionsManager().sendRequest(tLRPC$TL_channels_readMessageContents, MessagesController$$ExternalSyntheticLambda317.INSTANCE);
                return;
            }
            return;
        }
        TLRPC$TL_messages_readMessageContents tLRPC$TL_messages_readMessageContents = new TLRPC$TL_messages_readMessageContents();
        tLRPC$TL_messages_readMessageContents.id.add(Integer.valueOf(i));
        getConnectionsManager().sendRequest(tLRPC$TL_messages_readMessageContents, new MessagesController$$ExternalSyntheticLambda209(this));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$markMentionMessageAsRead$183(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedMessages tLRPC$TL_messages_affectedMessages = (TLRPC$TL_messages_affectedMessages) tLObject;
            processNewDifferenceParams(-1, tLRPC$TL_messages_affectedMessages.pts, -1, tLRPC$TL_messages_affectedMessages.pts_count);
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:39:0x007b  */
    /* JADX WARNING: Removed duplicated region for block: B:40:0x0098  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void markMessageAsRead2(long r15, int r17, org.telegram.tgnet.TLRPC$InputChannel r18, int r19, long r20) {
        /*
            r14 = this;
            r1 = r14
            r10 = r17
            r8 = r19
            if (r10 == 0) goto L_0x00b2
            if (r8 > 0) goto L_0x000b
            goto L_0x00b2
        L_0x000b:
            boolean r0 = org.telegram.messenger.DialogObject.isChatDialog(r15)
            if (r0 == 0) goto L_0x001c
            if (r18 != 0) goto L_0x001c
            org.telegram.tgnet.TLRPC$InputChannel r0 = r14.getInputChannel((long) r15)
            if (r0 != 0) goto L_0x001a
            return
        L_0x001a:
            r11 = r0
            goto L_0x001e
        L_0x001c:
            r11 = r18
        L_0x001e:
            r2 = 0
            int r0 = (r20 > r2 ? 1 : (r20 == r2 ? 0 : -1))
            if (r0 != 0) goto L_0x0060
            r2 = 0
            org.telegram.tgnet.NativeByteBuffer r3 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x0050 }
            r0 = 20
            if (r11 == 0) goto L_0x0030
            int r4 = r11.getObjectSize()     // Catch:{ Exception -> 0x0050 }
            goto L_0x0031
        L_0x0030:
            r4 = 0
        L_0x0031:
            int r0 = r0 + r4
            r3.<init>((int) r0)     // Catch:{ Exception -> 0x0050 }
            r0 = 23
            r3.writeInt32(r0)     // Catch:{ Exception -> 0x004c }
            r4 = r15
            r3.writeInt64(r4)     // Catch:{ Exception -> 0x004a }
            r3.writeInt32(r10)     // Catch:{ Exception -> 0x004a }
            r3.writeInt32(r8)     // Catch:{ Exception -> 0x004a }
            if (r11 == 0) goto L_0x0056
            r11.serializeToStream(r3)     // Catch:{ Exception -> 0x004a }
            goto L_0x0056
        L_0x004a:
            r0 = move-exception
            goto L_0x004e
        L_0x004c:
            r0 = move-exception
            r4 = r15
        L_0x004e:
            r2 = r3
            goto L_0x0052
        L_0x0050:
            r0 = move-exception
            r4 = r15
        L_0x0052:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
            r3 = r2
        L_0x0056:
            org.telegram.messenger.MessagesStorage r0 = r14.getMessagesStorage()
            long r2 = r0.createPendingTask(r3)
            r12 = r2
            goto L_0x0063
        L_0x0060:
            r4 = r15
            r12 = r20
        L_0x0063:
            org.telegram.tgnet.ConnectionsManager r0 = r14.getConnectionsManager()
            int r7 = r0.getCurrentTime()
            org.telegram.messenger.MessagesStorage r2 = r14.getMessagesStorage()
            r9 = 0
            r3 = r15
            r5 = r17
            r6 = r7
            r8 = r19
            r2.createTaskForMid(r3, r5, r6, r7, r8, r9)
            if (r11 == 0) goto L_0x0098
            org.telegram.tgnet.TLRPC$TL_channels_readMessageContents r0 = new org.telegram.tgnet.TLRPC$TL_channels_readMessageContents
            r0.<init>()
            r0.channel = r11
            java.util.ArrayList<java.lang.Integer> r2 = r0.id
            java.lang.Integer r3 = java.lang.Integer.valueOf(r17)
            r2.add(r3)
            org.telegram.tgnet.ConnectionsManager r2 = r14.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda251 r3 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda251
            r3.<init>(r14, r12)
            r2.sendRequest(r0, r3)
            goto L_0x00b2
        L_0x0098:
            org.telegram.tgnet.TLRPC$TL_messages_readMessageContents r0 = new org.telegram.tgnet.TLRPC$TL_messages_readMessageContents
            r0.<init>()
            java.util.ArrayList<java.lang.Integer> r2 = r0.id
            java.lang.Integer r3 = java.lang.Integer.valueOf(r17)
            r2.add(r3)
            org.telegram.tgnet.ConnectionsManager r2 = r14.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda246 r3 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda246
            r3.<init>(r14, r12)
            r2.sendRequest(r0, r3)
        L_0x00b2:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.markMessageAsRead2(long, int, org.telegram.tgnet.TLRPC$InputChannel, int, long):void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessageAsRead2$184(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessageAsRead2$185(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedMessages tLRPC$TL_messages_affectedMessages = (TLRPC$TL_messages_affectedMessages) tLObject;
            processNewDifferenceParams(-1, tLRPC$TL_messages_affectedMessages.pts, -1, tLRPC$TL_messages_affectedMessages.pts_count);
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public void markMessageAsRead(long j, long j2, int i) {
        TLRPC$EncryptedChat encryptedChat;
        if (j2 != 0 && j != 0) {
            if ((i > 0 || i == Integer.MIN_VALUE) && DialogObject.isEncryptedDialog(j) && (encryptedChat = getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(j)))) != null) {
                ArrayList arrayList = new ArrayList();
                arrayList.add(Long.valueOf(j2));
                getSecretChatHelper().sendMessagesReadMessage(encryptedChat, arrayList, (TLRPC$Message) null);
                if (i > 0) {
                    int currentTime = getConnectionsManager().getCurrentTime();
                    getMessagesStorage().createTaskForSecretChat(encryptedChat.id, currentTime, currentTime, 0, arrayList);
                }
            }
        }
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v10, resolved type: org.telegram.tgnet.TLRPC$TL_messages_readHistory} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v11, resolved type: org.telegram.tgnet.TLRPC$TL_messages_readHistory} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v12, resolved type: org.telegram.tgnet.TLRPC$TL_channels_readHistory} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v14, resolved type: org.telegram.tgnet.TLRPC$TL_messages_readHistory} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void completeReadTask(org.telegram.messenger.MessagesController.ReadTask r6) {
        /*
            r5 = this;
            long r0 = r6.replyId
            r2 = 0
            int r4 = (r0 > r2 ? 1 : (r0 == r2 ? 0 : -1))
            if (r4 == 0) goto L_0x0029
            org.telegram.tgnet.TLRPC$TL_messages_readDiscussion r0 = new org.telegram.tgnet.TLRPC$TL_messages_readDiscussion
            r0.<init>()
            long r1 = r6.replyId
            int r2 = (int) r1
            r0.msg_id = r2
            long r1 = r6.dialogId
            org.telegram.tgnet.TLRPC$InputPeer r1 = r5.getInputPeer((long) r1)
            r0.peer = r1
            int r6 = r6.maxId
            r0.read_max_id = r6
            org.telegram.tgnet.ConnectionsManager r6 = r5.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda318 r1 = org.telegram.messenger.MessagesController$$ExternalSyntheticLambda318.INSTANCE
            r6.sendRequest(r0, r1)
            goto L_0x00a2
        L_0x0029:
            long r0 = r6.dialogId
            boolean r0 = org.telegram.messenger.DialogObject.isEncryptedDialog(r0)
            if (r0 != 0) goto L_0x0067
            long r0 = r6.dialogId
            org.telegram.tgnet.TLRPC$InputPeer r0 = r5.getInputPeer((long) r0)
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_inputPeerChannel
            if (r1 == 0) goto L_0x004e
            org.telegram.tgnet.TLRPC$TL_channels_readHistory r0 = new org.telegram.tgnet.TLRPC$TL_channels_readHistory
            r0.<init>()
            long r1 = r6.dialogId
            long r1 = -r1
            org.telegram.tgnet.TLRPC$InputChannel r1 = r5.getInputChannel((long) r1)
            r0.channel = r1
            int r6 = r6.maxId
            r0.max_id = r6
            goto L_0x005a
        L_0x004e:
            org.telegram.tgnet.TLRPC$TL_messages_readHistory r1 = new org.telegram.tgnet.TLRPC$TL_messages_readHistory
            r1.<init>()
            r1.peer = r0
            int r6 = r6.maxId
            r1.max_id = r6
            r0 = r1
        L_0x005a:
            org.telegram.tgnet.ConnectionsManager r6 = r5.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda226 r1 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda226
            r1.<init>(r5)
            r6.sendRequest(r0, r1)
            goto L_0x00a2
        L_0x0067:
            long r0 = r6.dialogId
            int r0 = org.telegram.messenger.DialogObject.getEncryptedChatId(r0)
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)
            org.telegram.tgnet.TLRPC$EncryptedChat r0 = r5.getEncryptedChat(r0)
            byte[] r1 = r0.auth_key
            if (r1 == 0) goto L_0x00a2
            int r1 = r1.length
            r2 = 1
            if (r1 <= r2) goto L_0x00a2
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_encryptedChat
            if (r1 == 0) goto L_0x00a2
            org.telegram.tgnet.TLRPC$TL_messages_readEncryptedHistory r1 = new org.telegram.tgnet.TLRPC$TL_messages_readEncryptedHistory
            r1.<init>()
            org.telegram.tgnet.TLRPC$TL_inputEncryptedChat r2 = new org.telegram.tgnet.TLRPC$TL_inputEncryptedChat
            r2.<init>()
            r1.peer = r2
            int r3 = r0.id
            r2.chat_id = r3
            long r3 = r0.access_hash
            r2.access_hash = r3
            int r6 = r6.maxDate
            r1.max_date = r6
            org.telegram.tgnet.ConnectionsManager r6 = r5.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda324 r0 = org.telegram.messenger.MessagesController$$ExternalSyntheticLambda324.INSTANCE
            r6.sendRequest(r1, r0)
        L_0x00a2:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.completeReadTask(org.telegram.messenger.MessagesController$ReadTask):void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$completeReadTask$187(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null && (tLObject instanceof TLRPC$TL_messages_affectedMessages)) {
            TLRPC$TL_messages_affectedMessages tLRPC$TL_messages_affectedMessages = (TLRPC$TL_messages_affectedMessages) tLObject;
            processNewDifferenceParams(-1, tLRPC$TL_messages_affectedMessages.pts, -1, tLRPC$TL_messages_affectedMessages.pts_count);
        }
    }

    private void checkReadTasks() {
        long elapsedRealtime = SystemClock.elapsedRealtime();
        int size = this.readTasks.size();
        int i = 0;
        int i2 = 0;
        while (i2 < size) {
            ReadTask readTask = this.readTasks.get(i2);
            if (readTask.sendRequestTime <= elapsedRealtime) {
                completeReadTask(readTask);
                this.readTasks.remove(i2);
                this.readTasksMap.remove(readTask.dialogId);
                i2--;
                size--;
            }
            i2++;
        }
        int size2 = this.repliesReadTasks.size();
        while (i < size2) {
            ReadTask readTask2 = this.repliesReadTasks.get(i);
            if (readTask2.sendRequestTime <= elapsedRealtime) {
                completeReadTask(readTask2);
                this.repliesReadTasks.remove(i);
                this.threadsReadTasksMap.remove(readTask2.dialogId + "_" + readTask2.replyId);
                i += -1;
                size2 += -1;
            }
            i++;
        }
    }

    public void markDialogAsReadNow(long j, int i) {
        Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda34(this, i, j));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$markDialogAsReadNow$189(int i, long j) {
        if (i != 0) {
            String str = j + "_" + i;
            ReadTask readTask = this.threadsReadTasksMap.get(str);
            if (readTask != null) {
                completeReadTask(readTask);
                this.repliesReadTasks.remove(readTask);
                this.threadsReadTasksMap.remove(str);
                return;
            }
            return;
        }
        ReadTask readTask2 = this.readTasksMap.get(j);
        if (readTask2 != null) {
            completeReadTask(readTask2);
            this.readTasks.remove(readTask2);
            this.readTasksMap.remove(j);
        }
    }

    public void markMentionsAsRead(long j) {
        if (!DialogObject.isEncryptedDialog(j)) {
            getMessagesStorage().resetMentionsCount(j, 0);
            TLRPC$TL_messages_readMentions tLRPC$TL_messages_readMentions = new TLRPC$TL_messages_readMentions();
            tLRPC$TL_messages_readMentions.peer = getInputPeer(j);
            getConnectionsManager().sendRequest(tLRPC$TL_messages_readMentions, MessagesController$$ExternalSyntheticLambda321.INSTANCE);
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:12:0x0072, code lost:
        if (r9 != Integer.MAX_VALUE) goto L_0x00ce;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:2:0x000c, code lost:
        if (r9 != Integer.MAX_VALUE) goto L_0x00ce;
     */
    /* JADX WARNING: Removed duplicated region for block: B:21:0x00d0  */
    /* JADX WARNING: Removed duplicated region for block: B:23:? A[RETURN, SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void markDialogAsRead(long r16, int r18, int r19, int r20, boolean r21, int r22, int r23, boolean r24, int r25) {
        /*
            r15 = this;
            r8 = r15
            r9 = r18
            r10 = r20
            r7 = 2147483647(0x7fffffff, float:NaN)
            r11 = 1
            r12 = 0
            if (r22 == 0) goto L_0x0013
            if (r9 == r7) goto L_0x0010
            goto L_0x00ce
        L_0x0010:
            r11 = 0
            goto L_0x00ce
        L_0x0013:
            org.telegram.messenger.NotificationsController r0 = r15.getNotificationsController()
            boolean r0 = r0.showBadgeMessages
            boolean r0 = org.telegram.messenger.DialogObject.isEncryptedDialog(r16)
            if (r0 != 0) goto L_0x0075
            if (r9 != 0) goto L_0x0022
            return
        L_0x0022:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r0 = r8.dialogs_read_inbox_max
            java.lang.Long r1 = java.lang.Long.valueOf(r16)
            java.lang.Object r0 = r0.get(r1)
            java.lang.Integer r0 = (java.lang.Integer) r0
            if (r0 != 0) goto L_0x0034
            java.lang.Integer r0 = java.lang.Integer.valueOf(r12)
        L_0x0034:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r8.dialogs_read_inbox_max
            java.lang.Long r2 = java.lang.Long.valueOf(r16)
            int r0 = r0.intValue()
            int r0 = java.lang.Math.max(r0, r9)
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)
            r1.put(r2, r0)
            org.telegram.messenger.MessagesStorage r0 = r15.getMessagesStorage()
            r1 = r16
            r3 = r18
            r4 = r19
            r5 = r25
            r0.processPendingRead(r1, r3, r4, r5)
            org.telegram.messenger.MessagesStorage r0 = r15.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r13 = r0.getStorageQueue()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda59 r14 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda59
            r0 = r14
            r1 = r15
            r2 = r16
            r4 = r23
            r5 = r18
            r6 = r21
            r0.<init>(r1, r2, r4, r5, r6)
            r13.postRunnable(r14)
            if (r9 == r7) goto L_0x0010
            goto L_0x00ce
        L_0x0075:
            if (r10 != 0) goto L_0x0078
            return
        L_0x0078:
            int r0 = org.telegram.messenger.DialogObject.getEncryptedChatId(r16)
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)
            org.telegram.tgnet.TLRPC$EncryptedChat r12 = r15.getEncryptedChat(r0)
            org.telegram.messenger.MessagesStorage r0 = r15.getMessagesStorage()
            r1 = r16
            r3 = r18
            r4 = r19
            r5 = r25
            r0.processPendingRead(r1, r3, r4, r5)
            org.telegram.messenger.MessagesStorage r0 = r15.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r13 = r0.getStorageQueue()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda61 r14 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda61
            r0 = r14
            r1 = r15
            r2 = r16
            r4 = r20
            r5 = r21
            r6 = r23
            r7 = r19
            r0.<init>(r1, r2, r4, r5, r6, r7)
            r13.postRunnable(r14)
            if (r12 == 0) goto L_0x00ce
            int r0 = r12.ttl
            if (r0 <= 0) goto L_0x00ce
            org.telegram.tgnet.ConnectionsManager r0 = r15.getConnectionsManager()
            int r0 = r0.getCurrentTime()
            int r3 = java.lang.Math.max(r0, r10)
            org.telegram.messenger.MessagesStorage r0 = r15.getMessagesStorage()
            int r1 = r12.id
            r4 = 0
            r5 = 0
            r2 = r20
            r0.createTaskForSecretChat(r1, r2, r3, r4, r5)
        L_0x00ce:
            if (r11 == 0) goto L_0x00e6
            org.telegram.messenger.DispatchQueue r11 = org.telegram.messenger.Utilities.stageQueue
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda37 r12 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda37
            r0 = r12
            r1 = r15
            r2 = r22
            r3 = r16
            r5 = r24
            r6 = r20
            r7 = r18
            r0.<init>(r1, r2, r3, r5, r6, r7)
            r11.postRunnable(r12)
        L_0x00e6:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.markDialogAsRead(long, int, int, int, boolean, int, int, boolean, int):void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$markDialogAsRead$192(long j, int i, int i2, boolean z) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda58(this, j, i, i2, z));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$markDialogAsRead$191(long j, int i, int i2, boolean z) {
        long j2 = j;
        int i3 = i2;
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j2);
        if (tLRPC$Dialog != null) {
            int i4 = tLRPC$Dialog.unread_count;
            if (i == 0 || i3 >= tLRPC$Dialog.top_message) {
                tLRPC$Dialog.unread_count = 0;
            } else {
                int max = Math.max(i4 - i, 0);
                tLRPC$Dialog.unread_count = max;
                if (i3 != Integer.MIN_VALUE) {
                    int i5 = tLRPC$Dialog.top_message;
                    if (max > i5 - i3) {
                        tLRPC$Dialog.unread_count = i5 - i3;
                    }
                }
            }
            boolean z2 = tLRPC$Dialog.unread_mark;
            if (z2) {
                tLRPC$Dialog.unread_mark = false;
                getMessagesStorage().setDialogUnread(tLRPC$Dialog.id, false);
            }
            if ((i4 != 0 || z2) && tLRPC$Dialog.unread_count == 0) {
                if (!isDialogMuted(j)) {
                    this.unreadUnmutedDialogs--;
                }
                int i6 = 0;
                while (true) {
                    DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                    if (i6 < dialogFilterArr.length) {
                        if (dialogFilterArr[i6] != null && (dialogFilterArr[i6].flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                            sortDialogs((LongSparseArray<TLRPC$Chat>) null);
                            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                            break;
                        }
                        i6++;
                    } else {
                        break;
                    }
                }
            }
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_READ_DIALOG_MESSAGE));
        }
        if (!z) {
            getNotificationsController().processReadMessages((LongSparseIntArray) null, j, 0, i2, false);
            LongSparseIntArray longSparseIntArray = new LongSparseIntArray(1);
            longSparseIntArray.put(j2, 0);
            getNotificationsController().processDialogsUpdateRead(longSparseIntArray);
            return;
        }
        getNotificationsController().processReadMessages((LongSparseIntArray) null, j, 0, i2, true);
        LongSparseIntArray longSparseIntArray2 = new LongSparseIntArray(1);
        longSparseIntArray2.put(j2, -1);
        getNotificationsController().processDialogsUpdateRead(longSparseIntArray2);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$markDialogAsRead$194(long j, int i, boolean z, int i2, int i3) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda60(this, j, i, z, i2, i3));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$markDialogAsRead$193(long j, int i, boolean z, int i2, int i3) {
        getNotificationsController().processReadMessages((LongSparseIntArray) null, j, i, 0, z);
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
        if (tLRPC$Dialog != null) {
            int i4 = tLRPC$Dialog.unread_count;
            if (i2 == 0 || i3 <= tLRPC$Dialog.top_message) {
                tLRPC$Dialog.unread_count = 0;
            } else {
                int max = Math.max(i4 - i2, 0);
                tLRPC$Dialog.unread_count = max;
                if (i3 != Integer.MAX_VALUE) {
                    int i5 = tLRPC$Dialog.top_message;
                    if (max > i3 - i5) {
                        tLRPC$Dialog.unread_count = i3 - i5;
                    }
                }
            }
            boolean z2 = tLRPC$Dialog.unread_mark;
            if (z2) {
                tLRPC$Dialog.unread_mark = false;
                getMessagesStorage().setDialogUnread(tLRPC$Dialog.id, false);
            }
            if ((i4 != 0 || z2) && tLRPC$Dialog.unread_count == 0) {
                if (!isDialogMuted(j)) {
                    this.unreadUnmutedDialogs--;
                }
                int i6 = 0;
                while (true) {
                    DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                    if (i6 < dialogFilterArr.length) {
                        if (dialogFilterArr[i6] != null && (dialogFilterArr[i6].flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                            sortDialogs((LongSparseArray<TLRPC$Chat>) null);
                            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                            break;
                        }
                        i6++;
                    } else {
                        break;
                    }
                }
            }
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_READ_DIALOG_MESSAGE));
        }
        LongSparseIntArray longSparseIntArray = new LongSparseIntArray(1);
        longSparseIntArray.put(j, 0);
        getNotificationsController().processDialogsUpdateRead(longSparseIntArray);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$markDialogAsRead$195(int i, long j, boolean z, int i2, int i3) {
        ReadTask readTask;
        if (i != 0) {
            HashMap<String, ReadTask> hashMap = this.threadsReadTasksMap;
            readTask = hashMap.get(j + "_" + i);
        } else {
            readTask = this.readTasksMap.get(j);
        }
        if (readTask == null) {
            readTask = new ReadTask();
            readTask.dialogId = j;
            readTask.replyId = (long) i;
            readTask.sendRequestTime = SystemClock.elapsedRealtime() + 5000;
            if (!z) {
                if (i != 0) {
                    HashMap<String, ReadTask> hashMap2 = this.threadsReadTasksMap;
                    hashMap2.put(j + "_" + i, readTask);
                    this.repliesReadTasks.add(readTask);
                } else {
                    this.readTasksMap.put(j, readTask);
                    this.readTasks.add(readTask);
                }
            }
        }
        readTask.maxDate = i2;
        readTask.maxId = i3;
        if (z) {
            completeReadTask(readTask);
        }
    }

    public int createChat(String str, ArrayList<Long> arrayList, String str2, int i, boolean z, Location location, String str3, BaseFragment baseFragment) {
        if (i == 0 && !z) {
            TLRPC$TL_messages_createChat tLRPC$TL_messages_createChat = new TLRPC$TL_messages_createChat();
            tLRPC$TL_messages_createChat.title = str;
            for (int i2 = 0; i2 < arrayList.size(); i2++) {
                TLRPC$User user = getUser(arrayList.get(i2));
                if (user != null) {
                    tLRPC$TL_messages_createChat.users.add(getInputUser(user));
                }
            }
            return getConnectionsManager().sendRequest(tLRPC$TL_messages_createChat, new MessagesController$$ExternalSyntheticLambda297(this, baseFragment, tLRPC$TL_messages_createChat), 2);
        } else if (!z && i != 2 && i != 4) {
            return 0;
        } else {
            TLRPC$TL_channels_createChannel tLRPC$TL_channels_createChannel = new TLRPC$TL_channels_createChannel();
            tLRPC$TL_channels_createChannel.title = str;
            if (str2 == null) {
                str2 = "";
            }
            tLRPC$TL_channels_createChannel.about = str2;
            tLRPC$TL_channels_createChannel.for_import = z;
            if (z || i == 4) {
                tLRPC$TL_channels_createChannel.megagroup = true;
            } else {
                tLRPC$TL_channels_createChannel.broadcast = true;
            }
            if (location != null) {
                TLRPC$TL_inputGeoPoint tLRPC$TL_inputGeoPoint = new TLRPC$TL_inputGeoPoint();
                tLRPC$TL_channels_createChannel.geo_point = tLRPC$TL_inputGeoPoint;
                tLRPC$TL_inputGeoPoint.lat = location.getLatitude();
                tLRPC$TL_channels_createChannel.geo_point._long = location.getLongitude();
                tLRPC$TL_channels_createChannel.address = str3;
                tLRPC$TL_channels_createChannel.flags |= 4;
            }
            return getConnectionsManager().sendRequest(tLRPC$TL_channels_createChannel, new MessagesController$$ExternalSyntheticLambda295(this, baseFragment, tLRPC$TL_channels_createChannel), 2);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$createChat$198(BaseFragment baseFragment, TLRPC$TL_messages_createChat tLRPC$TL_messages_createChat, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda147(this, tLRPC$TL_error, baseFragment, tLRPC$TL_messages_createChat));
            return;
        }
        TLRPC$Updates tLRPC$Updates = (TLRPC$Updates) tLObject;
        processUpdates(tLRPC$Updates, false);
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda162(this, tLRPC$Updates));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$createChat$196(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_messages_createChat tLRPC$TL_messages_createChat) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_messages_createChat, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.chatDidFailCreate, new Object[0]);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$createChat$197(TLRPC$Updates tLRPC$Updates) {
        putUsers(tLRPC$Updates.users, false);
        putChats(tLRPC$Updates.chats, false);
        ArrayList<TLRPC$Chat> arrayList = tLRPC$Updates.chats;
        if (arrayList == null || arrayList.isEmpty()) {
            getNotificationCenter().postNotificationName(NotificationCenter.chatDidFailCreate, new Object[0]);
            return;
        }
        getNotificationCenter().postNotificationName(NotificationCenter.chatDidCreated, Long.valueOf(tLRPC$Updates.chats.get(0).id));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$createChat$201(BaseFragment baseFragment, TLRPC$TL_channels_createChannel tLRPC$TL_channels_createChannel, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda143(this, tLRPC$TL_error, baseFragment, tLRPC$TL_channels_createChannel));
            return;
        }
        TLRPC$Updates tLRPC$Updates = (TLRPC$Updates) tLObject;
        processUpdates(tLRPC$Updates, false);
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda163(this, tLRPC$Updates));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$createChat$199(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_channels_createChannel tLRPC$TL_channels_createChannel) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_channels_createChannel, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.chatDidFailCreate, new Object[0]);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$createChat$200(TLRPC$Updates tLRPC$Updates) {
        putUsers(tLRPC$Updates.users, false);
        putChats(tLRPC$Updates.chats, false);
        ArrayList<TLRPC$Chat> arrayList = tLRPC$Updates.chats;
        if (arrayList == null || arrayList.isEmpty()) {
            getNotificationCenter().postNotificationName(NotificationCenter.chatDidFailCreate, new Object[0]);
            return;
        }
        getNotificationCenter().postNotificationName(NotificationCenter.chatDidCreated, Long.valueOf(tLRPC$Updates.chats.get(0).id));
    }

    public void convertToMegaGroup(Context context, long j, BaseFragment baseFragment, MessagesStorage.LongCallback longCallback) {
        TLRPC$TL_messages_migrateChat tLRPC$TL_messages_migrateChat = new TLRPC$TL_messages_migrateChat();
        tLRPC$TL_messages_migrateChat.chat_id = j;
        AlertDialog alertDialog = context != null ? new AlertDialog(context, 3) : null;
        int sendRequest = getConnectionsManager().sendRequest(tLRPC$TL_messages_migrateChat, new MessagesController$$ExternalSyntheticLambda277(this, context, alertDialog, longCallback, baseFragment, tLRPC$TL_messages_migrateChat));
        if (alertDialog != null) {
            alertDialog.setOnCancelListener(new MessagesController$$ExternalSyntheticLambda2(this, sendRequest));
            try {
                alertDialog.show();
            } catch (Exception unused) {
            }
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$convertToMegaGroup$205(Context context, AlertDialog alertDialog, MessagesStorage.LongCallback longCallback, BaseFragment baseFragment, TLRPC$TL_messages_migrateChat tLRPC$TL_messages_migrateChat, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            if (context != null) {
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda4(context, alertDialog));
            }
            TLRPC$Updates tLRPC$Updates = (TLRPC$Updates) tLObject;
            processUpdates(tLRPC$Updates, false);
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda194(longCallback, tLRPC$Updates));
            return;
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda111(this, longCallback, context, alertDialog, tLRPC$TL_error, baseFragment, tLRPC$TL_messages_migrateChat));
    }

    /* access modifiers changed from: private */
    public static /* synthetic */ void lambda$convertToMegaGroup$202(Context context, AlertDialog alertDialog) {
        if (!((Activity) context).isFinishing()) {
            try {
                alertDialog.dismiss();
            } catch (Exception e) {
                FileLog.e((Throwable) e);
            }
        }
    }

    /* access modifiers changed from: private */
    public static /* synthetic */ void lambda$convertToMegaGroup$203(MessagesStorage.LongCallback longCallback, TLRPC$Updates tLRPC$Updates) {
        if (longCallback != null) {
            for (int i = 0; i < tLRPC$Updates.chats.size(); i++) {
                TLRPC$Chat tLRPC$Chat = tLRPC$Updates.chats.get(i);
                if (ChatObject.isChannel(tLRPC$Chat)) {
                    longCallback.run(tLRPC$Chat.id);
                    return;
                }
            }
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$convertToMegaGroup$204(MessagesStorage.LongCallback longCallback, Context context, AlertDialog alertDialog, TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_messages_migrateChat tLRPC$TL_messages_migrateChat) {
        if (longCallback != null) {
            longCallback.run(0);
        }
        if (context != null && !((Activity) context).isFinishing()) {
            try {
                alertDialog.dismiss();
            } catch (Exception e) {
                FileLog.e((Throwable) e);
            }
            AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_messages_migrateChat, Boolean.FALSE);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$convertToMegaGroup$206(int i, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
    }

    public void convertToGigaGroup(Context context, TLRPC$Chat tLRPC$Chat, BaseFragment baseFragment, MessagesStorage.BooleanCallback booleanCallback) {
        TLRPC$TL_channels_convertToGigagroup tLRPC$TL_channels_convertToGigagroup = new TLRPC$TL_channels_convertToGigagroup();
        tLRPC$TL_channels_convertToGigagroup.channel = getInputChannel(tLRPC$Chat);
        AlertDialog alertDialog = context != null ? new AlertDialog(context, 3) : null;
        int sendRequest = getConnectionsManager().sendRequest(tLRPC$TL_channels_convertToGigagroup, new MessagesController$$ExternalSyntheticLambda276(this, context, alertDialog, booleanCallback, baseFragment, tLRPC$TL_channels_convertToGigagroup));
        if (alertDialog != null) {
            alertDialog.setOnCancelListener(new MessagesController$$ExternalSyntheticLambda0(this, sendRequest));
            try {
                alertDialog.showDelayed(400);
            } catch (Exception unused) {
            }
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$convertToGigaGroup$210(Context context, AlertDialog alertDialog, MessagesStorage.BooleanCallback booleanCallback, BaseFragment baseFragment, TLRPC$TL_channels_convertToGigagroup tLRPC$TL_channels_convertToGigagroup, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            if (context != null) {
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda5(context, alertDialog));
            }
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda193(booleanCallback));
            return;
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda110(this, booleanCallback, context, alertDialog, tLRPC$TL_error, baseFragment, tLRPC$TL_channels_convertToGigagroup));
    }

    /* access modifiers changed from: private */
    public static /* synthetic */ void lambda$convertToGigaGroup$207(Context context, AlertDialog alertDialog) {
        if (!((Activity) context).isFinishing()) {
            try {
                alertDialog.dismiss();
            } catch (Exception e) {
                FileLog.e((Throwable) e);
            }
        }
    }

    /* access modifiers changed from: private */
    public static /* synthetic */ void lambda$convertToGigaGroup$208(MessagesStorage.BooleanCallback booleanCallback) {
        if (booleanCallback != null) {
            booleanCallback.run(true);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$convertToGigaGroup$209(MessagesStorage.BooleanCallback booleanCallback, Context context, AlertDialog alertDialog, TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_channels_convertToGigagroup tLRPC$TL_channels_convertToGigagroup) {
        if (booleanCallback != null) {
            booleanCallback.run(false);
        }
        if (context != null && !((Activity) context).isFinishing()) {
            try {
                alertDialog.dismiss();
            } catch (Exception e) {
                FileLog.e((Throwable) e);
            }
            AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_channels_convertToGigagroup, Boolean.FALSE);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$convertToGigaGroup$211(int i, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
    }

    public void addUsersToChannel(long j, ArrayList<TLRPC$InputUser> arrayList, BaseFragment baseFragment) {
        if (arrayList != null && !arrayList.isEmpty()) {
            TLRPC$TL_channels_inviteToChannel tLRPC$TL_channels_inviteToChannel = new TLRPC$TL_channels_inviteToChannel();
            tLRPC$TL_channels_inviteToChannel.channel = getInputChannel(j);
            tLRPC$TL_channels_inviteToChannel.users = arrayList;
            getConnectionsManager().sendRequest(tLRPC$TL_channels_inviteToChannel, new MessagesController$$ExternalSyntheticLambda296(this, baseFragment, tLRPC$TL_channels_inviteToChannel));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$addUsersToChannel$212(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_channels_inviteToChannel tLRPC$TL_channels_inviteToChannel) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_channels_inviteToChannel, Boolean.TRUE);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$addUsersToChannel$213(BaseFragment baseFragment, TLRPC$TL_channels_inviteToChannel tLRPC$TL_channels_inviteToChannel, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda146(this, tLRPC$TL_error, baseFragment, tLRPC$TL_channels_inviteToChannel));
        } else {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
    }

    public void toogleChannelSignatures(long j, boolean z) {
        TLRPC$TL_channels_toggleSignatures tLRPC$TL_channels_toggleSignatures = new TLRPC$TL_channels_toggleSignatures();
        tLRPC$TL_channels_toggleSignatures.channel = getInputChannel(j);
        tLRPC$TL_channels_toggleSignatures.enabled = z;
        getConnectionsManager().sendRequest(tLRPC$TL_channels_toggleSignatures, new MessagesController$$ExternalSyntheticLambda214(this), 64);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$toogleChannelSignatures$215(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda20(this));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$toogleChannelSignatures$214() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
    }

    public void toogleChannelInvitesHistory(long j, boolean z) {
        TLRPC$TL_channels_togglePreHistoryHidden tLRPC$TL_channels_togglePreHistoryHidden = new TLRPC$TL_channels_togglePreHistoryHidden();
        tLRPC$TL_channels_togglePreHistoryHidden.channel = getInputChannel(j);
        tLRPC$TL_channels_togglePreHistoryHidden.enabled = z;
        getConnectionsManager().sendRequest(tLRPC$TL_channels_togglePreHistoryHidden, new MessagesController$$ExternalSyntheticLambda215(this), 64);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$toogleChannelInvitesHistory$217(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda26(this));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$toogleChannelInvitesHistory$216() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
    }

    public void updateChatAbout(long j, String str, TLRPC$ChatFull tLRPC$ChatFull) {
        TLRPC$TL_messages_editChatAbout tLRPC$TL_messages_editChatAbout = new TLRPC$TL_messages_editChatAbout();
        tLRPC$TL_messages_editChatAbout.peer = getInputPeer(-j);
        tLRPC$TL_messages_editChatAbout.about = str;
        getConnectionsManager().sendRequest(tLRPC$TL_messages_editChatAbout, new MessagesController$$ExternalSyntheticLambda288(this, tLRPC$ChatFull, str), 64);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChatAbout$219(TLRPC$ChatFull tLRPC$ChatFull, String str, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if ((tLObject instanceof TLRPC$TL_boolTrue) && tLRPC$ChatFull != null) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda132(this, tLRPC$ChatFull, str));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChatAbout$218(TLRPC$ChatFull tLRPC$ChatFull, String str) {
        tLRPC$ChatFull.about = str;
        getMessagesStorage().updateChatInfo(tLRPC$ChatFull, false);
        NotificationCenter notificationCenter = getNotificationCenter();
        int i = NotificationCenter.chatInfoDidLoad;
        Boolean bool = Boolean.FALSE;
        notificationCenter.postNotificationName(i, tLRPC$ChatFull, 0, bool, bool);
    }

    public void updateChannelUserName(long j, String str) {
        TLRPC$TL_channels_updateUsername tLRPC$TL_channels_updateUsername = new TLRPC$TL_channels_updateUsername();
        tLRPC$TL_channels_updateUsername.channel = getInputChannel(j);
        tLRPC$TL_channels_updateUsername.username = str;
        getConnectionsManager().sendRequest(tLRPC$TL_channels_updateUsername, new MessagesController$$ExternalSyntheticLambda267(this, j, str), 64);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChannelUserName$221(long j, String str, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject instanceof TLRPC$TL_boolTrue) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda65(this, j, str));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChannelUserName$220(long j, String str) {
        TLRPC$Chat chat = getChat(Long.valueOf(j));
        if (str.length() != 0) {
            chat.flags |= 64;
        } else {
            chat.flags &= -65;
        }
        chat.username = str;
        ArrayList arrayList = new ArrayList();
        arrayList.add(chat);
        getMessagesStorage().putUsersAndChats((ArrayList<TLRPC$User>) null, arrayList, true, true);
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
    }

    public void sendBotStart(TLRPC$User tLRPC$User, String str) {
        if (tLRPC$User != null) {
            TLRPC$TL_messages_startBot tLRPC$TL_messages_startBot = new TLRPC$TL_messages_startBot();
            tLRPC$TL_messages_startBot.bot = getInputUser(tLRPC$User);
            tLRPC$TL_messages_startBot.peer = getInputPeer(tLRPC$User.id);
            tLRPC$TL_messages_startBot.start_param = str;
            tLRPC$TL_messages_startBot.random_id = Utilities.random.nextLong();
            getConnectionsManager().sendRequest(tLRPC$TL_messages_startBot, new MessagesController$$ExternalSyntheticLambda218(this));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$sendBotStart$222(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
    }

    public boolean isJoiningChannel(long j) {
        return this.joiningToChannels.contains(Long.valueOf(j));
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v1, resolved type: org.telegram.tgnet.TLRPC$TL_messages_addChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v5, resolved type: org.telegram.tgnet.TLRPC$TL_channels_inviteToChannel} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v8, resolved type: org.telegram.tgnet.TLRPC$TL_channels_joinChannel} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v9, resolved type: org.telegram.tgnet.TLRPC$TL_messages_startBot} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v10, resolved type: org.telegram.tgnet.TLRPC$TL_messages_addChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v11, resolved type: org.telegram.tgnet.TLRPC$TL_messages_addChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v12, resolved type: org.telegram.tgnet.TLRPC$TL_messages_addChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v13, resolved type: org.telegram.tgnet.TLRPC$TL_messages_addChatUser} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void addUserToChat(long r15, org.telegram.tgnet.TLRPC$User r17, int r18, java.lang.String r19, org.telegram.ui.ActionBar.BaseFragment r20, java.lang.Runnable r21) {
        /*
            r14 = this;
            r10 = r14
            r4 = r15
            r0 = r17
            r1 = r19
            if (r0 != 0) goto L_0x0009
            return
        L_0x0009:
            int r2 = r10.currentAccount
            boolean r2 = org.telegram.messenger.ChatObject.isChannel(r4, r2)
            if (r2 == 0) goto L_0x0020
            java.lang.Long r3 = java.lang.Long.valueOf(r15)
            org.telegram.tgnet.TLRPC$Chat r3 = r14.getChat(r3)
            boolean r3 = r3.megagroup
            if (r3 == 0) goto L_0x0020
            r3 = 1
            r8 = 1
            goto L_0x0022
        L_0x0020:
            r3 = 0
            r8 = 0
        L_0x0022:
            org.telegram.tgnet.TLRPC$InputUser r3 = r14.getInputUser((org.telegram.tgnet.TLRPC$User) r0)
            if (r1 == 0) goto L_0x0052
            if (r2 == 0) goto L_0x002d
            if (r8 != 0) goto L_0x002d
            goto L_0x0052
        L_0x002d:
            org.telegram.tgnet.TLRPC$TL_messages_startBot r0 = new org.telegram.tgnet.TLRPC$TL_messages_startBot
            r0.<init>()
            r0.bot = r3
            if (r2 == 0) goto L_0x003e
            long r6 = -r4
            org.telegram.tgnet.TLRPC$InputPeer r6 = r14.getInputPeer((long) r6)
            r0.peer = r6
            goto L_0x0047
        L_0x003e:
            org.telegram.tgnet.TLRPC$TL_inputPeerChat r6 = new org.telegram.tgnet.TLRPC$TL_inputPeerChat
            r6.<init>()
            r0.peer = r6
            r6.chat_id = r4
        L_0x0047:
            r0.start_param = r1
            java.security.SecureRandom r1 = org.telegram.messenger.Utilities.random
            long r6 = r1.nextLong()
            r0.random_id = r6
            goto L_0x0098
        L_0x0052:
            if (r2 == 0) goto L_0x008b
            boolean r0 = r3 instanceof org.telegram.tgnet.TLRPC$TL_inputUserSelf
            if (r0 == 0) goto L_0x007a
            java.util.ArrayList<java.lang.Long> r0 = r10.joiningToChannels
            java.lang.Long r1 = java.lang.Long.valueOf(r15)
            boolean r0 = r0.contains(r1)
            if (r0 == 0) goto L_0x0065
            return
        L_0x0065:
            org.telegram.tgnet.TLRPC$TL_channels_joinChannel r0 = new org.telegram.tgnet.TLRPC$TL_channels_joinChannel
            r0.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r1 = r14.getInputChannel((long) r15)
            r0.channel = r1
            java.util.ArrayList<java.lang.Long> r1 = r10.joiningToChannels
            java.lang.Long r6 = java.lang.Long.valueOf(r15)
            r1.add(r6)
            goto L_0x0098
        L_0x007a:
            org.telegram.tgnet.TLRPC$TL_channels_inviteToChannel r0 = new org.telegram.tgnet.TLRPC$TL_channels_inviteToChannel
            r0.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r1 = r14.getInputChannel((long) r15)
            r0.channel = r1
            java.util.ArrayList<org.telegram.tgnet.TLRPC$InputUser> r1 = r0.users
            r1.add(r3)
            goto L_0x0098
        L_0x008b:
            org.telegram.tgnet.TLRPC$TL_messages_addChatUser r0 = new org.telegram.tgnet.TLRPC$TL_messages_addChatUser
            r0.<init>()
            r0.chat_id = r4
            r1 = r18
            r0.fwd_limit = r1
            r0.user_id = r3
        L_0x0098:
            r11 = r0
            org.telegram.tgnet.ConnectionsManager r12 = r14.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda302 r13 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda302
            r0 = r13
            r1 = r14
            r4 = r15
            r6 = r20
            r7 = r11
            r9 = r21
            r0.<init>(r1, r2, r3, r4, r6, r7, r8, r9)
            r12.sendRequest(r11, r13)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.addUserToChat(long, org.telegram.tgnet.TLRPC$User, int, java.lang.String, org.telegram.ui.ActionBar.BaseFragment, java.lang.Runnable):void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$addUserToChat$226(boolean z, TLRPC$InputUser tLRPC$InputUser, long j, BaseFragment baseFragment, TLObject tLObject, boolean z2, Runnable runnable, TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error) {
        boolean z3;
        TLRPC$InputUser tLRPC$InputUser2 = tLRPC$InputUser;
        long j2 = j;
        if (z && (tLRPC$InputUser2 instanceof TLRPC$TL_inputUserSelf)) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda55(this, j));
        }
        if (tLRPC$TL_error != null) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda142(this, tLRPC$TL_error, baseFragment, tLObject, z, z2, tLRPC$InputUser));
            return;
        }
        TLRPC$Updates tLRPC$Updates = (TLRPC$Updates) tLObject2;
        int i = 0;
        while (true) {
            if (i >= tLRPC$Updates.updates.size()) {
                z3 = false;
                break;
            }
            TLRPC$Update tLRPC$Update = tLRPC$Updates.updates.get(i);
            if ((tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) && (((TLRPC$TL_updateNewChannelMessage) tLRPC$Update).message.action instanceof TLRPC$TL_messageActionChatAddUser)) {
                z3 = true;
                break;
            }
            i++;
        }
        processUpdates(tLRPC$Updates, false);
        if (z) {
            if (!z3 && (tLRPC$InputUser2 instanceof TLRPC$TL_inputUserSelf)) {
                generateJoinMessage(j, true);
            }
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda48(this, j), 1000);
        }
        if (z && (tLRPC$InputUser2 instanceof TLRPC$TL_inputUserSelf)) {
            getMessagesStorage().updateDialogsWithDeletedMessages(-j2, j, new ArrayList(), (ArrayList<Long>) null, true);
        }
        if (runnable != null) {
            AndroidUtilities.runOnUIThread(runnable);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$addUserToChat$223(long j) {
        this.joiningToChannels.remove(Long.valueOf(j));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$addUserToChat$224(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLObject tLObject, boolean z, boolean z2, TLRPC$InputUser tLRPC$InputUser) {
        int i = this.currentAccount;
        Object[] objArr = new Object[1];
        objArr[0] = Boolean.valueOf(z && !z2);
        AlertsCreator.processError(i, tLRPC$TL_error, baseFragment, tLObject, objArr);
        if (z && (tLRPC$InputUser instanceof TLRPC$TL_inputUserSelf)) {
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$addUserToChat$225(long j) {
        loadFullChat(j, 0, true);
    }

    public void deleteParticipantFromChat(long j, TLRPC$User tLRPC$User, TLRPC$ChatFull tLRPC$ChatFull) {
        deleteParticipantFromChat(j, tLRPC$User, (TLRPC$Chat) null, tLRPC$ChatFull, false, false);
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v2, resolved type: org.telegram.tgnet.TLRPC$TL_messages_deleteChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r12v2, resolved type: org.telegram.tgnet.TLRPC$TL_channels_editBanned} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v5, resolved type: org.telegram.tgnet.TLRPC$TL_messages_deleteChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v7, resolved type: org.telegram.tgnet.TLRPC$TL_channels_leaveChannel} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v8, resolved type: org.telegram.tgnet.TLRPC$TL_channels_deleteChannel} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v11, resolved type: org.telegram.tgnet.TLRPC$TL_messages_deleteChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v12, resolved type: org.telegram.tgnet.TLRPC$TL_messages_deleteChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v13, resolved type: org.telegram.tgnet.TLRPC$TL_messages_deleteChatUser} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void deleteParticipantFromChat(long r7, org.telegram.tgnet.TLRPC$User r9, org.telegram.tgnet.TLRPC$Chat r10, org.telegram.tgnet.TLRPC$ChatFull r11, boolean r12, boolean r13) {
        /*
            r6 = this;
            if (r9 != 0) goto L_0x0005
            if (r10 != 0) goto L_0x0005
            return
        L_0x0005:
            if (r9 == 0) goto L_0x000c
            org.telegram.tgnet.TLRPC$InputPeer r10 = getInputPeer((org.telegram.tgnet.TLRPC$User) r9)
            goto L_0x0010
        L_0x000c:
            org.telegram.tgnet.TLRPC$InputPeer r10 = getInputPeer((org.telegram.tgnet.TLRPC$Chat) r10)
        L_0x0010:
            java.lang.Long r11 = java.lang.Long.valueOf(r7)
            org.telegram.tgnet.TLRPC$Chat r11 = r6.getChat(r11)
            boolean r2 = org.telegram.messenger.ChatObject.isChannel(r11)
            r0 = 1
            if (r2 == 0) goto L_0x0071
            boolean r1 = org.telegram.messenger.UserObject.isUserSelf(r9)
            if (r1 == 0) goto L_0x0043
            boolean r10 = r11.creator
            if (r10 == 0) goto L_0x0037
            if (r12 == 0) goto L_0x0037
            org.telegram.tgnet.TLRPC$TL_channels_deleteChannel r10 = new org.telegram.tgnet.TLRPC$TL_channels_deleteChannel
            r10.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r11 = getInputChannel((org.telegram.tgnet.TLRPC$Chat) r11)
            r10.channel = r11
            goto L_0x0093
        L_0x0037:
            org.telegram.tgnet.TLRPC$TL_channels_leaveChannel r10 = new org.telegram.tgnet.TLRPC$TL_channels_leaveChannel
            r10.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r11 = getInputChannel((org.telegram.tgnet.TLRPC$Chat) r11)
            r10.channel = r11
            goto L_0x0093
        L_0x0043:
            org.telegram.tgnet.TLRPC$TL_channels_editBanned r12 = new org.telegram.tgnet.TLRPC$TL_channels_editBanned
            r12.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r11 = getInputChannel((org.telegram.tgnet.TLRPC$Chat) r11)
            r12.channel = r11
            r12.participant = r10
            org.telegram.tgnet.TLRPC$TL_chatBannedRights r10 = new org.telegram.tgnet.TLRPC$TL_chatBannedRights
            r10.<init>()
            r12.banned_rights = r10
            r10.view_messages = r0
            r10.send_media = r0
            r10.send_messages = r0
            r10.send_stickers = r0
            r10.send_gifs = r0
            r10.send_games = r0
            r10.send_inline = r0
            r10.embed_links = r0
            r10.pin_messages = r0
            r10.send_polls = r0
            r10.invite_users = r0
            r10.change_info = r0
            r10 = r12
            goto L_0x0093
        L_0x0071:
            if (r12 == 0) goto L_0x0084
            org.telegram.tgnet.TLRPC$TL_messages_deleteChat r9 = new org.telegram.tgnet.TLRPC$TL_messages_deleteChat
            r9.<init>()
            r9.chat_id = r7
            org.telegram.tgnet.ConnectionsManager r7 = r6.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda306 r8 = org.telegram.messenger.MessagesController$$ExternalSyntheticLambda306.INSTANCE
            r7.sendRequest(r9, r8)
            return
        L_0x0084:
            org.telegram.tgnet.TLRPC$TL_messages_deleteChatUser r10 = new org.telegram.tgnet.TLRPC$TL_messages_deleteChatUser
            r10.<init>()
            r10.chat_id = r7
            org.telegram.tgnet.TLRPC$InputUser r11 = r6.getInputUser((org.telegram.tgnet.TLRPC$User) r9)
            r10.user_id = r11
            r10.revoke_history = r0
        L_0x0093:
            boolean r11 = org.telegram.messenger.UserObject.isUserSelf(r9)
            if (r11 == 0) goto L_0x009e
            long r11 = -r7
            r0 = 0
            r6.deleteDialog(r11, r0, r13)
        L_0x009e:
            org.telegram.tgnet.ConnectionsManager r11 = r6.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda304 r12 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda304
            r0 = r12
            r1 = r6
            r3 = r9
            r4 = r7
            r0.<init>(r1, r2, r3, r4)
            r7 = 64
            r11.sendRequest(r10, r12, r7)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.deleteParticipantFromChat(long, org.telegram.tgnet.TLRPC$User, org.telegram.tgnet.TLRPC$Chat, org.telegram.tgnet.TLRPC$ChatFull, boolean, boolean):void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteParticipantFromChat$229(boolean z, TLRPC$User tLRPC$User, long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            if (z && !UserObject.isUserSelf(tLRPC$User)) {
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda47(this, j), 1000);
            }
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteParticipantFromChat$228(long j) {
        loadFullChat(j, 0, true);
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v2, resolved type: org.telegram.tgnet.TLRPC$TL_messages_editChatTitle} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v4, resolved type: org.telegram.tgnet.TLRPC$TL_channels_editTitle} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v5, resolved type: org.telegram.tgnet.TLRPC$TL_messages_editChatTitle} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v6, resolved type: org.telegram.tgnet.TLRPC$TL_messages_editChatTitle} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void changeChatTitle(long r2, java.lang.String r4) {
        /*
            r1 = this;
            int r0 = r1.currentAccount
            boolean r0 = org.telegram.messenger.ChatObject.isChannel(r2, r0)
            if (r0 == 0) goto L_0x0016
            org.telegram.tgnet.TLRPC$TL_channels_editTitle r0 = new org.telegram.tgnet.TLRPC$TL_channels_editTitle
            r0.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r2 = r1.getInputChannel((long) r2)
            r0.channel = r2
            r0.title = r4
            goto L_0x001f
        L_0x0016:
            org.telegram.tgnet.TLRPC$TL_messages_editChatTitle r0 = new org.telegram.tgnet.TLRPC$TL_messages_editChatTitle
            r0.<init>()
            r0.chat_id = r2
            r0.title = r4
        L_0x001f:
            org.telegram.tgnet.ConnectionsManager r2 = r1.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda206 r3 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda206
            r3.<init>(r1)
            r4 = 64
            r2.sendRequest(r0, r3, r4)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.changeChatTitle(long, java.lang.String):void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$changeChatTitle$230(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v3, resolved type: org.telegram.tgnet.TLRPC$TL_messages_editChatPhoto} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v6, resolved type: org.telegram.tgnet.TLRPC$TL_channels_editPhoto} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v7, resolved type: org.telegram.tgnet.TLRPC$TL_messages_editChatPhoto} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v8, resolved type: org.telegram.tgnet.TLRPC$TL_messages_editChatPhoto} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void changeChatAvatar(long r12, org.telegram.tgnet.TLRPC$TL_inputChatPhoto r14, org.telegram.tgnet.TLRPC$InputFile r15, org.telegram.tgnet.TLRPC$InputFile r16, double r17, java.lang.String r19, org.telegram.tgnet.TLRPC$FileLocation r20, org.telegram.tgnet.TLRPC$FileLocation r21, java.lang.Runnable r22) {
        /*
            r11 = this;
            r0 = r12
            r2 = r15
            r3 = r16
            if (r14 == 0) goto L_0x0009
            r7 = r11
            r2 = r14
            goto L_0x0038
        L_0x0009:
            if (r2 != 0) goto L_0x0015
            if (r3 == 0) goto L_0x000e
            goto L_0x0015
        L_0x000e:
            org.telegram.tgnet.TLRPC$TL_inputChatPhotoEmpty r2 = new org.telegram.tgnet.TLRPC$TL_inputChatPhotoEmpty
            r2.<init>()
            r7 = r11
            goto L_0x0038
        L_0x0015:
            org.telegram.tgnet.TLRPC$TL_inputChatUploadedPhoto r4 = new org.telegram.tgnet.TLRPC$TL_inputChatUploadedPhoto
            r4.<init>()
            if (r2 == 0) goto L_0x0024
            r4.file = r2
            int r2 = r4.flags
            r2 = r2 | 1
            r4.flags = r2
        L_0x0024:
            if (r3 == 0) goto L_0x0036
            r4.video = r3
            int r2 = r4.flags
            r2 = r2 | 2
            r4.flags = r2
            r5 = r17
            r4.video_start_ts = r5
            r2 = r2 | 4
            r4.flags = r2
        L_0x0036:
            r7 = r11
            r2 = r4
        L_0x0038:
            int r3 = r7.currentAccount
            boolean r3 = org.telegram.messenger.ChatObject.isChannel(r12, r3)
            if (r3 == 0) goto L_0x004e
            org.telegram.tgnet.TLRPC$TL_channels_editPhoto r3 = new org.telegram.tgnet.TLRPC$TL_channels_editPhoto
            r3.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r0 = r11.getInputChannel((long) r12)
            r3.channel = r0
            r3.photo = r2
            goto L_0x0057
        L_0x004e:
            org.telegram.tgnet.TLRPC$TL_messages_editChatPhoto r3 = new org.telegram.tgnet.TLRPC$TL_messages_editChatPhoto
            r3.<init>()
            r3.chat_id = r0
            r3.photo = r2
        L_0x0057:
            r8 = r3
            org.telegram.tgnet.ConnectionsManager r9 = r11.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda291 r10 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda291
            r0 = r10
            r1 = r11
            r2 = r14
            r3 = r20
            r4 = r21
            r5 = r19
            r6 = r22
            r0.<init>(r1, r2, r3, r4, r5, r6)
            r0 = 64
            r9.sendRequest(r8, r10, r0)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.changeChatAvatar(long, org.telegram.tgnet.TLRPC$TL_inputChatPhoto, org.telegram.tgnet.TLRPC$InputFile, org.telegram.tgnet.TLRPC$InputFile, double, java.lang.String, org.telegram.tgnet.TLRPC$FileLocation, org.telegram.tgnet.TLRPC$FileLocation, java.lang.Runnable):void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$changeChatAvatar$232(TLRPC$TL_inputChatPhoto tLRPC$TL_inputChatPhoto, TLRPC$FileLocation tLRPC$FileLocation, TLRPC$FileLocation tLRPC$FileLocation2, String str, Runnable runnable, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        TLRPC$VideoSize tLRPC$VideoSize;
        TLRPC$Photo tLRPC$Photo;
        if (tLRPC$TL_error == null) {
            TLRPC$Updates tLRPC$Updates = (TLRPC$Updates) tLObject;
            if (tLRPC$TL_inputChatPhoto == null) {
                int size = tLRPC$Updates.updates.size();
                int i = 0;
                while (true) {
                    tLRPC$VideoSize = null;
                    if (i >= size) {
                        tLRPC$Photo = null;
                        break;
                    }
                    TLRPC$Update tLRPC$Update = tLRPC$Updates.updates.get(i);
                    if (tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) {
                        TLRPC$MessageAction tLRPC$MessageAction = ((TLRPC$TL_updateNewChannelMessage) tLRPC$Update).message.action;
                        if (tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatEditPhoto) {
                            tLRPC$Photo = tLRPC$MessageAction.photo;
                            if (tLRPC$Photo instanceof TLRPC$TL_photo) {
                                break;
                            }
                        } else {
                            continue;
                        }
                    } else if (tLRPC$Update instanceof TLRPC$TL_updateNewMessage) {
                        TLRPC$MessageAction tLRPC$MessageAction2 = ((TLRPC$TL_updateNewMessage) tLRPC$Update).message.action;
                        if (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChatEditPhoto) {
                            tLRPC$Photo = tLRPC$MessageAction2.photo;
                            if (tLRPC$Photo instanceof TLRPC$TL_photo) {
                                break;
                            }
                        } else {
                            continue;
                        }
                    } else {
                        continue;
                    }
                    i++;
                }
                if (tLRPC$Photo != null) {
                    TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo.sizes, 150);
                    if (!tLRPC$Photo.video_sizes.isEmpty()) {
                        tLRPC$VideoSize = tLRPC$Photo.video_sizes.get(0);
                    }
                    if (!(closestPhotoSizeWithSize == null || tLRPC$FileLocation == null)) {
                        FileLoader.getPathToAttach(tLRPC$FileLocation, true).renameTo(FileLoader.getPathToAttach(closestPhotoSizeWithSize, true));
                        ImageLoader.getInstance().replaceImageInCache(tLRPC$FileLocation.volume_id + "_" + tLRPC$FileLocation.local_id + "@50_50", closestPhotoSizeWithSize.location.volume_id + "_" + closestPhotoSizeWithSize.location.local_id + "@50_50", ImageLocation.getForPhoto(closestPhotoSizeWithSize, tLRPC$Photo), true);
                    }
                    TLRPC$PhotoSize closestPhotoSizeWithSize2 = FileLoader.getClosestPhotoSizeWithSize(tLRPC$Photo.sizes, 800);
                    if (!(closestPhotoSizeWithSize2 == null || tLRPC$FileLocation2 == null)) {
                        FileLoader.getPathToAttach(tLRPC$FileLocation2, true).renameTo(FileLoader.getPathToAttach(closestPhotoSizeWithSize2, true));
                    }
                    if (!(tLRPC$VideoSize == null || str == null)) {
                        new File(str).renameTo(FileLoader.getPathToAttach(tLRPC$VideoSize, "mp4", true));
                    }
                }
            }
            processUpdates(tLRPC$Updates, false);
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda85(this, runnable));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$changeChatAvatar$231(Runnable runnable) {
        if (runnable != null) {
            runnable.run();
        }
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_AVATAR));
    }

    public void unregistedPush() {
        if (getUserConfig().registeredForPush && SharedConfig.pushString.length() == 0) {
            TLRPC$TL_account_unregisterDevice tLRPC$TL_account_unregisterDevice = new TLRPC$TL_account_unregisterDevice();
            tLRPC$TL_account_unregisterDevice.token = SharedConfig.pushString;
            tLRPC$TL_account_unregisterDevice.token_type = 2;
            for (int i = 0; i < 3; i++) {
                UserConfig instance = UserConfig.getInstance(i);
                if (i != this.currentAccount && instance.isClientActivated()) {
                    tLRPC$TL_account_unregisterDevice.other_uids.add(Long.valueOf(instance.getClientUserId()));
                }
            }
            getConnectionsManager().sendRequest(tLRPC$TL_account_unregisterDevice, MessagesController$$ExternalSyntheticLambda314.INSTANCE);
        }
    }

    public void performLogout(int i) {
        boolean z = true;
        if (i == 1) {
            unregistedPush();
            getConnectionsManager().sendRequest(new TLRPC$TL_auth_logOut(), new MessagesController$$ExternalSyntheticLambda228(this));
        } else {
            getConnectionsManager().cleanup(i == 2);
        }
        getUserConfig().clearConfig();
        ArrayList<NotificationCenter.NotificationCenterDelegate> observers = getNotificationCenter().getObservers(NotificationCenter.appDidLogout);
        if (observers != null) {
            int size = observers.size();
            int i2 = 0;
            while (true) {
                if (i2 >= size) {
                    break;
                } else if (observers.get(i2) instanceof LaunchActivity) {
                    z = false;
                    break;
                } else {
                    i2++;
                }
            }
        }
        if (z && UserConfig.selectedAccount == this.currentAccount) {
            int i3 = 0;
            while (true) {
                if (i3 >= 3) {
                    i3 = -1;
                    break;
                } else if (UserConfig.getInstance(i3).isClientActivated()) {
                    break;
                } else {
                    i3++;
                }
            }
            if (i3 != -1) {
                UserConfig.selectedAccount = i3;
                UserConfig.getInstance(0).saveConfig(false);
                LaunchActivity.clearFragments();
            }
        }
        getNotificationCenter().postNotificationName(NotificationCenter.appDidLogout, new Object[0]);
        getMessagesStorage().cleanup(false);
        cleanup();
        getContactsController().deleteUnknownAppAccounts();
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$performLogout$234(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        getConnectionsManager().cleanup(false);
    }

    public void generateUpdateMessage() {
        String str;
        if (!this.gettingAppChangelog && !BuildVars.DEBUG_VERSION && (str = SharedConfig.lastUpdateVersion) != null && !str.equals(BuildVars.BUILD_VERSION_STRING)) {
            this.gettingAppChangelog = true;
            TLRPC$TL_help_getAppChangelog tLRPC$TL_help_getAppChangelog = new TLRPC$TL_help_getAppChangelog();
            tLRPC$TL_help_getAppChangelog.prev_app_version = SharedConfig.lastUpdateVersion;
            getConnectionsManager().sendRequest(tLRPC$TL_help_getAppChangelog, new MessagesController$$ExternalSyntheticLambda221(this));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$generateUpdateMessage$235(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            SharedConfig.lastUpdateVersion = BuildVars.BUILD_VERSION_STRING;
            SharedConfig.saveConfig();
        }
        if (tLObject instanceof TLRPC$Updates) {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
    }

    public void registerForPush(String str) {
        if (!TextUtils.isEmpty(str) && !this.registeringForPush && getUserConfig().getClientUserId() != 0) {
            if (!getUserConfig().registeredForPush || !str.equals(SharedConfig.pushString)) {
                this.registeringForPush = true;
                this.lastPushRegisterSendTime = SystemClock.elapsedRealtime();
                if (SharedConfig.pushAuthKey == null) {
                    SharedConfig.pushAuthKey = new byte[256];
                    Utilities.random.nextBytes(SharedConfig.pushAuthKey);
                    SharedConfig.saveConfig();
                }
                TLRPC$TL_account_registerDevice tLRPC$TL_account_registerDevice = new TLRPC$TL_account_registerDevice();
                tLRPC$TL_account_registerDevice.token_type = 2;
                tLRPC$TL_account_registerDevice.token = str;
                tLRPC$TL_account_registerDevice.no_muted = false;
                tLRPC$TL_account_registerDevice.secret = SharedConfig.pushAuthKey;
                for (int i = 0; i < 3; i++) {
                    UserConfig instance = UserConfig.getInstance(i);
                    if (i != this.currentAccount && instance.isClientActivated()) {
                        long clientUserId = instance.getClientUserId();
                        tLRPC$TL_account_registerDevice.other_uids.add(Long.valueOf(clientUserId));
                        if (BuildVars.LOGS_ENABLED) {
                            FileLog.d("add other uid = " + clientUserId + " for account " + this.currentAccount);
                        }
                    }
                }
                getConnectionsManager().sendRequest(tLRPC$TL_account_registerDevice, new MessagesController$$ExternalSyntheticLambda281(this, str));
            }
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$registerForPush$237(String str, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject instanceof TLRPC$TL_boolTrue) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("account " + this.currentAccount + " registered for push");
            }
            getUserConfig().registeredForPush = true;
            SharedConfig.pushString = str;
            getUserConfig().saveConfig(false);
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda21(this));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$registerForPush$236() {
        this.registeringForPush = false;
    }

    public void loadCurrentState() {
        if (!this.updatingState) {
            this.updatingState = true;
            getConnectionsManager().sendRequest(new TLRPC$TL_updates_getState(), new MessagesController$$ExternalSyntheticLambda211(this));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadCurrentState$238(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        this.updatingState = false;
        if (tLRPC$TL_error == null) {
            TLRPC$TL_updates_state tLRPC$TL_updates_state = (TLRPC$TL_updates_state) tLObject;
            getMessagesStorage().setLastDateValue(tLRPC$TL_updates_state.date);
            getMessagesStorage().setLastPtsValue(tLRPC$TL_updates_state.pts);
            getMessagesStorage().setLastSeqValue(tLRPC$TL_updates_state.seq);
            getMessagesStorage().setLastQtsValue(tLRPC$TL_updates_state.qts);
            for (int i = 0; i < 3; i++) {
                processUpdatesQueue(i, 2);
            }
            getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
        } else if (tLRPC$TL_error.code != 401) {
            loadCurrentState();
        }
    }

    private int getUpdateSeq(TLRPC$Updates tLRPC$Updates) {
        if (tLRPC$Updates instanceof TLRPC$TL_updatesCombined) {
            return tLRPC$Updates.seq_start;
        }
        return tLRPC$Updates.seq;
    }

    private void setUpdatesStartTime(int i, long j) {
        if (i == 0) {
            this.updatesStartWaitTimeSeq = j;
        } else if (i == 1) {
            this.updatesStartWaitTimePts = j;
        } else if (i == 2) {
            this.updatesStartWaitTimeQts = j;
        }
    }

    public long getUpdatesStartTime(int i) {
        if (i == 0) {
            return this.updatesStartWaitTimeSeq;
        }
        if (i == 1) {
            return this.updatesStartWaitTimePts;
        }
        if (i == 2) {
            return this.updatesStartWaitTimeQts;
        }
        return 0;
    }

    private int isValidUpdate(TLRPC$Updates tLRPC$Updates, int i) {
        if (i == 0) {
            int updateSeq = getUpdateSeq(tLRPC$Updates);
            if (getMessagesStorage().getLastSeqValue() + 1 == updateSeq || getMessagesStorage().getLastSeqValue() == updateSeq) {
                return 0;
            }
            return getMessagesStorage().getLastSeqValue() < updateSeq ? 1 : 2;
        } else if (i == 1) {
            if (tLRPC$Updates.pts <= getMessagesStorage().getLastPtsValue()) {
                return 2;
            }
            return getMessagesStorage().getLastPtsValue() + tLRPC$Updates.pts_count == tLRPC$Updates.pts ? 0 : 1;
        } else if (i != 2) {
            return 0;
        } else {
            if (tLRPC$Updates.pts <= getMessagesStorage().getLastQtsValue()) {
                return 2;
            }
            return getMessagesStorage().getLastQtsValue() + tLRPC$Updates.updates.size() == tLRPC$Updates.pts ? 0 : 1;
        }
    }

    private void processChannelsUpdatesQueue(long j, int i) {
        char c;
        ArrayList arrayList = this.updatesQueueChannels.get(j);
        if (arrayList != null) {
            int i2 = this.channelsPts.get(j);
            if (arrayList.isEmpty() || i2 == 0) {
                this.updatesQueueChannels.remove(j);
                return;
            }
            Collections.sort(arrayList, MessagesController$$ExternalSyntheticLambda202.INSTANCE);
            if (i == 2) {
                this.channelsPts.put(j, ((TLRPC$Updates) arrayList.get(0)).pts);
            }
            boolean z = false;
            while (arrayList.size() > 0) {
                TLRPC$Updates tLRPC$Updates = (TLRPC$Updates) arrayList.get(0);
                int i3 = tLRPC$Updates.pts;
                if (i3 <= i2) {
                    c = 2;
                } else {
                    c = tLRPC$Updates.pts_count + i2 == i3 ? (char) 0 : 1;
                }
                if (c == 0) {
                    processUpdates(tLRPC$Updates, true);
                    arrayList.remove(0);
                    z = true;
                } else if (c == 1) {
                    long j2 = this.updatesStartWaitTimeChannels.get(j);
                    if (j2 == 0 || (!z && Math.abs(System.currentTimeMillis() - j2) > 1500)) {
                        if (BuildVars.LOGS_ENABLED) {
                            FileLog.d("HOLE IN CHANNEL " + j + " UPDATES QUEUE - getChannelDifference ");
                        }
                        this.updatesStartWaitTimeChannels.delete(j);
                        this.updatesQueueChannels.remove(j);
                        getChannelDifference(j);
                        return;
                    }
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("HOLE IN CHANNEL " + j + " UPDATES QUEUE - will wait more time");
                    }
                    if (z) {
                        this.updatesStartWaitTimeChannels.put(j, System.currentTimeMillis());
                        return;
                    }
                    return;
                } else {
                    arrayList.remove(0);
                }
            }
            this.updatesQueueChannels.remove(j);
            this.updatesStartWaitTimeChannels.delete(j);
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("UPDATES CHANNEL " + j + " QUEUE PROCEED - OK");
            }
        }
    }

    private void processUpdatesQueue(int i, int i2) {
        ArrayList<TLRPC$Updates> arrayList;
        if (i == 0) {
            arrayList = this.updatesQueueSeq;
            Collections.sort(arrayList, new MessagesController$$ExternalSyntheticLambda199(this));
        } else if (i == 1) {
            arrayList = this.updatesQueuePts;
            Collections.sort(arrayList, MessagesController$$ExternalSyntheticLambda203.INSTANCE);
        } else if (i == 2) {
            arrayList = this.updatesQueueQts;
            Collections.sort(arrayList, MessagesController$$ExternalSyntheticLambda201.INSTANCE);
        } else {
            arrayList = null;
        }
        if (arrayList != null && !arrayList.isEmpty()) {
            if (i2 == 2) {
                TLRPC$Updates tLRPC$Updates = arrayList.get(0);
                if (i == 0) {
                    getMessagesStorage().setLastSeqValue(getUpdateSeq(tLRPC$Updates));
                } else if (i == 1) {
                    getMessagesStorage().setLastPtsValue(tLRPC$Updates.pts);
                } else {
                    getMessagesStorage().setLastQtsValue(tLRPC$Updates.pts);
                }
            }
            boolean z = false;
            while (arrayList.size() > 0) {
                TLRPC$Updates tLRPC$Updates2 = arrayList.get(0);
                int isValidUpdate = isValidUpdate(tLRPC$Updates2, i);
                if (isValidUpdate == 0) {
                    processUpdates(tLRPC$Updates2, true);
                    arrayList.remove(0);
                    z = true;
                } else if (isValidUpdate != 1) {
                    arrayList.remove(0);
                } else if (getUpdatesStartTime(i) == 0 || (!z && Math.abs(System.currentTimeMillis() - getUpdatesStartTime(i)) > 1500)) {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("HOLE IN UPDATES QUEUE - getDifference");
                    }
                    setUpdatesStartTime(i, 0);
                    arrayList.clear();
                    getDifference();
                    return;
                } else {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("HOLE IN UPDATES QUEUE - will wait more time");
                    }
                    if (z) {
                        setUpdatesStartTime(i, System.currentTimeMillis());
                        return;
                    }
                    return;
                }
            }
            arrayList.clear();
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("UPDATES QUEUE PROCEED - OK");
            }
        }
        setUpdatesStartTime(i, 0);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ int lambda$processUpdatesQueue$240(TLRPC$Updates tLRPC$Updates, TLRPC$Updates tLRPC$Updates2) {
        return AndroidUtilities.compare(getUpdateSeq(tLRPC$Updates), getUpdateSeq(tLRPC$Updates2));
    }

    /* access modifiers changed from: protected */
    public void loadUnknownChannel(TLRPC$Chat tLRPC$Chat, long j) {
        NativeByteBuffer nativeByteBuffer;
        Exception e;
        if ((tLRPC$Chat instanceof TLRPC$TL_channel) && this.gettingUnknownChannels.indexOfKey(tLRPC$Chat.id) < 0) {
            if (tLRPC$Chat.access_hash != 0) {
                TLRPC$TL_inputPeerChannel tLRPC$TL_inputPeerChannel = new TLRPC$TL_inputPeerChannel();
                long j2 = tLRPC$Chat.id;
                tLRPC$TL_inputPeerChannel.channel_id = j2;
                tLRPC$TL_inputPeerChannel.access_hash = tLRPC$Chat.access_hash;
                this.gettingUnknownChannels.put(j2, Boolean.TRUE);
                TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs = new TLRPC$TL_messages_getPeerDialogs();
                TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
                tLRPC$TL_inputDialogPeer.peer = tLRPC$TL_inputPeerChannel;
                tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer);
                if (j == 0) {
                    try {
                        nativeByteBuffer = new NativeByteBuffer(tLRPC$Chat.getObjectSize() + 4);
                        try {
                            nativeByteBuffer.writeInt32(0);
                            tLRPC$Chat.serializeToStream(nativeByteBuffer);
                        } catch (Exception e2) {
                            e = e2;
                        }
                    } catch (Exception e3) {
                        Exception exc = e3;
                        nativeByteBuffer = null;
                        e = exc;
                        FileLog.e((Throwable) e);
                        j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                        getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerDialogs, new MessagesController$$ExternalSyntheticLambda269(this, j, tLRPC$Chat));
                    }
                    j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                }
                getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerDialogs, new MessagesController$$ExternalSyntheticLambda269(this, j, tLRPC$Chat));
            } else if (j != 0) {
                getMessagesStorage().removePendingTask(j);
            }
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadUnknownChannel$243(long j, TLRPC$Chat tLRPC$Chat, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject;
            if (!tLRPC$TL_messages_peerDialogs.dialogs.isEmpty() && !tLRPC$TL_messages_peerDialogs.chats.isEmpty()) {
                TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
                tLRPC$TL_messages_dialogs.dialogs.addAll(tLRPC$TL_messages_peerDialogs.dialogs);
                tLRPC$TL_messages_dialogs.messages.addAll(tLRPC$TL_messages_peerDialogs.messages);
                tLRPC$TL_messages_dialogs.users.addAll(tLRPC$TL_messages_peerDialogs.users);
                tLRPC$TL_messages_dialogs.chats.addAll(tLRPC$TL_messages_peerDialogs.chats);
                processLoadedDialogs(tLRPC$TL_messages_dialogs, (ArrayList<TLRPC$EncryptedChat>) null, ((TLRPC$TL_dialog) tLRPC$TL_messages_peerDialogs.dialogs.get(0)).folder_id, 0, 1, this.DIALOGS_LOAD_TYPE_CHANNEL, false, false, false);
            }
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
        this.gettingUnknownChannels.delete(tLRPC$Chat.id);
    }

    public void startShortPoll(TLRPC$Chat tLRPC$Chat, int i, boolean z) {
        if (tLRPC$Chat != null) {
            Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda131(this, tLRPC$Chat, z, i));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$startShortPoll$244(TLRPC$Chat tLRPC$Chat, boolean z, int i) {
        ArrayList arrayList = this.needShortPollChannels.get(tLRPC$Chat.id);
        ArrayList arrayList2 = this.needShortPollOnlines.get(tLRPC$Chat.id);
        if (z) {
            if (arrayList != null) {
                arrayList.remove(Integer.valueOf(i));
            }
            if (arrayList == null || arrayList.isEmpty()) {
                this.needShortPollChannels.delete(tLRPC$Chat.id);
            }
            if (tLRPC$Chat.megagroup) {
                if (arrayList2 != null) {
                    arrayList2.remove(Integer.valueOf(i));
                }
                if (arrayList2 == null || arrayList2.isEmpty()) {
                    this.needShortPollOnlines.delete(tLRPC$Chat.id);
                    return;
                }
                return;
            }
            return;
        }
        if (arrayList == null) {
            arrayList = new ArrayList();
            this.needShortPollChannels.put(tLRPC$Chat.id, arrayList);
        }
        if (!arrayList.contains(Integer.valueOf(i))) {
            arrayList.add(Integer.valueOf(i));
        }
        if (this.shortPollChannels.indexOfKey(tLRPC$Chat.id) < 0) {
            getChannelDifference(tLRPC$Chat.id, 3, 0, (TLRPC$InputChannel) null);
        }
        if (tLRPC$Chat.megagroup) {
            if (arrayList2 == null) {
                arrayList2 = new ArrayList();
                this.needShortPollOnlines.put(tLRPC$Chat.id, arrayList2);
            }
            if (!arrayList2.contains(Integer.valueOf(i))) {
                arrayList2.add(Integer.valueOf(i));
            }
            if (this.shortPollOnlines.indexOfKey(tLRPC$Chat.id) < 0) {
                this.shortPollOnlines.put(tLRPC$Chat.id, 0);
            }
        }
    }

    private void getChannelDifference(long j) {
        getChannelDifference(j, 0, 0, (TLRPC$InputChannel) null);
    }

    public static boolean isSupportUser(TLRPC$User tLRPC$User) {
        if (tLRPC$User != null) {
            if (!tLRPC$User.support) {
                long j = tLRPC$User.id;
                if (j == 777000 || j == 333000 || j == 4240000 || j == 4244000 || j == 4245000 || j == 4246000 || j == 410000 || j == 420000 || j == 431000 || j == NUM || j == 434000 || j == 4243000 || j == 439000 || j == 449000 || j == 450000 || j == 452000 || j == 454000 || j == 4254000 || j == 455000 || j == 460000 || j == 470000 || j == 479000 || j == 796000 || j == 482000 || j == 490000 || j == 496000 || j == 497000 || j == 498000 || j == 4298000) {
                    return true;
                }
            }
            return true;
        }
        return false;
    }

    /* access modifiers changed from: protected */
    /* JADX WARNING: Removed duplicated region for block: B:48:0x00cd  */
    /* JADX WARNING: Removed duplicated region for block: B:51:0x00d4  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void getChannelDifference(long r17, int r19, long r20, org.telegram.tgnet.TLRPC$InputChannel r22) {
        /*
            r16 = this;
            r8 = r16
            r3 = r17
            r5 = r19
            r0 = r20
            androidx.collection.LongSparseArray<java.lang.Boolean> r2 = r8.gettingDifferenceChannels
            java.lang.Boolean r6 = java.lang.Boolean.FALSE
            java.lang.Object r2 = r2.get(r3, r6)
            java.lang.Boolean r2 = (java.lang.Boolean) r2
            boolean r2 = r2.booleanValue()
            if (r2 == 0) goto L_0x0019
            return
        L_0x0019:
            r2 = 100
            r6 = 3
            r7 = 1
            if (r5 != r7) goto L_0x002b
            org.telegram.messenger.support.LongSparseIntArray r2 = r8.channelsPts
            int r2 = r2.get(r3)
            if (r2 == 0) goto L_0x0028
            return
        L_0x0028:
            r2 = 1
            r9 = 1
            goto L_0x004d
        L_0x002b:
            org.telegram.messenger.support.LongSparseIntArray r9 = r8.channelsPts
            int r9 = r9.get(r3)
            if (r9 != 0) goto L_0x004a
            org.telegram.messenger.MessagesStorage r9 = r16.getMessagesStorage()
            int r9 = r9.getChannelPtsSync(r3)
            if (r9 == 0) goto L_0x0042
            org.telegram.messenger.support.LongSparseIntArray r10 = r8.channelsPts
            r10.put(r3, r9)
        L_0x0042:
            if (r9 != 0) goto L_0x004a
            r10 = 2
            if (r5 == r10) goto L_0x0049
            if (r5 != r6) goto L_0x004a
        L_0x0049:
            return
        L_0x004a:
            if (r9 != 0) goto L_0x004d
            return
        L_0x004d:
            if (r22 != 0) goto L_0x006b
            java.lang.Long r10 = java.lang.Long.valueOf(r17)
            org.telegram.tgnet.TLRPC$Chat r10 = r8.getChat(r10)
            if (r10 != 0) goto L_0x0066
            org.telegram.messenger.MessagesStorage r10 = r16.getMessagesStorage()
            org.telegram.tgnet.TLRPC$Chat r10 = r10.getChatSync(r3)
            if (r10 == 0) goto L_0x0066
            r8.putChat(r10, r7)
        L_0x0066:
            org.telegram.tgnet.TLRPC$InputChannel r10 = getInputChannel((org.telegram.tgnet.TLRPC$Chat) r10)
            goto L_0x006d
        L_0x006b:
            r10 = r22
        L_0x006d:
            long r11 = r10.access_hash
            r13 = 0
            int r15 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1))
            if (r15 != 0) goto L_0x0081
            int r2 = (r0 > r13 ? 1 : (r0 == r13 ? 0 : -1))
            if (r2 == 0) goto L_0x0080
            org.telegram.messenger.MessagesStorage r2 = r16.getMessagesStorage()
            r2.removePendingTask(r0)
        L_0x0080:
            return
        L_0x0081:
            int r11 = (r0 > r13 ? 1 : (r0 == r13 ? 0 : -1))
            if (r11 != 0) goto L_0x00b0
            r1 = 0
            org.telegram.tgnet.NativeByteBuffer r11 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x00a3 }
            int r0 = r10.getObjectSize()     // Catch:{ Exception -> 0x00a3 }
            int r0 = r0 + 16
            r11.<init>((int) r0)     // Catch:{ Exception -> 0x00a3 }
            r0 = 25
            r11.writeInt32(r0)     // Catch:{ Exception -> 0x00a0 }
            r11.writeInt64(r3)     // Catch:{ Exception -> 0x00a0 }
            r11.writeInt32(r5)     // Catch:{ Exception -> 0x00a0 }
            r10.serializeToStream(r11)     // Catch:{ Exception -> 0x00a0 }
            goto L_0x00a8
        L_0x00a0:
            r0 = move-exception
            r1 = r11
            goto L_0x00a4
        L_0x00a3:
            r0 = move-exception
        L_0x00a4:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
            r11 = r1
        L_0x00a8:
            org.telegram.messenger.MessagesStorage r0 = r16.getMessagesStorage()
            long r0 = r0.createPendingTask(r11)
        L_0x00b0:
            r11 = r0
            androidx.collection.LongSparseArray<java.lang.Boolean> r0 = r8.gettingDifferenceChannels
            java.lang.Boolean r1 = java.lang.Boolean.TRUE
            r0.put(r3, r1)
            org.telegram.tgnet.TLRPC$TL_updates_getChannelDifference r0 = new org.telegram.tgnet.TLRPC$TL_updates_getChannelDifference
            r0.<init>()
            r0.channel = r10
            org.telegram.tgnet.TLRPC$TL_channelMessagesFilterEmpty r1 = new org.telegram.tgnet.TLRPC$TL_channelMessagesFilterEmpty
            r1.<init>()
            r0.filter = r1
            r0.pts = r9
            r0.limit = r2
            if (r5 == r6) goto L_0x00cd
            goto L_0x00ce
        L_0x00cd:
            r7 = 0
        L_0x00ce:
            r0.force = r7
            boolean r1 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r1 == 0) goto L_0x00f1
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "start getChannelDifference with pts = "
            r1.append(r2)
            r1.append(r9)
            java.lang.String r2 = " channelId = "
            r1.append(r2)
            r1.append(r3)
            java.lang.String r1 = r1.toString()
            org.telegram.messenger.FileLog.d(r1)
        L_0x00f1:
            org.telegram.tgnet.ConnectionsManager r9 = r16.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda261 r10 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda261
            r1 = r10
            r2 = r16
            r3 = r17
            r5 = r19
            r6 = r11
            r1.<init>(r2, r3, r5, r6)
            r9.sendRequest(r0, r10)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.getChannelDifference(long, int, long, org.telegram.tgnet.TLRPC$InputChannel):void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getChannelDifference$253(long j, int i, long j2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        TLRPC$Chat tLRPC$Chat;
        long j3 = j;
        long j4 = j2;
        TLRPC$TL_error tLRPC$TL_error2 = tLRPC$TL_error;
        if (tLObject != null) {
            TLRPC$updates_ChannelDifference tLRPC$updates_ChannelDifference = (TLRPC$updates_ChannelDifference) tLObject;
            LongSparseArray longSparseArray = new LongSparseArray();
            int i2 = 0;
            for (int i3 = 0; i3 < tLRPC$updates_ChannelDifference.users.size(); i3++) {
                TLRPC$User tLRPC$User = tLRPC$updates_ChannelDifference.users.get(i3);
                longSparseArray.put(tLRPC$User.id, tLRPC$User);
            }
            int i4 = 0;
            while (true) {
                if (i4 >= tLRPC$updates_ChannelDifference.chats.size()) {
                    tLRPC$Chat = null;
                    break;
                }
                tLRPC$Chat = tLRPC$updates_ChannelDifference.chats.get(i4);
                if (tLRPC$Chat.id == j3) {
                    break;
                }
                i4++;
            }
            ArrayList arrayList = new ArrayList();
            if (!tLRPC$updates_ChannelDifference.other_updates.isEmpty()) {
                while (i2 < tLRPC$updates_ChannelDifference.other_updates.size()) {
                    TLRPC$Update tLRPC$Update = tLRPC$updates_ChannelDifference.other_updates.get(i2);
                    if (tLRPC$Update instanceof TLRPC$TL_updateMessageID) {
                        arrayList.add((TLRPC$TL_updateMessageID) tLRPC$Update);
                        tLRPC$updates_ChannelDifference.other_updates.remove(i2);
                        i2--;
                    }
                    i2++;
                }
            }
            getMessagesStorage().putUsersAndChats(tLRPC$updates_ChannelDifference.users, tLRPC$updates_ChannelDifference.chats, true, true);
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda176(this, tLRPC$updates_ChannelDifference));
            getMessagesStorage().getStorageQueue().postRunnable(new MessagesController$$ExternalSyntheticLambda101(this, arrayList, j, tLRPC$updates_ChannelDifference, tLRPC$Chat, longSparseArray, i, j2));
        } else if (tLRPC$TL_error2 != null) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda140(this, tLRPC$TL_error2, j3));
            this.gettingDifferenceChannels.delete(j3);
            if (j4 != 0) {
                getMessagesStorage().removePendingTask(j4);
            }
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getChannelDifference$245(TLRPC$updates_ChannelDifference tLRPC$updates_ChannelDifference) {
        putUsers(tLRPC$updates_ChannelDifference.users, false);
        putChats(tLRPC$updates_ChannelDifference.chats, false);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getChannelDifference$251(ArrayList arrayList, long j, TLRPC$updates_ChannelDifference tLRPC$updates_ChannelDifference, TLRPC$Chat tLRPC$Chat, LongSparseArray longSparseArray, int i, long j2) {
        if (!arrayList.isEmpty()) {
            SparseArray sparseArray = new SparseArray();
            Iterator it = arrayList.iterator();
            while (it.hasNext()) {
                TLRPC$TL_updateMessageID tLRPC$TL_updateMessageID = (TLRPC$TL_updateMessageID) it.next();
                long[] updateMessageStateAndId = getMessagesStorage().updateMessageStateAndId(tLRPC$TL_updateMessageID.random_id, -j, (Integer) null, tLRPC$TL_updateMessageID.id, 0, false, -1);
                if (updateMessageStateAndId != null) {
                    sparseArray.put(tLRPC$TL_updateMessageID.id, updateMessageStateAndId);
                }
            }
            long j3 = j;
            if (sparseArray.size() != 0) {
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda75(this, sparseArray));
            }
        } else {
            long j4 = j;
        }
        Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda177(this, tLRPC$updates_ChannelDifference, j, tLRPC$Chat, longSparseArray, i, j2));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getChannelDifference$246(SparseArray sparseArray) {
        for (int i = 0; i < sparseArray.size(); i++) {
            int keyAt = sparseArray.keyAt(i);
            long[] jArr = (long[]) sparseArray.valueAt(i);
            getSendMessagesHelper().processSentMessage((int) jArr[1]);
            getNotificationCenter().postNotificationName(NotificationCenter.messageReceivedByServer, Integer.valueOf((int) jArr[1]), Integer.valueOf(keyAt), null, Long.valueOf(jArr[0]), 0L, -1, Boolean.FALSE);
        }
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Removed duplicated region for block: B:65:0x0173  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$getChannelDifference$250(org.telegram.tgnet.TLRPC$updates_ChannelDifference r23, long r24, org.telegram.tgnet.TLRPC$Chat r26, androidx.collection.LongSparseArray r27, int r28, long r29) {
        /*
            r22 = this;
            r6 = r22
            r7 = r23
            r8 = r24
            r0 = r26
            r10 = r29
            boolean r1 = r7 instanceof org.telegram.tgnet.TLRPC$TL_updates_channelDifference
            r2 = 0
            r12 = 1
            if (r1 != 0) goto L_0x00a6
            boolean r1 = r7 instanceof org.telegram.tgnet.TLRPC$TL_updates_channelDifferenceEmpty
            if (r1 == 0) goto L_0x0016
            goto L_0x00a6
        L_0x0016:
            boolean r1 = r7 instanceof org.telegram.tgnet.TLRPC$TL_updates_channelDifferenceTooLong
            if (r1 == 0) goto L_0x01be
            long r3 = -r8
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r6.dialogs_read_inbox_max
            java.lang.Long r5 = java.lang.Long.valueOf(r3)
            java.lang.Object r1 = r1.get(r5)
            java.lang.Integer r1 = (java.lang.Integer) r1
            if (r1 != 0) goto L_0x003e
            org.telegram.messenger.MessagesStorage r1 = r22.getMessagesStorage()
            int r1 = r1.getDialogReadMax(r2, r3)
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r5 = r6.dialogs_read_inbox_max
            java.lang.Long r13 = java.lang.Long.valueOf(r3)
            r5.put(r13, r1)
        L_0x003e:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r5 = r6.dialogs_read_outbox_max
            java.lang.Long r13 = java.lang.Long.valueOf(r3)
            java.lang.Object r5 = r5.get(r13)
            java.lang.Integer r5 = (java.lang.Integer) r5
            if (r5 != 0) goto L_0x0061
            org.telegram.messenger.MessagesStorage r5 = r22.getMessagesStorage()
            int r5 = r5.getDialogReadMax(r12, r3)
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r13 = r6.dialogs_read_outbox_max
            java.lang.Long r14 = java.lang.Long.valueOf(r3)
            r13.put(r14, r5)
        L_0x0061:
            r13 = 0
        L_0x0062:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r14 = r7.messages
            int r14 = r14.size()
            if (r13 >= r14) goto L_0x0098
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r14 = r7.messages
            java.lang.Object r14 = r14.get(r13)
            org.telegram.tgnet.TLRPC$Message r14 = (org.telegram.tgnet.TLRPC$Message) r14
            r14.dialog_id = r3
            org.telegram.tgnet.TLRPC$MessageAction r15 = r14.action
            boolean r15 = r15 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChannelCreate
            if (r15 != 0) goto L_0x0091
            if (r0 == 0) goto L_0x0080
            boolean r15 = r0.left
            if (r15 != 0) goto L_0x0091
        L_0x0080:
            boolean r15 = r14.out
            if (r15 == 0) goto L_0x0086
            r15 = r5
            goto L_0x0087
        L_0x0086:
            r15 = r1
        L_0x0087:
            int r15 = r15.intValue()
            int r12 = r14.id
            if (r15 >= r12) goto L_0x0091
            r12 = 1
            goto L_0x0092
        L_0x0091:
            r12 = 0
        L_0x0092:
            r14.unread = r12
            int r13 = r13 + 1
            r12 = 1
            goto L_0x0062
        L_0x0098:
            org.telegram.messenger.MessagesStorage r0 = r22.getMessagesStorage()
            r1 = r7
            org.telegram.tgnet.TLRPC$TL_updates_channelDifferenceTooLong r1 = (org.telegram.tgnet.TLRPC$TL_updates_channelDifferenceTooLong) r1
            r2 = r28
            r0.overwriteChannel(r8, r1, r2)
            goto L_0x01be
        L_0x00a6:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r7.new_messages
            boolean r1 = r1.isEmpty()
            if (r1 != 0) goto L_0x019c
            androidx.collection.LongSparseArray r1 = new androidx.collection.LongSparseArray
            r1.<init>()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r3 = r7.new_messages
            org.telegram.messenger.ImageLoader.saveMessagesThumbs(r3)
            java.util.ArrayList r3 = new java.util.ArrayList
            r3.<init>()
            long r4 = -r8
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r12 = r6.dialogs_read_inbox_max
            java.lang.Long r13 = java.lang.Long.valueOf(r4)
            java.lang.Object r12 = r12.get(r13)
            java.lang.Integer r12 = (java.lang.Integer) r12
            if (r12 != 0) goto L_0x00e1
            org.telegram.messenger.MessagesStorage r12 = r22.getMessagesStorage()
            int r12 = r12.getDialogReadMax(r2, r4)
            java.lang.Integer r12 = java.lang.Integer.valueOf(r12)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r13 = r6.dialogs_read_inbox_max
            java.lang.Long r14 = java.lang.Long.valueOf(r4)
            r13.put(r14, r12)
        L_0x00e1:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r13 = r6.dialogs_read_outbox_max
            java.lang.Long r14 = java.lang.Long.valueOf(r4)
            java.lang.Object r13 = r13.get(r14)
            java.lang.Integer r13 = (java.lang.Integer) r13
            if (r13 != 0) goto L_0x0105
            org.telegram.messenger.MessagesStorage r13 = r22.getMessagesStorage()
            r14 = 1
            int r13 = r13.getDialogReadMax(r14, r4)
            java.lang.Integer r13 = java.lang.Integer.valueOf(r13)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r14 = r6.dialogs_read_outbox_max
            java.lang.Long r15 = java.lang.Long.valueOf(r4)
            r14.put(r15, r13)
        L_0x0105:
            r14 = 0
        L_0x0106:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r15 = r7.new_messages
            int r15 = r15.size()
            if (r14 >= r15) goto L_0x0184
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r15 = r7.new_messages
            java.lang.Object r15 = r15.get(r14)
            org.telegram.tgnet.TLRPC$Message r15 = (org.telegram.tgnet.TLRPC$Message) r15
            boolean r2 = r15 instanceof org.telegram.tgnet.TLRPC$TL_messageEmpty
            if (r2 == 0) goto L_0x011b
            goto L_0x017e
        L_0x011b:
            if (r0 == 0) goto L_0x0121
            boolean r2 = r0.left
            if (r2 != 0) goto L_0x0138
        L_0x0121:
            boolean r2 = r15.out
            if (r2 == 0) goto L_0x0127
            r2 = r13
            goto L_0x0128
        L_0x0127:
            r2 = r12
        L_0x0128:
            int r2 = r2.intValue()
            int r0 = r15.id
            if (r2 >= r0) goto L_0x0138
            org.telegram.tgnet.TLRPC$MessageAction r0 = r15.action
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChannelCreate
            if (r0 != 0) goto L_0x0138
            r0 = 1
            goto L_0x0139
        L_0x0138:
            r0 = 0
        L_0x0139:
            r15.unread = r0
            java.util.ArrayList<java.lang.Long> r0 = r6.createdDialogIds
            java.lang.Long r2 = java.lang.Long.valueOf(r4)
            boolean r21 = r0.contains(r2)
            org.telegram.messenger.MessageObject r0 = new org.telegram.messenger.MessageObject
            int r2 = r6.currentAccount
            r16 = r0
            r17 = r2
            r18 = r15
            r19 = r27
            r20 = r21
            r16.<init>((int) r17, (org.telegram.tgnet.TLRPC$Message) r18, (androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$User>) r19, (boolean) r20, (boolean) r21)
            boolean r2 = r0.isOut()
            if (r2 == 0) goto L_0x0162
            org.telegram.tgnet.TLRPC$Message r2 = r0.messageOwner
            boolean r2 = r2.from_scheduled
            if (r2 == 0) goto L_0x016b
        L_0x0162:
            boolean r2 = r0.isUnread()
            if (r2 == 0) goto L_0x016b
            r3.add(r0)
        L_0x016b:
            java.lang.Object r2 = r1.get(r4)
            java.util.ArrayList r2 = (java.util.ArrayList) r2
            if (r2 != 0) goto L_0x017b
            java.util.ArrayList r2 = new java.util.ArrayList
            r2.<init>()
            r1.put(r4, r2)
        L_0x017b:
            r2.add(r0)
        L_0x017e:
            int r14 = r14 + 1
            r0 = r26
            r2 = 0
            goto L_0x0106
        L_0x0184:
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda77 r0 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda77
            r0.<init>(r6, r1)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r0)
            org.telegram.messenger.MessagesStorage r0 = r22.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r0 = r0.getStorageQueue()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda104 r1 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda104
            r1.<init>(r6, r3, r7)
            r0.postRunnable(r1)
        L_0x019c:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r0 = r7.other_updates
            boolean r0 = r0.isEmpty()
            if (r0 != 0) goto L_0x01b1
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r7.other_updates
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r7.users
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r3 = r7.chats
            r4 = 1
            r5 = 0
            r0 = r22
            r0.processUpdateArray(r1, r2, r3, r4, r5)
        L_0x01b1:
            r0 = 1
            r6.processChannelsUpdatesQueue(r8, r0)
            org.telegram.messenger.MessagesStorage r0 = r22.getMessagesStorage()
            int r1 = r7.pts
            r0.saveChannelPts(r8, r1)
        L_0x01be:
            androidx.collection.LongSparseArray<java.lang.Boolean> r0 = r6.gettingDifferenceChannels
            r0.delete(r8)
            org.telegram.messenger.support.LongSparseIntArray r0 = r6.channelsPts
            int r1 = r7.pts
            r0.put(r8, r1)
            int r0 = r7.flags
            r0 = r0 & 2
            if (r0 == 0) goto L_0x01e0
            org.telegram.messenger.support.LongSparseIntArray r0 = r6.shortPollChannels
            long r1 = java.lang.System.currentTimeMillis()
            r3 = 1000(0x3e8, double:4.94E-321)
            long r1 = r1 / r3
            int r2 = (int) r1
            int r1 = r7.timeout
            int r2 = r2 + r1
            r0.put(r8, r2)
        L_0x01e0:
            boolean r0 = r7.isFinal
            if (r0 != 0) goto L_0x01e7
            r6.getChannelDifference(r8)
        L_0x01e7:
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x025b
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "received channel difference with pts = "
            r0.append(r1)
            int r1 = r7.pts
            r0.append(r1)
            java.lang.String r1 = " channelId = "
            r0.append(r1)
            r0.append(r8)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "new_messages = "
            r0.append(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r7.new_messages
            int r1 = r1.size()
            r0.append(r1)
            java.lang.String r1 = " messages = "
            r0.append(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r7.messages
            int r1 = r1.size()
            r0.append(r1)
            java.lang.String r1 = " users = "
            r0.append(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r1 = r7.users
            int r1 = r1.size()
            r0.append(r1)
            java.lang.String r1 = " chats = "
            r0.append(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r1 = r7.chats
            int r1 = r1.size()
            r0.append(r1)
            java.lang.String r1 = " other updates = "
            r0.append(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r7.other_updates
            int r1 = r1.size()
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x025b:
            r0 = 0
            int r2 = (r10 > r0 ? 1 : (r10 == r0 ? 0 : -1))
            if (r2 == 0) goto L_0x0268
            org.telegram.messenger.MessagesStorage r0 = r22.getMessagesStorage()
            r0.removePendingTask(r10)
        L_0x0268:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$getChannelDifference$250(org.telegram.tgnet.TLRPC$updates_ChannelDifference, long, org.telegram.tgnet.TLRPC$Chat, androidx.collection.LongSparseArray, int, long):void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getChannelDifference$247(LongSparseArray longSparseArray) {
        for (int i = 0; i < longSparseArray.size(); i++) {
            updateInterfaceWithMessages(longSparseArray.keyAt(i), (ArrayList) longSparseArray.valueAt(i), false);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getChannelDifference$249(ArrayList arrayList, TLRPC$updates_ChannelDifference tLRPC$updates_ChannelDifference) {
        if (!arrayList.isEmpty()) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda88(this, arrayList));
        }
        getMessagesStorage().putMessages(tLRPC$updates_ChannelDifference.new_messages, true, false, false, getDownloadController().getAutodownloadMask(), false);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getChannelDifference$248(ArrayList arrayList) {
        getNotificationsController().processNewMessages(arrayList, true, false, (CountDownLatch) null);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getChannelDifference$252(TLRPC$TL_error tLRPC$TL_error, long j) {
        checkChannelError(tLRPC$TL_error.text, j);
    }

    private void checkChannelError(String str, long j) {
        str.hashCode();
        char c = 65535;
        switch (str.hashCode()) {
            case -1809401834:
                if (str.equals("USER_BANNED_IN_CHANNEL")) {
                    c = 0;
                    break;
                }
                break;
            case -795226617:
                if (str.equals("CHANNEL_PRIVATE")) {
                    c = 1;
                    break;
                }
                break;
            case -471086771:
                if (str.equals("CHANNEL_PUBLIC_GROUP_NA")) {
                    c = 2;
                    break;
                }
                break;
        }
        switch (c) {
            case 0:
                getNotificationCenter().postNotificationName(NotificationCenter.chatInfoCantLoad, Long.valueOf(j), 2);
                return;
            case 1:
                getNotificationCenter().postNotificationName(NotificationCenter.chatInfoCantLoad, Long.valueOf(j), 0);
                return;
            case 2:
                getNotificationCenter().postNotificationName(NotificationCenter.chatInfoCantLoad, Long.valueOf(j), 1);
                return;
            default:
                return;
        }
    }

    public void getDifference() {
        getDifference(getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue(), false);
    }

    public void getDifference(int i, int i2, int i3, boolean z) {
        registerForPush(SharedConfig.pushString);
        if (getMessagesStorage().getLastPtsValue() == 0) {
            loadCurrentState();
        } else if (z || !this.gettingDifference) {
            this.gettingDifference = true;
            TLRPC$TL_updates_getDifference tLRPC$TL_updates_getDifference = new TLRPC$TL_updates_getDifference();
            tLRPC$TL_updates_getDifference.pts = i;
            tLRPC$TL_updates_getDifference.date = i2;
            tLRPC$TL_updates_getDifference.qts = i3;
            if (this.getDifferenceFirstSync) {
                tLRPC$TL_updates_getDifference.flags |= 1;
                if (ApplicationLoader.isConnectedOrConnectingToWiFi()) {
                    tLRPC$TL_updates_getDifference.pts_total_limit = 5000;
                } else {
                    tLRPC$TL_updates_getDifference.pts_total_limit = 1000;
                }
                this.getDifferenceFirstSync = false;
            }
            if (tLRPC$TL_updates_getDifference.date == 0) {
                tLRPC$TL_updates_getDifference.date = getConnectionsManager().getCurrentTime();
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("start getDifference with date = " + i2 + " pts = " + i + " qts = " + i3);
            }
            getConnectionsManager().setIsUpdating(true);
            getConnectionsManager().sendRequest(tLRPC$TL_updates_getDifference, new MessagesController$$ExternalSyntheticLambda233(this, i2, i3));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getDifference$262(int i, int i2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        int i3 = 0;
        if (tLRPC$TL_error == null) {
            TLRPC$updates_Difference tLRPC$updates_Difference = (TLRPC$updates_Difference) tLObject;
            if (tLRPC$updates_Difference instanceof TLRPC$TL_updates_differenceTooLong) {
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda179(this, tLRPC$updates_Difference, i, i2));
                return;
            }
            if (tLRPC$updates_Difference instanceof TLRPC$TL_updates_differenceSlice) {
                TLRPC$TL_updates_state tLRPC$TL_updates_state = tLRPC$updates_Difference.intermediate_state;
                getDifference(tLRPC$TL_updates_state.pts, tLRPC$TL_updates_state.date, tLRPC$TL_updates_state.qts, true);
            }
            LongSparseArray longSparseArray = new LongSparseArray();
            LongSparseArray longSparseArray2 = new LongSparseArray();
            for (int i4 = 0; i4 < tLRPC$updates_Difference.users.size(); i4++) {
                TLRPC$User tLRPC$User = tLRPC$updates_Difference.users.get(i4);
                longSparseArray.put(tLRPC$User.id, tLRPC$User);
            }
            for (int i5 = 0; i5 < tLRPC$updates_Difference.chats.size(); i5++) {
                TLRPC$Chat tLRPC$Chat = tLRPC$updates_Difference.chats.get(i5);
                longSparseArray2.put(tLRPC$Chat.id, tLRPC$Chat);
            }
            ArrayList arrayList = new ArrayList();
            if (!tLRPC$updates_Difference.other_updates.isEmpty()) {
                while (i3 < tLRPC$updates_Difference.other_updates.size()) {
                    TLRPC$Update tLRPC$Update = tLRPC$updates_Difference.other_updates.get(i3);
                    if (tLRPC$Update instanceof TLRPC$TL_updateMessageID) {
                        arrayList.add((TLRPC$TL_updateMessageID) tLRPC$Update);
                        tLRPC$updates_Difference.other_updates.remove(i3);
                    } else {
                        if (getUpdateType(tLRPC$Update) == 2) {
                            long updateChannelId = getUpdateChannelId(tLRPC$Update);
                            int i6 = this.channelsPts.get(updateChannelId);
                            if (i6 == 0 && (i6 = getMessagesStorage().getChannelPtsSync(updateChannelId)) != 0) {
                                this.channelsPts.put(updateChannelId, i6);
                            }
                            if (i6 != 0 && getUpdatePts(tLRPC$Update) <= i6) {
                                tLRPC$updates_Difference.other_updates.remove(i3);
                            }
                        }
                        i3++;
                    }
                    i3--;
                    i3++;
                }
            }
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda178(this, tLRPC$updates_Difference));
            getMessagesStorage().getStorageQueue().postRunnable(new MessagesController$$ExternalSyntheticLambda181(this, tLRPC$updates_Difference, arrayList, longSparseArray, longSparseArray2));
            return;
        }
        this.gettingDifference = false;
        getConnectionsManager().setIsUpdating(false);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getDifference$254(TLRPC$updates_Difference tLRPC$updates_Difference, int i, int i2) {
        this.loadedFullUsers.clear();
        this.loadedFullChats.clear();
        resetDialogs(true, getMessagesStorage().getLastSeqValue(), tLRPC$updates_Difference.pts, i, i2);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getDifference$255(TLRPC$updates_Difference tLRPC$updates_Difference) {
        this.loadedFullUsers.clear();
        this.loadedFullChats.clear();
        putUsers(tLRPC$updates_Difference.users, false);
        putChats(tLRPC$updates_Difference.chats, false);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getDifference$261(TLRPC$updates_Difference tLRPC$updates_Difference, ArrayList arrayList, LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        TLRPC$updates_Difference tLRPC$updates_Difference2 = tLRPC$updates_Difference;
        getMessagesStorage().putUsersAndChats(tLRPC$updates_Difference2.users, tLRPC$updates_Difference2.chats, true, false);
        if (!arrayList.isEmpty()) {
            SparseArray sparseArray = new SparseArray();
            for (int i = 0; i < arrayList.size(); i++) {
                TLRPC$TL_updateMessageID tLRPC$TL_updateMessageID = (TLRPC$TL_updateMessageID) arrayList.get(i);
                long[] updateMessageStateAndId = getMessagesStorage().updateMessageStateAndId(tLRPC$TL_updateMessageID.random_id, 0, (Integer) null, tLRPC$TL_updateMessageID.id, 0, false, -1);
                if (updateMessageStateAndId != null) {
                    sparseArray.put(tLRPC$TL_updateMessageID.id, updateMessageStateAndId);
                }
            }
            if (sparseArray.size() != 0) {
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda74(this, sparseArray));
            }
        }
        Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda180(this, tLRPC$updates_Difference2, longSparseArray, longSparseArray2));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getDifference$256(SparseArray sparseArray) {
        for (int i = 0; i < sparseArray.size(); i++) {
            int keyAt = sparseArray.keyAt(i);
            long[] jArr = (long[]) sparseArray.valueAt(i);
            getSendMessagesHelper().processSentMessage((int) jArr[1]);
            getNotificationCenter().postNotificationName(NotificationCenter.messageReceivedByServer, Integer.valueOf((int) jArr[1]), Integer.valueOf(keyAt), null, Long.valueOf(jArr[0]), 0L, -1, Boolean.FALSE);
        }
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Code restructure failed: missing block: B:52:0x0121, code lost:
        if (r10.messageOwner.from_scheduled != false) goto L_0x0126;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$getDifference$260(org.telegram.tgnet.TLRPC$updates_Difference r19, androidx.collection.LongSparseArray r20, androidx.collection.LongSparseArray r21) {
        /*
            r18 = this;
            r6 = r18
            r7 = r19
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r0 = r7.new_messages
            boolean r0 = r0.isEmpty()
            r8 = 1
            r9 = 0
            if (r0 == 0) goto L_0x0016
            java.util.ArrayList<org.telegram.tgnet.TLRPC$EncryptedMessage> r0 = r7.new_encrypted_messages
            boolean r0 = r0.isEmpty()
            if (r0 != 0) goto L_0x0169
        L_0x0016:
            androidx.collection.LongSparseArray r0 = new androidx.collection.LongSparseArray
            r0.<init>()
            r1 = 0
        L_0x001c:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$EncryptedMessage> r2 = r7.new_encrypted_messages
            int r2 = r2.size()
            if (r1 >= r2) goto L_0x0044
            java.util.ArrayList<org.telegram.tgnet.TLRPC$EncryptedMessage> r2 = r7.new_encrypted_messages
            java.lang.Object r2 = r2.get(r1)
            org.telegram.tgnet.TLRPC$EncryptedMessage r2 = (org.telegram.tgnet.TLRPC$EncryptedMessage) r2
            org.telegram.messenger.SecretChatHelper r3 = r18.getSecretChatHelper()
            java.util.ArrayList r2 = r3.decryptMessage(r2)
            if (r2 == 0) goto L_0x0041
            boolean r3 = r2.isEmpty()
            if (r3 != 0) goto L_0x0041
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r3 = r7.new_messages
            r3.addAll(r2)
        L_0x0041:
            int r1 = r1 + 1
            goto L_0x001c
        L_0x0044:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r7.new_messages
            org.telegram.messenger.ImageLoader.saveMessagesThumbs(r1)
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            org.telegram.messenger.UserConfig r2 = r18.getUserConfig()
            long r2 = r2.getClientUserId()
            r4 = 0
        L_0x0057:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r5 = r7.new_messages
            int r5 = r5.size()
            if (r4 >= r5) goto L_0x014a
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r5 = r7.new_messages
            java.lang.Object r5 = r5.get(r4)
            org.telegram.tgnet.TLRPC$Message r5 = (org.telegram.tgnet.TLRPC$Message) r5
            boolean r10 = r5 instanceof org.telegram.tgnet.TLRPC$TL_messageEmpty
            if (r10 == 0) goto L_0x006d
            goto L_0x0146
        L_0x006d:
            org.telegram.messenger.MessageObject.getDialogId(r5)
            long r10 = r5.dialog_id
            boolean r10 = org.telegram.messenger.DialogObject.isEncryptedDialog(r10)
            if (r10 != 0) goto L_0x00ec
            org.telegram.tgnet.TLRPC$MessageAction r10 = r5.action
            boolean r11 = r10 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatDeleteUser
            if (r11 == 0) goto L_0x009c
            long r10 = r10.user_id
            r15 = r20
            java.lang.Object r10 = r15.get(r10)
            org.telegram.tgnet.TLRPC$User r10 = (org.telegram.tgnet.TLRPC$User) r10
            if (r10 == 0) goto L_0x009e
            boolean r10 = r10.bot
            if (r10 == 0) goto L_0x009e
            org.telegram.tgnet.TLRPC$TL_replyKeyboardHide r10 = new org.telegram.tgnet.TLRPC$TL_replyKeyboardHide
            r10.<init>()
            r5.reply_markup = r10
            int r10 = r5.flags
            r10 = r10 | 64
            r5.flags = r10
            goto L_0x009e
        L_0x009c:
            r15 = r20
        L_0x009e:
            org.telegram.tgnet.TLRPC$MessageAction r10 = r5.action
            boolean r11 = r10 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatMigrateTo
            if (r11 != 0) goto L_0x00e7
            boolean r10 = r10 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChannelCreate
            if (r10 == 0) goto L_0x00a9
            goto L_0x00e7
        L_0x00a9:
            boolean r10 = r5.out
            if (r10 == 0) goto L_0x00b0
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r10 = r6.dialogs_read_outbox_max
            goto L_0x00b2
        L_0x00b0:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r10 = r6.dialogs_read_inbox_max
        L_0x00b2:
            long r11 = r5.dialog_id
            java.lang.Long r11 = java.lang.Long.valueOf(r11)
            java.lang.Object r11 = r10.get(r11)
            java.lang.Integer r11 = (java.lang.Integer) r11
            if (r11 != 0) goto L_0x00d9
            org.telegram.messenger.MessagesStorage r11 = r18.getMessagesStorage()
            boolean r12 = r5.out
            long r13 = r5.dialog_id
            int r11 = r11.getDialogReadMax(r12, r13)
            java.lang.Integer r11 = java.lang.Integer.valueOf(r11)
            long r12 = r5.dialog_id
            java.lang.Long r12 = java.lang.Long.valueOf(r12)
            r10.put(r12, r11)
        L_0x00d9:
            int r10 = r11.intValue()
            int r11 = r5.id
            if (r10 >= r11) goto L_0x00e3
            r10 = 1
            goto L_0x00e4
        L_0x00e3:
            r10 = 0
        L_0x00e4:
            r5.unread = r10
            goto L_0x00ee
        L_0x00e7:
            r5.unread = r9
            r5.media_unread = r9
            goto L_0x00ee
        L_0x00ec:
            r15 = r20
        L_0x00ee:
            long r10 = r5.dialog_id
            int r12 = (r10 > r2 ? 1 : (r10 == r2 ? 0 : -1))
            if (r12 != 0) goto L_0x00fa
            r5.unread = r9
            r5.media_unread = r9
            r5.out = r8
        L_0x00fa:
            java.util.ArrayList<java.lang.Long> r12 = r6.createdDialogIds
            java.lang.Long r10 = java.lang.Long.valueOf(r10)
            boolean r16 = r12.contains(r10)
            org.telegram.messenger.MessageObject r14 = new org.telegram.messenger.MessageObject
            int r11 = r6.currentAccount
            r10 = r14
            r12 = r5
            r13 = r20
            r17 = r14
            r14 = r21
            r15 = r16
            r10.<init>((int) r11, (org.telegram.tgnet.TLRPC$Message) r12, (androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$User>) r13, (androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Chat>) r14, (boolean) r15, (boolean) r16)
            boolean r10 = r17.isOut()
            if (r10 == 0) goto L_0x0124
            r10 = r17
            org.telegram.tgnet.TLRPC$Message r11 = r10.messageOwner
            boolean r11 = r11.from_scheduled
            if (r11 == 0) goto L_0x012f
            goto L_0x0126
        L_0x0124:
            r10 = r17
        L_0x0126:
            boolean r11 = r10.isUnread()
            if (r11 == 0) goto L_0x012f
            r1.add(r10)
        L_0x012f:
            long r11 = r5.dialog_id
            java.lang.Object r11 = r0.get(r11)
            java.util.ArrayList r11 = (java.util.ArrayList) r11
            if (r11 != 0) goto L_0x0143
            java.util.ArrayList r11 = new java.util.ArrayList
            r11.<init>()
            long r12 = r5.dialog_id
            r0.put(r12, r11)
        L_0x0143:
            r11.add(r10)
        L_0x0146:
            int r4 = r4 + 1
            goto L_0x0057
        L_0x014a:
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda78 r2 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda78
            r2.<init>(r6, r0)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r2)
            org.telegram.messenger.MessagesStorage r0 = r18.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r0 = r0.getStorageQueue()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda106 r2 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda106
            r2.<init>(r6, r1, r7)
            r0.postRunnable(r2)
            org.telegram.messenger.SecretChatHelper r0 = r18.getSecretChatHelper()
            r0.processPendingEncMessages()
        L_0x0169:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r0 = r7.other_updates
            boolean r0 = r0.isEmpty()
            if (r0 != 0) goto L_0x017e
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r7.other_updates
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r7.users
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r3 = r7.chats
            r4 = 1
            r5 = 0
            r0 = r18
            r0.processUpdateArray(r1, r2, r3, r4, r5)
        L_0x017e:
            boolean r0 = r7 instanceof org.telegram.tgnet.TLRPC$TL_updates_difference
            r1 = 3
            if (r0 == 0) goto L_0x01c0
            r6.gettingDifference = r9
            org.telegram.messenger.MessagesStorage r0 = r18.getMessagesStorage()
            org.telegram.tgnet.TLRPC$TL_updates_state r2 = r7.state
            int r2 = r2.seq
            r0.setLastSeqValue(r2)
            org.telegram.messenger.MessagesStorage r0 = r18.getMessagesStorage()
            org.telegram.tgnet.TLRPC$TL_updates_state r2 = r7.state
            int r2 = r2.date
            r0.setLastDateValue(r2)
            org.telegram.messenger.MessagesStorage r0 = r18.getMessagesStorage()
            org.telegram.tgnet.TLRPC$TL_updates_state r2 = r7.state
            int r2 = r2.pts
            r0.setLastPtsValue(r2)
            org.telegram.messenger.MessagesStorage r0 = r18.getMessagesStorage()
            org.telegram.tgnet.TLRPC$TL_updates_state r2 = r7.state
            int r2 = r2.qts
            r0.setLastQtsValue(r2)
            org.telegram.tgnet.ConnectionsManager r0 = r18.getConnectionsManager()
            r0.setIsUpdating(r9)
        L_0x01b8:
            if (r9 >= r1) goto L_0x020d
            r6.processUpdatesQueue(r9, r8)
            int r9 = r9 + 1
            goto L_0x01b8
        L_0x01c0:
            boolean r0 = r7 instanceof org.telegram.tgnet.TLRPC$TL_updates_differenceSlice
            if (r0 == 0) goto L_0x01e6
            org.telegram.messenger.MessagesStorage r0 = r18.getMessagesStorage()
            org.telegram.tgnet.TLRPC$TL_updates_state r1 = r7.intermediate_state
            int r1 = r1.date
            r0.setLastDateValue(r1)
            org.telegram.messenger.MessagesStorage r0 = r18.getMessagesStorage()
            org.telegram.tgnet.TLRPC$TL_updates_state r1 = r7.intermediate_state
            int r1 = r1.pts
            r0.setLastPtsValue(r1)
            org.telegram.messenger.MessagesStorage r0 = r18.getMessagesStorage()
            org.telegram.tgnet.TLRPC$TL_updates_state r1 = r7.intermediate_state
            int r1 = r1.qts
            r0.setLastQtsValue(r1)
            goto L_0x020d
        L_0x01e6:
            boolean r0 = r7 instanceof org.telegram.tgnet.TLRPC$TL_updates_differenceEmpty
            if (r0 == 0) goto L_0x020d
            r6.gettingDifference = r9
            org.telegram.messenger.MessagesStorage r0 = r18.getMessagesStorage()
            int r2 = r7.seq
            r0.setLastSeqValue(r2)
            org.telegram.messenger.MessagesStorage r0 = r18.getMessagesStorage()
            int r2 = r7.date
            r0.setLastDateValue(r2)
            org.telegram.tgnet.ConnectionsManager r0 = r18.getConnectionsManager()
            r0.setIsUpdating(r9)
        L_0x0205:
            if (r9 >= r1) goto L_0x020d
            r6.processUpdatesQueue(r9, r8)
            int r9 = r9 + 1
            goto L_0x0205
        L_0x020d:
            org.telegram.messenger.MessagesStorage r0 = r18.getMessagesStorage()
            org.telegram.messenger.MessagesStorage r1 = r18.getMessagesStorage()
            int r1 = r1.getLastSeqValue()
            org.telegram.messenger.MessagesStorage r2 = r18.getMessagesStorage()
            int r2 = r2.getLastPtsValue()
            org.telegram.messenger.MessagesStorage r3 = r18.getMessagesStorage()
            int r3 = r3.getLastDateValue()
            org.telegram.messenger.MessagesStorage r4 = r18.getMessagesStorage()
            int r4 = r4.getLastQtsValue()
            r0.saveDiffParams(r1, r2, r3, r4)
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x02ac
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "received difference with date = "
            r0.append(r1)
            org.telegram.messenger.MessagesStorage r1 = r18.getMessagesStorage()
            int r1 = r1.getLastDateValue()
            r0.append(r1)
            java.lang.String r1 = " pts = "
            r0.append(r1)
            org.telegram.messenger.MessagesStorage r1 = r18.getMessagesStorage()
            int r1 = r1.getLastPtsValue()
            r0.append(r1)
            java.lang.String r1 = " seq = "
            r0.append(r1)
            org.telegram.messenger.MessagesStorage r1 = r18.getMessagesStorage()
            int r1 = r1.getLastSeqValue()
            r0.append(r1)
            java.lang.String r1 = " messages = "
            r0.append(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r7.new_messages
            int r1 = r1.size()
            r0.append(r1)
            java.lang.String r1 = " users = "
            r0.append(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r1 = r7.users
            int r1 = r1.size()
            r0.append(r1)
            java.lang.String r1 = " chats = "
            r0.append(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r1 = r7.chats
            int r1 = r1.size()
            r0.append(r1)
            java.lang.String r1 = " other updates = "
            r0.append(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r7.other_updates
            int r1 = r1.size()
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x02ac:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$getDifference$260(org.telegram.tgnet.TLRPC$updates_Difference, androidx.collection.LongSparseArray, androidx.collection.LongSparseArray):void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getDifference$257(LongSparseArray longSparseArray) {
        for (int i = 0; i < longSparseArray.size(); i++) {
            updateInterfaceWithMessages(longSparseArray.keyAt(i), (ArrayList) longSparseArray.valueAt(i), false);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getDifference$259(ArrayList arrayList, TLRPC$updates_Difference tLRPC$updates_Difference) {
        if (!arrayList.isEmpty()) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda105(this, arrayList, tLRPC$updates_Difference));
        }
        getMessagesStorage().putMessages(tLRPC$updates_Difference.new_messages, true, false, false, getDownloadController().getAutodownloadMask(), false);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getDifference$258(ArrayList arrayList, TLRPC$updates_Difference tLRPC$updates_Difference) {
        getNotificationsController().processNewMessages(arrayList, !(tLRPC$updates_Difference instanceof TLRPC$TL_updates_differenceSlice), false, (CountDownLatch) null);
    }

    public void markDialogAsUnread(long j, TLRPC$InputPeer tLRPC$InputPeer, long j2) {
        NativeByteBuffer nativeByteBuffer;
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
        NativeByteBuffer nativeByteBuffer2 = null;
        if (tLRPC$Dialog != null) {
            tLRPC$Dialog.unread_mark = true;
            if (tLRPC$Dialog.unread_count == 0 && !isDialogMuted(j)) {
                this.unreadUnmutedDialogs++;
            }
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_READ_DIALOG_MESSAGE));
            getMessagesStorage().setDialogUnread(j, true);
            int i = 0;
            while (true) {
                DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                if (i < dialogFilterArr.length) {
                    if (dialogFilterArr[i] != null && (dialogFilterArr[i].flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                        sortDialogs((LongSparseArray<TLRPC$Chat>) null);
                        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                        break;
                    }
                    i++;
                } else {
                    break;
                }
            }
        }
        if (!DialogObject.isEncryptedDialog(j)) {
            TLRPC$TL_messages_markDialogUnread tLRPC$TL_messages_markDialogUnread = new TLRPC$TL_messages_markDialogUnread();
            tLRPC$TL_messages_markDialogUnread.unread = true;
            if (tLRPC$InputPeer == null) {
                tLRPC$InputPeer = getInputPeer(j);
            }
            if (!(tLRPC$InputPeer instanceof TLRPC$TL_inputPeerEmpty)) {
                TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
                tLRPC$TL_inputDialogPeer.peer = tLRPC$InputPeer;
                tLRPC$TL_messages_markDialogUnread.peer = tLRPC$TL_inputDialogPeer;
                if (j2 == 0) {
                    try {
                        nativeByteBuffer = new NativeByteBuffer(tLRPC$InputPeer.getObjectSize() + 12);
                        try {
                            nativeByteBuffer.writeInt32(9);
                            nativeByteBuffer.writeInt64(j);
                            tLRPC$InputPeer.serializeToStream(nativeByteBuffer);
                        } catch (Exception e) {
                            e = e;
                            nativeByteBuffer2 = nativeByteBuffer;
                        }
                    } catch (Exception e2) {
                        e = e2;
                        FileLog.e((Throwable) e);
                        nativeByteBuffer = nativeByteBuffer2;
                        j2 = getMessagesStorage().createPendingTask(nativeByteBuffer);
                        getConnectionsManager().sendRequest(tLRPC$TL_messages_markDialogUnread, new MessagesController$$ExternalSyntheticLambda252(this, j2));
                    }
                    j2 = getMessagesStorage().createPendingTask(nativeByteBuffer);
                }
                getConnectionsManager().sendRequest(tLRPC$TL_messages_markDialogUnread, new MessagesController$$ExternalSyntheticLambda252(this, j2));
            }
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$markDialogAsUnread$263(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public void loadUnreadDialogs() {
        if (!this.loadingUnreadDialogs && !getUserConfig().unreadDialogsLoaded) {
            this.loadingUnreadDialogs = true;
            getConnectionsManager().sendRequest(new TLRPC$TL_messages_getDialogUnreadMarks(), new MessagesController$$ExternalSyntheticLambda229(this));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadUnreadDialogs$265(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda117(this, tLObject));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadUnreadDialogs$264(TLObject tLObject) {
        if (tLObject != null) {
            TLRPC$Vector tLRPC$Vector = (TLRPC$Vector) tLObject;
            int size = tLRPC$Vector.objects.size();
            for (int i = 0; i < size; i++) {
                TLRPC$DialogPeer tLRPC$DialogPeer = (TLRPC$DialogPeer) tLRPC$Vector.objects.get(i);
                if (tLRPC$DialogPeer instanceof TLRPC$TL_dialogPeer) {
                    TLRPC$Peer tLRPC$Peer = ((TLRPC$TL_dialogPeer) tLRPC$DialogPeer).peer;
                    long j = tLRPC$Peer.user_id;
                    if (j == 0) {
                        long j2 = tLRPC$Peer.chat_id;
                        if (j2 != 0) {
                            j = -j2;
                        } else {
                            j = -tLRPC$Peer.channel_id;
                        }
                    }
                    getMessagesStorage().setDialogUnread(j, true);
                    TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
                    if (tLRPC$Dialog != null && !tLRPC$Dialog.unread_mark) {
                        tLRPC$Dialog.unread_mark = true;
                        if (tLRPC$Dialog.unread_count == 0 && !isDialogMuted(j)) {
                            this.unreadUnmutedDialogs++;
                        }
                    }
                }
            }
            getUserConfig().unreadDialogsLoaded = true;
            getUserConfig().saveConfig(false);
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_READ_DIALOG_MESSAGE));
            this.loadingUnreadDialogs = false;
        }
    }

    public void reorderPinnedDialogs(int i, ArrayList<TLRPC$InputDialogPeer> arrayList, long j) {
        NativeByteBuffer nativeByteBuffer;
        TLRPC$TL_messages_reorderPinnedDialogs tLRPC$TL_messages_reorderPinnedDialogs = new TLRPC$TL_messages_reorderPinnedDialogs();
        tLRPC$TL_messages_reorderPinnedDialogs.folder_id = i;
        tLRPC$TL_messages_reorderPinnedDialogs.force = true;
        if (j == 0) {
            ArrayList<TLRPC$Dialog> dialogs = getDialogs(i);
            if (!dialogs.isEmpty()) {
                ArrayList arrayList2 = new ArrayList();
                ArrayList arrayList3 = new ArrayList();
                int size = dialogs.size();
                int i2 = 0;
                for (int i3 = 0; i3 < size; i3++) {
                    TLRPC$Dialog tLRPC$Dialog = dialogs.get(i3);
                    if (!(tLRPC$Dialog instanceof TLRPC$TL_dialogFolder)) {
                        if (tLRPC$Dialog.pinned) {
                            arrayList2.add(Long.valueOf(tLRPC$Dialog.id));
                            arrayList3.add(Integer.valueOf(tLRPC$Dialog.pinnedNum));
                            if (!DialogObject.isEncryptedDialog(tLRPC$Dialog.id)) {
                                TLRPC$InputPeer inputPeer = getInputPeer(tLRPC$Dialog.id);
                                TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
                                tLRPC$TL_inputDialogPeer.peer = inputPeer;
                                tLRPC$TL_messages_reorderPinnedDialogs.order.add(tLRPC$TL_inputDialogPeer);
                                i2 += tLRPC$TL_inputDialogPeer.getObjectSize();
                            }
                        } else if (tLRPC$Dialog.id != this.promoDialogId) {
                            break;
                        }
                    }
                }
                getMessagesStorage().setDialogsPinned(arrayList2, arrayList3);
                NativeByteBuffer nativeByteBuffer2 = null;
                try {
                    nativeByteBuffer = new NativeByteBuffer(i2 + 12);
                    try {
                        nativeByteBuffer.writeInt32(16);
                        nativeByteBuffer.writeInt32(i);
                        nativeByteBuffer.writeInt32(tLRPC$TL_messages_reorderPinnedDialogs.order.size());
                        int size2 = tLRPC$TL_messages_reorderPinnedDialogs.order.size();
                        for (int i4 = 0; i4 < size2; i4++) {
                            tLRPC$TL_messages_reorderPinnedDialogs.order.get(i4).serializeToStream(nativeByteBuffer);
                        }
                    } catch (Exception e) {
                        e = e;
                        nativeByteBuffer2 = nativeByteBuffer;
                        FileLog.e((Throwable) e);
                        nativeByteBuffer = nativeByteBuffer2;
                        j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                        getConnectionsManager().sendRequest(tLRPC$TL_messages_reorderPinnedDialogs, new MessagesController$$ExternalSyntheticLambda244(this, j));
                    }
                } catch (Exception e2) {
                    e = e2;
                    FileLog.e((Throwable) e);
                    nativeByteBuffer = nativeByteBuffer2;
                    j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                    getConnectionsManager().sendRequest(tLRPC$TL_messages_reorderPinnedDialogs, new MessagesController$$ExternalSyntheticLambda244(this, j));
                }
                j = getMessagesStorage().createPendingTask(nativeByteBuffer);
            } else {
                return;
            }
        } else {
            tLRPC$TL_messages_reorderPinnedDialogs.order = arrayList;
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_reorderPinnedDialogs, new MessagesController$$ExternalSyntheticLambda244(this, j));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$reorderPinnedDialogs$266(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public boolean pinDialog(long j, boolean z, TLRPC$InputPeer tLRPC$InputPeer, long j2) {
        long j3;
        NativeByteBuffer nativeByteBuffer;
        long j4 = j;
        boolean z2 = z;
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j4);
        if (tLRPC$Dialog != null && tLRPC$Dialog.pinned != z2) {
            int i = tLRPC$Dialog.folder_id;
            ArrayList<TLRPC$Dialog> dialogs = getDialogs(i);
            tLRPC$Dialog.pinned = z2;
            if (z2) {
                int i2 = 0;
                for (int i3 = 0; i3 < dialogs.size(); i3++) {
                    TLRPC$Dialog tLRPC$Dialog2 = dialogs.get(i3);
                    if (!(tLRPC$Dialog2 instanceof TLRPC$TL_dialogFolder)) {
                        if (tLRPC$Dialog2.pinned) {
                            i2 = Math.max(tLRPC$Dialog2.pinnedNum, i2);
                        } else if (tLRPC$Dialog2.id != this.promoDialogId) {
                            break;
                        }
                    }
                }
                tLRPC$Dialog.pinnedNum = i2 + 1;
            } else {
                tLRPC$Dialog.pinnedNum = 0;
            }
            NativeByteBuffer nativeByteBuffer2 = null;
            sortDialogs((LongSparseArray<TLRPC$Chat>) null);
            if (!z2 && !dialogs.isEmpty() && dialogs.get(dialogs.size() - 1) == tLRPC$Dialog && !this.dialogsEndReached.get(i)) {
                dialogs.remove(dialogs.size() - 1);
            }
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
            if (!DialogObject.isEncryptedDialog(j) && j2 != -1) {
                TLRPC$TL_messages_toggleDialogPin tLRPC$TL_messages_toggleDialogPin = new TLRPC$TL_messages_toggleDialogPin();
                tLRPC$TL_messages_toggleDialogPin.pinned = z2;
                TLRPC$InputPeer inputPeer = tLRPC$InputPeer == null ? getInputPeer(j) : tLRPC$InputPeer;
                if (inputPeer instanceof TLRPC$TL_inputPeerEmpty) {
                    return false;
                }
                TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
                tLRPC$TL_inputDialogPeer.peer = inputPeer;
                tLRPC$TL_messages_toggleDialogPin.peer = tLRPC$TL_inputDialogPeer;
                if (j2 == 0) {
                    try {
                        nativeByteBuffer = new NativeByteBuffer(inputPeer.getObjectSize() + 16);
                        try {
                            nativeByteBuffer.writeInt32(4);
                            nativeByteBuffer.writeInt64(j4);
                            nativeByteBuffer.writeBool(z2);
                            inputPeer.serializeToStream(nativeByteBuffer);
                        } catch (Exception e) {
                            e = e;
                            nativeByteBuffer2 = nativeByteBuffer;
                        }
                    } catch (Exception e2) {
                        e = e2;
                        FileLog.e((Throwable) e);
                        nativeByteBuffer = nativeByteBuffer2;
                        j3 = getMessagesStorage().createPendingTask(nativeByteBuffer);
                        getConnectionsManager().sendRequest(tLRPC$TL_messages_toggleDialogPin, new MessagesController$$ExternalSyntheticLambda253(this, j3));
                        getMessagesStorage().setDialogPinned(j4, tLRPC$Dialog.pinnedNum);
                        return true;
                    }
                    j3 = getMessagesStorage().createPendingTask(nativeByteBuffer);
                } else {
                    j3 = j2;
                }
                getConnectionsManager().sendRequest(tLRPC$TL_messages_toggleDialogPin, new MessagesController$$ExternalSyntheticLambda253(this, j3));
            }
            getMessagesStorage().setDialogPinned(j4, tLRPC$Dialog.pinnedNum);
            return true;
        } else if (tLRPC$Dialog != null) {
            return true;
        } else {
            return false;
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$pinDialog$267(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public void loadPinnedDialogs(int i, long j, ArrayList<Long> arrayList) {
        if (this.loadingPinnedDialogs.indexOfKey(i) < 0 && !getUserConfig().isPinnedDialogsLoaded(i)) {
            this.loadingPinnedDialogs.put(i, 1);
            TLRPC$TL_messages_getPinnedDialogs tLRPC$TL_messages_getPinnedDialogs = new TLRPC$TL_messages_getPinnedDialogs();
            tLRPC$TL_messages_getPinnedDialogs.folder_id = i;
            getConnectionsManager().sendRequest(tLRPC$TL_messages_getPinnedDialogs, new MessagesController$$ExternalSyntheticLambda231(this, i));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPinnedDialogs$270(int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        MessageObject messageObject;
        TLRPC$Chat tLRPC$Chat;
        TLRPC$Chat tLRPC$Chat2;
        if (tLObject != null) {
            TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject;
            ArrayList arrayList = new ArrayList(tLRPC$TL_messages_peerDialogs.dialogs);
            fetchFolderInLoadedPinnedDialogs(tLRPC$TL_messages_peerDialogs);
            TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
            tLRPC$TL_messages_dialogs.users.addAll(tLRPC$TL_messages_peerDialogs.users);
            tLRPC$TL_messages_dialogs.chats.addAll(tLRPC$TL_messages_peerDialogs.chats);
            tLRPC$TL_messages_dialogs.dialogs.addAll(tLRPC$TL_messages_peerDialogs.dialogs);
            tLRPC$TL_messages_dialogs.messages.addAll(tLRPC$TL_messages_peerDialogs.messages);
            LongSparseArray longSparseArray = new LongSparseArray();
            LongSparseArray longSparseArray2 = new LongSparseArray();
            LongSparseArray longSparseArray3 = new LongSparseArray();
            for (int i2 = 0; i2 < tLRPC$TL_messages_peerDialogs.users.size(); i2++) {
                TLRPC$User tLRPC$User = tLRPC$TL_messages_peerDialogs.users.get(i2);
                longSparseArray2.put(tLRPC$User.id, tLRPC$User);
            }
            for (int i3 = 0; i3 < tLRPC$TL_messages_peerDialogs.chats.size(); i3++) {
                TLRPC$Chat tLRPC$Chat3 = tLRPC$TL_messages_peerDialogs.chats.get(i3);
                longSparseArray3.put(tLRPC$Chat3.id, tLRPC$Chat3);
            }
            for (int i4 = 0; i4 < tLRPC$TL_messages_peerDialogs.messages.size(); i4++) {
                TLRPC$Message tLRPC$Message = tLRPC$TL_messages_peerDialogs.messages.get(i4);
                TLRPC$Peer tLRPC$Peer = tLRPC$Message.peer_id;
                long j = tLRPC$Peer.channel_id;
                if (j != 0) {
                    TLRPC$Chat tLRPC$Chat4 = (TLRPC$Chat) longSparseArray3.get(j);
                    if (tLRPC$Chat4 != null && tLRPC$Chat4.left) {
                    }
                } else {
                    long j2 = tLRPC$Peer.chat_id;
                    if (!(j2 == 0 || (tLRPC$Chat2 = (TLRPC$Chat) longSparseArray3.get(j2)) == null || tLRPC$Chat2.migrated_to == null)) {
                    }
                }
                MessageObject messageObject2 = r9;
                MessageObject messageObject3 = new MessageObject(this.currentAccount, tLRPC$Message, (LongSparseArray<TLRPC$User>) longSparseArray2, (LongSparseArray<TLRPC$Chat>) longSparseArray3, false, true);
                longSparseArray.put(messageObject2.getDialogId(), messageObject2);
            }
            boolean z = !arrayList.isEmpty() && (arrayList.get(0) instanceof TLRPC$TL_dialogFolder);
            int size = arrayList.size();
            for (int i5 = 0; i5 < size; i5++) {
                TLRPC$Dialog tLRPC$Dialog = (TLRPC$Dialog) arrayList.get(i5);
                tLRPC$Dialog.pinned = true;
                DialogObject.initDialog(tLRPC$Dialog);
                if (DialogObject.isChannel(tLRPC$Dialog)) {
                    TLRPC$Chat tLRPC$Chat5 = (TLRPC$Chat) longSparseArray3.get(-tLRPC$Dialog.id);
                    if (tLRPC$Chat5 != null && tLRPC$Chat5.left) {
                    }
                } else if (!(!DialogObject.isChatDialog(tLRPC$Dialog.id) || (tLRPC$Chat = (TLRPC$Chat) longSparseArray3.get(-tLRPC$Dialog.id)) == null || tLRPC$Chat.migrated_to == null)) {
                }
                if (tLRPC$Dialog.last_message_date == 0 && (messageObject = (MessageObject) longSparseArray.get(tLRPC$Dialog.id)) != null) {
                    tLRPC$Dialog.last_message_date = messageObject.messageOwner.date;
                }
                Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                if (num == null) {
                    num = 0;
                }
                this.dialogs_read_inbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num.intValue(), tLRPC$Dialog.read_inbox_max_id)));
                Integer num2 = this.dialogs_read_outbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                if (num2 == null) {
                    num2 = 0;
                }
                this.dialogs_read_outbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num2.intValue(), tLRPC$Dialog.read_outbox_max_id)));
            }
            getMessagesStorage().getStorageQueue().postRunnable(new MessagesController$$ExternalSyntheticLambda41(this, i, arrayList, z, tLRPC$TL_messages_peerDialogs, longSparseArray, tLRPC$TL_messages_dialogs));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPinnedDialogs$269(int i, ArrayList arrayList, boolean z, TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs, LongSparseArray longSparseArray, TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda40(this, i, arrayList, z, tLRPC$TL_messages_peerDialogs, longSparseArray, tLRPC$TL_messages_dialogs));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPinnedDialogs$268(int i, ArrayList arrayList, boolean z, TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs, LongSparseArray longSparseArray, TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs) {
        boolean z2;
        boolean z3;
        ArrayList arrayList2;
        int i2 = i;
        ArrayList arrayList3 = arrayList;
        TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs2 = tLRPC$TL_messages_peerDialogs;
        this.loadingPinnedDialogs.delete(i2);
        applyDialogsNotificationsSettings(arrayList3);
        ArrayList<TLRPC$Dialog> dialogs = getDialogs(i);
        int i3 = z;
        int i4 = 0;
        boolean z4 = false;
        for (int i5 = 0; i5 < dialogs.size(); i5++) {
            TLRPC$Dialog tLRPC$Dialog = dialogs.get(i5);
            if (!(tLRPC$Dialog instanceof TLRPC$TL_dialogFolder)) {
                if (DialogObject.isEncryptedDialog(tLRPC$Dialog.id)) {
                    if (i3 < arrayList.size()) {
                        arrayList3.add(i3, tLRPC$Dialog);
                    } else {
                        arrayList3.add(tLRPC$Dialog);
                    }
                    i3++;
                } else if (tLRPC$Dialog.pinned) {
                    i4 = Math.max(tLRPC$Dialog.pinnedNum, i4);
                    tLRPC$Dialog.pinned = false;
                    tLRPC$Dialog.pinnedNum = 0;
                    i3++;
                    z4 = true;
                } else if (tLRPC$Dialog.id != this.promoDialogId) {
                    break;
                }
            }
        }
        ArrayList arrayList4 = new ArrayList();
        if (!arrayList.isEmpty()) {
            putUsers(tLRPC$TL_messages_peerDialogs2.users, false);
            putChats(tLRPC$TL_messages_peerDialogs2.chats, false);
            ArrayList arrayList5 = new ArrayList();
            ArrayList arrayList6 = new ArrayList();
            int size = arrayList.size();
            int i6 = 0;
            z2 = false;
            while (i6 < size) {
                TLRPC$Dialog tLRPC$Dialog2 = (TLRPC$Dialog) arrayList3.get(i6);
                tLRPC$Dialog2.pinnedNum = (size - i6) + i4;
                arrayList4.add(Long.valueOf(tLRPC$Dialog2.id));
                TLRPC$Dialog tLRPC$Dialog3 = this.dialogs_dict.get(tLRPC$Dialog2.id);
                if (tLRPC$Dialog3 != null) {
                    tLRPC$Dialog3.pinned = true;
                    tLRPC$Dialog3.pinnedNum = tLRPC$Dialog2.pinnedNum;
                    arrayList5.add(Long.valueOf(tLRPC$Dialog2.id));
                    arrayList6.add(Integer.valueOf(tLRPC$Dialog2.pinnedNum));
                    LongSparseArray longSparseArray2 = longSparseArray;
                    arrayList2 = arrayList6;
                } else {
                    this.dialogs_dict.put(tLRPC$Dialog2.id, tLRPC$Dialog2);
                    MessageObject messageObject = (MessageObject) longSparseArray.get(tLRPC$Dialog2.id);
                    arrayList2 = arrayList6;
                    this.dialogMessage.put(tLRPC$Dialog2.id, messageObject);
                    if (messageObject != null && messageObject.messageOwner.peer_id.channel_id == 0) {
                        this.dialogMessagesByIds.put(messageObject.getId(), messageObject);
                        this.dialogsLoadedTillDate = Math.min(this.dialogsLoadedTillDate, messageObject.messageOwner.date);
                        long j = messageObject.messageOwner.random_id;
                        if (j != 0) {
                            this.dialogMessagesByRandomIds.put(j, messageObject);
                        }
                    }
                    z2 = true;
                }
                i6++;
                arrayList6 = arrayList2;
                z4 = true;
            }
            getMessagesStorage().setDialogsPinned(arrayList5, arrayList6);
        } else {
            z2 = false;
        }
        if (z4) {
            if (z2) {
                this.allDialogs.clear();
                int size2 = this.dialogs_dict.size();
                for (int i7 = 0; i7 < size2; i7++) {
                    TLRPC$Dialog valueAt = this.dialogs_dict.valueAt(i7);
                    if (this.deletingDialogs.indexOfKey(valueAt.id) < 0) {
                        this.allDialogs.add(valueAt);
                    }
                }
            }
            sortDialogs((LongSparseArray<TLRPC$Chat>) null);
            z3 = false;
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        } else {
            z3 = false;
        }
        getMessagesStorage().unpinAllDialogsExceptNew(arrayList4, i2);
        getMessagesStorage().putDialogs(tLRPC$TL_messages_dialogs, 1);
        getUserConfig().setPinnedDialogsLoaded(i2, true);
        getUserConfig().saveConfig(z3);
    }

    public void generateJoinMessage(long j, boolean z) {
        TLRPC$Chat chat = getChat(Long.valueOf(j));
        if (chat != null && ChatObject.isChannel(j, this.currentAccount)) {
            if ((!chat.left && !chat.kicked) || z) {
                TLRPC$TL_messageService tLRPC$TL_messageService = new TLRPC$TL_messageService();
                tLRPC$TL_messageService.flags = 256;
                int newMessageId = getUserConfig().getNewMessageId();
                tLRPC$TL_messageService.id = newMessageId;
                tLRPC$TL_messageService.local_id = newMessageId;
                tLRPC$TL_messageService.date = getConnectionsManager().getCurrentTime();
                TLRPC$TL_peerUser tLRPC$TL_peerUser = new TLRPC$TL_peerUser();
                tLRPC$TL_messageService.from_id = tLRPC$TL_peerUser;
                tLRPC$TL_peerUser.user_id = getUserConfig().getClientUserId();
                TLRPC$TL_peerChannel tLRPC$TL_peerChannel = new TLRPC$TL_peerChannel();
                tLRPC$TL_messageService.peer_id = tLRPC$TL_peerChannel;
                tLRPC$TL_peerChannel.channel_id = j;
                tLRPC$TL_messageService.dialog_id = -j;
                tLRPC$TL_messageService.post = true;
                TLRPC$TL_messageActionChatAddUser tLRPC$TL_messageActionChatAddUser = new TLRPC$TL_messageActionChatAddUser();
                tLRPC$TL_messageService.action = tLRPC$TL_messageActionChatAddUser;
                tLRPC$TL_messageActionChatAddUser.users.add(Long.valueOf(getUserConfig().getClientUserId()));
                getUserConfig().saveConfig(false);
                ArrayList arrayList = new ArrayList();
                ArrayList arrayList2 = new ArrayList();
                arrayList2.add(tLRPC$TL_messageService);
                arrayList.add(new MessageObject(this.currentAccount, tLRPC$TL_messageService, true, false));
                getMessagesStorage().getStorageQueue().postRunnable(new MessagesController$$ExternalSyntheticLambda89(this, arrayList));
                getMessagesStorage().putMessages((ArrayList<TLRPC$Message>) arrayList2, true, true, false, 0, false);
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda66(this, j, arrayList));
            }
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$generateJoinMessage$271(ArrayList arrayList) {
        getNotificationsController().processNewMessages(arrayList, true, false, (CountDownLatch) null);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$generateJoinMessage$272(ArrayList arrayList) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda97(this, arrayList));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$generateJoinMessage$273(long j, ArrayList arrayList) {
        updateInterfaceWithMessages(-j, arrayList, false);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    /* access modifiers changed from: protected */
    public void deleteMessagesByPush(long j, ArrayList<Integer> arrayList, long j2) {
        getMessagesStorage().getStorageQueue().postRunnable(new MessagesController$$ExternalSyntheticLambda99(this, arrayList, j2, j));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteMessagesByPush$275(ArrayList arrayList, long j, long j2) {
        ArrayList arrayList2 = arrayList;
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda98(this, arrayList, j));
        getMessagesStorage().deletePushMessages(j2, arrayList);
        long j3 = j2;
        getMessagesStorage().updateDialogsWithDeletedMessages(j3, j, arrayList, getMessagesStorage().markMessagesAsDeleted(j3, arrayList, false, true, false), false);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteMessagesByPush$274(ArrayList arrayList, long j) {
        int i = 0;
        getNotificationCenter().postNotificationName(NotificationCenter.messagesDeleted, arrayList, Long.valueOf(j), Boolean.FALSE);
        if (j == 0) {
            int size = arrayList.size();
            while (i < size) {
                MessageObject messageObject = this.dialogMessagesByIds.get(((Integer) arrayList.get(i)).intValue());
                if (messageObject != null) {
                    messageObject.deleted = true;
                }
                i++;
            }
            return;
        }
        MessageObject messageObject2 = this.dialogMessage.get(-j);
        if (messageObject2 != null) {
            int size2 = arrayList.size();
            while (i < size2) {
                if (messageObject2.getId() == ((Integer) arrayList.get(i)).intValue()) {
                    messageObject2.deleted = true;
                    return;
                }
                i++;
            }
        }
    }

    public void checkChatInviter(long j, boolean z) {
        TLRPC$Chat chat = getChat(Long.valueOf(j));
        if (ChatObject.isChannel(chat) && !chat.creator && this.gettingChatInviters.indexOfKey(j) < 0) {
            this.gettingChatInviters.put(j, Boolean.TRUE);
            TLRPC$TL_channels_getParticipant tLRPC$TL_channels_getParticipant = new TLRPC$TL_channels_getParticipant();
            tLRPC$TL_channels_getParticipant.channel = getInputChannel(j);
            tLRPC$TL_channels_getParticipant.participant = getInputPeer(getUserConfig().getClientUserId());
            getConnectionsManager().sendRequest(tLRPC$TL_channels_getParticipant, new MessagesController$$ExternalSyntheticLambda287(this, chat, z, j));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$checkChatInviter$280(TLRPC$Chat tLRPC$Chat, boolean z, long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        ArrayList arrayList;
        TLRPC$Chat tLRPC$Chat2 = tLRPC$Chat;
        long j2 = j;
        TLRPC$TL_channels_channelParticipant tLRPC$TL_channels_channelParticipant = (TLRPC$TL_channels_channelParticipant) tLObject;
        if (tLRPC$TL_channels_channelParticipant != null) {
            TLRPC$ChannelParticipant tLRPC$ChannelParticipant = tLRPC$TL_channels_channelParticipant.participant;
            if ((tLRPC$ChannelParticipant instanceof TLRPC$TL_channelParticipantSelf) && tLRPC$ChannelParticipant.inviter_id != getUserConfig().getClientUserId()) {
                if (!tLRPC$Chat2.megagroup || !getMessagesStorage().isMigratedChat(tLRPC$Chat2.id)) {
                    AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda137(this, tLRPC$TL_channels_channelParticipant));
                    getMessagesStorage().putUsersAndChats(tLRPC$TL_channels_channelParticipant.users, tLRPC$TL_channels_channelParticipant.chats, true, true);
                    if (!z || Math.abs(getConnectionsManager().getCurrentTime() - tLRPC$TL_channels_channelParticipant.participant.date) >= 86400 || getMessagesStorage().hasInviteMeMessage(j2)) {
                        arrayList = null;
                    } else {
                        TLRPC$TL_messageService tLRPC$TL_messageService = new TLRPC$TL_messageService();
                        tLRPC$TL_messageService.media_unread = true;
                        tLRPC$TL_messageService.unread = true;
                        tLRPC$TL_messageService.flags = 256;
                        tLRPC$TL_messageService.post = true;
                        int newMessageId = getUserConfig().getNewMessageId();
                        tLRPC$TL_messageService.id = newMessageId;
                        tLRPC$TL_messageService.local_id = newMessageId;
                        tLRPC$TL_messageService.date = tLRPC$TL_channels_channelParticipant.participant.date;
                        tLRPC$TL_messageService.action = new TLRPC$TL_messageActionChatAddUser();
                        TLRPC$TL_peerUser tLRPC$TL_peerUser = new TLRPC$TL_peerUser();
                        tLRPC$TL_messageService.from_id = tLRPC$TL_peerUser;
                        tLRPC$TL_peerUser.user_id = tLRPC$TL_channels_channelParticipant.participant.inviter_id;
                        tLRPC$TL_messageService.action.users.add(Long.valueOf(getUserConfig().getClientUserId()));
                        TLRPC$TL_peerChannel tLRPC$TL_peerChannel = new TLRPC$TL_peerChannel();
                        tLRPC$TL_messageService.peer_id = tLRPC$TL_peerChannel;
                        tLRPC$TL_peerChannel.channel_id = j2;
                        tLRPC$TL_messageService.dialog_id = -j2;
                        getUserConfig().saveConfig(false);
                        arrayList = new ArrayList();
                        ArrayList arrayList2 = new ArrayList();
                        ConcurrentHashMap concurrentHashMap = new ConcurrentHashMap();
                        for (int i = 0; i < tLRPC$TL_channels_channelParticipant.users.size(); i++) {
                            TLRPC$User tLRPC$User = tLRPC$TL_channels_channelParticipant.users.get(i);
                            concurrentHashMap.put(Long.valueOf(tLRPC$User.id), tLRPC$User);
                        }
                        arrayList2.add(tLRPC$TL_messageService);
                        arrayList.add(new MessageObject(this.currentAccount, (TLRPC$Message) tLRPC$TL_messageService, (AbstractMap<Long, TLRPC$User>) concurrentHashMap, true, false));
                        getMessagesStorage().getStorageQueue().postRunnable(new MessagesController$$ExternalSyntheticLambda92(this, arrayList));
                        getMessagesStorage().putMessages((ArrayList<TLRPC$Message>) arrayList2, true, true, false, 0, false);
                    }
                    getMessagesStorage().saveChatInviter(j2, tLRPC$TL_channels_channelParticipant.participant.inviter_id);
                    AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda69(this, j, arrayList, tLRPC$TL_channels_channelParticipant));
                }
            }
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$checkChatInviter$276(TLRPC$TL_channels_channelParticipant tLRPC$TL_channels_channelParticipant) {
        putUsers(tLRPC$TL_channels_channelParticipant.users, false);
        putChats(tLRPC$TL_channels_channelParticipant.chats, false);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$checkChatInviter$277(ArrayList arrayList) {
        getNotificationsController().processNewMessages(arrayList, true, false, (CountDownLatch) null);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$checkChatInviter$278(ArrayList arrayList) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda91(this, arrayList));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$checkChatInviter$279(long j, ArrayList arrayList, TLRPC$TL_channels_channelParticipant tLRPC$TL_channels_channelParticipant) {
        this.gettingChatInviters.delete(j);
        if (arrayList != null) {
            updateInterfaceWithMessages(-j, arrayList, false);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.didLoadChatInviter, Long.valueOf(j), Long.valueOf(tLRPC$TL_channels_channelParticipant.participant.inviter_id));
    }

    private int getUpdateType(TLRPC$Update tLRPC$Update) {
        if ((tLRPC$Update instanceof TLRPC$TL_updateNewMessage) || (tLRPC$Update instanceof TLRPC$TL_updateReadMessagesContents) || (tLRPC$Update instanceof TLRPC$TL_updateReadHistoryInbox) || (tLRPC$Update instanceof TLRPC$TL_updateReadHistoryOutbox) || (tLRPC$Update instanceof TLRPC$TL_updateDeleteMessages) || (tLRPC$Update instanceof TLRPC$TL_updateWebPage) || (tLRPC$Update instanceof TLRPC$TL_updateEditMessage) || (tLRPC$Update instanceof TLRPC$TL_updateFolderPeers) || (tLRPC$Update instanceof TLRPC$TL_updatePinnedMessages)) {
            return 0;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateNewEncryptedMessage) {
            return 1;
        }
        return ((tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) || (tLRPC$Update instanceof TLRPC$TL_updateDeleteChannelMessages) || (tLRPC$Update instanceof TLRPC$TL_updateEditChannelMessage) || (tLRPC$Update instanceof TLRPC$TL_updateChannelWebPage) || (tLRPC$Update instanceof TLRPC$TL_updatePinnedChannelMessages)) ? 2 : 3;
    }

    private static int getUpdatePts(TLRPC$Update tLRPC$Update) {
        if (tLRPC$Update instanceof TLRPC$TL_updateDeleteMessages) {
            return ((TLRPC$TL_updateDeleteMessages) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) {
            return ((TLRPC$TL_updateNewChannelMessage) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadHistoryOutbox) {
            return ((TLRPC$TL_updateReadHistoryOutbox) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateNewMessage) {
            return ((TLRPC$TL_updateNewMessage) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateEditMessage) {
            return ((TLRPC$TL_updateEditMessage) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateWebPage) {
            return ((TLRPC$TL_updateWebPage) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadHistoryInbox) {
            return ((TLRPC$TL_updateReadHistoryInbox) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelWebPage) {
            return ((TLRPC$TL_updateChannelWebPage) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateDeleteChannelMessages) {
            return ((TLRPC$TL_updateDeleteChannelMessages) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateEditChannelMessage) {
            return ((TLRPC$TL_updateEditChannelMessage) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadMessagesContents) {
            return ((TLRPC$TL_updateReadMessagesContents) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelTooLong) {
            return ((TLRPC$TL_updateChannelTooLong) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateFolderPeers) {
            return ((TLRPC$TL_updateFolderPeers) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updatePinnedChannelMessages) {
            return ((TLRPC$TL_updatePinnedChannelMessages) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updatePinnedMessages) {
            return ((TLRPC$TL_updatePinnedMessages) tLRPC$Update).pts;
        }
        return 0;
    }

    private static int getUpdatePtsCount(TLRPC$Update tLRPC$Update) {
        if (tLRPC$Update instanceof TLRPC$TL_updateDeleteMessages) {
            return ((TLRPC$TL_updateDeleteMessages) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) {
            return ((TLRPC$TL_updateNewChannelMessage) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadHistoryOutbox) {
            return ((TLRPC$TL_updateReadHistoryOutbox) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateNewMessage) {
            return ((TLRPC$TL_updateNewMessage) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateEditMessage) {
            return ((TLRPC$TL_updateEditMessage) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateWebPage) {
            return ((TLRPC$TL_updateWebPage) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadHistoryInbox) {
            return ((TLRPC$TL_updateReadHistoryInbox) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelWebPage) {
            return ((TLRPC$TL_updateChannelWebPage) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateDeleteChannelMessages) {
            return ((TLRPC$TL_updateDeleteChannelMessages) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateEditChannelMessage) {
            return ((TLRPC$TL_updateEditChannelMessage) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadMessagesContents) {
            return ((TLRPC$TL_updateReadMessagesContents) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateFolderPeers) {
            return ((TLRPC$TL_updateFolderPeers) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updatePinnedChannelMessages) {
            return ((TLRPC$TL_updatePinnedChannelMessages) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updatePinnedMessages) {
            return ((TLRPC$TL_updatePinnedMessages) tLRPC$Update).pts_count;
        }
        return 0;
    }

    private static int getUpdateQts(TLRPC$Update tLRPC$Update) {
        if (tLRPC$Update instanceof TLRPC$TL_updateNewEncryptedMessage) {
            return ((TLRPC$TL_updateNewEncryptedMessage) tLRPC$Update).qts;
        }
        return 0;
    }

    public static long getUpdateChannelId(TLRPC$Update tLRPC$Update) {
        if (tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) {
            return ((TLRPC$TL_updateNewChannelMessage) tLRPC$Update).message.peer_id.channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateEditChannelMessage) {
            return ((TLRPC$TL_updateEditChannelMessage) tLRPC$Update).message.peer_id.channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadChannelOutbox) {
            return ((TLRPC$TL_updateReadChannelOutbox) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelMessageViews) {
            return ((TLRPC$TL_updateChannelMessageViews) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelMessageForwards) {
            return ((TLRPC$TL_updateChannelMessageForwards) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelTooLong) {
            return ((TLRPC$TL_updateChannelTooLong) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelReadMessagesContents) {
            return ((TLRPC$TL_updateChannelReadMessagesContents) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelAvailableMessages) {
            return ((TLRPC$TL_updateChannelAvailableMessages) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannel) {
            return ((TLRPC$TL_updateChannel) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelWebPage) {
            return ((TLRPC$TL_updateChannelWebPage) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateDeleteChannelMessages) {
            return ((TLRPC$TL_updateDeleteChannelMessages) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadChannelInbox) {
            return ((TLRPC$TL_updateReadChannelInbox) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadChannelDiscussionInbox) {
            return ((TLRPC$TL_updateReadChannelDiscussionInbox) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadChannelDiscussionOutbox) {
            return ((TLRPC$TL_updateReadChannelDiscussionOutbox) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelUserTyping) {
            return ((TLRPC$TL_updateChannelUserTyping) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updatePinnedChannelMessages) {
            return ((TLRPC$TL_updatePinnedChannelMessages) tLRPC$Update).channel_id;
        }
        if (!BuildVars.LOGS_ENABLED) {
            return 0;
        }
        FileLog.e("trying to get unknown update channel_id for " + tLRPC$Update);
        return 0;
    }

    /* JADX WARNING: Code restructure failed: missing block: B:297:0x0708, code lost:
        if (r2 != null) goto L_0x070a;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:299:0x070c, code lost:
        if (r9 != null) goto L_0x070f;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:311:0x073b, code lost:
        if (r2 != null) goto L_0x073d;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:313:0x073f, code lost:
        if (r16 != null) goto L_0x070f;
     */
    /* JADX WARNING: Removed duplicated region for block: B:287:0x06e2  */
    /* JADX WARNING: Removed duplicated region for block: B:291:0x06fc  */
    /* JADX WARNING: Removed duplicated region for block: B:294:0x0702  */
    /* JADX WARNING: Removed duplicated region for block: B:303:0x0714  */
    /* JADX WARNING: Removed duplicated region for block: B:320:0x0755  */
    /* JADX WARNING: Removed duplicated region for block: B:337:0x0791 A[ADDED_TO_REGION] */
    /* JADX WARNING: Removed duplicated region for block: B:348:0x07c7  */
    /* JADX WARNING: Removed duplicated region for block: B:414:0x09b0  */
    /* JADX WARNING: Removed duplicated region for block: B:432:0x09ea  */
    /* JADX WARNING: Removed duplicated region for block: B:434:0x0a04  */
    /* JADX WARNING: Removed duplicated region for block: B:463:0x078d A[EDGE_INSN: B:463:0x078d->B:335:0x078d ?: BREAK  , SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void processUpdates(org.telegram.tgnet.TLRPC$Updates r27, boolean r28) {
        /*
            r26 = this;
            r6 = r26
            r7 = r27
            boolean r0 = r7 instanceof org.telegram.tgnet.TLRPC$TL_updateShort
            r9 = 0
            r10 = 1
            if (r0 == 0) goto L_0x001f
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            org.telegram.tgnet.TLRPC$Update r0 = r7.update
            r1.add(r0)
            r2 = 0
            r3 = 0
            r4 = 0
            int r5 = r7.date
            r0 = r26
            r0.processUpdateArray(r1, r2, r3, r4, r5)
            goto L_0x007f
        L_0x001f:
            boolean r0 = r7 instanceof org.telegram.tgnet.TLRPC$TL_updateShortChatMessage
            java.lang.String r11 = " count = "
            java.lang.String r12 = "add to queue"
            java.lang.String r15 = " "
            r4 = 0
            if (r0 != 0) goto L_0x0639
            boolean r1 = r7 instanceof org.telegram.tgnet.TLRPC$TL_updateShortMessage
            if (r1 == 0) goto L_0x0031
            goto L_0x0639
        L_0x0031:
            boolean r0 = r7 instanceof org.telegram.tgnet.TLRPC$TL_updatesCombined
            if (r0 != 0) goto L_0x0084
            boolean r0 = r7 instanceof org.telegram.tgnet.TLRPC$TL_updates
            if (r0 == 0) goto L_0x003a
            goto L_0x0084
        L_0x003a:
            boolean r0 = r7 instanceof org.telegram.tgnet.TLRPC$TL_updatesTooLong
            if (r0 == 0) goto L_0x004b
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0047
            java.lang.String r0 = "need get diff TL_updatesTooLong"
            org.telegram.messenger.FileLog.d(r0)
        L_0x0047:
            r1 = 0
            r8 = 0
            goto L_0x09a7
        L_0x004b:
            boolean r0 = r7 instanceof org.telegram.messenger.MessagesController.UserActionUpdatesSeq
            if (r0 == 0) goto L_0x0059
            org.telegram.messenger.MessagesStorage r0 = r26.getMessagesStorage()
            int r1 = r7.seq
            r0.setLastSeqValue(r1)
            goto L_0x007f
        L_0x0059:
            boolean r0 = r7 instanceof org.telegram.messenger.MessagesController.UserActionUpdatesPts
            if (r0 == 0) goto L_0x007f
            long r0 = r7.chat_id
            int r2 = (r0 > r4 ? 1 : (r0 == r4 ? 0 : -1))
            if (r2 == 0) goto L_0x0076
            org.telegram.messenger.support.LongSparseIntArray r2 = r6.channelsPts
            int r3 = r7.pts
            r2.put(r0, r3)
            org.telegram.messenger.MessagesStorage r0 = r26.getMessagesStorage()
            long r1 = r7.chat_id
            int r3 = r7.pts
            r0.saveChannelPts(r1, r3)
            goto L_0x007f
        L_0x0076:
            org.telegram.messenger.MessagesStorage r0 = r26.getMessagesStorage()
            int r1 = r7.pts
            r0.setLastPtsValue(r1)
        L_0x007f:
            r1 = 0
            r8 = 0
            r10 = 0
            goto L_0x09a7
        L_0x0084:
            r0 = 0
            r1 = 0
        L_0x0086:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r2 = r7.chats
            int r2 = r2.size()
            if (r0 >= r2) goto L_0x00d2
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r2 = r7.chats
            java.lang.Object r2 = r2.get(r0)
            org.telegram.tgnet.TLRPC$Chat r2 = (org.telegram.tgnet.TLRPC$Chat) r2
            boolean r3 = r2 instanceof org.telegram.tgnet.TLRPC$TL_channel
            if (r3 == 0) goto L_0x00cd
            boolean r3 = r2.min
            if (r3 == 0) goto L_0x00cd
            long r4 = r2.id
            java.lang.Long r3 = java.lang.Long.valueOf(r4)
            org.telegram.tgnet.TLRPC$Chat r3 = r6.getChat(r3)
            if (r3 == 0) goto L_0x00ae
            boolean r4 = r3.min
            if (r4 == 0) goto L_0x00bb
        L_0x00ae:
            org.telegram.messenger.MessagesStorage r3 = r26.getMessagesStorage()
            long r4 = r7.chat_id
            org.telegram.tgnet.TLRPC$Chat r3 = r3.getChatSync(r4)
            r6.putChat(r3, r10)
        L_0x00bb:
            if (r3 == 0) goto L_0x00c1
            boolean r3 = r3.min
            if (r3 == 0) goto L_0x00cd
        L_0x00c1:
            if (r1 != 0) goto L_0x00c8
            androidx.collection.LongSparseArray r1 = new androidx.collection.LongSparseArray
            r1.<init>()
        L_0x00c8:
            long r3 = r2.id
            r1.put(r3, r2)
        L_0x00cd:
            int r0 = r0 + 1
            r4 = 0
            goto L_0x0086
        L_0x00d2:
            if (r1 == 0) goto L_0x0114
            r0 = 0
        L_0x00d5:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r2 = r7.updates
            int r2 = r2.size()
            if (r0 >= r2) goto L_0x0114
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r2 = r7.updates
            java.lang.Object r2 = r2.get(r0)
            org.telegram.tgnet.TLRPC$Update r2 = (org.telegram.tgnet.TLRPC$Update) r2
            boolean r3 = r2 instanceof org.telegram.tgnet.TLRPC$TL_updateNewChannelMessage
            if (r3 == 0) goto L_0x0111
            org.telegram.tgnet.TLRPC$TL_updateNewChannelMessage r2 = (org.telegram.tgnet.TLRPC$TL_updateNewChannelMessage) r2
            org.telegram.tgnet.TLRPC$Message r2 = r2.message
            org.telegram.tgnet.TLRPC$Peer r2 = r2.peer_id
            long r2 = r2.channel_id
            int r4 = r1.indexOfKey(r2)
            if (r4 < 0) goto L_0x0111
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x010f
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "need get diff because of min channel "
            r0.append(r1)
            r0.append(r2)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x010f:
            r0 = 1
            goto L_0x0115
        L_0x0111:
            int r0 = r0 + 1
            goto L_0x00d5
        L_0x0114:
            r0 = 0
        L_0x0115:
            if (r0 != 0) goto L_0x0630
            org.telegram.messenger.MessagesStorage r1 = r26.getMessagesStorage()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r7.users
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r3 = r7.chats
            r1.putUsersAndChats(r2, r3, r10, r10)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r7.updates
            java.util.Comparator<org.telegram.tgnet.TLRPC$Update> r2 = r6.updatesComparator
            java.util.Collections.sort(r1, r2)
            r8 = r0
            r5 = 0
            r16 = 0
        L_0x012d:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r0 = r7.updates
            int r0 = r0.size()
            if (r0 <= 0) goto L_0x0533
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r0 = r7.updates
            java.lang.Object r0 = r0.get(r9)
            org.telegram.tgnet.TLRPC$Update r0 = (org.telegram.tgnet.TLRPC$Update) r0
            int r1 = r6.getUpdateType(r0)
            if (r1 != 0) goto L_0x0269
            org.telegram.tgnet.TLRPC$TL_updates r4 = new org.telegram.tgnet.TLRPC$TL_updates
            r4.<init>()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r4.updates
            r1.add(r0)
            int r1 = getUpdatePts(r0)
            r4.pts = r1
            int r1 = getUpdatePtsCount(r0)
            r4.pts_count = r1
        L_0x0159:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r7.updates
            int r1 = r1.size()
            if (r10 >= r1) goto L_0x018f
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r7.updates
            java.lang.Object r1 = r1.get(r10)
            org.telegram.tgnet.TLRPC$Update r1 = (org.telegram.tgnet.TLRPC$Update) r1
            int r2 = getUpdatePts(r1)
            int r3 = getUpdatePtsCount(r1)
            int r17 = r6.getUpdateType(r1)
            if (r17 != 0) goto L_0x018f
            int r9 = r4.pts
            int r9 = r9 + r3
            if (r9 != r2) goto L_0x018f
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r9 = r4.updates
            r9.add(r1)
            r4.pts = r2
            int r1 = r4.pts_count
            int r1 = r1 + r3
            r4.pts_count = r1
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r7.updates
            r1.remove(r10)
            r9 = 0
            goto L_0x0159
        L_0x018f:
            org.telegram.messenger.MessagesStorage r1 = r26.getMessagesStorage()
            int r1 = r1.getLastPtsValue()
            int r2 = r4.pts_count
            int r1 = r1 + r2
            int r2 = r4.pts
            if (r1 != r2) goto L_0x01ee
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r4.updates
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r7.users
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r3 = r7.chats
            r9 = 0
            int r0 = r7.date
            r18 = r0
            r0 = r26
            r10 = r4
            r13 = 0
            r4 = r9
            r9 = r5
            r5 = r18
            boolean r0 = r0.processUpdateArray(r1, r2, r3, r4, r5)
            if (r0 != 0) goto L_0x01e3
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x01e0
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "need get diff inner TL_updates, pts: "
            r0.append(r1)
            org.telegram.messenger.MessagesStorage r1 = r26.getMessagesStorage()
            int r1 = r1.getLastPtsValue()
            r0.append(r1)
            r0.append(r15)
            int r1 = r7.seq
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x01e0:
            r8 = 1
            goto L_0x0264
        L_0x01e3:
            org.telegram.messenger.MessagesStorage r0 = r26.getMessagesStorage()
            int r1 = r10.pts
            r0.setLastPtsValue(r1)
            goto L_0x0264
        L_0x01ee:
            r10 = r4
            r9 = r5
            r13 = 0
            org.telegram.messenger.MessagesStorage r1 = r26.getMessagesStorage()
            int r1 = r1.getLastPtsValue()
            int r2 = r10.pts
            if (r1 == r2) goto L_0x0264
            boolean r1 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r1 == 0) goto L_0x0231
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            r1.append(r0)
            java.lang.String r0 = " need get diff, pts: "
            r1.append(r0)
            org.telegram.messenger.MessagesStorage r0 = r26.getMessagesStorage()
            int r0 = r0.getLastPtsValue()
            r1.append(r0)
            r1.append(r15)
            int r0 = r10.pts
            r1.append(r0)
            r1.append(r11)
            int r0 = r10.pts_count
            r1.append(r0)
            java.lang.String r0 = r1.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x0231:
            boolean r0 = r6.gettingDifference
            if (r0 != 0) goto L_0x024c
            long r0 = r6.updatesStartWaitTimePts
            int r2 = (r0 > r13 ? 1 : (r0 == r13 ? 0 : -1))
            if (r2 == 0) goto L_0x024c
            long r0 = java.lang.System.currentTimeMillis()
            long r2 = r6.updatesStartWaitTimePts
            long r0 = r0 - r2
            long r0 = java.lang.Math.abs(r0)
            r2 = 1500(0x5dc, double:7.41E-321)
            int r4 = (r0 > r2 ? 1 : (r0 == r2 ? 0 : -1))
            if (r4 > 0) goto L_0x01e0
        L_0x024c:
            long r0 = r6.updatesStartWaitTimePts
            int r2 = (r0 > r13 ? 1 : (r0 == r13 ? 0 : -1))
            if (r2 != 0) goto L_0x0258
            long r0 = java.lang.System.currentTimeMillis()
            r6.updatesStartWaitTimePts = r0
        L_0x0258:
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x025f
            org.telegram.messenger.FileLog.d(r12)
        L_0x025f:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Updates> r0 = r6.updatesQueuePts
            r0.add(r10)
        L_0x0264:
            r5 = r9
            r23 = r12
            goto L_0x0527
        L_0x0269:
            r9 = r5
            r13 = 0
            int r1 = r6.getUpdateType(r0)
            r2 = 1
            if (r1 != r2) goto L_0x0354
            org.telegram.tgnet.TLRPC$TL_updates r10 = new org.telegram.tgnet.TLRPC$TL_updates
            r10.<init>()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r10.updates
            r1.add(r0)
            int r1 = getUpdateQts(r0)
            r10.pts = r1
        L_0x0283:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r7.updates
            int r1 = r1.size()
            if (r2 >= r1) goto L_0x02af
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r7.updates
            java.lang.Object r1 = r1.get(r2)
            org.telegram.tgnet.TLRPC$Update r1 = (org.telegram.tgnet.TLRPC$Update) r1
            int r3 = getUpdateQts(r1)
            int r4 = r6.getUpdateType(r1)
            if (r4 != r2) goto L_0x02af
            int r4 = r10.pts
            int r4 = r4 + r2
            if (r4 != r3) goto L_0x02af
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r4 = r10.updates
            r4.add(r1)
            r10.pts = r3
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r7.updates
            r1.remove(r2)
            goto L_0x0283
        L_0x02af:
            org.telegram.messenger.MessagesStorage r1 = r26.getMessagesStorage()
            int r1 = r1.getLastQtsValue()
            if (r1 == 0) goto L_0x0339
            org.telegram.messenger.MessagesStorage r1 = r26.getMessagesStorage()
            int r1 = r1.getLastQtsValue()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r2 = r10.updates
            int r2 = r2.size()
            int r1 = r1 + r2
            int r2 = r10.pts
            if (r1 != r2) goto L_0x02cd
            goto L_0x0339
        L_0x02cd:
            org.telegram.messenger.MessagesStorage r1 = r26.getMessagesStorage()
            int r1 = r1.getLastPtsValue()
            int r2 = r10.pts
            if (r1 == r2) goto L_0x0264
            boolean r1 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r1 == 0) goto L_0x0304
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            r1.append(r0)
            java.lang.String r0 = " need get diff, qts: "
            r1.append(r0)
            org.telegram.messenger.MessagesStorage r0 = r26.getMessagesStorage()
            int r0 = r0.getLastQtsValue()
            r1.append(r0)
            r1.append(r15)
            int r0 = r10.pts
            r1.append(r0)
            java.lang.String r0 = r1.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x0304:
            boolean r0 = r6.gettingDifference
            if (r0 != 0) goto L_0x031f
            long r0 = r6.updatesStartWaitTimeQts
            int r2 = (r0 > r13 ? 1 : (r0 == r13 ? 0 : -1))
            if (r2 == 0) goto L_0x031f
            long r0 = java.lang.System.currentTimeMillis()
            long r2 = r6.updatesStartWaitTimeQts
            long r0 = r0 - r2
            long r0 = java.lang.Math.abs(r0)
            r2 = 1500(0x5dc, double:7.41E-321)
            int r4 = (r0 > r2 ? 1 : (r0 == r2 ? 0 : -1))
            if (r4 > 0) goto L_0x01e0
        L_0x031f:
            long r0 = r6.updatesStartWaitTimeQts
            int r2 = (r0 > r13 ? 1 : (r0 == r13 ? 0 : -1))
            if (r2 != 0) goto L_0x032b
            long r0 = java.lang.System.currentTimeMillis()
            r6.updatesStartWaitTimeQts = r0
        L_0x032b:
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0332
            org.telegram.messenger.FileLog.d(r12)
        L_0x0332:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Updates> r0 = r6.updatesQueueQts
            r0.add(r10)
            goto L_0x0264
        L_0x0339:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r10.updates
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r7.users
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r3 = r7.chats
            r4 = 0
            int r5 = r7.date
            r0 = r26
            r0.processUpdateArray(r1, r2, r3, r4, r5)
            org.telegram.messenger.MessagesStorage r0 = r26.getMessagesStorage()
            int r1 = r10.pts
            r0.setLastQtsValue(r1)
            r16 = 1
            goto L_0x0264
        L_0x0354:
            int r1 = r6.getUpdateType(r0)
            r2 = 2
            if (r1 != r2) goto L_0x0534
            long r4 = getUpdateChannelId(r0)
            org.telegram.messenger.support.LongSparseIntArray r1 = r6.channelsPts
            int r1 = r1.get(r4)
            if (r1 != 0) goto L_0x0398
            org.telegram.messenger.MessagesStorage r1 = r26.getMessagesStorage()
            int r1 = r1.getChannelPtsSync(r4)
            if (r1 != 0) goto L_0x0393
            r3 = 0
        L_0x0372:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r10 = r7.chats
            int r10 = r10.size()
            if (r3 >= r10) goto L_0x0398
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r10 = r7.chats
            java.lang.Object r10 = r10.get(r3)
            org.telegram.tgnet.TLRPC$Chat r10 = (org.telegram.tgnet.TLRPC$Chat) r10
            r20 = r3
            long r2 = r10.id
            int r21 = (r2 > r4 ? 1 : (r2 == r4 ? 0 : -1))
            if (r21 != 0) goto L_0x038f
            r6.loadUnknownChannel(r10, r13)
            r2 = 1
            goto L_0x0399
        L_0x038f:
            int r3 = r20 + 1
            r2 = 2
            goto L_0x0372
        L_0x0393:
            org.telegram.messenger.support.LongSparseIntArray r2 = r6.channelsPts
            r2.put(r4, r1)
        L_0x0398:
            r2 = 0
        L_0x0399:
            org.telegram.tgnet.TLRPC$TL_updates r10 = new org.telegram.tgnet.TLRPC$TL_updates
            r10.<init>()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r3 = r10.updates
            r3.add(r0)
            int r3 = getUpdatePts(r0)
            r10.pts = r3
            int r3 = getUpdatePtsCount(r0)
            r10.pts_count = r3
        L_0x03af:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r3 = r7.updates
            int r3 = r3.size()
            r13 = 1
            if (r13 >= r3) goto L_0x03f9
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r3 = r7.updates
            java.lang.Object r3 = r3.get(r13)
            org.telegram.tgnet.TLRPC$Update r3 = (org.telegram.tgnet.TLRPC$Update) r3
            int r13 = getUpdatePts(r3)
            int r14 = getUpdatePtsCount(r3)
            r22 = r8
            int r8 = r6.getUpdateType(r3)
            r23 = r12
            r12 = 2
            if (r8 != r12) goto L_0x03fd
            long r24 = getUpdateChannelId(r3)
            int r8 = (r4 > r24 ? 1 : (r4 == r24 ? 0 : -1))
            if (r8 != 0) goto L_0x03fd
            int r8 = r10.pts
            int r8 = r8 + r14
            if (r8 != r13) goto L_0x03fd
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r8 = r10.updates
            r8.add(r3)
            r10.pts = r13
            int r3 = r10.pts_count
            int r3 = r3 + r14
            r10.pts_count = r3
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r3 = r7.updates
            r8 = 1
            r3.remove(r8)
            r8 = r22
            r12 = r23
            r13 = 0
            goto L_0x03af
        L_0x03f9:
            r22 = r8
            r23 = r12
        L_0x03fd:
            if (r2 != 0) goto L_0x050b
            int r2 = r10.pts_count
            int r2 = r2 + r1
            int r3 = r10.pts
            if (r2 != r3) goto L_0x0461
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r10.updates
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r7.users
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r3 = r7.chats
            r8 = 0
            int r12 = r7.date
            r0 = r26
            r13 = r4
            r4 = r8
            r5 = r12
            boolean r0 = r0.processUpdateArray(r1, r2, r3, r4, r5)
            if (r0 != 0) goto L_0x044f
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0432
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "need get channel diff inner TL_updates, channel_id = "
            r0.append(r1)
            r0.append(r13)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x0432:
            if (r9 != 0) goto L_0x043c
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r5 = r0
            goto L_0x0525
        L_0x043c:
            java.lang.Long r0 = java.lang.Long.valueOf(r13)
            boolean r0 = r9.contains(r0)
            if (r0 != 0) goto L_0x0524
            java.lang.Long r0 = java.lang.Long.valueOf(r13)
            r9.add(r0)
            goto L_0x0524
        L_0x044f:
            org.telegram.messenger.support.LongSparseIntArray r0 = r6.channelsPts
            int r1 = r10.pts
            r0.put(r13, r1)
            org.telegram.messenger.MessagesStorage r0 = r26.getMessagesStorage()
            int r1 = r10.pts
            r0.saveChannelPts(r13, r1)
            goto L_0x0524
        L_0x0461:
            r13 = r4
            if (r1 == r3) goto L_0x0524
            boolean r2 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r2 == 0) goto L_0x0497
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            r2.append(r0)
            java.lang.String r0 = " need get channel diff, pts: "
            r2.append(r0)
            r2.append(r1)
            r2.append(r15)
            int r0 = r10.pts
            r2.append(r0)
            r2.append(r11)
            int r0 = r10.pts_count
            r2.append(r0)
            java.lang.String r0 = " channelId = "
            r2.append(r0)
            r2.append(r13)
            java.lang.String r0 = r2.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x0497:
            org.telegram.messenger.support.LongSparseLongArray r0 = r6.updatesStartWaitTimeChannels
            long r0 = r0.get(r13)
            androidx.collection.LongSparseArray<java.lang.Boolean> r2 = r6.gettingDifferenceChannels
            java.lang.Boolean r3 = java.lang.Boolean.FALSE
            java.lang.Object r2 = r2.get(r13, r3)
            java.lang.Boolean r2 = (java.lang.Boolean) r2
            boolean r2 = r2.booleanValue()
            if (r2 != 0) goto L_0x04dd
            r2 = 0
            int r4 = (r0 > r2 ? 1 : (r0 == r2 ? 0 : -1))
            if (r4 == 0) goto L_0x04dd
            long r2 = java.lang.System.currentTimeMillis()
            long r2 = r2 - r0
            long r2 = java.lang.Math.abs(r2)
            r4 = 1500(0x5dc, double:7.41E-321)
            int r8 = (r2 > r4 ? 1 : (r2 == r4 ? 0 : -1))
            if (r8 > 0) goto L_0x04c3
            goto L_0x04dd
        L_0x04c3:
            if (r9 != 0) goto L_0x04cb
            java.util.ArrayList r5 = new java.util.ArrayList
            r5.<init>()
            goto L_0x0525
        L_0x04cb:
            java.lang.Long r0 = java.lang.Long.valueOf(r13)
            boolean r0 = r9.contains(r0)
            if (r0 != 0) goto L_0x0524
            java.lang.Long r0 = java.lang.Long.valueOf(r13)
            r9.add(r0)
            goto L_0x0524
        L_0x04dd:
            r2 = 0
            int r4 = (r0 > r2 ? 1 : (r0 == r2 ? 0 : -1))
            if (r4 != 0) goto L_0x04ec
            org.telegram.messenger.support.LongSparseLongArray r0 = r6.updatesStartWaitTimeChannels
            long r1 = java.lang.System.currentTimeMillis()
            r0.put(r13, r1)
        L_0x04ec:
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x04f3
            org.telegram.messenger.FileLog.d(r23)
        L_0x04f3:
            androidx.collection.LongSparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Updates>> r0 = r6.updatesQueueChannels
            java.lang.Object r0 = r0.get(r13)
            java.util.ArrayList r0 = (java.util.ArrayList) r0
            if (r0 != 0) goto L_0x0507
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            androidx.collection.LongSparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Updates>> r1 = r6.updatesQueueChannels
            r1.put(r13, r0)
        L_0x0507:
            r0.add(r10)
            goto L_0x0524
        L_0x050b:
            r13 = r4
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0524
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "need load unknown channel = "
            r0.append(r1)
            r0.append(r13)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x0524:
            r5 = r9
        L_0x0525:
            r8 = r22
        L_0x0527:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r0 = r7.updates
            r1 = 0
            r0.remove(r1)
            r12 = r23
            r9 = 0
            r10 = 1
            goto L_0x012d
        L_0x0533:
            r9 = r5
        L_0x0534:
            r22 = r8
            boolean r0 = r7 instanceof org.telegram.tgnet.TLRPC$TL_updatesCombined
            if (r0 == 0) goto L_0x0559
            org.telegram.messenger.MessagesStorage r1 = r26.getMessagesStorage()
            int r1 = r1.getLastSeqValue()
            r2 = 1
            int r1 = r1 + r2
            int r2 = r7.seq_start
            if (r1 == r2) goto L_0x0557
            org.telegram.messenger.MessagesStorage r1 = r26.getMessagesStorage()
            int r1 = r1.getLastSeqValue()
            int r2 = r7.seq_start
            if (r1 != r2) goto L_0x0555
            goto L_0x0557
        L_0x0555:
            r1 = 0
            goto L_0x0574
        L_0x0557:
            r1 = 1
            goto L_0x0574
        L_0x0559:
            org.telegram.messenger.MessagesStorage r1 = r26.getMessagesStorage()
            int r1 = r1.getLastSeqValue()
            r2 = 1
            int r1 = r1 + r2
            int r2 = r7.seq
            if (r1 == r2) goto L_0x0557
            if (r2 == 0) goto L_0x0557
            org.telegram.messenger.MessagesStorage r1 = r26.getMessagesStorage()
            int r1 = r1.getLastSeqValue()
            if (r2 != r1) goto L_0x0555
            goto L_0x0557
        L_0x0574:
            if (r1 == 0) goto L_0x05a0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r7.updates
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r7.users
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r3 = r7.chats
            r4 = 0
            int r5 = r7.date
            r0 = r26
            r0.processUpdateArray(r1, r2, r3, r4, r5)
            int r0 = r7.seq
            if (r0 == 0) goto L_0x062c
            int r0 = r7.date
            if (r0 == 0) goto L_0x0595
            org.telegram.messenger.MessagesStorage r0 = r26.getMessagesStorage()
            int r1 = r7.date
            r0.setLastDateValue(r1)
        L_0x0595:
            org.telegram.messenger.MessagesStorage r0 = r26.getMessagesStorage()
            int r1 = r7.seq
            r0.setLastSeqValue(r1)
            goto L_0x062c
        L_0x05a0:
            boolean r1 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r1 == 0) goto L_0x05ef
            if (r0 == 0) goto L_0x05cb
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "need get diff TL_updatesCombined, seq: "
            r0.append(r1)
            org.telegram.messenger.MessagesStorage r1 = r26.getMessagesStorage()
            int r1 = r1.getLastSeqValue()
            r0.append(r1)
            r0.append(r15)
            int r1 = r7.seq_start
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
            goto L_0x05ef
        L_0x05cb:
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "need get diff TL_updates, seq: "
            r0.append(r1)
            org.telegram.messenger.MessagesStorage r1 = r26.getMessagesStorage()
            int r1 = r1.getLastSeqValue()
            r0.append(r1)
            r0.append(r15)
            int r1 = r7.seq
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x05ef:
            boolean r0 = r6.gettingDifference
            if (r0 != 0) goto L_0x0610
            long r0 = r6.updatesStartWaitTimeSeq
            r2 = 0
            int r4 = (r0 > r2 ? 1 : (r0 == r2 ? 0 : -1))
            if (r4 == 0) goto L_0x0610
            long r0 = java.lang.System.currentTimeMillis()
            long r2 = r6.updatesStartWaitTimeSeq
            long r0 = r0 - r2
            long r0 = java.lang.Math.abs(r0)
            r2 = 1500(0x5dc, double:7.41E-321)
            int r4 = (r0 > r2 ? 1 : (r0 == r2 ? 0 : -1))
            if (r4 > 0) goto L_0x060d
            goto L_0x0610
        L_0x060d:
            r8 = r9
            r10 = 1
            goto L_0x0634
        L_0x0610:
            long r0 = r6.updatesStartWaitTimeSeq
            r2 = 0
            int r4 = (r0 > r2 ? 1 : (r0 == r2 ? 0 : -1))
            if (r4 != 0) goto L_0x061e
            long r0 = java.lang.System.currentTimeMillis()
            r6.updatesStartWaitTimeSeq = r0
        L_0x061e:
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0627
            java.lang.String r0 = "add TL_updates/Combined to queue"
            org.telegram.messenger.FileLog.d(r0)
        L_0x0627:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Updates> r0 = r6.updatesQueueSeq
            r0.add(r7)
        L_0x062c:
            r8 = r9
            r10 = r22
            goto L_0x0634
        L_0x0630:
            r10 = r0
            r8 = 0
            r16 = 0
        L_0x0634:
            r1 = r16
            r9 = 0
            goto L_0x09a7
        L_0x0639:
            r23 = r12
            if (r0 == 0) goto L_0x0640
            long r0 = r7.from_id
            goto L_0x0642
        L_0x0640:
            long r0 = r7.user_id
        L_0x0642:
            r3 = r0
            java.lang.Long r0 = java.lang.Long.valueOf(r3)
            org.telegram.tgnet.TLRPC$User r0 = r6.getUser(r0)
            if (r0 == 0) goto L_0x0651
            boolean r1 = r0.min
            if (r1 == 0) goto L_0x0664
        L_0x0651:
            org.telegram.messenger.MessagesStorage r0 = r26.getMessagesStorage()
            org.telegram.tgnet.TLRPC$User r0 = r0.getUserSync(r3)
            if (r0 == 0) goto L_0x0660
            boolean r1 = r0.min
            if (r1 == 0) goto L_0x0660
            r0 = 0
        L_0x0660:
            r1 = 1
            r6.putUser(r0, r1)
        L_0x0664:
            org.telegram.tgnet.TLRPC$MessageFwdHeader r1 = r7.fwd_from
            if (r1 == 0) goto L_0x06d7
            org.telegram.tgnet.TLRPC$Peer r1 = r1.from_id
            boolean r2 = r1 instanceof org.telegram.tgnet.TLRPC$TL_peerUser
            if (r2 == 0) goto L_0x068f
            long r1 = r1.user_id
            java.lang.Long r1 = java.lang.Long.valueOf(r1)
            org.telegram.tgnet.TLRPC$User r1 = r6.getUser(r1)
            if (r1 != 0) goto L_0x068c
            org.telegram.messenger.MessagesStorage r1 = r26.getMessagesStorage()
            org.telegram.tgnet.TLRPC$MessageFwdHeader r2 = r7.fwd_from
            org.telegram.tgnet.TLRPC$Peer r2 = r2.from_id
            long r9 = r2.user_id
            org.telegram.tgnet.TLRPC$User r1 = r1.getUserSync(r9)
            r2 = 1
            r6.putUser(r1, r2)
        L_0x068c:
            r2 = 0
        L_0x068d:
            r5 = 1
            goto L_0x06da
        L_0x068f:
            boolean r2 = r1 instanceof org.telegram.tgnet.TLRPC$TL_peerChannel
            if (r2 == 0) goto L_0x06b4
            long r1 = r1.channel_id
            java.lang.Long r1 = java.lang.Long.valueOf(r1)
            org.telegram.tgnet.TLRPC$Chat r1 = r6.getChat(r1)
            if (r1 != 0) goto L_0x06b1
            org.telegram.messenger.MessagesStorage r1 = r26.getMessagesStorage()
            org.telegram.tgnet.TLRPC$MessageFwdHeader r2 = r7.fwd_from
            org.telegram.tgnet.TLRPC$Peer r2 = r2.from_id
            long r9 = r2.channel_id
            org.telegram.tgnet.TLRPC$Chat r1 = r1.getChatSync(r9)
            r2 = 1
            r6.putChat(r1, r2)
        L_0x06b1:
            r2 = r1
            r1 = 0
            goto L_0x068d
        L_0x06b4:
            boolean r2 = r1 instanceof org.telegram.tgnet.TLRPC$TL_peerChat
            if (r2 == 0) goto L_0x06d7
            long r1 = r1.chat_id
            java.lang.Long r1 = java.lang.Long.valueOf(r1)
            org.telegram.tgnet.TLRPC$Chat r1 = r6.getChat(r1)
            if (r1 != 0) goto L_0x06b1
            org.telegram.messenger.MessagesStorage r1 = r26.getMessagesStorage()
            org.telegram.tgnet.TLRPC$MessageFwdHeader r2 = r7.fwd_from
            org.telegram.tgnet.TLRPC$Peer r2 = r2.from_id
            long r9 = r2.chat_id
            org.telegram.tgnet.TLRPC$Chat r1 = r1.getChatSync(r9)
            r2 = 1
            r6.putChat(r1, r2)
            goto L_0x06b1
        L_0x06d7:
            r1 = 0
            r2 = 0
            r5 = 0
        L_0x06da:
            long r9 = r7.via_bot_id
            r12 = 0
            int r14 = (r9 > r12 ? 1 : (r9 == r12 ? 0 : -1))
            if (r14 == 0) goto L_0x06fc
            java.lang.Long r9 = java.lang.Long.valueOf(r9)
            org.telegram.tgnet.TLRPC$User r9 = r6.getUser(r9)
            if (r9 != 0) goto L_0x06fa
            org.telegram.messenger.MessagesStorage r9 = r26.getMessagesStorage()
            long r12 = r7.via_bot_id
            org.telegram.tgnet.TLRPC$User r9 = r9.getUserSync(r12)
            r10 = 1
            r6.putUser(r9, r10)
        L_0x06fa:
            r10 = 1
            goto L_0x06fe
        L_0x06fc:
            r9 = 0
            r10 = 0
        L_0x06fe:
            boolean r12 = r7 instanceof org.telegram.tgnet.TLRPC$TL_updateShortMessage
            if (r12 == 0) goto L_0x0714
            if (r0 == 0) goto L_0x0711
            if (r5 == 0) goto L_0x070a
            if (r1 != 0) goto L_0x070a
            if (r2 == 0) goto L_0x0711
        L_0x070a:
            if (r10 == 0) goto L_0x070f
            if (r9 != 0) goto L_0x070f
            goto L_0x0711
        L_0x070f:
            r1 = 0
            goto L_0x0712
        L_0x0711:
            r1 = 1
        L_0x0712:
            r2 = r1
            goto L_0x0742
        L_0x0714:
            long r13 = r7.chat_id
            java.lang.Long r13 = java.lang.Long.valueOf(r13)
            org.telegram.tgnet.TLRPC$Chat r13 = r6.getChat(r13)
            if (r13 != 0) goto L_0x0731
            org.telegram.messenger.MessagesStorage r13 = r26.getMessagesStorage()
            r16 = r9
            long r8 = r7.chat_id
            org.telegram.tgnet.TLRPC$Chat r13 = r13.getChatSync(r8)
            r8 = 1
            r6.putChat(r13, r8)
            goto L_0x0733
        L_0x0731:
            r16 = r9
        L_0x0733:
            if (r13 == 0) goto L_0x0711
            if (r0 == 0) goto L_0x0711
            if (r5 == 0) goto L_0x073d
            if (r1 != 0) goto L_0x073d
            if (r2 == 0) goto L_0x0711
        L_0x073d:
            if (r10 == 0) goto L_0x070f
            if (r16 != 0) goto L_0x070f
            goto L_0x0711
        L_0x0742:
            if (r2 != 0) goto L_0x078d
            java.util.ArrayList<org.telegram.tgnet.TLRPC$MessageEntity> r1 = r7.entities
            boolean r1 = r1.isEmpty()
            if (r1 != 0) goto L_0x078d
            r1 = 0
        L_0x074d:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$MessageEntity> r5 = r7.entities
            int r5 = r5.size()
            if (r1 >= r5) goto L_0x078d
            java.util.ArrayList<org.telegram.tgnet.TLRPC$MessageEntity> r5 = r7.entities
            java.lang.Object r5 = r5.get(r1)
            org.telegram.tgnet.TLRPC$MessageEntity r5 = (org.telegram.tgnet.TLRPC$MessageEntity) r5
            boolean r8 = r5 instanceof org.telegram.tgnet.TLRPC$TL_messageEntityMentionName
            if (r8 == 0) goto L_0x078a
            org.telegram.tgnet.TLRPC$TL_messageEntityMentionName r5 = (org.telegram.tgnet.TLRPC$TL_messageEntityMentionName) r5
            long r8 = r5.user_id
            java.lang.Long r5 = java.lang.Long.valueOf(r8)
            org.telegram.tgnet.TLRPC$User r5 = r6.getUser(r5)
            if (r5 == 0) goto L_0x0773
            boolean r5 = r5.min
            if (r5 == 0) goto L_0x078a
        L_0x0773:
            org.telegram.messenger.MessagesStorage r5 = r26.getMessagesStorage()
            org.telegram.tgnet.TLRPC$User r5 = r5.getUserSync(r8)
            if (r5 == 0) goto L_0x0782
            boolean r8 = r5.min
            if (r8 == 0) goto L_0x0782
            r5 = 0
        L_0x0782:
            if (r5 != 0) goto L_0x0786
            r2 = 1
            goto L_0x078d
        L_0x0786:
            r5 = 1
            r6.putUser(r0, r5)
        L_0x078a:
            int r1 = r1 + 1
            goto L_0x074d
        L_0x078d:
            boolean r1 = r7.out
            if (r1 != 0) goto L_0x07c1
            if (r0 == 0) goto L_0x07c1
            org.telegram.tgnet.TLRPC$UserStatus r1 = r0.status
            if (r1 == 0) goto L_0x07c1
            int r1 = r1.expires
            if (r1 > 0) goto L_0x07c1
            org.telegram.tgnet.ConnectionsManager r1 = r26.getConnectionsManager()
            int r1 = r1.getCurrentTime()
            int r5 = r7.date
            int r1 = r1 - r5
            int r1 = java.lang.Math.abs(r1)
            r5 = 30
            if (r1 >= r5) goto L_0x07c1
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r6.onlinePrivacy
            long r8 = r0.id
            java.lang.Long r0 = java.lang.Long.valueOf(r8)
            int r5 = r7.date
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
            r1.put(r0, r5)
            r8 = 1
            goto L_0x07c2
        L_0x07c1:
            r8 = 0
        L_0x07c2:
            if (r2 == 0) goto L_0x07c7
        L_0x07c4:
            r10 = 1
            goto L_0x09a4
        L_0x07c7:
            org.telegram.messenger.MessagesStorage r0 = r26.getMessagesStorage()
            int r0 = r0.getLastPtsValue()
            int r1 = r7.pts_count
            int r0 = r0 + r1
            int r1 = r7.pts
            if (r0 != r1) goto L_0x092f
            org.telegram.tgnet.TLRPC$TL_message r0 = new org.telegram.tgnet.TLRPC$TL_message
            r0.<init>()
            int r1 = r7.id
            r0.id = r1
            org.telegram.messenger.UserConfig r1 = r26.getUserConfig()
            long r1 = r1.getClientUserId()
            if (r12 == 0) goto L_0x0805
            org.telegram.tgnet.TLRPC$TL_peerUser r5 = new org.telegram.tgnet.TLRPC$TL_peerUser
            r5.<init>()
            r0.from_id = r5
            boolean r9 = r7.out
            if (r9 == 0) goto L_0x07f7
            r5.user_id = r1
            goto L_0x07f9
        L_0x07f7:
            r5.user_id = r3
        L_0x07f9:
            org.telegram.tgnet.TLRPC$TL_peerUser r5 = new org.telegram.tgnet.TLRPC$TL_peerUser
            r5.<init>()
            r0.peer_id = r5
            r5.user_id = r3
            r0.dialog_id = r3
            goto L_0x081c
        L_0x0805:
            org.telegram.tgnet.TLRPC$TL_peerUser r5 = new org.telegram.tgnet.TLRPC$TL_peerUser
            r5.<init>()
            r0.from_id = r5
            r5.user_id = r3
            org.telegram.tgnet.TLRPC$TL_peerChat r5 = new org.telegram.tgnet.TLRPC$TL_peerChat
            r5.<init>()
            r0.peer_id = r5
            long r9 = r7.chat_id
            r5.chat_id = r9
            long r9 = -r9
            r0.dialog_id = r9
        L_0x081c:
            org.telegram.tgnet.TLRPC$MessageFwdHeader r5 = r7.fwd_from
            r0.fwd_from = r5
            boolean r5 = r7.silent
            r0.silent = r5
            boolean r5 = r7.out
            r0.out = r5
            boolean r5 = r7.mentioned
            r0.mentioned = r5
            boolean r5 = r7.media_unread
            r0.media_unread = r5
            java.util.ArrayList<org.telegram.tgnet.TLRPC$MessageEntity> r5 = r7.entities
            r0.entities = r5
            java.lang.String r5 = r7.message
            r0.message = r5
            int r5 = r7.date
            r0.date = r5
            long r9 = r7.via_bot_id
            r0.via_bot_id = r9
            int r5 = r7.flags
            r5 = r5 | 256(0x100, float:3.59E-43)
            r0.flags = r5
            org.telegram.tgnet.TLRPC$TL_messageReplyHeader r5 = r7.reply_to
            r0.reply_to = r5
            int r5 = r7.ttl_period
            r0.ttl_period = r5
            org.telegram.tgnet.TLRPC$TL_messageMediaEmpty r5 = new org.telegram.tgnet.TLRPC$TL_messageMediaEmpty
            r5.<init>()
            r0.media = r5
            boolean r5 = r0.out
            if (r5 == 0) goto L_0x085c
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r5 = r6.dialogs_read_outbox_max
            goto L_0x085e
        L_0x085c:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r5 = r6.dialogs_read_inbox_max
        L_0x085e:
            long r9 = r0.dialog_id
            java.lang.Long r9 = java.lang.Long.valueOf(r9)
            java.lang.Object r9 = r5.get(r9)
            java.lang.Integer r9 = (java.lang.Integer) r9
            if (r9 != 0) goto L_0x0885
            org.telegram.messenger.MessagesStorage r9 = r26.getMessagesStorage()
            boolean r10 = r0.out
            long r14 = r0.dialog_id
            int r9 = r9.getDialogReadMax(r10, r14)
            java.lang.Integer r9 = java.lang.Integer.valueOf(r9)
            long r10 = r0.dialog_id
            java.lang.Long r10 = java.lang.Long.valueOf(r10)
            r5.put(r10, r9)
        L_0x0885:
            int r5 = r9.intValue()
            int r9 = r0.id
            if (r5 >= r9) goto L_0x088f
            r5 = 1
            goto L_0x0890
        L_0x088f:
            r5 = 0
        L_0x0890:
            r0.unread = r5
            long r9 = r0.dialog_id
            int r5 = (r9 > r1 ? 1 : (r9 == r1 ? 0 : -1))
            if (r5 != 0) goto L_0x08a1
            r1 = 0
            r0.unread = r1
            r0.media_unread = r1
            r1 = 1
            r0.out = r1
            goto L_0x08a2
        L_0x08a1:
            r1 = 1
        L_0x08a2:
            org.telegram.messenger.MessagesStorage r2 = r26.getMessagesStorage()
            int r5 = r7.pts
            r2.setLastPtsValue(r5)
            java.util.ArrayList<java.lang.Long> r2 = r6.createdDialogIds
            long r9 = r0.dialog_id
            java.lang.Long r5 = java.lang.Long.valueOf(r9)
            boolean r2 = r2.contains(r5)
            org.telegram.messenger.MessageObject r9 = new org.telegram.messenger.MessageObject
            int r5 = r6.currentAccount
            r9.<init>(r5, r0, r2, r2)
            java.util.ArrayList r10 = new java.util.ArrayList
            r10.<init>()
            r10.add(r9)
            java.util.ArrayList r11 = new java.util.ArrayList
            r11.<init>()
            r11.add(r0)
            if (r12 == 0) goto L_0x08f1
            boolean r0 = r7.out
            if (r0 != 0) goto L_0x08de
            long r14 = r7.user_id
            boolean r0 = r6.updatePrintingUsersWithNewMessages(r14, r10)
            if (r0 == 0) goto L_0x08de
            r2 = 1
            goto L_0x08df
        L_0x08de:
            r2 = 0
        L_0x08df:
            if (r2 == 0) goto L_0x08e4
            r26.updatePrintingStrings()
        L_0x08e4:
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda186 r7 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda186
            r0 = r7
            r1 = r26
            r5 = r10
            r0.<init>(r1, r2, r3, r5)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r7)
            goto L_0x0905
        L_0x08f1:
            long r0 = r7.chat_id
            long r0 = -r0
            boolean r0 = r6.updatePrintingUsersWithNewMessages(r0, r10)
            if (r0 == 0) goto L_0x08fd
            r26.updatePrintingStrings()
        L_0x08fd:
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda188 r1 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda188
            r1.<init>(r6, r0, r7, r10)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r1)
        L_0x0905:
            boolean r0 = r9.isOut()
            if (r0 != 0) goto L_0x091b
            org.telegram.messenger.MessagesStorage r0 = r26.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r0 = r0.getStorageQueue()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda96 r1 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda96
            r1.<init>(r6, r10)
            r0.postRunnable(r1)
        L_0x091b:
            org.telegram.messenger.MessagesStorage r18 = r26.getMessagesStorage()
            r20 = 0
            r21 = 1
            r22 = 0
            r23 = 0
            r24 = 0
            r19 = r11
            r18.putMessages((java.util.ArrayList<org.telegram.tgnet.TLRPC$Message>) r19, (boolean) r20, (boolean) r21, (boolean) r22, (int) r23, (boolean) r24)
            goto L_0x09a3
        L_0x092f:
            r1 = 1
            org.telegram.messenger.MessagesStorage r0 = r26.getMessagesStorage()
            int r0 = r0.getLastPtsValue()
            int r2 = r7.pts
            if (r0 == r2) goto L_0x09a3
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x096c
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r2 = "need get diff short message, pts: "
            r0.append(r2)
            org.telegram.messenger.MessagesStorage r2 = r26.getMessagesStorage()
            int r2 = r2.getLastPtsValue()
            r0.append(r2)
            r0.append(r15)
            int r2 = r7.pts
            r0.append(r2)
            r0.append(r11)
            int r2 = r7.pts_count
            r0.append(r2)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x096c:
            boolean r0 = r6.gettingDifference
            if (r0 != 0) goto L_0x0989
            long r2 = r6.updatesStartWaitTimePts
            r4 = 0
            int r0 = (r2 > r4 ? 1 : (r2 == r4 ? 0 : -1))
            if (r0 == 0) goto L_0x0989
            long r2 = java.lang.System.currentTimeMillis()
            long r4 = r6.updatesStartWaitTimePts
            long r2 = r2 - r4
            long r2 = java.lang.Math.abs(r2)
            r4 = 1500(0x5dc, double:7.41E-321)
            int r0 = (r2 > r4 ? 1 : (r2 == r4 ? 0 : -1))
            if (r0 > 0) goto L_0x07c4
        L_0x0989:
            long r0 = r6.updatesStartWaitTimePts
            r2 = 0
            int r4 = (r0 > r2 ? 1 : (r0 == r2 ? 0 : -1))
            if (r4 != 0) goto L_0x0997
            long r0 = java.lang.System.currentTimeMillis()
            r6.updatesStartWaitTimePts = r0
        L_0x0997:
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x099e
            org.telegram.messenger.FileLog.d(r23)
        L_0x099e:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Updates> r0 = r6.updatesQueuePts
            r0.add(r7)
        L_0x09a3:
            r10 = 0
        L_0x09a4:
            r9 = r8
            goto L_0x0047
        L_0x09a7:
            org.telegram.messenger.SecretChatHelper r0 = r26.getSecretChatHelper()
            r0.processPendingEncMessages()
            if (r28 != 0) goto L_0x09e8
            r0 = 0
        L_0x09b1:
            androidx.collection.LongSparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Updates>> r2 = r6.updatesQueueChannels
            int r2 = r2.size()
            if (r0 >= r2) goto L_0x09d7
            androidx.collection.LongSparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Updates>> r2 = r6.updatesQueueChannels
            long r2 = r2.keyAt(r0)
            if (r8 == 0) goto L_0x09d0
            java.lang.Long r4 = java.lang.Long.valueOf(r2)
            boolean r4 = r8.contains(r4)
            if (r4 == 0) goto L_0x09d0
            r6.getChannelDifference(r2)
            r4 = 0
            goto L_0x09d4
        L_0x09d0:
            r4 = 0
            r6.processChannelsUpdatesQueue(r2, r4)
        L_0x09d4:
            int r0 = r0 + 1
            goto L_0x09b1
        L_0x09d7:
            r4 = 0
            if (r10 == 0) goto L_0x09de
            r26.getDifference()
            goto L_0x09e8
        L_0x09de:
            r0 = 0
        L_0x09df:
            r2 = 3
            if (r0 >= r2) goto L_0x09e8
            r6.processUpdatesQueue(r0, r4)
            int r0 = r0 + 1
            goto L_0x09df
        L_0x09e8:
            if (r1 == 0) goto L_0x0a02
            org.telegram.tgnet.TLRPC$TL_messages_receivedQueue r0 = new org.telegram.tgnet.TLRPC$TL_messages_receivedQueue
            r0.<init>()
            org.telegram.messenger.MessagesStorage r1 = r26.getMessagesStorage()
            int r1 = r1.getLastQtsValue()
            r0.max_qts = r1
            org.telegram.tgnet.ConnectionsManager r1 = r26.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda312 r2 = org.telegram.messenger.MessagesController$$ExternalSyntheticLambda312.INSTANCE
            r1.sendRequest(r0, r2)
        L_0x0a02:
            if (r9 == 0) goto L_0x0a0c
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda27 r0 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda27
            r0.<init>(r6)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r0)
        L_0x0a0c:
            org.telegram.messenger.MessagesStorage r0 = r26.getMessagesStorage()
            org.telegram.messenger.MessagesStorage r1 = r26.getMessagesStorage()
            int r1 = r1.getLastSeqValue()
            org.telegram.messenger.MessagesStorage r2 = r26.getMessagesStorage()
            int r2 = r2.getLastPtsValue()
            org.telegram.messenger.MessagesStorage r3 = r26.getMessagesStorage()
            int r3 = r3.getLastDateValue()
            org.telegram.messenger.MessagesStorage r4 = r26.getMessagesStorage()
            int r4 = r4.getLastQtsValue()
            r0.saveDiffParams(r1, r2, r3, r4)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.processUpdates(org.telegram.tgnet.TLRPC$Updates, boolean):void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdates$281(boolean z, long j, ArrayList arrayList) {
        if (z) {
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_USER_PRINT));
        }
        updateInterfaceWithMessages(j, arrayList, false);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdates$282(boolean z, TLRPC$Updates tLRPC$Updates, ArrayList arrayList) {
        if (z) {
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_USER_PRINT));
        }
        updateInterfaceWithMessages(-tLRPC$Updates.chat_id, arrayList, false);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdates$283(ArrayList arrayList) {
        getNotificationsController().processNewMessages(arrayList, true, false, (CountDownLatch) null);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdates$284(ArrayList arrayList) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda90(this, arrayList));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdates$286() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_STATUS));
    }

    private boolean applyFoldersUpdates(ArrayList<TLRPC$TL_updateFolderPeers> arrayList) {
        int i;
        if (arrayList == null) {
            return false;
        }
        int size = arrayList.size();
        int i2 = 0;
        boolean z = false;
        while (i2 < size) {
            TLRPC$TL_updateFolderPeers tLRPC$TL_updateFolderPeers = arrayList.get(i2);
            int size2 = tLRPC$TL_updateFolderPeers.folder_peers.size();
            for (int i3 = 0; i3 < size2; i3++) {
                TLRPC$TL_folderPeer tLRPC$TL_folderPeer = tLRPC$TL_updateFolderPeers.folder_peers.get(i3);
                TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(DialogObject.getPeerDialogId(tLRPC$TL_folderPeer.peer));
                if (!(tLRPC$Dialog == null || tLRPC$Dialog.folder_id == (i = tLRPC$TL_folderPeer.folder_id))) {
                    tLRPC$Dialog.pinned = false;
                    tLRPC$Dialog.pinnedNum = 0;
                    tLRPC$Dialog.folder_id = i;
                    ensureFolderDialogExists(i, (boolean[]) null);
                }
            }
            getMessagesStorage().setDialogsFolderId(arrayList.get(i2).folder_peers, (ArrayList<TLRPC$TL_inputFolderPeer>) null, 0, 0);
            i2++;
            z = true;
        }
        return z;
    }

    /* JADX WARNING: Code restructure failed: missing block: B:932:0x13ce, code lost:
        if (r1.action.user_id == r31) goto L_0x1223;
     */
    /* JADX WARNING: Removed duplicated region for block: B:1003:0x1519  */
    /* JADX WARNING: Removed duplicated region for block: B:1007:0x1526  */
    /* JADX WARNING: Removed duplicated region for block: B:1010:0x1543  */
    /* JADX WARNING: Removed duplicated region for block: B:1012:0x1548  */
    /* JADX WARNING: Removed duplicated region for block: B:1016:0x1551  */
    /* JADX WARNING: Removed duplicated region for block: B:1017:0x1558  */
    /* JADX WARNING: Removed duplicated region for block: B:1020:0x1563  */
    /* JADX WARNING: Removed duplicated region for block: B:1033:0x1590  */
    /* JADX WARNING: Removed duplicated region for block: B:1034:0x1596  */
    /* JADX WARNING: Removed duplicated region for block: B:1095:0x17a9  */
    /* JADX WARNING: Removed duplicated region for block: B:1100:0x17d0  */
    /* JADX WARNING: Removed duplicated region for block: B:1105:0x17fc  */
    /* JADX WARNING: Removed duplicated region for block: B:1110:0x1823  */
    /* JADX WARNING: Removed duplicated region for block: B:1115:0x1849  */
    /* JADX WARNING: Removed duplicated region for block: B:1143:0x1392 A[SYNTHETIC] */
    /* JADX WARNING: Removed duplicated region for block: B:810:0x119f  */
    /* JADX WARNING: Removed duplicated region for block: B:842:0x1264  */
    /* JADX WARNING: Removed duplicated region for block: B:851:0x128f  */
    /* JADX WARNING: Removed duplicated region for block: B:853:0x1293  */
    /* JADX WARNING: Removed duplicated region for block: B:886:0x1305  */
    /* JADX WARNING: Removed duplicated region for block: B:922:0x139c  */
    /* JADX WARNING: Removed duplicated region for block: B:939:0x13e6  */
    /* JADX WARNING: Removed duplicated region for block: B:955:0x142e  */
    /* JADX WARNING: Removed duplicated region for block: B:963:0x1450  */
    /* JADX WARNING: Removed duplicated region for block: B:964:0x1456  */
    /* JADX WARNING: Removed duplicated region for block: B:968:0x1461  */
    /* JADX WARNING: Removed duplicated region for block: B:979:0x14b5  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean processUpdateArray(java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r66, java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r67, java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r68, boolean r69, int r70) {
        /*
            r65 = this;
            r15 = r65
            r0 = r67
            r1 = r68
            boolean r2 = r66.isEmpty()
            r14 = 1
            if (r2 == 0) goto L_0x001a
            if (r0 != 0) goto L_0x0011
            if (r1 == 0) goto L_0x0019
        L_0x0011:
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda102 r2 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda102
            r2.<init>(r15, r0, r1)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r2)
        L_0x0019:
            return r14
        L_0x001a:
            long r2 = java.lang.System.currentTimeMillis()
            if (r0 == 0) goto L_0x003e
            j$.util.concurrent.ConcurrentHashMap r4 = new j$.util.concurrent.ConcurrentHashMap
            r4.<init>()
            int r5 = r67.size()
            r6 = 0
        L_0x002a:
            if (r6 >= r5) goto L_0x0040
            java.lang.Object r7 = r0.get(r6)
            org.telegram.tgnet.TLRPC$User r7 = (org.telegram.tgnet.TLRPC$User) r7
            long r8 = r7.id
            java.lang.Long r8 = java.lang.Long.valueOf(r8)
            r4.put(r8, r7)
            int r6 = r6 + 1
            goto L_0x002a
        L_0x003e:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, org.telegram.tgnet.TLRPC$User> r4 = r15.users
        L_0x0040:
            if (r1 == 0) goto L_0x0060
            j$.util.concurrent.ConcurrentHashMap r5 = new j$.util.concurrent.ConcurrentHashMap
            r5.<init>()
            int r6 = r68.size()
            r7 = 0
        L_0x004c:
            if (r7 >= r6) goto L_0x0062
            java.lang.Object r8 = r1.get(r7)
            org.telegram.tgnet.TLRPC$Chat r8 = (org.telegram.tgnet.TLRPC$Chat) r8
            long r9 = r8.id
            java.lang.Long r9 = java.lang.Long.valueOf(r9)
            r5.put(r9, r8)
            int r7 = r7 + 1
            goto L_0x004c
        L_0x0060:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, org.telegram.tgnet.TLRPC$Chat> r5 = r15.chats
        L_0x0062:
            r12 = r5
            if (r0 != 0) goto L_0x0067
            if (r1 == 0) goto L_0x006f
        L_0x0067:
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda103 r5 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda103
            r5.<init>(r15, r0, r1)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r5)
        L_0x006f:
            org.telegram.messenger.UserConfig r0 = r65.getUserConfig()
            long r0 = r0.getClientUserId()
            int r11 = r66.size()
            r16 = 0
            r67 = r0
            r30 = r2
            r0 = r16
            r1 = r0
            r2 = r1
            r3 = r2
            r5 = r3
            r6 = r5
            r7 = r6
            r8 = r7
            r9 = r8
            r10 = r9
            r13 = r10
            r18 = r13
            r19 = r18
            r20 = r19
            r21 = r20
            r22 = r21
            r23 = r22
            r24 = r23
            r27 = r24
            r29 = r27
            r35 = r29
            r37 = r35
            r38 = r37
            r39 = r38
            r40 = r39
            r14 = 0
            r17 = 0
            r26 = 0
        L_0x00ae:
            if (r14 >= r11) goto L_0x15c4
            r28 = r11
            r11 = r66
            java.lang.Object r32 = r11.get(r14)
            r33 = r5
            r5 = r32
            org.telegram.tgnet.TLRPC$Update r5 = (org.telegram.tgnet.TLRPC$Update) r5
            boolean r32 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r32 == 0) goto L_0x00db
            r32 = r6
            java.lang.StringBuilder r6 = new java.lang.StringBuilder
            r6.<init>()
            r34 = r8
            java.lang.String r8 = "process update "
            r6.append(r8)
            r6.append(r5)
            java.lang.String r6 = r6.toString()
            org.telegram.messenger.FileLog.d(r6)
            goto L_0x00df
        L_0x00db:
            r32 = r6
            r34 = r8
        L_0x00df:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateNewMessage
            java.lang.String r8 = " channelId = "
            r43 = r8
            r42 = r9
            if (r6 != 0) goto L_0x11ae
            boolean r8 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateNewChannelMessage
            if (r8 != 0) goto L_0x11ae
            boolean r8 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateNewScheduledMessage
            if (r8 == 0) goto L_0x00f3
            goto L_0x11ae
        L_0x00f3:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateReadMessagesContents
            if (r6 == 0) goto L_0x012e
            org.telegram.tgnet.TLRPC$TL_updateReadMessagesContents r5 = (org.telegram.tgnet.TLRPC$TL_updateReadMessagesContents) r5
            if (r13 != 0) goto L_0x0101
            androidx.collection.LongSparseArray r6 = new androidx.collection.LongSparseArray
            r6.<init>()
            r13 = r6
        L_0x0101:
            r8 = 0
            java.lang.Object r6 = r13.get(r8)
            java.util.ArrayList r6 = (java.util.ArrayList) r6
            if (r6 != 0) goto L_0x0113
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            r13.put(r8, r6)
        L_0x0113:
            java.util.ArrayList<java.lang.Integer> r5 = r5.messages
            r6.addAll(r5)
        L_0x0118:
            r36 = r0
        L_0x011a:
            r0 = r4
            r47 = r13
            r46 = r14
        L_0x011f:
            r6 = r32
            r5 = r33
            r8 = r34
            r9 = r42
            r13 = 0
        L_0x0128:
            r33 = r30
        L_0x012a:
            r31 = r67
            goto L_0x15b5
        L_0x012e:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateChannelReadMessagesContents
            if (r6 == 0) goto L_0x0155
            org.telegram.tgnet.TLRPC$TL_updateChannelReadMessagesContents r5 = (org.telegram.tgnet.TLRPC$TL_updateChannelReadMessagesContents) r5
            if (r13 != 0) goto L_0x013c
            androidx.collection.LongSparseArray r6 = new androidx.collection.LongSparseArray
            r6.<init>()
            r13 = r6
        L_0x013c:
            long r8 = r5.channel_id
            long r8 = -r8
            java.lang.Object r6 = r13.get(r8)
            java.util.ArrayList r6 = (java.util.ArrayList) r6
            if (r6 != 0) goto L_0x014f
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            r13.put(r8, r6)
        L_0x014f:
            java.util.ArrayList<java.lang.Integer> r5 = r5.messages
            r6.addAll(r5)
            goto L_0x0118
        L_0x0155:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateReadHistoryInbox
            if (r6 == 0) goto L_0x01b9
            org.telegram.tgnet.TLRPC$TL_updateReadHistoryInbox r5 = (org.telegram.tgnet.TLRPC$TL_updateReadHistoryInbox) r5
            if (r0 != 0) goto L_0x0162
            org.telegram.messenger.support.LongSparseIntArray r0 = new org.telegram.messenger.support.LongSparseIntArray
            r0.<init>()
        L_0x0162:
            org.telegram.tgnet.TLRPC$Peer r6 = r5.peer
            long r8 = r6.chat_id
            r43 = 0
            int r36 = (r8 > r43 ? 1 : (r8 == r43 ? 0 : -1))
            if (r36 == 0) goto L_0x0178
            long r8 = -r8
            int r6 = r5.max_id
            r0.put(r8, r6)
            org.telegram.tgnet.TLRPC$Peer r6 = r5.peer
            long r8 = r6.chat_id
            long r8 = -r8
            goto L_0x0183
        L_0x0178:
            long r8 = r6.user_id
            int r6 = r5.max_id
            r0.put(r8, r6)
            org.telegram.tgnet.TLRPC$Peer r6 = r5.peer
            long r8 = r6.user_id
        L_0x0183:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r6 = r15.dialogs_read_inbox_max
            r36 = r0
            java.lang.Long r0 = java.lang.Long.valueOf(r8)
            java.lang.Object r0 = r6.get(r0)
            java.lang.Integer r0 = (java.lang.Integer) r0
            if (r0 != 0) goto L_0x01a0
            org.telegram.messenger.MessagesStorage r0 = r65.getMessagesStorage()
            r6 = 0
            int r0 = r0.getDialogReadMax(r6, r8)
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)
        L_0x01a0:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r6 = r15.dialogs_read_inbox_max
            java.lang.Long r8 = java.lang.Long.valueOf(r8)
            int r0 = r0.intValue()
            int r5 = r5.max_id
            int r0 = java.lang.Math.max(r0, r5)
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)
            r6.put(r8, r0)
            goto L_0x011a
        L_0x01b9:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateReadHistoryOutbox
            if (r6 == 0) goto L_0x0273
            org.telegram.tgnet.TLRPC$TL_updateReadHistoryOutbox r5 = (org.telegram.tgnet.TLRPC$TL_updateReadHistoryOutbox) r5
            if (r1 != 0) goto L_0x01c6
            org.telegram.messenger.support.LongSparseIntArray r1 = new org.telegram.messenger.support.LongSparseIntArray
            r1.<init>()
        L_0x01c6:
            org.telegram.tgnet.TLRPC$Peer r6 = r5.peer
            long r8 = r6.chat_id
            r43 = 0
            int r36 = (r8 > r43 ? 1 : (r8 == r43 ? 0 : -1))
            if (r36 == 0) goto L_0x01de
            long r8 = -r8
            int r6 = r5.max_id
            r1.put(r8, r6)
            org.telegram.tgnet.TLRPC$Peer r6 = r5.peer
            long r8 = r6.chat_id
            long r8 = -r8
            r36 = r1
            goto L_0x022d
        L_0x01de:
            long r8 = r6.user_id
            int r6 = r5.max_id
            r1.put(r8, r6)
            org.telegram.tgnet.TLRPC$Peer r6 = r5.peer
            long r8 = r6.user_id
            java.lang.Long r6 = java.lang.Long.valueOf(r8)
            org.telegram.tgnet.TLRPC$User r6 = r15.getUser(r6)
            if (r6 == 0) goto L_0x0227
            org.telegram.tgnet.TLRPC$UserStatus r6 = r6.status
            if (r6 == 0) goto L_0x0227
            int r6 = r6.expires
            if (r6 > 0) goto L_0x0227
            org.telegram.tgnet.ConnectionsManager r6 = r65.getConnectionsManager()
            int r6 = r6.getCurrentTime()
            int r6 = r6 - r70
            int r6 = java.lang.Math.abs(r6)
            r36 = r1
            r1 = 30
            if (r6 >= r1) goto L_0x0229
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r15.onlinePrivacy
            org.telegram.tgnet.TLRPC$Peer r6 = r5.peer
            r43 = r8
            long r8 = r6.user_id
            java.lang.Long r6 = java.lang.Long.valueOf(r8)
            java.lang.Integer r8 = java.lang.Integer.valueOf(r70)
            r1.put(r6, r8)
            int r1 = UPDATE_MASK_STATUS
            r17 = r17 | r1
            goto L_0x022b
        L_0x0227:
            r36 = r1
        L_0x0229:
            r43 = r8
        L_0x022b:
            r8 = r43
        L_0x022d:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r15.dialogs_read_outbox_max
            java.lang.Long r6 = java.lang.Long.valueOf(r8)
            java.lang.Object r1 = r1.get(r6)
            java.lang.Integer r1 = (java.lang.Integer) r1
            if (r1 != 0) goto L_0x0248
            org.telegram.messenger.MessagesStorage r1 = r65.getMessagesStorage()
            r6 = 1
            int r1 = r1.getDialogReadMax(r6, r8)
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
        L_0x0248:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r6 = r15.dialogs_read_outbox_max
            java.lang.Long r8 = java.lang.Long.valueOf(r8)
            int r1 = r1.intValue()
            int r5 = r5.max_id
            int r1 = java.lang.Math.max(r1, r5)
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            r6.put(r8, r1)
            r47 = r13
            r46 = r14
            r6 = r32
            r5 = r33
            r8 = r34
            r1 = r36
            r9 = r42
            r13 = 0
            r36 = r0
            r0 = r4
            goto L_0x0128
        L_0x0273:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateDeleteMessages
            if (r6 == 0) goto L_0x0299
            org.telegram.tgnet.TLRPC$TL_updateDeleteMessages r5 = (org.telegram.tgnet.TLRPC$TL_updateDeleteMessages) r5
            if (r2 != 0) goto L_0x0280
            androidx.collection.LongSparseArray r2 = new androidx.collection.LongSparseArray
            r2.<init>()
        L_0x0280:
            r8 = 0
            java.lang.Object r6 = r2.get(r8)
            java.util.ArrayList r6 = (java.util.ArrayList) r6
            if (r6 != 0) goto L_0x0292
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            r2.put(r8, r6)
        L_0x0292:
            java.util.ArrayList<java.lang.Integer> r5 = r5.messages
            r6.addAll(r5)
            goto L_0x0118
        L_0x0299:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateDeleteScheduledMessages
            if (r6 == 0) goto L_0x02d0
            org.telegram.tgnet.TLRPC$TL_updateDeleteScheduledMessages r5 = (org.telegram.tgnet.TLRPC$TL_updateDeleteScheduledMessages) r5
            if (r3 != 0) goto L_0x02a6
            androidx.collection.LongSparseArray r3 = new androidx.collection.LongSparseArray
            r3.<init>()
        L_0x02a6:
            org.telegram.tgnet.TLRPC$Peer r6 = r5.peer
            long r8 = org.telegram.messenger.MessageObject.getPeerId(r6)
            org.telegram.tgnet.TLRPC$Peer r6 = r5.peer
            r47 = r13
            r46 = r14
            long r13 = org.telegram.messenger.MessageObject.getPeerId(r6)
            java.lang.Object r6 = r3.get(r13)
            java.util.ArrayList r6 = (java.util.ArrayList) r6
            if (r6 != 0) goto L_0x02c6
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            r3.put(r8, r6)
        L_0x02c6:
            java.util.ArrayList<java.lang.Integer> r5 = r5.messages
            r6.addAll(r5)
            r36 = r0
            r0 = r4
            goto L_0x011f
        L_0x02d0:
            r47 = r13
            r46 = r14
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateUserTyping
            if (r6 != 0) goto L_0x0fd5
            boolean r8 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateChatUserTyping
            if (r8 != 0) goto L_0x0fd5
            boolean r8 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateChannelUserTyping
            if (r8 == 0) goto L_0x02e2
            goto L_0x0fd5
        L_0x02e2:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateChatParticipants
            if (r6 == 0) goto L_0x0302
            org.telegram.tgnet.TLRPC$TL_updateChatParticipants r5 = (org.telegram.tgnet.TLRPC$TL_updateChatParticipants) r5
            int r6 = UPDATE_MASK_CHAT_MEMBERS
            r17 = r17 | r6
            if (r22 != 0) goto L_0x02f4
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x02f6
        L_0x02f4:
            r6 = r22
        L_0x02f6:
            org.telegram.tgnet.TLRPC$ChatParticipants r5 = r5.participants
            r6.add(r5)
            r36 = r0
            r0 = r4
            r22 = r6
            goto L_0x011f
        L_0x0302:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateUserStatus
            if (r6 == 0) goto L_0x031e
            int r6 = UPDATE_MASK_STATUS
            r17 = r17 | r6
            if (r18 != 0) goto L_0x0312
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x0314
        L_0x0312:
            r6 = r18
        L_0x0314:
            r6.add(r5)
        L_0x0317:
            r36 = r0
            r0 = r4
            r18 = r6
            goto L_0x011f
        L_0x031e:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateUserName
            if (r6 == 0) goto L_0x0334
            int r6 = UPDATE_MASK_NAME
            r17 = r17 | r6
            if (r18 != 0) goto L_0x032e
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x0330
        L_0x032e:
            r6 = r18
        L_0x0330:
            r6.add(r5)
            goto L_0x0317
        L_0x0334:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateUserPhoto
            if (r6 == 0) goto L_0x0356
            r6 = r5
            org.telegram.tgnet.TLRPC$TL_updateUserPhoto r6 = (org.telegram.tgnet.TLRPC$TL_updateUserPhoto) r6
            int r8 = UPDATE_MASK_AVATAR
            r17 = r17 | r8
            org.telegram.messenger.MessagesStorage r8 = r65.getMessagesStorage()
            long r13 = r6.user_id
            r8.clearUserPhotos(r13)
            if (r18 != 0) goto L_0x0350
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x0352
        L_0x0350:
            r6 = r18
        L_0x0352:
            r6.add(r5)
            goto L_0x0317
        L_0x0356:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateUserPhone
            if (r6 == 0) goto L_0x036c
            int r6 = UPDATE_MASK_PHONE
            r17 = r17 | r6
            if (r18 != 0) goto L_0x0366
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x0368
        L_0x0366:
            r6 = r18
        L_0x0368:
            r6.add(r5)
            goto L_0x0317
        L_0x036c:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updatePeerSettings
            if (r6 == 0) goto L_0x03f9
            r6 = r5
            org.telegram.tgnet.TLRPC$TL_updatePeerSettings r6 = (org.telegram.tgnet.TLRPC$TL_updatePeerSettings) r6
            if (r7 != 0) goto L_0x037a
            java.util.ArrayList r7 = new java.util.ArrayList
            r7.<init>()
        L_0x037a:
            org.telegram.tgnet.TLRPC$Peer r8 = r6.peer
            boolean r9 = r8 instanceof org.telegram.tgnet.TLRPC$TL_peerUser
            if (r9 == 0) goto L_0x03ea
            long r8 = r8.user_id
            java.lang.Long r8 = java.lang.Long.valueOf(r8)
            java.lang.Object r8 = r4.get(r8)
            org.telegram.tgnet.TLRPC$User r8 = (org.telegram.tgnet.TLRPC$User) r8
            if (r8 == 0) goto L_0x03ea
            boolean r8 = r8.contact
            r9 = -1
            if (r8 == 0) goto L_0x03bf
            org.telegram.tgnet.TLRPC$Peer r8 = r6.peer
            long r13 = r8.user_id
            long r13 = -r13
            java.lang.Long r8 = java.lang.Long.valueOf(r13)
            int r8 = r7.indexOf(r8)
            if (r8 == r9) goto L_0x03a5
            r7.remove(r8)
        L_0x03a5:
            org.telegram.tgnet.TLRPC$Peer r8 = r6.peer
            long r8 = r8.user_id
            java.lang.Long r8 = java.lang.Long.valueOf(r8)
            boolean r8 = r7.contains(r8)
            if (r8 != 0) goto L_0x03ea
            org.telegram.tgnet.TLRPC$Peer r6 = r6.peer
            long r8 = r6.user_id
            java.lang.Long r6 = java.lang.Long.valueOf(r8)
            r7.add(r6)
            goto L_0x03ea
        L_0x03bf:
            org.telegram.tgnet.TLRPC$Peer r8 = r6.peer
            long r13 = r8.user_id
            java.lang.Long r8 = java.lang.Long.valueOf(r13)
            int r8 = r7.indexOf(r8)
            if (r8 == r9) goto L_0x03d0
            r7.remove(r8)
        L_0x03d0:
            org.telegram.tgnet.TLRPC$Peer r8 = r6.peer
            long r8 = r8.user_id
            java.lang.Long r8 = java.lang.Long.valueOf(r8)
            boolean r8 = r7.contains(r8)
            if (r8 != 0) goto L_0x03ea
            org.telegram.tgnet.TLRPC$Peer r6 = r6.peer
            long r8 = r6.user_id
            long r8 = -r8
            java.lang.Long r6 = java.lang.Long.valueOf(r8)
            r7.add(r6)
        L_0x03ea:
            if (r18 != 0) goto L_0x03f2
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x03f4
        L_0x03f2:
            r6 = r18
        L_0x03f4:
            r6.add(r5)
            goto L_0x0317
        L_0x03f9:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateNewEncryptedMessage
            if (r6 == 0) goto L_0x04f4
            org.telegram.messenger.SecretChatHelper r6 = r65.getSecretChatHelper()
            org.telegram.tgnet.TLRPC$TL_updateNewEncryptedMessage r5 = (org.telegram.tgnet.TLRPC$TL_updateNewEncryptedMessage) r5
            org.telegram.tgnet.TLRPC$EncryptedMessage r8 = r5.message
            java.util.ArrayList r13 = r6.decryptMessage(r8)
            if (r13 == 0) goto L_0x04d5
            boolean r6 = r13.isEmpty()
            if (r6 != 0) goto L_0x04d5
            org.telegram.tgnet.TLRPC$EncryptedMessage r5 = r5.message
            int r5 = r5.chat_id
            long r5 = (long) r5
            long r8 = org.telegram.messenger.DialogObject.makeEncryptedDialogId(r5)
            if (r10 != 0) goto L_0x0423
            androidx.collection.LongSparseArray r5 = new androidx.collection.LongSparseArray
            r5.<init>()
            r14 = r5
            goto L_0x0424
        L_0x0423:
            r14 = r10
        L_0x0424:
            java.lang.Object r5 = r14.get(r8)
            java.util.ArrayList r5 = (java.util.ArrayList) r5
            if (r5 != 0) goto L_0x0434
            java.util.ArrayList r5 = new java.util.ArrayList
            r5.<init>()
            r14.put(r8, r5)
        L_0x0434:
            r10 = r5
            int r6 = r13.size()
            r5 = 0
        L_0x043a:
            if (r5 >= r6) goto L_0x04c4
            java.lang.Object r36 = r13.get(r5)
            r48 = r3
            r3 = r36
            org.telegram.tgnet.TLRPC$Message r3 = (org.telegram.tgnet.TLRPC$Message) r3
            org.telegram.messenger.ImageLoader.saveMessageThumbs(r3)
            if (r35 != 0) goto L_0x0450
            java.util.ArrayList r35 = new java.util.ArrayList
            r35.<init>()
        L_0x0450:
            r36 = r13
            r13 = r35
            r13.add(r3)
            r41 = r5
            java.util.ArrayList<java.lang.Long> r5 = r15.createdDialogIds
            r43 = r6
            java.lang.Long r6 = java.lang.Long.valueOf(r8)
            boolean r35 = r5.contains(r6)
            org.telegram.messenger.MessageObject r6 = new org.telegram.messenger.MessageObject
            int r5 = r15.currentAccount
            r44 = r14
            r14 = r33
            r33 = r41
            r41 = r5
            r5 = r6
            r45 = r13
            r49 = r14
            r13 = r32
            r32 = r43
            r14 = r6
            r6 = r41
            r50 = r7
            r7 = r3
            r51 = r8
            r3 = r34
            r8 = r4
            r53 = r3
            r3 = r42
            r9 = r12
            r42 = r13
            r13 = r10
            r10 = r35
            r11 = r35
            r5.<init>((int) r6, (org.telegram.tgnet.TLRPC$Message) r7, (java.util.AbstractMap<java.lang.Long, org.telegram.tgnet.TLRPC$User>) r8, (java.util.AbstractMap<java.lang.Long, org.telegram.tgnet.TLRPC$Chat>) r9, (boolean) r10, (boolean) r11)
            r13.add(r14)
            if (r27 != 0) goto L_0x049f
            java.util.ArrayList r5 = new java.util.ArrayList
            r5.<init>()
            goto L_0x04a1
        L_0x049f:
            r5 = r27
        L_0x04a1:
            r5.add(r14)
            int r6 = r33 + 1
            r11 = r66
            r27 = r5
            r5 = r6
            r10 = r13
            r6 = r32
            r13 = r36
            r32 = r42
            r14 = r44
            r35 = r45
            r33 = r49
            r7 = r50
            r8 = r51
            r34 = r53
            r42 = r3
            r3 = r48
            goto L_0x043a
        L_0x04c4:
            r48 = r3
            r50 = r7
            r44 = r14
            r49 = r33
            r53 = r34
            r3 = r42
            r42 = r32
            r10 = r44
            goto L_0x04e1
        L_0x04d5:
            r48 = r3
            r50 = r7
            r49 = r33
            r53 = r34
            r3 = r42
            r42 = r32
        L_0x04e1:
            r36 = r0
            r9 = r3
            r0 = r4
            r33 = r30
        L_0x04e7:
            r6 = r42
            r3 = r48
            r5 = r49
            r7 = r50
            r8 = r53
            r13 = 0
            goto L_0x012a
        L_0x04f4:
            r48 = r3
            r50 = r7
            r49 = r33
            r53 = r34
            r3 = r42
            r42 = r32
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateEncryptedChatTyping
            if (r6 == 0) goto L_0x05c4
            org.telegram.tgnet.TLRPC$TL_updateEncryptedChatTyping r5 = (org.telegram.tgnet.TLRPC$TL_updateEncryptedChatTyping) r5
            int r6 = r5.chat_id
            r7 = 1
            org.telegram.tgnet.TLRPC$EncryptedChat r6 = r15.getEncryptedChatDB(r6, r7)
            if (r6 == 0) goto L_0x05b6
            int r5 = r5.chat_id
            long r7 = (long) r5
            long r7 = org.telegram.messenger.DialogObject.makeEncryptedDialogId(r7)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, j$.util.concurrent.ConcurrentHashMap<java.lang.Integer, java.util.ArrayList<org.telegram.messenger.MessagesController$PrintingUser>>> r5 = r15.printingUsers
            java.lang.Long r9 = java.lang.Long.valueOf(r7)
            java.lang.Object r5 = r5.get(r9)
            j$.util.concurrent.ConcurrentHashMap r5 = (j$.util.concurrent.ConcurrentHashMap) r5
            if (r5 != 0) goto L_0x0532
            j$.util.concurrent.ConcurrentHashMap r5 = new j$.util.concurrent.ConcurrentHashMap
            r5.<init>()
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, j$.util.concurrent.ConcurrentHashMap<java.lang.Integer, java.util.ArrayList<org.telegram.messenger.MessagesController$PrintingUser>>> r9 = r15.printingUsers
            java.lang.Long r7 = java.lang.Long.valueOf(r7)
            r9.put(r7, r5)
        L_0x0532:
            r7 = 0
            java.lang.Integer r8 = java.lang.Integer.valueOf(r7)
            java.lang.Object r8 = r5.get(r8)
            java.util.ArrayList r8 = (java.util.ArrayList) r8
            if (r8 != 0) goto L_0x054b
            java.util.ArrayList r8 = new java.util.ArrayList
            r8.<init>()
            java.lang.Integer r9 = java.lang.Integer.valueOf(r7)
            r5.put(r9, r8)
        L_0x054b:
            int r5 = r8.size()
            r7 = 0
        L_0x0550:
            if (r7 >= r5) goto L_0x0576
            java.lang.Object r9 = r8.get(r7)
            org.telegram.messenger.MessagesController$PrintingUser r9 = (org.telegram.messenger.MessagesController.PrintingUser) r9
            long r13 = r9.userId
            r32 = r10
            long r10 = r6.user_id
            int r33 = (r13 > r10 ? 1 : (r13 == r10 ? 0 : -1))
            if (r33 != 0) goto L_0x056f
            r13 = r30
            r9.lastTime = r13
            org.telegram.tgnet.TLRPC$TL_sendMessageTypingAction r5 = new org.telegram.tgnet.TLRPC$TL_sendMessageTypingAction
            r5.<init>()
            r9.action = r5
            r5 = 1
            goto L_0x057b
        L_0x056f:
            r13 = r30
            int r7 = r7 + 1
            r10 = r32
            goto L_0x0550
        L_0x0576:
            r32 = r10
            r13 = r30
            r5 = 0
        L_0x057b:
            if (r5 != 0) goto L_0x0594
            org.telegram.messenger.MessagesController$PrintingUser r5 = new org.telegram.messenger.MessagesController$PrintingUser
            r5.<init>()
            long r9 = r6.user_id
            r5.userId = r9
            r5.lastTime = r13
            org.telegram.tgnet.TLRPC$TL_sendMessageTypingAction r7 = new org.telegram.tgnet.TLRPC$TL_sendMessageTypingAction
            r7.<init>()
            r5.action = r7
            r8.add(r5)
            r26 = 1
        L_0x0594:
            org.telegram.tgnet.ConnectionsManager r5 = r65.getConnectionsManager()
            int r5 = r5.getCurrentTime()
            int r5 = r5 - r70
            int r5 = java.lang.Math.abs(r5)
            r7 = 30
            if (r5 >= r7) goto L_0x05ba
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r5 = r15.onlinePrivacy
            long r6 = r6.user_id
            java.lang.Long r6 = java.lang.Long.valueOf(r6)
            java.lang.Integer r7 = java.lang.Integer.valueOf(r70)
            r5.put(r6, r7)
            goto L_0x05ba
        L_0x05b6:
            r32 = r10
            r13 = r30
        L_0x05ba:
            r36 = r0
            r9 = r3
            r0 = r4
        L_0x05be:
            r33 = r13
        L_0x05c0:
            r10 = r32
            goto L_0x04e7
        L_0x05c4:
            r32 = r10
            r13 = r30
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateEncryptedMessagesRead
            if (r6 == 0) goto L_0x05f5
            org.telegram.tgnet.TLRPC$TL_updateEncryptedMessagesRead r5 = (org.telegram.tgnet.TLRPC$TL_updateEncryptedMessagesRead) r5
            r11 = r38
            if (r11 != 0) goto L_0x05d8
            android.util.SparseIntArray r6 = new android.util.SparseIntArray
            r6.<init>()
            r11 = r6
        L_0x05d8:
            int r6 = r5.chat_id
            int r7 = r5.max_date
            r11.put(r6, r7)
            r10 = r40
            if (r10 != 0) goto L_0x05e9
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            r10 = r6
        L_0x05e9:
            r10.add(r5)
            r36 = r0
            r9 = r3
            r0 = r4
            r40 = r10
            r38 = r11
            goto L_0x05be
        L_0x05f5:
            r11 = r38
            r10 = r40
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateChatParticipantAdd
            if (r6 == 0) goto L_0x0632
            org.telegram.tgnet.TLRPC$TL_updateChatParticipantAdd r5 = (org.telegram.tgnet.TLRPC$TL_updateChatParticipantAdd) r5
            org.telegram.messenger.MessagesStorage r54 = r65.getMessagesStorage()
            long r6 = r5.chat_id
            long r8 = r5.user_id
            r59 = 0
            r31 = r10
            r30 = r11
            long r10 = r5.inviter_id
            int r5 = r5.version
            r55 = r6
            r57 = r8
            r60 = r10
            r62 = r5
            r54.updateChatInfo(r55, r57, r59, r60, r62)
        L_0x061c:
            r40 = r3
            r10 = r13
            r38 = r30
            r63 = r31
            r14 = r32
            r31 = r67
            r67 = r0
            r68 = r1
            r0 = r4
            r30 = r27
            r27 = r2
            goto L_0x1223
        L_0x0632:
            r31 = r10
            r30 = r11
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateChatParticipantDelete
            if (r6 == 0) goto L_0x0654
            org.telegram.tgnet.TLRPC$TL_updateChatParticipantDelete r5 = (org.telegram.tgnet.TLRPC$TL_updateChatParticipantDelete) r5
            org.telegram.messenger.MessagesStorage r54 = r65.getMessagesStorage()
            long r6 = r5.chat_id
            long r8 = r5.user_id
            r59 = 1
            r60 = 0
            int r5 = r5.version
            r55 = r6
            r57 = r8
            r62 = r5
            r54.updateChatInfo(r55, r57, r59, r60, r62)
            goto L_0x061c
        L_0x0654:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateDcOptions
            if (r6 != 0) goto L_0x0fba
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateConfig
            if (r6 == 0) goto L_0x065e
            goto L_0x0fba
        L_0x065e:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateEncryption
            if (r6 == 0) goto L_0x066c
            org.telegram.messenger.SecretChatHelper r6 = r65.getSecretChatHelper()
            org.telegram.tgnet.TLRPC$TL_updateEncryption r5 = (org.telegram.tgnet.TLRPC$TL_updateEncryption) r5
            r6.processUpdateEncryption(r5, r4)
            goto L_0x061c
        L_0x066c:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updatePeerBlocked
            if (r6 == 0) goto L_0x0683
            org.telegram.tgnet.TLRPC$TL_updatePeerBlocked r5 = (org.telegram.tgnet.TLRPC$TL_updatePeerBlocked) r5
            org.telegram.messenger.MessagesStorage r6 = r65.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r6 = r6.getStorageQueue()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda158 r7 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda158
            r7.<init>(r15, r5)
            r6.postRunnable(r7)
            goto L_0x061c
        L_0x0683:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateNotifySettings
            if (r6 == 0) goto L_0x06a2
            if (r18 != 0) goto L_0x068f
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x0691
        L_0x068f:
            r6 = r18
        L_0x0691:
            r6.add(r5)
            r36 = r0
            r9 = r3
            r0 = r4
            r18 = r6
            r33 = r13
            r38 = r30
            r40 = r31
            goto L_0x05c0
        L_0x06a2:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateServiceNotification
            if (r6 == 0) goto L_0x07aa
            org.telegram.tgnet.TLRPC$TL_updateServiceNotification r5 = (org.telegram.tgnet.TLRPC$TL_updateServiceNotification) r5
            boolean r6 = r5.popup
            if (r6 == 0) goto L_0x06be
            java.lang.String r6 = r5.message
            if (r6 == 0) goto L_0x06be
            int r6 = r6.length()
            if (r6 <= 0) goto L_0x06be
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda160 r6 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda160
            r6.<init>(r15, r5)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r6)
        L_0x06be:
            int r6 = r5.flags
            r7 = 2
            r6 = r6 & r7
            if (r6 == 0) goto L_0x0797
            org.telegram.tgnet.TLRPC$TL_message r11 = new org.telegram.tgnet.TLRPC$TL_message
            r11.<init>()
            org.telegram.messenger.UserConfig r6 = r65.getUserConfig()
            int r6 = r6.getNewMessageId()
            r11.id = r6
            r11.local_id = r6
            org.telegram.messenger.UserConfig r6 = r65.getUserConfig()
            r7 = 0
            r6.saveConfig(r7)
            r6 = 1
            r11.unread = r6
            r6 = 256(0x100, float:3.59E-43)
            r11.flags = r6
            int r6 = r5.inbox_date
            if (r6 == 0) goto L_0x06eb
            r11.date = r6
            goto L_0x06f5
        L_0x06eb:
            long r6 = java.lang.System.currentTimeMillis()
            r8 = 1000(0x3e8, double:4.94E-321)
            long r6 = r6 / r8
            int r7 = (int) r6
            r11.date = r7
        L_0x06f5:
            org.telegram.tgnet.TLRPC$TL_peerUser r6 = new org.telegram.tgnet.TLRPC$TL_peerUser
            r6.<init>()
            r11.from_id = r6
            r7 = 777000(0xbdb28, double:3.83889E-318)
            r6.user_id = r7
            org.telegram.tgnet.TLRPC$TL_peerUser r6 = new org.telegram.tgnet.TLRPC$TL_peerUser
            r6.<init>()
            r11.peer_id = r6
            org.telegram.messenger.UserConfig r9 = r65.getUserConfig()
            long r9 = r9.getClientUserId()
            r6.user_id = r9
            r11.dialog_id = r7
            org.telegram.tgnet.TLRPC$MessageMedia r6 = r5.media
            if (r6 == 0) goto L_0x0720
            r11.media = r6
            int r6 = r11.flags
            r6 = r6 | 512(0x200, float:7.175E-43)
            r11.flags = r6
        L_0x0720:
            java.lang.String r6 = r5.message
            r11.message = r6
            java.util.ArrayList<org.telegram.tgnet.TLRPC$MessageEntity> r5 = r5.entities
            if (r5 == 0) goto L_0x0730
            r11.entities = r5
            int r5 = r11.flags
            r5 = r5 | 128(0x80, float:1.794E-43)
            r11.flags = r5
        L_0x0730:
            if (r35 != 0) goto L_0x0739
            java.util.ArrayList r5 = new java.util.ArrayList
            r5.<init>()
            r10 = r5
            goto L_0x073b
        L_0x0739:
            r10 = r35
        L_0x073b:
            r10.add(r11)
            java.util.ArrayList<java.lang.Long> r5 = r15.createdDialogIds
            long r6 = r11.dialog_id
            java.lang.Long r6 = java.lang.Long.valueOf(r6)
            boolean r33 = r5.contains(r6)
            org.telegram.messenger.MessageObject r9 = new org.telegram.messenger.MessageObject
            int r6 = r15.currentAccount
            r5 = r9
            r7 = r11
            r8 = r4
            r51 = r13
            r13 = r9
            r9 = r12
            r35 = r10
            r63 = r31
            r14 = r32
            r10 = r33
            r38 = r30
            r30 = r4
            r4 = r11
            r11 = r33
            r5.<init>((int) r6, (org.telegram.tgnet.TLRPC$Message) r7, (java.util.AbstractMap<java.lang.Long, org.telegram.tgnet.TLRPC$User>) r8, (java.util.AbstractMap<java.lang.Long, org.telegram.tgnet.TLRPC$Chat>) r9, (boolean) r10, (boolean) r11)
            if (r14 != 0) goto L_0x0770
            androidx.collection.LongSparseArray r5 = new androidx.collection.LongSparseArray
            r5.<init>()
            r10 = r5
            goto L_0x0771
        L_0x0770:
            r10 = r14
        L_0x0771:
            long r5 = r4.dialog_id
            java.lang.Object r5 = r10.get(r5)
            java.util.ArrayList r5 = (java.util.ArrayList) r5
            if (r5 != 0) goto L_0x0785
            java.util.ArrayList r5 = new java.util.ArrayList
            r5.<init>()
            long r6 = r4.dialog_id
            r10.put(r6, r5)
        L_0x0785:
            r5.add(r13)
            r4 = r27
            if (r4 != 0) goto L_0x0791
            java.util.ArrayList r4 = new java.util.ArrayList
            r4.<init>()
        L_0x0791:
            r4.add(r13)
            r27 = r4
            goto L_0x07a4
        L_0x0797:
            r51 = r13
            r38 = r30
            r63 = r31
            r14 = r32
            r30 = r4
            r4 = r27
            r10 = r14
        L_0x07a4:
            r31 = r67
            r36 = r0
            r9 = r3
            goto L_0x07d1
        L_0x07aa:
            r51 = r13
            r38 = r30
            r63 = r31
            r14 = r32
            r30 = r4
            r4 = r27
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateDialogPinned
            if (r6 == 0) goto L_0x07df
            if (r18 != 0) goto L_0x07c2
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x07c4
        L_0x07c2:
            r6 = r18
        L_0x07c4:
            r6.add(r5)
        L_0x07c7:
            r31 = r67
            r36 = r0
            r9 = r3
            r27 = r4
            r18 = r6
        L_0x07d0:
            r10 = r14
        L_0x07d1:
            r0 = r30
            r6 = r42
        L_0x07d5:
            r3 = r48
            r5 = r49
        L_0x07d9:
            r7 = r50
            r33 = r51
            goto L_0x1238
        L_0x07df:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updatePinnedDialogs
            if (r6 == 0) goto L_0x07f1
            if (r18 != 0) goto L_0x07eb
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x07ed
        L_0x07eb:
            r6 = r18
        L_0x07ed:
            r6.add(r5)
            goto L_0x07c7
        L_0x07f1:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateFolderPeers
            if (r6 == 0) goto L_0x0809
            org.telegram.tgnet.TLRPC$TL_updateFolderPeers r5 = (org.telegram.tgnet.TLRPC$TL_updateFolderPeers) r5
            if (r3 != 0) goto L_0x07fe
            java.util.ArrayList r3 = new java.util.ArrayList
            r3.<init>()
        L_0x07fe:
            r9 = r3
            r9.add(r5)
            r31 = r67
            r36 = r0
            r27 = r4
            goto L_0x07d0
        L_0x0809:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updatePrivacy
            if (r6 == 0) goto L_0x081b
            if (r18 != 0) goto L_0x0815
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x0817
        L_0x0815:
            r6 = r18
        L_0x0817:
            r6.add(r5)
            goto L_0x07c7
        L_0x081b:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateWebPage
            if (r6 == 0) goto L_0x083c
            org.telegram.tgnet.TLRPC$TL_updateWebPage r5 = (org.telegram.tgnet.TLRPC$TL_updateWebPage) r5
            r13 = r37
            if (r13 != 0) goto L_0x082b
            androidx.collection.LongSparseArray r6 = new androidx.collection.LongSparseArray
            r6.<init>()
            r13 = r6
        L_0x082b:
            org.telegram.tgnet.TLRPC$WebPage r5 = r5.webpage
            long r6 = r5.id
            r13.put(r6, r5)
        L_0x0832:
            r31 = r67
            r36 = r0
            r9 = r3
            r27 = r4
        L_0x0839:
            r37 = r13
            goto L_0x07d0
        L_0x083c:
            r13 = r37
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateChannelWebPage
            if (r6 == 0) goto L_0x0854
            org.telegram.tgnet.TLRPC$TL_updateChannelWebPage r5 = (org.telegram.tgnet.TLRPC$TL_updateChannelWebPage) r5
            if (r13 != 0) goto L_0x084c
            androidx.collection.LongSparseArray r6 = new androidx.collection.LongSparseArray
            r6.<init>()
            r13 = r6
        L_0x084c:
            org.telegram.tgnet.TLRPC$WebPage r5 = r5.webpage
            long r6 = r5.id
            r13.put(r6, r5)
            goto L_0x0832
        L_0x0854:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateChannelTooLong
            if (r6 == 0) goto L_0x08fd
            r6 = r5
            org.telegram.tgnet.TLRPC$TL_updateChannelTooLong r6 = (org.telegram.tgnet.TLRPC$TL_updateChannelTooLong) r6
            boolean r7 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r7 == 0) goto L_0x0878
            java.lang.StringBuilder r7 = new java.lang.StringBuilder
            r7.<init>()
            r7.append(r5)
            r8 = r43
            r7.append(r8)
            long r8 = r6.channel_id
            r7.append(r8)
            java.lang.String r5 = r7.toString()
            org.telegram.messenger.FileLog.d(r5)
        L_0x0878:
            org.telegram.messenger.support.LongSparseIntArray r5 = r15.channelsPts
            long r7 = r6.channel_id
            r9 = 0
            int r5 = r5.get(r7, r9)
            if (r5 != 0) goto L_0x08d2
            org.telegram.messenger.MessagesStorage r5 = r65.getMessagesStorage()
            long r7 = r6.channel_id
            int r5 = r5.getChannelPtsSync(r7)
            if (r5 != 0) goto L_0x08cb
            long r7 = r6.channel_id
            java.lang.Long r7 = java.lang.Long.valueOf(r7)
            java.lang.Object r7 = r12.get(r7)
            org.telegram.tgnet.TLRPC$Chat r7 = (org.telegram.tgnet.TLRPC$Chat) r7
            if (r7 == 0) goto L_0x08a1
            boolean r8 = r7.min
            if (r8 == 0) goto L_0x08ab
        L_0x08a1:
            long r7 = r6.channel_id
            java.lang.Long r7 = java.lang.Long.valueOf(r7)
            org.telegram.tgnet.TLRPC$Chat r7 = r15.getChat(r7)
        L_0x08ab:
            if (r7 == 0) goto L_0x08b1
            boolean r8 = r7.min
            if (r8 == 0) goto L_0x08bf
        L_0x08b1:
            org.telegram.messenger.MessagesStorage r7 = r65.getMessagesStorage()
            long r8 = r6.channel_id
            org.telegram.tgnet.TLRPC$Chat r7 = r7.getChatSync(r8)
            r8 = 1
            r15.putChat(r7, r8)
        L_0x08bf:
            if (r7 == 0) goto L_0x08d2
            boolean r8 = r7.min
            if (r8 != 0) goto L_0x08d2
            r8 = 0
            r15.loadUnknownChannel(r7, r8)
            goto L_0x08d2
        L_0x08cb:
            org.telegram.messenger.support.LongSparseIntArray r7 = r15.channelsPts
            long r8 = r6.channel_id
            r7.put(r8, r5)
        L_0x08d2:
            if (r5 == 0) goto L_0x08e9
            int r7 = r6.flags
            r8 = 1
            r7 = r7 & r8
            if (r7 == 0) goto L_0x08e4
            int r7 = r6.pts
            if (r7 <= r5) goto L_0x08e9
            long r5 = r6.channel_id
            r15.getChannelDifference(r5)
            goto L_0x08e9
        L_0x08e4:
            long r5 = r6.channel_id
            r15.getChannelDifference(r5)
        L_0x08e9:
            r31 = r67
            r67 = r0
            r68 = r1
            r27 = r2
            r40 = r3
        L_0x08f3:
            r37 = r13
            r0 = r30
            r10 = r51
            r30 = r4
            goto L_0x1223
        L_0x08fd:
            r8 = r43
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateReadChannelInbox
            if (r6 == 0) goto L_0x0948
            org.telegram.tgnet.TLRPC$TL_updateReadChannelInbox r5 = (org.telegram.tgnet.TLRPC$TL_updateReadChannelInbox) r5
            if (r0 != 0) goto L_0x090c
            org.telegram.messenger.support.LongSparseIntArray r0 = new org.telegram.messenger.support.LongSparseIntArray
            r0.<init>()
        L_0x090c:
            long r6 = r5.channel_id
            long r6 = -r6
            int r8 = r5.max_id
            r0.put(r6, r8)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r8 = r15.dialogs_read_inbox_max
            java.lang.Long r9 = java.lang.Long.valueOf(r6)
            java.lang.Object r8 = r8.get(r9)
            java.lang.Integer r8 = (java.lang.Integer) r8
            if (r8 != 0) goto L_0x092f
            org.telegram.messenger.MessagesStorage r8 = r65.getMessagesStorage()
            r9 = 0
            int r8 = r8.getDialogReadMax(r9, r6)
            java.lang.Integer r8 = java.lang.Integer.valueOf(r8)
        L_0x092f:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r9 = r15.dialogs_read_inbox_max
            java.lang.Long r6 = java.lang.Long.valueOf(r6)
            int r7 = r8.intValue()
            int r5 = r5.max_id
            int r5 = java.lang.Math.max(r7, r5)
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
            r9.put(r6, r5)
            goto L_0x0832
        L_0x0948:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateReadChannelOutbox
            if (r6 == 0) goto L_0x09ad
            r6 = r5
            org.telegram.tgnet.TLRPC$TL_updateReadChannelOutbox r6 = (org.telegram.tgnet.TLRPC$TL_updateReadChannelOutbox) r6
            boolean r7 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r7 == 0) goto L_0x096a
            java.lang.StringBuilder r7 = new java.lang.StringBuilder
            r7.<init>()
            r7.append(r5)
            r7.append(r8)
            long r8 = r6.channel_id
            r7.append(r8)
            java.lang.String r5 = r7.toString()
            org.telegram.messenger.FileLog.d(r5)
        L_0x096a:
            if (r1 != 0) goto L_0x0971
            org.telegram.messenger.support.LongSparseIntArray r1 = new org.telegram.messenger.support.LongSparseIntArray
            r1.<init>()
        L_0x0971:
            long r7 = r6.channel_id
            long r7 = -r7
            int r5 = r6.max_id
            r1.put(r7, r5)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r5 = r15.dialogs_read_outbox_max
            java.lang.Long r9 = java.lang.Long.valueOf(r7)
            java.lang.Object r5 = r5.get(r9)
            java.lang.Integer r5 = (java.lang.Integer) r5
            if (r5 != 0) goto L_0x0994
            org.telegram.messenger.MessagesStorage r5 = r65.getMessagesStorage()
            r9 = 1
            int r5 = r5.getDialogReadMax(r9, r7)
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
        L_0x0994:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r9 = r15.dialogs_read_outbox_max
            java.lang.Long r7 = java.lang.Long.valueOf(r7)
            int r5 = r5.intValue()
            int r6 = r6.max_id
            int r5 = java.lang.Math.max(r5, r6)
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
            r9.put(r7, r5)
            goto L_0x0832
        L_0x09ad:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateDeleteChannelMessages
            if (r6 == 0) goto L_0x09f0
            r6 = r5
            org.telegram.tgnet.TLRPC$TL_updateDeleteChannelMessages r6 = (org.telegram.tgnet.TLRPC$TL_updateDeleteChannelMessages) r6
            boolean r7 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r7 == 0) goto L_0x09cf
            java.lang.StringBuilder r7 = new java.lang.StringBuilder
            r7.<init>()
            r7.append(r5)
            r7.append(r8)
            long r8 = r6.channel_id
            r7.append(r8)
            java.lang.String r5 = r7.toString()
            org.telegram.messenger.FileLog.d(r5)
        L_0x09cf:
            if (r2 != 0) goto L_0x09d6
            androidx.collection.LongSparseArray r2 = new androidx.collection.LongSparseArray
            r2.<init>()
        L_0x09d6:
            long r7 = r6.channel_id
            long r7 = -r7
            java.lang.Object r5 = r2.get(r7)
            java.util.ArrayList r5 = (java.util.ArrayList) r5
            if (r5 != 0) goto L_0x09e9
            java.util.ArrayList r5 = new java.util.ArrayList
            r5.<init>()
            r2.put(r7, r5)
        L_0x09e9:
            java.util.ArrayList<java.lang.Integer> r6 = r6.messages
            r5.addAll(r6)
            goto L_0x0832
        L_0x09f0:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateChannel
            if (r6 == 0) goto L_0x0a20
            boolean r6 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r6 == 0) goto L_0x0a12
            r6 = r5
            org.telegram.tgnet.TLRPC$TL_updateChannel r6 = (org.telegram.tgnet.TLRPC$TL_updateChannel) r6
            java.lang.StringBuilder r7 = new java.lang.StringBuilder
            r7.<init>()
            r7.append(r5)
            r7.append(r8)
            long r8 = r6.channel_id
            r7.append(r8)
            java.lang.String r6 = r7.toString()
            org.telegram.messenger.FileLog.d(r6)
        L_0x0a12:
            if (r18 != 0) goto L_0x0a1a
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x0a1c
        L_0x0a1a:
            r6 = r18
        L_0x0a1c:
            r6.add(r5)
            goto L_0x0a31
        L_0x0a20:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateChat
            if (r6 == 0) goto L_0x0a3c
            if (r18 != 0) goto L_0x0a2c
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x0a2e
        L_0x0a2c:
            r6 = r18
        L_0x0a2e:
            r6.add(r5)
        L_0x0a31:
            r31 = r67
            r36 = r0
            r9 = r3
            r27 = r4
            r18 = r6
            goto L_0x0839
        L_0x0a3c:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateChannelMessageViews
            if (r6 == 0) goto L_0x0a91
            r6 = r5
            org.telegram.tgnet.TLRPC$TL_updateChannelMessageViews r6 = (org.telegram.tgnet.TLRPC$TL_updateChannelMessageViews) r6
            boolean r7 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r7 == 0) goto L_0x0a5e
            java.lang.StringBuilder r7 = new java.lang.StringBuilder
            r7.<init>()
            r7.append(r5)
            r7.append(r8)
            long r8 = r6.channel_id
            r7.append(r8)
            java.lang.String r5 = r7.toString()
            org.telegram.messenger.FileLog.d(r5)
        L_0x0a5e:
            if (r42 != 0) goto L_0x0a66
            androidx.collection.LongSparseArray r5 = new androidx.collection.LongSparseArray
            r5.<init>()
            goto L_0x0a68
        L_0x0a66:
            r5 = r42
        L_0x0a68:
            long r7 = r6.channel_id
            long r7 = -r7
            java.lang.Object r9 = r5.get(r7)
            android.util.SparseIntArray r9 = (android.util.SparseIntArray) r9
            if (r9 != 0) goto L_0x0a7b
            android.util.SparseIntArray r9 = new android.util.SparseIntArray
            r9.<init>()
            r5.put(r7, r9)
        L_0x0a7b:
            int r7 = r6.id
            int r6 = r6.views
            r9.put(r7, r6)
            r31 = r67
            r36 = r0
            r9 = r3
            r27 = r4
            r6 = r5
            r37 = r13
            r10 = r14
            r0 = r30
            goto L_0x07d5
        L_0x0a91:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateChannelMessageForwards
            if (r6 == 0) goto L_0x0ae9
            r6 = r5
            org.telegram.tgnet.TLRPC$TL_updateChannelMessageForwards r6 = (org.telegram.tgnet.TLRPC$TL_updateChannelMessageForwards) r6
            boolean r7 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r7 == 0) goto L_0x0ab3
            java.lang.StringBuilder r7 = new java.lang.StringBuilder
            r7.<init>()
            r7.append(r5)
            r7.append(r8)
            long r8 = r6.channel_id
            r7.append(r8)
            java.lang.String r5 = r7.toString()
            org.telegram.messenger.FileLog.d(r5)
        L_0x0ab3:
            if (r49 != 0) goto L_0x0abb
            androidx.collection.LongSparseArray r5 = new androidx.collection.LongSparseArray
            r5.<init>()
            goto L_0x0abd
        L_0x0abb:
            r5 = r49
        L_0x0abd:
            long r7 = r6.channel_id
            long r7 = -r7
            java.lang.Object r9 = r5.get(r7)
            android.util.SparseIntArray r9 = (android.util.SparseIntArray) r9
            if (r9 != 0) goto L_0x0ad0
            android.util.SparseIntArray r9 = new android.util.SparseIntArray
            r9.<init>()
            r5.put(r7, r9)
        L_0x0ad0:
            int r7 = r6.id
            int r6 = r6.forwards
            r9.put(r7, r6)
            r31 = r67
            r36 = r0
            r9 = r3
            r27 = r4
            r37 = r13
            r10 = r14
            r0 = r30
            r6 = r42
            r3 = r48
            goto L_0x07d9
        L_0x0ae9:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateChatParticipantAdmin
            if (r6 == 0) goto L_0x0b11
            org.telegram.tgnet.TLRPC$TL_updateChatParticipantAdmin r5 = (org.telegram.tgnet.TLRPC$TL_updateChatParticipantAdmin) r5
            org.telegram.messenger.MessagesStorage r54 = r65.getMessagesStorage()
            long r6 = r5.chat_id
            long r8 = r5.user_id
            r59 = 2
            boolean r10 = r5.is_admin
            if (r10 == 0) goto L_0x0b02
            r10 = 1
            r60 = r10
            goto L_0x0b04
        L_0x0b02:
            r60 = 0
        L_0x0b04:
            int r5 = r5.version
            r55 = r6
            r57 = r8
            r62 = r5
            r54.updateChatInfo(r55, r57, r59, r60, r62)
            goto L_0x08e9
        L_0x0b11:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateChatDefaultBannedRights
            if (r6 == 0) goto L_0x0b3f
            r6 = r5
            org.telegram.tgnet.TLRPC$TL_updateChatDefaultBannedRights r6 = (org.telegram.tgnet.TLRPC$TL_updateChatDefaultBannedRights) r6
            org.telegram.tgnet.TLRPC$Peer r7 = r6.peer
            long r8 = r7.channel_id
            r10 = 0
            int r27 = (r8 > r10 ? 1 : (r8 == r10 ? 0 : -1))
            if (r27 == 0) goto L_0x0b23
            goto L_0x0b25
        L_0x0b23:
            long r8 = r7.chat_id
        L_0x0b25:
            org.telegram.messenger.MessagesStorage r7 = r65.getMessagesStorage()
            org.telegram.tgnet.TLRPC$TL_chatBannedRights r10 = r6.default_banned_rights
            int r6 = r6.version
            r7.updateChatDefaultBannedRights(r8, r10, r6)
            if (r18 != 0) goto L_0x0b38
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x0b3a
        L_0x0b38:
            r6 = r18
        L_0x0b3a:
            r6.add(r5)
            goto L_0x0a31
        L_0x0b3f:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateStickerSets
            if (r6 == 0) goto L_0x0b52
            if (r18 != 0) goto L_0x0b4b
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x0b4d
        L_0x0b4b:
            r6 = r18
        L_0x0b4d:
            r6.add(r5)
            goto L_0x0a31
        L_0x0b52:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateStickerSetsOrder
            if (r6 == 0) goto L_0x0b65
            if (r18 != 0) goto L_0x0b5e
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x0b60
        L_0x0b5e:
            r6 = r18
        L_0x0b60:
            r6.add(r5)
            goto L_0x0a31
        L_0x0b65:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateNewStickerSet
            if (r6 == 0) goto L_0x0b78
            if (r18 != 0) goto L_0x0b71
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x0b73
        L_0x0b71:
            r6 = r18
        L_0x0b73:
            r6.add(r5)
            goto L_0x0a31
        L_0x0b78:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateDraftMessage
            if (r6 == 0) goto L_0x0b8b
            if (r18 != 0) goto L_0x0b84
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x0b86
        L_0x0b84:
            r6 = r18
        L_0x0b86:
            r6.add(r5)
            goto L_0x0a31
        L_0x0b8b:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateSavedGifs
            if (r6 == 0) goto L_0x0b9e
            if (r18 != 0) goto L_0x0b97
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x0b99
        L_0x0b97:
            r6 = r18
        L_0x0b99:
            r6.add(r5)
            goto L_0x0a31
        L_0x0b9e:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateEditChannelMessage
            if (r6 != 0) goto L_0x0e2e
            boolean r7 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateEditMessage
            if (r7 == 0) goto L_0x0ba8
            goto L_0x0e2e
        L_0x0ba8:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updatePinnedChannelMessages
            if (r6 == 0) goto L_0x0be8
            r6 = r5
            org.telegram.tgnet.TLRPC$TL_updatePinnedChannelMessages r6 = (org.telegram.tgnet.TLRPC$TL_updatePinnedChannelMessages) r6
            boolean r7 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r7 == 0) goto L_0x0bca
            java.lang.StringBuilder r7 = new java.lang.StringBuilder
            r7.<init>()
            r7.append(r5)
            r7.append(r8)
            long r8 = r6.channel_id
            r7.append(r8)
            java.lang.String r5 = r7.toString()
            org.telegram.messenger.FileLog.d(r5)
        L_0x0bca:
            org.telegram.messenger.MessagesStorage r54 = r65.getMessagesStorage()
            long r7 = r6.channel_id
            long r7 = -r7
            java.util.ArrayList<java.lang.Integer> r5 = r6.messages
            boolean r6 = r6.pinned
            r59 = -1
            r60 = 0
            r61 = 0
            r62 = 0
            r55 = r7
            r57 = r5
            r58 = r6
            r54.updatePinnedMessages(r55, r57, r58, r59, r60, r61, r62)
            goto L_0x08e9
        L_0x0be8:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updatePinnedMessages
            if (r6 == 0) goto L_0x0c0d
            org.telegram.tgnet.TLRPC$TL_updatePinnedMessages r5 = (org.telegram.tgnet.TLRPC$TL_updatePinnedMessages) r5
            org.telegram.messenger.MessagesStorage r54 = r65.getMessagesStorage()
            org.telegram.tgnet.TLRPC$Peer r6 = r5.peer
            long r55 = org.telegram.messenger.MessageObject.getPeerId(r6)
            java.util.ArrayList<java.lang.Integer> r6 = r5.messages
            boolean r5 = r5.pinned
            r59 = -1
            r60 = 0
            r61 = 0
            r62 = 0
            r57 = r6
            r58 = r5
            r54.updatePinnedMessages(r55, r57, r58, r59, r60, r61, r62)
            goto L_0x08e9
        L_0x0c0d:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateReadFeaturedStickers
            if (r6 == 0) goto L_0x0CLASSNAME
            if (r18 != 0) goto L_0x0CLASSNAME
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x0c1b
        L_0x0CLASSNAME:
            r6 = r18
        L_0x0c1b:
            r6.add(r5)
            goto L_0x0a31
        L_0x0CLASSNAME:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updatePhoneCall
            if (r6 == 0) goto L_0x0CLASSNAME
            if (r18 != 0) goto L_0x0c2c
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x0c2e
        L_0x0c2c:
            r6 = r18
        L_0x0c2e:
            r6.add(r5)
            goto L_0x0a31
        L_0x0CLASSNAME:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateGroupCallParticipants
            if (r6 == 0) goto L_0x0CLASSNAME
            if (r18 != 0) goto L_0x0c3f
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x0CLASSNAME
        L_0x0c3f:
            r6 = r18
        L_0x0CLASSNAME:
            r6.add(r5)
            goto L_0x0a31
        L_0x0CLASSNAME:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateGroupCall
            if (r6 == 0) goto L_0x0CLASSNAME
            if (r18 != 0) goto L_0x0CLASSNAME
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x0CLASSNAME
        L_0x0CLASSNAME:
            r6 = r18
        L_0x0CLASSNAME:
            r6.add(r5)
            goto L_0x0a31
        L_0x0CLASSNAME:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateGroupCallConnection
            if (r6 == 0) goto L_0x0c5f
            goto L_0x08e9
        L_0x0c5f:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateBotCommands
            if (r6 == 0) goto L_0x0CLASSNAME
            if (r18 != 0) goto L_0x0c6b
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x0c6d
        L_0x0c6b:
            r6 = r18
        L_0x0c6d:
            r6.add(r5)
            goto L_0x0a31
        L_0x0CLASSNAME:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updatePhoneCallSignalingData
            if (r6 == 0) goto L_0x0CLASSNAME
            if (r18 != 0) goto L_0x0c7e
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x0CLASSNAME
        L_0x0c7e:
            r6 = r18
        L_0x0CLASSNAME:
            r6.add(r5)
            goto L_0x0a31
        L_0x0CLASSNAME:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateLangPack
            if (r6 == 0) goto L_0x0CLASSNAME
            org.telegram.tgnet.TLRPC$TL_updateLangPack r5 = (org.telegram.tgnet.TLRPC$TL_updateLangPack) r5
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda157 r6 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda157
            r6.<init>(r15, r5)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r6)
            goto L_0x08e9
        L_0x0CLASSNAME:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateLangPackTooLong
            if (r6 == 0) goto L_0x0ca9
            org.telegram.tgnet.TLRPC$TL_updateLangPackTooLong r5 = (org.telegram.tgnet.TLRPC$TL_updateLangPackTooLong) r5
            org.telegram.messenger.LocaleController r6 = org.telegram.messenger.LocaleController.getInstance()
            int r7 = r15.currentAccount
            java.lang.String r5 = r5.lang_code
            r8 = 0
            r6.reloadCurrentRemoteLocale(r7, r5, r8)
            goto L_0x08e9
        L_0x0ca9:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateFavedStickers
            if (r6 == 0) goto L_0x0cbc
            if (r18 != 0) goto L_0x0cb5
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x0cb7
        L_0x0cb5:
            r6 = r18
        L_0x0cb7:
            r6.add(r5)
            goto L_0x0a31
        L_0x0cbc:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateContactsReset
            if (r6 == 0) goto L_0x0ccf
            if (r18 != 0) goto L_0x0cc8
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x0cca
        L_0x0cc8:
            r6 = r18
        L_0x0cca:
            r6.add(r5)
            goto L_0x0a31
        L_0x0ccf:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateChannelAvailableMessages
            if (r6 == 0) goto L_0x0cfa
            org.telegram.tgnet.TLRPC$TL_updateChannelAvailableMessages r5 = (org.telegram.tgnet.TLRPC$TL_updateChannelAvailableMessages) r5
            r11 = r39
            if (r11 != 0) goto L_0x0cdf
            org.telegram.messenger.support.LongSparseIntArray r6 = new org.telegram.messenger.support.LongSparseIntArray
            r6.<init>()
            r11 = r6
        L_0x0cdf:
            long r6 = r5.channel_id
            long r6 = -r6
            r8 = 0
            int r9 = r11.get(r6, r8)
            if (r9 == 0) goto L_0x0ced
            int r8 = r5.available_min_id
            if (r9 >= r8) goto L_0x0cf2
        L_0x0ced:
            int r5 = r5.available_min_id
            r11.put(r6, r5)
        L_0x0cf2:
            r31 = r67
            r36 = r0
            r9 = r3
            r27 = r4
            goto L_0x0d16
        L_0x0cfa:
            r11 = r39
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateDialogUnreadMark
            if (r6 == 0) goto L_0x0d1a
            if (r18 != 0) goto L_0x0d08
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x0d0a
        L_0x0d08:
            r6 = r18
        L_0x0d0a:
            r6.add(r5)
        L_0x0d0d:
            r31 = r67
            r36 = r0
            r9 = r3
            r27 = r4
            r18 = r6
        L_0x0d16:
            r39 = r11
            goto L_0x0839
        L_0x0d1a:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateMessagePoll
            if (r6 == 0) goto L_0x0d63
            r6 = r5
            org.telegram.tgnet.TLRPC$TL_updateMessagePoll r6 = (org.telegram.tgnet.TLRPC$TL_updateMessagePoll) r6
            org.telegram.messenger.SendMessagesHelper r7 = r65.getSendMessagesHelper()
            long r8 = r6.poll_id
            long r7 = r7.getVoteSendTime(r8)
            long r9 = android.os.SystemClock.elapsedRealtime()
            long r9 = r9 - r7
            long r7 = java.lang.Math.abs(r9)
            r9 = 600(0x258, double:2.964E-321)
            int r27 = (r7 > r9 ? 1 : (r7 == r9 ? 0 : -1))
            if (r27 >= 0) goto L_0x0d48
        L_0x0d3a:
            r31 = r67
            r67 = r0
            r68 = r1
            r27 = r2
            r40 = r3
            r39 = r11
            goto L_0x08f3
        L_0x0d48:
            org.telegram.messenger.MessagesStorage r7 = r65.getMessagesStorage()
            long r8 = r6.poll_id
            org.telegram.tgnet.TLRPC$Poll r10 = r6.poll
            org.telegram.tgnet.TLRPC$PollResults r6 = r6.results
            r7.updateMessagePollResults(r8, r10, r6)
            if (r18 != 0) goto L_0x0d5d
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x0d5f
        L_0x0d5d:
            r6 = r18
        L_0x0d5f:
            r6.add(r5)
            goto L_0x0d0d
        L_0x0d63:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateMessageReactions
            if (r6 == 0) goto L_0x0d89
            r6 = r5
            org.telegram.tgnet.TLRPC$TL_updateMessageReactions r6 = (org.telegram.tgnet.TLRPC$TL_updateMessageReactions) r6
            org.telegram.tgnet.TLRPC$Peer r7 = r6.peer
            long r7 = org.telegram.messenger.MessageObject.getPeerId(r7)
            org.telegram.messenger.MessagesStorage r9 = r65.getMessagesStorage()
            int r10 = r6.msg_id
            org.telegram.tgnet.TLRPC$TL_messageReactions r6 = r6.reactions
            r9.updateMessageReactions(r7, r10, r6)
            if (r18 != 0) goto L_0x0d83
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x0d85
        L_0x0d83:
            r6 = r18
        L_0x0d85:
            r6.add(r5)
            goto L_0x0d0d
        L_0x0d89:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updatePeerLocated
            if (r6 == 0) goto L_0x0d9c
            if (r18 != 0) goto L_0x0d95
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x0d97
        L_0x0d95:
            r6 = r18
        L_0x0d97:
            r6.add(r5)
            goto L_0x0d0d
        L_0x0d9c:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateTheme
            if (r6 == 0) goto L_0x0daf
            if (r18 != 0) goto L_0x0da8
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x0daa
        L_0x0da8:
            r6 = r18
        L_0x0daa:
            r6.add(r5)
            goto L_0x0d0d
        L_0x0daf:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateGeoLiveViewed
            if (r6 == 0) goto L_0x0dbc
            org.telegram.messenger.LocationController r5 = r65.getLocationController()
            r5.setNewLocationEndWatchTime()
            goto L_0x0d3a
        L_0x0dbc:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateDialogFilter
            if (r6 == 0) goto L_0x0dcf
            if (r18 != 0) goto L_0x0dc8
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x0dca
        L_0x0dc8:
            r6 = r18
        L_0x0dca:
            r6.add(r5)
            goto L_0x0d0d
        L_0x0dcf:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateDialogFilterOrder
            if (r6 == 0) goto L_0x0de2
            if (r18 != 0) goto L_0x0ddb
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x0ddd
        L_0x0ddb:
            r6 = r18
        L_0x0ddd:
            r6.add(r5)
            goto L_0x0d0d
        L_0x0de2:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateDialogFilters
            if (r6 == 0) goto L_0x0df5
            if (r18 != 0) goto L_0x0dee
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x0df0
        L_0x0dee:
            r6 = r18
        L_0x0df0:
            r6.add(r5)
            goto L_0x0d0d
        L_0x0df5:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateReadChannelDiscussionInbox
            if (r6 == 0) goto L_0x0e08
            if (r18 != 0) goto L_0x0e01
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x0e03
        L_0x0e01:
            r6 = r18
        L_0x0e03:
            r6.add(r5)
            goto L_0x0d0d
        L_0x0e08:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateReadChannelDiscussionOutbox
            if (r6 == 0) goto L_0x0e1b
            if (r18 != 0) goto L_0x0e14
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x0e16
        L_0x0e14:
            r6 = r18
        L_0x0e16:
            r6.add(r5)
            goto L_0x0d0d
        L_0x0e1b:
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updatePeerHistoryTTL
            if (r6 == 0) goto L_0x0d3a
            if (r18 != 0) goto L_0x0e27
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            goto L_0x0e29
        L_0x0e27:
            r6 = r18
        L_0x0e29:
            r6.add(r5)
            goto L_0x0d0d
        L_0x0e2e:
            r11 = r39
            if (r6 == 0) goto L_0x0e69
            org.telegram.tgnet.TLRPC$TL_updateEditChannelMessage r5 = (org.telegram.tgnet.TLRPC$TL_updateEditChannelMessage) r5
            org.telegram.tgnet.TLRPC$Message r5 = r5.message
            org.telegram.tgnet.TLRPC$Peer r6 = r5.peer_id
            long r6 = r6.channel_id
            java.lang.Long r6 = java.lang.Long.valueOf(r6)
            java.lang.Object r6 = r12.get(r6)
            org.telegram.tgnet.TLRPC$Chat r6 = (org.telegram.tgnet.TLRPC$Chat) r6
            if (r6 != 0) goto L_0x0e52
            org.telegram.tgnet.TLRPC$Peer r6 = r5.peer_id
            long r6 = r6.channel_id
            java.lang.Long r6 = java.lang.Long.valueOf(r6)
            org.telegram.tgnet.TLRPC$Chat r6 = r15.getChat(r6)
        L_0x0e52:
            if (r6 != 0) goto L_0x0e65
            org.telegram.messenger.MessagesStorage r6 = r65.getMessagesStorage()
            org.telegram.tgnet.TLRPC$Peer r7 = r5.peer_id
            long r7 = r7.channel_id
            org.telegram.tgnet.TLRPC$Chat r6 = r6.getChatSync(r7)
            r7 = 1
            r15.putChat(r6, r7)
            goto L_0x0e66
        L_0x0e65:
            r7 = 1
        L_0x0e66:
            r31 = r67
            goto L_0x0e7d
        L_0x0e69:
            r7 = 1
            org.telegram.tgnet.TLRPC$TL_updateEditMessage r5 = (org.telegram.tgnet.TLRPC$TL_updateEditMessage) r5
            org.telegram.tgnet.TLRPC$Message r5 = r5.message
            long r8 = r5.dialog_id
            r31 = r67
            int r6 = (r8 > r31 ? 1 : (r8 == r31 ? 0 : -1))
            if (r6 != 0) goto L_0x0e7d
            r6 = 0
            r5.unread = r6
            r5.media_unread = r6
            r5.out = r7
        L_0x0e7d:
            r10 = r5
            boolean r5 = r10.out
            if (r5 != 0) goto L_0x0e91
            org.telegram.tgnet.TLRPC$Peer r5 = r10.from_id
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_peerUser
            if (r6 == 0) goto L_0x0e91
            long r5 = r5.user_id
            int r7 = (r5 > r31 ? 1 : (r5 == r31 ? 0 : -1))
            if (r7 != 0) goto L_0x0e91
            r5 = 1
            r10.out = r5
        L_0x0e91:
            if (r69 != 0) goto L_0x0ef9
            java.util.ArrayList<org.telegram.tgnet.TLRPC$MessageEntity> r5 = r10.entities
            int r5 = r5.size()
            r6 = 0
        L_0x0e9a:
            if (r6 >= r5) goto L_0x0ef9
            java.util.ArrayList<org.telegram.tgnet.TLRPC$MessageEntity> r7 = r10.entities
            java.lang.Object r7 = r7.get(r6)
            org.telegram.tgnet.TLRPC$MessageEntity r7 = (org.telegram.tgnet.TLRPC$MessageEntity) r7
            boolean r8 = r7 instanceof org.telegram.tgnet.TLRPC$TL_messageEntityMentionName
            if (r8 == 0) goto L_0x0eea
            org.telegram.tgnet.TLRPC$TL_messageEntityMentionName r7 = (org.telegram.tgnet.TLRPC$TL_messageEntityMentionName) r7
            long r7 = r7.user_id
            java.lang.Long r9 = java.lang.Long.valueOf(r7)
            r67 = r0
            r0 = r30
            java.lang.Object r9 = r0.get(r9)
            org.telegram.tgnet.TLRPC$User r9 = (org.telegram.tgnet.TLRPC$User) r9
            r68 = r1
            if (r9 == 0) goto L_0x0ec2
            boolean r1 = r9.min
            if (r1 == 0) goto L_0x0eca
        L_0x0ec2:
            java.lang.Long r1 = java.lang.Long.valueOf(r7)
            org.telegram.tgnet.TLRPC$User r9 = r15.getUser(r1)
        L_0x0eca:
            if (r9 == 0) goto L_0x0ed0
            boolean r1 = r9.min
            if (r1 == 0) goto L_0x0ee6
        L_0x0ed0:
            org.telegram.messenger.MessagesStorage r1 = r65.getMessagesStorage()
            org.telegram.tgnet.TLRPC$User r1 = r1.getUserSync(r7)
            if (r1 == 0) goto L_0x0ee1
            boolean r7 = r1.min
            if (r7 == 0) goto L_0x0ee1
            r9 = r16
            goto L_0x0ee2
        L_0x0ee1:
            r9 = r1
        L_0x0ee2:
            r1 = 1
            r15.putUser(r9, r1)
        L_0x0ee6:
            if (r9 != 0) goto L_0x0ef0
            r1 = 0
            return r1
        L_0x0eea:
            r67 = r0
            r68 = r1
            r0 = r30
        L_0x0ef0:
            int r6 = r6 + 1
            r1 = r68
            r30 = r0
            r0 = r67
            goto L_0x0e9a
        L_0x0ef9:
            r67 = r0
            r68 = r1
            r0 = r30
            org.telegram.messenger.MessageObject.getDialogId(r10)
            boolean r1 = r10.out
            if (r1 == 0) goto L_0x0var_
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r15.dialogs_read_outbox_max
            goto L_0x0f0b
        L_0x0var_:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r15.dialogs_read_inbox_max
        L_0x0f0b:
            long r5 = r10.dialog_id
            java.lang.Long r5 = java.lang.Long.valueOf(r5)
            java.lang.Object r5 = r1.get(r5)
            java.lang.Integer r5 = (java.lang.Integer) r5
            if (r5 != 0) goto L_0x0var_
            org.telegram.messenger.MessagesStorage r5 = r65.getMessagesStorage()
            boolean r6 = r10.out
            long r7 = r10.dialog_id
            int r5 = r5.getDialogReadMax(r6, r7)
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
            long r6 = r10.dialog_id
            java.lang.Long r6 = java.lang.Long.valueOf(r6)
            r1.put(r6, r5)
        L_0x0var_:
            int r1 = r5.intValue()
            int r5 = r10.id
            if (r1 >= r5) goto L_0x0f3c
            r1 = 1
            goto L_0x0f3d
        L_0x0f3c:
            r1 = 0
        L_0x0f3d:
            r10.unread = r1
            long r5 = r10.dialog_id
            int r1 = (r5 > r31 ? 1 : (r5 == r31 ? 0 : -1))
            if (r1 != 0) goto L_0x0f4d
            r1 = 1
            r10.out = r1
            r1 = 0
            r10.unread = r1
            r10.media_unread = r1
        L_0x0f4d:
            boolean r1 = r10.out
            if (r1 == 0) goto L_0x0f5b
            java.lang.String r1 = r10.message
            if (r1 != 0) goto L_0x0f5b
            java.lang.String r1 = ""
            r10.message = r1
            r10.attachPath = r1
        L_0x0f5b:
            org.telegram.messenger.ImageLoader.saveMessageThumbs(r10)
            java.util.ArrayList<java.lang.Long> r1 = r15.createdDialogIds
            long r5 = r10.dialog_id
            java.lang.Long r5 = java.lang.Long.valueOf(r5)
            boolean r1 = r1.contains(r5)
            org.telegram.messenger.MessageObject r9 = new org.telegram.messenger.MessageObject
            int r6 = r15.currentAccount
            r5 = r9
            r7 = r10
            r8 = r0
            r27 = r2
            r2 = r9
            r9 = r12
            r37 = r13
            r13 = r10
            r10 = r1
            r39 = r11
            r11 = r1
            r5.<init>((int) r6, (org.telegram.tgnet.TLRPC$Message) r7, (java.util.AbstractMap<java.lang.Long, org.telegram.tgnet.TLRPC$User>) r8, (java.util.AbstractMap<java.lang.Long, org.telegram.tgnet.TLRPC$Chat>) r9, (boolean) r10, (boolean) r11)
            if (r53 != 0) goto L_0x0var_
            androidx.collection.LongSparseArray r1 = new androidx.collection.LongSparseArray
            r1.<init>()
            r8 = r1
            goto L_0x0f8a
        L_0x0var_:
            r8 = r53
        L_0x0f8a:
            long r5 = r13.dialog_id
            java.lang.Object r1 = r8.get(r5)
            java.util.ArrayList r1 = (java.util.ArrayList) r1
            if (r1 != 0) goto L_0x0f9e
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            long r5 = r13.dialog_id
            r8.put(r5, r1)
        L_0x0f9e:
            r1.add(r2)
            r36 = r67
            r1 = r68
            r9 = r3
            r10 = r14
            r2 = r27
            r6 = r42
            r3 = r48
            r5 = r49
            r7 = r50
            r33 = r51
            r40 = r63
            r13 = 0
            r27 = r4
            goto L_0x15b5
        L_0x0fba:
            r51 = r13
            r38 = r30
            r63 = r31
            r14 = r32
            r31 = r67
            r67 = r0
            r68 = r1
            r0 = r4
            r4 = r27
            r27 = r2
            org.telegram.tgnet.ConnectionsManager r1 = r65.getConnectionsManager()
            r1.updateDcSettings()
            goto L_0x1028
        L_0x0fd5:
            r48 = r3
            r50 = r7
            r14 = r10
            r51 = r30
            r49 = r33
            r53 = r34
            r63 = r40
            r3 = r42
            r42 = r32
            r31 = r67
            r67 = r0
            r68 = r1
            r0 = r4
            r4 = r27
            r27 = r2
            boolean r1 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateChannelUserTyping
            if (r1 == 0) goto L_0x1014
            org.telegram.tgnet.TLRPC$TL_updateChannelUserTyping r5 = (org.telegram.tgnet.TLRPC$TL_updateChannelUserTyping) r5
            org.telegram.tgnet.TLRPC$Peer r1 = r5.from_id
            long r6 = r1.user_id
            r8 = 0
            int r2 = (r6 > r8 ? 1 : (r6 == r8 ? 0 : -1))
            if (r2 == 0) goto L_0x1002
            goto L_0x100d
        L_0x1002:
            long r6 = r1.channel_id
            int r2 = (r6 > r8 ? 1 : (r6 == r8 ? 0 : -1))
            if (r2 == 0) goto L_0x100a
            long r6 = -r6
            goto L_0x100d
        L_0x100a:
            long r1 = r1.chat_id
            long r6 = -r1
        L_0x100d:
            long r1 = r5.channel_id
            org.telegram.tgnet.TLRPC$SendMessageAction r8 = r5.action
            int r5 = r5.top_msg_id
            goto L_0x105e
        L_0x1014:
            if (r6 == 0) goto L_0x1034
            org.telegram.tgnet.TLRPC$TL_updateUserTyping r5 = (org.telegram.tgnet.TLRPC$TL_updateUserTyping) r5
            long r6 = r5.user_id
            org.telegram.tgnet.TLRPC$SendMessageAction r8 = r5.action
            boolean r1 = r8 instanceof org.telegram.tgnet.TLRPC$TL_sendMessageEmojiInteraction
            if (r1 == 0) goto L_0x1030
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda161 r1 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda161
            r1.<init>(r15, r5)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r1)
        L_0x1028:
            r40 = r3
            r30 = r4
            r10 = r51
            goto L_0x1223
        L_0x1030:
            r1 = 0
        L_0x1032:
            r5 = 0
            goto L_0x105e
        L_0x1034:
            org.telegram.tgnet.TLRPC$TL_updateChatUserTyping r5 = (org.telegram.tgnet.TLRPC$TL_updateChatUserTyping) r5
            long r1 = r5.chat_id
            org.telegram.tgnet.TLRPC$Peer r6 = r5.from_id
            long r7 = r6.user_id
            r9 = 0
            int r11 = (r7 > r9 ? 1 : (r7 == r9 ? 0 : -1))
            if (r11 == 0) goto L_0x1044
            r6 = r7
            goto L_0x104f
        L_0x1044:
            long r7 = r6.channel_id
            int r11 = (r7 > r9 ? 1 : (r7 == r9 ? 0 : -1))
            if (r11 == 0) goto L_0x104c
            long r6 = -r7
            goto L_0x104f
        L_0x104c:
            long r6 = r6.chat_id
            long r6 = -r6
        L_0x104f:
            org.telegram.tgnet.TLRPC$SendMessageAction r8 = r5.action
            boolean r9 = r8 instanceof org.telegram.tgnet.TLRPC$TL_sendMessageEmojiInteraction
            if (r9 == 0) goto L_0x1032
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda156 r1 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda156
            r1.<init>(r15, r5)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r1)
            goto L_0x1028
        L_0x105e:
            long r9 = -r1
            r33 = 0
            int r11 = (r9 > r33 ? 1 : (r9 == r33 ? 0 : -1))
            if (r11 != 0) goto L_0x1066
            r9 = r6
        L_0x1066:
            boolean r11 = r8 instanceof org.telegram.tgnet.TLRPC$TL_sendMessageHistoryImportAction
            if (r11 == 0) goto L_0x107e
            if (r20 != 0) goto L_0x1072
            org.telegram.messenger.support.LongSparseIntArray r1 = new org.telegram.messenger.support.LongSparseIntArray
            r1.<init>()
            goto L_0x1074
        L_0x1072:
            r1 = r20
        L_0x1074:
            org.telegram.tgnet.TLRPC$TL_sendMessageHistoryImportAction r8 = (org.telegram.tgnet.TLRPC$TL_sendMessageHistoryImportAction) r8
            int r2 = r8.progress
            r1.put(r9, r2)
            r20 = r1
            goto L_0x1028
        L_0x107e:
            org.telegram.messenger.UserConfig r11 = r65.getUserConfig()
            long r33 = r11.getClientUserId()
            int r11 = (r6 > r33 ? 1 : (r6 == r33 ? 0 : -1))
            if (r11 == 0) goto L_0x1028
            boolean r11 = r8 instanceof org.telegram.tgnet.TLRPC$TL_speakingInGroupCallAction
            if (r11 == 0) goto L_0x10c2
            r33 = 0
            int r5 = (r1 > r33 ? 1 : (r1 == r33 ? 0 : -1))
            if (r5 == 0) goto L_0x10bd
            if (r19 != 0) goto L_0x109c
            androidx.collection.LongSparseArray r5 = new androidx.collection.LongSparseArray
            r5.<init>()
            goto L_0x109e
        L_0x109c:
            r5 = r19
        L_0x109e:
            java.lang.Object r8 = r5.get(r1)
            java.util.ArrayList r8 = (java.util.ArrayList) r8
            if (r8 != 0) goto L_0x10ae
            java.util.ArrayList r8 = new java.util.ArrayList
            r8.<init>()
            r5.put(r1, r8)
        L_0x10ae:
            java.lang.Long r1 = java.lang.Long.valueOf(r6)
            r8.add(r1)
            r40 = r3
            r30 = r4
            r19 = r5
            goto L_0x1127
        L_0x10bd:
            r40 = r3
            r30 = r4
            goto L_0x1127
        L_0x10c2:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, j$.util.concurrent.ConcurrentHashMap<java.lang.Integer, java.util.ArrayList<org.telegram.messenger.MessagesController$PrintingUser>>> r1 = r15.printingUsers
            java.lang.Long r2 = java.lang.Long.valueOf(r9)
            java.lang.Object r1 = r1.get(r2)
            j$.util.concurrent.ConcurrentHashMap r1 = (j$.util.concurrent.ConcurrentHashMap) r1
            if (r1 == 0) goto L_0x10db
            java.lang.Integer r2 = java.lang.Integer.valueOf(r5)
            java.lang.Object r2 = r1.get(r2)
            java.util.ArrayList r2 = (java.util.ArrayList) r2
            goto L_0x10dd
        L_0x10db:
            r2 = r16
        L_0x10dd:
            boolean r11 = r8 instanceof org.telegram.tgnet.TLRPC$TL_sendMessageCancelAction
            if (r11 == 0) goto L_0x112a
            if (r2 == 0) goto L_0x10bd
            int r8 = r2.size()
            r11 = 0
        L_0x10e8:
            if (r11 >= r8) goto L_0x1107
            java.lang.Object r13 = r2.get(r11)
            org.telegram.messenger.MessagesController$PrintingUser r13 = (org.telegram.messenger.MessagesController.PrintingUser) r13
            r40 = r3
            r30 = r4
            long r3 = r13.userId
            int r13 = (r3 > r6 ? 1 : (r3 == r6 ? 0 : -1))
            if (r13 != 0) goto L_0x1100
            r2.remove(r11)
            r26 = 1
            goto L_0x110b
        L_0x1100:
            int r11 = r11 + 1
            r4 = r30
            r3 = r40
            goto L_0x10e8
        L_0x1107:
            r40 = r3
            r30 = r4
        L_0x110b:
            boolean r2 = r2.isEmpty()
            if (r2 == 0) goto L_0x1127
            java.lang.Integer r2 = java.lang.Integer.valueOf(r5)
            r1.remove(r2)
            boolean r1 = r1.isEmpty()
            if (r1 == 0) goto L_0x1127
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, j$.util.concurrent.ConcurrentHashMap<java.lang.Integer, java.util.ArrayList<org.telegram.messenger.MessagesController$PrintingUser>>> r1 = r15.printingUsers
            java.lang.Long r2 = java.lang.Long.valueOf(r9)
            r1.remove(r2)
        L_0x1127:
            r10 = r51
            goto L_0x118d
        L_0x112a:
            r40 = r3
            r30 = r4
            if (r1 != 0) goto L_0x113e
            j$.util.concurrent.ConcurrentHashMap r1 = new j$.util.concurrent.ConcurrentHashMap
            r1.<init>()
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, j$.util.concurrent.ConcurrentHashMap<java.lang.Integer, java.util.ArrayList<org.telegram.messenger.MessagesController$PrintingUser>>> r3 = r15.printingUsers
            java.lang.Long r4 = java.lang.Long.valueOf(r9)
            r3.put(r4, r1)
        L_0x113e:
            if (r2 != 0) goto L_0x114c
            java.util.ArrayList r2 = new java.util.ArrayList
            r2.<init>()
            java.lang.Integer r3 = java.lang.Integer.valueOf(r5)
            r1.put(r3, r2)
        L_0x114c:
            java.util.Iterator r1 = r2.iterator()
        L_0x1150:
            boolean r3 = r1.hasNext()
            if (r3 == 0) goto L_0x1178
            java.lang.Object r3 = r1.next()
            org.telegram.messenger.MessagesController$PrintingUser r3 = (org.telegram.messenger.MessagesController.PrintingUser) r3
            long r4 = r3.userId
            int r9 = (r4 > r6 ? 1 : (r4 == r6 ? 0 : -1))
            if (r9 != 0) goto L_0x1150
            r10 = r51
            r3.lastTime = r10
            org.telegram.tgnet.TLRPC$SendMessageAction r1 = r3.action
            java.lang.Class r1 = r1.getClass()
            java.lang.Class r4 = r8.getClass()
            if (r1 == r4) goto L_0x1174
            r26 = 1
        L_0x1174:
            r3.action = r8
            r1 = 1
            goto L_0x117b
        L_0x1178:
            r10 = r51
            r1 = 0
        L_0x117b:
            if (r1 != 0) goto L_0x118d
            org.telegram.messenger.MessagesController$PrintingUser r1 = new org.telegram.messenger.MessagesController$PrintingUser
            r1.<init>()
            r1.userId = r6
            r1.lastTime = r10
            r1.action = r8
            r2.add(r1)
            r26 = 1
        L_0x118d:
            org.telegram.tgnet.ConnectionsManager r1 = r65.getConnectionsManager()
            int r1 = r1.getCurrentTime()
            int r1 = r1 - r70
            int r1 = java.lang.Math.abs(r1)
            r2 = 30
            if (r1 >= r2) goto L_0x1223
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r15.onlinePrivacy
            java.lang.Long r2 = java.lang.Long.valueOf(r6)
            java.lang.Integer r3 = java.lang.Integer.valueOf(r70)
            r1.put(r2, r3)
            goto L_0x1223
        L_0x11ae:
            r48 = r3
            r50 = r7
            r47 = r13
            r46 = r14
            r49 = r33
            r53 = r34
            r63 = r40
            r40 = r42
            r8 = r43
            r14 = r10
            r10 = r30
            r42 = r32
            r31 = r67
            r67 = r0
            r68 = r1
            r0 = r4
            r30 = r27
            r27 = r2
            if (r6 == 0) goto L_0x11d8
            r1 = r5
            org.telegram.tgnet.TLRPC$TL_updateNewMessage r1 = (org.telegram.tgnet.TLRPC$TL_updateNewMessage) r1
            org.telegram.tgnet.TLRPC$Message r1 = r1.message
            goto L_0x121f
        L_0x11d8:
            boolean r1 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateNewScheduledMessage
            if (r1 == 0) goto L_0x11e2
            r1 = r5
            org.telegram.tgnet.TLRPC$TL_updateNewScheduledMessage r1 = (org.telegram.tgnet.TLRPC$TL_updateNewScheduledMessage) r1
            org.telegram.tgnet.TLRPC$Message r1 = r1.message
            goto L_0x121f
        L_0x11e2:
            r1 = r5
            org.telegram.tgnet.TLRPC$TL_updateNewChannelMessage r1 = (org.telegram.tgnet.TLRPC$TL_updateNewChannelMessage) r1
            org.telegram.tgnet.TLRPC$Message r1 = r1.message
            boolean r2 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r2 == 0) goto L_0x1204
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            r2.append(r5)
            r2.append(r8)
            org.telegram.tgnet.TLRPC$Peer r3 = r1.peer_id
            long r3 = r3.channel_id
            r2.append(r3)
            java.lang.String r2 = r2.toString()
            org.telegram.messenger.FileLog.d(r2)
        L_0x1204:
            boolean r2 = r1.out
            if (r2 != 0) goto L_0x121f
            org.telegram.tgnet.TLRPC$Peer r2 = r1.from_id
            boolean r3 = r2 instanceof org.telegram.tgnet.TLRPC$TL_peerUser
            if (r3 == 0) goto L_0x121f
            long r2 = r2.user_id
            org.telegram.messenger.UserConfig r4 = r65.getUserConfig()
            long r6 = r4.getClientUserId()
            int r4 = (r2 > r6 ? 1 : (r2 == r6 ? 0 : -1))
            if (r4 != 0) goto L_0x121f
            r2 = 1
            r1.out = r2
        L_0x121f:
            boolean r2 = r1 instanceof org.telegram.tgnet.TLRPC$TL_messageEmpty
            if (r2 == 0) goto L_0x123f
        L_0x1223:
            r36 = r67
            r1 = r68
            r33 = r10
            r10 = r14
            r2 = r27
            r27 = r30
            r9 = r40
            r6 = r42
            r3 = r48
            r5 = r49
            r7 = r50
        L_0x1238:
            r8 = r53
            r40 = r63
            r13 = 0
            goto L_0x15b5
        L_0x123f:
            org.telegram.tgnet.TLRPC$Peer r2 = r1.peer_id
            long r3 = r2.channel_id
            r44 = 0
            int r6 = (r3 > r44 ? 1 : (r3 == r44 ? 0 : -1))
            if (r6 == 0) goto L_0x124c
        L_0x1249:
            r6 = r44
            goto L_0x1260
        L_0x124c:
            long r3 = r2.chat_id
            int r6 = (r3 > r44 ? 1 : (r3 == r44 ? 0 : -1))
            if (r6 == 0) goto L_0x1253
            goto L_0x1249
        L_0x1253:
            long r2 = r2.user_id
            int r4 = (r2 > r44 ? 1 : (r2 == r44 ? 0 : -1))
            if (r4 == 0) goto L_0x125d
            r6 = r2
            r3 = r44
            goto L_0x1260
        L_0x125d:
            r3 = r44
            r6 = r3
        L_0x1260:
            int r2 = (r3 > r44 ? 1 : (r3 == r44 ? 0 : -1))
            if (r2 == 0) goto L_0x128f
            java.lang.Long r2 = java.lang.Long.valueOf(r3)
            java.lang.Object r2 = r12.get(r2)
            org.telegram.tgnet.TLRPC$Chat r2 = (org.telegram.tgnet.TLRPC$Chat) r2
            if (r2 == 0) goto L_0x1274
            boolean r8 = r2.min
            if (r8 == 0) goto L_0x127c
        L_0x1274:
            java.lang.Long r2 = java.lang.Long.valueOf(r3)
            org.telegram.tgnet.TLRPC$Chat r2 = r15.getChat(r2)
        L_0x127c:
            if (r2 == 0) goto L_0x1282
            boolean r8 = r2.min
            if (r8 == 0) goto L_0x1291
        L_0x1282:
            org.telegram.messenger.MessagesStorage r2 = r65.getMessagesStorage()
            org.telegram.tgnet.TLRPC$Chat r2 = r2.getChatSync(r3)
            r8 = 1
            r15.putChat(r2, r8)
            goto L_0x1291
        L_0x128f:
            r2 = r16
        L_0x1291:
            if (r69 != 0) goto L_0x1396
            r8 = 0
            int r13 = (r3 > r8 ? 1 : (r3 == r8 ? 0 : -1))
            if (r13 == 0) goto L_0x12b5
            if (r2 != 0) goto L_0x12b5
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x12b3
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "not found chat "
            r0.append(r1)
            r0.append(r3)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x12b3:
            r0 = 0
            return r0
        L_0x12b5:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$MessageEntity> r3 = r1.entities
            int r3 = r3.size()
            int r3 = r3 + 3
            r4 = 0
        L_0x12be:
            if (r4 >= r3) goto L_0x1396
            if (r4 == 0) goto L_0x12fd
            r8 = 1
            if (r4 != r8) goto L_0x12d7
            org.telegram.tgnet.TLRPC$Peer r6 = r1.from_id
            boolean r7 = r6 instanceof org.telegram.tgnet.TLRPC$TL_peerUser
            if (r7 == 0) goto L_0x12ce
            long r6 = r6.user_id
            goto L_0x12d0
        L_0x12ce:
            r6 = 0
        L_0x12d0:
            boolean r8 = r1.post
            if (r8 == 0) goto L_0x12fd
            r8 = 2
            r9 = 1
            goto L_0x12ff
        L_0x12d7:
            r8 = 2
            if (r4 != r8) goto L_0x12ea
            org.telegram.tgnet.TLRPC$MessageFwdHeader r6 = r1.fwd_from
            if (r6 == 0) goto L_0x12e7
            org.telegram.tgnet.TLRPC$Peer r6 = r6.from_id
            boolean r7 = r6 instanceof org.telegram.tgnet.TLRPC$TL_peerUser
            if (r7 == 0) goto L_0x12e7
            long r6 = r6.user_id
            goto L_0x12fe
        L_0x12e7:
            r6 = 0
            goto L_0x12fe
        L_0x12ea:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$MessageEntity> r6 = r1.entities
            int r7 = r4 + -3
            java.lang.Object r6 = r6.get(r7)
            org.telegram.tgnet.TLRPC$MessageEntity r6 = (org.telegram.tgnet.TLRPC$MessageEntity) r6
            boolean r7 = r6 instanceof org.telegram.tgnet.TLRPC$TL_messageEntityMentionName
            if (r7 == 0) goto L_0x12e7
            org.telegram.tgnet.TLRPC$TL_messageEntityMentionName r6 = (org.telegram.tgnet.TLRPC$TL_messageEntityMentionName) r6
            long r6 = r6.user_id
            goto L_0x12fe
        L_0x12fd:
            r8 = 2
        L_0x12fe:
            r9 = 0
        L_0x12ff:
            r33 = 0
            int r13 = (r6 > r33 ? 1 : (r6 == r33 ? 0 : -1))
            if (r13 <= 0) goto L_0x1392
            java.lang.Long r13 = java.lang.Long.valueOf(r6)
            java.lang.Object r13 = r0.get(r13)
            org.telegram.tgnet.TLRPC$User r13 = (org.telegram.tgnet.TLRPC$User) r13
            if (r13 == 0) goto L_0x1317
            if (r9 != 0) goto L_0x131f
            boolean r8 = r13.min
            if (r8 == 0) goto L_0x131f
        L_0x1317:
            java.lang.Long r8 = java.lang.Long.valueOf(r6)
            org.telegram.tgnet.TLRPC$User r13 = r15.getUser(r8)
        L_0x131f:
            if (r13 == 0) goto L_0x1327
            if (r9 != 0) goto L_0x133f
            boolean r8 = r13.min
            if (r8 == 0) goto L_0x133f
        L_0x1327:
            org.telegram.messenger.MessagesStorage r8 = r65.getMessagesStorage()
            org.telegram.tgnet.TLRPC$User r8 = r8.getUserSync(r6)
            if (r8 == 0) goto L_0x133a
            if (r9 != 0) goto L_0x133a
            boolean r9 = r8.min
            if (r9 == 0) goto L_0x133a
            r13 = r16
            goto L_0x133b
        L_0x133a:
            r13 = r8
        L_0x133b:
            r8 = 1
            r15.putUser(r13, r8)
        L_0x133f:
            if (r13 != 0) goto L_0x135b
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x1359
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "not found user "
            r0.append(r1)
            r0.append(r6)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x1359:
            r0 = 0
            return r0
        L_0x135b:
            boolean r8 = r1.out
            if (r8 != 0) goto L_0x1392
            r8 = 1
            if (r4 != r8) goto L_0x1392
            org.telegram.tgnet.TLRPC$UserStatus r8 = r13.status
            if (r8 == 0) goto L_0x1392
            int r8 = r8.expires
            if (r8 > 0) goto L_0x1392
            org.telegram.tgnet.ConnectionsManager r8 = r65.getConnectionsManager()
            int r8 = r8.getCurrentTime()
            int r9 = r1.date
            int r8 = r8 - r9
            int r8 = java.lang.Math.abs(r8)
            r9 = 30
            if (r8 >= r9) goto L_0x1392
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r8 = r15.onlinePrivacy
            java.lang.Long r13 = java.lang.Long.valueOf(r6)
            int r9 = r1.date
            java.lang.Integer r9 = java.lang.Integer.valueOf(r9)
            r8.put(r13, r9)
            int r8 = UPDATE_MASK_STATUS
            r8 = r17 | r8
            r17 = r8
        L_0x1392:
            int r4 = r4 + 1
            goto L_0x12be
        L_0x1396:
            org.telegram.tgnet.TLRPC$MessageAction r3 = r1.action
            boolean r4 = r3 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatDeleteUser
            if (r4 == 0) goto L_0x13d2
            long r3 = r3.user_id
            java.lang.Long r3 = java.lang.Long.valueOf(r3)
            java.lang.Object r3 = r0.get(r3)
            org.telegram.tgnet.TLRPC$User r3 = (org.telegram.tgnet.TLRPC$User) r3
            if (r3 == 0) goto L_0x13bc
            boolean r3 = r3.bot
            if (r3 == 0) goto L_0x13bc
            org.telegram.tgnet.TLRPC$TL_replyKeyboardHide r3 = new org.telegram.tgnet.TLRPC$TL_replyKeyboardHide
            r3.<init>()
            r1.reply_markup = r3
            int r3 = r1.flags
            r3 = r3 | 64
            r1.flags = r3
            goto L_0x13d2
        L_0x13bc:
            org.telegram.tgnet.TLRPC$Peer r3 = r1.from_id
            boolean r4 = r3 instanceof org.telegram.tgnet.TLRPC$TL_peerUser
            if (r4 == 0) goto L_0x13d2
            long r3 = r3.user_id
            int r6 = (r3 > r31 ? 1 : (r3 == r31 ? 0 : -1))
            if (r6 != 0) goto L_0x13d2
            org.telegram.tgnet.TLRPC$MessageAction r3 = r1.action
            long r3 = r3.user_id
            int r6 = (r3 > r31 ? 1 : (r3 == r31 ? 0 : -1))
            if (r6 != 0) goto L_0x13d2
            goto L_0x1223
        L_0x13d2:
            org.telegram.messenger.ImageLoader.saveMessageThumbs(r1)
            org.telegram.messenger.MessageObject.getDialogId(r1)
            boolean r3 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateNewChannelMessage
            if (r3 == 0) goto L_0x142e
            org.telegram.tgnet.TLRPC$TL_messageReplyHeader r3 = r1.reply_to
            if (r3 == 0) goto L_0x142e
            org.telegram.tgnet.TLRPC$MessageAction r3 = r1.action
            boolean r3 = r3 instanceof org.telegram.tgnet.TLRPC$TL_messageActionPinMessage
            if (r3 != 0) goto L_0x142e
            r13 = r23
            if (r13 != 0) goto L_0x13f0
            androidx.collection.LongSparseArray r3 = new androidx.collection.LongSparseArray
            r3.<init>()
            r13 = r3
        L_0x13f0:
            long r3 = r1.dialog_id
            java.lang.Object r3 = r13.get(r3)
            android.util.SparseArray r3 = (android.util.SparseArray) r3
            if (r3 != 0) goto L_0x1404
            android.util.SparseArray r3 = new android.util.SparseArray
            r3.<init>()
            long r6 = r1.dialog_id
            r13.put(r6, r3)
        L_0x1404:
            org.telegram.tgnet.TLRPC$TL_messageReplyHeader r4 = r1.reply_to
            int r6 = r4.reply_to_top_id
            if (r6 == 0) goto L_0x140b
            goto L_0x140d
        L_0x140b:
            int r6 = r4.reply_to_msg_id
        L_0x140d:
            java.lang.Object r4 = r3.get(r6)
            org.telegram.tgnet.TLRPC$MessageReplies r4 = (org.telegram.tgnet.TLRPC$MessageReplies) r4
            if (r4 != 0) goto L_0x141d
            org.telegram.tgnet.TLRPC$TL_messageReplies r4 = new org.telegram.tgnet.TLRPC$TL_messageReplies
            r4.<init>()
            r3.put(r6, r4)
        L_0x141d:
            org.telegram.tgnet.TLRPC$Peer r3 = r1.from_id
            if (r3 == 0) goto L_0x1427
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Peer> r6 = r4.recent_repliers
            r7 = 0
            r6.add(r7, r3)
        L_0x1427:
            int r3 = r4.replies
            r6 = 1
            int r3 = r3 + r6
            r4.replies = r3
            goto L_0x1430
        L_0x142e:
            r13 = r23
        L_0x1430:
            r23 = r13
            java.util.ArrayList<java.lang.Long> r3 = r15.createdDialogIds
            long r6 = r1.dialog_id
            java.lang.Long r4 = java.lang.Long.valueOf(r6)
            boolean r3 = r3.contains(r4)
            if (r3 == 0) goto L_0x145d
            long r3 = r1.grouped_id
            r6 = 0
            int r8 = (r3 > r6 ? 1 : (r3 == r6 ? 0 : -1))
            if (r8 != 0) goto L_0x145d
            org.telegram.messenger.ImageLoader$MessageThumb r3 = org.telegram.messenger.ImageLoader.generateMessageThumb(r1)
            if (r3 == 0) goto L_0x145d
            if (r24 != 0) goto L_0x1456
            java.util.ArrayList r4 = new java.util.ArrayList
            r4.<init>()
            goto L_0x1458
        L_0x1456:
            r4 = r24
        L_0x1458:
            r4.add(r3)
            r24 = r4
        L_0x145d:
            boolean r3 = r5 instanceof org.telegram.tgnet.TLRPC$TL_updateNewScheduledMessage
            if (r3 == 0) goto L_0x14b5
            if (r29 != 0) goto L_0x1469
            java.util.ArrayList r2 = new java.util.ArrayList
            r2.<init>()
            goto L_0x146b
        L_0x1469:
            r2 = r29
        L_0x146b:
            r2.add(r1)
            java.util.ArrayList<java.lang.Long> r3 = r15.createdScheduledDialogIds
            long r4 = r1.dialog_id
            java.lang.Long r4 = java.lang.Long.valueOf(r4)
            boolean r3 = r3.contains(r4)
            org.telegram.messenger.MessageObject r4 = new org.telegram.messenger.MessageObject
            int r6 = r15.currentAccount
            r5 = r4
            r7 = r1
            r8 = r0
            r9 = r12
            r33 = r10
            r10 = r3
            r11 = r3
            r5.<init>((int) r6, (org.telegram.tgnet.TLRPC$Message) r7, (java.util.AbstractMap<java.lang.Long, org.telegram.tgnet.TLRPC$User>) r8, (java.util.AbstractMap<java.lang.Long, org.telegram.tgnet.TLRPC$Chat>) r9, (boolean) r10, (boolean) r11)
            r3 = 1
            r4.scheduled = r3
            if (r21 != 0) goto L_0x1494
            androidx.collection.LongSparseArray r3 = new androidx.collection.LongSparseArray
            r3.<init>()
            goto L_0x1496
        L_0x1494:
            r3 = r21
        L_0x1496:
            long r5 = r1.dialog_id
            java.lang.Object r5 = r3.get(r5)
            java.util.ArrayList r5 = (java.util.ArrayList) r5
            if (r5 != 0) goto L_0x14aa
            java.util.ArrayList r5 = new java.util.ArrayList
            r5.<init>()
            long r6 = r1.dialog_id
            r3.put(r6, r5)
        L_0x14aa:
            r5.add(r4)
            r29 = r2
            r21 = r3
            r10 = r14
            r13 = 0
            goto L_0x159f
        L_0x14b5:
            r33 = r10
            if (r35 != 0) goto L_0x14bf
            java.util.ArrayList r3 = new java.util.ArrayList
            r3.<init>()
            goto L_0x14c1
        L_0x14bf:
            r3 = r35
        L_0x14c1:
            r3.add(r1)
            boolean r4 = r1.out
            if (r4 == 0) goto L_0x14cb
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r4 = r15.dialogs_read_outbox_max
            goto L_0x14cd
        L_0x14cb:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r4 = r15.dialogs_read_inbox_max
        L_0x14cd:
            long r5 = r1.dialog_id
            java.lang.Long r5 = java.lang.Long.valueOf(r5)
            java.lang.Object r5 = r4.get(r5)
            java.lang.Integer r5 = (java.lang.Integer) r5
            if (r5 != 0) goto L_0x14f4
            org.telegram.messenger.MessagesStorage r5 = r65.getMessagesStorage()
            boolean r6 = r1.out
            long r7 = r1.dialog_id
            int r5 = r5.getDialogReadMax(r6, r7)
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
            long r6 = r1.dialog_id
            java.lang.Long r6 = java.lang.Long.valueOf(r6)
            r4.put(r6, r5)
        L_0x14f4:
            int r4 = r5.intValue()
            int r5 = r1.id
            if (r4 >= r5) goto L_0x1510
            if (r2 == 0) goto L_0x1504
            boolean r4 = org.telegram.messenger.ChatObject.isNotInChat(r2)
            if (r4 != 0) goto L_0x1510
        L_0x1504:
            org.telegram.tgnet.TLRPC$MessageAction r4 = r1.action
            boolean r5 = r4 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatMigrateTo
            if (r5 != 0) goto L_0x1510
            boolean r4 = r4 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChannelCreate
            if (r4 != 0) goto L_0x1510
            r4 = 1
            goto L_0x1511
        L_0x1510:
            r4 = 0
        L_0x1511:
            r1.unread = r4
            long r4 = r1.dialog_id
            int r6 = (r4 > r31 ? 1 : (r4 == r31 ? 0 : -1))
            if (r6 != 0) goto L_0x1526
            boolean r6 = r1.from_scheduled
            r13 = 0
            if (r6 != 0) goto L_0x1520
            r1.unread = r13
        L_0x1520:
            r1.media_unread = r13
            r6 = 1
            r1.out = r6
            goto L_0x1527
        L_0x1526:
            r13 = 0
        L_0x1527:
            java.util.ArrayList<java.lang.Long> r6 = r15.createdDialogIds
            java.lang.Long r4 = java.lang.Long.valueOf(r4)
            boolean r11 = r6.contains(r4)
            org.telegram.messenger.MessageObject r4 = new org.telegram.messenger.MessageObject
            int r6 = r15.currentAccount
            r5 = r4
            r7 = r1
            r8 = r0
            r9 = r12
            r10 = r11
            r5.<init>((int) r6, (org.telegram.tgnet.TLRPC$Message) r7, (java.util.AbstractMap<java.lang.Long, org.telegram.tgnet.TLRPC$User>) r8, (java.util.AbstractMap<java.lang.Long, org.telegram.tgnet.TLRPC$Chat>) r9, (boolean) r10, (boolean) r11)
            int r5 = r4.type
            r6 = 11
            if (r5 != r6) goto L_0x1548
            int r5 = UPDATE_MASK_CHAT_AVATAR
        L_0x1545:
            r17 = r17 | r5
            goto L_0x154f
        L_0x1548:
            r6 = 10
            if (r5 != r6) goto L_0x154f
            int r5 = UPDATE_MASK_CHAT_NAME
            goto L_0x1545
        L_0x154f:
            if (r14 != 0) goto L_0x1558
            androidx.collection.LongSparseArray r5 = new androidx.collection.LongSparseArray
            r5.<init>()
            r10 = r5
            goto L_0x1559
        L_0x1558:
            r10 = r14
        L_0x1559:
            long r5 = r1.dialog_id
            java.lang.Object r5 = r10.get(r5)
            java.util.ArrayList r5 = (java.util.ArrayList) r5
            if (r5 != 0) goto L_0x156d
            java.util.ArrayList r5 = new java.util.ArrayList
            r5.<init>()
            long r6 = r1.dialog_id
            r10.put(r6, r5)
        L_0x156d:
            r5.add(r4)
            boolean r1 = r4.isOut()
            if (r1 == 0) goto L_0x157c
            org.telegram.tgnet.TLRPC$Message r1 = r4.messageOwner
            boolean r1 = r1.from_scheduled
            if (r1 == 0) goto L_0x159d
        L_0x157c:
            boolean r1 = r4.isUnread()
            if (r1 == 0) goto L_0x159d
            if (r2 == 0) goto L_0x158e
            boolean r1 = org.telegram.messenger.ChatObject.isNotInChat(r2)
            if (r1 != 0) goto L_0x159d
            boolean r1 = r2.min
            if (r1 != 0) goto L_0x159d
        L_0x158e:
            if (r30 != 0) goto L_0x1596
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            goto L_0x1598
        L_0x1596:
            r1 = r30
        L_0x1598:
            r1.add(r4)
            r30 = r1
        L_0x159d:
            r35 = r3
        L_0x159f:
            r36 = r67
            r1 = r68
            r2 = r27
            r27 = r30
            r9 = r40
            r6 = r42
            r3 = r48
            r5 = r49
            r7 = r50
            r8 = r53
            r40 = r63
        L_0x15b5:
            int r14 = r46 + 1
            r4 = r0
            r11 = r28
            r67 = r31
            r30 = r33
            r0 = r36
            r13 = r47
            goto L_0x00ae
        L_0x15c4:
            r67 = r0
            r68 = r1
            r48 = r3
            r0 = r4
            r49 = r5
            r42 = r6
            r50 = r7
            r53 = r8
            r14 = r10
            r47 = r13
            r13 = r23
            r30 = r27
            r63 = r40
            r23 = 0
            r27 = r2
            r40 = r9
            if (r14 == 0) goto L_0x1600
            int r1 = r14.size()
            r6 = 0
        L_0x15e9:
            if (r6 >= r1) goto L_0x1600
            long r2 = r14.keyAt(r6)
            java.lang.Object r4 = r14.valueAt(r6)
            java.util.ArrayList r4 = (java.util.ArrayList) r4
            boolean r2 = r15.updatePrintingUsersWithNewMessages(r2, r4)
            if (r2 == 0) goto L_0x15fd
            r26 = 1
        L_0x15fd:
            int r6 = r6 + 1
            goto L_0x15e9
        L_0x1600:
            r12 = r26
            if (r12 == 0) goto L_0x1607
            r65.updatePrintingStrings()
        L_0x1607:
            r11 = r50
            if (r11 == 0) goto L_0x1612
            org.telegram.messenger.ContactsController r1 = r65.getContactsController()
            r1.processContactsUpdates(r11, r0)
        L_0x1612:
            if (r30 == 0) goto L_0x1626
            org.telegram.messenger.MessagesStorage r0 = r65.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r0 = r0.getStorageQueue()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda94 r1 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda94
            r2 = r30
            r1.<init>(r15, r2)
            r0.postRunnable(r1)
        L_0x1626:
            if (r29 == 0) goto L_0x163f
            org.telegram.messenger.MessagesStorage r28 = r65.getMessagesStorage()
            r30 = 1
            r31 = 1
            r32 = 0
            org.telegram.messenger.DownloadController r0 = r65.getDownloadController()
            int r33 = r0.getAutodownloadMask()
            r34 = 1
            r28.putMessages((java.util.ArrayList<org.telegram.tgnet.TLRPC$Message>) r29, (boolean) r30, (boolean) r31, (boolean) r32, (int) r33, (boolean) r34)
        L_0x163f:
            if (r35 == 0) goto L_0x166c
            org.telegram.messenger.StatsController r0 = r65.getStatsController()
            int r1 = org.telegram.messenger.ApplicationLoader.getCurrentNetworkType()
            int r2 = r35.size()
            r3 = 1
            r0.incrementReceivedItemsCount(r1, r3, r2)
            org.telegram.messenger.MessagesStorage r30 = r65.getMessagesStorage()
            r32 = 1
            r33 = 1
            r34 = 0
            org.telegram.messenger.DownloadController r0 = r65.getDownloadController()
            int r0 = r0.getAutodownloadMask()
            r36 = 0
            r31 = r35
            r35 = r0
            r30.putMessages((java.util.ArrayList<org.telegram.tgnet.TLRPC$Message>) r31, (boolean) r32, (boolean) r33, (boolean) r34, (int) r35, (boolean) r36)
        L_0x166c:
            if (r53 == 0) goto L_0x16c6
            int r0 = r53.size()
            r6 = 0
        L_0x1673:
            if (r6 >= r0) goto L_0x16b3
            org.telegram.tgnet.TLRPC$TL_messages_messages r1 = new org.telegram.tgnet.TLRPC$TL_messages_messages
            r1.<init>()
            r8 = r53
            java.lang.Object r2 = r8.valueAt(r6)
            java.util.ArrayList r2 = (java.util.ArrayList) r2
            int r3 = r2.size()
            r4 = 0
        L_0x1687:
            if (r4 >= r3) goto L_0x1699
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r5 = r1.messages
            java.lang.Object r7 = r2.get(r4)
            org.telegram.messenger.MessageObject r7 = (org.telegram.messenger.MessageObject) r7
            org.telegram.tgnet.TLRPC$Message r7 = r7.messageOwner
            r5.add(r7)
            int r4 = r4 + 1
            goto L_0x1687
        L_0x1699:
            org.telegram.messenger.MessagesStorage r28 = r65.getMessagesStorage()
            long r30 = r8.keyAt(r6)
            r32 = -2
            r33 = 0
            r34 = 0
            r35 = 0
            r29 = r1
            r28.putMessages((org.telegram.tgnet.TLRPC$messages_Messages) r29, (long) r30, (int) r32, (int) r33, (boolean) r34, (boolean) r35)
            int r6 = r6 + 1
            r53 = r8
            goto L_0x1673
        L_0x16b3:
            r8 = r53
            org.telegram.messenger.MessagesStorage r0 = r65.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r0 = r0.getStorageQueue()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda79 r1 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda79
            r1.<init>(r15, r8)
            r0.postRunnable(r1)
            goto L_0x16c8
        L_0x16c6:
            r8 = r53
        L_0x16c8:
            if (r42 != 0) goto L_0x16d5
            if (r49 != 0) goto L_0x16d5
            if (r13 == 0) goto L_0x16cf
            goto L_0x16d5
        L_0x16cf:
            r10 = r42
            r9 = r49
            r7 = 1
            goto L_0x16e1
        L_0x16d5:
            org.telegram.messenger.MessagesStorage r0 = r65.getMessagesStorage()
            r10 = r42
            r9 = r49
            r7 = 1
            r0.putChannelViews(r10, r9, r13, r7)
        L_0x16e1:
            if (r40 == 0) goto L_0x1706
            int r0 = r40.size()
            r6 = 0
        L_0x16e8:
            if (r6 >= r0) goto L_0x1706
            org.telegram.messenger.MessagesStorage r28 = r65.getMessagesStorage()
            r3 = r40
            java.lang.Object r1 = r3.get(r6)
            org.telegram.tgnet.TLRPC$TL_updateFolderPeers r1 = (org.telegram.tgnet.TLRPC$TL_updateFolderPeers) r1
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_folderPeer> r1 = r1.folder_peers
            r30 = 0
            r31 = 0
            r33 = 0
            r29 = r1
            r28.setDialogsFolderId(r29, r30, r31, r33)
            int r6 = r6 + 1
            goto L_0x16e8
        L_0x1706:
            r3 = r40
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda38 r25 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda38
            r6 = r67
            r0 = r25
            r5 = r68
            r1 = r65
            r4 = r27
            r2 = r17
            r17 = r3
            r16 = r8
            r8 = r48
            r3 = r18
            r4 = r19
            r5 = r70
            r6 = r20
            r18 = 1
            r7 = r37
            r8 = r14
            r14 = r9
            r9 = r17
            r17 = r10
            r10 = r21
            r19 = r11
            r11 = r16
            r23 = r13
            r16 = r17
            r64 = r37
            r20 = 0
            r13 = r19
            r17 = r14
            r14 = r22
            r15 = r16
            r16 = r17
            r17 = r23
            r18 = r24
            r0.<init>(r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r25)
            org.telegram.messenger.MessagesStorage r0 = r65.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r9 = r0.getStorageQueue()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda114 r10 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda114
            r0 = r10
            r2 = r67
            r3 = r68
            r4 = r38
            r5 = r47
            r6 = r27
            r7 = r48
            r8 = r39
            r0.<init>(r1, r2, r3, r4, r5, r6, r7, r8)
            r9.postRunnable(r10)
            r0 = r64
            if (r0 == 0) goto L_0x177a
            org.telegram.messenger.MessagesStorage r1 = r65.getMessagesStorage()
            r1.putWebPages(r0)
        L_0x177a:
            r0 = r67
            r1 = r68
            r2 = r38
            if (r0 != 0) goto L_0x178d
            if (r1 != 0) goto L_0x178d
            r3 = r47
            if (r2 != 0) goto L_0x178f
            if (r3 == 0) goto L_0x178b
            goto L_0x178f
        L_0x178b:
            r5 = 1
            goto L_0x17a7
        L_0x178d:
            r3 = r47
        L_0x178f:
            if (r0 != 0) goto L_0x1798
            if (r1 != 0) goto L_0x1798
            if (r3 == 0) goto L_0x1796
            goto L_0x1798
        L_0x1796:
            r5 = 1
            goto L_0x17a0
        L_0x1798:
            org.telegram.messenger.MessagesStorage r4 = r65.getMessagesStorage()
            r5 = 1
            r4.updateDialogsWithReadMessages(r0, r1, r3, r5)
        L_0x17a0:
            org.telegram.messenger.MessagesStorage r4 = r65.getMessagesStorage()
            r4.markMessagesAsRead(r0, r1, r2, r5)
        L_0x17a7:
            if (r3 == 0) goto L_0x17cc
            org.telegram.tgnet.ConnectionsManager r0 = r65.getConnectionsManager()
            int r0 = r0.getCurrentTime()
            int r1 = r3.size()
            r13 = 0
        L_0x17b6:
            if (r13 >= r1) goto L_0x17cc
            long r6 = r3.keyAt(r13)
            java.lang.Object r2 = r3.valueAt(r13)
            java.util.ArrayList r2 = (java.util.ArrayList) r2
            org.telegram.messenger.MessagesStorage r4 = r65.getMessagesStorage()
            r4.markMessagesContentAsRead(r6, r2, r0)
            int r13 = r13 + 1
            goto L_0x17b6
        L_0x17cc:
            r2 = r27
            if (r2 == 0) goto L_0x17f6
            int r0 = r2.size()
            r13 = 0
        L_0x17d5:
            if (r13 >= r0) goto L_0x17f6
            long r3 = r2.keyAt(r13)
            java.lang.Object r1 = r2.valueAt(r13)
            java.util.ArrayList r1 = (java.util.ArrayList) r1
            org.telegram.messenger.MessagesStorage r6 = r65.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r6 = r6.getStorageQueue()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda67 r7 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda67
            r8 = r65
            r7.<init>(r8, r3, r1)
            r6.postRunnable(r7)
            int r13 = r13 + 1
            goto L_0x17d5
        L_0x17f6:
            r8 = r65
            r3 = r48
            if (r3 == 0) goto L_0x181f
            int r0 = r3.size()
            r13 = 0
        L_0x1801:
            if (r13 >= r0) goto L_0x181f
            long r22 = r3.keyAt(r13)
            java.lang.Object r1 = r3.valueAt(r13)
            r24 = r1
            java.util.ArrayList r24 = (java.util.ArrayList) r24
            org.telegram.messenger.MessagesStorage r21 = r65.getMessagesStorage()
            r25 = 1
            r26 = 0
            r27 = 1
            r21.markMessagesAsDeleted(r22, r24, r25, r26, r27)
            int r13 = r13 + 1
            goto L_0x1801
        L_0x181f:
            r0 = r39
            if (r0 == 0) goto L_0x1845
            int r1 = r0.size()
            r13 = 0
        L_0x1828:
            if (r13 >= r1) goto L_0x1845
            long r2 = r0.keyAt(r13)
            int r4 = r0.valueAt(r13)
            org.telegram.messenger.MessagesStorage r6 = r65.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r6 = r6.getStorageQueue()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda57 r7 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda57
            r7.<init>(r8, r2, r4)
            r6.postRunnable(r7)
            int r13 = r13 + 1
            goto L_0x1828
        L_0x1845:
            r0 = r63
            if (r0 == 0) goto L_0x186e
            int r1 = r0.size()
            r13 = 0
        L_0x184e:
            if (r13 >= r1) goto L_0x186e
            java.lang.Object r2 = r0.get(r13)
            org.telegram.tgnet.TLRPC$TL_updateEncryptedMessagesRead r2 = (org.telegram.tgnet.TLRPC$TL_updateEncryptedMessagesRead) r2
            org.telegram.messenger.MessagesStorage r14 = r65.getMessagesStorage()
            int r15 = r2.chat_id
            int r3 = r2.max_date
            int r2 = r2.date
            r18 = 1
            r19 = 0
            r16 = r3
            r17 = r2
            r14.createTaskForSecretChat(r15, r16, r17, r18, r19)
            int r13 = r13 + 1
            goto L_0x184e
        L_0x186e:
            return r5
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.processUpdateArray(java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, boolean, int):boolean");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$287(ArrayList arrayList, ArrayList arrayList2) {
        putUsers(arrayList, false);
        putChats(arrayList2, false);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$288(ArrayList arrayList, ArrayList arrayList2) {
        putUsers(arrayList, false);
        putChats(arrayList2, false);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$289(TLRPC$TL_updateUserTyping tLRPC$TL_updateUserTyping) {
        getNotificationCenter().postNotificationName(NotificationCenter.onEmojiInteractionsReceived, Long.valueOf(tLRPC$TL_updateUserTyping.user_id), tLRPC$TL_updateUserTyping.action);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$290(TLRPC$TL_updateChatUserTyping tLRPC$TL_updateChatUserTyping) {
        getNotificationCenter().postNotificationName(NotificationCenter.onEmojiInteractionsReceived, Long.valueOf(-tLRPC$TL_updateChatUserTyping.chat_id), tLRPC$TL_updateChatUserTyping.action);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$292(TLRPC$TL_updatePeerBlocked tLRPC$TL_updatePeerBlocked) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda159(this, tLRPC$TL_updatePeerBlocked));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$291(TLRPC$TL_updatePeerBlocked tLRPC$TL_updatePeerBlocked) {
        long peerId = MessageObject.getPeerId(tLRPC$TL_updatePeerBlocked.peer_id);
        if (!tLRPC$TL_updatePeerBlocked.blocked) {
            this.blockePeers.delete(peerId);
        } else if (this.blockePeers.indexOfKey(peerId) < 0) {
            this.blockePeers.put(peerId, 1);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$293(TLRPC$TL_updateServiceNotification tLRPC$TL_updateServiceNotification) {
        getNotificationCenter().postNotificationName(NotificationCenter.needShowAlert, 2, tLRPC$TL_updateServiceNotification.message, tLRPC$TL_updateServiceNotification.type);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$294(TLRPC$TL_updateLangPack tLRPC$TL_updateLangPack) {
        LocaleController.getInstance().saveRemoteLocaleStringsForCurrentLocale(tLRPC$TL_updateLangPack.difference, this.currentAccount);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$295(ArrayList arrayList) {
        getNotificationsController().processNewMessages(arrayList, true, false, (CountDownLatch) null);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$296(ArrayList arrayList) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda93(this, arrayList));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$297(LongSparseArray longSparseArray) {
        getNotificationsController().processEditedMessages(longSparseArray);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$298(LongSparseArray longSparseArray) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda76(this, longSparseArray));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$299(TLRPC$User tLRPC$User) {
        getContactsController().addContactToPhoneBook(tLRPC$User, true);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$300() {
        getNotificationsController().deleteNotificationChannelGlobal(0);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$301() {
        getNotificationsController().deleteNotificationChannelGlobal(1);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$302() {
        getNotificationsController().deleteNotificationChannelGlobal(2);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$303(TLRPC$TL_updateChannel tLRPC$TL_updateChannel) {
        getChannelDifference(tLRPC$TL_updateChannel.channel_id, 1, 0, (TLRPC$InputChannel) null);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$304(TLRPC$Chat tLRPC$Chat) {
        getNotificationCenter().postNotificationName(NotificationCenter.channelRightsUpdated, tLRPC$Chat);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$305(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Removed duplicated region for block: B:562:0x0d35  */
    /* JADX WARNING: Removed duplicated region for block: B:567:0x0d51  */
    /* JADX WARNING: Removed duplicated region for block: B:594:0x0e02  */
    /* JADX WARNING: Removed duplicated region for block: B:596:0x0e10  */
    /* JADX WARNING: Removed duplicated region for block: B:598:0x0e16  */
    /* JADX WARNING: Removed duplicated region for block: B:601:0x0e22  */
    /* JADX WARNING: Removed duplicated region for block: B:610:0x0e5e  */
    /* JADX WARNING: Removed duplicated region for block: B:613:0x0e74  */
    /* JADX WARNING: Removed duplicated region for block: B:660:? A[RETURN, SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$processUpdateArray$306(int r39, java.util.ArrayList r40, androidx.collection.LongSparseArray r41, int r42, org.telegram.messenger.support.LongSparseIntArray r43, androidx.collection.LongSparseArray r44, androidx.collection.LongSparseArray r45, java.util.ArrayList r46, androidx.collection.LongSparseArray r47, androidx.collection.LongSparseArray r48, boolean r49, java.util.ArrayList r50, java.util.ArrayList r51, androidx.collection.LongSparseArray r52, androidx.collection.LongSparseArray r53, androidx.collection.LongSparseArray r54, java.util.ArrayList r55) {
        /*
            r38 = this;
            r8 = r38
            r9 = r40
            r10 = r41
            r11 = r43
            r12 = r44
            r13 = r45
            r14 = r46
            r15 = r47
            r6 = r48
            r7 = r51
            r5 = r55
            r7 = 0
            java.lang.Integer r18 = java.lang.Integer.valueOf(r7)
            if (r9 == 0) goto L_0x0b9f
            java.util.ArrayList r5 = new java.util.ArrayList
            r5.<init>()
            java.util.ArrayList r4 = new java.util.ArrayList
            r4.<init>()
            int r2 = r40.size()
            r21 = r39
            r1 = 0
            r23 = 0
            r24 = 0
            r25 = 0
        L_0x0034:
            if (r1 >= r2) goto L_0x0b72
            java.lang.Object r0 = r9.get(r1)
            org.telegram.tgnet.TLRPC$Update r0 = (org.telegram.tgnet.TLRPC$Update) r0
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updatePrivacy
            if (r3 == 0) goto L_0x00c6
            org.telegram.tgnet.TLRPC$TL_updatePrivacy r0 = (org.telegram.tgnet.TLRPC$TL_updatePrivacy) r0
            org.telegram.tgnet.TLRPC$PrivacyKey r3 = r0.key
            boolean r6 = r3 instanceof org.telegram.tgnet.TLRPC$TL_privacyKeyStatusTimestamp
            if (r6 == 0) goto L_0x0052
            org.telegram.messenger.ContactsController r3 = r38.getContactsController()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PrivacyRule> r0 = r0.rules
            r3.setPrivacyRules(r0, r7)
            goto L_0x00ba
        L_0x0052:
            boolean r6 = r3 instanceof org.telegram.tgnet.TLRPC$TL_privacyKeyChatInvite
            if (r6 == 0) goto L_0x0061
            org.telegram.messenger.ContactsController r3 = r38.getContactsController()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PrivacyRule> r0 = r0.rules
            r6 = 1
            r3.setPrivacyRules(r0, r6)
            goto L_0x00ba
        L_0x0061:
            boolean r6 = r3 instanceof org.telegram.tgnet.TLRPC$TL_privacyKeyPhoneCall
            if (r6 == 0) goto L_0x0070
            org.telegram.messenger.ContactsController r3 = r38.getContactsController()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PrivacyRule> r0 = r0.rules
            r6 = 2
            r3.setPrivacyRules(r0, r6)
            goto L_0x00ba
        L_0x0070:
            boolean r6 = r3 instanceof org.telegram.tgnet.TLRPC$TL_privacyKeyPhoneP2P
            if (r6 == 0) goto L_0x007f
            org.telegram.messenger.ContactsController r3 = r38.getContactsController()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PrivacyRule> r0 = r0.rules
            r6 = 3
            r3.setPrivacyRules(r0, r6)
            goto L_0x00ba
        L_0x007f:
            boolean r6 = r3 instanceof org.telegram.tgnet.TLRPC$TL_privacyKeyProfilePhoto
            if (r6 == 0) goto L_0x008e
            org.telegram.messenger.ContactsController r3 = r38.getContactsController()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PrivacyRule> r0 = r0.rules
            r6 = 4
            r3.setPrivacyRules(r0, r6)
            goto L_0x00ba
        L_0x008e:
            boolean r6 = r3 instanceof org.telegram.tgnet.TLRPC$TL_privacyKeyForwards
            if (r6 == 0) goto L_0x009d
            org.telegram.messenger.ContactsController r3 = r38.getContactsController()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PrivacyRule> r0 = r0.rules
            r6 = 5
            r3.setPrivacyRules(r0, r6)
            goto L_0x00ba
        L_0x009d:
            boolean r6 = r3 instanceof org.telegram.tgnet.TLRPC$TL_privacyKeyPhoneNumber
            if (r6 == 0) goto L_0x00ac
            org.telegram.messenger.ContactsController r3 = r38.getContactsController()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PrivacyRule> r0 = r0.rules
            r6 = 6
            r3.setPrivacyRules(r0, r6)
            goto L_0x00ba
        L_0x00ac:
            boolean r3 = r3 instanceof org.telegram.tgnet.TLRPC$TL_privacyKeyAddedByPhone
            if (r3 == 0) goto L_0x00ba
            org.telegram.messenger.ContactsController r3 = r38.getContactsController()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PrivacyRule> r0 = r0.rules
            r6 = 7
            r3.setPrivacyRules(r0, r6)
        L_0x00ba:
            r22 = r1
            r20 = r2
        L_0x00be:
            r30 = r4
            r9 = r5
        L_0x00c1:
            r3 = 0
        L_0x00c3:
            r7 = 2
            goto L_0x0b62
        L_0x00c6:
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateUserStatus
            if (r3 == 0) goto L_0x0128
            org.telegram.tgnet.TLRPC$TL_updateUserStatus r0 = (org.telegram.tgnet.TLRPC$TL_updateUserStatus) r0
            r6 = r1
            r3 = r2
            long r1 = r0.user_id
            java.lang.Long r1 = java.lang.Long.valueOf(r1)
            org.telegram.tgnet.TLRPC$User r1 = r8.getUser(r1)
            org.telegram.tgnet.TLRPC$UserStatus r2 = r0.status
            boolean r7 = r2 instanceof org.telegram.tgnet.TLRPC$TL_userStatusRecently
            if (r7 == 0) goto L_0x00e3
            r7 = -100
            r2.expires = r7
            goto L_0x00f4
        L_0x00e3:
            boolean r7 = r2 instanceof org.telegram.tgnet.TLRPC$TL_userStatusLastWeek
            if (r7 == 0) goto L_0x00ec
            r7 = -101(0xffffffffffffff9b, float:NaN)
            r2.expires = r7
            goto L_0x00f4
        L_0x00ec:
            boolean r7 = r2 instanceof org.telegram.tgnet.TLRPC$TL_userStatusLastMonth
            if (r7 == 0) goto L_0x00f4
            r7 = -102(0xffffffffffffff9a, float:NaN)
            r2.expires = r7
        L_0x00f4:
            r39 = r6
            if (r1 == 0) goto L_0x00fe
            long r6 = r0.user_id
            r1.id = r6
            r1.status = r2
        L_0x00fe:
            org.telegram.tgnet.TLRPC$TL_user r1 = new org.telegram.tgnet.TLRPC$TL_user
            r1.<init>()
            long r6 = r0.user_id
            r1.id = r6
            org.telegram.tgnet.TLRPC$UserStatus r2 = r0.status
            r1.status = r2
            r4.add(r1)
            long r1 = r0.user_id
            org.telegram.messenger.UserConfig r6 = r38.getUserConfig()
            long r6 = r6.getClientUserId()
            int r27 = (r1 > r6 ? 1 : (r1 == r6 ? 0 : -1))
            if (r27 != 0) goto L_0x0185
            org.telegram.messenger.NotificationsController r1 = r38.getNotificationsController()
            org.telegram.tgnet.TLRPC$UserStatus r0 = r0.status
            int r0 = r0.expires
            r1.setLastOnlineFromOtherDevice(r0)
            goto L_0x0185
        L_0x0128:
            r39 = r1
            r3 = r2
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateUserName
            if (r1 == 0) goto L_0x018b
            org.telegram.tgnet.TLRPC$TL_updateUserName r0 = (org.telegram.tgnet.TLRPC$TL_updateUserName) r0
            long r1 = r0.user_id
            java.lang.Long r1 = java.lang.Long.valueOf(r1)
            org.telegram.tgnet.TLRPC$User r1 = r8.getUser(r1)
            if (r1 == 0) goto L_0x016d
            boolean r2 = org.telegram.messenger.UserObject.isContact(r1)
            if (r2 != 0) goto L_0x014b
            java.lang.String r2 = r0.first_name
            r1.first_name = r2
            java.lang.String r2 = r0.last_name
            r1.last_name = r2
        L_0x014b:
            java.lang.String r2 = r1.username
            boolean r2 = android.text.TextUtils.isEmpty(r2)
            if (r2 != 0) goto L_0x015a
            j$.util.concurrent.ConcurrentHashMap<java.lang.String, org.telegram.tgnet.TLObject> r2 = r8.objectsByUsernames
            java.lang.String r6 = r1.username
            r2.remove(r6)
        L_0x015a:
            java.lang.String r2 = r0.username
            boolean r2 = android.text.TextUtils.isEmpty(r2)
            if (r2 == 0) goto L_0x0169
            j$.util.concurrent.ConcurrentHashMap<java.lang.String, org.telegram.tgnet.TLObject> r2 = r8.objectsByUsernames
            java.lang.String r6 = r0.username
            r2.put(r6, r1)
        L_0x0169:
            java.lang.String r2 = r0.username
            r1.username = r2
        L_0x016d:
            org.telegram.tgnet.TLRPC$TL_user r1 = new org.telegram.tgnet.TLRPC$TL_user
            r1.<init>()
            long r6 = r0.user_id
            r1.id = r6
            java.lang.String r2 = r0.first_name
            r1.first_name = r2
            java.lang.String r2 = r0.last_name
            r1.last_name = r2
            java.lang.String r0 = r0.username
            r1.username = r0
            r5.add(r1)
        L_0x0185:
            r22 = r39
            r20 = r3
            goto L_0x00be
        L_0x018b:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateDialogPinned
            if (r1 == 0) goto L_0x01e2
            org.telegram.tgnet.TLRPC$TL_updateDialogPinned r0 = (org.telegram.tgnet.TLRPC$TL_updateDialogPinned) r0
            org.telegram.tgnet.TLRPC$DialogPeer r1 = r0.peer
            boolean r2 = r1 instanceof org.telegram.tgnet.TLRPC$TL_dialogPeer
            if (r2 == 0) goto L_0x01a1
            org.telegram.tgnet.TLRPC$TL_dialogPeer r1 = (org.telegram.tgnet.TLRPC$TL_dialogPeer) r1
            org.telegram.tgnet.TLRPC$Peer r1 = r1.peer
            long r1 = org.telegram.messenger.DialogObject.getPeerDialogId((org.telegram.tgnet.TLRPC$Peer) r1)
            r6 = r1
            goto L_0x01a3
        L_0x01a1:
            r6 = 0
        L_0x01a3:
            boolean r2 = r0.pinned
            r27 = 0
            r28 = -1
            r22 = r39
            r1 = r38
            r26 = r2
            r20 = r3
            r2 = r6
            r30 = r4
            r4 = r26
            r9 = r5
            r5 = r27
            r31 = r6
            r14 = 1
            r15 = 0
            r6 = r28
            boolean r1 = r1.pinDialog(r2, r4, r5, r6)
            if (r1 != 0) goto L_0x01df
            org.telegram.messenger.UserConfig r1 = r38.getUserConfig()
            int r2 = r0.folder_id
            r1.setPinnedDialogsLoaded(r2, r15)
            org.telegram.messenger.UserConfig r1 = r38.getUserConfig()
            r1.saveConfig(r15)
            int r0 = r0.folder_id
            r1 = r31
            r3 = 0
            r8.loadPinnedDialogs(r0, r1, r3)
            goto L_0x00c1
        L_0x01df:
            r3 = 0
            goto L_0x00c1
        L_0x01e2:
            r22 = r39
            r20 = r3
            r30 = r4
            r9 = r5
            r3 = 0
            r14 = 1
            r15 = 0
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updatePinnedDialogs
            if (r1 == 0) goto L_0x0257
            org.telegram.tgnet.TLRPC$TL_updatePinnedDialogs r0 = (org.telegram.tgnet.TLRPC$TL_updatePinnedDialogs) r0
            org.telegram.messenger.UserConfig r1 = r38.getUserConfig()
            int r2 = r0.folder_id
            r1.setPinnedDialogsLoaded(r2, r15)
            org.telegram.messenger.UserConfig r1 = r38.getUserConfig()
            r1.saveConfig(r15)
            int r1 = r0.flags
            r1 = r1 & r14
            if (r1 == 0) goto L_0x024c
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$DialogPeer> r2 = r0.order
            int r4 = r2.size()
            r7 = 0
        L_0x0213:
            if (r7 >= r4) goto L_0x024a
            java.lang.Object r5 = r2.get(r7)
            org.telegram.tgnet.TLRPC$DialogPeer r5 = (org.telegram.tgnet.TLRPC$DialogPeer) r5
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_dialogPeer
            if (r6 == 0) goto L_0x0239
            org.telegram.tgnet.TLRPC$TL_dialogPeer r5 = (org.telegram.tgnet.TLRPC$TL_dialogPeer) r5
            org.telegram.tgnet.TLRPC$Peer r5 = r5.peer
            r39 = r4
            long r3 = r5.user_id
            r16 = 0
            int r6 = (r3 > r16 ? 1 : (r3 == r16 ? 0 : -1))
            if (r6 == 0) goto L_0x022e
            goto L_0x023d
        L_0x022e:
            long r3 = r5.chat_id
            int r6 = (r3 > r16 ? 1 : (r3 == r16 ? 0 : -1))
            if (r6 == 0) goto L_0x0235
            goto L_0x0237
        L_0x0235:
            long r3 = r5.channel_id
        L_0x0237:
            long r3 = -r3
            goto L_0x023d
        L_0x0239:
            r39 = r4
            r3 = 0
        L_0x023d:
            java.lang.Long r3 = java.lang.Long.valueOf(r3)
            r1.add(r3)
            int r7 = r7 + 1
            r4 = r39
            r3 = 0
            goto L_0x0213
        L_0x024a:
            r3 = r1
            goto L_0x024d
        L_0x024c:
            r3 = 0
        L_0x024d:
            int r0 = r0.folder_id
            r1 = 0
            r8.loadPinnedDialogs(r0, r1, r3)
            r3 = r1
            goto L_0x00c3
        L_0x0257:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateUserPhoto
            if (r1 == 0) goto L_0x0290
            org.telegram.tgnet.TLRPC$TL_updateUserPhoto r0 = (org.telegram.tgnet.TLRPC$TL_updateUserPhoto) r0
            long r1 = r0.user_id
            java.lang.Long r1 = java.lang.Long.valueOf(r1)
            org.telegram.tgnet.TLRPC$User r1 = r8.getUser(r1)
            if (r1 == 0) goto L_0x026d
            org.telegram.tgnet.TLRPC$UserProfilePhoto r2 = r0.photo
            r1.photo = r2
        L_0x026d:
            org.telegram.tgnet.TLRPC$TL_user r2 = new org.telegram.tgnet.TLRPC$TL_user
            r2.<init>()
            long r3 = r0.user_id
            r2.id = r3
            org.telegram.tgnet.TLRPC$UserProfilePhoto r0 = r0.photo
            r2.photo = r0
            r9.add(r2)
            boolean r0 = org.telegram.messenger.UserObject.isUserSelf(r1)
            if (r0 == 0) goto L_0x00c1
            org.telegram.messenger.NotificationCenter r0 = r38.getNotificationCenter()
            int r1 = org.telegram.messenger.NotificationCenter.mainUserInfoChanged
            java.lang.Object[] r2 = new java.lang.Object[r15]
            r0.postNotificationName(r1, r2)
            goto L_0x00c1
        L_0x0290:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateUserPhone
            if (r1 == 0) goto L_0x02d3
            org.telegram.tgnet.TLRPC$TL_updateUserPhone r0 = (org.telegram.tgnet.TLRPC$TL_updateUserPhone) r0
            long r1 = r0.user_id
            java.lang.Long r1 = java.lang.Long.valueOf(r1)
            org.telegram.tgnet.TLRPC$User r1 = r8.getUser(r1)
            if (r1 == 0) goto L_0x02c1
            java.lang.String r2 = r0.phone
            r1.phone = r2
            org.telegram.messenger.DispatchQueue r2 = org.telegram.messenger.Utilities.phoneBookQueue
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda164 r3 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda164
            r3.<init>(r8, r1)
            r2.postRunnable(r3)
            boolean r1 = org.telegram.messenger.UserObject.isUserSelf(r1)
            if (r1 == 0) goto L_0x02c1
            org.telegram.messenger.NotificationCenter r1 = r38.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.mainUserInfoChanged
            java.lang.Object[] r3 = new java.lang.Object[r15]
            r1.postNotificationName(r2, r3)
        L_0x02c1:
            org.telegram.tgnet.TLRPC$TL_user r1 = new org.telegram.tgnet.TLRPC$TL_user
            r1.<init>()
            long r2 = r0.user_id
            r1.id = r2
            java.lang.String r0 = r0.phone
            r1.phone = r0
            r9.add(r1)
            goto L_0x00c1
        L_0x02d3:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateNotifySettings
            if (r1 == 0) goto L_0x04d8
            org.telegram.tgnet.TLRPC$TL_updateNotifySettings r0 = (org.telegram.tgnet.TLRPC$TL_updateNotifySettings) r0
            org.telegram.tgnet.TLRPC$PeerNotifySettings r1 = r0.notify_settings
            boolean r1 = r1 instanceof org.telegram.tgnet.TLRPC$TL_peerNotifySettings
            if (r1 == 0) goto L_0x04d3
            int r1 = DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r24 = r24 | r1
            if (r23 != 0) goto L_0x02ec
            android.content.SharedPreferences r1 = r8.notificationsPreferences
            android.content.SharedPreferences$Editor r1 = r1.edit()
            goto L_0x02ee
        L_0x02ec:
            r1 = r23
        L_0x02ee:
            org.telegram.tgnet.ConnectionsManager r2 = r38.getConnectionsManager()
            int r2 = r2.getCurrentTime()
            org.telegram.tgnet.TLRPC$NotifyPeer r3 = r0.peer
            boolean r4 = r3 instanceof org.telegram.tgnet.TLRPC$TL_notifyPeer
            if (r4 == 0) goto L_0x0415
            org.telegram.tgnet.TLRPC$TL_notifyPeer r3 = (org.telegram.tgnet.TLRPC$TL_notifyPeer) r3
            org.telegram.tgnet.TLRPC$Peer r3 = r3.peer
            long r4 = r3.user_id
            r6 = 0
            int r16 = (r4 > r6 ? 1 : (r4 == r6 ? 0 : -1))
            if (r16 == 0) goto L_0x0309
            goto L_0x0314
        L_0x0309:
            long r4 = r3.chat_id
            int r19 = (r4 > r6 ? 1 : (r4 == r6 ? 0 : -1))
            if (r19 == 0) goto L_0x0311
            long r4 = -r4
            goto L_0x0314
        L_0x0311:
            long r3 = r3.channel_id
            long r4 = -r3
        L_0x0314:
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r3 = r8.dialogs_dict
            java.lang.Object r3 = r3.get(r4)
            org.telegram.tgnet.TLRPC$Dialog r3 = (org.telegram.tgnet.TLRPC$Dialog) r3
            if (r3 == 0) goto L_0x0322
            org.telegram.tgnet.TLRPC$PeerNotifySettings r6 = r0.notify_settings
            r3.notify_settings = r6
        L_0x0322:
            org.telegram.tgnet.TLRPC$PeerNotifySettings r6 = r0.notify_settings
            int r6 = r6.flags
            r7 = 2
            r6 = r6 & r7
            java.lang.String r14 = "silent_"
            if (r6 == 0) goto L_0x0344
            java.lang.StringBuilder r6 = new java.lang.StringBuilder
            r6.<init>()
            r6.append(r14)
            r6.append(r4)
            java.lang.String r6 = r6.toString()
            org.telegram.tgnet.TLRPC$PeerNotifySettings r14 = r0.notify_settings
            boolean r14 = r14.silent
            r1.putBoolean(r6, r14)
            goto L_0x0356
        L_0x0344:
            java.lang.StringBuilder r6 = new java.lang.StringBuilder
            r6.<init>()
            r6.append(r14)
            r6.append(r4)
            java.lang.String r6 = r6.toString()
            r1.remove(r6)
        L_0x0356:
            org.telegram.tgnet.TLRPC$PeerNotifySettings r6 = r0.notify_settings
            int r14 = r6.flags
            r15 = 4
            r14 = r14 & r15
            java.lang.String r15 = "notify2_"
            if (r14 == 0) goto L_0x03f3
            int r14 = r6.mute_until
            if (r14 <= r2) goto L_0x03d0
            r6 = 31536000(0x1e13380, float:8.2725845E-38)
            int r2 = r2 + r6
            if (r14 <= r2) goto L_0x0388
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            r2.append(r15)
            r2.append(r4)
            java.lang.String r2 = r2.toString()
            r1.putInt(r2, r7)
            if (r3 == 0) goto L_0x0385
            org.telegram.tgnet.TLRPC$PeerNotifySettings r0 = r0.notify_settings
            r2 = 2147483647(0x7fffffff, float:NaN)
            r0.mute_until = r2
        L_0x0385:
            r6 = 3
            r14 = 0
            goto L_0x03b9
        L_0x0388:
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            r2.append(r15)
            r2.append(r4)
            java.lang.String r2 = r2.toString()
            r6 = 3
            r1.putInt(r2, r6)
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            java.lang.String r15 = "notifyuntil_"
            r2.append(r15)
            r2.append(r4)
            java.lang.String r2 = r2.toString()
            org.telegram.tgnet.TLRPC$PeerNotifySettings r15 = r0.notify_settings
            int r15 = r15.mute_until
            r1.putInt(r2, r15)
            if (r3 == 0) goto L_0x03b9
            org.telegram.tgnet.TLRPC$PeerNotifySettings r0 = r0.notify_settings
            r0.mute_until = r14
        L_0x03b9:
            org.telegram.messenger.MessagesStorage r0 = r38.getMessagesStorage()
            long r2 = (long) r14
            r14 = 32
            long r2 = r2 << r14
            r14 = 1
            long r2 = r2 | r14
            r0.setDialogFlags(r4, r2)
            org.telegram.messenger.NotificationsController r0 = r38.getNotificationsController()
            r0.removeNotificationsForDialog(r4)
            goto L_0x04c9
        L_0x03d0:
            r2 = 3
            r14 = 0
            if (r3 == 0) goto L_0x03d6
            r6.mute_until = r14
        L_0x03d6:
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r15)
            r0.append(r4)
            java.lang.String r0 = r0.toString()
            r1.putInt(r0, r14)
            org.telegram.messenger.MessagesStorage r0 = r38.getMessagesStorage()
            r2 = 0
            r0.setDialogFlags(r4, r2)
            goto L_0x04c9
        L_0x03f3:
            r14 = 0
            if (r3 == 0) goto L_0x03f8
            r6.mute_until = r14
        L_0x03f8:
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r15)
            r0.append(r4)
            java.lang.String r0 = r0.toString()
            r1.remove(r0)
            org.telegram.messenger.MessagesStorage r0 = r38.getMessagesStorage()
            r2 = 0
            r0.setDialogFlags(r4, r2)
            goto L_0x04c9
        L_0x0415:
            r7 = 2
            boolean r2 = r3 instanceof org.telegram.tgnet.TLRPC$TL_notifyChats
            if (r2 == 0) goto L_0x0453
            org.telegram.tgnet.TLRPC$PeerNotifySettings r2 = r0.notify_settings
            int r3 = r2.flags
            r4 = 1
            r3 = r3 & r4
            if (r3 == 0) goto L_0x0429
            boolean r2 = r2.show_previews
            java.lang.String r3 = "EnablePreviewGroup"
            r1.putBoolean(r3, r2)
        L_0x0429:
            org.telegram.tgnet.TLRPC$PeerNotifySettings r2 = r0.notify_settings
            int r2 = r2.flags
            r3 = 4
            r2 = r2 & r3
            if (r2 == 0) goto L_0x04c9
            android.content.SharedPreferences r2 = r8.notificationsPreferences
            java.lang.String r3 = "EnableGroup2"
            r4 = 0
            int r2 = r2.getInt(r3, r4)
            org.telegram.tgnet.TLRPC$PeerNotifySettings r0 = r0.notify_settings
            int r0 = r0.mute_until
            if (r2 == r0) goto L_0x04c9
            r1.putInt(r3, r0)
            java.lang.String r0 = "overwrite_group"
            r2 = 1
            r1.putBoolean(r0, r2)
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda22 r0 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda22
            r0.<init>(r8)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r0)
            goto L_0x04c9
        L_0x0453:
            r2 = 1
            boolean r4 = r3 instanceof org.telegram.tgnet.TLRPC$TL_notifyUsers
            if (r4 == 0) goto L_0x048f
            org.telegram.tgnet.TLRPC$PeerNotifySettings r3 = r0.notify_settings
            int r4 = r3.flags
            r4 = r4 & r2
            if (r4 == 0) goto L_0x0466
            boolean r2 = r3.show_previews
            java.lang.String r3 = "EnablePreviewAll"
            r1.putBoolean(r3, r2)
        L_0x0466:
            org.telegram.tgnet.TLRPC$PeerNotifySettings r2 = r0.notify_settings
            int r2 = r2.flags
            r3 = 4
            r2 = r2 & r3
            if (r2 == 0) goto L_0x04c9
            android.content.SharedPreferences r2 = r8.notificationsPreferences
            java.lang.String r3 = "EnableAll2"
            r4 = 0
            int r2 = r2.getInt(r3, r4)
            org.telegram.tgnet.TLRPC$PeerNotifySettings r0 = r0.notify_settings
            int r0 = r0.mute_until
            if (r2 == r0) goto L_0x04c9
            r1.putInt(r3, r0)
            java.lang.String r0 = "overwrite_private"
            r2 = 1
            r1.putBoolean(r0, r2)
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda8 r0 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda8
            r0.<init>(r8)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r0)
            goto L_0x04c9
        L_0x048f:
            boolean r3 = r3 instanceof org.telegram.tgnet.TLRPC$TL_notifyBroadcasts
            if (r3 == 0) goto L_0x04c9
            org.telegram.tgnet.TLRPC$PeerNotifySettings r3 = r0.notify_settings
            int r4 = r3.flags
            r4 = r4 & r2
            if (r4 == 0) goto L_0x04a1
            boolean r2 = r3.show_previews
            java.lang.String r3 = "EnablePreviewChannel"
            r1.putBoolean(r3, r2)
        L_0x04a1:
            org.telegram.tgnet.TLRPC$PeerNotifySettings r2 = r0.notify_settings
            int r2 = r2.flags
            r3 = 4
            r2 = r2 & r3
            if (r2 == 0) goto L_0x04c9
            android.content.SharedPreferences r2 = r8.notificationsPreferences
            java.lang.String r3 = "EnableChannel2"
            r4 = 0
            int r2 = r2.getInt(r3, r4)
            org.telegram.tgnet.TLRPC$PeerNotifySettings r0 = r0.notify_settings
            int r0 = r0.mute_until
            if (r2 == r0) goto L_0x04c9
            r1.putInt(r3, r0)
            java.lang.String r0 = "overwrite_channel"
            r2 = 1
            r1.putBoolean(r0, r2)
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda18 r0 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda18
            r0.<init>(r8)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r0)
        L_0x04c9:
            org.telegram.messenger.MessagesStorage r0 = r38.getMessagesStorage()
            r0.updateMutedDialogsFiltersCounters()
            r23 = r1
            goto L_0x04d4
        L_0x04d3:
            r7 = 2
        L_0x04d4:
            r3 = 0
            goto L_0x0b62
        L_0x04d8:
            r7 = 2
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateChannel
            if (r1 == 0) goto L_0x0571
            org.telegram.tgnet.TLRPC$TL_updateChannel r0 = (org.telegram.tgnet.TLRPC$TL_updateChannel) r0
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r1 = r8.dialogs_dict
            long r2 = r0.channel_id
            long r2 = -r2
            java.lang.Object r1 = r1.get(r2)
            org.telegram.tgnet.TLRPC$Dialog r1 = (org.telegram.tgnet.TLRPC$Dialog) r1
            long r2 = r0.channel_id
            java.lang.Long r2 = java.lang.Long.valueOf(r2)
            org.telegram.tgnet.TLRPC$Chat r2 = r8.getChat(r2)
            if (r2 == 0) goto L_0x0562
            if (r1 != 0) goto L_0x050b
            boolean r3 = r2 instanceof org.telegram.tgnet.TLRPC$TL_channel
            if (r3 == 0) goto L_0x050b
            boolean r3 = r2.left
            if (r3 != 0) goto L_0x050b
            org.telegram.messenger.DispatchQueue r1 = org.telegram.messenger.Utilities.stageQueue
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda155 r3 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda155
            r3.<init>(r8, r0)
            r1.postRunnable(r3)
            goto L_0x0525
        L_0x050b:
            boolean r3 = org.telegram.messenger.ChatObject.isNotInChat(r2)
            if (r3 == 0) goto L_0x0525
            if (r1 == 0) goto L_0x0525
            org.telegram.tgnet.TLRPC$Dialog r3 = r8.promoDialog
            if (r3 == 0) goto L_0x051f
            long r3 = r3.id
            long r5 = r1.id
            int r14 = (r3 > r5 ? 1 : (r3 == r5 ? 0 : -1))
            if (r14 == 0) goto L_0x0525
        L_0x051f:
            long r3 = r1.id
            r1 = 0
            r8.deleteDialog(r3, r1)
        L_0x0525:
            boolean r1 = r2 instanceof org.telegram.tgnet.TLRPC$TL_channelForbidden
            if (r1 != 0) goto L_0x052d
            boolean r1 = r2.kicked
            if (r1 == 0) goto L_0x0562
        L_0x052d:
            long r3 = r2.id
            r1 = 0
            org.telegram.messenger.ChatObject$Call r3 = r8.getGroupCall(r3, r1)
            if (r3 == 0) goto L_0x0562
            org.telegram.tgnet.TLRPC$TL_updateGroupCall r1 = new org.telegram.tgnet.TLRPC$TL_updateGroupCall
            r1.<init>()
            long r4 = r2.id
            r1.chat_id = r4
            org.telegram.tgnet.TLRPC$TL_groupCallDiscarded r2 = new org.telegram.tgnet.TLRPC$TL_groupCallDiscarded
            r2.<init>()
            r1.call = r2
            org.telegram.tgnet.TLRPC$GroupCall r4 = r3.call
            long r5 = r4.id
            r2.id = r5
            long r4 = r4.access_hash
            r2.access_hash = r4
            r3.processGroupCallUpdate(r1)
            org.telegram.messenger.voip.VoIPService r2 = org.telegram.messenger.voip.VoIPService.getSharedInstance()
            if (r2 == 0) goto L_0x0562
            org.telegram.messenger.voip.VoIPService r2 = org.telegram.messenger.voip.VoIPService.getSharedInstance()
            org.telegram.tgnet.TLRPC$GroupCall r1 = r1.call
            r2.onGroupCallUpdated(r1)
        L_0x0562:
            int r1 = UPDATE_MASK_CHAT
            r1 = r21 | r1
            long r2 = r0.channel_id
            r4 = 1
            r5 = 0
            r8.loadFullChat(r2, r5, r4)
        L_0x056d:
            r21 = r1
            goto L_0x04d4
        L_0x0571:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateChat
            if (r1 == 0) goto L_0x05e0
            org.telegram.tgnet.TLRPC$TL_updateChat r0 = (org.telegram.tgnet.TLRPC$TL_updateChat) r0
            long r1 = r0.chat_id
            java.lang.Long r1 = java.lang.Long.valueOf(r1)
            org.telegram.tgnet.TLRPC$Chat r1 = r8.getChat(r1)
            if (r1 == 0) goto L_0x05d4
            boolean r2 = r1 instanceof org.telegram.tgnet.TLRPC$TL_chatForbidden
            if (r2 != 0) goto L_0x058b
            boolean r2 = r1.kicked
            if (r2 == 0) goto L_0x05d4
        L_0x058b:
            long r2 = r1.id
            r4 = 0
            org.telegram.messenger.ChatObject$Call r2 = r8.getGroupCall(r2, r4)
            if (r2 == 0) goto L_0x05c0
            org.telegram.tgnet.TLRPC$TL_updateGroupCall r3 = new org.telegram.tgnet.TLRPC$TL_updateGroupCall
            r3.<init>()
            long r4 = r1.id
            r3.chat_id = r4
            org.telegram.tgnet.TLRPC$TL_groupCallDiscarded r4 = new org.telegram.tgnet.TLRPC$TL_groupCallDiscarded
            r4.<init>()
            r3.call = r4
            org.telegram.tgnet.TLRPC$GroupCall r5 = r2.call
            long r14 = r5.id
            r4.id = r14
            long r5 = r5.access_hash
            r4.access_hash = r5
            r2.processGroupCallUpdate(r3)
            org.telegram.messenger.voip.VoIPService r2 = org.telegram.messenger.voip.VoIPService.getSharedInstance()
            if (r2 == 0) goto L_0x05c0
            org.telegram.messenger.voip.VoIPService r2 = org.telegram.messenger.voip.VoIPService.getSharedInstance()
            org.telegram.tgnet.TLRPC$GroupCall r3 = r3.call
            r2.onGroupCallUpdated(r3)
        L_0x05c0:
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r2 = r8.dialogs_dict
            long r3 = r1.id
            long r3 = -r3
            java.lang.Object r1 = r2.get(r3)
            org.telegram.tgnet.TLRPC$Dialog r1 = (org.telegram.tgnet.TLRPC$Dialog) r1
            if (r1 == 0) goto L_0x05d4
            long r1 = r1.id
            r3 = 0
            r8.deleteDialog(r1, r3)
            goto L_0x05d5
        L_0x05d4:
            r3 = 0
        L_0x05d5:
            int r1 = UPDATE_MASK_CHAT
            r1 = r21 | r1
            long r4 = r0.chat_id
            r2 = 1
            r8.loadFullChat(r4, r3, r2)
            goto L_0x056d
        L_0x05e0:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateChatDefaultBannedRights
            if (r1 == 0) goto L_0x060b
            org.telegram.tgnet.TLRPC$TL_updateChatDefaultBannedRights r0 = (org.telegram.tgnet.TLRPC$TL_updateChatDefaultBannedRights) r0
            org.telegram.tgnet.TLRPC$Peer r1 = r0.peer
            long r2 = r1.channel_id
            r4 = 0
            int r6 = (r2 > r4 ? 1 : (r2 == r4 ? 0 : -1))
            if (r6 == 0) goto L_0x05f1
            goto L_0x05f3
        L_0x05f1:
            long r2 = r1.chat_id
        L_0x05f3:
            java.lang.Long r1 = java.lang.Long.valueOf(r2)
            org.telegram.tgnet.TLRPC$Chat r1 = r8.getChat(r1)
            if (r1 == 0) goto L_0x04d4
            org.telegram.tgnet.TLRPC$TL_chatBannedRights r0 = r0.default_banned_rights
            r1.default_banned_rights = r0
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda126 r0 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda126
            r0.<init>(r8, r1)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r0)
            goto L_0x04d4
        L_0x060b:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateBotCommands
            if (r1 == 0) goto L_0x0620
            org.telegram.tgnet.TLRPC$TL_updateBotCommands r0 = (org.telegram.tgnet.TLRPC$TL_updateBotCommands) r0
            org.telegram.messenger.MediaDataController r1 = r38.getMediaDataController()
            org.telegram.tgnet.TLRPC$Peer r2 = r0.peer
            long r2 = org.telegram.messenger.MessageObject.getPeerId(r2)
            r1.updateBotInfo(r2, r0)
            goto L_0x04d4
        L_0x0620:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateStickerSets
            if (r1 == 0) goto L_0x0631
            org.telegram.tgnet.TLRPC$TL_updateStickerSets r0 = (org.telegram.tgnet.TLRPC$TL_updateStickerSets) r0
            org.telegram.messenger.MediaDataController r0 = r38.getMediaDataController()
            r1 = 1
            r2 = 0
            r0.loadStickers(r2, r2, r1)
            goto L_0x04d4
        L_0x0631:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateStickerSetsOrder
            if (r1 == 0) goto L_0x0644
            org.telegram.tgnet.TLRPC$TL_updateStickerSetsOrder r0 = (org.telegram.tgnet.TLRPC$TL_updateStickerSetsOrder) r0
            org.telegram.messenger.MediaDataController r1 = r38.getMediaDataController()
            boolean r2 = r0.masks
            java.util.ArrayList<java.lang.Long> r0 = r0.order
            r1.reorderStickers(r2, r0)
            goto L_0x04d4
        L_0x0644:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateFavedStickers
            if (r1 == 0) goto L_0x0653
            org.telegram.messenger.MediaDataController r0 = r38.getMediaDataController()
            r1 = 1
            r2 = 0
            r0.loadRecents(r7, r2, r2, r1)
            goto L_0x04d4
        L_0x0653:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateContactsReset
            if (r1 == 0) goto L_0x0660
            org.telegram.messenger.ContactsController r0 = r38.getContactsController()
            r0.forceImportContacts()
            goto L_0x04d4
        L_0x0660:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateNewStickerSet
            if (r1 == 0) goto L_0x0671
            org.telegram.tgnet.TLRPC$TL_updateNewStickerSet r0 = (org.telegram.tgnet.TLRPC$TL_updateNewStickerSet) r0
            org.telegram.messenger.MediaDataController r1 = r38.getMediaDataController()
            org.telegram.tgnet.TLRPC$TL_messages_stickerSet r0 = r0.stickerset
            r1.addNewStickerSet(r0)
            goto L_0x04d4
        L_0x0671:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateSavedGifs
            if (r1 == 0) goto L_0x0689
            android.content.SharedPreferences r0 = r8.emojiPreferences
            android.content.SharedPreferences$Editor r0 = r0.edit()
            java.lang.String r1 = "lastGifLoadTime"
            r2 = 0
            android.content.SharedPreferences$Editor r0 = r0.putLong(r1, r2)
            r0.commit()
        L_0x0686:
            r3 = r2
            goto L_0x0b62
        L_0x0689:
            r2 = 0
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateRecentStickers
            if (r1 == 0) goto L_0x069f
            android.content.SharedPreferences r0 = r8.emojiPreferences
            android.content.SharedPreferences$Editor r0 = r0.edit()
            java.lang.String r1 = "lastStickersLoadTime"
            android.content.SharedPreferences$Editor r0 = r0.putLong(r1, r2)
            r0.commit()
            goto L_0x0686
        L_0x069f:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateDraftMessage
            if (r1 == 0) goto L_0x06d3
            org.telegram.tgnet.TLRPC$TL_updateDraftMessage r0 = (org.telegram.tgnet.TLRPC$TL_updateDraftMessage) r0
            org.telegram.tgnet.TLRPC$Peer r1 = r0.peer
            long r4 = r1.user_id
            int r6 = (r4 > r2 ? 1 : (r4 == r2 ? 0 : -1))
            if (r6 == 0) goto L_0x06b0
        L_0x06ad:
            r32 = r4
            goto L_0x06bc
        L_0x06b0:
            long r4 = r1.channel_id
            int r6 = (r4 > r2 ? 1 : (r4 == r2 ? 0 : -1))
            if (r6 == 0) goto L_0x06b8
            long r4 = -r4
            goto L_0x06ad
        L_0x06b8:
            long r1 = r1.chat_id
            long r4 = -r1
            goto L_0x06ad
        L_0x06bc:
            org.telegram.messenger.MediaDataController r31 = r38.getMediaDataController()
            r34 = 0
            org.telegram.tgnet.TLRPC$DraftMessage r0 = r0.draft
            r36 = 0
            r37 = 1
            r35 = r0
            r31.saveDraft(r32, r34, r35, r36, r37)
            r3 = 0
            r25 = 1
            goto L_0x0b62
        L_0x06d3:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateReadFeaturedStickers
            if (r1 == 0) goto L_0x06e1
            org.telegram.messenger.MediaDataController r0 = r38.getMediaDataController()
            r1 = 0
            r0.markFaturedStickersAsRead(r1)
            goto L_0x04d4
        L_0x06e1:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updatePhoneCallSignalingData
            if (r1 == 0) goto L_0x06f2
            org.telegram.tgnet.TLRPC$TL_updatePhoneCallSignalingData r0 = (org.telegram.tgnet.TLRPC$TL_updatePhoneCallSignalingData) r0
            org.telegram.messenger.voip.VoIPService r1 = org.telegram.messenger.voip.VoIPService.getSharedInstance()
            if (r1 == 0) goto L_0x04d4
            r1.onSignalingData((org.telegram.tgnet.TLRPC$TL_updatePhoneCallSignalingData) r0)
            goto L_0x04d4
        L_0x06f2:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateGroupCallParticipants
            if (r1 == 0) goto L_0x0719
            org.telegram.tgnet.TLRPC$TL_updateGroupCallParticipants r0 = (org.telegram.tgnet.TLRPC$TL_updateGroupCallParticipants) r0
            androidx.collection.LongSparseArray<org.telegram.messenger.ChatObject$Call> r1 = r8.groupCalls
            org.telegram.tgnet.TLRPC$TL_inputGroupCall r2 = r0.call
            long r2 = r2.id
            java.lang.Object r1 = r1.get(r2)
            org.telegram.messenger.ChatObject$Call r1 = (org.telegram.messenger.ChatObject.Call) r1
            if (r1 == 0) goto L_0x070a
            r2 = 0
            r1.processParticipantsUpdate(r0, r2)
        L_0x070a:
            org.telegram.messenger.voip.VoIPService r1 = org.telegram.messenger.voip.VoIPService.getSharedInstance()
            if (r1 == 0) goto L_0x04d4
            org.telegram.messenger.voip.VoIPService r1 = org.telegram.messenger.voip.VoIPService.getSharedInstance()
            r1.onGroupCallParticipantsUpdate(r0)
            goto L_0x04d4
        L_0x0719:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateGroupCall
            if (r1 == 0) goto L_0x0773
            org.telegram.tgnet.TLRPC$TL_updateGroupCall r0 = (org.telegram.tgnet.TLRPC$TL_updateGroupCall) r0
            androidx.collection.LongSparseArray<org.telegram.messenger.ChatObject$Call> r1 = r8.groupCalls
            org.telegram.tgnet.TLRPC$GroupCall r2 = r0.call
            long r2 = r2.id
            java.lang.Object r1 = r1.get(r2)
            org.telegram.messenger.ChatObject$Call r1 = (org.telegram.messenger.ChatObject.Call) r1
            if (r1 == 0) goto L_0x0743
            r1.processGroupCallUpdate(r0)
            long r1 = r1.chatId
            java.lang.Long r1 = java.lang.Long.valueOf(r1)
            org.telegram.tgnet.TLRPC$Chat r1 = r8.getChat(r1)
            if (r1 == 0) goto L_0x0762
            org.telegram.tgnet.TLRPC$GroupCall r2 = r0.call
            boolean r2 = r2 instanceof org.telegram.tgnet.TLRPC$TL_groupCall
            r1.call_active = r2
            goto L_0x0762
        L_0x0743:
            long r1 = r0.chat_id
            org.telegram.tgnet.TLRPC$ChatFull r1 = r8.getChatFull(r1)
            if (r1 == 0) goto L_0x0762
            org.telegram.tgnet.TLRPC$TL_inputGroupCall r1 = r1.call
            if (r1 == 0) goto L_0x075b
            if (r1 == 0) goto L_0x0762
            long r1 = r1.id
            org.telegram.tgnet.TLRPC$GroupCall r3 = r0.call
            long r3 = r3.id
            int r5 = (r1 > r3 ? 1 : (r1 == r3 ? 0 : -1))
            if (r5 == 0) goto L_0x0762
        L_0x075b:
            long r1 = r0.chat_id
            r3 = 1
            r4 = 0
            r8.loadFullChat(r1, r4, r3)
        L_0x0762:
            org.telegram.messenger.voip.VoIPService r1 = org.telegram.messenger.voip.VoIPService.getSharedInstance()
            if (r1 == 0) goto L_0x04d4
            org.telegram.messenger.voip.VoIPService r1 = org.telegram.messenger.voip.VoIPService.getSharedInstance()
            org.telegram.tgnet.TLRPC$GroupCall r0 = r0.call
            r1.onGroupCallUpdated(r0)
            goto L_0x04d4
        L_0x0773:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updatePhoneCall
            if (r1 == 0) goto L_0x08ee
            org.telegram.tgnet.TLRPC$TL_updatePhoneCall r0 = (org.telegram.tgnet.TLRPC$TL_updatePhoneCall) r0
            org.telegram.tgnet.TLRPC$PhoneCall r0 = r0.phone_call
            org.telegram.messenger.voip.VoIPService r1 = org.telegram.messenger.voip.VoIPService.getSharedInstance()
            boolean r2 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r2 == 0) goto L_0x07ad
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            java.lang.String r3 = "Received call in update: "
            r2.append(r3)
            r2.append(r0)
            java.lang.String r2 = r2.toString()
            org.telegram.messenger.FileLog.d(r2)
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            java.lang.String r3 = "call id "
            r2.append(r3)
            long r3 = r0.id
            r2.append(r3)
            java.lang.String r2 = r2.toString()
            org.telegram.messenger.FileLog.d(r2)
        L_0x07ad:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_phoneCallRequested
            if (r2 == 0) goto L_0x08ca
            int r2 = r0.date
            int r3 = r8.callRingTimeout
            int r3 = r3 / 1000
            int r2 = r2 + r3
            org.telegram.tgnet.ConnectionsManager r3 = r38.getConnectionsManager()
            int r3 = r3.getCurrentTime()
            if (r2 >= r3) goto L_0x07cd
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x04d4
            java.lang.String r0 = "ignoring too old call"
            org.telegram.messenger.FileLog.d(r0)
            goto L_0x04d4
        L_0x07cd:
            int r2 = android.os.Build.VERSION.SDK_INT
            r3 = 21
            if (r2 < r3) goto L_0x07f5
            android.content.Context r3 = org.telegram.messenger.ApplicationLoader.applicationContext
            androidx.core.app.NotificationManagerCompat r3 = androidx.core.app.NotificationManagerCompat.from(r3)
            boolean r3 = r3.areNotificationsEnabled()
            if (r3 != 0) goto L_0x07f5
            boolean r3 = org.telegram.messenger.ApplicationLoader.mainInterfacePaused
            if (r3 != 0) goto L_0x07ea
            boolean r3 = org.telegram.messenger.ApplicationLoader.isScreenOn
            if (r3 != 0) goto L_0x07e8
            goto L_0x07ea
        L_0x07e8:
            r6 = 1
            goto L_0x07f6
        L_0x07ea:
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x04d4
            java.lang.String r0 = "Ignoring incoming call because notifications are disabled in system"
            org.telegram.messenger.FileLog.d(r0)
            goto L_0x04d4
        L_0x07f5:
            r6 = 0
        L_0x07f6:
            android.content.Context r3 = org.telegram.messenger.ApplicationLoader.applicationContext
            java.lang.String r4 = "phone"
            java.lang.Object r3 = r3.getSystemService(r4)
            android.telephony.TelephonyManager r3 = (android.telephony.TelephonyManager) r3
            if (r1 != 0) goto L_0x0882
            org.telegram.tgnet.TLRPC$PhoneCall r1 = org.telegram.messenger.voip.VoIPService.callIShouldHavePutIntoIntent
            if (r1 != 0) goto L_0x0882
            int r1 = r3.getCallState()
            if (r1 == 0) goto L_0x080e
            goto L_0x0882
        L_0x080e:
            boolean r1 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r1 == 0) goto L_0x0828
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r3 = "Starting service for call "
            r1.append(r3)
            long r3 = r0.id
            r1.append(r3)
            java.lang.String r1 = r1.toString()
            org.telegram.messenger.FileLog.d(r1)
        L_0x0828:
            org.telegram.messenger.voip.VoIPService.callIShouldHavePutIntoIntent = r0
            android.content.Intent r1 = new android.content.Intent
            android.content.Context r3 = org.telegram.messenger.ApplicationLoader.applicationContext
            java.lang.Class<org.telegram.messenger.voip.VoIPService> r4 = org.telegram.messenger.voip.VoIPService.class
            r1.<init>(r3, r4)
            java.lang.String r3 = "is_outgoing"
            r4 = 0
            r1.putExtra(r3, r4)
            long r3 = r0.participant_id
            org.telegram.messenger.UserConfig r5 = r38.getUserConfig()
            long r14 = r5.getClientUserId()
            int r5 = (r3 > r14 ? 1 : (r3 == r14 ? 0 : -1))
            if (r5 != 0) goto L_0x084a
            long r3 = r0.admin_id
            goto L_0x084c
        L_0x084a:
            long r3 = r0.participant_id
        L_0x084c:
            java.lang.String r0 = "user_id"
            r1.putExtra(r0, r3)
            int r0 = r8.currentAccount
            java.lang.String r3 = "account"
            r1.putExtra(r3, r0)
            java.lang.String r0 = "notifications_disabled"
            r1.putExtra(r0, r6)
            if (r6 != 0) goto L_0x086a
            r0 = 26
            if (r2 < r0) goto L_0x086a
            android.content.Context r0 = org.telegram.messenger.ApplicationLoader.applicationContext     // Catch:{ all -> 0x087c }
            r0.startForegroundService(r1)     // Catch:{ all -> 0x087c }
            goto L_0x086f
        L_0x086a:
            android.content.Context r0 = org.telegram.messenger.ApplicationLoader.applicationContext     // Catch:{ all -> 0x087c }
            r0.startService(r1)     // Catch:{ all -> 0x087c }
        L_0x086f:
            boolean r0 = org.telegram.messenger.ApplicationLoader.mainInterfacePaused     // Catch:{ all -> 0x087c }
            if (r0 != 0) goto L_0x0877
            boolean r0 = org.telegram.messenger.ApplicationLoader.isScreenOn     // Catch:{ all -> 0x087c }
            if (r0 != 0) goto L_0x04d4
        L_0x0877:
            r1 = 1
            r8.ignoreSetOnline = r1     // Catch:{ all -> 0x087c }
            goto L_0x04d4
        L_0x087c:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
            goto L_0x04d4
        L_0x0882:
            boolean r1 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r1 == 0) goto L_0x08a1
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "Auto-declining call "
            r1.append(r2)
            long r2 = r0.id
            r1.append(r2)
            java.lang.String r2 = " because there's already active one"
            r1.append(r2)
            java.lang.String r1 = r1.toString()
            org.telegram.messenger.FileLog.d(r1)
        L_0x08a1:
            org.telegram.tgnet.TLRPC$TL_phone_discardCall r1 = new org.telegram.tgnet.TLRPC$TL_phone_discardCall
            r1.<init>()
            org.telegram.tgnet.TLRPC$TL_inputPhoneCall r2 = new org.telegram.tgnet.TLRPC$TL_inputPhoneCall
            r2.<init>()
            r1.peer = r2
            long r3 = r0.access_hash
            r2.access_hash = r3
            long r3 = r0.id
            r2.id = r3
            org.telegram.tgnet.TLRPC$TL_phoneCallDiscardReasonBusy r0 = new org.telegram.tgnet.TLRPC$TL_phoneCallDiscardReasonBusy
            r0.<init>()
            r1.reason = r0
            org.telegram.tgnet.ConnectionsManager r0 = r38.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda225 r2 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda225
            r2.<init>(r8)
            r0.sendRequest(r1, r2)
            goto L_0x04d4
        L_0x08ca:
            if (r1 == 0) goto L_0x08d3
            if (r0 == 0) goto L_0x08d3
            r1.onCallUpdated(r0)
            goto L_0x04d4
        L_0x08d3:
            org.telegram.tgnet.TLRPC$PhoneCall r1 = org.telegram.messenger.voip.VoIPService.callIShouldHavePutIntoIntent
            if (r1 == 0) goto L_0x04d4
            boolean r1 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r1 == 0) goto L_0x08e0
            java.lang.String r1 = "Updated the call while the service is starting"
            org.telegram.messenger.FileLog.d(r1)
        L_0x08e0:
            long r1 = r0.id
            org.telegram.tgnet.TLRPC$PhoneCall r3 = org.telegram.messenger.voip.VoIPService.callIShouldHavePutIntoIntent
            long r3 = r3.id
            int r5 = (r1 > r3 ? 1 : (r1 == r3 ? 0 : -1))
            if (r5 != 0) goto L_0x04d4
            org.telegram.messenger.voip.VoIPService.callIShouldHavePutIntoIntent = r0
            goto L_0x04d4
        L_0x08ee:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateDialogUnreadMark
            if (r1 == 0) goto L_0x0956
            org.telegram.tgnet.TLRPC$TL_updateDialogUnreadMark r0 = (org.telegram.tgnet.TLRPC$TL_updateDialogUnreadMark) r0
            org.telegram.tgnet.TLRPC$DialogPeer r1 = r0.peer
            boolean r2 = r1 instanceof org.telegram.tgnet.TLRPC$TL_dialogPeer
            if (r2 == 0) goto L_0x0914
            org.telegram.tgnet.TLRPC$TL_dialogPeer r1 = (org.telegram.tgnet.TLRPC$TL_dialogPeer) r1
            org.telegram.tgnet.TLRPC$Peer r1 = r1.peer
            long r2 = r1.user_id
            r4 = 0
            int r6 = (r2 > r4 ? 1 : (r2 == r4 ? 0 : -1))
            if (r6 == 0) goto L_0x0908
            r1 = r2
            goto L_0x0916
        L_0x0908:
            long r2 = r1.chat_id
            int r6 = (r2 > r4 ? 1 : (r2 == r4 ? 0 : -1))
            if (r6 == 0) goto L_0x0910
            long r1 = -r2
            goto L_0x0916
        L_0x0910:
            long r1 = r1.channel_id
            long r1 = -r1
            goto L_0x0916
        L_0x0914:
            r1 = 0
        L_0x0916:
            org.telegram.messenger.MessagesStorage r3 = r38.getMessagesStorage()
            boolean r4 = r0.unread
            r3.setDialogUnread(r1, r4)
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r3 = r8.dialogs_dict
            java.lang.Object r3 = r3.get(r1)
            org.telegram.tgnet.TLRPC$Dialog r3 = (org.telegram.tgnet.TLRPC$Dialog) r3
            if (r3 == 0) goto L_0x04d4
            boolean r4 = r3.unread_mark
            boolean r0 = r0.unread
            if (r4 == r0) goto L_0x04d4
            r3.unread_mark = r0
            int r0 = r3.unread_count
            if (r0 != 0) goto L_0x094c
            boolean r0 = r8.isDialogMuted(r1)
            if (r0 != 0) goto L_0x094c
            boolean r0 = r3.unread_mark
            if (r0 == 0) goto L_0x0946
            int r0 = r8.unreadUnmutedDialogs
            r1 = 1
            int r0 = r0 + r1
            r8.unreadUnmutedDialogs = r0
            goto L_0x094c
        L_0x0946:
            r1 = 1
            int r0 = r8.unreadUnmutedDialogs
            int r0 = r0 - r1
            r8.unreadUnmutedDialogs = r0
        L_0x094c:
            int r0 = UPDATE_MASK_READ_DIALOG_MESSAGE
            r21 = r21 | r0
            int r0 = DIALOG_FILTER_FLAG_EXCLUDE_READ
            r24 = r24 | r0
            goto L_0x04d4
        L_0x0956:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateMessagePoll
            if (r1 == 0) goto L_0x097c
            org.telegram.tgnet.TLRPC$TL_updateMessagePoll r0 = (org.telegram.tgnet.TLRPC$TL_updateMessagePoll) r0
            org.telegram.messenger.NotificationCenter r1 = r38.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.didUpdatePollResults
            r3 = 3
            java.lang.Object[] r4 = new java.lang.Object[r3]
            long r5 = r0.poll_id
            java.lang.Long r3 = java.lang.Long.valueOf(r5)
            r5 = 0
            r4[r5] = r3
            org.telegram.tgnet.TLRPC$Poll r3 = r0.poll
            r5 = 1
            r4[r5] = r3
            org.telegram.tgnet.TLRPC$PollResults r0 = r0.results
            r4[r7] = r0
            r1.postNotificationName(r2, r4)
            goto L_0x04d4
        L_0x097c:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updatePeerSettings
            if (r1 == 0) goto L_0x099d
            org.telegram.tgnet.TLRPC$TL_updatePeerSettings r0 = (org.telegram.tgnet.TLRPC$TL_updatePeerSettings) r0
            org.telegram.tgnet.TLRPC$Peer r1 = r0.peer
            boolean r2 = r1 instanceof org.telegram.tgnet.TLRPC$TL_peerUser
            if (r2 == 0) goto L_0x098b
            long r1 = r1.user_id
            goto L_0x0995
        L_0x098b:
            boolean r2 = r1 instanceof org.telegram.tgnet.TLRPC$TL_peerChat
            if (r2 == 0) goto L_0x0992
            long r1 = r1.chat_id
            goto L_0x0994
        L_0x0992:
            long r1 = r1.channel_id
        L_0x0994:
            long r1 = -r1
        L_0x0995:
            org.telegram.tgnet.TLRPC$TL_peerSettings r0 = r0.settings
            r3 = 1
            r8.savePeerSettings(r1, r0, r3)
            goto L_0x04d4
        L_0x099d:
            r3 = 1
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updatePeerLocated
            if (r1 == 0) goto L_0x09b2
            org.telegram.messenger.NotificationCenter r1 = r38.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.newPeopleNearbyAvailable
            java.lang.Object[] r4 = new java.lang.Object[r3]
            r3 = 0
            r4[r3] = r0
            r1.postNotificationName(r2, r4)
            goto L_0x04d4
        L_0x09b2:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateMessageReactions
            if (r1 == 0) goto L_0x09ef
            org.telegram.tgnet.TLRPC$TL_updateMessageReactions r0 = (org.telegram.tgnet.TLRPC$TL_updateMessageReactions) r0
            org.telegram.tgnet.TLRPC$Peer r1 = r0.peer
            long r2 = r1.chat_id
            r4 = 0
            int r6 = (r2 > r4 ? 1 : (r2 == r4 ? 0 : -1))
            if (r6 == 0) goto L_0x09c4
        L_0x09c2:
            long r1 = -r2
            goto L_0x09cd
        L_0x09c4:
            long r2 = r1.channel_id
            int r6 = (r2 > r4 ? 1 : (r2 == r4 ? 0 : -1))
            if (r6 == 0) goto L_0x09cb
            goto L_0x09c2
        L_0x09cb:
            long r1 = r1.user_id
        L_0x09cd:
            org.telegram.messenger.NotificationCenter r3 = r38.getNotificationCenter()
            int r4 = org.telegram.messenger.NotificationCenter.didUpdateReactions
            r5 = 3
            java.lang.Object[] r6 = new java.lang.Object[r5]
            java.lang.Long r1 = java.lang.Long.valueOf(r1)
            r2 = 0
            r6[r2] = r1
            int r1 = r0.msg_id
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            r2 = 1
            r6[r2] = r1
            org.telegram.tgnet.TLRPC$TL_messageReactions r0 = r0.reactions
            r6[r7] = r0
            r3.postNotificationName(r4, r6)
            goto L_0x04d4
        L_0x09ef:
            r2 = 1
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateTheme
            if (r1 == 0) goto L_0x0a02
            org.telegram.tgnet.TLRPC$TL_updateTheme r0 = (org.telegram.tgnet.TLRPC$TL_updateTheme) r0
            org.telegram.tgnet.TLRPC$Theme r0 = r0.theme
            org.telegram.tgnet.TLRPC$TL_theme r0 = (org.telegram.tgnet.TLRPC$TL_theme) r0
            int r1 = r8.currentAccount
            r3 = 0
            org.telegram.ui.ActionBar.Theme.setThemeUploadInfo(r3, r3, r0, r1, r2)
            goto L_0x04d4
        L_0x0a02:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateDialogFilter
            if (r1 == 0) goto L_0x0a0b
            r8.loadRemoteFilters(r2)
            goto L_0x04d4
        L_0x0a0b:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateDialogFilterOrder
            if (r1 == 0) goto L_0x0a14
            r8.loadRemoteFilters(r2)
            goto L_0x04d4
        L_0x0a14:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateDialogFilters
            if (r1 == 0) goto L_0x0a1d
            r8.loadRemoteFilters(r2)
            goto L_0x04d4
        L_0x0a1d:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateReadChannelDiscussionInbox
            if (r1 == 0) goto L_0x0a8f
            org.telegram.tgnet.TLRPC$TL_updateReadChannelDiscussionInbox r0 = (org.telegram.tgnet.TLRPC$TL_updateReadChannelDiscussionInbox) r0
            org.telegram.messenger.NotificationCenter r1 = r38.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.threadMessagesRead
            r3 = 4
            java.lang.Object[] r4 = new java.lang.Object[r3]
            long r5 = r0.channel_id
            long r5 = -r5
            java.lang.Long r3 = java.lang.Long.valueOf(r5)
            r5 = 0
            r4[r5] = r3
            int r3 = r0.top_msg_id
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)
            r5 = 1
            r4[r5] = r3
            int r3 = r0.read_max_id
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)
            r4[r7] = r3
            r3 = 3
            r4[r3] = r18
            r1.postNotificationName(r2, r4)
            int r1 = r0.flags
            r1 = r1 & r5
            if (r1 == 0) goto L_0x04d4
            org.telegram.messenger.MessagesStorage r31 = r38.getMessagesStorage()
            long r1 = r0.broadcast_id
            int r3 = r0.broadcast_post
            int r4 = r0.read_max_id
            r36 = 1
            r32 = r1
            r34 = r3
            r35 = r4
            r31.updateRepliesMaxReadId(r32, r34, r35, r36)
            org.telegram.messenger.NotificationCenter r1 = r38.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.commentsRead
            r3 = 3
            java.lang.Object[] r4 = new java.lang.Object[r3]
            long r5 = r0.broadcast_id
            java.lang.Long r3 = java.lang.Long.valueOf(r5)
            r5 = 0
            r4[r5] = r3
            int r3 = r0.broadcast_post
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)
            r5 = 1
            r4[r5] = r3
            int r0 = r0.read_max_id
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)
            r4[r7] = r0
            r1.postNotificationName(r2, r4)
            goto L_0x04d4
        L_0x0a8f:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateReadChannelDiscussionOutbox
            if (r1 == 0) goto L_0x0ac1
            org.telegram.tgnet.TLRPC$TL_updateReadChannelDiscussionOutbox r0 = (org.telegram.tgnet.TLRPC$TL_updateReadChannelDiscussionOutbox) r0
            org.telegram.messenger.NotificationCenter r1 = r38.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.threadMessagesRead
            r3 = 4
            java.lang.Object[] r4 = new java.lang.Object[r3]
            long r5 = r0.channel_id
            long r5 = -r5
            java.lang.Long r3 = java.lang.Long.valueOf(r5)
            r5 = 0
            r4[r5] = r3
            int r3 = r0.top_msg_id
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)
            r5 = 1
            r4[r5] = r3
            r4[r7] = r18
            int r0 = r0.read_max_id
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)
            r3 = 3
            r4[r3] = r0
            r1.postNotificationName(r2, r4)
            goto L_0x04d4
        L_0x0ac1:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updatePeerHistoryTTL
            if (r1 == 0) goto L_0x04d4
            org.telegram.tgnet.TLRPC$TL_updatePeerHistoryTTL r0 = (org.telegram.tgnet.TLRPC$TL_updatePeerHistoryTTL) r0
            org.telegram.tgnet.TLRPC$Peer r1 = r0.peer
            long r1 = org.telegram.messenger.MessageObject.getPeerId(r1)
            r3 = 0
            int r5 = (r1 > r3 ? 1 : (r1 == r3 ? 0 : -1))
            if (r5 <= 0) goto L_0x0aef
            org.telegram.tgnet.TLRPC$UserFull r5 = r8.getUserFull(r1)
            if (r5 == 0) goto L_0x0aec
            int r0 = r0.ttl_period
            r5.ttl_period = r0
            if (r0 != 0) goto L_0x0ae6
            int r0 = r5.flags
            r0 = r0 & -16385(0xffffffffffffbfff, float:NaN)
            r5.flags = r0
            goto L_0x0aec
        L_0x0ae6:
            int r0 = r5.flags
            r0 = r0 | 16384(0x4000, float:2.2959E-41)
            r5.flags = r0
        L_0x0aec:
            r0 = r5
            r5 = 0
            goto L_0x0b21
        L_0x0aef:
            long r5 = -r1
            org.telegram.tgnet.TLRPC$ChatFull r5 = r8.getChatFull(r5)
            if (r5 == 0) goto L_0x0b20
            int r0 = r0.ttl_period
            r5.ttl_period = r0
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_channelFull
            if (r6 == 0) goto L_0x0b11
            if (r0 != 0) goto L_0x0b09
            int r0 = r5.flags
            r6 = -16777217(0xfffffffffeffffff, float:-1.7014117E38)
            r0 = r0 & r6
            r5.flags = r0
            goto L_0x0b20
        L_0x0b09:
            int r0 = r5.flags
            r6 = 16777216(0x1000000, float:2.3509887E-38)
            r0 = r0 | r6
            r5.flags = r0
            goto L_0x0b20
        L_0x0b11:
            if (r0 != 0) goto L_0x0b1a
            int r0 = r5.flags
            r0 = r0 & -16385(0xffffffffffffbfff, float:NaN)
            r5.flags = r0
            goto L_0x0b20
        L_0x0b1a:
            int r0 = r5.flags
            r0 = r0 | 16384(0x4000, float:2.2959E-41)
            r5.flags = r0
        L_0x0b20:
            r0 = 0
        L_0x0b21:
            if (r5 == 0) goto L_0x0b44
            org.telegram.messenger.NotificationCenter r0 = r38.getNotificationCenter()
            int r1 = org.telegram.messenger.NotificationCenter.chatInfoDidLoad
            r2 = 4
            java.lang.Object[] r6 = new java.lang.Object[r2]
            r14 = 0
            r6[r14] = r5
            r2 = 1
            r6[r2] = r18
            java.lang.Boolean r2 = java.lang.Boolean.FALSE
            r6[r7] = r2
            r15 = 3
            r6[r15] = r2
            r0.postNotificationName(r1, r6)
            org.telegram.messenger.MessagesStorage r0 = r38.getMessagesStorage()
            r0.updateChatInfo(r5, r14)
            goto L_0x0b62
        L_0x0b44:
            r14 = 0
            if (r0 == 0) goto L_0x0b62
            org.telegram.messenger.NotificationCenter r5 = r38.getNotificationCenter()
            int r6 = org.telegram.messenger.NotificationCenter.userInfoDidLoad
            java.lang.Object[] r15 = new java.lang.Object[r7]
            java.lang.Long r1 = java.lang.Long.valueOf(r1)
            r15[r14] = r1
            r1 = 1
            r15[r1] = r0
            r5.postNotificationName(r6, r15)
            org.telegram.messenger.MessagesStorage r1 = r38.getMessagesStorage()
            r1.updateUserInfo(r0, r14)
        L_0x0b62:
            int r1 = r22 + 1
            r14 = r46
            r15 = r47
            r5 = r9
            r2 = r20
            r4 = r30
            r7 = 0
            r9 = r40
            goto L_0x0034
        L_0x0b72:
            r30 = r4
            r9 = r5
            r3 = 0
            r7 = 2
            if (r23 == 0) goto L_0x0b8a
            r23.commit()
            org.telegram.messenger.NotificationCenter r0 = r38.getNotificationCenter()
            int r1 = org.telegram.messenger.NotificationCenter.notificationsSettingsUpdated
            r2 = 0
            java.lang.Object[] r5 = new java.lang.Object[r2]
            r0.postNotificationName(r1, r5)
            goto L_0x0b8b
        L_0x0b8a:
            r2 = 0
        L_0x0b8b:
            org.telegram.messenger.MessagesStorage r0 = r38.getMessagesStorage()
            r1 = r30
            r5 = 1
            r0.updateUsers(r1, r5, r5, r5)
            org.telegram.messenger.MessagesStorage r0 = r38.getMessagesStorage()
            r0.updateUsers(r9, r2, r5, r5)
            r6 = r25
            goto L_0x0ba7
        L_0x0b9f:
            r3 = 0
            r7 = 2
            r21 = r39
            r6 = 0
            r24 = 0
        L_0x0ba7:
            if (r10 == 0) goto L_0x0bd3
            int r0 = r41.size()
            r1 = 0
        L_0x0bae:
            if (r1 >= r0) goto L_0x0bd3
            long r14 = r10.keyAt(r1)
            androidx.collection.LongSparseArray<org.telegram.messenger.ChatObject$Call> r2 = r8.groupCallsByChatId
            java.lang.Object r2 = r2.get(r14)
            org.telegram.messenger.ChatObject$Call r2 = (org.telegram.messenger.ChatObject.Call) r2
            if (r2 == 0) goto L_0x0bce
            org.telegram.messenger.AccountInstance r5 = r38.getAccountInstance()
            java.lang.Object r9 = r10.valueAt(r1)
            java.util.ArrayList r9 = (java.util.ArrayList) r9
            r14 = r42
            r2.processTypingsUpdate(r5, r9, r14)
            goto L_0x0bd0
        L_0x0bce:
            r14 = r42
        L_0x0bd0:
            int r1 = r1 + 1
            goto L_0x0bae
        L_0x0bd3:
            if (r11 == 0) goto L_0x0bf5
            int r0 = r43.size()
            r1 = 0
        L_0x0bda:
            if (r1 >= r0) goto L_0x0bf5
            long r9 = r11.keyAt(r1)
            org.telegram.messenger.SendMessagesHelper r2 = r38.getSendMessagesHelper()
            org.telegram.messenger.SendMessagesHelper$ImportingHistory r2 = r2.getImportingHistory(r9)
            if (r2 != 0) goto L_0x0beb
            goto L_0x0bf2
        L_0x0beb:
            int r5 = r11.valueAt(r1)
            r2.setImportProgress(r5)
        L_0x0bf2:
            int r1 = r1 + 1
            goto L_0x0bda
        L_0x0bf5:
            if (r12 == 0) goto L_0x0ccd
            org.telegram.messenger.NotificationCenter r0 = r38.getNotificationCenter()
            int r1 = org.telegram.messenger.NotificationCenter.didReceivedWebpagesInUpdates
            r2 = 1
            java.lang.Object[] r5 = new java.lang.Object[r2]
            r9 = 0
            r5[r9] = r12
            r0.postNotificationName(r1, r5)
            r0 = 0
        L_0x0CLASSNAME:
            if (r0 >= r7) goto L_0x0ccd
            if (r0 != r2) goto L_0x0c0e
            androidx.collection.LongSparseArray<java.util.ArrayList<org.telegram.messenger.MessageObject>> r1 = r8.reloadingScheduledWebpagesPending
            goto L_0x0CLASSNAME
        L_0x0c0e:
            androidx.collection.LongSparseArray<java.util.ArrayList<org.telegram.messenger.MessageObject>> r1 = r8.reloadingWebpagesPending
        L_0x0CLASSNAME:
            int r2 = r44.size()
            r5 = 0
        L_0x0CLASSNAME:
            if (r5 >= r2) goto L_0x0cc5
            long r9 = r12.keyAt(r5)
            java.lang.Object r11 = r1.get(r9)
            java.util.ArrayList r11 = (java.util.ArrayList) r11
            r1.remove(r9)
            if (r11 == 0) goto L_0x0cbe
            java.lang.Object r9 = r12.valueAt(r5)
            org.telegram.tgnet.TLRPC$WebPage r9 = (org.telegram.tgnet.TLRPC$WebPage) r9
            java.util.ArrayList r15 = new java.util.ArrayList
            r15.<init>()
            boolean r10 = r9 instanceof org.telegram.tgnet.TLRPC$TL_webPage
            if (r10 != 0) goto L_0x0CLASSNAME
            boolean r10 = r9 instanceof org.telegram.tgnet.TLRPC$TL_webPageEmpty
            if (r10 == 0) goto L_0x0c3a
            goto L_0x0CLASSNAME
        L_0x0c3a:
            long r9 = r9.id
            r1.put(r9, r11)
            goto L_0x0CLASSNAME
        L_0x0CLASSNAME:
            int r10 = r11.size()
            r16 = r3
            r14 = 0
        L_0x0CLASSNAME:
            if (r14 >= r10) goto L_0x0CLASSNAME
            java.lang.Object r18 = r11.get(r14)
            r3 = r18
            org.telegram.messenger.MessageObject r3 = (org.telegram.messenger.MessageObject) r3
            org.telegram.tgnet.TLRPC$Message r3 = r3.messageOwner
            org.telegram.tgnet.TLRPC$MessageMedia r3 = r3.media
            r3.webpage = r9
            if (r14 != 0) goto L_0x0CLASSNAME
            java.lang.Object r3 = r11.get(r14)
            org.telegram.messenger.MessageObject r3 = (org.telegram.messenger.MessageObject) r3
            long r3 = r3.getDialogId()
            java.lang.Object r16 = r11.get(r14)
            r7 = r16
            org.telegram.messenger.MessageObject r7 = (org.telegram.messenger.MessageObject) r7
            org.telegram.tgnet.TLRPC$Message r7 = r7.messageOwner
            org.telegram.messenger.ImageLoader.saveMessageThumbs(r7)
            r16 = r3
        L_0x0CLASSNAME:
            java.lang.Object r3 = r11.get(r14)
            org.telegram.messenger.MessageObject r3 = (org.telegram.messenger.MessageObject) r3
            org.telegram.tgnet.TLRPC$Message r3 = r3.messageOwner
            r15.add(r3)
            int r14 = r14 + 1
            r3 = 0
            r7 = 2
            goto L_0x0CLASSNAME
        L_0x0CLASSNAME:
            r3 = r16
        L_0x0CLASSNAME:
            boolean r7 = r15.isEmpty()
            if (r7 != 0) goto L_0x0cbe
            org.telegram.messenger.MessagesStorage r14 = r38.getMessagesStorage()
            r16 = 1
            r17 = 1
            r18 = 0
            org.telegram.messenger.DownloadController r7 = r38.getDownloadController()
            int r19 = r7.getAutodownloadMask()
            r7 = 1
            if (r0 != r7) goto L_0x0ca3
            r20 = 1
            goto L_0x0ca5
        L_0x0ca3:
            r20 = 0
        L_0x0ca5:
            r14.putMessages((java.util.ArrayList<org.telegram.tgnet.TLRPC$Message>) r15, (boolean) r16, (boolean) r17, (boolean) r18, (int) r19, (boolean) r20)
            org.telegram.messenger.NotificationCenter r7 = r38.getNotificationCenter()
            int r9 = org.telegram.messenger.NotificationCenter.replaceMessagesObjects
            r10 = 2
            java.lang.Object[] r14 = new java.lang.Object[r10]
            java.lang.Long r3 = java.lang.Long.valueOf(r3)
            r4 = 0
            r14[r4] = r3
            r3 = 1
            r14[r3] = r11
            r7.postNotificationName(r9, r14)
        L_0x0cbe:
            int r5 = r5 + 1
            r3 = 0
            r7 = 2
            goto L_0x0CLASSNAME
        L_0x0cc5:
            int r0 = r0 + 1
            r2 = 1
            r3 = 0
            r7 = 2
            goto L_0x0CLASSNAME
        L_0x0ccd:
            if (r24 == 0) goto L_0x0ce6
            r7 = 0
        L_0x0cd0:
            org.telegram.messenger.MessagesController$DialogFilter[] r0 = r8.selectedDialogFilter
            int r1 = r0.length
            if (r7 >= r1) goto L_0x0ce6
            r1 = r0[r7]
            if (r1 == 0) goto L_0x0ce3
            r0 = r0[r7]
            int r0 = r0.flags
            r0 = r0 & r24
            if (r0 == 0) goto L_0x0ce3
            r6 = 1
            goto L_0x0ce6
        L_0x0ce3:
            int r7 = r7 + 1
            goto L_0x0cd0
        L_0x0ce6:
            if (r13 == 0) goto L_0x0d1b
            int r0 = r45.size()
            r1 = 0
            r7 = 0
        L_0x0cee:
            if (r7 >= r0) goto L_0x0d05
            long r2 = r13.keyAt(r7)
            java.lang.Object r4 = r13.valueAt(r7)
            java.util.ArrayList r4 = (java.util.ArrayList) r4
            r5 = 0
            boolean r2 = r8.updateInterfaceWithMessages(r2, r4, r5)
            if (r2 == 0) goto L_0x0d02
            r1 = 1
        L_0x0d02:
            int r7 = r7 + 1
            goto L_0x0cee
        L_0x0d05:
            r2 = r46
            r3 = 0
            boolean r0 = r8.applyFoldersUpdates(r2)
            if (r0 != 0) goto L_0x0d16
            if (r1 != 0) goto L_0x0d14
            if (r6 == 0) goto L_0x0d14
            goto L_0x0d16
        L_0x0d14:
            r1 = 0
            goto L_0x0d30
        L_0x0d16:
            r1 = 0
            r8.sortDialogs(r1)
            goto L_0x0d30
        L_0x0d1b:
            r2 = r46
            r1 = 0
            r3 = 0
            boolean r0 = r8.applyFoldersUpdates(r2)
            if (r6 != 0) goto L_0x0d2d
            if (r0 == 0) goto L_0x0d29
            goto L_0x0d2d
        L_0x0d29:
            r1 = r47
            r6 = 0
            goto L_0x0d33
        L_0x0d2d:
            r8.sortDialogs(r1)
        L_0x0d30:
            r1 = r47
            r6 = 1
        L_0x0d33:
            if (r1 == 0) goto L_0x0d4d
            int r0 = r47.size()
            r7 = 0
        L_0x0d3a:
            if (r7 >= r0) goto L_0x0d4d
            long r9 = r1.keyAt(r7)
            java.lang.Object r2 = r1.valueAt(r7)
            java.util.ArrayList r2 = (java.util.ArrayList) r2
            r5 = 1
            r8.updateInterfaceWithMessages(r9, r2, r5)
            int r7 = r7 + 1
            goto L_0x0d3a
        L_0x0d4d:
            r1 = r48
            if (r1 == 0) goto L_0x0e00
            int r0 = r48.size()
            r7 = 0
        L_0x0d56:
            if (r7 >= r0) goto L_0x0e00
            long r9 = r1.keyAt(r7)
            java.lang.Object r2 = r1.valueAt(r7)
            java.util.ArrayList r2 = (java.util.ArrayList) r2
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r5 = r8.dialogMessage
            java.lang.Object r5 = r5.get(r9)
            org.telegram.messenger.MessageObject r5 = (org.telegram.messenger.MessageObject) r5
            if (r5 == 0) goto L_0x0d9e
            int r11 = r2.size()
            r12 = 0
        L_0x0d71:
            if (r12 >= r11) goto L_0x0d9e
            java.lang.Object r13 = r2.get(r12)
            org.telegram.messenger.MessageObject r13 = (org.telegram.messenger.MessageObject) r13
            int r14 = r5.getId()
            int r15 = r13.getId()
            if (r14 != r15) goto L_0x0da0
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r5 = r8.dialogMessage
            r5.put(r9, r13)
            org.telegram.tgnet.TLRPC$Message r5 = r13.messageOwner
            org.telegram.tgnet.TLRPC$Peer r5 = r5.peer_id
            if (r5 == 0) goto L_0x0d9d
            long r5 = r5.channel_id
            int r11 = (r5 > r3 ? 1 : (r5 == r3 ? 0 : -1))
            if (r11 != 0) goto L_0x0d9d
            android.util.SparseArray<org.telegram.messenger.MessageObject> r5 = r8.dialogMessagesByIds
            int r6 = r13.getId()
            r5.put(r6, r13)
        L_0x0d9d:
            r6 = 1
        L_0x0d9e:
            r13 = 0
            goto L_0x0dce
        L_0x0da0:
            long r14 = r5.getDialogId()
            long r16 = r13.getDialogId()
            int r18 = (r14 > r16 ? 1 : (r14 == r16 ? 0 : -1))
            if (r18 != 0) goto L_0x0dca
            org.telegram.tgnet.TLRPC$Message r14 = r5.messageOwner
            org.telegram.tgnet.TLRPC$MessageAction r14 = r14.action
            boolean r14 = r14 instanceof org.telegram.tgnet.TLRPC$TL_messageActionPinMessage
            if (r14 == 0) goto L_0x0dca
            org.telegram.messenger.MessageObject r14 = r5.replyMessageObject
            if (r14 == 0) goto L_0x0dca
            int r14 = r14.getId()
            int r15 = r13.getId()
            if (r14 != r15) goto L_0x0dca
            r5.replyMessageObject = r13
            r13 = 0
            r5.generatePinMessageText(r13, r13)
            r6 = 1
            goto L_0x0dce
        L_0x0dca:
            r13 = 0
            int r12 = r12 + 1
            goto L_0x0d71
        L_0x0dce:
            org.telegram.messenger.MediaDataController r5 = r38.getMediaDataController()
            r11 = 0
            r12 = 0
            r39 = r5
            r40 = r2
            r41 = r9
            r43 = r11
            r44 = r12
            r39.loadReplyMessagesForMessages(r40, r41, r43, r44)
            org.telegram.messenger.NotificationCenter r5 = r38.getNotificationCenter()
            int r11 = org.telegram.messenger.NotificationCenter.replaceMessagesObjects
            r12 = 3
            java.lang.Object[] r14 = new java.lang.Object[r12]
            java.lang.Long r9 = java.lang.Long.valueOf(r9)
            r10 = 0
            r14[r10] = r9
            r9 = 1
            r14[r9] = r2
            java.lang.Boolean r2 = java.lang.Boolean.FALSE
            r9 = 2
            r14[r9] = r2
            r5.postNotificationName(r11, r14)
            int r7 = r7 + 1
            goto L_0x0d56
        L_0x0e00:
            if (r6 == 0) goto L_0x0e0e
            org.telegram.messenger.NotificationCenter r0 = r38.getNotificationCenter()
            int r1 = org.telegram.messenger.NotificationCenter.dialogsNeedReload
            r2 = 0
            java.lang.Object[] r3 = new java.lang.Object[r2]
            r0.postNotificationName(r1, r3)
        L_0x0e0e:
            if (r49 == 0) goto L_0x0e14
            int r0 = UPDATE_MASK_USER_PRINT
            r21 = r21 | r0
        L_0x0e14:
            if (r50 == 0) goto L_0x0e1e
            int r0 = UPDATE_MASK_NAME
            r0 = r21 | r0
            int r1 = UPDATE_MASK_USER_PHONE
            r21 = r0 | r1
        L_0x0e1e:
            r1 = r51
            if (r1 == 0) goto L_0x0e39
            int r0 = r51.size()
            r7 = 0
        L_0x0e27:
            if (r7 >= r0) goto L_0x0e39
            java.lang.Object r2 = r1.get(r7)
            org.telegram.tgnet.TLRPC$ChatParticipants r2 = (org.telegram.tgnet.TLRPC$ChatParticipants) r2
            org.telegram.messenger.MessagesStorage r3 = r38.getMessagesStorage()
            r3.updateChatParticipants(r2)
            int r7 = r7 + 1
            goto L_0x0e27
        L_0x0e39:
            if (r52 != 0) goto L_0x0e42
            if (r53 != 0) goto L_0x0e42
            if (r54 == 0) goto L_0x0e40
            goto L_0x0e42
        L_0x0e40:
            r3 = 1
            goto L_0x0e5c
        L_0x0e42:
            org.telegram.messenger.NotificationCenter r0 = r38.getNotificationCenter()
            int r1 = org.telegram.messenger.NotificationCenter.didUpdateMessagesViews
            r2 = 4
            java.lang.Object[] r2 = new java.lang.Object[r2]
            r3 = 0
            r2[r3] = r52
            r3 = 1
            r2[r3] = r53
            r4 = 2
            r2[r4] = r54
            java.lang.Boolean r4 = java.lang.Boolean.TRUE
            r5 = 3
            r2[r5] = r4
            r0.postNotificationName(r1, r2)
        L_0x0e5c:
            if (r21 == 0) goto L_0x0e70
            org.telegram.messenger.NotificationCenter r0 = r38.getNotificationCenter()
            int r1 = org.telegram.messenger.NotificationCenter.updateInterfaces
            java.lang.Object[] r2 = new java.lang.Object[r3]
            java.lang.Integer r3 = java.lang.Integer.valueOf(r21)
            r4 = 0
            r2[r4] = r3
            r0.postNotificationName(r1, r2)
        L_0x0e70:
            r1 = r55
            if (r1 == 0) goto L_0x0e7b
            org.telegram.messenger.ImageLoader r0 = org.telegram.messenger.ImageLoader.getInstance()
            r0.putThumbsToCache(r1)
        L_0x0e7b:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$processUpdateArray$306(int, java.util.ArrayList, androidx.collection.LongSparseArray, int, org.telegram.messenger.support.LongSparseIntArray, androidx.collection.LongSparseArray, androidx.collection.LongSparseArray, java.util.ArrayList, androidx.collection.LongSparseArray, androidx.collection.LongSparseArray, boolean, java.util.ArrayList, java.util.ArrayList, androidx.collection.LongSparseArray, androidx.collection.LongSparseArray, androidx.collection.LongSparseArray, java.util.ArrayList):void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$308(LongSparseIntArray longSparseIntArray, LongSparseIntArray longSparseIntArray2, SparseIntArray sparseIntArray, LongSparseArray longSparseArray, LongSparseArray longSparseArray2, LongSparseArray longSparseArray3, LongSparseIntArray longSparseIntArray3) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda115(this, longSparseIntArray, longSparseIntArray2, sparseIntArray, longSparseArray, longSparseArray2, longSparseArray3, longSparseIntArray3));
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Code restructure failed: missing block: B:92:0x026b, code lost:
        if (org.telegram.messenger.ChatObject.isChannel(getChat(java.lang.Long.valueOf(r5))) != false) goto L_0x026f;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$processUpdateArray$307(org.telegram.messenger.support.LongSparseIntArray r20, org.telegram.messenger.support.LongSparseIntArray r21, android.util.SparseIntArray r22, androidx.collection.LongSparseArray r23, androidx.collection.LongSparseArray r24, androidx.collection.LongSparseArray r25, org.telegram.messenger.support.LongSparseIntArray r26) {
        /*
            r19 = this;
            r0 = r19
            r8 = r20
            r9 = r21
            r10 = r22
            r11 = r23
            r12 = r24
            r13 = r25
            r14 = r26
            r15 = 2
            r16 = 0
            r7 = 1
            if (r8 != 0) goto L_0x001c
            if (r9 == 0) goto L_0x0019
            goto L_0x001c
        L_0x0019:
            r4 = 0
            goto L_0x00fc
        L_0x001c:
            org.telegram.messenger.NotificationCenter r1 = r19.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.messagesRead
            java.lang.Object[] r3 = new java.lang.Object[r15]
            r3[r16] = r8
            r3[r7] = r9
            r1.postNotificationName(r2, r3)
            if (r8 == 0) goto L_0x00be
            org.telegram.messenger.NotificationsController r1 = r19.getNotificationsController()
            r3 = 0
            r5 = 0
            r6 = 0
            r17 = 0
            r2 = r20
            r7 = r17
            r1.processReadMessages(r2, r3, r5, r6, r7)
            android.content.SharedPreferences r1 = r0.notificationsPreferences
            android.content.SharedPreferences$Editor r1 = r1.edit()
            int r2 = r20.size()
            r3 = 0
            r4 = 0
        L_0x004a:
            if (r3 >= r2) goto L_0x00ba
            long r5 = r8.keyAt(r3)
            int r7 = r8.valueAt(r3)
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r15 = r0.dialogs_dict
            java.lang.Object r15 = r15.get(r5)
            org.telegram.tgnet.TLRPC$Dialog r15 = (org.telegram.tgnet.TLRPC$Dialog) r15
            r18 = r2
            if (r15 == 0) goto L_0x007e
            int r2 = r15.top_message
            if (r2 <= 0) goto L_0x007e
            if (r2 > r7) goto L_0x007e
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r2 = r0.dialogMessage
            long r7 = r15.id
            java.lang.Object r2 = r2.get(r7)
            org.telegram.messenger.MessageObject r2 = (org.telegram.messenger.MessageObject) r2
            if (r2 == 0) goto L_0x007e
            boolean r7 = r2.isOut()
            if (r7 != 0) goto L_0x007e
            r2.setIsRead()
            int r2 = UPDATE_MASK_READ_DIALOG_MESSAGE
            r4 = r4 | r2
        L_0x007e:
            org.telegram.messenger.UserConfig r2 = r19.getUserConfig()
            long r7 = r2.getClientUserId()
            int r2 = (r5 > r7 ? 1 : (r5 == r7 ? 0 : -1))
            if (r2 == 0) goto L_0x00b2
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            java.lang.String r7 = "diditem"
            r2.append(r7)
            r2.append(r5)
            java.lang.String r2 = r2.toString()
            r1.remove(r2)
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            java.lang.String r7 = "diditemo"
            r2.append(r7)
            r2.append(r5)
            java.lang.String r2 = r2.toString()
            r1.remove(r2)
        L_0x00b2:
            int r3 = r3 + 1
            r8 = r20
            r2 = r18
            r15 = 2
            goto L_0x004a
        L_0x00ba:
            r1.commit()
            goto L_0x00bf
        L_0x00be:
            r4 = 0
        L_0x00bf:
            if (r9 == 0) goto L_0x00fc
            int r1 = r21.size()
            r2 = 0
        L_0x00c6:
            if (r2 >= r1) goto L_0x00fc
            long r5 = r9.keyAt(r2)
            int r3 = r9.valueAt(r2)
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r7 = r0.dialogs_dict
            java.lang.Object r5 = r7.get(r5)
            org.telegram.tgnet.TLRPC$Dialog r5 = (org.telegram.tgnet.TLRPC$Dialog) r5
            if (r5 == 0) goto L_0x00f9
            int r6 = r5.top_message
            if (r6 <= 0) goto L_0x00f9
            if (r6 > r3) goto L_0x00f9
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r3 = r0.dialogMessage
            long r5 = r5.id
            java.lang.Object r3 = r3.get(r5)
            org.telegram.messenger.MessageObject r3 = (org.telegram.messenger.MessageObject) r3
            if (r3 == 0) goto L_0x00f9
            boolean r5 = r3.isOut()
            if (r5 == 0) goto L_0x00f9
            r3.setIsRead()
            int r3 = UPDATE_MASK_READ_DIALOG_MESSAGE
            r3 = r3 | r4
            r4 = r3
        L_0x00f9:
            int r2 = r2 + 1
            goto L_0x00c6
        L_0x00fc:
            if (r10 == 0) goto L_0x014f
            int r1 = r22.size()
            r2 = 0
        L_0x0103:
            if (r2 >= r1) goto L_0x014f
            int r3 = r10.keyAt(r2)
            int r5 = r10.valueAt(r2)
            org.telegram.messenger.NotificationCenter r6 = r19.getNotificationCenter()
            int r7 = org.telegram.messenger.NotificationCenter.messagesReadEncrypted
            r8 = 2
            java.lang.Object[] r9 = new java.lang.Object[r8]
            java.lang.Integer r8 = java.lang.Integer.valueOf(r3)
            r9[r16] = r8
            java.lang.Integer r8 = java.lang.Integer.valueOf(r5)
            r15 = 1
            r9[r15] = r8
            r6.postNotificationName(r7, r9)
            long r6 = (long) r3
            long r6 = org.telegram.messenger.DialogObject.makeEncryptedDialogId(r6)
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r3 = r0.dialogs_dict
            java.lang.Object r3 = r3.get(r6)
            org.telegram.tgnet.TLRPC$Dialog r3 = (org.telegram.tgnet.TLRPC$Dialog) r3
            if (r3 == 0) goto L_0x014c
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r3 = r0.dialogMessage
            java.lang.Object r3 = r3.get(r6)
            org.telegram.messenger.MessageObject r3 = (org.telegram.messenger.MessageObject) r3
            if (r3 == 0) goto L_0x014c
            org.telegram.tgnet.TLRPC$Message r6 = r3.messageOwner
            int r6 = r6.date
            if (r6 > r5) goto L_0x014c
            r3.setIsRead()
            int r3 = UPDATE_MASK_READ_DIALOG_MESSAGE
            r3 = r3 | r4
            r4 = r3
        L_0x014c:
            int r2 = r2 + 1
            goto L_0x0103
        L_0x014f:
            r15 = 1
            if (r11 == 0) goto L_0x017a
            int r1 = r23.size()
            r2 = 0
        L_0x0157:
            if (r2 >= r1) goto L_0x017a
            long r5 = r11.keyAt(r2)
            java.lang.Object r3 = r11.valueAt(r2)
            java.util.ArrayList r3 = (java.util.ArrayList) r3
            org.telegram.messenger.NotificationCenter r7 = r19.getNotificationCenter()
            int r8 = org.telegram.messenger.NotificationCenter.messagesReadContent
            r9 = 2
            java.lang.Object[] r10 = new java.lang.Object[r9]
            java.lang.Long r5 = java.lang.Long.valueOf(r5)
            r10[r16] = r5
            r10[r15] = r3
            r7.postNotificationName(r8, r10)
            int r2 = r2 + 1
            goto L_0x0157
        L_0x017a:
            r3 = 3
            if (r12 == 0) goto L_0x0232
            int r5 = r24.size()
            r6 = 0
        L_0x0182:
            if (r6 >= r5) goto L_0x0226
            long r7 = r12.keyAt(r6)
            java.lang.Object r9 = r12.valueAt(r6)
            java.util.ArrayList r9 = (java.util.ArrayList) r9
            if (r9 != 0) goto L_0x0196
            r22 = r4
            r1 = 0
            goto L_0x021f
        L_0x0196:
            org.telegram.messenger.NotificationCenter r10 = r19.getNotificationCenter()
            int r11 = org.telegram.messenger.NotificationCenter.messagesDeleted
            java.lang.Object[] r1 = new java.lang.Object[r3]
            r1[r16] = r9
            r22 = r4
            long r3 = -r7
            java.lang.Long r2 = java.lang.Long.valueOf(r3)
            r1[r15] = r2
            java.lang.Boolean r2 = java.lang.Boolean.FALSE
            r3 = 2
            r1[r3] = r2
            r10.postNotificationName(r11, r1)
            r1 = 0
            int r3 = (r7 > r1 ? 1 : (r7 == r1 ? 0 : -1))
            if (r3 != 0) goto L_0x01f8
            int r3 = r9.size()
            r4 = 0
        L_0x01bc:
            if (r4 >= r3) goto L_0x021f
            java.lang.Object r7 = r9.get(r4)
            java.lang.Integer r7 = (java.lang.Integer) r7
            android.util.SparseArray<org.telegram.messenger.MessageObject> r8 = r0.dialogMessagesByIds
            int r7 = r7.intValue()
            java.lang.Object r7 = r8.get(r7)
            org.telegram.messenger.MessageObject r7 = (org.telegram.messenger.MessageObject) r7
            if (r7 == 0) goto L_0x01f5
            boolean r8 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r8 == 0) goto L_0x01f3
            java.lang.StringBuilder r8 = new java.lang.StringBuilder
            r8.<init>()
            java.lang.String r10 = "mark messages "
            r8.append(r10)
            int r10 = r7.getId()
            r8.append(r10)
            java.lang.String r10 = " deleted"
            r8.append(r10)
            java.lang.String r8 = r8.toString()
            org.telegram.messenger.FileLog.d(r8)
        L_0x01f3:
            r7.deleted = r15
        L_0x01f5:
            int r4 = r4 + 1
            goto L_0x01bc
        L_0x01f8:
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r3 = r0.dialogMessage
            java.lang.Object r3 = r3.get(r7)
            org.telegram.messenger.MessageObject r3 = (org.telegram.messenger.MessageObject) r3
            if (r3 == 0) goto L_0x021f
            int r4 = r9.size()
            r7 = 0
        L_0x0207:
            if (r7 >= r4) goto L_0x021f
            int r8 = r3.getId()
            java.lang.Object r10 = r9.get(r7)
            java.lang.Integer r10 = (java.lang.Integer) r10
            int r10 = r10.intValue()
            if (r8 != r10) goto L_0x021c
            r3.deleted = r15
            goto L_0x021f
        L_0x021c:
            int r7 = r7 + 1
            goto L_0x0207
        L_0x021f:
            int r6 = r6 + 1
            r4 = r22
            r3 = 3
            goto L_0x0182
        L_0x0226:
            r22 = r4
            r1 = 0
            org.telegram.messenger.NotificationsController r3 = r19.getNotificationsController()
            r3.removeDeletedMessagesFromNotifications(r12)
            goto L_0x0236
        L_0x0232:
            r22 = r4
            r1 = 0
        L_0x0236:
            if (r13 == 0) goto L_0x0280
            int r3 = r25.size()
            r4 = 0
        L_0x023d:
            if (r4 >= r3) goto L_0x0280
            long r5 = r13.keyAt(r4)
            java.lang.Object r7 = r13.valueAt(r4)
            java.util.ArrayList r7 = (java.util.ArrayList) r7
            if (r7 != 0) goto L_0x024d
            r10 = 3
            goto L_0x027d
        L_0x024d:
            org.telegram.messenger.NotificationCenter r8 = r19.getNotificationCenter()
            int r9 = org.telegram.messenger.NotificationCenter.messagesDeleted
            r10 = 3
            java.lang.Object[] r11 = new java.lang.Object[r10]
            r11[r16] = r7
            boolean r7 = org.telegram.messenger.DialogObject.isChatDialog(r5)
            if (r7 == 0) goto L_0x026e
            long r5 = -r5
            java.lang.Long r7 = java.lang.Long.valueOf(r5)
            org.telegram.tgnet.TLRPC$Chat r7 = r0.getChat(r7)
            boolean r7 = org.telegram.messenger.ChatObject.isChannel(r7)
            if (r7 == 0) goto L_0x026e
            goto L_0x026f
        L_0x026e:
            r5 = r1
        L_0x026f:
            java.lang.Long r5 = java.lang.Long.valueOf(r5)
            r11[r15] = r5
            java.lang.Boolean r5 = java.lang.Boolean.TRUE
            r6 = 2
            r11[r6] = r5
            r8.postNotificationName(r9, r11)
        L_0x027d:
            int r4 = r4 + 1
            goto L_0x023d
        L_0x0280:
            if (r14 == 0) goto L_0x02c7
            int r1 = r26.size()
            r2 = 0
        L_0x0287:
            if (r2 >= r1) goto L_0x02c0
            long r3 = r14.keyAt(r2)
            int r5 = r14.valueAt(r2)
            long r3 = -r3
            org.telegram.messenger.NotificationCenter r6 = r19.getNotificationCenter()
            int r7 = org.telegram.messenger.NotificationCenter.historyCleared
            r8 = 2
            java.lang.Object[] r9 = new java.lang.Object[r8]
            java.lang.Long r10 = java.lang.Long.valueOf(r3)
            r9[r16] = r10
            java.lang.Integer r10 = java.lang.Integer.valueOf(r5)
            r9[r15] = r10
            r6.postNotificationName(r7, r9)
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r6 = r0.dialogMessage
            java.lang.Object r3 = r6.get(r3)
            org.telegram.messenger.MessageObject r3 = (org.telegram.messenger.MessageObject) r3
            if (r3 == 0) goto L_0x02bd
            int r4 = r3.getId()
            if (r4 > r5) goto L_0x02bd
            r3.deleted = r15
            goto L_0x02c0
        L_0x02bd:
            int r2 = r2 + 1
            goto L_0x0287
        L_0x02c0:
            org.telegram.messenger.NotificationsController r1 = r19.getNotificationsController()
            r1.removeDeletedHisoryFromNotifications(r14)
        L_0x02c7:
            if (r22 == 0) goto L_0x02da
            org.telegram.messenger.NotificationCenter r1 = r19.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.updateInterfaces
            java.lang.Object[] r3 = new java.lang.Object[r15]
            java.lang.Integer r4 = java.lang.Integer.valueOf(r22)
            r3[r16] = r4
            r1.postNotificationName(r2, r3)
        L_0x02da:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$processUpdateArray$307(org.telegram.messenger.support.LongSparseIntArray, org.telegram.messenger.support.LongSparseIntArray, android.util.SparseIntArray, androidx.collection.LongSparseArray, androidx.collection.LongSparseArray, androidx.collection.LongSparseArray, org.telegram.messenger.support.LongSparseIntArray):void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$309(long j, ArrayList arrayList) {
        long j2 = j;
        getMessagesStorage().updateDialogsWithDeletedMessages(j2, -j, arrayList, getMessagesStorage().markMessagesAsDeleted(j, arrayList, false, true, false), false);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processUpdateArray$310(long j, int i) {
        long j2 = j;
        getMessagesStorage().updateDialogsWithDeletedMessages(j2, -j, new ArrayList(), getMessagesStorage().markMessagesAsDeleted(j, i, false, true), false);
    }

    public boolean isDialogMuted(long j) {
        return isDialogMuted(j, (TLRPC$Chat) null);
    }

    public boolean isDialogMuted(long j, TLRPC$Chat tLRPC$Chat) {
        Boolean bool;
        SharedPreferences sharedPreferences = this.notificationsPreferences;
        int i = sharedPreferences.getInt("notify2_" + j, -1);
        boolean z = false;
        if (i == -1) {
            if (tLRPC$Chat != null) {
                if (ChatObject.isChannel(tLRPC$Chat) && !tLRPC$Chat.megagroup) {
                    z = true;
                }
                bool = Boolean.valueOf(z);
            } else {
                bool = null;
            }
            return !getNotificationsController().isGlobalNotificationsEnabled(j, bool);
        } else if (i == 2) {
            return true;
        } else {
            if (i == 3) {
                SharedPreferences sharedPreferences2 = this.notificationsPreferences;
                if (sharedPreferences2.getInt("notifyuntil_" + j, 0) >= getConnectionsManager().getCurrentTime()) {
                    return true;
                }
            }
            return false;
        }
    }

    public ArrayList<MessageObject> getSponsoredMessages(long j) {
        SponsoredMessagesInfo sponsoredMessagesInfo = this.sponsoredMessages.get(j);
        if (sponsoredMessagesInfo != null && (sponsoredMessagesInfo.loading || Math.abs(SystemClock.elapsedRealtime() - sponsoredMessagesInfo.loadTime) <= 300000)) {
            return sponsoredMessagesInfo.messages;
        }
        TLRPC$Chat chat = getChat(Long.valueOf(-j));
        if (ChatObject.isChannel(chat) && !chat.megagroup && !chat.gigagroup) {
            SponsoredMessagesInfo sponsoredMessagesInfo2 = new SponsoredMessagesInfo();
            boolean unused = sponsoredMessagesInfo2.loading = true;
            this.sponsoredMessages.put(j, sponsoredMessagesInfo2);
            TLRPC$TL_channels_getSponsoredMessages tLRPC$TL_channels_getSponsoredMessages = new TLRPC$TL_channels_getSponsoredMessages();
            tLRPC$TL_channels_getSponsoredMessages.channel = getInputChannel(chat);
            getConnectionsManager().sendRequest(tLRPC$TL_channels_getSponsoredMessages, new MessagesController$$ExternalSyntheticLambda268(this, j, sponsoredMessagesInfo2));
        }
        return null;
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getSponsoredMessages$313(long j, SponsoredMessagesInfo sponsoredMessagesInfo, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        ArrayList arrayList = null;
        if (tLObject != null) {
            TLRPC$TL_messages_sponsoredMessages tLRPC$TL_messages_sponsoredMessages = (TLRPC$TL_messages_sponsoredMessages) tLObject;
            if (!tLRPC$TL_messages_sponsoredMessages.messages.isEmpty()) {
                arrayList = new ArrayList();
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda154(this, tLRPC$TL_messages_sponsoredMessages));
                LongSparseArray longSparseArray = new LongSparseArray();
                LongSparseArray longSparseArray2 = new LongSparseArray();
                int i = 0;
                for (int i2 = 0; i2 < tLRPC$TL_messages_sponsoredMessages.users.size(); i2++) {
                    TLRPC$User tLRPC$User = tLRPC$TL_messages_sponsoredMessages.users.get(i2);
                    longSparseArray.put(tLRPC$User.id, tLRPC$User);
                }
                for (int i3 = 0; i3 < tLRPC$TL_messages_sponsoredMessages.chats.size(); i3++) {
                    TLRPC$Chat tLRPC$Chat = tLRPC$TL_messages_sponsoredMessages.chats.get(i3);
                    longSparseArray2.put(tLRPC$Chat.id, tLRPC$Chat);
                }
                int i4 = -10000000;
                int size = tLRPC$TL_messages_sponsoredMessages.messages.size();
                while (i < size) {
                    TLRPC$TL_sponsoredMessage tLRPC$TL_sponsoredMessage = tLRPC$TL_messages_sponsoredMessages.messages.get(i);
                    TLRPC$TL_message tLRPC$TL_message = new TLRPC$TL_message();
                    tLRPC$TL_message.message = tLRPC$TL_sponsoredMessage.message;
                    if (!tLRPC$TL_sponsoredMessage.entities.isEmpty()) {
                        tLRPC$TL_message.entities = tLRPC$TL_sponsoredMessage.entities;
                        tLRPC$TL_message.flags |= 128;
                    }
                    tLRPC$TL_message.peer_id = getPeer(j);
                    tLRPC$TL_message.from_id = tLRPC$TL_sponsoredMessage.from_id;
                    tLRPC$TL_message.flags |= 256;
                    tLRPC$TL_message.date = getConnectionsManager().getCurrentTime();
                    tLRPC$TL_message.id = i4;
                    MessageObject messageObject = new MessageObject(this.currentAccount, (TLRPC$Message) tLRPC$TL_message, (LongSparseArray<TLRPC$User>) longSparseArray, (LongSparseArray<TLRPC$Chat>) longSparseArray2, true, true);
                    messageObject.sponsoredId = tLRPC$TL_sponsoredMessage.random_id;
                    messageObject.botStartParam = tLRPC$TL_sponsoredMessage.start_param;
                    arrayList.add(messageObject);
                    i++;
                    i4--;
                }
            }
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda100(this, arrayList, j, sponsoredMessagesInfo));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getSponsoredMessages$311(TLRPC$TL_messages_sponsoredMessages tLRPC$TL_messages_sponsoredMessages) {
        putUsers(tLRPC$TL_messages_sponsoredMessages.users, false);
        putChats(tLRPC$TL_messages_sponsoredMessages.chats, false);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getSponsoredMessages$312(ArrayList arrayList, long j, SponsoredMessagesInfo sponsoredMessagesInfo) {
        if (arrayList == null) {
            this.sponsoredMessages.remove(j);
            return;
        }
        long unused = sponsoredMessagesInfo.loadTime = SystemClock.elapsedRealtime();
        ArrayList unused2 = sponsoredMessagesInfo.messages = arrayList;
        getNotificationCenter().postNotificationName(NotificationCenter.didLoadSponsoredMessages, Long.valueOf(j), arrayList);
    }

    public CharSequence getPrintingString(long j, int i, boolean z) {
        SparseArray sparseArray;
        TLRPC$User user;
        TLRPC$UserStatus tLRPC$UserStatus;
        if ((!z || !DialogObject.isUserDialog(j) || (user = getUser(Long.valueOf(j))) == null || (tLRPC$UserStatus = user.status) == null || tLRPC$UserStatus.expires >= 0) && (sparseArray = this.printingStrings.get(j)) != null) {
            return (CharSequence) sparseArray.get(i);
        }
        return null;
    }

    public Integer getPrintingStringType(long j, int i) {
        SparseArray sparseArray = this.printingStringsTypes.get(j);
        if (sparseArray == null) {
            return null;
        }
        return (Integer) sparseArray.get(i);
    }

    private boolean updatePrintingUsersWithNewMessages(long j, ArrayList<MessageObject> arrayList) {
        boolean z;
        if (j > 0) {
            if (this.printingUsers.get(Long.valueOf(j)) != null) {
                this.printingUsers.remove(Long.valueOf(j));
                return true;
            }
        } else if (j < 0) {
            ArrayList arrayList2 = new ArrayList();
            Iterator<MessageObject> it = arrayList.iterator();
            while (it.hasNext()) {
                MessageObject next = it.next();
                if (next.isFromUser() && !arrayList2.contains(Long.valueOf(next.messageOwner.from_id.user_id))) {
                    arrayList2.add(Long.valueOf(next.messageOwner.from_id.user_id));
                }
            }
            ConcurrentHashMap concurrentHashMap = this.printingUsers.get(Long.valueOf(j));
            if (concurrentHashMap != null) {
                ArrayList arrayList3 = null;
                z = false;
                for (Map.Entry entry : concurrentHashMap.entrySet()) {
                    Integer num = (Integer) entry.getKey();
                    ArrayList arrayList4 = (ArrayList) entry.getValue();
                    int i = 0;
                    while (i < arrayList4.size()) {
                        if (arrayList2.contains(Long.valueOf(((PrintingUser) arrayList4.get(i)).userId))) {
                            arrayList4.remove(i);
                            i--;
                            if (arrayList4.isEmpty()) {
                                if (arrayList3 == null) {
                                    arrayList3 = new ArrayList();
                                }
                                arrayList3.add(num);
                            }
                            z = true;
                        }
                        i++;
                    }
                }
                if (arrayList3 != null) {
                    int size = arrayList3.size();
                    for (int i2 = 0; i2 < size; i2++) {
                        concurrentHashMap.remove(arrayList3.get(i2));
                    }
                    if (concurrentHashMap.isEmpty()) {
                        this.printingUsers.remove(Long.valueOf(j));
                    }
                }
            } else {
                z = false;
            }
            if (z) {
                return true;
            }
        }
        return false;
    }

    /* access modifiers changed from: protected */
    /* JADX WARNING: Code restructure failed: missing block: B:34:0x0090, code lost:
        if (r10.id != r11.messageOwner.action.call.id) goto L_0x0096;
     */
    /* JADX WARNING: Removed duplicated region for block: B:164:0x03be  */
    /* JADX WARNING: Removed duplicated region for block: B:166:0x03c4  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean updateInterfaceWithMessages(long r25, java.util.ArrayList<org.telegram.messenger.MessageObject> r27, boolean r28) {
        /*
            r24 = this;
            r6 = r24
            r7 = r25
            r9 = r27
            if (r9 == 0) goto L_0x03ce
            boolean r0 = r27.isEmpty()
            if (r0 == 0) goto L_0x0010
            goto L_0x03ce
        L_0x0010:
            boolean r0 = org.telegram.messenger.DialogObject.isEncryptedDialog(r25)
            r13 = 0
            if (r28 != 0) goto L_0x0131
            r3 = r13
            r1 = 0
            r2 = 0
            r5 = 0
            r15 = 0
        L_0x001d:
            int r11 = r27.size()
            if (r1 >= r11) goto L_0x012d
            java.lang.Object r11 = r9.get(r1)
            org.telegram.messenger.MessageObject r11 = (org.telegram.messenger.MessageObject) r11
            if (r2 == 0) goto L_0x0059
            if (r0 != 0) goto L_0x0037
            int r10 = r11.getId()
            int r12 = r2.getId()
            if (r10 > r12) goto L_0x0059
        L_0x0037:
            if (r0 != 0) goto L_0x0045
            int r10 = r11.getId()
            if (r10 >= 0) goto L_0x004f
            int r10 = r2.getId()
            if (r10 >= 0) goto L_0x004f
        L_0x0045:
            int r10 = r11.getId()
            int r12 = r2.getId()
            if (r10 < r12) goto L_0x0059
        L_0x004f:
            org.telegram.tgnet.TLRPC$Message r10 = r11.messageOwner
            int r10 = r10.date
            org.telegram.tgnet.TLRPC$Message r12 = r2.messageOwner
            int r12 = r12.date
            if (r10 <= r12) goto L_0x006b
        L_0x0059:
            org.telegram.tgnet.TLRPC$Message r2 = r11.messageOwner
            org.telegram.tgnet.TLRPC$Peer r2 = r2.peer_id
            r16 = r3
            long r2 = r2.channel_id
            int r4 = (r2 > r13 ? 1 : (r2 == r13 ? 0 : -1))
            if (r4 == 0) goto L_0x0068
            r3 = r2
            r2 = r11
            goto L_0x006b
        L_0x0068:
            r2 = r11
            r3 = r16
        L_0x006b:
            org.telegram.tgnet.TLRPC$Message r10 = r11.messageOwner
            org.telegram.tgnet.TLRPC$MessageAction r12 = r10.action
            boolean r12 = r12 instanceof org.telegram.tgnet.TLRPC$TL_messageActionGroupCall
            if (r12 == 0) goto L_0x00a2
            org.telegram.tgnet.TLRPC$Peer r10 = r10.peer_id
            long r13 = r10.channel_id
            org.telegram.tgnet.TLRPC$ChatFull r10 = r6.getChatFull(r13)
            if (r10 == 0) goto L_0x00a2
            org.telegram.tgnet.TLRPC$TL_inputGroupCall r10 = r10.call
            if (r10 == 0) goto L_0x0093
            long r12 = r10.id
            org.telegram.tgnet.TLRPC$Message r10 = r11.messageOwner
            org.telegram.tgnet.TLRPC$MessageAction r10 = r10.action
            org.telegram.tgnet.TLRPC$TL_inputGroupCall r10 = r10.call
            r14 = r2
            r22 = r3
            long r2 = r10.id
            int r4 = (r12 > r2 ? 1 : (r12 == r2 ? 0 : -1))
            if (r4 == 0) goto L_0x00a5
            goto L_0x0096
        L_0x0093:
            r14 = r2
            r22 = r3
        L_0x0096:
            org.telegram.tgnet.TLRPC$Message r2 = r11.messageOwner
            org.telegram.tgnet.TLRPC$Peer r2 = r2.peer_id
            long r2 = r2.channel_id
            r4 = 1
            r10 = 0
            r6.loadFullChat(r2, r10, r4)
            goto L_0x00a5
        L_0x00a2:
            r14 = r2
            r22 = r3
        L_0x00a5:
            if (r5 != 0) goto L_0x00ae
            boolean r2 = r11.isOut()
            if (r2 != 0) goto L_0x00ae
            r5 = 1
        L_0x00ae:
            boolean r2 = r11.isOut()
            if (r2 == 0) goto L_0x0117
            boolean r2 = r11.isSending()
            if (r2 != 0) goto L_0x0117
            boolean r2 = r11.isForwarded()
            if (r2 != 0) goto L_0x0117
            boolean r2 = r11.isNewGif()
            if (r2 == 0) goto L_0x00ec
            org.telegram.tgnet.TLRPC$Message r2 = r11.messageOwner
            org.telegram.tgnet.TLRPC$MessageMedia r2 = r2.media
            org.telegram.tgnet.TLRPC$Document r2 = r2.document
            boolean r2 = org.telegram.messenger.MessageObject.isDocumentHasAttachedStickers(r2)
            if (r2 == 0) goto L_0x00d9
            org.telegram.messenger.MessagesController r2 = r24.getMessagesController()
            boolean r2 = r2.saveGifsWithStickers
            goto L_0x00da
        L_0x00d9:
            r2 = 1
        L_0x00da:
            if (r2 == 0) goto L_0x0117
            org.telegram.messenger.MediaDataController r2 = r24.getMediaDataController()
            org.telegram.tgnet.TLRPC$Message r3 = r11.messageOwner
            org.telegram.tgnet.TLRPC$MessageMedia r4 = r3.media
            org.telegram.tgnet.TLRPC$Document r4 = r4.document
            int r3 = r3.date
            r2.addRecentGif(r4, r3)
            goto L_0x0117
        L_0x00ec:
            boolean r2 = r11.isAnimatedEmoji()
            if (r2 != 0) goto L_0x0117
            boolean r2 = r11.isSticker()
            if (r2 != 0) goto L_0x00fe
            boolean r2 = r11.isAnimatedSticker()
            if (r2 == 0) goto L_0x0117
        L_0x00fe:
            org.telegram.messenger.MediaDataController r16 = r24.getMediaDataController()
            r17 = 0
            org.telegram.tgnet.TLRPC$Message r2 = r11.messageOwner
            org.telegram.tgnet.TLRPC$MessageMedia r3 = r2.media
            org.telegram.tgnet.TLRPC$Document r3 = r3.document
            int r2 = r2.date
            r21 = 0
            r18 = r11
            r19 = r3
            r20 = r2
            r16.addRecentSticker(r17, r18, r19, r20, r21)
        L_0x0117:
            boolean r2 = r11.isOut()
            if (r2 == 0) goto L_0x0124
            boolean r2 = r11.isSent()
            if (r2 == 0) goto L_0x0124
            r15 = 1
        L_0x0124:
            int r1 = r1 + 1
            r2 = r14
            r3 = r22
            r13 = 0
            goto L_0x001d
        L_0x012d:
            r16 = r3
            r10 = r2
            goto L_0x0135
        L_0x0131:
            r10 = 0
            r15 = 0
            r16 = 0
        L_0x0135:
            org.telegram.messenger.MediaDataController r0 = r24.getMediaDataController()
            r5 = 0
            r1 = r27
            r2 = r25
            r4 = r28
            r0.loadReplyMessagesForMessages(r1, r2, r4, r5)
            org.telegram.messenger.NotificationCenter r0 = r24.getNotificationCenter()
            int r1 = org.telegram.messenger.NotificationCenter.didReceiveNewMessages
            r2 = 3
            java.lang.Object[] r2 = new java.lang.Object[r2]
            java.lang.Long r3 = java.lang.Long.valueOf(r25)
            r4 = 0
            r2[r4] = r3
            r3 = 1
            r2[r3] = r9
            r3 = 2
            java.lang.Boolean r4 = java.lang.Boolean.valueOf(r28)
            r2[r3] = r4
            r0.postNotificationName(r1, r2)
            if (r10 == 0) goto L_0x03cc
            if (r28 == 0) goto L_0x0166
            goto L_0x03cc
        L_0x0166:
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r0 = r6.dialogs_dict
            java.lang.Object r0 = r0.get(r7)
            org.telegram.tgnet.TLRPC$TL_dialog r0 = (org.telegram.tgnet.TLRPC$TL_dialog) r0
            org.telegram.tgnet.TLRPC$Message r1 = r10.messageOwner
            org.telegram.tgnet.TLRPC$MessageAction r1 = r1.action
            boolean r1 = r1 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatMigrateTo
            if (r1 == 0) goto L_0x0267
            if (r0 == 0) goto L_0x0244
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r6.allDialogs
            r1.remove(r0)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r6.dialogsServerOnly
            r1.remove(r0)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r6.dialogsCanAddUsers
            r1.remove(r0)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r6.dialogsChannelsOnly
            r1.remove(r0)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r6.dialogsGroupsOnly
            r1.remove(r0)
            r1 = 0
        L_0x0192:
            org.telegram.messenger.MessagesController$DialogFilter[] r2 = r6.selectedDialogFilter
            int r3 = r2.length
            if (r1 >= r3) goto L_0x01a5
            r3 = r2[r1]
            if (r3 == 0) goto L_0x01a2
            r2 = r2[r1]
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r2.dialogs
            r2.remove(r0)
        L_0x01a2:
            int r1 = r1 + 1
            goto L_0x0192
        L_0x01a5:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r6.dialogsUsersOnly
            r1.remove(r0)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r6.dialogsForBlock
            r1.remove(r0)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r6.dialogsForward
            r1.remove(r0)
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r1 = r6.dialogs_dict
            long r2 = r0.id
            r1.remove(r2)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r6.dialogs_read_inbox_max
            long r2 = r0.id
            java.lang.Long r2 = java.lang.Long.valueOf(r2)
            r1.remove(r2)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r6.dialogs_read_outbox_max
            long r2 = r0.id
            java.lang.Long r2 = java.lang.Long.valueOf(r2)
            r1.remove(r2)
            android.util.SparseIntArray r1 = r6.nextDialogsCacheOffset
            int r2 = r0.folder_id
            r3 = 0
            int r1 = r1.get(r2, r3)
            if (r1 <= 0) goto L_0x01e5
            android.util.SparseIntArray r2 = r6.nextDialogsCacheOffset
            int r3 = r0.folder_id
            r9 = 1
            int r1 = r1 - r9
            r2.put(r3, r1)
        L_0x01e5:
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r1 = r6.dialogMessage
            long r2 = r0.id
            r1.remove(r2)
            android.util.SparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog>> r1 = r6.dialogsByFolder
            int r2 = r0.folder_id
            java.lang.Object r1 = r1.get(r2)
            java.util.ArrayList r1 = (java.util.ArrayList) r1
            if (r1 == 0) goto L_0x01fb
            r1.remove(r0)
        L_0x01fb:
            android.util.SparseArray<org.telegram.messenger.MessageObject> r1 = r6.dialogMessagesByIds
            int r2 = r0.top_message
            java.lang.Object r1 = r1.get(r2)
            org.telegram.messenger.MessageObject r1 = (org.telegram.messenger.MessageObject) r1
            if (r1 == 0) goto L_0x021b
            org.telegram.tgnet.TLRPC$Message r2 = r1.messageOwner
            org.telegram.tgnet.TLRPC$Peer r2 = r2.peer_id
            long r2 = r2.channel_id
            r4 = 0
            int r9 = (r2 > r4 ? 1 : (r2 == r4 ? 0 : -1))
            if (r9 != 0) goto L_0x021d
            android.util.SparseArray<org.telegram.messenger.MessageObject> r2 = r6.dialogMessagesByIds
            int r3 = r0.top_message
            r2.remove(r3)
            goto L_0x021d
        L_0x021b:
            r4 = 0
        L_0x021d:
            if (r1 == 0) goto L_0x022c
            org.telegram.tgnet.TLRPC$Message r1 = r1.messageOwner
            long r1 = r1.random_id
            int r3 = (r1 > r4 ? 1 : (r1 == r4 ? 0 : -1))
            if (r3 == 0) goto L_0x022c
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r3 = r6.dialogMessagesByRandomIds
            r3.remove(r1)
        L_0x022c:
            r1 = 0
            r0.top_message = r1
            org.telegram.messenger.NotificationsController r2 = r24.getNotificationsController()
            long r3 = r0.id
            r2.removeNotificationsForDialog(r3)
            org.telegram.messenger.NotificationCenter r0 = r24.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.needReloadRecentDialogsSearch
            java.lang.Object[] r3 = new java.lang.Object[r1]
            r0.postNotificationName(r2, r3)
            goto L_0x0245
        L_0x0244:
            r1 = 0
        L_0x0245:
            boolean r0 = org.telegram.messenger.DialogObject.isChatDialog(r25)
            if (r0 == 0) goto L_0x0265
            long r2 = -r7
            org.telegram.messenger.ChatObject$Call r0 = r6.getGroupCall(r2, r1)
            if (r0 == 0) goto L_0x0265
            org.telegram.tgnet.TLRPC$Message r1 = r10.messageOwner
            org.telegram.tgnet.TLRPC$MessageAction r1 = r1.action
            long r1 = r1.channel_id
            java.lang.Long r1 = java.lang.Long.valueOf(r1)
            org.telegram.tgnet.TLRPC$Chat r1 = r6.getChat(r1)
            if (r1 == 0) goto L_0x0265
            r0.migrateToChat(r1)
        L_0x0265:
            r0 = 0
            return r0
        L_0x0267:
            r9 = 1
            if (r0 != 0) goto L_0x031c
            java.lang.Long r0 = java.lang.Long.valueOf(r16)
            org.telegram.tgnet.TLRPC$Chat r0 = r6.getChat(r0)
            r1 = 0
            int r3 = (r16 > r1 ? 1 : (r16 == r1 ? 0 : -1))
            if (r3 == 0) goto L_0x027d
            if (r0 == 0) goto L_0x027b
            goto L_0x027d
        L_0x027b:
            r0 = 0
            goto L_0x028a
        L_0x027d:
            if (r0 == 0) goto L_0x028b
            boolean r1 = org.telegram.messenger.ChatObject.isNotInChat(r0)
            if (r1 != 0) goto L_0x027b
            boolean r1 = r0.min
            if (r1 == 0) goto L_0x028b
            goto L_0x027b
        L_0x028a:
            return r0
        L_0x028b:
            boolean r1 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r1 == 0) goto L_0x02bf
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "not found dialog with id "
            r1.append(r2)
            r1.append(r7)
            java.lang.String r2 = " dictCount = "
            r1.append(r2)
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r2 = r6.dialogs_dict
            int r2 = r2.size()
            r1.append(r2)
            java.lang.String r2 = " allCount = "
            r1.append(r2)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r6.allDialogs
            int r2 = r2.size()
            r1.append(r2)
            java.lang.String r1 = r1.toString()
            org.telegram.messenger.FileLog.d(r1)
        L_0x02bf:
            org.telegram.tgnet.TLRPC$TL_dialog r2 = new org.telegram.tgnet.TLRPC$TL_dialog
            r2.<init>()
            r2.id = r7
            int r3 = r10.getId()
            r2.top_message = r3
            org.telegram.tgnet.TLRPC$Message r1 = r10.messageOwner
            int r1 = r1.date
            r2.last_message_date = r1
            boolean r0 = org.telegram.messenger.ChatObject.isChannel(r0)
            r2.flags = r0
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r0 = r6.dialogs_dict
            r0.put(r7, r2)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r0 = r6.allDialogs
            r0.add(r2)
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r0 = r6.dialogMessage
            r0.put(r7, r10)
            org.telegram.tgnet.TLRPC$Message r0 = r10.messageOwner
            org.telegram.tgnet.TLRPC$Peer r0 = r0.peer_id
            long r0 = r0.channel_id
            r4 = 0
            int r11 = (r0 > r4 ? 1 : (r0 == r4 ? 0 : -1))
            if (r11 != 0) goto L_0x0309
            android.util.SparseArray<org.telegram.messenger.MessageObject> r0 = r6.dialogMessagesByIds
            int r1 = r10.getId()
            r0.put(r1, r10)
            org.telegram.tgnet.TLRPC$Message r0 = r10.messageOwner
            long r0 = r0.random_id
            int r11 = (r0 > r4 ? 1 : (r0 == r4 ? 0 : -1))
            if (r11 == 0) goto L_0x0309
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r4 = r6.dialogMessagesByRandomIds
            r4.put(r0, r10)
        L_0x0309:
            org.telegram.messenger.MessagesStorage r10 = r24.getMessagesStorage()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda205 r11 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda205
            r0 = r11
            r1 = r24
            r4 = r25
            r0.<init>(r1, r2, r3, r4)
            r10.getDialogFolderId(r7, r11)
            goto L_0x03bb
        L_0x031c:
            int r1 = r0.top_message
            if (r1 <= 0) goto L_0x032e
            int r1 = r10.getId()
            if (r1 <= 0) goto L_0x032e
            int r1 = r10.getId()
            int r2 = r0.top_message
            if (r1 > r2) goto L_0x0357
        L_0x032e:
            int r1 = r0.top_message
            if (r1 >= 0) goto L_0x0340
            int r1 = r10.getId()
            if (r1 >= 0) goto L_0x0340
            int r1 = r10.getId()
            int r2 = r0.top_message
            if (r1 < r2) goto L_0x0357
        L_0x0340:
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r1 = r6.dialogMessage
            int r1 = r1.indexOfKey(r7)
            if (r1 < 0) goto L_0x0357
            int r1 = r0.top_message
            if (r1 < 0) goto L_0x0357
            int r1 = r0.last_message_date
            org.telegram.tgnet.TLRPC$Message r2 = r10.messageOwner
            int r2 = r2.date
            if (r1 > r2) goto L_0x0355
            goto L_0x0357
        L_0x0355:
            r10 = 0
            goto L_0x03bc
        L_0x0357:
            android.util.SparseArray<org.telegram.messenger.MessageObject> r1 = r6.dialogMessagesByIds
            int r2 = r0.top_message
            java.lang.Object r1 = r1.get(r2)
            org.telegram.messenger.MessageObject r1 = (org.telegram.messenger.MessageObject) r1
            if (r1 == 0) goto L_0x0377
            org.telegram.tgnet.TLRPC$Message r2 = r1.messageOwner
            org.telegram.tgnet.TLRPC$Peer r2 = r2.peer_id
            long r2 = r2.channel_id
            r4 = 0
            int r11 = (r2 > r4 ? 1 : (r2 == r4 ? 0 : -1))
            if (r11 != 0) goto L_0x0379
            android.util.SparseArray<org.telegram.messenger.MessageObject> r2 = r6.dialogMessagesByIds
            int r3 = r0.top_message
            r2.remove(r3)
            goto L_0x0379
        L_0x0377:
            r4 = 0
        L_0x0379:
            if (r1 == 0) goto L_0x0388
            org.telegram.tgnet.TLRPC$Message r1 = r1.messageOwner
            long r1 = r1.random_id
            int r3 = (r1 > r4 ? 1 : (r1 == r4 ? 0 : -1))
            if (r3 == 0) goto L_0x0388
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r3 = r6.dialogMessagesByRandomIds
            r3.remove(r1)
        L_0x0388:
            int r1 = r10.getId()
            r0.top_message = r1
            org.telegram.tgnet.TLRPC$Message r1 = r10.messageOwner
            int r1 = r1.date
            r0.last_message_date = r1
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r0 = r6.dialogMessage
            r0.put(r7, r10)
            org.telegram.tgnet.TLRPC$Message r0 = r10.messageOwner
            org.telegram.tgnet.TLRPC$Peer r0 = r0.peer_id
            long r0 = r0.channel_id
            r2 = 0
            int r4 = (r0 > r2 ? 1 : (r0 == r2 ? 0 : -1))
            if (r4 != 0) goto L_0x03bb
            android.util.SparseArray<org.telegram.messenger.MessageObject> r0 = r6.dialogMessagesByIds
            int r1 = r10.getId()
            r0.put(r1, r10)
            org.telegram.tgnet.TLRPC$Message r0 = r10.messageOwner
            long r0 = r0.random_id
            int r4 = (r0 > r2 ? 1 : (r0 == r2 ? 0 : -1))
            if (r4 == 0) goto L_0x03bb
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r2 = r6.dialogMessagesByRandomIds
            r2.put(r0, r10)
        L_0x03bb:
            r10 = 1
        L_0x03bc:
            if (r10 == 0) goto L_0x03c2
            r0 = 0
            r6.sortDialogs(r0)
        L_0x03c2:
            if (r15 == 0) goto L_0x03cb
            org.telegram.messenger.MediaDataController r0 = r24.getMediaDataController()
            r0.increasePeerRaiting(r7)
        L_0x03cb:
            return r10
        L_0x03cc:
            r0 = 0
            return r0
        L_0x03ce:
            r0 = 0
            return r0
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.updateInterfaceWithMessages(long, java.util.ArrayList, boolean):boolean");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateInterfaceWithMessages$314(TLRPC$Dialog tLRPC$Dialog, int i, long j, int i2) {
        if (i2 != -1) {
            if (i2 != 0) {
                tLRPC$Dialog.folder_id = i2;
                sortDialogs((LongSparseArray<TLRPC$Chat>) null);
                getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
            }
        } else if (i > 0 && !DialogObject.isEncryptedDialog(j)) {
            loadUnknownDialog(getInputPeer(j), 0);
        }
    }

    public void addDialogAction(long j, boolean z) {
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
        if (tLRPC$Dialog != null) {
            if (z) {
                this.clearingHistoryDialogs.put(j, tLRPC$Dialog);
            } else {
                this.deletingDialogs.put(j, tLRPC$Dialog);
                this.allDialogs.remove(tLRPC$Dialog);
                sortDialogs((LongSparseArray<TLRPC$Chat>) null);
            }
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
        }
    }

    public void removeDialogAction(long j, boolean z, boolean z2) {
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
        if (tLRPC$Dialog != null) {
            if (z) {
                this.clearingHistoryDialogs.remove(j);
            } else {
                this.deletingDialogs.remove(j);
                if (!z2) {
                    this.allDialogs.add(tLRPC$Dialog);
                    sortDialogs((LongSparseArray<TLRPC$Chat>) null);
                }
            }
            if (!z2) {
                getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, Boolean.TRUE);
            }
        }
    }

    public boolean isClearingDialog(long j) {
        return this.clearingHistoryDialogs.get(j) != null;
    }

    /* JADX WARNING: Code restructure failed: missing block: B:77:0x0161, code lost:
        if (org.telegram.messenger.ChatObject.hasAdminRights(r12) == false) goto L_0x0164;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:82:0x0175, code lost:
        if (org.telegram.messenger.ChatObject.canPost(r12) != false) goto L_0x01b4;
     */
    /* JADX WARNING: Removed duplicated region for block: B:103:0x01c1  */
    /* JADX WARNING: Removed duplicated region for block: B:104:0x01c8  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void sortDialogs(androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Chat> r16) {
        /*
            r15 = this;
            r0 = r15
            r1 = r16
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r0.dialogsServerOnly
            r2.clear()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r0.dialogsCanAddUsers
            r2.clear()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r0.dialogsChannelsOnly
            r2.clear()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r0.dialogsGroupsOnly
            r2.clear()
            r2 = 0
            r3 = 0
        L_0x0019:
            org.telegram.messenger.MessagesController$DialogFilter[] r4 = r0.selectedDialogFilter
            int r5 = r4.length
            if (r3 >= r5) goto L_0x002c
            r5 = r4[r3]
            if (r5 == 0) goto L_0x0029
            r4 = r4[r3]
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r4 = r4.dialogs
            r4.clear()
        L_0x0029:
            int r3 = r3 + 1
            goto L_0x0019
        L_0x002c:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r3 = r0.dialogsUsersOnly
            r3.clear()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r3 = r0.dialogsForBlock
            r3.clear()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r3 = r0.dialogsForward
            r3.clear()
            r3 = 0
        L_0x003c:
            android.util.SparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog>> r4 = r0.dialogsByFolder
            int r4 = r4.size()
            if (r3 >= r4) goto L_0x0054
            android.util.SparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog>> r4 = r0.dialogsByFolder
            java.lang.Object r4 = r4.valueAt(r3)
            java.util.ArrayList r4 = (java.util.ArrayList) r4
            if (r4 == 0) goto L_0x0051
            r4.clear()
        L_0x0051:
            int r3 = r3 + 1
            goto L_0x003c
        L_0x0054:
            r0.unreadUnmutedDialogs = r2
            org.telegram.messenger.UserConfig r3 = r15.getUserConfig()
            long r3 = r3.getClientUserId()
            org.telegram.messenger.MessagesController$DialogFilter[] r5 = r0.selectedDialogFilter
            r6 = r5[r2]
            r7 = 1
            if (r6 != 0) goto L_0x0069
            r5 = r5[r7]
            if (r5 == 0) goto L_0x00c3
        L_0x0069:
            r5 = 0
        L_0x006a:
            org.telegram.messenger.MessagesController$DialogFilter[] r6 = r0.selectedDialogFilter
            int r8 = r6.length
            if (r5 >= r8) goto L_0x00c3
            r6 = r6[r5]
            r0.sortingDialogFilter = r6
            if (r6 != 0) goto L_0x0076
            goto L_0x00c0
        L_0x0076:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r6 = r0.allDialogs
            java.util.Comparator<org.telegram.tgnet.TLRPC$Dialog> r8 = r0.dialogDateComparator
            java.util.Collections.sort(r6, r8)
            org.telegram.messenger.MessagesController$DialogFilter r6 = r0.sortingDialogFilter
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r6 = r6.dialogs
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r8 = r0.allDialogs
            int r8 = r8.size()
            r9 = 0
        L_0x0088:
            if (r9 >= r8) goto L_0x00c0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r10 = r0.allDialogs
            java.lang.Object r10 = r10.get(r9)
            org.telegram.tgnet.TLRPC$Dialog r10 = (org.telegram.tgnet.TLRPC$Dialog) r10
            boolean r11 = r10 instanceof org.telegram.tgnet.TLRPC$TL_dialog
            if (r11 == 0) goto L_0x00bd
            long r11 = r10.id
            boolean r13 = org.telegram.messenger.DialogObject.isEncryptedDialog(r11)
            if (r13 == 0) goto L_0x00ae
            int r13 = org.telegram.messenger.DialogObject.getEncryptedChatId(r11)
            java.lang.Integer r13 = java.lang.Integer.valueOf(r13)
            org.telegram.tgnet.TLRPC$EncryptedChat r13 = r15.getEncryptedChat(r13)
            if (r13 == 0) goto L_0x00ae
            long r11 = r13.user_id
        L_0x00ae:
            org.telegram.messenger.MessagesController$DialogFilter r13 = r0.sortingDialogFilter
            org.telegram.messenger.AccountInstance r14 = r15.getAccountInstance()
            boolean r11 = r13.includesDialog(r14, r11, r10)
            if (r11 == 0) goto L_0x00bd
            r6.add(r10)
        L_0x00bd:
            int r9 = r9 + 1
            goto L_0x0088
        L_0x00c0:
            int r5 = r5 + 1
            goto L_0x006a
        L_0x00c3:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r5 = r0.allDialogs
            java.util.Comparator<org.telegram.tgnet.TLRPC$Dialog> r6 = r0.dialogComparator
            java.util.Collections.sort(r5, r6)
            r0.isLeftPromoChannel = r7
            org.telegram.tgnet.TLRPC$Dialog r5 = r0.promoDialog
            r8 = 0
            if (r5 == 0) goto L_0x00e9
            long r5 = r5.id
            int r10 = (r5 > r8 ? 1 : (r5 == r8 ? 0 : -1))
            if (r10 >= 0) goto L_0x00e9
            long r5 = -r5
            java.lang.Long r5 = java.lang.Long.valueOf(r5)
            org.telegram.tgnet.TLRPC$Chat r5 = r15.getChat(r5)
            if (r5 == 0) goto L_0x00e9
            boolean r5 = r5.left
            if (r5 != 0) goto L_0x00e9
            r0.isLeftPromoChannel = r2
        L_0x00e9:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r5 = r0.allDialogs
            int r5 = r5.size()
            r6 = 0
            r10 = 0
        L_0x00f1:
            if (r6 >= r5) goto L_0x0205
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r11 = r0.allDialogs
            java.lang.Object r11 = r11.get(r6)
            org.telegram.tgnet.TLRPC$Dialog r11 = (org.telegram.tgnet.TLRPC$Dialog) r11
            boolean r12 = r11 instanceof org.telegram.tgnet.TLRPC$TL_dialog
            if (r12 == 0) goto L_0x01cd
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r12 = r0.dialogMessage
            long r13 = r11.id
            java.lang.Object r12 = r12.get(r13)
            org.telegram.messenger.MessageObject r12 = (org.telegram.messenger.MessageObject) r12
            if (r12 == 0) goto L_0x0115
            org.telegram.tgnet.TLRPC$Message r12 = r12.messageOwner
            int r12 = r12.date
            int r13 = r0.dialogsLoadedTillDate
            if (r12 >= r13) goto L_0x0115
            goto L_0x0200
        L_0x0115:
            long r12 = r11.id
            boolean r12 = org.telegram.messenger.DialogObject.isEncryptedDialog(r12)
            if (r12 != 0) goto L_0x01b4
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r12 = r0.dialogsServerOnly
            r12.add(r11)
            boolean r12 = org.telegram.messenger.DialogObject.isChannel(r11)
            if (r12 == 0) goto L_0x0178
            long r12 = r11.id
            long r12 = -r12
            java.lang.Long r12 = java.lang.Long.valueOf(r12)
            org.telegram.tgnet.TLRPC$Chat r12 = r15.getChat(r12)
            if (r12 == 0) goto L_0x014e
            boolean r13 = r12.megagroup
            if (r13 == 0) goto L_0x014e
            org.telegram.tgnet.TLRPC$TL_chatAdminRights r13 = r12.admin_rights
            if (r13 == 0) goto L_0x0145
            boolean r14 = r13.post_messages
            if (r14 != 0) goto L_0x0149
            boolean r13 = r13.add_admins
            if (r13 != 0) goto L_0x0149
        L_0x0145:
            boolean r13 = r12.creator
            if (r13 == 0) goto L_0x014e
        L_0x0149:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r13 = r0.dialogsCanAddUsers
            r13.add(r11)
        L_0x014e:
            if (r12 == 0) goto L_0x0166
            boolean r13 = r12.megagroup
            if (r13 == 0) goto L_0x0166
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r13 = r0.dialogsGroupsOnly
            r13.add(r11)
            boolean r13 = r12.gigagroup
            if (r13 == 0) goto L_0x01b4
            boolean r12 = org.telegram.messenger.ChatObject.hasAdminRights(r12)
            if (r12 == 0) goto L_0x0164
            goto L_0x01b4
        L_0x0164:
            r12 = 0
            goto L_0x01b5
        L_0x0166:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r13 = r0.dialogsChannelsOnly
            r13.add(r11)
            boolean r13 = org.telegram.messenger.ChatObject.hasAdminRights(r12)
            if (r13 == 0) goto L_0x0164
            boolean r12 = org.telegram.messenger.ChatObject.canPost(r12)
            if (r12 == 0) goto L_0x0164
            goto L_0x01b4
        L_0x0178:
            long r12 = r11.id
            int r14 = (r12 > r8 ? 1 : (r12 == r8 ? 0 : -1))
            if (r14 >= 0) goto L_0x019e
            if (r1 == 0) goto L_0x0193
            long r12 = -r12
            java.lang.Object r12 = r1.get(r12)
            org.telegram.tgnet.TLRPC$Chat r12 = (org.telegram.tgnet.TLRPC$Chat) r12
            if (r12 == 0) goto L_0x0193
            org.telegram.tgnet.TLRPC$InputChannel r12 = r12.migrated_to
            if (r12 == 0) goto L_0x0193
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r11 = r0.allDialogs
            r11.remove(r6)
            goto L_0x01f7
        L_0x0193:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r12 = r0.dialogsCanAddUsers
            r12.add(r11)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r12 = r0.dialogsGroupsOnly
            r12.add(r11)
            goto L_0x01b4
        L_0x019e:
            int r14 = (r12 > r3 ? 1 : (r12 == r3 ? 0 : -1))
            if (r14 == 0) goto L_0x01b4
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r12 = r0.dialogsUsersOnly
            r12.add(r11)
            long r12 = r11.id
            boolean r12 = org.telegram.messenger.UserObject.isReplyUser((long) r12)
            if (r12 != 0) goto L_0x01b4
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r12 = r0.dialogsForBlock
            r12.add(r11)
        L_0x01b4:
            r12 = 1
        L_0x01b5:
            if (r12 == 0) goto L_0x01cd
            int r12 = r11.folder_id
            if (r12 != 0) goto L_0x01cd
            long r12 = r11.id
            int r14 = (r12 > r3 ? 1 : (r12 == r3 ? 0 : -1))
            if (r14 != 0) goto L_0x01c8
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r10 = r0.dialogsForward
            r10.add(r2, r11)
            r10 = 1
            goto L_0x01cd
        L_0x01c8:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r12 = r0.dialogsForward
            r12.add(r11)
        L_0x01cd:
            int r12 = r11.unread_count
            if (r12 != 0) goto L_0x01d5
            boolean r12 = r11.unread_mark
            if (r12 == 0) goto L_0x01e2
        L_0x01d5:
            long r12 = r11.id
            boolean r12 = r15.isDialogMuted(r12)
            if (r12 != 0) goto L_0x01e2
            int r12 = r0.unreadUnmutedDialogs
            int r12 = r12 + r7
            r0.unreadUnmutedDialogs = r12
        L_0x01e2:
            org.telegram.tgnet.TLRPC$Dialog r12 = r0.promoDialog
            if (r12 == 0) goto L_0x01fc
            long r13 = r11.id
            long r8 = r12.id
            int r12 = (r13 > r8 ? 1 : (r13 == r8 ? 0 : -1))
            if (r12 != 0) goto L_0x01fc
            boolean r8 = r0.isLeftPromoChannel
            if (r8 == 0) goto L_0x01fc
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r8 = r0.allDialogs
            r8.remove(r6)
        L_0x01f7:
            int r6 = r6 + -1
            int r5 = r5 + -1
            goto L_0x0200
        L_0x01fc:
            r8 = -1
            r15.addDialogToItsFolder(r8, r11)
        L_0x0200:
            int r6 = r6 + r7
            r8 = 0
            goto L_0x00f1
        L_0x0205:
            org.telegram.tgnet.TLRPC$Dialog r1 = r0.promoDialog
            if (r1 == 0) goto L_0x0218
            boolean r3 = r0.isLeftPromoChannel
            if (r3 == 0) goto L_0x0218
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r3 = r0.allDialogs
            r3.add(r2, r1)
            r1 = -2
            org.telegram.tgnet.TLRPC$Dialog r3 = r0.promoDialog
            r15.addDialogToItsFolder(r1, r3)
        L_0x0218:
            if (r10 != 0) goto L_0x0244
            org.telegram.messenger.UserConfig r1 = r15.getUserConfig()
            org.telegram.tgnet.TLRPC$User r1 = r1.getCurrentUser()
            if (r1 == 0) goto L_0x0244
            org.telegram.tgnet.TLRPC$TL_dialog r3 = new org.telegram.tgnet.TLRPC$TL_dialog
            r3.<init>()
            long r4 = r1.id
            r3.id = r4
            org.telegram.tgnet.TLRPC$TL_peerNotifySettings r4 = new org.telegram.tgnet.TLRPC$TL_peerNotifySettings
            r4.<init>()
            r3.notify_settings = r4
            org.telegram.tgnet.TLRPC$TL_peerUser r4 = new org.telegram.tgnet.TLRPC$TL_peerUser
            r4.<init>()
            r3.peer = r4
            long r5 = r1.id
            r4.user_id = r5
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r0.dialogsForward
            r1.add(r2, r3)
        L_0x0244:
            android.util.SparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog>> r1 = r0.dialogsByFolder
            int r1 = r1.size()
            if (r2 >= r1) goto L_0x0268
            android.util.SparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog>> r1 = r0.dialogsByFolder
            int r1 = r1.keyAt(r2)
            android.util.SparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog>> r3 = r0.dialogsByFolder
            java.lang.Object r3 = r3.valueAt(r2)
            java.util.ArrayList r3 = (java.util.ArrayList) r3
            boolean r3 = r3.isEmpty()
            if (r3 == 0) goto L_0x0265
            android.util.SparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog>> r3 = r0.dialogsByFolder
            r3.remove(r1)
        L_0x0265:
            int r2 = r2 + 1
            goto L_0x0244
        L_0x0268:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.sortDialogs(androidx.collection.LongSparseArray):void");
    }

    private void addDialogToItsFolder(int i, TLRPC$Dialog tLRPC$Dialog) {
        int i2;
        if (tLRPC$Dialog instanceof TLRPC$TL_dialogFolder) {
            i2 = 0;
        } else {
            i2 = tLRPC$Dialog.folder_id;
        }
        ArrayList arrayList = this.dialogsByFolder.get(i2);
        if (arrayList == null) {
            arrayList = new ArrayList();
            this.dialogsByFolder.put(i2, arrayList);
        }
        if (i == -1) {
            arrayList.add(tLRPC$Dialog);
        } else if (i != -2) {
            arrayList.add(i, tLRPC$Dialog);
        } else if (arrayList.isEmpty() || !(arrayList.get(0) instanceof TLRPC$TL_dialogFolder)) {
            arrayList.add(0, tLRPC$Dialog);
        } else {
            arrayList.add(1, tLRPC$Dialog);
        }
    }

    public static String getRestrictionReason(ArrayList<TLRPC$TL_restrictionReason> arrayList) {
        if (arrayList.isEmpty()) {
            return null;
        }
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            TLRPC$TL_restrictionReason tLRPC$TL_restrictionReason = arrayList.get(i);
            if ("all".equals(tLRPC$TL_restrictionReason.platform) || (!BuildVars.isStandaloneApp() && !BuildVars.isBetaApp() && "android".equals(tLRPC$TL_restrictionReason.platform))) {
                return tLRPC$TL_restrictionReason.text;
            }
        }
        return null;
    }

    private static void showCantOpenAlert(BaseFragment baseFragment, String str) {
        if (baseFragment != null && baseFragment.getParentActivity() != null) {
            AlertDialog.Builder builder = new AlertDialog.Builder((Context) baseFragment.getParentActivity());
            builder.setTitle(LocaleController.getString("AppName", NUM));
            builder.setPositiveButton(LocaleController.getString("OK", NUM), (DialogInterface.OnClickListener) null);
            builder.setMessage(str);
            baseFragment.showDialog(builder.create());
        }
    }

    public boolean checkCanOpenChat(Bundle bundle, BaseFragment baseFragment) {
        return checkCanOpenChat(bundle, baseFragment, (MessageObject) null);
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v1, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getMessages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v3, resolved type: org.telegram.tgnet.TLRPC$TL_channels_getMessages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v4, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getMessages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v5, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getMessages} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean checkCanOpenChat(android.os.Bundle r13, org.telegram.ui.ActionBar.BaseFragment r14, org.telegram.messenger.MessageObject r15) {
        /*
            r12 = this;
            r0 = 1
            if (r13 == 0) goto L_0x00de
            if (r14 != 0) goto L_0x0007
            goto L_0x00de
        L_0x0007:
            java.lang.String r1 = "user_id"
            r2 = 0
            long r4 = r13.getLong(r1, r2)
            java.lang.String r1 = "chat_id"
            long r6 = r13.getLong(r1, r2)
            java.lang.String r1 = "message_id"
            r8 = 0
            int r1 = r13.getInt(r1, r8)
            r9 = 0
            int r10 = (r4 > r2 ? 1 : (r4 == r2 ? 0 : -1))
            if (r10 == 0) goto L_0x002e
            java.lang.Long r4 = java.lang.Long.valueOf(r4)
            org.telegram.tgnet.TLRPC$User r4 = r12.getUser(r4)
            r11 = r9
            r9 = r4
            r4 = r11
            goto L_0x003c
        L_0x002e:
            int r4 = (r6 > r2 ? 1 : (r6 == r2 ? 0 : -1))
            if (r4 == 0) goto L_0x003b
            java.lang.Long r4 = java.lang.Long.valueOf(r6)
            org.telegram.tgnet.TLRPC$Chat r4 = r12.getChat(r4)
            goto L_0x003c
        L_0x003b:
            r4 = r9
        L_0x003c:
            if (r9 != 0) goto L_0x0041
            if (r4 != 0) goto L_0x0041
            return r0
        L_0x0041:
            if (r4 == 0) goto L_0x004a
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_restrictionReason> r5 = r4.restriction_reason
            java.lang.String r5 = getRestrictionReason(r5)
            goto L_0x0050
        L_0x004a:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_restrictionReason> r5 = r9.restriction_reason
            java.lang.String r5 = getRestrictionReason(r5)
        L_0x0050:
            if (r5 == 0) goto L_0x0056
            showCantOpenAlert(r14, r5)
            return r8
        L_0x0056:
            if (r1 == 0) goto L_0x00de
            if (r15 == 0) goto L_0x00de
            if (r4 == 0) goto L_0x00de
            long r5 = r4.access_hash
            int r1 = (r5 > r2 ? 1 : (r5 == r2 ? 0 : -1))
            if (r1 != 0) goto L_0x00de
            long r5 = r15.getDialogId()
            boolean r1 = org.telegram.messenger.DialogObject.isEncryptedDialog(r5)
            if (r1 != 0) goto L_0x00de
            org.telegram.ui.ActionBar.AlertDialog r0 = new org.telegram.ui.ActionBar.AlertDialog
            android.app.Activity r1 = r14.getParentActivity()
            r7 = 3
            r0.<init>(r1, r7)
            int r1 = (r5 > r2 ? 1 : (r5 == r2 ? 0 : -1))
            if (r1 >= 0) goto L_0x0083
            long r9 = -r5
            java.lang.Long r1 = java.lang.Long.valueOf(r9)
            org.telegram.tgnet.TLRPC$Chat r4 = r12.getChat(r1)
        L_0x0083:
            int r1 = (r5 > r2 ? 1 : (r5 == r2 ? 0 : -1))
            if (r1 > 0) goto L_0x00b0
            boolean r1 = org.telegram.messenger.ChatObject.isChannel(r4)
            if (r1 != 0) goto L_0x008e
            goto L_0x00b0
        L_0x008e:
            long r1 = -r5
            java.lang.Long r1 = java.lang.Long.valueOf(r1)
            org.telegram.tgnet.TLRPC$Chat r1 = r12.getChat(r1)
            org.telegram.tgnet.TLRPC$TL_channels_getMessages r2 = new org.telegram.tgnet.TLRPC$TL_channels_getMessages
            r2.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r1 = getInputChannel((org.telegram.tgnet.TLRPC$Chat) r1)
            r2.channel = r1
            java.util.ArrayList<java.lang.Integer> r1 = r2.id
            int r15 = r15.getId()
            java.lang.Integer r15 = java.lang.Integer.valueOf(r15)
            r1.add(r15)
            goto L_0x00c2
        L_0x00b0:
            org.telegram.tgnet.TLRPC$TL_messages_getMessages r2 = new org.telegram.tgnet.TLRPC$TL_messages_getMessages
            r2.<init>()
            java.util.ArrayList<java.lang.Integer> r1 = r2.id
            int r15 = r15.getId()
            java.lang.Integer r15 = java.lang.Integer.valueOf(r15)
            r1.add(r15)
        L_0x00c2:
            org.telegram.tgnet.ConnectionsManager r15 = r12.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda294 r1 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda294
            r1.<init>(r12, r0, r14, r13)
            int r13 = r15.sendRequest(r2, r1)
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda3 r15 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda3
            r15.<init>(r12, r13, r14)
            r0.setOnCancelListener(r15)
            r14.setVisibleDialog(r0)
            r0.show()
            return r8
        L_0x00de:
            return r0
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.checkCanOpenChat(android.os.Bundle, org.telegram.ui.ActionBar.BaseFragment, org.telegram.messenger.MessageObject):boolean");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$checkCanOpenChat$316(AlertDialog alertDialog, BaseFragment baseFragment, Bundle bundle, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda182(this, alertDialog, tLObject, baseFragment, bundle));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$checkCanOpenChat$315(AlertDialog alertDialog, TLObject tLObject, BaseFragment baseFragment, Bundle bundle) {
        try {
            alertDialog.dismiss();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
        putUsers(tLRPC$messages_Messages.users, false);
        putChats(tLRPC$messages_Messages.chats, false);
        getMessagesStorage().putUsersAndChats(tLRPC$messages_Messages.users, tLRPC$messages_Messages.chats, true, true);
        baseFragment.presentFragment(new ChatActivity(bundle), true);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$checkCanOpenChat$317(int i, BaseFragment baseFragment, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
        baseFragment.setVisibleDialog((Dialog) null);
    }

    public static void openChatOrProfileWith(TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat, BaseFragment baseFragment, int i, boolean z) {
        String str;
        if ((tLRPC$User != null || tLRPC$Chat != null) && baseFragment != null) {
            if (tLRPC$Chat != null) {
                str = getRestrictionReason(tLRPC$Chat.restriction_reason);
            } else {
                str = getRestrictionReason(tLRPC$User.restriction_reason);
                if (i != 3 && tLRPC$User.bot) {
                    i = 1;
                    z = true;
                }
            }
            if (str != null) {
                showCantOpenAlert(baseFragment, str);
                return;
            }
            Bundle bundle = new Bundle();
            if (tLRPC$Chat != null) {
                bundle.putLong("chat_id", tLRPC$Chat.id);
            } else {
                bundle.putLong("user_id", tLRPC$User.id);
            }
            if (i == 0) {
                baseFragment.presentFragment(new ProfileActivity(bundle));
            } else if (i == 2) {
                baseFragment.presentFragment(new ChatActivity(bundle), true, true);
            } else {
                baseFragment.presentFragment(new ChatActivity(bundle), z);
            }
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:15:0x002b  */
    /* JADX WARNING: Removed duplicated region for block: B:16:0x002f  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void openByUserName(java.lang.String r6, org.telegram.ui.ActionBar.BaseFragment r7, int r8) {
        /*
            r5 = this;
            if (r6 == 0) goto L_0x0069
            if (r7 != 0) goto L_0x0006
            goto L_0x0069
        L_0x0006:
            org.telegram.tgnet.TLObject r0 = r5.getUserOrChat(r6)
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$User
            r2 = 0
            if (r1 == 0) goto L_0x0018
            org.telegram.tgnet.TLRPC$User r0 = (org.telegram.tgnet.TLRPC$User) r0
            boolean r1 = r0.min
            if (r1 == 0) goto L_0x0016
            goto L_0x0026
        L_0x0016:
            r1 = r2
            goto L_0x0028
        L_0x0018:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$Chat
            if (r1 == 0) goto L_0x0026
            org.telegram.tgnet.TLRPC$Chat r0 = (org.telegram.tgnet.TLRPC$Chat) r0
            boolean r1 = r0.min
            if (r1 == 0) goto L_0x0023
            goto L_0x0026
        L_0x0023:
            r1 = r0
            r0 = r2
            goto L_0x0028
        L_0x0026:
            r0 = r2
            r1 = r0
        L_0x0028:
            r3 = 0
            if (r0 == 0) goto L_0x002f
            openChatOrProfileWith(r0, r2, r7, r8, r3)
            goto L_0x0069
        L_0x002f:
            r0 = 1
            if (r1 == 0) goto L_0x0036
            openChatOrProfileWith(r2, r1, r7, r0, r3)
            goto L_0x0069
        L_0x0036:
            android.app.Activity r1 = r7.getParentActivity()
            if (r1 != 0) goto L_0x003d
            return
        L_0x003d:
            org.telegram.ui.ActionBar.AlertDialog[] r0 = new org.telegram.ui.ActionBar.AlertDialog[r0]
            org.telegram.ui.ActionBar.AlertDialog r1 = new org.telegram.ui.ActionBar.AlertDialog
            android.app.Activity r2 = r7.getParentActivity()
            r4 = 3
            r1.<init>(r2, r4)
            r0[r3] = r1
            org.telegram.tgnet.TLRPC$TL_contacts_resolveUsername r1 = new org.telegram.tgnet.TLRPC$TL_contacts_resolveUsername
            r1.<init>()
            r1.username = r6
            org.telegram.tgnet.ConnectionsManager r6 = r5.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda305 r2 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda305
            r2.<init>(r5, r0, r7, r8)
            int r6 = r6.sendRequest(r1, r2)
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda191 r8 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda191
            r8.<init>(r5, r0, r6, r7)
            r6 = 500(0x1f4, double:2.47E-321)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r8, r6)
        L_0x0069:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.openByUserName(java.lang.String, org.telegram.ui.ActionBar.BaseFragment, int):void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$openByUserName$319(AlertDialog[] alertDialogArr, BaseFragment baseFragment, int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda192(this, alertDialogArr, baseFragment, tLRPC$TL_error, tLObject, i));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$openByUserName$318(AlertDialog[] alertDialogArr, BaseFragment baseFragment, TLRPC$TL_error tLRPC$TL_error, TLObject tLObject, int i) {
        try {
            alertDialogArr[0].dismiss();
        } catch (Exception unused) {
        }
        alertDialogArr[0] = null;
        baseFragment.setVisibleDialog((Dialog) null);
        if (tLRPC$TL_error == null) {
            TLRPC$TL_contacts_resolvedPeer tLRPC$TL_contacts_resolvedPeer = (TLRPC$TL_contacts_resolvedPeer) tLObject;
            putUsers(tLRPC$TL_contacts_resolvedPeer.users, false);
            putChats(tLRPC$TL_contacts_resolvedPeer.chats, false);
            getMessagesStorage().putUsersAndChats(tLRPC$TL_contacts_resolvedPeer.users, tLRPC$TL_contacts_resolvedPeer.chats, false, true);
            if (!tLRPC$TL_contacts_resolvedPeer.chats.isEmpty()) {
                openChatOrProfileWith((TLRPC$User) null, tLRPC$TL_contacts_resolvedPeer.chats.get(0), baseFragment, 1, false);
            } else if (!tLRPC$TL_contacts_resolvedPeer.users.isEmpty()) {
                openChatOrProfileWith(tLRPC$TL_contacts_resolvedPeer.users.get(0), (TLRPC$Chat) null, baseFragment, i, false);
            }
        } else if (baseFragment.getParentActivity() != null) {
            try {
                BulletinFactory.of(baseFragment).createErrorBulletin(LocaleController.getString("NoUsernameFound", NUM)).show();
            } catch (Exception e) {
                FileLog.e((Throwable) e);
            }
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$openByUserName$321(AlertDialog[] alertDialogArr, int i, BaseFragment baseFragment) {
        if (alertDialogArr[0] != null) {
            alertDialogArr[0].setOnCancelListener(new MessagesController$$ExternalSyntheticLambda1(this, i));
            baseFragment.showDialog(alertDialogArr[0]);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$openByUserName$320(int i, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
    }

    public void ensureMessagesLoaded(long j, int i, MessagesLoadedCallback messagesLoadedCallback) {
        int i2;
        long j2 = j;
        SharedPreferences notificationsSettings = getNotificationsSettings(this.currentAccount);
        if (i == 0) {
            i2 = notificationsSettings.getInt("diditem" + j2, 0);
        } else {
            i2 = i;
        }
        int generateClassGuid = ConnectionsManager.generateClassGuid();
        long j3 = DialogObject.isChatDialog(j) ? -j2 : 0;
        if (j3 == 0 || getMessagesController().getChat(Long.valueOf(j3)) != null) {
            int i3 = AndroidUtilities.isTablet() ? 30 : 20;
            final int i4 = generateClassGuid;
            final int i5 = i3;
            final int i6 = i2;
            final long j4 = j;
            final MessagesLoadedCallback messagesLoadedCallback2 = messagesLoadedCallback;
            AnonymousClass1 r0 = new NotificationCenter.NotificationCenterDelegate() {
                public void didReceivedNotification(int i, int i2, Object... objArr) {
                    int i3 = i;
                    int i4 = NotificationCenter.messagesDidLoadWithoutProcess;
                    if (i3 == i4 && objArr[0].intValue() == i4) {
                        int intValue = objArr[1].intValue();
                        boolean booleanValue = objArr[2].booleanValue();
                        boolean booleanValue2 = objArr[3].booleanValue();
                        int intValue2 = objArr[4].intValue();
                        int i5 = i5;
                        if (intValue >= i5 / 2 || booleanValue2 || !booleanValue) {
                            MessagesController.this.getNotificationCenter().removeObserver(this, i4);
                            MessagesController.this.getNotificationCenter().removeObserver(this, NotificationCenter.loadingMessagesFailed);
                            MessagesLoadedCallback messagesLoadedCallback = messagesLoadedCallback2;
                            if (messagesLoadedCallback != null) {
                                messagesLoadedCallback.onMessagesLoaded(booleanValue);
                                return;
                            }
                            return;
                        }
                        int i6 = i6;
                        if (i6 != 0) {
                            MessagesController.this.loadMessagesInternal(j4, 0, false, i5, i6, 0, false, 0, i4, 3, intValue2, 0, 0, 0, 0, 0, 0, false, 0, true, false);
                        } else {
                            MessagesController.this.loadMessagesInternal(j4, 0, false, i5, i6, 0, false, 0, i4, 2, intValue2, 0, 0, 0, 0, 0, 0, false, 0, true, false);
                        }
                    } else {
                        int i7 = NotificationCenter.loadingMessagesFailed;
                        if (i3 == i7 && objArr[0].intValue() == i4) {
                            MessagesController.this.getNotificationCenter().removeObserver(this, i4);
                            MessagesController.this.getNotificationCenter().removeObserver(this, i7);
                            MessagesLoadedCallback messagesLoadedCallback2 = messagesLoadedCallback2;
                            if (messagesLoadedCallback2 != null) {
                                messagesLoadedCallback2.onError();
                            }
                        }
                    }
                }
            };
            getNotificationCenter().addObserver(r0, NotificationCenter.messagesDidLoadWithoutProcess);
            getNotificationCenter().addObserver(r0, NotificationCenter.loadingMessagesFailed);
            if (i2 != 0) {
                loadMessagesInternal(j, 0, true, i3, i2, 0, true, 0, generateClassGuid, 3, 0, 0, 0, 0, 0, 0, 0, false, 0, true, false);
            } else {
                loadMessagesInternal(j, 0, true, i3, i2, 0, true, 0, generateClassGuid, 2, 0, 0, 0, 0, 0, 0, 0, false, 0, true, false);
            }
        } else {
            MessagesStorage messagesStorage = getMessagesStorage();
            messagesStorage.getStorageQueue().postRunnable(new MessagesController$$ExternalSyntheticLambda112(this, messagesStorage, j3, j, i2, messagesLoadedCallback));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$ensureMessagesLoaded$323(MessagesStorage messagesStorage, long j, long j2, int i, MessagesLoadedCallback messagesLoadedCallback) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda130(this, messagesStorage.getChat(j), j2, i, messagesLoadedCallback));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$ensureMessagesLoaded$322(TLRPC$Chat tLRPC$Chat, long j, int i, MessagesLoadedCallback messagesLoadedCallback) {
        if (tLRPC$Chat != null) {
            getMessagesController().putChat(tLRPC$Chat, true);
            ensureMessagesLoaded(j, i, messagesLoadedCallback);
        } else if (messagesLoadedCallback != null) {
            messagesLoadedCallback.onError();
        }
    }
}
