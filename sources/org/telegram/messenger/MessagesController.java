package org.telegram.messenger;

import android.app.Activity;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.SharedPreferences;
import android.location.Location;
import android.os.Bundle;
import android.os.SystemClock;
import android.text.TextUtils;
import android.util.LongSparseArray;
import android.util.SparseArray;
import android.util.SparseBooleanArray;
import android.util.SparseIntArray;
import android.widget.Toast;
import java.io.File;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CountDownLatch;
import org.telegram.messenger.MessagesStorage;
import org.telegram.messenger.NotificationCenter;
import org.telegram.messenger.support.SparseLongArray;
import org.telegram.tgnet.ConnectionsManager;
import org.telegram.tgnet.NativeByteBuffer;
import org.telegram.tgnet.RequestDelegate;
import org.telegram.tgnet.TLObject;
import org.telegram.tgnet.TLRPC$ChannelParticipant;
import org.telegram.tgnet.TLRPC$Chat;
import org.telegram.tgnet.TLRPC$ChatFull;
import org.telegram.tgnet.TLRPC$Dialog;
import org.telegram.tgnet.TLRPC$DialogPeer;
import org.telegram.tgnet.TLRPC$Document;
import org.telegram.tgnet.TLRPC$DraftMessage;
import org.telegram.tgnet.TLRPC$EncryptedChat;
import org.telegram.tgnet.TLRPC$ExportedChatInvite;
import org.telegram.tgnet.TLRPC$FileLocation;
import org.telegram.tgnet.TLRPC$InputChannel;
import org.telegram.tgnet.TLRPC$InputDialogPeer;
import org.telegram.tgnet.TLRPC$InputFile;
import org.telegram.tgnet.TLRPC$InputPeer;
import org.telegram.tgnet.TLRPC$InputPhoto;
import org.telegram.tgnet.TLRPC$InputUser;
import org.telegram.tgnet.TLRPC$JSONValue;
import org.telegram.tgnet.TLRPC$Message;
import org.telegram.tgnet.TLRPC$MessageAction;
import org.telegram.tgnet.TLRPC$MessageMedia;
import org.telegram.tgnet.TLRPC$Peer;
import org.telegram.tgnet.TLRPC$PeerNotifySettings;
import org.telegram.tgnet.TLRPC$Photo;
import org.telegram.tgnet.TLRPC$PhotoSize;
import org.telegram.tgnet.TLRPC$RecentMeUrl;
import org.telegram.tgnet.TLRPC$SendMessageAction;
import org.telegram.tgnet.TLRPC$TL_account_createTheme;
import org.telegram.tgnet.TLRPC$TL_account_getContactSignUpNotification;
import org.telegram.tgnet.TLRPC$TL_account_getNotifySettings;
import org.telegram.tgnet.TLRPC$TL_account_installTheme;
import org.telegram.tgnet.TLRPC$TL_account_installWallPaper;
import org.telegram.tgnet.TLRPC$TL_account_registerDevice;
import org.telegram.tgnet.TLRPC$TL_account_reportPeer;
import org.telegram.tgnet.TLRPC$TL_account_saveTheme;
import org.telegram.tgnet.TLRPC$TL_account_unregisterDevice;
import org.telegram.tgnet.TLRPC$TL_account_updateStatus;
import org.telegram.tgnet.TLRPC$TL_account_updateTheme;
import org.telegram.tgnet.TLRPC$TL_account_uploadTheme;
import org.telegram.tgnet.TLRPC$TL_account_uploadWallPaper;
import org.telegram.tgnet.TLRPC$TL_auth_logOut;
import org.telegram.tgnet.TLRPC$TL_boolFalse;
import org.telegram.tgnet.TLRPC$TL_boolTrue;
import org.telegram.tgnet.TLRPC$TL_botInfo;
import org.telegram.tgnet.TLRPC$TL_channel;
import org.telegram.tgnet.TLRPC$TL_channelForbidden;
import org.telegram.tgnet.TLRPC$TL_channelParticipantSelf;
import org.telegram.tgnet.TLRPC$TL_channelParticipantsAdmins;
import org.telegram.tgnet.TLRPC$TL_channelParticipantsRecent;
import org.telegram.tgnet.TLRPC$TL_channels_channelParticipant;
import org.telegram.tgnet.TLRPC$TL_channels_channelParticipants;
import org.telegram.tgnet.TLRPC$TL_channels_createChannel;
import org.telegram.tgnet.TLRPC$TL_channels_deleteMessages;
import org.telegram.tgnet.TLRPC$TL_channels_deleteUserHistory;
import org.telegram.tgnet.TLRPC$TL_channels_editAdmin;
import org.telegram.tgnet.TLRPC$TL_channels_editBanned;
import org.telegram.tgnet.TLRPC$TL_channels_getChannels;
import org.telegram.tgnet.TLRPC$TL_channels_getParticipant;
import org.telegram.tgnet.TLRPC$TL_channels_getParticipants;
import org.telegram.tgnet.TLRPC$TL_channels_inviteToChannel;
import org.telegram.tgnet.TLRPC$TL_channels_readMessageContents;
import org.telegram.tgnet.TLRPC$TL_channels_togglePreHistoryHidden;
import org.telegram.tgnet.TLRPC$TL_channels_toggleSignatures;
import org.telegram.tgnet.TLRPC$TL_channels_toggleSlowMode;
import org.telegram.tgnet.TLRPC$TL_channels_updateUsername;
import org.telegram.tgnet.TLRPC$TL_chatAdminRights;
import org.telegram.tgnet.TLRPC$TL_chatBannedRights;
import org.telegram.tgnet.TLRPC$TL_chatOnlines;
import org.telegram.tgnet.TLRPC$TL_config;
import org.telegram.tgnet.TLRPC$TL_contacts_block;
import org.telegram.tgnet.TLRPC$TL_contacts_getBlocked;
import org.telegram.tgnet.TLRPC$TL_contacts_resolvedPeer;
import org.telegram.tgnet.TLRPC$TL_contacts_unblock;
import org.telegram.tgnet.TLRPC$TL_dialog;
import org.telegram.tgnet.TLRPC$TL_dialogFilterSuggested;
import org.telegram.tgnet.TLRPC$TL_dialogFolder;
import org.telegram.tgnet.TLRPC$TL_dialogPeer;
import org.telegram.tgnet.TLRPC$TL_documentEmpty;
import org.telegram.tgnet.TLRPC$TL_draftMessage;
import org.telegram.tgnet.TLRPC$TL_encryptedChat;
import org.telegram.tgnet.TLRPC$TL_encryptedChatRequested;
import org.telegram.tgnet.TLRPC$TL_encryptedChatWaiting;
import org.telegram.tgnet.TLRPC$TL_error;
import org.telegram.tgnet.TLRPC$TL_folder;
import org.telegram.tgnet.TLRPC$TL_help_getAppChangelog;
import org.telegram.tgnet.TLRPC$TL_help_getAppConfig;
import org.telegram.tgnet.TLRPC$TL_help_getRecentMeUrls;
import org.telegram.tgnet.TLRPC$TL_help_getTermsOfServiceUpdate;
import org.telegram.tgnet.TLRPC$TL_help_proxyDataPromo;
import org.telegram.tgnet.TLRPC$TL_help_recentMeUrls;
import org.telegram.tgnet.TLRPC$TL_help_termsOfServiceUpdate;
import org.telegram.tgnet.TLRPC$TL_help_termsOfServiceUpdateEmpty;
import org.telegram.tgnet.TLRPC$TL_inputChannel;
import org.telegram.tgnet.TLRPC$TL_inputChannelEmpty;
import org.telegram.tgnet.TLRPC$TL_inputDialogPeer;
import org.telegram.tgnet.TLRPC$TL_inputDocument;
import org.telegram.tgnet.TLRPC$TL_inputEncryptedChat;
import org.telegram.tgnet.TLRPC$TL_inputFolderPeer;
import org.telegram.tgnet.TLRPC$TL_inputGeoPoint;
import org.telegram.tgnet.TLRPC$TL_inputMessagesFilterChatPhotos;
import org.telegram.tgnet.TLRPC$TL_inputNotifyBroadcasts;
import org.telegram.tgnet.TLRPC$TL_inputNotifyChats;
import org.telegram.tgnet.TLRPC$TL_inputNotifyUsers;
import org.telegram.tgnet.TLRPC$TL_inputPeerChannel;
import org.telegram.tgnet.TLRPC$TL_inputPeerChat;
import org.telegram.tgnet.TLRPC$TL_inputPeerEmpty;
import org.telegram.tgnet.TLRPC$TL_inputPeerSelf;
import org.telegram.tgnet.TLRPC$TL_inputPeerUser;
import org.telegram.tgnet.TLRPC$TL_inputPhotoEmpty;
import org.telegram.tgnet.TLRPC$TL_inputReportReasonGeoIrrelevant;
import org.telegram.tgnet.TLRPC$TL_inputReportReasonSpam;
import org.telegram.tgnet.TLRPC$TL_inputTheme;
import org.telegram.tgnet.TLRPC$TL_inputThemeSettings;
import org.telegram.tgnet.TLRPC$TL_inputUser;
import org.telegram.tgnet.TLRPC$TL_inputUserEmpty;
import org.telegram.tgnet.TLRPC$TL_inputUserSelf;
import org.telegram.tgnet.TLRPC$TL_inputWallPaperNoFile;
import org.telegram.tgnet.TLRPC$TL_inputWallPaperSlug;
import org.telegram.tgnet.TLRPC$TL_jsonBool;
import org.telegram.tgnet.TLRPC$TL_jsonNumber;
import org.telegram.tgnet.TLRPC$TL_jsonObject;
import org.telegram.tgnet.TLRPC$TL_jsonObjectValue;
import org.telegram.tgnet.TLRPC$TL_jsonString;
import org.telegram.tgnet.TLRPC$TL_messageActionChannelCreate;
import org.telegram.tgnet.TLRPC$TL_messageActionChatAddUser;
import org.telegram.tgnet.TLRPC$TL_messageActionChatDeleteUser;
import org.telegram.tgnet.TLRPC$TL_messageActionChatMigrateTo;
import org.telegram.tgnet.TLRPC$TL_messageMediaWebPage;
import org.telegram.tgnet.TLRPC$TL_messageService;
import org.telegram.tgnet.TLRPC$TL_messages_affectedHistory;
import org.telegram.tgnet.TLRPC$TL_messages_affectedMessages;
import org.telegram.tgnet.TLRPC$TL_messages_chatFull;
import org.telegram.tgnet.TLRPC$TL_messages_chats;
import org.telegram.tgnet.TLRPC$TL_messages_createChat;
import org.telegram.tgnet.TLRPC$TL_messages_deleteMessages;
import org.telegram.tgnet.TLRPC$TL_messages_deleteScheduledMessages;
import org.telegram.tgnet.TLRPC$TL_messages_dialogs;
import org.telegram.tgnet.TLRPC$TL_messages_editChatAbout;
import org.telegram.tgnet.TLRPC$TL_messages_editChatAdmin;
import org.telegram.tgnet.TLRPC$TL_messages_editChatDefaultBannedRights;
import org.telegram.tgnet.TLRPC$TL_messages_getChats;
import org.telegram.tgnet.TLRPC$TL_messages_getDialogFilters;
import org.telegram.tgnet.TLRPC$TL_messages_getDialogUnreadMarks;
import org.telegram.tgnet.TLRPC$TL_messages_getDialogs;
import org.telegram.tgnet.TLRPC$TL_messages_getHistory;
import org.telegram.tgnet.TLRPC$TL_messages_getMessagesViews;
import org.telegram.tgnet.TLRPC$TL_messages_getOnlines;
import org.telegram.tgnet.TLRPC$TL_messages_getPeerDialogs;
import org.telegram.tgnet.TLRPC$TL_messages_getPeerSettings;
import org.telegram.tgnet.TLRPC$TL_messages_getPinnedDialogs;
import org.telegram.tgnet.TLRPC$TL_messages_getPollResults;
import org.telegram.tgnet.TLRPC$TL_messages_getScheduledHistory;
import org.telegram.tgnet.TLRPC$TL_messages_getSuggestedDialogFilters;
import org.telegram.tgnet.TLRPC$TL_messages_getUnreadMentions;
import org.telegram.tgnet.TLRPC$TL_messages_getWebPagePreview;
import org.telegram.tgnet.TLRPC$TL_messages_hidePeerSettingsBar;
import org.telegram.tgnet.TLRPC$TL_messages_markDialogUnread;
import org.telegram.tgnet.TLRPC$TL_messages_messages;
import org.telegram.tgnet.TLRPC$TL_messages_messagesNotModified;
import org.telegram.tgnet.TLRPC$TL_messages_migrateChat;
import org.telegram.tgnet.TLRPC$TL_messages_peerDialogs;
import org.telegram.tgnet.TLRPC$TL_messages_readMentions;
import org.telegram.tgnet.TLRPC$TL_messages_readMessageContents;
import org.telegram.tgnet.TLRPC$TL_messages_reorderPinnedDialogs;
import org.telegram.tgnet.TLRPC$TL_messages_reportEncryptedSpam;
import org.telegram.tgnet.TLRPC$TL_messages_saveGif;
import org.telegram.tgnet.TLRPC$TL_messages_saveRecentSticker;
import org.telegram.tgnet.TLRPC$TL_messages_search;
import org.telegram.tgnet.TLRPC$TL_messages_startBot;
import org.telegram.tgnet.TLRPC$TL_messages_toggleDialogPin;
import org.telegram.tgnet.TLRPC$TL_messages_updatePinnedMessage;
import org.telegram.tgnet.TLRPC$TL_peerChannel;
import org.telegram.tgnet.TLRPC$TL_peerChat;
import org.telegram.tgnet.TLRPC$TL_peerNotifySettings;
import org.telegram.tgnet.TLRPC$TL_peerSettings;
import org.telegram.tgnet.TLRPC$TL_peerUser;
import org.telegram.tgnet.TLRPC$TL_photoEmpty;
import org.telegram.tgnet.TLRPC$TL_photos_deletePhotos;
import org.telegram.tgnet.TLRPC$TL_photos_getUserPhotos;
import org.telegram.tgnet.TLRPC$TL_photos_photo;
import org.telegram.tgnet.TLRPC$TL_photos_photos;
import org.telegram.tgnet.TLRPC$TL_photos_updateProfilePhoto;
import org.telegram.tgnet.TLRPC$TL_photos_uploadProfilePhoto;
import org.telegram.tgnet.TLRPC$TL_replyKeyboardHide;
import org.telegram.tgnet.TLRPC$TL_restrictionReason;
import org.telegram.tgnet.TLRPC$TL_sendMessageGamePlayAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageRecordAudioAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageRecordRoundAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageRecordVideoAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageUploadAudioAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageUploadDocumentAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageUploadPhotoAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageUploadRoundAction;
import org.telegram.tgnet.TLRPC$TL_sendMessageUploadVideoAction;
import org.telegram.tgnet.TLRPC$TL_theme;
import org.telegram.tgnet.TLRPC$TL_updateChannel;
import org.telegram.tgnet.TLRPC$TL_updateChannelAvailableMessages;
import org.telegram.tgnet.TLRPC$TL_updateChannelMessageViews;
import org.telegram.tgnet.TLRPC$TL_updateChannelPinnedMessage;
import org.telegram.tgnet.TLRPC$TL_updateChannelReadMessagesContents;
import org.telegram.tgnet.TLRPC$TL_updateChannelTooLong;
import org.telegram.tgnet.TLRPC$TL_updateChannelWebPage;
import org.telegram.tgnet.TLRPC$TL_updateDeleteChannelMessages;
import org.telegram.tgnet.TLRPC$TL_updateDeleteMessages;
import org.telegram.tgnet.TLRPC$TL_updateEditChannelMessage;
import org.telegram.tgnet.TLRPC$TL_updateEditMessage;
import org.telegram.tgnet.TLRPC$TL_updateFolderPeers;
import org.telegram.tgnet.TLRPC$TL_updateLangPack;
import org.telegram.tgnet.TLRPC$TL_updateMessageID;
import org.telegram.tgnet.TLRPC$TL_updateNewChannelMessage;
import org.telegram.tgnet.TLRPC$TL_updateNewEncryptedMessage;
import org.telegram.tgnet.TLRPC$TL_updateNewMessage;
import org.telegram.tgnet.TLRPC$TL_updateReadChannelInbox;
import org.telegram.tgnet.TLRPC$TL_updateReadChannelOutbox;
import org.telegram.tgnet.TLRPC$TL_updateReadHistoryInbox;
import org.telegram.tgnet.TLRPC$TL_updateReadHistoryOutbox;
import org.telegram.tgnet.TLRPC$TL_updateReadMessagesContents;
import org.telegram.tgnet.TLRPC$TL_updateServiceNotification;
import org.telegram.tgnet.TLRPC$TL_updateUserBlocked;
import org.telegram.tgnet.TLRPC$TL_updateWebPage;
import org.telegram.tgnet.TLRPC$TL_updatesCombined;
import org.telegram.tgnet.TLRPC$TL_updates_difference;
import org.telegram.tgnet.TLRPC$TL_updates_differenceEmpty;
import org.telegram.tgnet.TLRPC$TL_updates_differenceSlice;
import org.telegram.tgnet.TLRPC$TL_updates_differenceTooLong;
import org.telegram.tgnet.TLRPC$TL_updates_getDifference;
import org.telegram.tgnet.TLRPC$TL_updates_getState;
import org.telegram.tgnet.TLRPC$TL_updates_state;
import org.telegram.tgnet.TLRPC$TL_userForeign_old2;
import org.telegram.tgnet.TLRPC$TL_userProfilePhoto;
import org.telegram.tgnet.TLRPC$TL_userProfilePhotoEmpty;
import org.telegram.tgnet.TLRPC$TL_users_getFullUser;
import org.telegram.tgnet.TLRPC$TL_users_getUsers;
import org.telegram.tgnet.TLRPC$TL_wallPaper;
import org.telegram.tgnet.TLRPC$TL_wallPaperSettings;
import org.telegram.tgnet.TLRPC$TL_webPage;
import org.telegram.tgnet.TLRPC$TL_webPageEmpty;
import org.telegram.tgnet.TLRPC$Update;
import org.telegram.tgnet.TLRPC$Updates;
import org.telegram.tgnet.TLRPC$User;
import org.telegram.tgnet.TLRPC$UserFull;
import org.telegram.tgnet.TLRPC$UserProfilePhoto;
import org.telegram.tgnet.TLRPC$Vector;
import org.telegram.tgnet.TLRPC$WallPaperSettings;
import org.telegram.tgnet.TLRPC$WebPage;
import org.telegram.tgnet.TLRPC$contacts_Blocked;
import org.telegram.tgnet.TLRPC$messages_Dialogs;
import org.telegram.tgnet.TLRPC$messages_Messages;
import org.telegram.tgnet.TLRPC$photos_Photos;
import org.telegram.tgnet.TLRPC$updates_ChannelDifference;
import org.telegram.tgnet.TLRPC$updates_Difference;
import org.telegram.ui.ActionBar.AlertDialog;
import org.telegram.ui.ActionBar.BaseFragment;
import org.telegram.ui.ActionBar.Theme;
import org.telegram.ui.ChatActivity;
import org.telegram.ui.Components.AlertsCreator;
import org.telegram.ui.DialogsActivity;
import org.telegram.ui.ProfileActivity;

public class MessagesController extends BaseController implements NotificationCenter.NotificationCenterDelegate {
    public static int DIALOG_FILTER_FLAG_ALL_CHATS = ((((1 | 2) | 4) | 8) | 16);
    public static int DIALOG_FILTER_FLAG_BOTS = 16;
    public static int DIALOG_FILTER_FLAG_CHANNELS = 8;
    public static int DIALOG_FILTER_FLAG_CONTACTS = 1;
    public static int DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED = 128;
    public static int DIALOG_FILTER_FLAG_EXCLUDE_MUTED = 32;
    public static int DIALOG_FILTER_FLAG_EXCLUDE_READ = 64;
    public static int DIALOG_FILTER_FLAG_GROUPS = 4;
    public static int DIALOG_FILTER_FLAG_NON_CONTACTS = 2;
    public static int DIALOG_FILTER_FLAG_ONLY_ARCHIVED = 256;
    private static volatile MessagesController[] Instance = new MessagesController[3];
    public static final int UPDATE_MASK_ALL = 1535;
    public static final int UPDATE_MASK_AVATAR = 2;
    public static final int UPDATE_MASK_CHAT = 8192;
    public static final int UPDATE_MASK_CHAT_AVATAR = 8;
    public static final int UPDATE_MASK_CHAT_MEMBERS = 32;
    public static final int UPDATE_MASK_CHAT_NAME = 16;
    public static final int UPDATE_MASK_CHECK = 65536;
    public static final int UPDATE_MASK_MESSAGE_TEXT = 32768;
    public static final int UPDATE_MASK_NAME = 1;
    public static final int UPDATE_MASK_NEW_MESSAGE = 2048;
    public static final int UPDATE_MASK_PHONE = 1024;
    public static final int UPDATE_MASK_READ_DIALOG_MESSAGE = 256;
    public static final int UPDATE_MASK_REORDER = 131072;
    public static final int UPDATE_MASK_SELECT_DIALOG = 512;
    public static final int UPDATE_MASK_SEND_STATE = 4096;
    public static final int UPDATE_MASK_STATUS = 4;
    public static final int UPDATE_MASK_USER_PHONE = 128;
    public static final int UPDATE_MASK_USER_PRINT = 64;
    private static volatile long lastPasswordCheckTime;
    private static volatile long lastThemeCheckTime;
    private int DIALOGS_LOAD_TYPE_CACHE = 1;
    private int DIALOGS_LOAD_TYPE_CHANNEL = 2;
    private int DIALOGS_LOAD_TYPE_UNKNOWN = 3;
    protected ArrayList<TLRPC$Dialog> allDialogs = new ArrayList<>();
    public float animatedEmojisZoom;
    public int availableMapProviders;
    public boolean backgroundConnection;
    public boolean blockedCountry;
    public boolean blockedEndReached;
    public SparseIntArray blockedUsers = new SparseIntArray();
    public int callConnectTimeout;
    public int callPacketTimeout;
    public int callReceiveTimeout;
    public int callRingTimeout;
    public boolean canRevokePmInbox;
    private SparseArray<SparseArray<String>> channelAdmins = new SparseArray<>();
    private SparseArray<ArrayList<Integer>> channelViewsToSend = new SparseArray<>();
    private SparseIntArray channelsPts = new SparseIntArray();
    private ConcurrentHashMap<Integer, TLRPC$Chat> chats = new ConcurrentHashMap<>(100, 1.0f, 2);
    private SparseBooleanArray checkingLastMessagesDialogs = new SparseBooleanArray();
    private boolean checkingProxyInfo;
    private int checkingProxyInfoRequestId;
    private boolean checkingTosUpdate;
    private LongSparseArray<TLRPC$Dialog> clearingHistoryDialogs = new LongSparseArray<>();
    private ArrayList<Long> createdDialogIds = new ArrayList<>();
    private ArrayList<Long> createdDialogMainThreadIds = new ArrayList<>();
    private ArrayList<Long> createdScheduledDialogIds = new ArrayList<>();
    private Runnable currentDeleteTaskRunnable;
    private int currentDeletingTaskChannelId;
    private ArrayList<Integer> currentDeletingTaskMids;
    private int currentDeletingTaskTime;
    public String dcDomainName;
    public LongSparseArray<Integer> deletedHistory = new LongSparseArray<>();
    private LongSparseArray<TLRPC$Dialog> deletingDialogs = new LongSparseArray<>();
    private final Comparator<TLRPC$Dialog> dialogComparator = new Comparator() {
        public final int compare(Object obj, Object obj2) {
            return MessagesController.this.lambda$new$2$MessagesController((TLRPC$Dialog) obj, (TLRPC$Dialog) obj2);
        }
    };
    private final Comparator<TLRPC$Dialog> dialogDateComparator = new Comparator() {
        public final int compare(Object obj, Object obj2) {
            return MessagesController.this.lambda$new$1$MessagesController((TLRPC$Dialog) obj, (TLRPC$Dialog) obj2);
        }
    };
    public ArrayList<DialogFilter> dialogFilters = new ArrayList<>();
    public SparseArray<DialogFilter> dialogFiltersById = new SparseArray<>();
    public LongSparseArray<MessageObject> dialogMessage = new LongSparseArray<>();
    public SparseArray<MessageObject> dialogMessagesByIds = new SparseArray<>();
    public LongSparseArray<MessageObject> dialogMessagesByRandomIds = new LongSparseArray<>();
    private SparseArray<ArrayList<TLRPC$Dialog>> dialogsByFolder = new SparseArray<>();
    public ArrayList<TLRPC$Dialog> dialogsCanAddUsers = new ArrayList<>();
    public ArrayList<TLRPC$Dialog> dialogsChannelsOnly = new ArrayList<>();
    private SparseBooleanArray dialogsEndReached = new SparseBooleanArray();
    public ArrayList<TLRPC$Dialog> dialogsForward = new ArrayList<>();
    public ArrayList<TLRPC$Dialog> dialogsGroupsOnly = new ArrayList<>();
    private boolean dialogsInTransaction;
    public boolean dialogsLoaded;
    private int dialogsLoadedTillDate = Integer.MAX_VALUE;
    public ArrayList<TLRPC$Dialog> dialogsServerOnly = new ArrayList<>();
    public ArrayList<TLRPC$Dialog> dialogsUsersOnly = new ArrayList<>();
    public LongSparseArray<TLRPC$Dialog> dialogs_dict = new LongSparseArray<>();
    public ConcurrentHashMap<Long, Integer> dialogs_read_inbox_max = new ConcurrentHashMap<>(100, 1.0f, 2);
    public ConcurrentHashMap<Long, Integer> dialogs_read_outbox_max = new ConcurrentHashMap<>(100, 1.0f, 2);
    private SharedPreferences emojiPreferences;
    public boolean enableJoined;
    private ConcurrentHashMap<Integer, TLRPC$EncryptedChat> encryptedChats = new ConcurrentHashMap<>(10, 1.0f, 2);
    private SparseArray<TLRPC$ExportedChatInvite> exportedChats = new SparseArray<>();
    public boolean filtersEnabled;
    public boolean firstGettingTask;
    private SparseArray<TLRPC$ChatFull> fullChats = new SparseArray<>();
    private SparseArray<TLRPC$UserFull> fullUsers = new SparseArray<>();
    private boolean getDifferenceFirstSync = true;
    private boolean gettingAppChangelog;
    public boolean gettingDifference;
    private SparseBooleanArray gettingDifferenceChannels = new SparseBooleanArray();
    private boolean gettingNewDeleteTask;
    private SparseBooleanArray gettingUnknownChannels = new SparseBooleanArray();
    private LongSparseArray<Boolean> gettingUnknownDialogs = new LongSparseArray<>();
    public String gifSearchBot;
    public ArrayList<TLRPC$RecentMeUrl> hintDialogs = new ArrayList<>();
    public String imageSearchBot;
    private String installReferer;
    private boolean isLeftProxyChannel;
    private ArrayList<Integer> joiningToChannels = new ArrayList<>();
    public boolean keepAliveService;
    private int lastCheckProxyId;
    private int lastPrintingStringCount;
    private long lastPushRegisterSendTime;
    private LongSparseArray<Long> lastScheduledServerQueryTime = new LongSparseArray<>();
    private long lastStatusUpdateTime;
    private long lastViewsCheckTime;
    public String linkPrefix;
    private ArrayList<Integer> loadedFullChats = new ArrayList<>();
    private ArrayList<Integer> loadedFullParticipants = new ArrayList<>();
    private ArrayList<Integer> loadedFullUsers = new ArrayList<>();
    private boolean loadingAppConfig;
    public boolean loadingBlockedUsers = false;
    private SparseIntArray loadingChannelAdmins = new SparseIntArray();
    private SparseBooleanArray loadingDialogs = new SparseBooleanArray();
    private ArrayList<Integer> loadingFullChats = new ArrayList<>();
    private ArrayList<Integer> loadingFullParticipants = new ArrayList<>();
    private ArrayList<Integer> loadingFullUsers = new ArrayList<>();
    private int loadingNotificationSettings;
    private boolean loadingNotificationSignUpSettings;
    private LongSparseArray<Boolean> loadingPeerSettings = new LongSparseArray<>();
    private SparseIntArray loadingPinnedDialogs = new SparseIntArray();
    private boolean loadingRemoteFilters;
    private boolean loadingSuggestedFilters;
    private boolean loadingUnreadDialogs;
    private SharedPreferences mainPreferences;
    public String mapKey;
    public int mapProvider;
    public int maxBroadcastCount = 100;
    public int maxCaptionLength;
    public int maxEditTime;
    public int maxFaveStickersCount;
    public int maxFolderPinnedDialogsCount;
    public int maxGroupCount;
    public int maxMegagroupCount;
    public int maxMessageLength;
    public int maxPinnedDialogsCount;
    public int maxRecentGifsCount;
    public int maxRecentStickersCount;
    private SparseIntArray migratedChats = new SparseIntArray();
    private boolean migratingDialogs;
    public int minGroupConvertSize = 200;
    private SparseIntArray needShortPollChannels = new SparseIntArray();
    private SparseIntArray needShortPollOnlines = new SparseIntArray();
    private SparseIntArray nextDialogsCacheOffset = new SparseIntArray();
    private int nextProxyInfoCheckTime;
    private int nextTosCheckTime;
    private SharedPreferences notificationsPreferences;
    private ConcurrentHashMap<String, TLObject> objectsByUsernames = new ConcurrentHashMap<>(100, 1.0f, 2);
    private boolean offlineSent;
    public ConcurrentHashMap<Integer, Integer> onlinePrivacy = new ConcurrentHashMap<>(20, 1.0f, 2);
    private Runnable passwordCheckRunnable = new Runnable() {
        public final void run() {
            MessagesController.this.lambda$new$0$MessagesController();
        }
    };
    private LongSparseArray<SparseArray<MessageObject>> pollsToCheck = new LongSparseArray<>();
    private int pollsToCheckSize;
    public boolean preloadFeaturedStickers;
    public LongSparseArray<CharSequence> printingStrings = new LongSparseArray<>();
    public LongSparseArray<Integer> printingStringsTypes = new LongSparseArray<>();
    public ConcurrentHashMap<Long, ArrayList<PrintingUser>> printingUsers = new ConcurrentHashMap<>(20, 1.0f, 2);
    private TLRPC$Dialog proxyDialog;
    private String proxyDialogAddress;
    private long proxyDialogId;
    public boolean qrLoginCamera;
    public int ratingDecay;
    private ArrayList<ReadTask> readTasks = new ArrayList<>();
    private LongSparseArray<ReadTask> readTasksMap = new LongSparseArray<>();
    public boolean registeringForPush;
    private LongSparseArray<ArrayList<Integer>> reloadingMessages = new LongSparseArray<>();
    private HashMap<String, ArrayList<MessageObject>> reloadingScheduledWebpages = new HashMap<>();
    private LongSparseArray<ArrayList<MessageObject>> reloadingScheduledWebpagesPending = new LongSparseArray<>();
    private HashMap<String, ArrayList<MessageObject>> reloadingWebpages = new HashMap<>();
    private LongSparseArray<ArrayList<MessageObject>> reloadingWebpagesPending = new LongSparseArray<>();
    private TLRPC$messages_Dialogs resetDialogsAll;
    private TLRPC$TL_messages_peerDialogs resetDialogsPinned;
    private boolean resetingDialogs;
    public int revokeTimeLimit;
    public int revokeTimePmLimit;
    public int secretWebpagePreview;
    public DialogFilter[] selectedDialogFilter = new DialogFilter[2];
    public SparseArray<LongSparseArray<Boolean>> sendingTypings = new SparseArray<>();
    private SparseBooleanArray serverDialogsEndReached = new SparseBooleanArray();
    private SparseIntArray shortPollChannels = new SparseIntArray();
    private SparseIntArray shortPollOnlines = new SparseIntArray();
    private DialogFilter sortingDialogFilter;
    private int statusRequest;
    private int statusSettingState;
    public boolean suggestContacts = true;
    public ArrayList<TLRPC$TL_dialogFilterSuggested> suggestedFilters = new ArrayList<>();
    public String suggestedLangCode;
    private Runnable themeCheckRunnable = $$Lambda$RQB0Jwr1FTqp6hrbGUHuOs9k1I.INSTANCE;
    public int totalBlockedCount = -1;
    public int unreadUnmutedDialogs;
    private final Comparator<TLRPC$Update> updatesComparator = new Comparator() {
        public final int compare(Object obj, Object obj2) {
            return MessagesController.this.lambda$new$3$MessagesController((TLRPC$Update) obj, (TLRPC$Update) obj2);
        }
    };
    private SparseArray<ArrayList<TLRPC$Updates>> updatesQueueChannels = new SparseArray<>();
    private ArrayList<TLRPC$Updates> updatesQueuePts = new ArrayList<>();
    private ArrayList<TLRPC$Updates> updatesQueueQts = new ArrayList<>();
    private ArrayList<TLRPC$Updates> updatesQueueSeq = new ArrayList<>();
    private SparseLongArray updatesStartWaitTimeChannels = new SparseLongArray();
    private long updatesStartWaitTimePts;
    private long updatesStartWaitTimeQts;
    private long updatesStartWaitTimeSeq;
    public boolean updatingState;
    private String uploadingAvatar;
    private HashMap<String, Object> uploadingThemes = new HashMap<>();
    private String uploadingWallpaper;
    private Theme.OverrideWallpaperInfo uploadingWallpaperInfo;
    private ConcurrentHashMap<Integer, TLRPC$User> users = new ConcurrentHashMap<>(100, 1.0f, 2);
    public String venueSearchBot;
    private ArrayList<Long> visibleDialogMainThreadIds = new ArrayList<>();
    private ArrayList<Long> visibleScheduledDialogMainThreadIds = new ArrayList<>();
    public int webFileDatacenterId;
    public String youtubePipType;

    public static class DialogFilter {
        public ArrayList<Integer> alwaysShow = new ArrayList<>();
        public ArrayList<TLRPC$Dialog> dialogs = new ArrayList<>();
        public int flags;
        public int id;
        public String name;
        public ArrayList<Integer> neverShow = new ArrayList<>();
        public int order;
        public volatile int pendingUnreadCount;
        public LongSparseArray<Integer> pinnedDialogs = new LongSparseArray<>();
        public int unreadCount;
    }

    public static class PrintingUser {
        public TLRPC$SendMessageAction action;
        public long lastTime;
        public int userId;
    }

    static /* synthetic */ void lambda$blockUser$57(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    static /* synthetic */ void lambda$completeReadTask$173(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    static /* synthetic */ void lambda$deleteUserPhoto$78(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    static /* synthetic */ void lambda$hidePeerSettingsBar$43(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    static /* synthetic */ void lambda$installTheme$81(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    static /* synthetic */ void lambda$installTheme$82(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    static /* synthetic */ void lambda$markMentionMessageAsRead$168(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    static /* synthetic */ void lambda$markMentionsAsRead$175(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    static /* synthetic */ void lambda$markMessageContentAsRead$166(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    static /* synthetic */ void lambda$processUpdates$264(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    static /* synthetic */ void lambda$reportSpam$44(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    static /* synthetic */ void lambda$reportSpam$45(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    static /* synthetic */ void lambda$saveTheme$80(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    static /* synthetic */ void lambda$unblockUser$73(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    static /* synthetic */ void lambda$unregistedPush$211(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
    }

    public /* synthetic */ void lambda$new$0$MessagesController() {
        getUserConfig().checkSavedPassword();
    }

    private static class UserActionUpdatesSeq extends TLRPC$Updates {
        private UserActionUpdatesSeq() {
        }
    }

    private static class UserActionUpdatesPts extends TLRPC$Updates {
        private UserActionUpdatesPts() {
        }
    }

    private static class ReadTask {
        public long dialogId;
        public int maxDate;
        public int maxId;
        public long sendRequestTime;

        private ReadTask() {
        }
    }

    public /* synthetic */ int lambda$new$1$MessagesController(TLRPC$Dialog tLRPC$Dialog, TLRPC$Dialog tLRPC$Dialog2) {
        int intValue = this.sortingDialogFilter.pinnedDialogs.get(tLRPC$Dialog.id, Integer.MIN_VALUE).intValue();
        int intValue2 = this.sortingDialogFilter.pinnedDialogs.get(tLRPC$Dialog2.id, Integer.MIN_VALUE).intValue();
        boolean z = tLRPC$Dialog instanceof TLRPC$TL_dialogFolder;
        if (z && !(tLRPC$Dialog2 instanceof TLRPC$TL_dialogFolder)) {
            return -1;
        }
        if (!z && (tLRPC$Dialog2 instanceof TLRPC$TL_dialogFolder)) {
            return 1;
        }
        if (intValue == Integer.MIN_VALUE && intValue2 != Integer.MIN_VALUE) {
            return 1;
        }
        if (intValue != Integer.MIN_VALUE && intValue2 == Integer.MIN_VALUE) {
            return -1;
        }
        if (intValue == Integer.MIN_VALUE || intValue2 == Integer.MIN_VALUE) {
            MediaDataController mediaDataController = getMediaDataController();
            long lastMessageOrDraftDate = DialogObject.getLastMessageOrDraftDate(tLRPC$Dialog, mediaDataController.getDraft(tLRPC$Dialog.id));
            long lastMessageOrDraftDate2 = DialogObject.getLastMessageOrDraftDate(tLRPC$Dialog2, mediaDataController.getDraft(tLRPC$Dialog2.id));
            if (lastMessageOrDraftDate < lastMessageOrDraftDate2) {
                return 1;
            }
            if (lastMessageOrDraftDate > lastMessageOrDraftDate2) {
                return -1;
            }
            return 0;
        } else if (intValue > intValue2) {
            return 1;
        } else {
            if (intValue < intValue2) {
                return -1;
            }
            return 0;
        }
    }

    public /* synthetic */ int lambda$new$2$MessagesController(TLRPC$Dialog tLRPC$Dialog, TLRPC$Dialog tLRPC$Dialog2) {
        boolean z = tLRPC$Dialog instanceof TLRPC$TL_dialogFolder;
        if (z && !(tLRPC$Dialog2 instanceof TLRPC$TL_dialogFolder)) {
            return -1;
        }
        if (!z && (tLRPC$Dialog2 instanceof TLRPC$TL_dialogFolder)) {
            return 1;
        }
        if (!tLRPC$Dialog.pinned && tLRPC$Dialog2.pinned) {
            return 1;
        }
        if (tLRPC$Dialog.pinned && !tLRPC$Dialog2.pinned) {
            return -1;
        }
        if (!tLRPC$Dialog.pinned || !tLRPC$Dialog2.pinned) {
            MediaDataController mediaDataController = getMediaDataController();
            long lastMessageOrDraftDate = DialogObject.getLastMessageOrDraftDate(tLRPC$Dialog, mediaDataController.getDraft(tLRPC$Dialog.id));
            long lastMessageOrDraftDate2 = DialogObject.getLastMessageOrDraftDate(tLRPC$Dialog2, mediaDataController.getDraft(tLRPC$Dialog2.id));
            if (lastMessageOrDraftDate < lastMessageOrDraftDate2) {
                return 1;
            }
            if (lastMessageOrDraftDate > lastMessageOrDraftDate2) {
                return -1;
            }
            return 0;
        }
        int i = tLRPC$Dialog.pinnedNum;
        int i2 = tLRPC$Dialog2.pinnedNum;
        if (i < i2) {
            return 1;
        }
        if (i > i2) {
            return -1;
        }
        return 0;
    }

    public /* synthetic */ int lambda$new$3$MessagesController(TLRPC$Update tLRPC$Update, TLRPC$Update tLRPC$Update2) {
        int updateType = getUpdateType(tLRPC$Update);
        int updateType2 = getUpdateType(tLRPC$Update2);
        if (updateType != updateType2) {
            return AndroidUtilities.compare(updateType, updateType2);
        }
        if (updateType == 0) {
            return AndroidUtilities.compare(getUpdatePts(tLRPC$Update), getUpdatePts(tLRPC$Update2));
        }
        if (updateType == 1) {
            return AndroidUtilities.compare(getUpdateQts(tLRPC$Update), getUpdateQts(tLRPC$Update2));
        }
        if (updateType != 2) {
            return 0;
        }
        int updateChannelId = getUpdateChannelId(tLRPC$Update);
        int updateChannelId2 = getUpdateChannelId(tLRPC$Update2);
        if (updateChannelId == updateChannelId2) {
            return AndroidUtilities.compare(getUpdatePts(tLRPC$Update), getUpdatePts(tLRPC$Update2));
        }
        return AndroidUtilities.compare(updateChannelId, updateChannelId2);
    }

    public static MessagesController getInstance(int i) {
        MessagesController messagesController = Instance[i];
        if (messagesController == null) {
            synchronized (MessagesController.class) {
                messagesController = Instance[i];
                if (messagesController == null) {
                    MessagesController[] messagesControllerArr = Instance;
                    MessagesController messagesController2 = new MessagesController(i);
                    messagesControllerArr[i] = messagesController2;
                    messagesController = messagesController2;
                }
            }
        }
        return messagesController;
    }

    public static SharedPreferences getNotificationsSettings(int i) {
        return getInstance(i).notificationsPreferences;
    }

    public static SharedPreferences getGlobalNotificationsSettings() {
        return getInstance(0).notificationsPreferences;
    }

    public static SharedPreferences getMainSettings(int i) {
        return getInstance(i).mainPreferences;
    }

    public static SharedPreferences getGlobalMainSettings() {
        return getInstance(0).mainPreferences;
    }

    public static SharedPreferences getEmojiSettings(int i) {
        return getInstance(i).emojiPreferences;
    }

    public static SharedPreferences getGlobalEmojiSettings() {
        return getInstance(0).emojiPreferences;
    }

    public MessagesController(int i) {
        super(i);
        int i2 = 2;
        this.currentAccount = i;
        ImageLoader.getInstance();
        getMessagesStorage();
        getLocationController();
        AndroidUtilities.runOnUIThread(new Runnable() {
            public final void run() {
                MessagesController.this.lambda$new$4$MessagesController();
            }
        });
        addSupportUser();
        if (this.currentAccount == 0) {
            this.notificationsPreferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", 0);
            this.mainPreferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", 0);
            this.emojiPreferences = ApplicationLoader.applicationContext.getSharedPreferences("emoji", 0);
        } else {
            Context context = ApplicationLoader.applicationContext;
            this.notificationsPreferences = context.getSharedPreferences("Notifications" + this.currentAccount, 0);
            Context context2 = ApplicationLoader.applicationContext;
            this.mainPreferences = context2.getSharedPreferences("mainconfig" + this.currentAccount, 0);
            Context context3 = ApplicationLoader.applicationContext;
            this.emojiPreferences = context3.getSharedPreferences("emoji" + this.currentAccount, 0);
        }
        this.enableJoined = this.notificationsPreferences.getBoolean("EnableContactJoined", true);
        this.secretWebpagePreview = this.mainPreferences.getInt("secretWebpage2", 2);
        this.maxGroupCount = this.mainPreferences.getInt("maxGroupCount", 200);
        this.maxMegagroupCount = this.mainPreferences.getInt("maxMegagroupCount", 10000);
        this.maxRecentGifsCount = this.mainPreferences.getInt("maxRecentGifsCount", 200);
        this.maxRecentStickersCount = this.mainPreferences.getInt("maxRecentStickersCount", 30);
        this.maxFaveStickersCount = this.mainPreferences.getInt("maxFaveStickersCount", 5);
        this.maxEditTime = this.mainPreferences.getInt("maxEditTime", 3600);
        this.ratingDecay = this.mainPreferences.getInt("ratingDecay", 2419200);
        this.linkPrefix = this.mainPreferences.getString("linkPrefix", "t.me");
        this.callReceiveTimeout = this.mainPreferences.getInt("callReceiveTimeout", 20000);
        this.callRingTimeout = this.mainPreferences.getInt("callRingTimeout", 90000);
        this.callConnectTimeout = this.mainPreferences.getInt("callConnectTimeout", 30000);
        this.callPacketTimeout = this.mainPreferences.getInt("callPacketTimeout", 10000);
        this.maxPinnedDialogsCount = this.mainPreferences.getInt("maxPinnedDialogsCount", 5);
        this.maxFolderPinnedDialogsCount = this.mainPreferences.getInt("maxFolderPinnedDialogsCount", 100);
        this.maxMessageLength = this.mainPreferences.getInt("maxMessageLength", 4096);
        this.maxCaptionLength = this.mainPreferences.getInt("maxCaptionLength", 1024);
        this.mapProvider = this.mainPreferences.getInt("mapProvider", 0);
        this.availableMapProviders = this.mainPreferences.getInt("availableMapProviders", 3);
        this.mapKey = this.mainPreferences.getString("pk", (String) null);
        this.installReferer = this.mainPreferences.getString("installReferer", (String) null);
        this.revokeTimeLimit = this.mainPreferences.getInt("revokeTimeLimit", this.revokeTimeLimit);
        this.revokeTimePmLimit = this.mainPreferences.getInt("revokeTimePmLimit", this.revokeTimePmLimit);
        this.canRevokePmInbox = this.mainPreferences.getBoolean("canRevokePmInbox", this.canRevokePmInbox);
        this.preloadFeaturedStickers = this.mainPreferences.getBoolean("preloadFeaturedStickers", false);
        this.youtubePipType = this.mainPreferences.getString("youtubePipType", "disabled");
        this.keepAliveService = this.mainPreferences.getBoolean("keepAliveService", false);
        this.backgroundConnection = this.mainPreferences.getBoolean("keepAliveService", false);
        this.proxyDialogId = this.mainPreferences.getLong("proxy_dialog", 0);
        this.proxyDialogAddress = this.mainPreferences.getString("proxyDialogAddress", (String) null);
        this.nextTosCheckTime = this.notificationsPreferences.getInt("nextTosCheckTime", 0);
        this.venueSearchBot = this.mainPreferences.getString("venueSearchBot", "foursquare");
        this.gifSearchBot = this.mainPreferences.getString("gifSearchBot", "gif");
        this.imageSearchBot = this.mainPreferences.getString("imageSearchBot", "pic");
        this.blockedCountry = this.mainPreferences.getBoolean("blockedCountry", false);
        this.dcDomainName = this.mainPreferences.getString("dcDomainName2", ConnectionsManager.native_isTestBackend(this.currentAccount) != 0 ? "tapv3.stel.com" : "apv3.stel.com");
        this.webFileDatacenterId = this.mainPreferences.getInt("webFileDatacenterId", ConnectionsManager.native_isTestBackend(this.currentAccount) == 0 ? 4 : i2);
        this.suggestedLangCode = this.mainPreferences.getString("suggestedLangCode", "en");
        this.animatedEmojisZoom = this.mainPreferences.getFloat("animatedEmojisZoom", 0.625f);
        this.qrLoginCamera = this.mainPreferences.getBoolean("qrLoginCamera", false);
        this.filtersEnabled = this.mainPreferences.getBoolean("filtersEnabled", false);
    }

    public /* synthetic */ void lambda$new$4$MessagesController() {
        MessagesController messagesController = getMessagesController();
        getNotificationCenter().addObserver(messagesController, NotificationCenter.FileDidUpload);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.FileDidFailUpload);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.fileDidLoad);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.fileDidFailToLoad);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.messageReceivedByServer);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.updateMessageMedia);
    }

    private void sendLoadPeersRequest(TLObject tLObject, ArrayList<TLObject> arrayList, TLRPC$messages_Dialogs tLRPC$messages_Dialogs, TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, ArrayList<TLRPC$User> arrayList2, ArrayList<TLRPC$Chat> arrayList3, ArrayList<DialogFilter> arrayList4, SparseArray<DialogFilter> sparseArray, ArrayList<Integer> arrayList5, HashMap<Integer, HashSet<Integer>> hashMap, HashMap<Integer, HashSet<Integer>> hashMap2, HashSet<Integer> hashSet) {
        getConnectionsManager().sendRequest(tLObject, new RequestDelegate(arrayList3, arrayList2, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, tLObject, arrayList4, sparseArray, arrayList5, hashMap, hashMap2, hashSet) {
            private final /* synthetic */ ArrayList f$1;
            private final /* synthetic */ HashMap f$10;
            private final /* synthetic */ HashMap f$11;
            private final /* synthetic */ HashSet f$12;
            private final /* synthetic */ ArrayList f$2;
            private final /* synthetic */ TLRPC$messages_Dialogs f$3;
            private final /* synthetic */ TLRPC$messages_Dialogs f$4;
            private final /* synthetic */ ArrayList f$5;
            private final /* synthetic */ TLObject f$6;
            private final /* synthetic */ ArrayList f$7;
            private final /* synthetic */ SparseArray f$8;
            private final /* synthetic */ ArrayList f$9;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
                this.f$7 = r8;
                this.f$8 = r9;
                this.f$9 = r10;
                this.f$10 = r11;
                this.f$11 = r12;
                this.f$12 = r13;
            }

            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$sendLoadPeersRequest$5$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7, this.f$8, this.f$9, this.f$10, this.f$11, this.f$12, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$sendLoadPeersRequest$5$MessagesController(ArrayList arrayList, ArrayList arrayList2, TLRPC$messages_Dialogs tLRPC$messages_Dialogs, TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, ArrayList arrayList3, TLObject tLObject, ArrayList arrayList4, SparseArray sparseArray, ArrayList arrayList5, HashMap hashMap, HashMap hashMap2, HashSet hashSet, TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error) {
        ArrayList arrayList6 = arrayList;
        ArrayList arrayList7 = arrayList2;
        TLRPC$messages_Dialogs tLRPC$messages_Dialogs3 = tLRPC$messages_Dialogs;
        TLRPC$messages_Dialogs tLRPC$messages_Dialogs4 = tLRPC$messages_Dialogs2;
        TLObject tLObject3 = tLObject2;
        if (tLObject3 instanceof TLRPC$TL_messages_chats) {
            arrayList.addAll(((TLRPC$TL_messages_chats) tLObject3).chats);
        } else if (tLObject3 instanceof TLRPC$Vector) {
            TLRPC$Vector tLRPC$Vector = (TLRPC$Vector) tLObject3;
            int size = tLRPC$Vector.objects.size();
            for (int i = 0; i < size; i++) {
                arrayList2.add((TLRPC$User) tLRPC$Vector.objects.get(i));
            }
        } else if (tLObject3 instanceof TLRPC$TL_messages_peerDialogs) {
            TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject3;
            tLRPC$messages_Dialogs3.dialogs.addAll(tLRPC$TL_messages_peerDialogs.dialogs);
            tLRPC$messages_Dialogs3.messages.addAll(tLRPC$TL_messages_peerDialogs.messages);
            tLRPC$messages_Dialogs4.dialogs.addAll(tLRPC$TL_messages_peerDialogs.dialogs);
            tLRPC$messages_Dialogs4.messages.addAll(tLRPC$TL_messages_peerDialogs.messages);
            arrayList2.addAll(tLRPC$TL_messages_peerDialogs.users);
            arrayList.addAll(tLRPC$TL_messages_peerDialogs.chats);
        }
        arrayList3.remove(tLObject);
        if (arrayList3.isEmpty()) {
            getMessagesStorage().processLoadedFilterPeers(tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList2, arrayList, arrayList4, sparseArray, arrayList5, hashMap, hashMap2, hashSet);
        }
    }

    /* access modifiers changed from: protected */
    public void loadFilterPeers(HashMap<Integer, TLRPC$InputPeer> hashMap, HashMap<Integer, TLRPC$InputPeer> hashMap2, HashMap<Integer, TLRPC$InputPeer> hashMap3, TLRPC$messages_Dialogs tLRPC$messages_Dialogs, TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, ArrayList<TLRPC$User> arrayList, ArrayList<TLRPC$Chat> arrayList2, ArrayList<DialogFilter> arrayList3, SparseArray<DialogFilter> sparseArray, ArrayList<Integer> arrayList4, HashMap<Integer, HashSet<Integer>> hashMap4, HashMap<Integer, HashSet<Integer>> hashMap5, HashSet<Integer> hashSet) {
        DispatchQueue dispatchQueue = Utilities.stageQueue;
        $$Lambda$MessagesController$dad5lG8cvBwFPX3eMxL5zfQz3A r0 = r1;
        $$Lambda$MessagesController$dad5lG8cvBwFPX3eMxL5zfQz3A r1 = new Runnable(hashMap2, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap4, hashMap5, hashSet, hashMap3, hashMap) {
            private final /* synthetic */ HashMap f$1;
            private final /* synthetic */ HashMap f$10;
            private final /* synthetic */ HashSet f$11;
            private final /* synthetic */ HashMap f$12;
            private final /* synthetic */ HashMap f$13;
            private final /* synthetic */ TLRPC$messages_Dialogs f$2;
            private final /* synthetic */ TLRPC$messages_Dialogs f$3;
            private final /* synthetic */ ArrayList f$4;
            private final /* synthetic */ ArrayList f$5;
            private final /* synthetic */ ArrayList f$6;
            private final /* synthetic */ SparseArray f$7;
            private final /* synthetic */ ArrayList f$8;
            private final /* synthetic */ HashMap f$9;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
                this.f$7 = r8;
                this.f$8 = r9;
                this.f$9 = r10;
                this.f$10 = r11;
                this.f$11 = r12;
                this.f$12 = r13;
                this.f$13 = r14;
            }

            public final void run() {
                MessagesController.this.lambda$loadFilterPeers$6$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7, this.f$8, this.f$9, this.f$10, this.f$11, this.f$12, this.f$13);
            }
        };
        dispatchQueue.postRunnable(r0);
    }

    public /* synthetic */ void lambda$loadFilterPeers$6$MessagesController(HashMap hashMap, TLRPC$messages_Dialogs tLRPC$messages_Dialogs, TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, ArrayList arrayList, ArrayList arrayList2, ArrayList arrayList3, SparseArray sparseArray, ArrayList arrayList4, HashMap hashMap2, HashMap hashMap3, HashSet hashSet, HashMap hashMap4, HashMap hashMap5) {
        TLRPC$TL_users_getUsers tLRPC$TL_users_getUsers;
        int i;
        TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs;
        TLRPC$TL_channels_getChannels tLRPC$TL_channels_getChannels;
        TLRPC$TL_messages_getChats tLRPC$TL_messages_getChats;
        ArrayList arrayList5 = new ArrayList();
        loop0:
        while (true) {
            tLRPC$TL_users_getUsers = null;
            for (Map.Entry entry : hashMap.entrySet()) {
                if (tLRPC$TL_users_getUsers == null) {
                    tLRPC$TL_users_getUsers = new TLRPC$TL_users_getUsers();
                    arrayList5.add(tLRPC$TL_users_getUsers);
                }
                tLRPC$TL_users_getUsers.id.add(getInputUser((TLRPC$InputPeer) entry.getValue()));
                if (tLRPC$TL_users_getUsers.id.size() == 100) {
                    sendLoadPeersRequest(tLRPC$TL_users_getUsers, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashMap3, hashSet);
                }
            }
            break loop0;
        }
        if (tLRPC$TL_users_getUsers != null) {
            i = 100;
            sendLoadPeersRequest(tLRPC$TL_users_getUsers, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashMap3, hashSet);
        } else {
            i = 100;
        }
        TLRPC$TL_messages_getChats tLRPC$TL_messages_getChats2 = null;
        TLRPC$TL_channels_getChannels tLRPC$TL_channels_getChannels2 = null;
        for (Map.Entry entry2 : hashMap4.entrySet()) {
            TLRPC$InputPeer tLRPC$InputPeer = (TLRPC$InputPeer) entry2.getValue();
            if (tLRPC$InputPeer.chat_id != 0) {
                if (tLRPC$TL_messages_getChats2 == null) {
                    tLRPC$TL_messages_getChats = new TLRPC$TL_messages_getChats();
                    arrayList5.add(tLRPC$TL_messages_getChats);
                } else {
                    tLRPC$TL_messages_getChats = tLRPC$TL_messages_getChats2;
                }
                tLRPC$TL_messages_getChats.id.add(entry2.getKey());
                if (tLRPC$TL_messages_getChats.id.size() == i) {
                    sendLoadPeersRequest(tLRPC$TL_messages_getChats, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashMap3, hashSet);
                    tLRPC$TL_messages_getChats2 = null;
                } else {
                    tLRPC$TL_messages_getChats2 = tLRPC$TL_messages_getChats;
                }
            } else if (tLRPC$InputPeer.channel_id != 0) {
                if (tLRPC$TL_channels_getChannels2 == null) {
                    TLRPC$TL_channels_getChannels tLRPC$TL_channels_getChannels3 = new TLRPC$TL_channels_getChannels();
                    arrayList5.add(tLRPC$TL_channels_getChannels3);
                    tLRPC$TL_channels_getChannels = tLRPC$TL_channels_getChannels3;
                } else {
                    tLRPC$TL_channels_getChannels = tLRPC$TL_channels_getChannels2;
                }
                tLRPC$TL_channels_getChannels.id.add(getInputChannel(tLRPC$InputPeer));
                if (tLRPC$TL_channels_getChannels.id.size() == i) {
                    sendLoadPeersRequest(tLRPC$TL_channels_getChannels, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashMap3, hashSet);
                    tLRPC$TL_channels_getChannels2 = null;
                } else {
                    tLRPC$TL_channels_getChannels2 = tLRPC$TL_channels_getChannels;
                }
            }
        }
        if (tLRPC$TL_messages_getChats2 != null) {
            sendLoadPeersRequest(tLRPC$TL_messages_getChats2, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashMap3, hashSet);
        }
        if (tLRPC$TL_channels_getChannels2 != null) {
            sendLoadPeersRequest(tLRPC$TL_channels_getChannels2, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashMap3, hashSet);
        }
        loop3:
        while (true) {
            tLRPC$TL_messages_getPeerDialogs = null;
            for (Map.Entry entry3 : hashMap5.entrySet()) {
                if (tLRPC$TL_messages_getPeerDialogs == null) {
                    tLRPC$TL_messages_getPeerDialogs = new TLRPC$TL_messages_getPeerDialogs();
                    arrayList5.add(tLRPC$TL_messages_getPeerDialogs);
                }
                TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
                tLRPC$TL_inputDialogPeer.peer = (TLRPC$InputPeer) entry3.getValue();
                tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer);
                if (tLRPC$TL_messages_getPeerDialogs.peers.size() == i) {
                    sendLoadPeersRequest(tLRPC$TL_messages_getPeerDialogs, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashMap3, hashSet);
                }
            }
            break loop3;
        }
        if (tLRPC$TL_messages_getPeerDialogs != null) {
            sendLoadPeersRequest(tLRPC$TL_messages_getPeerDialogs, arrayList5, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap2, hashMap3, hashSet);
        }
    }

    /* access modifiers changed from: protected */
    public void processLoadedDialogFilters(ArrayList<DialogFilter> arrayList, TLRPC$messages_Dialogs tLRPC$messages_Dialogs, TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, ArrayList<TLRPC$User> arrayList2, ArrayList<TLRPC$Chat> arrayList3, ArrayList<TLRPC$EncryptedChat> arrayList4, int i) {
        Utilities.stageQueue.postRunnable(new Runnable(tLRPC$messages_Dialogs, arrayList4, tLRPC$messages_Dialogs2, i, arrayList, arrayList2, arrayList3) {
            private final /* synthetic */ TLRPC$messages_Dialogs f$1;
            private final /* synthetic */ ArrayList f$2;
            private final /* synthetic */ TLRPC$messages_Dialogs f$3;
            private final /* synthetic */ int f$4;
            private final /* synthetic */ ArrayList f$5;
            private final /* synthetic */ ArrayList f$6;
            private final /* synthetic */ ArrayList f$7;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
                this.f$7 = r8;
            }

            public final void run() {
                MessagesController.this.lambda$processLoadedDialogFilters$9$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7);
            }
        });
    }

    /* JADX WARNING: Code restructure failed: missing block: B:25:0x00a2, code lost:
        if (r6 == ((long) (-r3.id))) goto L_0x00a6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:36:0x00c2, code lost:
        if (r3.migrated_to != null) goto L_0x00a4;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$processLoadedDialogFilters$9$MessagesController(org.telegram.tgnet.TLRPC$messages_Dialogs r18, java.util.ArrayList r19, org.telegram.tgnet.TLRPC$messages_Dialogs r20, int r21, java.util.ArrayList r22, java.util.ArrayList r23, java.util.ArrayList r24) {
        /*
            r17 = this;
            r10 = r17
            r0 = r18
            r7 = r19
            r6 = r20
            android.util.LongSparseArray r8 = new android.util.LongSparseArray
            r8.<init>()
            android.util.LongSparseArray r9 = new android.util.LongSparseArray
            r9.<init>()
            android.util.SparseArray r1 = new android.util.SparseArray
            r1.<init>()
            android.util.SparseArray r2 = new android.util.SparseArray
            r2.<init>()
            r3 = 0
            java.lang.Integer r4 = java.lang.Integer.valueOf(r3)
            r5 = 0
        L_0x0022:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r11 = r0.users
            int r11 = r11.size()
            if (r5 >= r11) goto L_0x003a
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r11 = r0.users
            java.lang.Object r11 = r11.get(r5)
            org.telegram.tgnet.TLRPC$User r11 = (org.telegram.tgnet.TLRPC$User) r11
            int r12 = r11.id
            r1.put(r12, r11)
            int r5 = r5 + 1
            goto L_0x0022
        L_0x003a:
            r5 = 0
        L_0x003b:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r11 = r0.chats
            int r11 = r11.size()
            if (r5 >= r11) goto L_0x0053
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r11 = r0.chats
            java.lang.Object r11 = r11.get(r5)
            org.telegram.tgnet.TLRPC$Chat r11 = (org.telegram.tgnet.TLRPC$Chat) r11
            int r12 = r11.id
            r2.put(r12, r11)
            int r5 = r5 + 1
            goto L_0x003b
        L_0x0053:
            if (r7 == 0) goto L_0x006f
            android.util.SparseArray r5 = new android.util.SparseArray
            r5.<init>()
            int r11 = r19.size()
            r12 = 0
        L_0x005f:
            if (r12 >= r11) goto L_0x0070
            java.lang.Object r13 = r7.get(r12)
            org.telegram.tgnet.TLRPC$EncryptedChat r13 = (org.telegram.tgnet.TLRPC$EncryptedChat) r13
            int r14 = r13.id
            r5.put(r14, r13)
            int r12 = r12 + 1
            goto L_0x005f
        L_0x006f:
            r5 = 0
        L_0x0070:
            r15 = 0
        L_0x0071:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r11 = r0.messages
            int r11 = r11.size()
            r12 = 0
            if (r15 >= r11) goto L_0x00e2
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r11 = r0.messages
            java.lang.Object r11 = r11.get(r15)
            r14 = r11
            org.telegram.tgnet.TLRPC$Message r14 = (org.telegram.tgnet.TLRPC$Message) r14
            org.telegram.tgnet.TLRPC$Peer r11 = r14.to_id
            int r3 = r11.channel_id
            if (r3 == 0) goto L_0x00b4
            java.lang.Object r3 = r2.get(r3)
            org.telegram.tgnet.TLRPC$Chat r3 = (org.telegram.tgnet.TLRPC$Chat) r3
            if (r3 == 0) goto L_0x00a6
            boolean r11 = r3.left
            if (r11 == 0) goto L_0x00a6
            long r6 = r10.proxyDialogId
            int r11 = (r6 > r12 ? 1 : (r6 == r12 ? 0 : -1))
            if (r11 == 0) goto L_0x00a4
            int r11 = r3.id
            int r11 = -r11
            long r11 = (long) r11
            int r13 = (r6 > r11 ? 1 : (r6 == r11 ? 0 : -1))
            if (r13 == 0) goto L_0x00a6
        L_0x00a4:
            r6 = r15
            goto L_0x00da
        L_0x00a6:
            if (r3 == 0) goto L_0x00c5
            boolean r3 = r3.megagroup
            if (r3 == 0) goto L_0x00c5
            int r3 = r14.flags
            r6 = -2147483648(0xfffffffvar_, float:-0.0)
            r3 = r3 | r6
            r14.flags = r3
            goto L_0x00c5
        L_0x00b4:
            int r3 = r11.chat_id
            if (r3 == 0) goto L_0x00c5
            java.lang.Object r3 = r2.get(r3)
            org.telegram.tgnet.TLRPC$Chat r3 = (org.telegram.tgnet.TLRPC$Chat) r3
            if (r3 == 0) goto L_0x00c5
            org.telegram.tgnet.TLRPC$InputChannel r3 = r3.migrated_to
            if (r3 == 0) goto L_0x00c5
            goto L_0x00a4
        L_0x00c5:
            org.telegram.messenger.MessageObject r3 = new org.telegram.messenger.MessageObject
            int r12 = r10.currentAccount
            r16 = 0
            r11 = r3
            r13 = r14
            r14 = r1
            r6 = r15
            r15 = r2
            r11.<init>((int) r12, (org.telegram.tgnet.TLRPC$Message) r13, (android.util.SparseArray<org.telegram.tgnet.TLRPC$User>) r14, (android.util.SparseArray<org.telegram.tgnet.TLRPC$Chat>) r15, (boolean) r16)
            long r11 = r3.getDialogId()
            r9.put(r11, r3)
        L_0x00da:
            int r15 = r6 + 1
            r7 = r19
            r6 = r20
            r3 = 0
            goto L_0x0071
        L_0x00e2:
            r3 = 0
        L_0x00e3:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r6 = r0.dialogs
            int r6 = r6.size()
            if (r3 >= r6) goto L_0x01d6
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r6 = r0.dialogs
            java.lang.Object r6 = r6.get(r3)
            org.telegram.tgnet.TLRPC$Dialog r6 = (org.telegram.tgnet.TLRPC$Dialog) r6
            org.telegram.messenger.DialogObject.initDialog(r6)
            long r14 = r6.id
            int r7 = (r14 > r12 ? 1 : (r14 == r12 ? 0 : -1))
            if (r7 != 0) goto L_0x00fe
            goto L_0x01d0
        L_0x00fe:
            int r7 = (int) r14
            r11 = 32
            long r14 = r14 >> r11
            int r11 = (int) r14
            if (r7 != 0) goto L_0x010f
            if (r5 == 0) goto L_0x010f
            java.lang.Object r7 = r5.get(r11)
            if (r7 != 0) goto L_0x010f
            goto L_0x01d0
        L_0x010f:
            long r14 = r10.proxyDialogId
            int r7 = (r14 > r12 ? 1 : (r14 == r12 ? 0 : -1))
            if (r7 == 0) goto L_0x011d
            long r12 = r6.id
            int r7 = (r14 > r12 ? 1 : (r14 == r12 ? 0 : -1))
            if (r7 != 0) goto L_0x011d
            r10.proxyDialog = r6
        L_0x011d:
            int r7 = r6.last_message_date
            if (r7 != 0) goto L_0x0131
            long r11 = r6.id
            java.lang.Object r7 = r9.get(r11)
            org.telegram.messenger.MessageObject r7 = (org.telegram.messenger.MessageObject) r7
            if (r7 == 0) goto L_0x0131
            org.telegram.tgnet.TLRPC$Message r7 = r7.messageOwner
            int r7 = r7.date
            r6.last_message_date = r7
        L_0x0131:
            boolean r7 = org.telegram.messenger.DialogObject.isChannel(r6)
            if (r7 == 0) goto L_0x0163
            long r11 = r6.id
            int r7 = (int) r11
            int r7 = -r7
            java.lang.Object r7 = r2.get(r7)
            org.telegram.tgnet.TLRPC$Chat r7 = (org.telegram.tgnet.TLRPC$Chat) r7
            if (r7 == 0) goto L_0x0157
            boolean r7 = r7.left
            if (r7 == 0) goto L_0x0157
            long r11 = r10.proxyDialogId
            r13 = 0
            int r7 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1))
            if (r7 == 0) goto L_0x01d0
            long r13 = r6.id
            int r7 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1))
            if (r7 == 0) goto L_0x0157
            goto L_0x01d0
        L_0x0157:
            android.util.SparseIntArray r7 = r10.channelsPts
            long r11 = r6.id
            int r12 = (int) r11
            int r11 = -r12
            int r12 = r6.pts
            r7.put(r11, r12)
            goto L_0x0177
        L_0x0163:
            long r11 = r6.id
            int r7 = (int) r11
            if (r7 >= 0) goto L_0x0177
            int r7 = (int) r11
            int r7 = -r7
            java.lang.Object r7 = r2.get(r7)
            org.telegram.tgnet.TLRPC$Chat r7 = (org.telegram.tgnet.TLRPC$Chat) r7
            if (r7 == 0) goto L_0x0177
            org.telegram.tgnet.TLRPC$InputChannel r7 = r7.migrated_to
            if (r7 == 0) goto L_0x0177
            goto L_0x01d0
        L_0x0177:
            long r11 = r6.id
            r8.put(r11, r6)
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r7 = r10.dialogs_read_inbox_max
            long r11 = r6.id
            java.lang.Long r11 = java.lang.Long.valueOf(r11)
            java.lang.Object r7 = r7.get(r11)
            java.lang.Integer r7 = (java.lang.Integer) r7
            if (r7 != 0) goto L_0x018d
            r7 = r4
        L_0x018d:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r11 = r10.dialogs_read_inbox_max
            long r12 = r6.id
            java.lang.Long r12 = java.lang.Long.valueOf(r12)
            int r7 = r7.intValue()
            int r13 = r6.read_inbox_max_id
            int r7 = java.lang.Math.max(r7, r13)
            java.lang.Integer r7 = java.lang.Integer.valueOf(r7)
            r11.put(r12, r7)
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r7 = r10.dialogs_read_outbox_max
            long r11 = r6.id
            java.lang.Long r11 = java.lang.Long.valueOf(r11)
            java.lang.Object r7 = r7.get(r11)
            java.lang.Integer r7 = (java.lang.Integer) r7
            if (r7 != 0) goto L_0x01b7
            r7 = r4
        L_0x01b7:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r11 = r10.dialogs_read_outbox_max
            long r12 = r6.id
            java.lang.Long r12 = java.lang.Long.valueOf(r12)
            int r7 = r7.intValue()
            int r6 = r6.read_outbox_max_id
            int r6 = java.lang.Math.max(r7, r6)
            java.lang.Integer r6 = java.lang.Integer.valueOf(r6)
            r11.put(r12, r6)
        L_0x01d0:
            int r3 = r3 + 1
            r12 = 0
            goto L_0x00e3
        L_0x01d6:
            r6 = r20
            if (r6 == 0) goto L_0x0274
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r0 = r6.dialogs
            boolean r0 = r0.isEmpty()
            if (r0 != 0) goto L_0x0274
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r0 = r6.messages
            org.telegram.messenger.ImageLoader.saveMessagesThumbs(r0)
            r0 = 0
        L_0x01e8:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r2 = r6.messages
            int r2 = r2.size()
            if (r0 >= r2) goto L_0x026c
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r2 = r6.messages
            java.lang.Object r2 = r2.get(r0)
            org.telegram.tgnet.TLRPC$Message r2 = (org.telegram.tgnet.TLRPC$Message) r2
            org.telegram.tgnet.TLRPC$MessageAction r3 = r2.action
            boolean r4 = r3 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatDeleteUser
            if (r4 == 0) goto L_0x0219
            int r3 = r3.user_id
            java.lang.Object r3 = r1.get(r3)
            org.telegram.tgnet.TLRPC$User r3 = (org.telegram.tgnet.TLRPC$User) r3
            if (r3 == 0) goto L_0x0219
            boolean r3 = r3.bot
            if (r3 == 0) goto L_0x0219
            org.telegram.tgnet.TLRPC$TL_replyKeyboardHide r3 = new org.telegram.tgnet.TLRPC$TL_replyKeyboardHide
            r3.<init>()
            r2.reply_markup = r3
            int r3 = r2.flags
            r3 = r3 | 64
            r2.flags = r3
        L_0x0219:
            org.telegram.tgnet.TLRPC$MessageAction r3 = r2.action
            boolean r4 = r3 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatMigrateTo
            if (r4 != 0) goto L_0x0263
            boolean r3 = r3 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChannelCreate
            if (r3 == 0) goto L_0x0224
            goto L_0x0263
        L_0x0224:
            boolean r3 = r2.out
            if (r3 == 0) goto L_0x022b
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r3 = r10.dialogs_read_outbox_max
            goto L_0x022d
        L_0x022b:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r3 = r10.dialogs_read_inbox_max
        L_0x022d:
            long r4 = r2.dialog_id
            java.lang.Long r4 = java.lang.Long.valueOf(r4)
            java.lang.Object r4 = r3.get(r4)
            java.lang.Integer r4 = (java.lang.Integer) r4
            if (r4 != 0) goto L_0x0254
            org.telegram.messenger.MessagesStorage r4 = r17.getMessagesStorage()
            boolean r5 = r2.out
            long r11 = r2.dialog_id
            int r4 = r4.getDialogReadMax(r5, r11)
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)
            long r11 = r2.dialog_id
            java.lang.Long r5 = java.lang.Long.valueOf(r11)
            r3.put(r5, r4)
        L_0x0254:
            int r3 = r4.intValue()
            int r4 = r2.id
            if (r3 >= r4) goto L_0x025e
            r3 = 1
            goto L_0x025f
        L_0x025e:
            r3 = 0
        L_0x025f:
            r2.unread = r3
            r3 = 0
            goto L_0x0268
        L_0x0263:
            r3 = 0
            r2.unread = r3
            r2.media_unread = r3
        L_0x0268:
            int r0 = r0 + 1
            goto L_0x01e8
        L_0x026c:
            r3 = 0
            org.telegram.messenger.MessagesStorage r0 = r17.getMessagesStorage()
            r0.putDialogs(r6, r3)
        L_0x0274:
            org.telegram.messenger.-$$Lambda$MessagesController$_EM7t5rNv1xwq8pm2z8NPRnM6kA r11 = new org.telegram.messenger.-$$Lambda$MessagesController$_EM7t5rNv1xwq8pm2z8NPRnM6kA
            r0 = r11
            r1 = r17
            r2 = r21
            r3 = r22
            r4 = r23
            r5 = r24
            r6 = r20
            r7 = r19
            r0.<init>(r2, r3, r4, r5, r6, r7, r8, r9)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r11)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$processLoadedDialogFilters$9$MessagesController(org.telegram.tgnet.TLRPC$messages_Dialogs, java.util.ArrayList, org.telegram.tgnet.TLRPC$messages_Dialogs, int, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList):void");
    }

    public /* synthetic */ void lambda$null$8$MessagesController(int i, ArrayList arrayList, ArrayList arrayList2, ArrayList arrayList3, TLRPC$messages_Dialogs tLRPC$messages_Dialogs, ArrayList arrayList4, LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        int i2 = i;
        TLRPC$messages_Dialogs tLRPC$messages_Dialogs2 = tLRPC$messages_Dialogs;
        ArrayList arrayList5 = arrayList4;
        LongSparseArray longSparseArray3 = longSparseArray;
        LongSparseArray longSparseArray4 = longSparseArray2;
        if (i2 != 2) {
            this.dialogFilters = arrayList;
        }
        if (i2 != 0) {
            getUserConfig().filtersLoaded = true;
            getUserConfig().saveConfig(false);
            this.loadingRemoteFilters = false;
            getNotificationCenter().postNotificationName(NotificationCenter.filterSettingsUpdated, new Object[0]);
            if (i2 == 2) {
                return;
            }
        }
        this.dialogFiltersById.clear();
        int size = this.dialogFilters.size();
        for (int i3 = 0; i3 < size; i3++) {
            DialogFilter dialogFilter = this.dialogFilters.get(i3);
            this.dialogFiltersById.put(dialogFilter.id, dialogFilter);
        }
        Collections.sort(this.dialogFilters, $$Lambda$MessagesController$1E07KbvZzMnmeQ7te_ONDoVxl4.INSTANCE);
        putUsers(arrayList2, true);
        putChats(arrayList3, true);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogFiltersUpdated, new Object[0]);
        if (i2 == 0) {
            loadRemoteFilters(false);
        }
        if (tLRPC$messages_Dialogs2 != null && !tLRPC$messages_Dialogs2.dialogs.isEmpty()) {
            applyDialogsNotificationsSettings(tLRPC$messages_Dialogs2.dialogs);
        }
        if (arrayList5 != null) {
            for (int i4 = 0; i4 < arrayList4.size(); i4++) {
                TLRPC$EncryptedChat tLRPC$EncryptedChat = (TLRPC$EncryptedChat) arrayList5.get(i4);
                if ((tLRPC$EncryptedChat instanceof TLRPC$TL_encryptedChat) && AndroidUtilities.getMyLayerVersion(tLRPC$EncryptedChat.layer) < 101) {
                    getSecretChatHelper().sendNotifyLayerMessage(tLRPC$EncryptedChat, (TLRPC$Message) null);
                }
                putEncryptedChat(tLRPC$EncryptedChat, true);
            }
        }
        for (int i5 = 0; i5 < longSparseArray.size(); i5++) {
            long keyAt = longSparseArray3.keyAt(i5);
            TLRPC$Dialog tLRPC$Dialog = (TLRPC$Dialog) longSparseArray3.valueAt(i5);
            TLRPC$Dialog tLRPC$Dialog2 = this.dialogs_dict.get(keyAt);
            if (tLRPC$messages_Dialogs2 != null && tLRPC$messages_Dialogs2.dialogs.contains(tLRPC$Dialog)) {
                if (tLRPC$Dialog.draft instanceof TLRPC$TL_draftMessage) {
                    getMediaDataController().saveDraft(tLRPC$Dialog.id, tLRPC$Dialog.draft, (TLRPC$Message) null, false);
                }
                if (tLRPC$Dialog2 != null) {
                    tLRPC$Dialog2.notify_settings = tLRPC$Dialog.notify_settings;
                }
            }
            if (tLRPC$Dialog2 == null) {
                this.dialogs_dict.put(keyAt, tLRPC$Dialog);
                MessageObject messageObject = (MessageObject) longSparseArray4.get(tLRPC$Dialog.id);
                this.dialogMessage.put(keyAt, messageObject);
                if (messageObject != null && messageObject.messageOwner.to_id.channel_id == 0) {
                    this.dialogMessagesByIds.put(messageObject.getId(), messageObject);
                    long j = messageObject.messageOwner.random_id;
                    if (j != 0) {
                        this.dialogMessagesByRandomIds.put(j, messageObject);
                    }
                }
            } else {
                tLRPC$Dialog2.pinned = tLRPC$Dialog.pinned;
                tLRPC$Dialog2.pinnedNum = tLRPC$Dialog.pinnedNum;
                MessageObject messageObject2 = this.dialogMessage.get(keyAt);
                if ((messageObject2 == null || !messageObject2.deleted) && messageObject2 != null && tLRPC$Dialog2.top_message <= 0) {
                    MessageObject messageObject3 = (MessageObject) longSparseArray4.get(tLRPC$Dialog.id);
                    if (messageObject2.deleted || messageObject3 == null || messageObject3.messageOwner.date > messageObject2.messageOwner.date) {
                        this.dialogs_dict.put(keyAt, tLRPC$Dialog);
                        this.dialogMessage.put(keyAt, messageObject3);
                        if (messageObject3 != null && messageObject3.messageOwner.to_id.channel_id == 0) {
                            this.dialogMessagesByIds.put(messageObject3.getId(), messageObject3);
                            if (messageObject3 != null) {
                                long j2 = messageObject3.messageOwner.random_id;
                                if (j2 != 0) {
                                    this.dialogMessagesByRandomIds.put(j2, messageObject3);
                                }
                            }
                        }
                        this.dialogMessagesByIds.remove(messageObject2.getId());
                        long j3 = messageObject2.messageOwner.random_id;
                        if (j3 != 0) {
                            this.dialogMessagesByRandomIds.remove(j3);
                        }
                    }
                } else if (tLRPC$Dialog.top_message >= tLRPC$Dialog2.top_message) {
                    this.dialogs_dict.put(keyAt, tLRPC$Dialog);
                    MessageObject messageObject4 = (MessageObject) longSparseArray4.get(tLRPC$Dialog.id);
                    this.dialogMessage.put(keyAt, messageObject4);
                    if (messageObject4 != null && messageObject4.messageOwner.to_id.channel_id == 0) {
                        this.dialogMessagesByIds.put(messageObject4.getId(), messageObject4);
                        if (messageObject4 != null) {
                            long j4 = messageObject4.messageOwner.random_id;
                            if (j4 != 0) {
                                this.dialogMessagesByRandomIds.put(j4, messageObject4);
                            }
                        }
                    }
                    if (messageObject2 != null) {
                        this.dialogMessagesByIds.remove(messageObject2.getId());
                        long j5 = messageObject2.messageOwner.random_id;
                        if (j5 != 0) {
                            this.dialogMessagesByRandomIds.remove(j5);
                        }
                    }
                }
            }
        }
        this.allDialogs.clear();
        int size2 = this.dialogs_dict.size();
        for (int i6 = 0; i6 < size2; i6++) {
            this.allDialogs.add(this.dialogs_dict.valueAt(i6));
        }
        sortDialogs((SparseArray<TLRPC$Chat>) null);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    static /* synthetic */ int lambda$null$7(DialogFilter dialogFilter, DialogFilter dialogFilter2) {
        int i = dialogFilter.order;
        int i2 = dialogFilter2.order;
        if (i > i2) {
            return 1;
        }
        return i < i2 ? -1 : 0;
    }

    public void loadSuggestedFilters() {
        if (!this.loadingSuggestedFilters) {
            this.loadingSuggestedFilters = true;
            getConnectionsManager().sendRequest(new TLRPC$TL_messages_getSuggestedDialogFilters(), new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$loadSuggestedFilters$11$MessagesController(tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$loadSuggestedFilters$11$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable(tLObject) {
            private final /* synthetic */ TLObject f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$10$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$null$10$MessagesController(TLObject tLObject) {
        this.loadingSuggestedFilters = false;
        this.suggestedFilters.clear();
        if (tLObject instanceof TLRPC$Vector) {
            TLRPC$Vector tLRPC$Vector = (TLRPC$Vector) tLObject;
            int size = tLRPC$Vector.objects.size();
            for (int i = 0; i < size; i++) {
                this.suggestedFilters.add((TLRPC$TL_dialogFilterSuggested) tLRPC$Vector.objects.get(i));
            }
        }
        getNotificationCenter().postNotificationName(NotificationCenter.suggestedFiltersLoaded, new Object[0]);
    }

    public void loadRemoteFilters(boolean z) {
        if (!this.loadingRemoteFilters && getUserConfig().isClientActivated()) {
            if (z || !getUserConfig().filtersLoaded) {
                if (z) {
                    getUserConfig().filtersLoaded = false;
                    getUserConfig().saveConfig(false);
                }
                getConnectionsManager().sendRequest(new TLRPC$TL_messages_getDialogFilters(), new RequestDelegate() {
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$loadRemoteFilters$13$MessagesController(tLObject, tLRPC$TL_error);
                    }
                });
            }
        }
    }

    public /* synthetic */ void lambda$loadRemoteFilters$13$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject instanceof TLRPC$Vector) {
            getMessagesStorage().checkLoadedRemoteFilters((TLRPC$Vector) tLObject);
        } else {
            AndroidUtilities.runOnUIThread(new Runnable() {
                public final void run() {
                    MessagesController.this.lambda$null$12$MessagesController();
                }
            });
        }
    }

    public /* synthetic */ void lambda$null$12$MessagesController() {
        this.loadingRemoteFilters = false;
    }

    public void selectDialogFilter(DialogFilter dialogFilter, int i) {
        DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
        if (dialogFilterArr[i] != dialogFilter) {
            DialogFilter dialogFilter2 = dialogFilterArr[i];
            dialogFilterArr[i] = dialogFilter;
            char c = 1;
            if (dialogFilterArr[i == 0 ? (char) 1 : 0] == dialogFilter) {
                DialogFilter[] dialogFilterArr2 = this.selectedDialogFilter;
                if (i != 0) {
                    c = 0;
                }
                dialogFilterArr2[c] = null;
            }
            if (this.selectedDialogFilter[i] != null) {
                sortDialogs((SparseArray<TLRPC$Chat>) null);
            } else if (dialogFilter2 != null) {
                dialogFilter2.dialogs.clear();
            }
        }
    }

    public void onFilterUpdate(DialogFilter dialogFilter) {
        for (int i = 0; i < 2; i++) {
            if (this.selectedDialogFilter[i] == dialogFilter) {
                sortDialogs((SparseArray<TLRPC$Chat>) null);
                getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, true);
                return;
            }
        }
    }

    public void addFilter(DialogFilter dialogFilter, boolean z) {
        if (z) {
            int i = 254;
            int size = this.dialogFilters.size();
            for (int i2 = 0; i2 < size; i2++) {
                i = Math.min(i, this.dialogFilters.get(i2).order);
            }
            dialogFilter.order = i - 1;
            this.dialogFilters.add(0, dialogFilter);
        } else {
            int size2 = this.dialogFilters.size();
            int i3 = 0;
            for (int i4 = 0; i4 < size2; i4++) {
                i3 = Math.max(i3, this.dialogFilters.get(i4).order);
            }
            dialogFilter.order = i3 + 1;
            this.dialogFilters.add(dialogFilter);
        }
        this.dialogFiltersById.put(dialogFilter.id, dialogFilter);
    }

    public void removeFilter(DialogFilter dialogFilter) {
        this.dialogFilters.remove(dialogFilter);
        this.dialogFiltersById.remove(dialogFilter.id);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogFiltersUpdated, new Object[0]);
    }

    private void loadAppConfig() {
        if (!this.loadingAppConfig) {
            this.loadingAppConfig = true;
            getConnectionsManager().sendRequest(new TLRPC$TL_help_getAppConfig(), new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$loadAppConfig$15$MessagesController(tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$loadAppConfig$15$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable(tLObject) {
            private final /* synthetic */ TLObject f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$14$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$null$14$MessagesController(TLObject tLObject) {
        boolean z;
        boolean z2;
        boolean z3;
        boolean z4;
        if (tLObject instanceof TLRPC$TL_jsonObject) {
            SharedPreferences.Editor edit = this.mainPreferences.edit();
            TLRPC$TL_jsonObject tLRPC$TL_jsonObject = (TLRPC$TL_jsonObject) tLObject;
            int size = tLRPC$TL_jsonObject.value.size();
            boolean z5 = false;
            boolean z6 = false;
            for (int i = 0; i < size; i++) {
                TLRPC$TL_jsonObjectValue tLRPC$TL_jsonObjectValue = tLRPC$TL_jsonObject.value.get(i);
                if ("emojies_animated_zoom".equals(tLRPC$TL_jsonObjectValue.key)) {
                    TLRPC$JSONValue tLRPC$JSONValue = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue instanceof TLRPC$TL_jsonNumber) {
                        double d = ((TLRPC$TL_jsonNumber) tLRPC$JSONValue).value;
                        if (((double) this.animatedEmojisZoom) != d) {
                            float f = (float) d;
                            this.animatedEmojisZoom = f;
                            edit.putFloat("animatedEmojisZoom", f);
                        }
                    }
                } else if ("dialog_filters_enabled".equals(tLRPC$TL_jsonObjectValue.key)) {
                    TLRPC$JSONValue tLRPC$JSONValue2 = tLRPC$TL_jsonObjectValue.value;
                    if ((tLRPC$JSONValue2 instanceof TLRPC$TL_jsonBool) && (z4 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue2).value) != this.filtersEnabled) {
                        this.filtersEnabled = z4;
                        edit.putBoolean("filtersEnabled", z4);
                        getNotificationCenter().postNotificationName(NotificationCenter.filterSettingsUpdated, new Object[0]);
                    }
                } else if ("youtube_pip".equals(tLRPC$TL_jsonObjectValue.key)) {
                    TLRPC$JSONValue tLRPC$JSONValue3 = tLRPC$TL_jsonObjectValue.value;
                    if (tLRPC$JSONValue3 instanceof TLRPC$TL_jsonString) {
                        TLRPC$TL_jsonString tLRPC$TL_jsonString = (TLRPC$TL_jsonString) tLRPC$JSONValue3;
                        if (!tLRPC$TL_jsonString.value.equals(this.youtubePipType)) {
                            String str = tLRPC$TL_jsonString.value;
                            this.youtubePipType = str;
                            edit.putString("youtubePipType", str);
                        }
                    }
                } else {
                    if ("background_connection".equals(tLRPC$TL_jsonObjectValue.key)) {
                        TLRPC$JSONValue tLRPC$JSONValue4 = tLRPC$TL_jsonObjectValue.value;
                        if ((tLRPC$JSONValue4 instanceof TLRPC$TL_jsonBool) && (z3 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue4).value) != this.backgroundConnection) {
                            this.backgroundConnection = z3;
                            edit.putBoolean("backgroundConnection", z3);
                        }
                    } else {
                        if ("keep_alive_service".equals(tLRPC$TL_jsonObjectValue.key)) {
                            TLRPC$JSONValue tLRPC$JSONValue5 = tLRPC$TL_jsonObjectValue.value;
                            if ((tLRPC$JSONValue5 instanceof TLRPC$TL_jsonBool) && (z2 = ((TLRPC$TL_jsonBool) tLRPC$JSONValue5).value) != this.keepAliveService) {
                                this.keepAliveService = z2;
                                edit.putBoolean("keepAliveService", z2);
                            }
                        } else if ("qr_login_camera".equals(tLRPC$TL_jsonObjectValue.key)) {
                            TLRPC$JSONValue tLRPC$JSONValue6 = tLRPC$TL_jsonObjectValue.value;
                            if ((tLRPC$JSONValue6 instanceof TLRPC$TL_jsonBool) && (z = ((TLRPC$TL_jsonBool) tLRPC$JSONValue6).value) != this.qrLoginCamera) {
                                this.qrLoginCamera = z;
                                edit.putBoolean("qrLoginCamera", z);
                            }
                        }
                    }
                    z5 = true;
                    z6 = true;
                }
                z5 = true;
            }
            if (z5) {
                edit.commit();
            }
            if (z6) {
                ApplicationLoader.startPushService();
                ConnectionsManager connectionsManager = getConnectionsManager();
                connectionsManager.setPushConnectionEnabled(connectionsManager.isPushConnectionEnabled());
            }
        }
        this.loadingAppConfig = false;
    }

    public void updateConfig(TLRPC$TL_config tLRPC$TL_config) {
        AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_config) {
            private final /* synthetic */ TLRPC$TL_config f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$updateConfig$16$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$updateConfig$16$MessagesController(TLRPC$TL_config tLRPC$TL_config) {
        String str;
        getDownloadController().loadAutoDownloadConfig(false);
        loadAppConfig();
        this.maxMegagroupCount = tLRPC$TL_config.megagroup_size_max;
        this.maxGroupCount = tLRPC$TL_config.chat_size_max;
        this.maxEditTime = tLRPC$TL_config.edit_time_limit;
        this.ratingDecay = tLRPC$TL_config.rating_e_decay;
        this.maxRecentGifsCount = tLRPC$TL_config.saved_gifs_limit;
        this.maxRecentStickersCount = tLRPC$TL_config.stickers_recent_limit;
        this.maxFaveStickersCount = tLRPC$TL_config.stickers_faved_limit;
        this.revokeTimeLimit = tLRPC$TL_config.revoke_time_limit;
        this.revokeTimePmLimit = tLRPC$TL_config.revoke_pm_time_limit;
        this.canRevokePmInbox = tLRPC$TL_config.revoke_pm_inbox;
        String str2 = tLRPC$TL_config.me_url_prefix;
        this.linkPrefix = str2;
        if (str2.endsWith("/")) {
            String str3 = this.linkPrefix;
            this.linkPrefix = str3.substring(0, str3.length() - 1);
        }
        if (this.linkPrefix.startsWith("https://")) {
            this.linkPrefix = this.linkPrefix.substring(8);
        } else if (this.linkPrefix.startsWith("http://")) {
            this.linkPrefix = this.linkPrefix.substring(7);
        }
        this.callReceiveTimeout = tLRPC$TL_config.call_receive_timeout_ms;
        this.callRingTimeout = tLRPC$TL_config.call_ring_timeout_ms;
        this.callConnectTimeout = tLRPC$TL_config.call_connect_timeout_ms;
        this.callPacketTimeout = tLRPC$TL_config.call_packet_timeout_ms;
        this.maxPinnedDialogsCount = tLRPC$TL_config.pinned_dialogs_count_max;
        this.maxFolderPinnedDialogsCount = tLRPC$TL_config.pinned_infolder_count_max;
        this.maxMessageLength = tLRPC$TL_config.message_length_max;
        this.maxCaptionLength = tLRPC$TL_config.caption_length_max;
        this.preloadFeaturedStickers = tLRPC$TL_config.preload_featured_stickers;
        String str4 = tLRPC$TL_config.venue_search_username;
        if (str4 != null) {
            this.venueSearchBot = str4;
        }
        String str5 = tLRPC$TL_config.gif_search_username;
        if (str5 != null) {
            this.gifSearchBot = str5;
        }
        if (this.imageSearchBot != null) {
            this.imageSearchBot = tLRPC$TL_config.img_search_username;
        }
        this.blockedCountry = tLRPC$TL_config.blocked_mode;
        this.dcDomainName = tLRPC$TL_config.dc_txt_domain_name;
        this.webFileDatacenterId = tLRPC$TL_config.webfile_dc_id;
        String str6 = tLRPC$TL_config.suggested_lang_code;
        if (str6 != null && ((str = this.suggestedLangCode) == null || !str.equals(str6))) {
            this.suggestedLangCode = tLRPC$TL_config.suggested_lang_code;
            LocaleController.getInstance().loadRemoteLanguages(this.currentAccount);
        }
        Theme.loadRemoteThemes(this.currentAccount, false);
        Theme.checkCurrentRemoteTheme(false);
        if (tLRPC$TL_config.static_maps_provider == null) {
            tLRPC$TL_config.static_maps_provider = "telegram";
        }
        this.mapKey = null;
        this.mapProvider = 2;
        this.availableMapProviders = 0;
        FileLog.d("map providers = " + tLRPC$TL_config.static_maps_provider);
        String[] split = tLRPC$TL_config.static_maps_provider.split(",");
        for (int i = 0; i < split.length; i++) {
            String[] split2 = split[i].split("\\+");
            if (split2.length > 0) {
                String[] split3 = split2[0].split(":");
                if (split3.length > 0) {
                    if ("yandex".equals(split3[0])) {
                        if (i == 0) {
                            if (split2.length > 1) {
                                this.mapProvider = 3;
                            } else {
                                this.mapProvider = 1;
                            }
                        }
                        this.availableMapProviders |= 4;
                    } else if ("google".equals(split3[0])) {
                        if (i == 0 && split2.length > 1) {
                            this.mapProvider = 4;
                        }
                        this.availableMapProviders |= 1;
                    } else if ("telegram".equals(split3[0])) {
                        if (i == 0) {
                            this.mapProvider = 2;
                        }
                        this.availableMapProviders |= 2;
                    }
                    if (split3.length > 1) {
                        this.mapKey = split3[1];
                    }
                }
            }
        }
        SharedPreferences.Editor edit = this.mainPreferences.edit();
        edit.putInt("maxGroupCount", this.maxGroupCount);
        edit.putInt("maxMegagroupCount", this.maxMegagroupCount);
        edit.putInt("maxEditTime", this.maxEditTime);
        edit.putInt("ratingDecay", this.ratingDecay);
        edit.putInt("maxRecentGifsCount", this.maxRecentGifsCount);
        edit.putInt("maxRecentStickersCount", this.maxRecentStickersCount);
        edit.putInt("maxFaveStickersCount", this.maxFaveStickersCount);
        edit.putInt("callReceiveTimeout", this.callReceiveTimeout);
        edit.putInt("callRingTimeout", this.callRingTimeout);
        edit.putInt("callConnectTimeout", this.callConnectTimeout);
        edit.putInt("callPacketTimeout", this.callPacketTimeout);
        edit.putString("linkPrefix", this.linkPrefix);
        edit.putInt("maxPinnedDialogsCount", this.maxPinnedDialogsCount);
        edit.putInt("maxFolderPinnedDialogsCount", this.maxFolderPinnedDialogsCount);
        edit.putInt("maxMessageLength", this.maxMessageLength);
        edit.putInt("maxCaptionLength", this.maxCaptionLength);
        edit.putBoolean("preloadFeaturedStickers", this.preloadFeaturedStickers);
        edit.putInt("revokeTimeLimit", this.revokeTimeLimit);
        edit.putInt("revokeTimePmLimit", this.revokeTimePmLimit);
        edit.putInt("mapProvider", this.mapProvider);
        String str7 = this.mapKey;
        if (str7 != null) {
            edit.putString("pk", str7);
        } else {
            edit.remove("pk");
        }
        edit.putBoolean("canRevokePmInbox", this.canRevokePmInbox);
        edit.putBoolean("blockedCountry", this.blockedCountry);
        edit.putString("venueSearchBot", this.venueSearchBot);
        edit.putString("gifSearchBot", this.gifSearchBot);
        edit.putString("imageSearchBot", this.imageSearchBot);
        edit.putString("dcDomainName2", this.dcDomainName);
        edit.putInt("webFileDatacenterId", this.webFileDatacenterId);
        edit.putString("suggestedLangCode", this.suggestedLangCode);
        edit.commit();
        LocaleController.getInstance().checkUpdateForCurrentRemoteLocale(this.currentAccount, tLRPC$TL_config.lang_pack_version, tLRPC$TL_config.base_lang_pack_version);
        getNotificationCenter().postNotificationName(NotificationCenter.configLoaded, new Object[0]);
    }

    public void addSupportUser() {
        TLRPC$TL_userForeign_old2 tLRPC$TL_userForeign_old2 = new TLRPC$TL_userForeign_old2();
        tLRPC$TL_userForeign_old2.phone = "333";
        tLRPC$TL_userForeign_old2.id = 333000;
        tLRPC$TL_userForeign_old2.first_name = "Telegram";
        tLRPC$TL_userForeign_old2.last_name = "";
        tLRPC$TL_userForeign_old2.status = null;
        tLRPC$TL_userForeign_old2.photo = new TLRPC$TL_userProfilePhotoEmpty();
        putUser(tLRPC$TL_userForeign_old2, true);
        TLRPC$TL_userForeign_old2 tLRPC$TL_userForeign_old22 = new TLRPC$TL_userForeign_old2();
        tLRPC$TL_userForeign_old22.phone = "42777";
        tLRPC$TL_userForeign_old22.id = 777000;
        tLRPC$TL_userForeign_old22.verified = true;
        tLRPC$TL_userForeign_old22.first_name = "Telegram";
        tLRPC$TL_userForeign_old22.last_name = "Notifications";
        tLRPC$TL_userForeign_old22.status = null;
        tLRPC$TL_userForeign_old22.photo = new TLRPC$TL_userProfilePhotoEmpty();
        putUser(tLRPC$TL_userForeign_old22, true);
    }

    public TLRPC$InputUser getInputUser(TLRPC$User tLRPC$User) {
        if (tLRPC$User == null) {
            return new TLRPC$TL_inputUserEmpty();
        }
        if (tLRPC$User.id == getUserConfig().getClientUserId()) {
            return new TLRPC$TL_inputUserSelf();
        }
        TLRPC$TL_inputUser tLRPC$TL_inputUser = new TLRPC$TL_inputUser();
        tLRPC$TL_inputUser.user_id = tLRPC$User.id;
        tLRPC$TL_inputUser.access_hash = tLRPC$User.access_hash;
        return tLRPC$TL_inputUser;
    }

    public TLRPC$InputUser getInputUser(TLRPC$InputPeer tLRPC$InputPeer) {
        if (tLRPC$InputPeer == null) {
            return new TLRPC$TL_inputUserEmpty();
        }
        if (tLRPC$InputPeer instanceof TLRPC$TL_inputPeerSelf) {
            return new TLRPC$TL_inputUserSelf();
        }
        TLRPC$TL_inputUser tLRPC$TL_inputUser = new TLRPC$TL_inputUser();
        tLRPC$TL_inputUser.user_id = tLRPC$InputPeer.user_id;
        tLRPC$TL_inputUser.access_hash = tLRPC$InputPeer.access_hash;
        return tLRPC$TL_inputUser;
    }

    public TLRPC$InputUser getInputUser(int i) {
        return getInputUser(getInstance(UserConfig.selectedAccount).getUser(Integer.valueOf(i)));
    }

    public static TLRPC$InputChannel getInputChannel(TLRPC$Chat tLRPC$Chat) {
        if (!(tLRPC$Chat instanceof TLRPC$TL_channel) && !(tLRPC$Chat instanceof TLRPC$TL_channelForbidden)) {
            return new TLRPC$TL_inputChannelEmpty();
        }
        TLRPC$TL_inputChannel tLRPC$TL_inputChannel = new TLRPC$TL_inputChannel();
        tLRPC$TL_inputChannel.channel_id = tLRPC$Chat.id;
        tLRPC$TL_inputChannel.access_hash = tLRPC$Chat.access_hash;
        return tLRPC$TL_inputChannel;
    }

    public static TLRPC$InputChannel getInputChannel(TLRPC$InputPeer tLRPC$InputPeer) {
        TLRPC$TL_inputChannel tLRPC$TL_inputChannel = new TLRPC$TL_inputChannel();
        tLRPC$TL_inputChannel.channel_id = tLRPC$InputPeer.channel_id;
        tLRPC$TL_inputChannel.access_hash = tLRPC$InputPeer.access_hash;
        return tLRPC$TL_inputChannel;
    }

    public TLRPC$InputChannel getInputChannel(int i) {
        return getInputChannel(getChat(Integer.valueOf(i)));
    }

    public TLRPC$InputPeer getInputPeer(int i) {
        if (i < 0) {
            int i2 = -i;
            TLRPC$Chat chat = getChat(Integer.valueOf(i2));
            if (ChatObject.isChannel(chat)) {
                TLRPC$TL_inputPeerChannel tLRPC$TL_inputPeerChannel = new TLRPC$TL_inputPeerChannel();
                tLRPC$TL_inputPeerChannel.channel_id = i2;
                tLRPC$TL_inputPeerChannel.access_hash = chat.access_hash;
                return tLRPC$TL_inputPeerChannel;
            }
            TLRPC$TL_inputPeerChat tLRPC$TL_inputPeerChat = new TLRPC$TL_inputPeerChat();
            tLRPC$TL_inputPeerChat.chat_id = i2;
            return tLRPC$TL_inputPeerChat;
        }
        TLRPC$User user = getUser(Integer.valueOf(i));
        TLRPC$TL_inputPeerUser tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerUser();
        tLRPC$TL_inputPeerUser.user_id = i;
        if (user == null) {
            return tLRPC$TL_inputPeerUser;
        }
        tLRPC$TL_inputPeerUser.access_hash = user.access_hash;
        return tLRPC$TL_inputPeerUser;
    }

    public TLRPC$Peer getPeer(int i) {
        if (i < 0) {
            int i2 = -i;
            TLRPC$Chat chat = getChat(Integer.valueOf(i2));
            if ((chat instanceof TLRPC$TL_channel) || (chat instanceof TLRPC$TL_channelForbidden)) {
                TLRPC$TL_peerChannel tLRPC$TL_peerChannel = new TLRPC$TL_peerChannel();
                tLRPC$TL_peerChannel.channel_id = i2;
                return tLRPC$TL_peerChannel;
            }
            TLRPC$TL_peerChat tLRPC$TL_peerChat = new TLRPC$TL_peerChat();
            tLRPC$TL_peerChat.chat_id = i2;
            return tLRPC$TL_peerChat;
        }
        getUser(Integer.valueOf(i));
        TLRPC$TL_peerUser tLRPC$TL_peerUser = new TLRPC$TL_peerUser();
        tLRPC$TL_peerUser.user_id = i;
        return tLRPC$TL_peerUser;
    }

    public void didReceivedNotification(int i, int i2, Object... objArr) {
        TLRPC$InputFile tLRPC$InputFile;
        Theme.ThemeAccent themeAccent;
        Theme.ThemeInfo themeInfo;
        TLRPC$InputFile tLRPC$InputFile2;
        TLRPC$TL_theme tLRPC$TL_theme;
        TLRPC$TL_inputThemeSettings tLRPC$TL_inputThemeSettings = null;
        if (i == NotificationCenter.FileDidUpload) {
            String str = objArr[0];
            TLRPC$InputFile tLRPC$InputFile3 = objArr[1];
            String str2 = this.uploadingAvatar;
            if (str2 == null || !str2.equals(str)) {
                String str3 = this.uploadingWallpaper;
                if (str3 == null || !str3.equals(str)) {
                    Object obj = this.uploadingThemes.get(str);
                    if (obj instanceof Theme.ThemeInfo) {
                        Theme.ThemeInfo themeInfo2 = (Theme.ThemeInfo) obj;
                        if (str.equals(themeInfo2.uploadingThumb)) {
                            themeInfo2.uploadedThumb = tLRPC$InputFile3;
                            themeInfo2.uploadingThumb = null;
                        } else if (str.equals(themeInfo2.uploadingFile)) {
                            themeInfo2.uploadedFile = tLRPC$InputFile3;
                            themeInfo2.uploadingFile = null;
                        }
                        tLRPC$InputFile = themeInfo2.uploadedThumb;
                        tLRPC$InputFile2 = themeInfo2.uploadedFile;
                        themeInfo = themeInfo2;
                        themeAccent = null;
                    } else if (obj instanceof Theme.ThemeAccent) {
                        Theme.ThemeAccent themeAccent2 = (Theme.ThemeAccent) obj;
                        if (str.equals(themeAccent2.uploadingThumb)) {
                            themeAccent2.uploadedThumb = tLRPC$InputFile3;
                            themeAccent2.uploadingThumb = null;
                        } else if (str.equals(themeAccent2.uploadingFile)) {
                            themeAccent2.uploadedFile = tLRPC$InputFile3;
                            themeAccent2.uploadingFile = null;
                        }
                        themeInfo = themeAccent2.parentTheme;
                        themeAccent = themeAccent2;
                        tLRPC$InputFile = themeAccent2.uploadedThumb;
                        tLRPC$InputFile2 = themeAccent2.uploadedFile;
                    } else {
                        tLRPC$InputFile = null;
                        tLRPC$InputFile2 = null;
                        themeInfo = null;
                        themeAccent = null;
                    }
                    this.uploadingThemes.remove(str);
                    if (tLRPC$InputFile2 != null && tLRPC$InputFile != null) {
                        new File(str);
                        TLRPC$TL_account_uploadTheme tLRPC$TL_account_uploadTheme = new TLRPC$TL_account_uploadTheme();
                        tLRPC$TL_account_uploadTheme.mime_type = "application/x-tgtheme-android";
                        tLRPC$TL_account_uploadTheme.file_name = "theme.attheme";
                        tLRPC$TL_account_uploadTheme.file = tLRPC$InputFile2;
                        tLRPC$InputFile2.name = "theme.attheme";
                        tLRPC$TL_account_uploadTheme.thumb = tLRPC$InputFile;
                        tLRPC$InputFile.name = "theme-preview.jpg";
                        tLRPC$TL_account_uploadTheme.flags |= 1;
                        if (themeAccent != null) {
                            themeAccent.uploadedFile = null;
                            themeAccent.uploadedThumb = null;
                            tLRPC$TL_theme = themeAccent.info;
                            tLRPC$TL_inputThemeSettings = new TLRPC$TL_inputThemeSettings();
                            tLRPC$TL_inputThemeSettings.base_theme = Theme.getBaseThemeByKey(themeInfo.name);
                            tLRPC$TL_inputThemeSettings.accent_color = themeAccent.accentColor;
                            int i3 = themeAccent.myMessagesAccentColor;
                            if (i3 != 0) {
                                tLRPC$TL_inputThemeSettings.message_bottom_color = i3;
                                tLRPC$TL_inputThemeSettings.flags |= 1;
                            }
                            int i4 = themeAccent.myMessagesGradientAccentColor;
                            if (i4 != 0) {
                                tLRPC$TL_inputThemeSettings.message_top_color = i4;
                                tLRPC$TL_inputThemeSettings.flags |= 1;
                            } else {
                                int i5 = tLRPC$TL_inputThemeSettings.message_bottom_color;
                                if (i5 != 0) {
                                    tLRPC$TL_inputThemeSettings.message_top_color = i5;
                                }
                            }
                            tLRPC$TL_inputThemeSettings.flags |= 2;
                            tLRPC$TL_inputThemeSettings.wallpaper_settings = new TLRPC$TL_wallPaperSettings();
                            if (!TextUtils.isEmpty(themeAccent.patternSlug)) {
                                TLRPC$TL_inputWallPaperSlug tLRPC$TL_inputWallPaperSlug = new TLRPC$TL_inputWallPaperSlug();
                                tLRPC$TL_inputWallPaperSlug.slug = themeAccent.patternSlug;
                                tLRPC$TL_inputThemeSettings.wallpaper = tLRPC$TL_inputWallPaperSlug;
                                TLRPC$WallPaperSettings tLRPC$WallPaperSettings = tLRPC$TL_inputThemeSettings.wallpaper_settings;
                                tLRPC$WallPaperSettings.intensity = (int) (themeAccent.patternIntensity * 100.0f);
                                tLRPC$WallPaperSettings.flags |= 8;
                            } else {
                                tLRPC$TL_inputThemeSettings.wallpaper = new TLRPC$TL_inputWallPaperNoFile();
                            }
                            TLRPC$WallPaperSettings tLRPC$WallPaperSettings2 = tLRPC$TL_inputThemeSettings.wallpaper_settings;
                            tLRPC$WallPaperSettings2.motion = themeAccent.patternMotion;
                            long j = themeAccent.backgroundOverrideColor;
                            if (j != 0) {
                                tLRPC$WallPaperSettings2.background_color = (int) j;
                                tLRPC$WallPaperSettings2.flags |= 1;
                            }
                            long j2 = themeAccent.backgroundGradientOverrideColor;
                            if (j2 != 0) {
                                TLRPC$WallPaperSettings tLRPC$WallPaperSettings3 = tLRPC$TL_inputThemeSettings.wallpaper_settings;
                                tLRPC$WallPaperSettings3.second_background_color = (int) j2;
                                tLRPC$WallPaperSettings3.flags |= 16;
                                tLRPC$WallPaperSettings3.rotation = AndroidUtilities.getWallpaperRotation(themeAccent.backgroundRotation, true);
                            }
                        } else {
                            themeInfo.uploadedFile = null;
                            themeInfo.uploadedThumb = null;
                            tLRPC$TL_theme = themeInfo.info;
                        }
                        getConnectionsManager().sendRequest(tLRPC$TL_account_uploadTheme, new RequestDelegate(tLRPC$TL_theme, themeInfo, tLRPC$TL_inputThemeSettings, themeAccent) {
                            private final /* synthetic */ TLRPC$TL_theme f$1;
                            private final /* synthetic */ Theme.ThemeInfo f$2;
                            private final /* synthetic */ TLRPC$TL_inputThemeSettings f$3;
                            private final /* synthetic */ Theme.ThemeAccent f$4;

                            {
                                this.f$1 = r2;
                                this.f$2 = r3;
                                this.f$3 = r4;
                                this.f$4 = r5;
                            }

                            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                MessagesController.this.lambda$didReceivedNotification$26$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, tLObject, tLRPC$TL_error);
                            }
                        });
                        return;
                    }
                    return;
                }
                TLRPC$TL_account_uploadWallPaper tLRPC$TL_account_uploadWallPaper = new TLRPC$TL_account_uploadWallPaper();
                tLRPC$TL_account_uploadWallPaper.file = tLRPC$InputFile3;
                tLRPC$TL_account_uploadWallPaper.mime_type = "image/jpeg";
                Theme.OverrideWallpaperInfo overrideWallpaperInfo = this.uploadingWallpaperInfo;
                TLRPC$TL_wallPaperSettings tLRPC$TL_wallPaperSettings = new TLRPC$TL_wallPaperSettings();
                tLRPC$TL_wallPaperSettings.blur = overrideWallpaperInfo.isBlurred;
                tLRPC$TL_wallPaperSettings.motion = overrideWallpaperInfo.isMotion;
                tLRPC$TL_account_uploadWallPaper.settings = tLRPC$TL_wallPaperSettings;
                getConnectionsManager().sendRequest(tLRPC$TL_account_uploadWallPaper, new RequestDelegate(overrideWallpaperInfo, tLRPC$TL_wallPaperSettings) {
                    private final /* synthetic */ Theme.OverrideWallpaperInfo f$1;
                    private final /* synthetic */ TLRPC$TL_wallPaperSettings f$2;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$didReceivedNotification$20$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                    }
                });
                return;
            }
            TLRPC$TL_photos_uploadProfilePhoto tLRPC$TL_photos_uploadProfilePhoto = new TLRPC$TL_photos_uploadProfilePhoto();
            tLRPC$TL_photos_uploadProfilePhoto.file = tLRPC$InputFile3;
            getConnectionsManager().sendRequest(tLRPC$TL_photos_uploadProfilePhoto, new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$didReceivedNotification$18$MessagesController(tLObject, tLRPC$TL_error);
                }
            });
        } else if (i == NotificationCenter.FileDidFailUpload) {
            String str4 = objArr[0];
            String str5 = this.uploadingAvatar;
            if (str5 == null || !str5.equals(str4)) {
                String str6 = this.uploadingWallpaper;
                if (str6 == null || !str6.equals(str4)) {
                    Object remove = this.uploadingThemes.remove(str4);
                    if (remove instanceof Theme.ThemeInfo) {
                        Theme.ThemeInfo themeInfo3 = (Theme.ThemeInfo) remove;
                        themeInfo3.uploadedFile = null;
                        themeInfo3.uploadedThumb = null;
                        getNotificationCenter().postNotificationName(NotificationCenter.themeUploadError, themeInfo3, null);
                    } else if (remove instanceof Theme.ThemeAccent) {
                        Theme.ThemeAccent themeAccent3 = (Theme.ThemeAccent) remove;
                        themeAccent3.uploadingThumb = null;
                        getNotificationCenter().postNotificationName(NotificationCenter.themeUploadError, themeAccent3.parentTheme, themeAccent3);
                    }
                } else {
                    this.uploadingWallpaper = null;
                    this.uploadingWallpaperInfo = null;
                }
            } else {
                this.uploadingAvatar = null;
            }
        } else if (i == NotificationCenter.messageReceivedByServer) {
            if (!objArr[6].booleanValue()) {
                Integer num = objArr[0];
                Integer num2 = objArr[1];
                Long l = objArr[3];
                MessageObject messageObject = this.dialogMessage.get(l.longValue());
                if (messageObject != null && (messageObject.getId() == num.intValue() || messageObject.messageOwner.local_id == num.intValue())) {
                    messageObject.messageOwner.id = num2.intValue();
                    messageObject.messageOwner.send_state = 0;
                }
                TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(l.longValue());
                if (tLRPC$Dialog != null && tLRPC$Dialog.top_message == num.intValue()) {
                    tLRPC$Dialog.top_message = num2.intValue();
                    getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                }
                MessageObject messageObject2 = this.dialogMessagesByIds.get(num.intValue());
                this.dialogMessagesByIds.remove(num.intValue());
                if (messageObject2 != null) {
                    this.dialogMessagesByIds.put(num2.intValue(), messageObject2);
                }
                int longValue = (int) l.longValue();
                if (longValue < 0) {
                    int i6 = -longValue;
                    TLRPC$ChatFull tLRPC$ChatFull = this.fullChats.get(i6);
                    TLRPC$Chat chat = getChat(Integer.valueOf(i6));
                    if (chat != null && !ChatObject.hasAdminRights(chat) && tLRPC$ChatFull != null && tLRPC$ChatFull.slowmode_seconds != 0) {
                        tLRPC$ChatFull.slowmode_next_send_date = getConnectionsManager().getCurrentTime() + tLRPC$ChatFull.slowmode_seconds;
                        tLRPC$ChatFull.flags |= 262144;
                        getMessagesStorage().updateChatInfo(tLRPC$ChatFull, false);
                    }
                }
            }
        } else if (i == NotificationCenter.updateMessageMedia) {
            TLRPC$Message tLRPC$Message = objArr[0];
            MessageObject messageObject3 = this.dialogMessagesByIds.get(tLRPC$Message.id);
            if (messageObject3 != null) {
                messageObject3.messageOwner.media = tLRPC$Message.media;
                TLRPC$MessageMedia tLRPC$MessageMedia = tLRPC$Message.media;
                if (tLRPC$MessageMedia.ttl_seconds == 0) {
                    return;
                }
                if ((tLRPC$MessageMedia.photo instanceof TLRPC$TL_photoEmpty) || (tLRPC$MessageMedia.document instanceof TLRPC$TL_documentEmpty)) {
                    messageObject3.setType();
                    getNotificationCenter().postNotificationName(NotificationCenter.notificationsSettingsUpdated, new Object[0]);
                }
            }
        }
    }

    public /* synthetic */ void lambda$didReceivedNotification$18$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$User user = getUser(Integer.valueOf(getUserConfig().getClientUserId()));
            if (user == null) {
                user = getUserConfig().getCurrentUser();
                putUser(user, true);
            } else {
                getUserConfig().setCurrentUser(user);
            }
            if (user != null) {
                TLRPC$TL_photos_photo tLRPC$TL_photos_photo = (TLRPC$TL_photos_photo) tLObject;
                ArrayList<TLRPC$PhotoSize> arrayList = tLRPC$TL_photos_photo.photo.sizes;
                TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(arrayList, 100);
                TLRPC$PhotoSize closestPhotoSizeWithSize2 = FileLoader.getClosestPhotoSizeWithSize(arrayList, 1000);
                TLRPC$TL_userProfilePhoto tLRPC$TL_userProfilePhoto = new TLRPC$TL_userProfilePhoto();
                user.photo = tLRPC$TL_userProfilePhoto;
                tLRPC$TL_userProfilePhoto.photo_id = tLRPC$TL_photos_photo.photo.id;
                if (closestPhotoSizeWithSize != null) {
                    tLRPC$TL_userProfilePhoto.photo_small = closestPhotoSizeWithSize.location;
                }
                if (closestPhotoSizeWithSize2 != null) {
                    user.photo.photo_big = closestPhotoSizeWithSize2.location;
                } else if (closestPhotoSizeWithSize != null) {
                    user.photo.photo_small = closestPhotoSizeWithSize.location;
                }
                getMessagesStorage().clearUserPhotos(user.id);
                ArrayList arrayList2 = new ArrayList();
                arrayList2.add(user);
                getMessagesStorage().putUsersAndChats(arrayList2, (ArrayList<TLRPC$Chat>) null, false, true);
                AndroidUtilities.runOnUIThread(new Runnable() {
                    public final void run() {
                        MessagesController.this.lambda$null$17$MessagesController();
                    }
                });
            }
        }
    }

    public /* synthetic */ void lambda$null$17$MessagesController() {
        getNotificationCenter().postNotificationName(NotificationCenter.mainUserInfoChanged, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 2);
        getUserConfig().saveConfig(true);
    }

    public /* synthetic */ void lambda$didReceivedNotification$20$MessagesController(Theme.OverrideWallpaperInfo overrideWallpaperInfo, TLRPC$TL_wallPaperSettings tLRPC$TL_wallPaperSettings, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        TLRPC$TL_wallPaper tLRPC$TL_wallPaper = (TLRPC$TL_wallPaper) tLObject;
        File file = new File(ApplicationLoader.getFilesDirFixed(), overrideWallpaperInfo.originalFileName);
        if (tLRPC$TL_wallPaper != null) {
            try {
                AndroidUtilities.copyFile(file, FileLoader.getPathToAttach(tLRPC$TL_wallPaper.document, true));
            } catch (Exception unused) {
            }
        }
        AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_wallPaper, tLRPC$TL_wallPaperSettings, overrideWallpaperInfo, file) {
            private final /* synthetic */ TLRPC$TL_wallPaper f$1;
            private final /* synthetic */ TLRPC$TL_wallPaperSettings f$2;
            private final /* synthetic */ Theme.OverrideWallpaperInfo f$3;
            private final /* synthetic */ File f$4;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
            }

            public final void run() {
                MessagesController.this.lambda$null$19$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4);
            }
        });
    }

    public /* synthetic */ void lambda$null$19$MessagesController(TLRPC$TL_wallPaper tLRPC$TL_wallPaper, TLRPC$TL_wallPaperSettings tLRPC$TL_wallPaperSettings, Theme.OverrideWallpaperInfo overrideWallpaperInfo, File file) {
        if (this.uploadingWallpaper != null && tLRPC$TL_wallPaper != null) {
            tLRPC$TL_wallPaper.settings = tLRPC$TL_wallPaperSettings;
            tLRPC$TL_wallPaper.flags |= 4;
            overrideWallpaperInfo.slug = tLRPC$TL_wallPaper.slug;
            overrideWallpaperInfo.saveOverrideWallpaper();
            ArrayList arrayList = new ArrayList();
            arrayList.add(tLRPC$TL_wallPaper);
            getMessagesStorage().putWallpapers(arrayList, 2);
            TLRPC$PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(tLRPC$TL_wallPaper.document.thumbs, 320);
            if (closestPhotoSizeWithSize != null) {
                ImageLoader.getInstance().replaceImageInCache(Utilities.MD5(file.getAbsolutePath()) + "@100_100", closestPhotoSizeWithSize.location.volume_id + "_" + closestPhotoSizeWithSize.location.local_id + "@100_100", ImageLocation.getForDocument(closestPhotoSizeWithSize, tLRPC$TL_wallPaper.document), false);
            }
            NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.wallpapersNeedReload, tLRPC$TL_wallPaper.slug);
        }
    }

    public /* synthetic */ void lambda$didReceivedNotification$26$MessagesController(TLRPC$TL_theme tLRPC$TL_theme, Theme.ThemeInfo themeInfo, TLRPC$TL_inputThemeSettings tLRPC$TL_inputThemeSettings, Theme.ThemeAccent themeAccent, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        String name = tLRPC$TL_theme != null ? tLRPC$TL_theme.title : themeInfo.getName();
        int lastIndexOf = name.lastIndexOf(".attheme");
        if (lastIndexOf > 0) {
            name = name.substring(0, lastIndexOf);
        }
        if (tLObject != null) {
            TLRPC$Document tLRPC$Document = (TLRPC$Document) tLObject;
            TLRPC$TL_inputDocument tLRPC$TL_inputDocument = new TLRPC$TL_inputDocument();
            tLRPC$TL_inputDocument.access_hash = tLRPC$Document.access_hash;
            tLRPC$TL_inputDocument.id = tLRPC$Document.id;
            tLRPC$TL_inputDocument.file_reference = tLRPC$Document.file_reference;
            if (tLRPC$TL_theme == null || !tLRPC$TL_theme.creator) {
                TLRPC$TL_account_createTheme tLRPC$TL_account_createTheme = new TLRPC$TL_account_createTheme();
                tLRPC$TL_account_createTheme.document = tLRPC$TL_inputDocument;
                tLRPC$TL_account_createTheme.flags |= 4;
                tLRPC$TL_account_createTheme.slug = (tLRPC$TL_theme == null || TextUtils.isEmpty(tLRPC$TL_theme.slug)) ? "" : tLRPC$TL_theme.slug;
                tLRPC$TL_account_createTheme.title = name;
                if (tLRPC$TL_inputThemeSettings != null) {
                    tLRPC$TL_account_createTheme.settings = tLRPC$TL_inputThemeSettings;
                    tLRPC$TL_account_createTheme.flags |= 8;
                }
                getConnectionsManager().sendRequest(tLRPC$TL_account_createTheme, new RequestDelegate(themeInfo, themeAccent) {
                    private final /* synthetic */ Theme.ThemeInfo f$1;
                    private final /* synthetic */ Theme.ThemeAccent f$2;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$null$22$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                    }
                });
                return;
            }
            TLRPC$TL_account_updateTheme tLRPC$TL_account_updateTheme = new TLRPC$TL_account_updateTheme();
            TLRPC$TL_inputTheme tLRPC$TL_inputTheme = new TLRPC$TL_inputTheme();
            tLRPC$TL_inputTheme.id = tLRPC$TL_theme.id;
            tLRPC$TL_inputTheme.access_hash = tLRPC$TL_theme.access_hash;
            tLRPC$TL_account_updateTheme.theme = tLRPC$TL_inputTheme;
            tLRPC$TL_account_updateTheme.slug = tLRPC$TL_theme.slug;
            int i = tLRPC$TL_account_updateTheme.flags | 1;
            tLRPC$TL_account_updateTheme.flags = i;
            tLRPC$TL_account_updateTheme.title = name;
            int i2 = i | 2;
            tLRPC$TL_account_updateTheme.flags = i2;
            tLRPC$TL_account_updateTheme.document = tLRPC$TL_inputDocument;
            int i3 = i2 | 4;
            tLRPC$TL_account_updateTheme.flags = i3;
            if (tLRPC$TL_inputThemeSettings != null) {
                tLRPC$TL_account_updateTheme.settings = tLRPC$TL_inputThemeSettings;
                tLRPC$TL_account_updateTheme.flags = i3 | 8;
            }
            tLRPC$TL_account_updateTheme.format = "android";
            getConnectionsManager().sendRequest(tLRPC$TL_account_updateTheme, new RequestDelegate(themeInfo, themeAccent) {
                private final /* synthetic */ Theme.ThemeInfo f$1;
                private final /* synthetic */ Theme.ThemeAccent f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$null$24$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                }
            });
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable(themeInfo, themeAccent) {
            private final /* synthetic */ Theme.ThemeInfo f$1;
            private final /* synthetic */ Theme.ThemeAccent f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$null$25$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$null$22$MessagesController(Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable(tLObject, themeInfo, themeAccent) {
            private final /* synthetic */ TLObject f$1;
            private final /* synthetic */ Theme.ThemeInfo f$2;
            private final /* synthetic */ Theme.ThemeAccent f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesController.this.lambda$null$21$MessagesController(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    public /* synthetic */ void lambda$null$21$MessagesController(TLObject tLObject, Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent) {
        if (tLObject instanceof TLRPC$TL_theme) {
            Theme.setThemeUploadInfo(themeInfo, themeAccent, (TLRPC$TL_theme) tLObject, this.currentAccount, false);
            installTheme(themeInfo, themeAccent, themeInfo == Theme.getCurrentNightTheme());
            getNotificationCenter().postNotificationName(NotificationCenter.themeUploadedToServer, themeInfo, themeAccent);
            return;
        }
        getNotificationCenter().postNotificationName(NotificationCenter.themeUploadError, themeInfo, themeAccent);
    }

    public /* synthetic */ void lambda$null$24$MessagesController(Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable(tLObject, themeInfo, themeAccent) {
            private final /* synthetic */ TLObject f$1;
            private final /* synthetic */ Theme.ThemeInfo f$2;
            private final /* synthetic */ Theme.ThemeAccent f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesController.this.lambda$null$23$MessagesController(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    public /* synthetic */ void lambda$null$23$MessagesController(TLObject tLObject, Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent) {
        if (tLObject instanceof TLRPC$TL_theme) {
            Theme.setThemeUploadInfo(themeInfo, themeAccent, (TLRPC$TL_theme) tLObject, this.currentAccount, false);
            getNotificationCenter().postNotificationName(NotificationCenter.themeUploadedToServer, themeInfo, themeAccent);
            return;
        }
        getNotificationCenter().postNotificationName(NotificationCenter.themeUploadError, themeInfo, themeAccent);
    }

    public /* synthetic */ void lambda$null$25$MessagesController(Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent) {
        getNotificationCenter().postNotificationName(NotificationCenter.themeUploadError, themeInfo, themeAccent);
    }

    public void cleanup() {
        getContactsController().cleanup();
        MediaController.getInstance().cleanup();
        getNotificationsController().cleanup();
        getSendMessagesHelper().cleanup();
        getSecretChatHelper().cleanup();
        getLocationController().cleanup();
        getMediaDataController().cleanup();
        DialogsActivity.dialogsLoaded[this.currentAccount] = false;
        this.notificationsPreferences.edit().clear().commit();
        this.emojiPreferences.edit().putLong("lastGifLoadTime", 0).putLong("lastStickersLoadTime", 0).putLong("lastStickersLoadTimeMask", 0).putLong("lastStickersLoadTimeFavs", 0).commit();
        this.mainPreferences.edit().remove("archivehint").remove("archivehint_l").remove("gifhint").remove("soundHint").remove("dcDomainName2").remove("webFileDatacenterId").remove("themehint").commit();
        this.lastScheduledServerQueryTime.clear();
        this.reloadingWebpages.clear();
        this.reloadingWebpagesPending.clear();
        this.reloadingScheduledWebpages.clear();
        this.reloadingScheduledWebpagesPending.clear();
        this.dialogs_dict.clear();
        this.dialogs_read_inbox_max.clear();
        this.loadingPinnedDialogs.clear();
        this.dialogs_read_outbox_max.clear();
        this.exportedChats.clear();
        this.fullUsers.clear();
        this.fullChats.clear();
        this.dialogsByFolder.clear();
        this.unreadUnmutedDialogs = 0;
        this.joiningToChannels.clear();
        this.migratedChats.clear();
        this.channelViewsToSend.clear();
        this.pollsToCheck.clear();
        this.pollsToCheckSize = 0;
        this.dialogsServerOnly.clear();
        this.dialogsForward.clear();
        this.allDialogs.clear();
        this.dialogsLoadedTillDate = Integer.MAX_VALUE;
        this.dialogsCanAddUsers.clear();
        this.dialogsChannelsOnly.clear();
        this.dialogsGroupsOnly.clear();
        this.dialogsUsersOnly.clear();
        this.dialogMessagesByIds.clear();
        this.dialogMessagesByRandomIds.clear();
        this.channelAdmins.clear();
        this.loadingChannelAdmins.clear();
        this.users.clear();
        this.objectsByUsernames.clear();
        this.chats.clear();
        this.dialogMessage.clear();
        this.deletedHistory.clear();
        this.printingUsers.clear();
        this.printingStrings.clear();
        this.printingStringsTypes.clear();
        this.onlinePrivacy.clear();
        this.loadingPeerSettings.clear();
        this.deletingDialogs.clear();
        this.clearingHistoryDialogs.clear();
        this.lastPrintingStringCount = 0;
        DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
        dialogFilterArr[1] = null;
        dialogFilterArr[0] = null;
        this.dialogFilters.clear();
        this.dialogFiltersById.clear();
        this.loadingSuggestedFilters = false;
        this.loadingRemoteFilters = false;
        this.suggestedFilters.clear();
        Utilities.stageQueue.postRunnable(new Runnable() {
            public final void run() {
                MessagesController.this.lambda$cleanup$27$MessagesController();
            }
        });
        this.createdDialogMainThreadIds.clear();
        this.visibleDialogMainThreadIds.clear();
        this.visibleScheduledDialogMainThreadIds.clear();
        this.blockedUsers.clear();
        this.sendingTypings.clear();
        this.loadingFullUsers.clear();
        this.loadedFullUsers.clear();
        this.reloadingMessages.clear();
        this.loadingFullChats.clear();
        this.loadingFullParticipants.clear();
        this.loadedFullParticipants.clear();
        this.loadedFullChats.clear();
        this.dialogsLoaded = false;
        this.nextDialogsCacheOffset.clear();
        this.loadingDialogs.clear();
        this.dialogsEndReached.clear();
        this.serverDialogsEndReached.clear();
        this.loadingAppConfig = false;
        this.checkingTosUpdate = false;
        this.nextTosCheckTime = 0;
        this.nextProxyInfoCheckTime = 0;
        this.checkingProxyInfo = false;
        this.loadingUnreadDialogs = false;
        this.currentDeletingTaskTime = 0;
        this.currentDeletingTaskMids = null;
        this.currentDeletingTaskChannelId = 0;
        this.gettingNewDeleteTask = false;
        this.loadingBlockedUsers = false;
        this.totalBlockedCount = -1;
        this.blockedEndReached = false;
        this.firstGettingTask = false;
        this.updatingState = false;
        this.resetingDialogs = false;
        this.lastStatusUpdateTime = 0;
        this.offlineSent = false;
        this.registeringForPush = false;
        this.getDifferenceFirstSync = true;
        this.uploadingAvatar = null;
        this.uploadingWallpaper = null;
        this.uploadingWallpaperInfo = null;
        this.uploadingThemes.clear();
        this.statusRequest = 0;
        this.statusSettingState = 0;
        Utilities.stageQueue.postRunnable(new Runnable() {
            public final void run() {
                MessagesController.this.lambda$cleanup$28$MessagesController();
            }
        });
        if (this.currentDeleteTaskRunnable != null) {
            Utilities.stageQueue.cancelRunnable(this.currentDeleteTaskRunnable);
            this.currentDeleteTaskRunnable = null;
        }
        addSupportUser();
        getNotificationCenter().postNotificationName(NotificationCenter.suggestedFiltersLoaded, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogFiltersUpdated, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    public /* synthetic */ void lambda$cleanup$27$MessagesController() {
        this.readTasks.clear();
        this.readTasksMap.clear();
        this.updatesQueueSeq.clear();
        this.updatesQueuePts.clear();
        this.updatesQueueQts.clear();
        this.gettingUnknownChannels.clear();
        this.gettingUnknownDialogs.clear();
        this.updatesStartWaitTimeSeq = 0;
        this.updatesStartWaitTimePts = 0;
        this.updatesStartWaitTimeQts = 0;
        this.createdDialogIds.clear();
        this.createdScheduledDialogIds.clear();
        this.gettingDifference = false;
        this.resetDialogsPinned = null;
        this.resetDialogsAll = null;
    }

    public /* synthetic */ void lambda$cleanup$28$MessagesController() {
        getConnectionsManager().setIsUpdating(false);
        this.updatesQueueChannels.clear();
        this.updatesStartWaitTimeChannels.clear();
        this.gettingDifferenceChannels.clear();
        this.channelsPts.clear();
        this.shortPollChannels.clear();
        this.needShortPollChannels.clear();
        this.shortPollOnlines.clear();
        this.needShortPollOnlines.clear();
    }

    public TLRPC$User getUser(Integer num) {
        return this.users.get(num);
    }

    public TLObject getUserOrChat(String str) {
        if (str == null || str.length() == 0) {
            return null;
        }
        return this.objectsByUsernames.get(str.toLowerCase());
    }

    public ConcurrentHashMap<Integer, TLRPC$User> getUsers() {
        return this.users;
    }

    public ConcurrentHashMap<Integer, TLRPC$Chat> getChats() {
        return this.chats;
    }

    public TLRPC$Chat getChat(Integer num) {
        return this.chats.get(num);
    }

    public TLRPC$EncryptedChat getEncryptedChat(Integer num) {
        return this.encryptedChats.get(num);
    }

    public TLRPC$EncryptedChat getEncryptedChatDB(int i, boolean z) {
        TLRPC$EncryptedChat tLRPC$EncryptedChat = this.encryptedChats.get(Integer.valueOf(i));
        if (tLRPC$EncryptedChat != null) {
            if (!z) {
                return tLRPC$EncryptedChat;
            }
            if (!(tLRPC$EncryptedChat instanceof TLRPC$TL_encryptedChatWaiting) && !(tLRPC$EncryptedChat instanceof TLRPC$TL_encryptedChatRequested)) {
                return tLRPC$EncryptedChat;
            }
        }
        CountDownLatch countDownLatch = new CountDownLatch(1);
        ArrayList arrayList = new ArrayList();
        getMessagesStorage().getEncryptedChat(i, countDownLatch, arrayList);
        try {
            countDownLatch.await();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        if (arrayList.size() != 2) {
            return tLRPC$EncryptedChat;
        }
        TLRPC$EncryptedChat tLRPC$EncryptedChat2 = (TLRPC$EncryptedChat) arrayList.get(0);
        putEncryptedChat(tLRPC$EncryptedChat2, false);
        putUser((TLRPC$User) arrayList.get(1), true);
        return tLRPC$EncryptedChat2;
    }

    public boolean isDialogVisible(long j, boolean z) {
        return (z ? this.visibleScheduledDialogMainThreadIds : this.visibleDialogMainThreadIds).contains(Long.valueOf(j));
    }

    public void setLastVisibleDialogId(long j, boolean z, boolean z2) {
        ArrayList<Long> arrayList = z ? this.visibleScheduledDialogMainThreadIds : this.visibleDialogMainThreadIds;
        if (!z2) {
            arrayList.remove(Long.valueOf(j));
        } else if (!arrayList.contains(Long.valueOf(j))) {
            arrayList.add(Long.valueOf(j));
        }
    }

    public void setLastCreatedDialogId(long j, boolean z, boolean z2) {
        if (!z) {
            ArrayList<Long> arrayList = this.createdDialogMainThreadIds;
            if (!z2) {
                arrayList.remove(Long.valueOf(j));
                SparseArray sparseArray = this.pollsToCheck.get(j);
                if (sparseArray != null) {
                    int size = sparseArray.size();
                    for (int i = 0; i < size; i++) {
                        ((MessageObject) sparseArray.valueAt(i)).pollVisibleOnScreen = false;
                    }
                }
            } else if (!arrayList.contains(Long.valueOf(j))) {
                arrayList.add(Long.valueOf(j));
            } else {
                return;
            }
        }
        Utilities.stageQueue.postRunnable(new Runnable(z, z2, j) {
            private final /* synthetic */ boolean f$1;
            private final /* synthetic */ boolean f$2;
            private final /* synthetic */ long f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesController.this.lambda$setLastCreatedDialogId$29$MessagesController(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    public /* synthetic */ void lambda$setLastCreatedDialogId$29$MessagesController(boolean z, boolean z2, long j) {
        ArrayList<Long> arrayList = z ? this.createdScheduledDialogIds : this.createdDialogIds;
        if (!z2) {
            arrayList.remove(Long.valueOf(j));
        } else if (!arrayList.contains(Long.valueOf(j))) {
            arrayList.add(Long.valueOf(j));
        }
    }

    public TLRPC$ExportedChatInvite getExportedInvite(int i) {
        return this.exportedChats.get(i);
    }

    /* JADX WARNING: Code restructure failed: missing block: B:41:0x00c0, code lost:
        r6 = r6.status;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:43:0x00c4, code lost:
        r7 = r2.status;
     */
    /* JADX WARNING: Removed duplicated region for block: B:13:0x0027 A[RETURN] */
    /* JADX WARNING: Removed duplicated region for block: B:14:0x0028 A[ADDED_TO_REGION] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean putUser(org.telegram.tgnet.TLRPC$User r6, boolean r7) {
        /*
            r5 = this;
            r0 = 0
            if (r6 != 0) goto L_0x0004
            return r0
        L_0x0004:
            r1 = 1
            if (r7 == 0) goto L_0x0016
            int r7 = r6.id
            int r2 = r7 / 1000
            r3 = 333(0x14d, float:4.67E-43)
            if (r2 == r3) goto L_0x0016
            r2 = 777000(0xbdb28, float:1.088809E-39)
            if (r7 == r2) goto L_0x0016
            r7 = 1
            goto L_0x0017
        L_0x0016:
            r7 = 0
        L_0x0017:
            java.util.concurrent.ConcurrentHashMap<java.lang.Integer, org.telegram.tgnet.TLRPC$User> r2 = r5.users
            int r3 = r6.id
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)
            java.lang.Object r2 = r2.get(r3)
            org.telegram.tgnet.TLRPC$User r2 = (org.telegram.tgnet.TLRPC$User) r2
            if (r2 != r6) goto L_0x0028
            return r0
        L_0x0028:
            if (r2 == 0) goto L_0x003d
            java.lang.String r3 = r2.username
            boolean r3 = android.text.TextUtils.isEmpty(r3)
            if (r3 != 0) goto L_0x003d
            java.util.concurrent.ConcurrentHashMap<java.lang.String, org.telegram.tgnet.TLObject> r3 = r5.objectsByUsernames
            java.lang.String r4 = r2.username
            java.lang.String r4 = r4.toLowerCase()
            r3.remove(r4)
        L_0x003d:
            java.lang.String r3 = r6.username
            boolean r3 = android.text.TextUtils.isEmpty(r3)
            if (r3 != 0) goto L_0x0050
            java.util.concurrent.ConcurrentHashMap<java.lang.String, org.telegram.tgnet.TLObject> r3 = r5.objectsByUsernames
            java.lang.String r4 = r6.username
            java.lang.String r4 = r4.toLowerCase()
            r3.put(r4, r6)
        L_0x0050:
            boolean r3 = r6.min
            r4 = 0
            if (r3 == 0) goto L_0x0097
            if (r2 == 0) goto L_0x008a
            if (r7 != 0) goto L_0x011c
            boolean r7 = r6.bot
            if (r7 == 0) goto L_0x0072
            java.lang.String r7 = r6.username
            if (r7 == 0) goto L_0x006a
            r2.username = r7
            int r7 = r2.flags
            r7 = r7 | 8
            r2.flags = r7
            goto L_0x0072
        L_0x006a:
            int r7 = r2.flags
            r7 = r7 & -9
            r2.flags = r7
            r2.username = r4
        L_0x0072:
            org.telegram.tgnet.TLRPC$UserProfilePhoto r6 = r6.photo
            if (r6 == 0) goto L_0x0080
            r2.photo = r6
            int r6 = r2.flags
            r6 = r6 | 32
            r2.flags = r6
            goto L_0x011c
        L_0x0080:
            int r6 = r2.flags
            r6 = r6 & -33
            r2.flags = r6
            r2.photo = r4
            goto L_0x011c
        L_0x008a:
            java.util.concurrent.ConcurrentHashMap<java.lang.Integer, org.telegram.tgnet.TLRPC$User> r7 = r5.users
            int r1 = r6.id
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            r7.put(r1, r6)
            goto L_0x011c
        L_0x0097:
            if (r7 != 0) goto L_0x00cf
            java.util.concurrent.ConcurrentHashMap<java.lang.Integer, org.telegram.tgnet.TLRPC$User> r7 = r5.users
            int r3 = r6.id
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)
            r7.put(r3, r6)
            int r7 = r6.id
            org.telegram.messenger.UserConfig r3 = r5.getUserConfig()
            int r3 = r3.getClientUserId()
            if (r7 != r3) goto L_0x00be
            org.telegram.messenger.UserConfig r7 = r5.getUserConfig()
            r7.setCurrentUser(r6)
            org.telegram.messenger.UserConfig r7 = r5.getUserConfig()
            r7.saveConfig(r1)
        L_0x00be:
            if (r2 == 0) goto L_0x011c
            org.telegram.tgnet.TLRPC$UserStatus r6 = r6.status
            if (r6 == 0) goto L_0x011c
            org.telegram.tgnet.TLRPC$UserStatus r7 = r2.status
            if (r7 == 0) goto L_0x011c
            int r6 = r6.expires
            int r7 = r7.expires
            if (r6 == r7) goto L_0x011c
            return r1
        L_0x00cf:
            if (r2 != 0) goto L_0x00dd
            java.util.concurrent.ConcurrentHashMap<java.lang.Integer, org.telegram.tgnet.TLRPC$User> r7 = r5.users
            int r1 = r6.id
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            r7.put(r1, r6)
            goto L_0x011c
        L_0x00dd:
            boolean r7 = r2.min
            if (r7 == 0) goto L_0x011c
            r6.min = r0
            boolean r7 = r2.bot
            if (r7 == 0) goto L_0x00fc
            java.lang.String r7 = r2.username
            if (r7 == 0) goto L_0x00f4
            r6.username = r7
            int r7 = r6.flags
            r7 = r7 | 8
            r6.flags = r7
            goto L_0x00fc
        L_0x00f4:
            int r7 = r6.flags
            r7 = r7 & -9
            r6.flags = r7
            r6.username = r4
        L_0x00fc:
            org.telegram.tgnet.TLRPC$UserProfilePhoto r7 = r2.photo
            if (r7 == 0) goto L_0x0109
            r6.photo = r7
            int r7 = r6.flags
            r7 = r7 | 32
            r6.flags = r7
            goto L_0x0111
        L_0x0109:
            int r7 = r6.flags
            r7 = r7 & -33
            r6.flags = r7
            r6.photo = r4
        L_0x0111:
            java.util.concurrent.ConcurrentHashMap<java.lang.Integer, org.telegram.tgnet.TLRPC$User> r7 = r5.users
            int r1 = r6.id
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            r7.put(r1, r6)
        L_0x011c:
            return r0
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.putUser(org.telegram.tgnet.TLRPC$User, boolean):boolean");
    }

    public void putUsers(ArrayList<TLRPC$User> arrayList, boolean z) {
        if (arrayList != null && !arrayList.isEmpty()) {
            int size = arrayList.size();
            boolean z2 = false;
            for (int i = 0; i < size; i++) {
                if (putUser(arrayList.get(i), z)) {
                    z2 = true;
                }
            }
            if (z2) {
                AndroidUtilities.runOnUIThread(new Runnable() {
                    public final void run() {
                        MessagesController.this.lambda$putUsers$30$MessagesController();
                    }
                });
            }
        }
    }

    public /* synthetic */ void lambda$putUsers$30$MessagesController() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 4);
    }

    public void putChat(TLRPC$Chat tLRPC$Chat, boolean z) {
        TLRPC$Chat tLRPC$Chat2;
        if (tLRPC$Chat != null && (tLRPC$Chat2 = this.chats.get(Integer.valueOf(tLRPC$Chat.id))) != tLRPC$Chat) {
            if (tLRPC$Chat2 != null && !TextUtils.isEmpty(tLRPC$Chat2.username)) {
                this.objectsByUsernames.remove(tLRPC$Chat2.username.toLowerCase());
            }
            if (!TextUtils.isEmpty(tLRPC$Chat.username)) {
                this.objectsByUsernames.put(tLRPC$Chat.username.toLowerCase(), tLRPC$Chat);
            }
            if (!tLRPC$Chat.min) {
                int i = 0;
                if (!z) {
                    if (tLRPC$Chat2 != null) {
                        if (tLRPC$Chat.version != tLRPC$Chat2.version) {
                            this.loadedFullChats.remove(Integer.valueOf(tLRPC$Chat.id));
                        }
                        int i2 = tLRPC$Chat2.participants_count;
                        if (i2 != 0 && tLRPC$Chat.participants_count == 0) {
                            tLRPC$Chat.participants_count = i2;
                            tLRPC$Chat.flags |= 131072;
                        }
                        TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights = tLRPC$Chat2.banned_rights;
                        int i3 = tLRPC$TL_chatBannedRights != null ? tLRPC$TL_chatBannedRights.flags : 0;
                        TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights2 = tLRPC$Chat.banned_rights;
                        int i4 = tLRPC$TL_chatBannedRights2 != null ? tLRPC$TL_chatBannedRights2.flags : 0;
                        TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights3 = tLRPC$Chat2.default_banned_rights;
                        int i5 = tLRPC$TL_chatBannedRights3 != null ? tLRPC$TL_chatBannedRights3.flags : 0;
                        TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights4 = tLRPC$Chat.default_banned_rights;
                        if (tLRPC$TL_chatBannedRights4 != null) {
                            i = tLRPC$TL_chatBannedRights4.flags;
                        }
                        TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights5 = tLRPC$Chat.default_banned_rights;
                        tLRPC$Chat2.default_banned_rights = tLRPC$TL_chatBannedRights5;
                        if (tLRPC$TL_chatBannedRights5 == null) {
                            tLRPC$Chat2.flags &= -262145;
                        } else {
                            tLRPC$Chat2.flags = 262144 | tLRPC$Chat2.flags;
                        }
                        TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights6 = tLRPC$Chat.banned_rights;
                        tLRPC$Chat2.banned_rights = tLRPC$TL_chatBannedRights6;
                        if (tLRPC$TL_chatBannedRights6 == null) {
                            tLRPC$Chat2.flags &= -32769;
                        } else {
                            tLRPC$Chat2.flags = 32768 | tLRPC$Chat2.flags;
                        }
                        TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights = tLRPC$Chat.admin_rights;
                        tLRPC$Chat2.admin_rights = tLRPC$TL_chatAdminRights;
                        if (tLRPC$TL_chatAdminRights == null) {
                            tLRPC$Chat2.flags &= -16385;
                        } else {
                            tLRPC$Chat2.flags |= 16384;
                        }
                        if (!(i3 == i4 && i5 == i)) {
                            AndroidUtilities.runOnUIThread(new Runnable(tLRPC$Chat) {
                                private final /* synthetic */ TLRPC$Chat f$1;

                                {
                                    this.f$1 = r2;
                                }

                                public final void run() {
                                    MessagesController.this.lambda$putChat$31$MessagesController(this.f$1);
                                }
                            });
                        }
                    }
                    this.chats.put(Integer.valueOf(tLRPC$Chat.id), tLRPC$Chat);
                } else if (tLRPC$Chat2 == null) {
                    this.chats.put(Integer.valueOf(tLRPC$Chat.id), tLRPC$Chat);
                } else if (tLRPC$Chat2.min) {
                    tLRPC$Chat.min = false;
                    tLRPC$Chat.title = tLRPC$Chat2.title;
                    tLRPC$Chat.photo = tLRPC$Chat2.photo;
                    tLRPC$Chat.broadcast = tLRPC$Chat2.broadcast;
                    tLRPC$Chat.verified = tLRPC$Chat2.verified;
                    tLRPC$Chat.megagroup = tLRPC$Chat2.megagroup;
                    TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights7 = tLRPC$Chat2.default_banned_rights;
                    if (tLRPC$TL_chatBannedRights7 != null) {
                        tLRPC$Chat.default_banned_rights = tLRPC$TL_chatBannedRights7;
                        tLRPC$Chat.flags |= 262144;
                    }
                    TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights2 = tLRPC$Chat2.admin_rights;
                    if (tLRPC$TL_chatAdminRights2 != null) {
                        tLRPC$Chat.admin_rights = tLRPC$TL_chatAdminRights2;
                        tLRPC$Chat.flags |= 16384;
                    }
                    TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights8 = tLRPC$Chat2.banned_rights;
                    if (tLRPC$TL_chatBannedRights8 != null) {
                        tLRPC$Chat.banned_rights = tLRPC$TL_chatBannedRights8;
                        tLRPC$Chat.flags |= 32768;
                    }
                    String str = tLRPC$Chat2.username;
                    if (str != null) {
                        tLRPC$Chat.username = str;
                        tLRPC$Chat.flags |= 64;
                    } else {
                        tLRPC$Chat.flags &= -65;
                        tLRPC$Chat.username = null;
                    }
                    int i6 = tLRPC$Chat2.participants_count;
                    if (i6 != 0 && tLRPC$Chat.participants_count == 0) {
                        tLRPC$Chat.participants_count = i6;
                        tLRPC$Chat.flags |= 131072;
                    }
                    this.chats.put(Integer.valueOf(tLRPC$Chat.id), tLRPC$Chat);
                }
            } else if (tLRPC$Chat2 == null) {
                this.chats.put(Integer.valueOf(tLRPC$Chat.id), tLRPC$Chat);
            } else if (!z) {
                tLRPC$Chat2.title = tLRPC$Chat.title;
                tLRPC$Chat2.photo = tLRPC$Chat.photo;
                tLRPC$Chat2.broadcast = tLRPC$Chat.broadcast;
                tLRPC$Chat2.verified = tLRPC$Chat.verified;
                tLRPC$Chat2.megagroup = tLRPC$Chat.megagroup;
                TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights9 = tLRPC$Chat.default_banned_rights;
                if (tLRPC$TL_chatBannedRights9 != null) {
                    tLRPC$Chat2.default_banned_rights = tLRPC$TL_chatBannedRights9;
                    tLRPC$Chat2.flags |= 262144;
                }
                TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights3 = tLRPC$Chat.admin_rights;
                if (tLRPC$TL_chatAdminRights3 != null) {
                    tLRPC$Chat2.admin_rights = tLRPC$TL_chatAdminRights3;
                    tLRPC$Chat2.flags |= 16384;
                }
                TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights10 = tLRPC$Chat.banned_rights;
                if (tLRPC$TL_chatBannedRights10 != null) {
                    tLRPC$Chat2.banned_rights = tLRPC$TL_chatBannedRights10;
                    tLRPC$Chat2.flags |= 32768;
                }
                String str2 = tLRPC$Chat.username;
                if (str2 != null) {
                    tLRPC$Chat2.username = str2;
                    tLRPC$Chat2.flags |= 64;
                } else {
                    tLRPC$Chat2.flags &= -65;
                    tLRPC$Chat2.username = null;
                }
                int i7 = tLRPC$Chat.participants_count;
                if (i7 != 0) {
                    tLRPC$Chat2.participants_count = i7;
                }
            }
        }
    }

    public /* synthetic */ void lambda$putChat$31$MessagesController(TLRPC$Chat tLRPC$Chat) {
        getNotificationCenter().postNotificationName(NotificationCenter.channelRightsUpdated, tLRPC$Chat);
    }

    public void putChats(ArrayList<TLRPC$Chat> arrayList, boolean z) {
        if (arrayList != null && !arrayList.isEmpty()) {
            int size = arrayList.size();
            for (int i = 0; i < size; i++) {
                putChat(arrayList.get(i), z);
            }
        }
    }

    public void setReferer(String str) {
        if (str != null) {
            this.installReferer = str;
            this.mainPreferences.edit().putString("installReferer", str).commit();
        }
    }

    public void putEncryptedChat(TLRPC$EncryptedChat tLRPC$EncryptedChat, boolean z) {
        if (tLRPC$EncryptedChat != null) {
            if (z) {
                this.encryptedChats.putIfAbsent(Integer.valueOf(tLRPC$EncryptedChat.id), tLRPC$EncryptedChat);
            } else {
                this.encryptedChats.put(Integer.valueOf(tLRPC$EncryptedChat.id), tLRPC$EncryptedChat);
            }
        }
    }

    public void putEncryptedChats(ArrayList<TLRPC$EncryptedChat> arrayList, boolean z) {
        if (arrayList != null && !arrayList.isEmpty()) {
            int size = arrayList.size();
            for (int i = 0; i < size; i++) {
                putEncryptedChat(arrayList.get(i), z);
            }
        }
    }

    public TLRPC$UserFull getUserFull(int i) {
        return this.fullUsers.get(i);
    }

    public TLRPC$ChatFull getChatFull(int i) {
        return this.fullChats.get(i);
    }

    public void cancelLoadFullUser(int i) {
        this.loadingFullUsers.remove(Integer.valueOf(i));
    }

    public void cancelLoadFullChat(int i) {
        this.loadingFullChats.remove(Integer.valueOf(i));
    }

    /* access modifiers changed from: protected */
    public void clearFullUsers() {
        this.loadedFullUsers.clear();
        this.loadedFullChats.clear();
    }

    private void reloadDialogsReadValue(ArrayList<TLRPC$Dialog> arrayList, long j) {
        if (j != 0 || (arrayList != null && !arrayList.isEmpty())) {
            TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs = new TLRPC$TL_messages_getPeerDialogs();
            if (arrayList != null) {
                for (int i = 0; i < arrayList.size(); i++) {
                    TLRPC$InputPeer inputPeer = getInputPeer((int) arrayList.get(i).id);
                    if (!(inputPeer instanceof TLRPC$TL_inputPeerChannel) || inputPeer.access_hash != 0) {
                        TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
                        tLRPC$TL_inputDialogPeer.peer = inputPeer;
                        tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer);
                    }
                }
            } else {
                TLRPC$InputPeer inputPeer2 = getInputPeer((int) j);
                if (!(inputPeer2 instanceof TLRPC$TL_inputPeerChannel) || inputPeer2.access_hash != 0) {
                    TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer2 = new TLRPC$TL_inputDialogPeer();
                    tLRPC$TL_inputDialogPeer2.peer = inputPeer2;
                    tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer2);
                } else {
                    return;
                }
            }
            if (!tLRPC$TL_messages_getPeerDialogs.peers.isEmpty()) {
                getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerDialogs, new RequestDelegate() {
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$reloadDialogsReadValue$32$MessagesController(tLObject, tLRPC$TL_error);
                    }
                });
            }
        }
    }

    public /* synthetic */ void lambda$reloadDialogsReadValue$32$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject;
            ArrayList arrayList = new ArrayList();
            for (int i = 0; i < tLRPC$TL_messages_peerDialogs.dialogs.size(); i++) {
                TLRPC$Dialog tLRPC$Dialog = tLRPC$TL_messages_peerDialogs.dialogs.get(i);
                if (tLRPC$Dialog.read_inbox_max_id == 0) {
                    tLRPC$Dialog.read_inbox_max_id = 1;
                }
                if (tLRPC$Dialog.read_outbox_max_id == 0) {
                    tLRPC$Dialog.read_outbox_max_id = 1;
                }
                DialogObject.initDialog(tLRPC$Dialog);
                Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                if (num == null) {
                    num = 0;
                }
                this.dialogs_read_inbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(tLRPC$Dialog.read_inbox_max_id, num.intValue())));
                if (num.intValue() == 0) {
                    if (tLRPC$Dialog.peer.channel_id != 0) {
                        TLRPC$TL_updateReadChannelInbox tLRPC$TL_updateReadChannelInbox = new TLRPC$TL_updateReadChannelInbox();
                        tLRPC$TL_updateReadChannelInbox.channel_id = tLRPC$Dialog.peer.channel_id;
                        tLRPC$TL_updateReadChannelInbox.max_id = tLRPC$Dialog.read_inbox_max_id;
                        arrayList.add(tLRPC$TL_updateReadChannelInbox);
                    } else {
                        TLRPC$TL_updateReadHistoryInbox tLRPC$TL_updateReadHistoryInbox = new TLRPC$TL_updateReadHistoryInbox();
                        tLRPC$TL_updateReadHistoryInbox.peer = tLRPC$Dialog.peer;
                        tLRPC$TL_updateReadHistoryInbox.max_id = tLRPC$Dialog.read_inbox_max_id;
                        arrayList.add(tLRPC$TL_updateReadHistoryInbox);
                    }
                }
                Integer num2 = this.dialogs_read_outbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                if (num2 == null) {
                    num2 = 0;
                }
                this.dialogs_read_outbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(tLRPC$Dialog.read_outbox_max_id, num2.intValue())));
                if (num2.intValue() == 0) {
                    if (tLRPC$Dialog.peer.channel_id != 0) {
                        TLRPC$TL_updateReadChannelOutbox tLRPC$TL_updateReadChannelOutbox = new TLRPC$TL_updateReadChannelOutbox();
                        tLRPC$TL_updateReadChannelOutbox.channel_id = tLRPC$Dialog.peer.channel_id;
                        tLRPC$TL_updateReadChannelOutbox.max_id = tLRPC$Dialog.read_outbox_max_id;
                        arrayList.add(tLRPC$TL_updateReadChannelOutbox);
                    } else {
                        TLRPC$TL_updateReadHistoryOutbox tLRPC$TL_updateReadHistoryOutbox = new TLRPC$TL_updateReadHistoryOutbox();
                        tLRPC$TL_updateReadHistoryOutbox.peer = tLRPC$Dialog.peer;
                        tLRPC$TL_updateReadHistoryOutbox.max_id = tLRPC$Dialog.read_outbox_max_id;
                        arrayList.add(tLRPC$TL_updateReadHistoryOutbox);
                    }
                }
            }
            if (!arrayList.isEmpty()) {
                processUpdateArray(arrayList, (ArrayList<TLRPC$User>) null, (ArrayList<TLRPC$Chat>) null, false, 0);
            }
        }
    }

    public String getAdminRank(int i, int i2) {
        SparseArray sparseArray = this.channelAdmins.get(i);
        if (sparseArray == null) {
            return null;
        }
        return (String) sparseArray.get(i2);
    }

    public boolean isChannelAdminsLoaded(int i) {
        return this.channelAdmins.get(i) != null;
    }

    public void loadChannelAdmins(int i, boolean z) {
        if (SystemClock.elapsedRealtime() - ((long) this.loadingChannelAdmins.get(i)) >= 60) {
            this.loadingChannelAdmins.put(i, (int) (SystemClock.elapsedRealtime() / 1000));
            if (z) {
                getMessagesStorage().loadChannelAdmins(i);
                return;
            }
            TLRPC$TL_channels_getParticipants tLRPC$TL_channels_getParticipants = new TLRPC$TL_channels_getParticipants();
            tLRPC$TL_channels_getParticipants.channel = getInputChannel(i);
            tLRPC$TL_channels_getParticipants.limit = 100;
            tLRPC$TL_channels_getParticipants.filter = new TLRPC$TL_channelParticipantsAdmins();
            getConnectionsManager().sendRequest(tLRPC$TL_channels_getParticipants, new RequestDelegate(i) {
                private final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$loadChannelAdmins$33$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$loadChannelAdmins$33$MessagesController(int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject instanceof TLRPC$TL_channels_channelParticipants) {
            processLoadedAdminsResponse(i, (TLRPC$TL_channels_channelParticipants) tLObject);
        }
    }

    public void processLoadedAdminsResponse(int i, TLRPC$TL_channels_channelParticipants tLRPC$TL_channels_channelParticipants) {
        SparseArray sparseArray = new SparseArray(tLRPC$TL_channels_channelParticipants.participants.size());
        for (int i2 = 0; i2 < tLRPC$TL_channels_channelParticipants.participants.size(); i2++) {
            TLRPC$ChannelParticipant tLRPC$ChannelParticipant = tLRPC$TL_channels_channelParticipants.participants.get(i2);
            int i3 = tLRPC$ChannelParticipant.user_id;
            String str = tLRPC$ChannelParticipant.rank;
            if (str == null) {
                str = "";
            }
            sparseArray.put(i3, str);
        }
        processLoadedChannelAdmins(sparseArray, i, false);
    }

    public void processLoadedChannelAdmins(SparseArray<String> sparseArray, int i, boolean z) {
        if (!z) {
            getMessagesStorage().putChannelAdmins(i, sparseArray);
        }
        AndroidUtilities.runOnUIThread(new Runnable(i, sparseArray, z) {
            private final /* synthetic */ int f$1;
            private final /* synthetic */ SparseArray f$2;
            private final /* synthetic */ boolean f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesController.this.lambda$processLoadedChannelAdmins$34$MessagesController(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    public /* synthetic */ void lambda$processLoadedChannelAdmins$34$MessagesController(int i, SparseArray sparseArray, boolean z) {
        this.channelAdmins.put(i, sparseArray);
        if (z) {
            this.loadingChannelAdmins.delete(i);
            loadChannelAdmins(i, false);
        }
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r12v5, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getFullChat} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r12v8, resolved type: org.telegram.tgnet.TLRPC$TL_channels_getFullChannel} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r12v9, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getFullChat} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r12v10, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getFullChat} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r12v11, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getFullChat} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r12v12, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getFullChat} */
    /* JADX WARNING: Code restructure failed: missing block: B:12:0x0066, code lost:
        if (r9.dialogs_read_outbox_max.get(java.lang.Long.valueOf(r4)) == null) goto L_0x0068;
     */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void loadFullChat(int r10, int r11, boolean r12) {
        /*
            r9 = this;
            java.util.ArrayList<java.lang.Integer> r0 = r9.loadedFullChats
            java.lang.Integer r1 = java.lang.Integer.valueOf(r10)
            boolean r0 = r0.contains(r1)
            java.util.ArrayList<java.lang.Integer> r1 = r9.loadingFullChats
            java.lang.Integer r2 = java.lang.Integer.valueOf(r10)
            boolean r1 = r1.contains(r2)
            if (r1 != 0) goto L_0x0086
            if (r12 != 0) goto L_0x001b
            if (r0 == 0) goto L_0x001b
            goto L_0x0086
        L_0x001b:
            java.util.ArrayList<java.lang.Integer> r12 = r9.loadingFullChats
            java.lang.Integer r1 = java.lang.Integer.valueOf(r10)
            r12.add(r1)
            int r12 = -r10
            long r4 = (long) r12
            java.lang.Integer r12 = java.lang.Integer.valueOf(r10)
            org.telegram.tgnet.TLRPC$Chat r3 = r9.getChat(r12)
            boolean r12 = org.telegram.messenger.ChatObject.isChannel(r3)
            if (r12 == 0) goto L_0x0049
            org.telegram.tgnet.TLRPC$TL_channels_getFullChannel r12 = new org.telegram.tgnet.TLRPC$TL_channels_getFullChannel
            r12.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r1 = getInputChannel((org.telegram.tgnet.TLRPC$Chat) r3)
            r12.channel = r1
            boolean r1 = r3.megagroup
            if (r1 == 0) goto L_0x006c
            r0 = r0 ^ 1
            r9.loadChannelAdmins(r10, r0)
            goto L_0x006c
        L_0x0049:
            org.telegram.tgnet.TLRPC$TL_messages_getFullChat r12 = new org.telegram.tgnet.TLRPC$TL_messages_getFullChat
            r12.<init>()
            r12.chat_id = r10
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r0 = r9.dialogs_read_inbox_max
            java.lang.Long r1 = java.lang.Long.valueOf(r4)
            java.lang.Object r0 = r0.get(r1)
            if (r0 == 0) goto L_0x0068
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r0 = r9.dialogs_read_outbox_max
            java.lang.Long r1 = java.lang.Long.valueOf(r4)
            java.lang.Object r0 = r0.get(r1)
            if (r0 != 0) goto L_0x006c
        L_0x0068:
            r0 = 0
            r9.reloadDialogsReadValue(r0, r4)
        L_0x006c:
            org.telegram.tgnet.ConnectionsManager r0 = r9.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$ATFsCrakNWxR_vbfkHQ9iwEXyyE r8 = new org.telegram.messenger.-$$Lambda$MessagesController$ATFsCrakNWxR_vbfkHQ9iwEXyyE
            r1 = r8
            r2 = r9
            r6 = r10
            r7 = r11
            r1.<init>(r3, r4, r6, r7)
            int r10 = r0.sendRequest(r12, r8)
            if (r11 == 0) goto L_0x0086
            org.telegram.tgnet.ConnectionsManager r12 = r9.getConnectionsManager()
            r12.bindRequestToGuid(r10, r11)
        L_0x0086:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.loadFullChat(int, int, boolean):void");
    }

    public /* synthetic */ void lambda$loadFullChat$37$MessagesController(TLRPC$Chat tLRPC$Chat, long j, int i, int i2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        long j2 = j;
        int i3 = i;
        TLRPC$TL_error tLRPC$TL_error2 = tLRPC$TL_error;
        if (tLRPC$TL_error2 == null) {
            TLRPC$TL_messages_chatFull tLRPC$TL_messages_chatFull = (TLRPC$TL_messages_chatFull) tLObject;
            getMessagesStorage().putUsersAndChats(tLRPC$TL_messages_chatFull.users, tLRPC$TL_messages_chatFull.chats, true, true);
            getMessagesStorage().updateChatInfo(tLRPC$TL_messages_chatFull.full_chat, false);
            if (ChatObject.isChannel(tLRPC$Chat)) {
                Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(j));
                if (num == null) {
                    num = Integer.valueOf(getMessagesStorage().getDialogReadMax(false, j));
                }
                this.dialogs_read_inbox_max.put(Long.valueOf(j), Integer.valueOf(Math.max(tLRPC$TL_messages_chatFull.full_chat.read_inbox_max_id, num.intValue())));
                if (num.intValue() == 0) {
                    ArrayList arrayList = new ArrayList();
                    TLRPC$TL_updateReadChannelInbox tLRPC$TL_updateReadChannelInbox = new TLRPC$TL_updateReadChannelInbox();
                    tLRPC$TL_updateReadChannelInbox.channel_id = i3;
                    tLRPC$TL_updateReadChannelInbox.max_id = tLRPC$TL_messages_chatFull.full_chat.read_inbox_max_id;
                    arrayList.add(tLRPC$TL_updateReadChannelInbox);
                    processUpdateArray(arrayList, (ArrayList<TLRPC$User>) null, (ArrayList<TLRPC$Chat>) null, false, 0);
                }
                Integer num2 = this.dialogs_read_outbox_max.get(Long.valueOf(j));
                if (num2 == null) {
                    num2 = Integer.valueOf(getMessagesStorage().getDialogReadMax(true, j));
                }
                this.dialogs_read_outbox_max.put(Long.valueOf(j), Integer.valueOf(Math.max(tLRPC$TL_messages_chatFull.full_chat.read_outbox_max_id, num2.intValue())));
                if (num2.intValue() == 0) {
                    ArrayList arrayList2 = new ArrayList();
                    TLRPC$TL_updateReadChannelOutbox tLRPC$TL_updateReadChannelOutbox = new TLRPC$TL_updateReadChannelOutbox();
                    tLRPC$TL_updateReadChannelOutbox.channel_id = i3;
                    tLRPC$TL_updateReadChannelOutbox.max_id = tLRPC$TL_messages_chatFull.full_chat.read_outbox_max_id;
                    arrayList2.add(tLRPC$TL_updateReadChannelOutbox);
                    processUpdateArray(arrayList2, (ArrayList<TLRPC$User>) null, (ArrayList<TLRPC$Chat>) null, false, 0);
                }
            }
            AndroidUtilities.runOnUIThread(new Runnable(i3, tLRPC$TL_messages_chatFull, i2) {
                private final /* synthetic */ int f$1;
                private final /* synthetic */ TLRPC$TL_messages_chatFull f$2;
                private final /* synthetic */ int f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run() {
                    MessagesController.this.lambda$null$35$MessagesController(this.f$1, this.f$2, this.f$3);
                }
            });
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_error2, i3) {
            private final /* synthetic */ TLRPC$TL_error f$1;
            private final /* synthetic */ int f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$null$36$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$null$35$MessagesController(int i, TLRPC$TL_messages_chatFull tLRPC$TL_messages_chatFull, int i2) {
        TLRPC$Dialog tLRPC$Dialog;
        int i3;
        this.fullChats.put(i, tLRPC$TL_messages_chatFull.full_chat);
        long j = (long) (-i);
        applyDialogNotificationsSettings(j, tLRPC$TL_messages_chatFull.full_chat.notify_settings);
        for (int i4 = 0; i4 < tLRPC$TL_messages_chatFull.full_chat.bot_info.size(); i4++) {
            getMediaDataController().putBotInfo(tLRPC$TL_messages_chatFull.full_chat.bot_info.get(i4));
        }
        this.exportedChats.put(i, tLRPC$TL_messages_chatFull.full_chat.exported_invite);
        this.loadingFullChats.remove(Integer.valueOf(i));
        this.loadedFullChats.add(Integer.valueOf(i));
        putUsers(tLRPC$TL_messages_chatFull.users, false);
        putChats(tLRPC$TL_messages_chatFull.chats, false);
        if (tLRPC$TL_messages_chatFull.full_chat.stickerset != null) {
            getMediaDataController().getGroupStickerSetById(tLRPC$TL_messages_chatFull.full_chat.stickerset);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.chatInfoDidLoad, tLRPC$TL_messages_chatFull.full_chat, Integer.valueOf(i2), false, null);
        if ((tLRPC$TL_messages_chatFull.full_chat.flags & 2048) != 0 && (tLRPC$Dialog = this.dialogs_dict.get(j)) != null && tLRPC$Dialog.folder_id != (i3 = tLRPC$TL_messages_chatFull.full_chat.folder_id)) {
            tLRPC$Dialog.folder_id = i3;
            sortDialogs((SparseArray<TLRPC$Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
    }

    public /* synthetic */ void lambda$null$36$MessagesController(TLRPC$TL_error tLRPC$TL_error, int i) {
        checkChannelError(tLRPC$TL_error.text, i);
        this.loadingFullChats.remove(Integer.valueOf(i));
    }

    public void loadFullUser(TLRPC$User tLRPC$User, int i, boolean z) {
        if (tLRPC$User != null && !this.loadingFullUsers.contains(Integer.valueOf(tLRPC$User.id))) {
            if (z || !this.loadedFullUsers.contains(Integer.valueOf(tLRPC$User.id))) {
                this.loadingFullUsers.add(Integer.valueOf(tLRPC$User.id));
                TLRPC$TL_users_getFullUser tLRPC$TL_users_getFullUser = new TLRPC$TL_users_getFullUser();
                tLRPC$TL_users_getFullUser.id = getInputUser(tLRPC$User);
                long j = (long) tLRPC$User.id;
                if (this.dialogs_read_inbox_max.get(Long.valueOf(j)) == null || this.dialogs_read_outbox_max.get(Long.valueOf(j)) == null) {
                    reloadDialogsReadValue((ArrayList<TLRPC$Dialog>) null, j);
                }
                getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tLRPC$TL_users_getFullUser, new RequestDelegate(tLRPC$User, i) {
                    private final /* synthetic */ TLRPC$User f$1;
                    private final /* synthetic */ int f$2;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$loadFullUser$40$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                    }
                }), i);
            }
        }
    }

    public /* synthetic */ void lambda$loadFullUser$40$MessagesController(TLRPC$User tLRPC$User, int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$UserFull tLRPC$UserFull = (TLRPC$UserFull) tLObject;
            getMessagesStorage().updateUserInfo(tLRPC$UserFull, false);
            AndroidUtilities.runOnUIThread(new Runnable(tLRPC$UserFull, tLRPC$User, i) {
                private final /* synthetic */ TLRPC$UserFull f$1;
                private final /* synthetic */ TLRPC$User f$2;
                private final /* synthetic */ int f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run() {
                    MessagesController.this.lambda$null$38$MessagesController(this.f$1, this.f$2, this.f$3);
                }
            });
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable(tLRPC$User) {
            private final /* synthetic */ TLRPC$User f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$39$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$null$38$MessagesController(TLRPC$UserFull tLRPC$UserFull, TLRPC$User tLRPC$User, int i) {
        TLRPC$Dialog tLRPC$Dialog;
        int i2;
        savePeerSettings((long) tLRPC$UserFull.user.id, tLRPC$UserFull.settings, false);
        applyDialogNotificationsSettings((long) tLRPC$User.id, tLRPC$UserFull.notify_settings);
        if (tLRPC$UserFull.bot_info instanceof TLRPC$TL_botInfo) {
            getMediaDataController().putBotInfo(tLRPC$UserFull.bot_info);
        }
        int indexOfKey = this.blockedUsers.indexOfKey(tLRPC$User.id);
        if (tLRPC$UserFull.blocked) {
            if (indexOfKey < 0) {
                this.blockedUsers.put(tLRPC$User.id, 1);
                getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
            }
        } else if (indexOfKey >= 0) {
            this.blockedUsers.removeAt(indexOfKey);
            getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
        }
        this.fullUsers.put(tLRPC$User.id, tLRPC$UserFull);
        this.loadingFullUsers.remove(Integer.valueOf(tLRPC$User.id));
        this.loadedFullUsers.add(Integer.valueOf(tLRPC$User.id));
        String str = tLRPC$User.first_name + tLRPC$User.last_name + tLRPC$User.username;
        ArrayList arrayList = new ArrayList();
        arrayList.add(tLRPC$UserFull.user);
        putUsers(arrayList, false);
        getMessagesStorage().putUsersAndChats(arrayList, (ArrayList<TLRPC$Chat>) null, false, true);
        if (str != null) {
            if (!str.equals(tLRPC$UserFull.user.first_name + tLRPC$UserFull.user.last_name + tLRPC$UserFull.user.username)) {
                getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 1);
            }
        }
        if (tLRPC$UserFull.bot_info instanceof TLRPC$TL_botInfo) {
            getNotificationCenter().postNotificationName(NotificationCenter.botInfoDidLoad, tLRPC$UserFull.bot_info, Integer.valueOf(i));
        }
        getNotificationCenter().postNotificationName(NotificationCenter.userInfoDidLoad, Integer.valueOf(tLRPC$User.id), tLRPC$UserFull, null);
        if ((tLRPC$UserFull.flags & 2048) != 0 && (tLRPC$Dialog = this.dialogs_dict.get((long) tLRPC$User.id)) != null && tLRPC$Dialog.folder_id != (i2 = tLRPC$UserFull.folder_id)) {
            tLRPC$Dialog.folder_id = i2;
            sortDialogs((SparseArray<TLRPC$Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
    }

    public /* synthetic */ void lambda$null$39$MessagesController(TLRPC$User tLRPC$User) {
        this.loadingFullUsers.remove(Integer.valueOf(tLRPC$User.id));
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v3, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getMessages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v5, resolved type: org.telegram.tgnet.TLRPC$TL_channels_getMessages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v6, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getMessages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v7, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getMessages} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void reloadMessages(java.util.ArrayList<java.lang.Integer> r10, long r11, boolean r13) {
        /*
            r9 = this;
            boolean r0 = r10.isEmpty()
            if (r0 == 0) goto L_0x0007
            return
        L_0x0007:
            java.util.ArrayList r7 = new java.util.ArrayList
            r7.<init>()
            int r0 = r9.currentAccount
            org.telegram.tgnet.TLRPC$Chat r5 = org.telegram.messenger.ChatObject.getChatByDialog(r11, r0)
            boolean r0 = org.telegram.messenger.ChatObject.isChannel(r5)
            if (r0 == 0) goto L_0x0026
            org.telegram.tgnet.TLRPC$TL_channels_getMessages r0 = new org.telegram.tgnet.TLRPC$TL_channels_getMessages
            r0.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r1 = getInputChannel((org.telegram.tgnet.TLRPC$Chat) r5)
            r0.channel = r1
            r0.id = r7
            goto L_0x002d
        L_0x0026:
            org.telegram.tgnet.TLRPC$TL_messages_getMessages r0 = new org.telegram.tgnet.TLRPC$TL_messages_getMessages
            r0.<init>()
            r0.id = r7
        L_0x002d:
            android.util.LongSparseArray<java.util.ArrayList<java.lang.Integer>> r1 = r9.reloadingMessages
            java.lang.Object r1 = r1.get(r11)
            java.util.ArrayList r1 = (java.util.ArrayList) r1
            r2 = 0
        L_0x0036:
            int r3 = r10.size()
            if (r2 >= r3) goto L_0x0051
            java.lang.Object r3 = r10.get(r2)
            java.lang.Integer r3 = (java.lang.Integer) r3
            if (r1 == 0) goto L_0x004b
            boolean r4 = r1.contains(r3)
            if (r4 == 0) goto L_0x004b
            goto L_0x004e
        L_0x004b:
            r7.add(r3)
        L_0x004e:
            int r2 = r2 + 1
            goto L_0x0036
        L_0x0051:
            boolean r10 = r7.isEmpty()
            if (r10 == 0) goto L_0x0058
            return
        L_0x0058:
            if (r1 != 0) goto L_0x0064
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            android.util.LongSparseArray<java.util.ArrayList<java.lang.Integer>> r10 = r9.reloadingMessages
            r10.put(r11, r1)
        L_0x0064:
            r1.addAll(r7)
            org.telegram.tgnet.ConnectionsManager r10 = r9.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$4OS8EIXUJJ0BTrZcyJXv8nv9ZEk r8 = new org.telegram.messenger.-$$Lambda$MessagesController$4OS8EIXUJJ0BTrZcyJXv8nv9ZEk
            r1 = r8
            r2 = r9
            r3 = r11
            r6 = r13
            r1.<init>(r3, r5, r6, r7)
            r10.sendRequest(r0, r8)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.reloadMessages(java.util.ArrayList, long, boolean):void");
    }

    public /* synthetic */ void lambda$reloadMessages$42$MessagesController(long j, TLRPC$Chat tLRPC$Chat, boolean z, ArrayList arrayList, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        long j2 = j;
        TLRPC$Chat tLRPC$Chat2 = tLRPC$Chat;
        if (tLRPC$TL_error == null) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
            SparseArray sparseArray = new SparseArray();
            for (int i = 0; i < tLRPC$messages_Messages.users.size(); i++) {
                TLRPC$User tLRPC$User = tLRPC$messages_Messages.users.get(i);
                sparseArray.put(tLRPC$User.id, tLRPC$User);
            }
            SparseArray sparseArray2 = new SparseArray();
            for (int i2 = 0; i2 < tLRPC$messages_Messages.chats.size(); i2++) {
                TLRPC$Chat tLRPC$Chat3 = tLRPC$messages_Messages.chats.get(i2);
                sparseArray2.put(tLRPC$Chat3.id, tLRPC$Chat3);
            }
            Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(j));
            if (num == null) {
                num = Integer.valueOf(getMessagesStorage().getDialogReadMax(false, j2));
                this.dialogs_read_inbox_max.put(Long.valueOf(j), num);
            }
            Integer num2 = this.dialogs_read_outbox_max.get(Long.valueOf(j));
            if (num2 == null) {
                num2 = Integer.valueOf(getMessagesStorage().getDialogReadMax(true, j2));
                this.dialogs_read_outbox_max.put(Long.valueOf(j), num2);
            }
            Integer num3 = num2;
            ArrayList arrayList2 = new ArrayList();
            int i3 = 0;
            while (i3 < tLRPC$messages_Messages.messages.size()) {
                TLRPC$Message tLRPC$Message = tLRPC$messages_Messages.messages.get(i3);
                if (tLRPC$Chat2 != null && tLRPC$Chat2.megagroup) {
                    tLRPC$Message.flags |= Integer.MIN_VALUE;
                }
                tLRPC$Message.dialog_id = j2;
                if (!z) {
                    tLRPC$Message.unread = (tLRPC$Message.out ? num3 : num).intValue() < tLRPC$Message.id;
                }
                MessageObject messageObject = r9;
                ArrayList arrayList3 = arrayList2;
                MessageObject messageObject2 = new MessageObject(this.currentAccount, tLRPC$Message, (SparseArray<TLRPC$User>) sparseArray, (SparseArray<TLRPC$Chat>) sparseArray2, true);
                arrayList3.add(messageObject);
                i3++;
                arrayList2 = arrayList3;
            }
            ImageLoader.saveMessagesThumbs(tLRPC$messages_Messages.messages);
            getMessagesStorage().putMessages(tLRPC$messages_Messages, j, -1, 0, false, z);
            AndroidUtilities.runOnUIThread(new Runnable(j, arrayList, arrayList2) {
                private final /* synthetic */ long f$1;
                private final /* synthetic */ ArrayList f$2;
                private final /* synthetic */ ArrayList f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r4;
                    this.f$3 = r5;
                }

                public final void run() {
                    MessagesController.this.lambda$null$41$MessagesController(this.f$1, this.f$2, this.f$3);
                }
            });
        }
    }

    public /* synthetic */ void lambda$null$41$MessagesController(long j, ArrayList arrayList, ArrayList arrayList2) {
        ArrayList arrayList3 = this.reloadingMessages.get(j);
        if (arrayList3 != null) {
            arrayList3.removeAll(arrayList);
            if (arrayList3.isEmpty()) {
                this.reloadingMessages.remove(j);
            }
        }
        MessageObject messageObject = this.dialogMessage.get(j);
        if (messageObject != null) {
            int i = 0;
            while (true) {
                if (i >= arrayList2.size()) {
                    break;
                }
                MessageObject messageObject2 = (MessageObject) arrayList2.get(i);
                if (messageObject == null || messageObject.getId() != messageObject2.getId()) {
                    i++;
                } else {
                    this.dialogMessage.put(j, messageObject2);
                    if (messageObject2.messageOwner.to_id.channel_id == 0) {
                        MessageObject messageObject3 = this.dialogMessagesByIds.get(messageObject2.getId());
                        this.dialogMessagesByIds.remove(messageObject2.getId());
                        if (messageObject3 != null) {
                            this.dialogMessagesByIds.put(messageObject3.getId(), messageObject3);
                        }
                    }
                    getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                }
            }
        }
        getNotificationCenter().postNotificationName(NotificationCenter.replaceMessagesObjects, Long.valueOf(j), arrayList2);
    }

    public void hidePeerSettingsBar(long j, TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat) {
        if (tLRPC$User != null || tLRPC$Chat != null) {
            SharedPreferences.Editor edit = this.notificationsPreferences.edit();
            edit.putInt("dialog_bar_vis3" + j, 3);
            edit.commit();
            if (((int) j) != 0) {
                TLRPC$TL_messages_hidePeerSettingsBar tLRPC$TL_messages_hidePeerSettingsBar = new TLRPC$TL_messages_hidePeerSettingsBar();
                if (tLRPC$User != null) {
                    tLRPC$TL_messages_hidePeerSettingsBar.peer = getInputPeer(tLRPC$User.id);
                } else if (tLRPC$Chat != null) {
                    tLRPC$TL_messages_hidePeerSettingsBar.peer = getInputPeer(-tLRPC$Chat.id);
                }
                getConnectionsManager().sendRequest(tLRPC$TL_messages_hidePeerSettingsBar, $$Lambda$MessagesController$ywOyQuo31lE3VTBnmUb42JIuw5Q.INSTANCE);
            }
        }
    }

    public void reportSpam(long j, TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat, TLRPC$EncryptedChat tLRPC$EncryptedChat, boolean z) {
        if (tLRPC$User != null || tLRPC$Chat != null || tLRPC$EncryptedChat != null) {
            SharedPreferences.Editor edit = this.notificationsPreferences.edit();
            edit.putInt("dialog_bar_vis3" + j, 3);
            edit.commit();
            if (((int) j) != 0) {
                TLRPC$TL_account_reportPeer tLRPC$TL_account_reportPeer = new TLRPC$TL_account_reportPeer();
                if (tLRPC$Chat != null) {
                    tLRPC$TL_account_reportPeer.peer = getInputPeer(-tLRPC$Chat.id);
                } else if (tLRPC$User != null) {
                    tLRPC$TL_account_reportPeer.peer = getInputPeer(tLRPC$User.id);
                }
                if (z) {
                    tLRPC$TL_account_reportPeer.reason = new TLRPC$TL_inputReportReasonGeoIrrelevant();
                } else {
                    tLRPC$TL_account_reportPeer.reason = new TLRPC$TL_inputReportReasonSpam();
                }
                getConnectionsManager().sendRequest(tLRPC$TL_account_reportPeer, $$Lambda$MessagesController$IV4X1EezYecq4aGhvxumigpSpN4.INSTANCE, 2);
            } else if (tLRPC$EncryptedChat != null && tLRPC$EncryptedChat.access_hash != 0) {
                TLRPC$TL_messages_reportEncryptedSpam tLRPC$TL_messages_reportEncryptedSpam = new TLRPC$TL_messages_reportEncryptedSpam();
                TLRPC$TL_inputEncryptedChat tLRPC$TL_inputEncryptedChat = new TLRPC$TL_inputEncryptedChat();
                tLRPC$TL_messages_reportEncryptedSpam.peer = tLRPC$TL_inputEncryptedChat;
                tLRPC$TL_inputEncryptedChat.chat_id = tLRPC$EncryptedChat.id;
                tLRPC$TL_inputEncryptedChat.access_hash = tLRPC$EncryptedChat.access_hash;
                getConnectionsManager().sendRequest(tLRPC$TL_messages_reportEncryptedSpam, $$Lambda$MessagesController$pyDSKuLJZuQKU1MwTQbnksxBF8.INSTANCE, 2);
            }
        }
    }

    private void savePeerSettings(long j, TLRPC$TL_peerSettings tLRPC$TL_peerSettings, boolean z) {
        if (tLRPC$TL_peerSettings != null) {
            SharedPreferences sharedPreferences = this.notificationsPreferences;
            if (sharedPreferences.getInt("dialog_bar_vis3" + j, 0) != 3) {
                SharedPreferences.Editor edit = this.notificationsPreferences.edit();
                boolean z2 = !tLRPC$TL_peerSettings.report_spam && !tLRPC$TL_peerSettings.add_contact && !tLRPC$TL_peerSettings.block_contact && !tLRPC$TL_peerSettings.share_contact && !tLRPC$TL_peerSettings.report_geo;
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("peer settings loaded for " + j + " add = " + tLRPC$TL_peerSettings.add_contact + " block = " + tLRPC$TL_peerSettings.block_contact + " spam = " + tLRPC$TL_peerSettings.report_spam + " share = " + tLRPC$TL_peerSettings.share_contact + " geo = " + tLRPC$TL_peerSettings.report_geo + " hide = " + z2);
                }
                edit.putInt("dialog_bar_vis3" + j, z2 ? 1 : 2);
                edit.putBoolean("dialog_bar_share" + j, tLRPC$TL_peerSettings.share_contact);
                edit.putBoolean("dialog_bar_report" + j, tLRPC$TL_peerSettings.report_spam);
                edit.putBoolean("dialog_bar_add" + j, tLRPC$TL_peerSettings.add_contact);
                edit.putBoolean("dialog_bar_block" + j, tLRPC$TL_peerSettings.block_contact);
                edit.putBoolean("dialog_bar_exception" + j, tLRPC$TL_peerSettings.need_contacts_exception);
                edit.putBoolean("dialog_bar_location" + j, tLRPC$TL_peerSettings.report_geo);
                edit.commit();
                getNotificationCenter().postNotificationName(NotificationCenter.peerSettingsDidLoad, Long.valueOf(j));
            }
        }
    }

    public void loadPeerSettings(TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat) {
        int i;
        if (tLRPC$User != null || tLRPC$Chat != null) {
            if (tLRPC$User != null) {
                i = tLRPC$User.id;
            } else {
                i = -tLRPC$Chat.id;
            }
            long j = (long) i;
            if (this.loadingPeerSettings.indexOfKey(j) < 0) {
                this.loadingPeerSettings.put(j, true);
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("request spam button for " + j);
                }
                SharedPreferences sharedPreferences = this.notificationsPreferences;
                int i2 = sharedPreferences.getInt("dialog_bar_vis3" + j, 0);
                if (i2 != 1 && i2 != 3) {
                    TLRPC$TL_messages_getPeerSettings tLRPC$TL_messages_getPeerSettings = new TLRPC$TL_messages_getPeerSettings();
                    if (tLRPC$User != null) {
                        tLRPC$TL_messages_getPeerSettings.peer = getInputPeer(tLRPC$User.id);
                    } else if (tLRPC$Chat != null) {
                        tLRPC$TL_messages_getPeerSettings.peer = getInputPeer(-tLRPC$Chat.id);
                    }
                    getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerSettings, new RequestDelegate(j) {
                        private final /* synthetic */ long f$1;

                        {
                            this.f$1 = r2;
                        }

                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$loadPeerSettings$47$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                        }
                    });
                } else if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("dialog bar already hidden for " + j);
                }
            }
        }
    }

    public /* synthetic */ void lambda$loadPeerSettings$47$MessagesController(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable(j, tLObject) {
            private final /* synthetic */ long f$1;
            private final /* synthetic */ TLObject f$2;

            {
                this.f$1 = r2;
                this.f$2 = r4;
            }

            public final void run() {
                MessagesController.this.lambda$null$46$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$null$46$MessagesController(long j, TLObject tLObject) {
        this.loadingPeerSettings.remove(j);
        if (tLObject != null) {
            savePeerSettings(j, (TLRPC$TL_peerSettings) tLObject, false);
        }
    }

    /* access modifiers changed from: protected */
    public void processNewChannelDifferenceParams(int i, int i2, int i3) {
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("processNewChannelDifferenceParams pts = " + i + " pts_count = " + i2 + " channeldId = " + i3);
        }
        int i4 = this.channelsPts.get(i3);
        if (i4 == 0) {
            i4 = getMessagesStorage().getChannelPtsSync(i3);
            if (i4 == 0) {
                i4 = 1;
            }
            this.channelsPts.put(i3, i4);
        }
        if (i4 + i2 == i) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("APPLY CHANNEL PTS");
            }
            this.channelsPts.put(i3, i);
            getMessagesStorage().saveChannelPts(i3, i);
        } else if (i4 != i) {
            long j = this.updatesStartWaitTimeChannels.get(i3);
            if (this.gettingDifferenceChannels.get(i3) || j == 0 || Math.abs(System.currentTimeMillis() - j) <= 1500) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("ADD CHANNEL UPDATE TO QUEUE pts = " + i + " pts_count = " + i2);
                }
                if (j == 0) {
                    this.updatesStartWaitTimeChannels.put(i3, System.currentTimeMillis());
                }
                UserActionUpdatesPts userActionUpdatesPts = new UserActionUpdatesPts();
                userActionUpdatesPts.pts = i;
                userActionUpdatesPts.pts_count = i2;
                userActionUpdatesPts.chat_id = i3;
                ArrayList arrayList = this.updatesQueueChannels.get(i3);
                if (arrayList == null) {
                    arrayList = new ArrayList();
                    this.updatesQueueChannels.put(i3, arrayList);
                }
                arrayList.add(userActionUpdatesPts);
                return;
            }
            getChannelDifference(i3);
        }
    }

    /* access modifiers changed from: protected */
    public void processNewDifferenceParams(int i, int i2, int i3, int i4) {
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("processNewDifferenceParams seq = " + i + " pts = " + i2 + " date = " + i3 + " pts_count = " + i4);
        }
        if (i2 != -1) {
            if (getMessagesStorage().getLastPtsValue() + i4 == i2) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("APPLY PTS");
                }
                getMessagesStorage().setLastPtsValue(i2);
                getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
            } else if (getMessagesStorage().getLastPtsValue() != i2) {
                if (this.gettingDifference || this.updatesStartWaitTimePts == 0 || Math.abs(System.currentTimeMillis() - this.updatesStartWaitTimePts) <= 1500) {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("ADD UPDATE TO QUEUE pts = " + i2 + " pts_count = " + i4);
                    }
                    if (this.updatesStartWaitTimePts == 0) {
                        this.updatesStartWaitTimePts = System.currentTimeMillis();
                    }
                    UserActionUpdatesPts userActionUpdatesPts = new UserActionUpdatesPts();
                    userActionUpdatesPts.pts = i2;
                    userActionUpdatesPts.pts_count = i4;
                    this.updatesQueuePts.add(userActionUpdatesPts);
                } else {
                    getDifference();
                }
            }
        }
        if (i == -1) {
            return;
        }
        if (getMessagesStorage().getLastSeqValue() + 1 == i) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("APPLY SEQ");
            }
            getMessagesStorage().setLastSeqValue(i);
            if (i3 != -1) {
                getMessagesStorage().setLastDateValue(i3);
            }
            getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
        } else if (getMessagesStorage().getLastSeqValue() == i) {
        } else {
            if (this.gettingDifference || this.updatesStartWaitTimeSeq == 0 || Math.abs(System.currentTimeMillis() - this.updatesStartWaitTimeSeq) <= 1500) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("ADD UPDATE TO QUEUE seq = " + i);
                }
                if (this.updatesStartWaitTimeSeq == 0) {
                    this.updatesStartWaitTimeSeq = System.currentTimeMillis();
                }
                UserActionUpdatesSeq userActionUpdatesSeq = new UserActionUpdatesSeq();
                userActionUpdatesSeq.seq = i;
                this.updatesQueueSeq.add(userActionUpdatesSeq);
                return;
            }
            getDifference();
        }
    }

    public void didAddedNewTask(int i, SparseArray<ArrayList<Long>> sparseArray) {
        Utilities.stageQueue.postRunnable(new Runnable(i) {
            private final /* synthetic */ int f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$didAddedNewTask$48$MessagesController(this.f$1);
            }
        });
        AndroidUtilities.runOnUIThread(new Runnable(sparseArray) {
            private final /* synthetic */ SparseArray f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$didAddedNewTask$49$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$didAddedNewTask$48$MessagesController(int i) {
        int i2;
        if ((this.currentDeletingTaskMids == null && !this.gettingNewDeleteTask) || ((i2 = this.currentDeletingTaskTime) != 0 && i < i2)) {
            getNewDeleteTask((ArrayList<Integer>) null, 0);
        }
    }

    public /* synthetic */ void lambda$didAddedNewTask$49$MessagesController(SparseArray sparseArray) {
        getNotificationCenter().postNotificationName(NotificationCenter.didCreatedNewDeleteTask, sparseArray);
    }

    public void getNewDeleteTask(ArrayList<Integer> arrayList, int i) {
        Utilities.stageQueue.postRunnable(new Runnable(arrayList, i) {
            private final /* synthetic */ ArrayList f$1;
            private final /* synthetic */ int f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$getNewDeleteTask$50$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$getNewDeleteTask$50$MessagesController(ArrayList arrayList, int i) {
        this.gettingNewDeleteTask = true;
        getMessagesStorage().getNewTask(arrayList, i);
    }

    private boolean checkDeletingTask(boolean z) {
        int i;
        int currentTime = getConnectionsManager().getCurrentTime();
        if (this.currentDeletingTaskMids == null || (!z && ((i = this.currentDeletingTaskTime) == 0 || i > currentTime))) {
            return false;
        }
        this.currentDeletingTaskTime = 0;
        if (this.currentDeleteTaskRunnable != null && !z) {
            Utilities.stageQueue.cancelRunnable(this.currentDeleteTaskRunnable);
        }
        this.currentDeleteTaskRunnable = null;
        AndroidUtilities.runOnUIThread(new Runnable(new ArrayList(this.currentDeletingTaskMids)) {
            private final /* synthetic */ ArrayList f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$checkDeletingTask$52$MessagesController(this.f$1);
            }
        });
        return true;
    }

    public /* synthetic */ void lambda$checkDeletingTask$52$MessagesController(ArrayList arrayList) {
        if (arrayList.isEmpty() || ((Integer) arrayList.get(0)).intValue() <= 0) {
            deleteMessages(arrayList, (ArrayList<Long>) null, (TLRPC$EncryptedChat) null, 0, 0, false, false);
        } else {
            getMessagesStorage().emptyMessagesMedia(arrayList);
        }
        Utilities.stageQueue.postRunnable(new Runnable(arrayList) {
            private final /* synthetic */ ArrayList f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$51$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$null$51$MessagesController(ArrayList arrayList) {
        getNewDeleteTask(arrayList, this.currentDeletingTaskChannelId);
        this.currentDeletingTaskTime = 0;
        this.currentDeletingTaskMids = null;
    }

    public void processLoadedDeleteTask(int i, ArrayList<Integer> arrayList, int i2) {
        Utilities.stageQueue.postRunnable(new Runnable(arrayList, i) {
            private final /* synthetic */ ArrayList f$1;
            private final /* synthetic */ int f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$processLoadedDeleteTask$54$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$processLoadedDeleteTask$54$MessagesController(ArrayList arrayList, int i) {
        this.gettingNewDeleteTask = false;
        if (arrayList != null) {
            this.currentDeletingTaskTime = i;
            this.currentDeletingTaskMids = arrayList;
            if (this.currentDeleteTaskRunnable != null) {
                Utilities.stageQueue.cancelRunnable(this.currentDeleteTaskRunnable);
                this.currentDeleteTaskRunnable = null;
            }
            if (!checkDeletingTask(false)) {
                this.currentDeleteTaskRunnable = new Runnable() {
                    public final void run() {
                        MessagesController.this.lambda$null$53$MessagesController();
                    }
                };
                Utilities.stageQueue.postRunnable(this.currentDeleteTaskRunnable, ((long) Math.abs(getConnectionsManager().getCurrentTime() - this.currentDeletingTaskTime)) * 1000);
                return;
            }
            return;
        }
        this.currentDeletingTaskTime = 0;
        this.currentDeletingTaskMids = null;
    }

    public /* synthetic */ void lambda$null$53$MessagesController() {
        checkDeletingTask(true);
    }

    public void loadDialogPhotos(int i, int i2, long j, boolean z, int i3) {
        if (z) {
            getMessagesStorage().getDialogPhotos(i, i2, j, i3);
        } else if (i > 0) {
            TLRPC$User user = getUser(Integer.valueOf(i));
            if (user != null) {
                TLRPC$TL_photos_getUserPhotos tLRPC$TL_photos_getUserPhotos = new TLRPC$TL_photos_getUserPhotos();
                tLRPC$TL_photos_getUserPhotos.limit = i2;
                tLRPC$TL_photos_getUserPhotos.offset = 0;
                tLRPC$TL_photos_getUserPhotos.max_id = (long) ((int) j);
                tLRPC$TL_photos_getUserPhotos.user_id = getInputUser(user);
                getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tLRPC$TL_photos_getUserPhotos, new RequestDelegate(i, i2, j, i3) {
                    private final /* synthetic */ int f$1;
                    private final /* synthetic */ int f$2;
                    private final /* synthetic */ long f$3;
                    private final /* synthetic */ int f$4;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                        this.f$3 = r4;
                        this.f$4 = r6;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$loadDialogPhotos$55$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, tLObject, tLRPC$TL_error);
                    }
                }), i3);
            }
        } else if (i < 0) {
            TLRPC$TL_messages_search tLRPC$TL_messages_search = new TLRPC$TL_messages_search();
            tLRPC$TL_messages_search.filter = new TLRPC$TL_inputMessagesFilterChatPhotos();
            tLRPC$TL_messages_search.limit = i2;
            tLRPC$TL_messages_search.offset_id = (int) j;
            tLRPC$TL_messages_search.q = "";
            tLRPC$TL_messages_search.peer = getInputPeer(i);
            getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(tLRPC$TL_messages_search, new RequestDelegate(i, i2, j, i3) {
                private final /* synthetic */ int f$1;
                private final /* synthetic */ int f$2;
                private final /* synthetic */ long f$3;
                private final /* synthetic */ int f$4;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r6;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$loadDialogPhotos$56$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, tLObject, tLRPC$TL_error);
                }
            }), i3);
        }
    }

    public /* synthetic */ void lambda$loadDialogPhotos$55$MessagesController(int i, int i2, long j, int i3, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processLoadedUserPhotos((TLRPC$photos_Photos) tLObject, i, i2, j, false, i3);
        }
    }

    public /* synthetic */ void lambda$loadDialogPhotos$56$MessagesController(int i, int i2, long j, int i3, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        TLRPC$Photo tLRPC$Photo;
        if (tLRPC$TL_error == null) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
            TLRPC$TL_photos_photos tLRPC$TL_photos_photos = new TLRPC$TL_photos_photos();
            tLRPC$TL_photos_photos.count = tLRPC$messages_Messages.count;
            tLRPC$TL_photos_photos.users.addAll(tLRPC$messages_Messages.users);
            for (int i4 = 0; i4 < tLRPC$messages_Messages.messages.size(); i4++) {
                TLRPC$MessageAction tLRPC$MessageAction = tLRPC$messages_Messages.messages.get(i4).action;
                if (!(tLRPC$MessageAction == null || (tLRPC$Photo = tLRPC$MessageAction.photo) == null)) {
                    tLRPC$TL_photos_photos.photos.add(tLRPC$Photo);
                }
            }
            processLoadedUserPhotos(tLRPC$TL_photos_photos, i, i2, j, false, i3);
        }
    }

    public void blockUser(int i) {
        TLRPC$User user = getUser(Integer.valueOf(i));
        if (user != null && this.blockedUsers.indexOfKey(i) < 0) {
            this.blockedUsers.put(i, 1);
            if (user.bot) {
                getMediaDataController().removeInline(i);
            } else {
                getMediaDataController().removePeer(i);
            }
            int i2 = this.totalBlockedCount;
            if (i2 >= 0) {
                this.totalBlockedCount = i2 + 1;
            }
            getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
            TLRPC$TL_contacts_block tLRPC$TL_contacts_block = new TLRPC$TL_contacts_block();
            tLRPC$TL_contacts_block.id = getInputUser(user);
            getConnectionsManager().sendRequest(tLRPC$TL_contacts_block, $$Lambda$MessagesController$ScFi8fLQ1A_2b3Vq0tFcMctwnN0.INSTANCE);
        }
    }

    public void setUserBannedRole(int i, TLRPC$User tLRPC$User, TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights, boolean z, BaseFragment baseFragment) {
        if (tLRPC$User != null && tLRPC$TL_chatBannedRights != null) {
            TLRPC$TL_channels_editBanned tLRPC$TL_channels_editBanned = new TLRPC$TL_channels_editBanned();
            tLRPC$TL_channels_editBanned.channel = getInputChannel(i);
            tLRPC$TL_channels_editBanned.user_id = getInputUser(tLRPC$User);
            tLRPC$TL_channels_editBanned.banned_rights = tLRPC$TL_chatBannedRights;
            getConnectionsManager().sendRequest(tLRPC$TL_channels_editBanned, new RequestDelegate(i, baseFragment, tLRPC$TL_channels_editBanned, z) {
                private final /* synthetic */ int f$1;
                private final /* synthetic */ BaseFragment f$2;
                private final /* synthetic */ TLRPC$TL_channels_editBanned f$3;
                private final /* synthetic */ boolean f$4;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r5;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$setUserBannedRole$60$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$setUserBannedRole$60$MessagesController(int i, BaseFragment baseFragment, TLRPC$TL_channels_editBanned tLRPC$TL_channels_editBanned, boolean z, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable(i) {
                private final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$58$MessagesController(this.f$1);
                }
            }, 1000);
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_error, baseFragment, tLRPC$TL_channels_editBanned, z) {
            private final /* synthetic */ TLRPC$TL_error f$1;
            private final /* synthetic */ BaseFragment f$2;
            private final /* synthetic */ TLRPC$TL_channels_editBanned f$3;
            private final /* synthetic */ boolean f$4;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
            }

            public final void run() {
                MessagesController.this.lambda$null$59$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4);
            }
        });
    }

    public /* synthetic */ void lambda$null$58$MessagesController(int i) {
        loadFullChat(i, 0, true);
    }

    public /* synthetic */ void lambda$null$59$MessagesController(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_channels_editBanned tLRPC$TL_channels_editBanned, boolean z) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_channels_editBanned, Boolean.valueOf(z));
    }

    public void setChannelSlowMode(int i, int i2) {
        TLRPC$TL_channels_toggleSlowMode tLRPC$TL_channels_toggleSlowMode = new TLRPC$TL_channels_toggleSlowMode();
        tLRPC$TL_channels_toggleSlowMode.seconds = i2;
        tLRPC$TL_channels_toggleSlowMode.channel = getInputChannel(i);
        getConnectionsManager().sendRequest(tLRPC$TL_channels_toggleSlowMode, new RequestDelegate(i) {
            private final /* synthetic */ int f$1;

            {
                this.f$1 = r2;
            }

            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$setChannelSlowMode$62$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$setChannelSlowMode$62$MessagesController(int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            getMessagesController().processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable(i) {
                private final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$61$MessagesController(this.f$1);
                }
            }, 1000);
        }
    }

    public /* synthetic */ void lambda$null$61$MessagesController(int i) {
        loadFullChat(i, 0, true);
    }

    public void setDefaultBannedRole(int i, TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights, boolean z, BaseFragment baseFragment) {
        if (tLRPC$TL_chatBannedRights != null) {
            TLRPC$TL_messages_editChatDefaultBannedRights tLRPC$TL_messages_editChatDefaultBannedRights = new TLRPC$TL_messages_editChatDefaultBannedRights();
            tLRPC$TL_messages_editChatDefaultBannedRights.peer = getInputPeer(-i);
            tLRPC$TL_messages_editChatDefaultBannedRights.banned_rights = tLRPC$TL_chatBannedRights;
            getConnectionsManager().sendRequest(tLRPC$TL_messages_editChatDefaultBannedRights, new RequestDelegate(i, baseFragment, tLRPC$TL_messages_editChatDefaultBannedRights, z) {
                private final /* synthetic */ int f$1;
                private final /* synthetic */ BaseFragment f$2;
                private final /* synthetic */ TLRPC$TL_messages_editChatDefaultBannedRights f$3;
                private final /* synthetic */ boolean f$4;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r5;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$setDefaultBannedRole$65$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$setDefaultBannedRole$65$MessagesController(int i, BaseFragment baseFragment, TLRPC$TL_messages_editChatDefaultBannedRights tLRPC$TL_messages_editChatDefaultBannedRights, boolean z, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable(i) {
                private final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$63$MessagesController(this.f$1);
                }
            }, 1000);
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_error, baseFragment, tLRPC$TL_messages_editChatDefaultBannedRights, z) {
            private final /* synthetic */ TLRPC$TL_error f$1;
            private final /* synthetic */ BaseFragment f$2;
            private final /* synthetic */ TLRPC$TL_messages_editChatDefaultBannedRights f$3;
            private final /* synthetic */ boolean f$4;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
            }

            public final void run() {
                MessagesController.this.lambda$null$64$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4);
            }
        });
    }

    public /* synthetic */ void lambda$null$63$MessagesController(int i) {
        loadFullChat(i, 0, true);
    }

    public /* synthetic */ void lambda$null$64$MessagesController(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_messages_editChatDefaultBannedRights tLRPC$TL_messages_editChatDefaultBannedRights, boolean z) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_messages_editChatDefaultBannedRights, Boolean.valueOf(z));
    }

    public void setUserAdminRole(int i, TLRPC$User tLRPC$User, TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights, String str, boolean z, BaseFragment baseFragment, boolean z2) {
        if (tLRPC$User != null && tLRPC$TL_chatAdminRights != null) {
            TLRPC$Chat chat = getChat(Integer.valueOf(i));
            if (ChatObject.isChannel(chat)) {
                TLRPC$TL_channels_editAdmin tLRPC$TL_channels_editAdmin = new TLRPC$TL_channels_editAdmin();
                tLRPC$TL_channels_editAdmin.channel = getInputChannel(chat);
                tLRPC$TL_channels_editAdmin.user_id = getInputUser(tLRPC$User);
                tLRPC$TL_channels_editAdmin.admin_rights = tLRPC$TL_chatAdminRights;
                tLRPC$TL_channels_editAdmin.rank = str;
                getConnectionsManager().sendRequest(tLRPC$TL_channels_editAdmin, new RequestDelegate(i, baseFragment, tLRPC$TL_channels_editAdmin, z) {
                    private final /* synthetic */ int f$1;
                    private final /* synthetic */ BaseFragment f$2;
                    private final /* synthetic */ TLRPC$TL_channels_editAdmin f$3;
                    private final /* synthetic */ boolean f$4;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                        this.f$3 = r4;
                        this.f$4 = r5;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$setUserAdminRole$68$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, tLObject, tLRPC$TL_error);
                    }
                });
                return;
            }
            TLRPC$TL_messages_editChatAdmin tLRPC$TL_messages_editChatAdmin = new TLRPC$TL_messages_editChatAdmin();
            tLRPC$TL_messages_editChatAdmin.chat_id = i;
            tLRPC$TL_messages_editChatAdmin.user_id = getInputUser(tLRPC$User);
            tLRPC$TL_messages_editChatAdmin.is_admin = tLRPC$TL_chatAdminRights.change_info || tLRPC$TL_chatAdminRights.delete_messages || tLRPC$TL_chatAdminRights.ban_users || tLRPC$TL_chatAdminRights.invite_users || tLRPC$TL_chatAdminRights.pin_messages || tLRPC$TL_chatAdminRights.add_admins;
            $$Lambda$MessagesController$CLDMkb21DXNHpca97iuxkIgLuM r11 = new RequestDelegate(i, baseFragment, tLRPC$TL_messages_editChatAdmin) {
                private final /* synthetic */ int f$1;
                private final /* synthetic */ BaseFragment f$2;
                private final /* synthetic */ TLRPC$TL_messages_editChatAdmin f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$setUserAdminRole$71$MessagesController(this.f$1, this.f$2, this.f$3, tLObject, tLRPC$TL_error);
                }
            };
            if (!tLRPC$TL_messages_editChatAdmin.is_admin || !z2) {
                getConnectionsManager().sendRequest(tLRPC$TL_messages_editChatAdmin, r11);
            } else {
                addUserToChat(i, tLRPC$User, (TLRPC$ChatFull) null, 0, (String) null, baseFragment, new Runnable(tLRPC$TL_messages_editChatAdmin, r11) {
                    private final /* synthetic */ TLRPC$TL_messages_editChatAdmin f$1;
                    private final /* synthetic */ RequestDelegate f$2;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                    }

                    public final void run() {
                        MessagesController.this.lambda$setUserAdminRole$72$MessagesController(this.f$1, this.f$2);
                    }
                });
            }
        }
    }

    public /* synthetic */ void lambda$setUserAdminRole$68$MessagesController(int i, BaseFragment baseFragment, TLRPC$TL_channels_editAdmin tLRPC$TL_channels_editAdmin, boolean z, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable(i) {
                private final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$66$MessagesController(this.f$1);
                }
            }, 1000);
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_error, baseFragment, tLRPC$TL_channels_editAdmin, z) {
            private final /* synthetic */ TLRPC$TL_error f$1;
            private final /* synthetic */ BaseFragment f$2;
            private final /* synthetic */ TLRPC$TL_channels_editAdmin f$3;
            private final /* synthetic */ boolean f$4;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
            }

            public final void run() {
                MessagesController.this.lambda$null$67$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4);
            }
        });
    }

    public /* synthetic */ void lambda$null$66$MessagesController(int i) {
        loadFullChat(i, 0, true);
    }

    public /* synthetic */ void lambda$null$67$MessagesController(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_channels_editAdmin tLRPC$TL_channels_editAdmin, boolean z) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_channels_editAdmin, Boolean.valueOf(z));
    }

    public /* synthetic */ void lambda$null$69$MessagesController(int i) {
        loadFullChat(i, 0, true);
    }

    public /* synthetic */ void lambda$setUserAdminRole$71$MessagesController(int i, BaseFragment baseFragment, TLRPC$TL_messages_editChatAdmin tLRPC$TL_messages_editChatAdmin, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            AndroidUtilities.runOnUIThread(new Runnable(i) {
                private final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$69$MessagesController(this.f$1);
                }
            }, 1000);
        } else {
            AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_error, baseFragment, tLRPC$TL_messages_editChatAdmin) {
                private final /* synthetic */ TLRPC$TL_error f$1;
                private final /* synthetic */ BaseFragment f$2;
                private final /* synthetic */ TLRPC$TL_messages_editChatAdmin f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run() {
                    MessagesController.this.lambda$null$70$MessagesController(this.f$1, this.f$2, this.f$3);
                }
            });
        }
    }

    public /* synthetic */ void lambda$null$70$MessagesController(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_messages_editChatAdmin tLRPC$TL_messages_editChatAdmin) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_messages_editChatAdmin, false);
    }

    public /* synthetic */ void lambda$setUserAdminRole$72$MessagesController(TLRPC$TL_messages_editChatAdmin tLRPC$TL_messages_editChatAdmin, RequestDelegate requestDelegate) {
        getConnectionsManager().sendRequest(tLRPC$TL_messages_editChatAdmin, requestDelegate);
    }

    public void unblockUser(int i) {
        TLRPC$TL_contacts_unblock tLRPC$TL_contacts_unblock = new TLRPC$TL_contacts_unblock();
        TLRPC$User user = getUser(Integer.valueOf(i));
        if (user != null) {
            this.totalBlockedCount--;
            this.blockedUsers.delete(user.id);
            tLRPC$TL_contacts_unblock.id = getInputUser(user);
            getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
            getConnectionsManager().sendRequest(tLRPC$TL_contacts_unblock, $$Lambda$MessagesController$egPYFUimpyOBudz6sAxJBwWsAQ.INSTANCE);
        }
    }

    public void getBlockedUsers(boolean z) {
        int i;
        if (getUserConfig().isClientActivated() && !this.loadingBlockedUsers) {
            this.loadingBlockedUsers = true;
            TLRPC$TL_contacts_getBlocked tLRPC$TL_contacts_getBlocked = new TLRPC$TL_contacts_getBlocked();
            if (z) {
                i = 0;
            } else {
                i = this.blockedUsers.size();
            }
            tLRPC$TL_contacts_getBlocked.offset = i;
            tLRPC$TL_contacts_getBlocked.limit = z ? 20 : 100;
            getConnectionsManager().sendRequest(tLRPC$TL_contacts_getBlocked, new RequestDelegate(z, tLRPC$TL_contacts_getBlocked) {
                private final /* synthetic */ boolean f$1;
                private final /* synthetic */ TLRPC$TL_contacts_getBlocked f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$getBlockedUsers$75$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$getBlockedUsers$75$MessagesController(boolean z, TLRPC$TL_contacts_getBlocked tLRPC$TL_contacts_getBlocked, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable(tLObject, z, tLRPC$TL_contacts_getBlocked) {
            private final /* synthetic */ TLObject f$1;
            private final /* synthetic */ boolean f$2;
            private final /* synthetic */ TLRPC$TL_contacts_getBlocked f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesController.this.lambda$null$74$MessagesController(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    public /* synthetic */ void lambda$null$74$MessagesController(TLObject tLObject, boolean z, TLRPC$TL_contacts_getBlocked tLRPC$TL_contacts_getBlocked) {
        if (tLObject != null) {
            TLRPC$contacts_Blocked tLRPC$contacts_Blocked = (TLRPC$contacts_Blocked) tLObject;
            putUsers(tLRPC$contacts_Blocked.users, false);
            getMessagesStorage().putUsersAndChats(tLRPC$contacts_Blocked.users, (ArrayList<TLRPC$Chat>) null, true, true);
            if (z) {
                this.blockedUsers.clear();
            }
            this.totalBlockedCount = Math.max(tLRPC$contacts_Blocked.count, tLRPC$contacts_Blocked.blocked.size());
            this.blockedEndReached = tLRPC$contacts_Blocked.blocked.size() < tLRPC$TL_contacts_getBlocked.limit;
            int size = tLRPC$contacts_Blocked.blocked.size();
            for (int i = 0; i < size; i++) {
                this.blockedUsers.put(tLRPC$contacts_Blocked.blocked.get(i).user_id, 1);
            }
            this.loadingBlockedUsers = false;
            getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
        }
    }

    public void deleteUserPhoto(TLRPC$InputPhoto tLRPC$InputPhoto) {
        if (tLRPC$InputPhoto == null) {
            TLRPC$TL_photos_updateProfilePhoto tLRPC$TL_photos_updateProfilePhoto = new TLRPC$TL_photos_updateProfilePhoto();
            tLRPC$TL_photos_updateProfilePhoto.id = new TLRPC$TL_inputPhotoEmpty();
            getUserConfig().getCurrentUser().photo = new TLRPC$TL_userProfilePhotoEmpty();
            TLRPC$User user = getUser(Integer.valueOf(getUserConfig().getClientUserId()));
            if (user == null) {
                user = getUserConfig().getCurrentUser();
            }
            if (user != null) {
                user.photo = getUserConfig().getCurrentUser().photo;
                getNotificationCenter().postNotificationName(NotificationCenter.mainUserInfoChanged, new Object[0]);
                getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 1535);
                getConnectionsManager().sendRequest(tLRPC$TL_photos_updateProfilePhoto, new RequestDelegate() {
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$deleteUserPhoto$77$MessagesController(tLObject, tLRPC$TL_error);
                    }
                });
                return;
            }
            return;
        }
        TLRPC$TL_photos_deletePhotos tLRPC$TL_photos_deletePhotos = new TLRPC$TL_photos_deletePhotos();
        tLRPC$TL_photos_deletePhotos.id.add(tLRPC$InputPhoto);
        getConnectionsManager().sendRequest(tLRPC$TL_photos_deletePhotos, $$Lambda$MessagesController$i0kdyxWOaafNuRX8AIyy2DhWzI.INSTANCE);
    }

    public /* synthetic */ void lambda$deleteUserPhoto$77$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$User user = getUser(Integer.valueOf(getUserConfig().getClientUserId()));
            if (user == null) {
                user = getUserConfig().getCurrentUser();
                putUser(user, false);
            } else {
                getUserConfig().setCurrentUser(user);
            }
            if (user != null) {
                getMessagesStorage().clearUserPhotos(user.id);
                ArrayList arrayList = new ArrayList();
                arrayList.add(user);
                getMessagesStorage().putUsersAndChats(arrayList, (ArrayList<TLRPC$Chat>) null, false, true);
                user.photo = (TLRPC$UserProfilePhoto) tLObject;
                AndroidUtilities.runOnUIThread(new Runnable() {
                    public final void run() {
                        MessagesController.this.lambda$null$76$MessagesController();
                    }
                });
            }
        }
    }

    public /* synthetic */ void lambda$null$76$MessagesController() {
        getNotificationCenter().postNotificationName(NotificationCenter.mainUserInfoChanged, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 1535);
        getUserConfig().saveConfig(true);
    }

    public void processLoadedUserPhotos(TLRPC$photos_Photos tLRPC$photos_Photos, int i, int i2, long j, boolean z, int i3) {
        if (!z) {
            getMessagesStorage().putUsersAndChats(tLRPC$photos_Photos.users, (ArrayList<TLRPC$Chat>) null, true, true);
            getMessagesStorage().putDialogPhotos(i, tLRPC$photos_Photos);
        } else if (tLRPC$photos_Photos == null || tLRPC$photos_Photos.photos.isEmpty()) {
            loadDialogPhotos(i, i2, j, false, i3);
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable(tLRPC$photos_Photos, z, i, i2, i3) {
            private final /* synthetic */ TLRPC$photos_Photos f$1;
            private final /* synthetic */ boolean f$2;
            private final /* synthetic */ int f$3;
            private final /* synthetic */ int f$4;
            private final /* synthetic */ int f$5;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
            }

            public final void run() {
                MessagesController.this.lambda$processLoadedUserPhotos$79$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5);
            }
        });
    }

    public /* synthetic */ void lambda$processLoadedUserPhotos$79$MessagesController(TLRPC$photos_Photos tLRPC$photos_Photos, boolean z, int i, int i2, int i3) {
        putUsers(tLRPC$photos_Photos.users, z);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogPhotosLoaded, Integer.valueOf(i), Integer.valueOf(i2), Boolean.valueOf(z), Integer.valueOf(i3), tLRPC$photos_Photos.photos);
    }

    public void uploadAndApplyUserAvatar(TLRPC$FileLocation tLRPC$FileLocation) {
        if (tLRPC$FileLocation != null) {
            this.uploadingAvatar = FileLoader.getDirectory(4) + "/" + tLRPC$FileLocation.volume_id + "_" + tLRPC$FileLocation.local_id + ".jpg";
            getFileLoader().uploadFile(this.uploadingAvatar, false, true, 16777216);
        }
    }

    public void saveTheme(Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent, boolean z, boolean z2) {
        TLRPC$TL_theme tLRPC$TL_theme = themeAccent != null ? themeAccent.info : themeInfo.info;
        if (tLRPC$TL_theme != null) {
            TLRPC$TL_account_saveTheme tLRPC$TL_account_saveTheme = new TLRPC$TL_account_saveTheme();
            TLRPC$TL_inputTheme tLRPC$TL_inputTheme = new TLRPC$TL_inputTheme();
            tLRPC$TL_inputTheme.id = tLRPC$TL_theme.id;
            tLRPC$TL_inputTheme.access_hash = tLRPC$TL_theme.access_hash;
            tLRPC$TL_account_saveTheme.theme = tLRPC$TL_inputTheme;
            tLRPC$TL_account_saveTheme.unsave = z2;
            getConnectionsManager().sendRequest(tLRPC$TL_account_saveTheme, $$Lambda$MessagesController$NKR1sAtHMkiKxeCXwPnbpw6sdNU.INSTANCE);
            getConnectionsManager().resumeNetworkMaybe();
        }
        if (!z2) {
            installTheme(themeInfo, themeAccent, z);
        }
    }

    public void installTheme(Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent, boolean z) {
        TLRPC$TL_theme tLRPC$TL_theme = themeAccent != null ? themeAccent.info : themeInfo.info;
        String str = themeAccent != null ? themeAccent.patternSlug : themeInfo.slug;
        boolean z2 = themeAccent == null && themeInfo.isBlured;
        boolean z3 = themeAccent != null ? themeAccent.patternMotion : themeInfo.isMotion;
        TLRPC$TL_account_installTheme tLRPC$TL_account_installTheme = new TLRPC$TL_account_installTheme();
        tLRPC$TL_account_installTheme.dark = z;
        if (tLRPC$TL_theme != null) {
            tLRPC$TL_account_installTheme.format = "android";
            TLRPC$TL_inputTheme tLRPC$TL_inputTheme = new TLRPC$TL_inputTheme();
            tLRPC$TL_inputTheme.id = tLRPC$TL_theme.id;
            tLRPC$TL_inputTheme.access_hash = tLRPC$TL_theme.access_hash;
            tLRPC$TL_account_installTheme.theme = tLRPC$TL_inputTheme;
            tLRPC$TL_account_installTheme.flags |= 2;
        }
        getConnectionsManager().sendRequest(tLRPC$TL_account_installTheme, $$Lambda$MessagesController$70rh4Vnd6leg4_owVYutPFZ80EM.INSTANCE);
        if (!TextUtils.isEmpty(str)) {
            TLRPC$TL_account_installWallPaper tLRPC$TL_account_installWallPaper = new TLRPC$TL_account_installWallPaper();
            TLRPC$TL_inputWallPaperSlug tLRPC$TL_inputWallPaperSlug = new TLRPC$TL_inputWallPaperSlug();
            tLRPC$TL_inputWallPaperSlug.slug = str;
            tLRPC$TL_account_installWallPaper.wallpaper = tLRPC$TL_inputWallPaperSlug;
            TLRPC$TL_wallPaperSettings tLRPC$TL_wallPaperSettings = new TLRPC$TL_wallPaperSettings();
            tLRPC$TL_account_installWallPaper.settings = tLRPC$TL_wallPaperSettings;
            tLRPC$TL_wallPaperSettings.blur = z2;
            tLRPC$TL_wallPaperSettings.motion = z3;
            getConnectionsManager().sendRequest(tLRPC$TL_account_installWallPaper, $$Lambda$MessagesController$nVnxG6X7YbWPb9NBS6HGvrQkzlk.INSTANCE);
        }
    }

    public void saveThemeToServer(Theme.ThemeInfo themeInfo, Theme.ThemeAccent themeAccent) {
        File file;
        String str;
        if (themeInfo != null) {
            if (themeAccent != null) {
                str = themeAccent.saveToFile().getAbsolutePath();
                file = themeAccent.getPathToWallpaper();
            } else {
                str = themeInfo.pathToFile;
                file = null;
            }
            String str2 = str;
            File file2 = file;
            if (str2 != null && !this.uploadingThemes.containsKey(str2)) {
                this.uploadingThemes.put(str2, themeAccent != null ? themeAccent : themeInfo);
                Utilities.globalQueue.postRunnable(new Runnable(str2, file2, themeAccent, themeInfo) {
                    private final /* synthetic */ String f$1;
                    private final /* synthetic */ File f$2;
                    private final /* synthetic */ Theme.ThemeAccent f$3;
                    private final /* synthetic */ Theme.ThemeInfo f$4;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                        this.f$3 = r4;
                        this.f$4 = r5;
                    }

                    public final void run() {
                        MessagesController.this.lambda$saveThemeToServer$84$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4);
                    }
                });
            }
        }
    }

    public /* synthetic */ void lambda$saveThemeToServer$84$MessagesController(String str, File file, Theme.ThemeAccent themeAccent, Theme.ThemeInfo themeInfo) {
        AndroidUtilities.runOnUIThread(new Runnable(Theme.createThemePreviewImage(str, file != null ? file.getAbsolutePath() : null), str, themeAccent, themeInfo) {
            private final /* synthetic */ String f$1;
            private final /* synthetic */ String f$2;
            private final /* synthetic */ Theme.ThemeAccent f$3;
            private final /* synthetic */ Theme.ThemeInfo f$4;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
            }

            public final void run() {
                MessagesController.this.lambda$null$83$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4);
            }
        });
    }

    /* JADX WARNING: type inference failed for: r6v0, types: [org.telegram.ui.ActionBar.Theme$ThemeInfo] */
    /* JADX WARNING: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$null$83$MessagesController(java.lang.String r3, java.lang.String r4, org.telegram.ui.ActionBar.Theme.ThemeAccent r5, org.telegram.ui.ActionBar.Theme.ThemeInfo r6) {
        /*
            r2 = this;
            if (r3 != 0) goto L_0x0008
            java.util.HashMap<java.lang.String, java.lang.Object> r3 = r2.uploadingThemes
            r3.remove(r4)
            return
        L_0x0008:
            java.util.HashMap<java.lang.String, java.lang.Object> r0 = r2.uploadingThemes
            if (r5 == 0) goto L_0x000e
            r1 = r5
            goto L_0x000f
        L_0x000e:
            r1 = r6
        L_0x000f:
            r0.put(r3, r1)
            if (r5 != 0) goto L_0x0019
            r6.uploadingFile = r4
            r6.uploadingThumb = r3
            goto L_0x001d
        L_0x0019:
            r5.uploadingFile = r4
            r5.uploadingThumb = r3
        L_0x001d:
            org.telegram.messenger.FileLoader r5 = r2.getFileLoader()
            r6 = 67108864(0x4000000, float:1.5046328E-36)
            r0 = 1
            r1 = 0
            r5.uploadFile(r4, r1, r0, r6)
            org.telegram.messenger.FileLoader r4 = r2.getFileLoader()
            r5 = 16777216(0x1000000, float:2.3509887E-38)
            r4.uploadFile(r3, r1, r0, r5)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$null$83$MessagesController(java.lang.String, java.lang.String, org.telegram.ui.ActionBar.Theme$ThemeAccent, org.telegram.ui.ActionBar.Theme$ThemeInfo):void");
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v2, resolved type: org.telegram.tgnet.TLRPC$TL_account_saveWallPaper} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v4, resolved type: org.telegram.tgnet.TLRPC$TL_account_installWallPaper} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v11, resolved type: org.telegram.tgnet.TLRPC$TL_account_saveWallPaper} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v12, resolved type: org.telegram.tgnet.TLRPC$TL_account_saveWallPaper} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void saveWallpaperToServer(java.io.File r7, org.telegram.ui.ActionBar.Theme.OverrideWallpaperInfo r8, boolean r9, long r10) {
        /*
            r6 = this;
            java.lang.String r0 = r6.uploadingWallpaper
            r1 = 0
            r2 = 0
            if (r0 == 0) goto L_0x0035
            java.io.File r0 = new java.io.File
            java.io.File r3 = org.telegram.messenger.ApplicationLoader.getFilesDirFixed()
            java.lang.String r4 = r8.originalFileName
            r0.<init>(r3, r4)
            if (r7 == 0) goto L_0x0028
            java.lang.String r3 = r7.getAbsolutePath()
            java.lang.String r4 = r6.uploadingWallpaper
            boolean r3 = r3.equals(r4)
            if (r3 != 0) goto L_0x0025
            boolean r0 = r7.equals(r0)
            if (r0 == 0) goto L_0x0028
        L_0x0025:
            r6.uploadingWallpaperInfo = r8
            return
        L_0x0028:
            org.telegram.messenger.FileLoader r0 = r6.getFileLoader()
            java.lang.String r3 = r6.uploadingWallpaper
            r0.cancelUploadFile(r3, r1)
            r6.uploadingWallpaper = r2
            r6.uploadingWallpaperInfo = r2
        L_0x0035:
            r0 = 1
            if (r7 == 0) goto L_0x004d
            java.lang.String r7 = r7.getAbsolutePath()
            r6.uploadingWallpaper = r7
            r6.uploadingWallpaperInfo = r8
            org.telegram.messenger.FileLoader r7 = r6.getFileLoader()
            java.lang.String r8 = r6.uploadingWallpaper
            r9 = 16777216(0x1000000, float:2.3509887E-38)
            r7.uploadFile(r8, r1, r0, r9)
            goto L_0x0119
        L_0x004d:
            boolean r7 = r8.isDefault()
            if (r7 != 0) goto L_0x0119
            boolean r7 = r8.isColor()
            if (r7 != 0) goto L_0x0119
            boolean r7 = r8.isTheme()
            if (r7 != 0) goto L_0x0119
            org.telegram.tgnet.TLRPC$TL_inputWallPaperSlug r7 = new org.telegram.tgnet.TLRPC$TL_inputWallPaperSlug
            r7.<init>()
            java.lang.String r1 = r8.slug
            r7.slug = r1
            org.telegram.tgnet.TLRPC$TL_wallPaperSettings r1 = new org.telegram.tgnet.TLRPC$TL_wallPaperSettings
            r1.<init>()
            boolean r3 = r8.isBlurred
            r1.blur = r3
            boolean r3 = r8.isMotion
            r1.motion = r3
            int r3 = r8.color
            if (r3 == 0) goto L_0x008d
            r1.background_color = r3
            int r3 = r1.flags
            r3 = r3 | r0
            r1.flags = r3
            float r4 = r8.intensity
            r5 = 1120403456(0x42CLASSNAME, float:100.0)
            float r4 = r4 * r5
            int r4 = (int) r4
            r1.intensity = r4
            r3 = r3 | 8
            r1.flags = r3
        L_0x008d:
            int r3 = r8.gradientColor
            if (r3 == 0) goto L_0x00a1
            r1.second_background_color = r3
            int r3 = r8.rotation
            int r0 = org.telegram.messenger.AndroidUtilities.getWallpaperRotation(r3, r0)
            r1.rotation = r0
            int r0 = r1.flags
            r0 = r0 | 16
            r1.flags = r0
        L_0x00a1:
            if (r9 == 0) goto L_0x00ad
            org.telegram.tgnet.TLRPC$TL_account_installWallPaper r0 = new org.telegram.tgnet.TLRPC$TL_account_installWallPaper
            r0.<init>()
            r0.wallpaper = r7
            r0.settings = r1
            goto L_0x00b6
        L_0x00ad:
            org.telegram.tgnet.TLRPC$TL_account_saveWallPaper r0 = new org.telegram.tgnet.TLRPC$TL_account_saveWallPaper
            r0.<init>()
            r0.wallpaper = r7
            r0.settings = r1
        L_0x00b6:
            r3 = 0
            int r7 = (r10 > r3 ? 1 : (r10 == r3 ? 0 : -1))
            if (r7 == 0) goto L_0x00bd
            goto L_0x010d
        L_0x00bd:
            org.telegram.tgnet.NativeByteBuffer r7 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x0100 }
            r10 = 1024(0x400, float:1.435E-42)
            r7.<init>((int) r10)     // Catch:{ Exception -> 0x0100 }
            r10 = 21
            r7.writeInt32(r10)     // Catch:{ Exception -> 0x00fd }
            boolean r10 = r8.isBlurred     // Catch:{ Exception -> 0x00fd }
            r7.writeBool(r10)     // Catch:{ Exception -> 0x00fd }
            boolean r10 = r8.isMotion     // Catch:{ Exception -> 0x00fd }
            r7.writeBool(r10)     // Catch:{ Exception -> 0x00fd }
            int r10 = r8.color     // Catch:{ Exception -> 0x00fd }
            r7.writeInt32(r10)     // Catch:{ Exception -> 0x00fd }
            int r10 = r8.gradientColor     // Catch:{ Exception -> 0x00fd }
            r7.writeInt32(r10)     // Catch:{ Exception -> 0x00fd }
            int r10 = r8.rotation     // Catch:{ Exception -> 0x00fd }
            r7.writeInt32(r10)     // Catch:{ Exception -> 0x00fd }
            float r10 = r8.intensity     // Catch:{ Exception -> 0x00fd }
            double r10 = (double) r10     // Catch:{ Exception -> 0x00fd }
            r7.writeDouble(r10)     // Catch:{ Exception -> 0x00fd }
            r7.writeBool(r9)     // Catch:{ Exception -> 0x00fd }
            java.lang.String r9 = r8.slug     // Catch:{ Exception -> 0x00fd }
            r7.writeString(r9)     // Catch:{ Exception -> 0x00fd }
            java.lang.String r8 = r8.originalFileName     // Catch:{ Exception -> 0x00fd }
            r7.writeString(r8)     // Catch:{ Exception -> 0x00fd }
            int r8 = r7.position()     // Catch:{ Exception -> 0x00fd }
            r7.limit(r8)     // Catch:{ Exception -> 0x00fd }
            goto L_0x0105
        L_0x00fd:
            r8 = move-exception
            r2 = r7
            goto L_0x0101
        L_0x0100:
            r8 = move-exception
        L_0x0101:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r8)
            r7 = r2
        L_0x0105:
            org.telegram.messenger.MessagesStorage r8 = r6.getMessagesStorage()
            long r10 = r8.createPendingTask(r7)
        L_0x010d:
            org.telegram.tgnet.ConnectionsManager r7 = r6.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$SS5vXyAh8umpPgFyD_wJJmGtiio r8 = new org.telegram.messenger.-$$Lambda$MessagesController$SS5vXyAh8umpPgFyD_wJJmGtiio
            r8.<init>(r10)
            r7.sendRequest(r0, r8)
        L_0x0119:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.saveWallpaperToServer(java.io.File, org.telegram.ui.ActionBar.Theme$OverrideWallpaperInfo, boolean, long):void");
    }

    public /* synthetic */ void lambda$saveWallpaperToServer$85$MessagesController(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        getMessagesStorage().removePendingTask(j);
    }

    public void markChannelDialogMessageAsDeleted(ArrayList<Integer> arrayList, int i) {
        MessageObject messageObject = this.dialogMessage.get((long) (-i));
        if (messageObject != null) {
            for (int i2 = 0; i2 < arrayList.size(); i2++) {
                if (messageObject.getId() == arrayList.get(i2).intValue()) {
                    messageObject.deleted = true;
                    return;
                }
            }
        }
    }

    public void deleteMessages(ArrayList<Integer> arrayList, ArrayList<Long> arrayList2, TLRPC$EncryptedChat tLRPC$EncryptedChat, long j, int i, boolean z, boolean z2) {
        deleteMessages(arrayList, arrayList2, tLRPC$EncryptedChat, j, i, z, z2, 0, (TLObject) null);
    }

    public void deleteMessages(ArrayList<Integer> arrayList, ArrayList<Long> arrayList2, TLRPC$EncryptedChat tLRPC$EncryptedChat, long j, int i, boolean z, boolean z2, long j2, TLObject tLObject) {
        ArrayList<Integer> arrayList3;
        long j3;
        TLRPC$TL_messages_deleteMessages tLRPC$TL_messages_deleteMessages;
        NativeByteBuffer nativeByteBuffer;
        long j4;
        TLRPC$TL_channels_deleteMessages tLRPC$TL_channels_deleteMessages;
        NativeByteBuffer nativeByteBuffer2;
        long j5;
        TLRPC$TL_messages_deleteScheduledMessages tLRPC$TL_messages_deleteScheduledMessages;
        NativeByteBuffer nativeByteBuffer3;
        char c;
        ArrayList<Integer> arrayList4 = arrayList;
        ArrayList<Long> arrayList5 = arrayList2;
        TLRPC$EncryptedChat tLRPC$EncryptedChat2 = tLRPC$EncryptedChat;
        long j6 = j;
        int i2 = i;
        if ((arrayList4 != null && !arrayList.isEmpty()) || tLObject != null) {
            NativeByteBuffer nativeByteBuffer4 = null;
            if (j2 == 0) {
                arrayList3 = new ArrayList<>();
                for (int i3 = 0; i3 < arrayList.size(); i3++) {
                    Integer num = arrayList4.get(i3);
                    if (num.intValue() > 0) {
                        arrayList3.add(num);
                    }
                }
                if (z2) {
                    c = 1;
                    getMessagesStorage().markMessagesAsDeleted(arrayList, true, i, false, true);
                } else {
                    c = 1;
                    if (i2 == 0) {
                        for (int i4 = 0; i4 < arrayList.size(); i4++) {
                            MessageObject messageObject = this.dialogMessagesByIds.get(arrayList4.get(i4).intValue());
                            if (messageObject != null) {
                                messageObject.deleted = true;
                            }
                        }
                    } else {
                        markChannelDialogMessageAsDeleted(arrayList4, i2);
                    }
                    getMessagesStorage().markMessagesAsDeleted(arrayList, true, i, z, false);
                    getMessagesStorage().updateDialogsWithDeletedMessages(arrayList4, (ArrayList<Long>) null, true, i2);
                }
                NotificationCenter notificationCenter = getNotificationCenter();
                int i5 = NotificationCenter.messagesDeleted;
                Object[] objArr = new Object[3];
                objArr[0] = arrayList4;
                objArr[c] = Integer.valueOf(i);
                objArr[2] = Boolean.valueOf(z2);
                notificationCenter.postNotificationName(i5, objArr);
            } else {
                arrayList3 = null;
            }
            if (z2) {
                if (tLObject != null) {
                    tLRPC$TL_messages_deleteScheduledMessages = (TLRPC$TL_messages_deleteScheduledMessages) tLObject;
                    j5 = j2;
                } else {
                    TLRPC$TL_messages_deleteScheduledMessages tLRPC$TL_messages_deleteScheduledMessages2 = new TLRPC$TL_messages_deleteScheduledMessages();
                    tLRPC$TL_messages_deleteScheduledMessages2.id = arrayList3;
                    tLRPC$TL_messages_deleteScheduledMessages2.peer = getInputPeer((int) j6);
                    try {
                        nativeByteBuffer3 = new NativeByteBuffer(tLRPC$TL_messages_deleteScheduledMessages2.getObjectSize() + 16);
                        try {
                            nativeByteBuffer3.writeInt32(18);
                            nativeByteBuffer3.writeInt64(j6);
                            nativeByteBuffer3.writeInt32(i2);
                            tLRPC$TL_messages_deleteScheduledMessages2.serializeToStream(nativeByteBuffer3);
                        } catch (Exception e) {
                            e = e;
                            nativeByteBuffer4 = nativeByteBuffer3;
                        }
                    } catch (Exception e2) {
                        e = e2;
                        FileLog.e((Throwable) e);
                        nativeByteBuffer3 = nativeByteBuffer4;
                        j5 = getMessagesStorage().createPendingTask(nativeByteBuffer3);
                        tLRPC$TL_messages_deleteScheduledMessages = tLRPC$TL_messages_deleteScheduledMessages2;
                        getConnectionsManager().sendRequest(tLRPC$TL_messages_deleteScheduledMessages, new RequestDelegate(j5) {
                            private final /* synthetic */ long f$1;

                            {
                                this.f$1 = r2;
                            }

                            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                MessagesController.this.lambda$deleteMessages$86$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                            }
                        });
                    }
                    j5 = getMessagesStorage().createPendingTask(nativeByteBuffer3);
                    tLRPC$TL_messages_deleteScheduledMessages = tLRPC$TL_messages_deleteScheduledMessages2;
                }
                getConnectionsManager().sendRequest(tLRPC$TL_messages_deleteScheduledMessages, new RequestDelegate(j5) {
                    private final /* synthetic */ long f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$deleteMessages$86$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                    }
                });
            } else if (i2 != 0) {
                if (tLObject != null) {
                    tLRPC$TL_channels_deleteMessages = (TLRPC$TL_channels_deleteMessages) tLObject;
                    j4 = j2;
                } else {
                    TLRPC$TL_channels_deleteMessages tLRPC$TL_channels_deleteMessages2 = new TLRPC$TL_channels_deleteMessages();
                    tLRPC$TL_channels_deleteMessages2.id = arrayList3;
                    tLRPC$TL_channels_deleteMessages2.channel = getInputChannel(i2);
                    try {
                        nativeByteBuffer2 = new NativeByteBuffer(tLRPC$TL_channels_deleteMessages2.getObjectSize() + 8);
                        try {
                            nativeByteBuffer2.writeInt32(7);
                            nativeByteBuffer2.writeInt32(i2);
                            tLRPC$TL_channels_deleteMessages2.serializeToStream(nativeByteBuffer2);
                        } catch (Exception e3) {
                            e = e3;
                            nativeByteBuffer4 = nativeByteBuffer2;
                        }
                    } catch (Exception e4) {
                        e = e4;
                        FileLog.e((Throwable) e);
                        nativeByteBuffer2 = nativeByteBuffer4;
                        j4 = getMessagesStorage().createPendingTask(nativeByteBuffer2);
                        tLRPC$TL_channels_deleteMessages = tLRPC$TL_channels_deleteMessages2;
                        getConnectionsManager().sendRequest(tLRPC$TL_channels_deleteMessages, new RequestDelegate(i2, j4) {
                            private final /* synthetic */ int f$1;
                            private final /* synthetic */ long f$2;

                            {
                                this.f$1 = r2;
                                this.f$2 = r3;
                            }

                            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                MessagesController.this.lambda$deleteMessages$87$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                            }
                        });
                    }
                    j4 = getMessagesStorage().createPendingTask(nativeByteBuffer2);
                    tLRPC$TL_channels_deleteMessages = tLRPC$TL_channels_deleteMessages2;
                }
                getConnectionsManager().sendRequest(tLRPC$TL_channels_deleteMessages, new RequestDelegate(i2, j4) {
                    private final /* synthetic */ int f$1;
                    private final /* synthetic */ long f$2;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$deleteMessages$87$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                    }
                });
            } else {
                if (!(arrayList5 == null || tLRPC$EncryptedChat2 == null || arrayList2.isEmpty())) {
                    getSecretChatHelper().sendMessagesDeleteMessage(tLRPC$EncryptedChat2, arrayList5, (TLRPC$Message) null);
                }
                if (tLObject != null) {
                    tLRPC$TL_messages_deleteMessages = (TLRPC$TL_messages_deleteMessages) tLObject;
                    j3 = j2;
                } else {
                    TLRPC$TL_messages_deleteMessages tLRPC$TL_messages_deleteMessages2 = new TLRPC$TL_messages_deleteMessages();
                    tLRPC$TL_messages_deleteMessages2.id = arrayList3;
                    tLRPC$TL_messages_deleteMessages2.revoke = z;
                    try {
                        nativeByteBuffer = new NativeByteBuffer(tLRPC$TL_messages_deleteMessages2.getObjectSize() + 8);
                        try {
                            nativeByteBuffer.writeInt32(7);
                            nativeByteBuffer.writeInt32(i2);
                            tLRPC$TL_messages_deleteMessages2.serializeToStream(nativeByteBuffer);
                        } catch (Exception e5) {
                            e = e5;
                            nativeByteBuffer4 = nativeByteBuffer;
                        }
                    } catch (Exception e6) {
                        e = e6;
                        FileLog.e((Throwable) e);
                        nativeByteBuffer = nativeByteBuffer4;
                        j3 = getMessagesStorage().createPendingTask(nativeByteBuffer);
                        tLRPC$TL_messages_deleteMessages = tLRPC$TL_messages_deleteMessages2;
                        getConnectionsManager().sendRequest(tLRPC$TL_messages_deleteMessages, new RequestDelegate(j3) {
                            private final /* synthetic */ long f$1;

                            {
                                this.f$1 = r2;
                            }

                            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                MessagesController.this.lambda$deleteMessages$88$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                            }
                        });
                    }
                    j3 = getMessagesStorage().createPendingTask(nativeByteBuffer);
                    tLRPC$TL_messages_deleteMessages = tLRPC$TL_messages_deleteMessages2;
                }
                getConnectionsManager().sendRequest(tLRPC$TL_messages_deleteMessages, new RequestDelegate(j3) {
                    private final /* synthetic */ long f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$deleteMessages$88$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                    }
                });
            }
        }
    }

    public /* synthetic */ void lambda$deleteMessages$86$MessagesController(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public /* synthetic */ void lambda$deleteMessages$87$MessagesController(int i, long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedMessages tLRPC$TL_messages_affectedMessages = (TLRPC$TL_messages_affectedMessages) tLObject;
            processNewChannelDifferenceParams(tLRPC$TL_messages_affectedMessages.pts, tLRPC$TL_messages_affectedMessages.pts_count, i);
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public /* synthetic */ void lambda$deleteMessages$88$MessagesController(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedMessages tLRPC$TL_messages_affectedMessages = (TLRPC$TL_messages_affectedMessages) tLObject;
            processNewDifferenceParams(-1, tLRPC$TL_messages_affectedMessages.pts, -1, tLRPC$TL_messages_affectedMessages.pts_count);
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public void pinMessage(TLRPC$Chat tLRPC$Chat, TLRPC$User tLRPC$User, int i, boolean z) {
        if (tLRPC$Chat != null || tLRPC$User != null) {
            TLRPC$TL_messages_updatePinnedMessage tLRPC$TL_messages_updatePinnedMessage = new TLRPC$TL_messages_updatePinnedMessage();
            tLRPC$TL_messages_updatePinnedMessage.peer = getInputPeer(tLRPC$Chat != null ? -tLRPC$Chat.id : tLRPC$User.id);
            tLRPC$TL_messages_updatePinnedMessage.id = i;
            tLRPC$TL_messages_updatePinnedMessage.silent = !z;
            getConnectionsManager().sendRequest(tLRPC$TL_messages_updatePinnedMessage, new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$pinMessage$89$MessagesController(tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$pinMessage$89$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
    }

    public void deleteUserChannelHistory(TLRPC$Chat tLRPC$Chat, TLRPC$User tLRPC$User, int i) {
        if (i == 0) {
            getMessagesStorage().deleteUserChannelHistory(tLRPC$Chat.id, tLRPC$User.id);
        }
        TLRPC$TL_channels_deleteUserHistory tLRPC$TL_channels_deleteUserHistory = new TLRPC$TL_channels_deleteUserHistory();
        tLRPC$TL_channels_deleteUserHistory.channel = getInputChannel(tLRPC$Chat);
        tLRPC$TL_channels_deleteUserHistory.user_id = getInputUser(tLRPC$User);
        getConnectionsManager().sendRequest(tLRPC$TL_channels_deleteUserHistory, new RequestDelegate(tLRPC$Chat, tLRPC$User) {
            private final /* synthetic */ TLRPC$Chat f$1;
            private final /* synthetic */ TLRPC$User f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$deleteUserChannelHistory$90$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$deleteUserChannelHistory$90$MessagesController(TLRPC$Chat tLRPC$Chat, TLRPC$User tLRPC$User, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedHistory tLRPC$TL_messages_affectedHistory = (TLRPC$TL_messages_affectedHistory) tLObject;
            int i = tLRPC$TL_messages_affectedHistory.offset;
            if (i > 0) {
                deleteUserChannelHistory(tLRPC$Chat, tLRPC$User, i);
            }
            processNewChannelDifferenceParams(tLRPC$TL_messages_affectedHistory.pts, tLRPC$TL_messages_affectedHistory.pts_count, tLRPC$Chat.id);
        }
    }

    public ArrayList<TLRPC$Dialog> getAllDialogs() {
        return this.allDialogs;
    }

    public boolean isDialogsEndReached(int i) {
        return this.dialogsEndReached.get(i);
    }

    public boolean isLoadingDialogs(int i) {
        return this.loadingDialogs.get(i);
    }

    public boolean isServerDialogsEndReached(int i) {
        return this.serverDialogsEndReached.get(i);
    }

    public boolean hasHiddenArchive() {
        return SharedConfig.archiveHidden && this.dialogs_dict.get(DialogObject.makeFolderDialogId(1)) != null;
    }

    public ArrayList<TLRPC$Dialog> getDialogs(int i) {
        ArrayList<TLRPC$Dialog> arrayList = this.dialogsByFolder.get(i);
        return arrayList == null ? new ArrayList<>() : arrayList;
    }

    public void putAllNeededDraftDialogs() {
        LongSparseArray<TLRPC$DraftMessage> drafts = getMediaDataController().getDrafts();
        int size = drafts.size();
        for (int i = 0; i < size; i++) {
            putDraftDialogIfNeed(drafts.keyAt(i), drafts.valueAt(i));
        }
    }

    public void putDraftDialogIfNeed(long j, TLRPC$DraftMessage tLRPC$DraftMessage) {
        if (this.dialogs_dict.indexOfKey(j) < 0) {
            MediaDataController mediaDataController = getMediaDataController();
            int size = this.allDialogs.size();
            int i = 1;
            if (size > 0) {
                TLRPC$Dialog tLRPC$Dialog = this.allDialogs.get(size - 1);
                if (((long) tLRPC$DraftMessage.date) < DialogObject.getLastMessageOrDraftDate(tLRPC$Dialog, mediaDataController.getDraft(tLRPC$Dialog.id))) {
                    return;
                }
            }
            TLRPC$TL_dialog tLRPC$TL_dialog = new TLRPC$TL_dialog();
            tLRPC$TL_dialog.id = j;
            tLRPC$TL_dialog.draft = tLRPC$DraftMessage;
            tLRPC$TL_dialog.folder_id = mediaDataController.getDraftFolderId(j);
            if (j >= 0 || !ChatObject.isChannel(getChat(Integer.valueOf((int) (-j))))) {
                i = 0;
            }
            tLRPC$TL_dialog.flags = i;
            this.dialogs_dict.put(j, tLRPC$TL_dialog);
            this.allDialogs.add(tLRPC$TL_dialog);
            sortDialogs((SparseArray<TLRPC$Chat>) null);
        }
    }

    public void removeDraftDialogIfNeed(long j) {
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
        if (tLRPC$Dialog != null && tLRPC$Dialog.top_message == 0) {
            this.dialogs_dict.remove(tLRPC$Dialog.id);
            this.allDialogs.remove(tLRPC$Dialog);
        }
    }

    private void removeDialog(TLRPC$Dialog tLRPC$Dialog) {
        if (tLRPC$Dialog != null) {
            long j = tLRPC$Dialog.id;
            if (this.dialogsServerOnly.remove(tLRPC$Dialog) && DialogObject.isChannel(tLRPC$Dialog)) {
                Utilities.stageQueue.postRunnable(new Runnable(j) {
                    private final /* synthetic */ long f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run() {
                        MessagesController.this.lambda$removeDialog$91$MessagesController(this.f$1);
                    }
                });
            }
            this.allDialogs.remove(tLRPC$Dialog);
            this.dialogsCanAddUsers.remove(tLRPC$Dialog);
            this.dialogsChannelsOnly.remove(tLRPC$Dialog);
            this.dialogsGroupsOnly.remove(tLRPC$Dialog);
            this.dialogsUsersOnly.remove(tLRPC$Dialog);
            this.dialogsForward.remove(tLRPC$Dialog);
            int i = 0;
            while (true) {
                DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                if (i >= dialogFilterArr.length) {
                    break;
                }
                if (dialogFilterArr[i] != null) {
                    dialogFilterArr[i].dialogs.remove(tLRPC$Dialog);
                }
                i++;
            }
            this.dialogs_dict.remove(j);
            ArrayList arrayList = this.dialogsByFolder.get(tLRPC$Dialog.folder_id);
            if (arrayList != null) {
                arrayList.remove(tLRPC$Dialog);
            }
        }
    }

    public /* synthetic */ void lambda$removeDialog$91$MessagesController(long j) {
        int i = -((int) j);
        this.channelsPts.delete(i);
        this.shortPollChannels.delete(i);
        this.needShortPollChannels.delete(i);
        this.shortPollOnlines.delete(i);
        this.needShortPollOnlines.delete(i);
    }

    public void deleteDialog(long j, int i) {
        deleteDialog(j, i, false);
    }

    public void deleteDialog(long j, int i, boolean z) {
        deleteDialog(j, true, i, 0, z, (TLRPC$InputPeer) null, 0);
    }

    public void setDialogsInTransaction(boolean z) {
        this.dialogsInTransaction = z;
        if (!z) {
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, true);
        }
    }

    /* access modifiers changed from: protected */
    /* JADX WARNING: Removed duplicated region for block: B:117:0x02c6  */
    /* JADX WARNING: Removed duplicated region for block: B:125:0x02ff  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void deleteDialog(long r28, boolean r30, int r31, int r32, boolean r33, org.telegram.tgnet.TLRPC$InputPeer r34, long r35) {
        /*
            r27 = this;
            r11 = r27
            r5 = r28
            r0 = r30
            r7 = r31
            r1 = r32
            r9 = r33
            r2 = 2
            if (r7 != r2) goto L_0x0017
            org.telegram.messenger.MessagesStorage r0 = r27.getMessagesStorage()
            r0.deleteDialog(r5, r7)
            return
        L_0x0017:
            r3 = 3
            if (r7 == 0) goto L_0x001c
            if (r7 != r3) goto L_0x0023
        L_0x001c:
            org.telegram.messenger.MediaDataController r4 = r27.getMediaDataController()
            r4.uninstallShortcut(r5)
        L_0x0023:
            int r4 = (int) r5
            r8 = 32
            long r12 = r5 >> r8
            int r8 = (int) r12
            r12 = 0
            r14 = 1
            r15 = 0
            if (r0 == 0) goto L_0x0242
            if (r1 != 0) goto L_0x0034
            r16 = 1
            goto L_0x0036
        L_0x0034:
            r16 = 0
        L_0x0036:
            if (r16 == 0) goto L_0x0046
            org.telegram.messenger.MessagesStorage r2 = r27.getMessagesStorage()
            int r2 = r2.getDialogMaxMessageId(r5)
            if (r2 <= 0) goto L_0x0046
            int r1 = java.lang.Math.max(r2, r1)
        L_0x0046:
            org.telegram.messenger.MessagesStorage r2 = r27.getMessagesStorage()
            r2.deleteDialog(r5, r7)
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r2 = r11.dialogs_dict
            java.lang.Object r2 = r2.get(r5)
            org.telegram.tgnet.TLRPC$Dialog r2 = (org.telegram.tgnet.TLRPC$Dialog) r2
            if (r7 == 0) goto L_0x0059
            if (r7 != r3) goto L_0x0060
        L_0x0059:
            org.telegram.messenger.NotificationsController r10 = r27.getNotificationsController()
            r10.deleteNotificationChannel(r5)
        L_0x0060:
            if (r2 == 0) goto L_0x01c2
            if (r16 == 0) goto L_0x0076
            int r1 = r2.top_message
            int r1 = java.lang.Math.max(r15, r1)
            int r10 = r2.read_inbox_max_id
            int r1 = java.lang.Math.max(r1, r10)
            int r10 = r2.read_outbox_max_id
            int r1 = java.lang.Math.max(r1, r10)
        L_0x0076:
            if (r7 == 0) goto L_0x0081
            if (r7 != r3) goto L_0x007b
            goto L_0x0081
        L_0x007b:
            r2.unread_count = r15
            r17 = r4
            r3 = 0
            goto L_0x00c7
        L_0x0081:
            org.telegram.tgnet.TLRPC$Dialog r10 = r11.proxyDialog
            r17 = r4
            if (r10 == 0) goto L_0x008f
            long r3 = r10.id
            int r10 = (r3 > r5 ? 1 : (r3 == r5 ? 0 : -1))
            if (r10 != 0) goto L_0x008f
            r3 = 1
            goto L_0x0090
        L_0x008f:
            r3 = 0
        L_0x0090:
            if (r3 == 0) goto L_0x00b0
            r11.isLeftProxyChannel = r14
            org.telegram.tgnet.TLRPC$Dialog r4 = r11.proxyDialog
            long r14 = r4.id
            int r4 = (r14 > r12 ? 1 : (r14 == r12 ? 0 : -1))
            if (r4 >= 0) goto L_0x00ab
            int r4 = (int) r14
            int r4 = -r4
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)
            org.telegram.tgnet.TLRPC$Chat r4 = r11.getChat(r4)
            if (r4 == 0) goto L_0x00ab
            r10 = 1
            r4.left = r10
        L_0x00ab:
            r4 = 0
            r11.sortDialogs(r4)
            goto L_0x00c7
        L_0x00b0:
            r11.removeDialog(r2)
            android.util.SparseIntArray r4 = r11.nextDialogsCacheOffset
            int r14 = r2.folder_id
            r15 = 0
            int r4 = r4.get(r14, r15)
            if (r4 <= 0) goto L_0x00c7
            android.util.SparseIntArray r14 = r11.nextDialogsCacheOffset
            int r15 = r2.folder_id
            r10 = 1
            int r4 = r4 - r10
            r14.put(r15, r4)
        L_0x00c7:
            if (r3 != 0) goto L_0x01bf
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r4 = r11.dialogMessage
            long r14 = r2.id
            java.lang.Object r4 = r4.get(r14)
            org.telegram.messenger.MessageObject r4 = (org.telegram.messenger.MessageObject) r4
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r14 = r11.dialogMessage
            long r12 = r2.id
            r14.remove(r12)
            if (r4 == 0) goto L_0x00ea
            int r12 = r4.getId()
            android.util.SparseArray<org.telegram.messenger.MessageObject> r13 = r11.dialogMessagesByIds
            int r14 = r4.getId()
            r13.remove(r14)
            goto L_0x00fb
        L_0x00ea:
            int r12 = r2.top_message
            android.util.SparseArray<org.telegram.messenger.MessageObject> r4 = r11.dialogMessagesByIds
            java.lang.Object r4 = r4.get(r12)
            org.telegram.messenger.MessageObject r4 = (org.telegram.messenger.MessageObject) r4
            android.util.SparseArray<org.telegram.messenger.MessageObject> r13 = r11.dialogMessagesByIds
            int r14 = r2.top_message
            r13.remove(r14)
        L_0x00fb:
            if (r4 == 0) goto L_0x010c
            org.telegram.tgnet.TLRPC$Message r4 = r4.messageOwner
            long r13 = r4.random_id
            r18 = 0
            int r4 = (r13 > r18 ? 1 : (r13 == r18 ? 0 : -1))
            if (r4 == 0) goto L_0x010c
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r4 = r11.dialogMessagesByRandomIds
            r4.remove(r13)
        L_0x010c:
            r4 = 1
            if (r7 != r4) goto L_0x01b9
            if (r17 == 0) goto L_0x01b9
            if (r12 <= 0) goto L_0x01b9
            org.telegram.tgnet.TLRPC$TL_messageService r4 = new org.telegram.tgnet.TLRPC$TL_messageService
            r4.<init>()
            int r12 = r2.top_message
            r4.id = r12
            org.telegram.messenger.UserConfig r12 = r27.getUserConfig()
            int r12 = r12.getClientUserId()
            long r12 = (long) r12
            int r14 = (r12 > r5 ? 1 : (r12 == r5 ? 0 : -1))
            if (r14 != 0) goto L_0x012b
            r12 = 1
            goto L_0x012c
        L_0x012b:
            r12 = 0
        L_0x012c:
            r4.out = r12
            org.telegram.messenger.UserConfig r12 = r27.getUserConfig()
            int r12 = r12.getClientUserId()
            r4.from_id = r12
            int r12 = r4.flags
            r12 = r12 | 256(0x100, float:3.59E-43)
            r4.flags = r12
            org.telegram.tgnet.TLRPC$TL_messageActionHistoryClear r12 = new org.telegram.tgnet.TLRPC$TL_messageActionHistoryClear
            r12.<init>()
            r4.action = r12
            int r2 = r2.last_message_date
            r4.date = r2
            r12 = r17
            long r13 = (long) r12
            r4.dialog_id = r13
            if (r12 <= 0) goto L_0x015a
            org.telegram.tgnet.TLRPC$TL_peerUser r2 = new org.telegram.tgnet.TLRPC$TL_peerUser
            r2.<init>()
            r4.to_id = r2
            r2.user_id = r12
            goto L_0x017c
        L_0x015a:
            int r2 = -r12
            java.lang.Integer r13 = java.lang.Integer.valueOf(r2)
            org.telegram.tgnet.TLRPC$Chat r13 = r11.getChat(r13)
            boolean r13 = org.telegram.messenger.ChatObject.isChannel(r13)
            if (r13 == 0) goto L_0x0173
            org.telegram.tgnet.TLRPC$TL_peerChannel r13 = new org.telegram.tgnet.TLRPC$TL_peerChannel
            r13.<init>()
            r4.to_id = r13
            r13.channel_id = r2
            goto L_0x017c
        L_0x0173:
            org.telegram.tgnet.TLRPC$TL_peerChat r13 = new org.telegram.tgnet.TLRPC$TL_peerChat
            r13.<init>()
            r4.to_id = r13
            r13.chat_id = r2
        L_0x017c:
            org.telegram.messenger.MessageObject r2 = new org.telegram.messenger.MessageObject
            int r13 = r11.currentAccount
            java.util.ArrayList<java.lang.Long> r14 = r11.createdDialogIds
            long r10 = r4.dialog_id
            java.lang.Long r10 = java.lang.Long.valueOf(r10)
            boolean r10 = r14.contains(r10)
            r2.<init>(r13, r4, r10)
            java.util.ArrayList r10 = new java.util.ArrayList
            r10.<init>()
            r10.add(r2)
            java.util.ArrayList r2 = new java.util.ArrayList
            r2.<init>()
            r2.add(r4)
            r4 = 0
            r11 = r27
            r11.updateInterfaceWithMessages(r5, r10, r4)
            org.telegram.messenger.MessagesStorage r20 = r27.getMessagesStorage()
            r22 = 0
            r23 = 1
            r24 = 0
            r25 = 0
            r26 = 0
            r21 = r2
            r20.putMessages((java.util.ArrayList<org.telegram.tgnet.TLRPC$Message>) r21, (boolean) r22, (boolean) r23, (boolean) r24, (int) r25, (boolean) r26)
            goto L_0x01c4
        L_0x01b9:
            r12 = r17
            r4 = 0
            r2.top_message = r4
            goto L_0x01c4
        L_0x01bf:
            r12 = r17
            goto L_0x01c4
        L_0x01c2:
            r12 = r4
            r3 = 0
        L_0x01c4:
            if (r16 == 0) goto L_0x01f2
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r2 = r11.dialogs_read_inbox_max
            java.lang.Long r4 = java.lang.Long.valueOf(r28)
            java.lang.Object r2 = r2.get(r4)
            java.lang.Integer r2 = (java.lang.Integer) r2
            if (r2 == 0) goto L_0x01dc
            int r2 = r2.intValue()
            int r1 = java.lang.Math.max(r2, r1)
        L_0x01dc:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r2 = r11.dialogs_read_outbox_max
            java.lang.Long r4 = java.lang.Long.valueOf(r28)
            java.lang.Object r2 = r2.get(r4)
            java.lang.Integer r2 = (java.lang.Integer) r2
            if (r2 == 0) goto L_0x01f2
            int r2 = r2.intValue()
            int r1 = java.lang.Math.max(r2, r1)
        L_0x01f2:
            boolean r2 = r11.dialogsInTransaction
            if (r2 != 0) goto L_0x0231
            if (r3 == 0) goto L_0x020c
            org.telegram.messenger.NotificationCenter r2 = r27.getNotificationCenter()
            int r3 = org.telegram.messenger.NotificationCenter.dialogsNeedReload
            r4 = 1
            java.lang.Object[] r13 = new java.lang.Object[r4]
            java.lang.Boolean r14 = java.lang.Boolean.valueOf(r4)
            r4 = 0
            r13[r4] = r14
            r2.postNotificationName(r3, r13)
            goto L_0x0231
        L_0x020c:
            r4 = 0
            org.telegram.messenger.NotificationCenter r2 = r27.getNotificationCenter()
            int r3 = org.telegram.messenger.NotificationCenter.dialogsNeedReload
            java.lang.Object[] r13 = new java.lang.Object[r4]
            r2.postNotificationName(r3, r13)
            org.telegram.messenger.NotificationCenter r2 = r27.getNotificationCenter()
            int r3 = org.telegram.messenger.NotificationCenter.removeAllMessagesFromDialog
            r13 = 2
            java.lang.Object[] r13 = new java.lang.Object[r13]
            java.lang.Long r14 = java.lang.Long.valueOf(r28)
            r13[r4] = r14
            java.lang.Boolean r14 = java.lang.Boolean.valueOf(r4)
            r4 = 1
            r13[r4] = r14
            r2.postNotificationName(r3, r13)
        L_0x0231:
            org.telegram.messenger.MessagesStorage r2 = r27.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r2 = r2.getStorageQueue()
            org.telegram.messenger.-$$Lambda$MessagesController$fwCwUuiVf3Cb55r53sCLASSNAMEKDCr_o r3 = new org.telegram.messenger.-$$Lambda$MessagesController$fwCwUuiVf3Cb55r53sCLASSNAMEKDCr_o
            r3.<init>(r5)
            r2.postRunnable(r3)
            goto L_0x0243
        L_0x0242:
            r12 = r4
        L_0x0243:
            r13 = r1
            r1 = 3
            if (r7 != r1) goto L_0x0248
            return
        L_0x0248:
            if (r12 == 0) goto L_0x0332
            if (r34 != 0) goto L_0x0252
            org.telegram.tgnet.TLRPC$InputPeer r1 = r11.getInputPeer(r12)
            r12 = r1
            goto L_0x0254
        L_0x0252:
            r12 = r34
        L_0x0254:
            if (r12 != 0) goto L_0x0257
            return
        L_0x0257:
            boolean r1 = r12 instanceof org.telegram.tgnet.TLRPC$TL_inputPeerChannel
            r2 = 2147483647(0x7fffffff, float:NaN)
            if (r1 == 0) goto L_0x0263
            if (r7 == 0) goto L_0x0261
            goto L_0x0263
        L_0x0261:
            r4 = 0
            goto L_0x02c0
        L_0x0263:
            if (r13 <= 0) goto L_0x0286
            if (r13 == r2) goto L_0x0286
            android.util.LongSparseArray<java.lang.Integer> r3 = r11.deletedHistory
            r4 = 0
            java.lang.Integer r8 = java.lang.Integer.valueOf(r4)
            java.lang.Object r3 = r3.get(r5, r8)
            java.lang.Integer r3 = (java.lang.Integer) r3
            int r3 = r3.intValue()
            android.util.LongSparseArray<java.lang.Integer> r8 = r11.deletedHistory
            int r3 = java.lang.Math.max(r3, r13)
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)
            r8.put(r5, r3)
            goto L_0x0287
        L_0x0286:
            r4 = 0
        L_0x0287:
            r14 = 0
            int r3 = (r35 > r14 ? 1 : (r35 == r14 ? 0 : -1))
            if (r3 != 0) goto L_0x02c0
            org.telegram.tgnet.NativeByteBuffer r3 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x02b2 }
            int r8 = r12.getObjectSize()     // Catch:{ Exception -> 0x02b2 }
            int r8 = r8 + 28
            r3.<init>((int) r8)     // Catch:{ Exception -> 0x02b2 }
            r8 = 13
            r3.writeInt32(r8)     // Catch:{ Exception -> 0x02b0 }
            r3.writeInt64(r5)     // Catch:{ Exception -> 0x02b0 }
            r3.writeBool(r0)     // Catch:{ Exception -> 0x02b0 }
            r3.writeInt32(r7)     // Catch:{ Exception -> 0x02b0 }
            r3.writeInt32(r13)     // Catch:{ Exception -> 0x02b0 }
            r3.writeBool(r9)     // Catch:{ Exception -> 0x02b0 }
            r12.serializeToStream(r3)     // Catch:{ Exception -> 0x02b0 }
            goto L_0x02b7
        L_0x02b0:
            r0 = move-exception
            goto L_0x02b4
        L_0x02b2:
            r0 = move-exception
            r3 = 0
        L_0x02b4:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
        L_0x02b7:
            org.telegram.messenger.MessagesStorage r0 = r27.getMessagesStorage()
            long r14 = r0.createPendingTask(r3)
            goto L_0x02c2
        L_0x02c0:
            r14 = r35
        L_0x02c2:
            r0 = 64
            if (r1 == 0) goto L_0x02ff
            if (r7 != 0) goto L_0x02d6
            r3 = 0
            int r0 = (r14 > r3 ? 1 : (r14 == r3 ? 0 : -1))
            if (r0 == 0) goto L_0x02d5
            org.telegram.messenger.MessagesStorage r0 = r27.getMessagesStorage()
            r0.removePendingTask(r14)
        L_0x02d5:
            return
        L_0x02d6:
            org.telegram.tgnet.TLRPC$TL_channels_deleteHistory r1 = new org.telegram.tgnet.TLRPC$TL_channels_deleteHistory
            r1.<init>()
            org.telegram.tgnet.TLRPC$TL_inputChannel r3 = new org.telegram.tgnet.TLRPC$TL_inputChannel
            r3.<init>()
            r1.channel = r3
            int r4 = r12.channel_id
            r3.channel_id = r4
            long r4 = r12.access_hash
            r3.access_hash = r4
            if (r13 <= 0) goto L_0x02ed
            goto L_0x02f0
        L_0x02ed:
            r13 = 2147483647(0x7fffffff, float:NaN)
        L_0x02f0:
            r1.max_id = r13
            org.telegram.tgnet.ConnectionsManager r2 = r27.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$Bz-nA7tENKJi34sH2_NLx2pTbes r3 = new org.telegram.messenger.-$$Lambda$MessagesController$Bz-nA7tENKJi34sH2_NLx2pTbes
            r3.<init>(r14)
            r2.sendRequest(r1, r3, r0)
            goto L_0x034d
        L_0x02ff:
            org.telegram.tgnet.TLRPC$TL_messages_deleteHistory r8 = new org.telegram.tgnet.TLRPC$TL_messages_deleteHistory
            r8.<init>()
            r8.peer = r12
            if (r13 <= 0) goto L_0x0309
            r2 = r13
        L_0x0309:
            r8.max_id = r2
            if (r7 == 0) goto L_0x030f
            r10 = 1
            goto L_0x0310
        L_0x030f:
            r10 = 0
        L_0x0310:
            r8.just_clear = r10
            r8.revoke = r9
            org.telegram.tgnet.ConnectionsManager r10 = r27.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$C9UK2YQxF6xEFRoQaDy1xXERYZE r3 = new org.telegram.messenger.-$$Lambda$MessagesController$C9UK2YQxF6xEFRoQaDy1xXERYZE
            r1 = r3
            r2 = r27
            r0 = r3
            r3 = r14
            r5 = r28
            r7 = r31
            r14 = r8
            r8 = r13
            r9 = r33
            r13 = r10
            r10 = r12
            r1.<init>(r3, r5, r7, r8, r9, r10)
            r1 = 64
            r13.sendRequest(r14, r0, r1)
            goto L_0x034d
        L_0x0332:
            r1 = 1
            if (r7 != r1) goto L_0x0346
            org.telegram.messenger.SecretChatHelper r0 = r27.getSecretChatHelper()
            java.lang.Integer r1 = java.lang.Integer.valueOf(r8)
            org.telegram.tgnet.TLRPC$EncryptedChat r1 = r11.getEncryptedChat(r1)
            r2 = 0
            r0.sendClearHistoryMessage(r1, r2)
            goto L_0x034d
        L_0x0346:
            org.telegram.messenger.SecretChatHelper r0 = r27.getSecretChatHelper()
            r0.declineSecretChat(r8)
        L_0x034d:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.deleteDialog(long, boolean, int, int, boolean, org.telegram.tgnet.TLRPC$InputPeer, long):void");
    }

    public /* synthetic */ void lambda$deleteDialog$93$MessagesController(long j) {
        AndroidUtilities.runOnUIThread(new Runnable(j) {
            private final /* synthetic */ long f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$92$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$null$92$MessagesController(long j) {
        getNotificationsController().removeNotificationsForDialog(j);
    }

    public /* synthetic */ void lambda$deleteDialog$94$MessagesController(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public /* synthetic */ void lambda$deleteDialog$95$MessagesController(long j, long j2, int i, int i2, boolean z, TLRPC$InputPeer tLRPC$InputPeer, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedHistory tLRPC$TL_messages_affectedHistory = (TLRPC$TL_messages_affectedHistory) tLObject;
            if (tLRPC$TL_messages_affectedHistory.offset > 0) {
                deleteDialog(j2, false, i, i2, z, tLRPC$InputPeer, 0);
            }
            processNewDifferenceParams(-1, tLRPC$TL_messages_affectedHistory.pts, -1, tLRPC$TL_messages_affectedHistory.pts_count);
            getMessagesStorage().onDeleteQueryComplete(j2);
            return;
        }
    }

    public void saveGif(Object obj, TLRPC$Document tLRPC$Document) {
        if (obj != null && MessageObject.isGifDocument(tLRPC$Document)) {
            TLRPC$TL_messages_saveGif tLRPC$TL_messages_saveGif = new TLRPC$TL_messages_saveGif();
            TLRPC$TL_inputDocument tLRPC$TL_inputDocument = new TLRPC$TL_inputDocument();
            tLRPC$TL_messages_saveGif.id = tLRPC$TL_inputDocument;
            tLRPC$TL_inputDocument.id = tLRPC$Document.id;
            tLRPC$TL_inputDocument.access_hash = tLRPC$Document.access_hash;
            byte[] bArr = tLRPC$Document.file_reference;
            tLRPC$TL_inputDocument.file_reference = bArr;
            if (bArr == null) {
                tLRPC$TL_inputDocument.file_reference = new byte[0];
            }
            tLRPC$TL_messages_saveGif.unsave = false;
            getConnectionsManager().sendRequest(tLRPC$TL_messages_saveGif, new RequestDelegate(obj, tLRPC$TL_messages_saveGif) {
                private final /* synthetic */ Object f$1;
                private final /* synthetic */ TLRPC$TL_messages_saveGif f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$saveGif$96$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$saveGif$96$MessagesController(Object obj, TLRPC$TL_messages_saveGif tLRPC$TL_messages_saveGif, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null && FileRefController.isFileRefError(tLRPC$TL_error.text) && obj != null) {
            getFileRefController().requestReference(obj, tLRPC$TL_messages_saveGif);
        }
    }

    public void saveRecentSticker(Object obj, TLRPC$Document tLRPC$Document, boolean z) {
        if (obj != null && tLRPC$Document != null) {
            TLRPC$TL_messages_saveRecentSticker tLRPC$TL_messages_saveRecentSticker = new TLRPC$TL_messages_saveRecentSticker();
            TLRPC$TL_inputDocument tLRPC$TL_inputDocument = new TLRPC$TL_inputDocument();
            tLRPC$TL_messages_saveRecentSticker.id = tLRPC$TL_inputDocument;
            tLRPC$TL_inputDocument.id = tLRPC$Document.id;
            tLRPC$TL_inputDocument.access_hash = tLRPC$Document.access_hash;
            byte[] bArr = tLRPC$Document.file_reference;
            tLRPC$TL_inputDocument.file_reference = bArr;
            if (bArr == null) {
                tLRPC$TL_inputDocument.file_reference = new byte[0];
            }
            tLRPC$TL_messages_saveRecentSticker.unsave = false;
            tLRPC$TL_messages_saveRecentSticker.attached = z;
            getConnectionsManager().sendRequest(tLRPC$TL_messages_saveRecentSticker, new RequestDelegate(obj, tLRPC$TL_messages_saveRecentSticker) {
                private final /* synthetic */ Object f$1;
                private final /* synthetic */ TLRPC$TL_messages_saveRecentSticker f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$saveRecentSticker$97$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$saveRecentSticker$97$MessagesController(Object obj, TLRPC$TL_messages_saveRecentSticker tLRPC$TL_messages_saveRecentSticker, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null && FileRefController.isFileRefError(tLRPC$TL_error.text) && obj != null) {
            getFileRefController().requestReference(obj, tLRPC$TL_messages_saveRecentSticker);
        }
    }

    public void loadChannelParticipants(Integer num) {
        if (!this.loadingFullParticipants.contains(num) && !this.loadedFullParticipants.contains(num)) {
            this.loadingFullParticipants.add(num);
            TLRPC$TL_channels_getParticipants tLRPC$TL_channels_getParticipants = new TLRPC$TL_channels_getParticipants();
            tLRPC$TL_channels_getParticipants.channel = getInputChannel(num.intValue());
            tLRPC$TL_channels_getParticipants.filter = new TLRPC$TL_channelParticipantsRecent();
            tLRPC$TL_channels_getParticipants.offset = 0;
            tLRPC$TL_channels_getParticipants.limit = 32;
            getConnectionsManager().sendRequest(tLRPC$TL_channels_getParticipants, new RequestDelegate(num) {
                private final /* synthetic */ Integer f$1;

                {
                    this.f$1 = r2;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$loadChannelParticipants$99$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$loadChannelParticipants$99$MessagesController(Integer num, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_error, tLObject, num) {
            private final /* synthetic */ TLRPC$TL_error f$1;
            private final /* synthetic */ TLObject f$2;
            private final /* synthetic */ Integer f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesController.this.lambda$null$98$MessagesController(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    public /* synthetic */ void lambda$null$98$MessagesController(TLRPC$TL_error tLRPC$TL_error, TLObject tLObject, Integer num) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_channels_channelParticipants tLRPC$TL_channels_channelParticipants = (TLRPC$TL_channels_channelParticipants) tLObject;
            putUsers(tLRPC$TL_channels_channelParticipants.users, false);
            getMessagesStorage().putUsersAndChats(tLRPC$TL_channels_channelParticipants.users, (ArrayList<TLRPC$Chat>) null, true, true);
            getMessagesStorage().updateChannelUsers(num.intValue(), tLRPC$TL_channels_channelParticipants.participants);
            this.loadedFullParticipants.add(num);
        }
        this.loadingFullParticipants.remove(num);
    }

    public void processChatInfo(int i, TLRPC$ChatFull tLRPC$ChatFull, ArrayList<TLRPC$User> arrayList, boolean z, boolean z2, boolean z3, MessageObject messageObject) {
        AndroidUtilities.runOnUIThread(new Runnable(z, i, z3, z2, tLRPC$ChatFull, arrayList, messageObject) {
            private final /* synthetic */ boolean f$1;
            private final /* synthetic */ int f$2;
            private final /* synthetic */ boolean f$3;
            private final /* synthetic */ boolean f$4;
            private final /* synthetic */ TLRPC$ChatFull f$5;
            private final /* synthetic */ ArrayList f$6;
            private final /* synthetic */ MessageObject f$7;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
                this.f$7 = r8;
            }

            public final void run() {
                MessagesController.this.lambda$processChatInfo$100$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7);
            }
        });
    }

    public /* synthetic */ void lambda$processChatInfo$100$MessagesController(boolean z, int i, boolean z2, boolean z3, TLRPC$ChatFull tLRPC$ChatFull, ArrayList arrayList, MessageObject messageObject) {
        if (z && i > 0 && !z2) {
            loadFullChat(i, 0, z3);
        }
        if (tLRPC$ChatFull != null) {
            if (this.fullChats.get(i) == null) {
                this.fullChats.put(i, tLRPC$ChatFull);
            }
            putUsers(arrayList, z);
            if (tLRPC$ChatFull.stickerset != null) {
                getMediaDataController().getGroupStickerSetById(tLRPC$ChatFull.stickerset);
            }
            getNotificationCenter().postNotificationName(NotificationCenter.chatInfoDidLoad, tLRPC$ChatFull, 0, Boolean.valueOf(z2), messageObject);
        }
    }

    public void loadUserInfo(TLRPC$User tLRPC$User, boolean z, int i) {
        getMessagesStorage().loadUserInfo(tLRPC$User, z, i);
    }

    public void processUserInfo(TLRPC$User tLRPC$User, TLRPC$UserFull tLRPC$UserFull, boolean z, boolean z2, MessageObject messageObject, int i) {
        AndroidUtilities.runOnUIThread(new Runnable(z, tLRPC$User, i, z2, tLRPC$UserFull, messageObject) {
            private final /* synthetic */ boolean f$1;
            private final /* synthetic */ TLRPC$User f$2;
            private final /* synthetic */ int f$3;
            private final /* synthetic */ boolean f$4;
            private final /* synthetic */ TLRPC$UserFull f$5;
            private final /* synthetic */ MessageObject f$6;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
            }

            public final void run() {
                MessagesController.this.lambda$processUserInfo$101$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
            }
        });
    }

    public /* synthetic */ void lambda$processUserInfo$101$MessagesController(boolean z, TLRPC$User tLRPC$User, int i, boolean z2, TLRPC$UserFull tLRPC$UserFull, MessageObject messageObject) {
        if (z) {
            loadFullUser(tLRPC$User, i, z2);
        }
        if (tLRPC$UserFull != null) {
            if (this.fullUsers.get(tLRPC$User.id) == null) {
                this.fullUsers.put(tLRPC$User.id, tLRPC$UserFull);
                if (tLRPC$UserFull.blocked) {
                    this.blockedUsers.put(tLRPC$User.id, 1);
                } else {
                    this.blockedUsers.delete(tLRPC$User.id);
                }
            }
            getNotificationCenter().postNotificationName(NotificationCenter.userInfoDidLoad, Integer.valueOf(tLRPC$User.id), tLRPC$UserFull, messageObject);
        }
    }

    public void updateTimerProc() {
        ArrayList arrayList;
        long currentTimeMillis = System.currentTimeMillis();
        checkDeletingTask(false);
        checkReadTasks();
        if (getUserConfig().isClientActivated()) {
            if (getConnectionsManager().getPauseTime() != 0 || !ApplicationLoader.isScreenOn || ApplicationLoader.mainInterfacePausedStageQueue) {
                if (this.statusSettingState != 2 && !this.offlineSent && Math.abs(System.currentTimeMillis() - getConnectionsManager().getPauseTime()) >= 2000) {
                    this.statusSettingState = 2;
                    if (this.statusRequest != 0) {
                        getConnectionsManager().cancelRequest(this.statusRequest, true);
                    }
                    TLRPC$TL_account_updateStatus tLRPC$TL_account_updateStatus = new TLRPC$TL_account_updateStatus();
                    tLRPC$TL_account_updateStatus.offline = true;
                    this.statusRequest = getConnectionsManager().sendRequest(tLRPC$TL_account_updateStatus, new RequestDelegate() {
                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$updateTimerProc$103$MessagesController(tLObject, tLRPC$TL_error);
                        }
                    });
                }
            } else if (ApplicationLoader.mainInterfacePausedStageQueueTime != 0 && Math.abs(ApplicationLoader.mainInterfacePausedStageQueueTime - System.currentTimeMillis()) > 1000 && this.statusSettingState != 1 && (this.lastStatusUpdateTime == 0 || Math.abs(System.currentTimeMillis() - this.lastStatusUpdateTime) >= 55000 || this.offlineSent)) {
                this.statusSettingState = 1;
                if (this.statusRequest != 0) {
                    getConnectionsManager().cancelRequest(this.statusRequest, true);
                }
                TLRPC$TL_account_updateStatus tLRPC$TL_account_updateStatus2 = new TLRPC$TL_account_updateStatus();
                tLRPC$TL_account_updateStatus2.offline = false;
                this.statusRequest = getConnectionsManager().sendRequest(tLRPC$TL_account_updateStatus2, new RequestDelegate() {
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$updateTimerProc$102$MessagesController(tLObject, tLRPC$TL_error);
                    }
                });
            }
            if (this.updatesQueueChannels.size() != 0) {
                for (int i = 0; i < this.updatesQueueChannels.size(); i++) {
                    int keyAt = this.updatesQueueChannels.keyAt(i);
                    if (this.updatesStartWaitTimeChannels.valueAt(i) + 1500 < currentTimeMillis) {
                        if (BuildVars.LOGS_ENABLED) {
                            FileLog.d("QUEUE CHANNEL " + keyAt + " UPDATES WAIT TIMEOUT - CHECK QUEUE");
                        }
                        processChannelsUpdatesQueue(keyAt, 0);
                    }
                }
            }
            for (int i2 = 0; i2 < 3; i2++) {
                if (getUpdatesStartTime(i2) != 0 && getUpdatesStartTime(i2) + 1500 < currentTimeMillis) {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d(i2 + " QUEUE UPDATES WAIT TIMEOUT - CHECK QUEUE");
                    }
                    processUpdatesQueue(i2, 0);
                }
            }
        }
        if (Math.abs(System.currentTimeMillis() - this.lastViewsCheckTime) >= 5000) {
            this.lastViewsCheckTime = System.currentTimeMillis();
            if (this.channelViewsToSend.size() != 0) {
                int i3 = 0;
                while (i3 < this.channelViewsToSend.size()) {
                    int keyAt2 = this.channelViewsToSend.keyAt(i3);
                    TLRPC$TL_messages_getMessagesViews tLRPC$TL_messages_getMessagesViews = new TLRPC$TL_messages_getMessagesViews();
                    tLRPC$TL_messages_getMessagesViews.peer = getInputPeer(keyAt2);
                    tLRPC$TL_messages_getMessagesViews.id = this.channelViewsToSend.valueAt(i3);
                    tLRPC$TL_messages_getMessagesViews.increment = i3 == 0;
                    getConnectionsManager().sendRequest(tLRPC$TL_messages_getMessagesViews, new RequestDelegate(keyAt2, tLRPC$TL_messages_getMessagesViews) {
                        private final /* synthetic */ int f$1;
                        private final /* synthetic */ TLRPC$TL_messages_getMessagesViews f$2;

                        {
                            this.f$1 = r2;
                            this.f$2 = r3;
                        }

                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$updateTimerProc$105$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                        }
                    });
                    i3++;
                }
                this.channelViewsToSend.clear();
            }
            if (this.pollsToCheckSize > 0) {
                AndroidUtilities.runOnUIThread(new Runnable() {
                    public final void run() {
                        MessagesController.this.lambda$updateTimerProc$107$MessagesController();
                    }
                });
            }
        }
        if (!this.onlinePrivacy.isEmpty()) {
            ArrayList arrayList2 = null;
            int currentTime = getConnectionsManager().getCurrentTime();
            for (Map.Entry next : this.onlinePrivacy.entrySet()) {
                if (((Integer) next.getValue()).intValue() < currentTime - 30) {
                    if (arrayList2 == null) {
                        arrayList2 = new ArrayList();
                    }
                    arrayList2.add(next.getKey());
                }
            }
            if (arrayList2 != null) {
                Iterator it = arrayList2.iterator();
                while (it.hasNext()) {
                    this.onlinePrivacy.remove((Integer) it.next());
                }
                AndroidUtilities.runOnUIThread(new Runnable() {
                    public final void run() {
                        MessagesController.this.lambda$updateTimerProc$108$MessagesController();
                    }
                });
            }
        }
        if (this.shortPollChannels.size() != 0) {
            int i4 = 0;
            while (i4 < this.shortPollChannels.size()) {
                int keyAt3 = this.shortPollChannels.keyAt(i4);
                if (((long) this.shortPollChannels.valueAt(i4)) < System.currentTimeMillis() / 1000) {
                    this.shortPollChannels.delete(keyAt3);
                    i4--;
                    if (this.needShortPollChannels.indexOfKey(keyAt3) >= 0) {
                        getChannelDifference(keyAt3);
                    }
                }
                i4++;
            }
        }
        if (this.shortPollOnlines.size() != 0) {
            long elapsedRealtime = SystemClock.elapsedRealtime() / 1000;
            int i5 = 0;
            while (i5 < this.shortPollOnlines.size()) {
                int keyAt4 = this.shortPollOnlines.keyAt(i5);
                if (((long) this.shortPollOnlines.valueAt(i5)) < elapsedRealtime) {
                    if (this.needShortPollChannels.indexOfKey(keyAt4) >= 0) {
                        this.shortPollOnlines.put(keyAt4, (int) (300 + elapsedRealtime));
                    } else {
                        this.shortPollOnlines.delete(keyAt4);
                        i5--;
                    }
                    TLRPC$TL_messages_getOnlines tLRPC$TL_messages_getOnlines = new TLRPC$TL_messages_getOnlines();
                    tLRPC$TL_messages_getOnlines.peer = getInputPeer(-keyAt4);
                    getConnectionsManager().sendRequest(tLRPC$TL_messages_getOnlines, new RequestDelegate(keyAt4) {
                        private final /* synthetic */ int f$1;

                        {
                            this.f$1 = r2;
                        }

                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$updateTimerProc$110$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                        }
                    });
                }
                i5++;
            }
        }
        if (!this.printingUsers.isEmpty() || this.lastPrintingStringCount != this.printingUsers.size()) {
            ArrayList arrayList3 = new ArrayList(this.printingUsers.keySet());
            int i6 = 0;
            boolean z = false;
            while (i6 < arrayList3.size()) {
                long longValue = ((Long) arrayList3.get(i6)).longValue();
                ArrayList arrayList4 = this.printingUsers.get(Long.valueOf(longValue));
                if (arrayList4 != null) {
                    int i7 = 0;
                    while (i7 < arrayList4.size()) {
                        PrintingUser printingUser = (PrintingUser) arrayList4.get(i7);
                        ArrayList arrayList5 = arrayList3;
                        if (printingUser.lastTime + ((long) (printingUser.action instanceof TLRPC$TL_sendMessageGamePlayAction ? 30000 : 5900)) < currentTimeMillis) {
                            arrayList4.remove(printingUser);
                            i7--;
                            z = true;
                        }
                        i7++;
                        arrayList3 = arrayList5;
                    }
                }
                ArrayList arrayList6 = arrayList3;
                if (arrayList4 == null || arrayList4.isEmpty()) {
                    this.printingUsers.remove(Long.valueOf(longValue));
                    arrayList = arrayList6;
                    arrayList.remove(i6);
                    i6--;
                } else {
                    arrayList = arrayList6;
                }
                i6++;
                arrayList3 = arrayList;
            }
            updatePrintingStrings();
            if (z) {
                AndroidUtilities.runOnUIThread(new Runnable() {
                    public final void run() {
                        MessagesController.this.lambda$updateTimerProc$111$MessagesController();
                    }
                });
            }
        }
        if (Theme.selectedAutoNightType == 1 && Math.abs(currentTimeMillis - lastThemeCheckTime) >= 60) {
            AndroidUtilities.runOnUIThread(this.themeCheckRunnable);
            lastThemeCheckTime = currentTimeMillis;
        }
        if (getUserConfig().savedPasswordHash != null && Math.abs(currentTimeMillis - lastPasswordCheckTime) >= 60) {
            AndroidUtilities.runOnUIThread(this.passwordCheckRunnable);
            lastPasswordCheckTime = currentTimeMillis;
        }
        if (this.lastPushRegisterSendTime != 0 && Math.abs(SystemClock.elapsedRealtime() - this.lastPushRegisterSendTime) >= 10800000) {
            GcmPushListenerService.sendRegistrationToServer(SharedConfig.pushString);
        }
        getLocationController().update();
        lambda$checkProxyInfo$114$MessagesController(false);
        checkTosUpdate();
    }

    public /* synthetic */ void lambda$updateTimerProc$102$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            this.lastStatusUpdateTime = System.currentTimeMillis();
            this.offlineSent = false;
            this.statusSettingState = 0;
        } else {
            long j = this.lastStatusUpdateTime;
            if (j != 0) {
                this.lastStatusUpdateTime = j + 5000;
            }
        }
        this.statusRequest = 0;
    }

    public /* synthetic */ void lambda$updateTimerProc$103$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            this.offlineSent = true;
        } else {
            long j = this.lastStatusUpdateTime;
            if (j != 0) {
                this.lastStatusUpdateTime = j + 5000;
            }
        }
        this.statusRequest = 0;
    }

    public /* synthetic */ void lambda$updateTimerProc$105$MessagesController(int i, TLRPC$TL_messages_getMessagesViews tLRPC$TL_messages_getMessagesViews, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$Vector tLRPC$Vector = (TLRPC$Vector) tLObject;
            SparseArray sparseArray = new SparseArray();
            SparseIntArray sparseIntArray = (SparseIntArray) sparseArray.get(i);
            if (sparseIntArray == null) {
                sparseIntArray = new SparseIntArray();
                sparseArray.put(i, sparseIntArray);
            }
            int i2 = 0;
            while (i2 < tLRPC$TL_messages_getMessagesViews.id.size() && i2 < tLRPC$Vector.objects.size()) {
                sparseIntArray.put(tLRPC$TL_messages_getMessagesViews.id.get(i2).intValue(), ((Integer) tLRPC$Vector.objects.get(i2)).intValue());
                i2++;
            }
            getMessagesStorage().putChannelViews(sparseArray, tLRPC$TL_messages_getMessagesViews.peer instanceof TLRPC$TL_inputPeerChannel);
            AndroidUtilities.runOnUIThread(new Runnable(sparseArray) {
                private final /* synthetic */ SparseArray f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$104$MessagesController(this.f$1);
                }
            });
        }
    }

    public /* synthetic */ void lambda$null$104$MessagesController(SparseArray sparseArray) {
        getNotificationCenter().postNotificationName(NotificationCenter.didUpdateMessagesViews, sparseArray);
    }

    public /* synthetic */ void lambda$updateTimerProc$107$MessagesController() {
        long elapsedRealtime = SystemClock.elapsedRealtime();
        int size = this.pollsToCheck.size();
        int i = 0;
        while (i < size) {
            SparseArray valueAt = this.pollsToCheck.valueAt(i);
            if (valueAt != null) {
                int size2 = valueAt.size();
                int i2 = 0;
                while (i2 < size2) {
                    MessageObject messageObject = (MessageObject) valueAt.valueAt(i2);
                    if (Math.abs(elapsedRealtime - messageObject.pollLastCheckTime) >= 30000) {
                        messageObject.pollLastCheckTime = elapsedRealtime;
                        TLRPC$TL_messages_getPollResults tLRPC$TL_messages_getPollResults = new TLRPC$TL_messages_getPollResults();
                        tLRPC$TL_messages_getPollResults.peer = getInputPeer((int) messageObject.getDialogId());
                        tLRPC$TL_messages_getPollResults.msg_id = messageObject.getId();
                        getConnectionsManager().sendRequest(tLRPC$TL_messages_getPollResults, new RequestDelegate() {
                            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                MessagesController.this.lambda$null$106$MessagesController(tLObject, tLRPC$TL_error);
                            }
                        });
                    } else if (!messageObject.pollVisibleOnScreen) {
                        valueAt.remove(messageObject.getId());
                        size2--;
                        i2--;
                    }
                    i2++;
                }
                if (valueAt.size() == 0) {
                    LongSparseArray<SparseArray<MessageObject>> longSparseArray = this.pollsToCheck;
                    longSparseArray.remove(longSparseArray.keyAt(i));
                    size--;
                    i--;
                }
            }
            i++;
        }
        this.pollsToCheckSize = this.pollsToCheck.size();
    }

    public /* synthetic */ void lambda$null$106$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
    }

    public /* synthetic */ void lambda$updateTimerProc$108$MessagesController() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 4);
    }

    public /* synthetic */ void lambda$updateTimerProc$110$MessagesController(int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$TL_chatOnlines tLRPC$TL_chatOnlines = (TLRPC$TL_chatOnlines) tLObject;
            getMessagesStorage().updateChatOnlineCount(i, tLRPC$TL_chatOnlines.onlines);
            AndroidUtilities.runOnUIThread(new Runnable(i, tLRPC$TL_chatOnlines) {
                private final /* synthetic */ int f$1;
                private final /* synthetic */ TLRPC$TL_chatOnlines f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    MessagesController.this.lambda$null$109$MessagesController(this.f$1, this.f$2);
                }
            });
        }
    }

    public /* synthetic */ void lambda$null$109$MessagesController(int i, TLRPC$TL_chatOnlines tLRPC$TL_chatOnlines) {
        getNotificationCenter().postNotificationName(NotificationCenter.chatOnlineCountDidLoad, Integer.valueOf(i), Integer.valueOf(tLRPC$TL_chatOnlines.onlines));
    }

    public /* synthetic */ void lambda$updateTimerProc$111$MessagesController() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 64);
    }

    private void checkTosUpdate() {
        if (this.nextTosCheckTime <= getConnectionsManager().getCurrentTime() && !this.checkingTosUpdate && getUserConfig().isClientActivated()) {
            this.checkingTosUpdate = true;
            getConnectionsManager().sendRequest(new TLRPC$TL_help_getTermsOfServiceUpdate(), new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$checkTosUpdate$113$MessagesController(tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$checkTosUpdate$113$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        this.checkingTosUpdate = false;
        if (tLObject instanceof TLRPC$TL_help_termsOfServiceUpdateEmpty) {
            this.nextTosCheckTime = ((TLRPC$TL_help_termsOfServiceUpdateEmpty) tLObject).expires;
        } else if (tLObject instanceof TLRPC$TL_help_termsOfServiceUpdate) {
            TLRPC$TL_help_termsOfServiceUpdate tLRPC$TL_help_termsOfServiceUpdate = (TLRPC$TL_help_termsOfServiceUpdate) tLObject;
            this.nextTosCheckTime = tLRPC$TL_help_termsOfServiceUpdate.expires;
            AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_help_termsOfServiceUpdate) {
                private final /* synthetic */ TLRPC$TL_help_termsOfServiceUpdate f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$112$MessagesController(this.f$1);
                }
            });
        } else {
            this.nextTosCheckTime = getConnectionsManager().getCurrentTime() + 3600;
        }
        this.notificationsPreferences.edit().putInt("nextTosCheckTime", this.nextTosCheckTime).commit();
    }

    public /* synthetic */ void lambda$null$112$MessagesController(TLRPC$TL_help_termsOfServiceUpdate tLRPC$TL_help_termsOfServiceUpdate) {
        getNotificationCenter().postNotificationName(NotificationCenter.needShowAlert, 4, tLRPC$TL_help_termsOfServiceUpdate.terms_of_service);
    }

    public void checkProxyInfo(boolean z) {
        Utilities.stageQueue.postRunnable(new Runnable(z) {
            private final /* synthetic */ boolean f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$checkProxyInfo$114$MessagesController(this.f$1);
            }
        });
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Removed duplicated region for block: B:27:0x007c  */
    /* JADX WARNING: Removed duplicated region for block: B:28:0x0095  */
    /* JADX WARNING: Removed duplicated region for block: B:30:0x0098  */
    /* JADX WARNING: Removed duplicated region for block: B:39:? A[RETURN, SYNTHETIC] */
    /* renamed from: checkProxyInfoInternal */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void lambda$checkProxyInfo$114$MessagesController(boolean r12) {
        /*
            r11 = this;
            r0 = 0
            if (r12 == 0) goto L_0x0009
            boolean r1 = r11.checkingProxyInfo
            if (r1 == 0) goto L_0x0009
            r11.checkingProxyInfo = r0
        L_0x0009:
            if (r12 != 0) goto L_0x0017
            int r12 = r11.nextProxyInfoCheckTime
            org.telegram.tgnet.ConnectionsManager r1 = r11.getConnectionsManager()
            int r1 = r1.getCurrentTime()
            if (r12 > r1) goto L_0x001b
        L_0x0017:
            boolean r12 = r11.checkingProxyInfo
            if (r12 == 0) goto L_0x001c
        L_0x001b:
            return
        L_0x001c:
            int r12 = r11.checkingProxyInfoRequestId
            r1 = 1
            if (r12 == 0) goto L_0x002c
            org.telegram.tgnet.ConnectionsManager r12 = r11.getConnectionsManager()
            int r2 = r11.checkingProxyInfoRequestId
            r12.cancelRequest(r2, r1)
            r11.checkingProxyInfoRequestId = r0
        L_0x002c:
            android.content.SharedPreferences r12 = getGlobalMainSettings()
            java.lang.String r2 = "proxy_enabled"
            boolean r2 = r12.getBoolean(r2, r0)
            java.lang.String r3 = ""
            java.lang.String r4 = "proxy_ip"
            java.lang.String r4 = r12.getString(r4, r3)
            java.lang.String r5 = "proxy_secret"
            java.lang.String r12 = r12.getString(r5, r3)
            long r5 = r11.proxyDialogId
            r7 = 0
            int r3 = (r5 > r7 ? 1 : (r5 == r7 ? 0 : -1))
            if (r3 == 0) goto L_0x0067
            java.lang.String r3 = r11.proxyDialogAddress
            if (r3 == 0) goto L_0x0067
            java.lang.StringBuilder r5 = new java.lang.StringBuilder
            r5.<init>()
            r5.append(r4)
            r5.append(r12)
            java.lang.String r5 = r5.toString()
            boolean r3 = r3.equals(r5)
            if (r3 != 0) goto L_0x0067
            r3 = 1
            goto L_0x0068
        L_0x0067:
            r3 = 0
        L_0x0068:
            int r5 = r11.lastCheckProxyId
            int r5 = r5 + r1
            r11.lastCheckProxyId = r5
            r5 = 2
            if (r2 == 0) goto L_0x0095
            boolean r2 = android.text.TextUtils.isEmpty(r4)
            if (r2 != 0) goto L_0x0095
            boolean r2 = android.text.TextUtils.isEmpty(r12)
            if (r2 != 0) goto L_0x0095
            r11.checkingProxyInfo = r1
            int r2 = r11.lastCheckProxyId
            org.telegram.tgnet.TLRPC$TL_help_getProxyData r6 = new org.telegram.tgnet.TLRPC$TL_help_getProxyData
            r6.<init>()
            org.telegram.tgnet.ConnectionsManager r9 = r11.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$v6h88GWkJWpv-DfmdNU-zGboYgk r10 = new org.telegram.messenger.-$$Lambda$MessagesController$v6h88GWkJWpv-DfmdNU-zGboYgk
            r10.<init>(r2, r4, r12)
            int r12 = r9.sendRequest(r6, r10)
            r11.checkingProxyInfoRequestId = r12
            goto L_0x0096
        L_0x0095:
            r3 = 2
        L_0x0096:
            if (r3 == 0) goto L_0x00dd
            r11.proxyDialogId = r7
            r12 = 0
            r11.proxyDialogAddress = r12
            android.content.SharedPreferences r12 = getGlobalMainSettings()
            android.content.SharedPreferences$Editor r12 = r12.edit()
            long r6 = r11.proxyDialogId
            java.lang.String r2 = "proxy_dialog"
            android.content.SharedPreferences$Editor r12 = r12.putLong(r2, r6)
            java.lang.String r2 = "proxyDialogAddress"
            android.content.SharedPreferences$Editor r12 = r12.remove(r2)
            r12.commit()
            org.telegram.tgnet.ConnectionsManager r12 = r11.getConnectionsManager()
            int r12 = r12.getCurrentTime()
            int r12 = r12 + 3600
            r11.nextProxyInfoCheckTime = r12
            if (r3 != r5) goto L_0x00d5
            r11.checkingProxyInfo = r0
            int r12 = r11.checkingProxyInfoRequestId
            if (r12 == 0) goto L_0x00d5
            org.telegram.tgnet.ConnectionsManager r12 = r11.getConnectionsManager()
            int r2 = r11.checkingProxyInfoRequestId
            r12.cancelRequest(r2, r1)
            r11.checkingProxyInfoRequestId = r0
        L_0x00d5:
            org.telegram.messenger.-$$Lambda$MessagesController$DBAgk1weV09qLtd-t72gEXkuPiA r12 = new org.telegram.messenger.-$$Lambda$MessagesController$DBAgk1weV09qLtd-t72gEXkuPiA
            r12.<init>()
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r12)
        L_0x00dd:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$checkProxyInfo$114$MessagesController(boolean):void");
    }

    /* JADX WARNING: Code restructure failed: missing block: B:22:0x004d, code lost:
        if (r5.restricted == false) goto L_0x0053;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:34:0x0079, code lost:
        if (r5.restricted == false) goto L_0x0025;
     */
    /* JADX WARNING: Removed duplicated region for block: B:38:0x00af  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$checkProxyInfoInternal$119$MessagesController(int r11, java.lang.String r12, java.lang.String r13, org.telegram.tgnet.TLObject r14, org.telegram.tgnet.TLRPC$TL_error r15) {
        /*
            r10 = this;
            int r15 = r10.lastCheckProxyId
            if (r11 == r15) goto L_0x0005
            return
        L_0x0005:
            boolean r15 = r14 instanceof org.telegram.tgnet.TLRPC$TL_help_proxyDataEmpty
            java.lang.String r0 = "proxyDialogAddress"
            java.lang.String r1 = "proxy_dialog"
            r2 = 0
            r3 = 1
            if (r15 == 0) goto L_0x0017
            org.telegram.tgnet.TLRPC$TL_help_proxyDataEmpty r14 = (org.telegram.tgnet.TLRPC$TL_help_proxyDataEmpty) r14
            int r11 = r14.expires
            r10.nextProxyInfoCheckTime = r11
            goto L_0x00c7
        L_0x0017:
            boolean r15 = r14 instanceof org.telegram.tgnet.TLRPC$TL_help_proxyDataPromo
            if (r15 == 0) goto L_0x00bb
            r8 = r14
            org.telegram.tgnet.TLRPC$TL_help_proxyDataPromo r8 = (org.telegram.tgnet.TLRPC$TL_help_proxyDataPromo) r8
            org.telegram.tgnet.TLRPC$Peer r14 = r8.peer
            int r15 = r14.user_id
            if (r15 == 0) goto L_0x0028
            long r14 = (long) r15
        L_0x0025:
            r6 = r14
            r3 = 0
            goto L_0x007f
        L_0x0028:
            int r15 = r14.chat_id
            if (r15 == 0) goto L_0x0056
            int r14 = -r15
            long r14 = (long) r14
            r4 = 0
        L_0x002f:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r5 = r8.chats
            int r5 = r5.size()
            if (r4 >= r5) goto L_0x0053
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r5 = r8.chats
            java.lang.Object r5 = r5.get(r4)
            org.telegram.tgnet.TLRPC$Chat r5 = (org.telegram.tgnet.TLRPC$Chat) r5
            int r6 = r5.id
            org.telegram.tgnet.TLRPC$Peer r7 = r8.peer
            int r7 = r7.chat_id
            if (r6 != r7) goto L_0x0050
            boolean r4 = r5.kicked
            if (r4 != 0) goto L_0x0054
            boolean r4 = r5.restricted
            if (r4 == 0) goto L_0x0053
            goto L_0x0054
        L_0x0050:
            int r4 = r4 + 1
            goto L_0x002f
        L_0x0053:
            r3 = 0
        L_0x0054:
            r6 = r14
            goto L_0x007f
        L_0x0056:
            int r14 = r14.channel_id
            int r14 = -r14
            long r14 = (long) r14
            r4 = 0
        L_0x005b:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r5 = r8.chats
            int r5 = r5.size()
            if (r4 >= r5) goto L_0x0025
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r5 = r8.chats
            java.lang.Object r5 = r5.get(r4)
            org.telegram.tgnet.TLRPC$Chat r5 = (org.telegram.tgnet.TLRPC$Chat) r5
            int r6 = r5.id
            org.telegram.tgnet.TLRPC$Peer r7 = r8.peer
            int r7 = r7.channel_id
            if (r6 != r7) goto L_0x007c
            boolean r4 = r5.kicked
            if (r4 != 0) goto L_0x0054
            boolean r4 = r5.restricted
            if (r4 == 0) goto L_0x0025
            goto L_0x0054
        L_0x007c:
            int r4 = r4 + 1
            goto L_0x005b
        L_0x007f:
            r10.proxyDialogId = r6
            java.lang.StringBuilder r14 = new java.lang.StringBuilder
            r14.<init>()
            r14.append(r12)
            r14.append(r13)
            java.lang.String r12 = r14.toString()
            r10.proxyDialogAddress = r12
            android.content.SharedPreferences r12 = getGlobalMainSettings()
            android.content.SharedPreferences$Editor r12 = r12.edit()
            long r13 = r10.proxyDialogId
            android.content.SharedPreferences$Editor r12 = r12.putLong(r1, r13)
            java.lang.String r13 = r10.proxyDialogAddress
            android.content.SharedPreferences$Editor r12 = r12.putString(r0, r13)
            r12.commit()
            int r12 = r8.expires
            r10.nextProxyInfoCheckTime = r12
            if (r3 != 0) goto L_0x00c7
            org.telegram.messenger.-$$Lambda$MessagesController$Ao7QRslgNWrHJufd0YetZ76FaHI r12 = new org.telegram.messenger.-$$Lambda$MessagesController$Ao7QRslgNWrHJufd0YetZ76FaHI
            r4 = r12
            r5 = r10
            r9 = r11
            r4.<init>(r6, r8, r9)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r12)
            goto L_0x00c7
        L_0x00bb:
            org.telegram.tgnet.ConnectionsManager r11 = r10.getConnectionsManager()
            int r11 = r11.getCurrentTime()
            int r11 = r11 + 3600
            r10.nextProxyInfoCheckTime = r11
        L_0x00c7:
            if (r3 == 0) goto L_0x00ee
            r11 = 0
            r10.proxyDialogId = r11
            android.content.SharedPreferences r11 = getGlobalMainSettings()
            android.content.SharedPreferences$Editor r11 = r11.edit()
            long r12 = r10.proxyDialogId
            android.content.SharedPreferences$Editor r11 = r11.putLong(r1, r12)
            android.content.SharedPreferences$Editor r11 = r11.remove(r0)
            r11.commit()
            r10.checkingProxyInfoRequestId = r2
            r10.checkingProxyInfo = r2
            org.telegram.messenger.-$$Lambda$MessagesController$DBAgk1weV09qLtd-t72gEXkuPiA r11 = new org.telegram.messenger.-$$Lambda$MessagesController$DBAgk1weV09qLtd-t72gEXkuPiA
            r11.<init>()
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r11)
        L_0x00ee:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$checkProxyInfoInternal$119$MessagesController(int, java.lang.String, java.lang.String, org.telegram.tgnet.TLObject, org.telegram.tgnet.TLRPC$TL_error):void");
    }

    public /* synthetic */ void lambda$null$118$MessagesController(long j, TLRPC$TL_help_proxyDataPromo tLRPC$TL_help_proxyDataPromo, int i) {
        TLRPC$Dialog tLRPC$Dialog = this.proxyDialog;
        if (!(tLRPC$Dialog == null || j == tLRPC$Dialog.id)) {
            removeProxyDialog();
        }
        TLRPC$Dialog tLRPC$Dialog2 = this.dialogs_dict.get(j);
        this.proxyDialog = tLRPC$Dialog2;
        if (tLRPC$Dialog2 != null) {
            this.checkingProxyInfo = false;
            sortDialogs((SparseArray<TLRPC$Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, true);
            return;
        }
        SparseArray sparseArray = new SparseArray();
        SparseArray sparseArray2 = new SparseArray();
        for (int i2 = 0; i2 < tLRPC$TL_help_proxyDataPromo.users.size(); i2++) {
            TLRPC$User tLRPC$User = tLRPC$TL_help_proxyDataPromo.users.get(i2);
            sparseArray.put(tLRPC$User.id, tLRPC$User);
        }
        for (int i3 = 0; i3 < tLRPC$TL_help_proxyDataPromo.chats.size(); i3++) {
            TLRPC$Chat tLRPC$Chat = tLRPC$TL_help_proxyDataPromo.chats.get(i3);
            sparseArray2.put(tLRPC$Chat.id, tLRPC$Chat);
        }
        TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs = new TLRPC$TL_messages_getPeerDialogs();
        TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
        TLRPC$Peer tLRPC$Peer = tLRPC$TL_help_proxyDataPromo.peer;
        if (tLRPC$Peer.user_id != 0) {
            TLRPC$TL_inputPeerUser tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerUser();
            tLRPC$TL_inputDialogPeer.peer = tLRPC$TL_inputPeerUser;
            int i4 = tLRPC$TL_help_proxyDataPromo.peer.user_id;
            tLRPC$TL_inputPeerUser.user_id = i4;
            TLRPC$User tLRPC$User2 = (TLRPC$User) sparseArray.get(i4);
            if (tLRPC$User2 != null) {
                tLRPC$TL_inputDialogPeer.peer.access_hash = tLRPC$User2.access_hash;
            }
        } else if (tLRPC$Peer.chat_id != 0) {
            TLRPC$TL_inputPeerChat tLRPC$TL_inputPeerChat = new TLRPC$TL_inputPeerChat();
            tLRPC$TL_inputDialogPeer.peer = tLRPC$TL_inputPeerChat;
            int i5 = tLRPC$TL_help_proxyDataPromo.peer.chat_id;
            tLRPC$TL_inputPeerChat.chat_id = i5;
            TLRPC$Chat tLRPC$Chat2 = (TLRPC$Chat) sparseArray2.get(i5);
            if (tLRPC$Chat2 != null) {
                tLRPC$TL_inputDialogPeer.peer.access_hash = tLRPC$Chat2.access_hash;
            }
        } else {
            TLRPC$TL_inputPeerChannel tLRPC$TL_inputPeerChannel = new TLRPC$TL_inputPeerChannel();
            tLRPC$TL_inputDialogPeer.peer = tLRPC$TL_inputPeerChannel;
            int i6 = tLRPC$TL_help_proxyDataPromo.peer.channel_id;
            tLRPC$TL_inputPeerChannel.channel_id = i6;
            TLRPC$Chat tLRPC$Chat3 = (TLRPC$Chat) sparseArray2.get(i6);
            if (tLRPC$Chat3 != null) {
                tLRPC$TL_inputDialogPeer.peer.access_hash = tLRPC$Chat3.access_hash;
            }
        }
        tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer);
        this.checkingProxyInfoRequestId = getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerDialogs, new RequestDelegate(i, tLRPC$TL_help_proxyDataPromo, j) {
            private final /* synthetic */ int f$1;
            private final /* synthetic */ TLRPC$TL_help_proxyDataPromo f$2;
            private final /* synthetic */ long f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$null$117$MessagesController(this.f$1, this.f$2, this.f$3, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$null$117$MessagesController(int i, TLRPC$TL_help_proxyDataPromo tLRPC$TL_help_proxyDataPromo, long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (i == this.lastCheckProxyId) {
            this.checkingProxyInfoRequestId = 0;
            TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject;
            if (tLRPC$TL_messages_peerDialogs == null || tLRPC$TL_messages_peerDialogs.dialogs.isEmpty()) {
                AndroidUtilities.runOnUIThread(new Runnable() {
                    public final void run() {
                        MessagesController.this.lambda$null$116$MessagesController();
                    }
                });
            } else {
                getMessagesStorage().putUsersAndChats(tLRPC$TL_help_proxyDataPromo.users, tLRPC$TL_help_proxyDataPromo.chats, true, true);
                TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
                tLRPC$TL_messages_dialogs.chats = tLRPC$TL_messages_peerDialogs.chats;
                tLRPC$TL_messages_dialogs.users = tLRPC$TL_messages_peerDialogs.users;
                tLRPC$TL_messages_dialogs.dialogs = tLRPC$TL_messages_peerDialogs.dialogs;
                tLRPC$TL_messages_dialogs.messages = tLRPC$TL_messages_peerDialogs.messages;
                getMessagesStorage().putDialogs(tLRPC$TL_messages_dialogs, 2);
                AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_help_proxyDataPromo, tLRPC$TL_messages_peerDialogs, j) {
                    private final /* synthetic */ TLRPC$TL_help_proxyDataPromo f$1;
                    private final /* synthetic */ TLRPC$TL_messages_peerDialogs f$2;
                    private final /* synthetic */ long f$3;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                        this.f$3 = r4;
                    }

                    public final void run() {
                        MessagesController.this.lambda$null$115$MessagesController(this.f$1, this.f$2, this.f$3);
                    }
                });
            }
            this.checkingProxyInfo = false;
        }
    }

    public /* synthetic */ void lambda$null$115$MessagesController(TLRPC$TL_help_proxyDataPromo tLRPC$TL_help_proxyDataPromo, TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs, long j) {
        Integer num = 0;
        putUsers(tLRPC$TL_help_proxyDataPromo.users, false);
        putChats(tLRPC$TL_help_proxyDataPromo.chats, false);
        putUsers(tLRPC$TL_messages_peerDialogs.users, false);
        putChats(tLRPC$TL_messages_peerDialogs.chats, false);
        TLRPC$Dialog tLRPC$Dialog = this.proxyDialog;
        if (tLRPC$Dialog != null) {
            int i = (int) tLRPC$Dialog.id;
            if (i < 0) {
                TLRPC$Chat chat = getChat(Integer.valueOf(-i));
                if (ChatObject.isNotInChat(chat) || chat.restricted) {
                    removeDialog(this.proxyDialog);
                }
            } else {
                removeDialog(tLRPC$Dialog);
            }
        }
        TLRPC$Dialog tLRPC$Dialog2 = tLRPC$TL_messages_peerDialogs.dialogs.get(0);
        this.proxyDialog = tLRPC$Dialog2;
        tLRPC$Dialog2.id = j;
        tLRPC$Dialog2.folder_id = 0;
        if (DialogObject.isChannel(tLRPC$Dialog2)) {
            SparseIntArray sparseIntArray = this.channelsPts;
            TLRPC$Dialog tLRPC$Dialog3 = this.proxyDialog;
            sparseIntArray.put(-((int) tLRPC$Dialog3.id), tLRPC$Dialog3.pts);
        }
        Integer num2 = this.dialogs_read_inbox_max.get(Long.valueOf(this.proxyDialog.id));
        if (num2 == null) {
            num2 = num;
        }
        this.dialogs_read_inbox_max.put(Long.valueOf(this.proxyDialog.id), Integer.valueOf(Math.max(num2.intValue(), this.proxyDialog.read_inbox_max_id)));
        Integer num3 = this.dialogs_read_outbox_max.get(Long.valueOf(this.proxyDialog.id));
        if (num3 != null) {
            num = num3;
        }
        this.dialogs_read_outbox_max.put(Long.valueOf(this.proxyDialog.id), Integer.valueOf(Math.max(num.intValue(), this.proxyDialog.read_outbox_max_id)));
        this.dialogs_dict.put(j, this.proxyDialog);
        if (!tLRPC$TL_messages_peerDialogs.messages.isEmpty()) {
            SparseArray sparseArray = new SparseArray();
            SparseArray sparseArray2 = new SparseArray();
            for (int i2 = 0; i2 < tLRPC$TL_messages_peerDialogs.users.size(); i2++) {
                TLRPC$User tLRPC$User = tLRPC$TL_messages_peerDialogs.users.get(i2);
                sparseArray.put(tLRPC$User.id, tLRPC$User);
            }
            for (int i3 = 0; i3 < tLRPC$TL_messages_peerDialogs.chats.size(); i3++) {
                TLRPC$Chat tLRPC$Chat = tLRPC$TL_messages_peerDialogs.chats.get(i3);
                sparseArray2.put(tLRPC$Chat.id, tLRPC$Chat);
            }
            MessageObject messageObject = new MessageObject(this.currentAccount, tLRPC$TL_messages_peerDialogs.messages.get(0), (SparseArray<TLRPC$User>) sparseArray, (SparseArray<TLRPC$Chat>) sparseArray2, false);
            this.dialogMessage.put(j, messageObject);
            TLRPC$Dialog tLRPC$Dialog4 = this.proxyDialog;
            if (tLRPC$Dialog4.last_message_date == 0) {
                tLRPC$Dialog4.last_message_date = messageObject.messageOwner.date;
            }
        }
        sortDialogs((SparseArray<TLRPC$Chat>) null);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, true);
    }

    public /* synthetic */ void lambda$null$116$MessagesController() {
        TLRPC$Dialog tLRPC$Dialog = this.proxyDialog;
        if (tLRPC$Dialog != null) {
            int i = (int) tLRPC$Dialog.id;
            if (i < 0) {
                TLRPC$Chat chat = getChat(Integer.valueOf(-i));
                if (ChatObject.isNotInChat(chat) || chat.restricted) {
                    removeDialog(this.proxyDialog);
                }
            } else {
                removeDialog(tLRPC$Dialog);
            }
            this.proxyDialog = null;
            sortDialogs((SparseArray<TLRPC$Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
    }

    /* access modifiers changed from: private */
    public void removeProxyDialog() {
        TLRPC$Dialog tLRPC$Dialog = this.proxyDialog;
        if (tLRPC$Dialog != null) {
            int i = (int) tLRPC$Dialog.id;
            if (i < 0) {
                TLRPC$Chat chat = getChat(Integer.valueOf(-i));
                if (ChatObject.isNotInChat(chat) || chat.restricted) {
                    removeDialog(this.proxyDialog);
                }
            } else {
                removeDialog(tLRPC$Dialog);
            }
            this.proxyDialog = null;
            sortDialogs((SparseArray<TLRPC$Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
    }

    public boolean isProxyDialog(long j, boolean z) {
        TLRPC$Dialog tLRPC$Dialog = this.proxyDialog;
        return tLRPC$Dialog != null && tLRPC$Dialog.id == j && (!z || this.isLeftProxyChannel);
    }

    private String getUserNameForTyping(TLRPC$User tLRPC$User) {
        if (tLRPC$User == null) {
            return "";
        }
        String str = tLRPC$User.first_name;
        if (str != null && str.length() > 0) {
            return tLRPC$User.first_name;
        }
        String str2 = tLRPC$User.last_name;
        if (str2 == null || str2.length() <= 0) {
            return "";
        }
        return tLRPC$User.last_name;
    }

    private void updatePrintingStrings() {
        LongSparseArray longSparseArray = new LongSparseArray();
        LongSparseArray longSparseArray2 = new LongSparseArray();
        for (Map.Entry next : this.printingUsers.entrySet()) {
            long longValue = ((Long) next.getKey()).longValue();
            ArrayList arrayList = (ArrayList) next.getValue();
            int i = (int) longValue;
            if (i > 0 || i == 0 || arrayList.size() == 1) {
                PrintingUser printingUser = (PrintingUser) arrayList.get(0);
                TLRPC$User user = getUser(Integer.valueOf(printingUser.userId));
                if (user != null) {
                    TLRPC$SendMessageAction tLRPC$SendMessageAction = printingUser.action;
                    if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageRecordAudioAction) {
                        if (i < 0) {
                            longSparseArray.put(longValue, LocaleController.formatString("IsRecordingAudio", NUM, getUserNameForTyping(user)));
                        } else {
                            longSparseArray.put(longValue, LocaleController.getString("RecordingAudio", NUM));
                        }
                        longSparseArray2.put(longValue, 1);
                    } else if ((tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageRecordRoundAction) || (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageUploadRoundAction)) {
                        if (i < 0) {
                            longSparseArray.put(longValue, LocaleController.formatString("IsRecordingRound", NUM, getUserNameForTyping(user)));
                        } else {
                            longSparseArray.put(longValue, LocaleController.getString("RecordingRound", NUM));
                        }
                        longSparseArray2.put(longValue, 4);
                    } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageUploadAudioAction) {
                        if (i < 0) {
                            longSparseArray.put(longValue, LocaleController.formatString("IsSendingAudio", NUM, getUserNameForTyping(user)));
                        } else {
                            longSparseArray.put(longValue, LocaleController.getString("SendingAudio", NUM));
                        }
                        longSparseArray2.put(longValue, 2);
                    } else if ((tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageUploadVideoAction) || (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageRecordVideoAction)) {
                        if (i < 0) {
                            longSparseArray.put(longValue, LocaleController.formatString("IsSendingVideo", NUM, getUserNameForTyping(user)));
                        } else {
                            longSparseArray.put(longValue, LocaleController.getString("SendingVideoStatus", NUM));
                        }
                        longSparseArray2.put(longValue, 2);
                    } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageUploadDocumentAction) {
                        if (i < 0) {
                            longSparseArray.put(longValue, LocaleController.formatString("IsSendingFile", NUM, getUserNameForTyping(user)));
                        } else {
                            longSparseArray.put(longValue, LocaleController.getString("SendingFile", NUM));
                        }
                        longSparseArray2.put(longValue, 2);
                    } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageUploadPhotoAction) {
                        if (i < 0) {
                            longSparseArray.put(longValue, LocaleController.formatString("IsSendingPhoto", NUM, getUserNameForTyping(user)));
                        } else {
                            longSparseArray.put(longValue, LocaleController.getString("SendingPhoto", NUM));
                        }
                        longSparseArray2.put(longValue, 2);
                    } else if (tLRPC$SendMessageAction instanceof TLRPC$TL_sendMessageGamePlayAction) {
                        if (i < 0) {
                            longSparseArray.put(longValue, LocaleController.formatString("IsSendingGame", NUM, getUserNameForTyping(user)));
                        } else {
                            longSparseArray.put(longValue, LocaleController.getString("SendingGame", NUM));
                        }
                        longSparseArray2.put(longValue, 3);
                    } else {
                        if (i < 0) {
                            longSparseArray.put(longValue, LocaleController.formatString("IsTypingGroup", NUM, getUserNameForTyping(user)));
                        } else {
                            longSparseArray.put(longValue, LocaleController.getString("Typing", NUM));
                        }
                        longSparseArray2.put(longValue, 0);
                    }
                }
            } else {
                StringBuilder sb = new StringBuilder();
                Iterator it = arrayList.iterator();
                int i2 = 0;
                while (it.hasNext()) {
                    TLRPC$User user2 = getUser(Integer.valueOf(((PrintingUser) it.next()).userId));
                    if (user2 != null) {
                        if (sb.length() != 0) {
                            sb.append(", ");
                        }
                        sb.append(getUserNameForTyping(user2));
                        i2++;
                        continue;
                    }
                    if (i2 == 2) {
                        break;
                    }
                }
                if (sb.length() != 0) {
                    if (i2 == 1) {
                        longSparseArray.put(longValue, LocaleController.formatString("IsTypingGroup", NUM, sb.toString()));
                    } else if (arrayList.size() > 2) {
                        String pluralString = LocaleController.getPluralString("AndMoreTypingGroup", arrayList.size() - 2);
                        try {
                            longSparseArray.put(longValue, String.format(pluralString, new Object[]{sb.toString(), Integer.valueOf(arrayList.size() - 2)}));
                        } catch (Exception unused) {
                            longSparseArray.put(longValue, "LOC_ERR: AndMoreTypingGroup");
                        }
                    } else {
                        longSparseArray.put(longValue, LocaleController.formatString("AreTypingGroup", NUM, sb.toString()));
                    }
                    longSparseArray2.put(longValue, 0);
                }
            }
        }
        this.lastPrintingStringCount = longSparseArray.size();
        AndroidUtilities.runOnUIThread(new Runnable(longSparseArray, longSparseArray2) {
            private final /* synthetic */ LongSparseArray f$1;
            private final /* synthetic */ LongSparseArray f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$updatePrintingStrings$120$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$updatePrintingStrings$120$MessagesController(LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        this.printingStrings = longSparseArray;
        this.printingStringsTypes = longSparseArray2;
    }

    public void cancelTyping(int i, long j) {
        LongSparseArray longSparseArray = this.sendingTypings.get(i);
        if (longSparseArray != null) {
            longSparseArray.remove(j);
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:53:0x00e0, code lost:
        r1 = getEncryptedChat(java.lang.Integer.valueOf(r3));
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void sendTyping(long r9, int r11, int r12) {
        /*
            r8 = this;
            r0 = 0
            int r2 = (r9 > r0 ? 1 : (r9 == r0 ? 0 : -1))
            if (r2 != 0) goto L_0x0007
            return
        L_0x0007:
            android.util.SparseArray<android.util.LongSparseArray<java.lang.Boolean>> r0 = r8.sendingTypings
            java.lang.Object r0 = r0.get(r11)
            android.util.LongSparseArray r0 = (android.util.LongSparseArray) r0
            if (r0 == 0) goto L_0x0018
            java.lang.Object r1 = r0.get(r9)
            if (r1 == 0) goto L_0x0018
            return
        L_0x0018:
            if (r0 != 0) goto L_0x0024
            android.util.LongSparseArray r0 = new android.util.LongSparseArray
            r0.<init>()
            android.util.SparseArray<android.util.LongSparseArray<java.lang.Boolean>> r1 = r8.sendingTypings
            r1.put(r11, r0)
        L_0x0024:
            int r1 = (int) r9
            r2 = 32
            long r2 = r9 >> r2
            int r3 = (int) r2
            r2 = 2
            r4 = 1
            if (r1 == 0) goto L_0x00dd
            org.telegram.tgnet.TLRPC$TL_messages_setTyping r3 = new org.telegram.tgnet.TLRPC$TL_messages_setTyping
            r3.<init>()
            org.telegram.tgnet.TLRPC$InputPeer r1 = r8.getInputPeer(r1)
            r3.peer = r1
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_inputPeerChannel
            if (r5 == 0) goto L_0x004e
            int r1 = r1.channel_id
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            org.telegram.tgnet.TLRPC$Chat r1 = r8.getChat(r1)
            if (r1 == 0) goto L_0x004d
            boolean r1 = r1.megagroup
            if (r1 != 0) goto L_0x004e
        L_0x004d:
            return
        L_0x004e:
            org.telegram.tgnet.TLRPC$InputPeer r1 = r3.peer
            if (r1 != 0) goto L_0x0053
            return
        L_0x0053:
            if (r11 != 0) goto L_0x005d
            org.telegram.tgnet.TLRPC$TL_sendMessageTypingAction r1 = new org.telegram.tgnet.TLRPC$TL_sendMessageTypingAction
            r1.<init>()
            r3.action = r1
            goto L_0x00bf
        L_0x005d:
            if (r11 != r4) goto L_0x0067
            org.telegram.tgnet.TLRPC$TL_sendMessageRecordAudioAction r1 = new org.telegram.tgnet.TLRPC$TL_sendMessageRecordAudioAction
            r1.<init>()
            r3.action = r1
            goto L_0x00bf
        L_0x0067:
            if (r11 != r2) goto L_0x0071
            org.telegram.tgnet.TLRPC$TL_sendMessageCancelAction r1 = new org.telegram.tgnet.TLRPC$TL_sendMessageCancelAction
            r1.<init>()
            r3.action = r1
            goto L_0x00bf
        L_0x0071:
            r1 = 3
            if (r11 != r1) goto L_0x007c
            org.telegram.tgnet.TLRPC$TL_sendMessageUploadDocumentAction r1 = new org.telegram.tgnet.TLRPC$TL_sendMessageUploadDocumentAction
            r1.<init>()
            r3.action = r1
            goto L_0x00bf
        L_0x007c:
            r1 = 4
            if (r11 != r1) goto L_0x0087
            org.telegram.tgnet.TLRPC$TL_sendMessageUploadPhotoAction r1 = new org.telegram.tgnet.TLRPC$TL_sendMessageUploadPhotoAction
            r1.<init>()
            r3.action = r1
            goto L_0x00bf
        L_0x0087:
            r1 = 5
            if (r11 != r1) goto L_0x0092
            org.telegram.tgnet.TLRPC$TL_sendMessageUploadVideoAction r1 = new org.telegram.tgnet.TLRPC$TL_sendMessageUploadVideoAction
            r1.<init>()
            r3.action = r1
            goto L_0x00bf
        L_0x0092:
            r1 = 6
            if (r11 != r1) goto L_0x009d
            org.telegram.tgnet.TLRPC$TL_sendMessageGamePlayAction r1 = new org.telegram.tgnet.TLRPC$TL_sendMessageGamePlayAction
            r1.<init>()
            r3.action = r1
            goto L_0x00bf
        L_0x009d:
            r1 = 7
            if (r11 != r1) goto L_0x00a8
            org.telegram.tgnet.TLRPC$TL_sendMessageRecordRoundAction r1 = new org.telegram.tgnet.TLRPC$TL_sendMessageRecordRoundAction
            r1.<init>()
            r3.action = r1
            goto L_0x00bf
        L_0x00a8:
            r1 = 8
            if (r11 != r1) goto L_0x00b4
            org.telegram.tgnet.TLRPC$TL_sendMessageUploadRoundAction r1 = new org.telegram.tgnet.TLRPC$TL_sendMessageUploadRoundAction
            r1.<init>()
            r3.action = r1
            goto L_0x00bf
        L_0x00b4:
            r1 = 9
            if (r11 != r1) goto L_0x00bf
            org.telegram.tgnet.TLRPC$TL_sendMessageUploadAudioAction r1 = new org.telegram.tgnet.TLRPC$TL_sendMessageUploadAudioAction
            r1.<init>()
            r3.action = r1
        L_0x00bf:
            java.lang.Boolean r1 = java.lang.Boolean.valueOf(r4)
            r0.put(r9, r1)
            org.telegram.tgnet.ConnectionsManager r0 = r8.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$NVDeWpkDWnQ8kjU83Agor2cP_Dg r1 = new org.telegram.messenger.-$$Lambda$MessagesController$NVDeWpkDWnQ8kjU83Agor2cP_Dg
            r1.<init>(r11, r9)
            int r9 = r0.sendRequest(r3, r1, r2)
            if (r12 == 0) goto L_0x0126
            org.telegram.tgnet.ConnectionsManager r10 = r8.getConnectionsManager()
            r10.bindRequestToGuid(r9, r12)
            goto L_0x0126
        L_0x00dd:
            if (r11 == 0) goto L_0x00e0
            return
        L_0x00e0:
            java.lang.Integer r1 = java.lang.Integer.valueOf(r3)
            org.telegram.tgnet.TLRPC$EncryptedChat r1 = r8.getEncryptedChat(r1)
            byte[] r3 = r1.auth_key
            if (r3 == 0) goto L_0x0126
            int r3 = r3.length
            if (r3 <= r4) goto L_0x0126
            boolean r3 = r1 instanceof org.telegram.tgnet.TLRPC$TL_encryptedChat
            if (r3 == 0) goto L_0x0126
            org.telegram.tgnet.TLRPC$TL_messages_setEncryptedTyping r3 = new org.telegram.tgnet.TLRPC$TL_messages_setEncryptedTyping
            r3.<init>()
            org.telegram.tgnet.TLRPC$TL_inputEncryptedChat r5 = new org.telegram.tgnet.TLRPC$TL_inputEncryptedChat
            r5.<init>()
            r3.peer = r5
            int r6 = r1.id
            r5.chat_id = r6
            long r6 = r1.access_hash
            r5.access_hash = r6
            r3.typing = r4
            java.lang.Boolean r1 = java.lang.Boolean.valueOf(r4)
            r0.put(r9, r1)
            org.telegram.tgnet.ConnectionsManager r0 = r8.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$gBWbmZIcw51iflh17-OpUm5fGW0 r1 = new org.telegram.messenger.-$$Lambda$MessagesController$gBWbmZIcw51iflh17-OpUm5fGW0
            r1.<init>(r11, r9)
            int r9 = r0.sendRequest(r3, r1, r2)
            if (r12 == 0) goto L_0x0126
            org.telegram.tgnet.ConnectionsManager r10 = r8.getConnectionsManager()
            r10.bindRequestToGuid(r9, r12)
        L_0x0126:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.sendTyping(long, int, int):void");
    }

    public /* synthetic */ void lambda$sendTyping$122$MessagesController(int i, long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable(i, j) {
            private final /* synthetic */ int f$1;
            private final /* synthetic */ long f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$null$121$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$null$121$MessagesController(int i, long j) {
        LongSparseArray longSparseArray = this.sendingTypings.get(i);
        if (longSparseArray != null) {
            longSparseArray.remove(j);
        }
    }

    public /* synthetic */ void lambda$sendTyping$124$MessagesController(int i, long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable(i, j) {
            private final /* synthetic */ int f$1;
            private final /* synthetic */ long f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$null$123$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$null$123$MessagesController(int i, long j) {
        LongSparseArray longSparseArray = this.sendingTypings.get(i);
        if (longSparseArray != null) {
            longSparseArray.remove(j);
        }
    }

    /* access modifiers changed from: protected */
    public void removeDeletedMessagesFromArray(long j, ArrayList<TLRPC$Message> arrayList) {
        int i = 0;
        int intValue = this.deletedHistory.get(j, 0).intValue();
        if (intValue != 0) {
            int size = arrayList.size();
            while (i < size) {
                if (arrayList.get(i).id <= intValue) {
                    arrayList.remove(i);
                    i--;
                    size--;
                }
                i++;
            }
        }
    }

    public void loadMessages(long j, int i, int i2, int i3, boolean z, int i4, int i5, int i6, int i7, boolean z2, boolean z3, int i8) {
        loadMessages(j, i, i2, i3, z, i4, i5, i6, i7, z2, z3, i8, 0, 0, 0, false, 0);
    }

    public void loadMessages(long j, int i, int i2, int i3, boolean z, int i4, int i5, int i6, int i7, boolean z2, boolean z3, int i8, int i9, int i10, int i11, boolean z4, int i12) {
        loadMessagesInternal(j, i, i2, i3, z, i4, i5, i6, i7, z2, z3, i8, i9, i10, i11, z4, i12, true);
    }

    private void loadMessagesInternal(long j, int i, int i2, int i3, boolean z, int i4, int i5, int i6, int i7, boolean z2, boolean z3, int i8, int i9, int i10, int i11, boolean z4, int i12, boolean z5) {
        long j2 = j;
        int i13 = i;
        int i14 = i2;
        boolean z6 = z;
        int i15 = i4;
        int i16 = i5;
        int i17 = i6;
        int i18 = i7;
        boolean z7 = z3;
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("load messages in chat " + j2 + " count " + i13 + " max_id " + i14 + " cache " + z6 + " mindate = " + i15 + " guid " + i16 + " load_type " + i17 + " last_message_id " + i18 + " scheduled " + z7 + " index " + i8 + " firstUnread " + i9 + " unread_count " + i10 + " last_date " + i11 + " queryFromServer " + z4);
        } else {
            int i19 = i8;
            int i20 = i9;
            int i21 = i10;
            boolean z8 = z4;
        }
        int i22 = (int) j2;
        if (z6 || i22 == 0) {
            int i23 = i3;
            int i24 = i16;
            getMessagesStorage().getMessages(j, i, i2, i3, i4, i5, i6, z2, z3, i8);
        } else if (z7) {
            TLRPC$TL_messages_getScheduledHistory tLRPC$TL_messages_getScheduledHistory = new TLRPC$TL_messages_getScheduledHistory();
            tLRPC$TL_messages_getScheduledHistory.peer = getInputPeer(i22);
            tLRPC$TL_messages_getScheduledHistory.hash = i15;
            $$Lambda$MessagesController$QUCLASSNAMESQglhcuqvJAbomq9N2SXJQ r17 = r0;
            ConnectionsManager connectionsManager = getConnectionsManager();
            $$Lambda$MessagesController$QUCLASSNAMESQglhcuqvJAbomq9N2SXJQ r0 = new RequestDelegate(this, i2, i3, j, i, i5, i9, i7, i10, i11, i6, z2, i8, z4, i12) {
                private final /* synthetic */ MessagesController f$0;
                private final /* synthetic */ int f$1;
                private final /* synthetic */ int f$10;
                private final /* synthetic */ boolean f$11;
                private final /* synthetic */ int f$12;
                private final /* synthetic */ boolean f$13;
                private final /* synthetic */ int f$14;
                private final /* synthetic */ int f$2;
                private final /* synthetic */ long f$3;
                private final /* synthetic */ int f$4;
                private final /* synthetic */ int f$5;
                private final /* synthetic */ int f$6;
                private final /* synthetic */ int f$7;
                private final /* synthetic */ int f$8;
                private final /* synthetic */ int f$9;

                {
                    this.f$0 = r4;
                    this.f$1 = r5;
                    this.f$2 = r6;
                    this.f$3 = r7;
                    this.f$4 = r9;
                    this.f$5 = r10;
                    this.f$6 = r11;
                    this.f$7 = r12;
                    this.f$8 = r13;
                    this.f$9 = r14;
                    this.f$10 = r15;
                    this.f$11 = r16;
                    this.f$12 = r17;
                    this.f$13 = r18;
                    this.f$14 = r19;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController messagesController = this.f$0;
                    MessagesController messagesController2 = messagesController;
                    messagesController2.lambda$loadMessagesInternal$125$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7, this.f$8, this.f$9, this.f$10, this.f$11, this.f$12, this.f$13, this.f$14, tLObject, tLRPC$TL_error);
                }
            };
            getConnectionsManager().bindRequestToGuid(connectionsManager.sendRequest(tLRPC$TL_messages_getScheduledHistory, r17), i5);
        } else {
            int i25 = i16;
            if (!z5 || !((i17 == 3 || i17 == 2) && i18 == 0)) {
                TLRPC$TL_messages_getHistory tLRPC$TL_messages_getHistory = new TLRPC$TL_messages_getHistory();
                tLRPC$TL_messages_getHistory.peer = getInputPeer(i22);
                if (i17 == 4) {
                    tLRPC$TL_messages_getHistory.add_offset = (-i13) + 5;
                } else if (i17 == 3) {
                    tLRPC$TL_messages_getHistory.add_offset = (-i13) / 2;
                } else if (i17 == 1) {
                    tLRPC$TL_messages_getHistory.add_offset = (-i13) - 1;
                } else if (i17 == 2 && i14 != 0) {
                    tLRPC$TL_messages_getHistory.add_offset = (-i13) + 6;
                } else if (i22 < 0 && i14 != 0 && ChatObject.isChannel(getChat(Integer.valueOf(-i22)))) {
                    tLRPC$TL_messages_getHistory.add_offset = -1;
                    tLRPC$TL_messages_getHistory.limit++;
                }
                tLRPC$TL_messages_getHistory.limit = i13;
                tLRPC$TL_messages_getHistory.offset_id = i14;
                tLRPC$TL_messages_getHistory.offset_date = i3;
                ConnectionsManager connectionsManager2 = getConnectionsManager();
                $$Lambda$MessagesController$iDgdxtuKApJNEJLRIRt_N4tSl6Y r21 = r0;
                $$Lambda$MessagesController$iDgdxtuKApJNEJLRIRt_N4tSl6Y r02 = new RequestDelegate(this, j, i, i2, i3, i5, i9, i7, i10, i11, i6, z2, i8, z4, i12) {
                    private final /* synthetic */ MessagesController f$0;
                    private final /* synthetic */ long f$1;
                    private final /* synthetic */ int f$10;
                    private final /* synthetic */ boolean f$11;
                    private final /* synthetic */ int f$12;
                    private final /* synthetic */ boolean f$13;
                    private final /* synthetic */ int f$14;
                    private final /* synthetic */ int f$2;
                    private final /* synthetic */ int f$3;
                    private final /* synthetic */ int f$4;
                    private final /* synthetic */ int f$5;
                    private final /* synthetic */ int f$6;
                    private final /* synthetic */ int f$7;
                    private final /* synthetic */ int f$8;
                    private final /* synthetic */ int f$9;

                    {
                        this.f$0 = r4;
                        this.f$1 = r5;
                        this.f$2 = r7;
                        this.f$3 = r8;
                        this.f$4 = r9;
                        this.f$5 = r10;
                        this.f$6 = r11;
                        this.f$7 = r12;
                        this.f$8 = r13;
                        this.f$9 = r14;
                        this.f$10 = r15;
                        this.f$11 = r16;
                        this.f$12 = r17;
                        this.f$13 = r18;
                        this.f$14 = r19;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController messagesController = this.f$0;
                        MessagesController messagesController2 = messagesController;
                        messagesController2.lambda$loadMessagesInternal$127$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7, this.f$8, this.f$9, this.f$10, this.f$11, this.f$12, this.f$13, this.f$14, tLObject, tLRPC$TL_error);
                    }
                };
                getConnectionsManager().bindRequestToGuid(connectionsManager2.sendRequest(tLRPC$TL_messages_getHistory, r21), i5);
                return;
            }
            TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs = new TLRPC$TL_messages_getPeerDialogs();
            TLRPC$InputPeer inputPeer = getInputPeer(i22);
            TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
            tLRPC$TL_inputDialogPeer.peer = inputPeer;
            tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer);
            $$Lambda$MessagesController$kCqwZkVeWEuMo3j7mPcAs4gXG0 r16 = r0;
            ConnectionsManager connectionsManager3 = getConnectionsManager();
            $$Lambda$MessagesController$kCqwZkVeWEuMo3j7mPcAs4gXG0 r03 = new RequestDelegate(j, i, i2, i3, i4, i5, i6, z2, i8, i9, i11, z4) {
                private final /* synthetic */ long f$1;
                private final /* synthetic */ int f$10;
                private final /* synthetic */ int f$11;
                private final /* synthetic */ boolean f$12;
                private final /* synthetic */ int f$2;
                private final /* synthetic */ int f$3;
                private final /* synthetic */ int f$4;
                private final /* synthetic */ int f$5;
                private final /* synthetic */ int f$6;
                private final /* synthetic */ int f$7;
                private final /* synthetic */ boolean f$8;
                private final /* synthetic */ int f$9;

                {
                    this.f$1 = r2;
                    this.f$2 = r4;
                    this.f$3 = r5;
                    this.f$4 = r6;
                    this.f$5 = r7;
                    this.f$6 = r8;
                    this.f$7 = r9;
                    this.f$8 = r10;
                    this.f$9 = r11;
                    this.f$10 = r12;
                    this.f$11 = r13;
                    this.f$12 = r14;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$loadMessagesInternal$126$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7, this.f$8, this.f$9, this.f$10, this.f$11, this.f$12, tLObject, tLRPC$TL_error);
                }
            };
            connectionsManager3.sendRequest(tLRPC$TL_messages_getPeerDialogs, r16);
        }
    }

    public /* synthetic */ void lambda$loadMessagesInternal$125$MessagesController(int i, int i2, long j, int i3, int i4, int i5, int i6, int i7, int i8, int i9, boolean z, int i10, boolean z2, int i11, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        int i12;
        int i13 = i2;
        if (tLObject != null) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
            if (!(tLRPC$messages_Messages instanceof TLRPC$TL_messages_messagesNotModified)) {
                if (i13 == 0 || tLRPC$messages_Messages.messages.isEmpty()) {
                    i12 = i;
                } else {
                    ArrayList<TLRPC$Message> arrayList = tLRPC$messages_Messages.messages;
                    int i14 = arrayList.get(arrayList.size() - 1).id;
                    int size = tLRPC$messages_Messages.messages.size() - 1;
                    while (true) {
                        if (size < 0) {
                            break;
                        }
                        TLRPC$Message tLRPC$Message = tLRPC$messages_Messages.messages.get(size);
                        if (tLRPC$Message.date > i13) {
                            i14 = tLRPC$Message.id;
                            break;
                        }
                        size--;
                    }
                    i12 = i14;
                }
                processLoadedMessages(tLRPC$messages_Messages, j, i3, i12, i2, false, i4, i5, i6, i7, i8, i9, z, false, true, i10, z2, i11);
            }
        }
    }

    public /* synthetic */ void lambda$loadMessagesInternal$126$MessagesController(long j, int i, int i2, int i3, int i4, int i5, int i6, boolean z, int i7, int i8, int i9, boolean z2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject;
            if (!tLRPC$TL_messages_peerDialogs.dialogs.isEmpty()) {
                TLRPC$Dialog tLRPC$Dialog = tLRPC$TL_messages_peerDialogs.dialogs.get(0);
                if (tLRPC$Dialog.top_message != 0) {
                    TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
                    tLRPC$TL_messages_dialogs.chats = tLRPC$TL_messages_peerDialogs.chats;
                    tLRPC$TL_messages_dialogs.users = tLRPC$TL_messages_peerDialogs.users;
                    tLRPC$TL_messages_dialogs.dialogs = tLRPC$TL_messages_peerDialogs.dialogs;
                    tLRPC$TL_messages_dialogs.messages = tLRPC$TL_messages_peerDialogs.messages;
                    getMessagesStorage().putDialogs(tLRPC$TL_messages_dialogs, 0);
                }
                loadMessagesInternal(j, i, i2, i3, false, i4, i5, i6, tLRPC$Dialog.top_message, z, false, i7, i8, tLRPC$Dialog.unread_count, i9, z2, tLRPC$Dialog.unread_mentions_count, false);
            }
        }
    }

    public /* synthetic */ void lambda$loadMessagesInternal$127$MessagesController(long j, int i, int i2, int i3, int i4, int i5, int i6, int i7, int i8, int i9, boolean z, int i10, boolean z2, int i11, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        int i12;
        int i13 = i3;
        if (tLObject != null) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
            removeDeletedMessagesFromArray(j, tLRPC$messages_Messages.messages);
            if (tLRPC$messages_Messages.messages.size() > i) {
                tLRPC$messages_Messages.messages.remove(0);
            }
            if (i13 == 0 || tLRPC$messages_Messages.messages.isEmpty()) {
                i12 = i2;
            } else {
                ArrayList<TLRPC$Message> arrayList = tLRPC$messages_Messages.messages;
                int i14 = arrayList.get(arrayList.size() - 1).id;
                int size = tLRPC$messages_Messages.messages.size() - 1;
                while (true) {
                    if (size < 0) {
                        break;
                    }
                    TLRPC$Message tLRPC$Message = tLRPC$messages_Messages.messages.get(size);
                    if (tLRPC$Message.date > i13) {
                        i14 = tLRPC$Message.id;
                        break;
                    }
                    size--;
                }
                i12 = i14;
            }
            processLoadedMessages(tLRPC$messages_Messages, j, i, i12, i3, false, i4, i5, i6, i7, i8, i9, z, false, false, i10, z2, i11);
        }
    }

    public void reloadWebPages(long j, HashMap<String, ArrayList<MessageObject>> hashMap, boolean z) {
        HashMap<String, ArrayList<MessageObject>> hashMap2 = z ? this.reloadingScheduledWebpages : this.reloadingWebpages;
        LongSparseArray<ArrayList<MessageObject>> longSparseArray = z ? this.reloadingScheduledWebpagesPending : this.reloadingWebpagesPending;
        for (Map.Entry next : hashMap.entrySet()) {
            String str = (String) next.getKey();
            ArrayList arrayList = (ArrayList) next.getValue();
            ArrayList arrayList2 = hashMap2.get(str);
            if (arrayList2 == null) {
                arrayList2 = new ArrayList();
                hashMap2.put(str, arrayList2);
            }
            arrayList2.addAll(arrayList);
            TLRPC$TL_messages_getWebPagePreview tLRPC$TL_messages_getWebPagePreview = new TLRPC$TL_messages_getWebPagePreview();
            tLRPC$TL_messages_getWebPagePreview.message = str;
            getConnectionsManager().sendRequest(tLRPC$TL_messages_getWebPagePreview, new RequestDelegate(hashMap2, str, longSparseArray, j, z) {
                private final /* synthetic */ HashMap f$1;
                private final /* synthetic */ String f$2;
                private final /* synthetic */ LongSparseArray f$3;
                private final /* synthetic */ long f$4;
                private final /* synthetic */ boolean f$5;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r5;
                    this.f$5 = r7;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$reloadWebPages$129$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$reloadWebPages$129$MessagesController(HashMap hashMap, String str, LongSparseArray longSparseArray, long j, boolean z, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable(hashMap, str, tLObject, longSparseArray, j, z) {
            private final /* synthetic */ HashMap f$1;
            private final /* synthetic */ String f$2;
            private final /* synthetic */ TLObject f$3;
            private final /* synthetic */ LongSparseArray f$4;
            private final /* synthetic */ long f$5;
            private final /* synthetic */ boolean f$6;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r8;
            }

            public final void run() {
                MessagesController.this.lambda$null$128$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
            }
        });
    }

    public /* synthetic */ void lambda$null$128$MessagesController(HashMap hashMap, String str, TLObject tLObject, LongSparseArray longSparseArray, long j, boolean z) {
        TLObject tLObject2 = tLObject;
        ArrayList arrayList = (ArrayList) hashMap.remove(str);
        if (arrayList != null) {
            TLRPC$TL_messages_messages tLRPC$TL_messages_messages = new TLRPC$TL_messages_messages();
            if (!(tLObject2 instanceof TLRPC$TL_messageMediaWebPage)) {
                for (int i = 0; i < arrayList.size(); i++) {
                    ((MessageObject) arrayList.get(i)).messageOwner.media.webpage = new TLRPC$TL_webPageEmpty();
                    tLRPC$TL_messages_messages.messages.add(((MessageObject) arrayList.get(i)).messageOwner);
                }
            } else {
                TLRPC$TL_messageMediaWebPage tLRPC$TL_messageMediaWebPage = (TLRPC$TL_messageMediaWebPage) tLObject2;
                TLRPC$WebPage tLRPC$WebPage = tLRPC$TL_messageMediaWebPage.webpage;
                if ((tLRPC$WebPage instanceof TLRPC$TL_webPage) || (tLRPC$WebPage instanceof TLRPC$TL_webPageEmpty)) {
                    for (int i2 = 0; i2 < arrayList.size(); i2++) {
                        ((MessageObject) arrayList.get(i2)).messageOwner.media.webpage = tLRPC$TL_messageMediaWebPage.webpage;
                        if (i2 == 0) {
                            ImageLoader.saveMessageThumbs(((MessageObject) arrayList.get(i2)).messageOwner);
                        }
                        tLRPC$TL_messages_messages.messages.add(((MessageObject) arrayList.get(i2)).messageOwner);
                    }
                } else {
                    LongSparseArray longSparseArray2 = longSparseArray;
                    longSparseArray.put(tLRPC$WebPage.id, arrayList);
                }
            }
            if (!tLRPC$TL_messages_messages.messages.isEmpty()) {
                getMessagesStorage().putMessages((TLRPC$messages_Messages) tLRPC$TL_messages_messages, j, -2, 0, false, z);
                getNotificationCenter().postNotificationName(NotificationCenter.replaceMessagesObjects, Long.valueOf(j), arrayList);
            }
        }
    }

    public void processLoadedMessages(TLRPC$messages_Messages tLRPC$messages_Messages, long j, int i, int i2, int i3, boolean z, int i4, int i5, int i6, int i7, int i8, int i9, boolean z2, boolean z3, boolean z4, int i10, boolean z5, int i11) {
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("processLoadedMessages size " + tLRPC$messages_Messages.messages.size() + " in chat " + j + " count " + i + " max_id " + i2 + " cache " + z + " guid " + i4 + " load_type " + i9 + " last_message_id " + i6 + " isChannel " + z2 + " index " + i10 + " firstUnread " + i5 + " unread_count " + i7 + " last_date " + i8 + " queryFromServer " + z5);
        } else {
            TLRPC$messages_Messages tLRPC$messages_Messages2 = tLRPC$messages_Messages;
            long j2 = j;
            int i12 = i;
            int i13 = i2;
            boolean z6 = z;
            int i14 = i4;
            int i15 = i5;
            int i16 = i6;
            int i17 = i7;
            int i18 = i8;
            int i19 = i9;
            boolean z7 = z2;
            int i20 = i10;
            boolean z8 = z5;
        }
        Utilities.stageQueue.postRunnable(new Runnable(this, tLRPC$messages_Messages, j, z4, z, i, i9, z5, i5, i2, i3, i4, i6, z2, i10, i7, i8, i11, z3) {
            private final /* synthetic */ MessagesController f$0;
            private final /* synthetic */ TLRPC$messages_Messages f$1;
            private final /* synthetic */ int f$10;
            private final /* synthetic */ int f$11;
            private final /* synthetic */ int f$12;
            private final /* synthetic */ boolean f$13;
            private final /* synthetic */ int f$14;
            private final /* synthetic */ int f$15;
            private final /* synthetic */ int f$16;
            private final /* synthetic */ int f$17;
            private final /* synthetic */ boolean f$18;
            private final /* synthetic */ long f$2;
            private final /* synthetic */ boolean f$3;
            private final /* synthetic */ boolean f$4;
            private final /* synthetic */ int f$5;
            private final /* synthetic */ int f$6;
            private final /* synthetic */ boolean f$7;
            private final /* synthetic */ int f$8;
            private final /* synthetic */ int f$9;

            {
                this.f$0 = r4;
                this.f$1 = r5;
                this.f$2 = r6;
                this.f$3 = r8;
                this.f$4 = r9;
                this.f$5 = r10;
                this.f$6 = r11;
                this.f$7 = r12;
                this.f$8 = r13;
                this.f$9 = r14;
                this.f$10 = r15;
                this.f$11 = r16;
                this.f$12 = r17;
                this.f$13 = r18;
                this.f$14 = r19;
                this.f$15 = r20;
                this.f$16 = r21;
                this.f$17 = r22;
                this.f$18 = r23;
            }

            public final void run() {
                MessagesController messagesController = this.f$0;
                MessagesController messagesController2 = messagesController;
                messagesController2.lambda$processLoadedMessages$133$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7, this.f$8, this.f$9, this.f$10, this.f$11, this.f$12, this.f$13, this.f$14, this.f$15, this.f$16, this.f$17, this.f$18);
            }
        });
    }

    /* JADX WARNING: Code restructure failed: missing block: B:116:0x02b1, code lost:
        if (r3[0] < 111) goto L_0x02b8;
     */
    /* JADX WARNING: Removed duplicated region for block: B:100:0x025d  */
    /* JADX WARNING: Removed duplicated region for block: B:123:0x02ca  */
    /* JADX WARNING: Removed duplicated region for block: B:151:0x030c A[SYNTHETIC] */
    /* JADX WARNING: Removed duplicated region for block: B:52:0x014d A[LOOP:2: B:50:0x0145->B:52:0x014d, LOOP_END] */
    /* JADX WARNING: Removed duplicated region for block: B:56:0x0166 A[LOOP:3: B:54:0x015e->B:56:0x0166, LOOP_END] */
    /* JADX WARNING: Removed duplicated region for block: B:59:0x0180  */
    /* JADX WARNING: Removed duplicated region for block: B:97:0x0247  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$processLoadedMessages$133$MessagesController(org.telegram.tgnet.TLRPC$messages_Messages r26, long r27, boolean r29, boolean r30, int r31, int r32, boolean r33, int r34, int r35, int r36, int r37, int r38, boolean r39, int r40, int r41, int r42, int r43, boolean r44) {
        /*
            r25 = this;
            r15 = r25
            r14 = r26
            r12 = r27
            r11 = r29
            boolean r0 = r14 instanceof org.telegram.tgnet.TLRPC$TL_messages_channelMessages
            r10 = 1
            if (r0 == 0) goto L_0x006f
            int r0 = (int) r12
            int r6 = -r0
            if (r11 != 0) goto L_0x004a
            android.util.SparseIntArray r0 = r15.channelsPts
            int r0 = r0.get(r6)
            if (r0 != 0) goto L_0x004a
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            int r0 = r0.getChannelPtsSync(r6)
            if (r0 != 0) goto L_0x004a
            android.util.SparseIntArray r0 = r15.channelsPts
            int r1 = r14.pts
            r0.put(r6, r1)
            android.util.SparseIntArray r0 = r15.needShortPollChannels
            int r0 = r0.indexOfKey(r6)
            if (r0 < 0) goto L_0x0045
            android.util.SparseIntArray r0 = r15.shortPollChannels
            int r0 = r0.indexOfKey(r6)
            if (r0 >= 0) goto L_0x0045
            r2 = 2
            r3 = 0
            r5 = 0
            r0 = r25
            r1 = r6
            r0.getChannelDifference(r1, r2, r3, r5)
            goto L_0x0048
        L_0x0045:
            r15.getChannelDifference(r6)
        L_0x0048:
            r0 = 1
            goto L_0x004b
        L_0x004a:
            r0 = 0
        L_0x004b:
            r1 = 0
        L_0x004c:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r2 = r14.chats
            int r2 = r2.size()
            if (r1 >= r2) goto L_0x006a
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r2 = r14.chats
            java.lang.Object r2 = r2.get(r1)
            org.telegram.tgnet.TLRPC$Chat r2 = (org.telegram.tgnet.TLRPC$Chat) r2
            int r3 = r2.id
            if (r3 != r6) goto L_0x0067
            boolean r1 = r2.megagroup
            r20 = r0
            r19 = r1
            goto L_0x0073
        L_0x0067:
            int r1 = r1 + 1
            goto L_0x004c
        L_0x006a:
            r20 = r0
            r19 = 0
            goto L_0x0073
        L_0x006f:
            r19 = 0
            r20 = 0
        L_0x0073:
            int r0 = (int) r12
            r1 = 32
            long r1 = r12 >> r1
            int r2 = (int) r1
            if (r30 != 0) goto L_0x0080
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r14.messages
            org.telegram.messenger.ImageLoader.saveMessagesThumbs(r1)
        L_0x0080:
            if (r2 == r10) goto L_0x0139
            if (r0 == 0) goto L_0x0139
            if (r30 == 0) goto L_0x0139
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r0 = r14.messages
            int r0 = r0.size()
            r1 = 0
            if (r0 == 0) goto L_0x00ae
            if (r11 == 0) goto L_0x0139
            long r3 = android.os.SystemClock.elapsedRealtime()
            android.util.LongSparseArray<java.lang.Long> r0 = r15.lastScheduledServerQueryTime
            java.lang.Long r5 = java.lang.Long.valueOf(r1)
            java.lang.Object r0 = r0.get(r12, r5)
            java.lang.Long r0 = (java.lang.Long) r0
            long r5 = r0.longValue()
            long r3 = r3 - r5
            r5 = 60000(0xea60, double:2.9644E-319)
            int r0 = (r3 > r5 ? 1 : (r3 == r5 ? 0 : -1))
            if (r0 <= 0) goto L_0x0139
        L_0x00ae:
            if (r11 == 0) goto L_0x0100
            android.util.LongSparseArray<java.lang.Long> r0 = r15.lastScheduledServerQueryTime
            long r3 = android.os.SystemClock.elapsedRealtime()
            java.lang.Long r3 = java.lang.Long.valueOf(r3)
            r0.put(r12, r3)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r0 = r14.messages
            int r0 = r0.size()
            r3 = 0
        L_0x00c4:
            if (r3 >= r0) goto L_0x00fa
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r4 = r14.messages
            java.lang.Object r4 = r4.get(r3)
            org.telegram.tgnet.TLRPC$Message r4 = (org.telegram.tgnet.TLRPC$Message) r4
            int r5 = r4.id
            if (r5 >= 0) goto L_0x00d3
            goto L_0x00f6
        L_0x00d3:
            r6 = 20261(0x4var_, double:1.00103E-319)
            long r1 = r1 * r6
            r16 = 2147483648(0x80000000, double:1.0609978955E-314)
            long r1 = r1 + r16
            long r9 = (long) r5
            long r1 = r1 + r9
            long r1 = r1 % r16
            long r1 = r1 * r6
            long r1 = r1 + r16
            int r5 = r4.edit_date
            long r8 = (long) r5
            long r1 = r1 + r8
            long r1 = r1 % r16
            long r1 = r1 * r6
            long r1 = r1 + r16
            int r4 = r4.date
            long r4 = (long) r4
            long r1 = r1 + r4
            long r1 = r1 % r16
        L_0x00f6:
            int r3 = r3 + 1
            r10 = 1
            goto L_0x00c4
        L_0x00fa:
            int r0 = (int) r1
            r10 = 1
            int r0 = r0 - r10
            r16 = r0
            goto L_0x0102
        L_0x0100:
            r16 = 0
        L_0x0102:
            org.telegram.messenger.-$$Lambda$MessagesController$RSlbmUkRGX4WmNQBPzDYEG2RQGk r22 = new org.telegram.messenger.-$$Lambda$MessagesController$RSlbmUkRGX4WmNQBPzDYEG2RQGk
            r0 = r22
            r1 = r25
            r2 = r27
            r4 = r31
            r5 = r32
            r6 = r33
            r7 = r34
            r8 = r35
            r9 = r36
            r10 = r16
            r11 = r37
            r12 = r38
            r13 = r39
            r14 = r29
            r15 = r40
            r16 = r41
            r17 = r42
            r18 = r43
            r0.<init>(r1, r2, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r22)
            r8 = r26
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r0 = r8.messages
            boolean r0 = r0.isEmpty()
            if (r0 == 0) goto L_0x013a
            return
        L_0x0139:
            r8 = r14
        L_0x013a:
            android.util.SparseArray r9 = new android.util.SparseArray
            r9.<init>()
            android.util.SparseArray r10 = new android.util.SparseArray
            r10.<init>()
            r0 = 0
        L_0x0145:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r1 = r8.users
            int r1 = r1.size()
            if (r0 >= r1) goto L_0x015d
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r1 = r8.users
            java.lang.Object r1 = r1.get(r0)
            org.telegram.tgnet.TLRPC$User r1 = (org.telegram.tgnet.TLRPC$User) r1
            int r2 = r1.id
            r9.put(r2, r1)
            int r0 = r0 + 1
            goto L_0x0145
        L_0x015d:
            r0 = 0
        L_0x015e:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r1 = r8.chats
            int r1 = r1.size()
            if (r0 >= r1) goto L_0x0176
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r1 = r8.chats
            java.lang.Object r1 = r1.get(r0)
            org.telegram.tgnet.TLRPC$Chat r1 = (org.telegram.tgnet.TLRPC$Chat) r1
            int r2 = r1.id
            r10.put(r2, r1)
            int r0 = r0 + 1
            goto L_0x015e
        L_0x0176:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r0 = r8.messages
            int r11 = r0.size()
            r15 = r25
            if (r30 != 0) goto L_0x0247
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r0 = r15.dialogs_read_inbox_max
            java.lang.Long r1 = java.lang.Long.valueOf(r27)
            java.lang.Object r0 = r0.get(r1)
            java.lang.Integer r0 = (java.lang.Integer) r0
            if (r0 != 0) goto L_0x01a7
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            r12 = r27
            r14 = 0
            int r0 = r0.getDialogReadMax(r14, r12)
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r15.dialogs_read_inbox_max
            java.lang.Long r2 = java.lang.Long.valueOf(r27)
            r1.put(r2, r0)
            goto L_0x01aa
        L_0x01a7:
            r12 = r27
            r14 = 0
        L_0x01aa:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r15.dialogs_read_outbox_max
            java.lang.Long r2 = java.lang.Long.valueOf(r27)
            java.lang.Object r1 = r1.get(r2)
            java.lang.Integer r1 = (java.lang.Integer) r1
            if (r1 != 0) goto L_0x01cf
            org.telegram.messenger.MessagesStorage r1 = r25.getMessagesStorage()
            r7 = 1
            int r1 = r1.getDialogReadMax(r7, r12)
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r2 = r15.dialogs_read_outbox_max
            java.lang.Long r3 = java.lang.Long.valueOf(r27)
            r2.put(r3, r1)
            goto L_0x01d0
        L_0x01cf:
            r7 = 1
        L_0x01d0:
            r2 = 0
        L_0x01d1:
            if (r2 >= r11) goto L_0x0230
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r3 = r8.messages
            java.lang.Object r3 = r3.get(r2)
            org.telegram.tgnet.TLRPC$Message r3 = (org.telegram.tgnet.TLRPC$Message) r3
            if (r19 == 0) goto L_0x01e4
            int r4 = r3.flags
            r5 = -2147483648(0xfffffffvar_, float:-0.0)
            r4 = r4 | r5
            r3.flags = r4
        L_0x01e4:
            r6 = r29
            if (r6 != 0) goto L_0x022d
            org.telegram.tgnet.TLRPC$MessageAction r4 = r3.action
            boolean r5 = r4 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatDeleteUser
            if (r5 == 0) goto L_0x0209
            int r4 = r4.user_id
            java.lang.Object r4 = r9.get(r4)
            org.telegram.tgnet.TLRPC$User r4 = (org.telegram.tgnet.TLRPC$User) r4
            if (r4 == 0) goto L_0x0209
            boolean r4 = r4.bot
            if (r4 == 0) goto L_0x0209
            org.telegram.tgnet.TLRPC$TL_replyKeyboardHide r4 = new org.telegram.tgnet.TLRPC$TL_replyKeyboardHide
            r4.<init>()
            r3.reply_markup = r4
            int r4 = r3.flags
            r4 = r4 | 64
            r3.flags = r4
        L_0x0209:
            org.telegram.tgnet.TLRPC$MessageAction r4 = r3.action
            boolean r5 = r4 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatMigrateTo
            if (r5 != 0) goto L_0x0229
            boolean r4 = r4 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChannelCreate
            if (r4 == 0) goto L_0x0214
            goto L_0x0229
        L_0x0214:
            boolean r4 = r3.out
            if (r4 == 0) goto L_0x021a
            r4 = r1
            goto L_0x021b
        L_0x021a:
            r4 = r0
        L_0x021b:
            int r4 = r4.intValue()
            int r5 = r3.id
            if (r4 >= r5) goto L_0x0225
            r4 = 1
            goto L_0x0226
        L_0x0225:
            r4 = 0
        L_0x0226:
            r3.unread = r4
            goto L_0x022d
        L_0x0229:
            r3.unread = r14
            r3.media_unread = r14
        L_0x022d:
            int r2 = r2 + 1
            goto L_0x01d1
        L_0x0230:
            r6 = r29
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            r1 = r26
            r2 = r27
            r4 = r32
            r5 = r35
            r14 = r6
            r6 = r20
            r7 = r29
            r0.putMessages((org.telegram.tgnet.TLRPC$messages_Messages) r1, (long) r2, (int) r4, (int) r5, (boolean) r6, (boolean) r7)
            goto L_0x024b
        L_0x0247:
            r12 = r27
            r14 = r29
        L_0x024b:
            java.util.ArrayList r7 = new java.util.ArrayList
            r7.<init>()
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            java.util.HashMap r6 = new java.util.HashMap
            r6.<init>()
            r5 = 0
        L_0x025b:
            if (r5 >= r11) goto L_0x0314
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r8.messages
            java.lang.Object r1 = r1.get(r5)
            r4 = r1
            org.telegram.tgnet.TLRPC$Message r4 = (org.telegram.tgnet.TLRPC$Message) r4
            r4.dialog_id = r12
            org.telegram.messenger.MessageObject r3 = new org.telegram.messenger.MessageObject
            int r2 = r15.currentAccount
            r16 = 1
            r1 = r3
            r23 = r3
            r3 = r4
            r24 = r4
            r4 = r9
            r17 = r5
            r5 = r10
            r15 = r6
            r6 = r16
            r1.<init>((int) r2, (org.telegram.tgnet.TLRPC$Message) r3, (android.util.SparseArray<org.telegram.tgnet.TLRPC$User>) r4, (android.util.SparseArray<org.telegram.tgnet.TLRPC$Chat>) r5, (boolean) r6)
            r1 = r23
            r1.scheduled = r14
            r7.add(r1)
            if (r30 == 0) goto L_0x030a
            r2 = r24
            boolean r3 = r2.legacy
            r4 = 111(0x6f, float:1.56E-43)
            if (r3 == 0) goto L_0x029d
            int r3 = r2.layer
            if (r3 >= r4) goto L_0x029d
            int r3 = r2.id
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)
            r0.add(r3)
            goto L_0x02c2
        L_0x029d:
            org.telegram.tgnet.TLRPC$MessageMedia r3 = r2.media
            boolean r5 = r3 instanceof org.telegram.tgnet.TLRPC$TL_messageMediaUnsupported
            if (r5 == 0) goto L_0x02c2
            byte[] r3 = r3.bytes
            if (r3 == 0) goto L_0x02c2
            int r5 = r3.length
            if (r5 == 0) goto L_0x02b6
            int r5 = r3.length
            r6 = 1
            if (r5 != r6) goto L_0x02b4
            r5 = 0
            byte r3 = r3[r5]
            if (r3 >= r4) goto L_0x02c4
            goto L_0x02b8
        L_0x02b4:
            r5 = 0
            goto L_0x02c4
        L_0x02b6:
            r5 = 0
            r6 = 1
        L_0x02b8:
            int r3 = r2.id
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)
            r0.add(r3)
            goto L_0x02c4
        L_0x02c2:
            r5 = 0
            r6 = 1
        L_0x02c4:
            org.telegram.tgnet.TLRPC$MessageMedia r3 = r2.media
            boolean r4 = r3 instanceof org.telegram.tgnet.TLRPC$TL_messageMediaWebPage
            if (r4 == 0) goto L_0x030c
            org.telegram.tgnet.TLRPC$WebPage r3 = r3.webpage
            boolean r4 = r3 instanceof org.telegram.tgnet.TLRPC$TL_webPagePending
            if (r4 == 0) goto L_0x02e6
            int r3 = r3.date
            org.telegram.tgnet.ConnectionsManager r4 = r25.getConnectionsManager()
            int r4 = r4.getCurrentTime()
            if (r3 > r4) goto L_0x02e6
            int r1 = r2.id
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            r0.add(r1)
            goto L_0x030c
        L_0x02e6:
            org.telegram.tgnet.TLRPC$MessageMedia r3 = r2.media
            org.telegram.tgnet.TLRPC$WebPage r3 = r3.webpage
            boolean r4 = r3 instanceof org.telegram.tgnet.TLRPC$TL_webPageUrlPending
            if (r4 == 0) goto L_0x030c
            java.lang.String r3 = r3.url
            java.lang.Object r3 = r15.get(r3)
            java.util.ArrayList r3 = (java.util.ArrayList) r3
            if (r3 != 0) goto L_0x0306
            java.util.ArrayList r3 = new java.util.ArrayList
            r3.<init>()
            org.telegram.tgnet.TLRPC$MessageMedia r2 = r2.media
            org.telegram.tgnet.TLRPC$WebPage r2 = r2.webpage
            java.lang.String r2 = r2.url
            r15.put(r2, r3)
        L_0x0306:
            r3.add(r1)
            goto L_0x030c
        L_0x030a:
            r5 = 0
            r6 = 1
        L_0x030c:
            int r1 = r17 + 1
            r5 = r1
            r6 = r15
            r15 = r25
            goto L_0x025b
        L_0x0314:
            r15 = r6
            org.telegram.messenger.-$$Lambda$MessagesController$l9rKtPB2q-tuEUPSxaUxZTuoDZY r22 = new org.telegram.messenger.-$$Lambda$MessagesController$l9rKtPB2q-tuEUPSxaUxZTuoDZY
            r20 = r0
            r0 = r22
            r1 = r25
            r2 = r26
            r3 = r30
            r4 = r29
            r5 = r33
            r6 = r32
            r11 = r7
            r7 = r34
            r8 = r31
            r9 = r27
            r12 = r38
            r13 = r41
            r14 = r42
            r21 = r15
            r15 = r44
            r16 = r37
            r17 = r40
            r18 = r35
            r19 = r43
            r0.<init>(r1, r2, r3, r4, r5, r6, r7, r8, r9, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r22)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$processLoadedMessages$133$MessagesController(org.telegram.tgnet.TLRPC$messages_Messages, long, boolean, boolean, int, int, boolean, int, int, int, int, int, boolean, int, int, int, int, boolean):void");
    }

    public /* synthetic */ void lambda$null$130$MessagesController(long j, int i, int i2, boolean z, int i3, int i4, int i5, int i6, int i7, int i8, boolean z2, boolean z3, int i9, int i10, int i11, int i12) {
        loadMessages(j, i, (i2 != 2 || !z) ? i4 : i3, i5, false, i6, i7, i2, i8, z2, z3, i9, i3, i10, i11, z, i12);
    }

    public /* synthetic */ void lambda$null$132$MessagesController(TLRPC$messages_Messages tLRPC$messages_Messages, boolean z, boolean z2, boolean z3, int i, int i2, int i3, long j, ArrayList arrayList, int i4, int i5, int i6, boolean z4, int i7, int i8, int i9, int i10, ArrayList arrayList2, HashMap hashMap) {
        int i11;
        long j2;
        boolean z5;
        MessagesController messagesController;
        int i12;
        int i13;
        TLRPC$messages_Messages tLRPC$messages_Messages2 = tLRPC$messages_Messages;
        boolean z6 = z;
        boolean z7 = z2;
        long j3 = j;
        putUsers(tLRPC$messages_Messages2.users, z6);
        putChats(tLRPC$messages_Messages2.chats, z6);
        if (z7) {
            int i14 = i;
            i11 = 0;
        } else {
            int i15 = i;
            if (!z3 || i15 != 2) {
                i12 = i2;
                i13 = Integer.MAX_VALUE;
            } else {
                i13 = Integer.MAX_VALUE;
                for (int i16 = 0; i16 < tLRPC$messages_Messages2.messages.size(); i16++) {
                    TLRPC$Message tLRPC$Message = tLRPC$messages_Messages2.messages.get(i16);
                    if (!tLRPC$Message.out || tLRPC$Message.from_scheduled) {
                        int i17 = tLRPC$Message.id;
                        if (i17 > i2 && i17 < i13) {
                            i13 = i17;
                        }
                    } else {
                        int i18 = i2;
                    }
                }
                i12 = i2;
            }
            i11 = i13 == Integer.MAX_VALUE ? i12 : i13;
        }
        int i19 = i3;
        if (z7 && i19 == 1) {
            getNotificationCenter().postNotificationName(NotificationCenter.scheduledMessagesUpdated, Long.valueOf(j), Integer.valueOf(arrayList.size()));
        }
        if (((int) j3) != 0) {
            getMediaDataController().loadReplyMessagesForMessages(arrayList, j, z2, new Runnable(this, j, i3, arrayList, z, i11, i4, i5, i6, i, z4, i7, i8, i9, i10, z2) {
                private final /* synthetic */ MessagesController f$0;
                private final /* synthetic */ long f$1;
                private final /* synthetic */ boolean f$10;
                private final /* synthetic */ int f$11;
                private final /* synthetic */ int f$12;
                private final /* synthetic */ int f$13;
                private final /* synthetic */ int f$14;
                private final /* synthetic */ boolean f$15;
                private final /* synthetic */ int f$2;
                private final /* synthetic */ ArrayList f$3;
                private final /* synthetic */ boolean f$4;
                private final /* synthetic */ int f$5;
                private final /* synthetic */ int f$6;
                private final /* synthetic */ int f$7;
                private final /* synthetic */ int f$8;
                private final /* synthetic */ int f$9;

                {
                    this.f$0 = r4;
                    this.f$1 = r5;
                    this.f$2 = r7;
                    this.f$3 = r8;
                    this.f$4 = r9;
                    this.f$5 = r10;
                    this.f$6 = r11;
                    this.f$7 = r12;
                    this.f$8 = r13;
                    this.f$9 = r14;
                    this.f$10 = r15;
                    this.f$11 = r16;
                    this.f$12 = r17;
                    this.f$13 = r18;
                    this.f$14 = r19;
                    this.f$15 = r20;
                }

                public final void run() {
                    MessagesController messagesController = this.f$0;
                    MessagesController messagesController2 = messagesController;
                    messagesController2.lambda$null$131$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7, this.f$8, this.f$9, this.f$10, this.f$11, this.f$12, this.f$13, this.f$14, this.f$15);
                }
            });
        } else {
            getNotificationCenter().postNotificationName(NotificationCenter.messagesDidLoad, Long.valueOf(j), Integer.valueOf(i3), arrayList, Boolean.valueOf(z), Integer.valueOf(i11), Integer.valueOf(i4), Integer.valueOf(i5), Integer.valueOf(i6), Integer.valueOf(i), Boolean.valueOf(z4), Integer.valueOf(i7), Integer.valueOf(i8), Integer.valueOf(i9), Integer.valueOf(i10), Boolean.valueOf(z2));
        }
        if (!arrayList2.isEmpty()) {
            messagesController = this;
            z5 = z2;
            j2 = j;
            messagesController.reloadMessages(arrayList2, j2, z5);
        } else {
            messagesController = this;
            z5 = z2;
            j2 = j;
        }
        if (!hashMap.isEmpty()) {
            messagesController.reloadWebPages(j2, hashMap, z5);
        }
    }

    public /* synthetic */ void lambda$null$131$MessagesController(long j, int i, ArrayList arrayList, boolean z, int i2, int i3, int i4, int i5, int i6, boolean z2, int i7, int i8, int i9, int i10, boolean z3) {
        getNotificationCenter().postNotificationName(NotificationCenter.messagesDidLoad, Long.valueOf(j), Integer.valueOf(i), arrayList, Boolean.valueOf(z), Integer.valueOf(i2), Integer.valueOf(i3), Integer.valueOf(i4), Integer.valueOf(i5), Integer.valueOf(i6), Boolean.valueOf(z2), Integer.valueOf(i7), Integer.valueOf(i8), Integer.valueOf(i9), Integer.valueOf(i10), Boolean.valueOf(z3));
    }

    public void loadHintDialogs() {
        if (this.hintDialogs.isEmpty() && !TextUtils.isEmpty(this.installReferer)) {
            TLRPC$TL_help_getRecentMeUrls tLRPC$TL_help_getRecentMeUrls = new TLRPC$TL_help_getRecentMeUrls();
            tLRPC$TL_help_getRecentMeUrls.referer = this.installReferer;
            getConnectionsManager().sendRequest(tLRPC$TL_help_getRecentMeUrls, new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$loadHintDialogs$135$MessagesController(tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$loadHintDialogs$135$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            AndroidUtilities.runOnUIThread(new Runnable(tLObject) {
                private final /* synthetic */ TLObject f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$134$MessagesController(this.f$1);
                }
            });
        }
    }

    public /* synthetic */ void lambda$null$134$MessagesController(TLObject tLObject) {
        TLRPC$TL_help_recentMeUrls tLRPC$TL_help_recentMeUrls = (TLRPC$TL_help_recentMeUrls) tLObject;
        putUsers(tLRPC$TL_help_recentMeUrls.users, false);
        putChats(tLRPC$TL_help_recentMeUrls.chats, false);
        this.hintDialogs.clear();
        this.hintDialogs.addAll(tLRPC$TL_help_recentMeUrls.urls);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    private TLRPC$TL_dialogFolder ensureFolderDialogExists(int i, boolean[] zArr) {
        if (i == 0) {
            return null;
        }
        long makeFolderDialogId = DialogObject.makeFolderDialogId(i);
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(makeFolderDialogId);
        if (tLRPC$Dialog instanceof TLRPC$TL_dialogFolder) {
            if (zArr != null) {
                zArr[0] = false;
            }
            return (TLRPC$TL_dialogFolder) tLRPC$Dialog;
        }
        if (zArr != null) {
            zArr[0] = true;
        }
        TLRPC$TL_dialogFolder tLRPC$TL_dialogFolder = new TLRPC$TL_dialogFolder();
        tLRPC$TL_dialogFolder.id = makeFolderDialogId;
        tLRPC$TL_dialogFolder.peer = new TLRPC$TL_peerUser();
        TLRPC$TL_folder tLRPC$TL_folder = new TLRPC$TL_folder();
        tLRPC$TL_dialogFolder.folder = tLRPC$TL_folder;
        tLRPC$TL_folder.id = i;
        tLRPC$TL_folder.title = LocaleController.getString("ArchivedChats", NUM);
        tLRPC$TL_dialogFolder.pinned = true;
        int i2 = 0;
        for (int i3 = 0; i3 < this.allDialogs.size(); i3++) {
            TLRPC$Dialog tLRPC$Dialog2 = this.allDialogs.get(i3);
            if (tLRPC$Dialog2.pinned) {
                i2 = Math.max(tLRPC$Dialog2.pinnedNum, i2);
            } else if (tLRPC$Dialog2.id != this.proxyDialogId) {
                break;
            }
        }
        tLRPC$TL_dialogFolder.pinnedNum = i2 + 1;
        TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
        tLRPC$TL_messages_dialogs.dialogs.add(tLRPC$TL_dialogFolder);
        getMessagesStorage().putDialogs(tLRPC$TL_messages_dialogs, 1);
        this.dialogs_dict.put(makeFolderDialogId, tLRPC$TL_dialogFolder);
        this.allDialogs.add(0, tLRPC$TL_dialogFolder);
        return tLRPC$TL_dialogFolder;
    }

    /* access modifiers changed from: private */
    /* renamed from: removeFolder */
    public void lambda$onFolderEmpty$136$MessagesController(int i) {
        long makeFolderDialogId = DialogObject.makeFolderDialogId(i);
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(makeFolderDialogId);
        if (tLRPC$Dialog != null) {
            this.dialogs_dict.remove(makeFolderDialogId);
            this.allDialogs.remove(tLRPC$Dialog);
            sortDialogs((SparseArray<TLRPC$Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
            getNotificationCenter().postNotificationName(NotificationCenter.folderBecomeEmpty, Integer.valueOf(i));
        }
    }

    /* access modifiers changed from: protected */
    public void onFolderEmpty(int i) {
        if (getUserConfig().getDialogLoadOffsets(i)[0] == Integer.MAX_VALUE) {
            lambda$onFolderEmpty$136$MessagesController(i);
            return;
        }
        loadDialogs(i, 0, 10, false, new Runnable(i) {
            private final /* synthetic */ int f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$onFolderEmpty$136$MessagesController(this.f$1);
            }
        });
    }

    public void checkIfFolderEmpty(int i) {
        if (i != 0) {
            getMessagesStorage().checkIfFolderEmpty(i);
        }
    }

    public int addDialogToFolder(long j, int i, int i2, long j2) {
        ArrayList arrayList = new ArrayList(1);
        arrayList.add(Long.valueOf(j));
        return addDialogToFolder(arrayList, i, i2, (ArrayList<TLRPC$TL_inputFolderPeer>) null, j2);
    }

    /* JADX WARNING: Removed duplicated region for block: B:53:0x0127  */
    /* JADX WARNING: Removed duplicated region for block: B:55:0x0143 A[RETURN, SYNTHETIC] */
    /* JADX WARNING: Removed duplicated region for block: B:56:0x0145  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public int addDialogToFolder(java.util.ArrayList<java.lang.Long> r22, int r23, int r24, java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_inputFolderPeer> r25, long r26) {
        /*
            r21 = this;
            r1 = r21
            r8 = r23
            r0 = r24
            org.telegram.tgnet.TLRPC$TL_folders_editPeerFolders r9 = new org.telegram.tgnet.TLRPC$TL_folders_editPeerFolders
            r9.<init>()
            r10 = 0
            r13 = 1
            r14 = 0
            int r2 = (r26 > r10 ? 1 : (r26 == r10 ? 0 : -1))
            if (r2 != 0) goto L_0x0116
            org.telegram.messenger.UserConfig r2 = r21.getUserConfig()
            int r15 = r2.getClientUserId()
            int r7 = r22.size()
            r2 = 0
            r3 = 0
            r5 = 0
            r16 = 0
        L_0x0024:
            if (r5 >= r7) goto L_0x00ba
            r6 = r22
            java.lang.Object r4 = r6.get(r5)
            java.lang.Long r4 = (java.lang.Long) r4
            long r10 = r4.longValue()
            boolean r4 = org.telegram.messenger.DialogObject.isPeerDialogId(r10)
            if (r4 != 0) goto L_0x003f
            boolean r4 = org.telegram.messenger.DialogObject.isSecretDialogId(r10)
            if (r4 != 0) goto L_0x003f
            goto L_0x005e
        L_0x003f:
            if (r8 != r13) goto L_0x0054
            long r12 = (long) r15
            int r4 = (r10 > r12 ? 1 : (r10 == r12 ? 0 : -1))
            if (r4 == 0) goto L_0x005e
            r12 = 777000(0xbdb28, double:3.83889E-318)
            int r4 = (r10 > r12 ? 1 : (r10 == r12 ? 0 : -1))
            if (r4 == 0) goto L_0x005e
            boolean r4 = r1.isProxyDialog(r10, r14)
            if (r4 == 0) goto L_0x0054
            goto L_0x005e
        L_0x0054:
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r4 = r1.dialogs_dict
            java.lang.Object r4 = r4.get(r10)
            org.telegram.tgnet.TLRPC$Dialog r4 = (org.telegram.tgnet.TLRPC$Dialog) r4
            if (r4 != 0) goto L_0x0064
        L_0x005e:
            r19 = r5
            r20 = r7
            r12 = 1
            goto L_0x00b1
        L_0x0064:
            r4.folder_id = r8
            if (r0 <= 0) goto L_0x006e
            r12 = 1
            r4.pinned = r12
            r4.pinnedNum = r0
            goto L_0x0073
        L_0x006e:
            r12 = 1
            r4.pinned = r14
            r4.pinnedNum = r14
        L_0x0073:
            if (r3 != 0) goto L_0x007a
            boolean[] r3 = new boolean[r12]
            r1.ensureFolderDialogExists(r8, r3)
        L_0x007a:
            r13 = r3
            boolean r2 = org.telegram.messenger.DialogObject.isSecretDialogId(r10)
            if (r2 == 0) goto L_0x0092
            org.telegram.messenger.MessagesStorage r2 = r21.getMessagesStorage()
            r3 = 0
            r4 = 0
            r19 = r5
            r5 = r10
            r20 = r7
            r7 = r23
            r2.setDialogsFolderId(r3, r4, r5, r7)
            goto L_0x00af
        L_0x0092:
            r19 = r5
            r20 = r7
            org.telegram.tgnet.TLRPC$TL_inputFolderPeer r2 = new org.telegram.tgnet.TLRPC$TL_inputFolderPeer
            r2.<init>()
            r2.folder_id = r8
            int r3 = (int) r10
            org.telegram.tgnet.TLRPC$InputPeer r3 = r1.getInputPeer(r3)
            r2.peer = r3
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_inputFolderPeer> r3 = r9.folder_peers
            r3.add(r2)
            int r2 = r2.getObjectSize()
            int r16 = r16 + r2
        L_0x00af:
            r3 = r13
            r2 = 1
        L_0x00b1:
            int r5 = r19 + 1
            r7 = r20
            r10 = 0
            r13 = 1
            goto L_0x0024
        L_0x00ba:
            r12 = 1
            if (r2 != 0) goto L_0x00be
            return r14
        L_0x00be:
            r2 = 0
            r1.sortDialogs(r2)
            org.telegram.messenger.NotificationCenter r0 = r21.getNotificationCenter()
            int r4 = org.telegram.messenger.NotificationCenter.dialogsNeedReload
            java.lang.Object[] r5 = new java.lang.Object[r14]
            r0.postNotificationName(r4, r5)
            if (r16 == 0) goto L_0x0110
            org.telegram.tgnet.NativeByteBuffer r4 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x0100 }
            int r0 = r16 + 12
            r4.<init>((int) r0)     // Catch:{ Exception -> 0x0100 }
            r0 = 17
            r4.writeInt32(r0)     // Catch:{ Exception -> 0x00fe }
            r4.writeInt32(r8)     // Catch:{ Exception -> 0x00fe }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_inputFolderPeer> r0 = r9.folder_peers     // Catch:{ Exception -> 0x00fe }
            int r0 = r0.size()     // Catch:{ Exception -> 0x00fe }
            r4.writeInt32(r0)     // Catch:{ Exception -> 0x00fe }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_inputFolderPeer> r0 = r9.folder_peers     // Catch:{ Exception -> 0x00fe }
            int r0 = r0.size()     // Catch:{ Exception -> 0x00fe }
            r2 = 0
        L_0x00ee:
            if (r2 >= r0) goto L_0x0105
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_inputFolderPeer> r5 = r9.folder_peers     // Catch:{ Exception -> 0x00fe }
            java.lang.Object r5 = r5.get(r2)     // Catch:{ Exception -> 0x00fe }
            org.telegram.tgnet.TLRPC$TL_inputFolderPeer r5 = (org.telegram.tgnet.TLRPC$TL_inputFolderPeer) r5     // Catch:{ Exception -> 0x00fe }
            r5.serializeToStream(r4)     // Catch:{ Exception -> 0x00fe }
            int r2 = r2 + 1
            goto L_0x00ee
        L_0x00fe:
            r0 = move-exception
            goto L_0x0102
        L_0x0100:
            r0 = move-exception
            r4 = r2
        L_0x0102:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
        L_0x0105:
            org.telegram.messenger.MessagesStorage r0 = r21.getMessagesStorage()
            long r4 = r0.createPendingTask(r4)
            r17 = r4
            goto L_0x0112
        L_0x0110:
            r17 = 0
        L_0x0112:
            r0 = r3
            r2 = r17
            goto L_0x011f
        L_0x0116:
            r0 = r25
            r2 = 0
            r12 = 1
            r9.folder_peers = r0
            r0 = r2
            r2 = r26
        L_0x011f:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_inputFolderPeer> r4 = r9.folder_peers
            boolean r4 = r4.isEmpty()
            if (r4 != 0) goto L_0x0141
            org.telegram.tgnet.ConnectionsManager r4 = r21.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$zzhYwohfMsgMlwI9UyNYaBkjR_0 r5 = new org.telegram.messenger.-$$Lambda$MessagesController$zzhYwohfMsgMlwI9UyNYaBkjR_0
            r5.<init>(r2)
            r4.sendRequest(r9, r5)
            org.telegram.messenger.MessagesStorage r2 = r21.getMessagesStorage()
            r3 = 0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_inputFolderPeer> r4 = r9.folder_peers
            r5 = 0
            r7 = r23
            r2.setDialogsFolderId(r3, r4, r5, r7)
        L_0x0141:
            if (r0 != 0) goto L_0x0145
            r13 = 0
            goto L_0x014c
        L_0x0145:
            boolean r0 = r0[r14]
            if (r0 == 0) goto L_0x014b
            r13 = 2
            goto L_0x014c
        L_0x014b:
            r13 = 1
        L_0x014c:
            return r13
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.addDialogToFolder(java.util.ArrayList, int, int, java.util.ArrayList, long):int");
    }

    public /* synthetic */ void lambda$addDialogToFolder$137$MessagesController(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public void loadDialogs(int i, int i2, int i3, boolean z) {
        loadDialogs(i, i2, i3, z, (Runnable) null);
    }

    public void loadDialogs(int i, int i2, int i3, boolean z, Runnable runnable) {
        MessageObject messageObject;
        int i4;
        if (!this.loadingDialogs.get(i) && !this.resetingDialogs) {
            boolean z2 = true;
            this.loadingDialogs.put(i, true);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("folderId = " + i + " load cacheOffset = " + i2 + " count = " + i3 + " cache = " + z);
            }
            if (z) {
                MessagesStorage messagesStorage = getMessagesStorage();
                int i5 = i2 == 0 ? 0 : this.nextDialogsCacheOffset.get(i, 0);
                if (i2 != 0) {
                    z2 = false;
                }
                messagesStorage.getDialogs(i, i5, i3, z2);
                return;
            }
            TLRPC$TL_messages_getDialogs tLRPC$TL_messages_getDialogs = new TLRPC$TL_messages_getDialogs();
            tLRPC$TL_messages_getDialogs.limit = i3;
            tLRPC$TL_messages_getDialogs.exclude_pinned = true;
            if (i != 0) {
                tLRPC$TL_messages_getDialogs.flags |= 2;
                tLRPC$TL_messages_getDialogs.folder_id = i;
            }
            int[] dialogLoadOffsets = getUserConfig().getDialogLoadOffsets(i);
            if (dialogLoadOffsets[0] == -1) {
                ArrayList<TLRPC$Dialog> dialogs = getDialogs(i);
                int size = dialogs.size() - 1;
                while (true) {
                    if (size < 0) {
                        z2 = false;
                        break;
                    }
                    TLRPC$Dialog tLRPC$Dialog = dialogs.get(size);
                    if (!tLRPC$Dialog.pinned) {
                        long j = tLRPC$Dialog.id;
                        int i6 = (int) (j >> 32);
                        if (!(((int) j) == 0 || i6 == 1 || tLRPC$Dialog.top_message <= 0 || (messageObject = this.dialogMessage.get(j)) == null || messageObject.getId() <= 0)) {
                            TLRPC$Message tLRPC$Message = messageObject.messageOwner;
                            tLRPC$TL_messages_getDialogs.offset_date = tLRPC$Message.date;
                            tLRPC$TL_messages_getDialogs.offset_id = tLRPC$Message.id;
                            TLRPC$Peer tLRPC$Peer = tLRPC$Message.to_id;
                            int i7 = tLRPC$Peer.channel_id;
                            if (i7 == 0 && (i7 = tLRPC$Peer.chat_id) == 0) {
                                i4 = tLRPC$Peer.user_id;
                            } else {
                                i4 = -i7;
                            }
                            tLRPC$TL_messages_getDialogs.offset_peer = getInputPeer(i4);
                        }
                    }
                    size--;
                }
                if (!z2) {
                    tLRPC$TL_messages_getDialogs.offset_peer = new TLRPC$TL_inputPeerEmpty();
                }
            } else if (dialogLoadOffsets[0] == Integer.MAX_VALUE) {
                this.dialogsEndReached.put(i, true);
                this.serverDialogsEndReached.put(i, true);
                this.loadingDialogs.put(i, false);
                getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                return;
            } else {
                int i8 = dialogLoadOffsets[0];
                tLRPC$TL_messages_getDialogs.offset_id = i8;
                tLRPC$TL_messages_getDialogs.offset_date = dialogLoadOffsets[1];
                if (i8 == 0) {
                    tLRPC$TL_messages_getDialogs.offset_peer = new TLRPC$TL_inputPeerEmpty();
                } else {
                    if (dialogLoadOffsets[4] != 0) {
                        TLRPC$TL_inputPeerChannel tLRPC$TL_inputPeerChannel = new TLRPC$TL_inputPeerChannel();
                        tLRPC$TL_messages_getDialogs.offset_peer = tLRPC$TL_inputPeerChannel;
                        tLRPC$TL_inputPeerChannel.channel_id = dialogLoadOffsets[4];
                    } else if (dialogLoadOffsets[2] != 0) {
                        TLRPC$TL_inputPeerUser tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerUser();
                        tLRPC$TL_messages_getDialogs.offset_peer = tLRPC$TL_inputPeerUser;
                        tLRPC$TL_inputPeerUser.user_id = dialogLoadOffsets[2];
                    } else {
                        TLRPC$TL_inputPeerChat tLRPC$TL_inputPeerChat = new TLRPC$TL_inputPeerChat();
                        tLRPC$TL_messages_getDialogs.offset_peer = tLRPC$TL_inputPeerChat;
                        tLRPC$TL_inputPeerChat.chat_id = dialogLoadOffsets[3];
                    }
                    tLRPC$TL_messages_getDialogs.offset_peer.access_hash = (((long) dialogLoadOffsets[5]) << 32) | ((long) dialogLoadOffsets[5]);
                }
            }
            getConnectionsManager().sendRequest(tLRPC$TL_messages_getDialogs, new RequestDelegate(i, i3, runnable) {
                private final /* synthetic */ int f$1;
                private final /* synthetic */ int f$2;
                private final /* synthetic */ Runnable f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$loadDialogs$138$MessagesController(this.f$1, this.f$2, this.f$3, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$loadDialogs$138$MessagesController(int i, int i2, Runnable runnable, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$messages_Dialogs tLRPC$messages_Dialogs = (TLRPC$messages_Dialogs) tLObject;
            processLoadedDialogs(tLRPC$messages_Dialogs, (ArrayList<TLRPC$EncryptedChat>) null, i, 0, i2, 0, false, false, false);
            if (runnable != null && tLRPC$messages_Dialogs.dialogs.isEmpty()) {
                AndroidUtilities.runOnUIThread(runnable);
            }
        }
    }

    public void loadGlobalNotificationsSettings() {
        if (this.loadingNotificationSettings == 0 && !getUserConfig().notificationsSettingsLoaded) {
            SharedPreferences notificationsSettings = getNotificationsSettings(this.currentAccount);
            SharedPreferences.Editor editor = null;
            if (notificationsSettings.contains("EnableGroup")) {
                boolean z = notificationsSettings.getBoolean("EnableGroup", true);
                SharedPreferences.Editor edit = notificationsSettings.edit();
                if (!z) {
                    edit.putInt("EnableGroup2", Integer.MAX_VALUE);
                    edit.putInt("EnableChannel2", Integer.MAX_VALUE);
                }
                edit.remove("EnableGroup").commit();
                editor = edit;
            }
            if (notificationsSettings.contains("EnableAll")) {
                boolean z2 = notificationsSettings.getBoolean("EnableAll", true);
                if (editor == null) {
                    editor = notificationsSettings.edit();
                }
                if (!z2) {
                    editor.putInt("EnableAll2", Integer.MAX_VALUE);
                }
                editor.remove("EnableAll").commit();
            }
            if (editor != null) {
                editor.commit();
            }
            this.loadingNotificationSettings = 3;
            for (int i = 0; i < 3; i++) {
                TLRPC$TL_account_getNotifySettings tLRPC$TL_account_getNotifySettings = new TLRPC$TL_account_getNotifySettings();
                if (i == 0) {
                    tLRPC$TL_account_getNotifySettings.peer = new TLRPC$TL_inputNotifyChats();
                } else if (i == 1) {
                    tLRPC$TL_account_getNotifySettings.peer = new TLRPC$TL_inputNotifyUsers();
                } else if (i == 2) {
                    tLRPC$TL_account_getNotifySettings.peer = new TLRPC$TL_inputNotifyBroadcasts();
                }
                getConnectionsManager().sendRequest(tLRPC$TL_account_getNotifySettings, new RequestDelegate(i) {
                    private final /* synthetic */ int f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$loadGlobalNotificationsSettings$140$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                    }
                });
            }
        }
        if (!getUserConfig().notificationsSignUpSettingsLoaded) {
            loadSignUpNotificationsSettings();
        }
    }

    public /* synthetic */ void lambda$loadGlobalNotificationsSettings$140$MessagesController(int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable(tLObject, i) {
            private final /* synthetic */ TLObject f$1;
            private final /* synthetic */ int f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$null$139$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$null$139$MessagesController(TLObject tLObject, int i) {
        if (tLObject != null) {
            this.loadingNotificationSettings--;
            TLRPC$TL_peerNotifySettings tLRPC$TL_peerNotifySettings = (TLRPC$TL_peerNotifySettings) tLObject;
            SharedPreferences.Editor edit = this.notificationsPreferences.edit();
            if (i == 0) {
                if ((tLRPC$TL_peerNotifySettings.flags & 1) != 0) {
                    edit.putBoolean("EnablePreviewGroup", tLRPC$TL_peerNotifySettings.show_previews);
                }
                if ((tLRPC$TL_peerNotifySettings.flags & 4) != 0) {
                    edit.putInt("EnableGroup2", tLRPC$TL_peerNotifySettings.mute_until);
                }
            } else if (i == 1) {
                if ((tLRPC$TL_peerNotifySettings.flags & 1) != 0) {
                    edit.putBoolean("EnablePreviewAll", tLRPC$TL_peerNotifySettings.show_previews);
                }
                if ((tLRPC$TL_peerNotifySettings.flags & 4) != 0) {
                    edit.putInt("EnableAll2", tLRPC$TL_peerNotifySettings.mute_until);
                }
            } else if (i == 2) {
                if ((tLRPC$TL_peerNotifySettings.flags & 1) != 0) {
                    edit.putBoolean("EnablePreviewChannel", tLRPC$TL_peerNotifySettings.show_previews);
                }
                if ((tLRPC$TL_peerNotifySettings.flags & 4) != 0) {
                    edit.putInt("EnableChannel2", tLRPC$TL_peerNotifySettings.mute_until);
                }
            }
            edit.commit();
            if (this.loadingNotificationSettings == 0) {
                getUserConfig().notificationsSettingsLoaded = true;
                getUserConfig().saveConfig(false);
            }
        }
    }

    public void loadSignUpNotificationsSettings() {
        if (!this.loadingNotificationSignUpSettings) {
            this.loadingNotificationSignUpSettings = true;
            getConnectionsManager().sendRequest(new TLRPC$TL_account_getContactSignUpNotification(), new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$loadSignUpNotificationsSettings$142$MessagesController(tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$loadSignUpNotificationsSettings$142$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable(tLObject) {
            private final /* synthetic */ TLObject f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$141$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$null$141$MessagesController(TLObject tLObject) {
        this.loadingNotificationSignUpSettings = false;
        SharedPreferences.Editor edit = this.notificationsPreferences.edit();
        boolean z = tLObject instanceof TLRPC$TL_boolFalse;
        this.enableJoined = z;
        edit.putBoolean("EnableContactJoined", z);
        edit.commit();
        getUserConfig().notificationsSignUpSettingsLoaded = true;
        getUserConfig().saveConfig(false);
    }

    public void forceResetDialogs() {
        resetDialogs(true, getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
        getNotificationsController().deleteAllNotificationChannels();
    }

    /* access modifiers changed from: protected */
    public void loadUnknownDialog(TLRPC$InputPeer tLRPC$InputPeer, long j) {
        NativeByteBuffer nativeByteBuffer;
        if (tLRPC$InputPeer != null) {
            long peerDialogId = DialogObject.getPeerDialogId(tLRPC$InputPeer);
            if (this.gettingUnknownDialogs.indexOfKey(peerDialogId) < 0) {
                this.gettingUnknownDialogs.put(peerDialogId, true);
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("load unknown dialog " + peerDialogId);
                }
                TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs = new TLRPC$TL_messages_getPeerDialogs();
                TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
                tLRPC$TL_inputDialogPeer.peer = tLRPC$InputPeer;
                tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer);
                if (j == 0) {
                    NativeByteBuffer nativeByteBuffer2 = null;
                    try {
                        nativeByteBuffer = new NativeByteBuffer(tLRPC$InputPeer.getObjectSize() + 4);
                        try {
                            nativeByteBuffer.writeInt32(15);
                            tLRPC$InputPeer.serializeToStream(nativeByteBuffer);
                        } catch (Exception e) {
                            e = e;
                            nativeByteBuffer2 = nativeByteBuffer;
                        }
                    } catch (Exception e2) {
                        e = e2;
                        FileLog.e((Throwable) e);
                        nativeByteBuffer = nativeByteBuffer2;
                        j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                        getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerDialogs, new RequestDelegate(j, peerDialogId) {
                            private final /* synthetic */ long f$1;
                            private final /* synthetic */ long f$2;

                            {
                                this.f$1 = r2;
                                this.f$2 = r4;
                            }

                            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                MessagesController.this.lambda$loadUnknownDialog$143$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                            }
                        });
                    }
                    j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                }
                getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerDialogs, new RequestDelegate(j, peerDialogId) {
                    private final /* synthetic */ long f$1;
                    private final /* synthetic */ long f$2;

                    {
                        this.f$1 = r2;
                        this.f$2 = r4;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$loadUnknownDialog$143$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                    }
                });
            }
        }
    }

    public /* synthetic */ void lambda$loadUnknownDialog$143$MessagesController(long j, long j2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        long j3 = j;
        if (tLObject != null) {
            TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject;
            if (!tLRPC$TL_messages_peerDialogs.dialogs.isEmpty()) {
                TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
                tLRPC$TL_messages_dialogs.dialogs.addAll(tLRPC$TL_messages_peerDialogs.dialogs);
                tLRPC$TL_messages_dialogs.messages.addAll(tLRPC$TL_messages_peerDialogs.messages);
                tLRPC$TL_messages_dialogs.users.addAll(tLRPC$TL_messages_peerDialogs.users);
                tLRPC$TL_messages_dialogs.chats.addAll(tLRPC$TL_messages_peerDialogs.chats);
                processLoadedDialogs(tLRPC$TL_messages_dialogs, (ArrayList<TLRPC$EncryptedChat>) null, ((TLRPC$TL_dialog) tLRPC$TL_messages_peerDialogs.dialogs.get(0)).folder_id, 0, 1, this.DIALOGS_LOAD_TYPE_UNKNOWN, false, false, false);
            }
        }
        if (j3 != 0) {
            getMessagesStorage().removePendingTask(j3);
        }
        this.gettingUnknownDialogs.delete(j2);
    }

    private void fetchFolderInLoadedPinnedDialogs(TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs) {
        TLRPC$InputPeer tLRPC$InputPeer;
        int size = tLRPC$TL_messages_peerDialogs.dialogs.size();
        int i = 0;
        for (int i2 = 0; i2 < size; i2++) {
            TLRPC$Dialog tLRPC$Dialog = tLRPC$TL_messages_peerDialogs.dialogs.get(i2);
            if (tLRPC$Dialog instanceof TLRPC$TL_dialogFolder) {
                TLRPC$TL_dialogFolder tLRPC$TL_dialogFolder = (TLRPC$TL_dialogFolder) tLRPC$Dialog;
                long peerDialogId = DialogObject.getPeerDialogId(tLRPC$Dialog.peer);
                if (tLRPC$TL_dialogFolder.top_message == 0 || peerDialogId == 0) {
                    tLRPC$TL_messages_peerDialogs.dialogs.remove(tLRPC$TL_dialogFolder);
                } else {
                    int size2 = tLRPC$TL_messages_peerDialogs.messages.size();
                    for (int i3 = 0; i3 < size2; i3++) {
                        TLRPC$Message tLRPC$Message = tLRPC$TL_messages_peerDialogs.messages.get(i3);
                        if (peerDialogId == MessageObject.getDialogId(tLRPC$Message) && tLRPC$Dialog.top_message == tLRPC$Message.id) {
                            TLRPC$TL_dialog tLRPC$TL_dialog = new TLRPC$TL_dialog();
                            tLRPC$TL_dialog.peer = tLRPC$Dialog.peer;
                            tLRPC$TL_dialog.top_message = tLRPC$Dialog.top_message;
                            tLRPC$TL_dialog.folder_id = tLRPC$TL_dialogFolder.folder.id;
                            tLRPC$TL_dialog.flags |= 16;
                            tLRPC$TL_messages_peerDialogs.dialogs.add(tLRPC$TL_dialog);
                            TLRPC$Peer tLRPC$Peer = tLRPC$Dialog.peer;
                            if (!(tLRPC$Peer instanceof TLRPC$TL_peerChannel)) {
                                if (!(tLRPC$Peer instanceof TLRPC$TL_peerChat)) {
                                    tLRPC$InputPeer = new TLRPC$TL_inputPeerUser();
                                    tLRPC$InputPeer.user_id = tLRPC$Dialog.peer.user_id;
                                    int size3 = tLRPC$TL_messages_peerDialogs.users.size();
                                    while (true) {
                                        if (i >= size3) {
                                            break;
                                        }
                                        TLRPC$User tLRPC$User = tLRPC$TL_messages_peerDialogs.users.get(i);
                                        if (tLRPC$User.id == tLRPC$InputPeer.user_id) {
                                            tLRPC$InputPeer.access_hash = tLRPC$User.access_hash;
                                            break;
                                        }
                                        i++;
                                    }
                                } else {
                                    tLRPC$InputPeer = new TLRPC$TL_inputPeerChat();
                                    tLRPC$InputPeer.chat_id = tLRPC$Dialog.peer.chat_id;
                                }
                            } else {
                                tLRPC$InputPeer = new TLRPC$TL_inputPeerChannel();
                                tLRPC$InputPeer.channel_id = tLRPC$Dialog.peer.channel_id;
                                int size4 = tLRPC$TL_messages_peerDialogs.chats.size();
                                while (true) {
                                    if (i >= size4) {
                                        break;
                                    }
                                    TLRPC$Chat tLRPC$Chat = tLRPC$TL_messages_peerDialogs.chats.get(i);
                                    if (tLRPC$Chat.id == tLRPC$InputPeer.channel_id) {
                                        tLRPC$InputPeer.access_hash = tLRPC$Chat.access_hash;
                                        break;
                                    }
                                    i++;
                                }
                            }
                            loadUnknownDialog(tLRPC$InputPeer, 0);
                            return;
                        }
                    }
                    return;
                }
            }
        }
    }

    public /* synthetic */ void lambda$resetDialogs$144$MessagesController(int i, int i2, int i3, int i4, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            this.resetDialogsPinned = (TLRPC$TL_messages_peerDialogs) tLObject;
            for (int i5 = 0; i5 < this.resetDialogsPinned.dialogs.size(); i5++) {
                this.resetDialogsPinned.dialogs.get(i5).pinned = true;
            }
            resetDialogs(false, i, i2, i3, i4);
        }
    }

    public /* synthetic */ void lambda$resetDialogs$145$MessagesController(int i, int i2, int i3, int i4, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            this.resetDialogsAll = (TLRPC$messages_Dialogs) tLObject;
            resetDialogs(false, i, i2, i3, i4);
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:68:0x01c4, code lost:
        if (r11.migrated_to != null) goto L_0x017b;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void resetDialogs(boolean r26, int r27, int r28, int r29, int r30) {
        /*
            r25 = this;
            r6 = r25
            r7 = 1
            r0 = 0
            java.lang.Integer r1 = java.lang.Integer.valueOf(r0)
            if (r26 == 0) goto L_0x0055
            boolean r1 = r6.resetingDialogs
            if (r1 == 0) goto L_0x000f
            return
        L_0x000f:
            org.telegram.messenger.UserConfig r1 = r25.getUserConfig()
            r1.setPinnedDialogsLoaded(r7, r0)
            r6.resetingDialogs = r7
            org.telegram.tgnet.TLRPC$TL_messages_getPinnedDialogs r8 = new org.telegram.tgnet.TLRPC$TL_messages_getPinnedDialogs
            r8.<init>()
            org.telegram.tgnet.ConnectionsManager r9 = r25.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$otze_iQm3oJ4l2B48jq-_3n5-sE r10 = new org.telegram.messenger.-$$Lambda$MessagesController$otze_iQm3oJ4l2B48jq-_3n5-sE
            r0 = r10
            r1 = r25
            r2 = r27
            r3 = r28
            r4 = r29
            r5 = r30
            r0.<init>(r2, r3, r4, r5)
            r9.sendRequest(r8, r10)
            org.telegram.tgnet.TLRPC$TL_messages_getDialogs r8 = new org.telegram.tgnet.TLRPC$TL_messages_getDialogs
            r8.<init>()
            r0 = 100
            r8.limit = r0
            r8.exclude_pinned = r7
            org.telegram.tgnet.TLRPC$TL_inputPeerEmpty r0 = new org.telegram.tgnet.TLRPC$TL_inputPeerEmpty
            r0.<init>()
            r8.offset_peer = r0
            org.telegram.tgnet.ConnectionsManager r7 = r25.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$Pgk8SqTci8u6VYewejTsmxD-580 r9 = new org.telegram.messenger.-$$Lambda$MessagesController$Pgk8SqTci8u6VYewejTsmxD-580
            r0 = r9
            r0.<init>(r2, r3, r4, r5)
            r7.sendRequest(r8, r9)
            goto L_0x02d1
        L_0x0055:
            org.telegram.tgnet.TLRPC$TL_messages_peerDialogs r2 = r6.resetDialogsPinned
            if (r2 == 0) goto L_0x02d1
            org.telegram.tgnet.TLRPC$messages_Dialogs r2 = r6.resetDialogsAll
            if (r2 == 0) goto L_0x02d1
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r2 = r2.messages
            int r10 = r2.size()
            org.telegram.tgnet.TLRPC$messages_Dialogs r2 = r6.resetDialogsAll
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r2.dialogs
            int r18 = r2.size()
            org.telegram.tgnet.TLRPC$TL_messages_peerDialogs r2 = r6.resetDialogsPinned
            r6.fetchFolderInLoadedPinnedDialogs(r2)
            org.telegram.tgnet.TLRPC$messages_Dialogs r2 = r6.resetDialogsAll
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r2.dialogs
            org.telegram.tgnet.TLRPC$TL_messages_peerDialogs r3 = r6.resetDialogsPinned
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r3 = r3.dialogs
            r2.addAll(r3)
            org.telegram.tgnet.TLRPC$messages_Dialogs r2 = r6.resetDialogsAll
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r2 = r2.messages
            org.telegram.tgnet.TLRPC$TL_messages_peerDialogs r3 = r6.resetDialogsPinned
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r3 = r3.messages
            r2.addAll(r3)
            org.telegram.tgnet.TLRPC$messages_Dialogs r2 = r6.resetDialogsAll
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r2.users
            org.telegram.tgnet.TLRPC$TL_messages_peerDialogs r3 = r6.resetDialogsPinned
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r3 = r3.users
            r2.addAll(r3)
            org.telegram.tgnet.TLRPC$messages_Dialogs r2 = r6.resetDialogsAll
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r2 = r2.chats
            org.telegram.tgnet.TLRPC$TL_messages_peerDialogs r3 = r6.resetDialogsPinned
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r3 = r3.chats
            r2.addAll(r3)
            android.util.LongSparseArray r15 = new android.util.LongSparseArray
            r15.<init>()
            android.util.LongSparseArray r2 = new android.util.LongSparseArray
            r2.<init>()
            android.util.SparseArray r3 = new android.util.SparseArray
            r3.<init>()
            android.util.SparseArray r4 = new android.util.SparseArray
            r4.<init>()
            r5 = 0
        L_0x00b1:
            org.telegram.tgnet.TLRPC$messages_Dialogs r8 = r6.resetDialogsAll
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r8 = r8.users
            int r8 = r8.size()
            if (r5 >= r8) goto L_0x00cd
            org.telegram.tgnet.TLRPC$messages_Dialogs r8 = r6.resetDialogsAll
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r8 = r8.users
            java.lang.Object r8 = r8.get(r5)
            org.telegram.tgnet.TLRPC$User r8 = (org.telegram.tgnet.TLRPC$User) r8
            int r9 = r8.id
            r3.put(r9, r8)
            int r5 = r5 + 1
            goto L_0x00b1
        L_0x00cd:
            r5 = 0
        L_0x00ce:
            org.telegram.tgnet.TLRPC$messages_Dialogs r8 = r6.resetDialogsAll
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r8 = r8.chats
            int r8 = r8.size()
            if (r5 >= r8) goto L_0x00ea
            org.telegram.tgnet.TLRPC$messages_Dialogs r8 = r6.resetDialogsAll
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r8 = r8.chats
            java.lang.Object r8 = r8.get(r5)
            org.telegram.tgnet.TLRPC$Chat r8 = (org.telegram.tgnet.TLRPC$Chat) r8
            int r9 = r8.id
            r4.put(r9, r8)
            int r5 = r5 + 1
            goto L_0x00ce
        L_0x00ea:
            r5 = 0
            r14 = r5
            r8 = 0
        L_0x00ed:
            org.telegram.tgnet.TLRPC$messages_Dialogs r9 = r6.resetDialogsAll
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r9 = r9.messages
            int r9 = r9.size()
            if (r8 >= r9) goto L_0x015b
            org.telegram.tgnet.TLRPC$messages_Dialogs r9 = r6.resetDialogsAll
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r9 = r9.messages
            java.lang.Object r9 = r9.get(r8)
            org.telegram.tgnet.TLRPC$Message r9 = (org.telegram.tgnet.TLRPC$Message) r9
            if (r8 >= r10) goto L_0x010c
            if (r14 == 0) goto L_0x010b
            int r11 = r9.date
            int r12 = r14.date
            if (r11 >= r12) goto L_0x010c
        L_0x010b:
            r14 = r9
        L_0x010c:
            org.telegram.tgnet.TLRPC$Peer r11 = r9.to_id
            int r12 = r11.channel_id
            if (r12 == 0) goto L_0x012d
            java.lang.Object r11 = r4.get(r12)
            org.telegram.tgnet.TLRPC$Chat r11 = (org.telegram.tgnet.TLRPC$Chat) r11
            if (r11 == 0) goto L_0x011f
            boolean r12 = r11.left
            if (r12 == 0) goto L_0x011f
            goto L_0x0158
        L_0x011f:
            if (r11 == 0) goto L_0x013e
            boolean r11 = r11.megagroup
            if (r11 == 0) goto L_0x013e
            int r11 = r9.flags
            r12 = -2147483648(0xfffffffvar_, float:-0.0)
            r11 = r11 | r12
            r9.flags = r11
            goto L_0x013e
        L_0x012d:
            int r11 = r11.chat_id
            if (r11 == 0) goto L_0x013e
            java.lang.Object r11 = r4.get(r11)
            org.telegram.tgnet.TLRPC$Chat r11 = (org.telegram.tgnet.TLRPC$Chat) r11
            if (r11 == 0) goto L_0x013e
            org.telegram.tgnet.TLRPC$InputChannel r11 = r11.migrated_to
            if (r11 == 0) goto L_0x013e
            goto L_0x0158
        L_0x013e:
            org.telegram.messenger.MessageObject r11 = new org.telegram.messenger.MessageObject
            int r12 = r6.currentAccount
            r24 = 0
            r19 = r11
            r20 = r12
            r21 = r9
            r22 = r3
            r23 = r4
            r19.<init>((int) r20, (org.telegram.tgnet.TLRPC$Message) r21, (android.util.SparseArray<org.telegram.tgnet.TLRPC$User>) r22, (android.util.SparseArray<org.telegram.tgnet.TLRPC$Chat>) r23, (boolean) r24)
            long r12 = r11.getDialogId()
            r2.put(r12, r11)
        L_0x0158:
            int r8 = r8 + 1
            goto L_0x00ed
        L_0x015b:
            r8 = 0
        L_0x015c:
            org.telegram.tgnet.TLRPC$messages_Dialogs r9 = r6.resetDialogsAll
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r9 = r9.dialogs
            int r9 = r9.size()
            if (r8 >= r9) goto L_0x0227
            org.telegram.tgnet.TLRPC$messages_Dialogs r9 = r6.resetDialogsAll
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r9 = r9.dialogs
            java.lang.Object r9 = r9.get(r8)
            org.telegram.tgnet.TLRPC$Dialog r9 = (org.telegram.tgnet.TLRPC$Dialog) r9
            org.telegram.messenger.DialogObject.initDialog(r9)
            long r11 = r9.id
            r16 = 0
            int r13 = (r11 > r16 ? 1 : (r11 == r16 ? 0 : -1))
            if (r13 != 0) goto L_0x017e
        L_0x017b:
            r13 = r1
            goto L_0x0221
        L_0x017e:
            int r13 = r9.last_message_date
            if (r13 != 0) goto L_0x0190
            java.lang.Object r11 = r2.get(r11)
            org.telegram.messenger.MessageObject r11 = (org.telegram.messenger.MessageObject) r11
            if (r11 == 0) goto L_0x0190
            org.telegram.tgnet.TLRPC$Message r11 = r11.messageOwner
            int r11 = r11.date
            r9.last_message_date = r11
        L_0x0190:
            boolean r11 = org.telegram.messenger.DialogObject.isChannel(r9)
            if (r11 == 0) goto L_0x01b3
            long r11 = r9.id
            int r12 = (int) r11
            int r11 = -r12
            java.lang.Object r11 = r4.get(r11)
            org.telegram.tgnet.TLRPC$Chat r11 = (org.telegram.tgnet.TLRPC$Chat) r11
            if (r11 == 0) goto L_0x01a7
            boolean r11 = r11.left
            if (r11 == 0) goto L_0x01a7
            goto L_0x017b
        L_0x01a7:
            android.util.SparseIntArray r11 = r6.channelsPts
            long r12 = r9.id
            int r13 = (int) r12
            int r12 = -r13
            int r13 = r9.pts
            r11.put(r12, r13)
            goto L_0x01c7
        L_0x01b3:
            long r11 = r9.id
            int r13 = (int) r11
            if (r13 >= 0) goto L_0x01c7
            int r12 = (int) r11
            int r11 = -r12
            java.lang.Object r11 = r4.get(r11)
            org.telegram.tgnet.TLRPC$Chat r11 = (org.telegram.tgnet.TLRPC$Chat) r11
            if (r11 == 0) goto L_0x01c7
            org.telegram.tgnet.TLRPC$InputChannel r11 = r11.migrated_to
            if (r11 == 0) goto L_0x01c7
            goto L_0x017b
        L_0x01c7:
            long r11 = r9.id
            r15.put(r11, r9)
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r11 = r6.dialogs_read_inbox_max
            long r12 = r9.id
            java.lang.Long r12 = java.lang.Long.valueOf(r12)
            java.lang.Object r11 = r11.get(r12)
            java.lang.Integer r11 = (java.lang.Integer) r11
            if (r11 != 0) goto L_0x01dd
            r11 = r1
        L_0x01dd:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r12 = r6.dialogs_read_inbox_max
            r13 = r1
            long r0 = r9.id
            java.lang.Long r0 = java.lang.Long.valueOf(r0)
            int r1 = r11.intValue()
            int r11 = r9.read_inbox_max_id
            int r1 = java.lang.Math.max(r1, r11)
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            r12.put(r0, r1)
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r0 = r6.dialogs_read_outbox_max
            long r11 = r9.id
            java.lang.Long r1 = java.lang.Long.valueOf(r11)
            java.lang.Object r0 = r0.get(r1)
            java.lang.Integer r0 = (java.lang.Integer) r0
            if (r0 != 0) goto L_0x0208
            r0 = r13
        L_0x0208:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r6.dialogs_read_outbox_max
            long r11 = r9.id
            java.lang.Long r11 = java.lang.Long.valueOf(r11)
            int r0 = r0.intValue()
            int r9 = r9.read_outbox_max_id
            int r0 = java.lang.Math.max(r0, r9)
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)
            r1.put(r11, r0)
        L_0x0221:
            int r8 = r8 + 1
            r1 = r13
            r0 = 0
            goto L_0x015c
        L_0x0227:
            org.telegram.tgnet.TLRPC$messages_Dialogs r0 = r6.resetDialogsAll
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r0 = r0.messages
            org.telegram.messenger.ImageLoader.saveMessagesThumbs(r0)
            r0 = 0
        L_0x022f:
            org.telegram.tgnet.TLRPC$messages_Dialogs r1 = r6.resetDialogsAll
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r1.messages
            int r1 = r1.size()
            if (r0 >= r1) goto L_0x02b7
            org.telegram.tgnet.TLRPC$messages_Dialogs r1 = r6.resetDialogsAll
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r1.messages
            java.lang.Object r1 = r1.get(r0)
            org.telegram.tgnet.TLRPC$Message r1 = (org.telegram.tgnet.TLRPC$Message) r1
            org.telegram.tgnet.TLRPC$MessageAction r4 = r1.action
            boolean r8 = r4 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatDeleteUser
            if (r8 == 0) goto L_0x0264
            int r4 = r4.user_id
            java.lang.Object r4 = r3.get(r4)
            org.telegram.tgnet.TLRPC$User r4 = (org.telegram.tgnet.TLRPC$User) r4
            if (r4 == 0) goto L_0x0264
            boolean r4 = r4.bot
            if (r4 == 0) goto L_0x0264
            org.telegram.tgnet.TLRPC$TL_replyKeyboardHide r4 = new org.telegram.tgnet.TLRPC$TL_replyKeyboardHide
            r4.<init>()
            r1.reply_markup = r4
            int r4 = r1.flags
            r4 = r4 | 64
            r1.flags = r4
        L_0x0264:
            org.telegram.tgnet.TLRPC$MessageAction r4 = r1.action
            boolean r8 = r4 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatMigrateTo
            if (r8 != 0) goto L_0x02ae
            boolean r4 = r4 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChannelCreate
            if (r4 == 0) goto L_0x026f
            goto L_0x02ae
        L_0x026f:
            boolean r4 = r1.out
            if (r4 == 0) goto L_0x0276
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r4 = r6.dialogs_read_outbox_max
            goto L_0x0278
        L_0x0276:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r4 = r6.dialogs_read_inbox_max
        L_0x0278:
            long r8 = r1.dialog_id
            java.lang.Long r8 = java.lang.Long.valueOf(r8)
            java.lang.Object r8 = r4.get(r8)
            java.lang.Integer r8 = (java.lang.Integer) r8
            if (r8 != 0) goto L_0x029f
            org.telegram.messenger.MessagesStorage r8 = r25.getMessagesStorage()
            boolean r9 = r1.out
            long r11 = r1.dialog_id
            int r8 = r8.getDialogReadMax(r9, r11)
            java.lang.Integer r8 = java.lang.Integer.valueOf(r8)
            long r11 = r1.dialog_id
            java.lang.Long r9 = java.lang.Long.valueOf(r11)
            r4.put(r9, r8)
        L_0x029f:
            int r4 = r8.intValue()
            int r8 = r1.id
            if (r4 >= r8) goto L_0x02a9
            r4 = 1
            goto L_0x02aa
        L_0x02a9:
            r4 = 0
        L_0x02aa:
            r1.unread = r4
            r4 = 0
            goto L_0x02b3
        L_0x02ae:
            r4 = 0
            r1.unread = r4
            r1.media_unread = r4
        L_0x02b3:
            int r0 = r0 + 1
            goto L_0x022f
        L_0x02b7:
            org.telegram.messenger.MessagesStorage r8 = r25.getMessagesStorage()
            org.telegram.tgnet.TLRPC$messages_Dialogs r9 = r6.resetDialogsAll
            r11 = r27
            r12 = r28
            r13 = r29
            r0 = r14
            r14 = r30
            r16 = r2
            r17 = r0
            r8.resetDialogs(r9, r10, r11, r12, r13, r14, r15, r16, r17, r18)
            r6.resetDialogsPinned = r5
            r6.resetDialogsAll = r5
        L_0x02d1:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.resetDialogs(boolean, int, int, int, int):void");
    }

    /* access modifiers changed from: protected */
    public void completeDialogsReset(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, int i, int i2, int i3, int i4, int i5, LongSparseArray<TLRPC$Dialog> longSparseArray, LongSparseArray<MessageObject> longSparseArray2, TLRPC$Message tLRPC$Message) {
        Utilities.stageQueue.postRunnable(new Runnable(i3, i4, i5, tLRPC$messages_Dialogs, longSparseArray, longSparseArray2) {
            private final /* synthetic */ int f$1;
            private final /* synthetic */ int f$2;
            private final /* synthetic */ int f$3;
            private final /* synthetic */ TLRPC$messages_Dialogs f$4;
            private final /* synthetic */ LongSparseArray f$5;
            private final /* synthetic */ LongSparseArray f$6;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
            }

            public final void run() {
                MessagesController.this.lambda$completeDialogsReset$147$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
            }
        });
    }

    public /* synthetic */ void lambda$completeDialogsReset$147$MessagesController(int i, int i2, int i3, TLRPC$messages_Dialogs tLRPC$messages_Dialogs, LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        this.gettingDifference = false;
        getMessagesStorage().setLastPtsValue(i);
        getMessagesStorage().setLastDateValue(i2);
        getMessagesStorage().setLastQtsValue(i3);
        getDifference();
        AndroidUtilities.runOnUIThread(new Runnable(tLRPC$messages_Dialogs, longSparseArray, longSparseArray2) {
            private final /* synthetic */ TLRPC$messages_Dialogs f$1;
            private final /* synthetic */ LongSparseArray f$2;
            private final /* synthetic */ LongSparseArray f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesController.this.lambda$null$146$MessagesController(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    public /* synthetic */ void lambda$null$146$MessagesController(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        TLRPC$messages_Dialogs tLRPC$messages_Dialogs2 = tLRPC$messages_Dialogs;
        LongSparseArray longSparseArray3 = longSparseArray;
        this.resetingDialogs = false;
        applyDialogsNotificationsSettings(tLRPC$messages_Dialogs2.dialogs);
        MediaDataController mediaDataController = getMediaDataController();
        mediaDataController.clearAllDrafts(false);
        mediaDataController.loadDraftsIfNeed();
        putUsers(tLRPC$messages_Dialogs2.users, false);
        putChats(tLRPC$messages_Dialogs2.chats, false);
        for (int i = 0; i < this.allDialogs.size(); i++) {
            TLRPC$Dialog tLRPC$Dialog = this.allDialogs.get(i);
            if (!DialogObject.isSecretDialogId(tLRPC$Dialog.id)) {
                this.dialogs_dict.remove(tLRPC$Dialog.id);
                MessageObject messageObject = this.dialogMessage.get(tLRPC$Dialog.id);
                this.dialogMessage.remove(tLRPC$Dialog.id);
                if (messageObject != null) {
                    this.dialogMessagesByIds.remove(messageObject.getId());
                    long j = messageObject.messageOwner.random_id;
                    if (j != 0) {
                        this.dialogMessagesByRandomIds.remove(j);
                    }
                }
            }
        }
        for (int i2 = 0; i2 < longSparseArray.size(); i2++) {
            long keyAt = longSparseArray3.keyAt(i2);
            TLRPC$Dialog tLRPC$Dialog2 = (TLRPC$Dialog) longSparseArray3.valueAt(i2);
            TLRPC$DraftMessage tLRPC$DraftMessage = tLRPC$Dialog2.draft;
            if (tLRPC$DraftMessage instanceof TLRPC$TL_draftMessage) {
                mediaDataController.saveDraft(tLRPC$Dialog2.id, tLRPC$DraftMessage, (TLRPC$Message) null, false);
            }
            this.dialogs_dict.put(keyAt, tLRPC$Dialog2);
            MessageObject messageObject2 = (MessageObject) longSparseArray2.get(tLRPC$Dialog2.id);
            this.dialogMessage.put(keyAt, messageObject2);
            if (messageObject2 != null && messageObject2.messageOwner.to_id.channel_id == 0) {
                this.dialogMessagesByIds.put(messageObject2.getId(), messageObject2);
                this.dialogsLoadedTillDate = Math.min(this.dialogsLoadedTillDate, messageObject2.messageOwner.date);
                long j2 = messageObject2.messageOwner.random_id;
                if (j2 != 0) {
                    this.dialogMessagesByRandomIds.put(j2, messageObject2);
                }
            }
        }
        this.allDialogs.clear();
        int size = this.dialogs_dict.size();
        for (int i3 = 0; i3 < size; i3++) {
            this.allDialogs.add(this.dialogs_dict.valueAt(i3));
        }
        sortDialogs((SparseArray<TLRPC$Chat>) null);
        this.dialogsEndReached.put(0, true);
        this.serverDialogsEndReached.put(0, false);
        this.dialogsEndReached.put(1, true);
        this.serverDialogsEndReached.put(1, false);
        int totalDialogsCount = getUserConfig().getTotalDialogsCount(0);
        int[] dialogLoadOffsets = getUserConfig().getDialogLoadOffsets(0);
        if (!(totalDialogsCount >= 400 || dialogLoadOffsets[0] == -1 || dialogLoadOffsets[0] == Integer.MAX_VALUE)) {
            loadDialogs(0, 0, 100, false);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    private void migrateDialogs(int i, int i2, int i3, int i4, int i5, long j) {
        if (!this.migratingDialogs && i != -1) {
            this.migratingDialogs = true;
            TLRPC$TL_messages_getDialogs tLRPC$TL_messages_getDialogs = new TLRPC$TL_messages_getDialogs();
            tLRPC$TL_messages_getDialogs.exclude_pinned = true;
            tLRPC$TL_messages_getDialogs.limit = 100;
            tLRPC$TL_messages_getDialogs.offset_id = i;
            tLRPC$TL_messages_getDialogs.offset_date = i2;
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("start migrate with id " + i + " date " + LocaleController.getInstance().formatterStats.format(((long) i2) * 1000));
            }
            if (i == 0) {
                tLRPC$TL_messages_getDialogs.offset_peer = new TLRPC$TL_inputPeerEmpty();
            } else {
                if (i5 != 0) {
                    TLRPC$TL_inputPeerChannel tLRPC$TL_inputPeerChannel = new TLRPC$TL_inputPeerChannel();
                    tLRPC$TL_messages_getDialogs.offset_peer = tLRPC$TL_inputPeerChannel;
                    tLRPC$TL_inputPeerChannel.channel_id = i5;
                } else if (i3 != 0) {
                    TLRPC$TL_inputPeerUser tLRPC$TL_inputPeerUser = new TLRPC$TL_inputPeerUser();
                    tLRPC$TL_messages_getDialogs.offset_peer = tLRPC$TL_inputPeerUser;
                    tLRPC$TL_inputPeerUser.user_id = i3;
                } else {
                    TLRPC$TL_inputPeerChat tLRPC$TL_inputPeerChat = new TLRPC$TL_inputPeerChat();
                    tLRPC$TL_messages_getDialogs.offset_peer = tLRPC$TL_inputPeerChat;
                    tLRPC$TL_inputPeerChat.chat_id = i4;
                }
                tLRPC$TL_messages_getDialogs.offset_peer.access_hash = j;
            }
            getConnectionsManager().sendRequest(tLRPC$TL_messages_getDialogs, new RequestDelegate(i) {
                private final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$migrateDialogs$151$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$migrateDialogs$151$MessagesController(int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            getMessagesStorage().getStorageQueue().postRunnable(new Runnable((TLRPC$messages_Dialogs) tLObject, i) {
                private final /* synthetic */ TLRPC$messages_Dialogs f$1;
                private final /* synthetic */ int f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    MessagesController.this.lambda$null$149$MessagesController(this.f$1, this.f$2);
                }
            });
        } else {
            AndroidUtilities.runOnUIThread(new Runnable() {
                public final void run() {
                    MessagesController.this.lambda$null$150$MessagesController();
                }
            });
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:103:0x0357 A[Catch:{ Exception -> 0x03f6 }] */
    /* JADX WARNING: Removed duplicated region for block: B:96:0x0318 A[Catch:{ Exception -> 0x03f6 }] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$null$149$MessagesController(org.telegram.tgnet.TLRPC$messages_Dialogs r30, int r31) {
        /*
            r29 = this;
            r0 = r30
            r1 = r31
            org.telegram.messenger.UserConfig r2 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            r3 = 0
            int r2 = r2.getTotalDialogsCount(r3)     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.UserConfig r4 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r5 = r0.dialogs     // Catch:{ Exception -> 0x03f6 }
            int r5 = r5.size()     // Catch:{ Exception -> 0x03f6 }
            int r2 = r2 + r5
            r4.setTotalDialogsCount(r3, r2)     // Catch:{ Exception -> 0x03f6 }
            r2 = 0
            r4 = 0
        L_0x001d:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r5 = r0.messages     // Catch:{ Exception -> 0x03f6 }
            int r5 = r5.size()     // Catch:{ Exception -> 0x03f6 }
            java.lang.String r6 = " date "
            r7 = 1000(0x3e8, double:4.94E-321)
            if (r4 >= r5) goto L_0x006c
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r5 = r0.messages     // Catch:{ Exception -> 0x03f6 }
            java.lang.Object r5 = r5.get(r4)     // Catch:{ Exception -> 0x03f6 }
            org.telegram.tgnet.TLRPC$Message r5 = (org.telegram.tgnet.TLRPC$Message) r5     // Catch:{ Exception -> 0x03f6 }
            boolean r9 = org.telegram.messenger.BuildVars.LOGS_ENABLED     // Catch:{ Exception -> 0x03f6 }
            if (r9 == 0) goto L_0x0060
            java.lang.StringBuilder r9 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x03f6 }
            r9.<init>()     // Catch:{ Exception -> 0x03f6 }
            java.lang.String r10 = "search migrate id "
            r9.append(r10)     // Catch:{ Exception -> 0x03f6 }
            int r10 = r5.id     // Catch:{ Exception -> 0x03f6 }
            r9.append(r10)     // Catch:{ Exception -> 0x03f6 }
            r9.append(r6)     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.LocaleController r6 = org.telegram.messenger.LocaleController.getInstance()     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.time.FastDateFormat r6 = r6.formatterStats     // Catch:{ Exception -> 0x03f6 }
            int r10 = r5.date     // Catch:{ Exception -> 0x03f6 }
            long r10 = (long) r10     // Catch:{ Exception -> 0x03f6 }
            long r10 = r10 * r7
            java.lang.String r6 = r6.format((long) r10)     // Catch:{ Exception -> 0x03f6 }
            r9.append(r6)     // Catch:{ Exception -> 0x03f6 }
            java.lang.String r6 = r9.toString()     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.FileLog.d(r6)     // Catch:{ Exception -> 0x03f6 }
        L_0x0060:
            if (r2 == 0) goto L_0x0068
            int r6 = r5.date     // Catch:{ Exception -> 0x03f6 }
            int r7 = r2.date     // Catch:{ Exception -> 0x03f6 }
            if (r6 >= r7) goto L_0x0069
        L_0x0068:
            r2 = r5
        L_0x0069:
            int r4 = r4 + 1
            goto L_0x001d
        L_0x006c:
            boolean r4 = org.telegram.messenger.BuildVars.LOGS_ENABLED     // Catch:{ Exception -> 0x03f6 }
            if (r4 == 0) goto L_0x009b
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x03f6 }
            r4.<init>()     // Catch:{ Exception -> 0x03f6 }
            java.lang.String r5 = "migrate step with id "
            r4.append(r5)     // Catch:{ Exception -> 0x03f6 }
            int r5 = r2.id     // Catch:{ Exception -> 0x03f6 }
            r4.append(r5)     // Catch:{ Exception -> 0x03f6 }
            r4.append(r6)     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.LocaleController r5 = org.telegram.messenger.LocaleController.getInstance()     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.time.FastDateFormat r5 = r5.formatterStats     // Catch:{ Exception -> 0x03f6 }
            int r6 = r2.date     // Catch:{ Exception -> 0x03f6 }
            long r9 = (long) r6     // Catch:{ Exception -> 0x03f6 }
            long r9 = r9 * r7
            java.lang.String r5 = r5.format((long) r9)     // Catch:{ Exception -> 0x03f6 }
            r4.append(r5)     // Catch:{ Exception -> 0x03f6 }
            java.lang.String r4 = r4.toString()     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.FileLog.d(r4)     // Catch:{ Exception -> 0x03f6 }
        L_0x009b:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r4 = r0.dialogs     // Catch:{ Exception -> 0x03f6 }
            int r4 = r4.size()     // Catch:{ Exception -> 0x03f6 }
            r5 = 100
            r6 = 2
            r9 = -1
            if (r4 < r5) goto L_0x00aa
            int r4 = r2.id     // Catch:{ Exception -> 0x03f6 }
            goto L_0x00e9
        L_0x00aa:
            boolean r4 = org.telegram.messenger.BuildVars.LOGS_ENABLED     // Catch:{ Exception -> 0x03f6 }
            if (r4 == 0) goto L_0x00b3
            java.lang.String r4 = "migrate stop due to not 100 dialogs"
            org.telegram.messenger.FileLog.d(r4)     // Catch:{ Exception -> 0x03f6 }
        L_0x00b3:
            r4 = 0
        L_0x00b4:
            if (r4 >= r6) goto L_0x00e8
            org.telegram.messenger.UserConfig r10 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            r12 = 2147483647(0x7fffffff, float:NaN)
            org.telegram.messenger.UserConfig r5 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            int r13 = r5.migrateOffsetDate     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.UserConfig r5 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            int r14 = r5.migrateOffsetUserId     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.UserConfig r5 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            int r15 = r5.migrateOffsetChatId     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.UserConfig r5 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            int r5 = r5.migrateOffsetChannelId     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.UserConfig r11 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            long r7 = r11.migrateOffsetAccess     // Catch:{ Exception -> 0x03f6 }
            r11 = r4
            r16 = r5
            r17 = r7
            r10.setDialogsLoadOffset(r11, r12, r13, r14, r15, r16, r17)     // Catch:{ Exception -> 0x03f6 }
            int r4 = r4 + 1
            r7 = 1000(0x3e8, double:4.94E-321)
            goto L_0x00b4
        L_0x00e8:
            r4 = -1
        L_0x00e9:
            java.lang.StringBuilder r5 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x03f6 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r7 = r0.dialogs     // Catch:{ Exception -> 0x03f6 }
            int r7 = r7.size()     // Catch:{ Exception -> 0x03f6 }
            int r7 = r7 * 12
            r5.<init>(r7)     // Catch:{ Exception -> 0x03f6 }
            android.util.LongSparseArray r7 = new android.util.LongSparseArray     // Catch:{ Exception -> 0x03f6 }
            r7.<init>()     // Catch:{ Exception -> 0x03f6 }
            r8 = 0
        L_0x00fc:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r10 = r0.dialogs     // Catch:{ Exception -> 0x03f6 }
            int r10 = r10.size()     // Catch:{ Exception -> 0x03f6 }
            if (r8 >= r10) goto L_0x0127
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r10 = r0.dialogs     // Catch:{ Exception -> 0x03f6 }
            java.lang.Object r10 = r10.get(r8)     // Catch:{ Exception -> 0x03f6 }
            org.telegram.tgnet.TLRPC$Dialog r10 = (org.telegram.tgnet.TLRPC$Dialog) r10     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.DialogObject.initDialog(r10)     // Catch:{ Exception -> 0x03f6 }
            int r11 = r5.length()     // Catch:{ Exception -> 0x03f6 }
            if (r11 <= 0) goto L_0x011a
            java.lang.String r11 = ","
            r5.append(r11)     // Catch:{ Exception -> 0x03f6 }
        L_0x011a:
            long r11 = r10.id     // Catch:{ Exception -> 0x03f6 }
            r5.append(r11)     // Catch:{ Exception -> 0x03f6 }
            long r11 = r10.id     // Catch:{ Exception -> 0x03f6 }
            r7.put(r11, r10)     // Catch:{ Exception -> 0x03f6 }
            int r8 = r8 + 1
            goto L_0x00fc
        L_0x0127:
            org.telegram.messenger.MessagesStorage r8 = r29.getMessagesStorage()     // Catch:{ Exception -> 0x03f6 }
            org.telegram.SQLite.SQLiteDatabase r8 = r8.getDatabase()     // Catch:{ Exception -> 0x03f6 }
            java.util.Locale r10 = java.util.Locale.US     // Catch:{ Exception -> 0x03f6 }
            java.lang.String r11 = "SELECT did, folder_id FROM dialogs WHERE did IN (%s)"
            r12 = 1
            java.lang.Object[] r13 = new java.lang.Object[r12]     // Catch:{ Exception -> 0x03f6 }
            java.lang.String r5 = r5.toString()     // Catch:{ Exception -> 0x03f6 }
            r13[r3] = r5     // Catch:{ Exception -> 0x03f6 }
            java.lang.String r5 = java.lang.String.format(r10, r11, r13)     // Catch:{ Exception -> 0x03f6 }
            java.lang.Object[] r10 = new java.lang.Object[r3]     // Catch:{ Exception -> 0x03f6 }
            org.telegram.SQLite.SQLiteCursor r5 = r8.queryFinalized(r5, r10)     // Catch:{ Exception -> 0x03f6 }
        L_0x0146:
            boolean r8 = r5.next()     // Catch:{ Exception -> 0x03f6 }
            if (r8 == 0) goto L_0x0195
            long r10 = r5.longValue(r3)     // Catch:{ Exception -> 0x03f6 }
            int r8 = r5.intValue(r12)     // Catch:{ Exception -> 0x03f6 }
            java.lang.Object r13 = r7.get(r10)     // Catch:{ Exception -> 0x03f6 }
            org.telegram.tgnet.TLRPC$Dialog r13 = (org.telegram.tgnet.TLRPC$Dialog) r13     // Catch:{ Exception -> 0x03f6 }
            int r14 = r13.folder_id     // Catch:{ Exception -> 0x03f6 }
            if (r14 == r8) goto L_0x015f
            goto L_0x0146
        L_0x015f:
            r7.remove(r10)     // Catch:{ Exception -> 0x03f6 }
            if (r13 == 0) goto L_0x0146
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r8 = r0.dialogs     // Catch:{ Exception -> 0x03f6 }
            r8.remove(r13)     // Catch:{ Exception -> 0x03f6 }
            r8 = 0
        L_0x016a:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r14 = r0.messages     // Catch:{ Exception -> 0x03f6 }
            int r14 = r14.size()     // Catch:{ Exception -> 0x03f6 }
            if (r8 >= r14) goto L_0x0146
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r14 = r0.messages     // Catch:{ Exception -> 0x03f6 }
            java.lang.Object r14 = r14.get(r8)     // Catch:{ Exception -> 0x03f6 }
            org.telegram.tgnet.TLRPC$Message r14 = (org.telegram.tgnet.TLRPC$Message) r14     // Catch:{ Exception -> 0x03f6 }
            long r15 = org.telegram.messenger.MessageObject.getDialogId(r14)     // Catch:{ Exception -> 0x03f6 }
            int r17 = (r15 > r10 ? 1 : (r15 == r10 ? 0 : -1))
            if (r17 == 0) goto L_0x0183
            goto L_0x0193
        L_0x0183:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r15 = r0.messages     // Catch:{ Exception -> 0x03f6 }
            r15.remove(r8)     // Catch:{ Exception -> 0x03f6 }
            int r8 = r8 + -1
            int r14 = r14.id     // Catch:{ Exception -> 0x03f6 }
            int r15 = r13.top_message     // Catch:{ Exception -> 0x03f6 }
            if (r14 != r15) goto L_0x0193
            r13.top_message = r3     // Catch:{ Exception -> 0x03f6 }
            goto L_0x0146
        L_0x0193:
            int r8 = r8 + r12
            goto L_0x016a
        L_0x0195:
            r5.dispose()     // Catch:{ Exception -> 0x03f6 }
            boolean r5 = org.telegram.messenger.BuildVars.LOGS_ENABLED     // Catch:{ Exception -> 0x03f6 }
            if (r5 == 0) goto L_0x01b6
            java.lang.StringBuilder r5 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x03f6 }
            r5.<init>()     // Catch:{ Exception -> 0x03f6 }
            java.lang.String r8 = "migrate found missing dialogs "
            r5.append(r8)     // Catch:{ Exception -> 0x03f6 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r8 = r0.dialogs     // Catch:{ Exception -> 0x03f6 }
            int r8 = r8.size()     // Catch:{ Exception -> 0x03f6 }
            r5.append(r8)     // Catch:{ Exception -> 0x03f6 }
            java.lang.String r5 = r5.toString()     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.FileLog.d(r5)     // Catch:{ Exception -> 0x03f6 }
        L_0x01b6:
            org.telegram.messenger.MessagesStorage r5 = r29.getMessagesStorage()     // Catch:{ Exception -> 0x03f6 }
            org.telegram.SQLite.SQLiteDatabase r5 = r5.getDatabase()     // Catch:{ Exception -> 0x03f6 }
            java.lang.String r8 = "SELECT min(date) FROM dialogs WHERE date != 0 AND did >> 32 IN (0, -1)"
            java.lang.Object[] r10 = new java.lang.Object[r3]     // Catch:{ Exception -> 0x03f6 }
            org.telegram.SQLite.SQLiteCursor r5 = r5.queryFinalized(r8, r10)     // Catch:{ Exception -> 0x03f6 }
            boolean r8 = r5.next()     // Catch:{ Exception -> 0x03f6 }
            if (r8 == 0) goto L_0x0306
            r8 = 1441062000(0x55e4dCLASSNAME, float:3.14544279E13)
            int r10 = r5.intValue(r3)     // Catch:{ Exception -> 0x03f6 }
            int r8 = java.lang.Math.max(r8, r10)     // Catch:{ Exception -> 0x03f6 }
            r10 = 0
        L_0x01d8:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r11 = r0.messages     // Catch:{ Exception -> 0x03f6 }
            int r11 = r11.size()     // Catch:{ Exception -> 0x03f6 }
            java.lang.String r13 = "migrate stop due to reached loaded dialogs "
            if (r10 >= r11) goto L_0x028e
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r11 = r0.messages     // Catch:{ Exception -> 0x03f6 }
            java.lang.Object r11 = r11.get(r10)     // Catch:{ Exception -> 0x03f6 }
            org.telegram.tgnet.TLRPC$Message r11 = (org.telegram.tgnet.TLRPC$Message) r11     // Catch:{ Exception -> 0x03f6 }
            int r14 = r11.date     // Catch:{ Exception -> 0x03f6 }
            if (r14 >= r8) goto L_0x0280
            if (r1 == r9) goto L_0x0262
            r4 = 0
        L_0x01f1:
            if (r4 >= r6) goto L_0x0239
            org.telegram.messenger.UserConfig r19 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.UserConfig r14 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            int r14 = r14.migrateOffsetId     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.UserConfig r15 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            int r15 = r15.migrateOffsetDate     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.UserConfig r3 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            int r3 = r3.migrateOffsetUserId     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.UserConfig r6 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            int r6 = r6.migrateOffsetChatId     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.UserConfig r9 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            int r9 = r9.migrateOffsetChannelId     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.UserConfig r12 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            r28 = r2
            long r1 = r12.migrateOffsetAccess     // Catch:{ Exception -> 0x03f6 }
            r20 = r4
            r21 = r14
            r22 = r15
            r23 = r3
            r24 = r6
            r25 = r9
            r26 = r1
            r19.setDialogsLoadOffset(r20, r21, r22, r23, r24, r25, r26)     // Catch:{ Exception -> 0x03f6 }
            int r4 = r4 + 1
            r1 = r31
            r2 = r28
            r3 = 0
            r6 = 2
            r9 = -1
            r12 = 1
            goto L_0x01f1
        L_0x0239:
            r28 = r2
            boolean r1 = org.telegram.messenger.BuildVars.LOGS_ENABLED     // Catch:{ Exception -> 0x03f6 }
            if (r1 == 0) goto L_0x0260
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x03f6 }
            r1.<init>()     // Catch:{ Exception -> 0x03f6 }
            r1.append(r13)     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.LocaleController r2 = org.telegram.messenger.LocaleController.getInstance()     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.time.FastDateFormat r2 = r2.formatterStats     // Catch:{ Exception -> 0x03f6 }
            long r3 = (long) r8     // Catch:{ Exception -> 0x03f6 }
            r12 = 1000(0x3e8, double:4.94E-321)
            long r3 = r3 * r12
            java.lang.String r2 = r2.format((long) r3)     // Catch:{ Exception -> 0x03f6 }
            r1.append(r2)     // Catch:{ Exception -> 0x03f6 }
            java.lang.String r1 = r1.toString()     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.FileLog.d(r1)     // Catch:{ Exception -> 0x03f6 }
        L_0x0260:
            r4 = -1
            goto L_0x0264
        L_0x0262:
            r28 = r2
        L_0x0264:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r0.messages     // Catch:{ Exception -> 0x03f6 }
            r1.remove(r10)     // Catch:{ Exception -> 0x03f6 }
            int r10 = r10 + -1
            long r1 = org.telegram.messenger.MessageObject.getDialogId(r11)     // Catch:{ Exception -> 0x03f6 }
            java.lang.Object r3 = r7.get(r1)     // Catch:{ Exception -> 0x03f6 }
            org.telegram.tgnet.TLRPC$Dialog r3 = (org.telegram.tgnet.TLRPC$Dialog) r3     // Catch:{ Exception -> 0x03f6 }
            r7.remove(r1)     // Catch:{ Exception -> 0x03f6 }
            if (r3 == 0) goto L_0x0282
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r0.dialogs     // Catch:{ Exception -> 0x03f6 }
            r1.remove(r3)     // Catch:{ Exception -> 0x03f6 }
            goto L_0x0282
        L_0x0280:
            r28 = r2
        L_0x0282:
            r1 = 1
            int r10 = r10 + r1
            r1 = r31
            r2 = r28
            r3 = 0
            r6 = 2
            r9 = -1
            r12 = 1
            goto L_0x01d8
        L_0x028e:
            r28 = r2
            if (r28 == 0) goto L_0x0304
            r2 = r28
            int r1 = r2.date     // Catch:{ Exception -> 0x03f6 }
            if (r1 >= r8) goto L_0x0306
            r1 = r31
            r3 = -1
            if (r1 == r3) goto L_0x0306
            r1 = 0
            r4 = 2
        L_0x029f:
            if (r1 >= r4) goto L_0x02dd
            org.telegram.messenger.UserConfig r19 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.UserConfig r6 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            int r6 = r6.migrateOffsetId     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.UserConfig r7 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            int r7 = r7.migrateOffsetDate     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.UserConfig r9 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            int r9 = r9.migrateOffsetUserId     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.UserConfig r10 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            int r10 = r10.migrateOffsetChatId     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.UserConfig r11 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            int r11 = r11.migrateOffsetChannelId     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.UserConfig r12 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            long r14 = r12.migrateOffsetAccess     // Catch:{ Exception -> 0x03f6 }
            r20 = r1
            r21 = r6
            r22 = r7
            r23 = r9
            r24 = r10
            r25 = r11
            r26 = r14
            r19.setDialogsLoadOffset(r20, r21, r22, r23, r24, r25, r26)     // Catch:{ Exception -> 0x03f6 }
            int r1 = r1 + 1
            goto L_0x029f
        L_0x02dd:
            boolean r1 = org.telegram.messenger.BuildVars.LOGS_ENABLED     // Catch:{ Exception -> 0x03f6 }
            if (r1 == 0) goto L_0x0302
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x03f6 }
            r1.<init>()     // Catch:{ Exception -> 0x03f6 }
            r1.append(r13)     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.LocaleController r4 = org.telegram.messenger.LocaleController.getInstance()     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.time.FastDateFormat r4 = r4.formatterStats     // Catch:{ Exception -> 0x03f6 }
            long r6 = (long) r8     // Catch:{ Exception -> 0x03f6 }
            r8 = 1000(0x3e8, double:4.94E-321)
            long r6 = r6 * r8
            java.lang.String r4 = r4.format((long) r6)     // Catch:{ Exception -> 0x03f6 }
            r1.append(r4)     // Catch:{ Exception -> 0x03f6 }
            java.lang.String r1 = r1.toString()     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.FileLog.d(r1)     // Catch:{ Exception -> 0x03f6 }
        L_0x0302:
            r6 = -1
            goto L_0x0307
        L_0x0304:
            r2 = r28
        L_0x0306:
            r6 = r4
        L_0x0307:
            r5.dispose()     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.UserConfig r1 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            int r3 = r2.date     // Catch:{ Exception -> 0x03f6 }
            r1.migrateOffsetDate = r3     // Catch:{ Exception -> 0x03f6 }
            org.telegram.tgnet.TLRPC$Peer r1 = r2.to_id     // Catch:{ Exception -> 0x03f6 }
            int r1 = r1.channel_id     // Catch:{ Exception -> 0x03f6 }
            if (r1 == 0) goto L_0x0357
            org.telegram.messenger.UserConfig r1 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            org.telegram.tgnet.TLRPC$Peer r2 = r2.to_id     // Catch:{ Exception -> 0x03f6 }
            int r2 = r2.channel_id     // Catch:{ Exception -> 0x03f6 }
            r1.migrateOffsetChannelId = r2     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.UserConfig r1 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            r2 = 0
            r1.migrateOffsetChatId = r2     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.UserConfig r1 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            r1.migrateOffsetUserId = r2     // Catch:{ Exception -> 0x03f6 }
            r3 = 0
        L_0x0330:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r1 = r0.chats     // Catch:{ Exception -> 0x03f6 }
            int r1 = r1.size()     // Catch:{ Exception -> 0x03f6 }
            if (r3 >= r1) goto L_0x03df
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r1 = r0.chats     // Catch:{ Exception -> 0x03f6 }
            java.lang.Object r1 = r1.get(r3)     // Catch:{ Exception -> 0x03f6 }
            org.telegram.tgnet.TLRPC$Chat r1 = (org.telegram.tgnet.TLRPC$Chat) r1     // Catch:{ Exception -> 0x03f6 }
            int r2 = r1.id     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.UserConfig r4 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            int r4 = r4.migrateOffsetChannelId     // Catch:{ Exception -> 0x03f6 }
            if (r2 != r4) goto L_0x0354
            org.telegram.messenger.UserConfig r2 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            long r3 = r1.access_hash     // Catch:{ Exception -> 0x03f6 }
            r2.migrateOffsetAccess = r3     // Catch:{ Exception -> 0x03f6 }
            goto L_0x03df
        L_0x0354:
            int r3 = r3 + 1
            goto L_0x0330
        L_0x0357:
            org.telegram.tgnet.TLRPC$Peer r1 = r2.to_id     // Catch:{ Exception -> 0x03f6 }
            int r1 = r1.chat_id     // Catch:{ Exception -> 0x03f6 }
            if (r1 == 0) goto L_0x039b
            org.telegram.messenger.UserConfig r1 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            org.telegram.tgnet.TLRPC$Peer r2 = r2.to_id     // Catch:{ Exception -> 0x03f6 }
            int r2 = r2.chat_id     // Catch:{ Exception -> 0x03f6 }
            r1.migrateOffsetChatId = r2     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.UserConfig r1 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            r2 = 0
            r1.migrateOffsetChannelId = r2     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.UserConfig r1 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            r1.migrateOffsetUserId = r2     // Catch:{ Exception -> 0x03f6 }
            r3 = 0
        L_0x0375:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r1 = r0.chats     // Catch:{ Exception -> 0x03f6 }
            int r1 = r1.size()     // Catch:{ Exception -> 0x03f6 }
            if (r3 >= r1) goto L_0x03df
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r1 = r0.chats     // Catch:{ Exception -> 0x03f6 }
            java.lang.Object r1 = r1.get(r3)     // Catch:{ Exception -> 0x03f6 }
            org.telegram.tgnet.TLRPC$Chat r1 = (org.telegram.tgnet.TLRPC$Chat) r1     // Catch:{ Exception -> 0x03f6 }
            int r2 = r1.id     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.UserConfig r4 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            int r4 = r4.migrateOffsetChatId     // Catch:{ Exception -> 0x03f6 }
            if (r2 != r4) goto L_0x0398
            org.telegram.messenger.UserConfig r2 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            long r3 = r1.access_hash     // Catch:{ Exception -> 0x03f6 }
            r2.migrateOffsetAccess = r3     // Catch:{ Exception -> 0x03f6 }
            goto L_0x03df
        L_0x0398:
            int r3 = r3 + 1
            goto L_0x0375
        L_0x039b:
            org.telegram.tgnet.TLRPC$Peer r1 = r2.to_id     // Catch:{ Exception -> 0x03f6 }
            int r1 = r1.user_id     // Catch:{ Exception -> 0x03f6 }
            if (r1 == 0) goto L_0x03df
            org.telegram.messenger.UserConfig r1 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            org.telegram.tgnet.TLRPC$Peer r2 = r2.to_id     // Catch:{ Exception -> 0x03f6 }
            int r2 = r2.user_id     // Catch:{ Exception -> 0x03f6 }
            r1.migrateOffsetUserId = r2     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.UserConfig r1 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            r2 = 0
            r1.migrateOffsetChatId = r2     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.UserConfig r1 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            r1.migrateOffsetChannelId = r2     // Catch:{ Exception -> 0x03f6 }
            r3 = 0
        L_0x03b9:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r1 = r0.users     // Catch:{ Exception -> 0x03f6 }
            int r1 = r1.size()     // Catch:{ Exception -> 0x03f6 }
            if (r3 >= r1) goto L_0x03df
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r1 = r0.users     // Catch:{ Exception -> 0x03f6 }
            java.lang.Object r1 = r1.get(r3)     // Catch:{ Exception -> 0x03f6 }
            org.telegram.tgnet.TLRPC$User r1 = (org.telegram.tgnet.TLRPC$User) r1     // Catch:{ Exception -> 0x03f6 }
            int r2 = r1.id     // Catch:{ Exception -> 0x03f6 }
            org.telegram.messenger.UserConfig r4 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            int r4 = r4.migrateOffsetUserId     // Catch:{ Exception -> 0x03f6 }
            if (r2 != r4) goto L_0x03dc
            org.telegram.messenger.UserConfig r2 = r29.getUserConfig()     // Catch:{ Exception -> 0x03f6 }
            long r3 = r1.access_hash     // Catch:{ Exception -> 0x03f6 }
            r2.migrateOffsetAccess = r3     // Catch:{ Exception -> 0x03f6 }
            goto L_0x03df
        L_0x03dc:
            int r3 = r3 + 1
            goto L_0x03b9
        L_0x03df:
            r3 = 0
            r4 = 0
            r7 = 0
            r8 = 0
            r9 = 0
            r10 = 1
            r11 = 0
            r1 = r29
            r2 = r30
            r5 = r6
            r6 = r7
            r7 = r8
            r8 = r9
            r9 = r10
            r10 = r11
            r1.processLoadedDialogs(r2, r3, r4, r5, r6, r7, r8, r9, r10)     // Catch:{ Exception -> 0x03f6 }
            r1 = r29
            goto L_0x0404
        L_0x03f6:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
            org.telegram.messenger.-$$Lambda$MessagesController$m0-RpyS7ZkJGTRr3USEk61TmpC0 r0 = new org.telegram.messenger.-$$Lambda$MessagesController$m0-RpyS7ZkJGTRr3USEk61TmpC0
            r1 = r29
            r0.<init>()
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r0)
        L_0x0404:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$null$149$MessagesController(org.telegram.tgnet.TLRPC$messages_Dialogs, int):void");
    }

    public /* synthetic */ void lambda$null$148$MessagesController() {
        this.migratingDialogs = false;
    }

    public /* synthetic */ void lambda$null$150$MessagesController() {
        this.migratingDialogs = false;
    }

    public void processLoadedDialogs(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, ArrayList<TLRPC$EncryptedChat> arrayList, int i, int i2, int i3, int i4, boolean z, boolean z2, boolean z3) {
        Utilities.stageQueue.postRunnable(new Runnable(i, i4, tLRPC$messages_Dialogs, z, i3, arrayList, i2, z3, z2) {
            private final /* synthetic */ int f$1;
            private final /* synthetic */ int f$2;
            private final /* synthetic */ TLRPC$messages_Dialogs f$3;
            private final /* synthetic */ boolean f$4;
            private final /* synthetic */ int f$5;
            private final /* synthetic */ ArrayList f$6;
            private final /* synthetic */ int f$7;
            private final /* synthetic */ boolean f$8;
            private final /* synthetic */ boolean f$9;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
                this.f$7 = r8;
                this.f$8 = r9;
                this.f$9 = r10;
            }

            public final void run() {
                MessagesController.this.lambda$processLoadedDialogs$154$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7, this.f$8, this.f$9);
            }
        });
    }

    /* JADX WARNING: Code restructure failed: missing block: B:120:0x029b, code lost:
        if (r2.get(r3) == null) goto L_0x029d;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:142:0x02e7, code lost:
        if (r5 == r1.id) goto L_0x02eb;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$processLoadedDialogs$154$MessagesController(int r24, int r25, org.telegram.tgnet.TLRPC$messages_Dialogs r26, boolean r27, int r28, java.util.ArrayList r29, int r30, boolean r31, boolean r32) {
        /*
            r23 = this;
            r15 = r23
            r9 = r24
            r10 = r25
            r11 = r26
            r12 = r29
            boolean r0 = r15.firstGettingTask
            r1 = 0
            r13 = 1
            r14 = 0
            java.lang.Integer r16 = java.lang.Integer.valueOf(r14)
            if (r0 != 0) goto L_0x001a
            r15.getNewDeleteTask(r1, r14)
            r15.firstGettingTask = r13
        L_0x001a:
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0048
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r2 = "loaded folderId "
            r0.append(r2)
            r0.append(r9)
            java.lang.String r2 = " loadType "
            r0.append(r2)
            r0.append(r10)
            java.lang.String r2 = " count "
            r0.append(r2)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r11.dialogs
            int r2 = r2.size()
            r0.append(r2)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x0048:
            org.telegram.messenger.UserConfig r0 = r23.getUserConfig()
            int[] r5 = r0.getDialogLoadOffsets(r9)
            int r0 = r15.DIALOGS_LOAD_TYPE_CACHE
            if (r10 != r0) goto L_0x0070
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r0 = r11.dialogs
            int r0 = r0.size()
            if (r0 != 0) goto L_0x0070
            org.telegram.messenger.-$$Lambda$MessagesController$Rf4gfVkzsPzIFVqMitQOm9sjqQk r7 = new org.telegram.messenger.-$$Lambda$MessagesController$Rf4gfVkzsPzIFVqMitQOm9sjqQk
            r0 = r7
            r1 = r23
            r2 = r26
            r3 = r24
            r4 = r27
            r6 = r28
            r0.<init>(r2, r3, r4, r5, r6)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r7)
            return
        L_0x0070:
            android.util.LongSparseArray r7 = new android.util.LongSparseArray
            r7.<init>()
            android.util.LongSparseArray r8 = new android.util.LongSparseArray
            r8.<init>()
            android.util.SparseArray r6 = new android.util.SparseArray
            r6.<init>()
            android.util.SparseArray r4 = new android.util.SparseArray
            r4.<init>()
            r0 = 0
        L_0x0085:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r11.users
            int r2 = r2.size()
            if (r0 >= r2) goto L_0x009d
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r11.users
            java.lang.Object r2 = r2.get(r0)
            org.telegram.tgnet.TLRPC$User r2 = (org.telegram.tgnet.TLRPC$User) r2
            int r3 = r2.id
            r6.put(r3, r2)
            int r0 = r0 + 1
            goto L_0x0085
        L_0x009d:
            r0 = 0
        L_0x009e:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r2 = r11.chats
            int r2 = r2.size()
            if (r0 >= r2) goto L_0x00b6
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r2 = r11.chats
            java.lang.Object r2 = r2.get(r0)
            org.telegram.tgnet.TLRPC$Chat r2 = (org.telegram.tgnet.TLRPC$Chat) r2
            int r3 = r2.id
            r4.put(r3, r2)
            int r0 = r0 + 1
            goto L_0x009e
        L_0x00b6:
            if (r12 == 0) goto L_0x00d8
            android.util.SparseArray r0 = new android.util.SparseArray
            r0.<init>()
            int r2 = r29.size()
            r3 = 0
        L_0x00c2:
            if (r3 >= r2) goto L_0x00d6
            java.lang.Object r17 = r12.get(r3)
            r1 = r17
            org.telegram.tgnet.TLRPC$EncryptedChat r1 = (org.telegram.tgnet.TLRPC$EncryptedChat) r1
            int r13 = r1.id
            r0.put(r13, r1)
            int r3 = r3 + 1
            r1 = 0
            r13 = 1
            goto L_0x00c2
        L_0x00d6:
            r13 = r0
            goto L_0x00d9
        L_0x00d8:
            r13 = 0
        L_0x00d9:
            int r0 = r15.DIALOGS_LOAD_TYPE_CACHE
            if (r10 != r0) goto L_0x00e4
            android.util.SparseIntArray r0 = r15.nextDialogsCacheOffset
            int r1 = r30 + r28
            r0.put(r9, r1)
        L_0x00e4:
            r0 = 0
            r3 = 0
        L_0x00e6:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r11.messages
            int r1 = r1.size()
            r17 = 0
            if (r0 >= r1) goto L_0x016e
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r11.messages
            java.lang.Object r1 = r1.get(r0)
            org.telegram.tgnet.TLRPC$Message r1 = (org.telegram.tgnet.TLRPC$Message) r1
            if (r3 == 0) goto L_0x0100
            int r2 = r1.date
            int r14 = r3.date
            if (r2 >= r14) goto L_0x0101
        L_0x0100:
            r3 = r1
        L_0x0101:
            org.telegram.tgnet.TLRPC$Peer r2 = r1.to_id
            int r14 = r2.channel_id
            if (r14 == 0) goto L_0x0134
            java.lang.Object r2 = r4.get(r14)
            org.telegram.tgnet.TLRPC$Chat r2 = (org.telegram.tgnet.TLRPC$Chat) r2
            if (r2 == 0) goto L_0x0124
            boolean r14 = r2.left
            if (r14 == 0) goto L_0x0124
            r27 = r13
            long r12 = r15.proxyDialogId
            int r14 = (r12 > r17 ? 1 : (r12 == r17 ? 0 : -1))
            if (r14 == 0) goto L_0x0161
            int r14 = r2.id
            int r14 = -r14
            long r9 = (long) r14
            int r14 = (r12 > r9 ? 1 : (r12 == r9 ? 0 : -1))
            if (r14 == 0) goto L_0x0126
            goto L_0x0161
        L_0x0124:
            r27 = r13
        L_0x0126:
            if (r2 == 0) goto L_0x0147
            boolean r2 = r2.megagroup
            if (r2 == 0) goto L_0x0147
            int r2 = r1.flags
            r9 = -2147483648(0xfffffffvar_, float:-0.0)
            r2 = r2 | r9
            r1.flags = r2
            goto L_0x0147
        L_0x0134:
            r27 = r13
            int r2 = r2.chat_id
            if (r2 == 0) goto L_0x0147
            java.lang.Object r2 = r4.get(r2)
            org.telegram.tgnet.TLRPC$Chat r2 = (org.telegram.tgnet.TLRPC$Chat) r2
            if (r2 == 0) goto L_0x0147
            org.telegram.tgnet.TLRPC$InputChannel r2 = r2.migrated_to
            if (r2 == 0) goto L_0x0147
            goto L_0x0161
        L_0x0147:
            org.telegram.messenger.MessageObject r2 = new org.telegram.messenger.MessageObject
            int r9 = r15.currentAccount
            r22 = 0
            r17 = r2
            r18 = r9
            r19 = r1
            r20 = r6
            r21 = r4
            r17.<init>((int) r18, (org.telegram.tgnet.TLRPC$Message) r19, (android.util.SparseArray<org.telegram.tgnet.TLRPC$User>) r20, (android.util.SparseArray<org.telegram.tgnet.TLRPC$Chat>) r21, (boolean) r22)
            long r9 = r2.getDialogId()
            r8.put(r9, r2)
        L_0x0161:
            int r0 = r0 + 1
            r9 = r24
            r10 = r25
            r13 = r27
            r12 = r29
            r14 = 0
            goto L_0x00e6
        L_0x016e:
            r27 = r13
            if (r31 != 0) goto L_0x025e
            if (r32 != 0) goto L_0x025e
            r0 = 0
            r1 = r5[r0]
            r2 = -1
            if (r1 == r2) goto L_0x025e
            r9 = r25
            if (r9 != 0) goto L_0x025e
            org.telegram.messenger.UserConfig r1 = r23.getUserConfig()
            r10 = r24
            int r1 = r1.getTotalDialogsCount(r10)
            if (r3 == 0) goto L_0x0227
            int r2 = r3.id
            r5 = r5[r0]
            if (r2 == r5) goto L_0x0227
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r0 = r11.dialogs
            int r0 = r0.size()
            int r1 = r1 + r0
            int r0 = r3.id
            int r2 = r3.date
            org.telegram.tgnet.TLRPC$Peer r5 = r3.to_id
            int r12 = r5.channel_id
            if (r12 == 0) goto L_0x01c9
            r5 = 0
        L_0x01a2:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r13 = r11.chats
            int r13 = r13.size()
            if (r5 >= r13) goto L_0x01bc
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r13 = r11.chats
            java.lang.Object r13 = r13.get(r5)
            org.telegram.tgnet.TLRPC$Chat r13 = (org.telegram.tgnet.TLRPC$Chat) r13
            int r14 = r13.id
            if (r14 != r12) goto L_0x01b9
            long r13 = r13.access_hash
            goto L_0x01be
        L_0x01b9:
            int r5 = r5 + 1
            goto L_0x01a2
        L_0x01bc:
            r13 = r17
        L_0x01be:
            r5 = r2
            r19 = r12
            r20 = r13
            r13 = 0
            r14 = 0
            r2 = r0
        L_0x01c6:
            r12 = r1
            goto L_0x0235
        L_0x01c9:
            int r12 = r5.chat_id
            if (r12 == 0) goto L_0x01f3
            r5 = 0
        L_0x01ce:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r13 = r11.chats
            int r13 = r13.size()
            if (r5 >= r13) goto L_0x01e8
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r13 = r11.chats
            java.lang.Object r13 = r13.get(r5)
            org.telegram.tgnet.TLRPC$Chat r13 = (org.telegram.tgnet.TLRPC$Chat) r13
            int r14 = r13.id
            if (r14 != r12) goto L_0x01e5
            long r13 = r13.access_hash
            goto L_0x01ea
        L_0x01e5:
            int r5 = r5 + 1
            goto L_0x01ce
        L_0x01e8:
            r13 = r17
        L_0x01ea:
            r5 = r2
            r20 = r13
            r13 = 0
            r19 = 0
            r2 = r0
            r14 = r12
            goto L_0x01c6
        L_0x01f3:
            int r5 = r5.user_id
            if (r5 == 0) goto L_0x021d
            r12 = 0
        L_0x01f8:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r13 = r11.users
            int r13 = r13.size()
            if (r12 >= r13) goto L_0x0212
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r13 = r11.users
            java.lang.Object r13 = r13.get(r12)
            org.telegram.tgnet.TLRPC$User r13 = (org.telegram.tgnet.TLRPC$User) r13
            int r14 = r13.id
            if (r14 != r5) goto L_0x020f
            long r12 = r13.access_hash
            goto L_0x0214
        L_0x020f:
            int r12 = r12 + 1
            goto L_0x01f8
        L_0x0212:
            r12 = r17
        L_0x0214:
            r20 = r12
            r14 = 0
            r19 = 0
            r12 = r1
            r13 = r5
            r5 = r2
            goto L_0x0225
        L_0x021d:
            r12 = r1
            r5 = r2
            r20 = r17
            r13 = 0
            r14 = 0
            r19 = 0
        L_0x0225:
            r2 = r0
            goto L_0x0235
        L_0x0227:
            r0 = 2147483647(0x7fffffff, float:NaN)
            r12 = r1
            r20 = r17
            r2 = 2147483647(0x7fffffff, float:NaN)
            r5 = 0
            r13 = 0
            r14 = 0
            r19 = 0
        L_0x0235:
            org.telegram.messenger.UserConfig r0 = r23.getUserConfig()
            r1 = r24
            r22 = r3
            r3 = r5
            r5 = r4
            r4 = r13
            r13 = r5
            r5 = r14
            r14 = r6
            r6 = r19
            r9 = r8
            r19 = r14
            r14 = r7
            r7 = r20
            r0.setDialogsLoadOffset(r1, r2, r3, r4, r5, r6, r7)
            org.telegram.messenger.UserConfig r0 = r23.getUserConfig()
            r0.setTotalDialogsCount(r10, r12)
            org.telegram.messenger.UserConfig r0 = r23.getUserConfig()
            r1 = 0
            r0.saveConfig(r1)
            goto L_0x0267
        L_0x025e:
            r10 = r24
            r22 = r3
            r13 = r4
            r19 = r6
            r14 = r7
            r9 = r8
        L_0x0267:
            java.util.ArrayList r12 = new java.util.ArrayList
            r12.<init>()
            r0 = 0
        L_0x026d:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r11.dialogs
            int r1 = r1.size()
            if (r0 >= r1) goto L_0x0387
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r11.dialogs
            java.lang.Object r1 = r1.get(r0)
            org.telegram.tgnet.TLRPC$Dialog r1 = (org.telegram.tgnet.TLRPC$Dialog) r1
            org.telegram.messenger.DialogObject.initDialog(r1)
            long r2 = r1.id
            int r4 = (r2 > r17 ? 1 : (r2 == r17 ? 0 : -1))
            if (r4 != 0) goto L_0x028c
            r4 = r25
            r2 = r27
            goto L_0x0381
        L_0x028c:
            int r4 = (int) r2
            r5 = 32
            long r2 = r2 >> r5
            int r3 = (int) r2
            if (r4 != 0) goto L_0x02a1
            if (r27 == 0) goto L_0x02a1
            r2 = r27
            java.lang.Object r3 = r2.get(r3)
            if (r3 != 0) goto L_0x02a3
        L_0x029d:
            r4 = r25
            goto L_0x0381
        L_0x02a1:
            r2 = r27
        L_0x02a3:
            long r3 = r15.proxyDialogId
            int r5 = (r3 > r17 ? 1 : (r3 == r17 ? 0 : -1))
            if (r5 == 0) goto L_0x02b1
            long r5 = r1.id
            int r7 = (r3 > r5 ? 1 : (r3 == r5 ? 0 : -1))
            if (r7 != 0) goto L_0x02b1
            r15.proxyDialog = r1
        L_0x02b1:
            int r3 = r1.last_message_date
            if (r3 != 0) goto L_0x02c5
            long r3 = r1.id
            java.lang.Object r3 = r9.get(r3)
            org.telegram.messenger.MessageObject r3 = (org.telegram.messenger.MessageObject) r3
            if (r3 == 0) goto L_0x02c5
            org.telegram.tgnet.TLRPC$Message r3 = r3.messageOwner
            int r3 = r3.date
            r1.last_message_date = r3
        L_0x02c5:
            boolean r3 = org.telegram.messenger.DialogObject.isChannel(r1)
            if (r3 == 0) goto L_0x02f7
            long r3 = r1.id
            int r4 = (int) r3
            int r3 = -r4
            java.lang.Object r3 = r13.get(r3)
            org.telegram.tgnet.TLRPC$Chat r3 = (org.telegram.tgnet.TLRPC$Chat) r3
            if (r3 == 0) goto L_0x02ea
            boolean r4 = r3.megagroup
            boolean r3 = r3.left
            if (r3 == 0) goto L_0x02eb
            long r5 = r15.proxyDialogId
            int r3 = (r5 > r17 ? 1 : (r5 == r17 ? 0 : -1))
            if (r3 == 0) goto L_0x029d
            long r7 = r1.id
            int r3 = (r5 > r7 ? 1 : (r5 == r7 ? 0 : -1))
            if (r3 == 0) goto L_0x02eb
            goto L_0x029d
        L_0x02ea:
            r4 = 1
        L_0x02eb:
            android.util.SparseIntArray r3 = r15.channelsPts
            long r5 = r1.id
            int r6 = (int) r5
            int r5 = -r6
            int r6 = r1.pts
            r3.put(r5, r6)
            goto L_0x030c
        L_0x02f7:
            long r3 = r1.id
            int r5 = (int) r3
            if (r5 >= 0) goto L_0x030b
            int r4 = (int) r3
            int r3 = -r4
            java.lang.Object r3 = r13.get(r3)
            org.telegram.tgnet.TLRPC$Chat r3 = (org.telegram.tgnet.TLRPC$Chat) r3
            if (r3 == 0) goto L_0x030b
            org.telegram.tgnet.TLRPC$InputChannel r3 = r3.migrated_to
            if (r3 == 0) goto L_0x030b
            goto L_0x029d
        L_0x030b:
            r4 = 1
        L_0x030c:
            long r5 = r1.id
            r14.put(r5, r1)
            if (r4 == 0) goto L_0x0329
            int r3 = r15.DIALOGS_LOAD_TYPE_CACHE
            r4 = r25
            if (r4 != r3) goto L_0x032b
            int r3 = r1.read_outbox_max_id
            if (r3 == 0) goto L_0x0321
            int r3 = r1.read_inbox_max_id
            if (r3 != 0) goto L_0x032b
        L_0x0321:
            int r3 = r1.top_message
            if (r3 == 0) goto L_0x032b
            r12.add(r1)
            goto L_0x032b
        L_0x0329:
            r4 = r25
        L_0x032b:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r3 = r15.dialogs_read_inbox_max
            long r5 = r1.id
            java.lang.Long r5 = java.lang.Long.valueOf(r5)
            java.lang.Object r3 = r3.get(r5)
            java.lang.Integer r3 = (java.lang.Integer) r3
            if (r3 != 0) goto L_0x033d
            r3 = r16
        L_0x033d:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r5 = r15.dialogs_read_inbox_max
            long r6 = r1.id
            java.lang.Long r6 = java.lang.Long.valueOf(r6)
            int r3 = r3.intValue()
            int r7 = r1.read_inbox_max_id
            int r3 = java.lang.Math.max(r3, r7)
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)
            r5.put(r6, r3)
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r3 = r15.dialogs_read_outbox_max
            long r5 = r1.id
            java.lang.Long r5 = java.lang.Long.valueOf(r5)
            java.lang.Object r3 = r3.get(r5)
            java.lang.Integer r3 = (java.lang.Integer) r3
            if (r3 != 0) goto L_0x0368
            r3 = r16
        L_0x0368:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r5 = r15.dialogs_read_outbox_max
            long r6 = r1.id
            java.lang.Long r6 = java.lang.Long.valueOf(r6)
            int r3 = r3.intValue()
            int r1 = r1.read_outbox_max_id
            int r1 = java.lang.Math.max(r3, r1)
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            r5.put(r6, r1)
        L_0x0381:
            int r0 = r0 + 1
            r27 = r2
            goto L_0x026d
        L_0x0387:
            r4 = r25
            int r0 = r15.DIALOGS_LOAD_TYPE_CACHE
            if (r4 == r0) goto L_0x0427
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r0 = r11.messages
            org.telegram.messenger.ImageLoader.saveMessagesThumbs(r0)
            r0 = 0
        L_0x0393:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r11.messages
            int r1 = r1.size()
            if (r0 >= r1) goto L_0x041e
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r11.messages
            java.lang.Object r1 = r1.get(r0)
            org.telegram.tgnet.TLRPC$Message r1 = (org.telegram.tgnet.TLRPC$Message) r1
            org.telegram.tgnet.TLRPC$MessageAction r2 = r1.action
            boolean r3 = r2 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatDeleteUser
            if (r3 == 0) goto L_0x03c7
            int r2 = r2.user_id
            r3 = r19
            java.lang.Object r2 = r3.get(r2)
            org.telegram.tgnet.TLRPC$User r2 = (org.telegram.tgnet.TLRPC$User) r2
            if (r2 == 0) goto L_0x03c9
            boolean r2 = r2.bot
            if (r2 == 0) goto L_0x03c9
            org.telegram.tgnet.TLRPC$TL_replyKeyboardHide r2 = new org.telegram.tgnet.TLRPC$TL_replyKeyboardHide
            r2.<init>()
            r1.reply_markup = r2
            int r2 = r1.flags
            r2 = r2 | 64
            r1.flags = r2
            goto L_0x03c9
        L_0x03c7:
            r3 = r19
        L_0x03c9:
            org.telegram.tgnet.TLRPC$MessageAction r2 = r1.action
            boolean r5 = r2 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatMigrateTo
            if (r5 != 0) goto L_0x0413
            boolean r2 = r2 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChannelCreate
            if (r2 == 0) goto L_0x03d4
            goto L_0x0413
        L_0x03d4:
            boolean r2 = r1.out
            if (r2 == 0) goto L_0x03db
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r2 = r15.dialogs_read_outbox_max
            goto L_0x03dd
        L_0x03db:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r2 = r15.dialogs_read_inbox_max
        L_0x03dd:
            long r5 = r1.dialog_id
            java.lang.Long r5 = java.lang.Long.valueOf(r5)
            java.lang.Object r5 = r2.get(r5)
            java.lang.Integer r5 = (java.lang.Integer) r5
            if (r5 != 0) goto L_0x0404
            org.telegram.messenger.MessagesStorage r5 = r23.getMessagesStorage()
            boolean r6 = r1.out
            long r7 = r1.dialog_id
            int r5 = r5.getDialogReadMax(r6, r7)
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
            long r6 = r1.dialog_id
            java.lang.Long r6 = java.lang.Long.valueOf(r6)
            r2.put(r6, r5)
        L_0x0404:
            int r2 = r5.intValue()
            int r5 = r1.id
            if (r2 >= r5) goto L_0x040e
            r2 = 1
            goto L_0x040f
        L_0x040e:
            r2 = 0
        L_0x040f:
            r1.unread = r2
            r2 = 0
            goto L_0x0418
        L_0x0413:
            r2 = 0
            r1.unread = r2
            r1.media_unread = r2
        L_0x0418:
            int r0 = r0 + 1
            r19 = r3
            goto L_0x0393
        L_0x041e:
            r2 = 0
            org.telegram.messenger.MessagesStorage r0 = r23.getMessagesStorage()
            r0.putDialogs(r11, r2)
            goto L_0x0428
        L_0x0427:
            r2 = 0
        L_0x0428:
            int r0 = r15.DIALOGS_LOAD_TYPE_CHANNEL
            if (r4 != r0) goto L_0x043e
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r0 = r11.chats
            java.lang.Object r0 = r0.get(r2)
            org.telegram.tgnet.TLRPC$Chat r0 = (org.telegram.tgnet.TLRPC$Chat) r0
            int r1 = r0.id
            r15.getChannelDifference(r1)
            int r0 = r0.id
            r15.checkChannelInviter(r0)
        L_0x043e:
            org.telegram.messenger.-$$Lambda$MessagesController$zukumvKd9R9znMBbHg_nYLeS-kI r16 = new org.telegram.messenger.-$$Lambda$MessagesController$zukumvKd9R9znMBbHg_nYLeS-kI
            r0 = r16
            r1 = r23
            r2 = r22
            r3 = r25
            r4 = r26
            r5 = r29
            r6 = r32
            r7 = r24
            r8 = r14
            r10 = r13
            r11 = r28
            r14 = r12
            r12 = r31
            r13 = r30
            r0.<init>(r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r16)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$processLoadedDialogs$154$MessagesController(int, int, org.telegram.tgnet.TLRPC$messages_Dialogs, boolean, int, java.util.ArrayList, int, boolean, boolean):void");
    }

    public /* synthetic */ void lambda$null$152$MessagesController(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, int i, boolean z, int[] iArr, int i2) {
        putUsers(tLRPC$messages_Dialogs.users, true);
        this.loadingDialogs.put(i, false);
        if (z) {
            this.dialogsEndReached.put(i, false);
            this.serverDialogsEndReached.put(i, false);
        } else if (iArr[0] == Integer.MAX_VALUE) {
            this.dialogsEndReached.put(i, true);
            this.serverDialogsEndReached.put(i, true);
        } else {
            loadDialogs(i, 0, i2, false);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    /* JADX WARNING: type inference failed for: r1v18 */
    /* JADX WARNING: type inference failed for: r1v19 */
    /* JADX WARNING: Incorrect type for immutable var: ssa=int, code=?, for r1v12, types: [int, boolean] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$null$153$MessagesController(org.telegram.tgnet.TLRPC$Message r23, int r24, org.telegram.tgnet.TLRPC$messages_Dialogs r25, java.util.ArrayList r26, boolean r27, int r28, android.util.LongSparseArray r29, android.util.LongSparseArray r30, android.util.SparseArray r31, int r32, boolean r33, int r34, java.util.ArrayList r35) {
        /*
            r22 = this;
            r0 = r22
            r1 = r23
            r2 = r24
            r3 = r25
            r4 = r26
            r5 = r28
            r6 = r29
            r7 = r30
            r8 = r32
            if (r1 == 0) goto L_0x001f
            int r9 = r0.dialogsLoadedTillDate
            int r1 = r1.date
            int r1 = java.lang.Math.min(r9, r1)
            r0.dialogsLoadedTillDate = r1
            goto L_0x0023
        L_0x001f:
            r1 = -2147483648(0xfffffffvar_, float:-0.0)
            r0.dialogsLoadedTillDate = r1
        L_0x0023:
            int r1 = r0.DIALOGS_LOAD_TYPE_CACHE
            if (r2 == r1) goto L_0x0033
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r3.dialogs
            r0.applyDialogsNotificationsSettings(r1)
            org.telegram.messenger.MediaDataController r1 = r22.getMediaDataController()
            r1.loadDraftsIfNeed()
        L_0x0033:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r1 = r3.users
            int r9 = r0.DIALOGS_LOAD_TYPE_CACHE
            r10 = 1
            r11 = 0
            if (r2 != r9) goto L_0x003d
            r9 = 1
            goto L_0x003e
        L_0x003d:
            r9 = 0
        L_0x003e:
            r0.putUsers(r1, r9)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r1 = r3.chats
            int r9 = r0.DIALOGS_LOAD_TYPE_CACHE
            if (r2 != r9) goto L_0x0049
            r9 = 1
            goto L_0x004a
        L_0x0049:
            r9 = 0
        L_0x004a:
            r0.putChats(r1, r9)
            r1 = 0
            if (r4 == 0) goto L_0x0078
            r9 = 0
        L_0x0051:
            int r12 = r26.size()
            if (r9 >= r12) goto L_0x0078
            java.lang.Object r12 = r4.get(r9)
            org.telegram.tgnet.TLRPC$EncryptedChat r12 = (org.telegram.tgnet.TLRPC$EncryptedChat) r12
            boolean r13 = r12 instanceof org.telegram.tgnet.TLRPC$TL_encryptedChat
            if (r13 == 0) goto L_0x0072
            int r13 = r12.layer
            int r13 = org.telegram.messenger.AndroidUtilities.getMyLayerVersion(r13)
            r14 = 101(0x65, float:1.42E-43)
            if (r13 >= r14) goto L_0x0072
            org.telegram.messenger.SecretChatHelper r13 = r22.getSecretChatHelper()
            r13.sendNotifyLayerMessage(r12, r1)
        L_0x0072:
            r0.putEncryptedChat(r12, r10)
            int r9 = r9 + 1
            goto L_0x0051
        L_0x0078:
            if (r27 != 0) goto L_0x0087
            int r4 = r0.DIALOGS_LOAD_TYPE_UNKNOWN
            if (r2 == r4) goto L_0x0087
            int r4 = r0.DIALOGS_LOAD_TYPE_CHANNEL
            if (r2 == r4) goto L_0x0087
            android.util.SparseBooleanArray r4 = r0.loadingDialogs
            r4.put(r5, r11)
        L_0x0087:
            r0.dialogsLoaded = r10
            if (r27 == 0) goto L_0x00a3
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r4 = r0.allDialogs
            boolean r4 = r4.isEmpty()
            if (r4 != 0) goto L_0x00a3
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r4 = r0.allDialogs
            int r9 = r4.size()
            int r9 = r9 - r10
            java.lang.Object r4 = r4.get(r9)
            org.telegram.tgnet.TLRPC$Dialog r4 = (org.telegram.tgnet.TLRPC$Dialog) r4
            int r4 = r4.last_message_date
            goto L_0x00a4
        L_0x00a3:
            r4 = 0
        L_0x00a4:
            r9 = 0
            r12 = 0
            r13 = 0
        L_0x00a7:
            int r14 = r29.size()
            if (r9 >= r14) goto L_0x0223
            long r10 = r6.keyAt(r9)
            java.lang.Object r14 = r6.valueAt(r9)
            org.telegram.tgnet.TLRPC$Dialog r14 = (org.telegram.tgnet.TLRPC$Dialog) r14
            int r1 = r0.DIALOGS_LOAD_TYPE_UNKNOWN
            if (r2 == r1) goto L_0x00c4
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r1 = r0.dialogs_dict
            java.lang.Object r1 = r1.get(r10)
            org.telegram.tgnet.TLRPC$Dialog r1 = (org.telegram.tgnet.TLRPC$Dialog) r1
            goto L_0x00c5
        L_0x00c4:
            r1 = 0
        L_0x00c5:
            if (r27 == 0) goto L_0x00cd
            if (r1 == 0) goto L_0x00cd
            int r15 = r14.folder_id
            r1.folder_id = r15
        L_0x00cd:
            if (r27 == 0) goto L_0x00d8
            if (r4 == 0) goto L_0x00d8
            int r15 = r14.last_message_date
            if (r15 >= r4) goto L_0x00d8
            r15 = r4
            goto L_0x0217
        L_0x00d8:
            int r15 = r0.DIALOGS_LOAD_TYPE_CACHE
            if (r2 == r15) goto L_0x00f7
            org.telegram.tgnet.TLRPC$DraftMessage r15 = r14.draft
            boolean r15 = r15 instanceof org.telegram.tgnet.TLRPC$TL_draftMessage
            if (r15 == 0) goto L_0x00f7
            org.telegram.messenger.MediaDataController r16 = r22.getMediaDataController()
            r15 = r4
            long r3 = r14.id
            org.telegram.tgnet.TLRPC$DraftMessage r6 = r14.draft
            r20 = 0
            r21 = 0
            r17 = r3
            r19 = r6
            r16.saveDraft(r17, r19, r20, r21)
            goto L_0x00f8
        L_0x00f7:
            r15 = r4
        L_0x00f8:
            int r3 = r14.folder_id
            if (r3 == r5) goto L_0x00fe
            int r12 = r12 + 1
        L_0x00fe:
            if (r1 != 0) goto L_0x0137
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r1 = r0.dialogs_dict
            r1.put(r10, r14)
            long r3 = r14.id
            java.lang.Object r1 = r7.get(r3)
            org.telegram.messenger.MessageObject r1 = (org.telegram.messenger.MessageObject) r1
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r3 = r0.dialogMessage
            r3.put(r10, r1)
            if (r1 == 0) goto L_0x0134
            org.telegram.tgnet.TLRPC$Message r3 = r1.messageOwner
            org.telegram.tgnet.TLRPC$Peer r3 = r3.to_id
            int r3 = r3.channel_id
            if (r3 != 0) goto L_0x0134
            android.util.SparseArray<org.telegram.messenger.MessageObject> r3 = r0.dialogMessagesByIds
            int r4 = r1.getId()
            r3.put(r4, r1)
            org.telegram.tgnet.TLRPC$Message r3 = r1.messageOwner
            long r3 = r3.random_id
            r10 = 0
            int r6 = (r3 > r10 ? 1 : (r3 == r10 ? 0 : -1))
            if (r6 == 0) goto L_0x0134
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r6 = r0.dialogMessagesByRandomIds
            r6.put(r3, r1)
        L_0x0134:
            r13 = 1
            goto L_0x0217
        L_0x0137:
            int r3 = r0.DIALOGS_LOAD_TYPE_CACHE
            if (r2 == r3) goto L_0x013f
            org.telegram.tgnet.TLRPC$PeerNotifySettings r3 = r14.notify_settings
            r1.notify_settings = r3
        L_0x013f:
            boolean r3 = r14.pinned
            r1.pinned = r3
            int r3 = r14.pinnedNum
            r1.pinnedNum = r3
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r3 = r0.dialogMessage
            java.lang.Object r3 = r3.get(r10)
            org.telegram.messenger.MessageObject r3 = (org.telegram.messenger.MessageObject) r3
            if (r3 == 0) goto L_0x0155
            boolean r4 = r3.deleted
            if (r4 != 0) goto L_0x01bd
        L_0x0155:
            if (r3 == 0) goto L_0x01bd
            int r4 = r1.top_message
            if (r4 <= 0) goto L_0x015c
            goto L_0x01bd
        L_0x015c:
            r4 = r12
            r6 = r13
            long r12 = r14.id
            java.lang.Object r1 = r7.get(r12)
            org.telegram.messenger.MessageObject r1 = (org.telegram.messenger.MessageObject) r1
            boolean r12 = r3.deleted
            if (r12 != 0) goto L_0x0176
            if (r1 == 0) goto L_0x0176
            org.telegram.tgnet.TLRPC$Message r12 = r1.messageOwner
            int r12 = r12.date
            org.telegram.tgnet.TLRPC$Message r13 = r3.messageOwner
            int r13 = r13.date
            if (r12 <= r13) goto L_0x0215
        L_0x0176:
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r12 = r0.dialogs_dict
            r12.put(r10, r14)
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r12 = r0.dialogMessage
            r12.put(r10, r1)
            if (r1 == 0) goto L_0x01a4
            org.telegram.tgnet.TLRPC$Message r10 = r1.messageOwner
            org.telegram.tgnet.TLRPC$Peer r10 = r10.to_id
            int r10 = r10.channel_id
            if (r10 != 0) goto L_0x01a4
            android.util.SparseArray<org.telegram.messenger.MessageObject> r10 = r0.dialogMessagesByIds
            int r11 = r1.getId()
            r10.put(r11, r1)
            if (r1 == 0) goto L_0x01a4
            org.telegram.tgnet.TLRPC$Message r10 = r1.messageOwner
            long r10 = r10.random_id
            r12 = 0
            int r14 = (r10 > r12 ? 1 : (r10 == r12 ? 0 : -1))
            if (r14 == 0) goto L_0x01a4
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r12 = r0.dialogMessagesByRandomIds
            r12.put(r10, r1)
        L_0x01a4:
            android.util.SparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessagesByIds
            int r10 = r3.getId()
            r1.remove(r10)
            org.telegram.tgnet.TLRPC$Message r1 = r3.messageOwner
            long r10 = r1.random_id
            r12 = 0
            int r1 = (r10 > r12 ? 1 : (r10 == r12 ? 0 : -1))
            if (r1 == 0) goto L_0x0215
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessagesByRandomIds
            r1.remove(r10)
            goto L_0x0215
        L_0x01bd:
            r4 = r12
            r6 = r13
            int r12 = r14.top_message
            int r1 = r1.top_message
            if (r12 < r1) goto L_0x0215
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r1 = r0.dialogs_dict
            r1.put(r10, r14)
            long r12 = r14.id
            java.lang.Object r1 = r7.get(r12)
            org.telegram.messenger.MessageObject r1 = (org.telegram.messenger.MessageObject) r1
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r12 = r0.dialogMessage
            r12.put(r10, r1)
            if (r1 == 0) goto L_0x01fb
            org.telegram.tgnet.TLRPC$Message r10 = r1.messageOwner
            org.telegram.tgnet.TLRPC$Peer r10 = r10.to_id
            int r10 = r10.channel_id
            if (r10 != 0) goto L_0x01fb
            android.util.SparseArray<org.telegram.messenger.MessageObject> r10 = r0.dialogMessagesByIds
            int r11 = r1.getId()
            r10.put(r11, r1)
            if (r1 == 0) goto L_0x01fb
            org.telegram.tgnet.TLRPC$Message r10 = r1.messageOwner
            long r10 = r10.random_id
            r12 = 0
            int r14 = (r10 > r12 ? 1 : (r10 == r12 ? 0 : -1))
            if (r14 == 0) goto L_0x01fb
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r12 = r0.dialogMessagesByRandomIds
            r12.put(r10, r1)
        L_0x01fb:
            if (r3 == 0) goto L_0x0215
            android.util.SparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessagesByIds
            int r10 = r3.getId()
            r1.remove(r10)
            org.telegram.tgnet.TLRPC$Message r1 = r3.messageOwner
            long r10 = r1.random_id
            r12 = 0
            int r1 = (r10 > r12 ? 1 : (r10 == r12 ? 0 : -1))
            if (r1 == 0) goto L_0x0215
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessagesByRandomIds
            r1.remove(r10)
        L_0x0215:
            r12 = r4
            r13 = r6
        L_0x0217:
            int r9 = r9 + 1
            r3 = r25
            r6 = r29
            r4 = r15
            r1 = 0
            r10 = 1
            r11 = 0
            goto L_0x00a7
        L_0x0223:
            r6 = r13
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r0.allDialogs
            r1.clear()
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r1 = r0.dialogs_dict
            int r1 = r1.size()
            r15 = 0
        L_0x0230:
            if (r15 >= r1) goto L_0x0240
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r3 = r0.allDialogs
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r4 = r0.dialogs_dict
            java.lang.Object r4 = r4.valueAt(r15)
            r3.add(r4)
            int r15 = r15 + 1
            goto L_0x0230
        L_0x0240:
            if (r27 == 0) goto L_0x0245
            r1 = r31
            goto L_0x0246
        L_0x0245:
            r1 = 0
        L_0x0246:
            r0.sortDialogs(r1)
            r22.putAllNeededDraftDialogs()
            int r1 = r0.DIALOGS_LOAD_TYPE_CHANNEL
            r3 = 2147483647(0x7fffffff, float:NaN)
            if (r2 == r1) goto L_0x02b3
            int r1 = r0.DIALOGS_LOAD_TYPE_UNKNOWN
            if (r2 == r1) goto L_0x02b3
            if (r27 != 0) goto L_0x02b3
            android.util.SparseBooleanArray r1 = r0.dialogsEndReached
            r4 = r25
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r7 = r4.dialogs
            int r7 = r7.size()
            if (r7 == 0) goto L_0x026d
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r7 = r4.dialogs
            int r7 = r7.size()
            if (r7 == r8) goto L_0x0271
        L_0x026d:
            if (r2 != 0) goto L_0x0271
            r15 = 1
            goto L_0x0272
        L_0x0271:
            r15 = 0
        L_0x0272:
            r1.put(r5, r15)
            if (r12 <= 0) goto L_0x0296
            r1 = 20
            if (r12 >= r1) goto L_0x0296
            if (r5 != 0) goto L_0x0296
            android.util.SparseBooleanArray r1 = r0.dialogsEndReached
            r7 = 1
            r1.put(r7, r7)
            org.telegram.messenger.UserConfig r1 = r22.getUserConfig()
            int[] r1 = r1.getDialogLoadOffsets(r5)
            r9 = 0
            r1 = r1[r9]
            if (r1 != r3) goto L_0x0297
            android.util.SparseBooleanArray r1 = r0.serverDialogsEndReached
            r1.put(r7, r7)
            goto L_0x0297
        L_0x0296:
            r7 = 1
        L_0x0297:
            if (r33 != 0) goto L_0x02b3
            android.util.SparseBooleanArray r1 = r0.serverDialogsEndReached
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r9 = r4.dialogs
            int r9 = r9.size()
            if (r9 == 0) goto L_0x02ab
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r4 = r4.dialogs
            int r4 = r4.size()
            if (r4 == r8) goto L_0x02af
        L_0x02ab:
            if (r2 != 0) goto L_0x02af
            r10 = 1
            goto L_0x02b0
        L_0x02af:
            r10 = 0
        L_0x02b0:
            r1.put(r5, r10)
        L_0x02b3:
            org.telegram.messenger.UserConfig r1 = r22.getUserConfig()
            int r1 = r1.getTotalDialogsCount(r5)
            org.telegram.messenger.UserConfig r4 = r22.getUserConfig()
            int[] r4 = r4.getDialogLoadOffsets(r5)
            if (r33 != 0) goto L_0x02db
            if (r27 != 0) goto L_0x02db
            r7 = 400(0x190, float:5.6E-43)
            if (r1 >= r7) goto L_0x02db
            r1 = 0
            r7 = r4[r1]
            r9 = -1
            if (r7 == r9) goto L_0x02dc
            r4 = r4[r1]
            if (r4 == r3) goto L_0x02dc
            r3 = 100
            r0.loadDialogs(r5, r1, r3, r1)
            goto L_0x02dc
        L_0x02db:
            r1 = 0
        L_0x02dc:
            org.telegram.messenger.NotificationCenter r3 = r22.getNotificationCenter()
            int r4 = org.telegram.messenger.NotificationCenter.dialogsNeedReload
            java.lang.Object[] r7 = new java.lang.Object[r1]
            r3.postNotificationName(r4, r7)
            if (r27 == 0) goto L_0x0306
            org.telegram.messenger.UserConfig r2 = r22.getUserConfig()
            r3 = r34
            r2.migrateOffsetId = r3
            org.telegram.messenger.UserConfig r2 = r22.getUserConfig()
            r2.saveConfig(r1)
            r0.migratingDialogs = r1
            org.telegram.messenger.NotificationCenter r2 = r22.getNotificationCenter()
            int r3 = org.telegram.messenger.NotificationCenter.needReloadRecentDialogsSearch
            java.lang.Object[] r1 = new java.lang.Object[r1]
            r2.postNotificationName(r3, r1)
            goto L_0x0312
        L_0x0306:
            r22.generateUpdateMessage()
            if (r6 != 0) goto L_0x0312
            int r3 = r0.DIALOGS_LOAD_TYPE_CACHE
            if (r2 != r3) goto L_0x0312
            r0.loadDialogs(r5, r1, r8, r1)
        L_0x0312:
            org.telegram.messenger.UserConfig r1 = r22.getUserConfig()
            int r1 = r1.migrateOffsetId
            org.telegram.messenger.UserConfig r2 = r22.getUserConfig()
            int r2 = r2.migrateOffsetDate
            org.telegram.messenger.UserConfig r3 = r22.getUserConfig()
            int r3 = r3.migrateOffsetUserId
            org.telegram.messenger.UserConfig r4 = r22.getUserConfig()
            int r4 = r4.migrateOffsetChatId
            org.telegram.messenger.UserConfig r5 = r22.getUserConfig()
            int r5 = r5.migrateOffsetChannelId
            org.telegram.messenger.UserConfig r6 = r22.getUserConfig()
            long r6 = r6.migrateOffsetAccess
            r23 = r22
            r24 = r1
            r25 = r2
            r26 = r3
            r27 = r4
            r28 = r5
            r29 = r6
            r23.migrateDialogs(r24, r25, r26, r27, r28, r29)
            boolean r1 = r35.isEmpty()
            if (r1 != 0) goto L_0x0354
            r1 = r35
            r2 = 0
            r0.reloadDialogsReadValue(r1, r2)
        L_0x0354:
            r22.loadUnreadDialogs()
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$null$153$MessagesController(org.telegram.tgnet.TLRPC$Message, int, org.telegram.tgnet.TLRPC$messages_Dialogs, java.util.ArrayList, boolean, int, android.util.LongSparseArray, android.util.LongSparseArray, android.util.SparseArray, int, boolean, int, java.util.ArrayList):void");
    }

    private void applyDialogNotificationsSettings(long j, TLRPC$PeerNotifySettings tLRPC$PeerNotifySettings) {
        int i;
        long j2 = j;
        TLRPC$PeerNotifySettings tLRPC$PeerNotifySettings2 = tLRPC$PeerNotifySettings;
        if (tLRPC$PeerNotifySettings2 != null) {
            SharedPreferences sharedPreferences = this.notificationsPreferences;
            int i2 = sharedPreferences.getInt("notify2_" + j2, -1);
            SharedPreferences sharedPreferences2 = this.notificationsPreferences;
            int i3 = sharedPreferences2.getInt("notifyuntil_" + j2, 0);
            SharedPreferences.Editor edit = this.notificationsPreferences.edit();
            TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j2);
            if (tLRPC$Dialog != null) {
                tLRPC$Dialog.notify_settings = tLRPC$PeerNotifySettings2;
            }
            if ((tLRPC$PeerNotifySettings2.flags & 2) != 0) {
                edit.putBoolean("silent_" + j2, tLRPC$PeerNotifySettings2.silent);
            } else {
                edit.remove("silent_" + j2);
            }
            boolean z = true;
            if ((tLRPC$PeerNotifySettings2.flags & 4) == 0) {
                if (i2 != -1) {
                    if (tLRPC$Dialog != null) {
                        tLRPC$Dialog.notify_settings.mute_until = 0;
                    }
                    edit.remove("notify2_" + j2);
                } else {
                    z = false;
                }
                getMessagesStorage().setDialogFlags(j2, 0);
            } else if (tLRPC$PeerNotifySettings2.mute_until > getConnectionsManager().getCurrentTime()) {
                if (tLRPC$PeerNotifySettings2.mute_until <= getConnectionsManager().getCurrentTime() + 31536000) {
                    if (i2 == 3 && i3 == tLRPC$PeerNotifySettings2.mute_until) {
                        z = false;
                    } else {
                        edit.putInt("notify2_" + j2, 3);
                        edit.putInt("notifyuntil_" + j2, tLRPC$PeerNotifySettings2.mute_until);
                        if (tLRPC$Dialog != null) {
                            tLRPC$Dialog.notify_settings.mute_until = 0;
                        }
                    }
                    i = tLRPC$PeerNotifySettings2.mute_until;
                } else if (i2 != 2) {
                    edit.putInt("notify2_" + j2, 2);
                    if (tLRPC$Dialog != null) {
                        tLRPC$Dialog.notify_settings.mute_until = Integer.MAX_VALUE;
                    }
                    i = 0;
                } else {
                    i = 0;
                    z = false;
                }
                getMessagesStorage().setDialogFlags(j2, (((long) i) << 32) | 1);
                getNotificationsController().removeNotificationsForDialog(j2);
            } else {
                if (i2 == 0 || i2 == 1) {
                    z = false;
                } else {
                    if (tLRPC$Dialog != null) {
                        tLRPC$Dialog.notify_settings.mute_until = 0;
                    }
                    edit.putInt("notify2_" + j2, 0);
                }
                getMessagesStorage().setDialogFlags(j2, 0);
            }
            edit.commit();
            if (z) {
                getNotificationCenter().postNotificationName(NotificationCenter.notificationsSettingsUpdated, new Object[0]);
            }
        }
    }

    private void applyDialogsNotificationsSettings(ArrayList<TLRPC$Dialog> arrayList) {
        SharedPreferences.Editor editor = null;
        for (int i = 0; i < arrayList.size(); i++) {
            TLRPC$Dialog tLRPC$Dialog = arrayList.get(i);
            if (tLRPC$Dialog.peer != null && (tLRPC$Dialog.notify_settings instanceof TLRPC$TL_peerNotifySettings)) {
                if (editor == null) {
                    editor = this.notificationsPreferences.edit();
                }
                TLRPC$Peer tLRPC$Peer = tLRPC$Dialog.peer;
                int i2 = tLRPC$Peer.user_id;
                if (i2 == 0) {
                    int i3 = tLRPC$Peer.chat_id;
                    if (i3 != 0) {
                        i2 = -i3;
                    } else {
                        i2 = -tLRPC$Peer.channel_id;
                    }
                }
                if ((tLRPC$Dialog.notify_settings.flags & 2) != 0) {
                    editor.putBoolean("silent_" + i2, tLRPC$Dialog.notify_settings.silent);
                } else {
                    editor.remove("silent_" + i2);
                }
                TLRPC$PeerNotifySettings tLRPC$PeerNotifySettings = tLRPC$Dialog.notify_settings;
                if ((tLRPC$PeerNotifySettings.flags & 4) == 0) {
                    editor.remove("notify2_" + i2);
                } else if (tLRPC$PeerNotifySettings.mute_until <= getConnectionsManager().getCurrentTime()) {
                    editor.putInt("notify2_" + i2, 0);
                } else if (tLRPC$Dialog.notify_settings.mute_until > getConnectionsManager().getCurrentTime() + 31536000) {
                    editor.putInt("notify2_" + i2, 2);
                    tLRPC$Dialog.notify_settings.mute_until = Integer.MAX_VALUE;
                } else {
                    editor.putInt("notify2_" + i2, 3);
                    editor.putInt("notifyuntil_" + i2, tLRPC$Dialog.notify_settings.mute_until);
                }
            }
        }
        if (editor != null) {
            editor.commit();
        }
    }

    public void reloadMentionsCountForChannels(ArrayList<Integer> arrayList) {
        AndroidUtilities.runOnUIThread(new Runnable(arrayList) {
            private final /* synthetic */ ArrayList f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$reloadMentionsCountForChannels$157$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$reloadMentionsCountForChannels$157$MessagesController(ArrayList arrayList) {
        for (int i = 0; i < arrayList.size(); i++) {
            long j = (long) (-((Integer) arrayList.get(i)).intValue());
            TLRPC$TL_messages_getUnreadMentions tLRPC$TL_messages_getUnreadMentions = new TLRPC$TL_messages_getUnreadMentions();
            tLRPC$TL_messages_getUnreadMentions.peer = getInputPeer((int) j);
            tLRPC$TL_messages_getUnreadMentions.limit = 1;
            getConnectionsManager().sendRequest(tLRPC$TL_messages_getUnreadMentions, new RequestDelegate(j) {
                private final /* synthetic */ long f$1;

                {
                    this.f$1 = r2;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$null$156$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$null$156$MessagesController(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable(tLObject, j) {
            private final /* synthetic */ TLObject f$1;
            private final /* synthetic */ long f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$null$155$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$null$155$MessagesController(TLObject tLObject, long j) {
        TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
        if (tLRPC$messages_Messages != null) {
            int i = tLRPC$messages_Messages.count;
            if (i == 0) {
                i = tLRPC$messages_Messages.messages.size();
            }
            getMessagesStorage().resetMentionsCount(j, i);
        }
    }

    public void processDialogsUpdateRead(LongSparseArray<Integer> longSparseArray, LongSparseArray<Integer> longSparseArray2) {
        AndroidUtilities.runOnUIThread(new Runnable(longSparseArray, longSparseArray2) {
            private final /* synthetic */ LongSparseArray f$1;
            private final /* synthetic */ LongSparseArray f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$processDialogsUpdateRead$158$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$processDialogsUpdateRead$158$MessagesController(LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        boolean z;
        if (longSparseArray != null) {
            z = false;
            for (int i = 0; i < longSparseArray.size(); i++) {
                long keyAt = longSparseArray.keyAt(i);
                TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(keyAt);
                if (tLRPC$Dialog != null) {
                    int i2 = tLRPC$Dialog.unread_count;
                    int intValue = ((Integer) longSparseArray.valueAt(i)).intValue();
                    tLRPC$Dialog.unread_count = intValue;
                    if (i2 != 0 && intValue == 0) {
                        if (!isDialogMuted(keyAt)) {
                            this.unreadUnmutedDialogs--;
                        }
                        if (!z) {
                            int i3 = 0;
                            while (true) {
                                DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                                if (i3 < dialogFilterArr.length) {
                                    if (dialogFilterArr[i3] != null && (dialogFilterArr[i3].flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                                        break;
                                    }
                                    i3++;
                                } else {
                                    break;
                                }
                            }
                        }
                    } else if (i2 == 0 && !tLRPC$Dialog.unread_mark && tLRPC$Dialog.unread_count != 0) {
                        if (!isDialogMuted(keyAt)) {
                            this.unreadUnmutedDialogs++;
                        }
                        if (!z) {
                            int i4 = 0;
                            while (true) {
                                DialogFilter[] dialogFilterArr2 = this.selectedDialogFilter;
                                if (i4 < dialogFilterArr2.length) {
                                    if (dialogFilterArr2[i4] != null && (dialogFilterArr2[i4].flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                                        break;
                                    }
                                    i4++;
                                } else {
                                    break;
                                }
                            }
                        }
                    }
                    z = true;
                }
            }
        } else {
            z = false;
        }
        if (longSparseArray2 != null) {
            for (int i5 = 0; i5 < longSparseArray2.size(); i5++) {
                TLRPC$Dialog tLRPC$Dialog2 = this.dialogs_dict.get(longSparseArray2.keyAt(i5));
                if (tLRPC$Dialog2 != null) {
                    tLRPC$Dialog2.unread_mentions_count = ((Integer) longSparseArray2.valueAt(i5)).intValue();
                    if (this.createdDialogMainThreadIds.contains(Long.valueOf(tLRPC$Dialog2.id))) {
                        getNotificationCenter().postNotificationName(NotificationCenter.updateMentionsCount, Long.valueOf(tLRPC$Dialog2.id), Integer.valueOf(tLRPC$Dialog2.unread_mentions_count));
                    }
                    if (!z) {
                        int i6 = 0;
                        while (true) {
                            DialogFilter[] dialogFilterArr3 = this.selectedDialogFilter;
                            if (i6 < dialogFilterArr3.length) {
                                if (dialogFilterArr3[i6] != null && (dialogFilterArr3[i6].flags & DIALOG_FILTER_FLAG_EXCLUDE_MUTED) != 0) {
                                    z = true;
                                    break;
                                }
                                i6++;
                            } else {
                                break;
                            }
                        }
                    }
                }
            }
        }
        if (z) {
            sortDialogs((SparseArray<TLRPC$Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 256);
        if (longSparseArray != null) {
            getNotificationsController().processDialogsUpdateRead(longSparseArray);
        }
    }

    /* access modifiers changed from: protected */
    public void checkLastDialogMessage(TLRPC$Dialog tLRPC$Dialog, TLRPC$InputPeer tLRPC$InputPeer, long j) {
        NativeByteBuffer nativeByteBuffer;
        Exception e;
        int i = (int) tLRPC$Dialog.id;
        if (i != 0 && this.checkingLastMessagesDialogs.indexOfKey(i) < 0) {
            TLRPC$TL_messages_getHistory tLRPC$TL_messages_getHistory = new TLRPC$TL_messages_getHistory();
            if (tLRPC$InputPeer == null) {
                tLRPC$InputPeer = getInputPeer(i);
            }
            tLRPC$TL_messages_getHistory.peer = tLRPC$InputPeer;
            if (tLRPC$InputPeer != null) {
                tLRPC$TL_messages_getHistory.limit = 1;
                this.checkingLastMessagesDialogs.put(i, true);
                if (j == 0) {
                    try {
                        nativeByteBuffer = new NativeByteBuffer(tLRPC$TL_messages_getHistory.peer.getObjectSize() + 60);
                        try {
                            nativeByteBuffer.writeInt32(14);
                            nativeByteBuffer.writeInt64(tLRPC$Dialog.id);
                            nativeByteBuffer.writeInt32(tLRPC$Dialog.top_message);
                            nativeByteBuffer.writeInt32(tLRPC$Dialog.read_inbox_max_id);
                            nativeByteBuffer.writeInt32(tLRPC$Dialog.read_outbox_max_id);
                            nativeByteBuffer.writeInt32(tLRPC$Dialog.unread_count);
                            nativeByteBuffer.writeInt32(tLRPC$Dialog.last_message_date);
                            nativeByteBuffer.writeInt32(tLRPC$Dialog.pts);
                            nativeByteBuffer.writeInt32(tLRPC$Dialog.flags);
                            nativeByteBuffer.writeBool(tLRPC$Dialog.pinned);
                            nativeByteBuffer.writeInt32(tLRPC$Dialog.pinnedNum);
                            nativeByteBuffer.writeInt32(tLRPC$Dialog.unread_mentions_count);
                            nativeByteBuffer.writeBool(tLRPC$Dialog.unread_mark);
                            nativeByteBuffer.writeInt32(tLRPC$Dialog.folder_id);
                            tLRPC$TL_messages_getHistory.peer.serializeToStream(nativeByteBuffer);
                        } catch (Exception e2) {
                            e = e2;
                        }
                    } catch (Exception e3) {
                        Exception exc = e3;
                        nativeByteBuffer = null;
                        e = exc;
                        FileLog.e((Throwable) e);
                        j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                        getConnectionsManager().sendRequest(tLRPC$TL_messages_getHistory, new RequestDelegate(i, tLRPC$Dialog, j) {
                            private final /* synthetic */ int f$1;
                            private final /* synthetic */ TLRPC$Dialog f$2;
                            private final /* synthetic */ long f$3;

                            {
                                this.f$1 = r2;
                                this.f$2 = r3;
                                this.f$3 = r4;
                            }

                            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                MessagesController.this.lambda$checkLastDialogMessage$162$MessagesController(this.f$1, this.f$2, this.f$3, tLObject, tLRPC$TL_error);
                            }
                        });
                    }
                    j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                }
                getConnectionsManager().sendRequest(tLRPC$TL_messages_getHistory, new RequestDelegate(i, tLRPC$Dialog, j) {
                    private final /* synthetic */ int f$1;
                    private final /* synthetic */ TLRPC$Dialog f$2;
                    private final /* synthetic */ long f$3;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                        this.f$3 = r4;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$checkLastDialogMessage$162$MessagesController(this.f$1, this.f$2, this.f$3, tLObject, tLRPC$TL_error);
                    }
                });
            }
        }
    }

    public /* synthetic */ void lambda$checkLastDialogMessage$162$MessagesController(int i, TLRPC$Dialog tLRPC$Dialog, long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
            removeDeletedMessagesFromArray((long) i, tLRPC$messages_Messages.messages);
            if (!tLRPC$messages_Messages.messages.isEmpty()) {
                TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
                TLRPC$Message tLRPC$Message = tLRPC$messages_Messages.messages.get(0);
                TLRPC$TL_dialog tLRPC$TL_dialog = new TLRPC$TL_dialog();
                tLRPC$TL_dialog.flags = tLRPC$Dialog.flags;
                tLRPC$TL_dialog.top_message = tLRPC$Message.id;
                tLRPC$TL_dialog.last_message_date = tLRPC$Message.date;
                tLRPC$TL_dialog.notify_settings = tLRPC$Dialog.notify_settings;
                tLRPC$TL_dialog.pts = tLRPC$Dialog.pts;
                tLRPC$TL_dialog.unread_count = tLRPC$Dialog.unread_count;
                tLRPC$TL_dialog.unread_mark = tLRPC$Dialog.unread_mark;
                tLRPC$TL_dialog.unread_mentions_count = tLRPC$Dialog.unread_mentions_count;
                tLRPC$TL_dialog.read_inbox_max_id = tLRPC$Dialog.read_inbox_max_id;
                tLRPC$TL_dialog.read_outbox_max_id = tLRPC$Dialog.read_outbox_max_id;
                tLRPC$TL_dialog.pinned = tLRPC$Dialog.pinned;
                tLRPC$TL_dialog.pinnedNum = tLRPC$Dialog.pinnedNum;
                tLRPC$TL_dialog.folder_id = tLRPC$Dialog.folder_id;
                long j2 = tLRPC$Dialog.id;
                tLRPC$TL_dialog.id = j2;
                tLRPC$Message.dialog_id = j2;
                tLRPC$TL_messages_dialogs.users.addAll(tLRPC$messages_Messages.users);
                tLRPC$TL_messages_dialogs.chats.addAll(tLRPC$messages_Messages.chats);
                tLRPC$TL_messages_dialogs.dialogs.add(tLRPC$TL_dialog);
                tLRPC$TL_messages_dialogs.messages.addAll(tLRPC$messages_Messages.messages);
                tLRPC$TL_messages_dialogs.count = 1;
                processDialogsUpdate(tLRPC$TL_messages_dialogs, (ArrayList<TLRPC$EncryptedChat>) null);
                getMessagesStorage().putMessages(tLRPC$messages_Messages.messages, true, true, false, getDownloadController().getAutodownloadMask(), true, false);
            } else {
                AndroidUtilities.runOnUIThread(new Runnable(tLRPC$Dialog) {
                    private final /* synthetic */ TLRPC$Dialog f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run() {
                        MessagesController.this.lambda$null$160$MessagesController(this.f$1);
                    }
                });
            }
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
        AndroidUtilities.runOnUIThread(new Runnable(i) {
            private final /* synthetic */ int f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$161$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$null$160$MessagesController(TLRPC$Dialog tLRPC$Dialog) {
        if (getMediaDataController().getDraft(tLRPC$Dialog.id) == null) {
            TLRPC$Dialog tLRPC$Dialog2 = this.dialogs_dict.get(tLRPC$Dialog.id);
            if (tLRPC$Dialog2 == null) {
                getMessagesStorage().isDialogHasTopMessage(tLRPC$Dialog.id, new Runnable(tLRPC$Dialog) {
                    private final /* synthetic */ TLRPC$Dialog f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run() {
                        MessagesController.this.lambda$null$159$MessagesController(this.f$1);
                    }
                });
            } else if (tLRPC$Dialog2.top_message == 0) {
                deleteDialog(tLRPC$Dialog.id, 3);
            }
        }
    }

    public /* synthetic */ void lambda$null$159$MessagesController(TLRPC$Dialog tLRPC$Dialog) {
        deleteDialog(tLRPC$Dialog.id, 3);
    }

    public /* synthetic */ void lambda$null$161$MessagesController(int i) {
        this.checkingLastMessagesDialogs.delete(i);
    }

    public void processDialogsUpdate(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, ArrayList<TLRPC$EncryptedChat> arrayList) {
        Utilities.stageQueue.postRunnable(new Runnable(tLRPC$messages_Dialogs) {
            private final /* synthetic */ TLRPC$messages_Dialogs f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$processDialogsUpdate$164$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$processDialogsUpdate$164$MessagesController(TLRPC$messages_Dialogs tLRPC$messages_Dialogs) {
        long j;
        MessageObject messageObject;
        TLRPC$Chat tLRPC$Chat;
        TLRPC$Chat tLRPC$Chat2;
        TLRPC$messages_Dialogs tLRPC$messages_Dialogs2 = tLRPC$messages_Dialogs;
        LongSparseArray longSparseArray = new LongSparseArray();
        LongSparseArray longSparseArray2 = new LongSparseArray();
        SparseArray sparseArray = new SparseArray(tLRPC$messages_Dialogs2.users.size());
        SparseArray sparseArray2 = new SparseArray(tLRPC$messages_Dialogs2.chats.size());
        LongSparseArray longSparseArray3 = new LongSparseArray();
        int i = 0;
        for (int i2 = 0; i2 < tLRPC$messages_Dialogs2.users.size(); i2++) {
            TLRPC$User tLRPC$User = tLRPC$messages_Dialogs2.users.get(i2);
            sparseArray.put(tLRPC$User.id, tLRPC$User);
        }
        for (int i3 = 0; i3 < tLRPC$messages_Dialogs2.chats.size(); i3++) {
            TLRPC$Chat tLRPC$Chat3 = tLRPC$messages_Dialogs2.chats.get(i3);
            sparseArray2.put(tLRPC$Chat3.id, tLRPC$Chat3);
        }
        int i4 = 0;
        while (true) {
            j = 0;
            if (i4 >= tLRPC$messages_Dialogs2.messages.size()) {
                break;
            }
            TLRPC$Message tLRPC$Message = tLRPC$messages_Dialogs2.messages.get(i4);
            long j2 = this.proxyDialogId;
            if (j2 == 0 || j2 != tLRPC$Message.dialog_id) {
                TLRPC$Peer tLRPC$Peer = tLRPC$Message.to_id;
                int i5 = tLRPC$Peer.channel_id;
                if (i5 != 0) {
                    TLRPC$Chat tLRPC$Chat4 = (TLRPC$Chat) sparseArray2.get(i5);
                    if (tLRPC$Chat4 != null && tLRPC$Chat4.left) {
                        i4++;
                    }
                } else {
                    int i6 = tLRPC$Peer.chat_id;
                    if (!(i6 == 0 || (tLRPC$Chat2 = (TLRPC$Chat) sparseArray2.get(i6)) == null || tLRPC$Chat2.migrated_to == null)) {
                        i4++;
                    }
                }
            }
            MessageObject messageObject2 = r7;
            MessageObject messageObject3 = new MessageObject(this.currentAccount, tLRPC$Message, (SparseArray<TLRPC$User>) sparseArray, (SparseArray<TLRPC$Chat>) sparseArray2, false);
            longSparseArray2.put(messageObject2.getDialogId(), messageObject2);
            i4++;
        }
        while (i < tLRPC$messages_Dialogs2.dialogs.size()) {
            TLRPC$Dialog tLRPC$Dialog = tLRPC$messages_Dialogs2.dialogs.get(i);
            DialogObject.initDialog(tLRPC$Dialog);
            long j3 = this.proxyDialogId;
            if (j3 == j || j3 != tLRPC$Dialog.id) {
                if (DialogObject.isChannel(tLRPC$Dialog)) {
                    TLRPC$Chat tLRPC$Chat5 = (TLRPC$Chat) sparseArray2.get(-((int) tLRPC$Dialog.id));
                    if (tLRPC$Chat5 != null && tLRPC$Chat5.left) {
                        i++;
                        j = 0;
                    }
                } else {
                    long j4 = tLRPC$Dialog.id;
                    if (!(((int) j4) >= 0 || (tLRPC$Chat = (TLRPC$Chat) sparseArray2.get(-((int) j4))) == null || tLRPC$Chat.migrated_to == null)) {
                        i++;
                        j = 0;
                    }
                }
            }
            if (tLRPC$Dialog.last_message_date == 0 && (messageObject = (MessageObject) longSparseArray2.get(tLRPC$Dialog.id)) != null) {
                tLRPC$Dialog.last_message_date = messageObject.messageOwner.date;
            }
            longSparseArray.put(tLRPC$Dialog.id, tLRPC$Dialog);
            longSparseArray3.put(tLRPC$Dialog.id, Integer.valueOf(tLRPC$Dialog.unread_count));
            Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(tLRPC$Dialog.id));
            if (num == null) {
                num = 0;
            }
            this.dialogs_read_inbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num.intValue(), tLRPC$Dialog.read_inbox_max_id)));
            Integer num2 = this.dialogs_read_outbox_max.get(Long.valueOf(tLRPC$Dialog.id));
            if (num2 == null) {
                num2 = 0;
            }
            this.dialogs_read_outbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num2.intValue(), tLRPC$Dialog.read_outbox_max_id)));
            i++;
            j = 0;
        }
        AndroidUtilities.runOnUIThread(new Runnable(tLRPC$messages_Dialogs, longSparseArray, longSparseArray2, longSparseArray3) {
            private final /* synthetic */ TLRPC$messages_Dialogs f$1;
            private final /* synthetic */ LongSparseArray f$2;
            private final /* synthetic */ LongSparseArray f$3;
            private final /* synthetic */ LongSparseArray f$4;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
            }

            public final void run() {
                MessagesController.this.lambda$null$163$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4);
            }
        });
    }

    public /* synthetic */ void lambda$null$163$MessagesController(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, LongSparseArray longSparseArray, LongSparseArray longSparseArray2, LongSparseArray longSparseArray3) {
        long j;
        TLRPC$messages_Dialogs tLRPC$messages_Dialogs2 = tLRPC$messages_Dialogs;
        LongSparseArray longSparseArray4 = longSparseArray;
        LongSparseArray longSparseArray5 = longSparseArray2;
        putUsers(tLRPC$messages_Dialogs2.users, true);
        putChats(tLRPC$messages_Dialogs2.chats, true);
        for (int i = 0; i < longSparseArray.size(); i++) {
            long keyAt = longSparseArray4.keyAt(i);
            TLRPC$Dialog tLRPC$Dialog = (TLRPC$Dialog) longSparseArray4.valueAt(i);
            TLRPC$Dialog tLRPC$Dialog2 = this.dialogs_dict.get(keyAt);
            if (tLRPC$Dialog2 == null) {
                this.nextDialogsCacheOffset.put(tLRPC$Dialog.folder_id, this.nextDialogsCacheOffset.get(tLRPC$Dialog.folder_id, 0) + 1);
                this.dialogs_dict.put(keyAt, tLRPC$Dialog);
                MessageObject messageObject = (MessageObject) longSparseArray5.get(tLRPC$Dialog.id);
                this.dialogMessage.put(keyAt, messageObject);
                if (messageObject == null) {
                    checkLastDialogMessage(tLRPC$Dialog, (TLRPC$InputPeer) null, 0);
                } else if (messageObject.messageOwner.to_id.channel_id == 0) {
                    this.dialogMessagesByIds.put(messageObject.getId(), messageObject);
                    this.dialogsLoadedTillDate = Math.min(this.dialogsLoadedTillDate, messageObject.messageOwner.date);
                    long j2 = messageObject.messageOwner.random_id;
                    if (j2 != 0) {
                        this.dialogMessagesByRandomIds.put(j2, messageObject);
                    }
                }
            } else {
                tLRPC$Dialog2.unread_count = tLRPC$Dialog.unread_count;
                int i2 = tLRPC$Dialog2.unread_mentions_count;
                int i3 = tLRPC$Dialog.unread_mentions_count;
                if (i2 != i3) {
                    tLRPC$Dialog2.unread_mentions_count = i3;
                    if (this.createdDialogMainThreadIds.contains(Long.valueOf(tLRPC$Dialog2.id))) {
                        getNotificationCenter().postNotificationName(NotificationCenter.updateMentionsCount, Long.valueOf(tLRPC$Dialog2.id), Integer.valueOf(tLRPC$Dialog2.unread_mentions_count));
                    }
                }
                MessageObject messageObject2 = this.dialogMessage.get(keyAt);
                if (messageObject2 != null && tLRPC$Dialog2.top_message <= 0) {
                    MessageObject messageObject3 = (MessageObject) longSparseArray5.get(tLRPC$Dialog.id);
                    if (messageObject2.deleted || messageObject3 == null || messageObject3.messageOwner.date > messageObject2.messageOwner.date) {
                        this.dialogs_dict.put(keyAt, tLRPC$Dialog);
                        this.dialogMessage.put(keyAt, messageObject3);
                        if (messageObject3 != null && messageObject3.messageOwner.to_id.channel_id == 0) {
                            this.dialogMessagesByIds.put(messageObject3.getId(), messageObject3);
                            this.dialogsLoadedTillDate = Math.min(this.dialogsLoadedTillDate, messageObject3.messageOwner.date);
                            long j3 = messageObject3.messageOwner.random_id;
                            if (j3 != 0) {
                                this.dialogMessagesByRandomIds.put(j3, messageObject3);
                            }
                        }
                        this.dialogMessagesByIds.remove(messageObject2.getId());
                        long j4 = messageObject2.messageOwner.random_id;
                        if (j4 != 0) {
                            this.dialogMessagesByRandomIds.remove(j4);
                        }
                    }
                } else if ((messageObject2 != null && messageObject2.deleted) || tLRPC$Dialog.top_message > tLRPC$Dialog2.top_message) {
                    this.dialogs_dict.put(keyAt, tLRPC$Dialog);
                    MessageObject messageObject4 = (MessageObject) longSparseArray5.get(tLRPC$Dialog.id);
                    this.dialogMessage.put(keyAt, messageObject4);
                    if (messageObject4 != null && messageObject4.messageOwner.to_id.channel_id == 0) {
                        this.dialogMessagesByIds.put(messageObject4.getId(), messageObject4);
                        this.dialogsLoadedTillDate = Math.min(this.dialogsLoadedTillDate, messageObject4.messageOwner.date);
                        long j5 = messageObject4.messageOwner.random_id;
                        if (j5 != 0) {
                            this.dialogMessagesByRandomIds.put(j5, messageObject4);
                        }
                    }
                    if (messageObject2 != null) {
                        this.dialogMessagesByIds.remove(messageObject2.getId());
                        long j6 = messageObject2.messageOwner.random_id;
                        j = 0;
                        if (j6 != 0) {
                            this.dialogMessagesByRandomIds.remove(j6);
                        }
                    } else {
                        j = 0;
                    }
                    if (messageObject4 == null) {
                        checkLastDialogMessage(tLRPC$Dialog, (TLRPC$InputPeer) null, j);
                    }
                }
            }
        }
        this.allDialogs.clear();
        int size = this.dialogs_dict.size();
        for (int i4 = 0; i4 < size; i4++) {
            this.allDialogs.add(this.dialogs_dict.valueAt(i4));
        }
        sortDialogs((SparseArray<TLRPC$Chat>) null);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        getNotificationsController().processDialogsUpdateRead(longSparseArray3);
    }

    public void addToViewsQueue(MessageObject messageObject) {
        Utilities.stageQueue.postRunnable(new Runnable(messageObject) {
            private final /* synthetic */ MessageObject f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$addToViewsQueue$165$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$addToViewsQueue$165$MessagesController(MessageObject messageObject) {
        int dialogId = (int) messageObject.getDialogId();
        int id = messageObject.getId();
        ArrayList arrayList = this.channelViewsToSend.get(dialogId);
        if (arrayList == null) {
            arrayList = new ArrayList();
            this.channelViewsToSend.put(dialogId, arrayList);
        }
        if (!arrayList.contains(Integer.valueOf(id))) {
            arrayList.add(Integer.valueOf(id));
        }
    }

    public void addToPollsQueue(long j, ArrayList<MessageObject> arrayList) {
        SparseArray sparseArray = this.pollsToCheck.get(j);
        if (sparseArray == null) {
            sparseArray = new SparseArray();
            this.pollsToCheck.put(j, sparseArray);
            this.pollsToCheckSize++;
        }
        int size = sparseArray.size();
        for (int i = 0; i < size; i++) {
            ((MessageObject) sparseArray.valueAt(i)).pollVisibleOnScreen = false;
        }
        int size2 = arrayList.size();
        for (int i2 = 0; i2 < size2; i2++) {
            MessageObject messageObject = arrayList.get(i2);
            if (messageObject.type == 17) {
                int id = messageObject.getId();
                MessageObject messageObject2 = (MessageObject) sparseArray.get(id);
                if (messageObject2 != null) {
                    messageObject2.pollVisibleOnScreen = true;
                } else {
                    sparseArray.put(id, messageObject);
                }
            }
        }
    }

    public void markMessageContentAsRead(MessageObject messageObject) {
        if (!messageObject.scheduled) {
            ArrayList arrayList = new ArrayList();
            long id = (long) messageObject.getId();
            int i = messageObject.messageOwner.to_id.channel_id;
            if (i != 0) {
                id |= ((long) i) << 32;
            }
            if (messageObject.messageOwner.mentioned) {
                getMessagesStorage().markMentionMessageAsRead(messageObject.getId(), messageObject.messageOwner.to_id.channel_id, messageObject.getDialogId());
            }
            arrayList.add(Long.valueOf(id));
            getMessagesStorage().markMessagesContentAsRead(arrayList, 0);
            getNotificationCenter().postNotificationName(NotificationCenter.messagesReadContent, arrayList);
            if (messageObject.getId() < 0) {
                markMessageAsRead(messageObject.getDialogId(), messageObject.messageOwner.random_id, Integer.MIN_VALUE);
            } else if (messageObject.messageOwner.to_id.channel_id != 0) {
                TLRPC$TL_channels_readMessageContents tLRPC$TL_channels_readMessageContents = new TLRPC$TL_channels_readMessageContents();
                TLRPC$InputChannel inputChannel = getInputChannel(messageObject.messageOwner.to_id.channel_id);
                tLRPC$TL_channels_readMessageContents.channel = inputChannel;
                if (inputChannel != null) {
                    tLRPC$TL_channels_readMessageContents.id.add(Integer.valueOf(messageObject.getId()));
                    getConnectionsManager().sendRequest(tLRPC$TL_channels_readMessageContents, $$Lambda$MessagesController$k5LS8yQIZqbcjvzDvE00EFa_dtY.INSTANCE);
                }
            } else {
                TLRPC$TL_messages_readMessageContents tLRPC$TL_messages_readMessageContents = new TLRPC$TL_messages_readMessageContents();
                tLRPC$TL_messages_readMessageContents.id.add(Integer.valueOf(messageObject.getId()));
                getConnectionsManager().sendRequest(tLRPC$TL_messages_readMessageContents, new RequestDelegate() {
                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$markMessageContentAsRead$167$MessagesController(tLObject, tLRPC$TL_error);
                    }
                });
            }
        }
    }

    public /* synthetic */ void lambda$markMessageContentAsRead$167$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedMessages tLRPC$TL_messages_affectedMessages = (TLRPC$TL_messages_affectedMessages) tLObject;
            processNewDifferenceParams(-1, tLRPC$TL_messages_affectedMessages.pts, -1, tLRPC$TL_messages_affectedMessages.pts_count);
        }
    }

    public void markMentionMessageAsRead(int i, int i2, long j) {
        getMessagesStorage().markMentionMessageAsRead(i, i2, j);
        if (i2 != 0) {
            TLRPC$TL_channels_readMessageContents tLRPC$TL_channels_readMessageContents = new TLRPC$TL_channels_readMessageContents();
            TLRPC$InputChannel inputChannel = getInputChannel(i2);
            tLRPC$TL_channels_readMessageContents.channel = inputChannel;
            if (inputChannel != null) {
                tLRPC$TL_channels_readMessageContents.id.add(Integer.valueOf(i));
                getConnectionsManager().sendRequest(tLRPC$TL_channels_readMessageContents, $$Lambda$MessagesController$dErdFDW74Y2Ys9Xcaqwa3GuT1J0.INSTANCE);
                return;
            }
            return;
        }
        TLRPC$TL_messages_readMessageContents tLRPC$TL_messages_readMessageContents = new TLRPC$TL_messages_readMessageContents();
        tLRPC$TL_messages_readMessageContents.id.add(Integer.valueOf(i));
        getConnectionsManager().sendRequest(tLRPC$TL_messages_readMessageContents, new RequestDelegate() {
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$markMentionMessageAsRead$169$MessagesController(tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$markMentionMessageAsRead$169$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedMessages tLRPC$TL_messages_affectedMessages = (TLRPC$TL_messages_affectedMessages) tLObject;
            processNewDifferenceParams(-1, tLRPC$TL_messages_affectedMessages.pts, -1, tLRPC$TL_messages_affectedMessages.pts_count);
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:28:0x0064  */
    /* JADX WARNING: Removed duplicated region for block: B:29:0x0081  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void markMessageAsRead(int r10, int r11, org.telegram.tgnet.TLRPC$InputChannel r12, int r13, long r14) {
        /*
            r9 = this;
            if (r10 == 0) goto L_0x009b
            if (r13 > 0) goto L_0x0006
            goto L_0x009b
        L_0x0006:
            if (r11 == 0) goto L_0x0011
            if (r12 != 0) goto L_0x0011
            org.telegram.tgnet.TLRPC$InputChannel r12 = r9.getInputChannel((int) r11)
            if (r12 != 0) goto L_0x0011
            return
        L_0x0011:
            r0 = 0
            int r2 = (r14 > r0 ? 1 : (r14 == r0 ? 0 : -1))
            if (r2 != 0) goto L_0x004e
            r14 = 0
            org.telegram.tgnet.NativeByteBuffer r15 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x0041 }
            r0 = 16
            if (r12 == 0) goto L_0x0023
            int r1 = r12.getObjectSize()     // Catch:{ Exception -> 0x0041 }
            goto L_0x0024
        L_0x0023:
            r1 = 0
        L_0x0024:
            int r0 = r0 + r1
            r15.<init>((int) r0)     // Catch:{ Exception -> 0x0041 }
            r14 = 11
            r15.writeInt32(r14)     // Catch:{ Exception -> 0x003c }
            r15.writeInt32(r10)     // Catch:{ Exception -> 0x003c }
            r15.writeInt32(r11)     // Catch:{ Exception -> 0x003c }
            r15.writeInt32(r13)     // Catch:{ Exception -> 0x003c }
            if (r11 == 0) goto L_0x0046
            r12.serializeToStream(r15)     // Catch:{ Exception -> 0x003c }
            goto L_0x0046
        L_0x003c:
            r14 = move-exception
            r8 = r15
            r15 = r14
            r14 = r8
            goto L_0x0042
        L_0x0041:
            r15 = move-exception
        L_0x0042:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r15)
            r15 = r14
        L_0x0046:
            org.telegram.messenger.MessagesStorage r14 = r9.getMessagesStorage()
            long r14 = r14.createPendingTask(r15)
        L_0x004e:
            org.telegram.tgnet.ConnectionsManager r0 = r9.getConnectionsManager()
            int r5 = r0.getCurrentTime()
            org.telegram.messenger.MessagesStorage r1 = r9.getMessagesStorage()
            r7 = 0
            r2 = r10
            r3 = r11
            r4 = r5
            r6 = r13
            r1.createTaskForMid(r2, r3, r4, r5, r6, r7)
            if (r11 == 0) goto L_0x0081
            org.telegram.tgnet.TLRPC$TL_channels_readMessageContents r11 = new org.telegram.tgnet.TLRPC$TL_channels_readMessageContents
            r11.<init>()
            r11.channel = r12
            java.util.ArrayList<java.lang.Integer> r12 = r11.id
            java.lang.Integer r10 = java.lang.Integer.valueOf(r10)
            r12.add(r10)
            org.telegram.tgnet.ConnectionsManager r10 = r9.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$AKASK8EzGTLud_OS2hpZ10nHjsI r12 = new org.telegram.messenger.-$$Lambda$MessagesController$AKASK8EzGTLud_OS2hpZ10nHjsI
            r12.<init>(r14)
            r10.sendRequest(r11, r12)
            goto L_0x009b
        L_0x0081:
            org.telegram.tgnet.TLRPC$TL_messages_readMessageContents r11 = new org.telegram.tgnet.TLRPC$TL_messages_readMessageContents
            r11.<init>()
            java.util.ArrayList<java.lang.Integer> r12 = r11.id
            java.lang.Integer r10 = java.lang.Integer.valueOf(r10)
            r12.add(r10)
            org.telegram.tgnet.ConnectionsManager r10 = r9.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$Pi-qTBd6v2I2XS-YnICqfnIbNMs r12 = new org.telegram.messenger.-$$Lambda$MessagesController$Pi-qTBd6v2I2XS-YnICqfnIbNMs
            r12.<init>(r14)
            r10.sendRequest(r11, r12)
        L_0x009b:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.markMessageAsRead(int, int, org.telegram.tgnet.TLRPC$InputChannel, int, long):void");
    }

    public /* synthetic */ void lambda$markMessageAsRead$170$MessagesController(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public /* synthetic */ void lambda$markMessageAsRead$171$MessagesController(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            TLRPC$TL_messages_affectedMessages tLRPC$TL_messages_affectedMessages = (TLRPC$TL_messages_affectedMessages) tLObject;
            processNewDifferenceParams(-1, tLRPC$TL_messages_affectedMessages.pts, -1, tLRPC$TL_messages_affectedMessages.pts_count);
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public void markMessageAsRead(long j, long j2, int i) {
        TLRPC$EncryptedChat encryptedChat;
        if (j2 != 0 && j != 0) {
            if (i > 0 || i == Integer.MIN_VALUE) {
                int i2 = (int) (j >> 32);
                if (((int) j) == 0 && (encryptedChat = getEncryptedChat(Integer.valueOf(i2))) != null) {
                    ArrayList arrayList = new ArrayList();
                    arrayList.add(Long.valueOf(j2));
                    getSecretChatHelper().sendMessagesReadMessage(encryptedChat, arrayList, (TLRPC$Message) null);
                    if (i > 0) {
                        int currentTime = getConnectionsManager().getCurrentTime();
                        getMessagesStorage().createTaskForSecretChat(encryptedChat.id, currentTime, currentTime, 0, arrayList);
                    }
                }
            }
        }
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v6, resolved type: org.telegram.tgnet.TLRPC$TL_messages_readHistory} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v7, resolved type: org.telegram.tgnet.TLRPC$TL_messages_readHistory} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v8, resolved type: org.telegram.tgnet.TLRPC$TL_channels_readHistory} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v9, resolved type: org.telegram.tgnet.TLRPC$TL_messages_readHistory} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void completeReadTask(org.telegram.messenger.MessagesController.ReadTask r6) {
        /*
            r5 = this;
            long r0 = r6.dialogId
            int r2 = (int) r0
            r3 = 32
            long r0 = r0 >> r3
            int r1 = (int) r0
            if (r2 == 0) goto L_0x003b
            org.telegram.tgnet.TLRPC$InputPeer r0 = r5.getInputPeer(r2)
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_inputPeerChannel
            if (r1 == 0) goto L_0x0022
            org.telegram.tgnet.TLRPC$TL_channels_readHistory r0 = new org.telegram.tgnet.TLRPC$TL_channels_readHistory
            r0.<init>()
            int r1 = -r2
            org.telegram.tgnet.TLRPC$InputChannel r1 = r5.getInputChannel((int) r1)
            r0.channel = r1
            int r6 = r6.maxId
            r0.max_id = r6
            goto L_0x002e
        L_0x0022:
            org.telegram.tgnet.TLRPC$TL_messages_readHistory r1 = new org.telegram.tgnet.TLRPC$TL_messages_readHistory
            r1.<init>()
            r1.peer = r0
            int r6 = r6.maxId
            r1.max_id = r6
            r0 = r1
        L_0x002e:
            org.telegram.tgnet.ConnectionsManager r6 = r5.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$4G3piKzp-UMpMoekpz-O8ta89Zk r1 = new org.telegram.messenger.-$$Lambda$MessagesController$4G3piKzp-UMpMoekpz-O8ta89Zk
            r1.<init>()
            r6.sendRequest(r0, r1)
            goto L_0x0070
        L_0x003b:
            java.lang.Integer r0 = java.lang.Integer.valueOf(r1)
            org.telegram.tgnet.TLRPC$EncryptedChat r0 = r5.getEncryptedChat(r0)
            byte[] r1 = r0.auth_key
            if (r1 == 0) goto L_0x0070
            int r1 = r1.length
            r2 = 1
            if (r1 <= r2) goto L_0x0070
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_encryptedChat
            if (r1 == 0) goto L_0x0070
            org.telegram.tgnet.TLRPC$TL_messages_readEncryptedHistory r1 = new org.telegram.tgnet.TLRPC$TL_messages_readEncryptedHistory
            r1.<init>()
            org.telegram.tgnet.TLRPC$TL_inputEncryptedChat r2 = new org.telegram.tgnet.TLRPC$TL_inputEncryptedChat
            r2.<init>()
            r1.peer = r2
            int r3 = r0.id
            r2.chat_id = r3
            long r3 = r0.access_hash
            r2.access_hash = r3
            int r6 = r6.maxDate
            r1.max_date = r6
            org.telegram.tgnet.ConnectionsManager r6 = r5.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$aVMubyVamg8vr7xzbK78pD5FAQU r0 = org.telegram.messenger.$$Lambda$MessagesController$aVMubyVamg8vr7xzbK78pD5FAQU.INSTANCE
            r6.sendRequest(r1, r0)
        L_0x0070:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.completeReadTask(org.telegram.messenger.MessagesController$ReadTask):void");
    }

    public /* synthetic */ void lambda$completeReadTask$172$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null && (tLObject instanceof TLRPC$TL_messages_affectedMessages)) {
            TLRPC$TL_messages_affectedMessages tLRPC$TL_messages_affectedMessages = (TLRPC$TL_messages_affectedMessages) tLObject;
            processNewDifferenceParams(-1, tLRPC$TL_messages_affectedMessages.pts, -1, tLRPC$TL_messages_affectedMessages.pts_count);
        }
    }

    private void checkReadTasks() {
        long elapsedRealtime = SystemClock.elapsedRealtime();
        int size = this.readTasks.size();
        int i = 0;
        while (i < size) {
            ReadTask readTask = this.readTasks.get(i);
            if (readTask.sendRequestTime <= elapsedRealtime) {
                completeReadTask(readTask);
                this.readTasks.remove(i);
                this.readTasksMap.remove(readTask.dialogId);
                i--;
                size--;
            }
            i++;
        }
    }

    public void markDialogAsReadNow(long j) {
        Utilities.stageQueue.postRunnable(new Runnable(j) {
            private final /* synthetic */ long f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$markDialogAsReadNow$174$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$markDialogAsReadNow$174$MessagesController(long j) {
        ReadTask readTask = this.readTasksMap.get(j);
        if (readTask != null) {
            completeReadTask(readTask);
            this.readTasks.remove(readTask);
            this.readTasksMap.remove(j);
        }
    }

    public void markMentionsAsRead(long j) {
        int i = (int) j;
        if (i != 0) {
            getMessagesStorage().resetMentionsCount(j, 0);
            TLRPC$TL_messages_readMentions tLRPC$TL_messages_readMentions = new TLRPC$TL_messages_readMentions();
            tLRPC$TL_messages_readMentions.peer = getInputPeer(i);
            getConnectionsManager().sendRequest(tLRPC$TL_messages_readMentions, $$Lambda$MessagesController$SFe6uWIlGNaquWk7drX_0ZXtR_0.INSTANCE);
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:12:0x004e  */
    /* JADX WARNING: Removed duplicated region for block: B:15:0x0095  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void markDialogAsRead(long r21, int r23, int r24, int r25, boolean r26, int r27, boolean r28, int r29) {
        /*
            r20 = this;
            r8 = r20
            r6 = r21
            r5 = r23
            r4 = r24
            r2 = r25
            int r0 = (int) r6
            r1 = 32
            long r9 = r6 >> r1
            int r3 = (int) r9
            org.telegram.messenger.NotificationsController r9 = r20.getNotificationsController()
            boolean r9 = r9.showBadgeMessages
            r18 = 1
            if (r0 == 0) goto L_0x0099
            if (r5 != 0) goto L_0x001d
            return
        L_0x001d:
            long r9 = (long) r5
            long r3 = (long) r4
            r19 = 0
            if (r0 >= 0) goto L_0x003c
            int r0 = -r0
            java.lang.Integer r11 = java.lang.Integer.valueOf(r0)
            org.telegram.tgnet.TLRPC$Chat r11 = r8.getChat(r11)
            boolean r11 = org.telegram.messenger.ChatObject.isChannel(r11)
            if (r11 == 0) goto L_0x003c
            long r11 = (long) r0
            long r0 = r11 << r1
            long r9 = r9 | r0
            long r0 = r0 | r3
            r14 = r0
            r12 = r9
            r16 = 1
            goto L_0x0040
        L_0x003c:
            r14 = r3
            r12 = r9
            r16 = 0
        L_0x0040:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r0 = r8.dialogs_read_inbox_max
            java.lang.Long r1 = java.lang.Long.valueOf(r21)
            java.lang.Object r0 = r0.get(r1)
            java.lang.Integer r0 = (java.lang.Integer) r0
            if (r0 != 0) goto L_0x0052
            java.lang.Integer r0 = java.lang.Integer.valueOf(r19)
        L_0x0052:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r8.dialogs_read_inbox_max
            java.lang.Long r3 = java.lang.Long.valueOf(r21)
            int r0 = r0.intValue()
            int r0 = java.lang.Math.max(r0, r5)
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)
            r1.put(r3, r0)
            org.telegram.messenger.MessagesStorage r9 = r20.getMessagesStorage()
            r10 = r21
            r17 = r29
            r9.processPendingRead(r10, r12, r14, r16, r17)
            org.telegram.messenger.MessagesStorage r0 = r20.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r9 = r0.getStorageQueue()
            org.telegram.messenger.-$$Lambda$MessagesController$gN9mOiLQv4Osg84X5TcXeDddCZ0 r10 = new org.telegram.messenger.-$$Lambda$MessagesController$gN9mOiLQv4Osg84X5TcXeDddCZ0
            r0 = r10
            r1 = r20
            r14 = r2
            r2 = r21
            r4 = r27
            r15 = r5
            r5 = r23
            r6 = r26
            r0.<init>(r2, r4, r5, r6)
            r9.postRunnable(r10)
            r0 = 2147483647(0x7fffffff, float:NaN)
            if (r15 == r0) goto L_0x0095
            goto L_0x0097
        L_0x0095:
            r18 = 0
        L_0x0097:
            r11 = r14
            goto L_0x00f5
        L_0x0099:
            r14 = r2
            r15 = r5
            if (r14 != 0) goto L_0x009e
            return
        L_0x009e:
            java.lang.Integer r0 = java.lang.Integer.valueOf(r3)
            org.telegram.tgnet.TLRPC$EncryptedChat r7 = r8.getEncryptedChat(r0)
            org.telegram.messenger.MessagesStorage r9 = r20.getMessagesStorage()
            long r12 = (long) r15
            long r0 = (long) r4
            r16 = 0
            r10 = r21
            r6 = r14
            r14 = r0
            r17 = r29
            r9.processPendingRead(r10, r12, r14, r16, r17)
            org.telegram.messenger.MessagesStorage r0 = r20.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r9 = r0.getStorageQueue()
            org.telegram.messenger.-$$Lambda$MessagesController$OQlgO2xYDVu_k1kMd9Z0bskjwOQ r10 = new org.telegram.messenger.-$$Lambda$MessagesController$OQlgO2xYDVu_k1kMd9Z0bskjwOQ
            r0 = r10
            r1 = r20
            r2 = r21
            r4 = r25
            r5 = r26
            r11 = r6
            r6 = r27
            r12 = r7
            r7 = r24
            r0.<init>(r2, r4, r5, r6, r7)
            r9.postRunnable(r10)
            if (r12 == 0) goto L_0x00f5
            int r0 = r12.ttl
            if (r0 <= 0) goto L_0x00f5
            org.telegram.tgnet.ConnectionsManager r0 = r20.getConnectionsManager()
            int r0 = r0.getCurrentTime()
            int r3 = java.lang.Math.max(r0, r11)
            org.telegram.messenger.MessagesStorage r0 = r20.getMessagesStorage()
            int r1 = r12.id
            r4 = 0
            r5 = 0
            r2 = r25
            r0.createTaskForSecretChat(r1, r2, r3, r4, r5)
        L_0x00f5:
            if (r18 == 0) goto L_0x010c
            org.telegram.messenger.DispatchQueue r7 = org.telegram.messenger.Utilities.stageQueue
            org.telegram.messenger.-$$Lambda$MessagesController$UIySoYNo-vTwNlRhtB4KKr9Ut0U r9 = new org.telegram.messenger.-$$Lambda$MessagesController$UIySoYNo-vTwNlRhtB4KKr9Ut0U
            r0 = r9
            r1 = r20
            r2 = r21
            r4 = r28
            r5 = r25
            r6 = r23
            r0.<init>(r2, r4, r5, r6)
            r7.postRunnable(r9)
        L_0x010c:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.markDialogAsRead(long, int, int, int, boolean, int, boolean, int):void");
    }

    public /* synthetic */ void lambda$markDialogAsRead$177$MessagesController(long j, int i, int i2, boolean z) {
        AndroidUtilities.runOnUIThread(new Runnable(j, i, i2, z) {
            private final /* synthetic */ long f$1;
            private final /* synthetic */ int f$2;
            private final /* synthetic */ int f$3;
            private final /* synthetic */ boolean f$4;

            {
                this.f$1 = r2;
                this.f$2 = r4;
                this.f$3 = r5;
                this.f$4 = r6;
            }

            public final void run() {
                MessagesController.this.lambda$null$176$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4);
            }
        });
    }

    public /* synthetic */ void lambda$null$176$MessagesController(long j, int i, int i2, boolean z) {
        long j2 = j;
        int i3 = i2;
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j2);
        if (tLRPC$Dialog != null) {
            int i4 = tLRPC$Dialog.unread_count;
            if (i == 0 || i3 >= tLRPC$Dialog.top_message) {
                tLRPC$Dialog.unread_count = 0;
            } else {
                int max = Math.max(i4 - i, 0);
                tLRPC$Dialog.unread_count = max;
                if (i3 != Integer.MIN_VALUE) {
                    int i5 = tLRPC$Dialog.top_message;
                    if (max > i5 - i3) {
                        tLRPC$Dialog.unread_count = i5 - i3;
                    }
                }
            }
            boolean z2 = tLRPC$Dialog.unread_mark;
            if (z2) {
                tLRPC$Dialog.unread_mark = false;
                getMessagesStorage().setDialogUnread(tLRPC$Dialog.id, false);
            }
            if ((i4 != 0 || z2) && tLRPC$Dialog.unread_count == 0) {
                if (!isDialogMuted(j)) {
                    this.unreadUnmutedDialogs--;
                }
                int i6 = 0;
                while (true) {
                    DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                    if (i6 < dialogFilterArr.length) {
                        if (dialogFilterArr[i6] != null && (dialogFilterArr[i6].flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                            sortDialogs((SparseArray<TLRPC$Chat>) null);
                            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                            break;
                        }
                        i6++;
                    } else {
                        break;
                    }
                }
            }
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 256);
        }
        if (!z) {
            getNotificationsController().processReadMessages((SparseLongArray) null, j, 0, i2, false);
            LongSparseArray longSparseArray = new LongSparseArray(1);
            longSparseArray.put(j2, 0);
            getNotificationsController().processDialogsUpdateRead(longSparseArray);
            return;
        }
        getNotificationsController().processReadMessages((SparseLongArray) null, j, 0, i2, true);
        LongSparseArray longSparseArray2 = new LongSparseArray(1);
        longSparseArray2.put(j2, -1);
        getNotificationsController().processDialogsUpdateRead(longSparseArray2);
    }

    public /* synthetic */ void lambda$markDialogAsRead$179$MessagesController(long j, int i, boolean z, int i2, int i3) {
        AndroidUtilities.runOnUIThread(new Runnable(j, i, z, i2, i3) {
            private final /* synthetic */ long f$1;
            private final /* synthetic */ int f$2;
            private final /* synthetic */ boolean f$3;
            private final /* synthetic */ int f$4;
            private final /* synthetic */ int f$5;

            {
                this.f$1 = r2;
                this.f$2 = r4;
                this.f$3 = r5;
                this.f$4 = r6;
                this.f$5 = r7;
            }

            public final void run() {
                MessagesController.this.lambda$null$178$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5);
            }
        });
    }

    public /* synthetic */ void lambda$null$178$MessagesController(long j, int i, boolean z, int i2, int i3) {
        getNotificationsController().processReadMessages((SparseLongArray) null, j, i, 0, z);
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
        if (tLRPC$Dialog != null) {
            int i4 = tLRPC$Dialog.unread_count;
            if (i2 == 0 || i3 <= tLRPC$Dialog.top_message) {
                tLRPC$Dialog.unread_count = 0;
            } else {
                int max = Math.max(i4 - i2, 0);
                tLRPC$Dialog.unread_count = max;
                if (i3 != Integer.MAX_VALUE) {
                    int i5 = tLRPC$Dialog.top_message;
                    if (max > i3 - i5) {
                        tLRPC$Dialog.unread_count = i3 - i5;
                    }
                }
            }
            boolean z2 = tLRPC$Dialog.unread_mark;
            if (z2) {
                tLRPC$Dialog.unread_mark = false;
                getMessagesStorage().setDialogUnread(tLRPC$Dialog.id, false);
            }
            if ((i4 != 0 || z2) && tLRPC$Dialog.unread_count == 0) {
                if (!isDialogMuted(j)) {
                    this.unreadUnmutedDialogs--;
                }
                int i6 = 0;
                while (true) {
                    DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                    if (i6 < dialogFilterArr.length) {
                        if (dialogFilterArr[i6] != null && (dialogFilterArr[i6].flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                            sortDialogs((SparseArray<TLRPC$Chat>) null);
                            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                            break;
                        }
                        i6++;
                    } else {
                        break;
                    }
                }
            }
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 256);
        }
        LongSparseArray longSparseArray = new LongSparseArray(1);
        longSparseArray.put(j, 0);
        getNotificationsController().processDialogsUpdateRead(longSparseArray);
    }

    public /* synthetic */ void lambda$markDialogAsRead$180$MessagesController(long j, boolean z, int i, int i2) {
        ReadTask readTask = this.readTasksMap.get(j);
        if (readTask == null) {
            readTask = new ReadTask();
            readTask.dialogId = j;
            readTask.sendRequestTime = SystemClock.elapsedRealtime() + 5000;
            if (!z) {
                this.readTasksMap.put(j, readTask);
                this.readTasks.add(readTask);
            }
        }
        readTask.maxDate = i;
        readTask.maxId = i2;
        if (z) {
            completeReadTask(readTask);
        }
    }

    public int createChat(String str, ArrayList<Integer> arrayList, String str2, int i, Location location, String str3, BaseFragment baseFragment) {
        if (i == 0) {
            TLRPC$TL_messages_createChat tLRPC$TL_messages_createChat = new TLRPC$TL_messages_createChat();
            tLRPC$TL_messages_createChat.title = str;
            for (int i2 = 0; i2 < arrayList.size(); i2++) {
                TLRPC$User user = getUser(arrayList.get(i2));
                if (user != null) {
                    tLRPC$TL_messages_createChat.users.add(getInputUser(user));
                }
            }
            return getConnectionsManager().sendRequest(tLRPC$TL_messages_createChat, new RequestDelegate(baseFragment, tLRPC$TL_messages_createChat) {
                private final /* synthetic */ BaseFragment f$1;
                private final /* synthetic */ TLRPC$TL_messages_createChat f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$createChat$183$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                }
            }, 2);
        } else if (i != 2 && i != 4) {
            return 0;
        } else {
            TLRPC$TL_channels_createChannel tLRPC$TL_channels_createChannel = new TLRPC$TL_channels_createChannel();
            tLRPC$TL_channels_createChannel.title = str;
            if (str2 == null) {
                str2 = "";
            }
            tLRPC$TL_channels_createChannel.about = str2;
            if (i == 4) {
                tLRPC$TL_channels_createChannel.megagroup = true;
            } else {
                tLRPC$TL_channels_createChannel.broadcast = true;
            }
            if (location != null) {
                TLRPC$TL_inputGeoPoint tLRPC$TL_inputGeoPoint = new TLRPC$TL_inputGeoPoint();
                tLRPC$TL_channels_createChannel.geo_point = tLRPC$TL_inputGeoPoint;
                tLRPC$TL_inputGeoPoint.lat = location.getLatitude();
                tLRPC$TL_channels_createChannel.geo_point._long = location.getLongitude();
                tLRPC$TL_channels_createChannel.address = str3;
                tLRPC$TL_channels_createChannel.flags |= 4;
            }
            return getConnectionsManager().sendRequest(tLRPC$TL_channels_createChannel, new RequestDelegate(baseFragment, tLRPC$TL_channels_createChannel) {
                private final /* synthetic */ BaseFragment f$1;
                private final /* synthetic */ TLRPC$TL_channels_createChannel f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$createChat$186$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                }
            }, 2);
        }
    }

    public /* synthetic */ void lambda$createChat$183$MessagesController(BaseFragment baseFragment, TLRPC$TL_messages_createChat tLRPC$TL_messages_createChat, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null) {
            AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_error, baseFragment, tLRPC$TL_messages_createChat) {
                private final /* synthetic */ TLRPC$TL_error f$1;
                private final /* synthetic */ BaseFragment f$2;
                private final /* synthetic */ TLRPC$TL_messages_createChat f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run() {
                    MessagesController.this.lambda$null$181$MessagesController(this.f$1, this.f$2, this.f$3);
                }
            });
            return;
        }
        TLRPC$Updates tLRPC$Updates = (TLRPC$Updates) tLObject;
        processUpdates(tLRPC$Updates, false);
        AndroidUtilities.runOnUIThread(new Runnable(tLRPC$Updates) {
            private final /* synthetic */ TLRPC$Updates f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$182$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$null$181$MessagesController(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_messages_createChat tLRPC$TL_messages_createChat) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_messages_createChat, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.chatDidFailCreate, new Object[0]);
    }

    public /* synthetic */ void lambda$null$182$MessagesController(TLRPC$Updates tLRPC$Updates) {
        putUsers(tLRPC$Updates.users, false);
        putChats(tLRPC$Updates.chats, false);
        ArrayList<TLRPC$Chat> arrayList = tLRPC$Updates.chats;
        if (arrayList == null || arrayList.isEmpty()) {
            getNotificationCenter().postNotificationName(NotificationCenter.chatDidFailCreate, new Object[0]);
            return;
        }
        getNotificationCenter().postNotificationName(NotificationCenter.chatDidCreated, Integer.valueOf(tLRPC$Updates.chats.get(0).id));
    }

    public /* synthetic */ void lambda$createChat$186$MessagesController(BaseFragment baseFragment, TLRPC$TL_channels_createChannel tLRPC$TL_channels_createChannel, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null) {
            AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_error, baseFragment, tLRPC$TL_channels_createChannel) {
                private final /* synthetic */ TLRPC$TL_error f$1;
                private final /* synthetic */ BaseFragment f$2;
                private final /* synthetic */ TLRPC$TL_channels_createChannel f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run() {
                    MessagesController.this.lambda$null$184$MessagesController(this.f$1, this.f$2, this.f$3);
                }
            });
            return;
        }
        TLRPC$Updates tLRPC$Updates = (TLRPC$Updates) tLObject;
        processUpdates(tLRPC$Updates, false);
        AndroidUtilities.runOnUIThread(new Runnable(tLRPC$Updates) {
            private final /* synthetic */ TLRPC$Updates f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$185$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$null$184$MessagesController(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_channels_createChannel tLRPC$TL_channels_createChannel) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_channels_createChannel, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.chatDidFailCreate, new Object[0]);
    }

    public /* synthetic */ void lambda$null$185$MessagesController(TLRPC$Updates tLRPC$Updates) {
        putUsers(tLRPC$Updates.users, false);
        putChats(tLRPC$Updates.chats, false);
        ArrayList<TLRPC$Chat> arrayList = tLRPC$Updates.chats;
        if (arrayList == null || arrayList.isEmpty()) {
            getNotificationCenter().postNotificationName(NotificationCenter.chatDidFailCreate, new Object[0]);
            return;
        }
        getNotificationCenter().postNotificationName(NotificationCenter.chatDidCreated, Integer.valueOf(tLRPC$Updates.chats.get(0).id));
    }

    public void convertToMegaGroup(Context context, int i, BaseFragment baseFragment, MessagesStorage.IntCallback intCallback) {
        TLRPC$TL_messages_migrateChat tLRPC$TL_messages_migrateChat = new TLRPC$TL_messages_migrateChat();
        tLRPC$TL_messages_migrateChat.chat_id = i;
        AlertDialog alertDialog = new AlertDialog(context, 3);
        alertDialog.setOnCancelListener(new DialogInterface.OnCancelListener(getConnectionsManager().sendRequest(tLRPC$TL_messages_migrateChat, new RequestDelegate(context, alertDialog, intCallback, baseFragment, tLRPC$TL_messages_migrateChat) {
            private final /* synthetic */ Context f$1;
            private final /* synthetic */ AlertDialog f$2;
            private final /* synthetic */ MessagesStorage.IntCallback f$3;
            private final /* synthetic */ BaseFragment f$4;
            private final /* synthetic */ TLRPC$TL_messages_migrateChat f$5;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
            }

            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$convertToMegaGroup$190$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, tLObject, tLRPC$TL_error);
            }
        })) {
            private final /* synthetic */ int f$1;

            {
                this.f$1 = r2;
            }

            public final void onCancel(DialogInterface dialogInterface) {
                MessagesController.this.lambda$convertToMegaGroup$191$MessagesController(this.f$1, dialogInterface);
            }
        });
        try {
            alertDialog.show();
        } catch (Exception unused) {
        }
    }

    public /* synthetic */ void lambda$convertToMegaGroup$190$MessagesController(Context context, AlertDialog alertDialog, MessagesStorage.IntCallback intCallback, BaseFragment baseFragment, TLRPC$TL_messages_migrateChat tLRPC$TL_messages_migrateChat, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            AndroidUtilities.runOnUIThread(new Runnable(context, alertDialog) {
                private final /* synthetic */ Context f$0;
                private final /* synthetic */ AlertDialog f$1;

                {
                    this.f$0 = r1;
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.lambda$null$187(this.f$0, this.f$1);
                }
            });
            TLRPC$Updates tLRPC$Updates = (TLRPC$Updates) tLObject;
            processUpdates(tLRPC$Updates, false);
            AndroidUtilities.runOnUIThread(new Runnable(tLRPC$Updates) {
                private final /* synthetic */ TLRPC$Updates f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.lambda$null$188(MessagesStorage.IntCallback.this, this.f$1);
                }
            });
            return;
        }
        AndroidUtilities.runOnUIThread(new Runnable(intCallback, context, alertDialog, tLRPC$TL_error, baseFragment, tLRPC$TL_messages_migrateChat) {
            private final /* synthetic */ MessagesStorage.IntCallback f$1;
            private final /* synthetic */ Context f$2;
            private final /* synthetic */ AlertDialog f$3;
            private final /* synthetic */ TLRPC$TL_error f$4;
            private final /* synthetic */ BaseFragment f$5;
            private final /* synthetic */ TLRPC$TL_messages_migrateChat f$6;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
            }

            public final void run() {
                MessagesController.this.lambda$null$189$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
            }
        });
    }

    static /* synthetic */ void lambda$null$187(Context context, AlertDialog alertDialog) {
        if (!((Activity) context).isFinishing()) {
            try {
                alertDialog.dismiss();
            } catch (Exception e) {
                FileLog.e((Throwable) e);
            }
        }
    }

    static /* synthetic */ void lambda$null$188(MessagesStorage.IntCallback intCallback, TLRPC$Updates tLRPC$Updates) {
        if (intCallback != null) {
            for (int i = 0; i < tLRPC$Updates.chats.size(); i++) {
                TLRPC$Chat tLRPC$Chat = tLRPC$Updates.chats.get(i);
                if (ChatObject.isChannel(tLRPC$Chat)) {
                    intCallback.run(tLRPC$Chat.id);
                    return;
                }
            }
        }
    }

    public /* synthetic */ void lambda$null$189$MessagesController(MessagesStorage.IntCallback intCallback, Context context, AlertDialog alertDialog, TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_messages_migrateChat tLRPC$TL_messages_migrateChat) {
        if (intCallback != null) {
            intCallback.run(0);
        }
        if (!((Activity) context).isFinishing()) {
            try {
                alertDialog.dismiss();
            } catch (Exception e) {
                FileLog.e((Throwable) e);
            }
            AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_messages_migrateChat, false);
        }
    }

    public /* synthetic */ void lambda$convertToMegaGroup$191$MessagesController(int i, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
    }

    public void addUsersToChannel(int i, ArrayList<TLRPC$InputUser> arrayList, BaseFragment baseFragment) {
        if (arrayList != null && !arrayList.isEmpty()) {
            TLRPC$TL_channels_inviteToChannel tLRPC$TL_channels_inviteToChannel = new TLRPC$TL_channels_inviteToChannel();
            tLRPC$TL_channels_inviteToChannel.channel = getInputChannel(i);
            tLRPC$TL_channels_inviteToChannel.users = arrayList;
            getConnectionsManager().sendRequest(tLRPC$TL_channels_inviteToChannel, new RequestDelegate(baseFragment, tLRPC$TL_channels_inviteToChannel) {
                private final /* synthetic */ BaseFragment f$1;
                private final /* synthetic */ TLRPC$TL_channels_inviteToChannel f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$addUsersToChannel$193$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$addUsersToChannel$193$MessagesController(BaseFragment baseFragment, TLRPC$TL_channels_inviteToChannel tLRPC$TL_channels_inviteToChannel, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error != null) {
            AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_error, baseFragment, tLRPC$TL_channels_inviteToChannel) {
                private final /* synthetic */ TLRPC$TL_error f$1;
                private final /* synthetic */ BaseFragment f$2;
                private final /* synthetic */ TLRPC$TL_channels_inviteToChannel f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run() {
                    MessagesController.this.lambda$null$192$MessagesController(this.f$1, this.f$2, this.f$3);
                }
            });
        } else {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
    }

    public /* synthetic */ void lambda$null$192$MessagesController(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLRPC$TL_channels_inviteToChannel tLRPC$TL_channels_inviteToChannel) {
        AlertsCreator.processError(this.currentAccount, tLRPC$TL_error, baseFragment, tLRPC$TL_channels_inviteToChannel, true);
    }

    public void toogleChannelSignatures(int i, boolean z) {
        TLRPC$TL_channels_toggleSignatures tLRPC$TL_channels_toggleSignatures = new TLRPC$TL_channels_toggleSignatures();
        tLRPC$TL_channels_toggleSignatures.channel = getInputChannel(i);
        tLRPC$TL_channels_toggleSignatures.enabled = z;
        getConnectionsManager().sendRequest(tLRPC$TL_channels_toggleSignatures, new RequestDelegate() {
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$toogleChannelSignatures$195$MessagesController(tLObject, tLRPC$TL_error);
            }
        }, 64);
    }

    public /* synthetic */ void lambda$toogleChannelSignatures$195$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() {
                public final void run() {
                    MessagesController.this.lambda$null$194$MessagesController();
                }
            });
        }
    }

    public /* synthetic */ void lambda$null$194$MessagesController() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 8192);
    }

    public void toogleChannelInvitesHistory(int i, boolean z) {
        TLRPC$TL_channels_togglePreHistoryHidden tLRPC$TL_channels_togglePreHistoryHidden = new TLRPC$TL_channels_togglePreHistoryHidden();
        tLRPC$TL_channels_togglePreHistoryHidden.channel = getInputChannel(i);
        tLRPC$TL_channels_togglePreHistoryHidden.enabled = z;
        getConnectionsManager().sendRequest(tLRPC$TL_channels_togglePreHistoryHidden, new RequestDelegate() {
            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$toogleChannelInvitesHistory$197$MessagesController(tLObject, tLRPC$TL_error);
            }
        }, 64);
    }

    public /* synthetic */ void lambda$toogleChannelInvitesHistory$197$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            AndroidUtilities.runOnUIThread(new Runnable() {
                public final void run() {
                    MessagesController.this.lambda$null$196$MessagesController();
                }
            });
        }
    }

    public /* synthetic */ void lambda$null$196$MessagesController() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 8192);
    }

    public void updateChatAbout(int i, String str, TLRPC$ChatFull tLRPC$ChatFull) {
        if (tLRPC$ChatFull != null) {
            TLRPC$TL_messages_editChatAbout tLRPC$TL_messages_editChatAbout = new TLRPC$TL_messages_editChatAbout();
            tLRPC$TL_messages_editChatAbout.peer = getInputPeer(-i);
            tLRPC$TL_messages_editChatAbout.about = str;
            getConnectionsManager().sendRequest(tLRPC$TL_messages_editChatAbout, new RequestDelegate(tLRPC$ChatFull, str) {
                private final /* synthetic */ TLRPC$ChatFull f$1;
                private final /* synthetic */ String f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$updateChatAbout$199$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                }
            }, 64);
        }
    }

    public /* synthetic */ void lambda$updateChatAbout$199$MessagesController(TLRPC$ChatFull tLRPC$ChatFull, String str, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject instanceof TLRPC$TL_boolTrue) {
            AndroidUtilities.runOnUIThread(new Runnable(tLRPC$ChatFull, str) {
                private final /* synthetic */ TLRPC$ChatFull f$1;
                private final /* synthetic */ String f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    MessagesController.this.lambda$null$198$MessagesController(this.f$1, this.f$2);
                }
            });
        }
    }

    public /* synthetic */ void lambda$null$198$MessagesController(TLRPC$ChatFull tLRPC$ChatFull, String str) {
        tLRPC$ChatFull.about = str;
        getMessagesStorage().updateChatInfo(tLRPC$ChatFull, false);
        getNotificationCenter().postNotificationName(NotificationCenter.chatInfoDidLoad, tLRPC$ChatFull, 0, false, null);
    }

    public void updateChannelUserName(int i, String str) {
        TLRPC$TL_channels_updateUsername tLRPC$TL_channels_updateUsername = new TLRPC$TL_channels_updateUsername();
        tLRPC$TL_channels_updateUsername.channel = getInputChannel(i);
        tLRPC$TL_channels_updateUsername.username = str;
        getConnectionsManager().sendRequest(tLRPC$TL_channels_updateUsername, new RequestDelegate(i, str) {
            private final /* synthetic */ int f$1;
            private final /* synthetic */ String f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$updateChannelUserName$201$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
            }
        }, 64);
    }

    public /* synthetic */ void lambda$updateChannelUserName$201$MessagesController(int i, String str, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject instanceof TLRPC$TL_boolTrue) {
            AndroidUtilities.runOnUIThread(new Runnable(i, str) {
                private final /* synthetic */ int f$1;
                private final /* synthetic */ String f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    MessagesController.this.lambda$null$200$MessagesController(this.f$1, this.f$2);
                }
            });
        }
    }

    public /* synthetic */ void lambda$null$200$MessagesController(int i, String str) {
        TLRPC$Chat chat = getChat(Integer.valueOf(i));
        if (str.length() != 0) {
            chat.flags |= 64;
        } else {
            chat.flags &= -65;
        }
        chat.username = str;
        ArrayList arrayList = new ArrayList();
        arrayList.add(chat);
        getMessagesStorage().putUsersAndChats((ArrayList<TLRPC$User>) null, arrayList, true, true);
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 8192);
    }

    public void sendBotStart(TLRPC$User tLRPC$User, String str) {
        if (tLRPC$User != null) {
            TLRPC$TL_messages_startBot tLRPC$TL_messages_startBot = new TLRPC$TL_messages_startBot();
            tLRPC$TL_messages_startBot.bot = getInputUser(tLRPC$User);
            tLRPC$TL_messages_startBot.peer = getInputPeer(tLRPC$User.id);
            tLRPC$TL_messages_startBot.start_param = str;
            tLRPC$TL_messages_startBot.random_id = Utilities.random.nextLong();
            getConnectionsManager().sendRequest(tLRPC$TL_messages_startBot, new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$sendBotStart$202$MessagesController(tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$sendBotStart$202$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
    }

    public boolean isJoiningChannel(int i) {
        return this.joiningToChannels.contains(Integer.valueOf(i));
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v11, resolved type: org.telegram.tgnet.TLRPC$TL_messages_addChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v15, resolved type: org.telegram.tgnet.TLRPC$TL_channels_inviteToChannel} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v18, resolved type: org.telegram.tgnet.TLRPC$TL_channels_joinChannel} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v19, resolved type: org.telegram.tgnet.TLRPC$TL_messages_startBot} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v20, resolved type: org.telegram.tgnet.TLRPC$TL_messages_addChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v21, resolved type: org.telegram.tgnet.TLRPC$TL_messages_addChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v22, resolved type: org.telegram.tgnet.TLRPC$TL_messages_addChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v23, resolved type: org.telegram.tgnet.TLRPC$TL_messages_addChatUser} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void addUserToChat(int r14, org.telegram.tgnet.TLRPC$User r15, org.telegram.tgnet.TLRPC$ChatFull r16, int r17, java.lang.String r18, org.telegram.ui.ActionBar.BaseFragment r19, java.lang.Runnable r20) {
        /*
            r13 = this;
            r9 = r13
            r4 = r14
            r0 = r15
            r1 = r16
            r2 = r18
            if (r0 != 0) goto L_0x000a
            return
        L_0x000a:
            r3 = 0
            r5 = 1
            if (r4 <= 0) goto L_0x00b3
            int r1 = r9.currentAccount
            boolean r6 = org.telegram.messenger.ChatObject.isChannel(r14, r1)
            if (r6 == 0) goto L_0x0024
            java.lang.Integer r1 = java.lang.Integer.valueOf(r14)
            org.telegram.tgnet.TLRPC$Chat r1 = r13.getChat(r1)
            boolean r1 = r1.megagroup
            if (r1 == 0) goto L_0x0024
            r7 = 1
            goto L_0x0025
        L_0x0024:
            r7 = 0
        L_0x0025:
            org.telegram.tgnet.TLRPC$InputUser r3 = r13.getInputUser((org.telegram.tgnet.TLRPC$User) r15)
            if (r2 == 0) goto L_0x0055
            if (r6 == 0) goto L_0x0030
            if (r7 != 0) goto L_0x0030
            goto L_0x0055
        L_0x0030:
            org.telegram.tgnet.TLRPC$TL_messages_startBot r0 = new org.telegram.tgnet.TLRPC$TL_messages_startBot
            r0.<init>()
            r0.bot = r3
            if (r6 == 0) goto L_0x0041
            int r1 = -r4
            org.telegram.tgnet.TLRPC$InputPeer r1 = r13.getInputPeer(r1)
            r0.peer = r1
            goto L_0x004a
        L_0x0041:
            org.telegram.tgnet.TLRPC$TL_inputPeerChat r1 = new org.telegram.tgnet.TLRPC$TL_inputPeerChat
            r1.<init>()
            r0.peer = r1
            r1.chat_id = r4
        L_0x004a:
            r0.start_param = r2
            java.security.SecureRandom r1 = org.telegram.messenger.Utilities.random
            long r1 = r1.nextLong()
            r0.random_id = r1
            goto L_0x009b
        L_0x0055:
            if (r6 == 0) goto L_0x008e
            boolean r0 = r3 instanceof org.telegram.tgnet.TLRPC$TL_inputUserSelf
            if (r0 == 0) goto L_0x007d
            java.util.ArrayList<java.lang.Integer> r0 = r9.joiningToChannels
            java.lang.Integer r1 = java.lang.Integer.valueOf(r14)
            boolean r0 = r0.contains(r1)
            if (r0 == 0) goto L_0x0068
            return
        L_0x0068:
            org.telegram.tgnet.TLRPC$TL_channels_joinChannel r0 = new org.telegram.tgnet.TLRPC$TL_channels_joinChannel
            r0.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r1 = r13.getInputChannel((int) r14)
            r0.channel = r1
            java.util.ArrayList<java.lang.Integer> r1 = r9.joiningToChannels
            java.lang.Integer r2 = java.lang.Integer.valueOf(r14)
            r1.add(r2)
            goto L_0x009b
        L_0x007d:
            org.telegram.tgnet.TLRPC$TL_channels_inviteToChannel r0 = new org.telegram.tgnet.TLRPC$TL_channels_inviteToChannel
            r0.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r1 = r13.getInputChannel((int) r14)
            r0.channel = r1
            java.util.ArrayList<org.telegram.tgnet.TLRPC$InputUser> r1 = r0.users
            r1.add(r3)
            goto L_0x009b
        L_0x008e:
            org.telegram.tgnet.TLRPC$TL_messages_addChatUser r0 = new org.telegram.tgnet.TLRPC$TL_messages_addChatUser
            r0.<init>()
            r0.chat_id = r4
            r1 = r17
            r0.fwd_limit = r1
            r0.user_id = r3
        L_0x009b:
            r10 = r0
            org.telegram.tgnet.ConnectionsManager r11 = r13.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$w0UmgiKcL932iGN68Sz_Me0Qpk8 r12 = new org.telegram.messenger.-$$Lambda$MessagesController$w0UmgiKcL932iGN68Sz_Me0Qpk8
            r0 = r12
            r1 = r13
            r2 = r6
            r4 = r14
            r5 = r19
            r6 = r10
            r8 = r20
            r0.<init>(r2, r3, r4, r5, r6, r7, r8)
            r11.sendRequest(r10, r12)
            goto L_0x014f
        L_0x00b3:
            boolean r2 = r1 instanceof org.telegram.tgnet.TLRPC$TL_chatFull
            if (r2 == 0) goto L_0x014f
            r2 = 0
        L_0x00b8:
            org.telegram.tgnet.TLRPC$ChatParticipants r6 = r1.participants
            java.util.ArrayList<org.telegram.tgnet.TLRPC$ChatParticipant> r6 = r6.participants
            int r6 = r6.size()
            if (r2 >= r6) goto L_0x00d6
            org.telegram.tgnet.TLRPC$ChatParticipants r6 = r1.participants
            java.util.ArrayList<org.telegram.tgnet.TLRPC$ChatParticipant> r6 = r6.participants
            java.lang.Object r6 = r6.get(r2)
            org.telegram.tgnet.TLRPC$ChatParticipant r6 = (org.telegram.tgnet.TLRPC$ChatParticipant) r6
            int r6 = r6.user_id
            int r7 = r0.id
            if (r6 != r7) goto L_0x00d3
            return
        L_0x00d3:
            int r2 = r2 + 1
            goto L_0x00b8
        L_0x00d6:
            java.lang.Integer r2 = java.lang.Integer.valueOf(r14)
            org.telegram.tgnet.TLRPC$Chat r2 = r13.getChat(r2)
            int r4 = r2.participants_count
            int r4 = r4 + r5
            r2.participants_count = r4
            java.util.ArrayList r4 = new java.util.ArrayList
            r4.<init>()
            r4.add(r2)
            org.telegram.messenger.MessagesStorage r2 = r13.getMessagesStorage()
            r6 = 0
            r2.putUsersAndChats(r6, r4, r5, r5)
            org.telegram.tgnet.TLRPC$TL_chatParticipant r2 = new org.telegram.tgnet.TLRPC$TL_chatParticipant
            r2.<init>()
            int r0 = r0.id
            r2.user_id = r0
            org.telegram.messenger.UserConfig r0 = r13.getUserConfig()
            int r0 = r0.getClientUserId()
            r2.inviter_id = r0
            org.telegram.tgnet.ConnectionsManager r0 = r13.getConnectionsManager()
            int r0 = r0.getCurrentTime()
            r2.date = r0
            org.telegram.tgnet.TLRPC$ChatParticipants r0 = r1.participants
            java.util.ArrayList<org.telegram.tgnet.TLRPC$ChatParticipant> r0 = r0.participants
            r0.add(r3, r2)
            org.telegram.messenger.MessagesStorage r0 = r13.getMessagesStorage()
            r0.updateChatInfo(r1, r5)
            org.telegram.messenger.NotificationCenter r0 = r13.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.chatInfoDidLoad
            r4 = 4
            java.lang.Object[] r4 = new java.lang.Object[r4]
            r4[r3] = r1
            java.lang.Integer r1 = java.lang.Integer.valueOf(r3)
            r4[r5] = r1
            r1 = 2
            java.lang.Boolean r7 = java.lang.Boolean.valueOf(r3)
            r4[r1] = r7
            r1 = 3
            r4[r1] = r6
            r0.postNotificationName(r2, r4)
            org.telegram.messenger.NotificationCenter r0 = r13.getNotificationCenter()
            int r1 = org.telegram.messenger.NotificationCenter.updateInterfaces
            java.lang.Object[] r2 = new java.lang.Object[r5]
            r4 = 32
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)
            r2[r3] = r4
            r0.postNotificationName(r1, r2)
        L_0x014f:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.addUserToChat(int, org.telegram.tgnet.TLRPC$User, org.telegram.tgnet.TLRPC$ChatFull, int, java.lang.String, org.telegram.ui.ActionBar.BaseFragment, java.lang.Runnable):void");
    }

    public /* synthetic */ void lambda$addUserToChat$206$MessagesController(boolean z, TLRPC$InputUser tLRPC$InputUser, int i, BaseFragment baseFragment, TLObject tLObject, boolean z2, Runnable runnable, TLObject tLObject2, TLRPC$TL_error tLRPC$TL_error) {
        boolean z3;
        TLRPC$InputUser tLRPC$InputUser2 = tLRPC$InputUser;
        int i2 = i;
        if (z && (tLRPC$InputUser2 instanceof TLRPC$TL_inputUserSelf)) {
            AndroidUtilities.runOnUIThread(new Runnable(i) {
                private final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$203$MessagesController(this.f$1);
                }
            });
        }
        if (tLRPC$TL_error != null) {
            AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_error, baseFragment, tLObject, z, z2, tLRPC$InputUser) {
                private final /* synthetic */ TLRPC$TL_error f$1;
                private final /* synthetic */ BaseFragment f$2;
                private final /* synthetic */ TLObject f$3;
                private final /* synthetic */ boolean f$4;
                private final /* synthetic */ boolean f$5;
                private final /* synthetic */ TLRPC$InputUser f$6;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r5;
                    this.f$5 = r6;
                    this.f$6 = r7;
                }

                public final void run() {
                    MessagesController.this.lambda$null$204$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
                }
            });
            return;
        }
        TLRPC$Updates tLRPC$Updates = (TLRPC$Updates) tLObject2;
        int i3 = 0;
        while (true) {
            if (i3 >= tLRPC$Updates.updates.size()) {
                z3 = false;
                break;
            }
            TLRPC$Update tLRPC$Update = tLRPC$Updates.updates.get(i3);
            if ((tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) && (((TLRPC$TL_updateNewChannelMessage) tLRPC$Update).message.action instanceof TLRPC$TL_messageActionChatAddUser)) {
                z3 = true;
                break;
            }
            i3++;
        }
        processUpdates(tLRPC$Updates, false);
        if (z) {
            if (!z3 && (tLRPC$InputUser2 instanceof TLRPC$TL_inputUserSelf)) {
                generateJoinMessage(i, true);
            }
            AndroidUtilities.runOnUIThread(new Runnable(i) {
                private final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$205$MessagesController(this.f$1);
                }
            }, 1000);
        }
        if (z && (tLRPC$InputUser2 instanceof TLRPC$TL_inputUserSelf)) {
            getMessagesStorage().updateDialogsWithDeletedMessages(new ArrayList(), (ArrayList<Long>) null, true, i);
        }
        if (runnable != null) {
            AndroidUtilities.runOnUIThread(runnable);
        }
    }

    public /* synthetic */ void lambda$null$203$MessagesController(int i) {
        this.joiningToChannels.remove(Integer.valueOf(i));
    }

    public /* synthetic */ void lambda$null$204$MessagesController(TLRPC$TL_error tLRPC$TL_error, BaseFragment baseFragment, TLObject tLObject, boolean z, boolean z2, TLRPC$InputUser tLRPC$InputUser) {
        int i = this.currentAccount;
        Object[] objArr = new Object[1];
        objArr[0] = Boolean.valueOf(z && !z2);
        AlertsCreator.processError(i, tLRPC$TL_error, baseFragment, tLObject, objArr);
        if (z && (tLRPC$InputUser instanceof TLRPC$TL_inputUserSelf)) {
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 8192);
        }
    }

    public /* synthetic */ void lambda$null$205$MessagesController(int i) {
        loadFullChat(i, 0, true);
    }

    public void deleteUserFromChat(int i, TLRPC$User tLRPC$User, TLRPC$ChatFull tLRPC$ChatFull) {
        deleteUserFromChat(i, tLRPC$User, tLRPC$ChatFull, false, false);
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v17, resolved type: org.telegram.tgnet.TLRPC$TL_messages_deleteChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v19, resolved type: org.telegram.tgnet.TLRPC$TL_channels_editBanned} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v20, resolved type: org.telegram.tgnet.TLRPC$TL_channels_leaveChannel} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v21, resolved type: org.telegram.tgnet.TLRPC$TL_channels_deleteChannel} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v22, resolved type: org.telegram.tgnet.TLRPC$TL_messages_deleteChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v23, resolved type: org.telegram.tgnet.TLRPC$TL_messages_deleteChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v24, resolved type: org.telegram.tgnet.TLRPC$TL_messages_deleteChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v25, resolved type: org.telegram.tgnet.TLRPC$TL_messages_deleteChatUser} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void deleteUserFromChat(int r6, org.telegram.tgnet.TLRPC$User r7, org.telegram.tgnet.TLRPC$ChatFull r8, boolean r9, boolean r10) {
        /*
            r5 = this;
            if (r7 != 0) goto L_0x0003
            return
        L_0x0003:
            r0 = 0
            r1 = 1
            if (r6 <= 0) goto L_0x0096
            org.telegram.tgnet.TLRPC$InputUser r8 = r5.getInputUser((org.telegram.tgnet.TLRPC$User) r7)
            java.lang.Integer r2 = java.lang.Integer.valueOf(r6)
            org.telegram.tgnet.TLRPC$Chat r2 = r5.getChat(r2)
            boolean r3 = org.telegram.messenger.ChatObject.isChannel(r2)
            if (r3 == 0) goto L_0x0068
            boolean r4 = r8 instanceof org.telegram.tgnet.TLRPC$TL_inputUserSelf
            if (r4 == 0) goto L_0x003b
            boolean r1 = r2.creator
            if (r1 == 0) goto L_0x002f
            if (r9 == 0) goto L_0x002f
            org.telegram.tgnet.TLRPC$TL_channels_deleteChannel r9 = new org.telegram.tgnet.TLRPC$TL_channels_deleteChannel
            r9.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r1 = getInputChannel((org.telegram.tgnet.TLRPC$Chat) r2)
            r9.channel = r1
            goto L_0x0075
        L_0x002f:
            org.telegram.tgnet.TLRPC$TL_channels_leaveChannel r9 = new org.telegram.tgnet.TLRPC$TL_channels_leaveChannel
            r9.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r1 = getInputChannel((org.telegram.tgnet.TLRPC$Chat) r2)
            r9.channel = r1
            goto L_0x0075
        L_0x003b:
            org.telegram.tgnet.TLRPC$TL_channels_editBanned r9 = new org.telegram.tgnet.TLRPC$TL_channels_editBanned
            r9.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r2 = getInputChannel((org.telegram.tgnet.TLRPC$Chat) r2)
            r9.channel = r2
            r9.user_id = r8
            org.telegram.tgnet.TLRPC$TL_chatBannedRights r2 = new org.telegram.tgnet.TLRPC$TL_chatBannedRights
            r2.<init>()
            r9.banned_rights = r2
            r2.view_messages = r1
            r2.send_media = r1
            r2.send_messages = r1
            r2.send_stickers = r1
            r2.send_gifs = r1
            r2.send_games = r1
            r2.send_inline = r1
            r2.embed_links = r1
            r2.pin_messages = r1
            r2.send_polls = r1
            r2.invite_users = r1
            r2.change_info = r1
            goto L_0x0075
        L_0x0068:
            org.telegram.tgnet.TLRPC$TL_messages_deleteChatUser r9 = new org.telegram.tgnet.TLRPC$TL_messages_deleteChatUser
            r9.<init>()
            r9.chat_id = r6
            org.telegram.tgnet.TLRPC$InputUser r1 = r5.getInputUser((org.telegram.tgnet.TLRPC$User) r7)
            r9.user_id = r1
        L_0x0075:
            int r7 = r7.id
            org.telegram.messenger.UserConfig r1 = r5.getUserConfig()
            int r1 = r1.getClientUserId()
            if (r7 != r1) goto L_0x0086
            int r7 = -r6
            long r1 = (long) r7
            r5.deleteDialog(r1, r0, r10)
        L_0x0086:
            org.telegram.tgnet.ConnectionsManager r7 = r5.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$XCPjD1LeMqP0X20ISdJ1vqJsfYg r10 = new org.telegram.messenger.-$$Lambda$MessagesController$XCPjD1LeMqP0X20ISdJ1vqJsfYg
            r10.<init>(r3, r8, r6)
            r6 = 64
            r7.sendRequest(r9, r10, r6)
            goto L_0x0119
        L_0x0096:
            boolean r9 = r8 instanceof org.telegram.tgnet.TLRPC$TL_chatFull
            if (r9 == 0) goto L_0x0119
            java.lang.Integer r6 = java.lang.Integer.valueOf(r6)
            org.telegram.tgnet.TLRPC$Chat r6 = r5.getChat(r6)
            int r9 = r6.participants_count
            int r9 = r9 - r1
            r6.participants_count = r9
            java.util.ArrayList r9 = new java.util.ArrayList
            r9.<init>()
            r9.add(r6)
            org.telegram.messenger.MessagesStorage r6 = r5.getMessagesStorage()
            r10 = 0
            r6.putUsersAndChats(r10, r9, r1, r1)
            r6 = 0
        L_0x00b8:
            org.telegram.tgnet.TLRPC$ChatParticipants r9 = r8.participants
            java.util.ArrayList<org.telegram.tgnet.TLRPC$ChatParticipant> r9 = r9.participants
            int r9 = r9.size()
            if (r6 >= r9) goto L_0x00de
            org.telegram.tgnet.TLRPC$ChatParticipants r9 = r8.participants
            java.util.ArrayList<org.telegram.tgnet.TLRPC$ChatParticipant> r9 = r9.participants
            java.lang.Object r9 = r9.get(r6)
            org.telegram.tgnet.TLRPC$ChatParticipant r9 = (org.telegram.tgnet.TLRPC$ChatParticipant) r9
            int r9 = r9.user_id
            int r2 = r7.id
            if (r9 != r2) goto L_0x00db
            org.telegram.tgnet.TLRPC$ChatParticipants r7 = r8.participants
            java.util.ArrayList<org.telegram.tgnet.TLRPC$ChatParticipant> r7 = r7.participants
            r7.remove(r6)
            r6 = 1
            goto L_0x00df
        L_0x00db:
            int r6 = r6 + 1
            goto L_0x00b8
        L_0x00de:
            r6 = 0
        L_0x00df:
            if (r6 == 0) goto L_0x0106
            org.telegram.messenger.MessagesStorage r6 = r5.getMessagesStorage()
            r6.updateChatInfo(r8, r1)
            org.telegram.messenger.NotificationCenter r6 = r5.getNotificationCenter()
            int r7 = org.telegram.messenger.NotificationCenter.chatInfoDidLoad
            r9 = 4
            java.lang.Object[] r9 = new java.lang.Object[r9]
            r9[r0] = r8
            java.lang.Integer r8 = java.lang.Integer.valueOf(r0)
            r9[r1] = r8
            r8 = 2
            java.lang.Boolean r2 = java.lang.Boolean.valueOf(r0)
            r9[r8] = r2
            r8 = 3
            r9[r8] = r10
            r6.postNotificationName(r7, r9)
        L_0x0106:
            org.telegram.messenger.NotificationCenter r6 = r5.getNotificationCenter()
            int r7 = org.telegram.messenger.NotificationCenter.updateInterfaces
            java.lang.Object[] r8 = new java.lang.Object[r1]
            r9 = 32
            java.lang.Integer r9 = java.lang.Integer.valueOf(r9)
            r8[r0] = r9
            r6.postNotificationName(r7, r8)
        L_0x0119:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.deleteUserFromChat(int, org.telegram.tgnet.TLRPC$User, org.telegram.tgnet.TLRPC$ChatFull, boolean, boolean):void");
    }

    public /* synthetic */ void lambda$deleteUserFromChat$208$MessagesController(boolean z, TLRPC$InputUser tLRPC$InputUser, int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
            if (z && !(tLRPC$InputUser instanceof TLRPC$TL_inputUserSelf)) {
                AndroidUtilities.runOnUIThread(new Runnable(i) {
                    private final /* synthetic */ int f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run() {
                        MessagesController.this.lambda$null$207$MessagesController(this.f$1);
                    }
                }, 1000);
            }
        }
    }

    public /* synthetic */ void lambda$null$207$MessagesController(int i) {
        loadFullChat(i, 0, true);
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v4, resolved type: org.telegram.tgnet.TLRPC$TL_messages_editChatTitle} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v6, resolved type: org.telegram.tgnet.TLRPC$TL_channels_editTitle} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v7, resolved type: org.telegram.tgnet.TLRPC$TL_messages_editChatTitle} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v8, resolved type: org.telegram.tgnet.TLRPC$TL_messages_editChatTitle} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void changeChatTitle(int r4, java.lang.String r5) {
        /*
            r3 = this;
            if (r4 <= 0) goto L_0x0030
            int r0 = r3.currentAccount
            boolean r0 = org.telegram.messenger.ChatObject.isChannel(r4, r0)
            if (r0 == 0) goto L_0x0018
            org.telegram.tgnet.TLRPC$TL_channels_editTitle r0 = new org.telegram.tgnet.TLRPC$TL_channels_editTitle
            r0.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r4 = r3.getInputChannel((int) r4)
            r0.channel = r4
            r0.title = r5
            goto L_0x0021
        L_0x0018:
            org.telegram.tgnet.TLRPC$TL_messages_editChatTitle r0 = new org.telegram.tgnet.TLRPC$TL_messages_editChatTitle
            r0.<init>()
            r0.chat_id = r4
            r0.title = r5
        L_0x0021:
            org.telegram.tgnet.ConnectionsManager r4 = r3.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$6aB4CIdolD3V4S4MCAmNMmR3L7k r5 = new org.telegram.messenger.-$$Lambda$MessagesController$6aB4CIdolD3V4S4MCAmNMmR3L7k
            r5.<init>()
            r1 = 64
            r4.sendRequest(r0, r5, r1)
            goto L_0x006a
        L_0x0030:
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)
            org.telegram.tgnet.TLRPC$Chat r4 = r3.getChat(r4)
            r4.title = r5
            java.util.ArrayList r5 = new java.util.ArrayList
            r5.<init>()
            r5.add(r4)
            org.telegram.messenger.MessagesStorage r4 = r3.getMessagesStorage()
            r0 = 0
            r1 = 1
            r4.putUsersAndChats(r0, r5, r1, r1)
            org.telegram.messenger.NotificationCenter r4 = r3.getNotificationCenter()
            int r5 = org.telegram.messenger.NotificationCenter.dialogsNeedReload
            r0 = 0
            java.lang.Object[] r2 = new java.lang.Object[r0]
            r4.postNotificationName(r5, r2)
            org.telegram.messenger.NotificationCenter r4 = r3.getNotificationCenter()
            int r5 = org.telegram.messenger.NotificationCenter.updateInterfaces
            java.lang.Object[] r1 = new java.lang.Object[r1]
            r2 = 16
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)
            r1[r0] = r2
            r4.postNotificationName(r5, r1)
        L_0x006a:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.changeChatTitle(int, java.lang.String):void");
    }

    public /* synthetic */ void lambda$changeChatTitle$209$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v2, resolved type: org.telegram.tgnet.TLRPC$TL_messages_editChatPhoto} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v4, resolved type: org.telegram.tgnet.TLRPC$TL_channels_editPhoto} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v5, resolved type: org.telegram.tgnet.TLRPC$TL_messages_editChatPhoto} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v6, resolved type: org.telegram.tgnet.TLRPC$TL_messages_editChatPhoto} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v7, resolved type: org.telegram.tgnet.TLRPC$TL_messages_editChatPhoto} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v8, resolved type: org.telegram.tgnet.TLRPC$TL_messages_editChatPhoto} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void changeChatAvatar(int r2, org.telegram.tgnet.TLRPC$InputFile r3, org.telegram.tgnet.TLRPC$FileLocation r4, org.telegram.tgnet.TLRPC$FileLocation r5) {
        /*
            r1 = this;
            int r0 = r1.currentAccount
            boolean r0 = org.telegram.messenger.ChatObject.isChannel(r2, r0)
            if (r0 == 0) goto L_0x0027
            org.telegram.tgnet.TLRPC$TL_channels_editPhoto r0 = new org.telegram.tgnet.TLRPC$TL_channels_editPhoto
            r0.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r2 = r1.getInputChannel((int) r2)
            r0.channel = r2
            if (r3 == 0) goto L_0x001f
            org.telegram.tgnet.TLRPC$TL_inputChatUploadedPhoto r2 = new org.telegram.tgnet.TLRPC$TL_inputChatUploadedPhoto
            r2.<init>()
            r0.photo = r2
            r2.file = r3
            goto L_0x0041
        L_0x001f:
            org.telegram.tgnet.TLRPC$TL_inputChatPhotoEmpty r2 = new org.telegram.tgnet.TLRPC$TL_inputChatPhotoEmpty
            r2.<init>()
            r0.photo = r2
            goto L_0x0041
        L_0x0027:
            org.telegram.tgnet.TLRPC$TL_messages_editChatPhoto r0 = new org.telegram.tgnet.TLRPC$TL_messages_editChatPhoto
            r0.<init>()
            r0.chat_id = r2
            if (r3 == 0) goto L_0x003a
            org.telegram.tgnet.TLRPC$TL_inputChatUploadedPhoto r2 = new org.telegram.tgnet.TLRPC$TL_inputChatUploadedPhoto
            r2.<init>()
            r0.photo = r2
            r2.file = r3
            goto L_0x0041
        L_0x003a:
            org.telegram.tgnet.TLRPC$TL_inputChatPhotoEmpty r2 = new org.telegram.tgnet.TLRPC$TL_inputChatPhotoEmpty
            r2.<init>()
            r0.photo = r2
        L_0x0041:
            org.telegram.tgnet.ConnectionsManager r2 = r1.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$LI3ZrFAcCJsTBPIqsjnygR7E7Rg r3 = new org.telegram.messenger.-$$Lambda$MessagesController$LI3ZrFAcCJsTBPIqsjnygR7E7Rg
            r3.<init>(r4, r5)
            r4 = 64
            r2.sendRequest(r0, r3, r4)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.changeChatAvatar(int, org.telegram.tgnet.TLRPC$InputFile, org.telegram.tgnet.TLRPC$FileLocation, org.telegram.tgnet.TLRPC$FileLocation):void");
    }

    /* JADX WARNING: Code restructure failed: missing block: B:10:0x002c, code lost:
        r12 = r3;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$changeChatAvatar$210$MessagesController(org.telegram.tgnet.TLRPC$FileLocation r9, org.telegram.tgnet.TLRPC$FileLocation r10, org.telegram.tgnet.TLObject r11, org.telegram.tgnet.TLRPC$TL_error r12) {
        /*
            r8 = this;
            if (r12 == 0) goto L_0x0003
            return
        L_0x0003:
            org.telegram.tgnet.TLRPC$Updates r11 = (org.telegram.tgnet.TLRPC$Updates) r11
            r12 = 0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r0 = r11.updates
            int r0 = r0.size()
            r1 = 0
            r2 = 0
        L_0x000e:
            if (r2 >= r0) goto L_0x0046
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r3 = r11.updates
            java.lang.Object r3 = r3.get(r2)
            org.telegram.tgnet.TLRPC$Update r3 = (org.telegram.tgnet.TLRPC$Update) r3
            boolean r4 = r3 instanceof org.telegram.tgnet.TLRPC$TL_updateNewChannelMessage
            if (r4 == 0) goto L_0x002e
            org.telegram.tgnet.TLRPC$TL_updateNewChannelMessage r3 = (org.telegram.tgnet.TLRPC$TL_updateNewChannelMessage) r3
            org.telegram.tgnet.TLRPC$Message r3 = r3.message
            org.telegram.tgnet.TLRPC$MessageAction r3 = r3.action
            boolean r4 = r3 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatEditPhoto
            if (r4 == 0) goto L_0x0043
            org.telegram.tgnet.TLRPC$Photo r3 = r3.photo
            boolean r4 = r3 instanceof org.telegram.tgnet.TLRPC$TL_photo
            if (r4 == 0) goto L_0x0043
        L_0x002c:
            r12 = r3
            goto L_0x0046
        L_0x002e:
            boolean r4 = r3 instanceof org.telegram.tgnet.TLRPC$TL_updateNewMessage
            if (r4 == 0) goto L_0x0043
            org.telegram.tgnet.TLRPC$TL_updateNewMessage r3 = (org.telegram.tgnet.TLRPC$TL_updateNewMessage) r3
            org.telegram.tgnet.TLRPC$Message r3 = r3.message
            org.telegram.tgnet.TLRPC$MessageAction r3 = r3.action
            boolean r4 = r3 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatEditPhoto
            if (r4 == 0) goto L_0x0043
            org.telegram.tgnet.TLRPC$Photo r3 = r3.photo
            boolean r4 = r3 instanceof org.telegram.tgnet.TLRPC$TL_photo
            if (r4 == 0) goto L_0x0043
            goto L_0x002c
        L_0x0043:
            int r2 = r2 + 1
            goto L_0x000e
        L_0x0046:
            if (r12 == 0) goto L_0x00bc
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PhotoSize> r0 = r12.sizes
            r2 = 150(0x96, float:2.1E-43)
            org.telegram.tgnet.TLRPC$PhotoSize r0 = org.telegram.messenger.FileLoader.getClosestPhotoSizeWithSize(r0, r2)
            r2 = 1
            if (r0 == 0) goto L_0x00a5
            if (r9 == 0) goto L_0x00a5
            java.io.File r3 = org.telegram.messenger.FileLoader.getPathToAttach(r0, r2)
            java.io.File r4 = org.telegram.messenger.FileLoader.getPathToAttach(r9, r2)
            r4.renameTo(r3)
            java.lang.StringBuilder r3 = new java.lang.StringBuilder
            r3.<init>()
            long r4 = r9.volume_id
            r3.append(r4)
            java.lang.String r4 = "_"
            r3.append(r4)
            int r9 = r9.local_id
            r3.append(r9)
            java.lang.String r9 = "@50_50"
            r3.append(r9)
            java.lang.String r3 = r3.toString()
            java.lang.StringBuilder r5 = new java.lang.StringBuilder
            r5.<init>()
            org.telegram.tgnet.TLRPC$FileLocation r6 = r0.location
            long r6 = r6.volume_id
            r5.append(r6)
            r5.append(r4)
            org.telegram.tgnet.TLRPC$FileLocation r4 = r0.location
            int r4 = r4.local_id
            r5.append(r4)
            r5.append(r9)
            java.lang.String r9 = r5.toString()
            org.telegram.messenger.ImageLoader r4 = org.telegram.messenger.ImageLoader.getInstance()
            org.telegram.messenger.ImageLocation r0 = org.telegram.messenger.ImageLocation.getForPhoto(r0, r12)
            r4.replaceImageInCache(r3, r9, r0, r2)
        L_0x00a5:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PhotoSize> r9 = r12.sizes
            r12 = 800(0x320, float:1.121E-42)
            org.telegram.tgnet.TLRPC$PhotoSize r9 = org.telegram.messenger.FileLoader.getClosestPhotoSizeWithSize(r9, r12)
            if (r9 == 0) goto L_0x00bc
            if (r10 == 0) goto L_0x00bc
            java.io.File r9 = org.telegram.messenger.FileLoader.getPathToAttach(r9, r2)
            java.io.File r10 = org.telegram.messenger.FileLoader.getPathToAttach(r10, r2)
            r10.renameTo(r9)
        L_0x00bc:
            r8.processUpdates(r11, r1)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$changeChatAvatar$210$MessagesController(org.telegram.tgnet.TLRPC$FileLocation, org.telegram.tgnet.TLRPC$FileLocation, org.telegram.tgnet.TLObject, org.telegram.tgnet.TLRPC$TL_error):void");
    }

    public void unregistedPush() {
        if (getUserConfig().registeredForPush && SharedConfig.pushString.length() == 0) {
            TLRPC$TL_account_unregisterDevice tLRPC$TL_account_unregisterDevice = new TLRPC$TL_account_unregisterDevice();
            tLRPC$TL_account_unregisterDevice.token = SharedConfig.pushString;
            tLRPC$TL_account_unregisterDevice.token_type = 2;
            for (int i = 0; i < 3; i++) {
                UserConfig instance = UserConfig.getInstance(i);
                if (i != this.currentAccount && instance.isClientActivated()) {
                    tLRPC$TL_account_unregisterDevice.other_uids.add(Integer.valueOf(instance.getClientUserId()));
                }
            }
            getConnectionsManager().sendRequest(tLRPC$TL_account_unregisterDevice, $$Lambda$MessagesController$4TTrx8qdspl4GXM9gQpEVwd3fts.INSTANCE);
        }
    }

    public void performLogout(int i) {
        boolean z = true;
        if (i == 1) {
            unregistedPush();
            getConnectionsManager().sendRequest(new TLRPC$TL_auth_logOut(), new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$performLogout$212$MessagesController(tLObject, tLRPC$TL_error);
                }
            });
        } else {
            ConnectionsManager connectionsManager = getConnectionsManager();
            if (i != 2) {
                z = false;
            }
            connectionsManager.cleanup(z);
        }
        getUserConfig().clearConfig();
        getNotificationCenter().postNotificationName(NotificationCenter.appDidLogout, new Object[0]);
        getMessagesStorage().cleanup(false);
        cleanup();
        getContactsController().deleteUnknownAppAccounts();
    }

    public /* synthetic */ void lambda$performLogout$212$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        getConnectionsManager().cleanup(false);
    }

    public void generateUpdateMessage() {
        String str;
        if (!this.gettingAppChangelog && !BuildVars.DEBUG_VERSION && (str = SharedConfig.lastUpdateVersion) != null && !str.equals(BuildVars.BUILD_VERSION_STRING)) {
            this.gettingAppChangelog = true;
            TLRPC$TL_help_getAppChangelog tLRPC$TL_help_getAppChangelog = new TLRPC$TL_help_getAppChangelog();
            tLRPC$TL_help_getAppChangelog.prev_app_version = SharedConfig.lastUpdateVersion;
            getConnectionsManager().sendRequest(tLRPC$TL_help_getAppChangelog, new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$generateUpdateMessage$213$MessagesController(tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$generateUpdateMessage$213$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLRPC$TL_error == null) {
            SharedConfig.lastUpdateVersion = BuildVars.BUILD_VERSION_STRING;
            SharedConfig.saveConfig();
        }
        if (tLObject instanceof TLRPC$Updates) {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
    }

    public void registerForPush(String str) {
        if (!TextUtils.isEmpty(str) && !this.registeringForPush && getUserConfig().getClientUserId() != 0) {
            if (!getUserConfig().registeredForPush || !str.equals(SharedConfig.pushString)) {
                this.registeringForPush = true;
                this.lastPushRegisterSendTime = SystemClock.elapsedRealtime();
                if (SharedConfig.pushAuthKey == null) {
                    SharedConfig.pushAuthKey = new byte[256];
                    Utilities.random.nextBytes(SharedConfig.pushAuthKey);
                    SharedConfig.saveConfig();
                }
                TLRPC$TL_account_registerDevice tLRPC$TL_account_registerDevice = new TLRPC$TL_account_registerDevice();
                tLRPC$TL_account_registerDevice.token_type = 2;
                tLRPC$TL_account_registerDevice.token = str;
                tLRPC$TL_account_registerDevice.no_muted = false;
                tLRPC$TL_account_registerDevice.secret = SharedConfig.pushAuthKey;
                for (int i = 0; i < 3; i++) {
                    UserConfig instance = UserConfig.getInstance(i);
                    if (i != this.currentAccount && instance.isClientActivated()) {
                        int clientUserId = instance.getClientUserId();
                        tLRPC$TL_account_registerDevice.other_uids.add(Integer.valueOf(clientUserId));
                        if (BuildVars.LOGS_ENABLED) {
                            FileLog.d("add other uid = " + clientUserId + " for account " + this.currentAccount);
                        }
                    }
                }
                getConnectionsManager().sendRequest(tLRPC$TL_account_registerDevice, new RequestDelegate(str) {
                    private final /* synthetic */ String f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$registerForPush$215$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                    }
                });
            }
        }
    }

    public /* synthetic */ void lambda$registerForPush$215$MessagesController(String str, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject instanceof TLRPC$TL_boolTrue) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("account " + this.currentAccount + " registered for push");
            }
            getUserConfig().registeredForPush = true;
            SharedConfig.pushString = str;
            getUserConfig().saveConfig(false);
        }
        AndroidUtilities.runOnUIThread(new Runnable() {
            public final void run() {
                MessagesController.this.lambda$null$214$MessagesController();
            }
        });
    }

    public /* synthetic */ void lambda$null$214$MessagesController() {
        this.registeringForPush = false;
    }

    public void loadCurrentState() {
        if (!this.updatingState) {
            this.updatingState = true;
            getConnectionsManager().sendRequest(new TLRPC$TL_updates_getState(), new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$loadCurrentState$216$MessagesController(tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$loadCurrentState$216$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        this.updatingState = false;
        if (tLRPC$TL_error == null) {
            TLRPC$TL_updates_state tLRPC$TL_updates_state = (TLRPC$TL_updates_state) tLObject;
            getMessagesStorage().setLastDateValue(tLRPC$TL_updates_state.date);
            getMessagesStorage().setLastPtsValue(tLRPC$TL_updates_state.pts);
            getMessagesStorage().setLastSeqValue(tLRPC$TL_updates_state.seq);
            getMessagesStorage().setLastQtsValue(tLRPC$TL_updates_state.qts);
            for (int i = 0; i < 3; i++) {
                processUpdatesQueue(i, 2);
            }
            getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
        } else if (tLRPC$TL_error.code != 401) {
            loadCurrentState();
        }
    }

    private int getUpdateSeq(TLRPC$Updates tLRPC$Updates) {
        if (tLRPC$Updates instanceof TLRPC$TL_updatesCombined) {
            return tLRPC$Updates.seq_start;
        }
        return tLRPC$Updates.seq;
    }

    private void setUpdatesStartTime(int i, long j) {
        if (i == 0) {
            this.updatesStartWaitTimeSeq = j;
        } else if (i == 1) {
            this.updatesStartWaitTimePts = j;
        } else if (i == 2) {
            this.updatesStartWaitTimeQts = j;
        }
    }

    public long getUpdatesStartTime(int i) {
        if (i == 0) {
            return this.updatesStartWaitTimeSeq;
        }
        if (i == 1) {
            return this.updatesStartWaitTimePts;
        }
        if (i == 2) {
            return this.updatesStartWaitTimeQts;
        }
        return 0;
    }

    private int isValidUpdate(TLRPC$Updates tLRPC$Updates, int i) {
        if (i == 0) {
            int updateSeq = getUpdateSeq(tLRPC$Updates);
            if (getMessagesStorage().getLastSeqValue() + 1 == updateSeq || getMessagesStorage().getLastSeqValue() == updateSeq) {
                return 0;
            }
            return getMessagesStorage().getLastSeqValue() < updateSeq ? 1 : 2;
        } else if (i == 1) {
            if (tLRPC$Updates.pts <= getMessagesStorage().getLastPtsValue()) {
                return 2;
            }
            return getMessagesStorage().getLastPtsValue() + tLRPC$Updates.pts_count == tLRPC$Updates.pts ? 0 : 1;
        } else if (i != 2) {
            return 0;
        } else {
            if (tLRPC$Updates.pts <= getMessagesStorage().getLastQtsValue()) {
                return 2;
            }
            return getMessagesStorage().getLastQtsValue() + tLRPC$Updates.updates.size() == tLRPC$Updates.pts ? 0 : 1;
        }
    }

    private void processChannelsUpdatesQueue(int i, int i2) {
        char c;
        ArrayList arrayList = this.updatesQueueChannels.get(i);
        if (arrayList != null) {
            int i3 = this.channelsPts.get(i);
            if (arrayList.isEmpty() || i3 == 0) {
                this.updatesQueueChannels.remove(i);
                return;
            }
            Collections.sort(arrayList, $$Lambda$MessagesController$rjuicDVGqS0B77wt5N3smtmnxJc.INSTANCE);
            if (i2 == 2) {
                this.channelsPts.put(i, ((TLRPC$Updates) arrayList.get(0)).pts);
            }
            boolean z = false;
            while (arrayList.size() > 0) {
                TLRPC$Updates tLRPC$Updates = (TLRPC$Updates) arrayList.get(0);
                int i4 = tLRPC$Updates.pts;
                if (i4 <= i3) {
                    c = 2;
                } else {
                    c = tLRPC$Updates.pts_count + i3 == i4 ? (char) 0 : 1;
                }
                if (c == 0) {
                    processUpdates(tLRPC$Updates, true);
                    arrayList.remove(0);
                    z = true;
                } else if (c == 1) {
                    long j = this.updatesStartWaitTimeChannels.get(i);
                    if (j == 0 || (!z && Math.abs(System.currentTimeMillis() - j) > 1500)) {
                        if (BuildVars.LOGS_ENABLED) {
                            FileLog.d("HOLE IN CHANNEL " + i + " UPDATES QUEUE - getChannelDifference ");
                        }
                        this.updatesStartWaitTimeChannels.delete(i);
                        this.updatesQueueChannels.remove(i);
                        getChannelDifference(i);
                        return;
                    }
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("HOLE IN CHANNEL " + i + " UPDATES QUEUE - will wait more time");
                    }
                    if (z) {
                        this.updatesStartWaitTimeChannels.put(i, System.currentTimeMillis());
                        return;
                    }
                    return;
                } else {
                    arrayList.remove(0);
                }
            }
            this.updatesQueueChannels.remove(i);
            this.updatesStartWaitTimeChannels.delete(i);
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("UPDATES CHANNEL " + i + " QUEUE PROCEED - OK");
            }
        }
    }

    private void processUpdatesQueue(int i, int i2) {
        ArrayList<TLRPC$Updates> arrayList;
        if (i == 0) {
            arrayList = this.updatesQueueSeq;
            Collections.sort(arrayList, new Comparator() {
                public final int compare(Object obj, Object obj2) {
                    return MessagesController.this.lambda$processUpdatesQueue$218$MessagesController((TLRPC$Updates) obj, (TLRPC$Updates) obj2);
                }
            });
        } else if (i == 1) {
            arrayList = this.updatesQueuePts;
            Collections.sort(arrayList, $$Lambda$MessagesController$QTXPaB7T7w_8kGBD1W7EX_7deM.INSTANCE);
        } else if (i == 2) {
            arrayList = this.updatesQueueQts;
            Collections.sort(arrayList, $$Lambda$MessagesController$PjHgoHjwtydnKeCIV3FDOVnXE.INSTANCE);
        } else {
            arrayList = null;
        }
        if (arrayList != null && !arrayList.isEmpty()) {
            if (i2 == 2) {
                TLRPC$Updates tLRPC$Updates = arrayList.get(0);
                if (i == 0) {
                    getMessagesStorage().setLastSeqValue(getUpdateSeq(tLRPC$Updates));
                } else if (i == 1) {
                    getMessagesStorage().setLastPtsValue(tLRPC$Updates.pts);
                } else {
                    getMessagesStorage().setLastQtsValue(tLRPC$Updates.pts);
                }
            }
            boolean z = false;
            while (arrayList.size() > 0) {
                TLRPC$Updates tLRPC$Updates2 = arrayList.get(0);
                int isValidUpdate = isValidUpdate(tLRPC$Updates2, i);
                if (isValidUpdate == 0) {
                    processUpdates(tLRPC$Updates2, true);
                    arrayList.remove(0);
                    z = true;
                } else if (isValidUpdate != 1) {
                    arrayList.remove(0);
                } else if (getUpdatesStartTime(i) == 0 || (!z && Math.abs(System.currentTimeMillis() - getUpdatesStartTime(i)) > 1500)) {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("HOLE IN UPDATES QUEUE - getDifference");
                    }
                    setUpdatesStartTime(i, 0);
                    arrayList.clear();
                    getDifference();
                    return;
                } else {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("HOLE IN UPDATES QUEUE - will wait more time");
                    }
                    if (z) {
                        setUpdatesStartTime(i, System.currentTimeMillis());
                        return;
                    }
                    return;
                }
            }
            arrayList.clear();
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("UPDATES QUEUE PROCEED - OK");
            }
        }
        setUpdatesStartTime(i, 0);
    }

    public /* synthetic */ int lambda$processUpdatesQueue$218$MessagesController(TLRPC$Updates tLRPC$Updates, TLRPC$Updates tLRPC$Updates2) {
        return AndroidUtilities.compare(getUpdateSeq(tLRPC$Updates), getUpdateSeq(tLRPC$Updates2));
    }

    /* access modifiers changed from: protected */
    public void loadUnknownChannel(TLRPC$Chat tLRPC$Chat, long j) {
        NativeByteBuffer nativeByteBuffer;
        Exception e;
        if ((tLRPC$Chat instanceof TLRPC$TL_channel) && this.gettingUnknownChannels.indexOfKey(tLRPC$Chat.id) < 0) {
            if (tLRPC$Chat.access_hash != 0) {
                TLRPC$TL_inputPeerChannel tLRPC$TL_inputPeerChannel = new TLRPC$TL_inputPeerChannel();
                int i = tLRPC$Chat.id;
                tLRPC$TL_inputPeerChannel.channel_id = i;
                tLRPC$TL_inputPeerChannel.access_hash = tLRPC$Chat.access_hash;
                this.gettingUnknownChannels.put(i, true);
                TLRPC$TL_messages_getPeerDialogs tLRPC$TL_messages_getPeerDialogs = new TLRPC$TL_messages_getPeerDialogs();
                TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
                tLRPC$TL_inputDialogPeer.peer = tLRPC$TL_inputPeerChannel;
                tLRPC$TL_messages_getPeerDialogs.peers.add(tLRPC$TL_inputDialogPeer);
                if (j == 0) {
                    try {
                        nativeByteBuffer = new NativeByteBuffer(tLRPC$Chat.getObjectSize() + 4);
                        try {
                            nativeByteBuffer.writeInt32(0);
                            tLRPC$Chat.serializeToStream(nativeByteBuffer);
                        } catch (Exception e2) {
                            e = e2;
                        }
                    } catch (Exception e3) {
                        Exception exc = e3;
                        nativeByteBuffer = null;
                        e = exc;
                        FileLog.e((Throwable) e);
                        j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                        getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerDialogs, new RequestDelegate(j, tLRPC$Chat) {
                            private final /* synthetic */ long f$1;
                            private final /* synthetic */ TLRPC$Chat f$2;

                            {
                                this.f$1 = r2;
                                this.f$2 = r4;
                            }

                            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                MessagesController.this.lambda$loadUnknownChannel$221$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                            }
                        });
                    }
                    j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                }
                getConnectionsManager().sendRequest(tLRPC$TL_messages_getPeerDialogs, new RequestDelegate(j, tLRPC$Chat) {
                    private final /* synthetic */ long f$1;
                    private final /* synthetic */ TLRPC$Chat f$2;

                    {
                        this.f$1 = r2;
                        this.f$2 = r4;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$loadUnknownChannel$221$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                    }
                });
            } else if (j != 0) {
                getMessagesStorage().removePendingTask(j);
            }
        }
    }

    public /* synthetic */ void lambda$loadUnknownChannel$221$MessagesController(long j, TLRPC$Chat tLRPC$Chat, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject;
            if (!tLRPC$TL_messages_peerDialogs.dialogs.isEmpty() && !tLRPC$TL_messages_peerDialogs.chats.isEmpty()) {
                TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
                tLRPC$TL_messages_dialogs.dialogs.addAll(tLRPC$TL_messages_peerDialogs.dialogs);
                tLRPC$TL_messages_dialogs.messages.addAll(tLRPC$TL_messages_peerDialogs.messages);
                tLRPC$TL_messages_dialogs.users.addAll(tLRPC$TL_messages_peerDialogs.users);
                tLRPC$TL_messages_dialogs.chats.addAll(tLRPC$TL_messages_peerDialogs.chats);
                processLoadedDialogs(tLRPC$TL_messages_dialogs, (ArrayList<TLRPC$EncryptedChat>) null, ((TLRPC$TL_dialog) tLRPC$TL_messages_peerDialogs.dialogs.get(0)).folder_id, 0, 1, this.DIALOGS_LOAD_TYPE_CHANNEL, false, false, false);
            }
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
        this.gettingUnknownChannels.delete(tLRPC$Chat.id);
    }

    public void startShortPoll(TLRPC$Chat tLRPC$Chat, boolean z) {
        Utilities.stageQueue.postRunnable(new Runnable(z, tLRPC$Chat) {
            private final /* synthetic */ boolean f$1;
            private final /* synthetic */ TLRPC$Chat f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$startShortPoll$222$MessagesController(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$startShortPoll$222$MessagesController(boolean z, TLRPC$Chat tLRPC$Chat) {
        if (z) {
            this.needShortPollChannels.delete(tLRPC$Chat.id);
            if (tLRPC$Chat.megagroup) {
                this.needShortPollOnlines.delete(tLRPC$Chat.id);
                return;
            }
            return;
        }
        this.needShortPollChannels.put(tLRPC$Chat.id, 0);
        if (this.shortPollChannels.indexOfKey(tLRPC$Chat.id) < 0) {
            getChannelDifference(tLRPC$Chat.id, 3, 0, (TLRPC$InputChannel) null);
        }
        if (tLRPC$Chat.megagroup) {
            this.needShortPollOnlines.put(tLRPC$Chat.id, 0);
            if (this.shortPollOnlines.indexOfKey(tLRPC$Chat.id) < 0) {
                this.shortPollOnlines.put(tLRPC$Chat.id, 0);
            }
        }
    }

    private void getChannelDifference(int i) {
        getChannelDifference(i, 0, 0, (TLRPC$InputChannel) null);
    }

    /* JADX WARNING: Code restructure failed: missing block: B:3:0x0006, code lost:
        r1 = r1.id;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public static boolean isSupportUser(org.telegram.tgnet.TLRPC$User r1) {
        /*
            if (r1 == 0) goto L_0x009b
            boolean r0 = r1.support
            if (r0 != 0) goto L_0x0099
            int r1 = r1.id
            r0 = 777000(0xbdb28, float:1.088809E-39)
            if (r1 == r0) goto L_0x0099
            r0 = 333000(0x514c8, float:4.66632E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 4240000(0x40b280, float:5.941505E-39)
            if (r1 == r0) goto L_0x0099
            r0 = 4244000(0x40CLASSNAME, float:5.94711E-39)
            if (r1 == r0) goto L_0x0099
            r0 = 4245000(0x40CLASSNAME, float:5.948512E-39)
            if (r1 == r0) goto L_0x0099
            r0 = 4246000(0x40c9f0, float:5.949913E-39)
            if (r1 == r0) goto L_0x0099
            r0 = 410000(0x64190, float:5.74532E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 420000(0x668a0, float:5.88545E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 431000(0x69398, float:6.0396E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 431415000(0x19b6ded8, float:1.8908365E-23)
            if (r1 == r0) goto L_0x0099
            r0 = 434000(0x69var_, float:6.08164E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 4243000(0x40be38, float:5.94571E-39)
            if (r1 == r0) goto L_0x0099
            r0 = 439000(0x6b2d8, float:6.1517E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 449000(0x6d9e8, float:6.29183E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 450000(0x6ddd0, float:6.30584E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 452000(0x6e5a0, float:6.33387E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 454000(0x6ed70, float:6.3619E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 4254000(0x40e930, float:5.961124E-39)
            if (r1 == r0) goto L_0x0099
            r0 = 455000(0x6var_, float:6.37591E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 460000(0x704e0, float:6.44597E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 470000(0x72bf0, float:6.5861E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 479000(0x74var_, float:6.71222E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 796000(0xCLASSNAME, float:1.115434E-39)
            if (r1 == r0) goto L_0x0099
            r0 = 482000(0x75ad0, float:6.75426E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 490000(0x77a10, float:6.86636E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 496000(0x79180, float:6.95044E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 497000(0x79568, float:6.96445E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 498000(0x79950, float:6.97847E-40)
            if (r1 == r0) goto L_0x0099
            r0 = 4298000(0x419510, float:6.022781E-39)
            if (r1 != r0) goto L_0x009b
        L_0x0099:
            r1 = 1
            goto L_0x009c
        L_0x009b:
            r1 = 0
        L_0x009c:
            return r1
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.isSupportUser(org.telegram.tgnet.TLRPC$User):boolean");
    }

    /* access modifiers changed from: protected */
    /* JADX WARNING: Removed duplicated region for block: B:47:0x00b9  */
    /* JADX WARNING: Removed duplicated region for block: B:50:0x00c0  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void getChannelDifference(int r16, int r17, long r18, org.telegram.tgnet.TLRPC$InputChannel r20) {
        /*
            r15 = this;
            r7 = r15
            r3 = r16
            r4 = r17
            r0 = r18
            android.util.SparseBooleanArray r2 = r7.gettingDifferenceChannels
            boolean r2 = r2.get(r3)
            if (r2 == 0) goto L_0x0010
            return
        L_0x0010:
            r2 = 100
            r5 = 3
            r6 = 1
            if (r4 != r6) goto L_0x0022
            android.util.SparseIntArray r2 = r7.channelsPts
            int r2 = r2.get(r3)
            if (r2 == 0) goto L_0x001f
            return
        L_0x001f:
            r2 = 1
            r8 = 1
            goto L_0x0044
        L_0x0022:
            android.util.SparseIntArray r8 = r7.channelsPts
            int r8 = r8.get(r3)
            if (r8 != 0) goto L_0x0041
            org.telegram.messenger.MessagesStorage r8 = r15.getMessagesStorage()
            int r8 = r8.getChannelPtsSync(r3)
            if (r8 == 0) goto L_0x0039
            android.util.SparseIntArray r9 = r7.channelsPts
            r9.put(r3, r8)
        L_0x0039:
            if (r8 != 0) goto L_0x0041
            r9 = 2
            if (r4 == r9) goto L_0x0040
            if (r4 != r5) goto L_0x0041
        L_0x0040:
            return
        L_0x0041:
            if (r8 != 0) goto L_0x0044
            return
        L_0x0044:
            if (r20 != 0) goto L_0x0062
            java.lang.Integer r9 = java.lang.Integer.valueOf(r16)
            org.telegram.tgnet.TLRPC$Chat r9 = r15.getChat(r9)
            if (r9 != 0) goto L_0x005d
            org.telegram.messenger.MessagesStorage r9 = r15.getMessagesStorage()
            org.telegram.tgnet.TLRPC$Chat r9 = r9.getChatSync(r3)
            if (r9 == 0) goto L_0x005d
            r15.putChat(r9, r6)
        L_0x005d:
            org.telegram.tgnet.TLRPC$InputChannel r9 = getInputChannel((org.telegram.tgnet.TLRPC$Chat) r9)
            goto L_0x0064
        L_0x0062:
            r9 = r20
        L_0x0064:
            r10 = 0
            if (r9 == 0) goto L_0x00f0
            long r12 = r9.access_hash
            int r14 = (r12 > r10 ? 1 : (r12 == r10 ? 0 : -1))
            if (r14 != 0) goto L_0x0070
            goto L_0x00f0
        L_0x0070:
            int r12 = (r0 > r10 ? 1 : (r0 == r10 ? 0 : -1))
            if (r12 != 0) goto L_0x009e
            r1 = 0
            org.telegram.tgnet.NativeByteBuffer r10 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x0091 }
            int r0 = r9.getObjectSize()     // Catch:{ Exception -> 0x0091 }
            int r0 = r0 + 12
            r10.<init>((int) r0)     // Catch:{ Exception -> 0x0091 }
            r0 = 6
            r10.writeInt32(r0)     // Catch:{ Exception -> 0x008e }
            r10.writeInt32(r3)     // Catch:{ Exception -> 0x008e }
            r10.writeInt32(r4)     // Catch:{ Exception -> 0x008e }
            r9.serializeToStream(r10)     // Catch:{ Exception -> 0x008e }
            goto L_0x0096
        L_0x008e:
            r0 = move-exception
            r1 = r10
            goto L_0x0092
        L_0x0091:
            r0 = move-exception
        L_0x0092:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
            r10 = r1
        L_0x0096:
            org.telegram.messenger.MessagesStorage r0 = r15.getMessagesStorage()
            long r0 = r0.createPendingTask(r10)
        L_0x009e:
            r10 = r0
            android.util.SparseBooleanArray r0 = r7.gettingDifferenceChannels
            r0.put(r3, r6)
            org.telegram.tgnet.TLRPC$TL_updates_getChannelDifference r0 = new org.telegram.tgnet.TLRPC$TL_updates_getChannelDifference
            r0.<init>()
            r0.channel = r9
            org.telegram.tgnet.TLRPC$TL_channelMessagesFilterEmpty r1 = new org.telegram.tgnet.TLRPC$TL_channelMessagesFilterEmpty
            r1.<init>()
            r0.filter = r1
            r0.pts = r8
            r0.limit = r2
            if (r4 == r5) goto L_0x00b9
            goto L_0x00ba
        L_0x00b9:
            r6 = 0
        L_0x00ba:
            r0.force = r6
            boolean r1 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r1 == 0) goto L_0x00dc
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "start getChannelDifference with pts = "
            r1.append(r2)
            r1.append(r8)
            java.lang.String r2 = " channelId = "
            r1.append(r2)
            r1.append(r3)
            java.lang.String r1 = r1.toString()
            org.telegram.messenger.FileLog.d(r1)
        L_0x00dc:
            org.telegram.tgnet.ConnectionsManager r8 = r15.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$DMW-CTvRLs36NS9BxJcf-6sPAbU r9 = new org.telegram.messenger.-$$Lambda$MessagesController$DMW-CTvRLs36NS9BxJcf-6sPAbU
            r1 = r9
            r2 = r15
            r3 = r16
            r4 = r17
            r5 = r10
            r1.<init>(r3, r4, r5)
            r8.sendRequest(r0, r9)
            return
        L_0x00f0:
            int r2 = (r0 > r10 ? 1 : (r0 == r10 ? 0 : -1))
            if (r2 == 0) goto L_0x00fb
            org.telegram.messenger.MessagesStorage r2 = r15.getMessagesStorage()
            r2.removePendingTask(r0)
        L_0x00fb:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.getChannelDifference(int, int, long, org.telegram.tgnet.TLRPC$InputChannel):void");
    }

    public /* synthetic */ void lambda$getChannelDifference$231$MessagesController(int i, int i2, long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        TLRPC$Chat tLRPC$Chat;
        int i3 = i;
        long j2 = j;
        TLRPC$TL_error tLRPC$TL_error2 = tLRPC$TL_error;
        if (tLObject != null) {
            TLRPC$updates_ChannelDifference tLRPC$updates_ChannelDifference = (TLRPC$updates_ChannelDifference) tLObject;
            SparseArray sparseArray = new SparseArray();
            int i4 = 0;
            for (int i5 = 0; i5 < tLRPC$updates_ChannelDifference.users.size(); i5++) {
                TLRPC$User tLRPC$User = tLRPC$updates_ChannelDifference.users.get(i5);
                sparseArray.put(tLRPC$User.id, tLRPC$User);
            }
            int i6 = 0;
            while (true) {
                if (i6 >= tLRPC$updates_ChannelDifference.chats.size()) {
                    tLRPC$Chat = null;
                    break;
                }
                tLRPC$Chat = tLRPC$updates_ChannelDifference.chats.get(i6);
                if (tLRPC$Chat.id == i3) {
                    break;
                }
                i6++;
            }
            ArrayList arrayList = new ArrayList();
            if (!tLRPC$updates_ChannelDifference.other_updates.isEmpty()) {
                while (i4 < tLRPC$updates_ChannelDifference.other_updates.size()) {
                    TLRPC$Update tLRPC$Update = tLRPC$updates_ChannelDifference.other_updates.get(i4);
                    if (tLRPC$Update instanceof TLRPC$TL_updateMessageID) {
                        arrayList.add((TLRPC$TL_updateMessageID) tLRPC$Update);
                        tLRPC$updates_ChannelDifference.other_updates.remove(i4);
                        i4--;
                    }
                    i4++;
                }
            }
            getMessagesStorage().putUsersAndChats(tLRPC$updates_ChannelDifference.users, tLRPC$updates_ChannelDifference.chats, true, true);
            AndroidUtilities.runOnUIThread(new Runnable(tLRPC$updates_ChannelDifference) {
                private final /* synthetic */ TLRPC$updates_ChannelDifference f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$223$MessagesController(this.f$1);
                }
            });
            getMessagesStorage().getStorageQueue().postRunnable(new Runnable(arrayList, i, tLRPC$updates_ChannelDifference, tLRPC$Chat, sparseArray, i2, j) {
                private final /* synthetic */ ArrayList f$1;
                private final /* synthetic */ int f$2;
                private final /* synthetic */ TLRPC$updates_ChannelDifference f$3;
                private final /* synthetic */ TLRPC$Chat f$4;
                private final /* synthetic */ SparseArray f$5;
                private final /* synthetic */ int f$6;
                private final /* synthetic */ long f$7;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r5;
                    this.f$5 = r6;
                    this.f$6 = r7;
                    this.f$7 = r8;
                }

                public final void run() {
                    MessagesController.this.lambda$null$229$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7);
                }
            });
        } else if (tLRPC$TL_error2 != null) {
            AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_error2, i) {
                private final /* synthetic */ TLRPC$TL_error f$1;
                private final /* synthetic */ int f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    MessagesController.this.lambda$null$230$MessagesController(this.f$1, this.f$2);
                }
            });
            this.gettingDifferenceChannels.delete(i);
            if (j2 != 0) {
                getMessagesStorage().removePendingTask(j2);
            }
        }
    }

    public /* synthetic */ void lambda$null$223$MessagesController(TLRPC$updates_ChannelDifference tLRPC$updates_ChannelDifference) {
        putUsers(tLRPC$updates_ChannelDifference.users, false);
        putChats(tLRPC$updates_ChannelDifference.chats, false);
    }

    public /* synthetic */ void lambda$null$229$MessagesController(ArrayList arrayList, int i, TLRPC$updates_ChannelDifference tLRPC$updates_ChannelDifference, TLRPC$Chat tLRPC$Chat, SparseArray sparseArray, int i2, long j) {
        if (!arrayList.isEmpty()) {
            SparseArray sparseArray2 = new SparseArray();
            Iterator it = arrayList.iterator();
            while (it.hasNext()) {
                TLRPC$TL_updateMessageID tLRPC$TL_updateMessageID = (TLRPC$TL_updateMessageID) it.next();
                long[] updateMessageStateAndId = getMessagesStorage().updateMessageStateAndId(tLRPC$TL_updateMessageID.random_id, (Integer) null, tLRPC$TL_updateMessageID.id, 0, false, i, -1);
                if (updateMessageStateAndId != null) {
                    sparseArray2.put(tLRPC$TL_updateMessageID.id, updateMessageStateAndId);
                }
            }
            if (sparseArray2.size() != 0) {
                AndroidUtilities.runOnUIThread(new Runnable(sparseArray2) {
                    private final /* synthetic */ SparseArray f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run() {
                        MessagesController.this.lambda$null$224$MessagesController(this.f$1);
                    }
                });
                Utilities.stageQueue.postRunnable(new Runnable(tLRPC$updates_ChannelDifference, i, tLRPC$Chat, sparseArray, i2, j) {
                    private final /* synthetic */ TLRPC$updates_ChannelDifference f$1;
                    private final /* synthetic */ int f$2;
                    private final /* synthetic */ TLRPC$Chat f$3;
                    private final /* synthetic */ SparseArray f$4;
                    private final /* synthetic */ int f$5;
                    private final /* synthetic */ long f$6;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                        this.f$3 = r4;
                        this.f$4 = r5;
                        this.f$5 = r6;
                        this.f$6 = r7;
                    }

                    public final void run() {
                        MessagesController.this.lambda$null$228$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
                    }
                });
            }
        }
        Utilities.stageQueue.postRunnable(new Runnable(tLRPC$updates_ChannelDifference, i, tLRPC$Chat, sparseArray, i2, j) {
            private final /* synthetic */ TLRPC$updates_ChannelDifference f$1;
            private final /* synthetic */ int f$2;
            private final /* synthetic */ TLRPC$Chat f$3;
            private final /* synthetic */ SparseArray f$4;
            private final /* synthetic */ int f$5;
            private final /* synthetic */ long f$6;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
            }

            public final void run() {
                MessagesController.this.lambda$null$228$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
            }
        });
    }

    public /* synthetic */ void lambda$null$224$MessagesController(SparseArray sparseArray) {
        for (int i = 0; i < sparseArray.size(); i++) {
            int keyAt = sparseArray.keyAt(i);
            long[] jArr = (long[]) sparseArray.valueAt(i);
            int i2 = (int) jArr[1];
            getSendMessagesHelper().processSentMessage(i2);
            getNotificationCenter().postNotificationName(NotificationCenter.messageReceivedByServer, Integer.valueOf(i2), Integer.valueOf(keyAt), null, Long.valueOf(jArr[0]), 0L, -1, false);
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:100:0x018f A[SYNTHETIC] */
    /* JADX WARNING: Removed duplicated region for block: B:64:0x014b  */
    /* JADX WARNING: Removed duplicated region for block: B:65:0x0153  */
    /* JADX WARNING: Removed duplicated region for block: B:75:0x0187  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$null$228$MessagesController(org.telegram.tgnet.TLRPC$updates_ChannelDifference r17, int r18, org.telegram.tgnet.TLRPC$Chat r19, android.util.SparseArray r20, int r21, long r22) {
        /*
            r16 = this;
            r6 = r16
            r7 = r17
            r8 = r18
            r0 = r19
            r9 = r22
            boolean r1 = r7 instanceof org.telegram.tgnet.TLRPC$TL_updates_channelDifference
            r2 = -2147483648(0xfffffffvar_, float:-0.0)
            r3 = 0
            r11 = 1
            if (r1 != 0) goto L_0x00b4
            boolean r1 = r7 instanceof org.telegram.tgnet.TLRPC$TL_updates_channelDifferenceEmpty
            if (r1 == 0) goto L_0x0018
            goto L_0x00b4
        L_0x0018:
            boolean r1 = r7 instanceof org.telegram.tgnet.TLRPC$TL_updates_channelDifferenceTooLong
            if (r1 == 0) goto L_0x01d7
            int r1 = -r8
            long r4 = (long) r1
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r6.dialogs_read_inbox_max
            java.lang.Long r12 = java.lang.Long.valueOf(r4)
            java.lang.Object r1 = r1.get(r12)
            java.lang.Integer r1 = (java.lang.Integer) r1
            if (r1 != 0) goto L_0x0041
            org.telegram.messenger.MessagesStorage r1 = r16.getMessagesStorage()
            int r1 = r1.getDialogReadMax(r3, r4)
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r12 = r6.dialogs_read_inbox_max
            java.lang.Long r13 = java.lang.Long.valueOf(r4)
            r12.put(r13, r1)
        L_0x0041:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r12 = r6.dialogs_read_outbox_max
            java.lang.Long r13 = java.lang.Long.valueOf(r4)
            java.lang.Object r12 = r12.get(r13)
            java.lang.Integer r12 = (java.lang.Integer) r12
            if (r12 != 0) goto L_0x0064
            org.telegram.messenger.MessagesStorage r12 = r16.getMessagesStorage()
            int r12 = r12.getDialogReadMax(r11, r4)
            java.lang.Integer r12 = java.lang.Integer.valueOf(r12)
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r13 = r6.dialogs_read_outbox_max
            java.lang.Long r14 = java.lang.Long.valueOf(r4)
            r13.put(r14, r12)
        L_0x0064:
            r13 = 0
        L_0x0065:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r14 = r7.messages
            int r14 = r14.size()
            if (r13 >= r14) goto L_0x00a6
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r14 = r7.messages
            java.lang.Object r14 = r14.get(r13)
            org.telegram.tgnet.TLRPC$Message r14 = (org.telegram.tgnet.TLRPC$Message) r14
            r14.dialog_id = r4
            org.telegram.tgnet.TLRPC$MessageAction r15 = r14.action
            boolean r15 = r15 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChannelCreate
            if (r15 != 0) goto L_0x0094
            if (r0 == 0) goto L_0x0083
            boolean r15 = r0.left
            if (r15 != 0) goto L_0x0094
        L_0x0083:
            boolean r15 = r14.out
            if (r15 == 0) goto L_0x0089
            r15 = r12
            goto L_0x008a
        L_0x0089:
            r15 = r1
        L_0x008a:
            int r15 = r15.intValue()
            int r11 = r14.id
            if (r15 >= r11) goto L_0x0094
            r11 = 1
            goto L_0x0095
        L_0x0094:
            r11 = 0
        L_0x0095:
            r14.unread = r11
            if (r0 == 0) goto L_0x00a2
            boolean r11 = r0.megagroup
            if (r11 == 0) goto L_0x00a2
            int r11 = r14.flags
            r11 = r11 | r2
            r14.flags = r11
        L_0x00a2:
            int r13 = r13 + 1
            r11 = 1
            goto L_0x0065
        L_0x00a6:
            org.telegram.messenger.MessagesStorage r0 = r16.getMessagesStorage()
            r1 = r7
            org.telegram.tgnet.TLRPC$TL_updates_channelDifferenceTooLong r1 = (org.telegram.tgnet.TLRPC$TL_updates_channelDifferenceTooLong) r1
            r2 = r21
            r0.overwriteChannel(r8, r1, r2)
            goto L_0x01d7
        L_0x00b4:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r7.new_messages
            boolean r1 = r1.isEmpty()
            if (r1 != 0) goto L_0x01b5
            android.util.LongSparseArray r1 = new android.util.LongSparseArray
            r1.<init>()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r4 = r7.new_messages
            org.telegram.messenger.ImageLoader.saveMessagesThumbs(r4)
            java.util.ArrayList r4 = new java.util.ArrayList
            r4.<init>()
            int r5 = -r8
            long r11 = (long) r5
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r5 = r6.dialogs_read_inbox_max
            java.lang.Long r13 = java.lang.Long.valueOf(r11)
            java.lang.Object r5 = r5.get(r13)
            java.lang.Integer r5 = (java.lang.Integer) r5
            if (r5 != 0) goto L_0x00f0
            org.telegram.messenger.MessagesStorage r5 = r16.getMessagesStorage()
            int r5 = r5.getDialogReadMax(r3, r11)
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r13 = r6.dialogs_read_inbox_max
            java.lang.Long r14 = java.lang.Long.valueOf(r11)
            r13.put(r14, r5)
        L_0x00f0:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r13 = r6.dialogs_read_outbox_max
            java.lang.Long r14 = java.lang.Long.valueOf(r11)
            java.lang.Object r13 = r13.get(r14)
            java.lang.Integer r13 = (java.lang.Integer) r13
            if (r13 != 0) goto L_0x0114
            org.telegram.messenger.MessagesStorage r13 = r16.getMessagesStorage()
            r14 = 1
            int r13 = r13.getDialogReadMax(r14, r11)
            java.lang.Integer r13 = java.lang.Integer.valueOf(r13)
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r14 = r6.dialogs_read_outbox_max
            java.lang.Long r15 = java.lang.Long.valueOf(r11)
            r14.put(r15, r13)
        L_0x0114:
            r14 = 0
        L_0x0115:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r15 = r7.new_messages
            int r15 = r15.size()
            if (r14 >= r15) goto L_0x019d
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r15 = r7.new_messages
            java.lang.Object r15 = r15.get(r14)
            org.telegram.tgnet.TLRPC$Message r15 = (org.telegram.tgnet.TLRPC$Message) r15
            if (r0 == 0) goto L_0x012b
            boolean r3 = r0.left
            if (r3 != 0) goto L_0x0142
        L_0x012b:
            boolean r3 = r15.out
            if (r3 == 0) goto L_0x0131
            r3 = r13
            goto L_0x0132
        L_0x0131:
            r3 = r5
        L_0x0132:
            int r3 = r3.intValue()
            int r2 = r15.id
            if (r3 >= r2) goto L_0x0142
            org.telegram.tgnet.TLRPC$MessageAction r2 = r15.action
            boolean r2 = r2 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChannelCreate
            if (r2 != 0) goto L_0x0142
            r2 = 1
            goto L_0x0143
        L_0x0142:
            r2 = 0
        L_0x0143:
            r15.unread = r2
            if (r0 == 0) goto L_0x0153
            boolean r2 = r0.megagroup
            if (r2 == 0) goto L_0x0153
            int r2 = r15.flags
            r3 = -2147483648(0xfffffffvar_, float:-0.0)
            r2 = r2 | r3
            r15.flags = r2
            goto L_0x0155
        L_0x0153:
            r3 = -2147483648(0xfffffffvar_, float:-0.0)
        L_0x0155:
            org.telegram.messenger.MessageObject r2 = new org.telegram.messenger.MessageObject
            int r3 = r6.currentAccount
            java.util.ArrayList<java.lang.Long> r0 = r6.createdDialogIds
            r21 = r5
            java.lang.Long r5 = java.lang.Long.valueOf(r11)
            boolean r0 = r0.contains(r5)
            r5 = r20
            r2.<init>((int) r3, (org.telegram.tgnet.TLRPC$Message) r15, (android.util.SparseArray<org.telegram.tgnet.TLRPC$User>) r5, (boolean) r0)
            boolean r0 = r2.isOut()
            if (r0 == 0) goto L_0x0176
            org.telegram.tgnet.TLRPC$Message r0 = r2.messageOwner
            boolean r0 = r0.from_scheduled
            if (r0 == 0) goto L_0x017f
        L_0x0176:
            boolean r0 = r2.isUnread()
            if (r0 == 0) goto L_0x017f
            r4.add(r2)
        L_0x017f:
            java.lang.Object r0 = r1.get(r11)
            java.util.ArrayList r0 = (java.util.ArrayList) r0
            if (r0 != 0) goto L_0x018f
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r1.put(r11, r0)
        L_0x018f:
            r0.add(r2)
            int r14 = r14 + 1
            r0 = r19
            r5 = r21
            r2 = -2147483648(0xfffffffvar_, float:-0.0)
            r3 = 0
            goto L_0x0115
        L_0x019d:
            org.telegram.messenger.-$$Lambda$MessagesController$TT-ggbvUIZp2v4t2BF3J6hO_OpY r0 = new org.telegram.messenger.-$$Lambda$MessagesController$TT-ggbvUIZp2v4t2BF3J6hO_OpY
            r0.<init>(r1)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r0)
            org.telegram.messenger.MessagesStorage r0 = r16.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r0 = r0.getStorageQueue()
            org.telegram.messenger.-$$Lambda$MessagesController$-CHVG4I-041ye9ieAiKMLdJ7Fik r1 = new org.telegram.messenger.-$$Lambda$MessagesController$-CHVG4I-041ye9ieAiKMLdJ7Fik
            r1.<init>(r4, r7)
            r0.postRunnable(r1)
        L_0x01b5:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r0 = r7.other_updates
            boolean r0 = r0.isEmpty()
            if (r0 != 0) goto L_0x01ca
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r7.other_updates
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r7.users
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r3 = r7.chats
            r4 = 1
            r5 = 0
            r0 = r16
            r0.processUpdateArray(r1, r2, r3, r4, r5)
        L_0x01ca:
            r0 = 1
            r6.processChannelsUpdatesQueue(r8, r0)
            org.telegram.messenger.MessagesStorage r0 = r16.getMessagesStorage()
            int r1 = r7.pts
            r0.saveChannelPts(r8, r1)
        L_0x01d7:
            android.util.SparseBooleanArray r0 = r6.gettingDifferenceChannels
            r0.delete(r8)
            android.util.SparseIntArray r0 = r6.channelsPts
            int r1 = r7.pts
            r0.put(r8, r1)
            int r0 = r7.flags
            r0 = r0 & 2
            if (r0 == 0) goto L_0x01f9
            android.util.SparseIntArray r0 = r6.shortPollChannels
            long r1 = java.lang.System.currentTimeMillis()
            r3 = 1000(0x3e8, double:4.94E-321)
            long r1 = r1 / r3
            int r2 = (int) r1
            int r1 = r7.timeout
            int r2 = r2 + r1
            r0.put(r8, r2)
        L_0x01f9:
            boolean r0 = r7.isFinal
            if (r0 != 0) goto L_0x0200
            r6.getChannelDifference(r8)
        L_0x0200:
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0274
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "received channel difference with pts = "
            r0.append(r1)
            int r1 = r7.pts
            r0.append(r1)
            java.lang.String r1 = " channelId = "
            r0.append(r1)
            r0.append(r8)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "new_messages = "
            r0.append(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r7.new_messages
            int r1 = r1.size()
            r0.append(r1)
            java.lang.String r1 = " messages = "
            r0.append(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r7.messages
            int r1 = r1.size()
            r0.append(r1)
            java.lang.String r1 = " users = "
            r0.append(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r1 = r7.users
            int r1 = r1.size()
            r0.append(r1)
            java.lang.String r1 = " chats = "
            r0.append(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r1 = r7.chats
            int r1 = r1.size()
            r0.append(r1)
            java.lang.String r1 = " other updates = "
            r0.append(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r7.other_updates
            int r1 = r1.size()
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x0274:
            r0 = 0
            int r2 = (r9 > r0 ? 1 : (r9 == r0 ? 0 : -1))
            if (r2 == 0) goto L_0x0281
            org.telegram.messenger.MessagesStorage r0 = r16.getMessagesStorage()
            r0.removePendingTask(r9)
        L_0x0281:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$null$228$MessagesController(org.telegram.tgnet.TLRPC$updates_ChannelDifference, int, org.telegram.tgnet.TLRPC$Chat, android.util.SparseArray, int, long):void");
    }

    public /* synthetic */ void lambda$null$225$MessagesController(LongSparseArray longSparseArray) {
        for (int i = 0; i < longSparseArray.size(); i++) {
            updateInterfaceWithMessages(longSparseArray.keyAt(i), (ArrayList) longSparseArray.valueAt(i), false);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    public /* synthetic */ void lambda$null$227$MessagesController(ArrayList arrayList, TLRPC$updates_ChannelDifference tLRPC$updates_ChannelDifference) {
        if (!arrayList.isEmpty()) {
            AndroidUtilities.runOnUIThread(new Runnable(arrayList) {
                private final /* synthetic */ ArrayList f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$226$MessagesController(this.f$1);
                }
            });
        }
        getMessagesStorage().putMessages(tLRPC$updates_ChannelDifference.new_messages, true, false, false, getDownloadController().getAutodownloadMask(), false);
    }

    public /* synthetic */ void lambda$null$226$MessagesController(ArrayList arrayList) {
        getNotificationsController().processNewMessages(arrayList, true, false, (CountDownLatch) null);
    }

    public /* synthetic */ void lambda$null$230$MessagesController(TLRPC$TL_error tLRPC$TL_error, int i) {
        checkChannelError(tLRPC$TL_error.text, i);
    }

    /* JADX WARNING: Removed duplicated region for block: B:17:0x0038  */
    /* JADX WARNING: Removed duplicated region for block: B:21:0x006d  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void checkChannelError(java.lang.String r6, int r7) {
        /*
            r5 = this;
            int r0 = r6.hashCode()
            r1 = -1809401834(0xfffffffvar_b816, float:-8.417163E-27)
            r2 = 0
            r3 = 2
            r4 = 1
            if (r0 == r1) goto L_0x002b
            r1 = -795226617(0xffffffffd099ce07, float:-2.064333E10)
            if (r0 == r1) goto L_0x0021
            r1 = -471086771(0xffffffffe3ebCLASSNAMEd, float:-8.69898E21)
            if (r0 == r1) goto L_0x0017
            goto L_0x0035
        L_0x0017:
            java.lang.String r0 = "CHANNEL_PUBLIC_GROUP_NA"
            boolean r6 = r6.equals(r0)
            if (r6 == 0) goto L_0x0035
            r6 = 1
            goto L_0x0036
        L_0x0021:
            java.lang.String r0 = "CHANNEL_PRIVATE"
            boolean r6 = r6.equals(r0)
            if (r6 == 0) goto L_0x0035
            r6 = 0
            goto L_0x0036
        L_0x002b:
            java.lang.String r0 = "USER_BANNED_IN_CHANNEL"
            boolean r6 = r6.equals(r0)
            if (r6 == 0) goto L_0x0035
            r6 = 2
            goto L_0x0036
        L_0x0035:
            r6 = -1
        L_0x0036:
            if (r6 == 0) goto L_0x006d
            if (r6 == r4) goto L_0x0055
            if (r6 == r3) goto L_0x003d
            goto L_0x0084
        L_0x003d:
            org.telegram.messenger.NotificationCenter r6 = r5.getNotificationCenter()
            int r0 = org.telegram.messenger.NotificationCenter.chatInfoCantLoad
            java.lang.Object[] r1 = new java.lang.Object[r3]
            java.lang.Integer r7 = java.lang.Integer.valueOf(r7)
            r1[r2] = r7
            java.lang.Integer r7 = java.lang.Integer.valueOf(r3)
            r1[r4] = r7
            r6.postNotificationName(r0, r1)
            goto L_0x0084
        L_0x0055:
            org.telegram.messenger.NotificationCenter r6 = r5.getNotificationCenter()
            int r0 = org.telegram.messenger.NotificationCenter.chatInfoCantLoad
            java.lang.Object[] r1 = new java.lang.Object[r3]
            java.lang.Integer r7 = java.lang.Integer.valueOf(r7)
            r1[r2] = r7
            java.lang.Integer r7 = java.lang.Integer.valueOf(r4)
            r1[r4] = r7
            r6.postNotificationName(r0, r1)
            goto L_0x0084
        L_0x006d:
            org.telegram.messenger.NotificationCenter r6 = r5.getNotificationCenter()
            int r0 = org.telegram.messenger.NotificationCenter.chatInfoCantLoad
            java.lang.Object[] r1 = new java.lang.Object[r3]
            java.lang.Integer r7 = java.lang.Integer.valueOf(r7)
            r1[r2] = r7
            java.lang.Integer r7 = java.lang.Integer.valueOf(r2)
            r1[r4] = r7
            r6.postNotificationName(r0, r1)
        L_0x0084:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.checkChannelError(java.lang.String, int):void");
    }

    public void getDifference() {
        getDifference(getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue(), false);
    }

    public void getDifference(int i, int i2, int i3, boolean z) {
        registerForPush(SharedConfig.pushString);
        if (getMessagesStorage().getLastPtsValue() == 0) {
            loadCurrentState();
        } else if (z || !this.gettingDifference) {
            this.gettingDifference = true;
            TLRPC$TL_updates_getDifference tLRPC$TL_updates_getDifference = new TLRPC$TL_updates_getDifference();
            tLRPC$TL_updates_getDifference.pts = i;
            tLRPC$TL_updates_getDifference.date = i2;
            tLRPC$TL_updates_getDifference.qts = i3;
            if (this.getDifferenceFirstSync) {
                tLRPC$TL_updates_getDifference.flags |= 1;
                if (ApplicationLoader.isConnectedOrConnectingToWiFi()) {
                    tLRPC$TL_updates_getDifference.pts_total_limit = 5000;
                } else {
                    tLRPC$TL_updates_getDifference.pts_total_limit = 1000;
                }
                this.getDifferenceFirstSync = false;
            }
            if (tLRPC$TL_updates_getDifference.date == 0) {
                tLRPC$TL_updates_getDifference.date = getConnectionsManager().getCurrentTime();
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("start getDifference with date = " + i2 + " pts = " + i + " qts = " + i3);
            }
            getConnectionsManager().setIsUpdating(true);
            getConnectionsManager().sendRequest(tLRPC$TL_updates_getDifference, new RequestDelegate(i2, i3) {
                private final /* synthetic */ int f$1;
                private final /* synthetic */ int f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$getDifference$240$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$getDifference$240$MessagesController(int i, int i2, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        int i3 = 0;
        if (tLRPC$TL_error == null) {
            TLRPC$updates_Difference tLRPC$updates_Difference = (TLRPC$updates_Difference) tLObject;
            if (tLRPC$updates_Difference instanceof TLRPC$TL_updates_differenceTooLong) {
                AndroidUtilities.runOnUIThread(new Runnable(tLRPC$updates_Difference, i, i2) {
                    private final /* synthetic */ TLRPC$updates_Difference f$1;
                    private final /* synthetic */ int f$2;
                    private final /* synthetic */ int f$3;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                        this.f$3 = r4;
                    }

                    public final void run() {
                        MessagesController.this.lambda$null$232$MessagesController(this.f$1, this.f$2, this.f$3);
                    }
                });
                return;
            }
            if (tLRPC$updates_Difference instanceof TLRPC$TL_updates_differenceSlice) {
                TLRPC$TL_updates_state tLRPC$TL_updates_state = tLRPC$updates_Difference.intermediate_state;
                getDifference(tLRPC$TL_updates_state.pts, tLRPC$TL_updates_state.date, tLRPC$TL_updates_state.qts, true);
            }
            SparseArray sparseArray = new SparseArray();
            SparseArray sparseArray2 = new SparseArray();
            for (int i4 = 0; i4 < tLRPC$updates_Difference.users.size(); i4++) {
                TLRPC$User tLRPC$User = tLRPC$updates_Difference.users.get(i4);
                sparseArray.put(tLRPC$User.id, tLRPC$User);
            }
            for (int i5 = 0; i5 < tLRPC$updates_Difference.chats.size(); i5++) {
                TLRPC$Chat tLRPC$Chat = tLRPC$updates_Difference.chats.get(i5);
                sparseArray2.put(tLRPC$Chat.id, tLRPC$Chat);
            }
            ArrayList arrayList = new ArrayList();
            if (!tLRPC$updates_Difference.other_updates.isEmpty()) {
                while (i3 < tLRPC$updates_Difference.other_updates.size()) {
                    TLRPC$Update tLRPC$Update = tLRPC$updates_Difference.other_updates.get(i3);
                    if (tLRPC$Update instanceof TLRPC$TL_updateMessageID) {
                        arrayList.add((TLRPC$TL_updateMessageID) tLRPC$Update);
                        tLRPC$updates_Difference.other_updates.remove(i3);
                    } else {
                        if (getUpdateType(tLRPC$Update) == 2) {
                            int updateChannelId = getUpdateChannelId(tLRPC$Update);
                            int i6 = this.channelsPts.get(updateChannelId);
                            if (i6 == 0 && (i6 = getMessagesStorage().getChannelPtsSync(updateChannelId)) != 0) {
                                this.channelsPts.put(updateChannelId, i6);
                            }
                            if (i6 != 0 && getUpdatePts(tLRPC$Update) <= i6) {
                                tLRPC$updates_Difference.other_updates.remove(i3);
                            }
                        }
                        i3++;
                    }
                    i3--;
                    i3++;
                }
            }
            AndroidUtilities.runOnUIThread(new Runnable(tLRPC$updates_Difference) {
                private final /* synthetic */ TLRPC$updates_Difference f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$233$MessagesController(this.f$1);
                }
            });
            getMessagesStorage().getStorageQueue().postRunnable(new Runnable(tLRPC$updates_Difference, arrayList, sparseArray, sparseArray2) {
                private final /* synthetic */ TLRPC$updates_Difference f$1;
                private final /* synthetic */ ArrayList f$2;
                private final /* synthetic */ SparseArray f$3;
                private final /* synthetic */ SparseArray f$4;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r5;
                }

                public final void run() {
                    MessagesController.this.lambda$null$239$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4);
                }
            });
            return;
        }
        this.gettingDifference = false;
        getConnectionsManager().setIsUpdating(false);
    }

    public /* synthetic */ void lambda$null$232$MessagesController(TLRPC$updates_Difference tLRPC$updates_Difference, int i, int i2) {
        this.loadedFullUsers.clear();
        this.loadedFullChats.clear();
        resetDialogs(true, getMessagesStorage().getLastSeqValue(), tLRPC$updates_Difference.pts, i, i2);
    }

    public /* synthetic */ void lambda$null$233$MessagesController(TLRPC$updates_Difference tLRPC$updates_Difference) {
        this.loadedFullUsers.clear();
        this.loadedFullChats.clear();
        putUsers(tLRPC$updates_Difference.users, false);
        putChats(tLRPC$updates_Difference.chats, false);
    }

    public /* synthetic */ void lambda$null$239$MessagesController(TLRPC$updates_Difference tLRPC$updates_Difference, ArrayList arrayList, SparseArray sparseArray, SparseArray sparseArray2) {
        TLRPC$updates_Difference tLRPC$updates_Difference2 = tLRPC$updates_Difference;
        getMessagesStorage().putUsersAndChats(tLRPC$updates_Difference2.users, tLRPC$updates_Difference2.chats, true, false);
        if (!arrayList.isEmpty()) {
            SparseArray sparseArray3 = new SparseArray();
            for (int i = 0; i < arrayList.size(); i++) {
                TLRPC$TL_updateMessageID tLRPC$TL_updateMessageID = (TLRPC$TL_updateMessageID) arrayList.get(i);
                long[] updateMessageStateAndId = getMessagesStorage().updateMessageStateAndId(tLRPC$TL_updateMessageID.random_id, (Integer) null, tLRPC$TL_updateMessageID.id, 0, false, 0, -1);
                if (updateMessageStateAndId != null) {
                    sparseArray3.put(tLRPC$TL_updateMessageID.id, updateMessageStateAndId);
                }
            }
            if (sparseArray3.size() != 0) {
                AndroidUtilities.runOnUIThread(new Runnable(sparseArray3) {
                    private final /* synthetic */ SparseArray f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run() {
                        MessagesController.this.lambda$null$234$MessagesController(this.f$1);
                    }
                });
            }
        }
        Utilities.stageQueue.postRunnable(new Runnable(tLRPC$updates_Difference2, sparseArray, sparseArray2) {
            private final /* synthetic */ TLRPC$updates_Difference f$1;
            private final /* synthetic */ SparseArray f$2;
            private final /* synthetic */ SparseArray f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesController.this.lambda$null$238$MessagesController(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    public /* synthetic */ void lambda$null$234$MessagesController(SparseArray sparseArray) {
        for (int i = 0; i < sparseArray.size(); i++) {
            int keyAt = sparseArray.keyAt(i);
            long[] jArr = (long[]) sparseArray.valueAt(i);
            int i2 = (int) jArr[1];
            getSendMessagesHelper().processSentMessage(i2);
            getNotificationCenter().postNotificationName(NotificationCenter.messageReceivedByServer, Integer.valueOf(i2), Integer.valueOf(keyAt), null, Long.valueOf(jArr[0]), 0L, -1, false);
        }
    }

    public /* synthetic */ void lambda$null$238$MessagesController(TLRPC$updates_Difference tLRPC$updates_Difference, SparseArray sparseArray, SparseArray sparseArray2) {
        TLRPC$updates_Difference tLRPC$updates_Difference2 = tLRPC$updates_Difference;
        int i = 0;
        if (!tLRPC$updates_Difference2.new_messages.isEmpty() || !tLRPC$updates_Difference2.new_encrypted_messages.isEmpty()) {
            LongSparseArray longSparseArray = new LongSparseArray();
            for (int i2 = 0; i2 < tLRPC$updates_Difference2.new_encrypted_messages.size(); i2++) {
                ArrayList<TLRPC$Message> decryptMessage = getSecretChatHelper().decryptMessage(tLRPC$updates_Difference2.new_encrypted_messages.get(i2));
                if (decryptMessage != null && !decryptMessage.isEmpty()) {
                    tLRPC$updates_Difference2.new_messages.addAll(decryptMessage);
                }
            }
            ImageLoader.saveMessagesThumbs(tLRPC$updates_Difference2.new_messages);
            ArrayList arrayList = new ArrayList();
            int clientUserId = getUserConfig().getClientUserId();
            for (int i3 = 0; i3 < tLRPC$updates_Difference2.new_messages.size(); i3++) {
                TLRPC$Message tLRPC$Message = tLRPC$updates_Difference2.new_messages.get(i3);
                if (tLRPC$Message.dialog_id == 0) {
                    TLRPC$Peer tLRPC$Peer = tLRPC$Message.to_id;
                    int i4 = tLRPC$Peer.chat_id;
                    if (i4 != 0) {
                        tLRPC$Message.dialog_id = (long) (-i4);
                    } else {
                        if (tLRPC$Peer.user_id == getUserConfig().getClientUserId()) {
                            tLRPC$Message.to_id.user_id = tLRPC$Message.from_id;
                        }
                        tLRPC$Message.dialog_id = (long) tLRPC$Message.to_id.user_id;
                    }
                }
                if (((int) tLRPC$Message.dialog_id) != 0) {
                    TLRPC$MessageAction tLRPC$MessageAction = tLRPC$Message.action;
                    if (tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatDeleteUser) {
                        TLRPC$User tLRPC$User = (TLRPC$User) sparseArray.get(tLRPC$MessageAction.user_id);
                        if (tLRPC$User != null && tLRPC$User.bot) {
                            tLRPC$Message.reply_markup = new TLRPC$TL_replyKeyboardHide();
                            tLRPC$Message.flags |= 64;
                        }
                    } else {
                        SparseArray sparseArray3 = sparseArray;
                    }
                    TLRPC$MessageAction tLRPC$MessageAction2 = tLRPC$Message.action;
                    if ((tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChatMigrateTo) || (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionChannelCreate)) {
                        tLRPC$Message.unread = false;
                        tLRPC$Message.media_unread = false;
                    } else {
                        ConcurrentHashMap<Long, Integer> concurrentHashMap = tLRPC$Message.out ? this.dialogs_read_outbox_max : this.dialogs_read_inbox_max;
                        Integer num = concurrentHashMap.get(Long.valueOf(tLRPC$Message.dialog_id));
                        if (num == null) {
                            num = Integer.valueOf(getMessagesStorage().getDialogReadMax(tLRPC$Message.out, tLRPC$Message.dialog_id));
                            concurrentHashMap.put(Long.valueOf(tLRPC$Message.dialog_id), num);
                        }
                        tLRPC$Message.unread = num.intValue() < tLRPC$Message.id;
                    }
                } else {
                    SparseArray sparseArray4 = sparseArray;
                }
                if (tLRPC$Message.dialog_id == ((long) clientUserId)) {
                    tLRPC$Message.unread = false;
                    tLRPC$Message.media_unread = false;
                    tLRPC$Message.out = true;
                }
                MessageObject messageObject = new MessageObject(this.currentAccount, tLRPC$Message, (SparseArray<TLRPC$User>) sparseArray, (SparseArray<TLRPC$Chat>) sparseArray2, this.createdDialogIds.contains(Long.valueOf(tLRPC$Message.dialog_id)));
                if ((!messageObject.isOut() || messageObject.messageOwner.from_scheduled) && messageObject.isUnread()) {
                    arrayList.add(messageObject);
                }
                ArrayList arrayList2 = (ArrayList) longSparseArray.get(tLRPC$Message.dialog_id);
                if (arrayList2 == null) {
                    arrayList2 = new ArrayList();
                    longSparseArray.put(tLRPC$Message.dialog_id, arrayList2);
                }
                arrayList2.add(messageObject);
            }
            AndroidUtilities.runOnUIThread(new Runnable(longSparseArray) {
                private final /* synthetic */ LongSparseArray f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesController.this.lambda$null$235$MessagesController(this.f$1);
                }
            });
            getMessagesStorage().getStorageQueue().postRunnable(new Runnable(arrayList, tLRPC$updates_Difference2) {
                private final /* synthetic */ ArrayList f$1;
                private final /* synthetic */ TLRPC$updates_Difference f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    MessagesController.this.lambda$null$237$MessagesController(this.f$1, this.f$2);
                }
            });
            getSecretChatHelper().processPendingEncMessages();
        }
        if (!tLRPC$updates_Difference2.other_updates.isEmpty()) {
            processUpdateArray(tLRPC$updates_Difference2.other_updates, tLRPC$updates_Difference2.users, tLRPC$updates_Difference2.chats, true, 0);
        }
        if (tLRPC$updates_Difference2 instanceof TLRPC$TL_updates_difference) {
            this.gettingDifference = false;
            getMessagesStorage().setLastSeqValue(tLRPC$updates_Difference2.state.seq);
            getMessagesStorage().setLastDateValue(tLRPC$updates_Difference2.state.date);
            getMessagesStorage().setLastPtsValue(tLRPC$updates_Difference2.state.pts);
            getMessagesStorage().setLastQtsValue(tLRPC$updates_Difference2.state.qts);
            getConnectionsManager().setIsUpdating(false);
            while (i < 3) {
                processUpdatesQueue(i, 1);
                i++;
            }
        } else if (tLRPC$updates_Difference2 instanceof TLRPC$TL_updates_differenceSlice) {
            getMessagesStorage().setLastDateValue(tLRPC$updates_Difference2.intermediate_state.date);
            getMessagesStorage().setLastPtsValue(tLRPC$updates_Difference2.intermediate_state.pts);
            getMessagesStorage().setLastQtsValue(tLRPC$updates_Difference2.intermediate_state.qts);
        } else if (tLRPC$updates_Difference2 instanceof TLRPC$TL_updates_differenceEmpty) {
            this.gettingDifference = false;
            getMessagesStorage().setLastSeqValue(tLRPC$updates_Difference2.seq);
            getMessagesStorage().setLastDateValue(tLRPC$updates_Difference2.date);
            getConnectionsManager().setIsUpdating(false);
            while (i < 3) {
                processUpdatesQueue(i, 1);
                i++;
            }
        }
        getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("received difference with date = " + getMessagesStorage().getLastDateValue() + " pts = " + getMessagesStorage().getLastPtsValue() + " seq = " + getMessagesStorage().getLastSeqValue() + " messages = " + tLRPC$updates_Difference2.new_messages.size() + " users = " + tLRPC$updates_Difference2.users.size() + " chats = " + tLRPC$updates_Difference2.chats.size() + " other updates = " + tLRPC$updates_Difference2.other_updates.size());
        }
    }

    public /* synthetic */ void lambda$null$235$MessagesController(LongSparseArray longSparseArray) {
        for (int i = 0; i < longSparseArray.size(); i++) {
            updateInterfaceWithMessages(longSparseArray.keyAt(i), (ArrayList) longSparseArray.valueAt(i), false);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    public /* synthetic */ void lambda$null$237$MessagesController(ArrayList arrayList, TLRPC$updates_Difference tLRPC$updates_Difference) {
        if (!arrayList.isEmpty()) {
            AndroidUtilities.runOnUIThread(new Runnable(arrayList, tLRPC$updates_Difference) {
                private final /* synthetic */ ArrayList f$1;
                private final /* synthetic */ TLRPC$updates_Difference f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    MessagesController.this.lambda$null$236$MessagesController(this.f$1, this.f$2);
                }
            });
        }
        getMessagesStorage().putMessages(tLRPC$updates_Difference.new_messages, true, false, false, getDownloadController().getAutodownloadMask(), false);
    }

    public /* synthetic */ void lambda$null$236$MessagesController(ArrayList arrayList, TLRPC$updates_Difference tLRPC$updates_Difference) {
        getNotificationsController().processNewMessages(arrayList, !(tLRPC$updates_Difference instanceof TLRPC$TL_updates_differenceSlice), false, (CountDownLatch) null);
    }

    public void markDialogAsUnread(long j, TLRPC$InputPeer tLRPC$InputPeer, long j2) {
        NativeByteBuffer nativeByteBuffer;
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
        NativeByteBuffer nativeByteBuffer2 = null;
        if (tLRPC$Dialog != null) {
            tLRPC$Dialog.unread_mark = true;
            if (tLRPC$Dialog.unread_count == 0 && !isDialogMuted(j)) {
                this.unreadUnmutedDialogs++;
            }
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 256);
            getMessagesStorage().setDialogUnread(j, true);
            int i = 0;
            while (true) {
                DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                if (i < dialogFilterArr.length) {
                    if (dialogFilterArr[i] != null && (dialogFilterArr[i].flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                        sortDialogs((SparseArray<TLRPC$Chat>) null);
                        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                        break;
                    }
                    i++;
                } else {
                    break;
                }
            }
        }
        int i2 = (int) j;
        if (i2 != 0) {
            TLRPC$TL_messages_markDialogUnread tLRPC$TL_messages_markDialogUnread = new TLRPC$TL_messages_markDialogUnread();
            tLRPC$TL_messages_markDialogUnread.unread = true;
            if (tLRPC$InputPeer == null) {
                tLRPC$InputPeer = getInputPeer(i2);
            }
            if (!(tLRPC$InputPeer instanceof TLRPC$TL_inputPeerEmpty)) {
                TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
                tLRPC$TL_inputDialogPeer.peer = tLRPC$InputPeer;
                tLRPC$TL_messages_markDialogUnread.peer = tLRPC$TL_inputDialogPeer;
                if (j2 == 0) {
                    try {
                        nativeByteBuffer = new NativeByteBuffer(tLRPC$InputPeer.getObjectSize() + 12);
                        try {
                            nativeByteBuffer.writeInt32(9);
                            nativeByteBuffer.writeInt64(j);
                            tLRPC$InputPeer.serializeToStream(nativeByteBuffer);
                        } catch (Exception e) {
                            e = e;
                            nativeByteBuffer2 = nativeByteBuffer;
                        }
                    } catch (Exception e2) {
                        e = e2;
                        FileLog.e((Throwable) e);
                        nativeByteBuffer = nativeByteBuffer2;
                        j2 = getMessagesStorage().createPendingTask(nativeByteBuffer);
                        getConnectionsManager().sendRequest(tLRPC$TL_messages_markDialogUnread, new RequestDelegate(j2) {
                            private final /* synthetic */ long f$1;

                            {
                                this.f$1 = r2;
                            }

                            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                MessagesController.this.lambda$markDialogAsUnread$241$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                            }
                        });
                    }
                    j2 = getMessagesStorage().createPendingTask(nativeByteBuffer);
                }
                getConnectionsManager().sendRequest(tLRPC$TL_messages_markDialogUnread, new RequestDelegate(j2) {
                    private final /* synthetic */ long f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$markDialogAsUnread$241$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                    }
                });
            }
        }
    }

    public /* synthetic */ void lambda$markDialogAsUnread$241$MessagesController(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public void loadUnreadDialogs() {
        if (!this.loadingUnreadDialogs && !getUserConfig().unreadDialogsLoaded) {
            this.loadingUnreadDialogs = true;
            getConnectionsManager().sendRequest(new TLRPC$TL_messages_getDialogUnreadMarks(), new RequestDelegate() {
                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$loadUnreadDialogs$243$MessagesController(tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$loadUnreadDialogs$243$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable(tLObject) {
            private final /* synthetic */ TLObject f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$242$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$null$242$MessagesController(TLObject tLObject) {
        long j;
        int i;
        if (tLObject != null) {
            TLRPC$Vector tLRPC$Vector = (TLRPC$Vector) tLObject;
            int size = tLRPC$Vector.objects.size();
            for (int i2 = 0; i2 < size; i2++) {
                TLRPC$DialogPeer tLRPC$DialogPeer = (TLRPC$DialogPeer) tLRPC$Vector.objects.get(i2);
                if (tLRPC$DialogPeer instanceof TLRPC$TL_dialogPeer) {
                    TLRPC$Peer tLRPC$Peer = ((TLRPC$TL_dialogPeer) tLRPC$DialogPeer).peer;
                    int i3 = tLRPC$Peer.user_id;
                    if (i3 == 0) {
                        j = 0;
                    } else if (i3 != 0) {
                        j = (long) i3;
                    } else {
                        int i4 = tLRPC$Peer.chat_id;
                        if (i4 != 0) {
                            i = -i4;
                        } else {
                            i = -tLRPC$Peer.channel_id;
                        }
                        j = (long) i;
                    }
                    getMessagesStorage().setDialogUnread(j, true);
                    TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
                    if (tLRPC$Dialog != null && !tLRPC$Dialog.unread_mark) {
                        tLRPC$Dialog.unread_mark = true;
                        if (tLRPC$Dialog.unread_count == 0 && !isDialogMuted(j)) {
                            this.unreadUnmutedDialogs++;
                        }
                    }
                }
            }
            getUserConfig().unreadDialogsLoaded = true;
            getUserConfig().saveConfig(false);
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 256);
            this.loadingUnreadDialogs = false;
        }
    }

    public void reorderPinnedDialogs(int i, ArrayList<TLRPC$InputDialogPeer> arrayList, long j) {
        NativeByteBuffer nativeByteBuffer;
        TLRPC$TL_messages_reorderPinnedDialogs tLRPC$TL_messages_reorderPinnedDialogs = new TLRPC$TL_messages_reorderPinnedDialogs();
        tLRPC$TL_messages_reorderPinnedDialogs.folder_id = i;
        tLRPC$TL_messages_reorderPinnedDialogs.force = true;
        if (j == 0) {
            ArrayList<TLRPC$Dialog> dialogs = getDialogs(i);
            if (!dialogs.isEmpty()) {
                int size = dialogs.size();
                int i2 = 0;
                for (int i3 = 0; i3 < size; i3++) {
                    TLRPC$Dialog tLRPC$Dialog = dialogs.get(i3);
                    if (!(tLRPC$Dialog instanceof TLRPC$TL_dialogFolder)) {
                        if (tLRPC$Dialog.pinned) {
                            getMessagesStorage().setDialogPinned(tLRPC$Dialog.id, tLRPC$Dialog.pinnedNum);
                            if (((int) tLRPC$Dialog.id) != 0) {
                                TLRPC$InputPeer inputPeer = getInputPeer((int) dialogs.get(i3).id);
                                TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
                                tLRPC$TL_inputDialogPeer.peer = inputPeer;
                                tLRPC$TL_messages_reorderPinnedDialogs.order.add(tLRPC$TL_inputDialogPeer);
                                i2 += tLRPC$TL_inputDialogPeer.getObjectSize();
                            }
                        } else if (tLRPC$Dialog.id != this.proxyDialogId) {
                            break;
                        }
                    }
                }
                NativeByteBuffer nativeByteBuffer2 = null;
                try {
                    nativeByteBuffer = new NativeByteBuffer(i2 + 12);
                    try {
                        nativeByteBuffer.writeInt32(16);
                        nativeByteBuffer.writeInt32(i);
                        nativeByteBuffer.writeInt32(tLRPC$TL_messages_reorderPinnedDialogs.order.size());
                        int size2 = tLRPC$TL_messages_reorderPinnedDialogs.order.size();
                        for (int i4 = 0; i4 < size2; i4++) {
                            tLRPC$TL_messages_reorderPinnedDialogs.order.get(i4).serializeToStream(nativeByteBuffer);
                        }
                    } catch (Exception e) {
                        e = e;
                        nativeByteBuffer2 = nativeByteBuffer;
                        FileLog.e((Throwable) e);
                        nativeByteBuffer = nativeByteBuffer2;
                        j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                        getConnectionsManager().sendRequest(tLRPC$TL_messages_reorderPinnedDialogs, new RequestDelegate(j) {
                            private final /* synthetic */ long f$1;

                            {
                                this.f$1 = r2;
                            }

                            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                MessagesController.this.lambda$reorderPinnedDialogs$244$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                            }
                        });
                    }
                } catch (Exception e2) {
                    e = e2;
                    FileLog.e((Throwable) e);
                    nativeByteBuffer = nativeByteBuffer2;
                    j = getMessagesStorage().createPendingTask(nativeByteBuffer);
                    getConnectionsManager().sendRequest(tLRPC$TL_messages_reorderPinnedDialogs, new RequestDelegate(j) {
                        private final /* synthetic */ long f$1;

                        {
                            this.f$1 = r2;
                        }

                        public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                            MessagesController.this.lambda$reorderPinnedDialogs$244$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                        }
                    });
                }
                j = getMessagesStorage().createPendingTask(nativeByteBuffer);
            } else {
                return;
            }
        } else {
            tLRPC$TL_messages_reorderPinnedDialogs.order = arrayList;
        }
        getConnectionsManager().sendRequest(tLRPC$TL_messages_reorderPinnedDialogs, new RequestDelegate(j) {
            private final /* synthetic */ long f$1;

            {
                this.f$1 = r2;
            }

            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                MessagesController.this.lambda$reorderPinnedDialogs$244$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
            }
        });
    }

    public /* synthetic */ void lambda$reorderPinnedDialogs$244$MessagesController(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public boolean pinDialog(long j, boolean z, TLRPC$InputPeer tLRPC$InputPeer, long j2) {
        long j3;
        NativeByteBuffer nativeByteBuffer;
        long j4 = j;
        boolean z2 = z;
        int i = (int) j4;
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j4);
        if (tLRPC$Dialog != null && tLRPC$Dialog.pinned != z2) {
            int i2 = tLRPC$Dialog.folder_id;
            ArrayList<TLRPC$Dialog> dialogs = getDialogs(i2);
            tLRPC$Dialog.pinned = z2;
            if (z2) {
                int i3 = 0;
                for (int i4 = 0; i4 < dialogs.size(); i4++) {
                    TLRPC$Dialog tLRPC$Dialog2 = dialogs.get(i4);
                    if (!(tLRPC$Dialog2 instanceof TLRPC$TL_dialogFolder)) {
                        if (tLRPC$Dialog2.pinned) {
                            i3 = Math.max(tLRPC$Dialog2.pinnedNum, i3);
                        } else if (tLRPC$Dialog2.id != this.proxyDialogId) {
                            break;
                        }
                    }
                }
                tLRPC$Dialog.pinnedNum = i3 + 1;
            } else {
                tLRPC$Dialog.pinnedNum = 0;
            }
            NativeByteBuffer nativeByteBuffer2 = null;
            sortDialogs((SparseArray<TLRPC$Chat>) null);
            if (!z2 && dialogs.get(dialogs.size() - 1) == tLRPC$Dialog && !this.dialogsEndReached.get(i2)) {
                dialogs.remove(dialogs.size() - 1);
            }
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
            if (!(i == 0 || j2 == -1)) {
                TLRPC$TL_messages_toggleDialogPin tLRPC$TL_messages_toggleDialogPin = new TLRPC$TL_messages_toggleDialogPin();
                tLRPC$TL_messages_toggleDialogPin.pinned = z2;
                TLRPC$InputPeer inputPeer = tLRPC$InputPeer == null ? getInputPeer(i) : tLRPC$InputPeer;
                if (inputPeer instanceof TLRPC$TL_inputPeerEmpty) {
                    return false;
                }
                TLRPC$TL_inputDialogPeer tLRPC$TL_inputDialogPeer = new TLRPC$TL_inputDialogPeer();
                tLRPC$TL_inputDialogPeer.peer = inputPeer;
                tLRPC$TL_messages_toggleDialogPin.peer = tLRPC$TL_inputDialogPeer;
                if (j2 == 0) {
                    try {
                        nativeByteBuffer = new NativeByteBuffer(inputPeer.getObjectSize() + 16);
                        try {
                            nativeByteBuffer.writeInt32(4);
                            nativeByteBuffer.writeInt64(j4);
                            nativeByteBuffer.writeBool(z2);
                            inputPeer.serializeToStream(nativeByteBuffer);
                        } catch (Exception e) {
                            e = e;
                            nativeByteBuffer2 = nativeByteBuffer;
                        }
                    } catch (Exception e2) {
                        e = e2;
                        FileLog.e((Throwable) e);
                        nativeByteBuffer = nativeByteBuffer2;
                        j3 = getMessagesStorage().createPendingTask(nativeByteBuffer);
                        getConnectionsManager().sendRequest(tLRPC$TL_messages_toggleDialogPin, new RequestDelegate(j3) {
                            private final /* synthetic */ long f$1;

                            {
                                this.f$1 = r2;
                            }

                            public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                                MessagesController.this.lambda$pinDialog$245$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                            }
                        });
                        getMessagesStorage().setDialogPinned(j4, tLRPC$Dialog.pinnedNum);
                        return true;
                    }
                    j3 = getMessagesStorage().createPendingTask(nativeByteBuffer);
                } else {
                    j3 = j2;
                }
                getConnectionsManager().sendRequest(tLRPC$TL_messages_toggleDialogPin, new RequestDelegate(j3) {
                    private final /* synthetic */ long f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                        MessagesController.this.lambda$pinDialog$245$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                    }
                });
            }
            getMessagesStorage().setDialogPinned(j4, tLRPC$Dialog.pinnedNum);
            return true;
        } else if (tLRPC$Dialog != null) {
            return true;
        } else {
            return false;
        }
    }

    public /* synthetic */ void lambda$pinDialog$245$MessagesController(long j, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
    }

    public void loadPinnedDialogs(int i, long j, ArrayList<Long> arrayList) {
        if (this.loadingPinnedDialogs.indexOfKey(i) < 0 && !getUserConfig().isPinnedDialogsLoaded(i)) {
            this.loadingPinnedDialogs.put(i, 1);
            TLRPC$TL_messages_getPinnedDialogs tLRPC$TL_messages_getPinnedDialogs = new TLRPC$TL_messages_getPinnedDialogs();
            tLRPC$TL_messages_getPinnedDialogs.folder_id = i;
            getConnectionsManager().sendRequest(tLRPC$TL_messages_getPinnedDialogs, new RequestDelegate(i) {
                private final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$loadPinnedDialogs$248$MessagesController(this.f$1, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$loadPinnedDialogs$248$MessagesController(int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        MessageObject messageObject;
        TLRPC$Chat tLRPC$Chat;
        TLRPC$Chat tLRPC$Chat2;
        if (tLObject != null) {
            TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs = (TLRPC$TL_messages_peerDialogs) tLObject;
            ArrayList arrayList = new ArrayList(tLRPC$TL_messages_peerDialogs.dialogs);
            fetchFolderInLoadedPinnedDialogs(tLRPC$TL_messages_peerDialogs);
            TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
            tLRPC$TL_messages_dialogs.users.addAll(tLRPC$TL_messages_peerDialogs.users);
            tLRPC$TL_messages_dialogs.chats.addAll(tLRPC$TL_messages_peerDialogs.chats);
            tLRPC$TL_messages_dialogs.dialogs.addAll(tLRPC$TL_messages_peerDialogs.dialogs);
            tLRPC$TL_messages_dialogs.messages.addAll(tLRPC$TL_messages_peerDialogs.messages);
            LongSparseArray longSparseArray = new LongSparseArray();
            SparseArray sparseArray = new SparseArray();
            SparseArray sparseArray2 = new SparseArray();
            for (int i2 = 0; i2 < tLRPC$TL_messages_peerDialogs.users.size(); i2++) {
                TLRPC$User tLRPC$User = tLRPC$TL_messages_peerDialogs.users.get(i2);
                sparseArray.put(tLRPC$User.id, tLRPC$User);
            }
            for (int i3 = 0; i3 < tLRPC$TL_messages_peerDialogs.chats.size(); i3++) {
                TLRPC$Chat tLRPC$Chat3 = tLRPC$TL_messages_peerDialogs.chats.get(i3);
                sparseArray2.put(tLRPC$Chat3.id, tLRPC$Chat3);
            }
            for (int i4 = 0; i4 < tLRPC$TL_messages_peerDialogs.messages.size(); i4++) {
                TLRPC$Message tLRPC$Message = tLRPC$TL_messages_peerDialogs.messages.get(i4);
                TLRPC$Peer tLRPC$Peer = tLRPC$Message.to_id;
                int i5 = tLRPC$Peer.channel_id;
                if (i5 != 0) {
                    TLRPC$Chat tLRPC$Chat4 = (TLRPC$Chat) sparseArray2.get(i5);
                    if (tLRPC$Chat4 != null && tLRPC$Chat4.left) {
                    }
                } else {
                    int i6 = tLRPC$Peer.chat_id;
                    if (!(i6 == 0 || (tLRPC$Chat2 = (TLRPC$Chat) sparseArray2.get(i6)) == null || tLRPC$Chat2.migrated_to == null)) {
                    }
                }
                MessageObject messageObject2 = new MessageObject(this.currentAccount, tLRPC$Message, (SparseArray<TLRPC$User>) sparseArray, (SparseArray<TLRPC$Chat>) sparseArray2, false);
                longSparseArray.put(messageObject2.getDialogId(), messageObject2);
            }
            boolean z = !arrayList.isEmpty() && (arrayList.get(0) instanceof TLRPC$TL_dialogFolder);
            int size = arrayList.size();
            for (int i7 = 0; i7 < size; i7++) {
                TLRPC$Dialog tLRPC$Dialog = (TLRPC$Dialog) arrayList.get(i7);
                tLRPC$Dialog.pinned = true;
                DialogObject.initDialog(tLRPC$Dialog);
                if (DialogObject.isChannel(tLRPC$Dialog)) {
                    TLRPC$Chat tLRPC$Chat5 = (TLRPC$Chat) sparseArray2.get(-((int) tLRPC$Dialog.id));
                    if (tLRPC$Chat5 != null && tLRPC$Chat5.left) {
                    }
                } else {
                    long j = tLRPC$Dialog.id;
                    if (!(((int) j) >= 0 || (tLRPC$Chat = (TLRPC$Chat) sparseArray2.get(-((int) j))) == null || tLRPC$Chat.migrated_to == null)) {
                    }
                }
                if (tLRPC$Dialog.last_message_date == 0 && (messageObject = (MessageObject) longSparseArray.get(tLRPC$Dialog.id)) != null) {
                    tLRPC$Dialog.last_message_date = messageObject.messageOwner.date;
                }
                Integer num = this.dialogs_read_inbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                if (num == null) {
                    num = 0;
                }
                this.dialogs_read_inbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num.intValue(), tLRPC$Dialog.read_inbox_max_id)));
                Integer num2 = this.dialogs_read_outbox_max.get(Long.valueOf(tLRPC$Dialog.id));
                if (num2 == null) {
                    num2 = 0;
                }
                this.dialogs_read_outbox_max.put(Long.valueOf(tLRPC$Dialog.id), Integer.valueOf(Math.max(num2.intValue(), tLRPC$Dialog.read_outbox_max_id)));
            }
            getMessagesStorage().getStorageQueue().postRunnable(new Runnable(i, arrayList, z, tLRPC$TL_messages_peerDialogs, longSparseArray, tLRPC$TL_messages_dialogs) {
                private final /* synthetic */ int f$1;
                private final /* synthetic */ ArrayList f$2;
                private final /* synthetic */ boolean f$3;
                private final /* synthetic */ TLRPC$TL_messages_peerDialogs f$4;
                private final /* synthetic */ LongSparseArray f$5;
                private final /* synthetic */ TLRPC$TL_messages_dialogs f$6;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r5;
                    this.f$5 = r6;
                    this.f$6 = r7;
                }

                public final void run() {
                    MessagesController.this.lambda$null$247$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
                }
            });
        }
    }

    public /* synthetic */ void lambda$null$247$MessagesController(int i, ArrayList arrayList, boolean z, TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs, LongSparseArray longSparseArray, TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs) {
        AndroidUtilities.runOnUIThread(new Runnable(i, arrayList, z, tLRPC$TL_messages_peerDialogs, longSparseArray, tLRPC$TL_messages_dialogs) {
            private final /* synthetic */ int f$1;
            private final /* synthetic */ ArrayList f$2;
            private final /* synthetic */ boolean f$3;
            private final /* synthetic */ TLRPC$TL_messages_peerDialogs f$4;
            private final /* synthetic */ LongSparseArray f$5;
            private final /* synthetic */ TLRPC$TL_messages_dialogs f$6;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
            }

            public final void run() {
                MessagesController.this.lambda$null$246$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
            }
        });
    }

    public /* synthetic */ void lambda$null$246$MessagesController(int i, ArrayList arrayList, boolean z, TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs, LongSparseArray longSparseArray, TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs) {
        boolean z2;
        int i2 = i;
        ArrayList arrayList2 = arrayList;
        TLRPC$TL_messages_peerDialogs tLRPC$TL_messages_peerDialogs2 = tLRPC$TL_messages_peerDialogs;
        this.loadingPinnedDialogs.delete(i2);
        applyDialogsNotificationsSettings(arrayList2);
        ArrayList<TLRPC$Dialog> dialogs = getDialogs(i);
        int i3 = z;
        int i4 = 0;
        boolean z3 = false;
        for (int i5 = 0; i5 < dialogs.size(); i5++) {
            TLRPC$Dialog tLRPC$Dialog = dialogs.get(i5);
            if (!(tLRPC$Dialog instanceof TLRPC$TL_dialogFolder)) {
                long j = tLRPC$Dialog.id;
                if (((int) j) == 0) {
                    if (i3 < arrayList.size()) {
                        arrayList2.add(i3, tLRPC$Dialog);
                    } else {
                        arrayList2.add(tLRPC$Dialog);
                    }
                    i3++;
                } else if (tLRPC$Dialog.pinned) {
                    i4 = Math.max(tLRPC$Dialog.pinnedNum, i4);
                    tLRPC$Dialog.pinned = false;
                    tLRPC$Dialog.pinnedNum = 0;
                    i3++;
                    z3 = true;
                } else if (j != this.proxyDialogId) {
                    break;
                }
            }
        }
        ArrayList arrayList3 = new ArrayList();
        if (!arrayList.isEmpty()) {
            putUsers(tLRPC$TL_messages_peerDialogs2.users, false);
            putChats(tLRPC$TL_messages_peerDialogs2.chats, false);
            int size = arrayList.size();
            int i6 = 0;
            z2 = false;
            while (i6 < size) {
                TLRPC$Dialog tLRPC$Dialog2 = (TLRPC$Dialog) arrayList2.get(i6);
                tLRPC$Dialog2.pinnedNum = (size - i6) + i4;
                arrayList3.add(Long.valueOf(tLRPC$Dialog2.id));
                TLRPC$Dialog tLRPC$Dialog3 = this.dialogs_dict.get(tLRPC$Dialog2.id);
                if (tLRPC$Dialog3 != null) {
                    tLRPC$Dialog3.pinned = true;
                    tLRPC$Dialog3.pinnedNum = tLRPC$Dialog2.pinnedNum;
                    getMessagesStorage().setDialogPinned(tLRPC$Dialog2.id, tLRPC$Dialog2.pinnedNum);
                    LongSparseArray longSparseArray2 = longSparseArray;
                } else {
                    this.dialogs_dict.put(tLRPC$Dialog2.id, tLRPC$Dialog2);
                    MessageObject messageObject = (MessageObject) longSparseArray.get(tLRPC$Dialog2.id);
                    this.dialogMessage.put(tLRPC$Dialog2.id, messageObject);
                    if (messageObject != null && messageObject.messageOwner.to_id.channel_id == 0) {
                        this.dialogMessagesByIds.put(messageObject.getId(), messageObject);
                        this.dialogsLoadedTillDate = Math.min(this.dialogsLoadedTillDate, messageObject.messageOwner.date);
                        long j2 = messageObject.messageOwner.random_id;
                        if (j2 != 0) {
                            this.dialogMessagesByRandomIds.put(j2, messageObject);
                        }
                    }
                    z2 = true;
                }
                i6++;
                z3 = true;
            }
        } else {
            z2 = false;
        }
        if (z3) {
            if (z2) {
                this.allDialogs.clear();
                int size2 = this.dialogs_dict.size();
                for (int i7 = 0; i7 < size2; i7++) {
                    this.allDialogs.add(this.dialogs_dict.valueAt(i7));
                }
            }
            sortDialogs((SparseArray<TLRPC$Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
        getMessagesStorage().unpinAllDialogsExceptNew(arrayList3, i2);
        getMessagesStorage().putDialogs(tLRPC$TL_messages_dialogs, 1);
        getUserConfig().setPinnedDialogsLoaded(i2, true);
        getUserConfig().saveConfig(false);
    }

    public void generateJoinMessage(int i, boolean z) {
        TLRPC$Chat chat = getChat(Integer.valueOf(i));
        if (chat != null && ChatObject.isChannel(i, this.currentAccount)) {
            if ((!chat.left && !chat.kicked) || z) {
                TLRPC$TL_messageService tLRPC$TL_messageService = new TLRPC$TL_messageService();
                tLRPC$TL_messageService.flags = 256;
                int newMessageId = getUserConfig().getNewMessageId();
                tLRPC$TL_messageService.id = newMessageId;
                tLRPC$TL_messageService.local_id = newMessageId;
                tLRPC$TL_messageService.date = getConnectionsManager().getCurrentTime();
                tLRPC$TL_messageService.from_id = getUserConfig().getClientUserId();
                TLRPC$TL_peerChannel tLRPC$TL_peerChannel = new TLRPC$TL_peerChannel();
                tLRPC$TL_messageService.to_id = tLRPC$TL_peerChannel;
                tLRPC$TL_peerChannel.channel_id = i;
                tLRPC$TL_messageService.dialog_id = (long) (-i);
                tLRPC$TL_messageService.post = true;
                TLRPC$TL_messageActionChatAddUser tLRPC$TL_messageActionChatAddUser = new TLRPC$TL_messageActionChatAddUser();
                tLRPC$TL_messageService.action = tLRPC$TL_messageActionChatAddUser;
                tLRPC$TL_messageActionChatAddUser.users.add(Integer.valueOf(getUserConfig().getClientUserId()));
                if (chat.megagroup) {
                    tLRPC$TL_messageService.flags |= Integer.MIN_VALUE;
                }
                getUserConfig().saveConfig(false);
                ArrayList arrayList = new ArrayList();
                ArrayList arrayList2 = new ArrayList();
                arrayList2.add(tLRPC$TL_messageService);
                arrayList.add(new MessageObject(this.currentAccount, tLRPC$TL_messageService, true));
                getMessagesStorage().getStorageQueue().postRunnable(new Runnable(arrayList) {
                    private final /* synthetic */ ArrayList f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run() {
                        MessagesController.this.lambda$generateJoinMessage$250$MessagesController(this.f$1);
                    }
                });
                getMessagesStorage().putMessages((ArrayList<TLRPC$Message>) arrayList2, true, true, false, 0, false);
                AndroidUtilities.runOnUIThread(new Runnable(i, arrayList) {
                    private final /* synthetic */ int f$1;
                    private final /* synthetic */ ArrayList f$2;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                    }

                    public final void run() {
                        MessagesController.this.lambda$generateJoinMessage$251$MessagesController(this.f$1, this.f$2);
                    }
                });
            }
        }
    }

    public /* synthetic */ void lambda$generateJoinMessage$250$MessagesController(ArrayList arrayList) {
        AndroidUtilities.runOnUIThread(new Runnable(arrayList) {
            private final /* synthetic */ ArrayList f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$249$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$null$249$MessagesController(ArrayList arrayList) {
        getNotificationsController().processNewMessages(arrayList, true, false, (CountDownLatch) null);
    }

    public /* synthetic */ void lambda$generateJoinMessage$251$MessagesController(int i, ArrayList arrayList) {
        updateInterfaceWithMessages((long) (-i), arrayList, false);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    /* access modifiers changed from: protected */
    public void deleteMessagesByPush(long j, ArrayList<Integer> arrayList, int i) {
        getMessagesStorage().getStorageQueue().postRunnable(new Runnable(arrayList, i, j) {
            private final /* synthetic */ ArrayList f$1;
            private final /* synthetic */ int f$2;
            private final /* synthetic */ long f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesController.this.lambda$deleteMessagesByPush$253$MessagesController(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    public /* synthetic */ void lambda$deleteMessagesByPush$253$MessagesController(ArrayList arrayList, int i, long j) {
        AndroidUtilities.runOnUIThread(new Runnable(arrayList, i) {
            private final /* synthetic */ ArrayList f$1;
            private final /* synthetic */ int f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesController.this.lambda$null$252$MessagesController(this.f$1, this.f$2);
            }
        });
        getMessagesStorage().deletePushMessages(j, arrayList);
        getMessagesStorage().updateDialogsWithDeletedMessages(arrayList, getMessagesStorage().markMessagesAsDeleted(arrayList, false, i, true, false), false, i);
    }

    public /* synthetic */ void lambda$null$252$MessagesController(ArrayList arrayList, int i) {
        int i2 = 0;
        getNotificationCenter().postNotificationName(NotificationCenter.messagesDeleted, arrayList, Integer.valueOf(i), false);
        if (i == 0) {
            int size = arrayList.size();
            while (i2 < size) {
                MessageObject messageObject = this.dialogMessagesByIds.get(((Integer) arrayList.get(i2)).intValue());
                if (messageObject != null) {
                    messageObject.deleted = true;
                }
                i2++;
            }
            return;
        }
        MessageObject messageObject2 = this.dialogMessage.get((long) (-i));
        if (messageObject2 != null) {
            int size2 = arrayList.size();
            while (i2 < size2) {
                if (messageObject2.getId() == ((Integer) arrayList.get(i2)).intValue()) {
                    messageObject2.deleted = true;
                    return;
                }
                i2++;
            }
        }
    }

    public void checkChannelInviter(int i) {
        AndroidUtilities.runOnUIThread(new Runnable(i) {
            private final /* synthetic */ int f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$checkChannelInviter$259$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$checkChannelInviter$259$MessagesController(int i) {
        TLRPC$Chat chat = getChat(Integer.valueOf(i));
        if (chat != null && ChatObject.isChannel(i, this.currentAccount) && !chat.creator) {
            TLRPC$TL_channels_getParticipant tLRPC$TL_channels_getParticipant = new TLRPC$TL_channels_getParticipant();
            tLRPC$TL_channels_getParticipant.channel = getInputChannel(i);
            tLRPC$TL_channels_getParticipant.user_id = new TLRPC$TL_inputUserSelf();
            getConnectionsManager().sendRequest(tLRPC$TL_channels_getParticipant, new RequestDelegate(chat, i) {
                private final /* synthetic */ TLRPC$Chat f$1;
                private final /* synthetic */ int f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
                    MessagesController.this.lambda$null$258$MessagesController(this.f$1, this.f$2, tLObject, tLRPC$TL_error);
                }
            });
        }
    }

    public /* synthetic */ void lambda$null$258$MessagesController(TLRPC$Chat tLRPC$Chat, int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        TLRPC$TL_channels_channelParticipant tLRPC$TL_channels_channelParticipant = (TLRPC$TL_channels_channelParticipant) tLObject;
        if (tLRPC$TL_channels_channelParticipant != null) {
            TLRPC$ChannelParticipant tLRPC$ChannelParticipant = tLRPC$TL_channels_channelParticipant.participant;
            if ((tLRPC$ChannelParticipant instanceof TLRPC$TL_channelParticipantSelf) && tLRPC$ChannelParticipant.inviter_id != getUserConfig().getClientUserId()) {
                if (!tLRPC$Chat.megagroup || !getMessagesStorage().isMigratedChat(tLRPC$Chat.id)) {
                    AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_channels_channelParticipant) {
                        private final /* synthetic */ TLRPC$TL_channels_channelParticipant f$1;

                        {
                            this.f$1 = r2;
                        }

                        public final void run() {
                            MessagesController.this.lambda$null$254$MessagesController(this.f$1);
                        }
                    });
                    getMessagesStorage().putUsersAndChats(tLRPC$TL_channels_channelParticipant.users, (ArrayList<TLRPC$Chat>) null, true, true);
                    TLRPC$TL_messageService tLRPC$TL_messageService = new TLRPC$TL_messageService();
                    tLRPC$TL_messageService.media_unread = true;
                    tLRPC$TL_messageService.unread = true;
                    tLRPC$TL_messageService.flags = 256;
                    tLRPC$TL_messageService.post = true;
                    if (tLRPC$Chat.megagroup) {
                        tLRPC$TL_messageService.flags = Integer.MIN_VALUE | 256;
                    }
                    int newMessageId = getUserConfig().getNewMessageId();
                    tLRPC$TL_messageService.id = newMessageId;
                    tLRPC$TL_messageService.local_id = newMessageId;
                    tLRPC$TL_messageService.date = tLRPC$TL_channels_channelParticipant.participant.date;
                    TLRPC$TL_messageActionChatAddUser tLRPC$TL_messageActionChatAddUser = new TLRPC$TL_messageActionChatAddUser();
                    tLRPC$TL_messageService.action = tLRPC$TL_messageActionChatAddUser;
                    tLRPC$TL_messageService.from_id = tLRPC$TL_channels_channelParticipant.participant.inviter_id;
                    tLRPC$TL_messageActionChatAddUser.users.add(Integer.valueOf(getUserConfig().getClientUserId()));
                    TLRPC$TL_peerChannel tLRPC$TL_peerChannel = new TLRPC$TL_peerChannel();
                    tLRPC$TL_messageService.to_id = tLRPC$TL_peerChannel;
                    tLRPC$TL_peerChannel.channel_id = i;
                    tLRPC$TL_messageService.dialog_id = (long) (-i);
                    getUserConfig().saveConfig(false);
                    ArrayList arrayList = new ArrayList();
                    ArrayList arrayList2 = new ArrayList();
                    ConcurrentHashMap concurrentHashMap = new ConcurrentHashMap();
                    for (int i2 = 0; i2 < tLRPC$TL_channels_channelParticipant.users.size(); i2++) {
                        TLRPC$User tLRPC$User = tLRPC$TL_channels_channelParticipant.users.get(i2);
                        concurrentHashMap.put(Integer.valueOf(tLRPC$User.id), tLRPC$User);
                    }
                    arrayList2.add(tLRPC$TL_messageService);
                    arrayList.add(new MessageObject(this.currentAccount, (TLRPC$Message) tLRPC$TL_messageService, (AbstractMap<Integer, TLRPC$User>) concurrentHashMap, true));
                    getMessagesStorage().getStorageQueue().postRunnable(new Runnable(arrayList) {
                        private final /* synthetic */ ArrayList f$1;

                        {
                            this.f$1 = r2;
                        }

                        public final void run() {
                            MessagesController.this.lambda$null$256$MessagesController(this.f$1);
                        }
                    });
                    getMessagesStorage().putMessages((ArrayList<TLRPC$Message>) arrayList2, true, true, false, 0, false);
                    AndroidUtilities.runOnUIThread(new Runnable(i, arrayList) {
                        private final /* synthetic */ int f$1;
                        private final /* synthetic */ ArrayList f$2;

                        {
                            this.f$1 = r2;
                            this.f$2 = r3;
                        }

                        public final void run() {
                            MessagesController.this.lambda$null$257$MessagesController(this.f$1, this.f$2);
                        }
                    });
                }
            }
        }
    }

    public /* synthetic */ void lambda$null$254$MessagesController(TLRPC$TL_channels_channelParticipant tLRPC$TL_channels_channelParticipant) {
        putUsers(tLRPC$TL_channels_channelParticipant.users, false);
    }

    public /* synthetic */ void lambda$null$255$MessagesController(ArrayList arrayList) {
        getNotificationsController().processNewMessages(arrayList, true, false, (CountDownLatch) null);
    }

    public /* synthetic */ void lambda$null$256$MessagesController(ArrayList arrayList) {
        AndroidUtilities.runOnUIThread(new Runnable(arrayList) {
            private final /* synthetic */ ArrayList f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$255$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$null$257$MessagesController(int i, ArrayList arrayList) {
        updateInterfaceWithMessages((long) (-i), arrayList, false);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    private int getUpdateType(TLRPC$Update tLRPC$Update) {
        if ((tLRPC$Update instanceof TLRPC$TL_updateNewMessage) || (tLRPC$Update instanceof TLRPC$TL_updateReadMessagesContents) || (tLRPC$Update instanceof TLRPC$TL_updateReadHistoryInbox) || (tLRPC$Update instanceof TLRPC$TL_updateReadHistoryOutbox) || (tLRPC$Update instanceof TLRPC$TL_updateDeleteMessages) || (tLRPC$Update instanceof TLRPC$TL_updateWebPage) || (tLRPC$Update instanceof TLRPC$TL_updateEditMessage) || (tLRPC$Update instanceof TLRPC$TL_updateFolderPeers)) {
            return 0;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateNewEncryptedMessage) {
            return 1;
        }
        return ((tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) || (tLRPC$Update instanceof TLRPC$TL_updateDeleteChannelMessages) || (tLRPC$Update instanceof TLRPC$TL_updateEditChannelMessage) || (tLRPC$Update instanceof TLRPC$TL_updateChannelWebPage)) ? 2 : 3;
    }

    private static int getUpdatePts(TLRPC$Update tLRPC$Update) {
        if (tLRPC$Update instanceof TLRPC$TL_updateDeleteMessages) {
            return ((TLRPC$TL_updateDeleteMessages) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) {
            return ((TLRPC$TL_updateNewChannelMessage) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadHistoryOutbox) {
            return ((TLRPC$TL_updateReadHistoryOutbox) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateNewMessage) {
            return ((TLRPC$TL_updateNewMessage) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateEditMessage) {
            return ((TLRPC$TL_updateEditMessage) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateWebPage) {
            return ((TLRPC$TL_updateWebPage) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadHistoryInbox) {
            return ((TLRPC$TL_updateReadHistoryInbox) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelWebPage) {
            return ((TLRPC$TL_updateChannelWebPage) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateDeleteChannelMessages) {
            return ((TLRPC$TL_updateDeleteChannelMessages) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateEditChannelMessage) {
            return ((TLRPC$TL_updateEditChannelMessage) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadMessagesContents) {
            return ((TLRPC$TL_updateReadMessagesContents) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelTooLong) {
            return ((TLRPC$TL_updateChannelTooLong) tLRPC$Update).pts;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateFolderPeers) {
            return ((TLRPC$TL_updateFolderPeers) tLRPC$Update).pts;
        }
        return 0;
    }

    private static int getUpdatePtsCount(TLRPC$Update tLRPC$Update) {
        if (tLRPC$Update instanceof TLRPC$TL_updateDeleteMessages) {
            return ((TLRPC$TL_updateDeleteMessages) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) {
            return ((TLRPC$TL_updateNewChannelMessage) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadHistoryOutbox) {
            return ((TLRPC$TL_updateReadHistoryOutbox) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateNewMessage) {
            return ((TLRPC$TL_updateNewMessage) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateEditMessage) {
            return ((TLRPC$TL_updateEditMessage) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateWebPage) {
            return ((TLRPC$TL_updateWebPage) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadHistoryInbox) {
            return ((TLRPC$TL_updateReadHistoryInbox) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelWebPage) {
            return ((TLRPC$TL_updateChannelWebPage) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateDeleteChannelMessages) {
            return ((TLRPC$TL_updateDeleteChannelMessages) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateEditChannelMessage) {
            return ((TLRPC$TL_updateEditChannelMessage) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadMessagesContents) {
            return ((TLRPC$TL_updateReadMessagesContents) tLRPC$Update).pts_count;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateFolderPeers) {
            return ((TLRPC$TL_updateFolderPeers) tLRPC$Update).pts_count;
        }
        return 0;
    }

    private static int getUpdateQts(TLRPC$Update tLRPC$Update) {
        if (tLRPC$Update instanceof TLRPC$TL_updateNewEncryptedMessage) {
            return ((TLRPC$TL_updateNewEncryptedMessage) tLRPC$Update).qts;
        }
        return 0;
    }

    private static int getUpdateChannelId(TLRPC$Update tLRPC$Update) {
        if (tLRPC$Update instanceof TLRPC$TL_updateNewChannelMessage) {
            return ((TLRPC$TL_updateNewChannelMessage) tLRPC$Update).message.to_id.channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateEditChannelMessage) {
            return ((TLRPC$TL_updateEditChannelMessage) tLRPC$Update).message.to_id.channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadChannelOutbox) {
            return ((TLRPC$TL_updateReadChannelOutbox) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelMessageViews) {
            return ((TLRPC$TL_updateChannelMessageViews) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelTooLong) {
            return ((TLRPC$TL_updateChannelTooLong) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelPinnedMessage) {
            return ((TLRPC$TL_updateChannelPinnedMessage) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelReadMessagesContents) {
            return ((TLRPC$TL_updateChannelReadMessagesContents) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelAvailableMessages) {
            return ((TLRPC$TL_updateChannelAvailableMessages) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannel) {
            return ((TLRPC$TL_updateChannel) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateChannelWebPage) {
            return ((TLRPC$TL_updateChannelWebPage) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateDeleteChannelMessages) {
            return ((TLRPC$TL_updateDeleteChannelMessages) tLRPC$Update).channel_id;
        }
        if (tLRPC$Update instanceof TLRPC$TL_updateReadChannelInbox) {
            return ((TLRPC$TL_updateReadChannelInbox) tLRPC$Update).channel_id;
        }
        if (!BuildVars.LOGS_ENABLED) {
            return 0;
        }
        FileLog.e("trying to get unknown update channel_id for " + tLRPC$Update);
        return 0;
    }

    /* JADX WARNING: Code restructure failed: missing block: B:130:0x032a, code lost:
        if (java.lang.Math.abs(java.lang.System.currentTimeMillis() - r6.updatesStartWaitTimeQts) > 1500) goto L_0x01e1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:295:0x06cf, code lost:
        if (r3 != null) goto L_0x06d1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:297:0x06d3, code lost:
        if (r5 != null) goto L_0x06d6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:307:0x06fc, code lost:
        if (r3 != null) goto L_0x06fe;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:309:0x0700, code lost:
        if (r5 != null) goto L_0x06d6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:95:0x0252, code lost:
        if (java.lang.Math.abs(java.lang.System.currentTimeMillis() - r6.updatesStartWaitTimePts) > 1500) goto L_0x01e1;
     */
    /* JADX WARNING: Removed duplicated region for block: B:251:0x0627  */
    /* JADX WARNING: Removed duplicated region for block: B:316:0x0716  */
    /* JADX WARNING: Removed duplicated region for block: B:333:0x0752 A[ADDED_TO_REGION] */
    /* JADX WARNING: Removed duplicated region for block: B:344:0x0788  */
    /* JADX WARNING: Removed duplicated region for block: B:410:0x095b  */
    /* JADX WARNING: Removed duplicated region for block: B:428:0x0995  */
    /* JADX WARNING: Removed duplicated region for block: B:430:0x09af  */
    /* JADX WARNING: Removed duplicated region for block: B:461:0x074e A[EDGE_INSN: B:461:0x074e->B:331:0x074e ?: BREAK  , SYNTHETIC] */
    /* JADX WARNING: Removed duplicated region for block: B:61:0x0110  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void processUpdates(org.telegram.tgnet.TLRPC$Updates r26, boolean r27) {
        /*
            r25 = this;
            r6 = r25
            r7 = r26
            boolean r0 = r7 instanceof org.telegram.tgnet.TLRPC$TL_updateShort
            r8 = 0
            r9 = 0
            r10 = 1
            if (r0 == 0) goto L_0x0020
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            org.telegram.tgnet.TLRPC$Update r0 = r7.update
            r1.add(r0)
            r2 = 0
            r3 = 0
            r4 = 0
            int r5 = r7.date
            r0 = r25
            r0.processUpdateArray(r1, r2, r3, r4, r5)
            goto L_0x007b
        L_0x0020:
            boolean r0 = r7 instanceof org.telegram.tgnet.TLRPC$TL_updateShortChatMessage
            java.lang.String r11 = " count = "
            java.lang.String r12 = "add to queue"
            java.lang.String r15 = " "
            if (r0 != 0) goto L_0x062f
            boolean r1 = r7 instanceof org.telegram.tgnet.TLRPC$TL_updateShortMessage
            if (r1 == 0) goto L_0x0030
            goto L_0x062f
        L_0x0030:
            boolean r3 = r7 instanceof org.telegram.tgnet.TLRPC$TL_updatesCombined
            if (r3 != 0) goto L_0x007f
            boolean r0 = r7 instanceof org.telegram.tgnet.TLRPC$TL_updates
            if (r0 == 0) goto L_0x0039
            goto L_0x007f
        L_0x0039:
            boolean r0 = r7 instanceof org.telegram.tgnet.TLRPC$TL_updatesTooLong
            if (r0 == 0) goto L_0x0049
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0046
            java.lang.String r0 = "need get diff TL_updatesTooLong"
            org.telegram.messenger.FileLog.d(r0)
        L_0x0046:
            r1 = 0
            goto L_0x0952
        L_0x0049:
            boolean r0 = r7 instanceof org.telegram.messenger.MessagesController.UserActionUpdatesSeq
            if (r0 == 0) goto L_0x0057
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            int r1 = r7.seq
            r0.setLastSeqValue(r1)
            goto L_0x007b
        L_0x0057:
            boolean r0 = r7 instanceof org.telegram.messenger.MessagesController.UserActionUpdatesPts
            if (r0 == 0) goto L_0x007b
            int r0 = r7.chat_id
            if (r0 == 0) goto L_0x0072
            android.util.SparseIntArray r1 = r6.channelsPts
            int r2 = r7.pts
            r1.put(r0, r2)
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            int r1 = r7.chat_id
            int r2 = r7.pts
            r0.saveChannelPts(r1, r2)
            goto L_0x007b
        L_0x0072:
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            int r1 = r7.pts
            r0.setLastPtsValue(r1)
        L_0x007b:
            r1 = 0
            r10 = 0
            goto L_0x0952
        L_0x007f:
            r1 = r8
            r0 = 0
        L_0x0081:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r2 = r7.chats
            int r2 = r2.size()
            if (r0 >= r2) goto L_0x00cb
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r2 = r7.chats
            java.lang.Object r2 = r2.get(r0)
            org.telegram.tgnet.TLRPC$Chat r2 = (org.telegram.tgnet.TLRPC$Chat) r2
            boolean r4 = r2 instanceof org.telegram.tgnet.TLRPC$TL_channel
            if (r4 == 0) goto L_0x00c8
            boolean r4 = r2.min
            if (r4 == 0) goto L_0x00c8
            int r4 = r2.id
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)
            org.telegram.tgnet.TLRPC$Chat r4 = r6.getChat(r4)
            if (r4 == 0) goto L_0x00a9
            boolean r5 = r4.min
            if (r5 == 0) goto L_0x00b6
        L_0x00a9:
            org.telegram.messenger.MessagesStorage r4 = r25.getMessagesStorage()
            int r5 = r7.chat_id
            org.telegram.tgnet.TLRPC$Chat r4 = r4.getChatSync(r5)
            r6.putChat(r4, r10)
        L_0x00b6:
            if (r4 == 0) goto L_0x00bc
            boolean r4 = r4.min
            if (r4 == 0) goto L_0x00c8
        L_0x00bc:
            if (r1 != 0) goto L_0x00c3
            android.util.SparseArray r1 = new android.util.SparseArray
            r1.<init>()
        L_0x00c3:
            int r4 = r2.id
            r1.put(r4, r2)
        L_0x00c8:
            int r0 = r0 + 1
            goto L_0x0081
        L_0x00cb:
            if (r1 == 0) goto L_0x010d
            r0 = 0
        L_0x00ce:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r2 = r7.updates
            int r2 = r2.size()
            if (r0 >= r2) goto L_0x010d
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r2 = r7.updates
            java.lang.Object r2 = r2.get(r0)
            org.telegram.tgnet.TLRPC$Update r2 = (org.telegram.tgnet.TLRPC$Update) r2
            boolean r4 = r2 instanceof org.telegram.tgnet.TLRPC$TL_updateNewChannelMessage
            if (r4 == 0) goto L_0x010a
            org.telegram.tgnet.TLRPC$TL_updateNewChannelMessage r2 = (org.telegram.tgnet.TLRPC$TL_updateNewChannelMessage) r2
            org.telegram.tgnet.TLRPC$Message r2 = r2.message
            org.telegram.tgnet.TLRPC$Peer r2 = r2.to_id
            int r2 = r2.channel_id
            int r4 = r1.indexOfKey(r2)
            if (r4 < 0) goto L_0x010a
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0108
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "need get diff because of min channel "
            r0.append(r1)
            r0.append(r2)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x0108:
            r0 = 1
            goto L_0x010e
        L_0x010a:
            int r0 = r0 + 1
            goto L_0x00ce
        L_0x010d:
            r0 = 0
        L_0x010e:
            if (r0 != 0) goto L_0x0627
            org.telegram.messenger.MessagesStorage r1 = r25.getMessagesStorage()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r7.users
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r4 = r7.chats
            r1.putUsersAndChats(r2, r4, r10, r10)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r7.updates
            java.util.Comparator<org.telegram.tgnet.TLRPC$Update> r2 = r6.updatesComparator
            java.util.Collections.sort(r1, r2)
            r5 = r8
            r18 = 0
            r8 = r0
        L_0x0126:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r0 = r7.updates
            int r0 = r0.size()
            if (r0 <= 0) goto L_0x052a
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r0 = r7.updates
            java.lang.Object r0 = r0.get(r9)
            org.telegram.tgnet.TLRPC$Update r0 = (org.telegram.tgnet.TLRPC$Update) r0
            int r1 = r6.getUpdateType(r0)
            if (r1 != 0) goto L_0x0270
            org.telegram.tgnet.TLRPC$TL_updates r4 = new org.telegram.tgnet.TLRPC$TL_updates
            r4.<init>()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r4.updates
            r1.add(r0)
            int r1 = getUpdatePts(r0)
            r4.pts = r1
            int r1 = getUpdatePtsCount(r0)
            r4.pts_count = r1
        L_0x0152:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r7.updates
            int r1 = r1.size()
            if (r10 >= r1) goto L_0x018a
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r7.updates
            java.lang.Object r1 = r1.get(r10)
            org.telegram.tgnet.TLRPC$Update r1 = (org.telegram.tgnet.TLRPC$Update) r1
            int r2 = getUpdatePts(r1)
            int r19 = getUpdatePtsCount(r1)
            int r20 = r6.getUpdateType(r1)
            if (r20 != 0) goto L_0x018a
            int r9 = r4.pts
            int r9 = r9 + r19
            if (r9 != r2) goto L_0x018a
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r9 = r4.updates
            r9.add(r1)
            r4.pts = r2
            int r1 = r4.pts_count
            int r1 = r1 + r19
            r4.pts_count = r1
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r7.updates
            r1.remove(r10)
            r9 = 0
            goto L_0x0152
        L_0x018a:
            org.telegram.messenger.MessagesStorage r1 = r25.getMessagesStorage()
            int r1 = r1.getLastPtsValue()
            int r2 = r4.pts_count
            int r1 = r1 + r2
            int r2 = r4.pts
            if (r1 != r2) goto L_0x01ef
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r4.updates
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r7.users
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r9 = r7.chats
            r19 = 0
            int r0 = r7.date
            r21 = r0
            r0 = r25
            r22 = r3
            r3 = r9
            r9 = r4
            r13 = 0
            r4 = r19
            r23 = r5
            r5 = r21
            boolean r0 = r0.processUpdateArray(r1, r2, r3, r4, r5)
            if (r0 != 0) goto L_0x01e4
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x01e1
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "need get diff inner TL_updates, pts: "
            r0.append(r1)
            org.telegram.messenger.MessagesStorage r1 = r25.getMessagesStorage()
            int r1 = r1.getLastPtsValue()
            r0.append(r1)
            r0.append(r15)
            int r1 = r7.seq
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x01e1:
            r8 = 1
            goto L_0x026c
        L_0x01e4:
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            int r1 = r9.pts
            r0.setLastPtsValue(r1)
            goto L_0x026c
        L_0x01ef:
            r22 = r3
            r9 = r4
            r23 = r5
            r13 = 0
            org.telegram.messenger.MessagesStorage r1 = r25.getMessagesStorage()
            int r1 = r1.getLastPtsValue()
            int r2 = r9.pts
            if (r1 == r2) goto L_0x026c
            boolean r1 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r1 == 0) goto L_0x0235
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            r1.append(r0)
            java.lang.String r0 = " need get diff, pts: "
            r1.append(r0)
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            int r0 = r0.getLastPtsValue()
            r1.append(r0)
            r1.append(r15)
            int r0 = r9.pts
            r1.append(r0)
            r1.append(r11)
            int r0 = r9.pts_count
            r1.append(r0)
            java.lang.String r0 = r1.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x0235:
            boolean r0 = r6.gettingDifference
            if (r0 != 0) goto L_0x0254
            long r0 = r6.updatesStartWaitTimePts
            int r2 = (r0 > r13 ? 1 : (r0 == r13 ? 0 : -1))
            if (r2 == 0) goto L_0x0254
            int r2 = (r0 > r13 ? 1 : (r0 == r13 ? 0 : -1))
            if (r2 == 0) goto L_0x01e1
            long r0 = java.lang.System.currentTimeMillis()
            long r2 = r6.updatesStartWaitTimePts
            long r0 = r0 - r2
            long r0 = java.lang.Math.abs(r0)
            r2 = 1500(0x5dc, double:7.41E-321)
            int r4 = (r0 > r2 ? 1 : (r0 == r2 ? 0 : -1))
            if (r4 > 0) goto L_0x01e1
        L_0x0254:
            long r0 = r6.updatesStartWaitTimePts
            int r2 = (r0 > r13 ? 1 : (r0 == r13 ? 0 : -1))
            if (r2 != 0) goto L_0x0260
            long r0 = java.lang.System.currentTimeMillis()
            r6.updatesStartWaitTimePts = r0
        L_0x0260:
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0267
            org.telegram.messenger.FileLog.d(r12)
        L_0x0267:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Updates> r0 = r6.updatesQueuePts
            r0.add(r9)
        L_0x026c:
            r5 = r23
            goto L_0x051b
        L_0x0270:
            r22 = r3
            r23 = r5
            r13 = 0
            int r1 = r6.getUpdateType(r0)
            if (r1 != r10) goto L_0x0361
            org.telegram.tgnet.TLRPC$TL_updates r9 = new org.telegram.tgnet.TLRPC$TL_updates
            r9.<init>()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r9.updates
            r1.add(r0)
            int r1 = getUpdateQts(r0)
            r9.pts = r1
        L_0x028c:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r7.updates
            int r1 = r1.size()
            if (r10 >= r1) goto L_0x02b8
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r7.updates
            java.lang.Object r1 = r1.get(r10)
            org.telegram.tgnet.TLRPC$Update r1 = (org.telegram.tgnet.TLRPC$Update) r1
            int r2 = getUpdateQts(r1)
            int r3 = r6.getUpdateType(r1)
            if (r3 != r10) goto L_0x02b8
            int r3 = r9.pts
            int r3 = r3 + r10
            if (r3 != r2) goto L_0x02b8
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r3 = r9.updates
            r3.add(r1)
            r9.pts = r2
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r7.updates
            r1.remove(r10)
            goto L_0x028c
        L_0x02b8:
            org.telegram.messenger.MessagesStorage r1 = r25.getMessagesStorage()
            int r1 = r1.getLastQtsValue()
            if (r1 == 0) goto L_0x0346
            org.telegram.messenger.MessagesStorage r1 = r25.getMessagesStorage()
            int r1 = r1.getLastQtsValue()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r2 = r9.updates
            int r2 = r2.size()
            int r1 = r1 + r2
            int r2 = r9.pts
            if (r1 != r2) goto L_0x02d6
            goto L_0x0346
        L_0x02d6:
            org.telegram.messenger.MessagesStorage r1 = r25.getMessagesStorage()
            int r1 = r1.getLastPtsValue()
            int r2 = r9.pts
            if (r1 == r2) goto L_0x026c
            boolean r1 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r1 == 0) goto L_0x030d
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            r1.append(r0)
            java.lang.String r0 = " need get diff, qts: "
            r1.append(r0)
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            int r0 = r0.getLastQtsValue()
            r1.append(r0)
            r1.append(r15)
            int r0 = r9.pts
            r1.append(r0)
            java.lang.String r0 = r1.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x030d:
            boolean r0 = r6.gettingDifference
            if (r0 != 0) goto L_0x032c
            long r0 = r6.updatesStartWaitTimeQts
            int r2 = (r0 > r13 ? 1 : (r0 == r13 ? 0 : -1))
            if (r2 == 0) goto L_0x032c
            int r2 = (r0 > r13 ? 1 : (r0 == r13 ? 0 : -1))
            if (r2 == 0) goto L_0x01e1
            long r0 = java.lang.System.currentTimeMillis()
            long r2 = r6.updatesStartWaitTimeQts
            long r0 = r0 - r2
            long r0 = java.lang.Math.abs(r0)
            r2 = 1500(0x5dc, double:7.41E-321)
            int r4 = (r0 > r2 ? 1 : (r0 == r2 ? 0 : -1))
            if (r4 > 0) goto L_0x01e1
        L_0x032c:
            long r0 = r6.updatesStartWaitTimeQts
            int r2 = (r0 > r13 ? 1 : (r0 == r13 ? 0 : -1))
            if (r2 != 0) goto L_0x0338
            long r0 = java.lang.System.currentTimeMillis()
            r6.updatesStartWaitTimeQts = r0
        L_0x0338:
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x033f
            org.telegram.messenger.FileLog.d(r12)
        L_0x033f:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Updates> r0 = r6.updatesQueueQts
            r0.add(r9)
            goto L_0x026c
        L_0x0346:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r9.updates
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r7.users
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r3 = r7.chats
            r4 = 0
            int r5 = r7.date
            r0 = r25
            r0.processUpdateArray(r1, r2, r3, r4, r5)
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            int r1 = r9.pts
            r0.setLastQtsValue(r1)
            r18 = 1
            goto L_0x026c
        L_0x0361:
            int r1 = r6.getUpdateType(r0)
            r2 = 2
            if (r1 != r2) goto L_0x0527
            int r9 = getUpdateChannelId(r0)
            android.util.SparseIntArray r1 = r6.channelsPts
            int r1 = r1.get(r9)
            if (r1 != 0) goto L_0x03a0
            org.telegram.messenger.MessagesStorage r1 = r25.getMessagesStorage()
            int r1 = r1.getChannelPtsSync(r9)
            if (r1 != 0) goto L_0x039b
            r3 = 0
        L_0x037f:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r4 = r7.chats
            int r4 = r4.size()
            if (r3 >= r4) goto L_0x03a0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r4 = r7.chats
            java.lang.Object r4 = r4.get(r3)
            org.telegram.tgnet.TLRPC$Chat r4 = (org.telegram.tgnet.TLRPC$Chat) r4
            int r5 = r4.id
            if (r5 != r9) goto L_0x0398
            r6.loadUnknownChannel(r4, r13)
            r3 = 1
            goto L_0x03a1
        L_0x0398:
            int r3 = r3 + 1
            goto L_0x037f
        L_0x039b:
            android.util.SparseIntArray r3 = r6.channelsPts
            r3.put(r9, r1)
        L_0x03a0:
            r3 = 0
        L_0x03a1:
            org.telegram.tgnet.TLRPC$TL_updates r5 = new org.telegram.tgnet.TLRPC$TL_updates
            r5.<init>()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r4 = r5.updates
            r4.add(r0)
            int r4 = getUpdatePts(r0)
            r5.pts = r4
            int r4 = getUpdatePtsCount(r0)
            r5.pts_count = r4
        L_0x03b7:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r4 = r7.updates
            int r4 = r4.size()
            if (r10 >= r4) goto L_0x03f5
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r4 = r7.updates
            java.lang.Object r4 = r4.get(r10)
            org.telegram.tgnet.TLRPC$Update r4 = (org.telegram.tgnet.TLRPC$Update) r4
            int r13 = getUpdatePts(r4)
            int r14 = getUpdatePtsCount(r4)
            int r10 = r6.getUpdateType(r4)
            if (r10 != r2) goto L_0x03f5
            int r10 = getUpdateChannelId(r4)
            if (r9 != r10) goto L_0x03f5
            int r10 = r5.pts
            int r10 = r10 + r14
            if (r10 != r13) goto L_0x03f5
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r10 = r5.updates
            r10.add(r4)
            r5.pts = r13
            int r4 = r5.pts_count
            int r4 = r4 + r14
            r5.pts_count = r4
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r4 = r7.updates
            r10 = 1
            r4.remove(r10)
            r13 = 0
            goto L_0x03b7
        L_0x03f5:
            if (r3 != 0) goto L_0x0500
            int r2 = r5.pts_count
            int r2 = r2 + r1
            int r3 = r5.pts
            if (r2 != r3) goto L_0x045c
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r5.updates
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r7.users
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r3 = r7.chats
            r4 = 0
            int r10 = r7.date
            r0 = r25
            r13 = r5
            r5 = r10
            boolean r0 = r0.processUpdateArray(r1, r2, r3, r4, r5)
            if (r0 != 0) goto L_0x0448
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0429
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "need get channel diff inner TL_updates, channel_id = "
            r0.append(r1)
            r0.append(r9)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x0429:
            r10 = r23
            if (r10 != 0) goto L_0x0435
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r5 = r0
            goto L_0x051b
        L_0x0435:
            java.lang.Integer r0 = java.lang.Integer.valueOf(r9)
            boolean r0 = r10.contains(r0)
            if (r0 != 0) goto L_0x051a
            java.lang.Integer r0 = java.lang.Integer.valueOf(r9)
            r10.add(r0)
            goto L_0x051a
        L_0x0448:
            r10 = r23
            android.util.SparseIntArray r0 = r6.channelsPts
            int r1 = r13.pts
            r0.put(r9, r1)
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            int r1 = r13.pts
            r0.saveChannelPts(r9, r1)
            goto L_0x051a
        L_0x045c:
            r13 = r5
            r10 = r23
            if (r1 == r3) goto L_0x051a
            boolean r2 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r2 == 0) goto L_0x0494
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            r2.append(r0)
            java.lang.String r0 = " need get channel diff, pts: "
            r2.append(r0)
            r2.append(r1)
            r2.append(r15)
            int r0 = r13.pts
            r2.append(r0)
            r2.append(r11)
            int r0 = r13.pts_count
            r2.append(r0)
            java.lang.String r0 = " channelId = "
            r2.append(r0)
            r2.append(r9)
            java.lang.String r0 = r2.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x0494:
            org.telegram.messenger.support.SparseLongArray r0 = r6.updatesStartWaitTimeChannels
            long r0 = r0.get(r9)
            android.util.SparseBooleanArray r2 = r6.gettingDifferenceChannels
            boolean r2 = r2.get(r9)
            if (r2 != 0) goto L_0x04d2
            r2 = 0
            int r4 = (r0 > r2 ? 1 : (r0 == r2 ? 0 : -1))
            if (r4 == 0) goto L_0x04d2
            long r2 = java.lang.System.currentTimeMillis()
            long r2 = r2 - r0
            long r2 = java.lang.Math.abs(r2)
            r4 = 1500(0x5dc, double:7.41E-321)
            int r14 = (r2 > r4 ? 1 : (r2 == r4 ? 0 : -1))
            if (r14 > 0) goto L_0x04b8
            goto L_0x04d2
        L_0x04b8:
            if (r10 != 0) goto L_0x04c0
            java.util.ArrayList r5 = new java.util.ArrayList
            r5.<init>()
            goto L_0x051b
        L_0x04c0:
            java.lang.Integer r0 = java.lang.Integer.valueOf(r9)
            boolean r0 = r10.contains(r0)
            if (r0 != 0) goto L_0x051a
            java.lang.Integer r0 = java.lang.Integer.valueOf(r9)
            r10.add(r0)
            goto L_0x051a
        L_0x04d2:
            r2 = 0
            int r4 = (r0 > r2 ? 1 : (r0 == r2 ? 0 : -1))
            if (r4 != 0) goto L_0x04e1
            org.telegram.messenger.support.SparseLongArray r0 = r6.updatesStartWaitTimeChannels
            long r1 = java.lang.System.currentTimeMillis()
            r0.put(r9, r1)
        L_0x04e1:
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x04e8
            org.telegram.messenger.FileLog.d(r12)
        L_0x04e8:
            android.util.SparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Updates>> r0 = r6.updatesQueueChannels
            java.lang.Object r0 = r0.get(r9)
            java.util.ArrayList r0 = (java.util.ArrayList) r0
            if (r0 != 0) goto L_0x04fc
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            android.util.SparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Updates>> r1 = r6.updatesQueueChannels
            r1.put(r9, r0)
        L_0x04fc:
            r0.add(r13)
            goto L_0x051a
        L_0x0500:
            r10 = r23
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x051a
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "need load unknown channel = "
            r0.append(r1)
            r0.append(r9)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x051a:
            r5 = r10
        L_0x051b:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r0 = r7.updates
            r1 = 0
            r0.remove(r1)
            r3 = r22
            r9 = 0
            r10 = 1
            goto L_0x0126
        L_0x0527:
            r10 = r23
            goto L_0x052d
        L_0x052a:
            r22 = r3
            r10 = r5
        L_0x052d:
            if (r22 == 0) goto L_0x054e
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            int r0 = r0.getLastSeqValue()
            r1 = 1
            int r0 = r0 + r1
            int r1 = r7.seq_start
            if (r0 == r1) goto L_0x054c
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            int r0 = r0.getLastSeqValue()
            int r1 = r7.seq_start
            if (r0 != r1) goto L_0x054a
            goto L_0x054c
        L_0x054a:
            r0 = 0
            goto L_0x0569
        L_0x054c:
            r0 = 1
            goto L_0x0569
        L_0x054e:
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            int r0 = r0.getLastSeqValue()
            r1 = 1
            int r0 = r0 + r1
            int r1 = r7.seq
            if (r0 == r1) goto L_0x054c
            if (r1 == 0) goto L_0x054c
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            int r0 = r0.getLastSeqValue()
            if (r1 != r0) goto L_0x054a
            goto L_0x054c
        L_0x0569:
            if (r0 == 0) goto L_0x0595
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r7.updates
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r7.users
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r3 = r7.chats
            r4 = 0
            int r5 = r7.date
            r0 = r25
            r0.processUpdateArray(r1, r2, r3, r4, r5)
            int r0 = r7.seq
            if (r0 == 0) goto L_0x0621
            int r0 = r7.date
            if (r0 == 0) goto L_0x058a
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            int r1 = r7.date
            r0.setLastDateValue(r1)
        L_0x058a:
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            int r1 = r7.seq
            r0.setLastSeqValue(r1)
            goto L_0x0621
        L_0x0595:
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x05e4
            if (r22 == 0) goto L_0x05c0
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "need get diff TL_updatesCombined, seq: "
            r0.append(r1)
            org.telegram.messenger.MessagesStorage r1 = r25.getMessagesStorage()
            int r1 = r1.getLastSeqValue()
            r0.append(r1)
            r0.append(r15)
            int r1 = r7.seq_start
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
            goto L_0x05e4
        L_0x05c0:
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "need get diff TL_updates, seq: "
            r0.append(r1)
            org.telegram.messenger.MessagesStorage r1 = r25.getMessagesStorage()
            int r1 = r1.getLastSeqValue()
            r0.append(r1)
            r0.append(r15)
            int r1 = r7.seq
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x05e4:
            boolean r0 = r6.gettingDifference
            if (r0 != 0) goto L_0x0605
            long r0 = r6.updatesStartWaitTimeSeq
            r2 = 0
            int r4 = (r0 > r2 ? 1 : (r0 == r2 ? 0 : -1))
            if (r4 == 0) goto L_0x0605
            long r0 = java.lang.System.currentTimeMillis()
            long r2 = r6.updatesStartWaitTimeSeq
            long r0 = r0 - r2
            long r0 = java.lang.Math.abs(r0)
            r2 = 1500(0x5dc, double:7.41E-321)
            int r4 = (r0 > r2 ? 1 : (r0 == r2 ? 0 : -1))
            if (r4 > 0) goto L_0x0602
            goto L_0x0605
        L_0x0602:
            r8 = r10
            r10 = 1
            goto L_0x062a
        L_0x0605:
            long r0 = r6.updatesStartWaitTimeSeq
            r2 = 0
            int r4 = (r0 > r2 ? 1 : (r0 == r2 ? 0 : -1))
            if (r4 != 0) goto L_0x0613
            long r0 = java.lang.System.currentTimeMillis()
            r6.updatesStartWaitTimeSeq = r0
        L_0x0613:
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x061c
            java.lang.String r0 = "add TL_updates/Combined to queue"
            org.telegram.messenger.FileLog.d(r0)
        L_0x061c:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Updates> r0 = r6.updatesQueueSeq
            r0.add(r7)
        L_0x0621:
            r24 = r10
            r10 = r8
            r8 = r24
            goto L_0x062a
        L_0x0627:
            r10 = r0
            r18 = 0
        L_0x062a:
            r1 = r18
            r9 = 0
            goto L_0x0952
        L_0x062f:
            if (r0 == 0) goto L_0x0634
            int r0 = r7.from_id
            goto L_0x0636
        L_0x0634:
            int r0 = r7.user_id
        L_0x0636:
            java.lang.Integer r1 = java.lang.Integer.valueOf(r0)
            org.telegram.tgnet.TLRPC$User r1 = r6.getUser(r1)
            if (r1 == 0) goto L_0x0644
            boolean r2 = r1.min
            if (r2 == 0) goto L_0x0657
        L_0x0644:
            org.telegram.messenger.MessagesStorage r1 = r25.getMessagesStorage()
            org.telegram.tgnet.TLRPC$User r1 = r1.getUserSync(r0)
            if (r1 == 0) goto L_0x0653
            boolean r2 = r1.min
            if (r2 == 0) goto L_0x0653
            r1 = r8
        L_0x0653:
            r2 = 1
            r6.putUser(r1, r2)
        L_0x0657:
            org.telegram.tgnet.TLRPC$MessageFwdHeader r2 = r7.fwd_from
            if (r2 == 0) goto L_0x06a2
            int r2 = r2.from_id
            if (r2 == 0) goto L_0x067b
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)
            org.telegram.tgnet.TLRPC$User r2 = r6.getUser(r2)
            if (r2 != 0) goto L_0x0679
            org.telegram.messenger.MessagesStorage r2 = r25.getMessagesStorage()
            org.telegram.tgnet.TLRPC$MessageFwdHeader r3 = r7.fwd_from
            int r3 = r3.from_id
            org.telegram.tgnet.TLRPC$User r2 = r2.getUserSync(r3)
            r3 = 1
            r6.putUser(r2, r3)
        L_0x0679:
            r3 = 1
            goto L_0x067d
        L_0x067b:
            r2 = r8
            r3 = 0
        L_0x067d:
            org.telegram.tgnet.TLRPC$MessageFwdHeader r4 = r7.fwd_from
            int r4 = r4.channel_id
            if (r4 == 0) goto L_0x069f
            java.lang.Integer r3 = java.lang.Integer.valueOf(r4)
            org.telegram.tgnet.TLRPC$Chat r3 = r6.getChat(r3)
            if (r3 != 0) goto L_0x069d
            org.telegram.messenger.MessagesStorage r3 = r25.getMessagesStorage()
            org.telegram.tgnet.TLRPC$MessageFwdHeader r4 = r7.fwd_from
            int r4 = r4.channel_id
            org.telegram.tgnet.TLRPC$Chat r3 = r3.getChatSync(r4)
            r4 = 1
            r6.putChat(r3, r4)
        L_0x069d:
            r4 = 1
            goto L_0x06a5
        L_0x069f:
            r4 = r3
            r3 = r8
            goto L_0x06a5
        L_0x06a2:
            r2 = r8
            r3 = r2
            r4 = 0
        L_0x06a5:
            int r5 = r7.via_bot_id
            if (r5 == 0) goto L_0x06c3
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
            org.telegram.tgnet.TLRPC$User r5 = r6.getUser(r5)
            if (r5 != 0) goto L_0x06c1
            org.telegram.messenger.MessagesStorage r5 = r25.getMessagesStorage()
            int r9 = r7.via_bot_id
            org.telegram.tgnet.TLRPC$User r5 = r5.getUserSync(r9)
            r9 = 1
            r6.putUser(r5, r9)
        L_0x06c1:
            r9 = 1
            goto L_0x06c5
        L_0x06c3:
            r5 = r8
            r9 = 0
        L_0x06c5:
            boolean r10 = r7 instanceof org.telegram.tgnet.TLRPC$TL_updateShortMessage
            if (r10 == 0) goto L_0x06da
            if (r1 == 0) goto L_0x06d8
            if (r4 == 0) goto L_0x06d1
            if (r2 != 0) goto L_0x06d1
            if (r3 == 0) goto L_0x06d8
        L_0x06d1:
            if (r9 == 0) goto L_0x06d6
            if (r5 != 0) goto L_0x06d6
            goto L_0x06d8
        L_0x06d6:
            r2 = 0
            goto L_0x0703
        L_0x06d8:
            r2 = 1
            goto L_0x0703
        L_0x06da:
            int r13 = r7.chat_id
            java.lang.Integer r13 = java.lang.Integer.valueOf(r13)
            org.telegram.tgnet.TLRPC$Chat r13 = r6.getChat(r13)
            if (r13 != 0) goto L_0x06f4
            org.telegram.messenger.MessagesStorage r13 = r25.getMessagesStorage()
            int r14 = r7.chat_id
            org.telegram.tgnet.TLRPC$Chat r13 = r13.getChatSync(r14)
            r14 = 1
            r6.putChat(r13, r14)
        L_0x06f4:
            if (r13 == 0) goto L_0x06d8
            if (r1 == 0) goto L_0x06d8
            if (r4 == 0) goto L_0x06fe
            if (r2 != 0) goto L_0x06fe
            if (r3 == 0) goto L_0x06d8
        L_0x06fe:
            if (r9 == 0) goto L_0x06d6
            if (r5 != 0) goto L_0x06d6
            goto L_0x06d8
        L_0x0703:
            if (r2 != 0) goto L_0x074e
            java.util.ArrayList<org.telegram.tgnet.TLRPC$MessageEntity> r3 = r7.entities
            boolean r3 = r3.isEmpty()
            if (r3 != 0) goto L_0x074e
            r3 = 0
        L_0x070e:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$MessageEntity> r4 = r7.entities
            int r4 = r4.size()
            if (r3 >= r4) goto L_0x074e
            java.util.ArrayList<org.telegram.tgnet.TLRPC$MessageEntity> r4 = r7.entities
            java.lang.Object r4 = r4.get(r3)
            org.telegram.tgnet.TLRPC$MessageEntity r4 = (org.telegram.tgnet.TLRPC$MessageEntity) r4
            boolean r5 = r4 instanceof org.telegram.tgnet.TLRPC$TL_messageEntityMentionName
            if (r5 == 0) goto L_0x074b
            org.telegram.tgnet.TLRPC$TL_messageEntityMentionName r4 = (org.telegram.tgnet.TLRPC$TL_messageEntityMentionName) r4
            int r4 = r4.user_id
            java.lang.Integer r5 = java.lang.Integer.valueOf(r4)
            org.telegram.tgnet.TLRPC$User r5 = r6.getUser(r5)
            if (r5 == 0) goto L_0x0734
            boolean r5 = r5.min
            if (r5 == 0) goto L_0x074b
        L_0x0734:
            org.telegram.messenger.MessagesStorage r5 = r25.getMessagesStorage()
            org.telegram.tgnet.TLRPC$User r4 = r5.getUserSync(r4)
            if (r4 == 0) goto L_0x0743
            boolean r5 = r4.min
            if (r5 == 0) goto L_0x0743
            r4 = r8
        L_0x0743:
            if (r4 != 0) goto L_0x0747
            r2 = 1
            goto L_0x074e
        L_0x0747:
            r4 = 1
            r6.putUser(r1, r4)
        L_0x074b:
            int r3 = r3 + 1
            goto L_0x070e
        L_0x074e:
            boolean r3 = r7.out
            if (r3 != 0) goto L_0x0782
            if (r1 == 0) goto L_0x0782
            org.telegram.tgnet.TLRPC$UserStatus r3 = r1.status
            if (r3 == 0) goto L_0x0782
            int r3 = r3.expires
            if (r3 > 0) goto L_0x0782
            org.telegram.tgnet.ConnectionsManager r3 = r25.getConnectionsManager()
            int r3 = r3.getCurrentTime()
            int r4 = r7.date
            int r3 = r3 - r4
            int r3 = java.lang.Math.abs(r3)
            r4 = 30
            if (r3 >= r4) goto L_0x0782
            java.util.concurrent.ConcurrentHashMap<java.lang.Integer, java.lang.Integer> r3 = r6.onlinePrivacy
            int r1 = r1.id
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            int r4 = r7.date
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)
            r3.put(r1, r4)
            r1 = 1
            goto L_0x0783
        L_0x0782:
            r1 = 0
        L_0x0783:
            if (r2 == 0) goto L_0x0788
        L_0x0785:
            r10 = 1
            goto L_0x094f
        L_0x0788:
            org.telegram.messenger.MessagesStorage r2 = r25.getMessagesStorage()
            int r2 = r2.getLastPtsValue()
            int r3 = r7.pts_count
            int r2 = r2 + r3
            int r3 = r7.pts
            if (r2 != r3) goto L_0x08da
            org.telegram.tgnet.TLRPC$TL_message r2 = new org.telegram.tgnet.TLRPC$TL_message
            r2.<init>()
            int r3 = r7.id
            r2.id = r3
            org.telegram.messenger.UserConfig r3 = r25.getUserConfig()
            int r3 = r3.getClientUserId()
            if (r10 == 0) goto L_0x07c0
            boolean r4 = r7.out
            if (r4 == 0) goto L_0x07b1
            r2.from_id = r3
            goto L_0x07b3
        L_0x07b1:
            r2.from_id = r0
        L_0x07b3:
            org.telegram.tgnet.TLRPC$TL_peerUser r4 = new org.telegram.tgnet.TLRPC$TL_peerUser
            r4.<init>()
            r2.to_id = r4
            r4.user_id = r0
            long r4 = (long) r0
            r2.dialog_id = r4
            goto L_0x07d1
        L_0x07c0:
            r2.from_id = r0
            org.telegram.tgnet.TLRPC$TL_peerChat r4 = new org.telegram.tgnet.TLRPC$TL_peerChat
            r4.<init>()
            r2.to_id = r4
            int r5 = r7.chat_id
            r4.chat_id = r5
            int r4 = -r5
            long r4 = (long) r4
            r2.dialog_id = r4
        L_0x07d1:
            org.telegram.tgnet.TLRPC$MessageFwdHeader r4 = r7.fwd_from
            r2.fwd_from = r4
            boolean r4 = r7.silent
            r2.silent = r4
            boolean r4 = r7.out
            r2.out = r4
            boolean r4 = r7.mentioned
            r2.mentioned = r4
            boolean r4 = r7.media_unread
            r2.media_unread = r4
            java.util.ArrayList<org.telegram.tgnet.TLRPC$MessageEntity> r4 = r7.entities
            r2.entities = r4
            java.lang.String r4 = r7.message
            r2.message = r4
            int r4 = r7.date
            r2.date = r4
            int r4 = r7.via_bot_id
            r2.via_bot_id = r4
            int r4 = r7.flags
            r4 = r4 | 256(0x100, float:3.59E-43)
            r2.flags = r4
            int r4 = r7.reply_to_msg_id
            r2.reply_to_msg_id = r4
            org.telegram.tgnet.TLRPC$TL_messageMediaEmpty r4 = new org.telegram.tgnet.TLRPC$TL_messageMediaEmpty
            r4.<init>()
            r2.media = r4
            boolean r4 = r2.out
            if (r4 == 0) goto L_0x080d
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r4 = r6.dialogs_read_outbox_max
            goto L_0x080f
        L_0x080d:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r4 = r6.dialogs_read_inbox_max
        L_0x080f:
            long r11 = r2.dialog_id
            java.lang.Long r5 = java.lang.Long.valueOf(r11)
            java.lang.Object r5 = r4.get(r5)
            java.lang.Integer r5 = (java.lang.Integer) r5
            if (r5 != 0) goto L_0x0836
            org.telegram.messenger.MessagesStorage r5 = r25.getMessagesStorage()
            boolean r9 = r2.out
            long r11 = r2.dialog_id
            int r5 = r5.getDialogReadMax(r9, r11)
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
            long r11 = r2.dialog_id
            java.lang.Long r9 = java.lang.Long.valueOf(r11)
            r4.put(r9, r5)
        L_0x0836:
            int r4 = r5.intValue()
            int r5 = r2.id
            if (r4 >= r5) goto L_0x0840
            r4 = 1
            goto L_0x0841
        L_0x0840:
            r4 = 0
        L_0x0841:
            r2.unread = r4
            long r4 = r2.dialog_id
            long r11 = (long) r3
            int r3 = (r4 > r11 ? 1 : (r4 == r11 ? 0 : -1))
            if (r3 != 0) goto L_0x0853
            r3 = 0
            r2.unread = r3
            r2.media_unread = r3
            r3 = 1
            r2.out = r3
            goto L_0x0854
        L_0x0853:
            r3 = 1
        L_0x0854:
            org.telegram.messenger.MessagesStorage r4 = r25.getMessagesStorage()
            int r5 = r7.pts
            r4.setLastPtsValue(r5)
            org.telegram.messenger.MessageObject r4 = new org.telegram.messenger.MessageObject
            int r5 = r6.currentAccount
            java.util.ArrayList<java.lang.Long> r9 = r6.createdDialogIds
            long r11 = r2.dialog_id
            java.lang.Long r11 = java.lang.Long.valueOf(r11)
            boolean r9 = r9.contains(r11)
            r4.<init>(r5, r2, r9)
            java.util.ArrayList r5 = new java.util.ArrayList
            r5.<init>()
            r5.add(r4)
            java.util.ArrayList r12 = new java.util.ArrayList
            r12.<init>()
            r12.add(r2)
            if (r10 == 0) goto L_0x08a0
            boolean r2 = r7.out
            if (r2 != 0) goto L_0x0891
            int r2 = r7.user_id
            long r9 = (long) r2
            boolean r2 = r6.updatePrintingUsersWithNewMessages(r9, r5)
            if (r2 == 0) goto L_0x0891
            r10 = 1
            goto L_0x0892
        L_0x0891:
            r10 = 0
        L_0x0892:
            if (r10 == 0) goto L_0x0897
            r25.updatePrintingStrings()
        L_0x0897:
            org.telegram.messenger.-$$Lambda$MessagesController$ZZUtnkqpxa3kUyMTaA0-WtziLFk r2 = new org.telegram.messenger.-$$Lambda$MessagesController$ZZUtnkqpxa3kUyMTaA0-WtziLFk
            r2.<init>(r10, r0, r5)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r2)
            goto L_0x08b5
        L_0x08a0:
            int r0 = r7.chat_id
            int r0 = -r0
            long r2 = (long) r0
            boolean r0 = r6.updatePrintingUsersWithNewMessages(r2, r5)
            if (r0 == 0) goto L_0x08ad
            r25.updatePrintingStrings()
        L_0x08ad:
            org.telegram.messenger.-$$Lambda$MessagesController$ruPHF-KbPBtwz1HN0aX4iR8eZKw r2 = new org.telegram.messenger.-$$Lambda$MessagesController$ruPHF-KbPBtwz1HN0aX4iR8eZKw
            r2.<init>(r0, r7, r5)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r2)
        L_0x08b5:
            boolean r0 = r4.isOut()
            if (r0 != 0) goto L_0x08cb
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r0 = r0.getStorageQueue()
            org.telegram.messenger.-$$Lambda$MessagesController$qrABlVuvPl7BLT6qeQthU9T8pwM r2 = new org.telegram.messenger.-$$Lambda$MessagesController$qrABlVuvPl7BLT6qeQthU9T8pwM
            r2.<init>(r5)
            r0.postRunnable(r2)
        L_0x08cb:
            org.telegram.messenger.MessagesStorage r11 = r25.getMessagesStorage()
            r13 = 0
            r14 = 1
            r15 = 0
            r16 = 0
            r17 = 0
            r11.putMessages((java.util.ArrayList<org.telegram.tgnet.TLRPC$Message>) r12, (boolean) r13, (boolean) r14, (boolean) r15, (int) r16, (boolean) r17)
            goto L_0x094e
        L_0x08da:
            r3 = 1
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            int r0 = r0.getLastPtsValue()
            int r2 = r7.pts
            if (r0 == r2) goto L_0x094e
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0917
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r2 = "need get diff short message, pts: "
            r0.append(r2)
            org.telegram.messenger.MessagesStorage r2 = r25.getMessagesStorage()
            int r2 = r2.getLastPtsValue()
            r0.append(r2)
            r0.append(r15)
            int r2 = r7.pts
            r0.append(r2)
            r0.append(r11)
            int r2 = r7.pts_count
            r0.append(r2)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x0917:
            boolean r0 = r6.gettingDifference
            if (r0 != 0) goto L_0x0934
            long r4 = r6.updatesStartWaitTimePts
            r9 = 0
            int r0 = (r4 > r9 ? 1 : (r4 == r9 ? 0 : -1))
            if (r0 == 0) goto L_0x0934
            long r4 = java.lang.System.currentTimeMillis()
            long r9 = r6.updatesStartWaitTimePts
            long r4 = r4 - r9
            long r4 = java.lang.Math.abs(r4)
            r9 = 1500(0x5dc, double:7.41E-321)
            int r0 = (r4 > r9 ? 1 : (r4 == r9 ? 0 : -1))
            if (r0 > 0) goto L_0x0785
        L_0x0934:
            long r2 = r6.updatesStartWaitTimePts
            r4 = 0
            int r0 = (r2 > r4 ? 1 : (r2 == r4 ? 0 : -1))
            if (r0 != 0) goto L_0x0942
            long r2 = java.lang.System.currentTimeMillis()
            r6.updatesStartWaitTimePts = r2
        L_0x0942:
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0949
            org.telegram.messenger.FileLog.d(r12)
        L_0x0949:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Updates> r0 = r6.updatesQueuePts
            r0.add(r7)
        L_0x094e:
            r10 = 0
        L_0x094f:
            r9 = r1
            goto L_0x0046
        L_0x0952:
            org.telegram.messenger.SecretChatHelper r0 = r25.getSecretChatHelper()
            r0.processPendingEncMessages()
            if (r27 != 0) goto L_0x0993
            r0 = 0
        L_0x095c:
            android.util.SparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Updates>> r2 = r6.updatesQueueChannels
            int r2 = r2.size()
            if (r0 >= r2) goto L_0x0982
            android.util.SparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Updates>> r2 = r6.updatesQueueChannels
            int r2 = r2.keyAt(r0)
            if (r8 == 0) goto L_0x097b
            java.lang.Integer r3 = java.lang.Integer.valueOf(r2)
            boolean r3 = r8.contains(r3)
            if (r3 == 0) goto L_0x097b
            r6.getChannelDifference(r2)
            r3 = 0
            goto L_0x097f
        L_0x097b:
            r3 = 0
            r6.processChannelsUpdatesQueue(r2, r3)
        L_0x097f:
            int r0 = r0 + 1
            goto L_0x095c
        L_0x0982:
            r3 = 0
            if (r10 == 0) goto L_0x0989
            r25.getDifference()
            goto L_0x0993
        L_0x0989:
            r0 = 0
        L_0x098a:
            r2 = 3
            if (r0 >= r2) goto L_0x0993
            r6.processUpdatesQueue(r0, r3)
            int r0 = r0 + 1
            goto L_0x098a
        L_0x0993:
            if (r1 == 0) goto L_0x09ad
            org.telegram.tgnet.TLRPC$TL_messages_receivedQueue r0 = new org.telegram.tgnet.TLRPC$TL_messages_receivedQueue
            r0.<init>()
            org.telegram.messenger.MessagesStorage r1 = r25.getMessagesStorage()
            int r1 = r1.getLastQtsValue()
            r0.max_qts = r1
            org.telegram.tgnet.ConnectionsManager r1 = r25.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$xg8uNX_J5CbNKWBj8KkY5bfrecM r2 = org.telegram.messenger.$$Lambda$MessagesController$xg8uNX_J5CbNKWBj8KkY5bfrecM.INSTANCE
            r1.sendRequest(r0, r2)
        L_0x09ad:
            if (r9 == 0) goto L_0x09b7
            org.telegram.messenger.-$$Lambda$MessagesController$pIBlFWdmW9Il3__4Kexn3jtMd5U r0 = new org.telegram.messenger.-$$Lambda$MessagesController$pIBlFWdmW9Il3__4Kexn3jtMd5U
            r0.<init>()
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r0)
        L_0x09b7:
            org.telegram.messenger.MessagesStorage r0 = r25.getMessagesStorage()
            org.telegram.messenger.MessagesStorage r1 = r25.getMessagesStorage()
            int r1 = r1.getLastSeqValue()
            org.telegram.messenger.MessagesStorage r2 = r25.getMessagesStorage()
            int r2 = r2.getLastPtsValue()
            org.telegram.messenger.MessagesStorage r3 = r25.getMessagesStorage()
            int r3 = r3.getLastDateValue()
            org.telegram.messenger.MessagesStorage r4 = r25.getMessagesStorage()
            int r4 = r4.getLastQtsValue()
            r0.saveDiffParams(r1, r2, r3, r4)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.processUpdates(org.telegram.tgnet.TLRPC$Updates, boolean):void");
    }

    public /* synthetic */ void lambda$processUpdates$260$MessagesController(boolean z, int i, ArrayList arrayList) {
        if (z) {
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 64);
        }
        updateInterfaceWithMessages((long) i, arrayList, false);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    public /* synthetic */ void lambda$processUpdates$261$MessagesController(boolean z, TLRPC$Updates tLRPC$Updates, ArrayList arrayList) {
        if (z) {
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 64);
        }
        updateInterfaceWithMessages((long) (-tLRPC$Updates.chat_id), arrayList, false);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    public /* synthetic */ void lambda$null$262$MessagesController(ArrayList arrayList) {
        getNotificationsController().processNewMessages(arrayList, true, false, (CountDownLatch) null);
    }

    public /* synthetic */ void lambda$processUpdates$263$MessagesController(ArrayList arrayList) {
        AndroidUtilities.runOnUIThread(new Runnable(arrayList) {
            private final /* synthetic */ ArrayList f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$262$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$processUpdates$265$MessagesController() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 4);
    }

    /* JADX WARNING: Removed duplicated region for block: B:573:0x0cbc  */
    /* JADX WARNING: Removed duplicated region for block: B:597:0x0d16  */
    /* JADX WARNING: Removed duplicated region for block: B:598:0x0d1b  */
    /* JADX WARNING: Removed duplicated region for block: B:607:0x0d41  */
    /* JADX WARNING: Removed duplicated region for block: B:608:0x0d44  */
    /* JADX WARNING: Removed duplicated region for block: B:611:0x0d54  */
    /* JADX WARNING: Removed duplicated region for block: B:614:0x0d75  */
    /* JADX WARNING: Removed duplicated region for block: B:615:0x0d77  */
    /* JADX WARNING: Removed duplicated region for block: B:618:0x0d81  */
    /* JADX WARNING: Removed duplicated region for block: B:626:0x0db8  */
    /* JADX WARNING: Removed duplicated region for block: B:627:0x0dbe  */
    /* JADX WARNING: Removed duplicated region for block: B:630:0x0dca  */
    /* JADX WARNING: Removed duplicated region for block: B:735:0x1017  */
    /* JADX WARNING: Removed duplicated region for block: B:768:0x10a4  */
    /* JADX WARNING: Removed duplicated region for block: B:843:0x122e  */
    /* JADX WARNING: Removed duplicated region for block: B:848:0x123d  */
    /* JADX WARNING: Removed duplicated region for block: B:851:0x125e  */
    /* JADX WARNING: Removed duplicated region for block: B:852:0x1261  */
    /* JADX WARNING: Removed duplicated region for block: B:856:0x1269  */
    /* JADX WARNING: Removed duplicated region for block: B:857:0x126f  */
    /* JADX WARNING: Removed duplicated region for block: B:860:0x127a  */
    /* JADX WARNING: Removed duplicated region for block: B:867:0x1299  */
    /* JADX WARNING: Removed duplicated region for block: B:871:0x12ab  */
    /* JADX WARNING: Removed duplicated region for block: B:920:0x1444  */
    /* JADX WARNING: Removed duplicated region for block: B:923:0x1457  */
    /* JADX WARNING: Removed duplicated region for block: B:928:0x1483  */
    /* JADX WARNING: Removed duplicated region for block: B:933:0x14a6  */
    /* JADX WARNING: Removed duplicated region for block: B:938:0x14cc  */
    /* JADX WARNING: Removed duplicated region for block: B:984:? A[ORIG_RETURN, RETURN, SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean processUpdateArray(java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r56, java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r57, java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r58, boolean r59, int r60) {
        /*
            r55 = this;
            r13 = r55
            r0 = r57
            r1 = r58
            boolean r2 = r56.isEmpty()
            r14 = 1
            if (r2 == 0) goto L_0x001a
            if (r0 != 0) goto L_0x0011
            if (r1 == 0) goto L_0x0019
        L_0x0011:
            org.telegram.messenger.-$$Lambda$MessagesController$JG3naeK47iTj-Npy6MzC7B4XcUw r2 = new org.telegram.messenger.-$$Lambda$MessagesController$JG3naeK47iTj-Npy6MzC7B4XcUw
            r2.<init>(r0, r1)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r2)
        L_0x0019:
            return r14
        L_0x001a:
            long r2 = java.lang.System.currentTimeMillis()
            if (r0 == 0) goto L_0x0040
            java.util.concurrent.ConcurrentHashMap r4 = new java.util.concurrent.ConcurrentHashMap
            r4.<init>()
            int r5 = r57.size()
            r6 = 0
        L_0x002a:
            if (r6 >= r5) goto L_0x003e
            java.lang.Object r7 = r0.get(r6)
            org.telegram.tgnet.TLRPC$User r7 = (org.telegram.tgnet.TLRPC$User) r7
            int r8 = r7.id
            java.lang.Integer r8 = java.lang.Integer.valueOf(r8)
            r4.put(r8, r7)
            int r6 = r6 + 1
            goto L_0x002a
        L_0x003e:
            r5 = 1
            goto L_0x0043
        L_0x0040:
            java.util.concurrent.ConcurrentHashMap<java.lang.Integer, org.telegram.tgnet.TLRPC$User> r4 = r13.users
            r5 = 0
        L_0x0043:
            if (r1 == 0) goto L_0x0065
            java.util.concurrent.ConcurrentHashMap r6 = new java.util.concurrent.ConcurrentHashMap
            r6.<init>()
            int r7 = r58.size()
            r8 = 0
        L_0x004f:
            if (r8 >= r7) goto L_0x0063
            java.lang.Object r9 = r1.get(r8)
            org.telegram.tgnet.TLRPC$Chat r9 = (org.telegram.tgnet.TLRPC$Chat) r9
            int r10 = r9.id
            java.lang.Integer r10 = java.lang.Integer.valueOf(r10)
            r6.put(r10, r9)
            int r8 = r8 + 1
            goto L_0x004f
        L_0x0063:
            r11 = r6
            goto L_0x0069
        L_0x0065:
            java.util.concurrent.ConcurrentHashMap<java.lang.Integer, org.telegram.tgnet.TLRPC$Chat> r6 = r13.chats
            r11 = r6
            r5 = 0
        L_0x0069:
            if (r59 == 0) goto L_0x006d
            r12 = 0
            goto L_0x006e
        L_0x006d:
            r12 = r5
        L_0x006e:
            if (r0 != 0) goto L_0x0072
            if (r1 == 0) goto L_0x007a
        L_0x0072:
            org.telegram.messenger.-$$Lambda$MessagesController$u5P7xLmmJhbSzEmiPB4tJag-wac r5 = new org.telegram.messenger.-$$Lambda$MessagesController$u5P7xLmmJhbSzEmiPB4tJag-wac
            r5.<init>(r0, r1)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r5)
        L_0x007a:
            int r0 = r56.size()
            r23 = r2
            r21 = r12
            r58 = 0
            r1 = 0
            r2 = 0
            r3 = 0
            r5 = 0
            r6 = 0
            r7 = 0
            r8 = 0
            r9 = 0
            r10 = 0
            r12 = 0
            r14 = 0
            r15 = 0
            r16 = 0
            r17 = 0
            r18 = 0
            r19 = 0
            r20 = 0
            r22 = 0
            r28 = 0
            r30 = 0
            r31 = 0
            r32 = 0
        L_0x00a4:
            if (r5 >= r0) goto L_0x12cf
            r25 = r0
            r0 = r56
            java.lang.Object r26 = r0.get(r5)
            r0 = r26
            org.telegram.tgnet.TLRPC$Update r0 = (org.telegram.tgnet.TLRPC$Update) r0
            boolean r26 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r26 == 0) goto L_0x00cf
            r26 = r5
            java.lang.StringBuilder r5 = new java.lang.StringBuilder
            r5.<init>()
            r27 = r6
            java.lang.String r6 = "process update "
            r5.append(r6)
            r5.append(r0)
            java.lang.String r5 = r5.toString()
            org.telegram.messenger.FileLog.d(r5)
            goto L_0x00d3
        L_0x00cf:
            r26 = r5
            r27 = r6
        L_0x00d3:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateNewMessage
            r34 = r7
            java.lang.String r6 = " channelId = "
            if (r5 != 0) goto L_0x0f1c
            boolean r7 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateNewChannelMessage
            if (r7 != 0) goto L_0x0f1c
            boolean r7 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateNewScheduledMessage
            if (r7 == 0) goto L_0x00e5
            goto L_0x0f1c
        L_0x00e5:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateReadMessagesContents
            if (r5 == 0) goto L_0x0122
            org.telegram.tgnet.TLRPC$TL_updateReadMessagesContents r0 = (org.telegram.tgnet.TLRPC$TL_updateReadMessagesContents) r0
            if (r14 != 0) goto L_0x00f2
            java.util.ArrayList r14 = new java.util.ArrayList
            r14.<init>()
        L_0x00f2:
            java.util.ArrayList<java.lang.Integer> r5 = r0.messages
            int r5 = r5.size()
            r6 = 0
        L_0x00f9:
            if (r6 >= r5) goto L_0x0116
            java.util.ArrayList<java.lang.Integer> r7 = r0.messages
            java.lang.Object r7 = r7.get(r6)
            java.lang.Integer r7 = (java.lang.Integer) r7
            int r7 = r7.intValue()
            r38 = r8
            long r7 = (long) r7
            java.lang.Long r7 = java.lang.Long.valueOf(r7)
            r14.add(r7)
            int r6 = r6 + 1
            r8 = r38
            goto L_0x00f9
        L_0x0116:
            r38 = r8
            r6 = r27
            r5 = r28
            r7 = r34
        L_0x011e:
            r28 = r58
            goto L_0x12c4
        L_0x0122:
            r38 = r8
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateChannelReadMessagesContents
            if (r5 == 0) goto L_0x016f
            org.telegram.tgnet.TLRPC$TL_updateChannelReadMessagesContents r0 = (org.telegram.tgnet.TLRPC$TL_updateChannelReadMessagesContents) r0
            if (r14 != 0) goto L_0x0131
            java.util.ArrayList r14 = new java.util.ArrayList
            r14.<init>()
        L_0x0131:
            java.util.ArrayList<java.lang.Integer> r5 = r0.messages
            int r5 = r5.size()
            r6 = 0
        L_0x0138:
            if (r6 >= r5) goto L_0x0164
            java.util.ArrayList<java.lang.Integer> r8 = r0.messages
            java.lang.Object r8 = r8.get(r6)
            java.lang.Integer r8 = (java.lang.Integer) r8
            int r8 = r8.intValue()
            long r7 = (long) r8
            r29 = r5
            int r5 = r0.channel_id
            r41 = r3
            r40 = r4
            long r3 = (long) r5
            r5 = 32
            long r3 = r3 << r5
            long r3 = r3 | r7
            java.lang.Long r3 = java.lang.Long.valueOf(r3)
            r14.add(r3)
            int r6 = r6 + 1
            r5 = r29
            r4 = r40
            r3 = r41
            goto L_0x0138
        L_0x0164:
            r41 = r3
            r6 = r27
            r5 = r28
            r7 = r34
            r8 = r38
            goto L_0x011e
        L_0x016f:
            r41 = r3
            r40 = r4
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateReadHistoryInbox
            if (r3 == 0) goto L_0x01d4
            org.telegram.tgnet.TLRPC$TL_updateReadHistoryInbox r0 = (org.telegram.tgnet.TLRPC$TL_updateReadHistoryInbox) r0
            if (r15 != 0) goto L_0x0180
            org.telegram.messenger.support.SparseLongArray r15 = new org.telegram.messenger.support.SparseLongArray
            r15.<init>()
        L_0x0180:
            org.telegram.tgnet.TLRPC$Peer r3 = r0.peer
            int r4 = r3.chat_id
            if (r4 == 0) goto L_0x0193
            int r3 = -r4
            int r4 = r0.max_id
            long r4 = (long) r4
            r15.put(r3, r4)
            org.telegram.tgnet.TLRPC$Peer r3 = r0.peer
            int r3 = r3.chat_id
            int r3 = -r3
            goto L_0x019f
        L_0x0193:
            int r3 = r3.user_id
            int r4 = r0.max_id
            long r4 = (long) r4
            r15.put(r3, r4)
            org.telegram.tgnet.TLRPC$Peer r3 = r0.peer
            int r3 = r3.user_id
        L_0x019f:
            long r3 = (long) r3
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r5 = r13.dialogs_read_inbox_max
            java.lang.Long r6 = java.lang.Long.valueOf(r3)
            java.lang.Object r5 = r5.get(r6)
            java.lang.Integer r5 = (java.lang.Integer) r5
            if (r5 != 0) goto L_0x01bb
            org.telegram.messenger.MessagesStorage r5 = r55.getMessagesStorage()
            r6 = 0
            int r5 = r5.getDialogReadMax(r6, r3)
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
        L_0x01bb:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r6 = r13.dialogs_read_inbox_max
            java.lang.Long r3 = java.lang.Long.valueOf(r3)
            int r4 = r5.intValue()
            int r0 = r0.max_id
            int r0 = java.lang.Math.max(r4, r0)
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)
            r6.put(r3, r0)
            goto L_0x0257
        L_0x01d4:
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateReadHistoryOutbox
            if (r3 == 0) goto L_0x0234
            org.telegram.tgnet.TLRPC$TL_updateReadHistoryOutbox r0 = (org.telegram.tgnet.TLRPC$TL_updateReadHistoryOutbox) r0
            if (r12 != 0) goto L_0x01e1
            org.telegram.messenger.support.SparseLongArray r12 = new org.telegram.messenger.support.SparseLongArray
            r12.<init>()
        L_0x01e1:
            org.telegram.tgnet.TLRPC$Peer r3 = r0.peer
            int r4 = r3.chat_id
            if (r4 == 0) goto L_0x01f4
            int r3 = -r4
            int r4 = r0.max_id
            long r4 = (long) r4
            r12.put(r3, r4)
            org.telegram.tgnet.TLRPC$Peer r3 = r0.peer
            int r3 = r3.chat_id
            int r3 = -r3
            goto L_0x0200
        L_0x01f4:
            int r3 = r3.user_id
            int r4 = r0.max_id
            long r4 = (long) r4
            r12.put(r3, r4)
            org.telegram.tgnet.TLRPC$Peer r3 = r0.peer
            int r3 = r3.user_id
        L_0x0200:
            long r3 = (long) r3
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r5 = r13.dialogs_read_outbox_max
            java.lang.Long r6 = java.lang.Long.valueOf(r3)
            java.lang.Object r5 = r5.get(r6)
            java.lang.Integer r5 = (java.lang.Integer) r5
            if (r5 != 0) goto L_0x021c
            org.telegram.messenger.MessagesStorage r5 = r55.getMessagesStorage()
            r6 = 1
            int r5 = r5.getDialogReadMax(r6, r3)
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
        L_0x021c:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r6 = r13.dialogs_read_outbox_max
            java.lang.Long r3 = java.lang.Long.valueOf(r3)
            int r4 = r5.intValue()
            int r0 = r0.max_id
            int r0 = java.lang.Math.max(r4, r0)
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)
            r6.put(r3, r0)
            goto L_0x0257
        L_0x0234:
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateDeleteMessages
            if (r3 == 0) goto L_0x0265
            org.telegram.tgnet.TLRPC$TL_updateDeleteMessages r0 = (org.telegram.tgnet.TLRPC$TL_updateDeleteMessages) r0
            if (r1 != 0) goto L_0x0241
            android.util.SparseArray r1 = new android.util.SparseArray
            r1.<init>()
        L_0x0241:
            r3 = 0
            java.lang.Object r4 = r1.get(r3)
            java.util.ArrayList r4 = (java.util.ArrayList) r4
            if (r4 != 0) goto L_0x0252
            java.util.ArrayList r4 = new java.util.ArrayList
            r4.<init>()
            r1.put(r3, r4)
        L_0x0252:
            java.util.ArrayList<java.lang.Integer> r0 = r0.messages
            r4.addAll(r0)
        L_0x0257:
            r6 = r27
            r5 = r28
            r7 = r34
            r8 = r38
            r4 = r40
        L_0x0261:
            r3 = r41
            goto L_0x011e
        L_0x0265:
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateDeleteScheduledMessages
            if (r3 == 0) goto L_0x0299
            org.telegram.tgnet.TLRPC$TL_updateDeleteScheduledMessages r0 = (org.telegram.tgnet.TLRPC$TL_updateDeleteScheduledMessages) r0
            if (r2 != 0) goto L_0x0272
            android.util.SparseArray r2 = new android.util.SparseArray
            r2.<init>()
        L_0x0272:
            org.telegram.tgnet.TLRPC$Peer r3 = r0.peer
            boolean r4 = r3 instanceof org.telegram.tgnet.TLRPC$TL_peerChannel
            if (r4 == 0) goto L_0x0281
            int r3 = r3.channel_id
            java.lang.Object r4 = r2.get(r3)
            java.util.ArrayList r4 = (java.util.ArrayList) r4
            goto L_0x0289
        L_0x0281:
            r3 = 0
            java.lang.Object r4 = r2.get(r3)
            java.util.ArrayList r4 = (java.util.ArrayList) r4
            r3 = 0
        L_0x0289:
            if (r4 != 0) goto L_0x0293
            java.util.ArrayList r4 = new java.util.ArrayList
            r4.<init>()
            r2.put(r3, r4)
        L_0x0293:
            java.util.ArrayList<java.lang.Integer> r0 = r0.messages
            r4.addAll(r0)
            goto L_0x0257
        L_0x0299:
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateUserTyping
            if (r3 != 0) goto L_0x0e10
            boolean r4 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateChatUserTyping
            if (r4 == 0) goto L_0x02a3
            goto L_0x0e10
        L_0x02a3:
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateChatParticipants
            if (r3 == 0) goto L_0x02bc
            org.telegram.tgnet.TLRPC$TL_updateChatParticipants r0 = (org.telegram.tgnet.TLRPC$TL_updateChatParticipants) r0
            r10 = r10 | 32
            if (r18 != 0) goto L_0x02b2
            java.util.ArrayList r18 = new java.util.ArrayList
            r18.<init>()
        L_0x02b2:
            r3 = r18
            org.telegram.tgnet.TLRPC$ChatParticipants r0 = r0.participants
            r3.add(r0)
            r18 = r3
            goto L_0x0257
        L_0x02bc:
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateUserStatus
            if (r3 == 0) goto L_0x02d1
            r10 = r10 | 4
            if (r16 != 0) goto L_0x02c9
            java.util.ArrayList r16 = new java.util.ArrayList
            r16.<init>()
        L_0x02c9:
            r3 = r16
            r3.add(r0)
        L_0x02ce:
            r16 = r3
            goto L_0x0257
        L_0x02d1:
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateUserName
            if (r3 == 0) goto L_0x02e4
            r10 = r10 | 1
            if (r16 != 0) goto L_0x02de
            java.util.ArrayList r16 = new java.util.ArrayList
            r16.<init>()
        L_0x02de:
            r3 = r16
            r3.add(r0)
            goto L_0x02ce
        L_0x02e4:
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateUserPhoto
            if (r3 == 0) goto L_0x0303
            r3 = r0
            org.telegram.tgnet.TLRPC$TL_updateUserPhoto r3 = (org.telegram.tgnet.TLRPC$TL_updateUserPhoto) r3
            r10 = r10 | 2
            org.telegram.messenger.MessagesStorage r4 = r55.getMessagesStorage()
            int r3 = r3.user_id
            r4.clearUserPhotos(r3)
            if (r16 != 0) goto L_0x02fd
            java.util.ArrayList r16 = new java.util.ArrayList
            r16.<init>()
        L_0x02fd:
            r3 = r16
            r3.add(r0)
            goto L_0x02ce
        L_0x0303:
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateUserPhone
            if (r3 == 0) goto L_0x0316
            r10 = r10 | 1024(0x400, float:1.435E-42)
            if (r16 != 0) goto L_0x0310
            java.util.ArrayList r16 = new java.util.ArrayList
            r16.<init>()
        L_0x0310:
            r3 = r16
            r3.add(r0)
            goto L_0x02ce
        L_0x0316:
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updatePeerSettings
            if (r3 == 0) goto L_0x03b3
            r3 = r0
            org.telegram.tgnet.TLRPC$TL_updatePeerSettings r3 = (org.telegram.tgnet.TLRPC$TL_updatePeerSettings) r3
            if (r34 != 0) goto L_0x0325
            java.util.ArrayList r7 = new java.util.ArrayList
            r7.<init>()
            goto L_0x0327
        L_0x0325:
            r7 = r34
        L_0x0327:
            org.telegram.tgnet.TLRPC$Peer r4 = r3.peer
            boolean r5 = r4 instanceof org.telegram.tgnet.TLRPC$TL_peerUser
            if (r5 == 0) goto L_0x039a
            int r4 = r4.user_id
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)
            r8 = r40
            java.lang.Object r4 = r8.get(r4)
            org.telegram.tgnet.TLRPC$User r4 = (org.telegram.tgnet.TLRPC$User) r4
            if (r4 == 0) goto L_0x039c
            boolean r4 = r4.contact
            r5 = -1
            if (r4 == 0) goto L_0x036e
            org.telegram.tgnet.TLRPC$Peer r4 = r3.peer
            int r4 = r4.user_id
            int r4 = -r4
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)
            int r4 = r7.indexOf(r4)
            if (r4 == r5) goto L_0x0354
            r7.remove(r4)
        L_0x0354:
            org.telegram.tgnet.TLRPC$Peer r4 = r3.peer
            int r4 = r4.user_id
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)
            boolean r4 = r7.contains(r4)
            if (r4 != 0) goto L_0x039c
            org.telegram.tgnet.TLRPC$Peer r3 = r3.peer
            int r3 = r3.user_id
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)
            r7.add(r3)
            goto L_0x039c
        L_0x036e:
            org.telegram.tgnet.TLRPC$Peer r4 = r3.peer
            int r4 = r4.user_id
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)
            int r4 = r7.indexOf(r4)
            if (r4 == r5) goto L_0x037f
            r7.remove(r4)
        L_0x037f:
            org.telegram.tgnet.TLRPC$Peer r4 = r3.peer
            int r4 = r4.user_id
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)
            boolean r4 = r7.contains(r4)
            if (r4 != 0) goto L_0x039c
            org.telegram.tgnet.TLRPC$Peer r3 = r3.peer
            int r3 = r3.user_id
            int r3 = -r3
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)
            r7.add(r3)
            goto L_0x039c
        L_0x039a:
            r8 = r40
        L_0x039c:
            if (r16 != 0) goto L_0x03a3
            java.util.ArrayList r16 = new java.util.ArrayList
            r16.<init>()
        L_0x03a3:
            r3 = r16
            r3.add(r0)
            r16 = r3
            r4 = r8
            r6 = r27
            r5 = r28
            r8 = r38
            goto L_0x0261
        L_0x03b3:
            r8 = r40
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateNewEncryptedMessage
            if (r3 == 0) goto L_0x04a3
            org.telegram.messenger.SecretChatHelper r3 = r55.getSecretChatHelper()
            org.telegram.tgnet.TLRPC$TL_updateNewEncryptedMessage r0 = (org.telegram.tgnet.TLRPC$TL_updateNewEncryptedMessage) r0
            org.telegram.tgnet.TLRPC$EncryptedMessage r4 = r0.message
            java.util.ArrayList r3 = r3.decryptMessage(r4)
            if (r3 == 0) goto L_0x0481
            boolean r4 = r3.isEmpty()
            if (r4 != 0) goto L_0x0481
            org.telegram.tgnet.TLRPC$EncryptedMessage r0 = r0.message
            int r0 = r0.chat_id
            long r4 = (long) r0
            r0 = 32
            long r6 = r4 << r0
            if (r9 != 0) goto L_0x03dd
            android.util.LongSparseArray r9 = new android.util.LongSparseArray
            r9.<init>()
        L_0x03dd:
            r0 = r9
            java.lang.Object r4 = r0.get(r6)
            java.util.ArrayList r4 = (java.util.ArrayList) r4
            if (r4 != 0) goto L_0x03ee
            java.util.ArrayList r4 = new java.util.ArrayList
            r4.<init>()
            r0.put(r6, r4)
        L_0x03ee:
            int r9 = r3.size()
            r29 = r0
            r5 = r28
            r0 = 0
            r28 = r58
        L_0x03f9:
            if (r0 >= r9) goto L_0x0470
            java.lang.Object r33 = r3.get(r0)
            r40 = r2
            r2 = r33
            org.telegram.tgnet.TLRPC$Message r2 = (org.telegram.tgnet.TLRPC$Message) r2
            org.telegram.messenger.ImageLoader.saveMessageThumbs(r2)
            if (r5 != 0) goto L_0x040f
            java.util.ArrayList r5 = new java.util.ArrayList
            r5.<init>()
        L_0x040f:
            r5.add(r2)
            r33 = r3
            org.telegram.messenger.MessageObject r3 = new org.telegram.messenger.MessageObject
            r39 = r8
            int r8 = r13.currentAccount
            r35 = r5
            java.util.ArrayList<java.lang.Long> r5 = r13.createdDialogIds
            r36 = r9
            java.lang.Long r9 = java.lang.Long.valueOf(r6)
            boolean r37 = r5.contains(r9)
            r5 = r3
            r42 = r6
            r9 = r27
            r6 = r8
            r8 = r34
            r7 = r2
            r34 = r14
            r2 = r38
            r27 = r39
            r14 = r8
            r8 = r27
            r38 = r14
            r14 = r9
            r9 = r11
            r44 = r10
            r10 = r37
            r5.<init>((int) r6, (org.telegram.tgnet.TLRPC$Message) r7, (java.util.AbstractMap<java.lang.Integer, org.telegram.tgnet.TLRPC$User>) r8, (java.util.AbstractMap<java.lang.Integer, org.telegram.tgnet.TLRPC$Chat>) r9, (boolean) r10)
            r4.add(r3)
            if (r28 != 0) goto L_0x0450
            java.util.ArrayList r5 = new java.util.ArrayList
            r5.<init>()
            goto L_0x0452
        L_0x0450:
            r5 = r28
        L_0x0452:
            r5.add(r3)
            int r0 = r0 + 1
            r28 = r5
            r8 = r27
            r3 = r33
            r5 = r35
            r9 = r36
            r6 = r42
            r10 = r44
            r27 = r14
            r14 = r34
            r34 = r38
            r38 = r2
            r2 = r40
            goto L_0x03f9
        L_0x0470:
            r40 = r2
            r44 = r10
            r2 = r38
            r38 = r34
            r34 = r14
            r14 = r27
            r27 = r8
            r9 = r29
            goto L_0x0493
        L_0x0481:
            r40 = r2
            r44 = r10
            r2 = r38
            r38 = r34
            r34 = r14
            r14 = r27
            r27 = r8
            r5 = r28
            r28 = r58
        L_0x0493:
            r8 = r2
            r6 = r14
            r4 = r27
            r14 = r34
            r7 = r38
            r2 = r40
            r3 = r41
            r10 = r44
            goto L_0x12c4
        L_0x04a3:
            r40 = r2
            r44 = r10
            r2 = r38
            r38 = r34
            r34 = r14
            r14 = r27
            r27 = r8
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateEncryptedChatTyping
            if (r3 == 0) goto L_0x055d
            org.telegram.tgnet.TLRPC$TL_updateEncryptedChatTyping r0 = (org.telegram.tgnet.TLRPC$TL_updateEncryptedChatTyping) r0
            int r3 = r0.chat_id
            r4 = 1
            org.telegram.tgnet.TLRPC$EncryptedChat r3 = r13.getEncryptedChatDB(r3, r4)
            if (r3 == 0) goto L_0x0545
            int r0 = r0.chat_id
            long r4 = (long) r0
            r0 = 32
            long r4 = r4 << r0
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.util.ArrayList<org.telegram.messenger.MessagesController$PrintingUser>> r0 = r13.printingUsers
            java.lang.Long r6 = java.lang.Long.valueOf(r4)
            java.lang.Object r0 = r0.get(r6)
            java.util.ArrayList r0 = (java.util.ArrayList) r0
            if (r0 != 0) goto L_0x04e2
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.util.ArrayList<org.telegram.messenger.MessagesController$PrintingUser>> r6 = r13.printingUsers
            java.lang.Long r4 = java.lang.Long.valueOf(r4)
            r6.put(r4, r0)
        L_0x04e2:
            int r4 = r0.size()
            r5 = 0
        L_0x04e7:
            if (r5 >= r4) goto L_0x0507
            java.lang.Object r6 = r0.get(r5)
            org.telegram.messenger.MessagesController$PrintingUser r6 = (org.telegram.messenger.MessagesController.PrintingUser) r6
            int r7 = r6.userId
            int r8 = r3.user_id
            if (r7 != r8) goto L_0x0502
            r7 = r23
            r6.lastTime = r7
            org.telegram.tgnet.TLRPC$TL_sendMessageTypingAction r4 = new org.telegram.tgnet.TLRPC$TL_sendMessageTypingAction
            r4.<init>()
            r6.action = r4
            r4 = 1
            goto L_0x050a
        L_0x0502:
            r7 = r23
            int r5 = r5 + 1
            goto L_0x04e7
        L_0x0507:
            r7 = r23
            r4 = 0
        L_0x050a:
            if (r4 != 0) goto L_0x0523
            org.telegram.messenger.MessagesController$PrintingUser r4 = new org.telegram.messenger.MessagesController$PrintingUser
            r4.<init>()
            int r5 = r3.user_id
            r4.userId = r5
            r4.lastTime = r7
            org.telegram.tgnet.TLRPC$TL_sendMessageTypingAction r5 = new org.telegram.tgnet.TLRPC$TL_sendMessageTypingAction
            r5.<init>()
            r4.action = r5
            r0.add(r4)
            r20 = 1
        L_0x0523:
            org.telegram.tgnet.ConnectionsManager r0 = r55.getConnectionsManager()
            int r0 = r0.getCurrentTime()
            int r0 = r0 - r60
            int r0 = java.lang.Math.abs(r0)
            r4 = 30
            if (r0 >= r4) goto L_0x0547
            java.util.concurrent.ConcurrentHashMap<java.lang.Integer, java.lang.Integer> r0 = r13.onlinePrivacy
            int r3 = r3.user_id
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)
            java.lang.Integer r4 = java.lang.Integer.valueOf(r60)
            r0.put(r3, r4)
            goto L_0x0547
        L_0x0545:
            r7 = r23
        L_0x0547:
            r23 = r7
            r6 = r14
            r4 = r27
        L_0x054c:
            r5 = r28
            r14 = r34
            r7 = r38
            r3 = r41
        L_0x0554:
            r10 = r44
            r28 = r58
            r8 = r2
        L_0x0559:
            r2 = r40
            goto L_0x12c4
        L_0x055d:
            r7 = r23
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateEncryptedMessagesRead
            if (r3 == 0) goto L_0x0592
            org.telegram.tgnet.TLRPC$TL_updateEncryptedMessagesRead r0 = (org.telegram.tgnet.TLRPC$TL_updateEncryptedMessagesRead) r0
            if (r31 != 0) goto L_0x056d
            android.util.SparseIntArray r3 = new android.util.SparseIntArray
            r3.<init>()
            goto L_0x056f
        L_0x056d:
            r3 = r31
        L_0x056f:
            int r4 = r0.chat_id
            int r5 = r0.max_date
            r3.put(r4, r5)
            if (r41 != 0) goto L_0x057e
            java.util.ArrayList r4 = new java.util.ArrayList
            r4.<init>()
            goto L_0x0580
        L_0x057e:
            r4 = r41
        L_0x0580:
            r4.add(r0)
            r31 = r3
            r3 = r4
            r23 = r7
            r6 = r14
            r4 = r27
            r5 = r28
            r14 = r34
            r7 = r38
            goto L_0x0554
        L_0x0592:
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateChatParticipantAdd
            if (r3 == 0) goto L_0x05be
            org.telegram.tgnet.TLRPC$TL_updateChatParticipantAdd r0 = (org.telegram.tgnet.TLRPC$TL_updateChatParticipantAdd) r0
            org.telegram.messenger.MessagesStorage r45 = r55.getMessagesStorage()
            int r3 = r0.chat_id
            int r4 = r0.user_id
            r48 = 0
            int r5 = r0.inviter_id
            int r0 = r0.version
            r46 = r3
            r47 = r4
            r49 = r5
            r50 = r0
            r45.updateChatInfo(r46, r47, r48, r49, r50)
        L_0x05b1:
            r42 = r2
            r51 = r7
            r2 = r9
            r4 = r27
        L_0x05b8:
            r3 = r30
        L_0x05ba:
            r30 = r1
            goto L_0x0df6
        L_0x05be:
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateChatParticipantDelete
            if (r3 == 0) goto L_0x05dc
            org.telegram.tgnet.TLRPC$TL_updateChatParticipantDelete r0 = (org.telegram.tgnet.TLRPC$TL_updateChatParticipantDelete) r0
            org.telegram.messenger.MessagesStorage r45 = r55.getMessagesStorage()
            int r3 = r0.chat_id
            int r4 = r0.user_id
            r48 = 1
            r49 = 0
            int r0 = r0.version
            r46 = r3
            r47 = r4
            r50 = r0
            r45.updateChatInfo(r46, r47, r48, r49, r50)
            goto L_0x05b1
        L_0x05dc:
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateDcOptions
            if (r3 != 0) goto L_0x0de4
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateConfig
            if (r3 == 0) goto L_0x05e6
            goto L_0x0de4
        L_0x05e6:
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateEncryption
            if (r3 == 0) goto L_0x05fb
            org.telegram.messenger.SecretChatHelper r3 = r55.getSecretChatHelper()
            org.telegram.tgnet.TLRPC$TL_updateEncryption r0 = (org.telegram.tgnet.TLRPC$TL_updateEncryption) r0
            r4 = r27
            r3.processUpdateEncryption(r0, r4)
        L_0x05f5:
            r42 = r2
            r51 = r7
            r2 = r9
            goto L_0x05b8
        L_0x05fb:
            r4 = r27
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateUserBlocked
            if (r3 == 0) goto L_0x0614
            org.telegram.tgnet.TLRPC$TL_updateUserBlocked r0 = (org.telegram.tgnet.TLRPC$TL_updateUserBlocked) r0
            org.telegram.messenger.MessagesStorage r3 = r55.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r3 = r3.getStorageQueue()
            org.telegram.messenger.-$$Lambda$MessagesController$UtcrLKY8HRWI0DKI1sKlLP2FgBs r5 = new org.telegram.messenger.-$$Lambda$MessagesController$UtcrLKY8HRWI0DKI1sKlLP2FgBs
            r5.<init>(r0)
            r3.postRunnable(r5)
            goto L_0x05f5
        L_0x0614:
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateNotifySettings
            if (r3 == 0) goto L_0x062b
            if (r16 != 0) goto L_0x061f
            java.util.ArrayList r16 = new java.util.ArrayList
            r16.<init>()
        L_0x061f:
            r3 = r16
            r3.add(r0)
            r16 = r3
            r23 = r7
            r6 = r14
            goto L_0x054c
        L_0x062b:
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateServiceNotification
            if (r3 == 0) goto L_0x072f
            org.telegram.tgnet.TLRPC$TL_updateServiceNotification r0 = (org.telegram.tgnet.TLRPC$TL_updateServiceNotification) r0
            boolean r3 = r0.popup
            if (r3 == 0) goto L_0x0647
            java.lang.String r3 = r0.message
            if (r3 == 0) goto L_0x0647
            int r3 = r3.length()
            if (r3 <= 0) goto L_0x0647
            org.telegram.messenger.-$$Lambda$MessagesController$uE0NF1zz0M1zsPpx4r34sv0Eb14 r3 = new org.telegram.messenger.-$$Lambda$MessagesController$uE0NF1zz0M1zsPpx4r34sv0Eb14
            r3.<init>(r0)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r3)
        L_0x0647:
            int r3 = r0.flags
            r5 = 2
            r3 = r3 & r5
            if (r3 == 0) goto L_0x0715
            org.telegram.tgnet.TLRPC$TL_message r3 = new org.telegram.tgnet.TLRPC$TL_message
            r3.<init>()
            org.telegram.messenger.UserConfig r5 = r55.getUserConfig()
            int r5 = r5.getNewMessageId()
            r3.id = r5
            r3.local_id = r5
            org.telegram.messenger.UserConfig r5 = r55.getUserConfig()
            r6 = 0
            r5.saveConfig(r6)
            r5 = 1
            r3.unread = r5
            r5 = 256(0x100, float:3.59E-43)
            r3.flags = r5
            int r5 = r0.inbox_date
            if (r5 == 0) goto L_0x0674
            r3.date = r5
            goto L_0x067f
        L_0x0674:
            long r5 = java.lang.System.currentTimeMillis()
            r23 = 1000(0x3e8, double:4.94E-321)
            long r5 = r5 / r23
            int r6 = (int) r5
            r3.date = r6
        L_0x067f:
            r5 = 777000(0xbdb28, float:1.088809E-39)
            r3.from_id = r5
            org.telegram.tgnet.TLRPC$TL_peerUser r5 = new org.telegram.tgnet.TLRPC$TL_peerUser
            r5.<init>()
            r3.to_id = r5
            org.telegram.messenger.UserConfig r6 = r55.getUserConfig()
            int r6 = r6.getClientUserId()
            r5.user_id = r6
            r5 = 777000(0xbdb28, double:3.83889E-318)
            r3.dialog_id = r5
            org.telegram.tgnet.TLRPC$MessageMedia r5 = r0.media
            if (r5 == 0) goto L_0x06a6
            r3.media = r5
            int r5 = r3.flags
            r5 = r5 | 512(0x200, float:7.175E-43)
            r3.flags = r5
        L_0x06a6:
            java.lang.String r5 = r0.message
            r3.message = r5
            java.util.ArrayList<org.telegram.tgnet.TLRPC$MessageEntity> r0 = r0.entities
            if (r0 == 0) goto L_0x06b6
            r3.entities = r0
            int r0 = r3.flags
            r0 = r0 | 128(0x80, float:1.794E-43)
            r3.flags = r0
        L_0x06b6:
            if (r28 != 0) goto L_0x06bd
            java.util.ArrayList r28 = new java.util.ArrayList
            r28.<init>()
        L_0x06bd:
            r0 = r28
            r0.add(r3)
            org.telegram.messenger.MessageObject r10 = new org.telegram.messenger.MessageObject
            int r6 = r13.currentAccount
            java.util.ArrayList<java.lang.Long> r5 = r13.createdDialogIds
            r23 = r7
            long r7 = r3.dialog_id
            java.lang.Long r7 = java.lang.Long.valueOf(r7)
            boolean r27 = r5.contains(r7)
            r5 = r10
            r51 = r23
            r7 = r3
            r8 = r4
            r42 = r2
            r2 = r9
            r9 = r11
            r23 = r0
            r0 = r10
            r10 = r27
            r5.<init>((int) r6, (org.telegram.tgnet.TLRPC$Message) r7, (java.util.AbstractMap<java.lang.Integer, org.telegram.tgnet.TLRPC$User>) r8, (java.util.AbstractMap<java.lang.Integer, org.telegram.tgnet.TLRPC$Chat>) r9, (boolean) r10)
            if (r2 != 0) goto L_0x06ed
            android.util.LongSparseArray r9 = new android.util.LongSparseArray
            r9.<init>()
            goto L_0x06ee
        L_0x06ed:
            r9 = r2
        L_0x06ee:
            long r5 = r3.dialog_id
            java.lang.Object r2 = r9.get(r5)
            java.util.ArrayList r2 = (java.util.ArrayList) r2
            if (r2 != 0) goto L_0x0702
            java.util.ArrayList r2 = new java.util.ArrayList
            r2.<init>()
            long r5 = r3.dialog_id
            r9.put(r5, r2)
        L_0x0702:
            r2.add(r0)
            if (r58 != 0) goto L_0x070d
            java.util.ArrayList r2 = new java.util.ArrayList
            r2.<init>()
            goto L_0x070f
        L_0x070d:
            r2 = r58
        L_0x070f:
            r2.add(r0)
            r28 = r23
            goto L_0x071c
        L_0x0715:
            r42 = r2
            r51 = r7
            r2 = r9
            r2 = r58
        L_0x071c:
            r6 = r14
            r5 = r28
            r14 = r34
            r7 = r38
            r3 = r41
            r8 = r42
            r10 = r44
            r23 = r51
            r28 = r2
            goto L_0x0559
        L_0x072f:
            r42 = r2
            r51 = r7
            r2 = r9
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateDialogPinned
            if (r3 == 0) goto L_0x0750
            if (r16 != 0) goto L_0x073f
            java.util.ArrayList r16 = new java.util.ArrayList
            r16.<init>()
        L_0x073f:
            r3 = r16
            r3.add(r0)
        L_0x0744:
            r9 = r2
            r16 = r3
        L_0x0747:
            r6 = r14
        L_0x0748:
            r5 = r28
            r14 = r34
            r7 = r38
            goto L_0x110f
        L_0x0750:
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updatePinnedDialogs
            if (r3 == 0) goto L_0x0761
            if (r16 != 0) goto L_0x075b
            java.util.ArrayList r16 = new java.util.ArrayList
            r16.<init>()
        L_0x075b:
            r3 = r16
            r3.add(r0)
            goto L_0x0744
        L_0x0761:
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateFolderPeers
            if (r3 == 0) goto L_0x0781
            if (r16 != 0) goto L_0x076c
            java.util.ArrayList r16 = new java.util.ArrayList
            r16.<init>()
        L_0x076c:
            r3 = r16
            r3.add(r0)
            org.telegram.tgnet.TLRPC$TL_updateFolderPeers r0 = (org.telegram.tgnet.TLRPC$TL_updateFolderPeers) r0
            org.telegram.messenger.MessagesStorage r5 = r55.getMessagesStorage()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_folderPeer> r6 = r0.folder_peers
            r7 = 0
            r8 = 0
            r10 = 0
            r5.setDialogsFolderId(r6, r7, r8, r10)
            goto L_0x0744
        L_0x0781:
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updatePrivacy
            if (r3 == 0) goto L_0x0792
            if (r16 != 0) goto L_0x078c
            java.util.ArrayList r16 = new java.util.ArrayList
            r16.<init>()
        L_0x078c:
            r3 = r16
            r3.add(r0)
            goto L_0x0744
        L_0x0792:
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateWebPage
            if (r3 == 0) goto L_0x07ae
            org.telegram.tgnet.TLRPC$TL_updateWebPage r0 = (org.telegram.tgnet.TLRPC$TL_updateWebPage) r0
            r3 = r30
            if (r3 != 0) goto L_0x07a3
            android.util.LongSparseArray r30 = new android.util.LongSparseArray
            r30.<init>()
            r3 = r30
        L_0x07a3:
            org.telegram.tgnet.TLRPC$WebPage r0 = r0.webpage
            long r5 = r0.id
            r3.put(r5, r0)
        L_0x07aa:
            r9 = r2
            r30 = r3
            goto L_0x0747
        L_0x07ae:
            r3 = r30
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateChannelWebPage
            if (r5 == 0) goto L_0x07c7
            org.telegram.tgnet.TLRPC$TL_updateChannelWebPage r0 = (org.telegram.tgnet.TLRPC$TL_updateChannelWebPage) r0
            if (r3 != 0) goto L_0x07bf
            android.util.LongSparseArray r30 = new android.util.LongSparseArray
            r30.<init>()
            r3 = r30
        L_0x07bf:
            org.telegram.tgnet.TLRPC$WebPage r0 = r0.webpage
            long r5 = r0.id
            r3.put(r5, r0)
            goto L_0x07aa
        L_0x07c7:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateChannelTooLong
            if (r5 == 0) goto L_0x085c
            r5 = r0
            org.telegram.tgnet.TLRPC$TL_updateChannelTooLong r5 = (org.telegram.tgnet.TLRPC$TL_updateChannelTooLong) r5
            boolean r7 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r7 == 0) goto L_0x07e9
            java.lang.StringBuilder r7 = new java.lang.StringBuilder
            r7.<init>()
            r7.append(r0)
            r7.append(r6)
            int r0 = r5.channel_id
            r7.append(r0)
            java.lang.String r0 = r7.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x07e9:
            android.util.SparseIntArray r0 = r13.channelsPts
            int r6 = r5.channel_id
            int r0 = r0.get(r6)
            if (r0 != 0) goto L_0x0842
            org.telegram.messenger.MessagesStorage r0 = r55.getMessagesStorage()
            int r6 = r5.channel_id
            int r0 = r0.getChannelPtsSync(r6)
            if (r0 != 0) goto L_0x083b
            int r6 = r5.channel_id
            java.lang.Integer r6 = java.lang.Integer.valueOf(r6)
            java.lang.Object r6 = r11.get(r6)
            org.telegram.tgnet.TLRPC$Chat r6 = (org.telegram.tgnet.TLRPC$Chat) r6
            if (r6 == 0) goto L_0x0811
            boolean r7 = r6.min
            if (r7 == 0) goto L_0x081b
        L_0x0811:
            int r6 = r5.channel_id
            java.lang.Integer r6 = java.lang.Integer.valueOf(r6)
            org.telegram.tgnet.TLRPC$Chat r6 = r13.getChat(r6)
        L_0x081b:
            if (r6 == 0) goto L_0x0821
            boolean r7 = r6.min
            if (r7 == 0) goto L_0x082f
        L_0x0821:
            org.telegram.messenger.MessagesStorage r6 = r55.getMessagesStorage()
            int r7 = r5.channel_id
            org.telegram.tgnet.TLRPC$Chat r6 = r6.getChatSync(r7)
            r7 = 1
            r13.putChat(r6, r7)
        L_0x082f:
            if (r6 == 0) goto L_0x0842
            boolean r7 = r6.min
            if (r7 != 0) goto L_0x0842
            r7 = 0
            r13.loadUnknownChannel(r6, r7)
            goto L_0x0842
        L_0x083b:
            android.util.SparseIntArray r6 = r13.channelsPts
            int r7 = r5.channel_id
            r6.put(r7, r0)
        L_0x0842:
            if (r0 == 0) goto L_0x05ba
            int r6 = r5.flags
            r7 = 1
            r6 = r6 & r7
            if (r6 == 0) goto L_0x0855
            int r6 = r5.pts
            if (r6 <= r0) goto L_0x05ba
            int r0 = r5.channel_id
            r13.getChannelDifference(r0)
            goto L_0x05ba
        L_0x0855:
            int r0 = r5.channel_id
            r13.getChannelDifference(r0)
            goto L_0x05ba
        L_0x085c:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateReadChannelInbox
            if (r5 == 0) goto L_0x08af
            org.telegram.tgnet.TLRPC$TL_updateReadChannelInbox r0 = (org.telegram.tgnet.TLRPC$TL_updateReadChannelInbox) r0
            int r5 = r0.max_id
            long r5 = (long) r5
            int r7 = r0.channel_id
            long r8 = (long) r7
            r10 = 32
            long r8 = r8 << r10
            long r5 = r5 | r8
            int r7 = -r7
            long r7 = (long) r7
            if (r15 != 0) goto L_0x0875
            org.telegram.messenger.support.SparseLongArray r15 = new org.telegram.messenger.support.SparseLongArray
            r15.<init>()
        L_0x0875:
            int r9 = r0.channel_id
            int r9 = -r9
            r15.put(r9, r5)
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r5 = r13.dialogs_read_inbox_max
            java.lang.Long r6 = java.lang.Long.valueOf(r7)
            java.lang.Object r5 = r5.get(r6)
            java.lang.Integer r5 = (java.lang.Integer) r5
            if (r5 != 0) goto L_0x0896
            org.telegram.messenger.MessagesStorage r5 = r55.getMessagesStorage()
            r6 = 0
            int r5 = r5.getDialogReadMax(r6, r7)
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
        L_0x0896:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r6 = r13.dialogs_read_inbox_max
            java.lang.Long r7 = java.lang.Long.valueOf(r7)
            int r5 = r5.intValue()
            int r0 = r0.max_id
            int r0 = java.lang.Math.max(r5, r0)
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)
            r6.put(r7, r0)
            goto L_0x07aa
        L_0x08af:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateReadChannelOutbox
            if (r5 == 0) goto L_0x0902
            org.telegram.tgnet.TLRPC$TL_updateReadChannelOutbox r0 = (org.telegram.tgnet.TLRPC$TL_updateReadChannelOutbox) r0
            int r5 = r0.max_id
            long r5 = (long) r5
            int r7 = r0.channel_id
            long r8 = (long) r7
            r10 = 32
            long r8 = r8 << r10
            long r5 = r5 | r8
            int r7 = -r7
            long r7 = (long) r7
            if (r12 != 0) goto L_0x08c8
            org.telegram.messenger.support.SparseLongArray r12 = new org.telegram.messenger.support.SparseLongArray
            r12.<init>()
        L_0x08c8:
            int r9 = r0.channel_id
            int r9 = -r9
            r12.put(r9, r5)
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r5 = r13.dialogs_read_outbox_max
            java.lang.Long r6 = java.lang.Long.valueOf(r7)
            java.lang.Object r5 = r5.get(r6)
            java.lang.Integer r5 = (java.lang.Integer) r5
            if (r5 != 0) goto L_0x08e9
            org.telegram.messenger.MessagesStorage r5 = r55.getMessagesStorage()
            r6 = 1
            int r5 = r5.getDialogReadMax(r6, r7)
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
        L_0x08e9:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r6 = r13.dialogs_read_outbox_max
            java.lang.Long r7 = java.lang.Long.valueOf(r7)
            int r5 = r5.intValue()
            int r0 = r0.max_id
            int r0 = java.lang.Math.max(r5, r0)
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)
            r6.put(r7, r0)
            goto L_0x07aa
        L_0x0902:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateDeleteChannelMessages
            if (r5 == 0) goto L_0x0946
            r5 = r0
            org.telegram.tgnet.TLRPC$TL_updateDeleteChannelMessages r5 = (org.telegram.tgnet.TLRPC$TL_updateDeleteChannelMessages) r5
            boolean r7 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r7 == 0) goto L_0x0924
            java.lang.StringBuilder r7 = new java.lang.StringBuilder
            r7.<init>()
            r7.append(r0)
            r7.append(r6)
            int r0 = r5.channel_id
            r7.append(r0)
            java.lang.String r0 = r7.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x0924:
            if (r1 != 0) goto L_0x092b
            android.util.SparseArray r1 = new android.util.SparseArray
            r1.<init>()
        L_0x092b:
            int r0 = r5.channel_id
            java.lang.Object r0 = r1.get(r0)
            java.util.ArrayList r0 = (java.util.ArrayList) r0
            if (r0 != 0) goto L_0x093f
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            int r6 = r5.channel_id
            r1.put(r6, r0)
        L_0x093f:
            java.util.ArrayList<java.lang.Integer> r5 = r5.messages
            r0.addAll(r5)
            goto L_0x07aa
        L_0x0946:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateChannel
            if (r5 == 0) goto L_0x097b
            boolean r5 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r5 == 0) goto L_0x0968
            r5 = r0
            org.telegram.tgnet.TLRPC$TL_updateChannel r5 = (org.telegram.tgnet.TLRPC$TL_updateChannel) r5
            java.lang.StringBuilder r7 = new java.lang.StringBuilder
            r7.<init>()
            r7.append(r0)
            r7.append(r6)
            int r5 = r5.channel_id
            r7.append(r5)
            java.lang.String r5 = r7.toString()
            org.telegram.messenger.FileLog.d(r5)
        L_0x0968:
            if (r16 != 0) goto L_0x096f
            java.util.ArrayList r16 = new java.util.ArrayList
            r16.<init>()
        L_0x096f:
            r5 = r16
            r5.add(r0)
        L_0x0974:
            r9 = r2
            r30 = r3
            r16 = r5
            goto L_0x0747
        L_0x097b:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateChannelMessageViews
            if (r5 == 0) goto L_0x09c6
            r5 = r0
            org.telegram.tgnet.TLRPC$TL_updateChannelMessageViews r5 = (org.telegram.tgnet.TLRPC$TL_updateChannelMessageViews) r5
            boolean r7 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r7 == 0) goto L_0x099d
            java.lang.StringBuilder r7 = new java.lang.StringBuilder
            r7.<init>()
            r7.append(r0)
            r7.append(r6)
            int r0 = r5.channel_id
            r7.append(r0)
            java.lang.String r0 = r7.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x099d:
            if (r14 != 0) goto L_0x09a5
            android.util.SparseArray r6 = new android.util.SparseArray
            r6.<init>()
            goto L_0x09a6
        L_0x09a5:
            r6 = r14
        L_0x09a6:
            int r0 = r5.channel_id
            java.lang.Object r0 = r6.get(r0)
            android.util.SparseIntArray r0 = (android.util.SparseIntArray) r0
            if (r0 != 0) goto L_0x09ba
            android.util.SparseIntArray r0 = new android.util.SparseIntArray
            r0.<init>()
            int r7 = r5.channel_id
            r6.put(r7, r0)
        L_0x09ba:
            int r7 = r5.id
            int r5 = r5.views
            r0.put(r7, r5)
            r9 = r2
            r30 = r3
            goto L_0x0748
        L_0x09c6:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateChatParticipantAdmin
            if (r5 == 0) goto L_0x09de
            org.telegram.tgnet.TLRPC$TL_updateChatParticipantAdmin r0 = (org.telegram.tgnet.TLRPC$TL_updateChatParticipantAdmin) r0
            org.telegram.messenger.MessagesStorage r5 = r55.getMessagesStorage()
            int r6 = r0.chat_id
            int r7 = r0.user_id
            r8 = 2
            boolean r9 = r0.is_admin
            int r10 = r0.version
            r5.updateChatInfo(r6, r7, r8, r9, r10)
            goto L_0x05ba
        L_0x09de:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateChatDefaultBannedRights
            if (r5 == 0) goto L_0x0a07
            r5 = r0
            org.telegram.tgnet.TLRPC$TL_updateChatDefaultBannedRights r5 = (org.telegram.tgnet.TLRPC$TL_updateChatDefaultBannedRights) r5
            org.telegram.tgnet.TLRPC$Peer r6 = r5.peer
            int r7 = r6.channel_id
            if (r7 == 0) goto L_0x09ec
            goto L_0x09ee
        L_0x09ec:
            int r7 = r6.chat_id
        L_0x09ee:
            org.telegram.messenger.MessagesStorage r6 = r55.getMessagesStorage()
            org.telegram.tgnet.TLRPC$TL_chatBannedRights r8 = r5.default_banned_rights
            int r5 = r5.version
            r6.updateChatDefaultBannedRights(r7, r8, r5)
            if (r16 != 0) goto L_0x0a00
            java.util.ArrayList r16 = new java.util.ArrayList
            r16.<init>()
        L_0x0a00:
            r5 = r16
            r5.add(r0)
            goto L_0x0974
        L_0x0a07:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateStickerSets
            if (r5 == 0) goto L_0x0a19
            if (r16 != 0) goto L_0x0a12
            java.util.ArrayList r16 = new java.util.ArrayList
            r16.<init>()
        L_0x0a12:
            r5 = r16
            r5.add(r0)
            goto L_0x0974
        L_0x0a19:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateStickerSetsOrder
            if (r5 == 0) goto L_0x0a2b
            if (r16 != 0) goto L_0x0a24
            java.util.ArrayList r16 = new java.util.ArrayList
            r16.<init>()
        L_0x0a24:
            r5 = r16
            r5.add(r0)
            goto L_0x0974
        L_0x0a2b:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateNewStickerSet
            if (r5 == 0) goto L_0x0a3d
            if (r16 != 0) goto L_0x0a36
            java.util.ArrayList r16 = new java.util.ArrayList
            r16.<init>()
        L_0x0a36:
            r5 = r16
            r5.add(r0)
            goto L_0x0974
        L_0x0a3d:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateDraftMessage
            if (r5 == 0) goto L_0x0a4f
            if (r16 != 0) goto L_0x0a48
            java.util.ArrayList r16 = new java.util.ArrayList
            r16.<init>()
        L_0x0a48:
            r5 = r16
            r5.add(r0)
            goto L_0x0974
        L_0x0a4f:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateSavedGifs
            if (r5 == 0) goto L_0x0a61
            if (r16 != 0) goto L_0x0a5a
            java.util.ArrayList r16 = new java.util.ArrayList
            r16.<init>()
        L_0x0a5a:
            r5 = r16
            r5.add(r0)
            goto L_0x0974
        L_0x0a61:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateEditChannelMessage
            if (r5 != 0) goto L_0x0c4a
            boolean r7 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateEditMessage
            if (r7 == 0) goto L_0x0a6b
            goto L_0x0c4a
        L_0x0a6b:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateChannelPinnedMessage
            if (r5 == 0) goto L_0x0a9a
            r5 = r0
            org.telegram.tgnet.TLRPC$TL_updateChannelPinnedMessage r5 = (org.telegram.tgnet.TLRPC$TL_updateChannelPinnedMessage) r5
            boolean r7 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r7 == 0) goto L_0x0a8d
            java.lang.StringBuilder r7 = new java.lang.StringBuilder
            r7.<init>()
            r7.append(r0)
            r7.append(r6)
            int r0 = r5.channel_id
            r7.append(r0)
            java.lang.String r0 = r7.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x0a8d:
            org.telegram.messenger.MessagesStorage r0 = r55.getMessagesStorage()
            int r6 = r5.channel_id
            int r5 = r5.id
            r0.updateChatPinnedMessage(r6, r5)
            goto L_0x05ba
        L_0x0a9a:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateChatPinnedMessage
            if (r5 == 0) goto L_0x0aad
            org.telegram.tgnet.TLRPC$TL_updateChatPinnedMessage r0 = (org.telegram.tgnet.TLRPC$TL_updateChatPinnedMessage) r0
            org.telegram.messenger.MessagesStorage r5 = r55.getMessagesStorage()
            int r6 = r0.chat_id
            int r0 = r0.id
            r5.updateChatPinnedMessage(r6, r0)
            goto L_0x05ba
        L_0x0aad:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateUserPinnedMessage
            if (r5 == 0) goto L_0x0ac0
            org.telegram.tgnet.TLRPC$TL_updateUserPinnedMessage r0 = (org.telegram.tgnet.TLRPC$TL_updateUserPinnedMessage) r0
            org.telegram.messenger.MessagesStorage r5 = r55.getMessagesStorage()
            int r6 = r0.user_id
            int r0 = r0.id
            r5.updateUserPinnedMessage(r6, r0)
            goto L_0x05ba
        L_0x0ac0:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateReadFeaturedStickers
            if (r5 == 0) goto L_0x0ad2
            if (r16 != 0) goto L_0x0acb
            java.util.ArrayList r16 = new java.util.ArrayList
            r16.<init>()
        L_0x0acb:
            r5 = r16
            r5.add(r0)
            goto L_0x0974
        L_0x0ad2:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updatePhoneCall
            if (r5 == 0) goto L_0x0ae4
            if (r16 != 0) goto L_0x0add
            java.util.ArrayList r16 = new java.util.ArrayList
            r16.<init>()
        L_0x0add:
            r5 = r16
            r5.add(r0)
            goto L_0x0974
        L_0x0ae4:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateLangPack
            if (r5 == 0) goto L_0x0af4
            org.telegram.tgnet.TLRPC$TL_updateLangPack r0 = (org.telegram.tgnet.TLRPC$TL_updateLangPack) r0
            org.telegram.messenger.-$$Lambda$MessagesController$UqvOCuoICLukcLqK98SOMDCpXhQ r5 = new org.telegram.messenger.-$$Lambda$MessagesController$UqvOCuoICLukcLqK98SOMDCpXhQ
            r5.<init>(r0)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r5)
            goto L_0x05ba
        L_0x0af4:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateLangPackTooLong
            if (r5 == 0) goto L_0x0b08
            org.telegram.tgnet.TLRPC$TL_updateLangPackTooLong r0 = (org.telegram.tgnet.TLRPC$TL_updateLangPackTooLong) r0
            org.telegram.messenger.LocaleController r5 = org.telegram.messenger.LocaleController.getInstance()
            int r6 = r13.currentAccount
            java.lang.String r0 = r0.lang_code
            r7 = 0
            r5.reloadCurrentRemoteLocale(r6, r0, r7)
            goto L_0x05ba
        L_0x0b08:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateFavedStickers
            if (r5 == 0) goto L_0x0b1a
            if (r16 != 0) goto L_0x0b13
            java.util.ArrayList r16 = new java.util.ArrayList
            r16.<init>()
        L_0x0b13:
            r5 = r16
            r5.add(r0)
            goto L_0x0974
        L_0x0b1a:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateContactsReset
            if (r5 == 0) goto L_0x0b2c
            if (r16 != 0) goto L_0x0b25
            java.util.ArrayList r16 = new java.util.ArrayList
            r16.<init>()
        L_0x0b25:
            r5 = r16
            r5.add(r0)
            goto L_0x0974
        L_0x0b2c:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateChannelAvailableMessages
            if (r5 == 0) goto L_0x0b56
            org.telegram.tgnet.TLRPC$TL_updateChannelAvailableMessages r0 = (org.telegram.tgnet.TLRPC$TL_updateChannelAvailableMessages) r0
            if (r32 != 0) goto L_0x0b3a
            android.util.SparseIntArray r5 = new android.util.SparseIntArray
            r5.<init>()
            goto L_0x0b3c
        L_0x0b3a:
            r5 = r32
        L_0x0b3c:
            int r6 = r0.channel_id
            int r6 = r5.get(r6)
            if (r6 == 0) goto L_0x0b48
            int r7 = r0.available_min_id
            if (r6 >= r7) goto L_0x0b4f
        L_0x0b48:
            int r6 = r0.channel_id
            int r0 = r0.available_min_id
            r5.put(r6, r0)
        L_0x0b4f:
            r9 = r2
            r30 = r3
            r32 = r5
            goto L_0x0747
        L_0x0b56:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateDialogUnreadMark
            if (r5 == 0) goto L_0x0b68
            if (r16 != 0) goto L_0x0b61
            java.util.ArrayList r16 = new java.util.ArrayList
            r16.<init>()
        L_0x0b61:
            r5 = r16
            r5.add(r0)
            goto L_0x0974
        L_0x0b68:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateMessagePoll
            if (r5 == 0) goto L_0x0ba5
            r5 = r0
            org.telegram.tgnet.TLRPC$TL_updateMessagePoll r5 = (org.telegram.tgnet.TLRPC$TL_updateMessagePoll) r5
            org.telegram.messenger.SendMessagesHelper r6 = r55.getSendMessagesHelper()
            long r7 = r5.poll_id
            long r6 = r6.getVoteSendTime(r7)
            long r8 = android.os.SystemClock.elapsedRealtime()
            long r8 = r8 - r6
            long r6 = java.lang.Math.abs(r8)
            r8 = 600(0x258, double:2.964E-321)
            int r10 = (r6 > r8 ? 1 : (r6 == r8 ? 0 : -1))
            if (r10 >= 0) goto L_0x0b8a
            goto L_0x05ba
        L_0x0b8a:
            org.telegram.messenger.MessagesStorage r6 = r55.getMessagesStorage()
            long r7 = r5.poll_id
            org.telegram.tgnet.TLRPC$TL_poll r9 = r5.poll
            org.telegram.tgnet.TLRPC$PollResults r5 = r5.results
            r6.updateMessagePollResults(r7, r9, r5)
            if (r16 != 0) goto L_0x0b9e
            java.util.ArrayList r16 = new java.util.ArrayList
            r16.<init>()
        L_0x0b9e:
            r5 = r16
            r5.add(r0)
            goto L_0x0974
        L_0x0ba5:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateMessageReactions
            if (r5 == 0) goto L_0x0be2
            r5 = r0
            org.telegram.tgnet.TLRPC$TL_updateMessageReactions r5 = (org.telegram.tgnet.TLRPC$TL_updateMessageReactions) r5
            org.telegram.tgnet.TLRPC$Peer r6 = r5.peer
            int r7 = r6.chat_id
            if (r7 == 0) goto L_0x0bb7
        L_0x0bb2:
            int r6 = -r7
        L_0x0bb3:
            long r6 = (long) r6
            r46 = r6
            goto L_0x0bbf
        L_0x0bb7:
            int r7 = r6.channel_id
            if (r7 == 0) goto L_0x0bbc
            goto L_0x0bb2
        L_0x0bbc:
            int r6 = r6.user_id
            goto L_0x0bb3
        L_0x0bbf:
            org.telegram.messenger.MessagesStorage r45 = r55.getMessagesStorage()
            int r6 = r5.msg_id
            org.telegram.tgnet.TLRPC$Peer r7 = r5.peer
            int r7 = r7.channel_id
            org.telegram.tgnet.TLRPC$TL_messageReactions r5 = r5.reactions
            r48 = r6
            r49 = r7
            r50 = r5
            r45.updateMessageReactions(r46, r48, r49, r50)
            if (r16 != 0) goto L_0x0bdb
            java.util.ArrayList r16 = new java.util.ArrayList
            r16.<init>()
        L_0x0bdb:
            r5 = r16
            r5.add(r0)
            goto L_0x0974
        L_0x0be2:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updatePeerLocated
            if (r5 == 0) goto L_0x0bf4
            if (r16 != 0) goto L_0x0bed
            java.util.ArrayList r16 = new java.util.ArrayList
            r16.<init>()
        L_0x0bed:
            r5 = r16
            r5.add(r0)
            goto L_0x0974
        L_0x0bf4:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateTheme
            if (r5 == 0) goto L_0x0CLASSNAME
            if (r16 != 0) goto L_0x0bff
            java.util.ArrayList r16 = new java.util.ArrayList
            r16.<init>()
        L_0x0bff:
            r5 = r16
            r5.add(r0)
            goto L_0x0974
        L_0x0CLASSNAME:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateGeoLiveViewed
            if (r5 == 0) goto L_0x0CLASSNAME
            org.telegram.messenger.LocationController r0 = r55.getLocationController()
            r0.setNewLocationEndWatchTime()
            goto L_0x05ba
        L_0x0CLASSNAME:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateDialogFilter
            if (r5 == 0) goto L_0x0CLASSNAME
            if (r16 != 0) goto L_0x0c1e
            java.util.ArrayList r16 = new java.util.ArrayList
            r16.<init>()
        L_0x0c1e:
            r5 = r16
            r5.add(r0)
            goto L_0x0974
        L_0x0CLASSNAME:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateDialogFilterOrder
            if (r5 == 0) goto L_0x0CLASSNAME
            if (r16 != 0) goto L_0x0CLASSNAME
            java.util.ArrayList r16 = new java.util.ArrayList
            r16.<init>()
        L_0x0CLASSNAME:
            r5 = r16
            r5.add(r0)
            goto L_0x0974
        L_0x0CLASSNAME:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateDialogFilters
            if (r5 == 0) goto L_0x05ba
            if (r16 != 0) goto L_0x0CLASSNAME
            java.util.ArrayList r5 = new java.util.ArrayList
            r5.<init>()
            goto L_0x0CLASSNAME
        L_0x0CLASSNAME:
            r5 = r16
        L_0x0CLASSNAME:
            r5.add(r0)
            goto L_0x0974
        L_0x0c4a:
            org.telegram.messenger.UserConfig r6 = r55.getUserConfig()
            int r6 = r6.getClientUserId()
            if (r5 == 0) goto L_0x0CLASSNAME
            org.telegram.tgnet.TLRPC$TL_updateEditChannelMessage r0 = (org.telegram.tgnet.TLRPC$TL_updateEditChannelMessage) r0
            org.telegram.tgnet.TLRPC$Message r0 = r0.message
            org.telegram.tgnet.TLRPC$Peer r5 = r0.to_id
            int r5 = r5.channel_id
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
            java.lang.Object r5 = r11.get(r5)
            org.telegram.tgnet.TLRPC$Chat r5 = (org.telegram.tgnet.TLRPC$Chat) r5
            if (r5 != 0) goto L_0x0CLASSNAME
            org.telegram.tgnet.TLRPC$Peer r5 = r0.to_id
            int r5 = r5.channel_id
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
            org.telegram.tgnet.TLRPC$Chat r5 = r13.getChat(r5)
        L_0x0CLASSNAME:
            if (r5 != 0) goto L_0x0CLASSNAME
            org.telegram.messenger.MessagesStorage r5 = r55.getMessagesStorage()
            org.telegram.tgnet.TLRPC$Peer r7 = r0.to_id
            int r7 = r7.channel_id
            org.telegram.tgnet.TLRPC$Chat r5 = r5.getChatSync(r7)
            r7 = 1
            r13.putChat(r5, r7)
        L_0x0CLASSNAME:
            if (r5 == 0) goto L_0x0CLASSNAME
            boolean r5 = r5.megagroup
            if (r5 == 0) goto L_0x0CLASSNAME
            int r5 = r0.flags
            r7 = -2147483648(0xfffffffvar_, float:-0.0)
            r5 = r5 | r7
            r0.flags = r5
        L_0x0CLASSNAME:
            r5 = 1
            goto L_0x0ca8
        L_0x0CLASSNAME:
            org.telegram.tgnet.TLRPC$TL_updateEditMessage r0 = (org.telegram.tgnet.TLRPC$TL_updateEditMessage) r0
            org.telegram.tgnet.TLRPC$Message r0 = r0.message
            long r7 = r0.dialog_id
            long r9 = (long) r6
            int r5 = (r7 > r9 ? 1 : (r7 == r9 ? 0 : -1))
            if (r5 != 0) goto L_0x0CLASSNAME
            r5 = 0
            r0.unread = r5
            r0.media_unread = r5
            r5 = 1
            r0.out = r5
        L_0x0ca8:
            boolean r7 = r0.out
            if (r7 != 0) goto L_0x0cba
            int r7 = r0.from_id
            org.telegram.messenger.UserConfig r8 = r55.getUserConfig()
            int r8 = r8.getClientUserId()
            if (r7 != r8) goto L_0x0cba
            r0.out = r5
        L_0x0cba:
            if (r59 != 0) goto L_0x0d10
            java.util.ArrayList<org.telegram.tgnet.TLRPC$MessageEntity> r5 = r0.entities
            int r5 = r5.size()
            r7 = 0
        L_0x0cc3:
            if (r7 >= r5) goto L_0x0d10
            java.util.ArrayList<org.telegram.tgnet.TLRPC$MessageEntity> r8 = r0.entities
            java.lang.Object r8 = r8.get(r7)
            org.telegram.tgnet.TLRPC$MessageEntity r8 = (org.telegram.tgnet.TLRPC$MessageEntity) r8
            boolean r9 = r8 instanceof org.telegram.tgnet.TLRPC$TL_messageEntityMentionName
            if (r9 == 0) goto L_0x0d0d
            org.telegram.tgnet.TLRPC$TL_messageEntityMentionName r8 = (org.telegram.tgnet.TLRPC$TL_messageEntityMentionName) r8
            int r8 = r8.user_id
            java.lang.Integer r9 = java.lang.Integer.valueOf(r8)
            java.lang.Object r9 = r4.get(r9)
            org.telegram.tgnet.TLRPC$User r9 = (org.telegram.tgnet.TLRPC$User) r9
            if (r9 == 0) goto L_0x0ce5
            boolean r10 = r9.min
            if (r10 == 0) goto L_0x0ced
        L_0x0ce5:
            java.lang.Integer r9 = java.lang.Integer.valueOf(r8)
            org.telegram.tgnet.TLRPC$User r9 = r13.getUser(r9)
        L_0x0ced:
            if (r9 == 0) goto L_0x0cf3
            boolean r10 = r9.min
            if (r10 == 0) goto L_0x0d09
        L_0x0cf3:
            org.telegram.messenger.MessagesStorage r9 = r55.getMessagesStorage()
            org.telegram.tgnet.TLRPC$User r8 = r9.getUserSync(r8)
            if (r8 == 0) goto L_0x0d04
            boolean r9 = r8.min
            if (r9 == 0) goto L_0x0d04
            r8 = 1
            r9 = 0
            goto L_0x0d06
        L_0x0d04:
            r9 = r8
            r8 = 1
        L_0x0d06:
            r13.putUser(r9, r8)
        L_0x0d09:
            if (r9 != 0) goto L_0x0d0d
            r8 = 0
            return r8
        L_0x0d0d:
            int r7 = r7 + 1
            goto L_0x0cc3
        L_0x0d10:
            org.telegram.tgnet.TLRPC$Peer r5 = r0.to_id
            int r7 = r5.chat_id
            if (r7 == 0) goto L_0x0d1b
            int r5 = -r7
            long r7 = (long) r5
            r0.dialog_id = r7
            goto L_0x0d3d
        L_0x0d1b:
            int r7 = r5.channel_id
            if (r7 == 0) goto L_0x0d24
            int r5 = -r7
            long r7 = (long) r5
            r0.dialog_id = r7
            goto L_0x0d3d
        L_0x0d24:
            int r5 = r5.user_id
            org.telegram.messenger.UserConfig r7 = r55.getUserConfig()
            int r7 = r7.getClientUserId()
            if (r5 != r7) goto L_0x0d36
            org.telegram.tgnet.TLRPC$Peer r5 = r0.to_id
            int r7 = r0.from_id
            r5.user_id = r7
        L_0x0d36:
            org.telegram.tgnet.TLRPC$Peer r5 = r0.to_id
            int r5 = r5.user_id
            long r7 = (long) r5
            r0.dialog_id = r7
        L_0x0d3d:
            boolean r5 = r0.out
            if (r5 == 0) goto L_0x0d44
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r5 = r13.dialogs_read_outbox_max
            goto L_0x0d46
        L_0x0d44:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r5 = r13.dialogs_read_inbox_max
        L_0x0d46:
            long r7 = r0.dialog_id
            java.lang.Long r7 = java.lang.Long.valueOf(r7)
            java.lang.Object r7 = r5.get(r7)
            java.lang.Integer r7 = (java.lang.Integer) r7
            if (r7 != 0) goto L_0x0d6d
            org.telegram.messenger.MessagesStorage r7 = r55.getMessagesStorage()
            boolean r8 = r0.out
            long r9 = r0.dialog_id
            int r7 = r7.getDialogReadMax(r8, r9)
            java.lang.Integer r7 = java.lang.Integer.valueOf(r7)
            long r8 = r0.dialog_id
            java.lang.Long r8 = java.lang.Long.valueOf(r8)
            r5.put(r8, r7)
        L_0x0d6d:
            int r5 = r7.intValue()
            int r7 = r0.id
            if (r5 >= r7) goto L_0x0d77
            r5 = 1
            goto L_0x0d78
        L_0x0d77:
            r5 = 0
        L_0x0d78:
            r0.unread = r5
            long r7 = r0.dialog_id
            long r5 = (long) r6
            int r9 = (r7 > r5 ? 1 : (r7 == r5 ? 0 : -1))
            if (r9 != 0) goto L_0x0d89
            r5 = 1
            r0.out = r5
            r5 = 0
            r0.unread = r5
            r0.media_unread = r5
        L_0x0d89:
            boolean r5 = r0.out
            if (r5 == 0) goto L_0x0d97
            java.lang.String r5 = r0.message
            if (r5 != 0) goto L_0x0d97
            java.lang.String r5 = ""
            r0.message = r5
            r0.attachPath = r5
        L_0x0d97:
            org.telegram.messenger.ImageLoader.saveMessageThumbs(r0)
            org.telegram.messenger.MessageObject r10 = new org.telegram.messenger.MessageObject
            int r6 = r13.currentAccount
            java.util.ArrayList<java.lang.Long> r5 = r13.createdDialogIds
            long r7 = r0.dialog_id
            java.lang.Long r7 = java.lang.Long.valueOf(r7)
            boolean r23 = r5.contains(r7)
            r5 = r10
            r7 = r0
            r8 = r4
            r9 = r11
            r30 = r1
            r1 = r10
            r10 = r23
            r5.<init>((int) r6, (org.telegram.tgnet.TLRPC$Message) r7, (java.util.AbstractMap<java.lang.Integer, org.telegram.tgnet.TLRPC$User>) r8, (java.util.AbstractMap<java.lang.Integer, org.telegram.tgnet.TLRPC$Chat>) r9, (boolean) r10)
            if (r42 != 0) goto L_0x0dbe
            android.util.LongSparseArray r8 = new android.util.LongSparseArray
            r8.<init>()
            goto L_0x0dc0
        L_0x0dbe:
            r8 = r42
        L_0x0dc0:
            long r5 = r0.dialog_id
            java.lang.Object r5 = r8.get(r5)
            java.util.ArrayList r5 = (java.util.ArrayList) r5
            if (r5 != 0) goto L_0x0dd4
            java.util.ArrayList r5 = new java.util.ArrayList
            r5.<init>()
            long r6 = r0.dialog_id
            r8.put(r6, r5)
        L_0x0dd4:
            r5.add(r1)
            r9 = r2
            r6 = r14
            r5 = r28
            r1 = r30
            r14 = r34
            r7 = r38
            r2 = r40
            goto L_0x0e04
        L_0x0de4:
            r42 = r2
            r51 = r7
            r2 = r9
            r4 = r27
            r3 = r30
            r30 = r1
            org.telegram.tgnet.ConnectionsManager r0 = r55.getConnectionsManager()
            r0.updateDcSettings()
        L_0x0df6:
            r9 = r2
            r6 = r14
            r5 = r28
            r1 = r30
            r14 = r34
            r7 = r38
            r2 = r40
            r8 = r42
        L_0x0e04:
            r10 = r44
            r23 = r51
            r28 = r58
            r30 = r3
            r3 = r41
            goto L_0x12c4
        L_0x0e10:
            r44 = r10
            r51 = r23
            r42 = r38
            r4 = r40
            r40 = r2
            r2 = r9
            r38 = r34
            r34 = r14
            r14 = r27
            r54 = r30
            r30 = r1
            r1 = r54
            if (r3 == 0) goto L_0x0e31
            org.telegram.tgnet.TLRPC$TL_updateUserTyping r0 = (org.telegram.tgnet.TLRPC$TL_updateUserTyping) r0
            int r3 = r0.user_id
            org.telegram.tgnet.TLRPC$SendMessageAction r0 = r0.action
            r5 = 0
            goto L_0x0e3e
        L_0x0e31:
            org.telegram.tgnet.TLRPC$TL_updateChatUserTyping r0 = (org.telegram.tgnet.TLRPC$TL_updateChatUserTyping) r0
            int r3 = r0.chat_id
            int r5 = r0.user_id
            org.telegram.tgnet.TLRPC$SendMessageAction r0 = r0.action
            r54 = r5
            r5 = r3
            r3 = r54
        L_0x0e3e:
            org.telegram.messenger.UserConfig r6 = r55.getUserConfig()
            int r6 = r6.getClientUserId()
            if (r3 == r6) goto L_0x0efe
            int r5 = -r5
            long r5 = (long) r5
            r7 = 0
            int r9 = (r5 > r7 ? 1 : (r5 == r7 ? 0 : -1))
            if (r9 != 0) goto L_0x0e51
            long r5 = (long) r3
        L_0x0e51:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.util.ArrayList<org.telegram.messenger.MessagesController$PrintingUser>> r7 = r13.printingUsers
            java.lang.Long r8 = java.lang.Long.valueOf(r5)
            java.lang.Object r7 = r7.get(r8)
            java.util.ArrayList r7 = (java.util.ArrayList) r7
            boolean r8 = r0 instanceof org.telegram.tgnet.TLRPC$TL_sendMessageCancelAction
            if (r8 == 0) goto L_0x0e8f
            if (r7 == 0) goto L_0x0e8c
            int r0 = r7.size()
            r8 = 0
        L_0x0e68:
            if (r8 >= r0) goto L_0x0e7d
            java.lang.Object r9 = r7.get(r8)
            org.telegram.messenger.MessagesController$PrintingUser r9 = (org.telegram.messenger.MessagesController.PrintingUser) r9
            int r9 = r9.userId
            if (r9 != r3) goto L_0x0e7a
            r7.remove(r8)
            r20 = 1
            goto L_0x0e7d
        L_0x0e7a:
            int r8 = r8 + 1
            goto L_0x0e68
        L_0x0e7d:
            boolean r0 = r7.isEmpty()
            if (r0 == 0) goto L_0x0e8c
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.util.ArrayList<org.telegram.messenger.MessagesController$PrintingUser>> r0 = r13.printingUsers
            java.lang.Long r5 = java.lang.Long.valueOf(r5)
            r0.remove(r5)
        L_0x0e8c:
            r9 = r51
            goto L_0x0ede
        L_0x0e8f:
            if (r7 != 0) goto L_0x0e9f
            java.util.ArrayList r7 = new java.util.ArrayList
            r7.<init>()
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.util.ArrayList<org.telegram.messenger.MessagesController$PrintingUser>> r8 = r13.printingUsers
            java.lang.Long r5 = java.lang.Long.valueOf(r5)
            r8.put(r5, r7)
        L_0x0e9f:
            java.util.Iterator r5 = r7.iterator()
        L_0x0ea3:
            boolean r6 = r5.hasNext()
            if (r6 == 0) goto L_0x0ec9
            java.lang.Object r6 = r5.next()
            org.telegram.messenger.MessagesController$PrintingUser r6 = (org.telegram.messenger.MessagesController.PrintingUser) r6
            int r8 = r6.userId
            if (r8 != r3) goto L_0x0ea3
            r9 = r51
            r6.lastTime = r9
            org.telegram.tgnet.TLRPC$SendMessageAction r5 = r6.action
            java.lang.Class r5 = r5.getClass()
            java.lang.Class r8 = r0.getClass()
            if (r5 == r8) goto L_0x0ec5
            r20 = 1
        L_0x0ec5:
            r6.action = r0
            r5 = 1
            goto L_0x0ecc
        L_0x0ec9:
            r9 = r51
            r5 = 0
        L_0x0ecc:
            if (r5 != 0) goto L_0x0ede
            org.telegram.messenger.MessagesController$PrintingUser r5 = new org.telegram.messenger.MessagesController$PrintingUser
            r5.<init>()
            r5.userId = r3
            r5.lastTime = r9
            r5.action = r0
            r7.add(r5)
            r20 = 1
        L_0x0ede:
            org.telegram.tgnet.ConnectionsManager r0 = r55.getConnectionsManager()
            int r0 = r0.getCurrentTime()
            int r0 = r0 - r60
            int r0 = java.lang.Math.abs(r0)
            r5 = 30
            if (r0 >= r5) goto L_0x0var_
            java.util.concurrent.ConcurrentHashMap<java.lang.Integer, java.lang.Integer> r0 = r13.onlinePrivacy
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)
            java.lang.Integer r5 = java.lang.Integer.valueOf(r60)
            r0.put(r3, r5)
            goto L_0x0var_
        L_0x0efe:
            r9 = r51
        L_0x0var_:
            r23 = r9
            r6 = r14
            r5 = r28
            r14 = r34
            r7 = r38
            r3 = r41
            r8 = r42
            r10 = r44
            r28 = r58
            r9 = r2
            r2 = r40
            r54 = r30
            r30 = r1
            r1 = r54
            goto L_0x12c4
        L_0x0f1c:
            r40 = r2
            r41 = r3
            r42 = r8
            r2 = r9
            r44 = r10
            r9 = r23
            r38 = r34
            r34 = r14
            r14 = r27
            r54 = r30
            r30 = r1
            r1 = r54
            if (r5 == 0) goto L_0x0f3b
            r3 = r0
            org.telegram.tgnet.TLRPC$TL_updateNewMessage r3 = (org.telegram.tgnet.TLRPC$TL_updateNewMessage) r3
            org.telegram.tgnet.TLRPC$Message r3 = r3.message
            goto L_0x0f7a
        L_0x0f3b:
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateNewScheduledMessage
            if (r3 == 0) goto L_0x0var_
            r3 = r0
            org.telegram.tgnet.TLRPC$TL_updateNewScheduledMessage r3 = (org.telegram.tgnet.TLRPC$TL_updateNewScheduledMessage) r3
            org.telegram.tgnet.TLRPC$Message r3 = r3.message
            goto L_0x0f7a
        L_0x0var_:
            r3 = r0
            org.telegram.tgnet.TLRPC$TL_updateNewChannelMessage r3 = (org.telegram.tgnet.TLRPC$TL_updateNewChannelMessage) r3
            org.telegram.tgnet.TLRPC$Message r3 = r3.message
            boolean r5 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r5 == 0) goto L_0x0var_
            java.lang.StringBuilder r5 = new java.lang.StringBuilder
            r5.<init>()
            r5.append(r0)
            r5.append(r6)
            org.telegram.tgnet.TLRPC$Peer r6 = r3.to_id
            int r6 = r6.channel_id
            r5.append(r6)
            java.lang.String r5 = r5.toString()
            org.telegram.messenger.FileLog.d(r5)
        L_0x0var_:
            boolean r5 = r3.out
            if (r5 != 0) goto L_0x0f7a
            int r5 = r3.from_id
            org.telegram.messenger.UserConfig r6 = r55.getUserConfig()
            int r6 = r6.getClientUserId()
            if (r5 != r6) goto L_0x0f7a
            r5 = 1
            r3.out = r5
        L_0x0f7a:
            org.telegram.tgnet.TLRPC$Peer r5 = r3.to_id
            int r6 = r5.channel_id
            if (r6 == 0) goto L_0x0var_
        L_0x0var_:
            r5 = 0
            goto L_0x0f8e
        L_0x0var_:
            int r6 = r5.chat_id
            if (r6 == 0) goto L_0x0var_
            goto L_0x0var_
        L_0x0var_:
            int r5 = r5.user_id
            if (r5 == 0) goto L_0x0f8c
            goto L_0x0f8d
        L_0x0f8c:
            r5 = 0
        L_0x0f8d:
            r6 = 0
        L_0x0f8e:
            if (r6 == 0) goto L_0x0fb3
            java.lang.Integer r7 = java.lang.Integer.valueOf(r6)
            java.lang.Object r7 = r11.get(r7)
            org.telegram.tgnet.TLRPC$Chat r7 = (org.telegram.tgnet.TLRPC$Chat) r7
            if (r7 != 0) goto L_0x0fa4
            java.lang.Integer r7 = java.lang.Integer.valueOf(r6)
            org.telegram.tgnet.TLRPC$Chat r7 = r13.getChat(r7)
        L_0x0fa4:
            if (r7 != 0) goto L_0x0fb4
            org.telegram.messenger.MessagesStorage r7 = r55.getMessagesStorage()
            org.telegram.tgnet.TLRPC$Chat r7 = r7.getChatSync(r6)
            r8 = 1
            r13.putChat(r7, r8)
            goto L_0x0fb4
        L_0x0fb3:
            r7 = 0
        L_0x0fb4:
            if (r21 == 0) goto L_0x10b2
            if (r6 == 0) goto L_0x0fd4
            if (r7 != 0) goto L_0x0fd4
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0fd2
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "not found chat "
            r0.append(r1)
            r0.append(r6)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x0fd2:
            r0 = 0
            return r0
        L_0x0fd4:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$MessageEntity> r6 = r3.entities
            int r6 = r6.size()
            int r6 = r6 + 3
            r8 = 0
        L_0x0fdd:
            if (r8 >= r6) goto L_0x10b2
            r39 = r1
            if (r8 == 0) goto L_0x1012
            r1 = 1
            if (r8 != r1) goto L_0x0ff1
            int r1 = r3.from_id
            boolean r5 = r3.post
            if (r5 == 0) goto L_0x0fef
            r5 = r1
            r1 = 1
            goto L_0x1013
        L_0x0fef:
            r5 = r1
            goto L_0x1012
        L_0x0ff1:
            r1 = 2
            if (r8 != r1) goto L_0x0ffd
            org.telegram.tgnet.TLRPC$MessageFwdHeader r5 = r3.fwd_from
            if (r5 == 0) goto L_0x0ffb
            int r5 = r5.from_id
            goto L_0x1012
        L_0x0ffb:
            r5 = 0
            goto L_0x1012
        L_0x0ffd:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$MessageEntity> r5 = r3.entities
            int r1 = r8 + -3
            java.lang.Object r1 = r5.get(r1)
            org.telegram.tgnet.TLRPC$MessageEntity r1 = (org.telegram.tgnet.TLRPC$MessageEntity) r1
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_messageEntityMentionName
            if (r5 == 0) goto L_0x1010
            org.telegram.tgnet.TLRPC$TL_messageEntityMentionName r1 = (org.telegram.tgnet.TLRPC$TL_messageEntityMentionName) r1
            int r1 = r1.user_id
            goto L_0x0fef
        L_0x1010:
            r1 = 0
            goto L_0x0fef
        L_0x1012:
            r1 = 0
        L_0x1013:
            r23 = r6
            if (r5 <= 0) goto L_0x10a4
            java.lang.Integer r6 = java.lang.Integer.valueOf(r5)
            java.lang.Object r6 = r4.get(r6)
            org.telegram.tgnet.TLRPC$User r6 = (org.telegram.tgnet.TLRPC$User) r6
            r51 = r9
            if (r6 == 0) goto L_0x102b
            if (r1 != 0) goto L_0x1033
            boolean r9 = r6.min
            if (r9 == 0) goto L_0x1033
        L_0x102b:
            java.lang.Integer r6 = java.lang.Integer.valueOf(r5)
            org.telegram.tgnet.TLRPC$User r6 = r13.getUser(r6)
        L_0x1033:
            if (r6 == 0) goto L_0x103b
            if (r1 != 0) goto L_0x1052
            boolean r9 = r6.min
            if (r9 == 0) goto L_0x1052
        L_0x103b:
            org.telegram.messenger.MessagesStorage r6 = r55.getMessagesStorage()
            org.telegram.tgnet.TLRPC$User r6 = r6.getUserSync(r5)
            if (r6 == 0) goto L_0x104e
            if (r1 != 0) goto L_0x104e
            boolean r1 = r6.min
            if (r1 == 0) goto L_0x104e
            r1 = 1
            r6 = 0
            goto L_0x104f
        L_0x104e:
            r1 = 1
        L_0x104f:
            r13.putUser(r6, r1)
        L_0x1052:
            if (r6 != 0) goto L_0x106e
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x106c
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "not found user "
            r0.append(r1)
            r0.append(r5)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x106c:
            r0 = 0
            return r0
        L_0x106e:
            boolean r1 = r3.out
            if (r1 != 0) goto L_0x10a6
            r1 = 1
            if (r8 != r1) goto L_0x10a6
            org.telegram.tgnet.TLRPC$UserStatus r1 = r6.status
            if (r1 == 0) goto L_0x10a6
            int r1 = r1.expires
            if (r1 > 0) goto L_0x10a6
            org.telegram.tgnet.ConnectionsManager r1 = r55.getConnectionsManager()
            int r1 = r1.getCurrentTime()
            int r6 = r3.date
            int r1 = r1 - r6
            int r1 = java.lang.Math.abs(r1)
            r6 = 30
            if (r1 >= r6) goto L_0x10a8
            java.util.concurrent.ConcurrentHashMap<java.lang.Integer, java.lang.Integer> r1 = r13.onlinePrivacy
            java.lang.Integer r9 = java.lang.Integer.valueOf(r5)
            int r10 = r3.date
            java.lang.Integer r10 = java.lang.Integer.valueOf(r10)
            r1.put(r9, r10)
            r1 = r44 | 4
            r44 = r1
            goto L_0x10a8
        L_0x10a4:
            r51 = r9
        L_0x10a6:
            r6 = 30
        L_0x10a8:
            int r8 = r8 + 1
            r6 = r23
            r1 = r39
            r9 = r51
            goto L_0x0fdd
        L_0x10b2:
            r39 = r1
            r51 = r9
            if (r7 == 0) goto L_0x10c3
            boolean r1 = r7.megagroup
            if (r1 == 0) goto L_0x10c3
            int r1 = r3.flags
            r5 = -2147483648(0xfffffffvar_, float:-0.0)
            r1 = r1 | r5
            r3.flags = r1
        L_0x10c3:
            org.telegram.tgnet.TLRPC$MessageAction r1 = r3.action
            boolean r5 = r1 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatDeleteUser
            if (r5 == 0) goto L_0x111b
            int r1 = r1.user_id
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            java.lang.Object r1 = r4.get(r1)
            org.telegram.tgnet.TLRPC$User r1 = (org.telegram.tgnet.TLRPC$User) r1
            if (r1 == 0) goto L_0x10e9
            boolean r1 = r1.bot
            if (r1 == 0) goto L_0x10e9
            org.telegram.tgnet.TLRPC$TL_replyKeyboardHide r1 = new org.telegram.tgnet.TLRPC$TL_replyKeyboardHide
            r1.<init>()
            r3.reply_markup = r1
            int r1 = r3.flags
            r1 = r1 | 64
            r3.flags = r1
            goto L_0x111b
        L_0x10e9:
            int r1 = r3.from_id
            org.telegram.messenger.UserConfig r5 = r55.getUserConfig()
            int r5 = r5.getClientUserId()
            if (r1 != r5) goto L_0x111b
            org.telegram.tgnet.TLRPC$MessageAction r1 = r3.action
            int r1 = r1.user_id
            org.telegram.messenger.UserConfig r5 = r55.getUserConfig()
            int r5 = r5.getClientUserId()
            if (r1 != r5) goto L_0x111b
            r9 = r2
            r6 = r14
            r5 = r28
            r1 = r30
            r14 = r34
            r7 = r38
            r30 = r39
        L_0x110f:
            r2 = r40
            r3 = r41
            r8 = r42
            r10 = r44
            r23 = r51
            goto L_0x011e
        L_0x111b:
            org.telegram.messenger.ImageLoader.saveMessageThumbs(r3)
            org.telegram.messenger.UserConfig r1 = r55.getUserConfig()
            int r1 = r1.getClientUserId()
            org.telegram.tgnet.TLRPC$Peer r5 = r3.to_id
            int r6 = r5.chat_id
            if (r6 == 0) goto L_0x1131
            int r5 = -r6
            long r5 = (long) r5
            r3.dialog_id = r5
            goto L_0x1149
        L_0x1131:
            int r6 = r5.channel_id
            if (r6 == 0) goto L_0x113a
            int r5 = -r6
            long r5 = (long) r5
            r3.dialog_id = r5
            goto L_0x1149
        L_0x113a:
            int r6 = r5.user_id
            if (r6 != r1) goto L_0x1142
            int r6 = r3.from_id
            r5.user_id = r6
        L_0x1142:
            org.telegram.tgnet.TLRPC$Peer r5 = r3.to_id
            int r5 = r5.user_id
            long r5 = (long) r5
            r3.dialog_id = r5
        L_0x1149:
            java.util.ArrayList<java.lang.Long> r5 = r13.createdDialogIds
            long r8 = r3.dialog_id
            java.lang.Long r6 = java.lang.Long.valueOf(r8)
            boolean r5 = r5.contains(r6)
            if (r5 == 0) goto L_0x1173
            long r5 = r3.grouped_id
            r8 = 0
            int r10 = (r5 > r8 ? 1 : (r5 == r8 ? 0 : -1))
            if (r10 != 0) goto L_0x1173
            org.telegram.messenger.ImageLoader$MessageThumb r5 = org.telegram.messenger.ImageLoader.generateMessageThumb(r3)
            if (r5 == 0) goto L_0x1173
            if (r19 != 0) goto L_0x116c
            java.util.ArrayList r19 = new java.util.ArrayList
            r19.<init>()
        L_0x116c:
            r6 = r19
            r6.add(r5)
            r19 = r6
        L_0x1173:
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateNewScheduledMessage
            if (r0 == 0) goto L_0x11ca
            if (r22 != 0) goto L_0x117e
            java.util.ArrayList r22 = new java.util.ArrayList
            r22.<init>()
        L_0x117e:
            r0 = r22
            r0.add(r3)
            org.telegram.messenger.MessageObject r1 = new org.telegram.messenger.MessageObject
            int r6 = r13.currentAccount
            java.util.ArrayList<java.lang.Long> r5 = r13.createdScheduledDialogIds
            long r7 = r3.dialog_id
            java.lang.Long r7 = java.lang.Long.valueOf(r7)
            boolean r10 = r5.contains(r7)
            r5 = r1
            r7 = r3
            r8 = r4
            r23 = r51
            r9 = r11
            r5.<init>((int) r6, (org.telegram.tgnet.TLRPC$Message) r7, (java.util.AbstractMap<java.lang.Integer, org.telegram.tgnet.TLRPC$User>) r8, (java.util.AbstractMap<java.lang.Integer, org.telegram.tgnet.TLRPC$Chat>) r9, (boolean) r10)
            r5 = 1
            r1.scheduled = r5
            if (r17 != 0) goto L_0x11a6
            android.util.LongSparseArray r17 = new android.util.LongSparseArray
            r17.<init>()
        L_0x11a6:
            r5 = r17
            long r6 = r3.dialog_id
            java.lang.Object r6 = r5.get(r6)
            java.util.ArrayList r6 = (java.util.ArrayList) r6
            if (r6 != 0) goto L_0x11bc
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            long r7 = r3.dialog_id
            r5.put(r7, r6)
        L_0x11bc:
            r6.add(r1)
            r1 = r58
            r22 = r0
            r9 = r2
            r17 = r5
        L_0x11c6:
            r10 = r44
            goto L_0x12b1
        L_0x11ca:
            r23 = r51
            if (r28 != 0) goto L_0x11d3
            java.util.ArrayList r28 = new java.util.ArrayList
            r28.<init>()
        L_0x11d3:
            r0 = r28
            r0.add(r3)
            boolean r5 = r3.out
            if (r5 == 0) goto L_0x11df
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r5 = r13.dialogs_read_outbox_max
            goto L_0x11e1
        L_0x11df:
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r5 = r13.dialogs_read_inbox_max
        L_0x11e1:
            long r8 = r3.dialog_id
            java.lang.Long r6 = java.lang.Long.valueOf(r8)
            java.lang.Object r6 = r5.get(r6)
            java.lang.Integer r6 = (java.lang.Integer) r6
            if (r6 != 0) goto L_0x1208
            org.telegram.messenger.MessagesStorage r6 = r55.getMessagesStorage()
            boolean r8 = r3.out
            long r9 = r3.dialog_id
            int r6 = r6.getDialogReadMax(r8, r9)
            java.lang.Integer r6 = java.lang.Integer.valueOf(r6)
            long r8 = r3.dialog_id
            java.lang.Long r8 = java.lang.Long.valueOf(r8)
            r5.put(r8, r6)
        L_0x1208:
            int r5 = r6.intValue()
            int r6 = r3.id
            if (r5 >= r6) goto L_0x1224
            if (r7 == 0) goto L_0x1218
            boolean r5 = org.telegram.messenger.ChatObject.isNotInChat(r7)
            if (r5 != 0) goto L_0x1224
        L_0x1218:
            org.telegram.tgnet.TLRPC$MessageAction r5 = r3.action
            boolean r6 = r5 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatMigrateTo
            if (r6 != 0) goto L_0x1224
            boolean r5 = r5 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChannelCreate
            if (r5 != 0) goto L_0x1224
            r5 = 1
            goto L_0x1225
        L_0x1224:
            r5 = 0
        L_0x1225:
            r3.unread = r5
            long r5 = r3.dialog_id
            long r7 = (long) r1
            int r1 = (r5 > r7 ? 1 : (r5 == r7 ? 0 : -1))
            if (r1 != 0) goto L_0x123d
            boolean r1 = r3.from_scheduled
            if (r1 != 0) goto L_0x1236
            r1 = 0
            r3.unread = r1
            goto L_0x1237
        L_0x1236:
            r1 = 0
        L_0x1237:
            r3.media_unread = r1
            r5 = 1
            r3.out = r5
            goto L_0x123e
        L_0x123d:
            r1 = 0
        L_0x123e:
            org.telegram.messenger.MessageObject r10 = new org.telegram.messenger.MessageObject
            int r6 = r13.currentAccount
            java.util.ArrayList<java.lang.Long> r5 = r13.createdDialogIds
            long r7 = r3.dialog_id
            java.lang.Long r7 = java.lang.Long.valueOf(r7)
            boolean r27 = r5.contains(r7)
            r5 = r10
            r7 = r3
            r8 = r4
            r9 = r11
            r1 = r10
            r10 = r27
            r5.<init>((int) r6, (org.telegram.tgnet.TLRPC$Message) r7, (java.util.AbstractMap<java.lang.Integer, org.telegram.tgnet.TLRPC$User>) r8, (java.util.AbstractMap<java.lang.Integer, org.telegram.tgnet.TLRPC$Chat>) r9, (boolean) r10)
            int r5 = r1.type
            r6 = 11
            if (r5 != r6) goto L_0x1261
            r44 = r44 | 8
            goto L_0x1267
        L_0x1261:
            r6 = 10
            if (r5 != r6) goto L_0x1267
            r44 = r44 | 16
        L_0x1267:
            if (r2 != 0) goto L_0x126f
            android.util.LongSparseArray r9 = new android.util.LongSparseArray
            r9.<init>()
            goto L_0x1270
        L_0x126f:
            r9 = r2
        L_0x1270:
            long r5 = r3.dialog_id
            java.lang.Object r2 = r9.get(r5)
            java.util.ArrayList r2 = (java.util.ArrayList) r2
            if (r2 != 0) goto L_0x1284
            java.util.ArrayList r2 = new java.util.ArrayList
            r2.<init>()
            long r5 = r3.dialog_id
            r9.put(r5, r2)
        L_0x1284:
            r2.add(r1)
            boolean r2 = r1.isOut()
            if (r2 == 0) goto L_0x1293
            org.telegram.tgnet.TLRPC$Message r2 = r1.messageOwner
            boolean r2 = r2.from_scheduled
            if (r2 == 0) goto L_0x12ab
        L_0x1293:
            boolean r2 = r1.isUnread()
            if (r2 == 0) goto L_0x12ab
            if (r58 != 0) goto L_0x12a1
            java.util.ArrayList r2 = new java.util.ArrayList
            r2.<init>()
            goto L_0x12a3
        L_0x12a1:
            r2 = r58
        L_0x12a3:
            r2.add(r1)
            r28 = r0
            r1 = r2
            goto L_0x11c6
        L_0x12ab:
            r1 = r58
            r28 = r0
            goto L_0x11c6
        L_0x12b1:
            r6 = r14
            r5 = r28
            r14 = r34
            r7 = r38
            r2 = r40
            r3 = r41
            r8 = r42
            r28 = r1
            r1 = r30
            r30 = r39
        L_0x12c4:
            int r0 = r26 + 1
            r58 = r28
            r28 = r5
            r5 = r0
            r0 = r25
            goto L_0x00a4
        L_0x12cf:
            r40 = r2
            r41 = r3
            r38 = r7
            r42 = r8
            r2 = r9
            r44 = r10
            r34 = r14
            r39 = r30
            r30 = r1
            r14 = r6
            if (r2 == 0) goto L_0x12ff
            int r0 = r2.size()
            r6 = 0
        L_0x12e8:
            if (r6 >= r0) goto L_0x12ff
            long r7 = r2.keyAt(r6)
            java.lang.Object r1 = r2.valueAt(r6)
            java.util.ArrayList r1 = (java.util.ArrayList) r1
            boolean r1 = r13.updatePrintingUsersWithNewMessages(r7, r1)
            if (r1 == 0) goto L_0x12fc
            r20 = 1
        L_0x12fc:
            int r6 = r6 + 1
            goto L_0x12e8
        L_0x12ff:
            r8 = r20
            if (r8 == 0) goto L_0x1306
            r55.updatePrintingStrings()
        L_0x1306:
            if (r38 == 0) goto L_0x1312
            org.telegram.messenger.ContactsController r0 = r55.getContactsController()
            r9 = r38
            r0.processContactsUpdates(r9, r4)
            goto L_0x1314
        L_0x1312:
            r9 = r38
        L_0x1314:
            if (r58 == 0) goto L_0x1328
            org.telegram.messenger.MessagesStorage r0 = r55.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r0 = r0.getStorageQueue()
            org.telegram.messenger.-$$Lambda$MessagesController$nO-NeeSXAgX5Z82ZykWSooVCAVc r1 = new org.telegram.messenger.-$$Lambda$MessagesController$nO-NeeSXAgX5Z82ZykWSooVCAVc
            r3 = r58
            r1.<init>(r3)
            r0.postRunnable(r1)
        L_0x1328:
            if (r22 == 0) goto L_0x1341
            org.telegram.messenger.MessagesStorage r21 = r55.getMessagesStorage()
            r23 = 1
            r24 = 1
            r25 = 0
            org.telegram.messenger.DownloadController r0 = r55.getDownloadController()
            int r26 = r0.getAutodownloadMask()
            r27 = 1
            r21.putMessages((java.util.ArrayList<org.telegram.tgnet.TLRPC$Message>) r22, (boolean) r23, (boolean) r24, (boolean) r25, (int) r26, (boolean) r27)
        L_0x1341:
            if (r28 == 0) goto L_0x136e
            org.telegram.messenger.StatsController r0 = r55.getStatsController()
            int r1 = org.telegram.messenger.ApplicationLoader.getCurrentNetworkType()
            int r3 = r28.size()
            r4 = 1
            r0.incrementReceivedItemsCount(r1, r4, r3)
            org.telegram.messenger.MessagesStorage r23 = r55.getMessagesStorage()
            r25 = 1
            r26 = 1
            r27 = 0
            org.telegram.messenger.DownloadController r0 = r55.getDownloadController()
            int r0 = r0.getAutodownloadMask()
            r29 = 0
            r24 = r28
            r28 = r0
            r23.putMessages((java.util.ArrayList<org.telegram.tgnet.TLRPC$Message>) r24, (boolean) r25, (boolean) r26, (boolean) r27, (int) r28, (boolean) r29)
        L_0x136e:
            if (r42 == 0) goto L_0x13b5
            int r0 = r42.size()
            r6 = 0
        L_0x1375:
            if (r6 >= r0) goto L_0x13b5
            org.telegram.tgnet.TLRPC$TL_messages_messages r1 = new org.telegram.tgnet.TLRPC$TL_messages_messages
            r1.<init>()
            r3 = r42
            java.lang.Object r4 = r3.valueAt(r6)
            java.util.ArrayList r4 = (java.util.ArrayList) r4
            int r5 = r4.size()
            r7 = 0
        L_0x1389:
            if (r7 >= r5) goto L_0x139b
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r10 = r1.messages
            java.lang.Object r11 = r4.get(r7)
            org.telegram.messenger.MessageObject r11 = (org.telegram.messenger.MessageObject) r11
            org.telegram.tgnet.TLRPC$Message r11 = r11.messageOwner
            r10.add(r11)
            int r7 = r7 + 1
            goto L_0x1389
        L_0x139b:
            org.telegram.messenger.MessagesStorage r20 = r55.getMessagesStorage()
            long r22 = r3.keyAt(r6)
            r24 = -2
            r25 = 0
            r26 = 0
            r27 = 0
            r21 = r1
            r20.putMessages((org.telegram.tgnet.TLRPC$messages_Messages) r21, (long) r22, (int) r24, (int) r25, (boolean) r26, (boolean) r27)
            int r6 = r6 + 1
            r42 = r3
            goto L_0x1375
        L_0x13b5:
            r3 = r42
            if (r14 == 0) goto L_0x13c1
            org.telegram.messenger.MessagesStorage r0 = r55.getMessagesStorage()
            r1 = 1
            r0.putChannelViews(r14, r1)
        L_0x13c1:
            org.telegram.messenger.-$$Lambda$MessagesController$1JtdTkqCV_-N4khGHDETMo5C2zw r20 = new org.telegram.messenger.-$$Lambda$MessagesController$1JtdTkqCV_-N4khGHDETMo5C2zw
            r0 = r20
            r7 = r30
            r10 = r31
            r11 = r39
            r21 = 0
            r1 = r55
            r5 = r2
            r22 = r3
            r6 = r40
            r2 = r44
            r4 = r32
            r53 = r41
            r3 = r16
            r56 = r4
            r4 = r11
            r6 = r17
            r7 = r22
            r57 = r10
            r10 = r18
            r13 = r11
            r11 = r14
            r14 = r12
            r12 = r19
            r0.<init>(r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r20)
            org.telegram.messenger.MessagesStorage r0 = r55.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r9 = r0.getStorageQueue()
            org.telegram.messenger.-$$Lambda$MessagesController$emkOcbH5IRtkTlNQVf7mT69sjuo r10 = new org.telegram.messenger.-$$Lambda$MessagesController$emkOcbH5IRtkTlNQVf7mT69sjuo
            r0 = r10
            r2 = r15
            r3 = r14
            r4 = r57
            r5 = r34
            r6 = r30
            r7 = r40
            r8 = r56
            r0.<init>(r2, r3, r4, r5, r6, r7, r8)
            r9.postRunnable(r10)
            if (r13 == 0) goto L_0x1418
            org.telegram.messenger.MessagesStorage r0 = r55.getMessagesStorage()
            r0.putWebPages(r13)
        L_0x1418:
            if (r15 != 0) goto L_0x1426
            if (r14 != 0) goto L_0x1426
            r1 = r57
            if (r1 != 0) goto L_0x1428
            if (r34 == 0) goto L_0x1423
            goto L_0x1428
        L_0x1423:
            r2 = r34
            goto L_0x1442
        L_0x1426:
            r1 = r57
        L_0x1428:
            if (r15 != 0) goto L_0x1431
            if (r34 == 0) goto L_0x142d
            goto L_0x1431
        L_0x142d:
            r2 = r34
            r3 = 1
            goto L_0x143b
        L_0x1431:
            org.telegram.messenger.MessagesStorage r0 = r55.getMessagesStorage()
            r2 = r34
            r3 = 1
            r0.updateDialogsWithReadMessages(r15, r14, r2, r3)
        L_0x143b:
            org.telegram.messenger.MessagesStorage r0 = r55.getMessagesStorage()
            r0.markMessagesAsRead(r15, r14, r1, r3)
        L_0x1442:
            if (r2 == 0) goto L_0x1453
            org.telegram.messenger.MessagesStorage r0 = r55.getMessagesStorage()
            org.telegram.tgnet.ConnectionsManager r1 = r55.getConnectionsManager()
            int r1 = r1.getCurrentTime()
            r0.markMessagesContentAsRead(r2, r1)
        L_0x1453:
            r1 = r30
            if (r1 == 0) goto L_0x147d
            int r0 = r1.size()
            r6 = 0
        L_0x145c:
            if (r6 >= r0) goto L_0x147d
            int r2 = r1.keyAt(r6)
            java.lang.Object r3 = r1.valueAt(r6)
            java.util.ArrayList r3 = (java.util.ArrayList) r3
            org.telegram.messenger.MessagesStorage r4 = r55.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r4 = r4.getStorageQueue()
            org.telegram.messenger.-$$Lambda$MessagesController$0Bzi4OGPg1aNPtir4-V70NHj21Y r5 = new org.telegram.messenger.-$$Lambda$MessagesController$0Bzi4OGPg1aNPtir4-V70NHj21Y
            r7 = r55
            r5.<init>(r3, r2)
            r4.postRunnable(r5)
            int r6 = r6 + 1
            goto L_0x145c
        L_0x147d:
            r7 = r55
            r1 = r40
            if (r1 == 0) goto L_0x14a2
            int r0 = r1.size()
            r6 = 0
        L_0x1488:
            if (r6 >= r0) goto L_0x14a2
            int r11 = r1.keyAt(r6)
            java.lang.Object r2 = r1.valueAt(r6)
            r9 = r2
            java.util.ArrayList r9 = (java.util.ArrayList) r9
            org.telegram.messenger.MessagesStorage r8 = r55.getMessagesStorage()
            r10 = 1
            r12 = 0
            r13 = 1
            r8.markMessagesAsDeleted(r9, r10, r11, r12, r13)
            int r6 = r6 + 1
            goto L_0x1488
        L_0x14a2:
            r1 = r56
            if (r1 == 0) goto L_0x14c8
            int r0 = r1.size()
            r6 = 0
        L_0x14ab:
            if (r6 >= r0) goto L_0x14c8
            int r2 = r1.keyAt(r6)
            int r3 = r1.valueAt(r6)
            org.telegram.messenger.MessagesStorage r4 = r55.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r4 = r4.getStorageQueue()
            org.telegram.messenger.-$$Lambda$MessagesController$u_GNaK1td4t4AqfBjxM13dZdQFs r5 = new org.telegram.messenger.-$$Lambda$MessagesController$u_GNaK1td4t4AqfBjxM13dZdQFs
            r5.<init>(r2, r3)
            r4.postRunnable(r5)
            int r6 = r6 + 1
            goto L_0x14ab
        L_0x14c8:
            r1 = r53
            if (r1 == 0) goto L_0x14eb
            int r0 = r1.size()
            r15 = 0
        L_0x14d1:
            if (r15 >= r0) goto L_0x14eb
            java.lang.Object r2 = r1.get(r15)
            org.telegram.tgnet.TLRPC$TL_updateEncryptedMessagesRead r2 = (org.telegram.tgnet.TLRPC$TL_updateEncryptedMessagesRead) r2
            org.telegram.messenger.MessagesStorage r8 = r55.getMessagesStorage()
            int r9 = r2.chat_id
            int r10 = r2.max_date
            int r11 = r2.date
            r12 = 1
            r13 = 0
            r8.createTaskForSecretChat(r9, r10, r11, r12, r13)
            int r15 = r15 + 1
            goto L_0x14d1
        L_0x14eb:
            r0 = 1
            return r0
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.processUpdateArray(java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, boolean, int):boolean");
    }

    public /* synthetic */ void lambda$processUpdateArray$266$MessagesController(ArrayList arrayList, ArrayList arrayList2) {
        putUsers(arrayList, false);
        putChats(arrayList2, false);
    }

    public /* synthetic */ void lambda$processUpdateArray$267$MessagesController(ArrayList arrayList, ArrayList arrayList2) {
        putUsers(arrayList, false);
        putChats(arrayList2, false);
    }

    public /* synthetic */ void lambda$processUpdateArray$269$MessagesController(TLRPC$TL_updateUserBlocked tLRPC$TL_updateUserBlocked) {
        AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_updateUserBlocked) {
            private final /* synthetic */ TLRPC$TL_updateUserBlocked f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$268$MessagesController(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$null$268$MessagesController(TLRPC$TL_updateUserBlocked tLRPC$TL_updateUserBlocked) {
        if (!tLRPC$TL_updateUserBlocked.blocked) {
            this.blockedUsers.delete(tLRPC$TL_updateUserBlocked.user_id);
        } else if (this.blockedUsers.indexOfKey(tLRPC$TL_updateUserBlocked.user_id) < 0) {
            this.blockedUsers.put(tLRPC$TL_updateUserBlocked.user_id, 1);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
    }

    public /* synthetic */ void lambda$processUpdateArray$270$MessagesController(TLRPC$TL_updateServiceNotification tLRPC$TL_updateServiceNotification) {
        getNotificationCenter().postNotificationName(NotificationCenter.needShowAlert, 2, tLRPC$TL_updateServiceNotification.message, tLRPC$TL_updateServiceNotification.type);
    }

    public /* synthetic */ void lambda$processUpdateArray$271$MessagesController(TLRPC$TL_updateLangPack tLRPC$TL_updateLangPack) {
        LocaleController.getInstance().saveRemoteLocaleStringsForCurrentLocale(tLRPC$TL_updateLangPack.difference, this.currentAccount);
    }

    public /* synthetic */ void lambda$null$272$MessagesController(ArrayList arrayList) {
        getNotificationsController().processNewMessages(arrayList, true, false, (CountDownLatch) null);
    }

    public /* synthetic */ void lambda$processUpdateArray$273$MessagesController(ArrayList arrayList) {
        AndroidUtilities.runOnUIThread(new Runnable(arrayList) {
            private final /* synthetic */ ArrayList f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesController.this.lambda$null$272$MessagesController(this.f$1);
            }
        });
    }

    /* JADX WARNING: Removed duplicated region for block: B:445:0x09dd  */
    /* JADX WARNING: Removed duplicated region for block: B:449:0x09f7  */
    /* JADX WARNING: Removed duplicated region for block: B:477:0x0aa5  */
    /* JADX WARNING: Removed duplicated region for block: B:479:0x0ab2  */
    /* JADX WARNING: Removed duplicated region for block: B:481:0x0ab6  */
    /* JADX WARNING: Removed duplicated region for block: B:483:0x0abc  */
    /* JADX WARNING: Removed duplicated region for block: B:487:0x0ad5  */
    /* JADX WARNING: Removed duplicated region for block: B:488:0x0ae5  */
    /* JADX WARNING: Removed duplicated region for block: B:490:0x0ae9  */
    /* JADX WARNING: Removed duplicated region for block: B:493:0x0afe  */
    /* JADX WARNING: Removed duplicated region for block: B:536:? A[RETURN, SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$processUpdateArray$278$MessagesController(int r40, java.util.ArrayList r41, android.util.LongSparseArray r42, android.util.LongSparseArray r43, android.util.LongSparseArray r44, android.util.LongSparseArray r45, boolean r46, java.util.ArrayList r47, java.util.ArrayList r48, android.util.SparseArray r49, java.util.ArrayList r50) {
        /*
            r39 = this;
            r8 = r39
            r9 = r41
            r10 = r42
            r11 = r43
            r12 = r44
            r13 = r45
            r14 = r48
            r15 = r50
            r3 = 0
            if (r9 == 0) goto L_0x08a9
            java.util.ArrayList r5 = new java.util.ArrayList
            r5.<init>()
            java.util.ArrayList r4 = new java.util.ArrayList
            r4.<init>()
            int r6 = r41.size()
            r19 = r40
            r7 = 0
            r21 = 0
            r22 = 0
            r23 = 0
        L_0x002a:
            if (r7 >= r6) goto L_0x087f
            java.lang.Object r0 = r9.get(r7)
            org.telegram.tgnet.TLRPC$Update r0 = (org.telegram.tgnet.TLRPC$Update) r0
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updatePrivacy
            if (r2 == 0) goto L_0x00c6
            org.telegram.tgnet.TLRPC$TL_updatePrivacy r0 = (org.telegram.tgnet.TLRPC$TL_updatePrivacy) r0
            org.telegram.tgnet.TLRPC$PrivacyKey r2 = r0.key
            boolean r1 = r2 instanceof org.telegram.tgnet.TLRPC$TL_privacyKeyStatusTimestamp
            if (r1 == 0) goto L_0x004d
            org.telegram.messenger.ContactsController r1 = r39.getContactsController()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PrivacyRule> r0 = r0.rules
            r1.setPrivacyRules(r0, r3)
        L_0x0047:
            r18 = 3
            r20 = 2
            goto L_0x00bb
        L_0x004d:
            boolean r1 = r2 instanceof org.telegram.tgnet.TLRPC$TL_privacyKeyChatInvite
            if (r1 == 0) goto L_0x005c
            org.telegram.messenger.ContactsController r1 = r39.getContactsController()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PrivacyRule> r0 = r0.rules
            r2 = 1
            r1.setPrivacyRules(r0, r2)
            goto L_0x0047
        L_0x005c:
            boolean r1 = r2 instanceof org.telegram.tgnet.TLRPC$TL_privacyKeyPhoneCall
            if (r1 == 0) goto L_0x006b
            org.telegram.messenger.ContactsController r1 = r39.getContactsController()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PrivacyRule> r0 = r0.rules
            r2 = 2
            r1.setPrivacyRules(r0, r2)
            goto L_0x0047
        L_0x006b:
            r20 = 2
            boolean r1 = r2 instanceof org.telegram.tgnet.TLRPC$TL_privacyKeyPhoneP2P
            if (r1 == 0) goto L_0x007e
            org.telegram.messenger.ContactsController r1 = r39.getContactsController()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PrivacyRule> r0 = r0.rules
            r2 = 3
            r1.setPrivacyRules(r0, r2)
            r18 = 3
            goto L_0x00bb
        L_0x007e:
            r18 = 3
            boolean r1 = r2 instanceof org.telegram.tgnet.TLRPC$TL_privacyKeyProfilePhoto
            if (r1 == 0) goto L_0x008f
            org.telegram.messenger.ContactsController r1 = r39.getContactsController()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PrivacyRule> r0 = r0.rules
            r2 = 4
            r1.setPrivacyRules(r0, r2)
            goto L_0x00bb
        L_0x008f:
            boolean r1 = r2 instanceof org.telegram.tgnet.TLRPC$TL_privacyKeyForwards
            if (r1 == 0) goto L_0x009e
            org.telegram.messenger.ContactsController r1 = r39.getContactsController()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PrivacyRule> r0 = r0.rules
            r2 = 5
            r1.setPrivacyRules(r0, r2)
            goto L_0x00bb
        L_0x009e:
            boolean r1 = r2 instanceof org.telegram.tgnet.TLRPC$TL_privacyKeyPhoneNumber
            if (r1 == 0) goto L_0x00ad
            org.telegram.messenger.ContactsController r1 = r39.getContactsController()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PrivacyRule> r0 = r0.rules
            r2 = 6
            r1.setPrivacyRules(r0, r2)
            goto L_0x00bb
        L_0x00ad:
            boolean r1 = r2 instanceof org.telegram.tgnet.TLRPC$TL_privacyKeyAddedByPhone
            if (r1 == 0) goto L_0x00bb
            org.telegram.messenger.ContactsController r1 = r39.getContactsController()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PrivacyRule> r0 = r0.rules
            r2 = 7
            r1.setPrivacyRules(r0, r2)
        L_0x00bb:
            r32 = r4
            r9 = r5
            r16 = r6
            r17 = r7
        L_0x00c2:
            r1 = r19
            goto L_0x086f
        L_0x00c6:
            r18 = 3
            r20 = 2
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateUserStatus
            if (r1 == 0) goto L_0x0128
            org.telegram.tgnet.TLRPC$TL_updateUserStatus r0 = (org.telegram.tgnet.TLRPC$TL_updateUserStatus) r0
            int r1 = r0.user_id
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            org.telegram.tgnet.TLRPC$User r1 = r8.getUser(r1)
            org.telegram.tgnet.TLRPC$UserStatus r2 = r0.status
            boolean r3 = r2 instanceof org.telegram.tgnet.TLRPC$TL_userStatusRecently
            if (r3 == 0) goto L_0x00e5
            r3 = -100
            r2.expires = r3
            goto L_0x00f6
        L_0x00e5:
            boolean r3 = r2 instanceof org.telegram.tgnet.TLRPC$TL_userStatusLastWeek
            if (r3 == 0) goto L_0x00ee
            r3 = -101(0xffffffffffffff9b, float:NaN)
            r2.expires = r3
            goto L_0x00f6
        L_0x00ee:
            boolean r3 = r2 instanceof org.telegram.tgnet.TLRPC$TL_userStatusLastMonth
            if (r3 == 0) goto L_0x00f6
            r3 = -102(0xffffffffffffff9a, float:NaN)
            r2.expires = r3
        L_0x00f6:
            if (r1 == 0) goto L_0x0100
            int r2 = r0.user_id
            r1.id = r2
            org.telegram.tgnet.TLRPC$UserStatus r2 = r0.status
            r1.status = r2
        L_0x0100:
            org.telegram.tgnet.TLRPC$TL_user r1 = new org.telegram.tgnet.TLRPC$TL_user
            r1.<init>()
            int r2 = r0.user_id
            r1.id = r2
            org.telegram.tgnet.TLRPC$UserStatus r2 = r0.status
            r1.status = r2
            r4.add(r1)
            int r1 = r0.user_id
            org.telegram.messenger.UserConfig r2 = r39.getUserConfig()
            int r2 = r2.getClientUserId()
            if (r1 != r2) goto L_0x00bb
            org.telegram.messenger.NotificationsController r1 = r39.getNotificationsController()
            org.telegram.tgnet.TLRPC$UserStatus r0 = r0.status
            int r0 = r0.expires
            r1.setLastOnlineFromOtherDevice(r0)
            goto L_0x00bb
        L_0x0128:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateUserName
            if (r1 == 0) goto L_0x0184
            org.telegram.tgnet.TLRPC$TL_updateUserName r0 = (org.telegram.tgnet.TLRPC$TL_updateUserName) r0
            int r1 = r0.user_id
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            org.telegram.tgnet.TLRPC$User r1 = r8.getUser(r1)
            if (r1 == 0) goto L_0x016a
            boolean r2 = org.telegram.messenger.UserObject.isContact(r1)
            if (r2 != 0) goto L_0x0148
            java.lang.String r2 = r0.first_name
            r1.first_name = r2
            java.lang.String r2 = r0.last_name
            r1.last_name = r2
        L_0x0148:
            java.lang.String r2 = r1.username
            boolean r2 = android.text.TextUtils.isEmpty(r2)
            if (r2 != 0) goto L_0x0157
            java.util.concurrent.ConcurrentHashMap<java.lang.String, org.telegram.tgnet.TLObject> r2 = r8.objectsByUsernames
            java.lang.String r3 = r1.username
            r2.remove(r3)
        L_0x0157:
            java.lang.String r2 = r0.username
            boolean r2 = android.text.TextUtils.isEmpty(r2)
            if (r2 == 0) goto L_0x0166
            java.util.concurrent.ConcurrentHashMap<java.lang.String, org.telegram.tgnet.TLObject> r2 = r8.objectsByUsernames
            java.lang.String r3 = r0.username
            r2.put(r3, r1)
        L_0x0166:
            java.lang.String r2 = r0.username
            r1.username = r2
        L_0x016a:
            org.telegram.tgnet.TLRPC$TL_user r1 = new org.telegram.tgnet.TLRPC$TL_user
            r1.<init>()
            int r2 = r0.user_id
            r1.id = r2
            java.lang.String r2 = r0.first_name
            r1.first_name = r2
            java.lang.String r2 = r0.last_name
            r1.last_name = r2
            java.lang.String r0 = r0.username
            r1.username = r0
            r5.add(r1)
            goto L_0x00bb
        L_0x0184:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateDialogPinned
            if (r1 == 0) goto L_0x01db
            org.telegram.tgnet.TLRPC$TL_updateDialogPinned r0 = (org.telegram.tgnet.TLRPC$TL_updateDialogPinned) r0
            org.telegram.tgnet.TLRPC$DialogPeer r1 = r0.peer
            boolean r2 = r1 instanceof org.telegram.tgnet.TLRPC$TL_dialogPeer
            if (r2 == 0) goto L_0x019a
            org.telegram.tgnet.TLRPC$TL_dialogPeer r1 = (org.telegram.tgnet.TLRPC$TL_dialogPeer) r1
            org.telegram.tgnet.TLRPC$Peer r1 = r1.peer
            long r1 = org.telegram.messenger.DialogObject.getPeerDialogId((org.telegram.tgnet.TLRPC$Peer) r1)
            r2 = r1
            goto L_0x019c
        L_0x019a:
            r2 = 0
        L_0x019c:
            boolean r1 = r0.pinned
            r27 = 0
            r28 = -1
            r25 = r1
            r1 = r39
            r30 = r2
            r32 = r4
            r4 = r25
            r9 = r5
            r5 = r27
            r16 = r6
            r17 = r7
            r15 = 2
            r6 = r28
            boolean r1 = r1.pinDialog(r2, r4, r5, r6)
            if (r1 != 0) goto L_0x01d7
            org.telegram.messenger.UserConfig r1 = r39.getUserConfig()
            int r2 = r0.folder_id
            r3 = 0
            r1.setPinnedDialogsLoaded(r2, r3)
            org.telegram.messenger.UserConfig r1 = r39.getUserConfig()
            r1.saveConfig(r3)
            int r0 = r0.folder_id
            r1 = r30
            r4 = 0
            r8.loadPinnedDialogs(r0, r1, r4)
            goto L_0x00c2
        L_0x01d7:
            r3 = 0
            r4 = 0
            goto L_0x00c2
        L_0x01db:
            r32 = r4
            r9 = r5
            r16 = r6
            r17 = r7
            r3 = 0
            r4 = 0
            r15 = 2
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updatePinnedDialogs
            if (r1 == 0) goto L_0x0253
            org.telegram.tgnet.TLRPC$TL_updatePinnedDialogs r0 = (org.telegram.tgnet.TLRPC$TL_updatePinnedDialogs) r0
            org.telegram.messenger.UserConfig r1 = r39.getUserConfig()
            int r2 = r0.folder_id
            r1.setPinnedDialogsLoaded(r2, r3)
            org.telegram.messenger.UserConfig r1 = r39.getUserConfig()
            r1.saveConfig(r3)
            int r1 = r0.flags
            r2 = 1
            r1 = r1 & r2
            if (r1 == 0) goto L_0x0249
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$DialogPeer> r5 = r0.order
            int r6 = r5.size()
            r7 = 0
        L_0x020d:
            if (r7 >= r6) goto L_0x0247
            java.lang.Object r20 = r5.get(r7)
            r2 = r20
            org.telegram.tgnet.TLRPC$DialogPeer r2 = (org.telegram.tgnet.TLRPC$DialogPeer) r2
            boolean r15 = r2 instanceof org.telegram.tgnet.TLRPC$TL_dialogPeer
            if (r15 == 0) goto L_0x0234
            org.telegram.tgnet.TLRPC$TL_dialogPeer r2 = (org.telegram.tgnet.TLRPC$TL_dialogPeer) r2
            org.telegram.tgnet.TLRPC$Peer r2 = r2.peer
            int r15 = r2.user_id
            if (r15 == 0) goto L_0x0227
            r24 = r5
            long r4 = (long) r15
            goto L_0x0238
        L_0x0227:
            r24 = r5
            int r4 = r2.chat_id
            if (r4 == 0) goto L_0x022f
            int r2 = -r4
            goto L_0x0232
        L_0x022f:
            int r2 = r2.channel_id
            int r2 = -r2
        L_0x0232:
            long r4 = (long) r2
            goto L_0x0238
        L_0x0234:
            r24 = r5
            r4 = 0
        L_0x0238:
            java.lang.Long r2 = java.lang.Long.valueOf(r4)
            r1.add(r2)
            int r7 = r7 + 1
            r5 = r24
            r2 = 1
            r4 = 0
            r15 = 2
            goto L_0x020d
        L_0x0247:
            r2 = r1
            goto L_0x024a
        L_0x0249:
            r2 = 0
        L_0x024a:
            int r0 = r0.folder_id
            r4 = 0
            r8.loadPinnedDialogs(r0, r4, r2)
            goto L_0x00c2
        L_0x0253:
            r4 = 0
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateFolderPeers
            if (r1 == 0) goto L_0x0296
            org.telegram.tgnet.TLRPC$TL_updateFolderPeers r0 = (org.telegram.tgnet.TLRPC$TL_updateFolderPeers) r0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_folderPeer> r1 = r0.folder_peers
            int r1 = r1.size()
            r2 = 0
        L_0x0262:
            if (r2 >= r1) goto L_0x0292
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_folderPeer> r6 = r0.folder_peers
            java.lang.Object r6 = r6.get(r2)
            org.telegram.tgnet.TLRPC$TL_folderPeer r6 = (org.telegram.tgnet.TLRPC$TL_folderPeer) r6
            org.telegram.tgnet.TLRPC$Peer r7 = r6.peer
            long r4 = org.telegram.messenger.DialogObject.getPeerDialogId((org.telegram.tgnet.TLRPC$Peer) r7)
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r7 = r8.dialogs_dict
            java.lang.Object r4 = r7.get(r4)
            org.telegram.tgnet.TLRPC$Dialog r4 = (org.telegram.tgnet.TLRPC$Dialog) r4
            if (r4 != 0) goto L_0x027d
            goto L_0x028d
        L_0x027d:
            int r5 = r4.folder_id
            int r6 = r6.folder_id
            if (r5 == r6) goto L_0x028d
            r4.pinned = r3
            r4.pinnedNum = r3
            r4.folder_id = r6
            r4 = 0
            r8.ensureFolderDialogExists(r6, r4)
        L_0x028d:
            int r2 = r2 + 1
            r4 = 0
            goto L_0x0262
        L_0x0292:
            r23 = 1
            goto L_0x0871
        L_0x0296:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateUserPhoto
            if (r1 == 0) goto L_0x02be
            org.telegram.tgnet.TLRPC$TL_updateUserPhoto r0 = (org.telegram.tgnet.TLRPC$TL_updateUserPhoto) r0
            int r1 = r0.user_id
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            org.telegram.tgnet.TLRPC$User r1 = r8.getUser(r1)
            if (r1 == 0) goto L_0x02ac
            org.telegram.tgnet.TLRPC$UserProfilePhoto r2 = r0.photo
            r1.photo = r2
        L_0x02ac:
            org.telegram.tgnet.TLRPC$TL_user r1 = new org.telegram.tgnet.TLRPC$TL_user
            r1.<init>()
            int r2 = r0.user_id
            r1.id = r2
            org.telegram.tgnet.TLRPC$UserProfilePhoto r0 = r0.photo
            r1.photo = r0
            r9.add(r1)
            goto L_0x00c2
        L_0x02be:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateUserPhone
            if (r1 == 0) goto L_0x0301
            org.telegram.tgnet.TLRPC$TL_updateUserPhone r0 = (org.telegram.tgnet.TLRPC$TL_updateUserPhone) r0
            int r1 = r0.user_id
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            org.telegram.tgnet.TLRPC$User r1 = r8.getUser(r1)
            if (r1 == 0) goto L_0x02ef
            java.lang.String r2 = r0.phone
            r1.phone = r2
            org.telegram.messenger.DispatchQueue r2 = org.telegram.messenger.Utilities.phoneBookQueue
            org.telegram.messenger.-$$Lambda$MessagesController$ceHKMHx8CvWre9Tpb7MNPX8FHiQ r4 = new org.telegram.messenger.-$$Lambda$MessagesController$ceHKMHx8CvWre9Tpb7MNPX8FHiQ
            r4.<init>(r1)
            r2.postRunnable(r4)
            boolean r1 = org.telegram.messenger.UserObject.isUserSelf(r1)
            if (r1 == 0) goto L_0x02ef
            org.telegram.messenger.NotificationCenter r1 = r39.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.mainUserInfoChanged
            java.lang.Object[] r4 = new java.lang.Object[r3]
            r1.postNotificationName(r2, r4)
        L_0x02ef:
            org.telegram.tgnet.TLRPC$TL_user r1 = new org.telegram.tgnet.TLRPC$TL_user
            r1.<init>()
            int r2 = r0.user_id
            r1.id = r2
            java.lang.String r0 = r0.phone
            r1.phone = r0
            r9.add(r1)
            goto L_0x00c2
        L_0x0301:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateNotifySettings
            if (r1 == 0) goto L_0x04b1
            org.telegram.tgnet.TLRPC$TL_updateNotifySettings r0 = (org.telegram.tgnet.TLRPC$TL_updateNotifySettings) r0
            org.telegram.tgnet.TLRPC$PeerNotifySettings r1 = r0.notify_settings
            boolean r1 = r1 instanceof org.telegram.tgnet.TLRPC$TL_peerNotifySettings
            if (r1 == 0) goto L_0x0871
            int r1 = DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r22 = r22 | r1
            if (r21 != 0) goto L_0x0319
            android.content.SharedPreferences r1 = r8.notificationsPreferences
            android.content.SharedPreferences$Editor r21 = r1.edit()
        L_0x0319:
            r1 = r21
            org.telegram.tgnet.ConnectionsManager r2 = r39.getConnectionsManager()
            int r2 = r2.getCurrentTime()
            org.telegram.tgnet.TLRPC$NotifyPeer r4 = r0.peer
            boolean r5 = r4 instanceof org.telegram.tgnet.TLRPC$TL_notifyPeer
            if (r5 == 0) goto L_0x043e
            org.telegram.tgnet.TLRPC$TL_notifyPeer r4 = (org.telegram.tgnet.TLRPC$TL_notifyPeer) r4
            org.telegram.tgnet.TLRPC$Peer r4 = r4.peer
            int r5 = r4.user_id
            if (r5 == 0) goto L_0x0333
            long r4 = (long) r5
            goto L_0x033d
        L_0x0333:
            int r5 = r4.chat_id
            if (r5 == 0) goto L_0x0339
            int r4 = -r5
            goto L_0x033c
        L_0x0339:
            int r4 = r4.channel_id
            int r4 = -r4
        L_0x033c:
            long r4 = (long) r4
        L_0x033d:
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r6 = r8.dialogs_dict
            java.lang.Object r6 = r6.get(r4)
            org.telegram.tgnet.TLRPC$Dialog r6 = (org.telegram.tgnet.TLRPC$Dialog) r6
            if (r6 == 0) goto L_0x034b
            org.telegram.tgnet.TLRPC$PeerNotifySettings r7 = r0.notify_settings
            r6.notify_settings = r7
        L_0x034b:
            org.telegram.tgnet.TLRPC$PeerNotifySettings r7 = r0.notify_settings
            int r7 = r7.flags
            r15 = 2
            r7 = r7 & r15
            java.lang.String r15 = "silent_"
            if (r7 == 0) goto L_0x036c
            java.lang.StringBuilder r7 = new java.lang.StringBuilder
            r7.<init>()
            r7.append(r15)
            r7.append(r4)
            java.lang.String r7 = r7.toString()
            org.telegram.tgnet.TLRPC$PeerNotifySettings r15 = r0.notify_settings
            boolean r15 = r15.silent
            r1.putBoolean(r7, r15)
            goto L_0x037e
        L_0x036c:
            java.lang.StringBuilder r7 = new java.lang.StringBuilder
            r7.<init>()
            r7.append(r15)
            r7.append(r4)
            java.lang.String r7 = r7.toString()
            r1.remove(r7)
        L_0x037e:
            org.telegram.tgnet.TLRPC$PeerNotifySettings r7 = r0.notify_settings
            int r15 = r7.flags
            r21 = 4
            r15 = r15 & 4
            java.lang.String r3 = "notify2_"
            if (r15 == 0) goto L_0x041d
            int r15 = r7.mute_until
            if (r15 <= r2) goto L_0x03fb
            r7 = 31536000(0x1e13380, float:8.2725845E-38)
            int r2 = r2 + r7
            if (r15 <= r2) goto L_0x03b2
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            r2.append(r3)
            r2.append(r4)
            java.lang.String r2 = r2.toString()
            r3 = 2
            r1.putInt(r2, r3)
            if (r6 == 0) goto L_0x03b0
            org.telegram.tgnet.TLRPC$PeerNotifySettings r0 = r0.notify_settings
            r2 = 2147483647(0x7fffffff, float:NaN)
            r0.mute_until = r2
        L_0x03b0:
            r3 = 0
            goto L_0x03e4
        L_0x03b2:
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            r2.append(r3)
            r2.append(r4)
            java.lang.String r2 = r2.toString()
            r3 = 3
            r1.putInt(r2, r3)
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            java.lang.String r3 = "notifyuntil_"
            r2.append(r3)
            r2.append(r4)
            java.lang.String r2 = r2.toString()
            org.telegram.tgnet.TLRPC$PeerNotifySettings r3 = r0.notify_settings
            int r3 = r3.mute_until
            r1.putInt(r2, r3)
            if (r6 == 0) goto L_0x03e3
            org.telegram.tgnet.TLRPC$PeerNotifySettings r0 = r0.notify_settings
            r0.mute_until = r15
        L_0x03e3:
            r3 = r15
        L_0x03e4:
            org.telegram.messenger.MessagesStorage r0 = r39.getMessagesStorage()
            long r2 = (long) r3
            r6 = 32
            long r2 = r2 << r6
            r6 = 1
            long r2 = r2 | r6
            r0.setDialogFlags(r4, r2)
            org.telegram.messenger.NotificationsController r0 = r39.getNotificationsController()
            r0.removeNotificationsForDialog(r4)
            goto L_0x04a6
        L_0x03fb:
            r2 = 0
            if (r6 == 0) goto L_0x0400
            r7.mute_until = r2
        L_0x0400:
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r3)
            r0.append(r4)
            java.lang.String r0 = r0.toString()
            r1.putInt(r0, r2)
            org.telegram.messenger.MessagesStorage r0 = r39.getMessagesStorage()
            r6 = 0
            r0.setDialogFlags(r4, r6)
            goto L_0x04a6
        L_0x041d:
            r2 = 0
            if (r6 == 0) goto L_0x0422
            r7.mute_until = r2
        L_0x0422:
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r3)
            r0.append(r4)
            java.lang.String r0 = r0.toString()
            r1.remove(r0)
            org.telegram.messenger.MessagesStorage r0 = r39.getMessagesStorage()
            r2 = 0
            r0.setDialogFlags(r4, r2)
            goto L_0x04a6
        L_0x043e:
            boolean r2 = r4 instanceof org.telegram.tgnet.TLRPC$TL_notifyChats
            if (r2 == 0) goto L_0x0461
            org.telegram.tgnet.TLRPC$PeerNotifySettings r2 = r0.notify_settings
            int r3 = r2.flags
            r4 = 1
            r3 = r3 & r4
            if (r3 == 0) goto L_0x0451
            boolean r2 = r2.show_previews
            java.lang.String r3 = "EnablePreviewGroup"
            r1.putBoolean(r3, r2)
        L_0x0451:
            org.telegram.tgnet.TLRPC$PeerNotifySettings r0 = r0.notify_settings
            int r2 = r0.flags
            r3 = 4
            r2 = r2 & r3
            if (r2 == 0) goto L_0x04a6
            int r0 = r0.mute_until
            java.lang.String r2 = "EnableGroup2"
            r1.putInt(r2, r0)
            goto L_0x04a6
        L_0x0461:
            boolean r2 = r4 instanceof org.telegram.tgnet.TLRPC$TL_notifyUsers
            if (r2 == 0) goto L_0x0484
            org.telegram.tgnet.TLRPC$PeerNotifySettings r2 = r0.notify_settings
            int r3 = r2.flags
            r4 = 1
            r3 = r3 & r4
            if (r3 == 0) goto L_0x0474
            boolean r2 = r2.show_previews
            java.lang.String r3 = "EnablePreviewAll"
            r1.putBoolean(r3, r2)
        L_0x0474:
            org.telegram.tgnet.TLRPC$PeerNotifySettings r0 = r0.notify_settings
            int r2 = r0.flags
            r3 = 4
            r2 = r2 & r3
            if (r2 == 0) goto L_0x04a6
            int r0 = r0.mute_until
            java.lang.String r2 = "EnableAll2"
            r1.putInt(r2, r0)
            goto L_0x04a6
        L_0x0484:
            boolean r2 = r4 instanceof org.telegram.tgnet.TLRPC$TL_notifyBroadcasts
            if (r2 == 0) goto L_0x04a6
            org.telegram.tgnet.TLRPC$PeerNotifySettings r2 = r0.notify_settings
            int r3 = r2.flags
            r4 = 1
            r3 = r3 & r4
            if (r3 == 0) goto L_0x0497
            boolean r2 = r2.show_previews
            java.lang.String r3 = "EnablePreviewChannel"
            r1.putBoolean(r3, r2)
        L_0x0497:
            org.telegram.tgnet.TLRPC$PeerNotifySettings r0 = r0.notify_settings
            int r2 = r0.flags
            r3 = 4
            r2 = r2 & r3
            if (r2 == 0) goto L_0x04a6
            int r0 = r0.mute_until
            java.lang.String r2 = "EnableChannel2"
            r1.putInt(r2, r0)
        L_0x04a6:
            org.telegram.messenger.MessagesStorage r0 = r39.getMessagesStorage()
            r0.updateMutedDialogsFiltersCounters()
            r21 = r1
            goto L_0x0871
        L_0x04b1:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateChannel
            if (r1 == 0) goto L_0x050a
            org.telegram.tgnet.TLRPC$TL_updateChannel r0 = (org.telegram.tgnet.TLRPC$TL_updateChannel) r0
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r1 = r8.dialogs_dict
            int r2 = r0.channel_id
            long r2 = (long) r2
            long r2 = -r2
            java.lang.Object r1 = r1.get(r2)
            org.telegram.tgnet.TLRPC$Dialog r1 = (org.telegram.tgnet.TLRPC$Dialog) r1
            int r2 = r0.channel_id
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)
            org.telegram.tgnet.TLRPC$Chat r2 = r8.getChat(r2)
            if (r2 == 0) goto L_0x04fd
            if (r1 != 0) goto L_0x04e4
            boolean r3 = r2 instanceof org.telegram.tgnet.TLRPC$TL_channel
            if (r3 == 0) goto L_0x04e4
            boolean r3 = r2.left
            if (r3 != 0) goto L_0x04e4
            org.telegram.messenger.DispatchQueue r1 = org.telegram.messenger.Utilities.stageQueue
            org.telegram.messenger.-$$Lambda$MessagesController$pjQSekU6Y5HwS3TFm6rudK_vDiU r2 = new org.telegram.messenger.-$$Lambda$MessagesController$pjQSekU6Y5HwS3TFm6rudK_vDiU
            r2.<init>(r0)
            r1.postRunnable(r2)
            goto L_0x04fd
        L_0x04e4:
            boolean r2 = r2.left
            if (r2 == 0) goto L_0x04fd
            if (r1 == 0) goto L_0x04fd
            org.telegram.tgnet.TLRPC$Dialog r2 = r8.proxyDialog
            if (r2 == 0) goto L_0x04f6
            long r2 = r2.id
            long r4 = r1.id
            int r6 = (r2 > r4 ? 1 : (r2 == r4 ? 0 : -1))
            if (r6 == 0) goto L_0x04fd
        L_0x04f6:
            long r1 = r1.id
            r3 = 0
            r8.deleteDialog(r1, r3)
            goto L_0x04fe
        L_0x04fd:
            r3 = 0
        L_0x04fe:
            r1 = r19
            r1 = r1 | 8192(0x2000, float:1.14794E-41)
            int r0 = r0.channel_id
            r2 = 1
            r8.loadFullChat(r0, r3, r2)
            goto L_0x086f
        L_0x050a:
            r1 = r19
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateChatDefaultBannedRights
            if (r2 == 0) goto L_0x0533
            org.telegram.tgnet.TLRPC$TL_updateChatDefaultBannedRights r0 = (org.telegram.tgnet.TLRPC$TL_updateChatDefaultBannedRights) r0
            org.telegram.tgnet.TLRPC$Peer r2 = r0.peer
            int r3 = r2.channel_id
            if (r3 == 0) goto L_0x0519
            goto L_0x051b
        L_0x0519:
            int r3 = r2.chat_id
        L_0x051b:
            java.lang.Integer r2 = java.lang.Integer.valueOf(r3)
            org.telegram.tgnet.TLRPC$Chat r2 = r8.getChat(r2)
            if (r2 == 0) goto L_0x086f
            org.telegram.tgnet.TLRPC$TL_chatBannedRights r0 = r0.default_banned_rights
            r2.default_banned_rights = r0
            org.telegram.messenger.-$$Lambda$MessagesController$yCF8yeHNHnxQYFCkEnaYdVh1F6U r0 = new org.telegram.messenger.-$$Lambda$MessagesController$yCF8yeHNHnxQYFCkEnaYdVh1F6U
            r0.<init>(r2)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r0)
            goto L_0x086f
        L_0x0533:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateStickerSets
            if (r2 == 0) goto L_0x0544
            org.telegram.tgnet.TLRPC$TL_updateStickerSets r0 = (org.telegram.tgnet.TLRPC$TL_updateStickerSets) r0
            org.telegram.messenger.MediaDataController r0 = r39.getMediaDataController()
            r2 = 0
            r3 = 1
            r0.loadStickers(r2, r2, r3)
            goto L_0x086f
        L_0x0544:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateStickerSetsOrder
            if (r2 == 0) goto L_0x0557
            org.telegram.tgnet.TLRPC$TL_updateStickerSetsOrder r0 = (org.telegram.tgnet.TLRPC$TL_updateStickerSetsOrder) r0
            org.telegram.messenger.MediaDataController r2 = r39.getMediaDataController()
            boolean r3 = r0.masks
            java.util.ArrayList<java.lang.Long> r0 = r0.order
            r2.reorderStickers(r3, r0)
            goto L_0x086f
        L_0x0557:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateFavedStickers
            if (r2 == 0) goto L_0x0567
            org.telegram.messenger.MediaDataController r0 = r39.getMediaDataController()
            r2 = 2
            r3 = 0
            r4 = 1
            r0.loadRecents(r2, r3, r3, r4)
            goto L_0x086f
        L_0x0567:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateContactsReset
            if (r2 == 0) goto L_0x0574
            org.telegram.messenger.ContactsController r0 = r39.getContactsController()
            r0.forceImportContacts()
            goto L_0x086f
        L_0x0574:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateNewStickerSet
            if (r2 == 0) goto L_0x0585
            org.telegram.tgnet.TLRPC$TL_updateNewStickerSet r0 = (org.telegram.tgnet.TLRPC$TL_updateNewStickerSet) r0
            org.telegram.messenger.MediaDataController r2 = r39.getMediaDataController()
            org.telegram.tgnet.TLRPC$TL_messages_stickerSet r0 = r0.stickerset
            r2.addNewStickerSet(r0)
            goto L_0x086f
        L_0x0585:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateSavedGifs
            if (r2 == 0) goto L_0x059c
            android.content.SharedPreferences r0 = r8.emojiPreferences
            android.content.SharedPreferences$Editor r0 = r0.edit()
            java.lang.String r2 = "lastGifLoadTime"
            r3 = 0
            android.content.SharedPreferences$Editor r0 = r0.putLong(r2, r3)
            r0.commit()
            goto L_0x086f
        L_0x059c:
            r3 = 0
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateRecentStickers
            if (r2 == 0) goto L_0x05b3
            android.content.SharedPreferences r0 = r8.emojiPreferences
            android.content.SharedPreferences$Editor r0 = r0.edit()
            java.lang.String r2 = "lastStickersLoadTime"
            android.content.SharedPreferences$Editor r0 = r0.putLong(r2, r3)
            r0.commit()
            goto L_0x086f
        L_0x05b3:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateDraftMessage
            if (r2 == 0) goto L_0x05e1
            org.telegram.tgnet.TLRPC$TL_updateDraftMessage r0 = (org.telegram.tgnet.TLRPC$TL_updateDraftMessage) r0
            org.telegram.tgnet.TLRPC$Peer r2 = r0.peer
            int r5 = r2.user_id
            if (r5 == 0) goto L_0x05c3
            long r5 = (long) r5
        L_0x05c0:
            r24 = r5
            goto L_0x05ce
        L_0x05c3:
            int r5 = r2.channel_id
            if (r5 == 0) goto L_0x05c9
            int r2 = -r5
            goto L_0x05cc
        L_0x05c9:
            int r2 = r2.chat_id
            int r2 = -r2
        L_0x05cc:
            long r5 = (long) r2
            goto L_0x05c0
        L_0x05ce:
            org.telegram.messenger.MediaDataController r23 = r39.getMediaDataController()
            org.telegram.tgnet.TLRPC$DraftMessage r0 = r0.draft
            r27 = 0
            r28 = 1
            r26 = r0
            r23.saveDraft(r24, r26, r27, r28)
            r19 = r1
            goto L_0x0292
        L_0x05e1:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateReadFeaturedStickers
            if (r2 == 0) goto L_0x05ef
            org.telegram.messenger.MediaDataController r0 = r39.getMediaDataController()
            r2 = 0
            r0.markFaturedStickersAsRead(r2)
            goto L_0x086f
        L_0x05ef:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updatePhoneCall
            if (r2 == 0) goto L_0x074b
            org.telegram.tgnet.TLRPC$TL_updatePhoneCall r0 = (org.telegram.tgnet.TLRPC$TL_updatePhoneCall) r0
            org.telegram.tgnet.TLRPC$PhoneCall r0 = r0.phone_call
            org.telegram.messenger.voip.VoIPService r2 = org.telegram.messenger.voip.VoIPService.getSharedInstance()
            boolean r5 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r5 == 0) goto L_0x0629
            java.lang.StringBuilder r5 = new java.lang.StringBuilder
            r5.<init>()
            java.lang.String r6 = "Received call in update: "
            r5.append(r6)
            r5.append(r0)
            java.lang.String r5 = r5.toString()
            org.telegram.messenger.FileLog.d(r5)
            java.lang.StringBuilder r5 = new java.lang.StringBuilder
            r5.<init>()
            java.lang.String r6 = "call id "
            r5.append(r6)
            long r6 = r0.id
            r5.append(r6)
            java.lang.String r5 = r5.toString()
            org.telegram.messenger.FileLog.d(r5)
        L_0x0629:
            boolean r5 = r0 instanceof org.telegram.tgnet.TLRPC$TL_phoneCallRequested
            if (r5 == 0) goto L_0x0727
            int r5 = r0.date
            int r6 = r8.callRingTimeout
            int r6 = r6 / 1000
            int r5 = r5 + r6
            org.telegram.tgnet.ConnectionsManager r6 = r39.getConnectionsManager()
            int r6 = r6.getCurrentTime()
            if (r5 >= r6) goto L_0x0649
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x086f
            java.lang.String r0 = "ignoring too old call"
            org.telegram.messenger.FileLog.d(r0)
            goto L_0x086f
        L_0x0649:
            int r5 = android.os.Build.VERSION.SDK_INT
            r6 = 21
            if (r5 < r6) goto L_0x0666
            android.content.Context r5 = org.telegram.messenger.ApplicationLoader.applicationContext
            androidx.core.app.NotificationManagerCompat r5 = androidx.core.app.NotificationManagerCompat.from(r5)
            boolean r5 = r5.areNotificationsEnabled()
            if (r5 != 0) goto L_0x0666
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x086f
            java.lang.String r0 = "Ignoring incoming call because notifications are disabled in system"
            org.telegram.messenger.FileLog.d(r0)
            goto L_0x086f
        L_0x0666:
            android.content.Context r5 = org.telegram.messenger.ApplicationLoader.applicationContext
            java.lang.String r6 = "phone"
            java.lang.Object r5 = r5.getSystemService(r6)
            android.telephony.TelephonyManager r5 = (android.telephony.TelephonyManager) r5
            if (r2 != 0) goto L_0x06df
            org.telegram.tgnet.TLRPC$PhoneCall r2 = org.telegram.messenger.voip.VoIPService.callIShouldHavePutIntoIntent
            if (r2 != 0) goto L_0x06df
            int r2 = r5.getCallState()
            if (r2 == 0) goto L_0x067d
            goto L_0x06df
        L_0x067d:
            boolean r2 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r2 == 0) goto L_0x0697
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            java.lang.String r5 = "Starting service for call "
            r2.append(r5)
            long r5 = r0.id
            r2.append(r5)
            java.lang.String r2 = r2.toString()
            org.telegram.messenger.FileLog.d(r2)
        L_0x0697:
            org.telegram.messenger.voip.VoIPService.callIShouldHavePutIntoIntent = r0
            android.content.Intent r2 = new android.content.Intent
            android.content.Context r5 = org.telegram.messenger.ApplicationLoader.applicationContext
            java.lang.Class<org.telegram.messenger.voip.VoIPService> r6 = org.telegram.messenger.voip.VoIPService.class
            r2.<init>(r5, r6)
            java.lang.String r5 = "is_outgoing"
            r6 = 0
            r2.putExtra(r5, r6)
            int r5 = r0.participant_id
            org.telegram.messenger.UserConfig r6 = r39.getUserConfig()
            int r6 = r6.getClientUserId()
            if (r5 != r6) goto L_0x06b7
            int r0 = r0.admin_id
            goto L_0x06b9
        L_0x06b7:
            int r0 = r0.participant_id
        L_0x06b9:
            java.lang.String r5 = "user_id"
            r2.putExtra(r5, r0)
            int r0 = r8.currentAccount
            java.lang.String r5 = "account"
            r2.putExtra(r5, r0)
            int r0 = android.os.Build.VERSION.SDK_INT     // Catch:{ all -> 0x06d9 }
            r5 = 26
            if (r0 < r5) goto L_0x06d2
            android.content.Context r0 = org.telegram.messenger.ApplicationLoader.applicationContext     // Catch:{ all -> 0x06d9 }
            r0.startForegroundService(r2)     // Catch:{ all -> 0x06d9 }
            goto L_0x086f
        L_0x06d2:
            android.content.Context r0 = org.telegram.messenger.ApplicationLoader.applicationContext     // Catch:{ all -> 0x06d9 }
            r0.startService(r2)     // Catch:{ all -> 0x06d9 }
            goto L_0x086f
        L_0x06d9:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
            goto L_0x086f
        L_0x06df:
            boolean r2 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r2 == 0) goto L_0x06fe
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            java.lang.String r5 = "Auto-declining call "
            r2.append(r5)
            long r5 = r0.id
            r2.append(r5)
            java.lang.String r5 = " because there's already active one"
            r2.append(r5)
            java.lang.String r2 = r2.toString()
            org.telegram.messenger.FileLog.d(r2)
        L_0x06fe:
            org.telegram.tgnet.TLRPC$TL_phone_discardCall r2 = new org.telegram.tgnet.TLRPC$TL_phone_discardCall
            r2.<init>()
            org.telegram.tgnet.TLRPC$TL_inputPhoneCall r5 = new org.telegram.tgnet.TLRPC$TL_inputPhoneCall
            r5.<init>()
            r2.peer = r5
            long r6 = r0.access_hash
            r5.access_hash = r6
            long r6 = r0.id
            r5.id = r6
            org.telegram.tgnet.TLRPC$TL_phoneCallDiscardReasonBusy r0 = new org.telegram.tgnet.TLRPC$TL_phoneCallDiscardReasonBusy
            r0.<init>()
            r2.reason = r0
            org.telegram.tgnet.ConnectionsManager r0 = r39.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$-s3pjcRqF7jLVnKVdOo2cxpY8LA r5 = new org.telegram.messenger.-$$Lambda$MessagesController$-s3pjcRqF7jLVnKVdOo2cxpY8LA
            r5.<init>()
            r0.sendRequest(r2, r5)
            goto L_0x086f
        L_0x0727:
            if (r2 == 0) goto L_0x0730
            if (r0 == 0) goto L_0x0730
            r2.onCallUpdated(r0)
            goto L_0x086f
        L_0x0730:
            org.telegram.tgnet.TLRPC$PhoneCall r2 = org.telegram.messenger.voip.VoIPService.callIShouldHavePutIntoIntent
            if (r2 == 0) goto L_0x086f
            boolean r2 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r2 == 0) goto L_0x073d
            java.lang.String r2 = "Updated the call while the service is starting"
            org.telegram.messenger.FileLog.d(r2)
        L_0x073d:
            long r5 = r0.id
            org.telegram.tgnet.TLRPC$PhoneCall r2 = org.telegram.messenger.voip.VoIPService.callIShouldHavePutIntoIntent
            long r3 = r2.id
            int r2 = (r5 > r3 ? 1 : (r5 == r3 ? 0 : -1))
            if (r2 != 0) goto L_0x086f
            org.telegram.messenger.voip.VoIPService.callIShouldHavePutIntoIntent = r0
            goto L_0x086f
        L_0x074b:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateDialogUnreadMark
            if (r2 == 0) goto L_0x07af
            org.telegram.tgnet.TLRPC$TL_updateDialogUnreadMark r0 = (org.telegram.tgnet.TLRPC$TL_updateDialogUnreadMark) r0
            org.telegram.tgnet.TLRPC$DialogPeer r2 = r0.peer
            boolean r3 = r2 instanceof org.telegram.tgnet.TLRPC$TL_dialogPeer
            if (r3 == 0) goto L_0x076d
            org.telegram.tgnet.TLRPC$TL_dialogPeer r2 = (org.telegram.tgnet.TLRPC$TL_dialogPeer) r2
            org.telegram.tgnet.TLRPC$Peer r2 = r2.peer
            int r3 = r2.user_id
            if (r3 == 0) goto L_0x0762
            long r2 = (long) r3
        L_0x0760:
            r4 = r2
            goto L_0x076f
        L_0x0762:
            int r3 = r2.chat_id
            if (r3 == 0) goto L_0x0768
            int r2 = -r3
            goto L_0x076b
        L_0x0768:
            int r2 = r2.channel_id
            int r2 = -r2
        L_0x076b:
            long r2 = (long) r2
            goto L_0x0760
        L_0x076d:
            r4 = 0
        L_0x076f:
            org.telegram.messenger.MessagesStorage r2 = r39.getMessagesStorage()
            boolean r3 = r0.unread
            r2.setDialogUnread(r4, r3)
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r2 = r8.dialogs_dict
            java.lang.Object r2 = r2.get(r4)
            org.telegram.tgnet.TLRPC$Dialog r2 = (org.telegram.tgnet.TLRPC$Dialog) r2
            if (r2 == 0) goto L_0x086f
            boolean r3 = r2.unread_mark
            boolean r0 = r0.unread
            if (r3 == r0) goto L_0x086f
            r2.unread_mark = r0
            int r0 = r2.unread_count
            if (r0 != 0) goto L_0x07a5
            boolean r0 = r8.isDialogMuted(r4)
            if (r0 != 0) goto L_0x07a5
            boolean r0 = r2.unread_mark
            if (r0 == 0) goto L_0x079f
            int r0 = r8.unreadUnmutedDialogs
            r2 = 1
            int r0 = r0 + r2
            r8.unreadUnmutedDialogs = r0
            goto L_0x07a5
        L_0x079f:
            r2 = 1
            int r0 = r8.unreadUnmutedDialogs
            int r0 = r0 - r2
            r8.unreadUnmutedDialogs = r0
        L_0x07a5:
            r0 = r1 | 256(0x100, float:3.59E-43)
            int r1 = DIALOG_FILTER_FLAG_EXCLUDE_READ
            r22 = r22 | r1
            r19 = r0
            goto L_0x0871
        L_0x07af:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateMessagePoll
            if (r2 == 0) goto L_0x07d6
            org.telegram.tgnet.TLRPC$TL_updateMessagePoll r0 = (org.telegram.tgnet.TLRPC$TL_updateMessagePoll) r0
            org.telegram.messenger.NotificationCenter r2 = r39.getNotificationCenter()
            int r3 = org.telegram.messenger.NotificationCenter.didUpdatePollResults
            r4 = 3
            java.lang.Object[] r5 = new java.lang.Object[r4]
            long r6 = r0.poll_id
            java.lang.Long r4 = java.lang.Long.valueOf(r6)
            r6 = 0
            r5[r6] = r4
            org.telegram.tgnet.TLRPC$TL_poll r4 = r0.poll
            r6 = 1
            r5[r6] = r4
            org.telegram.tgnet.TLRPC$PollResults r0 = r0.results
            r4 = 2
            r5[r4] = r0
            r2.postNotificationName(r3, r5)
            goto L_0x086f
        L_0x07d6:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updatePeerSettings
            if (r2 == 0) goto L_0x07f9
            org.telegram.tgnet.TLRPC$TL_updatePeerSettings r0 = (org.telegram.tgnet.TLRPC$TL_updatePeerSettings) r0
            org.telegram.tgnet.TLRPC$Peer r2 = r0.peer
            boolean r3 = r2 instanceof org.telegram.tgnet.TLRPC$TL_peerUser
            if (r3 == 0) goto L_0x07e6
            int r2 = r2.user_id
        L_0x07e4:
            long r2 = (long) r2
            goto L_0x07f1
        L_0x07e6:
            boolean r3 = r2 instanceof org.telegram.tgnet.TLRPC$TL_peerChat
            if (r3 == 0) goto L_0x07ed
            int r2 = r2.chat_id
            goto L_0x07ef
        L_0x07ed:
            int r2 = r2.channel_id
        L_0x07ef:
            int r2 = -r2
            goto L_0x07e4
        L_0x07f1:
            org.telegram.tgnet.TLRPC$TL_peerSettings r0 = r0.settings
            r4 = 1
            r8.savePeerSettings(r2, r0, r4)
            goto L_0x086f
        L_0x07f9:
            r4 = 1
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updatePeerLocated
            if (r2 == 0) goto L_0x080d
            org.telegram.messenger.NotificationCenter r2 = r39.getNotificationCenter()
            int r3 = org.telegram.messenger.NotificationCenter.newPeopleNearbyAvailable
            java.lang.Object[] r5 = new java.lang.Object[r4]
            r4 = 0
            r5[r4] = r0
            r2.postNotificationName(r3, r5)
            goto L_0x086f
        L_0x080d:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateMessageReactions
            if (r2 == 0) goto L_0x0846
            org.telegram.tgnet.TLRPC$TL_updateMessageReactions r0 = (org.telegram.tgnet.TLRPC$TL_updateMessageReactions) r0
            org.telegram.tgnet.TLRPC$Peer r2 = r0.peer
            int r3 = r2.chat_id
            if (r3 == 0) goto L_0x081c
        L_0x0819:
            int r2 = -r3
        L_0x081a:
            long r2 = (long) r2
            goto L_0x0824
        L_0x081c:
            int r3 = r2.channel_id
            if (r3 == 0) goto L_0x0821
            goto L_0x0819
        L_0x0821:
            int r2 = r2.user_id
            goto L_0x081a
        L_0x0824:
            org.telegram.messenger.NotificationCenter r4 = r39.getNotificationCenter()
            int r5 = org.telegram.messenger.NotificationCenter.didUpdateReactions
            r6 = 3
            java.lang.Object[] r7 = new java.lang.Object[r6]
            java.lang.Long r2 = java.lang.Long.valueOf(r2)
            r3 = 0
            r7[r3] = r2
            int r2 = r0.msg_id
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)
            r3 = 1
            r7[r3] = r2
            org.telegram.tgnet.TLRPC$TL_messageReactions r0 = r0.reactions
            r2 = 2
            r7[r2] = r0
            r4.postNotificationName(r5, r7)
            goto L_0x086f
        L_0x0846:
            r3 = 1
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateTheme
            if (r2 == 0) goto L_0x0858
            org.telegram.tgnet.TLRPC$TL_updateTheme r0 = (org.telegram.tgnet.TLRPC$TL_updateTheme) r0
            org.telegram.tgnet.TLRPC$Theme r0 = r0.theme
            org.telegram.tgnet.TLRPC$TL_theme r0 = (org.telegram.tgnet.TLRPC$TL_theme) r0
            int r2 = r8.currentAccount
            r4 = 0
            org.telegram.ui.ActionBar.Theme.setThemeUploadInfo(r4, r4, r0, r2, r3)
            goto L_0x086f
        L_0x0858:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateDialogFilter
            if (r2 == 0) goto L_0x0860
            r8.loadRemoteFilters(r3)
            goto L_0x086f
        L_0x0860:
            boolean r2 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateDialogFilterOrder
            if (r2 == 0) goto L_0x0868
            r8.loadRemoteFilters(r3)
            goto L_0x086f
        L_0x0868:
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC$TL_updateDialogFilters
            if (r0 == 0) goto L_0x086f
            r8.loadRemoteFilters(r3)
        L_0x086f:
            r19 = r1
        L_0x0871:
            int r7 = r17 + 1
            r15 = r50
            r5 = r9
            r6 = r16
            r4 = r32
            r3 = 0
            r9 = r41
            goto L_0x002a
        L_0x087f:
            r32 = r4
            r9 = r5
            r1 = r19
            if (r21 == 0) goto L_0x0896
            r21.commit()
            org.telegram.messenger.NotificationCenter r0 = r39.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.notificationsSettingsUpdated
            r3 = 0
            java.lang.Object[] r4 = new java.lang.Object[r3]
            r0.postNotificationName(r2, r4)
            goto L_0x0897
        L_0x0896:
            r3 = 0
        L_0x0897:
            org.telegram.messenger.MessagesStorage r0 = r39.getMessagesStorage()
            r2 = r32
            r4 = 1
            r0.updateUsers(r2, r4, r4, r4)
            org.telegram.messenger.MessagesStorage r0 = r39.getMessagesStorage()
            r0.updateUsers(r9, r3, r4, r4)
            goto L_0x08b0
        L_0x08a9:
            r4 = 1
            r1 = r40
            r22 = 0
            r23 = 0
        L_0x08b0:
            if (r10 == 0) goto L_0x098e
            org.telegram.messenger.NotificationCenter r0 = r39.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.didReceivedWebpagesInUpdates
            java.lang.Object[] r5 = new java.lang.Object[r4]
            r5[r3] = r10
            r0.postNotificationName(r2, r5)
            r2 = 2
            r3 = 0
        L_0x08c1:
            if (r3 >= r2) goto L_0x098e
            if (r3 != r4) goto L_0x08c8
            android.util.LongSparseArray<java.util.ArrayList<org.telegram.messenger.MessageObject>> r0 = r8.reloadingScheduledWebpagesPending
            goto L_0x08ca
        L_0x08c8:
            android.util.LongSparseArray<java.util.ArrayList<org.telegram.messenger.MessageObject>> r0 = r8.reloadingWebpagesPending
        L_0x08ca:
            int r2 = r42.size()
            r4 = 0
        L_0x08cf:
            if (r4 >= r2) goto L_0x0986
            long r5 = r10.keyAt(r4)
            java.lang.Object r7 = r0.get(r5)
            java.util.ArrayList r7 = (java.util.ArrayList) r7
            r0.remove(r5)
            if (r7 == 0) goto L_0x097c
            java.lang.Object r5 = r10.valueAt(r4)
            org.telegram.tgnet.TLRPC$WebPage r5 = (org.telegram.tgnet.TLRPC$WebPage) r5
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            boolean r9 = r5 instanceof org.telegram.tgnet.TLRPC$TL_webPage
            if (r9 != 0) goto L_0x08fe
            boolean r9 = r5 instanceof org.telegram.tgnet.TLRPC$TL_webPageEmpty
            if (r9 == 0) goto L_0x08f4
            goto L_0x08fe
        L_0x08f4:
            long r9 = r5.id
            r0.put(r9, r7)
            r19 = r0
            r15 = 0
            goto L_0x0940
        L_0x08fe:
            int r9 = r7.size()
            r10 = 0
            r15 = 0
        L_0x0905:
            if (r10 >= r9) goto L_0x093e
            java.lang.Object r17 = r7.get(r10)
            r19 = r0
            r0 = r17
            org.telegram.messenger.MessageObject r0 = (org.telegram.messenger.MessageObject) r0
            org.telegram.tgnet.TLRPC$Message r0 = r0.messageOwner
            org.telegram.tgnet.TLRPC$MessageMedia r0 = r0.media
            r0.webpage = r5
            if (r10 != 0) goto L_0x092e
            java.lang.Object r0 = r7.get(r10)
            org.telegram.messenger.MessageObject r0 = (org.telegram.messenger.MessageObject) r0
            long r15 = r0.getDialogId()
            java.lang.Object r0 = r7.get(r10)
            org.telegram.messenger.MessageObject r0 = (org.telegram.messenger.MessageObject) r0
            org.telegram.tgnet.TLRPC$Message r0 = r0.messageOwner
            org.telegram.messenger.ImageLoader.saveMessageThumbs(r0)
        L_0x092e:
            java.lang.Object r0 = r7.get(r10)
            org.telegram.messenger.MessageObject r0 = (org.telegram.messenger.MessageObject) r0
            org.telegram.tgnet.TLRPC$Message r0 = r0.messageOwner
            r6.add(r0)
            int r10 = r10 + 1
            r0 = r19
            goto L_0x0905
        L_0x093e:
            r19 = r0
        L_0x0940:
            boolean r0 = r6.isEmpty()
            if (r0 != 0) goto L_0x097e
            org.telegram.messenger.MessagesStorage r32 = r39.getMessagesStorage()
            r34 = 1
            r35 = 1
            r36 = 0
            org.telegram.messenger.DownloadController r0 = r39.getDownloadController()
            int r37 = r0.getAutodownloadMask()
            r5 = 1
            if (r3 != r5) goto L_0x095e
            r38 = 1
            goto L_0x0960
        L_0x095e:
            r38 = 0
        L_0x0960:
            r33 = r6
            r32.putMessages((java.util.ArrayList<org.telegram.tgnet.TLRPC$Message>) r33, (boolean) r34, (boolean) r35, (boolean) r36, (int) r37, (boolean) r38)
            org.telegram.messenger.NotificationCenter r0 = r39.getNotificationCenter()
            int r5 = org.telegram.messenger.NotificationCenter.replaceMessagesObjects
            r6 = 2
            java.lang.Object[] r9 = new java.lang.Object[r6]
            java.lang.Long r6 = java.lang.Long.valueOf(r15)
            r10 = 0
            r9[r10] = r6
            r6 = 1
            r9[r6] = r7
            r0.postNotificationName(r5, r9)
            goto L_0x097e
        L_0x097c:
            r19 = r0
        L_0x097e:
            int r4 = r4 + 1
            r10 = r42
            r0 = r19
            goto L_0x08cf
        L_0x0986:
            int r3 = r3 + 1
            r10 = r42
            r2 = 2
            r4 = 1
            goto L_0x08c1
        L_0x098e:
            if (r22 == 0) goto L_0x09a8
            r3 = 0
        L_0x0991:
            org.telegram.messenger.MessagesController$DialogFilter[] r0 = r8.selectedDialogFilter
            int r2 = r0.length
            if (r3 >= r2) goto L_0x09a8
            r2 = r0[r3]
            if (r2 == 0) goto L_0x09a5
            r0 = r0[r3]
            int r0 = r0.flags
            r0 = r0 & r22
            if (r0 == 0) goto L_0x09a5
            r23 = 1
            goto L_0x09a8
        L_0x09a5:
            int r3 = r3 + 1
            goto L_0x0991
        L_0x09a8:
            if (r11 == 0) goto L_0x09d2
            int r0 = r43.size()
            r2 = 0
            r3 = 0
        L_0x09b0:
            if (r3 >= r0) goto L_0x09c7
            long r4 = r11.keyAt(r3)
            java.lang.Object r6 = r11.valueAt(r3)
            java.util.ArrayList r6 = (java.util.ArrayList) r6
            r7 = 0
            boolean r4 = r8.updateInterfaceWithMessages(r4, r6, r7)
            if (r4 == 0) goto L_0x09c4
            r2 = 1
        L_0x09c4:
            int r3 = r3 + 1
            goto L_0x09b0
        L_0x09c7:
            if (r2 != 0) goto L_0x09d0
            if (r23 == 0) goto L_0x09d0
            r2 = 0
            r8.sortDialogs(r2)
            goto L_0x09d8
        L_0x09d0:
            r2 = 0
            goto L_0x09d8
        L_0x09d2:
            r2 = 0
            if (r23 == 0) goto L_0x09da
            r8.sortDialogs(r2)
        L_0x09d8:
            r3 = 1
            goto L_0x09db
        L_0x09da:
            r3 = 0
        L_0x09db:
            if (r12 == 0) goto L_0x09f5
            int r0 = r44.size()
            r2 = 0
        L_0x09e2:
            if (r2 >= r0) goto L_0x09f5
            long r4 = r12.keyAt(r2)
            java.lang.Object r6 = r12.valueAt(r2)
            java.util.ArrayList r6 = (java.util.ArrayList) r6
            r7 = 1
            r8.updateInterfaceWithMessages(r4, r6, r7)
            int r2 = r2 + 1
            goto L_0x09e2
        L_0x09f5:
            if (r13 == 0) goto L_0x0aa2
            int r0 = r45.size()
            r2 = 0
        L_0x09fc:
            if (r2 >= r0) goto L_0x0aa2
            long r4 = r13.keyAt(r2)
            java.lang.Object r6 = r13.valueAt(r2)
            java.util.ArrayList r6 = (java.util.ArrayList) r6
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r7 = r8.dialogMessage
            java.lang.Object r7 = r7.get(r4)
            org.telegram.messenger.MessageObject r7 = (org.telegram.messenger.MessageObject) r7
            if (r7 == 0) goto L_0x0a42
            int r9 = r6.size()
            r10 = 0
        L_0x0a17:
            if (r10 >= r9) goto L_0x0a42
            java.lang.Object r11 = r6.get(r10)
            org.telegram.messenger.MessageObject r11 = (org.telegram.messenger.MessageObject) r11
            int r12 = r7.getId()
            int r15 = r11.getId()
            if (r12 != r15) goto L_0x0a44
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r3 = r8.dialogMessage
            r3.put(r4, r11)
            org.telegram.tgnet.TLRPC$Message r3 = r11.messageOwner
            org.telegram.tgnet.TLRPC$Peer r3 = r3.to_id
            if (r3 == 0) goto L_0x0a41
            int r3 = r3.channel_id
            if (r3 != 0) goto L_0x0a41
            android.util.SparseArray<org.telegram.messenger.MessageObject> r3 = r8.dialogMessagesByIds
            int r7 = r11.getId()
            r3.put(r7, r11)
        L_0x0a41:
            r3 = 1
        L_0x0a42:
            r11 = 0
            goto L_0x0a72
        L_0x0a44:
            long r15 = r7.getDialogId()
            long r21 = r11.getDialogId()
            int r12 = (r15 > r21 ? 1 : (r15 == r21 ? 0 : -1))
            if (r12 != 0) goto L_0x0a6e
            org.telegram.tgnet.TLRPC$Message r12 = r7.messageOwner
            org.telegram.tgnet.TLRPC$MessageAction r12 = r12.action
            boolean r12 = r12 instanceof org.telegram.tgnet.TLRPC$TL_messageActionPinMessage
            if (r12 == 0) goto L_0x0a6e
            org.telegram.messenger.MessageObject r12 = r7.replyMessageObject
            if (r12 == 0) goto L_0x0a6e
            int r12 = r12.getId()
            int r15 = r11.getId()
            if (r12 != r15) goto L_0x0a6e
            r7.replyMessageObject = r11
            r11 = 0
            r7.generatePinMessageText(r11, r11)
            r3 = 1
            goto L_0x0a72
        L_0x0a6e:
            r11 = 0
            int r10 = r10 + 1
            goto L_0x0a17
        L_0x0a72:
            org.telegram.messenger.MediaDataController r21 = r39.getMediaDataController()
            r25 = 0
            r26 = 0
            r22 = r6
            r23 = r4
            r21.loadReplyMessagesForMessages(r22, r23, r25, r26)
            org.telegram.messenger.NotificationCenter r7 = r39.getNotificationCenter()
            int r9 = org.telegram.messenger.NotificationCenter.replaceMessagesObjects
            r10 = 3
            java.lang.Object[] r12 = new java.lang.Object[r10]
            java.lang.Long r4 = java.lang.Long.valueOf(r4)
            r5 = 0
            r12[r5] = r4
            r4 = 1
            r12[r4] = r6
            java.lang.Boolean r4 = java.lang.Boolean.valueOf(r5)
            r6 = 2
            r12[r6] = r4
            r7.postNotificationName(r9, r12)
            int r2 = r2 + 1
            goto L_0x09fc
        L_0x0aa2:
            r5 = 0
            if (r3 == 0) goto L_0x0ab0
            org.telegram.messenger.NotificationCenter r0 = r39.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.dialogsNeedReload
            java.lang.Object[] r3 = new java.lang.Object[r5]
            r0.postNotificationName(r2, r3)
        L_0x0ab0:
            if (r46 == 0) goto L_0x0ab4
            r1 = r1 | 64
        L_0x0ab4:
            if (r47 == 0) goto L_0x0aba
            r0 = r1 | 1
            r1 = r0 | 128(0x80, float:1.794E-43)
        L_0x0aba:
            if (r14 == 0) goto L_0x0ad3
            int r0 = r48.size()
            r3 = 0
        L_0x0ac1:
            if (r3 >= r0) goto L_0x0ad3
            java.lang.Object r2 = r14.get(r3)
            org.telegram.tgnet.TLRPC$ChatParticipants r2 = (org.telegram.tgnet.TLRPC$ChatParticipants) r2
            org.telegram.messenger.MessagesStorage r4 = r39.getMessagesStorage()
            r4.updateChatParticipants(r2)
            int r3 = r3 + 1
            goto L_0x0ac1
        L_0x0ad3:
            if (r49 == 0) goto L_0x0ae5
            org.telegram.messenger.NotificationCenter r0 = r39.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.didUpdateMessagesViews
            r3 = 1
            java.lang.Object[] r4 = new java.lang.Object[r3]
            r5 = 0
            r4[r5] = r49
            r0.postNotificationName(r2, r4)
            goto L_0x0ae7
        L_0x0ae5:
            r3 = 1
            r5 = 0
        L_0x0ae7:
            if (r1 == 0) goto L_0x0afa
            org.telegram.messenger.NotificationCenter r0 = r39.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.updateInterfaces
            java.lang.Object[] r3 = new java.lang.Object[r3]
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            r3[r5] = r1
            r0.postNotificationName(r2, r3)
        L_0x0afa:
            r1 = r50
            if (r1 == 0) goto L_0x0b05
            org.telegram.messenger.ImageLoader r0 = org.telegram.messenger.ImageLoader.getInstance()
            r0.putThumbsToCache(r1)
        L_0x0b05:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.lambda$processUpdateArray$278$MessagesController(int, java.util.ArrayList, android.util.LongSparseArray, android.util.LongSparseArray, android.util.LongSparseArray, android.util.LongSparseArray, boolean, java.util.ArrayList, java.util.ArrayList, android.util.SparseArray, java.util.ArrayList):void");
    }

    public /* synthetic */ void lambda$null$274$MessagesController(TLRPC$User tLRPC$User) {
        getContactsController().addContactToPhoneBook(tLRPC$User, true);
    }

    public /* synthetic */ void lambda$null$275$MessagesController(TLRPC$TL_updateChannel tLRPC$TL_updateChannel) {
        getChannelDifference(tLRPC$TL_updateChannel.channel_id, 1, 0, (TLRPC$InputChannel) null);
    }

    public /* synthetic */ void lambda$null$276$MessagesController(TLRPC$Chat tLRPC$Chat) {
        getNotificationCenter().postNotificationName(NotificationCenter.channelRightsUpdated, tLRPC$Chat);
    }

    public /* synthetic */ void lambda$null$277$MessagesController(TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            processUpdates((TLRPC$Updates) tLObject, false);
        }
    }

    public /* synthetic */ void lambda$processUpdateArray$280$MessagesController(SparseLongArray sparseLongArray, SparseLongArray sparseLongArray2, SparseIntArray sparseIntArray, ArrayList arrayList, SparseArray sparseArray, SparseArray sparseArray2, SparseIntArray sparseIntArray2) {
        AndroidUtilities.runOnUIThread(new Runnable(sparseLongArray, sparseLongArray2, sparseIntArray, arrayList, sparseArray, sparseArray2, sparseIntArray2) {
            private final /* synthetic */ SparseLongArray f$1;
            private final /* synthetic */ SparseLongArray f$2;
            private final /* synthetic */ SparseIntArray f$3;
            private final /* synthetic */ ArrayList f$4;
            private final /* synthetic */ SparseArray f$5;
            private final /* synthetic */ SparseArray f$6;
            private final /* synthetic */ SparseIntArray f$7;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
                this.f$7 = r8;
            }

            public final void run() {
                MessagesController.this.lambda$null$279$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7);
            }
        });
    }

    public /* synthetic */ void lambda$null$279$MessagesController(SparseLongArray sparseLongArray, SparseLongArray sparseLongArray2, SparseIntArray sparseIntArray, ArrayList arrayList, SparseArray sparseArray, SparseArray sparseArray2, SparseIntArray sparseIntArray2) {
        int i;
        MessageObject messageObject;
        int i2;
        MessageObject messageObject2;
        int i3;
        MessageObject messageObject3;
        SparseLongArray sparseLongArray3 = sparseLongArray;
        SparseLongArray sparseLongArray4 = sparseLongArray2;
        SparseIntArray sparseIntArray3 = sparseIntArray;
        SparseArray sparseArray3 = sparseArray;
        SparseArray sparseArray4 = sparseArray2;
        SparseIntArray sparseIntArray4 = sparseIntArray2;
        if (sparseLongArray3 == null && sparseLongArray4 == null) {
            i = 0;
        } else {
            getNotificationCenter().postNotificationName(NotificationCenter.messagesRead, sparseLongArray3, sparseLongArray4);
            if (sparseLongArray3 != null) {
                getNotificationsController().processReadMessages(sparseLongArray, 0, 0, 0, false);
                SharedPreferences.Editor edit = this.notificationsPreferences.edit();
                int size = sparseLongArray.size();
                i = 0;
                for (int i4 = 0; i4 < size; i4++) {
                    int keyAt = sparseLongArray3.keyAt(i4);
                    int valueAt = (int) sparseLongArray3.valueAt(i4);
                    TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get((long) keyAt);
                    if (tLRPC$Dialog != null && (i3 = tLRPC$Dialog.top_message) > 0 && i3 <= valueAt && (messageObject3 = this.dialogMessage.get(tLRPC$Dialog.id)) != null && !messageObject3.isOut()) {
                        messageObject3.setIsRead();
                        i |= 256;
                    }
                    if (keyAt != getUserConfig().getClientUserId()) {
                        edit.remove("diditem" + keyAt);
                        edit.remove("diditemo" + keyAt);
                    }
                }
                edit.commit();
            } else {
                i = 0;
            }
            if (sparseLongArray4 != null) {
                int size2 = sparseLongArray2.size();
                for (int i5 = 0; i5 < size2; i5++) {
                    int keyAt2 = sparseLongArray4.keyAt(i5);
                    int valueAt2 = (int) sparseLongArray4.valueAt(i5);
                    TLRPC$Dialog tLRPC$Dialog2 = this.dialogs_dict.get((long) keyAt2);
                    if (tLRPC$Dialog2 != null && (i2 = tLRPC$Dialog2.top_message) > 0 && i2 <= valueAt2 && (messageObject2 = this.dialogMessage.get(tLRPC$Dialog2.id)) != null && messageObject2.isOut()) {
                        messageObject2.setIsRead();
                        i |= 256;
                    }
                }
            }
        }
        if (sparseIntArray3 != null) {
            int size3 = sparseIntArray.size();
            for (int i6 = 0; i6 < size3; i6++) {
                int keyAt3 = sparseIntArray3.keyAt(i6);
                int valueAt3 = sparseIntArray3.valueAt(i6);
                getNotificationCenter().postNotificationName(NotificationCenter.messagesReadEncrypted, Integer.valueOf(keyAt3), Integer.valueOf(valueAt3));
                long j = ((long) keyAt3) << 32;
                if (!(this.dialogs_dict.get(j) == null || (messageObject = this.dialogMessage.get(j)) == null || messageObject.messageOwner.date > valueAt3)) {
                    messageObject.setIsRead();
                    i |= 256;
                }
            }
        }
        if (arrayList != null) {
            getNotificationCenter().postNotificationName(NotificationCenter.messagesReadContent, arrayList);
        }
        if (sparseArray3 != null) {
            int size4 = sparseArray.size();
            for (int i7 = 0; i7 < size4; i7++) {
                int keyAt4 = sparseArray3.keyAt(i7);
                ArrayList arrayList2 = (ArrayList) sparseArray3.valueAt(i7);
                if (arrayList2 != null) {
                    getNotificationCenter().postNotificationName(NotificationCenter.messagesDeleted, arrayList2, Integer.valueOf(keyAt4), false);
                    if (keyAt4 == 0) {
                        int size5 = arrayList2.size();
                        for (int i8 = 0; i8 < size5; i8++) {
                            MessageObject messageObject4 = this.dialogMessagesByIds.get(((Integer) arrayList2.get(i8)).intValue());
                            if (messageObject4 != null) {
                                messageObject4.deleted = true;
                            }
                        }
                    } else {
                        MessageObject messageObject5 = this.dialogMessage.get((long) (-keyAt4));
                        if (messageObject5 != null) {
                            int size6 = arrayList2.size();
                            int i9 = 0;
                            while (true) {
                                if (i9 >= size6) {
                                    break;
                                } else if (messageObject5.getId() == ((Integer) arrayList2.get(i9)).intValue()) {
                                    messageObject5.deleted = true;
                                    break;
                                } else {
                                    i9++;
                                }
                            }
                        }
                    }
                }
            }
            getNotificationsController().removeDeletedMessagesFromNotifications(sparseArray3);
        }
        if (sparseArray4 != null) {
            int size7 = sparseArray2.size();
            for (int i10 = 0; i10 < size7; i10++) {
                int keyAt5 = sparseArray4.keyAt(i10);
                ArrayList arrayList3 = (ArrayList) sparseArray4.valueAt(i10);
                if (arrayList3 != null) {
                    getNotificationCenter().postNotificationName(NotificationCenter.messagesDeleted, arrayList3, Integer.valueOf(keyAt5), true);
                }
            }
        }
        if (sparseIntArray4 != null) {
            int size8 = sparseIntArray2.size();
            int i11 = 0;
            while (true) {
                if (i11 >= size8) {
                    break;
                }
                int keyAt6 = sparseIntArray4.keyAt(i11);
                int valueAt4 = sparseIntArray4.valueAt(i11);
                long j2 = (long) (-keyAt6);
                getNotificationCenter().postNotificationName(NotificationCenter.historyCleared, Long.valueOf(j2), Integer.valueOf(valueAt4));
                MessageObject messageObject6 = this.dialogMessage.get(j2);
                if (messageObject6 != null && messageObject6.getId() <= valueAt4) {
                    messageObject6.deleted = true;
                    break;
                }
                i11++;
            }
            getNotificationsController().removeDeletedHisoryFromNotifications(sparseIntArray4);
        }
        if (i != 0) {
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(i));
        }
    }

    public /* synthetic */ void lambda$processUpdateArray$281$MessagesController(ArrayList arrayList, int i) {
        getMessagesStorage().updateDialogsWithDeletedMessages(arrayList, getMessagesStorage().markMessagesAsDeleted(arrayList, false, i, true, false), false, i);
    }

    public /* synthetic */ void lambda$processUpdateArray$282$MessagesController(int i, int i2) {
        getMessagesStorage().updateDialogsWithDeletedMessages(new ArrayList(), getMessagesStorage().markMessagesAsDeleted(i, i2, false, true), false, i);
    }

    public boolean isDialogMuted(long j) {
        SharedPreferences sharedPreferences = this.notificationsPreferences;
        int i = sharedPreferences.getInt("notify2_" + j, -1);
        if (i == -1) {
            return !getNotificationsController().isGlobalNotificationsEnabled(j);
        }
        if (i == 2) {
            return true;
        }
        if (i == 3) {
            SharedPreferences sharedPreferences2 = this.notificationsPreferences;
            if (sharedPreferences2.getInt("notifyuntil_" + j, 0) >= getConnectionsManager().getCurrentTime()) {
                return true;
            }
        }
        return false;
    }

    private boolean updatePrintingUsersWithNewMessages(long j, ArrayList<MessageObject> arrayList) {
        boolean z;
        if (j > 0) {
            if (this.printingUsers.get(Long.valueOf(j)) != null) {
                this.printingUsers.remove(Long.valueOf(j));
                return true;
            }
        } else if (j < 0) {
            ArrayList arrayList2 = new ArrayList();
            Iterator<MessageObject> it = arrayList.iterator();
            while (it.hasNext()) {
                MessageObject next = it.next();
                if (!arrayList2.contains(Integer.valueOf(next.messageOwner.from_id))) {
                    arrayList2.add(Integer.valueOf(next.messageOwner.from_id));
                }
            }
            ArrayList arrayList3 = this.printingUsers.get(Long.valueOf(j));
            if (arrayList3 != null) {
                int i = 0;
                z = false;
                while (i < arrayList3.size()) {
                    if (arrayList2.contains(Integer.valueOf(((PrintingUser) arrayList3.get(i)).userId))) {
                        arrayList3.remove(i);
                        i--;
                        if (arrayList3.isEmpty()) {
                            this.printingUsers.remove(Long.valueOf(j));
                        }
                        z = true;
                    }
                    i++;
                }
            } else {
                z = false;
            }
            if (z) {
                return true;
            }
        }
        return false;
    }

    /* access modifiers changed from: protected */
    /* JADX WARNING: Removed duplicated region for block: B:132:0x02f9  */
    /* JADX WARNING: Removed duplicated region for block: B:134:0x02ff  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean updateInterfaceWithMessages(long r21, java.util.ArrayList<org.telegram.messenger.MessageObject> r23, boolean r24) {
        /*
            r20 = this;
            r0 = r20
            r7 = r21
            r9 = r23
            r10 = 0
            if (r9 == 0) goto L_0x0306
            boolean r1 = r23.isEmpty()
            if (r1 == 0) goto L_0x0011
            goto L_0x0306
        L_0x0011:
            int r1 = (int) r7
            if (r1 != 0) goto L_0x0016
            r1 = 1
            goto L_0x0017
        L_0x0016:
            r1 = 0
        L_0x0017:
            if (r24 != 0) goto L_0x00d4
            r2 = 0
            r3 = 0
            r4 = 0
            r5 = 0
            r6 = 0
        L_0x001e:
            int r13 = r23.size()
            if (r2 >= r13) goto L_0x00d0
            java.lang.Object r13 = r9.get(r2)
            org.telegram.messenger.MessageObject r13 = (org.telegram.messenger.MessageObject) r13
            if (r3 == 0) goto L_0x005a
            if (r1 != 0) goto L_0x0038
            int r14 = r13.getId()
            int r15 = r3.getId()
            if (r14 > r15) goto L_0x005a
        L_0x0038:
            if (r1 != 0) goto L_0x0046
            int r14 = r13.getId()
            if (r14 >= 0) goto L_0x0050
            int r14 = r3.getId()
            if (r14 >= 0) goto L_0x0050
        L_0x0046:
            int r14 = r13.getId()
            int r15 = r3.getId()
            if (r14 < r15) goto L_0x005a
        L_0x0050:
            org.telegram.tgnet.TLRPC$Message r14 = r13.messageOwner
            int r14 = r14.date
            org.telegram.tgnet.TLRPC$Message r15 = r3.messageOwner
            int r15 = r15.date
            if (r14 <= r15) goto L_0x0064
        L_0x005a:
            org.telegram.tgnet.TLRPC$Message r3 = r13.messageOwner
            org.telegram.tgnet.TLRPC$Peer r3 = r3.to_id
            int r3 = r3.channel_id
            if (r3 == 0) goto L_0x0063
            r4 = r3
        L_0x0063:
            r3 = r13
        L_0x0064:
            if (r5 != 0) goto L_0x006d
            boolean r14 = r13.isOut()
            if (r14 != 0) goto L_0x006d
            r5 = 1
        L_0x006d:
            boolean r14 = r13.isOut()
            if (r14 == 0) goto L_0x00bf
            boolean r14 = r13.isSending()
            if (r14 != 0) goto L_0x00bf
            boolean r14 = r13.isForwarded()
            if (r14 != 0) goto L_0x00bf
            boolean r14 = r13.isNewGif()
            if (r14 == 0) goto L_0x0095
            org.telegram.messenger.MediaDataController r14 = r20.getMediaDataController()
            org.telegram.tgnet.TLRPC$Message r15 = r13.messageOwner
            org.telegram.tgnet.TLRPC$MessageMedia r12 = r15.media
            org.telegram.tgnet.TLRPC$Document r12 = r12.document
            int r15 = r15.date
            r14.addRecentGif(r12, r15)
            goto L_0x00bf
        L_0x0095:
            boolean r12 = r13.isAnimatedEmoji()
            if (r12 != 0) goto L_0x00bf
            boolean r12 = r13.isSticker()
            if (r12 != 0) goto L_0x00a7
            boolean r12 = r13.isAnimatedSticker()
            if (r12 == 0) goto L_0x00bf
        L_0x00a7:
            org.telegram.messenger.MediaDataController r14 = r20.getMediaDataController()
            r15 = 0
            org.telegram.tgnet.TLRPC$Message r12 = r13.messageOwner
            org.telegram.tgnet.TLRPC$MessageMedia r11 = r12.media
            org.telegram.tgnet.TLRPC$Document r11 = r11.document
            int r12 = r12.date
            r19 = 0
            r16 = r13
            r17 = r11
            r18 = r12
            r14.addRecentSticker(r15, r16, r17, r18, r19)
        L_0x00bf:
            boolean r11 = r13.isOut()
            if (r11 == 0) goto L_0x00cc
            boolean r11 = r13.isSent()
            if (r11 == 0) goto L_0x00cc
            r6 = 1
        L_0x00cc:
            int r2 = r2 + 1
            goto L_0x001e
        L_0x00d0:
            r11 = r3
            r12 = r4
            r13 = r6
            goto L_0x00d7
        L_0x00d4:
            r11 = 0
            r12 = 0
            r13 = 0
        L_0x00d7:
            org.telegram.messenger.MediaDataController r1 = r20.getMediaDataController()
            r6 = 0
            r2 = r23
            r3 = r21
            r5 = r24
            r1.loadReplyMessagesForMessages(r2, r3, r5, r6)
            org.telegram.messenger.NotificationCenter r1 = r20.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.didReceiveNewMessages
            r3 = 3
            java.lang.Object[] r3 = new java.lang.Object[r3]
            java.lang.Long r4 = java.lang.Long.valueOf(r21)
            r3[r10] = r4
            r4 = 1
            r3[r4] = r9
            r4 = 2
            java.lang.Boolean r5 = java.lang.Boolean.valueOf(r24)
            r3[r4] = r5
            r1.postNotificationName(r2, r3)
            if (r11 == 0) goto L_0x0306
            if (r24 == 0) goto L_0x0107
            goto L_0x0306
        L_0x0107:
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r1 = r0.dialogs_dict
            java.lang.Object r1 = r1.get(r7)
            org.telegram.tgnet.TLRPC$TL_dialog r1 = (org.telegram.tgnet.TLRPC$TL_dialog) r1
            org.telegram.tgnet.TLRPC$Message r2 = r11.messageOwner
            org.telegram.tgnet.TLRPC$MessageAction r2 = r2.action
            boolean r2 = r2 instanceof org.telegram.tgnet.TLRPC$TL_messageActionChatMigrateTo
            r3 = 0
            if (r2 == 0) goto L_0x01cf
            if (r1 == 0) goto L_0x01ce
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r0.allDialogs
            r2.remove(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r0.dialogsServerOnly
            r2.remove(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r0.dialogsCanAddUsers
            r2.remove(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r0.dialogsChannelsOnly
            r2.remove(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r0.dialogsGroupsOnly
            r2.remove(r1)
            r2 = 0
        L_0x0135:
            org.telegram.messenger.MessagesController$DialogFilter[] r5 = r0.selectedDialogFilter
            int r6 = r5.length
            if (r2 >= r6) goto L_0x0148
            r6 = r5[r2]
            if (r6 == 0) goto L_0x0145
            r5 = r5[r2]
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r5 = r5.dialogs
            r5.remove(r1)
        L_0x0145:
            int r2 = r2 + 1
            goto L_0x0135
        L_0x0148:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r0.dialogsUsersOnly
            r2.remove(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r0.dialogsForward
            r2.remove(r1)
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r2 = r0.dialogs_dict
            long r5 = r1.id
            r2.remove(r5)
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r2 = r0.dialogs_read_inbox_max
            long r5 = r1.id
            java.lang.Long r5 = java.lang.Long.valueOf(r5)
            r2.remove(r5)
            java.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r2 = r0.dialogs_read_outbox_max
            long r5 = r1.id
            java.lang.Long r5 = java.lang.Long.valueOf(r5)
            r2.remove(r5)
            android.util.SparseIntArray r2 = r0.nextDialogsCacheOffset
            int r5 = r1.folder_id
            int r2 = r2.get(r5, r10)
            if (r2 <= 0) goto L_0x0182
            android.util.SparseIntArray r5 = r0.nextDialogsCacheOffset
            int r6 = r1.folder_id
            r9 = 1
            int r2 = r2 - r9
            r5.put(r6, r2)
        L_0x0182:
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r2 = r0.dialogMessage
            long r5 = r1.id
            r2.remove(r5)
            android.util.SparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog>> r2 = r0.dialogsByFolder
            int r5 = r1.folder_id
            java.lang.Object r2 = r2.get(r5)
            java.util.ArrayList r2 = (java.util.ArrayList) r2
            if (r2 == 0) goto L_0x0198
            r2.remove(r1)
        L_0x0198:
            android.util.SparseArray<org.telegram.messenger.MessageObject> r2 = r0.dialogMessagesByIds
            int r5 = r1.top_message
            java.lang.Object r2 = r2.get(r5)
            org.telegram.messenger.MessageObject r2 = (org.telegram.messenger.MessageObject) r2
            android.util.SparseArray<org.telegram.messenger.MessageObject> r5 = r0.dialogMessagesByIds
            int r6 = r1.top_message
            r5.remove(r6)
            if (r2 == 0) goto L_0x01b8
            org.telegram.tgnet.TLRPC$Message r2 = r2.messageOwner
            long r5 = r2.random_id
            int r2 = (r5 > r3 ? 1 : (r5 == r3 ? 0 : -1))
            if (r2 == 0) goto L_0x01b8
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r2 = r0.dialogMessagesByRandomIds
            r2.remove(r5)
        L_0x01b8:
            r1.top_message = r10
            org.telegram.messenger.NotificationsController r2 = r20.getNotificationsController()
            long r3 = r1.id
            r2.removeNotificationsForDialog(r3)
            org.telegram.messenger.NotificationCenter r1 = r20.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.needReloadRecentDialogsSearch
            java.lang.Object[] r3 = new java.lang.Object[r10]
            r1.postNotificationName(r2, r3)
        L_0x01ce:
            return r10
        L_0x01cf:
            r9 = 1
            if (r1 != 0) goto L_0x026f
            java.lang.Integer r1 = java.lang.Integer.valueOf(r12)
            org.telegram.tgnet.TLRPC$Chat r1 = r0.getChat(r1)
            if (r12 == 0) goto L_0x01de
            if (r1 == 0) goto L_0x01e6
        L_0x01de:
            if (r1 == 0) goto L_0x01e7
            boolean r2 = org.telegram.messenger.ChatObject.isNotInChat(r1)
            if (r2 == 0) goto L_0x01e7
        L_0x01e6:
            return r10
        L_0x01e7:
            boolean r2 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r2 == 0) goto L_0x021b
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            java.lang.String r5 = "not found dialog with id "
            r2.append(r5)
            r2.append(r7)
            java.lang.String r5 = " dictCount = "
            r2.append(r5)
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r5 = r0.dialogs_dict
            int r5 = r5.size()
            r2.append(r5)
            java.lang.String r5 = " allCount = "
            r2.append(r5)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r5 = r0.allDialogs
            int r5 = r5.size()
            r2.append(r5)
            java.lang.String r2 = r2.toString()
            org.telegram.messenger.FileLog.d(r2)
        L_0x021b:
            org.telegram.tgnet.TLRPC$TL_dialog r2 = new org.telegram.tgnet.TLRPC$TL_dialog
            r2.<init>()
            r2.id = r7
            int r5 = r11.getId()
            r2.top_message = r5
            org.telegram.tgnet.TLRPC$Message r5 = r11.messageOwner
            int r5 = r5.date
            r2.last_message_date = r5
            boolean r1 = org.telegram.messenger.ChatObject.isChannel(r1)
            r2.flags = r1
            android.util.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r1 = r0.dialogs_dict
            r1.put(r7, r2)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r0.allDialogs
            r1.add(r2)
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessage
            r1.put(r7, r11)
            org.telegram.tgnet.TLRPC$Message r1 = r11.messageOwner
            org.telegram.tgnet.TLRPC$Peer r1 = r1.to_id
            int r1 = r1.channel_id
            if (r1 != 0) goto L_0x0261
            android.util.SparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessagesByIds
            int r5 = r11.getId()
            r1.put(r5, r11)
            org.telegram.tgnet.TLRPC$Message r1 = r11.messageOwner
            long r5 = r1.random_id
            int r1 = (r5 > r3 ? 1 : (r5 == r3 ? 0 : -1))
            if (r1 == 0) goto L_0x0261
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessagesByRandomIds
            r1.put(r5, r11)
        L_0x0261:
            org.telegram.messenger.MessagesStorage r1 = r20.getMessagesStorage()
            org.telegram.messenger.-$$Lambda$MessagesController$eRousMverTYgTRk2ZrI6Yd4G-U4 r3 = new org.telegram.messenger.-$$Lambda$MessagesController$eRousMverTYgTRk2ZrI6Yd4G-U4
            r3.<init>(r2, r7)
            r1.getDialogFolderId(r7, r3)
            goto L_0x02f6
        L_0x026f:
            int r2 = r1.top_message
            if (r2 <= 0) goto L_0x0281
            int r2 = r11.getId()
            if (r2 <= 0) goto L_0x0281
            int r2 = r11.getId()
            int r5 = r1.top_message
            if (r2 > r5) goto L_0x02a7
        L_0x0281:
            int r2 = r1.top_message
            if (r2 >= 0) goto L_0x0293
            int r2 = r11.getId()
            if (r2 >= 0) goto L_0x0293
            int r2 = r11.getId()
            int r5 = r1.top_message
            if (r2 < r5) goto L_0x02a7
        L_0x0293:
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r2 = r0.dialogMessage
            int r2 = r2.indexOfKey(r7)
            if (r2 < 0) goto L_0x02a7
            int r2 = r1.top_message
            if (r2 < 0) goto L_0x02a7
            int r2 = r1.last_message_date
            org.telegram.tgnet.TLRPC$Message r5 = r11.messageOwner
            int r5 = r5.date
            if (r2 > r5) goto L_0x02f7
        L_0x02a7:
            android.util.SparseArray<org.telegram.messenger.MessageObject> r2 = r0.dialogMessagesByIds
            int r5 = r1.top_message
            java.lang.Object r2 = r2.get(r5)
            org.telegram.messenger.MessageObject r2 = (org.telegram.messenger.MessageObject) r2
            android.util.SparseArray<org.telegram.messenger.MessageObject> r5 = r0.dialogMessagesByIds
            int r6 = r1.top_message
            r5.remove(r6)
            if (r2 == 0) goto L_0x02c7
            org.telegram.tgnet.TLRPC$Message r2 = r2.messageOwner
            long r5 = r2.random_id
            int r2 = (r5 > r3 ? 1 : (r5 == r3 ? 0 : -1))
            if (r2 == 0) goto L_0x02c7
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r2 = r0.dialogMessagesByRandomIds
            r2.remove(r5)
        L_0x02c7:
            int r2 = r11.getId()
            r1.top_message = r2
            org.telegram.tgnet.TLRPC$Message r2 = r11.messageOwner
            int r2 = r2.date
            r1.last_message_date = r2
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessage
            r1.put(r7, r11)
            org.telegram.tgnet.TLRPC$Message r1 = r11.messageOwner
            org.telegram.tgnet.TLRPC$Peer r1 = r1.to_id
            int r1 = r1.channel_id
            if (r1 != 0) goto L_0x02f6
            android.util.SparseArray<org.telegram.messenger.MessageObject> r1 = r0.dialogMessagesByIds
            int r2 = r11.getId()
            r1.put(r2, r11)
            org.telegram.tgnet.TLRPC$Message r1 = r11.messageOwner
            long r1 = r1.random_id
            int r5 = (r1 > r3 ? 1 : (r1 == r3 ? 0 : -1))
            if (r5 == 0) goto L_0x02f6
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r3 = r0.dialogMessagesByRandomIds
            r3.put(r1, r11)
        L_0x02f6:
            r10 = 1
        L_0x02f7:
            if (r10 == 0) goto L_0x02fd
            r1 = 0
            r0.sortDialogs(r1)
        L_0x02fd:
            if (r13 == 0) goto L_0x0306
            org.telegram.messenger.MediaDataController r1 = r20.getMediaDataController()
            r1.increasePeerRaiting(r7)
        L_0x0306:
            return r10
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.updateInterfaceWithMessages(long, java.util.ArrayList, boolean):boolean");
    }

    public /* synthetic */ void lambda$updateInterfaceWithMessages$283$MessagesController(TLRPC$Dialog tLRPC$Dialog, long j, int i) {
        if (i == -1) {
            int i2 = (int) j;
            if (i2 != 0) {
                loadUnknownDialog(getInputPeer(i2), 0);
            }
        } else if (i != 0) {
            tLRPC$Dialog.folder_id = i;
            sortDialogs((SparseArray<TLRPC$Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, true);
        }
    }

    public void addDialogAction(long j, boolean z) {
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
        if (tLRPC$Dialog != null) {
            if (z) {
                this.clearingHistoryDialogs.put(j, tLRPC$Dialog);
            } else {
                this.deletingDialogs.put(j, tLRPC$Dialog);
                this.allDialogs.remove(tLRPC$Dialog);
                sortDialogs((SparseArray<TLRPC$Chat>) null);
            }
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, true);
        }
    }

    public void removeDialogAction(long j, boolean z, boolean z2) {
        TLRPC$Dialog tLRPC$Dialog = this.dialogs_dict.get(j);
        if (tLRPC$Dialog != null) {
            if (z) {
                this.clearingHistoryDialogs.remove(j);
            } else {
                this.deletingDialogs.remove(j);
                if (!z2) {
                    this.allDialogs.add(tLRPC$Dialog);
                    sortDialogs((SparseArray<TLRPC$Chat>) null);
                }
            }
            if (!z2) {
                getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, true);
            }
        }
    }

    public boolean isClearingDialog(long j) {
        return this.clearingHistoryDialogs.get(j) != null;
    }

    /* JADX WARNING: Removed duplicated region for block: B:151:0x027a  */
    /* JADX WARNING: Removed duplicated region for block: B:152:0x0281  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void sortDialogs(android.util.SparseArray<org.telegram.tgnet.TLRPC$Chat> r14) {
        /*
            r13 = this;
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r0 = r13.dialogsServerOnly
            r0.clear()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r0 = r13.dialogsCanAddUsers
            r0.clear()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r0 = r13.dialogsChannelsOnly
            r0.clear()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r0 = r13.dialogsGroupsOnly
            r0.clear()
            r0 = 0
            r1 = 0
        L_0x0016:
            org.telegram.messenger.MessagesController$DialogFilter[] r2 = r13.selectedDialogFilter
            int r3 = r2.length
            if (r1 >= r3) goto L_0x0029
            r3 = r2[r1]
            if (r3 == 0) goto L_0x0026
            r2 = r2[r1]
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r2.dialogs
            r2.clear()
        L_0x0026:
            int r1 = r1 + 1
            goto L_0x0016
        L_0x0029:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r13.dialogsUsersOnly
            r1.clear()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r13.dialogsForward
            r1.clear()
            r1 = 0
        L_0x0034:
            android.util.SparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog>> r2 = r13.dialogsByFolder
            int r2 = r2.size()
            if (r1 >= r2) goto L_0x004c
            android.util.SparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog>> r2 = r13.dialogsByFolder
            java.lang.Object r2 = r2.valueAt(r1)
            java.util.ArrayList r2 = (java.util.ArrayList) r2
            if (r2 == 0) goto L_0x0049
            r2.clear()
        L_0x0049:
            int r1 = r1 + 1
            goto L_0x0034
        L_0x004c:
            r13.unreadUnmutedDialogs = r0
            org.telegram.messenger.UserConfig r1 = r13.getUserConfig()
            int r1 = r1.getClientUserId()
            org.telegram.messenger.MessagesController$DialogFilter[] r2 = r13.selectedDialogFilter
            r3 = r2[r0]
            r4 = 32
            r5 = 1
            if (r3 != 0) goto L_0x0063
            r2 = r2[r5]
            if (r2 == 0) goto L_0x019c
        L_0x0063:
            r2 = 0
        L_0x0064:
            org.telegram.messenger.MessagesController$DialogFilter[] r3 = r13.selectedDialogFilter
            int r6 = r3.length
            if (r2 >= r6) goto L_0x019c
            r6 = r3[r2]
            if (r6 != 0) goto L_0x006f
            goto L_0x0198
        L_0x006f:
            r3 = r3[r2]
            r13.sortingDialogFilter = r3
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r3 = r13.allDialogs
            java.util.Comparator<org.telegram.tgnet.TLRPC$Dialog> r6 = r13.dialogDateComparator
            java.util.Collections.sort(r3, r6)
            org.telegram.messenger.MessagesController$DialogFilter[] r3 = r13.selectedDialogFilter
            r3 = r3[r2]
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r3 = r3.dialogs
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r6 = r13.allDialogs
            int r6 = r6.size()
            r7 = 0
        L_0x0087:
            if (r7 >= r6) goto L_0x0198
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r8 = r13.allDialogs
            java.lang.Object r8 = r8.get(r7)
            org.telegram.tgnet.TLRPC$Dialog r8 = (org.telegram.tgnet.TLRPC$Dialog) r8
            long r9 = r8.id
            long r11 = r9 >> r4
            int r12 = (int) r11
            int r10 = (int) r9
            if (r10 != 0) goto L_0x00a7
            if (r12 == 0) goto L_0x00a7
            java.lang.Integer r9 = java.lang.Integer.valueOf(r12)
            org.telegram.tgnet.TLRPC$EncryptedChat r9 = r13.getEncryptedChat(r9)
            if (r9 == 0) goto L_0x00a7
            int r10 = r9.user_id
        L_0x00a7:
            boolean r9 = r8 instanceof org.telegram.tgnet.TLRPC$TL_dialog
            if (r9 == 0) goto L_0x0194
            org.telegram.messenger.MessagesController$DialogFilter[] r9 = r13.selectedDialogFilter
            r9 = r9[r2]
            java.util.ArrayList<java.lang.Integer> r9 = r9.alwaysShow
            java.lang.Integer r11 = java.lang.Integer.valueOf(r10)
            boolean r9 = r9.contains(r11)
            if (r9 == 0) goto L_0x00c0
            r3.add(r8)
            goto L_0x0194
        L_0x00c0:
            int r9 = r8.folder_id
            if (r9 == 0) goto L_0x00d1
            org.telegram.messenger.MessagesController$DialogFilter[] r9 = r13.selectedDialogFilter
            r9 = r9[r2]
            int r9 = r9.flags
            int r11 = DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED
            r9 = r9 & r11
            if (r9 == 0) goto L_0x00d1
            goto L_0x0194
        L_0x00d1:
            org.telegram.messenger.MessagesController$DialogFilter[] r9 = r13.selectedDialogFilter
            r9 = r9[r2]
            int r9 = r9.flags
            int r11 = DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r9 = r9 & r11
            if (r9 == 0) goto L_0x00e8
            long r11 = r8.id
            boolean r9 = r13.isDialogMuted(r11)
            if (r9 == 0) goto L_0x00e8
            int r9 = r8.unread_mentions_count
            if (r9 == 0) goto L_0x010b
        L_0x00e8:
            org.telegram.messenger.MessagesController$DialogFilter[] r9 = r13.selectedDialogFilter
            r9 = r9[r2]
            int r9 = r9.flags
            int r11 = DIALOG_FILTER_FLAG_EXCLUDE_READ
            r9 = r9 & r11
            if (r9 == 0) goto L_0x00fb
            int r9 = r8.unread_count
            if (r9 != 0) goto L_0x00fb
            boolean r9 = r8.unread_mark
            if (r9 == 0) goto L_0x010b
        L_0x00fb:
            org.telegram.messenger.MessagesController$DialogFilter[] r9 = r13.selectedDialogFilter
            r9 = r9[r2]
            java.util.ArrayList<java.lang.Integer> r9 = r9.neverShow
            java.lang.Integer r11 = java.lang.Integer.valueOf(r10)
            boolean r9 = r9.contains(r11)
            if (r9 == 0) goto L_0x010d
        L_0x010b:
            r9 = 1
            goto L_0x010e
        L_0x010d:
            r9 = 0
        L_0x010e:
            if (r9 != 0) goto L_0x0194
            if (r10 <= 0) goto L_0x0160
            java.lang.Integer r9 = java.lang.Integer.valueOf(r10)
            org.telegram.tgnet.TLRPC$User r9 = r13.getUser(r9)
            if (r9 == 0) goto L_0x0194
            boolean r11 = r9.bot
            if (r11 != 0) goto L_0x0151
            boolean r11 = r9.self
            if (r11 != 0) goto L_0x0142
            boolean r9 = r9.contact
            if (r9 != 0) goto L_0x0142
            org.telegram.messenger.ContactsController r9 = r13.getContactsController()
            boolean r9 = r9.isContact(r10)
            if (r9 == 0) goto L_0x0133
            goto L_0x0142
        L_0x0133:
            org.telegram.messenger.MessagesController$DialogFilter[] r9 = r13.selectedDialogFilter
            r9 = r9[r2]
            int r9 = r9.flags
            int r10 = DIALOG_FILTER_FLAG_NON_CONTACTS
            r9 = r9 & r10
            if (r9 == 0) goto L_0x0194
            r3.add(r8)
            goto L_0x0194
        L_0x0142:
            org.telegram.messenger.MessagesController$DialogFilter[] r9 = r13.selectedDialogFilter
            r9 = r9[r2]
            int r9 = r9.flags
            int r10 = DIALOG_FILTER_FLAG_CONTACTS
            r9 = r9 & r10
            if (r9 == 0) goto L_0x0194
            r3.add(r8)
            goto L_0x0194
        L_0x0151:
            org.telegram.messenger.MessagesController$DialogFilter[] r9 = r13.selectedDialogFilter
            r9 = r9[r2]
            int r9 = r9.flags
            int r10 = DIALOG_FILTER_FLAG_BOTS
            r9 = r9 & r10
            if (r9 == 0) goto L_0x0194
            r3.add(r8)
            goto L_0x0194
        L_0x0160:
            if (r10 >= 0) goto L_0x0194
            int r9 = -r10
            java.lang.Integer r9 = java.lang.Integer.valueOf(r9)
            org.telegram.tgnet.TLRPC$Chat r9 = r13.getChat(r9)
            if (r9 == 0) goto L_0x0194
            boolean r10 = org.telegram.messenger.ChatObject.isChannel(r9)
            if (r10 == 0) goto L_0x0186
            boolean r9 = r9.megagroup
            if (r9 != 0) goto L_0x0186
            org.telegram.messenger.MessagesController$DialogFilter[] r9 = r13.selectedDialogFilter
            r9 = r9[r2]
            int r9 = r9.flags
            int r10 = DIALOG_FILTER_FLAG_CHANNELS
            r9 = r9 & r10
            if (r9 == 0) goto L_0x0194
            r3.add(r8)
            goto L_0x0194
        L_0x0186:
            org.telegram.messenger.MessagesController$DialogFilter[] r9 = r13.selectedDialogFilter
            r9 = r9[r2]
            int r9 = r9.flags
            int r10 = DIALOG_FILTER_FLAG_GROUPS
            r9 = r9 & r10
            if (r9 == 0) goto L_0x0194
            r3.add(r8)
        L_0x0194:
            int r7 = r7 + 1
            goto L_0x0087
        L_0x0198:
            int r2 = r2 + 1
            goto L_0x0064
        L_0x019c:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r13.allDialogs
            java.util.Comparator<org.telegram.tgnet.TLRPC$Dialog> r3 = r13.dialogComparator
            java.util.Collections.sort(r2, r3)
            r13.isLeftProxyChannel = r5
            org.telegram.tgnet.TLRPC$Dialog r2 = r13.proxyDialog
            if (r2 == 0) goto L_0x01c3
            long r2 = r2.id
            r6 = 0
            int r8 = (r2 > r6 ? 1 : (r2 == r6 ? 0 : -1))
            if (r8 >= 0) goto L_0x01c3
            int r3 = (int) r2
            int r2 = -r3
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)
            org.telegram.tgnet.TLRPC$Chat r2 = r13.getChat(r2)
            if (r2 == 0) goto L_0x01c3
            boolean r2 = r2.left
            if (r2 != 0) goto L_0x01c3
            r13.isLeftProxyChannel = r0
        L_0x01c3:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r13.allDialogs
            int r2 = r2.size()
            r3 = 0
            r6 = 0
        L_0x01cb:
            if (r3 >= r2) goto L_0x02bc
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r7 = r13.allDialogs
            java.lang.Object r7 = r7.get(r3)
            org.telegram.tgnet.TLRPC$Dialog r7 = (org.telegram.tgnet.TLRPC$Dialog) r7
            long r8 = r7.id
            long r10 = r8 >> r4
            int r11 = (int) r10
            int r10 = (int) r8
            boolean r12 = r7 instanceof org.telegram.tgnet.TLRPC$TL_dialog
            if (r12 == 0) goto L_0x0286
            android.util.LongSparseArray<org.telegram.messenger.MessageObject> r12 = r13.dialogMessage
            java.lang.Object r8 = r12.get(r8)
            org.telegram.messenger.MessageObject r8 = (org.telegram.messenger.MessageObject) r8
            if (r8 == 0) goto L_0x01f3
            org.telegram.tgnet.TLRPC$Message r8 = r8.messageOwner
            int r8 = r8.date
            int r9 = r13.dialogsLoadedTillDate
            if (r8 >= r9) goto L_0x01f3
            goto L_0x02b9
        L_0x01f3:
            if (r10 == 0) goto L_0x0271
            if (r11 == r5) goto L_0x0271
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r8 = r13.dialogsServerOnly
            r8.add(r7)
            boolean r8 = org.telegram.messenger.DialogObject.isChannel(r7)
            if (r8 == 0) goto L_0x0246
            int r8 = -r10
            java.lang.Integer r8 = java.lang.Integer.valueOf(r8)
            org.telegram.tgnet.TLRPC$Chat r8 = r13.getChat(r8)
            if (r8 == 0) goto L_0x0226
            boolean r9 = r8.megagroup
            if (r9 == 0) goto L_0x0226
            org.telegram.tgnet.TLRPC$TL_chatAdminRights r9 = r8.admin_rights
            if (r9 == 0) goto L_0x021d
            boolean r11 = r9.post_messages
            if (r11 != 0) goto L_0x0221
            boolean r9 = r9.add_admins
            if (r9 != 0) goto L_0x0221
        L_0x021d:
            boolean r9 = r8.creator
            if (r9 == 0) goto L_0x0226
        L_0x0221:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r9 = r13.dialogsCanAddUsers
            r9.add(r7)
        L_0x0226:
            if (r8 == 0) goto L_0x0232
            boolean r9 = r8.megagroup
            if (r9 == 0) goto L_0x0232
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r8 = r13.dialogsGroupsOnly
            r8.add(r7)
            goto L_0x0271
        L_0x0232:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r9 = r13.dialogsChannelsOnly
            r9.add(r7)
            boolean r9 = org.telegram.messenger.ChatObject.hasAdminRights(r8)
            if (r9 == 0) goto L_0x0244
            boolean r8 = org.telegram.messenger.ChatObject.canPost(r8)
            if (r8 == 0) goto L_0x0244
            goto L_0x0271
        L_0x0244:
            r8 = 0
            goto L_0x0272
        L_0x0246:
            if (r10 >= 0) goto L_0x0268
            if (r14 == 0) goto L_0x025d
            int r8 = -r10
            java.lang.Object r8 = r14.get(r8)
            org.telegram.tgnet.TLRPC$Chat r8 = (org.telegram.tgnet.TLRPC$Chat) r8
            if (r8 == 0) goto L_0x025d
            org.telegram.tgnet.TLRPC$InputChannel r8 = r8.migrated_to
            if (r8 == 0) goto L_0x025d
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r7 = r13.allDialogs
            r7.remove(r3)
            goto L_0x02b0
        L_0x025d:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r8 = r13.dialogsCanAddUsers
            r8.add(r7)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r8 = r13.dialogsGroupsOnly
            r8.add(r7)
            goto L_0x0271
        L_0x0268:
            if (r10 <= 0) goto L_0x0271
            if (r10 == r1) goto L_0x0271
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r8 = r13.dialogsUsersOnly
            r8.add(r7)
        L_0x0271:
            r8 = 1
        L_0x0272:
            if (r8 == 0) goto L_0x0286
            int r8 = r7.folder_id
            if (r8 != 0) goto L_0x0286
            if (r10 != r1) goto L_0x0281
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r6 = r13.dialogsForward
            r6.add(r0, r7)
            r6 = 1
            goto L_0x0286
        L_0x0281:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r8 = r13.dialogsForward
            r8.add(r7)
        L_0x0286:
            int r8 = r7.unread_count
            if (r8 != 0) goto L_0x028e
            boolean r8 = r7.unread_mark
            if (r8 == 0) goto L_0x029b
        L_0x028e:
            long r8 = r7.id
            boolean r8 = r13.isDialogMuted(r8)
            if (r8 != 0) goto L_0x029b
            int r8 = r13.unreadUnmutedDialogs
            int r8 = r8 + r5
            r13.unreadUnmutedDialogs = r8
        L_0x029b:
            org.telegram.tgnet.TLRPC$Dialog r8 = r13.proxyDialog
            if (r8 == 0) goto L_0x02b5
            long r9 = r7.id
            long r11 = r8.id
            int r8 = (r9 > r11 ? 1 : (r9 == r11 ? 0 : -1))
            if (r8 != 0) goto L_0x02b5
            boolean r8 = r13.isLeftProxyChannel
            if (r8 == 0) goto L_0x02b5
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r7 = r13.allDialogs
            r7.remove(r3)
        L_0x02b0:
            int r3 = r3 + -1
            int r2 = r2 + -1
            goto L_0x02b9
        L_0x02b5:
            r8 = -1
            r13.addDialogToItsFolder(r8, r7)
        L_0x02b9:
            int r3 = r3 + r5
            goto L_0x01cb
        L_0x02bc:
            org.telegram.tgnet.TLRPC$Dialog r14 = r13.proxyDialog
            if (r14 == 0) goto L_0x02cf
            boolean r1 = r13.isLeftProxyChannel
            if (r1 == 0) goto L_0x02cf
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r13.allDialogs
            r1.add(r0, r14)
            r14 = -2
            org.telegram.tgnet.TLRPC$Dialog r1 = r13.proxyDialog
            r13.addDialogToItsFolder(r14, r1)
        L_0x02cf:
            if (r6 != 0) goto L_0x02fc
            org.telegram.messenger.UserConfig r14 = r13.getUserConfig()
            org.telegram.tgnet.TLRPC$User r14 = r14.getCurrentUser()
            if (r14 == 0) goto L_0x02fc
            org.telegram.tgnet.TLRPC$TL_dialog r1 = new org.telegram.tgnet.TLRPC$TL_dialog
            r1.<init>()
            int r2 = r14.id
            long r2 = (long) r2
            r1.id = r2
            org.telegram.tgnet.TLRPC$TL_peerNotifySettings r2 = new org.telegram.tgnet.TLRPC$TL_peerNotifySettings
            r2.<init>()
            r1.notify_settings = r2
            org.telegram.tgnet.TLRPC$TL_peerUser r2 = new org.telegram.tgnet.TLRPC$TL_peerUser
            r2.<init>()
            r1.peer = r2
            int r14 = r14.id
            r2.user_id = r14
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r14 = r13.dialogsForward
            r14.add(r0, r1)
        L_0x02fc:
            android.util.SparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog>> r14 = r13.dialogsByFolder
            int r14 = r14.size()
            if (r0 >= r14) goto L_0x0320
            android.util.SparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog>> r14 = r13.dialogsByFolder
            int r14 = r14.keyAt(r0)
            android.util.SparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog>> r1 = r13.dialogsByFolder
            java.lang.Object r1 = r1.valueAt(r0)
            java.util.ArrayList r1 = (java.util.ArrayList) r1
            boolean r1 = r1.isEmpty()
            if (r1 == 0) goto L_0x031d
            android.util.SparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog>> r1 = r13.dialogsByFolder
            r1.remove(r14)
        L_0x031d:
            int r0 = r0 + 1
            goto L_0x02fc
        L_0x0320:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.sortDialogs(android.util.SparseArray):void");
    }

    private void addDialogToItsFolder(int i, TLRPC$Dialog tLRPC$Dialog) {
        int i2;
        if (tLRPC$Dialog instanceof TLRPC$TL_dialogFolder) {
            i2 = 0;
        } else {
            i2 = tLRPC$Dialog.folder_id;
        }
        ArrayList arrayList = this.dialogsByFolder.get(i2);
        if (arrayList == null) {
            arrayList = new ArrayList();
            this.dialogsByFolder.put(i2, arrayList);
        }
        if (i == -1) {
            arrayList.add(tLRPC$Dialog);
        } else if (i != -2) {
            arrayList.add(i, tLRPC$Dialog);
        } else if (arrayList.isEmpty() || !(arrayList.get(0) instanceof TLRPC$TL_dialogFolder)) {
            arrayList.add(0, tLRPC$Dialog);
        } else {
            arrayList.add(1, tLRPC$Dialog);
        }
    }

    public static String getRestrictionReason(ArrayList<TLRPC$TL_restrictionReason> arrayList) {
        if (arrayList.isEmpty()) {
            return null;
        }
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            TLRPC$TL_restrictionReason tLRPC$TL_restrictionReason = arrayList.get(i);
            if ("all".equals(tLRPC$TL_restrictionReason.platform) || "android".equals(tLRPC$TL_restrictionReason.platform)) {
                return tLRPC$TL_restrictionReason.text;
            }
        }
        return null;
    }

    private static void showCantOpenAlert(BaseFragment baseFragment, String str) {
        if (baseFragment != null && baseFragment.getParentActivity() != null) {
            AlertDialog.Builder builder = new AlertDialog.Builder((Context) baseFragment.getParentActivity());
            builder.setTitle(LocaleController.getString("AppName", NUM));
            builder.setPositiveButton(LocaleController.getString("OK", NUM), (DialogInterface.OnClickListener) null);
            builder.setMessage(str);
            baseFragment.showDialog(builder.create());
        }
    }

    public boolean checkCanOpenChat(Bundle bundle, BaseFragment baseFragment) {
        return checkCanOpenChat(bundle, baseFragment, (MessageObject) null);
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v4, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getMessages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v7, resolved type: org.telegram.tgnet.TLRPC$TL_channels_getMessages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v14, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getMessages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v15, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getMessages} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean checkCanOpenChat(android.os.Bundle r9, org.telegram.ui.ActionBar.BaseFragment r10, org.telegram.messenger.MessageObject r11) {
        /*
            r8 = this;
            r0 = 1
            if (r9 == 0) goto L_0x00d5
            if (r10 != 0) goto L_0x0007
            goto L_0x00d5
        L_0x0007:
            r1 = 0
            java.lang.String r2 = "user_id"
            int r2 = r9.getInt(r2, r1)
            java.lang.String r3 = "chat_id"
            int r3 = r9.getInt(r3, r1)
            java.lang.String r4 = "message_id"
            int r4 = r9.getInt(r4, r1)
            r5 = 0
            if (r2 == 0) goto L_0x0027
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)
            org.telegram.tgnet.TLRPC$User r2 = r8.getUser(r2)
            r3 = r5
            goto L_0x0036
        L_0x0027:
            if (r3 == 0) goto L_0x0034
            java.lang.Integer r2 = java.lang.Integer.valueOf(r3)
            org.telegram.tgnet.TLRPC$Chat r2 = r8.getChat(r2)
            r3 = r2
            r2 = r5
            goto L_0x0036
        L_0x0034:
            r2 = r5
            r3 = r2
        L_0x0036:
            if (r2 != 0) goto L_0x003b
            if (r3 != 0) goto L_0x003b
            return r0
        L_0x003b:
            if (r3 == 0) goto L_0x0044
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_restrictionReason> r2 = r3.restriction_reason
            java.lang.String r5 = getRestrictionReason(r2)
            goto L_0x004c
        L_0x0044:
            if (r2 == 0) goto L_0x004c
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_restrictionReason> r2 = r2.restriction_reason
            java.lang.String r5 = getRestrictionReason(r2)
        L_0x004c:
            if (r5 == 0) goto L_0x0052
            showCantOpenAlert(r10, r5)
            return r1
        L_0x0052:
            if (r4 == 0) goto L_0x00d5
            if (r11 == 0) goto L_0x00d5
            if (r3 == 0) goto L_0x00d5
            long r4 = r3.access_hash
            r6 = 0
            int r2 = (r4 > r6 ? 1 : (r4 == r6 ? 0 : -1))
            if (r2 != 0) goto L_0x00d5
            long r4 = r11.getDialogId()
            int r2 = (int) r4
            if (r2 == 0) goto L_0x00d5
            org.telegram.ui.ActionBar.AlertDialog r0 = new org.telegram.ui.ActionBar.AlertDialog
            android.app.Activity r4 = r10.getParentActivity()
            r5 = 3
            r0.<init>(r4, r5)
            if (r2 >= 0) goto L_0x007c
            int r3 = -r2
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)
            org.telegram.tgnet.TLRPC$Chat r3 = r8.getChat(r3)
        L_0x007c:
            if (r2 > 0) goto L_0x00a7
            boolean r3 = org.telegram.messenger.ChatObject.isChannel(r3)
            if (r3 != 0) goto L_0x0085
            goto L_0x00a7
        L_0x0085:
            int r2 = -r2
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)
            org.telegram.tgnet.TLRPC$Chat r2 = r8.getChat(r2)
            org.telegram.tgnet.TLRPC$TL_channels_getMessages r3 = new org.telegram.tgnet.TLRPC$TL_channels_getMessages
            r3.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r2 = getInputChannel((org.telegram.tgnet.TLRPC$Chat) r2)
            r3.channel = r2
            java.util.ArrayList<java.lang.Integer> r2 = r3.id
            int r11 = r11.getId()
            java.lang.Integer r11 = java.lang.Integer.valueOf(r11)
            r2.add(r11)
            goto L_0x00b9
        L_0x00a7:
            org.telegram.tgnet.TLRPC$TL_messages_getMessages r3 = new org.telegram.tgnet.TLRPC$TL_messages_getMessages
            r3.<init>()
            java.util.ArrayList<java.lang.Integer> r2 = r3.id
            int r11 = r11.getId()
            java.lang.Integer r11 = java.lang.Integer.valueOf(r11)
            r2.add(r11)
        L_0x00b9:
            org.telegram.tgnet.ConnectionsManager r11 = r8.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$q14BExc7DV_OHT7mE7fjrMa-Mts r2 = new org.telegram.messenger.-$$Lambda$MessagesController$q14BExc7DV_OHT7mE7fjrMa-Mts
            r2.<init>(r0, r10, r9)
            int r9 = r11.sendRequest(r3, r2)
            org.telegram.messenger.-$$Lambda$MessagesController$4jItGFnFOrpqc9mFlEvvH27cCN8 r11 = new org.telegram.messenger.-$$Lambda$MessagesController$4jItGFnFOrpqc9mFlEvvH27cCN8
            r11.<init>(r9, r10)
            r0.setOnCancelListener(r11)
            r10.setVisibleDialog(r0)
            r0.show()
            return r1
        L_0x00d5:
            return r0
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.checkCanOpenChat(android.os.Bundle, org.telegram.ui.ActionBar.BaseFragment, org.telegram.messenger.MessageObject):boolean");
    }

    public /* synthetic */ void lambda$checkCanOpenChat$285$MessagesController(AlertDialog alertDialog, BaseFragment baseFragment, Bundle bundle, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        if (tLObject != null) {
            AndroidUtilities.runOnUIThread(new Runnable(alertDialog, tLObject, baseFragment, bundle) {
                private final /* synthetic */ AlertDialog f$1;
                private final /* synthetic */ TLObject f$2;
                private final /* synthetic */ BaseFragment f$3;
                private final /* synthetic */ Bundle f$4;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r5;
                }

                public final void run() {
                    MessagesController.this.lambda$null$284$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4);
                }
            });
        }
    }

    public /* synthetic */ void lambda$null$284$MessagesController(AlertDialog alertDialog, TLObject tLObject, BaseFragment baseFragment, Bundle bundle) {
        try {
            alertDialog.dismiss();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        TLRPC$messages_Messages tLRPC$messages_Messages = (TLRPC$messages_Messages) tLObject;
        putUsers(tLRPC$messages_Messages.users, false);
        putChats(tLRPC$messages_Messages.chats, false);
        getMessagesStorage().putUsersAndChats(tLRPC$messages_Messages.users, tLRPC$messages_Messages.chats, true, true);
        baseFragment.presentFragment(new ChatActivity(bundle), true);
    }

    public /* synthetic */ void lambda$checkCanOpenChat$286$MessagesController(int i, BaseFragment baseFragment, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
        if (baseFragment != null) {
            baseFragment.setVisibleDialog((Dialog) null);
        }
    }

    public static void openChatOrProfileWith(TLRPC$User tLRPC$User, TLRPC$Chat tLRPC$Chat, BaseFragment baseFragment, int i, boolean z) {
        if ((tLRPC$User != null || tLRPC$Chat != null) && baseFragment != null) {
            String str = null;
            if (tLRPC$Chat != null) {
                str = getRestrictionReason(tLRPC$Chat.restriction_reason);
            } else if (tLRPC$User != null) {
                str = getRestrictionReason(tLRPC$User.restriction_reason);
                if (i != 3 && tLRPC$User.bot) {
                    i = 1;
                    z = true;
                }
            }
            if (str != null) {
                showCantOpenAlert(baseFragment, str);
                return;
            }
            Bundle bundle = new Bundle();
            if (tLRPC$Chat != null) {
                bundle.putInt("chat_id", tLRPC$Chat.id);
            } else {
                bundle.putInt("user_id", tLRPC$User.id);
            }
            if (i == 0) {
                baseFragment.presentFragment(new ProfileActivity(bundle));
            } else if (i == 2) {
                baseFragment.presentFragment(new ChatActivity(bundle), true, true);
            } else {
                baseFragment.presentFragment(new ChatActivity(bundle), z);
            }
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:15:0x002b  */
    /* JADX WARNING: Removed duplicated region for block: B:16:0x002f  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void openByUserName(java.lang.String r6, org.telegram.ui.ActionBar.BaseFragment r7, int r8) {
        /*
            r5 = this;
            if (r6 == 0) goto L_0x0069
            if (r7 != 0) goto L_0x0006
            goto L_0x0069
        L_0x0006:
            org.telegram.tgnet.TLObject r0 = r5.getUserOrChat(r6)
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$User
            r2 = 0
            if (r1 == 0) goto L_0x0018
            org.telegram.tgnet.TLRPC$User r0 = (org.telegram.tgnet.TLRPC$User) r0
            boolean r1 = r0.min
            if (r1 == 0) goto L_0x0016
            goto L_0x0026
        L_0x0016:
            r1 = r2
            goto L_0x0028
        L_0x0018:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$Chat
            if (r1 == 0) goto L_0x0026
            org.telegram.tgnet.TLRPC$Chat r0 = (org.telegram.tgnet.TLRPC$Chat) r0
            boolean r1 = r0.min
            if (r1 == 0) goto L_0x0023
            goto L_0x0026
        L_0x0023:
            r1 = r0
            r0 = r2
            goto L_0x0028
        L_0x0026:
            r0 = r2
            r1 = r0
        L_0x0028:
            r3 = 0
            if (r0 == 0) goto L_0x002f
            openChatOrProfileWith(r0, r2, r7, r8, r3)
            goto L_0x0069
        L_0x002f:
            r0 = 1
            if (r1 == 0) goto L_0x0036
            openChatOrProfileWith(r2, r1, r7, r0, r3)
            goto L_0x0069
        L_0x0036:
            android.app.Activity r1 = r7.getParentActivity()
            if (r1 != 0) goto L_0x003d
            return
        L_0x003d:
            org.telegram.ui.ActionBar.AlertDialog[] r0 = new org.telegram.ui.ActionBar.AlertDialog[r0]
            org.telegram.ui.ActionBar.AlertDialog r1 = new org.telegram.ui.ActionBar.AlertDialog
            android.app.Activity r2 = r7.getParentActivity()
            r4 = 3
            r1.<init>(r2, r4)
            r0[r3] = r1
            org.telegram.tgnet.TLRPC$TL_contacts_resolveUsername r1 = new org.telegram.tgnet.TLRPC$TL_contacts_resolveUsername
            r1.<init>()
            r1.username = r6
            org.telegram.tgnet.ConnectionsManager r6 = r5.getConnectionsManager()
            org.telegram.messenger.-$$Lambda$MessagesController$sUFD3gNXZsAxICO9snnZY9lT4nY r2 = new org.telegram.messenger.-$$Lambda$MessagesController$sUFD3gNXZsAxICO9snnZY9lT4nY
            r2.<init>(r0, r7, r8)
            int r6 = r6.sendRequest(r1, r2)
            org.telegram.messenger.-$$Lambda$MessagesController$SJfC3wkq5JgU_ty-HLImSkC5ato r8 = new org.telegram.messenger.-$$Lambda$MessagesController$SJfC3wkq5JgU_ty-HLImSkC5ato
            r8.<init>(r0, r6, r7)
            r6 = 500(0x1f4, double:2.47E-321)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r8, r6)
        L_0x0069:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.openByUserName(java.lang.String, org.telegram.ui.ActionBar.BaseFragment, int):void");
    }

    public /* synthetic */ void lambda$openByUserName$288$MessagesController(AlertDialog[] alertDialogArr, BaseFragment baseFragment, int i, TLObject tLObject, TLRPC$TL_error tLRPC$TL_error) {
        AndroidUtilities.runOnUIThread(new Runnable(alertDialogArr, baseFragment, tLRPC$TL_error, tLObject, i) {
            private final /* synthetic */ AlertDialog[] f$1;
            private final /* synthetic */ BaseFragment f$2;
            private final /* synthetic */ TLRPC$TL_error f$3;
            private final /* synthetic */ TLObject f$4;
            private final /* synthetic */ int f$5;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
            }

            public final void run() {
                MessagesController.this.lambda$null$287$MessagesController(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5);
            }
        });
    }

    public /* synthetic */ void lambda$null$287$MessagesController(AlertDialog[] alertDialogArr, BaseFragment baseFragment, TLRPC$TL_error tLRPC$TL_error, TLObject tLObject, int i) {
        try {
            alertDialogArr[0].dismiss();
        } catch (Exception unused) {
        }
        alertDialogArr[0] = null;
        baseFragment.setVisibleDialog((Dialog) null);
        if (tLRPC$TL_error == null) {
            TLRPC$TL_contacts_resolvedPeer tLRPC$TL_contacts_resolvedPeer = (TLRPC$TL_contacts_resolvedPeer) tLObject;
            putUsers(tLRPC$TL_contacts_resolvedPeer.users, false);
            putChats(tLRPC$TL_contacts_resolvedPeer.chats, false);
            getMessagesStorage().putUsersAndChats(tLRPC$TL_contacts_resolvedPeer.users, tLRPC$TL_contacts_resolvedPeer.chats, false, true);
            if (!tLRPC$TL_contacts_resolvedPeer.chats.isEmpty()) {
                openChatOrProfileWith((TLRPC$User) null, tLRPC$TL_contacts_resolvedPeer.chats.get(0), baseFragment, 1, false);
            } else if (!tLRPC$TL_contacts_resolvedPeer.users.isEmpty()) {
                openChatOrProfileWith(tLRPC$TL_contacts_resolvedPeer.users.get(0), (TLRPC$Chat) null, baseFragment, i, false);
            }
        } else if (baseFragment != null && baseFragment.getParentActivity() != null) {
            try {
                Toast.makeText(baseFragment.getParentActivity(), LocaleController.getString("NoUsernameFound", NUM), 0).show();
            } catch (Exception e) {
                FileLog.e((Throwable) e);
            }
        }
    }

    public /* synthetic */ void lambda$openByUserName$290$MessagesController(AlertDialog[] alertDialogArr, int i, BaseFragment baseFragment) {
        if (alertDialogArr[0] != null) {
            alertDialogArr[0].setOnCancelListener(new DialogInterface.OnCancelListener(i) {
                private final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void onCancel(DialogInterface dialogInterface) {
                    MessagesController.this.lambda$null$289$MessagesController(this.f$1, dialogInterface);
                }
            });
            baseFragment.showDialog(alertDialogArr[0]);
        }
    }

    public /* synthetic */ void lambda$null$289$MessagesController(int i, DialogInterface dialogInterface) {
        getConnectionsManager().cancelRequest(i, true);
    }

    public void ensureMessagesLoaded(long j, boolean z, int i, Runnable runnable) {
        int i2;
        long j2 = j;
        SharedPreferences notificationsSettings = getNotificationsSettings(this.currentAccount);
        if (i == 0) {
            i2 = notificationsSettings.getInt("diditem" + j2, 0);
        } else {
            i2 = i;
        }
        if (i2 == 0 || !getMessagesStorage().checkMessageId(j2, z, i2)) {
            int generateClassGuid = ConnectionsManager.generateClassGuid();
            final int i3 = generateClassGuid;
            final long j3 = j;
            final Runnable runnable2 = runnable;
            getNotificationCenter().addObserver(new NotificationCenter.NotificationCenterDelegate() {
                public void didReceivedNotification(int i, int i2, Object... objArr) {
                    if (i == NotificationCenter.messagesDidLoad && objArr[10].intValue() == i3) {
                        boolean booleanValue = objArr[3].booleanValue();
                        if (!objArr[2].isEmpty() || !booleanValue) {
                            MessagesController.this.getNotificationCenter().removeObserver(this, NotificationCenter.didReceiveNewMessages);
                            runnable2.run();
                            return;
                        }
                        MessagesController.this.loadMessages(j3, 20, 3, 0, false, 0, i3, 3, 0, false, false, 0);
                    }
                }
            }, NotificationCenter.messagesDidLoad);
            loadMessages(j, 1, i2, 0, true, 0, generateClassGuid, 3, 0, false, false, 0);
            return;
        }
        runnable.run();
    }
}
