package org.telegram.messenger;

import android.app.Activity;
import android.app.Dialog;
import android.appwidget.AppWidgetManager;
import android.content.Context;
import android.content.DialogInterface;
import android.content.SharedPreferences;
import android.location.Location;
import android.os.Bundle;
import android.os.Looper;
import android.os.SystemClock;
import android.text.TextUtils;
import android.util.Base64;
import android.util.SparseArray;
import android.util.SparseBooleanArray;
import android.util.SparseIntArray;
import androidx.collection.LongSparseArray;
import androidx.core.util.Consumer;
import j$.util.concurrent.ConcurrentHashMap;
import java.io.File;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CountDownLatch;
import org.telegram.SQLite.SQLiteCursor;
import org.telegram.SQLite.SQLiteException;
import org.telegram.SQLite.SQLitePreparedStatement;
import org.telegram.messenger.ChatObject;
import org.telegram.messenger.MessagesStorage;
import org.telegram.messenger.NotificationCenter;
import org.telegram.messenger.support.LongSparseIntArray;
import org.telegram.messenger.support.LongSparseLongArray;
import org.telegram.tgnet.ConnectionsManager;
import org.telegram.tgnet.NativeByteBuffer;
import org.telegram.tgnet.RequestDelegate;
import org.telegram.tgnet.SerializedData;
import org.telegram.tgnet.TLObject;
import org.telegram.tgnet.TLRPC;
import org.telegram.ui.ActionBar.AlertDialog;
import org.telegram.ui.ActionBar.BaseFragment;
import org.telegram.ui.ActionBar.Theme;
import org.telegram.ui.ChatActivity;
import org.telegram.ui.ChatRightsEditActivity;
import org.telegram.ui.Components.AlertsCreator;
import org.telegram.ui.Components.BulletinFactory;
import org.telegram.ui.DialogsActivity;
import org.telegram.ui.LaunchActivity;
import org.telegram.ui.PremiumPreviewFragment;
import org.telegram.ui.ProfileActivity;

public class MessagesController extends BaseController implements NotificationCenter.NotificationCenterDelegate {
    public static int DIALOG_FILTER_FLAG_ALL_CHATS = ((((1 | 2) | 4) | 8) | 16);
    public static int DIALOG_FILTER_FLAG_BOTS = 16;
    public static int DIALOG_FILTER_FLAG_CHANNELS = 8;
    public static int DIALOG_FILTER_FLAG_CONTACTS = 1;
    public static int DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED = 128;
    public static int DIALOG_FILTER_FLAG_EXCLUDE_MUTED = 32;
    public static int DIALOG_FILTER_FLAG_EXCLUDE_READ = 64;
    public static int DIALOG_FILTER_FLAG_GROUPS = 4;
    public static int DIALOG_FILTER_FLAG_NON_CONTACTS = 2;
    public static int DIALOG_FILTER_FLAG_ONLY_ARCHIVED = 256;
    private static volatile MessagesController[] Instance = new MessagesController[4];
    public static int PROMO_TYPE_OTHER = 2;
    public static int PROMO_TYPE_PROXY = 0;
    public static int PROMO_TYPE_PSA = 1;
    public static int UPDATE_MASK_ALL = (1024 | ((((((((2 | 4) | 1) | 8) | 16) | 32) | 64) | 128) | 256));
    public static int UPDATE_MASK_AVATAR = 2;
    public static int UPDATE_MASK_CHAT = 8192;
    public static int UPDATE_MASK_CHAT_AVATAR = 8;
    public static int UPDATE_MASK_CHAT_MEMBERS = 32;
    public static int UPDATE_MASK_CHAT_NAME = 16;
    public static int UPDATE_MASK_CHECK = 65536;
    public static int UPDATE_MASK_EMOJI_INTERACTIONS = 262144;
    public static int UPDATE_MASK_MESSAGE_TEXT = 32768;
    public static int UPDATE_MASK_NAME = 1;
    public static int UPDATE_MASK_NEW_MESSAGE = 2048;
    public static int UPDATE_MASK_PHONE = 1024;
    public static int UPDATE_MASK_READ_DIALOG_MESSAGE = 256;
    public static int UPDATE_MASK_REORDER = 131072;
    public static int UPDATE_MASK_SELECT_DIALOG = 512;
    public static int UPDATE_MASK_SEND_STATE = 4096;
    public static int UPDATE_MASK_STATUS = 4;
    public static int UPDATE_MASK_USER_PHONE = 128;
    public static int UPDATE_MASK_USER_PRINT = 64;
    private static volatile long lastPasswordCheckTime;
    private static volatile long lastThemeCheckTime;
    private static final Object[] lockObjects = new Object[4];
    private int DIALOGS_LOAD_TYPE_CACHE;
    private int DIALOGS_LOAD_TYPE_CHANNEL;
    private int DIALOGS_LOAD_TYPE_UNKNOWN;
    public int aboutLengthLimitDefault;
    public int aboutLengthLimitPremium;
    private HashMap<Long, TLRPC.Chat> activeVoiceChatsMap = new HashMap<>();
    protected ArrayList<TLRPC.Dialog> allDialogs = new ArrayList<>();
    public float animatedEmojisZoom;
    public Set<String> authDomains;
    public boolean autoarchiveAvailable;
    public Set<String> autologinDomains;
    public String autologinToken;
    public int availableMapProviders;
    public boolean backgroundConnection;
    public LongSparseIntArray blockePeers = new LongSparseIntArray();
    public boolean blockedCountry;
    public boolean blockedEndReached;
    public int callConnectTimeout;
    public int callPacketTimeout;
    public int callReceiveTimeout;
    public int callRingTimeout;
    public boolean canRevokePmInbox;
    public int captionLengthLimitDefault;
    public int captionLengthLimitPremium;
    private LongSparseArray<LongSparseArray<TLRPC.ChannelParticipant>> channelAdmins = new LongSparseArray<>();
    private LongSparseArray<ArrayList<Integer>> channelViewsToSend = new LongSparseArray<>();
    public int channelsLimitDefault;
    public int channelsLimitPremium;
    private LongSparseIntArray channelsPts = new LongSparseIntArray();
    public int chatReadMarkExpirePeriod;
    public int chatReadMarkSizeThreshold;
    private ConcurrentHashMap<Long, TLRPC.Chat> chats = new ConcurrentHashMap<>(100, 1.0f, 2);
    private LongSparseArray<Boolean> checkingLastMessagesDialogs = new LongSparseArray<>();
    private boolean checkingPromoInfo;
    private int checkingPromoInfoRequestId;
    private boolean checkingTosUpdate;
    private LongSparseArray<TLRPC.Dialog> clearingHistoryDialogs = new LongSparseArray<>();
    private ArrayList<Long> createdDialogIds = new ArrayList<>();
    private ArrayList<Long> createdDialogMainThreadIds = new ArrayList<>();
    private ArrayList<Long> createdScheduledDialogIds = new ArrayList<>();
    private Runnable currentDeleteTaskRunnable;
    private LongSparseArray<ArrayList<Integer>> currentDeletingTaskMediaMids;
    private LongSparseArray<ArrayList<Integer>> currentDeletingTaskMids;
    private int currentDeletingTaskTime;
    public String dcDomainName;
    public LongSparseIntArray deletedHistory = new LongSparseIntArray();
    private LongSparseArray<TLRPC.Dialog> deletingDialogs = new LongSparseArray<>();
    private Comparator<TLRPC.Dialog> dialogComparator;
    private Comparator<TLRPC.Dialog> dialogDateComparator;
    public ArrayList<DialogFilter> dialogFilters = new ArrayList<>();
    public SparseArray<DialogFilter> dialogFiltersById = new SparseArray<>();
    public int dialogFiltersChatsLimitDefault;
    public int dialogFiltersChatsLimitPremium;
    public int dialogFiltersLimitDefault;
    public int dialogFiltersLimitPremium;
    public boolean dialogFiltersLoaded;
    public int dialogFiltersPinnedLimitDefault;
    public int dialogFiltersPinnedLimitPremium;
    public LongSparseArray<MessageObject> dialogMessage = new LongSparseArray<>();
    public SparseArray<MessageObject> dialogMessagesByIds = new SparseArray<>();
    public LongSparseArray<MessageObject> dialogMessagesByRandomIds = new LongSparseArray<>();
    public SparseArray<ArrayList<TLRPC.Dialog>> dialogsByFolder = new SparseArray<>();
    public ArrayList<TLRPC.Dialog> dialogsCanAddUsers = new ArrayList<>();
    public ArrayList<TLRPC.Dialog> dialogsChannelsOnly = new ArrayList<>();
    private SparseBooleanArray dialogsEndReached = new SparseBooleanArray();
    public ArrayList<TLRPC.Dialog> dialogsForBlock = new ArrayList<>();
    public ArrayList<TLRPC.Dialog> dialogsForward = new ArrayList<>();
    public ArrayList<TLRPC.Dialog> dialogsGroupsOnly = new ArrayList<>();
    private boolean dialogsInTransaction;
    public boolean dialogsLoaded;
    private int dialogsLoadedTillDate = Integer.MAX_VALUE;
    public ArrayList<TLRPC.Dialog> dialogsMyChannels = new ArrayList<>();
    public ArrayList<TLRPC.Dialog> dialogsMyGroups = new ArrayList<>();
    public ArrayList<TLRPC.Dialog> dialogsServerOnly = new ArrayList<>();
    public ArrayList<TLRPC.Dialog> dialogsUsersOnly = new ArrayList<>();
    public LongSparseArray<TLRPC.Dialog> dialogs_dict = new LongSparseArray<>();
    public ConcurrentHashMap<Long, Integer> dialogs_read_inbox_max = new ConcurrentHashMap<>(100, 1.0f, 2);
    public ConcurrentHashMap<Long, Integer> dialogs_read_outbox_max = new ConcurrentHashMap<>(100, 1.0f, 2);
    public HashSet<String> diceEmojies;
    public HashMap<String, DiceFrameSuccess> diceSuccess;
    public HashMap<Long, ArrayList<TLRPC.TL_sendMessageEmojiInteraction>> emojiInteractions;
    private SharedPreferences emojiPreferences;
    public HashMap<String, EmojiSound> emojiSounds;
    public boolean enableJoined;
    private ConcurrentHashMap<Integer, TLRPC.EncryptedChat> encryptedChats = new ConcurrentHashMap<>(10, 1.0f, 2);
    public Set<String> exportGroupUri;
    public Set<String> exportPrivateUri;
    public Set<String> exportUri;
    private LongSparseArray<TLRPC.TL_chatInviteExported> exportedChats = new LongSparseArray<>();
    public ArrayList<FaqSearchResult> faqSearchArray;
    public TLRPC.WebPage faqWebPage;
    public boolean filtersEnabled;
    public boolean firstGettingTask;
    private LongSparseArray<TLRPC.ChatFull> fullChats = new LongSparseArray<>();
    private LongSparseArray<TLRPC.UserFull> fullUsers = new LongSparseArray<>();
    private boolean getDifferenceFirstSync;
    public boolean getfileExperimentalParams;
    private boolean gettingAppChangelog;
    private LongSparseArray<Boolean> gettingChatInviters = new LongSparseArray<>();
    public boolean gettingDifference;
    private LongSparseArray<Boolean> gettingDifferenceChannels = new LongSparseArray<>();
    private boolean gettingNewDeleteTask;
    private LongSparseArray<Boolean> gettingUnknownChannels = new LongSparseArray<>();
    private LongSparseArray<Boolean> gettingUnknownDialogs = new LongSparseArray<>();
    public String gifSearchBot;
    public ArrayList<String> gifSearchEmojies;
    public int groupCallVideoMaxParticipants;
    private LongSparseArray<ChatObject.Call> groupCalls = new LongSparseArray<>();
    private LongSparseArray<ChatObject.Call> groupCallsByChatId = new LongSparseArray<>();
    public ArrayList<TLRPC.RecentMeUrl> hintDialogs = new ArrayList<>();
    public volatile boolean ignoreSetOnline;
    public String imageSearchBot;
    private String installReferer;
    private boolean isLeftPromoChannel;
    private ArrayList<Long> joiningToChannels = new ArrayList<>();
    public boolean keepAliveService;
    private int lastCheckPromoId;
    private int lastPrintingStringCount;
    private long lastPushRegisterSendTime;
    private LongSparseArray<Long> lastScheduledServerQueryTime = new LongSparseArray<>();
    private LongSparseArray<Long> lastServerQueryTime = new LongSparseArray<>();
    private long lastStatusUpdateTime;
    private long lastViewsCheckTime;
    public String linkPrefix;
    private ArrayList<Long> loadedFullChats = new ArrayList<>();
    private ArrayList<Long> loadedFullParticipants = new ArrayList<>();
    private ArrayList<Long> loadedFullUsers = new ArrayList<>();
    private boolean loadingAppConfig;
    public boolean loadingBlockedPeers = false;
    private LongSparseIntArray loadingChannelAdmins = new LongSparseIntArray();
    private SparseBooleanArray loadingDialogs = new SparseBooleanArray();
    private ArrayList<Long> loadingFullChats = new ArrayList<>();
    private ArrayList<Long> loadingFullParticipants = new ArrayList<>();
    private ArrayList<Long> loadingFullUsers = new ArrayList<>();
    private ArrayList<Long> loadingGroupCalls = new ArrayList<>();
    private int loadingNotificationSettings;
    private boolean loadingNotificationSignUpSettings;
    private LongSparseArray<Boolean> loadingPeerSettings = new LongSparseArray<>();
    private SparseIntArray loadingPinnedDialogs;
    private boolean loadingRemoteFilters;
    private boolean loadingSuggestedFilters;
    private boolean loadingUnreadDialogs;
    private SharedPreferences mainPreferences;
    public String mapKey;
    public int mapProvider;
    public int maxBroadcastCount;
    public int maxCaptionLength;
    public int maxEditTime;
    public int maxFaveStickersCount;
    public int maxFolderPinnedDialogsCount;
    public int maxGroupCount;
    public int maxMegagroupCount;
    public int maxMessageLength;
    public int maxPinnedDialogsCount;
    public int maxRecentGifsCount;
    public int maxRecentStickersCount;
    private SparseIntArray migratedChats = new SparseIntArray();
    private boolean migratingDialogs;
    public int minGroupConvertSize;
    private LongSparseArray<ArrayList<Integer>> needShortPollChannels = new LongSparseArray<>();
    private LongSparseArray<ArrayList<Integer>> needShortPollOnlines = new LongSparseArray<>();
    private SparseIntArray nextDialogsCacheOffset = new SparseIntArray();
    private int nextPromoInfoCheckTime;
    private int nextTosCheckTime;
    private SharedPreferences notificationsPreferences;
    private ConcurrentHashMap<String, TLObject> objectsByUsernames = new ConcurrentHashMap<>(100, 1.0f, 2);
    private boolean offlineSent;
    public ConcurrentHashMap<Long, Integer> onlinePrivacy = new ConcurrentHashMap<>(20, 1.0f, 2);
    private Runnable passwordCheckRunnable;
    public Set<String> pendingSuggestions;
    private LongSparseArray<SparseArray<MessageObject>> pollsToCheck = new LongSparseArray<>();
    private int pollsToCheckSize;
    public boolean preloadFeaturedStickers;
    public String premiumBotUsername;
    public SparseIntArray premiumFeaturesTypesToPosition = new SparseIntArray();
    public String premiumInvoiceSlug;
    public boolean premiumLocked;
    public LongSparseArray<SparseArray<CharSequence>> printingStrings = new LongSparseArray<>();
    public LongSparseArray<SparseArray<Integer>> printingStringsTypes = new LongSparseArray<>();
    public ConcurrentHashMap<Long, ConcurrentHashMap<Integer, ArrayList<PrintingUser>>> printingUsers = new ConcurrentHashMap<>(20, 1.0f, 2);
    private TLRPC.Dialog promoDialog;
    private long promoDialogId;
    public int promoDialogType;
    public String promoPsaMessage;
    public String promoPsaType;
    private String proxyDialogAddress;
    public int publicLinksLimitDefault;
    public int publicLinksLimitPremium;
    public boolean qrLoginCamera;
    public int ratingDecay;
    private ArrayList<ReadTask> readTasks = new ArrayList<>();
    private LongSparseArray<ReadTask> readTasksMap = new LongSparseArray<>();
    public boolean registeringForPush;
    private LongSparseArray<ArrayList<Integer>> reloadingMessages = new LongSparseArray<>();
    private HashMap<String, ArrayList<MessageObject>> reloadingScheduledWebpages = new HashMap<>();
    private LongSparseArray<ArrayList<MessageObject>> reloadingScheduledWebpagesPending = new LongSparseArray<>();
    private HashMap<String, ArrayList<MessageObject>> reloadingWebpages = new HashMap<>();
    private LongSparseArray<ArrayList<MessageObject>> reloadingWebpagesPending = new LongSparseArray<>();
    public boolean remoteConfigLoaded;
    private ArrayList<ReadTask> repliesReadTasks = new ArrayList<>();
    private TLRPC.messages_Dialogs resetDialogsAll;
    private TLRPC.TL_messages_peerDialogs resetDialogsPinned;
    private boolean resetingDialogs;
    public int revokeTimeLimit;
    public int revokeTimePmLimit;
    public int ringtoneDurationMax;
    public int ringtoneSizeMax;
    public int roundAudioBitrate;
    public int roundVideoBitrate;
    public int roundVideoSize;
    public boolean saveGifsWithStickers;
    public int savedGifsLimitDefault;
    public int savedGifsLimitPremium;
    public int secretWebpagePreview;
    public DialogFilter[] selectedDialogFilter = new DialogFilter[2];
    private LongSparseArray<SendAsPeersInfo> sendAsPeers = new LongSparseArray<>();
    public LongSparseArray<SparseArray<Boolean>>[] sendingTypings = new LongSparseArray[12];
    private SparseBooleanArray serverDialogsEndReached = new SparseBooleanArray();
    private LongSparseIntArray shortPollChannels = new LongSparseIntArray();
    private LongSparseIntArray shortPollOnlines = new LongSparseIntArray();
    public boolean showFiltersTooltip;
    private DialogFilter sortingDialogFilter;
    private LongSparseArray<SponsoredMessagesInfo> sponsoredMessages = new LongSparseArray<>();
    private int statusRequest;
    private int statusSettingState;
    public int stickersFavedLimitDefault;
    public int stickersFavedLimitPremium;
    public boolean suggestContacts;
    public boolean suggestStickersApiOnly;
    public ArrayList<TLRPC.TL_dialogFilterSuggested> suggestedFilters = new ArrayList<>();
    public String suggestedLangCode;
    private Runnable themeCheckRunnable;
    private HashMap<String, ReadTask> threadsReadTasksMap = new HashMap<>();
    public int totalBlockedCount = -1;
    public int unreadUnmutedDialogs;
    public int updateCheckDelay;
    private Comparator<TLRPC.Update> updatesComparator;
    private LongSparseArray<ArrayList<TLRPC.Updates>> updatesQueueChannels = new LongSparseArray<>();
    private ArrayList<TLRPC.Updates> updatesQueuePts = new ArrayList<>();
    private ArrayList<TLRPC.Updates> updatesQueueQts = new ArrayList<>();
    private ArrayList<TLRPC.Updates> updatesQueueSeq = new ArrayList<>();
    private LongSparseLongArray updatesStartWaitTimeChannels = new LongSparseLongArray();
    private long updatesStartWaitTimePts;
    private long updatesStartWaitTimeQts;
    private long updatesStartWaitTimeSeq;
    public boolean updatingState;
    public int uploadMaxFileParts;
    public int uploadMaxFilePartsPremium;
    private String uploadingAvatar;
    private HashMap<String, Object> uploadingThemes;
    private String uploadingWallpaper;
    private Theme.OverrideWallpaperInfo uploadingWallpaperInfo;
    private ConcurrentHashMap<Long, TLRPC.User> users = new ConcurrentHashMap<>(100, 1.0f, 2);
    public String venueSearchBot;
    private ArrayList<Long> visibleDialogMainThreadIds = new ArrayList<>();
    private ArrayList<Long> visibleScheduledDialogMainThreadIds = new ArrayList<>();
    public int webFileDatacenterId;
    public String youtubePipType;

    public interface ErrorDelegate {
        boolean run(TLRPC.TL_error tL_error);
    }

    public interface IsInChatCheckedCallback {
        void run(boolean z, TLRPC.TL_chatAdminRights tL_chatAdminRights, String str);
    }

    public interface MessagesLoadedCallback {
        void onError();

        void onMessagesLoaded(boolean z);
    }

    public static class PrintingUser {
        public TLRPC.SendMessageAction action;
        public long lastTime;
        public long userId;
    }

    /* renamed from: lambda$new$0$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m300lambda$new$0$orgtelegrammessengerMessagesController() {
        getUserConfig().checkSavedPassword();
    }

    public void getNextReactionMention(long dialogId, int count, Consumer<Integer> callback) {
        getMessagesStorage().getStorageQueue().postRunnable(new MessagesController$$ExternalSyntheticLambda336(this, dialogId, callback, count));
    }

    /* renamed from: lambda$getNextReactionMention$5$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m234xvar_aaac7(long dialogId, Consumer callback, int count) {
        boolean needRequest = true;
        try {
            SQLiteCursor cursor = getMessagesStorage().getDatabase().queryFinalized(String.format(Locale.US, "SELECT message_id FROM reaction_mentions WHERE state = 1 AND dialog_id = %d LIMIT 1", new Object[]{Long.valueOf(dialogId)}), new Object[0]);
            int messageId = 0;
            if (cursor.next()) {
                messageId = cursor.intValue(0);
                needRequest = false;
            }
            cursor.dispose();
            if (messageId != 0) {
                getMessagesStorage().markMessageReactionsAsRead(dialogId, messageId, false);
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda328(callback, messageId));
            }
        } catch (SQLiteException e) {
            e.printStackTrace();
        }
        if (needRequest) {
            TLRPC.TL_messages_getUnreadReactions req = new TLRPC.TL_messages_getUnreadReactions();
            req.peer = getMessagesController().getInputPeer(dialogId);
            req.limit = 1;
            req.add_offset = count - 1;
            getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda145(callback));
        }
    }

    static /* synthetic */ void lambda$getNextReactionMention$3(TLObject response, TLRPC.TL_error error, Consumer callback) {
        TLRPC.messages_Messages res = (TLRPC.messages_Messages) response;
        int messageId = 0;
        if (!(error == null || res == null || res.messages == null || res.messages.isEmpty())) {
            messageId = res.messages.get(0).id;
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda339(callback, messageId));
    }

    public void updatePremium(boolean premium) {
        if (!this.dialogFilters.isEmpty()) {
            if (!premium) {
                if (!this.dialogFilters.get(0).isDefault()) {
                    int i = 1;
                    while (true) {
                        if (i >= this.dialogFilters.size()) {
                            break;
                        } else if (this.dialogFilters.get(i).isDefault()) {
                            this.dialogFilters.add(0, this.dialogFilters.remove(i));
                            break;
                        } else {
                            i++;
                        }
                    }
                }
                lockFiltersInternal();
            } else {
                for (int i2 = 0; i2 < this.dialogFilters.size(); i2++) {
                    this.dialogFilters.get(i2).locked = false;
                }
            }
            getMessagesStorage().saveDialogFiltersOrder();
            getNotificationCenter().postNotificationName(NotificationCenter.dialogFiltersUpdated, new Object[0]);
        }
    }

    public void lockFiltersInternal() {
        boolean changed = false;
        if (!getUserConfig().isPremium() && this.dialogFilters.size() - 1 > this.dialogFiltersLimitDefault) {
            int n = (this.dialogFilters.size() - 1) - this.dialogFiltersLimitDefault;
            ArrayList<DialogFilter> filtersSortedById = new ArrayList<>(this.dialogFilters);
            Collections.reverse(filtersSortedById);
            for (int i = 0; i < filtersSortedById.size(); i++) {
                if (i < n) {
                    if (!filtersSortedById.get(i).locked) {
                        changed = true;
                    }
                    filtersSortedById.get(i).locked = true;
                } else {
                    if (filtersSortedById.get(i).locked) {
                        changed = true;
                    }
                    filtersSortedById.get(i).locked = false;
                }
            }
        }
        if (changed) {
            getNotificationCenter().postNotificationName(NotificationCenter.dialogFiltersUpdated, new Object[0]);
        }
    }

    public int getCaptionMaxLengthLimit() {
        return getUserConfig().isPremium() ? this.captionLengthLimitPremium : this.captionLengthLimitDefault;
    }

    public int getAboutLimit() {
        return getUserConfig().isPremium() ? this.aboutLengthLimitPremium : this.aboutLengthLimitDefault;
    }

    public boolean isPremiumUser(TLRPC.User currentUser) {
        return !this.premiumLocked && currentUser.premium;
    }

    public ArrayList<TLRPC.TL_messages_stickerSet> filterPremiumStickers(ArrayList<TLRPC.TL_messages_stickerSet> stickerSets) {
        if (!this.premiumLocked) {
            return stickerSets;
        }
        int i = 0;
        while (i < stickerSets.size()) {
            TLRPC.TL_messages_stickerSet newSet = getInstance(this.currentAccount).filterPremiumStickers(stickerSets.get(i));
            if (newSet == null) {
                stickerSets.remove(i);
                i--;
            } else {
                stickerSets.set(i, newSet);
            }
            i++;
        }
        return stickerSets;
    }

    public TLRPC.TL_messages_stickerSet filterPremiumStickers(TLRPC.TL_messages_stickerSet stickerSet) {
        if (!this.premiumLocked || stickerSet == null) {
            return stickerSet;
        }
        boolean hasPremiumSticker = false;
        int i = 0;
        while (true) {
            try {
                if (i >= stickerSet.documents.size()) {
                    break;
                } else if (MessageObject.isPremiumSticker((TLRPC.Document) stickerSet.documents.get(i))) {
                    hasPremiumSticker = true;
                    break;
                } else {
                    i++;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        if (hasPremiumSticker) {
            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(stickerSet.getObjectSize());
            stickerSet.serializeToStream(nativeByteBuffer);
            nativeByteBuffer.position(0);
            TLRPC.TL_messages_stickerSet newStickersSet = new TLRPC.TL_messages_stickerSet();
            nativeByteBuffer.readInt32(true);
            newStickersSet.readParams(nativeByteBuffer, true);
            nativeByteBuffer.reuse();
            stickerSet = newStickersSet;
            int i2 = 0;
            while (i2 < stickerSet.documents.size()) {
                if (MessageObject.isPremiumSticker((TLRPC.Document) stickerSet.documents.get(i2))) {
                    stickerSet.documents.remove(i2);
                    stickerSet.packs.remove(i2);
                    i2--;
                    if (stickerSet.documents.isEmpty()) {
                        return null;
                    }
                }
                i2++;
            }
        }
        return stickerSet;
    }

    private class SponsoredMessagesInfo {
        /* access modifiers changed from: private */
        public long loadTime;
        /* access modifiers changed from: private */
        public boolean loading;
        /* access modifiers changed from: private */
        public ArrayList<MessageObject> messages;

        private SponsoredMessagesInfo() {
        }
    }

    private class SendAsPeersInfo {
        /* access modifiers changed from: private */
        public long loadTime;
        /* access modifiers changed from: private */
        public boolean loading;
        /* access modifiers changed from: private */
        public TLRPC.TL_channels_sendAsPeers sendAsPeers;

        private SendAsPeersInfo() {
        }
    }

    public static class FaqSearchResult {
        public int num;
        public String[] path;
        public String title;
        public String url;

        public FaqSearchResult(String t, String[] p, String u) {
            this.title = t;
            this.path = p;
            this.url = u;
        }

        public boolean equals(Object obj) {
            if (!(obj instanceof FaqSearchResult)) {
                return false;
            }
            return this.title.equals(((FaqSearchResult) obj).title);
        }

        public String toString() {
            SerializedData data = new SerializedData();
            data.writeInt32(this.num);
            int i = 0;
            data.writeInt32(0);
            data.writeString(this.title);
            String[] strArr = this.path;
            if (strArr != null) {
                i = strArr.length;
            }
            data.writeInt32(i);
            if (this.path != null) {
                int a = 0;
                while (true) {
                    String[] strArr2 = this.path;
                    if (a >= strArr2.length) {
                        break;
                    }
                    data.writeString(strArr2[a]);
                    a++;
                }
            }
            data.writeString(this.url);
            return Utilities.bytesToHex(data.toByteArray());
        }
    }

    public static class EmojiSound {
        public long accessHash;
        public byte[] fileReference;
        public long id;

        public EmojiSound(long i, long ah, String fr) {
            this.id = i;
            this.accessHash = ah;
            this.fileReference = Base64.decode(fr, 8);
        }

        public EmojiSound(long i, long ah, byte[] fr) {
            this.id = i;
            this.accessHash = ah;
            this.fileReference = fr;
        }

        public boolean equals(Object obj) {
            if (!(obj instanceof EmojiSound)) {
                return false;
            }
            EmojiSound emojiSound = (EmojiSound) obj;
            if (this.id == emojiSound.id && this.accessHash == emojiSound.accessHash && Arrays.equals(this.fileReference, emojiSound.fileReference)) {
                return true;
            }
            return false;
        }
    }

    public void clearQueryTime() {
        this.lastServerQueryTime.clear();
        this.lastScheduledServerQueryTime.clear();
    }

    public static class DiceFrameSuccess {
        public int frame;
        public int num;

        public DiceFrameSuccess(int f, int n) {
            this.frame = f;
            this.num = n;
        }

        public boolean equals(Object obj) {
            if (!(obj instanceof DiceFrameSuccess)) {
                return false;
            }
            DiceFrameSuccess frameSuccess = (DiceFrameSuccess) obj;
            if (this.frame == frameSuccess.frame && this.num == frameSuccess.num) {
                return true;
            }
            return false;
        }
    }

    private static class UserActionUpdatesSeq extends TLRPC.Updates {
        private UserActionUpdatesSeq() {
        }
    }

    private static class UserActionUpdatesPts extends TLRPC.Updates {
        private UserActionUpdatesPts() {
        }
    }

    static {
        for (int i = 0; i < 4; i++) {
            lockObjects[i] = new Object();
        }
    }

    private static class ReadTask {
        public long dialogId;
        public int maxDate;
        public int maxId;
        public long replyId;
        public long sendRequestTime;

        private ReadTask() {
        }
    }

    public static class DialogFilter {
        private static int dialogFilterPointer = 10;
        public ArrayList<Long> alwaysShow = new ArrayList<>();
        public ArrayList<TLRPC.Dialog> dialogs = new ArrayList<>();
        public int flags;
        public int id;
        public int localId;
        public boolean locked;
        public String name;
        public ArrayList<Long> neverShow = new ArrayList<>();
        public int order;
        public volatile int pendingUnreadCount;
        public LongSparseIntArray pinnedDialogs = new LongSparseIntArray();
        public int unreadCount;

        public DialogFilter() {
            int i = dialogFilterPointer;
            dialogFilterPointer = i + 1;
            this.localId = i;
        }

        public boolean includesDialog(AccountInstance accountInstance, long dialogId) {
            TLRPC.Dialog dialog = accountInstance.getMessagesController().dialogs_dict.get(dialogId);
            if (dialog == null) {
                return false;
            }
            return includesDialog(accountInstance, dialogId, dialog);
        }

        public boolean includesDialog(AccountInstance accountInstance, long dialogId, TLRPC.Dialog d) {
            TLRPC.Chat chat;
            if (this.neverShow.contains(Long.valueOf(dialogId))) {
                return false;
            }
            if (this.alwaysShow.contains(Long.valueOf(dialogId))) {
                return true;
            }
            if (d.folder_id != 0 && (this.flags & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED) != 0) {
                return false;
            }
            MessagesController messagesController = accountInstance.getMessagesController();
            ContactsController contactsController = accountInstance.getContactsController();
            if (((this.flags & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED) != 0 && messagesController.isDialogMuted(d.id) && d.unread_mentions_count == 0) || ((this.flags & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0 && d.unread_count == 0 && !d.unread_mark && d.unread_mentions_count == 0)) {
                return false;
            }
            if (dialogId > 0) {
                TLRPC.User user = messagesController.getUser(Long.valueOf(dialogId));
                if (user != null) {
                    if (!user.bot) {
                        if (user.self || user.contact || contactsController.isContact(dialogId)) {
                            if ((this.flags & MessagesController.DIALOG_FILTER_FLAG_CONTACTS) != 0) {
                                return true;
                            }
                        } else if ((this.flags & MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS) != 0) {
                            return true;
                        }
                    } else if ((this.flags & MessagesController.DIALOG_FILTER_FLAG_BOTS) != 0) {
                        return true;
                    }
                }
            } else if (dialogId < 0 && (chat = messagesController.getChat(Long.valueOf(-dialogId))) != null) {
                if (!ChatObject.isChannel(chat) || chat.megagroup) {
                    if ((this.flags & MessagesController.DIALOG_FILTER_FLAG_GROUPS) != 0) {
                        return true;
                    }
                } else if ((this.flags & MessagesController.DIALOG_FILTER_FLAG_CHANNELS) != 0) {
                    return true;
                }
            }
            return false;
        }

        public boolean alwaysShow(int currentAccount, TLRPC.Dialog dialog) {
            TLRPC.EncryptedChat encryptedChat;
            if (dialog == null) {
                return false;
            }
            long dialogId = dialog.id;
            if (DialogObject.isEncryptedDialog(dialog.id) && (encryptedChat = MessagesController.getInstance(currentAccount).getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(dialogId)))) != null) {
                dialogId = encryptedChat.user_id;
            }
            return this.alwaysShow.contains(Long.valueOf(dialogId));
        }

        public boolean isDefault() {
            return this.id == 0;
        }
    }

    /* renamed from: lambda$new$6$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ int m302lambda$new$6$orgtelegrammessengerMessagesController(TLRPC.Dialog dialog1, TLRPC.Dialog dialog2) {
        int pinnedNum1 = this.sortingDialogFilter.pinnedDialogs.get(dialog1.id, Integer.MIN_VALUE);
        int pinnedNum2 = this.sortingDialogFilter.pinnedDialogs.get(dialog2.id, Integer.MIN_VALUE);
        if ((dialog1 instanceof TLRPC.TL_dialogFolder) && !(dialog2 instanceof TLRPC.TL_dialogFolder)) {
            return -1;
        }
        if (!(dialog1 instanceof TLRPC.TL_dialogFolder) && (dialog2 instanceof TLRPC.TL_dialogFolder)) {
            return 1;
        }
        if (pinnedNum1 == Integer.MIN_VALUE && pinnedNum2 != Integer.MIN_VALUE) {
            return 1;
        }
        if (pinnedNum1 != Integer.MIN_VALUE && pinnedNum2 == Integer.MIN_VALUE) {
            return -1;
        }
        if (pinnedNum1 == Integer.MIN_VALUE) {
            MediaDataController mediaDataController = getMediaDataController();
            long date1 = DialogObject.getLastMessageOrDraftDate(dialog1, mediaDataController.getDraft(dialog1.id, 0));
            long date2 = DialogObject.getLastMessageOrDraftDate(dialog2, mediaDataController.getDraft(dialog2.id, 0));
            if (date1 < date2) {
                return 1;
            }
            if (date1 > date2) {
                return -1;
            }
            return 0;
        } else if (pinnedNum1 > pinnedNum2) {
            return 1;
        } else {
            if (pinnedNum1 < pinnedNum2) {
                return -1;
            }
            return 0;
        }
    }

    /* renamed from: lambda$new$7$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ int m303lambda$new$7$orgtelegrammessengerMessagesController(TLRPC.Dialog dialog1, TLRPC.Dialog dialog2) {
        if ((dialog1 instanceof TLRPC.TL_dialogFolder) && !(dialog2 instanceof TLRPC.TL_dialogFolder)) {
            return -1;
        }
        if (!(dialog1 instanceof TLRPC.TL_dialogFolder) && (dialog2 instanceof TLRPC.TL_dialogFolder)) {
            return 1;
        }
        if (!dialog1.pinned && dialog2.pinned) {
            return 1;
        }
        if (dialog1.pinned && !dialog2.pinned) {
            return -1;
        }
        if (!dialog1.pinned) {
            MediaDataController mediaDataController = getMediaDataController();
            long date1 = DialogObject.getLastMessageOrDraftDate(dialog1, mediaDataController.getDraft(dialog1.id, 0));
            long date2 = DialogObject.getLastMessageOrDraftDate(dialog2, mediaDataController.getDraft(dialog2.id, 0));
            if (date1 < date2) {
                return 1;
            }
            if (date1 > date2) {
                return -1;
            }
            return 0;
        } else if (dialog1.pinnedNum < dialog2.pinnedNum) {
            return 1;
        } else {
            if (dialog1.pinnedNum > dialog2.pinnedNum) {
                return -1;
            }
            return 0;
        }
    }

    /* renamed from: lambda$new$8$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ int m304lambda$new$8$orgtelegrammessengerMessagesController(TLRPC.Update lhs, TLRPC.Update rhs) {
        int ltype = getUpdateType(lhs);
        int rtype = getUpdateType(rhs);
        if (ltype != rtype) {
            return AndroidUtilities.compare(ltype, rtype);
        }
        if (ltype == 0) {
            return AndroidUtilities.compare(getUpdatePts(lhs), getUpdatePts(rhs));
        }
        if (ltype == 1) {
            return AndroidUtilities.compare(getUpdateQts(lhs), getUpdateQts(rhs));
        }
        if (ltype != 2) {
            return 0;
        }
        long lChannel = getUpdateChannelId(lhs);
        long rChannel = getUpdateChannelId(rhs);
        if (lChannel == rChannel) {
            return AndroidUtilities.compare(getUpdatePts(lhs), getUpdatePts(rhs));
        }
        return AndroidUtilities.compare(lChannel, rChannel);
    }

    public static MessagesController getInstance(int num) {
        MessagesController localInstance = Instance[num];
        if (localInstance == null) {
            synchronized (lockObjects[num]) {
                localInstance = Instance[num];
                if (localInstance == null) {
                    MessagesController[] messagesControllerArr = Instance;
                    MessagesController messagesController = new MessagesController(num);
                    localInstance = messagesController;
                    messagesControllerArr[num] = messagesController;
                }
            }
        }
        return localInstance;
    }

    public static SharedPreferences getNotificationsSettings(int account) {
        return getInstance(account).notificationsPreferences;
    }

    public static SharedPreferences getGlobalNotificationsSettings() {
        return getInstance(0).notificationsPreferences;
    }

    public static SharedPreferences getMainSettings(int account) {
        return getInstance(account).mainPreferences;
    }

    public static SharedPreferences getGlobalMainSettings() {
        return getInstance(0).mainPreferences;
    }

    public static SharedPreferences getEmojiSettings(int account) {
        return getInstance(account).emojiPreferences;
    }

    public static SharedPreferences getGlobalEmojiSettings() {
        return getInstance(0).emojiPreferences;
    }

    /* JADX INFO: super call moved to the top of the method (can break code semantics) */
    public MessagesController(int num) {
        super(num);
        boolean z = true;
        this.getDifferenceFirstSync = true;
        this.loadingPinnedDialogs = new SparseIntArray();
        this.faqSearchArray = new ArrayList<>();
        this.suggestContacts = true;
        this.themeCheckRunnable = MessagesController$$ExternalSyntheticLambda132.INSTANCE;
        this.passwordCheckRunnable = new MessagesController$$ExternalSyntheticLambda133(this);
        this.uploadingThemes = new HashMap<>();
        this.maxBroadcastCount = 100;
        this.minGroupConvertSize = 200;
        this.gifSearchEmojies = new ArrayList<>();
        this.diceSuccess = new HashMap<>();
        this.emojiSounds = new HashMap<>();
        this.emojiInteractions = new HashMap<>();
        this.dialogDateComparator = new MessagesController$$ExternalSyntheticLambda134(this);
        this.dialogComparator = new MessagesController$$ExternalSyntheticLambda135(this);
        this.updatesComparator = new MessagesController$$ExternalSyntheticLambda136(this);
        this.DIALOGS_LOAD_TYPE_CACHE = 1;
        this.DIALOGS_LOAD_TYPE_CHANNEL = 2;
        this.DIALOGS_LOAD_TYPE_UNKNOWN = 3;
        ImageLoader.getInstance();
        getMessagesStorage();
        getLocationController();
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda155(this));
        addSupportUser();
        if (this.currentAccount == 0) {
            this.notificationsPreferences = ApplicationLoader.applicationContext.getSharedPreferences("Notifications", 0);
            this.mainPreferences = ApplicationLoader.applicationContext.getSharedPreferences("mainconfig", 0);
            this.emojiPreferences = ApplicationLoader.applicationContext.getSharedPreferences("emoji", 0);
        } else {
            Context context = ApplicationLoader.applicationContext;
            this.notificationsPreferences = context.getSharedPreferences("Notifications" + this.currentAccount, 0);
            Context context2 = ApplicationLoader.applicationContext;
            this.mainPreferences = context2.getSharedPreferences("mainconfig" + this.currentAccount, 0);
            Context context3 = ApplicationLoader.applicationContext;
            this.emojiPreferences = context3.getSharedPreferences("emoji" + this.currentAccount, 0);
        }
        this.enableJoined = this.notificationsPreferences.getBoolean("EnableContactJoined", true);
        this.remoteConfigLoaded = this.mainPreferences.getBoolean("remoteConfigLoaded", false);
        this.secretWebpagePreview = this.mainPreferences.getInt("secretWebpage2", 2);
        this.maxGroupCount = this.mainPreferences.getInt("maxGroupCount", 200);
        this.maxMegagroupCount = this.mainPreferences.getInt("maxMegagroupCount", 10000);
        this.maxRecentGifsCount = this.mainPreferences.getInt("maxRecentGifsCount", 200);
        this.maxRecentStickersCount = this.mainPreferences.getInt("maxRecentStickersCount", 30);
        this.maxFaveStickersCount = this.mainPreferences.getInt("maxFaveStickersCount", 5);
        this.maxEditTime = this.mainPreferences.getInt("maxEditTime", 3600);
        this.ratingDecay = this.mainPreferences.getInt("ratingDecay", 2419200);
        this.linkPrefix = this.mainPreferences.getString("linkPrefix", "t.me");
        this.callReceiveTimeout = this.mainPreferences.getInt("callReceiveTimeout", 20000);
        this.callRingTimeout = this.mainPreferences.getInt("callRingTimeout", 90000);
        this.callConnectTimeout = this.mainPreferences.getInt("callConnectTimeout", 30000);
        this.callPacketTimeout = this.mainPreferences.getInt("callPacketTimeout", 10000);
        this.updateCheckDelay = this.mainPreferences.getInt("updateCheckDelay", 86400);
        this.maxPinnedDialogsCount = this.mainPreferences.getInt("maxPinnedDialogsCount", 5);
        this.maxFolderPinnedDialogsCount = this.mainPreferences.getInt("maxFolderPinnedDialogsCount", 100);
        this.maxMessageLength = this.mainPreferences.getInt("maxMessageLength", 4096);
        this.maxCaptionLength = this.mainPreferences.getInt("maxCaptionLength", 1024);
        this.mapProvider = this.mainPreferences.getInt("mapProvider", 0);
        this.availableMapProviders = this.mainPreferences.getInt("availableMapProviders", 3);
        this.mapKey = this.mainPreferences.getString("pk", (String) null);
        this.installReferer = this.mainPreferences.getString("installReferer", (String) null);
        this.revokeTimeLimit = this.mainPreferences.getInt("revokeTimeLimit", this.revokeTimeLimit);
        this.revokeTimePmLimit = this.mainPreferences.getInt("revokeTimePmLimit", this.revokeTimePmLimit);
        this.canRevokePmInbox = this.mainPreferences.getBoolean("canRevokePmInbox", this.canRevokePmInbox);
        this.preloadFeaturedStickers = this.mainPreferences.getBoolean("preloadFeaturedStickers", false);
        this.youtubePipType = this.mainPreferences.getString("youtubePipType", "disabled");
        this.keepAliveService = this.mainPreferences.getBoolean("keepAliveService", false);
        this.backgroundConnection = this.mainPreferences.getBoolean("keepAliveService", false);
        this.promoDialogId = this.mainPreferences.getLong("proxy_dialog", 0);
        this.nextPromoInfoCheckTime = this.mainPreferences.getInt("nextPromoInfoCheckTime", 0);
        this.promoDialogType = this.mainPreferences.getInt("promo_dialog_type", 0);
        this.promoPsaMessage = this.mainPreferences.getString("promo_psa_message", (String) null);
        this.promoPsaType = this.mainPreferences.getString("promo_psa_type", (String) null);
        this.proxyDialogAddress = this.mainPreferences.getString("proxyDialogAddress", (String) null);
        this.nextTosCheckTime = this.notificationsPreferences.getInt("nextTosCheckTime", 0);
        this.venueSearchBot = this.mainPreferences.getString("venueSearchBot", "foursquare");
        this.gifSearchBot = this.mainPreferences.getString("gifSearchBot", "gif");
        this.imageSearchBot = this.mainPreferences.getString("imageSearchBot", "pic");
        this.blockedCountry = this.mainPreferences.getBoolean("blockedCountry", false);
        this.dcDomainName = this.mainPreferences.getString("dcDomainName2", ConnectionsManager.native_isTestBackend(this.currentAccount) != 0 ? "tapv3.stel.com" : "apv3.stel.com");
        this.webFileDatacenterId = this.mainPreferences.getInt("webFileDatacenterId", ConnectionsManager.native_isTestBackend(this.currentAccount) != 0 ? 2 : 4);
        this.suggestedLangCode = this.mainPreferences.getString("suggestedLangCode", "en");
        this.animatedEmojisZoom = this.mainPreferences.getFloat("animatedEmojisZoom", 0.625f);
        this.qrLoginCamera = this.mainPreferences.getBoolean("qrLoginCamera", false);
        this.saveGifsWithStickers = this.mainPreferences.getBoolean("saveGifsWithStickers", false);
        this.filtersEnabled = this.mainPreferences.getBoolean("filtersEnabled", false);
        this.getfileExperimentalParams = this.mainPreferences.getBoolean("getfileExperimentalParams", false);
        this.showFiltersTooltip = this.mainPreferences.getBoolean("showFiltersTooltip", false);
        this.autoarchiveAvailable = this.mainPreferences.getBoolean("autoarchiveAvailable", false);
        this.groupCallVideoMaxParticipants = this.mainPreferences.getInt("groipCallVideoMaxParticipants", 30);
        this.chatReadMarkSizeThreshold = this.mainPreferences.getInt("chatReadMarkSizeThreshold", 100);
        this.chatReadMarkExpirePeriod = this.mainPreferences.getInt("chatReadMarkExpirePeriod", 604800);
        this.ringtoneDurationMax = this.mainPreferences.getInt("ringtoneDurationMax", 5);
        this.ringtoneSizeMax = this.mainPreferences.getInt("ringtoneSizeMax", 102400);
        this.chatReadMarkExpirePeriod = this.mainPreferences.getInt("chatReadMarkExpirePeriod", 604800);
        this.suggestStickersApiOnly = this.mainPreferences.getBoolean("suggestStickersApiOnly", false);
        this.roundVideoSize = this.mainPreferences.getInt("roundVideoSize", 384);
        this.roundVideoBitrate = this.mainPreferences.getInt("roundVideoBitrate", 1000);
        this.roundAudioBitrate = this.mainPreferences.getInt("roundAudioBitrate", 64);
        this.pendingSuggestions = this.mainPreferences.getStringSet("pendingSuggestions", (Set) null);
        int i = this.mainPreferences.getInt("channelsLimitDefault", 500);
        this.channelsLimitDefault = i;
        this.channelsLimitPremium = this.mainPreferences.getInt("channelsLimitPremium", i * 2);
        this.savedGifsLimitDefault = this.mainPreferences.getInt("savedGifsLimitDefault", 200);
        this.savedGifsLimitPremium = this.mainPreferences.getInt("savedGifsLimitPremium", 400);
        this.stickersFavedLimitDefault = this.mainPreferences.getInt("stickersFavedLimitDefault", 5);
        this.stickersFavedLimitPremium = this.mainPreferences.getInt("stickersFavedLimitPremium", 200);
        this.dialogFiltersLimitDefault = this.mainPreferences.getInt("dialogFiltersLimitDefault", 10);
        this.dialogFiltersLimitPremium = this.mainPreferences.getInt("dialogFiltersLimitPremium", 20);
        this.dialogFiltersChatsLimitDefault = this.mainPreferences.getInt("dialogFiltersChatsLimitDefault", 100);
        this.dialogFiltersChatsLimitPremium = this.mainPreferences.getInt("dialogFiltersChatsLimitPremium", 200);
        this.dialogFiltersPinnedLimitDefault = this.mainPreferences.getInt("dialogFiltersPinnedLimitDefault", 5);
        this.dialogFiltersPinnedLimitPremium = this.mainPreferences.getInt("dialogFiltersPinnedLimitPremium", 10);
        this.publicLinksLimitDefault = this.mainPreferences.getInt("publicLinksLimitDefault", 10);
        this.publicLinksLimitPremium = this.mainPreferences.getInt("publicLinksLimitPremium", 20);
        this.captionLengthLimitDefault = this.mainPreferences.getInt("captionLengthLimitDefault", 1024);
        this.captionLengthLimitPremium = this.mainPreferences.getInt("captionLengthLimitPremium", 4096);
        this.aboutLengthLimitDefault = this.mainPreferences.getInt("aboutLengthLimitDefault", 70);
        this.aboutLengthLimitPremium = this.mainPreferences.getInt("aboutLengthLimitPremium", 140);
        int i2 = this.mainPreferences.getInt("uploadMaxFileParts", 4000);
        this.uploadMaxFileParts = i2;
        this.uploadMaxFilePartsPremium = this.mainPreferences.getInt("uploadMaxFilePartsPremium", i2 * 2);
        this.premiumInvoiceSlug = this.mainPreferences.getString("premiumInvoiceSlug", (String) null);
        this.premiumBotUsername = this.mainPreferences.getString("premiumBotUsername", (String) null);
        this.premiumLocked = this.mainPreferences.getBoolean("premiumLocked", false);
        loadPremiumFeaturesPreviewOrder(this.mainPreferences.getString("premiumFeaturesTypesToPosition", (String) null));
        if (this.pendingSuggestions != null) {
            this.pendingSuggestions = new HashSet(this.pendingSuggestions);
        } else {
            this.pendingSuggestions = new HashSet();
        }
        Set<String> stringSet = this.mainPreferences.getStringSet("exportUri2", (Set) null);
        this.exportUri = stringSet;
        if (stringSet != null) {
            this.exportUri = new HashSet(this.exportUri);
        } else {
            HashSet hashSet = new HashSet();
            this.exportUri = hashSet;
            hashSet.add("content://(\\d+@)?com\\.whatsapp\\.provider\\.media/export_chat/");
            this.exportUri.add("content://(\\d+@)?com\\.whatsapp\\.w4b\\.provider\\.media/export_chat/");
            this.exportUri.add("content://jp\\.naver\\.line\\.android\\.line\\.common\\.FileProvider/export-chat/");
            this.exportUri.add(".*WhatsApp.*\\.txt$");
        }
        Set<String> stringSet2 = this.mainPreferences.getStringSet("exportGroupUri", (Set) null);
        this.exportGroupUri = stringSet2;
        if (stringSet2 != null) {
            this.exportGroupUri = new HashSet(this.exportGroupUri);
        } else {
            HashSet hashSet2 = new HashSet();
            this.exportGroupUri = hashSet2;
            hashSet2.add("@g.us/");
        }
        Set<String> stringSet3 = this.mainPreferences.getStringSet("exportPrivateUri", (Set) null);
        this.exportPrivateUri = stringSet3;
        if (stringSet3 != null) {
            this.exportPrivateUri = new HashSet(this.exportPrivateUri);
        } else {
            HashSet hashSet3 = new HashSet();
            this.exportPrivateUri = hashSet3;
            hashSet3.add("@s.whatsapp.net/");
        }
        Set<String> stringSet4 = this.mainPreferences.getStringSet("autologinDomains", (Set) null);
        this.autologinDomains = stringSet4;
        if (stringSet4 != null) {
            this.autologinDomains = new HashSet(this.autologinDomains);
        } else {
            this.autologinDomains = new HashSet();
        }
        Set<String> stringSet5 = this.mainPreferences.getStringSet("authDomains", (Set) null);
        this.authDomains = stringSet5;
        if (stringSet5 != null) {
            this.authDomains = new HashSet(this.authDomains);
        } else {
            this.authDomains = new HashSet();
        }
        this.autologinToken = this.mainPreferences.getString("autologinToken", (String) null);
        Set<String> emojies = this.mainPreferences.getStringSet("diceEmojies", (Set) null);
        if (emojies == null) {
            HashSet<String> hashSet4 = new HashSet<>();
            this.diceEmojies = hashSet4;
            hashSet4.add("🎲");
            this.diceEmojies.add("🎯");
        } else {
            this.diceEmojies = new HashSet<>(emojies);
        }
        String text = this.mainPreferences.getString("diceSuccess", (String) null);
        if (text == null) {
            this.diceSuccess.put("🎯", new DiceFrameSuccess(62, 6));
        } else {
            try {
                byte[] bytes = Base64.decode(text, 0);
                if (bytes != null) {
                    SerializedData data = new SerializedData(bytes);
                    int count = data.readInt32(true);
                    for (int a = 0; a < count; a++) {
                        this.diceSuccess.put(data.readString(true), new DiceFrameSuccess(data.readInt32(true), data.readInt32(true)));
                    }
                    data.cleanup();
                }
            } catch (Exception e) {
                FileLog.e((Throwable) e);
            }
        }
        String text2 = this.mainPreferences.getString("emojiSounds", (String) null);
        if (text2 != null) {
            try {
                byte[] bytes2 = Base64.decode(text2, 0);
                if (bytes2 != null) {
                    SerializedData data2 = new SerializedData(bytes2);
                    int count2 = data2.readInt32(true);
                    int a2 = 0;
                    while (a2 < count2) {
                        HashMap<String, EmojiSound> hashMap = this.emojiSounds;
                        String readString = data2.readString(z);
                        long readInt64 = data2.readInt64(z);
                        long readInt642 = data2.readInt64(z);
                        byte[] readByteArray = data2.readByteArray(z);
                        EmojiSound emojiSound = r11;
                        EmojiSound emojiSound2 = new EmojiSound(readInt64, readInt642, readByteArray);
                        hashMap.put(readString, emojiSound);
                        a2++;
                        z = true;
                    }
                    data2.cleanup();
                }
            } catch (Exception e2) {
                FileLog.e((Throwable) e2);
            }
        }
        String text3 = this.mainPreferences.getString("gifSearchEmojies", (String) null);
        if (text3 == null) {
            this.gifSearchEmojies.add("👍");
            this.gifSearchEmojies.add("👎");
            this.gifSearchEmojies.add("😍");
            this.gifSearchEmojies.add("😂");
            this.gifSearchEmojies.add("😮");
            this.gifSearchEmojies.add("🙄");
            this.gifSearchEmojies.add("😥");
            this.gifSearchEmojies.add("😡");
            this.gifSearchEmojies.add("🥳");
            this.gifSearchEmojies.add("😎");
        } else {
            try {
                byte[] bytes3 = Base64.decode(text3, 0);
                if (bytes3 != null) {
                    SerializedData data3 = new SerializedData(bytes3);
                    int count3 = data3.readInt32(true);
                    for (int a3 = 0; a3 < count3; a3++) {
                        this.gifSearchEmojies.add(data3.readString(true));
                    }
                    data3.cleanup();
                }
            } catch (Exception e3) {
                FileLog.e((Throwable) e3);
            }
        }
        if (BuildVars.DEBUG_VERSION) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda144(this), 2000);
        }
    }

    /* renamed from: lambda$new$9$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m305lambda$new$9$orgtelegrammessengerMessagesController() {
        MessagesController messagesController = getMessagesController();
        getNotificationCenter().addObserver(messagesController, NotificationCenter.fileUploaded);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.fileUploadFailed);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.fileLoaded);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.fileLoadFailed);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.messageReceivedByServer);
        getNotificationCenter().addObserver(messagesController, NotificationCenter.updateMessageMedia);
    }

    private void sendLoadPeersRequest(TLObject req, ArrayList<TLObject> requests, TLRPC.messages_Dialogs pinnedDialogs, TLRPC.messages_Dialogs pinnedRemoteDialogs, ArrayList<TLRPC.User> users2, ArrayList<TLRPC.Chat> chats2, ArrayList<DialogFilter> filtersToSave, SparseArray<DialogFilter> filtersToDelete, ArrayList<Integer> filtersOrder, HashMap<Integer, HashSet<Long>> filterDialogRemovals, HashMap<Integer, HashSet<Long>> filterUserRemovals, HashSet<Integer> filtersUnreadCounterReset) {
        getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda241(this, chats2, users2, pinnedDialogs, pinnedRemoteDialogs, requests, req, filtersToSave, filtersToDelete, filtersOrder, filterDialogRemovals, filterUserRemovals, filtersUnreadCounterReset));
    }

    /* renamed from: lambda$sendLoadPeersRequest$11$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m384x2be7911c(ArrayList chats2, ArrayList users2, TLRPC.messages_Dialogs pinnedDialogs, TLRPC.messages_Dialogs pinnedRemoteDialogs, ArrayList requests, TLObject req, ArrayList filtersToSave, SparseArray filtersToDelete, ArrayList filtersOrder, HashMap filterDialogRemovals, HashMap filterUserRemovals, HashSet filtersUnreadCounterReset, TLObject response, TLRPC.TL_error error) {
        ArrayList arrayList = chats2;
        ArrayList arrayList2 = users2;
        TLRPC.messages_Dialogs messages_dialogs = pinnedDialogs;
        TLRPC.messages_Dialogs messages_dialogs2 = pinnedRemoteDialogs;
        TLObject tLObject = response;
        if (tLObject instanceof TLRPC.TL_messages_chats) {
            arrayList.addAll(((TLRPC.TL_messages_chats) tLObject).chats);
        } else if (tLObject instanceof TLRPC.Vector) {
            TLRPC.Vector res = (TLRPC.Vector) tLObject;
            int N = res.objects.size();
            for (int a = 0; a < N; a++) {
                arrayList2.add((TLRPC.User) res.objects.get(a));
            }
        } else if (tLObject instanceof TLRPC.TL_messages_peerDialogs) {
            TLRPC.TL_messages_peerDialogs peerDialogs = (TLRPC.TL_messages_peerDialogs) tLObject;
            messages_dialogs.dialogs.addAll(peerDialogs.dialogs);
            messages_dialogs.messages.addAll(peerDialogs.messages);
            messages_dialogs2.dialogs.addAll(peerDialogs.dialogs);
            messages_dialogs2.messages.addAll(peerDialogs.messages);
            arrayList2.addAll(peerDialogs.users);
            arrayList.addAll(peerDialogs.chats);
        }
        requests.remove(req);
        if (requests.isEmpty()) {
            getMessagesStorage().processLoadedFilterPeers(pinnedDialogs, pinnedRemoteDialogs, users2, chats2, filtersToSave, filtersToDelete, filtersOrder, filterDialogRemovals, filterUserRemovals, filtersUnreadCounterReset);
        }
    }

    /* access modifiers changed from: protected */
    public void loadFilterPeers(HashMap<Long, TLRPC.InputPeer> dialogsToLoadMap, HashMap<Long, TLRPC.InputPeer> usersToLoadMap, HashMap<Long, TLRPC.InputPeer> chatsToLoadMap, TLRPC.messages_Dialogs pinnedDialogs, TLRPC.messages_Dialogs pinnedRemoteDialogs, ArrayList<TLRPC.User> users2, ArrayList<TLRPC.Chat> chats2, ArrayList<DialogFilter> filtersToSave, SparseArray<DialogFilter> filtersToDelete, ArrayList<Integer> filtersOrder, HashMap<Integer, HashSet<Long>> filterDialogRemovals, HashMap<Integer, HashSet<Long>> filterUserRemovals, HashSet<Integer> filtersUnreadCounterReset) {
        DispatchQueue dispatchQueue = Utilities.stageQueue;
        MessagesController$$ExternalSyntheticLambda29 messagesController$$ExternalSyntheticLambda29 = r1;
        MessagesController$$ExternalSyntheticLambda29 messagesController$$ExternalSyntheticLambda292 = new MessagesController$$ExternalSyntheticLambda29(this, usersToLoadMap, pinnedDialogs, pinnedRemoteDialogs, users2, chats2, filtersToSave, filtersToDelete, filtersOrder, filterDialogRemovals, filterUserRemovals, filtersUnreadCounterReset, chatsToLoadMap, dialogsToLoadMap);
        dispatchQueue.postRunnable(messagesController$$ExternalSyntheticLambda29);
    }

    /* renamed from: lambda$loadFilterPeers$12$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m251x7865var_(HashMap usersToLoadMap, TLRPC.messages_Dialogs pinnedDialogs, TLRPC.messages_Dialogs pinnedRemoteDialogs, ArrayList users2, ArrayList chats2, ArrayList filtersToSave, SparseArray filtersToDelete, ArrayList filtersOrder, HashMap filterDialogRemovals, HashMap filterUserRemovals, HashSet filtersUnreadCounterReset, HashMap chatsToLoadMap, HashMap dialogsToLoadMap) {
        int i;
        TLRPC.TL_messages_getPeerDialogs req4;
        TLRPC.TL_channels_getChannels req3;
        TLRPC.TL_messages_getChats req2;
        ArrayList<TLObject> requests = new ArrayList<>();
        TLRPC.TL_users_getUsers req = null;
        for (Map.Entry<Long, TLRPC.InputPeer> entry : usersToLoadMap.entrySet()) {
            if (req == null) {
                req = new TLRPC.TL_users_getUsers();
                requests.add(req);
            }
            req.id.add(getInputUser(entry.getValue()));
            if (req.id.size() == 100) {
                sendLoadPeersRequest(req, requests, pinnedDialogs, pinnedRemoteDialogs, users2, chats2, filtersToSave, filtersToDelete, filtersOrder, filterDialogRemovals, filterUserRemovals, filtersUnreadCounterReset);
                req = null;
            }
        }
        if (req != null) {
            i = 100;
            sendLoadPeersRequest(req, requests, pinnedDialogs, pinnedRemoteDialogs, users2, chats2, filtersToSave, filtersToDelete, filtersOrder, filterDialogRemovals, filterUserRemovals, filtersUnreadCounterReset);
        } else {
            i = 100;
        }
        TLRPC.TL_messages_getChats req22 = null;
        TLRPC.TL_channels_getChannels req32 = null;
        for (Map.Entry<Long, TLRPC.InputPeer> entry2 : chatsToLoadMap.entrySet()) {
            TLRPC.InputPeer inputPeer = entry2.getValue();
            if (inputPeer.chat_id != 0) {
                if (req22 == null) {
                    TLRPC.TL_messages_getChats req23 = new TLRPC.TL_messages_getChats();
                    requests.add(req23);
                    req2 = req23;
                } else {
                    req2 = req22;
                }
                req2.id.add(entry2.getKey());
                if (req2.id.size() == i) {
                    TLRPC.TL_messages_getChats tL_messages_getChats = req2;
                    TLRPC.InputPeer inputPeer2 = inputPeer;
                    sendLoadPeersRequest(req2, requests, pinnedDialogs, pinnedRemoteDialogs, users2, chats2, filtersToSave, filtersToDelete, filtersOrder, filterDialogRemovals, filterUserRemovals, filtersUnreadCounterReset);
                    req22 = null;
                } else {
                    req22 = req2;
                    TLRPC.InputPeer inputPeer3 = inputPeer;
                }
            } else {
                TLRPC.InputPeer inputPeer4 = inputPeer;
                if (inputPeer4.channel_id != 0) {
                    if (req32 == null) {
                        TLRPC.TL_channels_getChannels req33 = new TLRPC.TL_channels_getChannels();
                        requests.add(req33);
                        req3 = req33;
                    } else {
                        req3 = req32;
                    }
                    req3.id.add(getInputChannel(inputPeer4));
                    if (req3.id.size() == 100) {
                        TLRPC.TL_channels_getChannels tL_channels_getChannels = req3;
                        sendLoadPeersRequest(req3, requests, pinnedDialogs, pinnedRemoteDialogs, users2, chats2, filtersToSave, filtersToDelete, filtersOrder, filterDialogRemovals, filterUserRemovals, filtersUnreadCounterReset);
                        req32 = null;
                    } else {
                        req32 = req3;
                    }
                }
            }
            i = 100;
        }
        if (req22 != null) {
            sendLoadPeersRequest(req22, requests, pinnedDialogs, pinnedRemoteDialogs, users2, chats2, filtersToSave, filtersToDelete, filtersOrder, filterDialogRemovals, filterUserRemovals, filtersUnreadCounterReset);
        }
        if (req32 != null) {
            sendLoadPeersRequest(req32, requests, pinnedDialogs, pinnedRemoteDialogs, users2, chats2, filtersToSave, filtersToDelete, filtersOrder, filterDialogRemovals, filterUserRemovals, filtersUnreadCounterReset);
        }
        TLRPC.TL_messages_getPeerDialogs req42 = null;
        for (Map.Entry<Long, TLRPC.InputPeer> entry3 : dialogsToLoadMap.entrySet()) {
            if (req42 == null) {
                TLRPC.TL_messages_getPeerDialogs req43 = new TLRPC.TL_messages_getPeerDialogs();
                requests.add(req43);
                req4 = req43;
            } else {
                req4 = req42;
            }
            TLRPC.TL_inputDialogPeer inputDialogPeer = new TLRPC.TL_inputDialogPeer();
            inputDialogPeer.peer = entry3.getValue();
            req4.peers.add(inputDialogPeer);
            if (req4.peers.size() == 100) {
                TLRPC.TL_inputDialogPeer tL_inputDialogPeer = inputDialogPeer;
                TLRPC.TL_messages_getPeerDialogs tL_messages_getPeerDialogs = req4;
                sendLoadPeersRequest(req4, requests, pinnedDialogs, pinnedRemoteDialogs, users2, chats2, filtersToSave, filtersToDelete, filtersOrder, filterDialogRemovals, filterUserRemovals, filtersUnreadCounterReset);
                req42 = null;
            } else {
                req42 = req4;
            }
        }
        if (req42 != null) {
            sendLoadPeersRequest(req42, requests, pinnedDialogs, pinnedRemoteDialogs, users2, chats2, filtersToSave, filtersToDelete, filtersOrder, filterDialogRemovals, filterUserRemovals, filtersUnreadCounterReset);
        }
    }

    /* access modifiers changed from: protected */
    public void processLoadedDialogFilters(ArrayList<DialogFilter> filters, TLRPC.messages_Dialogs pinnedDialogs, TLRPC.messages_Dialogs pinnedRemoteDialogs, ArrayList<TLRPC.User> users2, ArrayList<TLRPC.Chat> chats2, ArrayList<TLRPC.EncryptedChat> encryptedChats2, int remote) {
        Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda104(this, pinnedDialogs, encryptedChats2, pinnedRemoteDialogs, remote, filters, users2, chats2));
    }

    /* renamed from: lambda$processLoadedDialogFilters$15$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m322x76092fcd(TLRPC.messages_Dialogs pinnedDialogs, ArrayList encryptedChats2, TLRPC.messages_Dialogs pinnedRemoteDialogs, int remote, ArrayList filters, ArrayList users2, ArrayList chats2) {
        SparseArray<TLRPC.EncryptedChat> enc_chats_dict;
        long j;
        LongSparseArray<TLRPC.Chat> chatsDict;
        LongSparseArray<TLRPC.Chat> chatsDict2;
        TLRPC.User user;
        TLRPC.Chat chat;
        MessageObject mess;
        ArrayList<MessageObject> newMessages;
        TLRPC.Chat chat2;
        TLRPC.messages_Dialogs messages_dialogs = pinnedDialogs;
        ArrayList arrayList = encryptedChats2;
        TLRPC.messages_Dialogs messages_dialogs2 = pinnedRemoteDialogs;
        LongSparseArray<TLRPC.Dialog> new_dialogs_dict = new LongSparseArray<>();
        LongSparseArray<TLRPC.User> new_dialogMessage = new LongSparseArray<>();
        LongSparseArray<TLRPC.User> usersDict = new LongSparseArray<>();
        LongSparseArray<TLRPC.Chat> chatsDict3 = new LongSparseArray<>();
        for (int a = 0; a < messages_dialogs.users.size(); a++) {
            TLRPC.User u = messages_dialogs.users.get(a);
            usersDict.put(u.id, u);
        }
        for (int a2 = 0; a2 < messages_dialogs.chats.size(); a2++) {
            TLRPC.Chat c = messages_dialogs.chats.get(a2);
            chatsDict3.put(c.id, c);
        }
        if (arrayList != null) {
            enc_chats_dict = new SparseArray<>();
            int N = encryptedChats2.size();
            for (int a3 = 0; a3 < N; a3++) {
                TLRPC.EncryptedChat encryptedChat = (TLRPC.EncryptedChat) arrayList.get(a3);
                enc_chats_dict.put(encryptedChat.id, encryptedChat);
            }
        } else {
            enc_chats_dict = null;
        }
        ArrayList<MessageObject> newMessages2 = new ArrayList<>();
        int a4 = 0;
        while (true) {
            j = 0;
            if (a4 >= messages_dialogs.messages.size()) {
                break;
            }
            TLRPC.Message message = messages_dialogs.messages.get(a4);
            int a5 = a4;
            ArrayList<MessageObject> newMessages3 = newMessages2;
            if (message.peer_id.channel_id != 0) {
                TLRPC.Chat chat3 = chatsDict3.get(message.peer_id.channel_id);
                if (chat3 != null && chat3.left) {
                    long j2 = this.promoDialogId;
                    if (j2 == 0) {
                        newMessages = newMessages3;
                    } else if (j2 != (-chat3.id)) {
                        newMessages = newMessages3;
                    }
                    a4 = a5 + 1;
                    newMessages2 = newMessages;
                    ArrayList arrayList2 = encryptedChats2;
                }
            } else if (!(message.peer_id.chat_id == 0 || (chat2 = chatsDict3.get(message.peer_id.chat_id)) == null || chat2.migrated_to == null)) {
                newMessages = newMessages3;
                a4 = a5 + 1;
                newMessages2 = newMessages;
                ArrayList arrayList22 = encryptedChats2;
            }
            TLRPC.Message message2 = message;
            newMessages = newMessages3;
            MessageObject messageObject = new MessageObject(this.currentAccount, message, usersDict, chatsDict3, false, false);
            newMessages.add(messageObject);
            new_dialogMessage.put(messageObject.getDialogId(), messageObject);
            a4 = a5 + 1;
            newMessages2 = newMessages;
            ArrayList arrayList222 = encryptedChats2;
        }
        int i = a4;
        getFileLoader().checkMediaExistance(newMessages2);
        int a6 = 0;
        while (a6 < messages_dialogs.dialogs.size()) {
            TLRPC.Dialog d = messages_dialogs.dialogs.get(a6);
            DialogObject.initDialog(d);
            if (d.id != j && (!DialogObject.isEncryptedDialog(d.id) || enc_chats_dict == null || enc_chats_dict.get(DialogObject.getEncryptedChatId(d.id)) != null)) {
                long j3 = this.promoDialogId;
                if (j3 != j && j3 == d.id) {
                    this.promoDialog = d;
                }
                if (d.last_message_date == 0 && (mess = (MessageObject) new_dialogMessage.get(d.id)) != null) {
                    d.last_message_date = mess.messageOwner.date;
                }
                if (DialogObject.isChannel(d)) {
                    TLRPC.Chat chat4 = chatsDict3.get(-d.id);
                    if (chat4 == null) {
                    } else if (chat4.left) {
                        long j4 = this.promoDialogId;
                        if (j4 != 0) {
                            TLRPC.Chat chat5 = chat4;
                            if (j4 != d.id) {
                            }
                        }
                    }
                    this.channelsPts.put(-d.id, d.pts);
                } else if (!(d.id >= 0 || (chat = chatsDict3.get(-d.id)) == null || chat.migrated_to == null)) {
                }
                new_dialogs_dict.put(d.id, d);
                Integer value = this.dialogs_read_inbox_max.get(Long.valueOf(d.id));
                if (value == null) {
                    value = 0;
                }
                this.dialogs_read_inbox_max.put(Long.valueOf(d.id), Integer.valueOf(Math.max(value.intValue(), d.read_inbox_max_id)));
                Integer value2 = this.dialogs_read_outbox_max.get(Long.valueOf(d.id));
                if (value2 == null) {
                    value2 = 0;
                }
                this.dialogs_read_outbox_max.put(Long.valueOf(d.id), Integer.valueOf(Math.max(value2.intValue(), d.read_outbox_max_id)));
            }
            a6++;
            j = 0;
        }
        if (messages_dialogs2 == null || messages_dialogs2.dialogs.isEmpty()) {
        } else {
            ImageLoader.saveMessagesThumbs(messages_dialogs2.messages);
            int a7 = 0;
            while (a7 < messages_dialogs2.messages.size()) {
                TLRPC.Message message3 = messages_dialogs2.messages.get(a7);
                if ((message3.action instanceof TLRPC.TL_messageActionChatDeleteUser) && (user = usersDict.get(message3.action.user_id)) != null && user.bot) {
                    message3.reply_markup = new TLRPC.TL_replyKeyboardHide();
                    message3.flags |= 64;
                }
                if (message3.action instanceof TLRPC.TL_messageActionChatMigrateTo) {
                    chatsDict2 = chatsDict3;
                } else if (message3.action instanceof TLRPC.TL_messageActionChannelCreate) {
                    chatsDict2 = chatsDict3;
                } else {
                    ConcurrentHashMap<Long, Integer> concurrentHashMap = message3.out ? this.dialogs_read_outbox_max : this.dialogs_read_inbox_max;
                    Integer value3 = concurrentHashMap.get(Long.valueOf(message3.dialog_id));
                    if (value3 == null) {
                        chatsDict = chatsDict3;
                        value3 = Integer.valueOf(getMessagesStorage().getDialogReadMax(message3.out, message3.dialog_id));
                        concurrentHashMap.put(Long.valueOf(message3.dialog_id), value3);
                    } else {
                        chatsDict = chatsDict3;
                    }
                    message3.unread = value3.intValue() < message3.id;
                    a7++;
                    chatsDict3 = chatsDict;
                }
                message3.unread = false;
                message3.media_unread = false;
                a7++;
                chatsDict3 = chatsDict;
            }
            getMessagesStorage().putDialogs(messages_dialogs2, 0);
        }
        SparseArray<TLRPC.EncryptedChat> sparseArray = enc_chats_dict;
        LongSparseArray<TLRPC.User> longSparseArray = usersDict;
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda305(this, remote, filters, users2, chats2, pinnedRemoteDialogs, encryptedChats2, new_dialogs_dict, new_dialogMessage));
    }

    /* renamed from: lambda$processLoadedDialogFilters$14$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m321x90c7CLASSNAMEc(int remote, ArrayList filters, ArrayList users2, ArrayList chats2, TLRPC.messages_Dialogs pinnedRemoteDialogs, ArrayList encryptedChats2, LongSparseArray new_dialogs_dict, LongSparseArray new_dialogMessage) {
        int i = remote;
        TLRPC.messages_Dialogs messages_dialogs = pinnedRemoteDialogs;
        ArrayList arrayList = encryptedChats2;
        LongSparseArray longSparseArray = new_dialogs_dict;
        if (i != 2) {
            this.dialogFilters = filters;
            this.dialogFiltersById.clear();
            int N = this.dialogFilters.size();
            for (int a = 0; a < N; a++) {
                DialogFilter filter = this.dialogFilters.get(a);
                this.dialogFiltersById.put(filter.id, filter);
            }
            Collections.sort(this.dialogFilters, MessagesController$$ExternalSyntheticLambda138.INSTANCE);
            putUsers(users2, true);
            putChats(chats2, true);
            this.dialogFiltersLoaded = true;
            getNotificationCenter().postNotificationName(NotificationCenter.dialogFiltersUpdated, new Object[0]);
            if (i == 0) {
                loadRemoteFilters(false);
            }
            if (messages_dialogs != null && !messages_dialogs.dialogs.isEmpty()) {
                applyDialogsNotificationsSettings(messages_dialogs.dialogs);
            }
            if (arrayList != null) {
                for (int a2 = 0; a2 < encryptedChats2.size(); a2++) {
                    TLRPC.EncryptedChat encryptedChat = (TLRPC.EncryptedChat) arrayList.get(a2);
                    if ((encryptedChat instanceof TLRPC.TL_encryptedChat) && AndroidUtilities.getMyLayerVersion(encryptedChat.layer) < SecretChatHelper.CURRENT_SECRET_CHAT_LAYER) {
                        getSecretChatHelper().sendNotifyLayerMessage(encryptedChat, (TLRPC.Message) null);
                    }
                    putEncryptedChat(encryptedChat, true);
                }
            }
            int a3 = 0;
            while (a3 < new_dialogs_dict.size()) {
                long key = longSparseArray.keyAt(a3);
                TLRPC.Dialog value = (TLRPC.Dialog) longSparseArray.valueAt(a3);
                TLRPC.Dialog currentDialog = this.dialogs_dict.get(key);
                if (messages_dialogs != null && messages_dialogs.dialogs.contains(value)) {
                    if (value.draft instanceof TLRPC.TL_draftMessage) {
                        getMediaDataController().saveDraft(value.id, 0, value.draft, (TLRPC.Message) null, false);
                    }
                    if (currentDialog != null) {
                        currentDialog.notify_settings = value.notify_settings;
                    }
                }
                MessageObject newMsg = (MessageObject) new_dialogMessage.get(value.id);
                if (currentDialog == null) {
                    this.dialogs_dict.put(key, value);
                    this.dialogMessage.put(key, newMsg);
                    if (newMsg != null && newMsg.messageOwner.peer_id.channel_id == 0) {
                        this.dialogMessagesByIds.put(newMsg.getId(), newMsg);
                        if (newMsg.messageOwner.random_id != 0) {
                            this.dialogMessagesByRandomIds.put(newMsg.messageOwner.random_id, newMsg);
                        }
                    }
                } else {
                    currentDialog.pinned = value.pinned;
                    currentDialog.pinnedNum = value.pinnedNum;
                    MessageObject oldMsg = this.dialogMessage.get(key);
                    if ((oldMsg == null || !oldMsg.deleted) && oldMsg != null && currentDialog.top_message <= 0) {
                        if (newMsg == null || newMsg.messageOwner.date > oldMsg.messageOwner.date) {
                            this.dialogs_dict.put(key, value);
                            this.dialogMessage.put(key, newMsg);
                            if (oldMsg.messageOwner.peer_id.channel_id == 0) {
                                this.dialogMessagesByIds.remove(oldMsg.getId());
                            }
                            if (newMsg != null) {
                                if (oldMsg.getId() == newMsg.getId()) {
                                    newMsg.deleted = oldMsg.deleted;
                                }
                                if (newMsg.messageOwner.peer_id.channel_id == 0) {
                                    this.dialogMessagesByIds.put(newMsg.getId(), newMsg);
                                    if (newMsg.messageOwner.random_id != 0) {
                                        this.dialogMessagesByRandomIds.put(newMsg.messageOwner.random_id, newMsg);
                                    }
                                }
                            }
                            if (oldMsg.messageOwner.random_id != 0) {
                                this.dialogMessagesByRandomIds.remove(oldMsg.messageOwner.random_id);
                            }
                        }
                    } else if (value.top_message >= currentDialog.top_message) {
                        this.dialogs_dict.put(key, value);
                        this.dialogMessage.put(key, newMsg);
                        if (oldMsg != null) {
                            if (oldMsg.messageOwner.peer_id.channel_id == 0) {
                                this.dialogMessagesByIds.remove(oldMsg.getId());
                            }
                            if (oldMsg.messageOwner.random_id != 0) {
                                this.dialogMessagesByRandomIds.remove(oldMsg.messageOwner.random_id);
                            }
                        }
                        if (newMsg != null && newMsg.messageOwner.peer_id.channel_id == 0) {
                            if (oldMsg != null && oldMsg.getId() == newMsg.getId()) {
                                newMsg.deleted = oldMsg.deleted;
                            }
                            this.dialogMessagesByIds.put(newMsg.getId(), newMsg);
                            if (newMsg.messageOwner.random_id != 0) {
                                this.dialogMessagesByRandomIds.put(newMsg.messageOwner.random_id, newMsg);
                            }
                        }
                    }
                }
                a3++;
                ArrayList arrayList2 = filters;
                messages_dialogs = pinnedRemoteDialogs;
                ArrayList arrayList3 = encryptedChats2;
                longSparseArray = new_dialogs_dict;
            }
            LongSparseArray longSparseArray2 = new_dialogMessage;
            this.allDialogs.clear();
            int size = this.dialogs_dict.size();
            for (int a4 = 0; a4 < size; a4++) {
                TLRPC.Dialog dialog = this.dialogs_dict.valueAt(a4);
                if (this.deletingDialogs.indexOfKey(dialog.id) < 0) {
                    this.allDialogs.add(dialog);
                }
            }
            sortDialogs((LongSparseArray<TLRPC.Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        } else {
            ArrayList arrayList4 = users2;
            ArrayList arrayList5 = chats2;
            LongSparseArray longSparseArray3 = new_dialogMessage;
        }
        if (i != 0) {
            getUserConfig().filtersLoaded = true;
            getUserConfig().saveConfig(false);
            this.loadingRemoteFilters = false;
            getNotificationCenter().postNotificationName(NotificationCenter.filterSettingsUpdated, new Object[0]);
        }
        lockFiltersInternal();
    }

    static /* synthetic */ int lambda$processLoadedDialogFilters$13(DialogFilter o1, DialogFilter o2) {
        if (o1.order > o2.order) {
            return 1;
        }
        if (o1.order < o2.order) {
            return -1;
        }
        return 0;
    }

    public void loadSuggestedFilters() {
        if (!this.loadingSuggestedFilters) {
            this.loadingSuggestedFilters = true;
            getConnectionsManager().sendRequest(new TLRPC.TL_messages_getSuggestedDialogFilters(), new MessagesController$$ExternalSyntheticLambda160(this));
        }
    }

    /* renamed from: lambda$loadSuggestedFilters$17$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m280x3e7ea830(TLObject response, TLRPC.TL_error error) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda43(this, response));
    }

    /* renamed from: lambda$loadSuggestedFilters$16$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m279x593d396f(TLObject response) {
        this.loadingSuggestedFilters = false;
        this.suggestedFilters.clear();
        if (response instanceof TLRPC.Vector) {
            TLRPC.Vector vector = (TLRPC.Vector) response;
            int N = vector.objects.size();
            for (int a = 0; a < N; a++) {
                this.suggestedFilters.add((TLRPC.TL_dialogFilterSuggested) vector.objects.get(a));
            }
        }
        getNotificationCenter().postNotificationName(NotificationCenter.suggestedFiltersLoaded, new Object[0]);
    }

    public void loadRemoteFilters(boolean force) {
        if (!this.loadingRemoteFilters && getUserConfig().isClientActivated()) {
            if (force || !getUserConfig().filtersLoaded) {
                if (force) {
                    getUserConfig().filtersLoaded = false;
                    getUserConfig().saveConfig(false);
                }
                getConnectionsManager().sendRequest(new TLRPC.TL_messages_getDialogFilters(), new MessagesController$$ExternalSyntheticLambda158(this));
            }
        }
    }

    /* renamed from: lambda$loadRemoteFilters$19$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m276xe3var_b(TLObject response, TLRPC.TL_error error) {
        if (response instanceof TLRPC.Vector) {
            getMessagesStorage().checkLoadedRemoteFilters((TLRPC.Vector) response);
        } else {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda99(this));
        }
    }

    /* renamed from: lambda$loadRemoteFilters$18$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m275x28fe077a() {
        this.loadingRemoteFilters = false;
    }

    public void selectDialogFilter(DialogFilter filter, int index) {
        DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
        if (dialogFilterArr[index] != filter) {
            DialogFilter prevFilter = dialogFilterArr[index];
            dialogFilterArr[index] = filter;
            char c = 1;
            if (dialogFilterArr[index == 0 ? (char) 1 : 0] == filter) {
                if (index != 0) {
                    c = 0;
                }
                dialogFilterArr[c] = null;
            }
            if (dialogFilterArr[index] != null) {
                sortDialogs((LongSparseArray<TLRPC.Chat>) null);
            } else if (prevFilter != null) {
                prevFilter.dialogs.clear();
            }
        }
    }

    public void onFilterUpdate(DialogFilter filter) {
        for (int a = 0; a < 2; a++) {
            if (this.selectedDialogFilter[a] == filter) {
                sortDialogs((LongSparseArray<TLRPC.Chat>) null);
                getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, true);
                return;
            }
        }
    }

    public void addFilter(DialogFilter filter, boolean atBegin) {
        if (atBegin) {
            int order = 254;
            int N = this.dialogFilters.size();
            for (int a = 0; a < N; a++) {
                order = Math.min(order, this.dialogFilters.get(a).order);
            }
            filter.order = order - 1;
            this.dialogFilters.add(0, filter);
        } else {
            int order2 = 0;
            int N2 = this.dialogFilters.size();
            for (int a2 = 0; a2 < N2; a2++) {
                order2 = Math.max(order2, this.dialogFilters.get(a2).order);
            }
            filter.order = order2 + 1;
            this.dialogFilters.add(filter);
        }
        this.dialogFiltersById.put(filter.id, filter);
        if (this.dialogFilters.size() == 1 && SharedConfig.getChatSwipeAction(this.currentAccount) != 5) {
            SharedConfig.updateChatListSwipeSetting(5);
        }
        lockFiltersInternal();
    }

    public void removeFilter(DialogFilter filter) {
        this.dialogFilters.remove(filter);
        this.dialogFiltersById.remove(filter.id);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogFiltersUpdated, new Object[0]);
    }

    /* access modifiers changed from: private */
    /* renamed from: loadAppConfig */
    public void m301lambda$new$10$orgtelegrammessengerMessagesController() {
        if (!this.loadingAppConfig) {
            this.loadingAppConfig = true;
            getConnectionsManager().sendRequest(new TLRPC.TL_help_getAppConfig(), new MessagesController$$ExternalSyntheticLambda153(this));
        }
    }

    /* renamed from: lambda$loadAppConfig$21$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m243xd0b5e9e4(TLObject response, TLRPC.TL_error error) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda40(this, response));
    }

    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* renamed from: lambda$loadAppConfig$20$org-telegram-messenger-MessagesController  reason: not valid java name */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void m242xeb747b23(org.telegram.tgnet.TLObject r33) {
        /*
            r32 = this;
            r1 = r32
            r2 = r33
            boolean r0 = r2 instanceof org.telegram.tgnet.TLRPC.TL_jsonObject
            if (r0 == 0) goto L_0x1025
            android.content.SharedPreferences r0 = r1.mainPreferences
            android.content.SharedPreferences$Editor r4 = r0.edit()
            r0 = 0
            r5 = 0
            r6 = r2
            org.telegram.tgnet.TLRPC$TL_jsonObject r6 = (org.telegram.tgnet.TLRPC.TL_jsonObject) r6
            r7 = 0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_jsonObjectValue> r8 = r6.value
            int r8 = r8.size()
            r9 = r7
            r7 = r5
            r5 = r0
        L_0x001d:
            if (r9 >= r8) goto L_0x1009
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_jsonObjectValue> r0 = r6.value
            java.lang.Object r0 = r0.get(r9)
            r10 = r0
            org.telegram.tgnet.TLRPC$TL_jsonObjectValue r10 = (org.telegram.tgnet.TLRPC.TL_jsonObjectValue) r10
            java.lang.String r0 = r10.key
            int r11 = r0.hashCode()
            switch(r11) {
                case -2086426873: goto L_0x0293;
                case -1906216435: goto L_0x0288;
                case -1688620344: goto L_0x027e;
                case -1683918311: goto L_0x0273;
                case -1391086521: goto L_0x0268;
                case -1385240692: goto L_0x025d;
                case -1287877531: goto L_0x0252;
                case -1056002991: goto L_0x0247;
                case -1032177933: goto L_0x023c;
                case -980397720: goto L_0x0230;
                case -896467099: goto L_0x0224;
                case -581904190: goto L_0x0218;
                case -561040027: goto L_0x020d;
                case -515715076: goto L_0x0201;
                case -488472170: goto L_0x01f5;
                case -416504589: goto L_0x01e9;
                case -404170231: goto L_0x01dd;
                case -381432266: goto L_0x01d2;
                case -377047005: goto L_0x01c6;
                case -350971916: goto L_0x01ba;
                case -256319580: goto L_0x01ae;
                case -253815153: goto L_0x01a2;
                case -232883529: goto L_0x0196;
                case -223170831: goto L_0x018a;
                case -111779186: goto L_0x017e;
                case -76561797: goto L_0x0172;
                case -24016028: goto L_0x0167;
                case 169095108: goto L_0x015b;
                case 222975416: goto L_0x014f;
                case 227342346: goto L_0x0143;
                case 246778895: goto L_0x0137;
                case 314452116: goto L_0x012b;
                case 396402384: goto L_0x0120;
                case 478015350: goto L_0x0114;
                case 525494819: goto L_0x0108;
                case 575378511: goto L_0x00fc;
                case 676199595: goto L_0x00f0;
                case 684764449: goto L_0x00e4;
                case 917364150: goto L_0x00d8;
                case 992898905: goto L_0x00cc;
                case 1052355894: goto L_0x00c1;
                case 1085221270: goto L_0x00b6;
                case 1322701672: goto L_0x00aa;
                case 1446751453: goto L_0x009e;
                case 1508636733: goto L_0x0092;
                case 1512284126: goto L_0x0086;
                case 1535244155: goto L_0x007a;
                case 1606936462: goto L_0x006e;
                case 1849807064: goto L_0x0062;
                case 1850325103: goto L_0x0056;
                case 1943239084: goto L_0x004a;
                case 2074702027: goto L_0x003e;
                case 2136829446: goto L_0x0033;
                default: goto L_0x0031;
            }
        L_0x0031:
            goto L_0x029e
        L_0x0033:
            java.lang.String r11 = "dialog_filters_enabled"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 6
            goto L_0x029f
        L_0x003e:
            java.lang.String r11 = "export_private_urls"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 28
            goto L_0x029f
        L_0x004a:
            java.lang.String r11 = "about_length_limit_premium"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 52
            goto L_0x029f
        L_0x0056:
            java.lang.String r11 = "emojies_sounds"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 30
            goto L_0x029f
        L_0x0062:
            java.lang.String r11 = "dialog_filters_limit_premium"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 40
            goto L_0x029f
        L_0x006e:
            java.lang.String r11 = "channels_limit_default"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 33
            goto L_0x029f
        L_0x007a:
            java.lang.String r11 = "saved_gifs_limit_premium"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 36
            goto L_0x029f
        L_0x0086:
            java.lang.String r11 = "dialog_filters_chats_limit_default"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 41
            goto L_0x029f
        L_0x0092:
            java.lang.String r11 = "chat_read_mark_size_threshold"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 21
            goto L_0x029f
        L_0x009e:
            java.lang.String r11 = "caption_length_limit_default"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 49
            goto L_0x029f
        L_0x00aa:
            java.lang.String r11 = "round_video_encoding"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 24
            goto L_0x029f
        L_0x00b6:
            java.lang.String r11 = "premium_purchase_blocked"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 0
            goto L_0x029f
        L_0x00c1:
            java.lang.String r11 = "premium_bot_username"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 1
            goto L_0x029f
        L_0x00cc:
            java.lang.String r11 = "inapp_update_check_delay"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 23
            goto L_0x029f
        L_0x00d8:
            java.lang.String r11 = "ringtone_duration_max"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 32
            goto L_0x029f
        L_0x00e4:
            java.lang.String r11 = "save_gifs_with_stickers"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 12
            goto L_0x029f
        L_0x00f0:
            java.lang.String r11 = "groupcall_video_participants_max"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 20
            goto L_0x029f
        L_0x00fc:
            java.lang.String r11 = "stickers_faved_limit_default"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 37
            goto L_0x029f
        L_0x0108:
            java.lang.String r11 = "upload_max_fileparts_premium"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 46
            goto L_0x029f
        L_0x0114:
            java.lang.String r11 = "channels_public_limit_default"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 47
            goto L_0x029f
        L_0x0120:
            java.lang.String r11 = "getfile_experimental_params"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 5
            goto L_0x029f
        L_0x012b:
            java.lang.String r11 = "autologin_token"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 15
            goto L_0x029f
        L_0x0137:
            java.lang.String r11 = "export_group_urls"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 27
            goto L_0x029f
        L_0x0143:
            java.lang.String r11 = "autologin_domains"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 14
            goto L_0x029f
        L_0x014f:
            java.lang.String r11 = "gif_search_emojies"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 17
            goto L_0x029f
        L_0x015b:
            java.lang.String r11 = "stickers_emoji_suggest_only_api"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 25
            goto L_0x029f
        L_0x0167:
            java.lang.String r11 = "emojies_animated_zoom"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 4
            goto L_0x029f
        L_0x0172:
            java.lang.String r11 = "youtube_pip"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 8
            goto L_0x029f
        L_0x017e:
            java.lang.String r11 = "autoarchive_setting_available"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 19
            goto L_0x029f
        L_0x018a:
            java.lang.String r11 = "dialog_filters_pinned_limit_default"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 43
            goto L_0x029f
        L_0x0196:
            java.lang.String r11 = "emojies_send_dice_success"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 18
            goto L_0x029f
        L_0x01a2:
            java.lang.String r11 = "background_connection"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 9
            goto L_0x029f
        L_0x01ae:
            java.lang.String r11 = "channels_limit_premium"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 34
            goto L_0x029f
        L_0x01ba:
            java.lang.String r11 = "dialog_filters_chats_limit_premium"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 42
            goto L_0x029f
        L_0x01c6:
            java.lang.String r11 = "ringtone_size_max"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 31
            goto L_0x029f
        L_0x01d2:
            java.lang.String r11 = "premium_promo_order"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 3
            goto L_0x029f
        L_0x01dd:
            java.lang.String r11 = "keep_alive_service"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 10
            goto L_0x029f
        L_0x01e9:
            java.lang.String r11 = "caption_length_limit_premium"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 50
            goto L_0x029f
        L_0x01f5:
            java.lang.String r11 = "about_length_limit_default"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 51
            goto L_0x029f
        L_0x0201:
            java.lang.String r11 = "export_regex"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 26
            goto L_0x029f
        L_0x020d:
            java.lang.String r11 = "premium_invoice_slug"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 2
            goto L_0x029f
        L_0x0218:
            java.lang.String r11 = "dialog_filters_limit_default"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 39
            goto L_0x029f
        L_0x0224:
            java.lang.String r11 = "saved_gifs_limit_default"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 35
            goto L_0x029f
        L_0x0230:
            java.lang.String r11 = "url_auth_domains"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 13
            goto L_0x029f
        L_0x023c:
            java.lang.String r11 = "emojies_send_dice"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 16
            goto L_0x029f
        L_0x0247:
            java.lang.String r11 = "chat_read_mark_expire_period"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 22
            goto L_0x029f
        L_0x0252:
            java.lang.String r11 = "stickers_faved_limit_premium"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 38
            goto L_0x029f
        L_0x025d:
            java.lang.String r11 = "channels_public_limit_premium"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 48
            goto L_0x029f
        L_0x0268:
            java.lang.String r11 = "pending_suggestions"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 29
            goto L_0x029f
        L_0x0273:
            java.lang.String r11 = "qr_login_camera"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 11
            goto L_0x029f
        L_0x027e:
            java.lang.String r11 = "dialog_filters_tooltip"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 7
            goto L_0x029f
        L_0x0288:
            java.lang.String r11 = "upload_max_fileparts_default"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 45
            goto L_0x029f
        L_0x0293:
            java.lang.String r11 = "dialog_filters_pinned_limit_premium"
            boolean r0 = r0.equals(r11)
            if (r0 == 0) goto L_0x0031
            r0 = 44
            goto L_0x029f
        L_0x029e:
            r0 = -1
        L_0x029f:
            java.lang.String r11 = ""
            java.lang.String r15 = "️"
            switch(r0) {
                case 0: goto L_0x0fd3;
                case 1: goto L_0x0fac;
                case 2: goto L_0x0var_;
                case 3: goto L_0x0var_;
                case 4: goto L_0x0f3e;
                case 5: goto L_0x0var_;
                case 6: goto L_0x0ef2;
                case 7: goto L_0x0ec0;
                case 8: goto L_0x0e96;
                case 9: goto L_0x0e6e;
                case 10: goto L_0x0e46;
                case 11: goto L_0x0e20;
                case 12: goto L_0x0dfa;
                case 13: goto L_0x0dae;
                case 14: goto L_0x0d62;
                case 15: goto L_0x0d38;
                case 16: goto L_0x0ce8;
                case 17: goto L_0x0CLASSNAME;
                case 18: goto L_0x0b18;
                case 19: goto L_0x0af2;
                case 20: goto L_0x0ac8;
                case 21: goto L_0x0a9e;
                case 22: goto L_0x0a74;
                case 23: goto L_0x0a29;
                case 24: goto L_0x0975;
                case 25: goto L_0x094f;
                case 26: goto L_0x0903;
                case 27: goto L_0x08b7;
                case 28: goto L_0x086b;
                case 29: goto L_0x0813;
                case 30: goto L_0x06ad;
                case 31: goto L_0x067f;
                case 32: goto L_0x0651;
                case 33: goto L_0x0623;
                case 34: goto L_0x05f5;
                case 35: goto L_0x05c7;
                case 36: goto L_0x0599;
                case 37: goto L_0x056b;
                case 38: goto L_0x053d;
                case 39: goto L_0x050f;
                case 40: goto L_0x04e1;
                case 41: goto L_0x04b3;
                case 42: goto L_0x0485;
                case 43: goto L_0x0457;
                case 44: goto L_0x0429;
                case 45: goto L_0x03fb;
                case 46: goto L_0x03cd;
                case 47: goto L_0x039f;
                case 48: goto L_0x0371;
                case 49: goto L_0x0343;
                case 50: goto L_0x0315;
                case 51: goto L_0x02e7;
                case 52: goto L_0x02b0;
                default: goto L_0x02a6;
            }
        L_0x02a6:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            r2 = r10
            goto L_0x0ffd
        L_0x02b0:
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonNumber
            if (r0 == 0) goto L_0x02de
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            org.telegram.tgnet.TLRPC$TL_jsonNumber r0 = (org.telegram.tgnet.TLRPC.TL_jsonNumber) r0
            double r11 = r0.value
            int r13 = r1.aboutLengthLimitPremium
            double r13 = (double) r13
            int r15 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1))
            if (r15 == 0) goto L_0x02d5
            double r11 = r0.value
            int r11 = (int) r11
            r1.aboutLengthLimitPremium = r11
            java.lang.String r12 = "aboutLengthLimitPremium"
            r4.putInt(r12, r11)
            r5 = 1
            r22 = r6
            r21 = r8
            r12 = r9
            goto L_0x0fff
        L_0x02d5:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            goto L_0x0ffd
        L_0x02de:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            goto L_0x0ffd
        L_0x02e7:
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonNumber
            if (r0 == 0) goto L_0x030c
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            org.telegram.tgnet.TLRPC$TL_jsonNumber r0 = (org.telegram.tgnet.TLRPC.TL_jsonNumber) r0
            double r11 = r0.value
            int r13 = r1.aboutLengthLimitDefault
            double r13 = (double) r13
            int r15 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1))
            if (r15 == 0) goto L_0x0305
            double r11 = r0.value
            int r11 = (int) r11
            r1.aboutLengthLimitDefault = r11
            java.lang.String r12 = "aboutLengthLimitDefault"
            r4.putInt(r12, r11)
            r5 = 1
        L_0x0305:
            r22 = r6
            r21 = r8
            r12 = r9
            goto L_0x0fff
        L_0x030c:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            goto L_0x0ffd
        L_0x0315:
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonNumber
            if (r0 == 0) goto L_0x033a
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            org.telegram.tgnet.TLRPC$TL_jsonNumber r0 = (org.telegram.tgnet.TLRPC.TL_jsonNumber) r0
            double r11 = r0.value
            int r13 = r1.captionLengthLimitPremium
            double r13 = (double) r13
            int r15 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1))
            if (r15 == 0) goto L_0x0333
            double r11 = r0.value
            int r11 = (int) r11
            r1.captionLengthLimitPremium = r11
            java.lang.String r12 = "captionLengthLimitPremium"
            r4.putInt(r12, r11)
            r5 = 1
        L_0x0333:
            r22 = r6
            r21 = r8
            r12 = r9
            goto L_0x0fff
        L_0x033a:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            goto L_0x0ffd
        L_0x0343:
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonNumber
            if (r0 == 0) goto L_0x0368
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            org.telegram.tgnet.TLRPC$TL_jsonNumber r0 = (org.telegram.tgnet.TLRPC.TL_jsonNumber) r0
            double r11 = r0.value
            int r13 = r1.captionLengthLimitDefault
            double r13 = (double) r13
            int r15 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1))
            if (r15 == 0) goto L_0x0361
            double r11 = r0.value
            int r11 = (int) r11
            r1.captionLengthLimitDefault = r11
            java.lang.String r12 = "captionLengthLimitDefault"
            r4.putInt(r12, r11)
            r5 = 1
        L_0x0361:
            r22 = r6
            r21 = r8
            r12 = r9
            goto L_0x0fff
        L_0x0368:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            goto L_0x0ffd
        L_0x0371:
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonNumber
            if (r0 == 0) goto L_0x0396
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            org.telegram.tgnet.TLRPC$TL_jsonNumber r0 = (org.telegram.tgnet.TLRPC.TL_jsonNumber) r0
            double r11 = r0.value
            int r13 = r1.publicLinksLimitPremium
            double r13 = (double) r13
            int r15 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1))
            if (r15 == 0) goto L_0x038f
            double r11 = r0.value
            int r11 = (int) r11
            r1.publicLinksLimitPremium = r11
            java.lang.String r12 = "publicLinksLimitPremium"
            r4.putInt(r12, r11)
            r5 = 1
        L_0x038f:
            r22 = r6
            r21 = r8
            r12 = r9
            goto L_0x0fff
        L_0x0396:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            goto L_0x0ffd
        L_0x039f:
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonNumber
            if (r0 == 0) goto L_0x03c4
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            org.telegram.tgnet.TLRPC$TL_jsonNumber r0 = (org.telegram.tgnet.TLRPC.TL_jsonNumber) r0
            double r11 = r0.value
            int r13 = r1.publicLinksLimitDefault
            double r13 = (double) r13
            int r15 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1))
            if (r15 == 0) goto L_0x03bd
            double r11 = r0.value
            int r11 = (int) r11
            r1.publicLinksLimitDefault = r11
            java.lang.String r12 = "publicLinksLimit"
            r4.putInt(r12, r11)
            r5 = 1
        L_0x03bd:
            r22 = r6
            r21 = r8
            r12 = r9
            goto L_0x0fff
        L_0x03c4:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            goto L_0x0ffd
        L_0x03cd:
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonNumber
            if (r0 == 0) goto L_0x03f2
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            org.telegram.tgnet.TLRPC$TL_jsonNumber r0 = (org.telegram.tgnet.TLRPC.TL_jsonNumber) r0
            double r11 = r0.value
            int r13 = r1.uploadMaxFilePartsPremium
            double r13 = (double) r13
            int r15 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1))
            if (r15 == 0) goto L_0x03eb
            double r11 = r0.value
            int r11 = (int) r11
            r1.uploadMaxFilePartsPremium = r11
            java.lang.String r12 = "uploadMaxFilePartsPremium"
            r4.putInt(r12, r11)
            r5 = 1
        L_0x03eb:
            r22 = r6
            r21 = r8
            r12 = r9
            goto L_0x0fff
        L_0x03f2:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            goto L_0x0ffd
        L_0x03fb:
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonNumber
            if (r0 == 0) goto L_0x0420
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            org.telegram.tgnet.TLRPC$TL_jsonNumber r0 = (org.telegram.tgnet.TLRPC.TL_jsonNumber) r0
            double r11 = r0.value
            int r13 = r1.uploadMaxFileParts
            double r13 = (double) r13
            int r15 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1))
            if (r15 == 0) goto L_0x0419
            double r11 = r0.value
            int r11 = (int) r11
            r1.uploadMaxFileParts = r11
            java.lang.String r12 = "uploadMaxFileParts"
            r4.putInt(r12, r11)
            r5 = 1
        L_0x0419:
            r22 = r6
            r21 = r8
            r12 = r9
            goto L_0x0fff
        L_0x0420:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            goto L_0x0ffd
        L_0x0429:
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonNumber
            if (r0 == 0) goto L_0x044e
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            org.telegram.tgnet.TLRPC$TL_jsonNumber r0 = (org.telegram.tgnet.TLRPC.TL_jsonNumber) r0
            double r11 = r0.value
            int r13 = r1.dialogFiltersPinnedLimitPremium
            double r13 = (double) r13
            int r15 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1))
            if (r15 == 0) goto L_0x0447
            double r11 = r0.value
            int r11 = (int) r11
            r1.dialogFiltersPinnedLimitPremium = r11
            java.lang.String r12 = "dialogFiltersPinnedLimitPremium"
            r4.putInt(r12, r11)
            r5 = 1
        L_0x0447:
            r22 = r6
            r21 = r8
            r12 = r9
            goto L_0x0fff
        L_0x044e:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            goto L_0x0ffd
        L_0x0457:
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonNumber
            if (r0 == 0) goto L_0x047c
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            org.telegram.tgnet.TLRPC$TL_jsonNumber r0 = (org.telegram.tgnet.TLRPC.TL_jsonNumber) r0
            double r11 = r0.value
            int r13 = r1.dialogFiltersPinnedLimitDefault
            double r13 = (double) r13
            int r15 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1))
            if (r15 == 0) goto L_0x0475
            double r11 = r0.value
            int r11 = (int) r11
            r1.dialogFiltersPinnedLimitDefault = r11
            java.lang.String r12 = "dialogFiltersPinnedLimitDefault"
            r4.putInt(r12, r11)
            r5 = 1
        L_0x0475:
            r22 = r6
            r21 = r8
            r12 = r9
            goto L_0x0fff
        L_0x047c:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            goto L_0x0ffd
        L_0x0485:
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonNumber
            if (r0 == 0) goto L_0x04aa
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            org.telegram.tgnet.TLRPC$TL_jsonNumber r0 = (org.telegram.tgnet.TLRPC.TL_jsonNumber) r0
            double r11 = r0.value
            int r13 = r1.dialogFiltersChatsLimitPremium
            double r13 = (double) r13
            int r15 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1))
            if (r15 == 0) goto L_0x04a3
            double r11 = r0.value
            int r11 = (int) r11
            r1.dialogFiltersChatsLimitPremium = r11
            java.lang.String r12 = "dialogFiltersChatsLimitPremium"
            r4.putInt(r12, r11)
            r5 = 1
        L_0x04a3:
            r22 = r6
            r21 = r8
            r12 = r9
            goto L_0x0fff
        L_0x04aa:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            goto L_0x0ffd
        L_0x04b3:
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonNumber
            if (r0 == 0) goto L_0x04d8
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            org.telegram.tgnet.TLRPC$TL_jsonNumber r0 = (org.telegram.tgnet.TLRPC.TL_jsonNumber) r0
            double r11 = r0.value
            int r13 = r1.dialogFiltersChatsLimitDefault
            double r13 = (double) r13
            int r15 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1))
            if (r15 == 0) goto L_0x04d1
            double r11 = r0.value
            int r11 = (int) r11
            r1.dialogFiltersChatsLimitDefault = r11
            java.lang.String r12 = "dialogFiltersChatsLimitDefault"
            r4.putInt(r12, r11)
            r5 = 1
        L_0x04d1:
            r22 = r6
            r21 = r8
            r12 = r9
            goto L_0x0fff
        L_0x04d8:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            goto L_0x0ffd
        L_0x04e1:
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonNumber
            if (r0 == 0) goto L_0x0506
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            org.telegram.tgnet.TLRPC$TL_jsonNumber r0 = (org.telegram.tgnet.TLRPC.TL_jsonNumber) r0
            double r11 = r0.value
            int r13 = r1.dialogFiltersLimitPremium
            double r13 = (double) r13
            int r15 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1))
            if (r15 == 0) goto L_0x04ff
            double r11 = r0.value
            int r11 = (int) r11
            r1.dialogFiltersLimitPremium = r11
            java.lang.String r12 = "dialogFiltersLimitPremium"
            r4.putInt(r12, r11)
            r5 = 1
        L_0x04ff:
            r22 = r6
            r21 = r8
            r12 = r9
            goto L_0x0fff
        L_0x0506:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            goto L_0x0ffd
        L_0x050f:
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonNumber
            if (r0 == 0) goto L_0x0534
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            org.telegram.tgnet.TLRPC$TL_jsonNumber r0 = (org.telegram.tgnet.TLRPC.TL_jsonNumber) r0
            double r11 = r0.value
            int r13 = r1.dialogFiltersLimitDefault
            double r13 = (double) r13
            int r15 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1))
            if (r15 == 0) goto L_0x052d
            double r11 = r0.value
            int r11 = (int) r11
            r1.dialogFiltersLimitDefault = r11
            java.lang.String r12 = "dialogFiltersLimitDefault"
            r4.putInt(r12, r11)
            r5 = 1
        L_0x052d:
            r22 = r6
            r21 = r8
            r12 = r9
            goto L_0x0fff
        L_0x0534:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            goto L_0x0ffd
        L_0x053d:
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonNumber
            if (r0 == 0) goto L_0x0562
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            org.telegram.tgnet.TLRPC$TL_jsonNumber r0 = (org.telegram.tgnet.TLRPC.TL_jsonNumber) r0
            double r11 = r0.value
            int r13 = r1.stickersFavedLimitPremium
            double r13 = (double) r13
            int r15 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1))
            if (r15 == 0) goto L_0x055b
            double r11 = r0.value
            int r11 = (int) r11
            r1.stickersFavedLimitPremium = r11
            java.lang.String r12 = "stickersFavedLimitPremium"
            r4.putInt(r12, r11)
            r5 = 1
        L_0x055b:
            r22 = r6
            r21 = r8
            r12 = r9
            goto L_0x0fff
        L_0x0562:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            goto L_0x0ffd
        L_0x056b:
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonNumber
            if (r0 == 0) goto L_0x0590
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            org.telegram.tgnet.TLRPC$TL_jsonNumber r0 = (org.telegram.tgnet.TLRPC.TL_jsonNumber) r0
            double r11 = r0.value
            int r13 = r1.stickersFavedLimitDefault
            double r13 = (double) r13
            int r15 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1))
            if (r15 == 0) goto L_0x0589
            double r11 = r0.value
            int r11 = (int) r11
            r1.stickersFavedLimitDefault = r11
            java.lang.String r12 = "stickersFavedLimitDefault"
            r4.putInt(r12, r11)
            r5 = 1
        L_0x0589:
            r22 = r6
            r21 = r8
            r12 = r9
            goto L_0x0fff
        L_0x0590:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            goto L_0x0ffd
        L_0x0599:
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonNumber
            if (r0 == 0) goto L_0x05be
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            org.telegram.tgnet.TLRPC$TL_jsonNumber r0 = (org.telegram.tgnet.TLRPC.TL_jsonNumber) r0
            double r11 = r0.value
            int r13 = r1.savedGifsLimitPremium
            double r13 = (double) r13
            int r15 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1))
            if (r15 == 0) goto L_0x05b7
            double r11 = r0.value
            int r11 = (int) r11
            r1.savedGifsLimitPremium = r11
            java.lang.String r12 = "savedGifsLimitPremium"
            r4.putInt(r12, r11)
            r5 = 1
        L_0x05b7:
            r22 = r6
            r21 = r8
            r12 = r9
            goto L_0x0fff
        L_0x05be:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            goto L_0x0ffd
        L_0x05c7:
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonNumber
            if (r0 == 0) goto L_0x05ec
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            org.telegram.tgnet.TLRPC$TL_jsonNumber r0 = (org.telegram.tgnet.TLRPC.TL_jsonNumber) r0
            double r11 = r0.value
            int r13 = r1.savedGifsLimitDefault
            double r13 = (double) r13
            int r15 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1))
            if (r15 == 0) goto L_0x05e5
            double r11 = r0.value
            int r11 = (int) r11
            r1.savedGifsLimitDefault = r11
            java.lang.String r12 = "savedGifsLimitDefault"
            r4.putInt(r12, r11)
            r5 = 1
        L_0x05e5:
            r22 = r6
            r21 = r8
            r12 = r9
            goto L_0x0fff
        L_0x05ec:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            goto L_0x0ffd
        L_0x05f5:
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonNumber
            if (r0 == 0) goto L_0x061a
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            org.telegram.tgnet.TLRPC$TL_jsonNumber r0 = (org.telegram.tgnet.TLRPC.TL_jsonNumber) r0
            double r11 = r0.value
            int r13 = r1.channelsLimitPremium
            double r13 = (double) r13
            int r15 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1))
            if (r15 == 0) goto L_0x0613
            double r11 = r0.value
            int r11 = (int) r11
            r1.channelsLimitPremium = r11
            java.lang.String r12 = "channelsLimitPremium"
            r4.putInt(r12, r11)
            r5 = 1
        L_0x0613:
            r22 = r6
            r21 = r8
            r12 = r9
            goto L_0x0fff
        L_0x061a:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            goto L_0x0ffd
        L_0x0623:
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonNumber
            if (r0 == 0) goto L_0x0648
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            org.telegram.tgnet.TLRPC$TL_jsonNumber r0 = (org.telegram.tgnet.TLRPC.TL_jsonNumber) r0
            double r11 = r0.value
            int r13 = r1.channelsLimitDefault
            double r13 = (double) r13
            int r15 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1))
            if (r15 == 0) goto L_0x0641
            double r11 = r0.value
            int r11 = (int) r11
            r1.channelsLimitDefault = r11
            java.lang.String r12 = "channelsLimitDefault"
            r4.putInt(r12, r11)
            r5 = 1
        L_0x0641:
            r22 = r6
            r21 = r8
            r12 = r9
            goto L_0x0fff
        L_0x0648:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            goto L_0x0ffd
        L_0x0651:
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonNumber
            if (r0 == 0) goto L_0x0676
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            org.telegram.tgnet.TLRPC$TL_jsonNumber r0 = (org.telegram.tgnet.TLRPC.TL_jsonNumber) r0
            double r11 = r0.value
            int r13 = r1.ringtoneDurationMax
            double r13 = (double) r13
            int r15 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1))
            if (r15 == 0) goto L_0x066f
            double r11 = r0.value
            int r11 = (int) r11
            r1.ringtoneDurationMax = r11
            java.lang.String r12 = "ringtoneDurationMax"
            r4.putInt(r12, r11)
            r5 = 1
        L_0x066f:
            r22 = r6
            r21 = r8
            r12 = r9
            goto L_0x0fff
        L_0x0676:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            goto L_0x0ffd
        L_0x067f:
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonNumber
            if (r0 == 0) goto L_0x06a4
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            org.telegram.tgnet.TLRPC$TL_jsonNumber r0 = (org.telegram.tgnet.TLRPC.TL_jsonNumber) r0
            double r11 = r0.value
            int r13 = r1.ringtoneSizeMax
            double r13 = (double) r13
            int r15 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1))
            if (r15 == 0) goto L_0x069d
            double r11 = r0.value
            int r11 = (int) r11
            r1.ringtoneSizeMax = r11
            java.lang.String r12 = "ringtoneSizeMax"
            r4.putInt(r12, r11)
            r5 = 1
        L_0x069d:
            r22 = r6
            r21 = r8
            r12 = r9
            goto L_0x0fff
        L_0x06a4:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            goto L_0x0ffd
        L_0x06ad:
            java.util.HashMap r0 = new java.util.HashMap     // Catch:{ Exception -> 0x0806 }
            r0.<init>()     // Catch:{ Exception -> 0x0806 }
            org.telegram.tgnet.TLRPC$JSONValue r12 = r10.value     // Catch:{ Exception -> 0x0806 }
            boolean r12 = r12 instanceof org.telegram.tgnet.TLRPC.TL_jsonObject     // Catch:{ Exception -> 0x0806 }
            if (r12 == 0) goto L_0x079e
            org.telegram.tgnet.TLRPC$JSONValue r12 = r10.value     // Catch:{ Exception -> 0x0806 }
            org.telegram.tgnet.TLRPC$TL_jsonObject r12 = (org.telegram.tgnet.TLRPC.TL_jsonObject) r12     // Catch:{ Exception -> 0x0806 }
            r13 = 0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_jsonObjectValue> r14 = r12.value     // Catch:{ Exception -> 0x0806 }
            int r14 = r14.size()     // Catch:{ Exception -> 0x0806 }
        L_0x06c3:
            if (r13 >= r14) goto L_0x0797
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_jsonObjectValue> r3 = r12.value     // Catch:{ Exception -> 0x0806 }
            java.lang.Object r3 = r3.get(r13)     // Catch:{ Exception -> 0x0806 }
            org.telegram.tgnet.TLRPC$TL_jsonObjectValue r3 = (org.telegram.tgnet.TLRPC.TL_jsonObjectValue) r3     // Catch:{ Exception -> 0x0806 }
            org.telegram.tgnet.TLRPC$JSONValue r2 = r3.value     // Catch:{ Exception -> 0x0806 }
            boolean r2 = r2 instanceof org.telegram.tgnet.TLRPC.TL_jsonObject     // Catch:{ Exception -> 0x0806 }
            if (r2 == 0) goto L_0x0785
            org.telegram.tgnet.TLRPC$JSONValue r2 = r3.value     // Catch:{ Exception -> 0x0806 }
            org.telegram.tgnet.TLRPC$TL_jsonObject r2 = (org.telegram.tgnet.TLRPC.TL_jsonObject) r2     // Catch:{ Exception -> 0x0806 }
            r16 = 0
            r18 = 0
            r20 = 0
            r21 = 0
            r22 = r6
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_jsonObjectValue> r6 = r2.value     // Catch:{ Exception -> 0x0780 }
            int r6 = r6.size()     // Catch:{ Exception -> 0x0780 }
            r31 = r21
            r21 = r8
            r8 = r31
        L_0x06ed:
            if (r8 >= r6) goto L_0x0757
            r23 = r6
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_jsonObjectValue> r6 = r2.value     // Catch:{ Exception -> 0x0804 }
            java.lang.Object r6 = r6.get(r8)     // Catch:{ Exception -> 0x0804 }
            org.telegram.tgnet.TLRPC$TL_jsonObjectValue r6 = (org.telegram.tgnet.TLRPC.TL_jsonObjectValue) r6     // Catch:{ Exception -> 0x0804 }
            r29 = r2
            org.telegram.tgnet.TLRPC$JSONValue r2 = r6.value     // Catch:{ Exception -> 0x0804 }
            boolean r2 = r2 instanceof org.telegram.tgnet.TLRPC.TL_jsonString     // Catch:{ Exception -> 0x0804 }
            if (r2 == 0) goto L_0x074c
            java.lang.String r2 = "id"
            r30 = r12
            java.lang.String r12 = r6.key     // Catch:{ Exception -> 0x0804 }
            boolean r2 = r2.equals(r12)     // Catch:{ Exception -> 0x0804 }
            if (r2 == 0) goto L_0x071e
            org.telegram.tgnet.TLRPC$JSONValue r2 = r6.value     // Catch:{ Exception -> 0x0804 }
            org.telegram.tgnet.TLRPC$TL_jsonString r2 = (org.telegram.tgnet.TLRPC.TL_jsonString) r2     // Catch:{ Exception -> 0x0804 }
            java.lang.String r2 = r2.value     // Catch:{ Exception -> 0x0804 }
            java.lang.Long r2 = org.telegram.messenger.Utilities.parseLong(r2)     // Catch:{ Exception -> 0x0804 }
            long r24 = r2.longValue()     // Catch:{ Exception -> 0x0804 }
            r16 = r24
            goto L_0x074e
        L_0x071e:
            java.lang.String r2 = "access_hash"
            java.lang.String r12 = r6.key     // Catch:{ Exception -> 0x0804 }
            boolean r2 = r2.equals(r12)     // Catch:{ Exception -> 0x0804 }
            if (r2 == 0) goto L_0x0739
            org.telegram.tgnet.TLRPC$JSONValue r2 = r6.value     // Catch:{ Exception -> 0x0804 }
            org.telegram.tgnet.TLRPC$TL_jsonString r2 = (org.telegram.tgnet.TLRPC.TL_jsonString) r2     // Catch:{ Exception -> 0x0804 }
            java.lang.String r2 = r2.value     // Catch:{ Exception -> 0x0804 }
            java.lang.Long r2 = org.telegram.messenger.Utilities.parseLong(r2)     // Catch:{ Exception -> 0x0804 }
            long r24 = r2.longValue()     // Catch:{ Exception -> 0x0804 }
            r18 = r24
            goto L_0x074e
        L_0x0739:
            java.lang.String r2 = "file_reference_base64"
            java.lang.String r12 = r6.key     // Catch:{ Exception -> 0x0804 }
            boolean r2 = r2.equals(r12)     // Catch:{ Exception -> 0x0804 }
            if (r2 == 0) goto L_0x074e
            org.telegram.tgnet.TLRPC$JSONValue r2 = r6.value     // Catch:{ Exception -> 0x0804 }
            org.telegram.tgnet.TLRPC$TL_jsonString r2 = (org.telegram.tgnet.TLRPC.TL_jsonString) r2     // Catch:{ Exception -> 0x0804 }
            java.lang.String r2 = r2.value     // Catch:{ Exception -> 0x0804 }
            r20 = r2
            goto L_0x074e
        L_0x074c:
            r30 = r12
        L_0x074e:
            int r8 = r8 + 1
            r6 = r23
            r2 = r29
            r12 = r30
            goto L_0x06ed
        L_0x0757:
            r29 = r2
            r23 = r6
            r30 = r12
            r23 = 0
            int r2 = (r16 > r23 ? 1 : (r16 == r23 ? 0 : -1))
            if (r2 == 0) goto L_0x078b
            int r2 = (r18 > r23 ? 1 : (r18 == r23 ? 0 : -1))
            if (r2 == 0) goto L_0x078b
            if (r20 == 0) goto L_0x078b
            java.lang.String r2 = r3.key     // Catch:{ Exception -> 0x0804 }
            java.lang.String r2 = r2.replace(r15, r11)     // Catch:{ Exception -> 0x0804 }
            org.telegram.messenger.MessagesController$EmojiSound r6 = new org.telegram.messenger.MessagesController$EmojiSound     // Catch:{ Exception -> 0x0804 }
            r23 = r6
            r24 = r16
            r26 = r18
            r28 = r20
            r23.<init>((long) r24, (long) r26, (java.lang.String) r28)     // Catch:{ Exception -> 0x0804 }
            r0.put(r2, r6)     // Catch:{ Exception -> 0x0804 }
            goto L_0x078b
        L_0x0780:
            r0 = move-exception
            r21 = r8
            goto L_0x080b
        L_0x0785:
            r22 = r6
            r21 = r8
            r30 = r12
        L_0x078b:
            int r13 = r13 + 1
            r2 = r33
            r8 = r21
            r6 = r22
            r12 = r30
            goto L_0x06c3
        L_0x0797:
            r22 = r6
            r21 = r8
            r30 = r12
            goto L_0x07a2
        L_0x079e:
            r22 = r6
            r21 = r8
        L_0x07a2:
            java.util.HashMap<java.lang.String, org.telegram.messenger.MessagesController$EmojiSound> r2 = r1.emojiSounds     // Catch:{ Exception -> 0x0804 }
            boolean r2 = r2.equals(r0)     // Catch:{ Exception -> 0x0804 }
            if (r2 != 0) goto L_0x0801
            r1.emojiSounds = r0     // Catch:{ Exception -> 0x0804 }
            org.telegram.tgnet.SerializedData r2 = new org.telegram.tgnet.SerializedData     // Catch:{ Exception -> 0x0804 }
            r2.<init>()     // Catch:{ Exception -> 0x0804 }
            java.util.HashMap<java.lang.String, org.telegram.messenger.MessagesController$EmojiSound> r3 = r1.emojiSounds     // Catch:{ Exception -> 0x0804 }
            int r3 = r3.size()     // Catch:{ Exception -> 0x0804 }
            r2.writeInt32(r3)     // Catch:{ Exception -> 0x0804 }
            java.util.HashMap<java.lang.String, org.telegram.messenger.MessagesController$EmojiSound> r3 = r1.emojiSounds     // Catch:{ Exception -> 0x0804 }
            java.util.Set r3 = r3.entrySet()     // Catch:{ Exception -> 0x0804 }
            java.util.Iterator r3 = r3.iterator()     // Catch:{ Exception -> 0x0804 }
        L_0x07c4:
            boolean r6 = r3.hasNext()     // Catch:{ Exception -> 0x0804 }
            if (r6 == 0) goto L_0x07ef
            java.lang.Object r6 = r3.next()     // Catch:{ Exception -> 0x0804 }
            java.util.Map$Entry r6 = (java.util.Map.Entry) r6     // Catch:{ Exception -> 0x0804 }
            java.lang.Object r8 = r6.getKey()     // Catch:{ Exception -> 0x0804 }
            java.lang.String r8 = (java.lang.String) r8     // Catch:{ Exception -> 0x0804 }
            r2.writeString(r8)     // Catch:{ Exception -> 0x0804 }
            java.lang.Object r8 = r6.getValue()     // Catch:{ Exception -> 0x0804 }
            org.telegram.messenger.MessagesController$EmojiSound r8 = (org.telegram.messenger.MessagesController.EmojiSound) r8     // Catch:{ Exception -> 0x0804 }
            long r11 = r8.id     // Catch:{ Exception -> 0x0804 }
            r2.writeInt64(r11)     // Catch:{ Exception -> 0x0804 }
            long r11 = r8.accessHash     // Catch:{ Exception -> 0x0804 }
            r2.writeInt64(r11)     // Catch:{ Exception -> 0x0804 }
            byte[] r11 = r8.fileReference     // Catch:{ Exception -> 0x0804 }
            r2.writeByteArray(r11)     // Catch:{ Exception -> 0x0804 }
            goto L_0x07c4
        L_0x07ef:
            java.lang.String r3 = "emojiSounds"
            byte[] r6 = r2.toByteArray()     // Catch:{ Exception -> 0x0804 }
            r8 = 0
            java.lang.String r6 = android.util.Base64.encodeToString(r6, r8)     // Catch:{ Exception -> 0x0804 }
            r4.putString(r3, r6)     // Catch:{ Exception -> 0x0804 }
            r2.cleanup()     // Catch:{ Exception -> 0x0804 }
            r5 = 1
        L_0x0801:
            r12 = r9
            goto L_0x0fff
        L_0x0804:
            r0 = move-exception
            goto L_0x080b
        L_0x0806:
            r0 = move-exception
            r22 = r6
            r21 = r8
        L_0x080b:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
            r20 = r7
            r12 = r9
            goto L_0x0ffd
        L_0x0813:
            r22 = r6
            r21 = r8
            java.util.HashSet r0 = new java.util.HashSet
            r0.<init>()
            org.telegram.tgnet.TLRPC$JSONValue r2 = r10.value
            boolean r2 = r2 instanceof org.telegram.tgnet.TLRPC.TL_jsonArray
            if (r2 == 0) goto L_0x0846
            org.telegram.tgnet.TLRPC$JSONValue r2 = r10.value
            org.telegram.tgnet.TLRPC$TL_jsonArray r2 = (org.telegram.tgnet.TLRPC.TL_jsonArray) r2
            r3 = 0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r6 = r2.value
            int r6 = r6.size()
        L_0x082d:
            if (r3 >= r6) goto L_0x0846
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r8 = r2.value
            java.lang.Object r8 = r8.get(r3)
            org.telegram.tgnet.TLRPC$JSONValue r8 = (org.telegram.tgnet.TLRPC.JSONValue) r8
            boolean r11 = r8 instanceof org.telegram.tgnet.TLRPC.TL_jsonString
            if (r11 == 0) goto L_0x0843
            r11 = r8
            org.telegram.tgnet.TLRPC$TL_jsonString r11 = (org.telegram.tgnet.TLRPC.TL_jsonString) r11
            java.lang.String r12 = r11.value
            r0.add(r12)
        L_0x0843:
            int r3 = r3 + 1
            goto L_0x082d
        L_0x0846:
            java.util.Set<java.lang.String> r2 = r1.pendingSuggestions
            boolean r2 = r2.equals(r0)
            if (r2 != 0) goto L_0x0866
            r1.pendingSuggestions = r0
            java.lang.String r2 = "pendingSuggestions"
            r4.putStringSet(r2, r0)
            org.telegram.messenger.NotificationCenter r2 = r32.getNotificationCenter()
            int r3 = org.telegram.messenger.NotificationCenter.newSuggestionsAvailable
            r6 = 0
            java.lang.Object[] r8 = new java.lang.Object[r6]
            r2.postNotificationName(r3, r8)
            r2 = 1
            r5 = r2
            r12 = r9
            goto L_0x0fff
        L_0x0866:
            r20 = r7
            r12 = r9
            goto L_0x0ffd
        L_0x086b:
            r22 = r6
            r21 = r8
            java.util.HashSet r0 = new java.util.HashSet
            r0.<init>()
            org.telegram.tgnet.TLRPC$JSONValue r2 = r10.value
            boolean r2 = r2 instanceof org.telegram.tgnet.TLRPC.TL_jsonArray
            if (r2 == 0) goto L_0x089e
            org.telegram.tgnet.TLRPC$JSONValue r2 = r10.value
            org.telegram.tgnet.TLRPC$TL_jsonArray r2 = (org.telegram.tgnet.TLRPC.TL_jsonArray) r2
            r3 = 0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r6 = r2.value
            int r6 = r6.size()
        L_0x0885:
            if (r3 >= r6) goto L_0x089e
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r8 = r2.value
            java.lang.Object r8 = r8.get(r3)
            org.telegram.tgnet.TLRPC$JSONValue r8 = (org.telegram.tgnet.TLRPC.JSONValue) r8
            boolean r11 = r8 instanceof org.telegram.tgnet.TLRPC.TL_jsonString
            if (r11 == 0) goto L_0x089b
            r11 = r8
            org.telegram.tgnet.TLRPC$TL_jsonString r11 = (org.telegram.tgnet.TLRPC.TL_jsonString) r11
            java.lang.String r12 = r11.value
            r0.add(r12)
        L_0x089b:
            int r3 = r3 + 1
            goto L_0x0885
        L_0x089e:
            java.util.Set<java.lang.String> r2 = r1.exportPrivateUri
            boolean r2 = r2.equals(r0)
            if (r2 != 0) goto L_0x08b2
            r1.exportPrivateUri = r0
            java.lang.String r2 = "exportPrivateUri"
            r4.putStringSet(r2, r0)
            r2 = 1
            r5 = r2
            r12 = r9
            goto L_0x0fff
        L_0x08b2:
            r20 = r7
            r12 = r9
            goto L_0x0ffd
        L_0x08b7:
            r22 = r6
            r21 = r8
            java.util.HashSet r0 = new java.util.HashSet
            r0.<init>()
            org.telegram.tgnet.TLRPC$JSONValue r2 = r10.value
            boolean r2 = r2 instanceof org.telegram.tgnet.TLRPC.TL_jsonArray
            if (r2 == 0) goto L_0x08ea
            org.telegram.tgnet.TLRPC$JSONValue r2 = r10.value
            org.telegram.tgnet.TLRPC$TL_jsonArray r2 = (org.telegram.tgnet.TLRPC.TL_jsonArray) r2
            r3 = 0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r6 = r2.value
            int r6 = r6.size()
        L_0x08d1:
            if (r3 >= r6) goto L_0x08ea
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r8 = r2.value
            java.lang.Object r8 = r8.get(r3)
            org.telegram.tgnet.TLRPC$JSONValue r8 = (org.telegram.tgnet.TLRPC.JSONValue) r8
            boolean r11 = r8 instanceof org.telegram.tgnet.TLRPC.TL_jsonString
            if (r11 == 0) goto L_0x08e7
            r11 = r8
            org.telegram.tgnet.TLRPC$TL_jsonString r11 = (org.telegram.tgnet.TLRPC.TL_jsonString) r11
            java.lang.String r12 = r11.value
            r0.add(r12)
        L_0x08e7:
            int r3 = r3 + 1
            goto L_0x08d1
        L_0x08ea:
            java.util.Set<java.lang.String> r2 = r1.exportGroupUri
            boolean r2 = r2.equals(r0)
            if (r2 != 0) goto L_0x08fe
            r1.exportGroupUri = r0
            java.lang.String r2 = "exportGroupUri"
            r4.putStringSet(r2, r0)
            r2 = 1
            r5 = r2
            r12 = r9
            goto L_0x0fff
        L_0x08fe:
            r20 = r7
            r12 = r9
            goto L_0x0ffd
        L_0x0903:
            r22 = r6
            r21 = r8
            java.util.HashSet r0 = new java.util.HashSet
            r0.<init>()
            org.telegram.tgnet.TLRPC$JSONValue r2 = r10.value
            boolean r2 = r2 instanceof org.telegram.tgnet.TLRPC.TL_jsonArray
            if (r2 == 0) goto L_0x0936
            org.telegram.tgnet.TLRPC$JSONValue r2 = r10.value
            org.telegram.tgnet.TLRPC$TL_jsonArray r2 = (org.telegram.tgnet.TLRPC.TL_jsonArray) r2
            r3 = 0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r6 = r2.value
            int r6 = r6.size()
        L_0x091d:
            if (r3 >= r6) goto L_0x0936
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r8 = r2.value
            java.lang.Object r8 = r8.get(r3)
            org.telegram.tgnet.TLRPC$JSONValue r8 = (org.telegram.tgnet.TLRPC.JSONValue) r8
            boolean r11 = r8 instanceof org.telegram.tgnet.TLRPC.TL_jsonString
            if (r11 == 0) goto L_0x0933
            r11 = r8
            org.telegram.tgnet.TLRPC$TL_jsonString r11 = (org.telegram.tgnet.TLRPC.TL_jsonString) r11
            java.lang.String r12 = r11.value
            r0.add(r12)
        L_0x0933:
            int r3 = r3 + 1
            goto L_0x091d
        L_0x0936:
            java.util.Set<java.lang.String> r2 = r1.exportUri
            boolean r2 = r2.equals(r0)
            if (r2 != 0) goto L_0x094a
            r1.exportUri = r0
            java.lang.String r2 = "exportUri2"
            r4.putStringSet(r2, r0)
            r2 = 1
            r5 = r2
            r12 = r9
            goto L_0x0fff
        L_0x094a:
            r20 = r7
            r12 = r9
            goto L_0x0ffd
        L_0x094f:
            r22 = r6
            r21 = r8
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonBool
            if (r0 == 0) goto L_0x0970
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            org.telegram.tgnet.TLRPC$TL_jsonBool r0 = (org.telegram.tgnet.TLRPC.TL_jsonBool) r0
            boolean r2 = r0.value
            boolean r3 = r1.suggestStickersApiOnly
            if (r2 == r3) goto L_0x096d
            boolean r2 = r0.value
            r1.suggestStickersApiOnly = r2
            java.lang.String r3 = "suggestStickersApiOnly"
            r4.putBoolean(r3, r2)
            r5 = 1
        L_0x096d:
            r12 = r9
            goto L_0x0fff
        L_0x0970:
            r20 = r7
            r12 = r9
            goto L_0x0ffd
        L_0x0975:
            r22 = r6
            r21 = r8
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonObject
            if (r0 == 0) goto L_0x0a24
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            org.telegram.tgnet.TLRPC$TL_jsonObject r0 = (org.telegram.tgnet.TLRPC.TL_jsonObject) r0
            r2 = 0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_jsonObjectValue> r3 = r0.value
            int r3 = r3.size()
        L_0x098a:
            if (r2 >= r3) goto L_0x0a21
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_jsonObjectValue> r6 = r0.value
            java.lang.Object r6 = r6.get(r2)
            org.telegram.tgnet.TLRPC$TL_jsonObjectValue r6 = (org.telegram.tgnet.TLRPC.TL_jsonObjectValue) r6
            java.lang.String r8 = r6.key
            int r11 = r8.hashCode()
            switch(r11) {
                case -233204595: goto L_0x09b2;
                case 258902020: goto L_0x09a8;
                case 1924434857: goto L_0x099e;
                default: goto L_0x099d;
            }
        L_0x099d:
            goto L_0x09bc
        L_0x099e:
            java.lang.String r11 = "video_bitrate"
            boolean r8 = r8.equals(r11)
            if (r8 == 0) goto L_0x099d
            r8 = 1
            goto L_0x09bd
        L_0x09a8:
            java.lang.String r11 = "audio_bitrate"
            boolean r8 = r8.equals(r11)
            if (r8 == 0) goto L_0x099d
            r8 = 2
            goto L_0x09bd
        L_0x09b2:
            java.lang.String r11 = "diameter"
            boolean r8 = r8.equals(r11)
            if (r8 == 0) goto L_0x099d
            r8 = 0
            goto L_0x09bd
        L_0x09bc:
            r8 = -1
        L_0x09bd:
            switch(r8) {
                case 0: goto L_0x09ff;
                case 1: goto L_0x09e0;
                case 2: goto L_0x09c1;
                default: goto L_0x09c0;
            }
        L_0x09c0:
            goto L_0x0a1d
        L_0x09c1:
            org.telegram.tgnet.TLRPC$JSONValue r8 = r6.value
            boolean r8 = r8 instanceof org.telegram.tgnet.TLRPC.TL_jsonNumber
            if (r8 == 0) goto L_0x0a1d
            org.telegram.tgnet.TLRPC$JSONValue r8 = r6.value
            org.telegram.tgnet.TLRPC$TL_jsonNumber r8 = (org.telegram.tgnet.TLRPC.TL_jsonNumber) r8
            double r12 = r8.value
            int r11 = r1.roundAudioBitrate
            double r14 = (double) r11
            int r11 = (r12 > r14 ? 1 : (r12 == r14 ? 0 : -1))
            if (r11 == 0) goto L_0x0a1d
            double r11 = r8.value
            int r11 = (int) r11
            r1.roundAudioBitrate = r11
            java.lang.String r12 = "roundAudioBitrate"
            r4.putInt(r12, r11)
            r5 = 1
            goto L_0x0a1d
        L_0x09e0:
            org.telegram.tgnet.TLRPC$JSONValue r8 = r6.value
            boolean r8 = r8 instanceof org.telegram.tgnet.TLRPC.TL_jsonNumber
            if (r8 == 0) goto L_0x0a1d
            org.telegram.tgnet.TLRPC$JSONValue r8 = r6.value
            org.telegram.tgnet.TLRPC$TL_jsonNumber r8 = (org.telegram.tgnet.TLRPC.TL_jsonNumber) r8
            double r11 = r8.value
            int r13 = r1.roundVideoBitrate
            double r13 = (double) r13
            int r15 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1))
            if (r15 == 0) goto L_0x09fe
            double r11 = r8.value
            int r11 = (int) r11
            r1.roundVideoBitrate = r11
            java.lang.String r12 = "roundVideoBitrate"
            r4.putInt(r12, r11)
            r5 = 1
        L_0x09fe:
            goto L_0x0a1d
        L_0x09ff:
            org.telegram.tgnet.TLRPC$JSONValue r8 = r6.value
            boolean r8 = r8 instanceof org.telegram.tgnet.TLRPC.TL_jsonNumber
            if (r8 == 0) goto L_0x0a1d
            org.telegram.tgnet.TLRPC$JSONValue r8 = r6.value
            org.telegram.tgnet.TLRPC$TL_jsonNumber r8 = (org.telegram.tgnet.TLRPC.TL_jsonNumber) r8
            double r11 = r8.value
            int r13 = r1.roundVideoSize
            double r13 = (double) r13
            int r15 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1))
            if (r15 == 0) goto L_0x0a1d
            double r11 = r8.value
            int r11 = (int) r11
            r1.roundVideoSize = r11
            java.lang.String r12 = "roundVideoSize"
            r4.putInt(r12, r11)
            r5 = 1
        L_0x0a1d:
            int r2 = r2 + 1
            goto L_0x098a
        L_0x0a21:
            r12 = r9
            goto L_0x0fff
        L_0x0a24:
            r20 = r7
            r12 = r9
            goto L_0x0ffd
        L_0x0a29:
            r22 = r6
            r21 = r8
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonNumber
            java.lang.String r2 = "updateCheckDelay"
            if (r0 == 0) goto L_0x0a4e
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            org.telegram.tgnet.TLRPC$TL_jsonNumber r0 = (org.telegram.tgnet.TLRPC.TL_jsonNumber) r0
            double r11 = r0.value
            int r3 = r1.updateCheckDelay
            double r13 = (double) r3
            int r3 = (r11 > r13 ? 1 : (r11 == r13 ? 0 : -1))
            if (r3 == 0) goto L_0x0a4b
            double r11 = r0.value
            int r3 = (int) r11
            r1.updateCheckDelay = r3
            r4.putInt(r2, r3)
            r5 = 1
        L_0x0a4b:
            r12 = r9
            goto L_0x0fff
        L_0x0a4e:
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonString
            if (r0 == 0) goto L_0x0a6f
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            org.telegram.tgnet.TLRPC$TL_jsonString r0 = (org.telegram.tgnet.TLRPC.TL_jsonString) r0
            java.lang.String r3 = r0.value
            java.lang.Integer r3 = org.telegram.messenger.Utilities.parseInt((java.lang.CharSequence) r3)
            int r3 = r3.intValue()
            int r6 = r1.updateCheckDelay
            if (r3 == r6) goto L_0x0a6c
            r1.updateCheckDelay = r3
            r4.putInt(r2, r3)
            r5 = 1
        L_0x0a6c:
            r12 = r9
            goto L_0x0fff
        L_0x0a6f:
            r20 = r7
            r12 = r9
            goto L_0x0ffd
        L_0x0a74:
            r22 = r6
            r21 = r8
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonNumber
            if (r0 == 0) goto L_0x0a99
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            org.telegram.tgnet.TLRPC$TL_jsonNumber r0 = (org.telegram.tgnet.TLRPC.TL_jsonNumber) r0
            double r2 = r0.value
            int r6 = r1.chatReadMarkExpirePeriod
            double r11 = (double) r6
            int r6 = (r2 > r11 ? 1 : (r2 == r11 ? 0 : -1))
            if (r6 == 0) goto L_0x0a96
            double r2 = r0.value
            int r2 = (int) r2
            r1.chatReadMarkExpirePeriod = r2
            java.lang.String r3 = "chatReadMarkExpirePeriod"
            r4.putInt(r3, r2)
            r5 = 1
        L_0x0a96:
            r12 = r9
            goto L_0x0fff
        L_0x0a99:
            r20 = r7
            r12 = r9
            goto L_0x0ffd
        L_0x0a9e:
            r22 = r6
            r21 = r8
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonNumber
            if (r0 == 0) goto L_0x0ac3
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            org.telegram.tgnet.TLRPC$TL_jsonNumber r0 = (org.telegram.tgnet.TLRPC.TL_jsonNumber) r0
            double r2 = r0.value
            int r6 = r1.chatReadMarkSizeThreshold
            double r11 = (double) r6
            int r6 = (r2 > r11 ? 1 : (r2 == r11 ? 0 : -1))
            if (r6 == 0) goto L_0x0ac0
            double r2 = r0.value
            int r2 = (int) r2
            r1.chatReadMarkSizeThreshold = r2
            java.lang.String r3 = "chatReadMarkSizeThreshold"
            r4.putInt(r3, r2)
            r5 = 1
        L_0x0ac0:
            r12 = r9
            goto L_0x0fff
        L_0x0ac3:
            r20 = r7
            r12 = r9
            goto L_0x0ffd
        L_0x0ac8:
            r22 = r6
            r21 = r8
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonNumber
            if (r0 == 0) goto L_0x0aed
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            org.telegram.tgnet.TLRPC$TL_jsonNumber r0 = (org.telegram.tgnet.TLRPC.TL_jsonNumber) r0
            double r2 = r0.value
            int r6 = r1.groupCallVideoMaxParticipants
            double r11 = (double) r6
            int r6 = (r2 > r11 ? 1 : (r2 == r11 ? 0 : -1))
            if (r6 == 0) goto L_0x0aea
            double r2 = r0.value
            int r2 = (int) r2
            r1.groupCallVideoMaxParticipants = r2
            java.lang.String r3 = "groipCallVideoMaxParticipants"
            r4.putInt(r3, r2)
            r5 = 1
        L_0x0aea:
            r12 = r9
            goto L_0x0fff
        L_0x0aed:
            r20 = r7
            r12 = r9
            goto L_0x0ffd
        L_0x0af2:
            r22 = r6
            r21 = r8
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonBool
            if (r0 == 0) goto L_0x0b13
            org.telegram.tgnet.TLRPC$JSONValue r0 = r10.value
            org.telegram.tgnet.TLRPC$TL_jsonBool r0 = (org.telegram.tgnet.TLRPC.TL_jsonBool) r0
            boolean r2 = r0.value
            boolean r3 = r1.autoarchiveAvailable
            if (r2 == r3) goto L_0x0b10
            boolean r2 = r0.value
            r1.autoarchiveAvailable = r2
            java.lang.String r3 = "autoarchiveAvailable"
            r4.putBoolean(r3, r2)
            r5 = 1
        L_0x0b10:
            r12 = r9
            goto L_0x0fff
        L_0x0b13:
            r20 = r7
            r12 = r9
            goto L_0x0ffd
        L_0x0b18:
            r22 = r6
            r21 = r8
            java.util.HashMap r0 = new java.util.HashMap     // Catch:{ Exception -> 0x0CLASSNAME }
            r0.<init>()     // Catch:{ Exception -> 0x0CLASSNAME }
            org.telegram.tgnet.TLRPC$JSONValue r2 = r10.value     // Catch:{ Exception -> 0x0CLASSNAME }
            boolean r2 = r2 instanceof org.telegram.tgnet.TLRPC.TL_jsonObject     // Catch:{ Exception -> 0x0CLASSNAME }
            if (r2 == 0) goto L_0x0bf4
            org.telegram.tgnet.TLRPC$JSONValue r2 = r10.value     // Catch:{ Exception -> 0x0CLASSNAME }
            org.telegram.tgnet.TLRPC$TL_jsonObject r2 = (org.telegram.tgnet.TLRPC.TL_jsonObject) r2     // Catch:{ Exception -> 0x0CLASSNAME }
            r3 = 0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_jsonObjectValue> r6 = r2.value     // Catch:{ Exception -> 0x0CLASSNAME }
            int r6 = r6.size()     // Catch:{ Exception -> 0x0CLASSNAME }
        L_0x0b32:
            if (r3 >= r6) goto L_0x0bea
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_jsonObjectValue> r8 = r2.value     // Catch:{ Exception -> 0x0CLASSNAME }
            java.lang.Object r8 = r8.get(r3)     // Catch:{ Exception -> 0x0CLASSNAME }
            org.telegram.tgnet.TLRPC$TL_jsonObjectValue r8 = (org.telegram.tgnet.TLRPC.TL_jsonObjectValue) r8     // Catch:{ Exception -> 0x0CLASSNAME }
            org.telegram.tgnet.TLRPC$JSONValue r12 = r8.value     // Catch:{ Exception -> 0x0CLASSNAME }
            boolean r12 = r12 instanceof org.telegram.tgnet.TLRPC.TL_jsonObject     // Catch:{ Exception -> 0x0CLASSNAME }
            if (r12 == 0) goto L_0x0bd4
            org.telegram.tgnet.TLRPC$JSONValue r12 = r8.value     // Catch:{ Exception -> 0x0CLASSNAME }
            org.telegram.tgnet.TLRPC$TL_jsonObject r12 = (org.telegram.tgnet.TLRPC.TL_jsonObject) r12     // Catch:{ Exception -> 0x0CLASSNAME }
            r13 = 2147483647(0x7fffffff, float:NaN)
            r14 = 2147483647(0x7fffffff, float:NaN)
            r16 = 0
            r17 = r2
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_jsonObjectValue> r2 = r12.value     // Catch:{ Exception -> 0x0CLASSNAME }
            int r2 = r2.size()     // Catch:{ Exception -> 0x0CLASSNAME }
            r31 = r16
            r16 = r6
            r6 = r31
        L_0x0b5c:
            if (r6 >= r2) goto L_0x0bb5
            r18 = r2
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_jsonObjectValue> r2 = r12.value     // Catch:{ Exception -> 0x0CLASSNAME }
            java.lang.Object r2 = r2.get(r6)     // Catch:{ Exception -> 0x0CLASSNAME }
            org.telegram.tgnet.TLRPC$TL_jsonObjectValue r2 = (org.telegram.tgnet.TLRPC.TL_jsonObjectValue) r2     // Catch:{ Exception -> 0x0CLASSNAME }
            r19 = r12
            org.telegram.tgnet.TLRPC$JSONValue r12 = r2.value     // Catch:{ Exception -> 0x0CLASSNAME }
            boolean r12 = r12 instanceof org.telegram.tgnet.TLRPC.TL_jsonNumber     // Catch:{ Exception -> 0x0CLASSNAME }
            if (r12 == 0) goto L_0x0ba4
            java.lang.String r12 = "value"
            r20 = r7
            java.lang.String r7 = r2.key     // Catch:{ Exception -> 0x0b9e }
            boolean r7 = r12.equals(r7)     // Catch:{ Exception -> 0x0b9e }
            if (r7 == 0) goto L_0x0b88
            org.telegram.tgnet.TLRPC$JSONValue r7 = r2.value     // Catch:{ Exception -> 0x0b9e }
            org.telegram.tgnet.TLRPC$TL_jsonNumber r7 = (org.telegram.tgnet.TLRPC.TL_jsonNumber) r7     // Catch:{ Exception -> 0x0b9e }
            r12 = r9
            r23 = r10
            double r9 = r7.value     // Catch:{ Exception -> 0x0CLASSNAME }
            int r7 = (int) r9     // Catch:{ Exception -> 0x0CLASSNAME }
            r13 = r7
            goto L_0x0ba9
        L_0x0b88:
            r12 = r9
            r23 = r10
            java.lang.String r7 = "frame_start"
            java.lang.String r9 = r2.key     // Catch:{ Exception -> 0x0CLASSNAME }
            boolean r7 = r7.equals(r9)     // Catch:{ Exception -> 0x0CLASSNAME }
            if (r7 == 0) goto L_0x0ba9
            org.telegram.tgnet.TLRPC$JSONValue r7 = r2.value     // Catch:{ Exception -> 0x0CLASSNAME }
            org.telegram.tgnet.TLRPC$TL_jsonNumber r7 = (org.telegram.tgnet.TLRPC.TL_jsonNumber) r7     // Catch:{ Exception -> 0x0CLASSNAME }
            double r9 = r7.value     // Catch:{ Exception -> 0x0CLASSNAME }
            int r7 = (int) r9     // Catch:{ Exception -> 0x0CLASSNAME }
            r14 = r7
            goto L_0x0ba9
        L_0x0b9e:
            r0 = move-exception
            r12 = r9
            r23 = r10
            goto L_0x0c5f
        L_0x0ba4:
            r20 = r7
            r12 = r9
            r23 = r10
        L_0x0ba9:
            int r6 = r6 + 1
            r9 = r12
            r2 = r18
            r12 = r19
            r7 = r20
            r10 = r23
            goto L_0x0b5c
        L_0x0bb5:
            r18 = r2
            r20 = r7
            r23 = r10
            r19 = r12
            r12 = r9
            r2 = 2147483647(0x7fffffff, float:NaN)
            if (r14 == r2) goto L_0x0bdd
            if (r13 == r2) goto L_0x0bdd
            java.lang.String r2 = r8.key     // Catch:{ Exception -> 0x0CLASSNAME }
            java.lang.String r2 = r2.replace(r15, r11)     // Catch:{ Exception -> 0x0CLASSNAME }
            org.telegram.messenger.MessagesController$DiceFrameSuccess r6 = new org.telegram.messenger.MessagesController$DiceFrameSuccess     // Catch:{ Exception -> 0x0CLASSNAME }
            r6.<init>(r14, r13)     // Catch:{ Exception -> 0x0CLASSNAME }
            r0.put(r2, r6)     // Catch:{ Exception -> 0x0CLASSNAME }
            goto L_0x0bdd
        L_0x0bd4:
            r17 = r2
            r16 = r6
            r20 = r7
            r12 = r9
            r23 = r10
        L_0x0bdd:
            int r3 = r3 + 1
            r9 = r12
            r6 = r16
            r2 = r17
            r7 = r20
            r10 = r23
            goto L_0x0b32
        L_0x0bea:
            r17 = r2
            r16 = r6
            r20 = r7
            r12 = r9
            r23 = r10
            goto L_0x0bf9
        L_0x0bf4:
            r20 = r7
            r12 = r9
            r23 = r10
        L_0x0bf9:
            java.util.HashMap<java.lang.String, org.telegram.messenger.MessagesController$DiceFrameSuccess> r2 = r1.diceSuccess     // Catch:{ Exception -> 0x0CLASSNAME }
            boolean r2 = r2.equals(r0)     // Catch:{ Exception -> 0x0CLASSNAME }
            if (r2 != 0) goto L_0x0CLASSNAME
            r1.diceSuccess = r0     // Catch:{ Exception -> 0x0CLASSNAME }
            org.telegram.tgnet.SerializedData r2 = new org.telegram.tgnet.SerializedData     // Catch:{ Exception -> 0x0CLASSNAME }
            r2.<init>()     // Catch:{ Exception -> 0x0CLASSNAME }
            java.util.HashMap<java.lang.String, org.telegram.messenger.MessagesController$DiceFrameSuccess> r3 = r1.diceSuccess     // Catch:{ Exception -> 0x0CLASSNAME }
            int r3 = r3.size()     // Catch:{ Exception -> 0x0CLASSNAME }
            r2.writeInt32(r3)     // Catch:{ Exception -> 0x0CLASSNAME }
            java.util.HashMap<java.lang.String, org.telegram.messenger.MessagesController$DiceFrameSuccess> r3 = r1.diceSuccess     // Catch:{ Exception -> 0x0CLASSNAME }
            java.util.Set r3 = r3.entrySet()     // Catch:{ Exception -> 0x0CLASSNAME }
            java.util.Iterator r3 = r3.iterator()     // Catch:{ Exception -> 0x0CLASSNAME }
        L_0x0c1b:
            boolean r6 = r3.hasNext()     // Catch:{ Exception -> 0x0CLASSNAME }
            if (r6 == 0) goto L_0x0CLASSNAME
            java.lang.Object r6 = r3.next()     // Catch:{ Exception -> 0x0CLASSNAME }
            java.util.Map$Entry r6 = (java.util.Map.Entry) r6     // Catch:{ Exception -> 0x0CLASSNAME }
            java.lang.Object r7 = r6.getKey()     // Catch:{ Exception -> 0x0CLASSNAME }
            java.lang.String r7 = (java.lang.String) r7     // Catch:{ Exception -> 0x0CLASSNAME }
            r2.writeString(r7)     // Catch:{ Exception -> 0x0CLASSNAME }
            java.lang.Object r7 = r6.getValue()     // Catch:{ Exception -> 0x0CLASSNAME }
            org.telegram.messenger.MessagesController$DiceFrameSuccess r7 = (org.telegram.messenger.MessagesController.DiceFrameSuccess) r7     // Catch:{ Exception -> 0x0CLASSNAME }
            int r8 = r7.frame     // Catch:{ Exception -> 0x0CLASSNAME }
            r2.writeInt32(r8)     // Catch:{ Exception -> 0x0CLASSNAME }
            int r8 = r7.num     // Catch:{ Exception -> 0x0CLASSNAME }
            r2.writeInt32(r8)     // Catch:{ Exception -> 0x0CLASSNAME }
            goto L_0x0c1b
        L_0x0CLASSNAME:
            java.lang.String r3 = "diceSuccess"
            byte[] r6 = r2.toByteArray()     // Catch:{ Exception -> 0x0CLASSNAME }
            r7 = 0
            java.lang.String r6 = android.util.Base64.encodeToString(r6, r7)     // Catch:{ Exception -> 0x0CLASSNAME }
            r4.putString(r3, r6)     // Catch:{ Exception -> 0x0CLASSNAME }
            r2.cleanup()     // Catch:{ Exception -> 0x0CLASSNAME }
            r5 = 1
        L_0x0CLASSNAME:
            r7 = r20
            goto L_0x0fff
        L_0x0CLASSNAME:
            r0 = move-exception
            goto L_0x0c5f
        L_0x0CLASSNAME:
            r0 = move-exception
            r20 = r7
            r12 = r9
            r23 = r10
        L_0x0c5f:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
            goto L_0x0ffd
        L_0x0CLASSNAME:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            r23 = r10
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r2 = r23
            org.telegram.tgnet.TLRPC$JSONValue r3 = r2.value
            boolean r3 = r3 instanceof org.telegram.tgnet.TLRPC.TL_jsonArray
            if (r3 == 0) goto L_0x0ca2
            org.telegram.tgnet.TLRPC$JSONValue r3 = r2.value
            org.telegram.tgnet.TLRPC$TL_jsonArray r3 = (org.telegram.tgnet.TLRPC.TL_jsonArray) r3
            r6 = 0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r7 = r3.value
            int r7 = r7.size()
        L_0x0CLASSNAME:
            if (r6 >= r7) goto L_0x0ca2
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r8 = r3.value
            java.lang.Object r8 = r8.get(r6)
            org.telegram.tgnet.TLRPC$JSONValue r8 = (org.telegram.tgnet.TLRPC.JSONValue) r8
            boolean r9 = r8 instanceof org.telegram.tgnet.TLRPC.TL_jsonString
            if (r9 == 0) goto L_0x0c9f
            r9 = r8
            org.telegram.tgnet.TLRPC$TL_jsonString r9 = (org.telegram.tgnet.TLRPC.TL_jsonString) r9
            java.lang.String r10 = r9.value
            java.lang.String r10 = r10.replace(r15, r11)
            r0.add(r10)
        L_0x0c9f:
            int r6 = r6 + 1
            goto L_0x0CLASSNAME
        L_0x0ca2:
            java.util.ArrayList<java.lang.String> r3 = r1.gifSearchEmojies
            boolean r3 = r3.equals(r0)
            if (r3 != 0) goto L_0x0ffd
            r1.gifSearchEmojies = r0
            org.telegram.tgnet.SerializedData r3 = new org.telegram.tgnet.SerializedData
            r3.<init>()
            java.util.ArrayList<java.lang.String> r6 = r1.gifSearchEmojies
            int r6 = r6.size()
            r3.writeInt32(r6)
            r6 = 0
            java.util.ArrayList<java.lang.String> r7 = r1.gifSearchEmojies
            int r7 = r7.size()
        L_0x0cc1:
            if (r6 >= r7) goto L_0x0cd1
            java.util.ArrayList<java.lang.String> r8 = r1.gifSearchEmojies
            java.lang.Object r8 = r8.get(r6)
            java.lang.String r8 = (java.lang.String) r8
            r3.writeString(r8)
            int r6 = r6 + 1
            goto L_0x0cc1
        L_0x0cd1:
            byte[] r6 = r3.toByteArray()
            r7 = 0
            java.lang.String r6 = android.util.Base64.encodeToString(r6, r7)
            java.lang.String r7 = "gifSearchEmojies"
            r4.putString(r7, r6)
            r3.cleanup()
            r3 = 1
            r5 = r3
            r7 = r20
            goto L_0x0fff
        L_0x0ce8:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            r2 = r10
            java.util.HashSet r0 = new java.util.HashSet
            r0.<init>()
            org.telegram.tgnet.TLRPC$JSONValue r3 = r2.value
            boolean r3 = r3 instanceof org.telegram.tgnet.TLRPC.TL_jsonArray
            if (r3 == 0) goto L_0x0d23
            org.telegram.tgnet.TLRPC$JSONValue r3 = r2.value
            org.telegram.tgnet.TLRPC$TL_jsonArray r3 = (org.telegram.tgnet.TLRPC.TL_jsonArray) r3
            r6 = 0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r7 = r3.value
            int r7 = r7.size()
        L_0x0d06:
            if (r6 >= r7) goto L_0x0d23
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r8 = r3.value
            java.lang.Object r8 = r8.get(r6)
            org.telegram.tgnet.TLRPC$JSONValue r8 = (org.telegram.tgnet.TLRPC.JSONValue) r8
            boolean r9 = r8 instanceof org.telegram.tgnet.TLRPC.TL_jsonString
            if (r9 == 0) goto L_0x0d20
            r9 = r8
            org.telegram.tgnet.TLRPC$TL_jsonString r9 = (org.telegram.tgnet.TLRPC.TL_jsonString) r9
            java.lang.String r10 = r9.value
            java.lang.String r10 = r10.replace(r15, r11)
            r0.add(r10)
        L_0x0d20:
            int r6 = r6 + 1
            goto L_0x0d06
        L_0x0d23:
            java.util.HashSet<java.lang.String> r3 = r1.diceEmojies
            boolean r3 = r3.equals(r0)
            if (r3 != 0) goto L_0x0ffd
            r1.diceEmojies = r0
            java.lang.String r3 = "diceEmojies"
            r4.putStringSet(r3, r0)
            r3 = 1
            r5 = r3
            r7 = r20
            goto L_0x0fff
        L_0x0d38:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            r2 = r10
            org.telegram.tgnet.TLRPC$JSONValue r0 = r2.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonString
            if (r0 == 0) goto L_0x0ffd
            org.telegram.tgnet.TLRPC$JSONValue r0 = r2.value
            org.telegram.tgnet.TLRPC$TL_jsonString r0 = (org.telegram.tgnet.TLRPC.TL_jsonString) r0
            java.lang.String r3 = r0.value
            java.lang.String r6 = r1.autologinToken
            boolean r3 = r3.equals(r6)
            if (r3 != 0) goto L_0x0d5e
            java.lang.String r3 = r0.value
            r1.autologinToken = r3
            java.lang.String r6 = "autologinToken"
            r4.putString(r6, r3)
            r5 = 1
        L_0x0d5e:
            r7 = r20
            goto L_0x0fff
        L_0x0d62:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            r2 = r10
            java.util.HashSet r0 = new java.util.HashSet
            r0.<init>()
            org.telegram.tgnet.TLRPC$JSONValue r3 = r2.value
            boolean r3 = r3 instanceof org.telegram.tgnet.TLRPC.TL_jsonArray
            if (r3 == 0) goto L_0x0d99
            org.telegram.tgnet.TLRPC$JSONValue r3 = r2.value
            org.telegram.tgnet.TLRPC$TL_jsonArray r3 = (org.telegram.tgnet.TLRPC.TL_jsonArray) r3
            r6 = 0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r7 = r3.value
            int r7 = r7.size()
        L_0x0d80:
            if (r6 >= r7) goto L_0x0d99
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r8 = r3.value
            java.lang.Object r8 = r8.get(r6)
            org.telegram.tgnet.TLRPC$JSONValue r8 = (org.telegram.tgnet.TLRPC.JSONValue) r8
            boolean r9 = r8 instanceof org.telegram.tgnet.TLRPC.TL_jsonString
            if (r9 == 0) goto L_0x0d96
            r9 = r8
            org.telegram.tgnet.TLRPC$TL_jsonString r9 = (org.telegram.tgnet.TLRPC.TL_jsonString) r9
            java.lang.String r10 = r9.value
            r0.add(r10)
        L_0x0d96:
            int r6 = r6 + 1
            goto L_0x0d80
        L_0x0d99:
            java.util.Set<java.lang.String> r3 = r1.autologinDomains
            boolean r3 = r3.equals(r0)
            if (r3 != 0) goto L_0x0ffd
            r1.autologinDomains = r0
            java.lang.String r3 = "autologinDomains"
            r4.putStringSet(r3, r0)
            r3 = 1
            r5 = r3
            r7 = r20
            goto L_0x0fff
        L_0x0dae:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            r2 = r10
            java.util.HashSet r0 = new java.util.HashSet
            r0.<init>()
            org.telegram.tgnet.TLRPC$JSONValue r3 = r2.value
            boolean r3 = r3 instanceof org.telegram.tgnet.TLRPC.TL_jsonArray
            if (r3 == 0) goto L_0x0de5
            org.telegram.tgnet.TLRPC$JSONValue r3 = r2.value
            org.telegram.tgnet.TLRPC$TL_jsonArray r3 = (org.telegram.tgnet.TLRPC.TL_jsonArray) r3
            r6 = 0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r7 = r3.value
            int r7 = r7.size()
        L_0x0dcc:
            if (r6 >= r7) goto L_0x0de5
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r8 = r3.value
            java.lang.Object r8 = r8.get(r6)
            org.telegram.tgnet.TLRPC$JSONValue r8 = (org.telegram.tgnet.TLRPC.JSONValue) r8
            boolean r9 = r8 instanceof org.telegram.tgnet.TLRPC.TL_jsonString
            if (r9 == 0) goto L_0x0de2
            r9 = r8
            org.telegram.tgnet.TLRPC$TL_jsonString r9 = (org.telegram.tgnet.TLRPC.TL_jsonString) r9
            java.lang.String r10 = r9.value
            r0.add(r10)
        L_0x0de2:
            int r6 = r6 + 1
            goto L_0x0dcc
        L_0x0de5:
            java.util.Set<java.lang.String> r3 = r1.authDomains
            boolean r3 = r3.equals(r0)
            if (r3 != 0) goto L_0x0ffd
            r1.authDomains = r0
            java.lang.String r3 = "authDomains"
            r4.putStringSet(r3, r0)
            r3 = 1
            r5 = r3
            r7 = r20
            goto L_0x0fff
        L_0x0dfa:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            r2 = r10
            org.telegram.tgnet.TLRPC$JSONValue r0 = r2.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonBool
            if (r0 == 0) goto L_0x0ffd
            org.telegram.tgnet.TLRPC$JSONValue r0 = r2.value
            org.telegram.tgnet.TLRPC$TL_jsonBool r0 = (org.telegram.tgnet.TLRPC.TL_jsonBool) r0
            boolean r3 = r0.value
            boolean r6 = r1.saveGifsWithStickers
            if (r3 == r6) goto L_0x0e1c
            boolean r3 = r0.value
            r1.saveGifsWithStickers = r3
            java.lang.String r6 = "saveGifsWithStickers"
            r4.putBoolean(r6, r3)
            r5 = 1
        L_0x0e1c:
            r7 = r20
            goto L_0x0fff
        L_0x0e20:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            r2 = r10
            org.telegram.tgnet.TLRPC$JSONValue r0 = r2.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonBool
            if (r0 == 0) goto L_0x0ffd
            org.telegram.tgnet.TLRPC$JSONValue r0 = r2.value
            org.telegram.tgnet.TLRPC$TL_jsonBool r0 = (org.telegram.tgnet.TLRPC.TL_jsonBool) r0
            boolean r3 = r0.value
            boolean r6 = r1.qrLoginCamera
            if (r3 == r6) goto L_0x0e42
            boolean r3 = r0.value
            r1.qrLoginCamera = r3
            java.lang.String r6 = "qrLoginCamera"
            r4.putBoolean(r6, r3)
            r5 = 1
        L_0x0e42:
            r7 = r20
            goto L_0x0fff
        L_0x0e46:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            r2 = r10
            org.telegram.tgnet.TLRPC$JSONValue r0 = r2.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonBool
            if (r0 == 0) goto L_0x0ffd
            org.telegram.tgnet.TLRPC$JSONValue r0 = r2.value
            org.telegram.tgnet.TLRPC$TL_jsonBool r0 = (org.telegram.tgnet.TLRPC.TL_jsonBool) r0
            boolean r3 = r0.value
            boolean r6 = r1.keepAliveService
            if (r3 == r6) goto L_0x0e6a
            boolean r3 = r0.value
            r1.keepAliveService = r3
            java.lang.String r6 = "keepAliveService"
            r4.putBoolean(r6, r3)
            r5 = 1
            r7 = 1
            goto L_0x0e6c
        L_0x0e6a:
            r7 = r20
        L_0x0e6c:
            goto L_0x0fff
        L_0x0e6e:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            r2 = r10
            org.telegram.tgnet.TLRPC$JSONValue r0 = r2.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonBool
            if (r0 == 0) goto L_0x0ffd
            org.telegram.tgnet.TLRPC$JSONValue r0 = r2.value
            org.telegram.tgnet.TLRPC$TL_jsonBool r0 = (org.telegram.tgnet.TLRPC.TL_jsonBool) r0
            boolean r3 = r0.value
            boolean r6 = r1.backgroundConnection
            if (r3 == r6) goto L_0x0e92
            boolean r3 = r0.value
            r1.backgroundConnection = r3
            java.lang.String r6 = "backgroundConnection"
            r4.putBoolean(r6, r3)
            r5 = 1
            r7 = 1
            goto L_0x0e94
        L_0x0e92:
            r7 = r20
        L_0x0e94:
            goto L_0x0fff
        L_0x0e96:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            r2 = r10
            org.telegram.tgnet.TLRPC$JSONValue r0 = r2.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonString
            if (r0 == 0) goto L_0x0ffd
            org.telegram.tgnet.TLRPC$JSONValue r0 = r2.value
            org.telegram.tgnet.TLRPC$TL_jsonString r0 = (org.telegram.tgnet.TLRPC.TL_jsonString) r0
            java.lang.String r3 = r0.value
            java.lang.String r6 = r1.youtubePipType
            boolean r3 = r3.equals(r6)
            if (r3 != 0) goto L_0x0ebc
            java.lang.String r3 = r0.value
            r1.youtubePipType = r3
            java.lang.String r6 = "youtubePipType"
            r4.putString(r6, r3)
            r5 = 1
        L_0x0ebc:
            r7 = r20
            goto L_0x0fff
        L_0x0ec0:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            r2 = r10
            org.telegram.tgnet.TLRPC$JSONValue r0 = r2.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonBool
            if (r0 == 0) goto L_0x0ffd
            org.telegram.tgnet.TLRPC$JSONValue r0 = r2.value
            org.telegram.tgnet.TLRPC$TL_jsonBool r0 = (org.telegram.tgnet.TLRPC.TL_jsonBool) r0
            boolean r3 = r0.value
            boolean r6 = r1.showFiltersTooltip
            if (r3 == r6) goto L_0x0eee
            boolean r3 = r0.value
            r1.showFiltersTooltip = r3
            java.lang.String r6 = "showFiltersTooltip"
            r4.putBoolean(r6, r3)
            r5 = 1
            org.telegram.messenger.NotificationCenter r3 = r32.getNotificationCenter()
            int r6 = org.telegram.messenger.NotificationCenter.filterSettingsUpdated
            r7 = 0
            java.lang.Object[] r8 = new java.lang.Object[r7]
            r3.postNotificationName(r6, r8)
        L_0x0eee:
            r7 = r20
            goto L_0x0fff
        L_0x0ef2:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            r2 = r10
            org.telegram.tgnet.TLRPC$JSONValue r0 = r2.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonBool
            if (r0 == 0) goto L_0x0ffd
            org.telegram.tgnet.TLRPC$JSONValue r0 = r2.value
            org.telegram.tgnet.TLRPC$TL_jsonBool r0 = (org.telegram.tgnet.TLRPC.TL_jsonBool) r0
            boolean r3 = r0.value
            boolean r6 = r1.filtersEnabled
            if (r3 == r6) goto L_0x0var_
            boolean r3 = r0.value
            r1.filtersEnabled = r3
            java.lang.String r6 = "filtersEnabled"
            r4.putBoolean(r6, r3)
            r5 = 1
        L_0x0var_:
            r7 = r20
            goto L_0x0fff
        L_0x0var_:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            r2 = r10
            org.telegram.tgnet.TLRPC$JSONValue r0 = r2.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonBool
            if (r0 == 0) goto L_0x0ffd
            org.telegram.tgnet.TLRPC$JSONValue r0 = r2.value
            org.telegram.tgnet.TLRPC$TL_jsonBool r0 = (org.telegram.tgnet.TLRPC.TL_jsonBool) r0
            boolean r3 = r0.value
            boolean r6 = r1.getfileExperimentalParams
            if (r3 == r6) goto L_0x0f3a
            boolean r3 = r0.value
            r1.getfileExperimentalParams = r3
            java.lang.String r6 = "getfileExperimentalParams"
            r4.putBoolean(r6, r3)
            r5 = 1
        L_0x0f3a:
            r7 = r20
            goto L_0x0fff
        L_0x0f3e:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            r2 = r10
            org.telegram.tgnet.TLRPC$JSONValue r0 = r2.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonNumber
            if (r0 == 0) goto L_0x0ffd
            org.telegram.tgnet.TLRPC$JSONValue r0 = r2.value
            org.telegram.tgnet.TLRPC$TL_jsonNumber r0 = (org.telegram.tgnet.TLRPC.TL_jsonNumber) r0
            float r3 = r1.animatedEmojisZoom
            double r6 = (double) r3
            double r8 = r0.value
            int r3 = (r6 > r8 ? 1 : (r6 == r8 ? 0 : -1))
            if (r3 == 0) goto L_0x0var_
            double r6 = r0.value
            float r3 = (float) r6
            r1.animatedEmojisZoom = r3
            java.lang.String r6 = "animatedEmojisZoom"
            r4.putFloat(r6, r3)
            r5 = 1
        L_0x0var_:
            r7 = r20
            goto L_0x0fff
        L_0x0var_:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            r2 = r10
            org.telegram.tgnet.TLRPC$JSONValue r0 = r2.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonArray
            if (r0 == 0) goto L_0x0ffd
            org.telegram.tgnet.TLRPC$JSONValue r0 = r2.value
            org.telegram.tgnet.TLRPC$TL_jsonArray r0 = (org.telegram.tgnet.TLRPC.TL_jsonArray) r0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$JSONValue> r3 = r0.value
            boolean r0 = r1.savePremiumFeaturesPreviewOrder(r4, r3)
            r5 = r0
            r7 = r20
            goto L_0x0fff
        L_0x0var_:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            r2 = r10
            org.telegram.tgnet.TLRPC$JSONValue r0 = r2.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonString
            if (r0 == 0) goto L_0x0ffd
            org.telegram.tgnet.TLRPC$JSONValue r0 = r2.value
            org.telegram.tgnet.TLRPC$TL_jsonString r0 = (org.telegram.tgnet.TLRPC.TL_jsonString) r0
            java.lang.String r0 = r0.value
            java.lang.String r3 = r1.premiumInvoiceSlug
            boolean r3 = r0.equals(r3)
            if (r3 != 0) goto L_0x0fa9
            r1.premiumInvoiceSlug = r0
            java.lang.String r3 = "premiumInvoiceSlug"
            r4.putString(r3, r0)
            r5 = 1
        L_0x0fa9:
            r7 = r20
            goto L_0x0fff
        L_0x0fac:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            r2 = r10
            org.telegram.tgnet.TLRPC$JSONValue r0 = r2.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonString
            if (r0 == 0) goto L_0x0ffd
            org.telegram.tgnet.TLRPC$JSONValue r0 = r2.value
            org.telegram.tgnet.TLRPC$TL_jsonString r0 = (org.telegram.tgnet.TLRPC.TL_jsonString) r0
            java.lang.String r0 = r0.value
            java.lang.String r3 = r1.premiumBotUsername
            boolean r3 = r0.equals(r3)
            if (r3 != 0) goto L_0x0fd0
            r1.premiumBotUsername = r0
            java.lang.String r3 = "premiumBotUsername"
            r4.putString(r3, r0)
            r5 = 1
        L_0x0fd0:
            r7 = r20
            goto L_0x0fff
        L_0x0fd3:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            r2 = r10
            org.telegram.tgnet.TLRPC$JSONValue r0 = r2.value
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC.TL_jsonBool
            if (r0 == 0) goto L_0x0ffd
            boolean r0 = r1.premiumLocked
            org.telegram.tgnet.TLRPC$JSONValue r3 = r2.value
            org.telegram.tgnet.TLRPC$TL_jsonBool r3 = (org.telegram.tgnet.TLRPC.TL_jsonBool) r3
            boolean r3 = r3.value
            if (r0 == r3) goto L_0x0ffd
            org.telegram.tgnet.TLRPC$JSONValue r0 = r2.value
            org.telegram.tgnet.TLRPC$TL_jsonBool r0 = (org.telegram.tgnet.TLRPC.TL_jsonBool) r0
            boolean r0 = r0.value
            r1.premiumLocked = r0
            java.lang.String r3 = "premiumLocked"
            r4.putBoolean(r3, r0)
            r0 = 1
            r5 = r0
            r7 = r20
            goto L_0x0fff
        L_0x0ffd:
            r7 = r20
        L_0x0fff:
            int r9 = r12 + 1
            r2 = r33
            r8 = r21
            r6 = r22
            goto L_0x001d
        L_0x1009:
            r22 = r6
            r20 = r7
            r21 = r8
            r12 = r9
            if (r5 == 0) goto L_0x1015
            r4.apply()
        L_0x1015:
            if (r20 == 0) goto L_0x1025
            org.telegram.messenger.ApplicationLoader.startPushService()
            org.telegram.tgnet.ConnectionsManager r0 = r32.getConnectionsManager()
            boolean r2 = r0.isPushConnectionEnabled()
            r0.setPushConnectionEnabled(r2)
        L_0x1025:
            r2 = 0
            r1.loadingAppConfig = r2
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.m242xeb747b23(org.telegram.tgnet.TLObject):void");
    }

    private boolean savePremiumFeaturesPreviewOrder(SharedPreferences.Editor editor, ArrayList<TLRPC.JSONValue> value) {
        int type;
        StringBuilder stringBuilder = new StringBuilder();
        this.premiumFeaturesTypesToPosition.clear();
        for (int i = 0; i < value.size(); i++) {
            String s = null;
            if (value.get(i) instanceof TLRPC.TL_jsonString) {
                s = ((TLRPC.TL_jsonString) value.get(i)).value;
            }
            if (s != null && (type = PremiumPreviewFragment.severStringToFeatureType(s)) >= 0) {
                this.premiumFeaturesTypesToPosition.put(type, i);
                if (stringBuilder.length() > 0) {
                    stringBuilder.append('_');
                }
                stringBuilder.append(type);
            }
        }
        boolean changed = true;
        if (stringBuilder.length() > 0) {
            String string = stringBuilder.toString();
            boolean changed2 = !string.equals(this.mainPreferences.getString("premiumFeaturesTypesToPosition", (String) null));
            editor.putString("premiumFeaturesTypesToPosition", string);
            return changed2;
        }
        editor.remove("premiumFeaturesTypesToPosition");
        if (this.mainPreferences.getString("premiumFeaturesTypesToPosition", (String) null) == null) {
            changed = false;
        }
        return changed;
    }

    private void loadPremiumFeaturesPreviewOrder(String string) {
        this.premiumFeaturesTypesToPosition.clear();
        if (string != null) {
            String[] types = string.split("_");
            for (int i = 0; i < types.length; i++) {
                this.premiumFeaturesTypesToPosition.put(Integer.parseInt(types[i]), i);
            }
        }
    }

    public void removeSuggestion(long did, String suggestion) {
        if (!TextUtils.isEmpty(suggestion)) {
            if (did == 0) {
                if (this.pendingSuggestions.remove(suggestion)) {
                    SharedPreferences.Editor editor = this.mainPreferences.edit();
                    editor.putStringSet("pendingSuggestions", this.pendingSuggestions);
                    editor.commit();
                    getNotificationCenter().postNotificationName(NotificationCenter.newSuggestionsAvailable, new Object[0]);
                } else {
                    return;
                }
            }
            TLRPC.TL_help_dismissSuggestion req = new TLRPC.TL_help_dismissSuggestion();
            req.suggestion = suggestion;
            if (did == 0) {
                req.peer = new TLRPC.TL_inputPeerEmpty();
            } else {
                req.peer = getInputPeer(did);
            }
            getConnectionsManager().sendRequest(req, MessagesController$$ExternalSyntheticLambda283.INSTANCE);
        }
    }

    static /* synthetic */ void lambda$removeSuggestion$22(TLObject response, TLRPC.TL_error error) {
    }

    public void updateConfig(TLRPC.TL_config config) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda68(this, config));
    }

    /* renamed from: lambda$updateConfig$23$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m426lambda$updateConfig$23$orgtelegrammessengerMessagesController(TLRPC.TL_config config) {
        getDownloadController().loadAutoDownloadConfig(false);
        m301lambda$new$10$orgtelegrammessengerMessagesController();
        this.remoteConfigLoaded = true;
        this.maxMegagroupCount = config.megagroup_size_max;
        this.maxGroupCount = config.chat_size_max;
        this.maxEditTime = config.edit_time_limit;
        this.ratingDecay = config.rating_e_decay;
        this.maxRecentGifsCount = config.saved_gifs_limit;
        this.maxRecentStickersCount = config.stickers_recent_limit;
        this.maxFaveStickersCount = config.stickers_faved_limit;
        this.revokeTimeLimit = config.revoke_time_limit;
        this.revokeTimePmLimit = config.revoke_pm_time_limit;
        this.canRevokePmInbox = config.revoke_pm_inbox;
        this.linkPrefix = config.me_url_prefix;
        boolean forceTryIpV6 = config.force_try_ipv6;
        if (this.linkPrefix.endsWith("/")) {
            String str = this.linkPrefix;
            this.linkPrefix = str.substring(0, str.length() - 1);
        }
        if (this.linkPrefix.startsWith("https://")) {
            this.linkPrefix = this.linkPrefix.substring(8);
        } else if (this.linkPrefix.startsWith("http://")) {
            this.linkPrefix = this.linkPrefix.substring(7);
        }
        this.callReceiveTimeout = config.call_receive_timeout_ms;
        this.callRingTimeout = config.call_ring_timeout_ms;
        this.callConnectTimeout = config.call_connect_timeout_ms;
        this.callPacketTimeout = config.call_packet_timeout_ms;
        this.maxPinnedDialogsCount = config.pinned_dialogs_count_max;
        this.maxFolderPinnedDialogsCount = config.pinned_infolder_count_max;
        this.maxMessageLength = config.message_length_max;
        this.maxCaptionLength = config.caption_length_max;
        this.preloadFeaturedStickers = config.preload_featured_stickers;
        if (config.venue_search_username != null) {
            this.venueSearchBot = config.venue_search_username;
        }
        if (config.gif_search_username != null) {
            this.gifSearchBot = config.gif_search_username;
        }
        if (this.imageSearchBot != null) {
            this.imageSearchBot = config.img_search_username;
        }
        this.blockedCountry = config.blocked_mode;
        this.dcDomainName = config.dc_txt_domain_name;
        this.webFileDatacenterId = config.webfile_dc_id;
        if (config.suggested_lang_code != null) {
            String str2 = this.suggestedLangCode;
            boolean loadRemote = str2 == null || !str2.equals(config.suggested_lang_code);
            this.suggestedLangCode = config.suggested_lang_code;
            if (loadRemote) {
                LocaleController.getInstance().loadRemoteLanguages(this.currentAccount);
            }
        }
        Theme.loadRemoteThemes(this.currentAccount, false);
        Theme.checkCurrentRemoteTheme(false);
        if (config.static_maps_provider == null) {
            config.static_maps_provider = "telegram";
        }
        this.mapKey = null;
        this.mapProvider = 2;
        this.availableMapProviders = 0;
        FileLog.d("map providers = " + config.static_maps_provider);
        String[] providers = config.static_maps_provider.split(",");
        for (int a = 0; a < providers.length; a++) {
            String[] mapArgs = providers[a].split("\\+");
            if (mapArgs.length > 0) {
                String[] typeAndKey = mapArgs[0].split(":");
                if (typeAndKey.length > 0) {
                    if ("yandex".equals(typeAndKey[0])) {
                        if (a == 0) {
                            if (mapArgs.length > 1) {
                                this.mapProvider = 3;
                            } else {
                                this.mapProvider = 1;
                            }
                        }
                        this.availableMapProviders |= 4;
                    } else if ("google".equals(typeAndKey[0])) {
                        if (a == 0 && mapArgs.length > 1) {
                            this.mapProvider = 4;
                        }
                        this.availableMapProviders |= 1;
                    } else if ("telegram".equals(typeAndKey[0])) {
                        if (a == 0) {
                            this.mapProvider = 2;
                        }
                        this.availableMapProviders |= 2;
                    }
                    if (typeAndKey.length > 1) {
                        this.mapKey = typeAndKey[1];
                    }
                }
            }
        }
        SharedPreferences.Editor editor = this.mainPreferences.edit();
        editor.putBoolean("remoteConfigLoaded", this.remoteConfigLoaded);
        editor.putInt("maxGroupCount", this.maxGroupCount);
        editor.putInt("maxMegagroupCount", this.maxMegagroupCount);
        editor.putInt("maxEditTime", this.maxEditTime);
        editor.putInt("ratingDecay", this.ratingDecay);
        editor.putInt("maxRecentGifsCount", this.maxRecentGifsCount);
        editor.putInt("maxRecentStickersCount", this.maxRecentStickersCount);
        editor.putInt("maxFaveStickersCount", this.maxFaveStickersCount);
        editor.putInt("callReceiveTimeout", this.callReceiveTimeout);
        editor.putInt("callRingTimeout", this.callRingTimeout);
        editor.putInt("callConnectTimeout", this.callConnectTimeout);
        editor.putInt("callPacketTimeout", this.callPacketTimeout);
        editor.putString("linkPrefix", this.linkPrefix);
        editor.putInt("maxPinnedDialogsCount", this.maxPinnedDialogsCount);
        editor.putInt("maxFolderPinnedDialogsCount", this.maxFolderPinnedDialogsCount);
        editor.putInt("maxMessageLength", this.maxMessageLength);
        editor.putInt("maxCaptionLength", this.maxCaptionLength);
        editor.putBoolean("preloadFeaturedStickers", this.preloadFeaturedStickers);
        editor.putInt("revokeTimeLimit", this.revokeTimeLimit);
        editor.putInt("revokeTimePmLimit", this.revokeTimePmLimit);
        editor.putInt("mapProvider", this.mapProvider);
        String str3 = this.mapKey;
        if (str3 != null) {
            editor.putString("pk", str3);
        } else {
            editor.remove("pk");
        }
        editor.putBoolean("canRevokePmInbox", this.canRevokePmInbox);
        editor.putBoolean("blockedCountry", this.blockedCountry);
        editor.putString("venueSearchBot", this.venueSearchBot);
        editor.putString("gifSearchBot", this.gifSearchBot);
        editor.putString("imageSearchBot", this.imageSearchBot);
        editor.putString("dcDomainName2", this.dcDomainName);
        editor.putInt("webFileDatacenterId", this.webFileDatacenterId);
        editor.putString("suggestedLangCode", this.suggestedLangCode);
        editor.putBoolean("forceTryIpV6", forceTryIpV6);
        editor.commit();
        getConnectionsManager().setForceTryIpV6(forceTryIpV6);
        LocaleController.getInstance().checkUpdateForCurrentRemoteLocale(this.currentAccount, config.lang_pack_version, config.base_lang_pack_version);
        getNotificationCenter().postNotificationName(NotificationCenter.configLoaded, new Object[0]);
    }

    public void addSupportUser() {
        TLRPC.TL_userForeign_old2 user = new TLRPC.TL_userForeign_old2();
        user.phone = "333";
        user.id = 333000;
        user.first_name = "Telegram";
        user.last_name = "";
        user.status = null;
        user.photo = new TLRPC.TL_userProfilePhotoEmpty();
        putUser(user, true);
        TLRPC.TL_userForeign_old2 user2 = new TLRPC.TL_userForeign_old2();
        user2.phone = "42777";
        user2.id = 777000;
        user2.verified = true;
        user2.first_name = "Telegram";
        user2.last_name = "Notifications";
        user2.status = null;
        user2.photo = new TLRPC.TL_userProfilePhotoEmpty();
        putUser(user2, true);
    }

    public TLRPC.InputUser getInputUser(TLRPC.User user) {
        if (user == null) {
            return new TLRPC.TL_inputUserEmpty();
        }
        if (user.id == getUserConfig().getClientUserId()) {
            return new TLRPC.TL_inputUserSelf();
        }
        TLRPC.InputUser inputUser = new TLRPC.TL_inputUser();
        inputUser.user_id = user.id;
        inputUser.access_hash = user.access_hash;
        return inputUser;
    }

    public TLRPC.InputUser getInputUser(TLRPC.InputPeer peer) {
        if (peer == null) {
            return new TLRPC.TL_inputUserEmpty();
        }
        if (peer instanceof TLRPC.TL_inputPeerSelf) {
            return new TLRPC.TL_inputUserSelf();
        }
        TLRPC.TL_inputUser inputUser = new TLRPC.TL_inputUser();
        inputUser.user_id = peer.user_id;
        inputUser.access_hash = peer.access_hash;
        return inputUser;
    }

    public TLRPC.InputUser getInputUser(long userId) {
        return getInputUser(getUser(Long.valueOf(userId)));
    }

    public static TLRPC.InputChannel getInputChannel(TLRPC.Chat chat) {
        if (!(chat instanceof TLRPC.TL_channel) && !(chat instanceof TLRPC.TL_channelForbidden)) {
            return new TLRPC.TL_inputChannelEmpty();
        }
        TLRPC.InputChannel inputChat = new TLRPC.TL_inputChannel();
        inputChat.channel_id = chat.id;
        inputChat.access_hash = chat.access_hash;
        return inputChat;
    }

    public static TLRPC.InputChannel getInputChannel(TLRPC.InputPeer peer) {
        TLRPC.TL_inputChannel inputChat = new TLRPC.TL_inputChannel();
        inputChat.channel_id = peer.channel_id;
        inputChat.access_hash = peer.access_hash;
        return inputChat;
    }

    public TLRPC.InputChannel getInputChannel(long chatId) {
        return getInputChannel(getChat(Long.valueOf(chatId)));
    }

    public TLRPC.InputPeer getInputPeer(TLRPC.Peer peer) {
        if (peer instanceof TLRPC.TL_peerChat) {
            TLRPC.InputPeer inputPeer = new TLRPC.TL_inputPeerChat();
            inputPeer.chat_id = peer.chat_id;
            return inputPeer;
        } else if (peer instanceof TLRPC.TL_peerChannel) {
            TLRPC.InputPeer inputPeer2 = new TLRPC.TL_inputPeerChannel();
            inputPeer2.channel_id = peer.channel_id;
            TLRPC.Chat chat = getChat(Long.valueOf(peer.channel_id));
            if (chat == null) {
                return inputPeer2;
            }
            inputPeer2.access_hash = chat.access_hash;
            return inputPeer2;
        } else {
            TLRPC.InputPeer inputPeer3 = new TLRPC.TL_inputPeerUser();
            inputPeer3.user_id = peer.user_id;
            TLRPC.User user = getUser(Long.valueOf(peer.user_id));
            if (user == null) {
                return inputPeer3;
            }
            inputPeer3.access_hash = user.access_hash;
            return inputPeer3;
        }
    }

    public TLRPC.InputPeer getInputPeer(long id) {
        if (id < 0) {
            TLRPC.Chat chat = getChat(Long.valueOf(-id));
            if (ChatObject.isChannel(chat)) {
                TLRPC.InputPeer inputPeer = new TLRPC.TL_inputPeerChannel();
                inputPeer.channel_id = -id;
                inputPeer.access_hash = chat.access_hash;
                return inputPeer;
            }
            TLRPC.InputPeer inputPeer2 = new TLRPC.TL_inputPeerChat();
            inputPeer2.chat_id = -id;
            return inputPeer2;
        }
        TLRPC.User user = getUser(Long.valueOf(id));
        TLRPC.InputPeer inputPeer3 = new TLRPC.TL_inputPeerUser();
        inputPeer3.user_id = id;
        if (user == null) {
            return inputPeer3;
        }
        inputPeer3.access_hash = user.access_hash;
        return inputPeer3;
    }

    public static TLRPC.InputPeer getInputPeer(TLRPC.Chat chat) {
        if (ChatObject.isChannel(chat)) {
            TLRPC.InputPeer inputPeer = new TLRPC.TL_inputPeerChannel();
            inputPeer.channel_id = chat.id;
            inputPeer.access_hash = chat.access_hash;
            return inputPeer;
        }
        TLRPC.InputPeer inputPeer2 = new TLRPC.TL_inputPeerChat();
        inputPeer2.chat_id = chat.id;
        return inputPeer2;
    }

    public static TLRPC.InputPeer getInputPeer(TLRPC.User user) {
        TLRPC.InputPeer inputPeer = new TLRPC.TL_inputPeerUser();
        inputPeer.user_id = user.id;
        inputPeer.access_hash = user.access_hash;
        return inputPeer;
    }

    public TLRPC.Peer getPeer(long id) {
        if (id < 0) {
            TLRPC.Chat chat = getChat(Long.valueOf(-id));
            if ((chat instanceof TLRPC.TL_channel) || (chat instanceof TLRPC.TL_channelForbidden)) {
                TLRPC.Peer inputPeer = new TLRPC.TL_peerChannel();
                inputPeer.channel_id = -id;
                return inputPeer;
            }
            TLRPC.Peer inputPeer2 = new TLRPC.TL_peerChat();
            inputPeer2.chat_id = -id;
            return inputPeer2;
        }
        TLRPC.User user = getUser(Long.valueOf(id));
        TLRPC.Peer inputPeer3 = new TLRPC.TL_peerUser();
        inputPeer3.user_id = id;
        return inputPeer3;
    }

    public void didReceivedNotification(int id, int account, Object... args) {
        MessageObject existMessageObject;
        TLRPC.InputFile uploadedFile;
        TLRPC.InputFile uploadedThumb;
        Theme.ThemeAccent accent;
        Theme.ThemeInfo themeInfo;
        TLRPC.TL_account_uploadTheme req;
        TLRPC.TL_inputThemeSettings settings;
        TLRPC.TL_theme info;
        long j;
        int i = id;
        if (i == NotificationCenter.fileUploaded) {
            String location = args[0];
            TLRPC.InputFile file = args[1];
            String str = this.uploadingAvatar;
            if (str == null || !str.equals(location)) {
                String str2 = this.uploadingWallpaper;
                if (str2 == null || !str2.equals(location)) {
                    Object object = this.uploadingThemes.get(location);
                    if (object instanceof Theme.ThemeInfo) {
                        Theme.ThemeInfo themeInfo2 = (Theme.ThemeInfo) object;
                        if (location.equals(themeInfo2.uploadingThumb)) {
                            themeInfo2.uploadedThumb = file;
                            themeInfo2.uploadingThumb = null;
                        } else if (location.equals(themeInfo2.uploadingFile)) {
                            themeInfo2.uploadedFile = file;
                            themeInfo2.uploadingFile = null;
                        }
                        uploadedThumb = themeInfo2.uploadedThumb;
                        uploadedFile = themeInfo2.uploadedFile;
                        themeInfo = themeInfo2;
                        accent = null;
                    } else if (object instanceof Theme.ThemeAccent) {
                        Theme.ThemeAccent accent2 = (Theme.ThemeAccent) object;
                        if (location.equals(accent2.uploadingThumb)) {
                            accent2.uploadedThumb = file;
                            accent2.uploadingThumb = null;
                        } else if (location.equals(accent2.uploadingFile)) {
                            accent2.uploadedFile = file;
                            accent2.uploadingFile = null;
                        }
                        Theme.ThemeInfo themeInfo3 = accent2.parentTheme;
                        uploadedThumb = accent2.uploadedThumb;
                        uploadedFile = accent2.uploadedFile;
                        themeInfo = themeInfo3;
                        accent = accent2;
                    } else {
                        uploadedThumb = null;
                        uploadedFile = null;
                        themeInfo = null;
                        accent = null;
                    }
                    this.uploadingThemes.remove(location);
                    if (uploadedFile == null || uploadedThumb == null) {
                        TLRPC.InputFile inputFile = file;
                        return;
                    }
                    new File(location);
                    TLRPC.TL_account_uploadTheme req2 = new TLRPC.TL_account_uploadTheme();
                    req2.mime_type = "application/x-tgtheme-android";
                    req2.file_name = "theme.attheme";
                    req2.file = uploadedFile;
                    req2.file.name = "theme.attheme";
                    req2.thumb = uploadedThumb;
                    req2.thumb.name = "theme-preview.jpg";
                    req2.flags |= 1;
                    if (accent != null) {
                        accent.uploadedFile = null;
                        accent.uploadedThumb = null;
                        TLRPC.TL_theme info2 = accent.info;
                        TLRPC.TL_inputThemeSettings settings2 = new TLRPC.TL_inputThemeSettings();
                        settings2.base_theme = Theme.getBaseThemeByKey(themeInfo.name);
                        settings2.accent_color = accent.accentColor;
                        if (accent.accentColor2 != 0) {
                            settings2.flags |= 8;
                            settings2.outbox_accent_color = accent.accentColor2;
                        }
                        if (accent.myMessagesAccentColor != 0) {
                            settings2.message_colors.add(Integer.valueOf(accent.myMessagesAccentColor));
                            settings2.flags |= 1;
                            if (accent.myMessagesGradientAccentColor1 != 0) {
                                settings2.message_colors.add(Integer.valueOf(accent.myMessagesGradientAccentColor1));
                                if (accent.myMessagesGradientAccentColor2 != 0) {
                                    settings2.message_colors.add(Integer.valueOf(accent.myMessagesGradientAccentColor2));
                                    if (accent.myMessagesGradientAccentColor3 != 0) {
                                        settings2.message_colors.add(Integer.valueOf(accent.myMessagesGradientAccentColor3));
                                    }
                                }
                            }
                            settings2.message_colors_animated = accent.myMessagesAnimated;
                        }
                        settings2.flags = 2 | settings2.flags;
                        settings2.wallpaper_settings = new TLRPC.TL_wallPaperSettings();
                        if (!TextUtils.isEmpty(accent.patternSlug)) {
                            TLRPC.TL_inputWallPaperSlug inputWallPaperSlug = new TLRPC.TL_inputWallPaperSlug();
                            inputWallPaperSlug.slug = accent.patternSlug;
                            settings2.wallpaper = inputWallPaperSlug;
                            settings2.wallpaper_settings.intensity = (int) (accent.patternIntensity * 100.0f);
                            settings2.wallpaper_settings.flags |= 8;
                            req = req2;
                            j = 0;
                        } else {
                            TLRPC.TL_inputWallPaperNoFile inputWallPaperNoFile = new TLRPC.TL_inputWallPaperNoFile();
                            req = req2;
                            j = 0;
                            inputWallPaperNoFile.id = 0;
                            settings2.wallpaper = inputWallPaperNoFile;
                        }
                        settings2.wallpaper_settings.motion = accent.patternMotion;
                        info = info2;
                        if (accent.backgroundOverrideColor != j) {
                            settings2.wallpaper_settings.background_color = (int) accent.backgroundOverrideColor;
                            settings2.wallpaper_settings.flags |= 1;
                        }
                        if (accent.backgroundGradientOverrideColor1 != 0) {
                            settings2.wallpaper_settings.second_background_color = (int) accent.backgroundGradientOverrideColor1;
                            settings2.wallpaper_settings.flags |= 16;
                            settings2.wallpaper_settings.rotation = AndroidUtilities.getWallpaperRotation(accent.backgroundRotation, true);
                        }
                        if (accent.backgroundGradientOverrideColor2 != 0) {
                            settings2.wallpaper_settings.third_background_color = (int) accent.backgroundGradientOverrideColor2;
                            settings2.wallpaper_settings.flags |= 32;
                        }
                        if (accent.backgroundGradientOverrideColor3 != 0) {
                            settings2.wallpaper_settings.fourth_background_color = (int) accent.backgroundGradientOverrideColor3;
                            settings2.wallpaper_settings.flags |= 64;
                        }
                        settings = settings2;
                    } else {
                        req = req2;
                        themeInfo.uploadedFile = null;
                        themeInfo.uploadedThumb = null;
                        info = themeInfo.info;
                        settings = null;
                    }
                    TLRPC.TL_theme tL_theme = info;
                    MessagesController$$ExternalSyntheticLambda252 messagesController$$ExternalSyntheticLambda252 = r0;
                    String str3 = location;
                    TLRPC.TL_account_uploadTheme req3 = req;
                    TLRPC.InputFile inputFile2 = file;
                    ConnectionsManager connectionsManager = getConnectionsManager();
                    MessagesController$$ExternalSyntheticLambda252 messagesController$$ExternalSyntheticLambda2522 = new MessagesController$$ExternalSyntheticLambda252(this, info, themeInfo, settings, accent);
                    connectionsManager.sendRequest(req3, messagesController$$ExternalSyntheticLambda252);
                    return;
                }
                TLRPC.TL_account_uploadWallPaper req4 = new TLRPC.TL_account_uploadWallPaper();
                req4.file = file;
                req4.mime_type = "image/jpeg";
                Theme.OverrideWallpaperInfo overrideWallpaperInfo = this.uploadingWallpaperInfo;
                TLRPC.TL_wallPaperSettings settings3 = new TLRPC.TL_wallPaperSettings();
                settings3.blur = overrideWallpaperInfo.isBlurred;
                settings3.motion = overrideWallpaperInfo.isMotion;
                req4.settings = settings3;
                getConnectionsManager().sendRequest(req4, new MessagesController$$ExternalSyntheticLambda259(this, overrideWallpaperInfo, settings3));
                return;
            }
            TLRPC.TL_photos_uploadProfilePhoto req5 = new TLRPC.TL_photos_uploadProfilePhoto();
            req5.file = file;
            req5.flags |= 1;
            getConnectionsManager().sendRequest(req5, new MessagesController$$ExternalSyntheticLambda151(this));
        } else if (i == NotificationCenter.fileUploadFailed) {
            String location2 = args[0];
            String str4 = this.uploadingAvatar;
            if (str4 == null || !str4.equals(location2)) {
                String str5 = this.uploadingWallpaper;
                if (str5 == null || !str5.equals(location2)) {
                    Object object2 = this.uploadingThemes.remove(location2);
                    if (object2 instanceof Theme.ThemeInfo) {
                        Theme.ThemeInfo themeInfo4 = (Theme.ThemeInfo) object2;
                        themeInfo4.uploadedFile = null;
                        themeInfo4.uploadedThumb = null;
                        getNotificationCenter().postNotificationName(NotificationCenter.themeUploadError, themeInfo4, null);
                    } else if (object2 instanceof Theme.ThemeAccent) {
                        Theme.ThemeAccent accent3 = (Theme.ThemeAccent) object2;
                        accent3.uploadingThumb = null;
                        getNotificationCenter().postNotificationName(NotificationCenter.themeUploadError, accent3.parentTheme, accent3);
                    }
                } else {
                    this.uploadingWallpaper = null;
                    this.uploadingWallpaperInfo = null;
                }
            } else {
                this.uploadingAvatar = null;
            }
        } else if (i == NotificationCenter.messageReceivedByServer) {
            if (!args[6].booleanValue()) {
                Integer msgId = args[0];
                Integer newMsgId = args[1];
                Long did = args[3];
                MessageObject obj = this.dialogMessage.get(did.longValue());
                if (obj != null && (obj.getId() == msgId.intValue() || obj.messageOwner.local_id == msgId.intValue())) {
                    obj.messageOwner.id = newMsgId.intValue();
                    obj.messageOwner.send_state = 0;
                }
                TLRPC.Dialog dialog = this.dialogs_dict.get(did.longValue());
                if (dialog != null && dialog.top_message == msgId.intValue()) {
                    dialog.top_message = newMsgId.intValue();
                    getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                }
                MessageObject obj2 = this.dialogMessagesByIds.get(msgId.intValue());
                if (obj2 != null) {
                    this.dialogMessagesByIds.remove(msgId.intValue());
                    this.dialogMessagesByIds.put(newMsgId.intValue(), obj2);
                }
                if (DialogObject.isChatDialog(did.longValue())) {
                    TLRPC.ChatFull chatFull = this.fullChats.get(-did.longValue());
                    TLRPC.Chat chat = getChat(Long.valueOf(-did.longValue()));
                    if (chat != null && !ChatObject.hasAdminRights(chat) && chatFull != null && chatFull.slowmode_seconds != 0) {
                        chatFull.slowmode_next_send_date = getConnectionsManager().getCurrentTime() + chatFull.slowmode_seconds;
                        chatFull.flags |= 262144;
                        getMessagesStorage().updateChatInfo(chatFull, false);
                    }
                }
            }
        } else if (i == NotificationCenter.updateMessageMedia) {
            TLRPC.Message message = args[0];
            if (message.peer_id.channel_id == 0 && (existMessageObject = this.dialogMessagesByIds.get(message.id)) != null) {
                existMessageObject.messageOwner.media = message.media;
                if (message.media.ttl_seconds == 0) {
                    return;
                }
                if ((message.media.photo instanceof TLRPC.TL_photoEmpty) || (message.media.document instanceof TLRPC.TL_documentEmpty)) {
                    existMessageObject.setType();
                    getNotificationCenter().postNotificationName(NotificationCenter.notificationsSettingsUpdated, new Object[0]);
                }
            }
        }
    }

    /* renamed from: lambda$didReceivedNotification$25$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m195xe5CLASSNAMEa(TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            TLRPC.User user = getUser(Long.valueOf(getUserConfig().getClientUserId()));
            if (user == null) {
                user = getUserConfig().getCurrentUser();
                putUser(user, true);
            } else {
                getUserConfig().setCurrentUser(user);
            }
            if (user != null) {
                TLRPC.TL_photos_photo photo = (TLRPC.TL_photos_photo) response;
                ArrayList<TLRPC.PhotoSize> sizes = photo.photo.sizes;
                TLRPC.PhotoSize smallSize = FileLoader.getClosestPhotoSizeWithSize(sizes, 100);
                TLRPC.PhotoSize bigSize = FileLoader.getClosestPhotoSizeWithSize(sizes, 1000);
                user.photo = new TLRPC.TL_userProfilePhoto();
                user.photo.photo_id = photo.photo.id;
                if (smallSize != null) {
                    user.photo.photo_small = smallSize.location;
                }
                if (bigSize != null) {
                    user.photo.photo_big = bigSize.location;
                }
                getMessagesStorage().clearUserPhotos(user.id);
                ArrayList<TLRPC.User> users2 = new ArrayList<>();
                users2.add(user);
                getMessagesStorage().putUsersAndChats(users2, (ArrayList<TLRPC.Chat>) null, false, true);
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda77(this));
            }
        }
    }

    /* renamed from: lambda$didReceivedNotification$24$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m194x82e699() {
        getNotificationCenter().postNotificationName(NotificationCenter.mainUserInfoChanged, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_AVATAR));
        getUserConfig().saveConfig(true);
    }

    /* renamed from: lambda$didReceivedNotification$27$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m197xb04732dc(Theme.OverrideWallpaperInfo overrideWallpaperInfo, TLRPC.TL_wallPaperSettings settings, TLObject response, TLRPC.TL_error error) {
        TLRPC.WallPaper wallPaper = (TLRPC.WallPaper) response;
        File path = new File(ApplicationLoader.getFilesDirFixed(), overrideWallpaperInfo.originalFileName);
        if (wallPaper != null) {
            try {
                AndroidUtilities.copyFile(path, getFileLoader().getPathToAttach(wallPaper.document, true));
            } catch (Exception e) {
            }
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda98(this, wallPaper, settings, overrideWallpaperInfo, path));
    }

    /* renamed from: lambda$didReceivedNotification$26$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m196xcb05CLASSNAMEb(TLRPC.WallPaper wallPaper, TLRPC.TL_wallPaperSettings settings, Theme.OverrideWallpaperInfo overrideWallpaperInfo, File path) {
        if (this.uploadingWallpaper != null && wallPaper != null) {
            wallPaper.settings = settings;
            wallPaper.flags |= 4;
            overrideWallpaperInfo.slug = wallPaper.slug;
            overrideWallpaperInfo.saveOverrideWallpaper();
            ArrayList<TLRPC.WallPaper> wallpapers = new ArrayList<>();
            wallpapers.add(wallPaper);
            getMessagesStorage().putWallpapers(wallpapers, 2);
            TLRPC.PhotoSize image = FileLoader.getClosestPhotoSizeWithSize(wallPaper.document.thumbs, 320);
            if (image != null) {
                ImageLoader.getInstance().replaceImageInCache(Utilities.MD5(path.getAbsolutePath()) + "@100_100", image.location.volume_id + "_" + image.location.local_id + "@100_100", ImageLocation.getForDocument(image, wallPaper.document), false);
            }
            NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.wallpapersNeedReload, wallPaper.slug);
        }
    }

    /* renamed from: lambda$didReceivedNotification$33$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m203xde2de137(TLRPC.TL_theme info, Theme.ThemeInfo themeInfo, TLRPC.TL_inputThemeSettings settings, Theme.ThemeAccent accent, TLObject response, TLRPC.TL_error error) {
        String title = info != null ? info.title : themeInfo.getName();
        int index = title.lastIndexOf(".attheme");
        String n = index > 0 ? title.substring(0, index) : title;
        if (response != null) {
            TLRPC.Document document = (TLRPC.Document) response;
            TLRPC.TL_inputDocument inputDocument = new TLRPC.TL_inputDocument();
            inputDocument.access_hash = document.access_hash;
            inputDocument.id = document.id;
            inputDocument.file_reference = document.file_reference;
            if (info == null || !info.creator) {
                TLRPC.TL_account_createTheme req2 = new TLRPC.TL_account_createTheme();
                req2.document = inputDocument;
                req2.flags |= 4;
                req2.slug = (info == null || TextUtils.isEmpty(info.slug)) ? "" : info.slug;
                req2.title = n;
                if (settings != null) {
                    req2.settings = settings;
                    req2.flags |= 8;
                }
                getConnectionsManager().sendRequest(req2, new MessagesController$$ExternalSyntheticLambda260(this, themeInfo, accent));
                return;
            }
            TLRPC.TL_account_updateTheme req22 = new TLRPC.TL_account_updateTheme();
            TLRPC.TL_inputTheme inputTheme = new TLRPC.TL_inputTheme();
            inputTheme.id = info.id;
            inputTheme.access_hash = info.access_hash;
            req22.theme = inputTheme;
            req22.slug = info.slug;
            req22.flags |= 1;
            req22.title = n;
            req22.flags |= 2;
            req22.document = inputDocument;
            req22.flags |= 4;
            if (settings != null) {
                req22.settings = settings;
                req22.flags |= 8;
            }
            req22.format = "android";
            getConnectionsManager().sendRequest(req22, new MessagesController$$ExternalSyntheticLambda261(this, themeInfo, accent));
            return;
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda117(this, themeInfo, accent));
    }

    /* renamed from: lambda$didReceivedNotification$29$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m199x7aca105e(Theme.ThemeInfo themeInfo, Theme.ThemeAccent accent, TLObject response1, TLRPC.TL_error error1) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda48(this, response1, themeInfo, accent));
    }

    /* renamed from: lambda$didReceivedNotification$28$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m198x9588a19d(TLObject response1, Theme.ThemeInfo themeInfo, Theme.ThemeAccent accent) {
        if (response1 instanceof TLRPC.TL_theme) {
            Theme.setThemeUploadInfo(themeInfo, accent, (TLRPC.TL_theme) response1, this.currentAccount, false);
            installTheme(themeInfo, accent, themeInfo == Theme.getCurrentNightTheme());
            getNotificationCenter().postNotificationName(NotificationCenter.themeUploadedToServer, themeInfo, accent);
            return;
        }
        getNotificationCenter().postNotificationName(NotificationCenter.themeUploadError, themeInfo, accent);
    }

    /* renamed from: lambda$didReceivedNotification$31$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m201x13ab03b5(Theme.ThemeInfo themeInfo, Theme.ThemeAccent accent, TLObject response1, TLRPC.TL_error error1) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda49(this, response1, themeInfo, accent));
    }

    /* renamed from: lambda$didReceivedNotification$30$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m200x2e6994f4(TLObject response1, Theme.ThemeInfo themeInfo, Theme.ThemeAccent accent) {
        if (response1 instanceof TLRPC.TL_theme) {
            Theme.setThemeUploadInfo(themeInfo, accent, (TLRPC.TL_theme) response1, this.currentAccount, false);
            getNotificationCenter().postNotificationName(NotificationCenter.themeUploadedToServer, themeInfo, accent);
            return;
        }
        getNotificationCenter().postNotificationName(NotificationCenter.themeUploadError, themeInfo, accent);
    }

    /* renamed from: lambda$didReceivedNotification$32$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m202xf8eCLASSNAME(Theme.ThemeInfo themeInfo, Theme.ThemeAccent accent) {
        getNotificationCenter().postNotificationName(NotificationCenter.themeUploadError, themeInfo, accent);
    }

    public void cleanup() {
        getContactsController().cleanup();
        MediaController.getInstance().cleanup();
        getNotificationsController().cleanup();
        getSendMessagesHelper().cleanup();
        getSecretChatHelper().cleanup();
        getLocationController().cleanup();
        getMediaDataController().cleanup();
        this.showFiltersTooltip = false;
        DialogsActivity.dialogsLoaded[this.currentAccount] = false;
        this.notificationsPreferences.edit().clear().commit();
        this.emojiPreferences.edit().putLong("lastGifLoadTime", 0).putLong("lastStickersLoadTime", 0).putLong("lastStickersLoadTimeMask", 0).putLong("lastStickersLoadTimeFavs", 0).commit();
        this.mainPreferences.edit().remove("archivehint").remove("proximityhint").remove("archivehint_l").remove("gifhint").remove("reminderhint").remove("soundHint").remove("dcDomainName2").remove("webFileDatacenterId").remove("themehint").remove("showFiltersTooltip").commit();
        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("shortcut_widget", 0);
        SharedPreferences.Editor widgetEditor = null;
        AppWidgetManager appWidgetManager = null;
        ArrayList<Integer> chatsWidgets = null;
        ArrayList<Integer> contactsWidgets = null;
        for (Map.Entry<String, ?> entry : preferences.getAll().entrySet()) {
            String key = entry.getKey();
            if (key.startsWith("account") && ((Integer) entry.getValue()).intValue() == this.currentAccount) {
                int widgetId = Utilities.parseInt((CharSequence) key).intValue();
                if (widgetEditor == null) {
                    widgetEditor = preferences.edit();
                    appWidgetManager = AppWidgetManager.getInstance(ApplicationLoader.applicationContext);
                }
                widgetEditor.putBoolean("deleted" + widgetId, true);
                if (preferences.getInt("type" + widgetId, 0) == 0) {
                    if (chatsWidgets == null) {
                        chatsWidgets = new ArrayList<>();
                    }
                    chatsWidgets.add(Integer.valueOf(widgetId));
                } else {
                    if (contactsWidgets == null) {
                        contactsWidgets = new ArrayList<>();
                    }
                    contactsWidgets.add(Integer.valueOf(widgetId));
                }
            }
        }
        if (widgetEditor != null) {
            widgetEditor.commit();
        }
        if (chatsWidgets != null) {
            int N = chatsWidgets.size();
            for (int a = 0; a < N; a++) {
                ChatsWidgetProvider.updateWidget(ApplicationLoader.applicationContext, appWidgetManager, chatsWidgets.get(a).intValue());
            }
        }
        if (contactsWidgets != null) {
            int N2 = contactsWidgets.size();
            for (int a2 = 0; a2 < N2; a2++) {
                ContactsWidgetProvider.updateWidget(ApplicationLoader.applicationContext, appWidgetManager, contactsWidgets.get(a2).intValue());
            }
        }
        this.lastScheduledServerQueryTime.clear();
        this.lastServerQueryTime.clear();
        this.reloadingWebpages.clear();
        this.reloadingWebpagesPending.clear();
        this.reloadingScheduledWebpages.clear();
        this.reloadingScheduledWebpagesPending.clear();
        this.sponsoredMessages.clear();
        this.sendAsPeers.clear();
        this.dialogs_dict.clear();
        this.dialogs_read_inbox_max.clear();
        this.loadingPinnedDialogs.clear();
        this.dialogs_read_outbox_max.clear();
        this.exportedChats.clear();
        this.fullUsers.clear();
        this.fullChats.clear();
        this.activeVoiceChatsMap.clear();
        this.loadingGroupCalls.clear();
        this.groupCallsByChatId.clear();
        this.dialogsByFolder.clear();
        this.unreadUnmutedDialogs = 0;
        this.joiningToChannels.clear();
        this.migratedChats.clear();
        this.channelViewsToSend.clear();
        this.pollsToCheck.clear();
        this.pollsToCheckSize = 0;
        this.dialogsServerOnly.clear();
        this.dialogsForward.clear();
        this.allDialogs.clear();
        this.dialogsLoadedTillDate = Integer.MAX_VALUE;
        this.dialogsCanAddUsers.clear();
        this.dialogsMyChannels.clear();
        this.dialogsMyGroups.clear();
        this.dialogsChannelsOnly.clear();
        this.dialogsGroupsOnly.clear();
        this.dialogsUsersOnly.clear();
        this.dialogsForBlock.clear();
        this.dialogMessagesByIds.clear();
        this.dialogMessagesByRandomIds.clear();
        this.channelAdmins.clear();
        this.loadingChannelAdmins.clear();
        this.users.clear();
        this.objectsByUsernames.clear();
        this.chats.clear();
        this.dialogMessage.clear();
        this.deletedHistory.clear();
        this.printingUsers.clear();
        this.printingStrings.clear();
        this.printingStringsTypes.clear();
        this.onlinePrivacy.clear();
        this.loadingPeerSettings.clear();
        this.deletingDialogs.clear();
        this.clearingHistoryDialogs.clear();
        this.lastPrintingStringCount = 0;
        DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
        dialogFilterArr[1] = null;
        dialogFilterArr[0] = null;
        this.dialogFilters.clear();
        this.dialogFiltersById.clear();
        this.loadingSuggestedFilters = false;
        this.loadingRemoteFilters = false;
        this.suggestedFilters.clear();
        this.gettingAppChangelog = false;
        this.dialogFiltersLoaded = false;
        this.ignoreSetOnline = false;
        Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda33(this));
        this.createdDialogMainThreadIds.clear();
        this.visibleDialogMainThreadIds.clear();
        this.visibleScheduledDialogMainThreadIds.clear();
        this.blockePeers.clear();
        int a3 = 0;
        while (true) {
            LongSparseArray<SparseArray<Boolean>>[] longSparseArrayArr = this.sendingTypings;
            if (a3 >= longSparseArrayArr.length) {
                break;
            }
            if (longSparseArrayArr[a3] != null) {
                longSparseArrayArr[a3].clear();
            }
            a3++;
        }
        this.loadingFullUsers.clear();
        this.loadedFullUsers.clear();
        this.reloadingMessages.clear();
        this.loadingFullChats.clear();
        this.loadingFullParticipants.clear();
        this.loadedFullParticipants.clear();
        this.loadedFullChats.clear();
        this.dialogsLoaded = false;
        this.nextDialogsCacheOffset.clear();
        this.loadingDialogs.clear();
        this.dialogsEndReached.clear();
        this.serverDialogsEndReached.clear();
        this.loadingAppConfig = false;
        this.checkingTosUpdate = false;
        this.nextTosCheckTime = 0;
        this.nextPromoInfoCheckTime = 0;
        this.checkingPromoInfo = false;
        this.loadingUnreadDialogs = false;
        this.currentDeletingTaskTime = 0;
        this.currentDeletingTaskMids = null;
        this.currentDeletingTaskMediaMids = null;
        this.gettingNewDeleteTask = false;
        this.loadingBlockedPeers = false;
        this.totalBlockedCount = -1;
        this.blockedEndReached = false;
        this.firstGettingTask = false;
        this.updatingState = false;
        this.resetingDialogs = false;
        this.lastStatusUpdateTime = 0;
        this.offlineSent = false;
        this.registeringForPush = false;
        this.getDifferenceFirstSync = true;
        this.uploadingAvatar = null;
        this.uploadingWallpaper = null;
        this.uploadingWallpaperInfo = null;
        this.uploadingThemes.clear();
        this.gettingChatInviters.clear();
        this.statusRequest = 0;
        this.statusSettingState = 0;
        Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda44(this));
        if (this.currentDeleteTaskRunnable != null) {
            Utilities.stageQueue.cancelRunnable(this.currentDeleteTaskRunnable);
            this.currentDeleteTaskRunnable = null;
        }
        addSupportUser();
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda55(this));
    }

    /* renamed from: lambda$cleanup$34$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m156lambda$cleanup$34$orgtelegrammessengerMessagesController() {
        this.readTasks.clear();
        this.readTasksMap.clear();
        this.repliesReadTasks.clear();
        this.threadsReadTasksMap.clear();
        this.updatesQueueSeq.clear();
        this.updatesQueuePts.clear();
        this.updatesQueueQts.clear();
        this.gettingUnknownChannels.clear();
        this.gettingUnknownDialogs.clear();
        this.updatesStartWaitTimeSeq = 0;
        this.updatesStartWaitTimePts = 0;
        this.updatesStartWaitTimeQts = 0;
        this.createdDialogIds.clear();
        this.createdScheduledDialogIds.clear();
        this.gettingDifference = false;
        this.resetDialogsPinned = null;
        this.resetDialogsAll = null;
    }

    /* renamed from: lambda$cleanup$35$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m157lambda$cleanup$35$orgtelegrammessengerMessagesController() {
        getConnectionsManager().setIsUpdating(false);
        this.updatesQueueChannels.clear();
        this.updatesStartWaitTimeChannels.clear();
        this.gettingDifferenceChannels.clear();
        this.channelsPts.clear();
        this.shortPollChannels.clear();
        this.needShortPollChannels.clear();
        this.shortPollOnlines.clear();
        this.needShortPollOnlines.clear();
    }

    /* renamed from: lambda$cleanup$36$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m158lambda$cleanup$36$orgtelegrammessengerMessagesController() {
        getNotificationCenter().postNotificationName(NotificationCenter.suggestedFiltersLoaded, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogFiltersUpdated, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    public boolean isChatNoForwards(TLRPC.Chat chat) {
        TLRPC.Chat migratedTo;
        if (chat == null) {
            return false;
        }
        if (chat.migrated_to == null || (migratedTo = getChat(Long.valueOf(chat.migrated_to.channel_id))) == null) {
            return chat.noforwards;
        }
        return migratedTo.noforwards;
    }

    public boolean isChatNoForwards(long chatId) {
        return isChatNoForwards(getChat(Long.valueOf(chatId)));
    }

    public TLRPC.User getUser(Long id) {
        if (id.longValue() == 0) {
            return UserConfig.getInstance(this.currentAccount).getCurrentUser();
        }
        return this.users.get(id);
    }

    public TLObject getUserOrChat(String username) {
        if (username == null || username.length() == 0) {
            return null;
        }
        return this.objectsByUsernames.get(username.toLowerCase());
    }

    public ConcurrentHashMap<Long, TLRPC.User> getUsers() {
        return this.users;
    }

    public ConcurrentHashMap<Long, TLRPC.Chat> getChats() {
        return this.chats;
    }

    public TLRPC.Chat getChat(Long id) {
        return this.chats.get(id);
    }

    public TLRPC.EncryptedChat getEncryptedChat(Integer id) {
        return this.encryptedChats.get(id);
    }

    public TLRPC.EncryptedChat getEncryptedChatDB(int chatId, boolean created) {
        TLRPC.EncryptedChat chat = this.encryptedChats.get(Integer.valueOf(chatId));
        if (chat != null) {
            if (!created) {
                return chat;
            }
            if (!(chat instanceof TLRPC.TL_encryptedChatWaiting) && !(chat instanceof TLRPC.TL_encryptedChatRequested)) {
                return chat;
            }
        }
        CountDownLatch countDownLatch = new CountDownLatch(1);
        ArrayList<TLObject> result = new ArrayList<>();
        getMessagesStorage().getEncryptedChat((long) chatId, countDownLatch, result);
        try {
            countDownLatch.await();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        if (result.size() != 2) {
            return chat;
        }
        TLRPC.EncryptedChat chat2 = (TLRPC.EncryptedChat) result.get(0);
        putEncryptedChat(chat2, false);
        putUser((TLRPC.User) result.get(1), true);
        return chat2;
    }

    public boolean isDialogVisible(long dialogId, boolean scheduled) {
        return (scheduled ? this.visibleScheduledDialogMainThreadIds : this.visibleDialogMainThreadIds).contains(Long.valueOf(dialogId));
    }

    public void setLastVisibleDialogId(long dialogId, boolean scheduled, boolean set) {
        ArrayList<Long> arrayList = scheduled ? this.visibleScheduledDialogMainThreadIds : this.visibleDialogMainThreadIds;
        if (!set) {
            arrayList.remove(Long.valueOf(dialogId));
        } else if (!arrayList.contains(Long.valueOf(dialogId))) {
            arrayList.add(Long.valueOf(dialogId));
        }
    }

    public void setLastCreatedDialogId(long dialogId, boolean scheduled, boolean set) {
        if (!scheduled) {
            ArrayList<Long> arrayList = this.createdDialogMainThreadIds;
            if (!set) {
                arrayList.remove(Long.valueOf(dialogId));
                SparseArray<MessageObject> array = this.pollsToCheck.get(dialogId);
                if (array != null) {
                    int N = array.size();
                    for (int a = 0; a < N; a++) {
                        array.valueAt(a).pollVisibleOnScreen = false;
                    }
                }
            } else if (!arrayList.contains(Long.valueOf(dialogId))) {
                arrayList.add(Long.valueOf(dialogId));
            } else {
                return;
            }
        }
        Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda125(this, scheduled, set, dialogId));
    }

    /* renamed from: lambda$setLastCreatedDialogId$37$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m398x97cvar_(boolean scheduled, boolean set, long dialogId) {
        ArrayList<Long> arrayList2 = scheduled ? this.createdScheduledDialogIds : this.createdDialogIds;
        if (!set) {
            arrayList2.remove(Long.valueOf(dialogId));
        } else if (!arrayList2.contains(Long.valueOf(dialogId))) {
            arrayList2.add(Long.valueOf(dialogId));
        }
    }

    public TLRPC.TL_chatInviteExported getExportedInvite(long chatId) {
        return this.exportedChats.get(chatId);
    }

    public boolean putUser(TLRPC.User user, boolean fromCache) {
        if (user == null) {
            return false;
        }
        boolean fromCache2 = (!fromCache || user.id / 1000 == 333 || user.id == 777000) ? false : true;
        TLRPC.User oldUser = this.users.get(Long.valueOf(user.id));
        if (oldUser == user) {
            return false;
        }
        if (oldUser != null && !TextUtils.isEmpty(oldUser.username)) {
            this.objectsByUsernames.remove(oldUser.username.toLowerCase());
        }
        if (!TextUtils.isEmpty(user.username)) {
            this.objectsByUsernames.put(user.username.toLowerCase(), user);
        }
        if (user.min) {
            if (oldUser == null) {
                this.users.put(Long.valueOf(user.id), user);
            } else if (!fromCache2) {
                if (user.bot) {
                    if (user.username != null) {
                        oldUser.username = user.username;
                        oldUser.flags |= 8;
                    } else {
                        oldUser.flags &= -9;
                        oldUser.username = null;
                    }
                }
                if (user.apply_min_photo) {
                    if (user.photo != null) {
                        oldUser.photo = user.photo;
                        oldUser.flags |= 32;
                    } else {
                        oldUser.flags &= -33;
                        oldUser.photo = null;
                    }
                }
            }
        } else if (!fromCache2) {
            this.users.put(Long.valueOf(user.id), user);
            if (user.id == getUserConfig().getClientUserId()) {
                getUserConfig().setCurrentUser(user);
                getUserConfig().saveConfig(true);
            }
            if (oldUser == null || user.status == null || oldUser.status == null || user.status.expires == oldUser.status.expires) {
                return false;
            }
            return true;
        } else if (oldUser == null) {
            this.users.put(Long.valueOf(user.id), user);
        } else if (oldUser.min) {
            if (oldUser.bot) {
                if (oldUser.username != null) {
                    user.username = oldUser.username;
                    user.flags |= 8;
                } else {
                    user.flags &= -9;
                    user.username = null;
                }
            }
            if (oldUser.apply_min_photo) {
                if (oldUser.photo != null) {
                    user.photo = oldUser.photo;
                    user.flags |= 32;
                } else {
                    user.flags &= -33;
                    user.photo = null;
                }
            }
            this.users.put(Long.valueOf(user.id), user);
        }
        return false;
    }

    public void putUsers(ArrayList<TLRPC.User> users2, boolean fromCache) {
        if (users2 != null && !users2.isEmpty()) {
            boolean updateStatus = false;
            int count = users2.size();
            for (int a = 0; a < count; a++) {
                if (putUser(users2.get(a), fromCache)) {
                    updateStatus = true;
                }
            }
            if (updateStatus) {
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda221(this));
            }
        }
    }

    /* renamed from: lambda$putUsers$38$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m364lambda$putUsers$38$orgtelegrammessengerMessagesController() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_STATUS));
    }

    public void putChat(TLRPC.Chat chat, boolean fromCache) {
        TLRPC.Chat oldChat;
        if (chat != null && (oldChat = this.chats.get(Long.valueOf(chat.id))) != chat) {
            if (oldChat != null && !TextUtils.isEmpty(oldChat.username)) {
                this.objectsByUsernames.remove(oldChat.username.toLowerCase());
            }
            if (!TextUtils.isEmpty(chat.username)) {
                this.objectsByUsernames.put(chat.username.toLowerCase(), chat);
            }
            if (!chat.min) {
                if (!fromCache) {
                    if (oldChat != null) {
                        if (chat.version != oldChat.version) {
                            this.loadedFullChats.remove(Long.valueOf(chat.id));
                        }
                        if (oldChat.participants_count != 0 && chat.participants_count == 0) {
                            chat.participants_count = oldChat.participants_count;
                            chat.flags = 131072 | chat.flags;
                        }
                        int newFlags2 = 0;
                        int oldFlags = oldChat.banned_rights != null ? oldChat.banned_rights.flags : 0;
                        int newFlags = chat.banned_rights != null ? chat.banned_rights.flags : 0;
                        int oldFlags2 = oldChat.default_banned_rights != null ? oldChat.default_banned_rights.flags : 0;
                        if (chat.default_banned_rights != null) {
                            newFlags2 = chat.default_banned_rights.flags;
                        }
                        oldChat.default_banned_rights = chat.default_banned_rights;
                        if (oldChat.default_banned_rights == null) {
                            oldChat.flags &= -262145;
                        } else {
                            oldChat.flags = 262144 | oldChat.flags;
                        }
                        oldChat.banned_rights = chat.banned_rights;
                        if (oldChat.banned_rights == null) {
                            oldChat.flags &= -32769;
                        } else {
                            oldChat.flags = 32768 | oldChat.flags;
                        }
                        oldChat.admin_rights = chat.admin_rights;
                        if (oldChat.admin_rights == null) {
                            oldChat.flags &= -16385;
                        } else {
                            oldChat.flags |= 16384;
                        }
                        if (!(oldFlags == newFlags && oldFlags2 == newFlags2)) {
                            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda54(this, chat));
                        }
                    }
                    this.chats.put(Long.valueOf(chat.id), chat);
                } else if (oldChat == null) {
                    this.chats.put(Long.valueOf(chat.id), chat);
                } else if (oldChat.min) {
                    chat.title = oldChat.title;
                    chat.photo = oldChat.photo;
                    chat.broadcast = oldChat.broadcast;
                    chat.verified = oldChat.verified;
                    chat.megagroup = oldChat.megagroup;
                    if (oldChat.default_banned_rights != null) {
                        chat.default_banned_rights = oldChat.default_banned_rights;
                        chat.flags = 262144 | chat.flags;
                    }
                    if (oldChat.admin_rights != null) {
                        chat.admin_rights = oldChat.admin_rights;
                        chat.flags |= 16384;
                    }
                    if (oldChat.banned_rights != null) {
                        chat.banned_rights = oldChat.banned_rights;
                        chat.flags = 32768 | chat.flags;
                    }
                    if (oldChat.username != null) {
                        chat.username = oldChat.username;
                        chat.flags |= 64;
                    } else {
                        chat.flags &= -65;
                        chat.username = null;
                    }
                    if (oldChat.participants_count != 0 && chat.participants_count == 0) {
                        chat.participants_count = oldChat.participants_count;
                        chat.flags = 131072 | chat.flags;
                    }
                    this.chats.put(Long.valueOf(chat.id), chat);
                }
                addOrRemoveActiveVoiceChat(chat);
            } else if (oldChat == null) {
                this.chats.put(Long.valueOf(chat.id), chat);
                addOrRemoveActiveVoiceChat(chat);
            } else if (!fromCache) {
                oldChat.title = chat.title;
                oldChat.photo = chat.photo;
                oldChat.broadcast = chat.broadcast;
                oldChat.verified = chat.verified;
                oldChat.megagroup = chat.megagroup;
                oldChat.call_not_empty = chat.call_not_empty;
                oldChat.call_active = chat.call_active;
                if (chat.default_banned_rights != null) {
                    oldChat.default_banned_rights = chat.default_banned_rights;
                    oldChat.flags |= 262144;
                }
                if (chat.admin_rights != null) {
                    oldChat.admin_rights = chat.admin_rights;
                    oldChat.flags |= 16384;
                }
                if (chat.banned_rights != null) {
                    oldChat.banned_rights = chat.banned_rights;
                    oldChat.flags |= 32768;
                }
                if (chat.username != null) {
                    oldChat.username = chat.username;
                    oldChat.flags |= 64;
                } else {
                    oldChat.flags &= -65;
                    oldChat.username = null;
                }
                if (chat.participants_count != 0) {
                    oldChat.participants_count = chat.participants_count;
                }
                addOrRemoveActiveVoiceChat(oldChat);
            }
        }
    }

    /* renamed from: lambda$putChat$39$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m363lambda$putChat$39$orgtelegrammessengerMessagesController(TLRPC.Chat chat) {
        getNotificationCenter().postNotificationName(NotificationCenter.channelRightsUpdated, chat);
    }

    public void putChats(ArrayList<TLRPC.Chat> chats2, boolean fromCache) {
        if (chats2 != null && !chats2.isEmpty()) {
            int count = chats2.size();
            for (int a = 0; a < count; a++) {
                putChat(chats2.get(a), fromCache);
            }
        }
    }

    private void addOrRemoveActiveVoiceChat(TLRPC.Chat chat) {
        if (Thread.currentThread() != Looper.getMainLooper().getThread()) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda51(this, chat));
        } else {
            m118xCLASSNAMEedc8(chat);
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: addOrRemoveActiveVoiceChatInternal */
    public void m118xCLASSNAMEedc8(TLRPC.Chat chat) {
        TLRPC.Chat currentChat = this.activeVoiceChatsMap.get(Long.valueOf(chat.id));
        if (!chat.call_active || !chat.call_not_empty || chat.migrated_to != null || ChatObject.isNotInChat(chat)) {
            if (currentChat != null) {
                this.activeVoiceChatsMap.remove(Long.valueOf(chat.id));
                getNotificationCenter().postNotificationName(NotificationCenter.activeGroupCallsUpdated, new Object[0]);
            }
        } else if (currentChat == null) {
            this.activeVoiceChatsMap.put(Long.valueOf(chat.id), chat);
            getNotificationCenter().postNotificationName(NotificationCenter.activeGroupCallsUpdated, new Object[0]);
        }
    }

    public ArrayList<Long> getActiveGroupCalls() {
        return new ArrayList<>(this.activeVoiceChatsMap.keySet());
    }

    public void setReferer(String referer) {
        if (referer != null) {
            this.installReferer = referer;
            this.mainPreferences.edit().putString("installReferer", referer).commit();
        }
    }

    public void putEncryptedChat(TLRPC.EncryptedChat encryptedChat, boolean fromCache) {
        if (encryptedChat != null) {
            if (fromCache) {
                this.encryptedChats.putIfAbsent(Integer.valueOf(encryptedChat.id), encryptedChat);
            } else {
                this.encryptedChats.put(Integer.valueOf(encryptedChat.id), encryptedChat);
            }
        }
    }

    public void putEncryptedChats(ArrayList<TLRPC.EncryptedChat> encryptedChats2, boolean fromCache) {
        if (encryptedChats2 != null && !encryptedChats2.isEmpty()) {
            int count = encryptedChats2.size();
            for (int a = 0; a < count; a++) {
                putEncryptedChat(encryptedChats2.get(a), fromCache);
            }
        }
    }

    public TLRPC.UserFull getUserFull(long uid) {
        return this.fullUsers.get(uid);
    }

    public TLRPC.ChatFull getChatFull(long chatId) {
        return this.fullChats.get(chatId);
    }

    public void putGroupCall(long chatId, ChatObject.Call call) {
        this.groupCalls.put(call.call.id, call);
        this.groupCallsByChatId.put(chatId, call);
        TLRPC.ChatFull chatFull = getChatFull(chatId);
        if (chatFull != null) {
            chatFull.call = call.getInputGroupCall();
        }
        getNotificationCenter().postNotificationName(NotificationCenter.groupCallUpdated, Long.valueOf(chatId), Long.valueOf(call.call.id), false);
        loadFullChat(chatId, 0, true);
    }

    public ChatObject.Call getGroupCall(long chatId, boolean load) {
        return getGroupCall(chatId, load, (Runnable) null);
    }

    public ChatObject.Call getGroupCall(long chatId, boolean load, Runnable onLoad) {
        TLRPC.ChatFull chatFull = getChatFull(chatId);
        if (chatFull == null || chatFull.call == null) {
            return null;
        }
        ChatObject.Call result = this.groupCalls.get(chatFull.call.id);
        if (result == null && load && !this.loadingGroupCalls.contains(Long.valueOf(chatId))) {
            this.loadingGroupCalls.add(Long.valueOf(chatId));
            if (chatFull.call != null) {
                TLRPC.TL_phone_getGroupCall req = new TLRPC.TL_phone_getGroupCall();
                req.call = chatFull.call;
                req.limit = 20;
                getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda217(this, chatId, onLoad));
            }
        }
        if (result == null || !(result.call instanceof TLRPC.TL_groupCallDiscarded)) {
            return result;
        }
        return null;
    }

    /* renamed from: lambda$getGroupCall$42$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m232lambda$getGroupCall$42$orgtelegrammessengerMessagesController(long chatId, Runnable onLoad, TLObject response, TLRPC.TL_error error) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda47(this, response, chatId, onLoad));
    }

    /* renamed from: lambda$getGroupCall$41$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m231lambda$getGroupCall$41$orgtelegrammessengerMessagesController(TLObject response, long chatId, Runnable onLoad) {
        if (response != null) {
            TLRPC.TL_phone_groupCall groupCall = (TLRPC.TL_phone_groupCall) response;
            putUsers(groupCall.users, false);
            putChats(groupCall.chats, false);
            ChatObject.Call call = new ChatObject.Call();
            call.setCall(getAccountInstance(), chatId, groupCall);
            this.groupCalls.put(groupCall.call.id, call);
            this.groupCallsByChatId.put(chatId, call);
            getNotificationCenter().postNotificationName(NotificationCenter.groupCallUpdated, Long.valueOf(chatId), Long.valueOf(groupCall.call.id), false);
            if (onLoad != null) {
                onLoad.run();
            }
        }
        this.loadingGroupCalls.remove(Long.valueOf(chatId));
    }

    public void cancelLoadFullUser(long userId) {
        this.loadingFullUsers.remove(Long.valueOf(userId));
    }

    public void cancelLoadFullChat(long chatId) {
        this.loadingFullChats.remove(Long.valueOf(chatId));
    }

    /* access modifiers changed from: protected */
    public void clearFullUsers() {
        this.loadedFullUsers.clear();
        this.loadedFullChats.clear();
    }

    private void reloadDialogsReadValue(ArrayList<TLRPC.Dialog> dialogs, long did) {
        if (did != 0 || (dialogs != null && !dialogs.isEmpty())) {
            TLRPC.TL_messages_getPeerDialogs req = new TLRPC.TL_messages_getPeerDialogs();
            if (dialogs != null) {
                for (int a = 0; a < dialogs.size(); a++) {
                    TLRPC.InputPeer inputPeer = getInputPeer(dialogs.get(a).id);
                    if (!(inputPeer instanceof TLRPC.TL_inputPeerChannel) || inputPeer.access_hash != 0) {
                        TLRPC.TL_inputDialogPeer inputDialogPeer = new TLRPC.TL_inputDialogPeer();
                        inputDialogPeer.peer = inputPeer;
                        req.peers.add(inputDialogPeer);
                    }
                }
            } else {
                TLRPC.InputPeer inputPeer2 = getInputPeer(did);
                if (!(inputPeer2 instanceof TLRPC.TL_inputPeerChannel) || inputPeer2.access_hash != 0) {
                    TLRPC.TL_inputDialogPeer inputDialogPeer2 = new TLRPC.TL_inputDialogPeer();
                    inputDialogPeer2.peer = inputPeer2;
                    req.peers.add(inputDialogPeer2);
                } else {
                    return;
                }
            }
            if (!req.peers.isEmpty()) {
                getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda167(this));
            }
        }
    }

    /* renamed from: lambda$reloadDialogsReadValue$43$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m367x941317e(TLObject response, TLRPC.TL_error error) {
        if (response != null) {
            TLRPC.TL_messages_peerDialogs res = (TLRPC.TL_messages_peerDialogs) response;
            ArrayList<TLRPC.Update> arrayList = new ArrayList<>();
            for (int a = 0; a < res.dialogs.size(); a++) {
                TLRPC.Dialog dialog = res.dialogs.get(a);
                DialogObject.initDialog(dialog);
                Integer value = this.dialogs_read_inbox_max.get(Long.valueOf(dialog.id));
                if (value == null) {
                    value = 0;
                }
                this.dialogs_read_inbox_max.put(Long.valueOf(dialog.id), Integer.valueOf(Math.max(dialog.read_inbox_max_id, value.intValue())));
                if (value.intValue() == 0) {
                    if (dialog.peer.channel_id != 0) {
                        TLRPC.TL_updateReadChannelInbox update = new TLRPC.TL_updateReadChannelInbox();
                        update.channel_id = dialog.peer.channel_id;
                        update.max_id = dialog.read_inbox_max_id;
                        arrayList.add(update);
                    } else {
                        TLRPC.TL_updateReadHistoryInbox update2 = new TLRPC.TL_updateReadHistoryInbox();
                        update2.peer = dialog.peer;
                        update2.max_id = dialog.read_inbox_max_id;
                        arrayList.add(update2);
                    }
                }
                Integer value2 = this.dialogs_read_outbox_max.get(Long.valueOf(dialog.id));
                if (value2 == null) {
                    value2 = 0;
                }
                this.dialogs_read_outbox_max.put(Long.valueOf(dialog.id), Integer.valueOf(Math.max(dialog.read_outbox_max_id, value2.intValue())));
                if (dialog.read_outbox_max_id > value2.intValue()) {
                    if (dialog.peer.channel_id != 0) {
                        TLRPC.TL_updateReadChannelOutbox update3 = new TLRPC.TL_updateReadChannelOutbox();
                        update3.channel_id = dialog.peer.channel_id;
                        update3.max_id = dialog.read_outbox_max_id;
                        arrayList.add(update3);
                    } else {
                        TLRPC.TL_updateReadHistoryOutbox update4 = new TLRPC.TL_updateReadHistoryOutbox();
                        update4.peer = dialog.peer;
                        update4.max_id = dialog.read_outbox_max_id;
                        arrayList.add(update4);
                    }
                }
            }
            if (arrayList.isEmpty() == 0) {
                processUpdateArray(arrayList, (ArrayList<TLRPC.User>) null, (ArrayList<TLRPC.Chat>) null, false, 0);
            }
        }
    }

    public TLRPC.ChannelParticipant getAdminInChannel(long uid, long chatId) {
        LongSparseArray<TLRPC.ChannelParticipant> array = this.channelAdmins.get(chatId);
        if (array == null) {
            return null;
        }
        return array.get(uid);
    }

    public String getAdminRank(long chatId, long uid) {
        TLRPC.ChannelParticipant participant;
        LongSparseArray<TLRPC.ChannelParticipant> array = this.channelAdmins.get(chatId);
        if (array == null || (participant = array.get(uid)) == null) {
            return null;
        }
        return participant.rank != null ? participant.rank : "";
    }

    public boolean isChannelAdminsLoaded(long chatId) {
        return this.channelAdmins.get(chatId) != null;
    }

    public void loadChannelAdmins(long chatId, boolean cache) {
        if (SystemClock.elapsedRealtime() - ((long) this.loadingChannelAdmins.get(chatId)) >= 60) {
            this.loadingChannelAdmins.put(chatId, (int) (SystemClock.elapsedRealtime() / 1000));
            if (cache) {
                getMessagesStorage().loadChannelAdmins(chatId);
                return;
            }
            TLRPC.TL_channels_getParticipants req = new TLRPC.TL_channels_getParticipants();
            req.channel = getInputChannel(chatId);
            req.limit = 100;
            req.filter = new TLRPC.TL_channelParticipantsAdmins();
            getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda195(this, chatId));
        }
    }

    /* renamed from: lambda$loadChannelAdmins$44$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m244xfeabe4c1(long chatId, TLObject response, TLRPC.TL_error error) {
        if (response instanceof TLRPC.TL_channels_channelParticipants) {
            processLoadedAdminsResponse(chatId, (TLRPC.TL_channels_channelParticipants) response);
        }
    }

    public void processLoadedAdminsResponse(long chatId, TLRPC.TL_channels_channelParticipants participants) {
        LongSparseArray<TLRPC.ChannelParticipant> array1 = new LongSparseArray<>(participants.participants.size());
        for (int a = 0; a < participants.participants.size(); a++) {
            TLRPC.ChannelParticipant participant = participants.participants.get(a);
            array1.put(MessageObject.getPeerId(participant.peer), participant);
        }
        processLoadedChannelAdmins(array1, chatId, false);
    }

    public void processLoadedChannelAdmins(LongSparseArray<TLRPC.ChannelParticipant> array, long chatId, boolean cache) {
        if (!cache) {
            getMessagesStorage().putChannelAdmins(chatId, array);
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda335(this, chatId, array, cache));
    }

    /* renamed from: lambda$processLoadedChannelAdmins$45$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m318xvar_e016(long chatId, LongSparseArray array, boolean cache) {
        this.channelAdmins.put(chatId, array);
        if (cache) {
            this.loadingChannelAdmins.delete(chatId);
            loadChannelAdmins(chatId, false);
            getNotificationCenter().postNotificationName(NotificationCenter.didLoadChatAdmins, Long.valueOf(chatId));
        }
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v9, resolved type: org.telegram.tgnet.TLRPC$TL_channels_getFullChannel} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v7, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getFullChat} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void loadFullChat(long r17, int r19, boolean r20) {
        /*
            r16 = this;
            r8 = r16
            r9 = r17
            r11 = r19
            java.util.ArrayList<java.lang.Long> r0 = r8.loadedFullChats
            java.lang.Long r1 = java.lang.Long.valueOf(r17)
            boolean r12 = r0.contains(r1)
            java.util.ArrayList<java.lang.Long> r0 = r8.loadingFullChats
            java.lang.Long r1 = java.lang.Long.valueOf(r17)
            boolean r0 = r0.contains(r1)
            if (r0 != 0) goto L_0x0095
            if (r20 != 0) goto L_0x0022
            if (r12 == 0) goto L_0x0022
            goto L_0x0095
        L_0x0022:
            java.util.ArrayList<java.lang.Long> r0 = r8.loadingFullChats
            java.lang.Long r1 = java.lang.Long.valueOf(r17)
            r0.add(r1)
            long r13 = -r9
            java.lang.Long r0 = java.lang.Long.valueOf(r17)
            org.telegram.tgnet.TLRPC$Chat r15 = r8.getChat(r0)
            boolean r0 = org.telegram.messenger.ChatObject.isChannel(r15)
            if (r0 == 0) goto L_0x004d
            org.telegram.tgnet.TLRPC$TL_channels_getFullChannel r0 = new org.telegram.tgnet.TLRPC$TL_channels_getFullChannel
            r0.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r1 = getInputChannel((org.telegram.tgnet.TLRPC.Chat) r15)
            r0.channel = r1
            r1 = r0
            r2 = r12 ^ 1
            r8.loadChannelAdmins(r9, r2)
            r7 = r1
            goto L_0x0072
        L_0x004d:
            org.telegram.tgnet.TLRPC$TL_messages_getFullChat r0 = new org.telegram.tgnet.TLRPC$TL_messages_getFullChat
            r0.<init>()
            r0.chat_id = r9
            r1 = r0
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r2 = r8.dialogs_read_inbox_max
            java.lang.Long r3 = java.lang.Long.valueOf(r13)
            java.lang.Object r2 = r2.get(r3)
            if (r2 == 0) goto L_0x006d
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r2 = r8.dialogs_read_outbox_max
            java.lang.Long r3 = java.lang.Long.valueOf(r13)
            java.lang.Object r2 = r2.get(r3)
            if (r2 != 0) goto L_0x0071
        L_0x006d:
            r2 = 0
            r8.reloadDialogsReadValue(r2, r13)
        L_0x0071:
            r7 = r1
        L_0x0072:
            org.telegram.tgnet.ConnectionsManager r5 = r16.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda243 r6 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda243
            r0 = r6
            r1 = r16
            r2 = r15
            r3 = r13
            r8 = r5
            r9 = r6
            r5 = r17
            r10 = r7
            r7 = r19
            r0.<init>(r1, r2, r3, r5, r7)
            int r0 = r8.sendRequest(r10, r9)
            if (r11 == 0) goto L_0x0094
            org.telegram.tgnet.ConnectionsManager r1 = r16.getConnectionsManager()
            r1.bindRequestToGuid(r0, r11)
        L_0x0094:
            return
        L_0x0095:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.loadFullChat(long, int, boolean):void");
    }

    /* renamed from: lambda$loadFullChat$48$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m254lambda$loadFullChat$48$orgtelegrammessengerMessagesController(TLRPC.Chat chat, long dialogId, long chatId, int classGuid, TLObject response, TLRPC.TL_error error) {
        Integer value;
        Integer value2;
        long j = dialogId;
        long j2 = chatId;
        TLRPC.TL_error tL_error = error;
        if (tL_error == null) {
            TLRPC.TL_messages_chatFull res = (TLRPC.TL_messages_chatFull) response;
            getMessagesStorage().putUsersAndChats(res.users, res.chats, true, true);
            getMessagesStorage().updateChatInfo(res.full_chat, false);
            if (ChatObject.isChannel(chat)) {
                Integer value3 = this.dialogs_read_inbox_max.get(Long.valueOf(dialogId));
                if (value3 == null) {
                    value = Integer.valueOf(getMessagesStorage().getDialogReadMax(false, j));
                } else {
                    value = value3;
                }
                this.dialogs_read_inbox_max.put(Long.valueOf(dialogId), Integer.valueOf(Math.max(res.full_chat.read_inbox_max_id, value.intValue())));
                if (res.full_chat.read_inbox_max_id > value.intValue()) {
                    ArrayList arrayList = new ArrayList();
                    TLRPC.TL_updateReadChannelInbox update = new TLRPC.TL_updateReadChannelInbox();
                    update.channel_id = j2;
                    update.max_id = res.full_chat.read_inbox_max_id;
                    arrayList.add(update);
                    TLRPC.TL_updateReadChannelInbox tL_updateReadChannelInbox = update;
                    processUpdateArray(arrayList, (ArrayList<TLRPC.User>) null, (ArrayList<TLRPC.Chat>) null, false, 0);
                }
                Integer value4 = this.dialogs_read_outbox_max.get(Long.valueOf(dialogId));
                if (value4 == null) {
                    value2 = Integer.valueOf(getMessagesStorage().getDialogReadMax(true, j));
                } else {
                    value2 = value4;
                }
                this.dialogs_read_outbox_max.put(Long.valueOf(dialogId), Integer.valueOf(Math.max(res.full_chat.read_outbox_max_id, value2.intValue())));
                if (res.full_chat.read_outbox_max_id > value2.intValue()) {
                    ArrayList arrayList2 = new ArrayList();
                    TLRPC.TL_updateReadChannelOutbox update2 = new TLRPC.TL_updateReadChannelOutbox();
                    update2.channel_id = j2;
                    update2.max_id = res.full_chat.read_outbox_max_id;
                    arrayList2.add(update2);
                    processUpdateArray(arrayList2, (ArrayList<TLRPC.User>) null, (ArrayList<TLRPC.Chat>) null, false, 0);
                }
            }
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda351(this, chatId, res, classGuid));
            return;
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda70(this, tL_error, j2));
    }

    /* renamed from: lambda$loadFullChat$46$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m252lambda$loadFullChat$46$orgtelegrammessengerMessagesController(long chatId, TLRPC.TL_messages_chatFull res, int classGuid) {
        TLRPC.Dialog dialog;
        TLRPC.ChatFull old = this.fullChats.get(chatId);
        if (old != null) {
            res.full_chat.inviterId = old.inviterId;
        }
        this.fullChats.put(chatId, res.full_chat);
        applyDialogNotificationsSettings(-chatId, res.full_chat.notify_settings);
        for (int a = 0; a < res.full_chat.bot_info.size(); a++) {
            getMediaDataController().putBotInfo(-chatId, res.full_chat.bot_info.get(a));
        }
        int index = this.blockePeers.indexOfKey(-chatId);
        if (res.full_chat.blocked) {
            if (index < 0) {
                this.blockePeers.put(-chatId, 1);
                getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
            }
        } else if (index >= 0) {
            this.blockePeers.removeAt(index);
            getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
        }
        this.exportedChats.put(chatId, res.full_chat.exported_invite);
        this.loadingFullChats.remove(Long.valueOf(chatId));
        this.loadedFullChats.add(Long.valueOf(chatId));
        putUsers(res.users, false);
        putChats(res.chats, false);
        if (res.full_chat.stickerset != null) {
            getMediaDataController().getGroupStickerSetById(res.full_chat.stickerset);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.chatInfoDidLoad, res.full_chat, Integer.valueOf(classGuid), false, true);
        if ((res.full_chat.flags & 2048) != 0 && (dialog = this.dialogs_dict.get(-chatId)) != null && dialog.folder_id != res.full_chat.folder_id) {
            dialog.folder_id = res.full_chat.folder_id;
            sortDialogs((LongSparseArray<TLRPC.Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
    }

    /* renamed from: lambda$loadFullChat$47$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m253lambda$loadFullChat$47$orgtelegrammessengerMessagesController(TLRPC.TL_error error, long chatId) {
        checkChannelError(error.text, chatId);
        this.loadingFullChats.remove(Long.valueOf(chatId));
    }

    public void loadFullUser(TLRPC.User user, int classGuid, boolean force) {
        if (user != null && !this.loadingFullUsers.contains(Long.valueOf(user.id))) {
            if (force || !this.loadedFullUsers.contains(Long.valueOf(user.id))) {
                this.loadingFullUsers.add(Long.valueOf(user.id));
                TLRPC.TL_users_getFullUser req = new TLRPC.TL_users_getFullUser();
                req.id = getInputUser(user);
                long dialogId = user.id;
                if (this.dialogs_read_inbox_max.get(Long.valueOf(dialogId)) == null || this.dialogs_read_outbox_max.get(Long.valueOf(dialogId)) == null) {
                    reloadDialogsReadValue((ArrayList<TLRPC.Dialog>) null, dialogId);
                }
                getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda253(this, user, classGuid)), classGuid);
            }
        }
    }

    /* renamed from: lambda$loadFullUser$51$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m257lambda$loadFullUser$51$orgtelegrammessengerMessagesController(TLRPC.User user, int classGuid, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            TLRPC.TL_users_userFull res = (TLRPC.TL_users_userFull) response;
            TLRPC.UserFull userFull = res.full_user;
            putUsers(res.users, false);
            putChats(res.chats, false);
            res.full_user.user = getUser(Long.valueOf(res.full_user.id));
            getMessagesStorage().updateUserInfo(userFull, false);
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda97(this, userFull, user, classGuid));
            return;
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda95(this, user));
    }

    /* renamed from: lambda$loadFullUser$49$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m255lambda$loadFullUser$49$orgtelegrammessengerMessagesController(TLRPC.UserFull userFull, TLRPC.User user, int classGuid) {
        TLRPC.Dialog dialog;
        savePeerSettings(userFull.user.id, userFull.settings, false);
        applyDialogNotificationsSettings(user.id, userFull.notify_settings);
        if (userFull.bot_info instanceof TLRPC.TL_botInfo) {
            userFull.bot_info.user_id = user.id;
            getMediaDataController().putBotInfo(user.id, userFull.bot_info);
        }
        int index = this.blockePeers.indexOfKey(user.id);
        if (userFull.blocked) {
            if (index < 0) {
                this.blockePeers.put(user.id, 1);
                getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
            }
        } else if (index >= 0) {
            this.blockePeers.removeAt(index);
            getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
        }
        this.fullUsers.put(user.id, userFull);
        this.loadingFullUsers.remove(Long.valueOf(user.id));
        this.loadedFullUsers.add(Long.valueOf(user.id));
        String names = user.first_name + user.last_name + user.username;
        ArrayList<TLRPC.User> users2 = new ArrayList<>();
        users2.add(userFull.user);
        putUsers(users2, false);
        getMessagesStorage().putUsersAndChats(users2, (ArrayList<TLRPC.Chat>) null, false, true);
        if (!names.equals(userFull.user.first_name + userFull.user.last_name + userFull.user.username)) {
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_NAME));
        }
        if (userFull.user.photo != null && userFull.user.photo.has_video) {
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_AVATAR));
        }
        if (userFull.bot_info instanceof TLRPC.TL_botInfo) {
            userFull.bot_info.user_id = userFull.id;
            getNotificationCenter().postNotificationName(NotificationCenter.botInfoDidLoad, userFull.bot_info, Integer.valueOf(classGuid));
        }
        getNotificationCenter().postNotificationName(NotificationCenter.userInfoDidLoad, Long.valueOf(user.id), userFull);
        if ((userFull.flags & 2048) != 0 && (dialog = this.dialogs_dict.get(user.id)) != null && dialog.folder_id != userFull.folder_id) {
            dialog.folder_id = userFull.folder_id;
            sortDialogs((LongSparseArray<TLRPC.Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
    }

    /* renamed from: lambda$loadFullUser$50$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m256lambda$loadFullUser$50$orgtelegrammessengerMessagesController(TLRPC.User user) {
        this.loadingFullUsers.remove(Long.valueOf(user.id));
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v0, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getMessages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v1, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getMessages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v10, resolved type: org.telegram.tgnet.TLRPC$TL_channels_getMessages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v2, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getMessages} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void reloadMessages(java.util.ArrayList<java.lang.Integer> r17, long r18, boolean r20) {
        /*
            r16 = this;
            r6 = r16
            r7 = r18
            boolean r0 = r17.isEmpty()
            if (r0 == 0) goto L_0x000b
            return
        L_0x000b:
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r9 = r0
            boolean r0 = org.telegram.messenger.DialogObject.isChatDialog(r18)
            if (r0 == 0) goto L_0x0022
            long r0 = -r7
            java.lang.Long r0 = java.lang.Long.valueOf(r0)
            org.telegram.tgnet.TLRPC$Chat r0 = r6.getChat(r0)
            r10 = r0
            goto L_0x0024
        L_0x0022:
            r0 = 0
            r10 = r0
        L_0x0024:
            boolean r0 = org.telegram.messenger.ChatObject.isChannel(r10)
            if (r0 == 0) goto L_0x003a
            org.telegram.tgnet.TLRPC$TL_channels_getMessages r0 = new org.telegram.tgnet.TLRPC$TL_channels_getMessages
            r0.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r1 = getInputChannel((org.telegram.tgnet.TLRPC.Chat) r10)
            r0.channel = r1
            r0.id = r9
            r11 = r0
            goto L_0x0043
        L_0x003a:
            org.telegram.tgnet.TLRPC$TL_messages_getMessages r0 = new org.telegram.tgnet.TLRPC$TL_messages_getMessages
            r0.<init>()
            r0.id = r9
            r1 = r0
            r11 = r1
        L_0x0043:
            androidx.collection.LongSparseArray<java.util.ArrayList<java.lang.Integer>> r0 = r6.reloadingMessages
            java.lang.Object r0 = r0.get(r7)
            java.util.ArrayList r0 = (java.util.ArrayList) r0
            r1 = 0
        L_0x004c:
            int r2 = r17.size()
            if (r1 >= r2) goto L_0x0069
            r12 = r17
            java.lang.Object r2 = r12.get(r1)
            java.lang.Integer r2 = (java.lang.Integer) r2
            if (r0 == 0) goto L_0x0063
            boolean r3 = r0.contains(r2)
            if (r3 == 0) goto L_0x0063
            goto L_0x0066
        L_0x0063:
            r9.add(r2)
        L_0x0066:
            int r1 = r1 + 1
            goto L_0x004c
        L_0x0069:
            r12 = r17
            boolean r1 = r9.isEmpty()
            if (r1 == 0) goto L_0x0072
            return
        L_0x0072:
            if (r0 != 0) goto L_0x0081
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            r0 = r1
            androidx.collection.LongSparseArray<java.util.ArrayList<java.lang.Integer>> r1 = r6.reloadingMessages
            r1.put(r7, r0)
            r13 = r0
            goto L_0x0082
        L_0x0081:
            r13 = r0
        L_0x0082:
            r13.addAll(r9)
            org.telegram.tgnet.ConnectionsManager r14 = r16.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda231 r15 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda231
            r0 = r15
            r1 = r16
            r2 = r18
            r4 = r20
            r5 = r9
            r0.<init>(r1, r2, r4, r5)
            r14.sendRequest(r11, r15)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.reloadMessages(java.util.ArrayList, long, boolean):void");
    }

    /* renamed from: lambda$reloadMessages$53$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m371x9038eea1(long dialogId, boolean scheduled, ArrayList result, TLObject response, TLRPC.TL_error error) {
        Integer inboxValue;
        Integer outboxValue;
        long j = dialogId;
        if (error == null) {
            TLRPC.messages_Messages messagesRes = (TLRPC.messages_Messages) response;
            LongSparseArray<TLRPC.User> usersLocal = new LongSparseArray<>();
            for (int a = 0; a < messagesRes.users.size(); a++) {
                TLRPC.User u = messagesRes.users.get(a);
                usersLocal.put(u.id, u);
            }
            LongSparseArray<TLRPC.Chat> chatsLocal = new LongSparseArray<>();
            for (int a2 = 0; a2 < messagesRes.chats.size(); a2++) {
                TLRPC.Chat c = messagesRes.chats.get(a2);
                chatsLocal.put(c.id, c);
            }
            Integer inboxValue2 = this.dialogs_read_inbox_max.get(Long.valueOf(dialogId));
            if (inboxValue2 == null) {
                Integer inboxValue3 = Integer.valueOf(getMessagesStorage().getDialogReadMax(false, j));
                this.dialogs_read_inbox_max.put(Long.valueOf(dialogId), inboxValue3);
                inboxValue = inboxValue3;
            } else {
                inboxValue = inboxValue2;
            }
            Integer outboxValue2 = this.dialogs_read_outbox_max.get(Long.valueOf(dialogId));
            if (outboxValue2 == null) {
                Integer outboxValue3 = Integer.valueOf(getMessagesStorage().getDialogReadMax(true, j));
                this.dialogs_read_outbox_max.put(Long.valueOf(dialogId), outboxValue3);
                outboxValue = outboxValue3;
            } else {
                outboxValue = outboxValue2;
            }
            ArrayList<MessageObject> objects = new ArrayList<>();
            int a3 = 0;
            while (a3 < messagesRes.messages.size()) {
                TLRPC.Message message = messagesRes.messages.get(a3);
                message.dialog_id = j;
                if (!scheduled) {
                    message.unread = (message.out ? outboxValue : inboxValue).intValue() < message.id;
                }
                MessageObject messageObject = r7;
                TLRPC.Message message2 = message;
                MessageObject messageObject2 = new MessageObject(this.currentAccount, message, usersLocal, chatsLocal, true, true);
                objects.add(messageObject);
                a3++;
            }
            int i = a3;
            ImageLoader.saveMessagesThumbs(messagesRes.messages);
            getMessagesStorage().putMessages(messagesRes, dialogId, -1, 0, false, scheduled);
            LongSparseArray<TLRPC.User> longSparseArray = usersLocal;
            LongSparseArray<TLRPC.Chat> longSparseArray2 = chatsLocal;
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda345(this, dialogId, result, objects));
        }
    }

    /* renamed from: lambda$reloadMessages$52$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m370xaavar_fe0(long dialogId, ArrayList result, ArrayList objects) {
        ArrayList<Integer> arrayList1 = this.reloadingMessages.get(dialogId);
        if (arrayList1 != null) {
            arrayList1.removeAll(result);
            if (arrayList1.isEmpty()) {
                this.reloadingMessages.remove(dialogId);
            }
        }
        MessageObject dialogObj = this.dialogMessage.get(dialogId);
        if (dialogObj != null) {
            int a = 0;
            while (true) {
                if (a >= objects.size()) {
                    break;
                }
                MessageObject obj = (MessageObject) objects.get(a);
                if (dialogObj.getId() == obj.getId()) {
                    this.dialogMessage.put(dialogId, obj);
                    if (obj.messageOwner.peer_id.channel_id == 0) {
                        MessageObject obj2 = this.dialogMessagesByIds.get(obj.getId());
                        this.dialogMessagesByIds.remove(obj.getId());
                        if (obj2 != null) {
                            this.dialogMessagesByIds.put(obj2.getId(), obj2);
                        }
                    }
                    getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                } else {
                    a++;
                }
            }
        }
        getNotificationCenter().postNotificationName(NotificationCenter.replaceMessagesObjects, Long.valueOf(dialogId), objects);
    }

    public void hidePeerSettingsBar(long dialogId, TLRPC.User currentUser, TLRPC.Chat currentChat) {
        if (currentUser != null || currentChat != null) {
            SharedPreferences.Editor editor = this.notificationsPreferences.edit();
            editor.putInt("dialog_bar_vis3" + dialogId, 3);
            editor.remove("dialog_bar_invite" + dialogId);
            editor.commit();
            if (!DialogObject.isEncryptedDialog(dialogId)) {
                TLRPC.TL_messages_hidePeerSettingsBar req = new TLRPC.TL_messages_hidePeerSettingsBar();
                if (currentUser != null) {
                    req.peer = getInputPeer(currentUser.id);
                } else {
                    req.peer = getInputPeer(-currentChat.id);
                }
                getConnectionsManager().sendRequest(req, MessagesController$$ExternalSyntheticLambda273.INSTANCE);
            }
        }
    }

    static /* synthetic */ void lambda$hidePeerSettingsBar$54(TLObject response, TLRPC.TL_error error) {
    }

    public void reportSpam(long dialogId, TLRPC.User currentUser, TLRPC.Chat currentChat, TLRPC.EncryptedChat currentEncryptedChat, boolean geo) {
        if (currentUser != null || currentChat != null || currentEncryptedChat != null) {
            SharedPreferences.Editor editor = this.notificationsPreferences.edit();
            editor.putInt("dialog_bar_vis3" + dialogId, 3);
            editor.commit();
            if (DialogObject.isEncryptedDialog(dialogId)) {
                if (currentEncryptedChat != null && currentEncryptedChat.access_hash != 0) {
                    TLRPC.TL_messages_reportEncryptedSpam req = new TLRPC.TL_messages_reportEncryptedSpam();
                    req.peer = new TLRPC.TL_inputEncryptedChat();
                    req.peer.chat_id = currentEncryptedChat.id;
                    req.peer.access_hash = currentEncryptedChat.access_hash;
                    getConnectionsManager().sendRequest(req, MessagesController$$ExternalSyntheticLambda284.INSTANCE, 2);
                }
            } else if (geo) {
                TLRPC.TL_account_reportPeer req2 = new TLRPC.TL_account_reportPeer();
                if (currentChat != null) {
                    req2.peer = getInputPeer(-currentChat.id);
                } else if (currentUser != null) {
                    req2.peer = getInputPeer(currentUser.id);
                }
                req2.message = "";
                req2.reason = new TLRPC.TL_inputReportReasonGeoIrrelevant();
                getConnectionsManager().sendRequest(req2, MessagesController$$ExternalSyntheticLambda285.INSTANCE, 2);
            } else {
                TLRPC.TL_messages_reportSpam req3 = new TLRPC.TL_messages_reportSpam();
                if (currentChat != null) {
                    req3.peer = getInputPeer(-currentChat.id);
                } else if (currentUser != null) {
                    req3.peer = getInputPeer(currentUser.id);
                }
                getConnectionsManager().sendRequest(req3, MessagesController$$ExternalSyntheticLambda286.INSTANCE, 2);
            }
        }
    }

    static /* synthetic */ void lambda$reportSpam$55(TLObject response, TLRPC.TL_error error) {
    }

    static /* synthetic */ void lambda$reportSpam$56(TLObject response, TLRPC.TL_error error) {
    }

    static /* synthetic */ void lambda$reportSpam$57(TLObject response, TLRPC.TL_error error) {
    }

    private void savePeerSettings(long dialogId, TLRPC.TL_peerSettings settings, boolean update) {
        if (settings != null) {
            SharedPreferences sharedPreferences = this.notificationsPreferences;
            if (sharedPreferences.getInt("dialog_bar_vis3" + dialogId, 0) != 3) {
                SharedPreferences.Editor editor = this.notificationsPreferences.edit();
                boolean bar_hidden = !settings.report_spam && !settings.add_contact && !settings.block_contact && !settings.share_contact && !settings.report_geo && !settings.invite_members;
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("peer settings loaded for " + dialogId + " add = " + settings.add_contact + " block = " + settings.block_contact + " spam = " + settings.report_spam + " share = " + settings.share_contact + " geo = " + settings.report_geo + " hide = " + bar_hidden + " distance = " + settings.geo_distance + " invite = " + settings.invite_members);
                }
                editor.putInt("dialog_bar_vis3" + dialogId, bar_hidden ? 1 : 2);
                editor.putBoolean("dialog_bar_share" + dialogId, settings.share_contact);
                editor.putBoolean("dialog_bar_report" + dialogId, settings.report_spam);
                editor.putBoolean("dialog_bar_add" + dialogId, settings.add_contact);
                editor.putBoolean("dialog_bar_block" + dialogId, settings.block_contact);
                editor.putBoolean("dialog_bar_exception" + dialogId, settings.need_contacts_exception);
                editor.putBoolean("dialog_bar_location" + dialogId, settings.report_geo);
                editor.putBoolean("dialog_bar_archived" + dialogId, settings.autoarchived);
                editor.putBoolean("dialog_bar_invite" + dialogId, settings.invite_members);
                editor.putString("dialog_bar_chat_with_admin_title" + dialogId, settings.request_chat_title);
                editor.putBoolean("dialog_bar_chat_with_channel" + dialogId, settings.request_chat_broadcast);
                editor.putInt("dialog_bar_chat_with_date" + dialogId, settings.request_chat_date);
                SharedPreferences sharedPreferences2 = this.notificationsPreferences;
                if (sharedPreferences2.getInt("dialog_bar_distance" + dialogId, -1) != -2) {
                    if ((settings.flags & 64) != 0) {
                        editor.putInt("dialog_bar_distance" + dialogId, settings.geo_distance);
                    } else {
                        editor.remove("dialog_bar_distance" + dialogId);
                    }
                }
                editor.apply();
                getNotificationCenter().postNotificationName(NotificationCenter.peerSettingsDidLoad, Long.valueOf(dialogId));
            }
        }
    }

    public void loadPeerSettings(TLRPC.User currentUser, TLRPC.Chat currentChat) {
        long dialogId;
        if (currentUser != null || currentChat != null) {
            if (currentUser != null) {
                dialogId = currentUser.id;
            } else {
                dialogId = -currentChat.id;
            }
            if (this.loadingPeerSettings.indexOfKey(dialogId) < 0) {
                this.loadingPeerSettings.put(dialogId, true);
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("request spam button for " + dialogId);
                }
                SharedPreferences sharedPreferences = this.notificationsPreferences;
                int vis = sharedPreferences.getInt("dialog_bar_vis3" + dialogId, 0);
                if (vis != 1 && vis != 3) {
                    TLRPC.TL_messages_getPeerSettings req = new TLRPC.TL_messages_getPeerSettings();
                    if (currentUser != null) {
                        req.peer = getInputPeer(currentUser.id);
                    } else {
                        req.peer = getInputPeer(-currentChat.id);
                    }
                    getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda196(this, dialogId));
                } else if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("dialog bar already hidden for " + dialogId);
                }
            }
        }
    }

    /* renamed from: lambda$loadPeerSettings$59$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m270x7ddf9e81(long dialogId, TLObject response, TLRPC.TL_error error) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda347(this, dialogId, response));
    }

    /* renamed from: lambda$loadPeerSettings$58$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m269x989e2fc0(long dialogId, TLObject response) {
        this.loadingPeerSettings.remove(dialogId);
        if (response != null) {
            TLRPC.TL_messages_peerSettings res = (TLRPC.TL_messages_peerSettings) response;
            TLRPC.TL_peerSettings settings = res.settings;
            putUsers(res.users, false);
            putChats(res.chats, false);
            savePeerSettings(dialogId, settings, false);
        }
    }

    /* access modifiers changed from: protected */
    public void processNewChannelDifferenceParams(int pts, int pts_count, long channelId) {
        int i = pts;
        int i2 = pts_count;
        long j = channelId;
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("processNewChannelDifferenceParams pts = " + i + " pts_count = " + i2 + " channeldId = " + j);
        }
        int channelPts = this.channelsPts.get(j);
        if (channelPts == 0) {
            channelPts = getMessagesStorage().getChannelPtsSync(j);
            if (channelPts == 0) {
                channelPts = 1;
            }
            this.channelsPts.put(j, channelPts);
        }
        if (channelPts + i2 == i) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("APPLY CHANNEL PTS");
            }
            this.channelsPts.put(j, i);
            getMessagesStorage().saveChannelPts(j, i);
        } else if (channelPts != i) {
            long updatesStartWaitTime = this.updatesStartWaitTimeChannels.get(j);
            if (this.gettingDifferenceChannels.get(j, false).booleanValue() || updatesStartWaitTime == 0 || Math.abs(System.currentTimeMillis() - updatesStartWaitTime) <= 1500) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("ADD CHANNEL UPDATE TO QUEUE pts = " + i + " pts_count = " + i2);
                }
                if (updatesStartWaitTime == 0) {
                    this.updatesStartWaitTimeChannels.put(j, System.currentTimeMillis());
                }
                UserActionUpdatesPts updates = new UserActionUpdatesPts();
                updates.pts = i;
                updates.pts_count = i2;
                updates.chat_id = j;
                ArrayList<TLRPC.Updates> arrayList = this.updatesQueueChannels.get(j);
                if (arrayList == null) {
                    arrayList = new ArrayList<>();
                    this.updatesQueueChannels.put(j, arrayList);
                }
                arrayList.add(updates);
                return;
            }
            getChannelDifference(j);
        }
    }

    public void processNewDifferenceParams(int seq, int pts, int date, int pts_count) {
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("processNewDifferenceParams seq = " + seq + " pts = " + pts + " date = " + date + " pts_count = " + pts_count);
        }
        if (pts != -1) {
            if (getMessagesStorage().getLastPtsValue() + pts_count == pts) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("APPLY PTS");
                }
                getMessagesStorage().setLastPtsValue(pts);
                getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
            } else if (getMessagesStorage().getLastPtsValue() != pts) {
                if (this.gettingDifference || this.updatesStartWaitTimePts == 0 || Math.abs(System.currentTimeMillis() - this.updatesStartWaitTimePts) <= 1500) {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("ADD UPDATE TO QUEUE pts = " + pts + " pts_count = " + pts_count);
                    }
                    if (this.updatesStartWaitTimePts == 0) {
                        this.updatesStartWaitTimePts = System.currentTimeMillis();
                    }
                    UserActionUpdatesPts updates = new UserActionUpdatesPts();
                    updates.pts = pts;
                    updates.pts_count = pts_count;
                    this.updatesQueuePts.add(updates);
                } else {
                    getDifference();
                }
            }
        }
        if (seq == -1) {
            return;
        }
        if (getMessagesStorage().getLastSeqValue() + 1 == seq) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("APPLY SEQ");
            }
            getMessagesStorage().setLastSeqValue(seq);
            if (date != -1) {
                getMessagesStorage().setLastDateValue(date);
            }
            getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
        } else if (getMessagesStorage().getLastSeqValue() == seq) {
        } else {
            if (this.gettingDifference || this.updatesStartWaitTimeSeq == 0 || Math.abs(System.currentTimeMillis() - this.updatesStartWaitTimeSeq) <= 1500) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("ADD UPDATE TO QUEUE seq = " + seq);
                }
                if (this.updatesStartWaitTimeSeq == 0) {
                    this.updatesStartWaitTimeSeq = System.currentTimeMillis();
                }
                UserActionUpdatesSeq updates2 = new UserActionUpdatesSeq();
                updates2.seq = seq;
                this.updatesQueueSeq.add(updates2);
                return;
            }
            getDifference();
        }
    }

    public void didAddedNewTask(int minDate, long dialogId, SparseArray<ArrayList<Integer>> mids) {
        Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda294(this, minDate));
        if (mids != null) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda334(this, dialogId, mids));
        }
    }

    /* renamed from: lambda$didAddedNewTask$60$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m192x45b86af8(int minDate) {
        int i;
        if ((this.currentDeletingTaskMids == null && this.currentDeletingTaskMediaMids == null && !this.gettingNewDeleteTask) || ((i = this.currentDeletingTaskTime) != 0 && minDate < i)) {
            getNewDeleteTask((LongSparseArray<ArrayList<Integer>>) null, (LongSparseArray<ArrayList<Integer>>) null);
        }
    }

    /* renamed from: lambda$didAddedNewTask$61$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m193x2af9d9b9(long dialogId, SparseArray mids) {
        getNotificationCenter().postNotificationName(NotificationCenter.didCreatedNewDeleteTask, Long.valueOf(dialogId), mids);
    }

    public void getNewDeleteTask(LongSparseArray<ArrayList<Integer>> oldTask, LongSparseArray<ArrayList<Integer>> oldTaskMedia) {
        Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda360(this, oldTask, oldTaskMedia));
    }

    /* renamed from: lambda$getNewDeleteTask$62$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m233x329464ca(LongSparseArray oldTask, LongSparseArray oldTaskMedia) {
        this.gettingNewDeleteTask = true;
        getMessagesStorage().getNewTask(oldTask, oldTaskMedia);
    }

    private boolean checkDeletingTask(boolean runnable) {
        int i;
        int currentServerTime = getConnectionsManager().getCurrentTime();
        if ((this.currentDeletingTaskMids == null && this.currentDeletingTaskMediaMids == null) || (!runnable && ((i = this.currentDeletingTaskTime) == 0 || i > currentServerTime))) {
            return false;
        }
        this.currentDeletingTaskTime = 0;
        if (this.currentDeleteTaskRunnable != null && !runnable) {
            Utilities.stageQueue.cancelRunnable(this.currentDeleteTaskRunnable);
        }
        LongSparseArray<ArrayList<Integer>> taskMedia = null;
        this.currentDeleteTaskRunnable = null;
        LongSparseArray<ArrayList<Integer>> longSparseArray = this.currentDeletingTaskMids;
        LongSparseArray<ArrayList<Integer>> task = longSparseArray != null ? longSparseArray.clone() : null;
        LongSparseArray<ArrayList<Integer>> longSparseArray2 = this.currentDeletingTaskMediaMids;
        if (longSparseArray2 != null) {
            taskMedia = longSparseArray2.clone();
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda359(this, task, taskMedia));
        return true;
    }

    /* renamed from: lambda$checkDeletingTask$64$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m139xee214c2b(LongSparseArray task, LongSparseArray taskMedia) {
        if (task != null) {
            int N = task.size();
            for (int a = 0; a < N; a++) {
                ArrayList<Integer> mids = (ArrayList) task.valueAt(a);
                deleteMessages(mids, (ArrayList<Long>) null, (TLRPC.EncryptedChat) null, task.keyAt(a), true, false, !mids.isEmpty() && mids.get(0).intValue() > 0);
            }
        }
        if (taskMedia != null) {
            int N2 = taskMedia.size();
            for (int a2 = 0; a2 < N2; a2++) {
                getMessagesStorage().emptyMessagesMedia(taskMedia.keyAt(a2), (ArrayList) taskMedia.valueAt(a2));
            }
        }
        Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda358(this, task, taskMedia));
    }

    /* renamed from: lambda$checkDeletingTask$63$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m138x8dfdd6a(LongSparseArray task, LongSparseArray taskMedia) {
        getNewDeleteTask(task, taskMedia);
        this.currentDeletingTaskTime = 0;
        this.currentDeletingTaskMids = null;
        this.currentDeletingTaskMediaMids = null;
    }

    public void processLoadedDeleteTask(int taskTime, LongSparseArray<ArrayList<Integer>> task, LongSparseArray<ArrayList<Integer>> taskMedia) {
        Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda2(this, task, taskMedia, taskTime));
    }

    /* renamed from: lambda$processLoadedDeleteTask$66$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m320x5720127e(LongSparseArray task, LongSparseArray taskMedia, int taskTime) {
        this.gettingNewDeleteTask = false;
        if (task == null && taskMedia == null) {
            this.currentDeletingTaskTime = 0;
            this.currentDeletingTaskMids = null;
            this.currentDeletingTaskMediaMids = null;
            return;
        }
        this.currentDeletingTaskTime = taskTime;
        this.currentDeletingTaskMids = task;
        this.currentDeletingTaskMediaMids = taskMedia;
        if (this.currentDeleteTaskRunnable != null) {
            Utilities.stageQueue.cancelRunnable(this.currentDeleteTaskRunnable);
            this.currentDeleteTaskRunnable = null;
        }
        if (!checkDeletingTask(false)) {
            this.currentDeleteTaskRunnable = new MessagesController$$ExternalSyntheticLambda166(this);
            Utilities.stageQueue.postRunnable(this.currentDeleteTaskRunnable, ((long) Math.abs(getConnectionsManager().getCurrentTime() - this.currentDeletingTaskTime)) * 1000);
        }
    }

    /* renamed from: lambda$processLoadedDeleteTask$65$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m319x71dea3bd() {
        checkDeletingTask(true);
    }

    public void loadDialogPhotos(long did, int count, int maxId, boolean fromCache, int classGuid) {
        int i = count;
        int i2 = maxId;
        int i3 = classGuid;
        if (fromCache) {
            getMessagesStorage().getDialogPhotos(did, count, maxId, classGuid);
        } else if (did > 0) {
            TLRPC.User user = getUser(Long.valueOf(did));
            if (user != null) {
                TLRPC.TL_photos_getUserPhotos req = new TLRPC.TL_photos_getUserPhotos();
                req.limit = i;
                req.offset = 0;
                req.max_id = (long) i2;
                req.user_id = getInputUser(user);
                getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda207(this, did, count, maxId, classGuid)), i3);
            }
        } else if (did < 0) {
            TLRPC.TL_messages_search req2 = new TLRPC.TL_messages_search();
            req2.filter = new TLRPC.TL_inputMessagesFilterChatPhotos();
            req2.limit = i;
            req2.offset_id = i2;
            req2.q = "";
            req2.peer = getInputPeer(did);
            getConnectionsManager().bindRequestToGuid(getConnectionsManager().sendRequest(req2, new MessagesController$$ExternalSyntheticLambda208(this, did, count, maxId, classGuid)), i3);
        }
    }

    /* renamed from: lambda$loadDialogPhotos$67$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m248x749efc9a(long did, int count, int maxId, int classGuid, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            processLoadedUserPhotos((TLRPC.photos_Photos) response, (ArrayList<TLRPC.Message>) null, did, count, maxId, false, classGuid);
        }
    }

    /* renamed from: lambda$loadDialogPhotos$68$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m249x59e06b5b(long did, int count, int maxId, int classGuid, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            TLRPC.messages_Messages messages = (TLRPC.messages_Messages) response;
            TLRPC.TL_photos_photos res = new TLRPC.TL_photos_photos();
            ArrayList<TLRPC.Message> arrayList = new ArrayList<>();
            res.count = messages.count;
            res.users.addAll(messages.users);
            for (int a = 0; a < messages.messages.size(); a++) {
                TLRPC.Message message = messages.messages.get(a);
                if (!(message.action == null || message.action.photo == null)) {
                    res.photos.add(message.action.photo);
                    arrayList.add(message);
                }
            }
            processLoadedUserPhotos(res, arrayList, did, count, maxId, false, classGuid);
        }
    }

    public void blockPeer(long id) {
        TLRPC.User user = null;
        TLRPC.Chat chat = null;
        if (id > 0) {
            user = getUser(Long.valueOf(id));
            if (user == null) {
                return;
            }
        } else {
            chat = getChat(Long.valueOf(-id));
            if (chat == null) {
                return;
            }
        }
        if (this.blockePeers.indexOfKey(id) < 0) {
            this.blockePeers.put(id, 1);
            if (user != null) {
                if (user.bot) {
                    getMediaDataController().removeInline(id);
                } else {
                    getMediaDataController().removePeer(id);
                }
            }
            int i = this.totalBlockedCount;
            if (i >= 0) {
                this.totalBlockedCount = i + 1;
            }
            getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
            TLRPC.TL_contacts_block req = new TLRPC.TL_contacts_block();
            if (user != null) {
                req.id = getInputPeer(user);
            } else {
                req.id = getInputPeer(chat);
            }
            getConnectionsManager().sendRequest(req, MessagesController$$ExternalSyntheticLambda268.INSTANCE);
        }
    }

    static /* synthetic */ void lambda$blockPeer$69(TLObject response, TLRPC.TL_error error) {
    }

    public void setParticipantBannedRole(long chatId, TLRPC.User user, TLRPC.Chat chat, TLRPC.TL_chatBannedRights rights, boolean isChannel, BaseFragment parentFragment) {
        TLRPC.TL_chatBannedRights tL_chatBannedRights = rights;
        if ((user != null || chat != null) && tL_chatBannedRights != null) {
            TLRPC.TL_channels_editBanned req = new TLRPC.TL_channels_editBanned();
            req.channel = getInputChannel(chatId);
            if (user != null) {
                req.participant = getInputPeer(user);
            } else {
                req.participant = getInputPeer(chat);
            }
            req.banned_rights = tL_chatBannedRights;
            getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda229(this, chatId, parentFragment, req, isChannel));
        }
    }

    /* renamed from: lambda$setParticipantBannedRole$72$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m401x45735fde(long chatId, BaseFragment parentFragment, TLRPC.TL_channels_editBanned req, boolean isChannel, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            processUpdates((TLRPC.Updates) response, false);
            long j = chatId;
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda323(this, chatId), 1000);
            return;
        }
        long j2 = chatId;
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda74(this, error, parentFragment, req, isChannel));
    }

    /* renamed from: lambda$setParticipantBannedRole$70$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m399x7avar_c(long chatId) {
        loadFullChat(chatId, 0, true);
    }

    /* renamed from: lambda$setParticipantBannedRole$71$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m400x6031var_d(TLRPC.TL_error error, BaseFragment parentFragment, TLRPC.TL_channels_editBanned req, boolean isChannel) {
        AlertsCreator.processError(this.currentAccount, error, parentFragment, req, Boolean.valueOf(isChannel));
    }

    public void setChannelSlowMode(long chatId, int seconds) {
        TLRPC.TL_channels_toggleSlowMode req = new TLRPC.TL_channels_toggleSlowMode();
        req.seconds = seconds;
        req.channel = getInputChannel(chatId);
        getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda204(this, chatId));
    }

    /* renamed from: lambda$setChannelSlowMode$74$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m390x8741e000(long chatId, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            getMessagesController().processUpdates((TLRPC.Updates) response, false);
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda320(this, chatId), 1000);
        }
    }

    /* renamed from: lambda$setChannelSlowMode$73$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m389xa200713f(long chatId) {
        loadFullChat(chatId, 0, true);
    }

    public void setDefaultBannedRole(long chatId, TLRPC.TL_chatBannedRights rights, boolean isChannel, BaseFragment parentFragment) {
        if (rights != null) {
            TLRPC.TL_messages_editChatDefaultBannedRights req = new TLRPC.TL_messages_editChatDefaultBannedRights();
            req.peer = getInputPeer(-chatId);
            req.banned_rights = rights;
            getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda230(this, chatId, parentFragment, req, isChannel));
        }
    }

    /* renamed from: lambda$setDefaultBannedRole$77$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m395xab578555(long chatId, BaseFragment parentFragment, TLRPC.TL_messages_editChatDefaultBannedRights req, boolean isChannel, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            processUpdates((TLRPC.Updates) response, false);
            long j = chatId;
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda322(this, chatId), 1000);
            return;
        }
        long j2 = chatId;
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda79(this, error, parentFragment, req, isChannel));
    }

    /* renamed from: lambda$setDefaultBannedRole$75$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m393xe0d4a7d3(long chatId) {
        loadFullChat(chatId, 0, true);
    }

    /* renamed from: lambda$setDefaultBannedRole$76$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m394xCLASSNAME(TLRPC.TL_error error, BaseFragment parentFragment, TLRPC.TL_messages_editChatDefaultBannedRights req, boolean isChannel) {
        AlertsCreator.processError(this.currentAccount, error, parentFragment, req, Boolean.valueOf(isChannel));
    }

    public void setUserAdminRole(long chatId, TLRPC.User user, TLRPC.TL_chatAdminRights rights, String rank, boolean isChannel, BaseFragment parentFragment, boolean addingNew, boolean forceAdmin, String botHash, Runnable onSuccess) {
        setUserAdminRole(chatId, user, rights, rank, isChannel, parentFragment, addingNew, forceAdmin, botHash, onSuccess, (ErrorDelegate) null);
    }

    public void setUserAdminRole(long chatId, TLRPC.User user, TLRPC.TL_chatAdminRights rights, String rank, boolean isChannel, BaseFragment parentFragment, boolean addingNew, boolean forceAdmin, String botHash, Runnable onSuccess, ErrorDelegate onError) {
        TLRPC.User user2 = user;
        TLRPC.TL_chatAdminRights tL_chatAdminRights = rights;
        if (user2 == null) {
            String str = rank;
        } else if (tL_chatAdminRights == null) {
            String str2 = rank;
        } else {
            TLRPC.Chat chat = getChat(Long.valueOf(chatId));
            if (ChatObject.isChannel(chat)) {
                TLRPC.TL_channels_editAdmin req = new TLRPC.TL_channels_editAdmin();
                req.channel = getInputChannel(chat);
                req.user_id = getInputUser(user2);
                req.admin_rights = tL_chatAdminRights;
                req.rank = rank;
                MessagesController$$ExternalSyntheticLambda218 requestDelegate = new MessagesController$$ExternalSyntheticLambda218(this, chatId, onSuccess, parentFragment, req, isChannel, onError);
                if ((!chat.megagroup || !addingNew) && TextUtils.isEmpty(botHash)) {
                    getConnectionsManager().sendRequest(req, requestDelegate);
                    return;
                }
                TLRPC.Chat chat2 = chat;
                MessagesController$$ExternalSyntheticLambda218 messagesController$$ExternalSyntheticLambda218 = requestDelegate;
                addUserToChat(chatId, user, 0, botHash, parentFragment, true, new MessagesController$$ExternalSyntheticLambda64(this, req, requestDelegate), onError);
                return;
            }
            String str3 = rank;
            TLRPC.Chat chat3 = chat;
            TLRPC.TL_messages_editChatAdmin req2 = new TLRPC.TL_messages_editChatAdmin();
            req2.chat_id = chatId;
            req2.user_id = getInputUser(user2);
            req2.is_admin = forceAdmin || tL_chatAdminRights.change_info || tL_chatAdminRights.delete_messages || tL_chatAdminRights.ban_users || tL_chatAdminRights.invite_users || tL_chatAdminRights.pin_messages || tL_chatAdminRights.add_admins || tL_chatAdminRights.manage_call;
            MessagesController$$ExternalSyntheticLambda219 messagesController$$ExternalSyntheticLambda219 = new MessagesController$$ExternalSyntheticLambda219(this, chatId, onSuccess, parentFragment, req2, onError);
            if (req2.is_admin || addingNew || !TextUtils.isEmpty(botHash)) {
                addUserToChat(chatId, user, 0, botHash, parentFragment, true, new MessagesController$$ExternalSyntheticLambda82(this, req2, messagesController$$ExternalSyntheticLambda219), onError);
            } else {
                getConnectionsManager().sendRequest(req2, messagesController$$ExternalSyntheticLambda219);
            }
        }
    }

    /* renamed from: lambda$setUserAdminRole$81$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m404x5CLASSNAMEdc9(long chatId, Runnable onSuccess, BaseFragment parentFragment, TLRPC.TL_channels_editAdmin req, boolean isChannel, ErrorDelegate onError, TLObject response, TLRPC.TL_error error) {
        ErrorDelegate errorDelegate = onError;
        TLRPC.TL_error tL_error = error;
        if (tL_error == null) {
            processUpdates((TLRPC.Updates) response, false);
            long j = chatId;
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda337(this, chatId, onSuccess), 1000);
            return;
        }
        long j2 = chatId;
        Runnable runnable = onSuccess;
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda73(this, error, parentFragment, req, isChannel));
        if (errorDelegate != null) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda361(errorDelegate, tL_error));
        }
    }

    /* renamed from: lambda$setUserAdminRole$78$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m402xde61dbb1(long chatId, Runnable onSuccess) {
        loadFullChat(chatId, 0, true);
        if (onSuccess != null) {
            onSuccess.run();
        }
    }

    /* renamed from: lambda$setUserAdminRole$79$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m403xc3a34a72(TLRPC.TL_error error, BaseFragment parentFragment, TLRPC.TL_channels_editAdmin req, boolean isChannel) {
        AlertsCreator.processError(this.currentAccount, error, parentFragment, req, Boolean.valueOf(isChannel));
    }

    /* renamed from: lambda$setUserAdminRole$82$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m405x41c5ac8a(TLRPC.TL_channels_editAdmin req, RequestDelegate requestDelegate) {
        getConnectionsManager().sendRequest(req, requestDelegate);
    }

    /* renamed from: lambda$setUserAdminRole$86$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m408xd6cb678e(long chatId, Runnable onSuccess, BaseFragment parentFragment, TLRPC.TL_messages_editChatAdmin req, ErrorDelegate onError, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda338(this, chatId, onSuccess), 1000);
            return;
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda78(this, error, parentFragment, req));
        if (onError != null) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda11(onError, error));
        }
    }

    /* renamed from: lambda$setUserAdminRole$83$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m406x27071b4b(long chatId, Runnable onSuccess) {
        loadFullChat(chatId, 0, true);
        if (onSuccess != null) {
            onSuccess.run();
        }
    }

    /* renamed from: lambda$setUserAdminRole$84$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m407xCLASSNAMEa0c(TLRPC.TL_error error, BaseFragment parentFragment, TLRPC.TL_messages_editChatAdmin req) {
        AlertsCreator.processError(this.currentAccount, error, parentFragment, req, false);
    }

    /* renamed from: lambda$setUserAdminRole$87$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m409xbc0cd64f(TLRPC.TL_messages_editChatAdmin req, RequestDelegate requestDelegate) {
        getConnectionsManager().sendRequest(req, requestDelegate);
    }

    public void unblockPeer(long id) {
        TLRPC.TL_contacts_unblock req = new TLRPC.TL_contacts_unblock();
        TLRPC.User user = null;
        TLRPC.Chat chat = null;
        if (id > 0) {
            user = getUser(Long.valueOf(id));
            if (user == null) {
                return;
            }
        } else {
            chat = getChat(Long.valueOf(-id));
            if (chat == null) {
                return;
            }
        }
        this.totalBlockedCount--;
        this.blockePeers.delete(id);
        if (user != null) {
            req.id = getInputPeer(user);
        } else {
            req.id = getInputPeer(chat);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
        getConnectionsManager().sendRequest(req, MessagesController$$ExternalSyntheticLambda289.INSTANCE);
    }

    static /* synthetic */ void lambda$unblockPeer$88(TLObject response, TLRPC.TL_error error) {
    }

    public void getBlockedPeers(boolean reset) {
        if (getUserConfig().isClientActivated() && !this.loadingBlockedPeers) {
            this.loadingBlockedPeers = true;
            TLRPC.TL_contacts_getBlocked req = new TLRPC.TL_contacts_getBlocked();
            req.offset = reset ? 0 : this.blockePeers.size();
            req.limit = reset ? 20 : 100;
            getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda264(this, reset, req));
        }
    }

    /* renamed from: lambda$getBlockedPeers$90$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m211xa6fe97e(boolean reset, TLRPC.TL_contacts_getBlocked req, TLObject response, TLRPC.TL_error error) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda50(this, response, reset, req));
    }

    /* renamed from: lambda$getBlockedPeers$89$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m210x56d064e8(TLObject response, boolean reset, TLRPC.TL_contacts_getBlocked req) {
        if (response != null) {
            TLRPC.contacts_Blocked res = (TLRPC.contacts_Blocked) response;
            putUsers(res.users, false);
            putChats(res.chats, false);
            getMessagesStorage().putUsersAndChats(res.users, res.chats, true, true);
            if (reset) {
                this.blockePeers.clear();
            }
            this.totalBlockedCount = Math.max(res.count, res.blocked.size());
            this.blockedEndReached = res.blocked.size() < req.limit;
            int N = res.blocked.size();
            for (int a = 0; a < N; a++) {
                this.blockePeers.put(MessageObject.getPeerId(res.blocked.get(a).peer_id), 1);
            }
            this.loadingBlockedPeers = false;
            getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
        }
    }

    public void deleteUserPhoto(TLRPC.InputPhoto photo) {
        if (photo == null) {
            TLRPC.TL_photos_updateProfilePhoto req = new TLRPC.TL_photos_updateProfilePhoto();
            req.id = new TLRPC.TL_inputPhotoEmpty();
            getUserConfig().getCurrentUser().photo = new TLRPC.TL_userProfilePhotoEmpty();
            TLRPC.User user = getUser(Long.valueOf(getUserConfig().getClientUserId()));
            if (user == null) {
                user = getUserConfig().getCurrentUser();
            }
            if (user != null) {
                user.photo = getUserConfig().getCurrentUser().photo;
                getNotificationCenter().postNotificationName(NotificationCenter.mainUserInfoChanged, new Object[0]);
                getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_ALL));
                getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda150(this));
                return;
            }
            return;
        }
        TLRPC.TL_photos_deletePhotos req2 = new TLRPC.TL_photos_deletePhotos();
        req2.id.add(photo);
        getConnectionsManager().sendRequest(req2, MessagesController$$ExternalSyntheticLambda272.INSTANCE);
    }

    /* renamed from: lambda$deleteUserPhoto$92$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m191xdeb0a01f(TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            TLRPC.TL_photos_photo photos_photo = (TLRPC.TL_photos_photo) response;
            TLRPC.User user1 = getUser(Long.valueOf(getUserConfig().getClientUserId()));
            if (user1 == null) {
                user1 = getUserConfig().getCurrentUser();
                putUser(user1, false);
            } else {
                getUserConfig().setCurrentUser(user1);
            }
            if (user1 != null) {
                getMessagesStorage().clearUserPhotos(user1.id);
                ArrayList<TLRPC.User> users2 = new ArrayList<>();
                users2.add(user1);
                getMessagesStorage().putUsersAndChats(users2, (ArrayList<TLRPC.Chat>) null, false, true);
                if (photos_photo.photo instanceof TLRPC.TL_photo) {
                    user1.photo = new TLRPC.TL_userProfilePhoto();
                    user1.photo.has_video = !photos_photo.photo.video_sizes.isEmpty();
                    user1.photo.photo_id = photos_photo.photo.id;
                    user1.photo.photo_small = FileLoader.getClosestPhotoSizeWithSize(photos_photo.photo.sizes, 150).location;
                    user1.photo.photo_big = FileLoader.getClosestPhotoSizeWithSize(photos_photo.photo.sizes, 800).location;
                    user1.photo.dc_id = photos_photo.photo.dc_id;
                } else {
                    user1.photo = new TLRPC.TL_userProfilePhotoEmpty();
                }
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda66(this));
            }
        }
    }

    /* renamed from: lambda$deleteUserPhoto$91$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m190xvar_var_e() {
        getNotificationCenter().postNotificationName(NotificationCenter.mainUserInfoChanged, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_ALL));
        getUserConfig().saveConfig(true);
    }

    static /* synthetic */ void lambda$deleteUserPhoto$93(TLObject response, TLRPC.TL_error error) {
    }

    public void processLoadedUserPhotos(TLRPC.photos_Photos res, ArrayList<TLRPC.Message> messages, long did, int count, int maxId, boolean fromCache, int classGuid) {
        TLRPC.photos_Photos photos_photos = res;
        if (!fromCache) {
            getMessagesStorage().putUsersAndChats(photos_photos.users, (ArrayList<TLRPC.Chat>) null, true, true);
            getMessagesStorage().putDialogPhotos(did, res, messages);
        } else {
            ArrayList<TLRPC.Message> arrayList = messages;
            long j = did;
            if (photos_photos == null || photos_photos.photos.isEmpty()) {
                loadDialogPhotos(did, count, maxId, false, classGuid);
                return;
            }
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda107(this, res, fromCache, did, count, classGuid, messages));
    }

    /* renamed from: lambda$processLoadedUserPhotos$94$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m331x1afdc3d(TLRPC.photos_Photos res, boolean fromCache, long did, int count, int classGuid, ArrayList messages) {
        putUsers(res.users, fromCache);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogPhotosLoaded, Long.valueOf(did), Integer.valueOf(count), Boolean.valueOf(fromCache), Integer.valueOf(classGuid), res.photos, messages);
    }

    public void uploadAndApplyUserAvatar(TLRPC.FileLocation location) {
        if (location != null) {
            this.uploadingAvatar = FileLoader.getDirectory(4) + "/" + location.volume_id + "_" + location.local_id + ".jpg";
            getFileLoader().uploadFile(this.uploadingAvatar, false, true, 16777216);
        }
    }

    public void saveTheme(Theme.ThemeInfo themeInfo, Theme.ThemeAccent accent, boolean night, boolean unsave) {
        TLRPC.TL_theme info = accent != null ? accent.info : themeInfo.info;
        if (info != null) {
            TLRPC.TL_account_saveTheme req = new TLRPC.TL_account_saveTheme();
            TLRPC.TL_inputTheme inputTheme = new TLRPC.TL_inputTheme();
            inputTheme.id = info.id;
            inputTheme.access_hash = info.access_hash;
            req.theme = inputTheme;
            req.unsave = unsave;
            getConnectionsManager().sendRequest(req, MessagesController$$ExternalSyntheticLambda287.INSTANCE);
            getConnectionsManager().resumeNetworkMaybe();
        }
        if (!unsave) {
            installTheme(themeInfo, accent, night);
        }
    }

    static /* synthetic */ void lambda$saveTheme$95(TLObject response, TLRPC.TL_error error) {
    }

    public void installTheme(Theme.ThemeInfo themeInfo, Theme.ThemeAccent accent, boolean night) {
        TLRPC.TL_theme info = accent != null ? accent.info : themeInfo.info;
        String slug = accent != null ? accent.patternSlug : themeInfo.slug;
        boolean isBlured = accent == null && themeInfo.isBlured;
        boolean isMotion = accent != null ? accent.patternMotion : themeInfo.isMotion;
        TLRPC.TL_account_installTheme req = new TLRPC.TL_account_installTheme();
        req.dark = night;
        if (info != null) {
            req.format = "android";
            TLRPC.TL_inputTheme inputTheme = new TLRPC.TL_inputTheme();
            inputTheme.id = info.id;
            inputTheme.access_hash = info.access_hash;
            req.theme = inputTheme;
            req.flags |= 2;
        }
        getConnectionsManager().sendRequest(req, MessagesController$$ExternalSyntheticLambda275.INSTANCE);
        if (!TextUtils.isEmpty(slug)) {
            TLRPC.TL_account_installWallPaper req2 = new TLRPC.TL_account_installWallPaper();
            TLRPC.TL_inputWallPaperSlug inputWallPaperSlug = new TLRPC.TL_inputWallPaperSlug();
            inputWallPaperSlug.slug = slug;
            req2.wallpaper = inputWallPaperSlug;
            req2.settings = new TLRPC.TL_wallPaperSettings();
            req2.settings.blur = isBlured;
            req2.settings.motion = isMotion;
            getConnectionsManager().sendRequest(req2, MessagesController$$ExternalSyntheticLambda276.INSTANCE);
        }
    }

    static /* synthetic */ void lambda$installTheme$96(TLObject response, TLRPC.TL_error error) {
    }

    static /* synthetic */ void lambda$installTheme$97(TLObject response, TLRPC.TL_error error) {
    }

    public void saveThemeToServer(Theme.ThemeInfo themeInfo, Theme.ThemeAccent accent) {
        File pathToWallpaper;
        String key;
        if (themeInfo != null) {
            if (accent != null) {
                key = accent.saveToFile().getAbsolutePath();
                pathToWallpaper = accent.getPathToWallpaper();
            } else {
                key = themeInfo.pathToFile;
                pathToWallpaper = null;
            }
            if (key != null && !this.uploadingThemes.containsKey(key)) {
                this.uploadingThemes.put(key, accent != null ? accent : themeInfo);
                Utilities.globalQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda4(this, key, pathToWallpaper, accent, themeInfo));
            }
        }
    }

    /* renamed from: lambda$saveThemeToServer$99$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m381xea760298(String key, File pathToWallpaper, Theme.ThemeAccent accent, Theme.ThemeInfo themeInfo) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda5(this, Theme.createThemePreviewImage(key, pathToWallpaper != null ? pathToWallpaper.getAbsolutePath() : null, accent), key, accent, themeInfo));
    }

    /* JADX WARNING: type inference failed for: r8v0, types: [org.telegram.ui.ActionBar.Theme$ThemeInfo] */
    /* JADX WARNING: Unknown variable types count: 1 */
    /* renamed from: lambda$saveThemeToServer$98$org-telegram-messenger-MessagesController  reason: not valid java name */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void m380x53493d7(java.lang.String r5, java.lang.String r6, org.telegram.ui.ActionBar.Theme.ThemeAccent r7, org.telegram.ui.ActionBar.Theme.ThemeInfo r8) {
        /*
            r4 = this;
            if (r5 != 0) goto L_0x0008
            java.util.HashMap<java.lang.String, java.lang.Object> r0 = r4.uploadingThemes
            r0.remove(r6)
            return
        L_0x0008:
            java.util.HashMap<java.lang.String, java.lang.Object> r0 = r4.uploadingThemes
            if (r7 == 0) goto L_0x000e
            r1 = r7
            goto L_0x000f
        L_0x000e:
            r1 = r8
        L_0x000f:
            r0.put(r5, r1)
            if (r7 != 0) goto L_0x0019
            r8.uploadingFile = r6
            r8.uploadingThumb = r5
            goto L_0x001d
        L_0x0019:
            r7.uploadingFile = r6
            r7.uploadingThumb = r5
        L_0x001d:
            org.telegram.messenger.FileLoader r0 = r4.getFileLoader()
            r1 = 67108864(0x4000000, float:1.5046328E-36)
            r2 = 0
            r3 = 1
            r0.uploadFile(r6, r2, r3, r1)
            org.telegram.messenger.FileLoader r0 = r4.getFileLoader()
            r1 = 16777216(0x1000000, float:2.3509887E-38)
            r0.uploadFile(r5, r2, r3, r1)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.m380x53493d7(java.lang.String, java.lang.String, org.telegram.ui.ActionBar.Theme$ThemeAccent, org.telegram.ui.ActionBar.Theme$ThemeInfo):void");
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v29, resolved type: org.telegram.tgnet.TLRPC$TL_inputWallPaperSlug} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v1, resolved type: org.telegram.tgnet.TLRPC$TL_account_saveWallPaper} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v2, resolved type: org.telegram.tgnet.TLRPC$TL_account_saveWallPaper} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v36, resolved type: org.telegram.tgnet.TLRPC$TL_account_installWallPaper} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v3, resolved type: org.telegram.tgnet.TLRPC$TL_account_saveWallPaper} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v31, resolved type: org.telegram.tgnet.TLRPC$TL_inputWallPaperSlug} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v61, resolved type: org.telegram.tgnet.TLRPC$TL_inputWallPaper} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v32, resolved type: org.telegram.tgnet.TLRPC$TL_inputWallPaperSlug} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void saveWallpaperToServer(java.io.File r16, org.telegram.ui.ActionBar.Theme.OverrideWallpaperInfo r17, boolean r18, long r19) {
        /*
            r15 = this;
            r1 = r15
            r2 = r16
            r3 = r17
            r4 = r18
            java.lang.String r0 = r1.uploadingWallpaper
            r5 = 0
            if (r0 == 0) goto L_0x003c
            java.io.File r0 = new java.io.File
            java.io.File r6 = org.telegram.messenger.ApplicationLoader.getFilesDirFixed()
            java.lang.String r7 = r3.originalFileName
            r0.<init>(r6, r7)
            if (r2 == 0) goto L_0x002e
            java.lang.String r6 = r16.getAbsolutePath()
            java.lang.String r7 = r1.uploadingWallpaper
            boolean r6 = r6.equals(r7)
            if (r6 != 0) goto L_0x002b
            boolean r6 = r2.equals(r0)
            if (r6 == 0) goto L_0x002e
        L_0x002b:
            r1.uploadingWallpaperInfo = r3
            return
        L_0x002e:
            org.telegram.messenger.FileLoader r6 = r15.getFileLoader()
            java.lang.String r7 = r1.uploadingWallpaper
            r6.cancelFileUpload(r7, r5)
            r6 = 0
            r1.uploadingWallpaper = r6
            r1.uploadingWallpaperInfo = r6
        L_0x003c:
            r6 = 1120403456(0x42CLASSNAME, float:100.0)
            r7 = 1
            r8 = 0
            if (r2 == 0) goto L_0x0058
            java.lang.String r0 = r16.getAbsolutePath()
            r1.uploadingWallpaper = r0
            r1.uploadingWallpaperInfo = r3
            org.telegram.messenger.FileLoader r0 = r15.getFileLoader()
            java.lang.String r10 = r1.uploadingWallpaper
            r11 = 16777216(0x1000000, float:2.3509887E-38)
            r0.uploadFile(r10, r5, r7, r11)
            goto L_0x016b
        L_0x0058:
            boolean r0 = r17.isDefault()
            if (r0 != 0) goto L_0x016b
            boolean r0 = r17.isColor()
            if (r0 != 0) goto L_0x016b
            long r10 = r3.wallpaperId
            int r0 = (r10 > r8 ? 1 : (r10 == r8 ? 0 : -1))
            if (r0 <= 0) goto L_0x016b
            boolean r0 = r17.isTheme()
            if (r0 != 0) goto L_0x016b
            long r10 = r3.wallpaperId
            int r0 = (r10 > r8 ? 1 : (r10 == r8 ? 0 : -1))
            if (r0 <= 0) goto L_0x0086
            org.telegram.tgnet.TLRPC$TL_inputWallPaper r0 = new org.telegram.tgnet.TLRPC$TL_inputWallPaper
            r0.<init>()
            long r10 = r3.wallpaperId
            r0.id = r10
            long r10 = r3.accessHash
            r0.access_hash = r10
            r5 = r0
            goto L_0x0090
        L_0x0086:
            org.telegram.tgnet.TLRPC$TL_inputWallPaperSlug r0 = new org.telegram.tgnet.TLRPC$TL_inputWallPaperSlug
            r0.<init>()
            java.lang.String r5 = r3.slug
            r0.slug = r5
            r5 = r0
        L_0x0090:
            org.telegram.tgnet.TLRPC$TL_wallPaperSettings r0 = new org.telegram.tgnet.TLRPC$TL_wallPaperSettings
            r0.<init>()
            r10 = r0
            boolean r0 = r3.isBlurred
            r10.blur = r0
            boolean r0 = r3.isMotion
            r10.motion = r0
            int r0 = r3.color
            r11 = 16777215(0xffffff, float:2.3509886E-38)
            if (r0 == 0) goto L_0x00bc
            int r0 = r3.color
            r0 = r0 & r11
            r10.background_color = r0
            int r0 = r10.flags
            r0 = r0 | r7
            r10.flags = r0
            float r0 = r3.intensity
            float r0 = r0 * r6
            int r0 = (int) r0
            r10.intensity = r0
            int r0 = r10.flags
            r0 = r0 | 8
            r10.flags = r0
        L_0x00bc:
            int r0 = r3.gradientColor1
            if (r0 == 0) goto L_0x00d3
            int r0 = r3.gradientColor1
            r0 = r0 & r11
            r10.second_background_color = r0
            int r0 = r3.rotation
            int r0 = org.telegram.messenger.AndroidUtilities.getWallpaperRotation(r0, r7)
            r10.rotation = r0
            int r0 = r10.flags
            r0 = r0 | 16
            r10.flags = r0
        L_0x00d3:
            int r0 = r3.gradientColor2
            if (r0 == 0) goto L_0x00e2
            int r0 = r3.gradientColor2
            r0 = r0 & r11
            r10.third_background_color = r0
            int r0 = r10.flags
            r0 = r0 | 32
            r10.flags = r0
        L_0x00e2:
            int r0 = r3.gradientColor3
            if (r0 == 0) goto L_0x00f1
            int r0 = r3.gradientColor3
            r0 = r0 & r11
            r10.fourth_background_color = r0
            int r0 = r10.flags
            r0 = r0 | 64
            r10.flags = r0
        L_0x00f1:
            if (r4 == 0) goto L_0x00ff
            org.telegram.tgnet.TLRPC$TL_account_installWallPaper r0 = new org.telegram.tgnet.TLRPC$TL_account_installWallPaper
            r0.<init>()
            r0.wallpaper = r5
            r0.settings = r10
            r11 = r0
            goto L_0x0109
        L_0x00ff:
            org.telegram.tgnet.TLRPC$TL_account_saveWallPaper r0 = new org.telegram.tgnet.TLRPC$TL_account_saveWallPaper
            r0.<init>()
            r0.wallpaper = r5
            r0.settings = r10
            r11 = r0
        L_0x0109:
            int r0 = (r19 > r8 ? 1 : (r19 == r8 ? 0 : -1))
            if (r0 == 0) goto L_0x0110
            r12 = r19
            goto L_0x015f
        L_0x0110:
            r12 = 0
            org.telegram.tgnet.NativeByteBuffer r0 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x0152 }
            r13 = 1024(0x400, float:1.435E-42)
            r0.<init>((int) r13)     // Catch:{ Exception -> 0x0152 }
            r12 = r0
            r0 = 21
            r12.writeInt32(r0)     // Catch:{ Exception -> 0x0152 }
            boolean r0 = r3.isBlurred     // Catch:{ Exception -> 0x0152 }
            r12.writeBool(r0)     // Catch:{ Exception -> 0x0152 }
            boolean r0 = r3.isMotion     // Catch:{ Exception -> 0x0152 }
            r12.writeBool(r0)     // Catch:{ Exception -> 0x0152 }
            int r0 = r3.color     // Catch:{ Exception -> 0x0152 }
            r12.writeInt32(r0)     // Catch:{ Exception -> 0x0152 }
            int r0 = r3.gradientColor1     // Catch:{ Exception -> 0x0152 }
            r12.writeInt32(r0)     // Catch:{ Exception -> 0x0152 }
            int r0 = r3.rotation     // Catch:{ Exception -> 0x0152 }
            r12.writeInt32(r0)     // Catch:{ Exception -> 0x0152 }
            float r0 = r3.intensity     // Catch:{ Exception -> 0x0152 }
            double r13 = (double) r0     // Catch:{ Exception -> 0x0152 }
            r12.writeDouble(r13)     // Catch:{ Exception -> 0x0152 }
            r12.writeBool(r4)     // Catch:{ Exception -> 0x0152 }
            java.lang.String r0 = r3.slug     // Catch:{ Exception -> 0x0152 }
            r12.writeString(r0)     // Catch:{ Exception -> 0x0152 }
            java.lang.String r0 = r3.originalFileName     // Catch:{ Exception -> 0x0152 }
            r12.writeString(r0)     // Catch:{ Exception -> 0x0152 }
            int r0 = r12.position()     // Catch:{ Exception -> 0x0152 }
            r12.limit(r0)     // Catch:{ Exception -> 0x0152 }
            goto L_0x0156
        L_0x0152:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
        L_0x0156:
            org.telegram.messenger.MessagesStorage r0 = r15.getMessagesStorage()
            long r13 = r0.createPendingTask(r12)
            r12 = r13
        L_0x015f:
            org.telegram.tgnet.ConnectionsManager r0 = r15.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda203 r14 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda203
            r14.<init>(r15, r12)
            r0.sendRequest(r11, r14)
        L_0x016b:
            boolean r0 = r17.isColor()
            if (r0 != 0) goto L_0x0175
            int r0 = r3.gradientColor2
            if (r0 == 0) goto L_0x0255
        L_0x0175:
            long r10 = r3.wallpaperId
            int r0 = (r10 > r8 ? 1 : (r10 == r8 ? 0 : -1))
            if (r0 > 0) goto L_0x0255
            boolean r0 = r17.isColor()
            if (r0 == 0) goto L_0x0187
            org.telegram.tgnet.TLRPC$TL_wallPaperNoFile r0 = new org.telegram.tgnet.TLRPC$TL_wallPaperNoFile
            r0.<init>()
            goto L_0x0197
        L_0x0187:
            org.telegram.tgnet.TLRPC$TL_wallPaper r0 = new org.telegram.tgnet.TLRPC$TL_wallPaper
            r0.<init>()
            java.lang.String r5 = r3.slug
            r0.slug = r5
            org.telegram.tgnet.TLRPC$TL_documentEmpty r5 = new org.telegram.tgnet.TLRPC$TL_documentEmpty
            r5.<init>()
            r0.document = r5
        L_0x0197:
            long r10 = r3.wallpaperId
            int r5 = (r10 > r8 ? 1 : (r10 == r8 ? 0 : -1))
            if (r5 != 0) goto L_0x01b1
            java.security.SecureRandom r5 = org.telegram.messenger.Utilities.random
            long r10 = r5.nextLong()
            r0.id = r10
            long r10 = r0.id
            int r5 = (r10 > r8 ? 1 : (r10 == r8 ? 0 : -1))
            if (r5 <= 0) goto L_0x01b5
            long r8 = r0.id
            long r8 = -r8
            r0.id = r8
            goto L_0x01b5
        L_0x01b1:
            long r8 = r3.wallpaperId
            r0.id = r8
        L_0x01b5:
            int r5 = r3.color
            int r8 = r3.gradientColor1
            int r9 = r3.gradientColor2
            int r10 = r3.gradientColor3
            boolean r5 = org.telegram.ui.Components.MotionBackgroundDrawable.isDark(r5, r8, r9, r10)
            r0.dark = r5
            int r5 = r0.flags
            r5 = r5 | 4
            r0.flags = r5
            org.telegram.tgnet.TLRPC$TL_wallPaperSettings r5 = new org.telegram.tgnet.TLRPC$TL_wallPaperSettings
            r5.<init>()
            r0.settings = r5
            org.telegram.tgnet.TLRPC$WallPaperSettings r5 = r0.settings
            boolean r8 = r3.isBlurred
            r5.blur = r8
            org.telegram.tgnet.TLRPC$WallPaperSettings r5 = r0.settings
            boolean r8 = r3.isMotion
            r5.motion = r8
            int r5 = r3.color
            if (r5 == 0) goto L_0x01fe
            org.telegram.tgnet.TLRPC$WallPaperSettings r5 = r0.settings
            int r8 = r3.color
            r5.background_color = r8
            org.telegram.tgnet.TLRPC$WallPaperSettings r5 = r0.settings
            int r8 = r5.flags
            r8 = r8 | r7
            r5.flags = r8
            org.telegram.tgnet.TLRPC$WallPaperSettings r5 = r0.settings
            float r8 = r3.intensity
            float r8 = r8 * r6
            int r6 = (int) r8
            r5.intensity = r6
            org.telegram.tgnet.TLRPC$WallPaperSettings r5 = r0.settings
            int r6 = r5.flags
            r6 = r6 | 8
            r5.flags = r6
        L_0x01fe:
            int r5 = r3.gradientColor1
            if (r5 == 0) goto L_0x021a
            org.telegram.tgnet.TLRPC$WallPaperSettings r5 = r0.settings
            int r6 = r3.gradientColor1
            r5.second_background_color = r6
            org.telegram.tgnet.TLRPC$WallPaperSettings r5 = r0.settings
            int r6 = r3.rotation
            int r6 = org.telegram.messenger.AndroidUtilities.getWallpaperRotation(r6, r7)
            r5.rotation = r6
            org.telegram.tgnet.TLRPC$WallPaperSettings r5 = r0.settings
            int r6 = r5.flags
            r6 = r6 | 16
            r5.flags = r6
        L_0x021a:
            int r5 = r3.gradientColor2
            if (r5 == 0) goto L_0x022c
            org.telegram.tgnet.TLRPC$WallPaperSettings r5 = r0.settings
            int r6 = r3.gradientColor2
            r5.third_background_color = r6
            org.telegram.tgnet.TLRPC$WallPaperSettings r5 = r0.settings
            int r6 = r5.flags
            r6 = r6 | 32
            r5.flags = r6
        L_0x022c:
            int r5 = r3.gradientColor3
            if (r5 == 0) goto L_0x023e
            org.telegram.tgnet.TLRPC$WallPaperSettings r5 = r0.settings
            int r6 = r3.gradientColor3
            r5.fourth_background_color = r6
            org.telegram.tgnet.TLRPC$WallPaperSettings r5 = r0.settings
            int r6 = r5.flags
            r6 = r6 | 64
            r5.flags = r6
        L_0x023e:
            java.util.ArrayList r5 = new java.util.ArrayList
            r5.<init>()
            r5.add(r0)
            org.telegram.messenger.MessagesStorage r6 = r15.getMessagesStorage()
            r7 = -3
            r6.putWallpapers(r5, r7)
            org.telegram.messenger.MessagesStorage r6 = r15.getMessagesStorage()
            r6.getWallpapers()
        L_0x0255:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.saveWallpaperToServer(java.io.File, org.telegram.ui.ActionBar.Theme$OverrideWallpaperInfo, boolean, long):void");
    }

    /* renamed from: lambda$saveWallpaperToServer$100$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m382x21c1a1d4(long newTaskId, TLObject response, TLRPC.TL_error error) {
        getMessagesStorage().removePendingTask(newTaskId);
    }

    public void markDialogMessageAsDeleted(long dialogId, ArrayList<Integer> messages) {
        MessageObject obj = this.dialogMessage.get(dialogId);
        if (obj != null) {
            for (int a = 0; a < messages.size(); a++) {
                if (obj.getId() == messages.get(a).intValue()) {
                    obj.deleted = true;
                    return;
                }
            }
        }
    }

    public void deleteMessages(ArrayList<Integer> messages, ArrayList<Long> randoms, TLRPC.EncryptedChat encryptedChat, long dialogId, boolean forAll, boolean scheduled) {
        deleteMessages(messages, randoms, encryptedChat, dialogId, forAll, scheduled, false, 0, (TLObject) null);
    }

    public void deleteMessages(ArrayList<Integer> messages, ArrayList<Long> randoms, TLRPC.EncryptedChat encryptedChat, long dialogId, boolean forAll, boolean scheduled, boolean cacheOnly) {
        deleteMessages(messages, randoms, encryptedChat, dialogId, forAll, scheduled, cacheOnly, 0, (TLObject) null);
    }

    public void deleteMessages(ArrayList<Integer> messages, ArrayList<Long> randoms, TLRPC.EncryptedChat encryptedChat, long dialogId, boolean forAll, boolean scheduled, boolean cacheOnly, long taskId, TLObject taskRequest) {
        long channelId;
        ArrayList<Integer> toSend;
        long newTaskId;
        TLRPC.TL_messages_deleteMessages req;
        long newTaskId2;
        TLRPC.TL_channels_deleteMessages req2;
        long newTaskId3;
        TLRPC.TL_messages_deleteScheduledMessages req3;
        long channelId2;
        char c;
        ArrayList<Integer> arrayList = messages;
        ArrayList<Long> arrayList2 = randoms;
        TLRPC.EncryptedChat encryptedChat2 = encryptedChat;
        long j = dialogId;
        TLObject tLObject = taskRequest;
        if ((arrayList != null && !messages.isEmpty()) || taskId != 0) {
            ArrayList<Integer> toSend2 = null;
            if (taskId == 0) {
                if (j == 0 || !DialogObject.isChatDialog(dialogId)) {
                    channelId2 = 0;
                } else {
                    TLRPC.Chat chat = getChat(Long.valueOf(-j));
                    channelId2 = ChatObject.isChannel(chat) ? chat.id : 0;
                }
                if (!cacheOnly) {
                    toSend2 = new ArrayList<>();
                    int N = messages.size();
                    for (int a = 0; a < N; a++) {
                        Integer mid = arrayList.get(a);
                        if (mid.intValue() > 0) {
                            toSend2.add(mid);
                        }
                    }
                }
                if (scheduled) {
                    getMessagesStorage().markMessagesAsDeleted(dialogId, messages, true, false, true);
                    c = 1;
                } else {
                    if (channelId2 == 0) {
                        for (int a2 = 0; a2 < messages.size(); a2++) {
                            MessageObject obj = this.dialogMessagesByIds.get(arrayList.get(a2).intValue());
                            if (obj != null) {
                                obj.deleted = true;
                            }
                        }
                    } else {
                        markDialogMessageAsDeleted(j, arrayList);
                    }
                    long j2 = dialogId;
                    getMessagesStorage().markMessagesAsDeleted(j2, messages, true, forAll, false);
                    c = 1;
                    getMessagesStorage().updateDialogsWithDeletedMessages(j2, channelId2, messages, (ArrayList<Long>) null, true);
                }
                NotificationCenter notificationCenter = getNotificationCenter();
                int i = NotificationCenter.messagesDeleted;
                Object[] objArr = new Object[3];
                objArr[0] = arrayList;
                objArr[c] = Long.valueOf(channelId2);
                objArr[2] = Boolean.valueOf(scheduled);
                notificationCenter.postNotificationName(i, objArr);
                toSend = toSend2;
                channelId = channelId2;
            } else if (tLObject instanceof TLRPC.TL_channels_deleteMessages) {
                channelId = ((TLRPC.TL_channels_deleteMessages) tLObject).channel.channel_id;
                toSend = null;
            } else {
                toSend = null;
                channelId = 0;
            }
            if (!cacheOnly) {
                if (scheduled) {
                    if (tLObject instanceof TLRPC.TL_messages_deleteScheduledMessages) {
                        req3 = (TLRPC.TL_messages_deleteScheduledMessages) tLObject;
                        newTaskId3 = taskId;
                    } else {
                        TLRPC.TL_messages_deleteScheduledMessages req4 = new TLRPC.TL_messages_deleteScheduledMessages();
                        req4.id = toSend;
                        req4.peer = getInputPeer(j);
                        NativeByteBuffer data = null;
                        try {
                            data = new NativeByteBuffer(req4.getObjectSize() + 12);
                            data.writeInt32(24);
                            data.writeInt64(j);
                            req4.serializeToStream(data);
                        } catch (Exception e) {
                            FileLog.e((Throwable) e);
                        }
                        req3 = req4;
                        newTaskId3 = getMessagesStorage().createPendingTask(data);
                    }
                    getConnectionsManager().sendRequest(req3, new MessagesController$$ExternalSyntheticLambda193(this, newTaskId3));
                    long j3 = j;
                    TLRPC.EncryptedChat encryptedChat3 = encryptedChat2;
                    long j4 = channelId;
                    boolean z = forAll;
                    ArrayList<Long> arrayList3 = arrayList2;
                } else if (channelId != 0) {
                    if (tLObject != null) {
                        req2 = (TLRPC.TL_channels_deleteMessages) tLObject;
                        newTaskId2 = taskId;
                    } else {
                        TLRPC.TL_channels_deleteMessages req5 = new TLRPC.TL_channels_deleteMessages();
                        req5.id = toSend;
                        req5.channel = getInputChannel(channelId);
                        NativeByteBuffer data2 = null;
                        try {
                            data2 = new NativeByteBuffer(req5.getObjectSize() + 12);
                            data2.writeInt32(24);
                            data2.writeInt64(j);
                            req5.serializeToStream(data2);
                        } catch (Exception e2) {
                            FileLog.e((Throwable) e2);
                        }
                        req2 = req5;
                        newTaskId2 = getMessagesStorage().createPendingTask(data2);
                    }
                    TLRPC.EncryptedChat encryptedChat4 = encryptedChat2;
                    TLObject tLObject2 = tLObject;
                    long j5 = channelId;
                    long j6 = channelId;
                    ArrayList<Long> arrayList4 = arrayList2;
                    getConnectionsManager().sendRequest(req2, new MessagesController$$ExternalSyntheticLambda213(this, j5, newTaskId2));
                    long j7 = dialogId;
                    boolean z2 = forAll;
                } else {
                    TLRPC.EncryptedChat encryptedChat5 = encryptedChat2;
                    TLObject tLObject3 = tLObject;
                    long j8 = channelId;
                    ArrayList<Long> arrayList5 = arrayList2;
                    if (!(arrayList5 == null || encryptedChat5 == null || randoms.isEmpty())) {
                        getSecretChatHelper().sendMessagesDeleteMessage(encryptedChat5, arrayList5, (TLRPC.Message) null);
                    }
                    if (tLObject3 instanceof TLRPC.TL_messages_deleteMessages) {
                        req = (TLRPC.TL_messages_deleteMessages) tLObject3;
                        long j9 = dialogId;
                        newTaskId = taskId;
                        boolean z3 = forAll;
                    } else {
                        TLRPC.TL_messages_deleteMessages req6 = new TLRPC.TL_messages_deleteMessages();
                        req6.id = toSend;
                        req6.revoke = forAll;
                        NativeByteBuffer data3 = null;
                        try {
                            data3 = new NativeByteBuffer(req6.getObjectSize() + 12);
                            data3.writeInt32(24);
                            try {
                                data3.writeInt64(dialogId);
                                req6.serializeToStream(data3);
                            } catch (Exception e3) {
                                e = e3;
                            }
                        } catch (Exception e4) {
                            e = e4;
                            long j10 = dialogId;
                            FileLog.e((Throwable) e);
                            req = req6;
                            newTaskId = getMessagesStorage().createPendingTask(data3);
                            getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda194(this, newTaskId));
                        }
                        req = req6;
                        newTaskId = getMessagesStorage().createPendingTask(data3);
                    }
                    getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda194(this, newTaskId));
                }
            }
        }
    }

    /* renamed from: lambda$deleteMessages$101$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m179x33eaba03(long newTaskId, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            processUpdates((TLRPC.Updates) response, false);
        }
        if (newTaskId != 0) {
            getMessagesStorage().removePendingTask(newTaskId);
        }
    }

    /* renamed from: lambda$deleteMessages$102$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m180x192CLASSNAMEc4(long channelId, long newTaskId, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            TLRPC.TL_messages_affectedMessages res = (TLRPC.TL_messages_affectedMessages) response;
            processNewChannelDifferenceParams(res.pts, res.pts_count, channelId);
        }
        if (newTaskId != 0) {
            getMessagesStorage().removePendingTask(newTaskId);
        }
    }

    /* renamed from: lambda$deleteMessages$103$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m181xfe6d9785(long newTaskId, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            TLRPC.TL_messages_affectedMessages res = (TLRPC.TL_messages_affectedMessages) response;
            processNewDifferenceParams(-1, res.pts, -1, res.pts_count);
        }
        if (newTaskId != 0) {
            getMessagesStorage().removePendingTask(newTaskId);
        }
    }

    public void unpinAllMessages(TLRPC.Chat chat, TLRPC.User user) {
        if (chat != null || user != null) {
            TLRPC.TL_messages_unpinAllMessages req = new TLRPC.TL_messages_unpinAllMessages();
            req.peer = getInputPeer(chat != null ? -chat.id : user.id);
            getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda245(this, chat, user));
        }
    }

    /* renamed from: lambda$unpinAllMessages$104$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m421xe426980(TLRPC.Chat chat, TLRPC.User user, TLObject response, TLRPC.TL_error error) {
        if (response != null) {
            TLRPC.TL_messages_affectedHistory res = (TLRPC.TL_messages_affectedHistory) response;
            if (ChatObject.isChannel(chat)) {
                processNewChannelDifferenceParams(res.pts, res.pts_count, chat.id);
            } else {
                processNewDifferenceParams(-1, res.pts, -1, res.pts_count);
            }
            new ArrayList();
            getMessagesStorage().updatePinnedMessages(chat != null ? -chat.id : user.id, (ArrayList<Integer>) null, false, 0, 0, false, (HashMap<Integer, MessageObject>) null);
        }
    }

    public void pinMessage(TLRPC.Chat chat, TLRPC.User user, int id, boolean unpin, boolean oneSide, boolean notify) {
        if (chat != null || user != null) {
            TLRPC.TL_messages_updatePinnedMessage req = new TLRPC.TL_messages_updatePinnedMessage();
            req.peer = getInputPeer(chat != null ? -chat.id : user.id);
            req.id = id;
            req.unpin = unpin;
            req.silent = !notify;
            req.pm_oneside = oneSide;
            getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda189(this, id, chat, user, unpin));
        }
    }

    /* renamed from: lambda$pinMessage$105$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m313lambda$pinMessage$105$orgtelegrammessengerMessagesController(int id, TLRPC.Chat chat, TLRPC.User user, boolean unpin, TLObject response, TLRPC.TL_error error) {
        long j;
        TLRPC.Chat chat2 = chat;
        if (error == null) {
            ArrayList<Integer> ids = new ArrayList<>();
            ids.add(Integer.valueOf(id));
            MessagesStorage messagesStorage = getMessagesStorage();
            if (chat2 != null) {
                j = -chat2.id;
                TLRPC.User user2 = user;
            } else {
                j = user.id;
            }
            messagesStorage.updatePinnedMessages(j, ids, !unpin, -1, 0, false, (HashMap<Integer, MessageObject>) null);
            processUpdates((TLRPC.Updates) response, false);
            return;
        }
        TLRPC.User user3 = user;
    }

    public void deleteUserChannelHistory(TLRPC.Chat currentChat, TLRPC.User fromUser, TLRPC.Chat fromChat, int offset) {
        long fromId = 0;
        if (fromUser != null) {
            fromId = fromUser.id;
        } else if (fromChat != null) {
            fromId = fromChat.id;
        }
        if (offset == 0) {
            getMessagesStorage().deleteUserChatHistory(-currentChat.id, fromId);
        }
        TLRPC.TL_channels_deleteParticipantHistory req = new TLRPC.TL_channels_deleteParticipantHistory();
        req.channel = getInputChannel(currentChat);
        req.participant = fromUser != null ? getInputPeer(fromUser) : getInputPeer(fromChat);
        getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda246(this, currentChat, fromUser, fromChat));
    }

    /* renamed from: lambda$deleteUserChannelHistory$106$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m189xbd060338(TLRPC.Chat currentChat, TLRPC.User fromUser, TLRPC.Chat fromChat, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            TLRPC.TL_messages_affectedHistory res = (TLRPC.TL_messages_affectedHistory) response;
            if (res.offset > 0) {
                deleteUserChannelHistory(currentChat, fromUser, fromChat, res.offset);
            }
            processNewChannelDifferenceParams(res.pts, res.pts_count, currentChat.id);
        }
    }

    public ArrayList<TLRPC.Dialog> getAllDialogs() {
        return this.allDialogs;
    }

    public void putDialogsEndReachedAfterRegistration() {
        this.dialogsEndReached.put(0, true);
        this.serverDialogsEndReached.put(0, true);
    }

    public boolean isDialogsEndReached(int folderId) {
        return this.dialogsEndReached.get(folderId);
    }

    public boolean isLoadingDialogs(int folderId) {
        return this.loadingDialogs.get(folderId);
    }

    public boolean isServerDialogsEndReached(int folderId) {
        return this.serverDialogsEndReached.get(folderId);
    }

    public boolean hasHiddenArchive() {
        return SharedConfig.archiveHidden && this.dialogs_dict.get(DialogObject.makeFolderDialogId(1)) != null;
    }

    public ArrayList<TLRPC.Dialog> getDialogs(int folderId) {
        ArrayList<TLRPC.Dialog> dialogs = this.dialogsByFolder.get(folderId);
        if (dialogs == null) {
            return new ArrayList<>();
        }
        return dialogs;
    }

    public int getAllFoldersDialogsCount() {
        int count = 0;
        for (int i = 0; i < this.dialogsByFolder.size(); i++) {
            SparseArray<ArrayList<TLRPC.Dialog>> sparseArray = this.dialogsByFolder;
            List<TLRPC.Dialog> dialogs = sparseArray.get(sparseArray.keyAt(i));
            if (dialogs != null) {
                count += dialogs.size();
            }
        }
        return count;
    }

    public int getTotalDialogsCount() {
        ArrayList<TLRPC.Dialog> dialogs = this.dialogsByFolder.get(0);
        if (dialogs != null) {
            return 0 + dialogs.size();
        }
        return 0;
    }

    public void putAllNeededDraftDialogs() {
        LongSparseArray<SparseArray<TLRPC.DraftMessage>> drafts = getMediaDataController().getDrafts();
        int size = drafts.size();
        for (int i = 0; i < size; i++) {
            TLRPC.DraftMessage draftMessage = drafts.valueAt(i).get(0);
            if (draftMessage != null) {
                putDraftDialogIfNeed(drafts.keyAt(i), draftMessage);
            }
        }
    }

    public void putDraftDialogIfNeed(long dialogId, TLRPC.DraftMessage draftMessage) {
        if (this.dialogs_dict.indexOfKey(dialogId) < 0) {
            MediaDataController mediaDataController = getMediaDataController();
            int dialogsCount = this.allDialogs.size();
            int i = 0;
            if (dialogsCount > 0) {
                TLRPC.Dialog dialog = this.allDialogs.get(dialogsCount - 1);
                if (((long) draftMessage.date) < DialogObject.getLastMessageOrDraftDate(dialog, mediaDataController.getDraft(dialog.id, 0))) {
                    return;
                }
            }
            TLRPC.TL_dialog dialog2 = new TLRPC.TL_dialog();
            dialog2.id = dialogId;
            dialog2.draft = draftMessage;
            dialog2.folder_id = mediaDataController.getDraftFolderId(dialogId);
            if (dialogId < 0 && ChatObject.isChannel(getChat(Long.valueOf(-dialogId)))) {
                i = 1;
            }
            dialog2.flags = i;
            this.dialogs_dict.put(dialogId, dialog2);
            this.allDialogs.add(dialog2);
            sortDialogs((LongSparseArray<TLRPC.Chat>) null);
        }
    }

    public void removeDraftDialogIfNeed(long dialogId) {
        TLRPC.Dialog dialog = this.dialogs_dict.get(dialogId);
        if (dialog != null && dialog.top_message == 0) {
            this.dialogs_dict.remove(dialog.id);
            this.allDialogs.remove(dialog);
        }
    }

    private void removeDialog(TLRPC.Dialog dialog) {
        if (dialog != null) {
            long did = dialog.id;
            if (this.dialogsServerOnly.remove(dialog) && DialogObject.isChannel(dialog)) {
                Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda319(this, did));
            }
            this.allDialogs.remove(dialog);
            this.dialogsMyChannels.remove(dialog);
            this.dialogsMyGroups.remove(dialog);
            this.dialogsCanAddUsers.remove(dialog);
            this.dialogsChannelsOnly.remove(dialog);
            this.dialogsGroupsOnly.remove(dialog);
            this.dialogsUsersOnly.remove(dialog);
            this.dialogsForBlock.remove(dialog);
            this.dialogsForward.remove(dialog);
            int a = 0;
            while (true) {
                DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                if (a >= dialogFilterArr.length) {
                    break;
                }
                if (dialogFilterArr[a] != null) {
                    dialogFilterArr[a].dialogs.remove(dialog);
                }
                a++;
            }
            this.dialogs_dict.remove(did);
            ArrayList<TLRPC.Dialog> dialogs = this.dialogsByFolder.get(dialog.folder_id);
            if (dialogs != null) {
                dialogs.remove(dialog);
            }
        }
    }

    /* renamed from: lambda$removeDialog$107$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m374x79fcfde(long did) {
        this.channelsPts.delete(-did);
        this.shortPollChannels.delete(-did);
        this.needShortPollChannels.delete(-did);
        this.shortPollOnlines.delete(-did);
        this.needShortPollOnlines.delete(-did);
    }

    public void hidePromoDialog() {
        if (this.promoDialog != null) {
            TLRPC.TL_help_hidePromoData req = new TLRPC.TL_help_hidePromoData();
            req.peer = getInputPeer(this.promoDialog.id);
            getConnectionsManager().sendRequest(req, MessagesController$$ExternalSyntheticLambda274.INSTANCE);
            Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda88(this));
            removePromoDialog();
        }
    }

    static /* synthetic */ void lambda$hidePromoDialog$108(TLObject response, TLRPC.TL_error error) {
    }

    /* renamed from: lambda$hidePromoDialog$109$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m241x14815c2f() {
        this.promoDialogId = 0;
        this.proxyDialogAddress = null;
        this.nextPromoInfoCheckTime = getConnectionsManager().getCurrentTime() + 3600;
        getGlobalMainSettings().edit().putLong("proxy_dialog", this.promoDialogId).remove("proxyDialogAddress").putInt("nextPromoInfoCheckTime", this.nextPromoInfoCheckTime).commit();
    }

    public void deleteDialog(long did, int onlyHistory) {
        deleteDialog(did, onlyHistory, false);
    }

    public void deleteDialog(long did, int onlyHistory, boolean revoke) {
        deleteDialog(did, 1, onlyHistory, 0, revoke, (TLRPC.InputPeer) null, 0);
    }

    public void setDialogHistoryTTL(long did, int ttl) {
        TLRPC.TL_messages_setHistoryTTL req = new TLRPC.TL_messages_setHistoryTTL();
        req.peer = getInputPeer(did);
        req.period = ttl;
        getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda169(this));
        TLRPC.ChatFull chatFull = null;
        TLRPC.UserFull userFull = null;
        if (did > 0) {
            userFull = getUserFull(did);
            if (userFull != null) {
                userFull.ttl_period = ttl;
                userFull.flags |= 16384;
            } else {
                return;
            }
        } else {
            chatFull = getChatFull(-did);
            if (chatFull != null) {
                chatFull.ttl_period = ttl;
                if (chatFull instanceof TLRPC.TL_channelFull) {
                    chatFull.flags |= 16777216;
                } else {
                    chatFull.flags |= 16384;
                }
            } else {
                return;
            }
        }
        if (chatFull != null) {
            getNotificationCenter().postNotificationName(NotificationCenter.chatInfoDidLoad, chatFull, 0, false, false);
            return;
        }
        getNotificationCenter().postNotificationName(NotificationCenter.userInfoDidLoad, Long.valueOf(did), userFull);
    }

    /* renamed from: lambda$setDialogHistoryTTL$110$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m397xvar_(TLObject response, TLRPC.TL_error error) {
        if (response != null) {
            processUpdates((TLRPC.Updates) response, false);
        }
    }

    public void setDialogsInTransaction(boolean transaction) {
        this.dialogsInTransaction = transaction;
        if (!transaction) {
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, true);
        }
    }

    /* access modifiers changed from: protected */
    /* JADX WARNING: Removed duplicated region for block: B:148:0x039c  */
    /* JADX WARNING: Removed duplicated region for block: B:156:0x03dd  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void deleteDialog(long r30, int r32, int r33, int r34, boolean r35, org.telegram.tgnet.TLRPC.InputPeer r36, long r37) {
        /*
            r29 = this;
            r11 = r29
            r12 = r30
            r14 = r32
            r15 = r33
            r10 = r35
            r0 = 2
            if (r15 != r0) goto L_0x0015
            org.telegram.messenger.MessagesStorage r0 = r29.getMessagesStorage()
            r0.deleteDialog(r12, r15)
            return
        L_0x0015:
            r1 = 0
        L_0x0016:
            androidx.collection.LongSparseArray<org.telegram.messenger.MessagesController$SendAsPeersInfo> r2 = r11.sendAsPeers
            int r2 = r2.size()
            if (r1 >= r2) goto L_0x009d
            androidx.collection.LongSparseArray<org.telegram.messenger.MessagesController$SendAsPeersInfo> r2 = r11.sendAsPeers
            java.lang.Object r2 = r2.valueAt(r1)
            org.telegram.messenger.MessagesController$SendAsPeersInfo r2 = (org.telegram.messenger.MessagesController.SendAsPeersInfo) r2
            org.telegram.tgnet.TLRPC$TL_channels_sendAsPeers r3 = r2.sendAsPeers
            if (r3 == 0) goto L_0x0099
            r3 = 0
        L_0x002d:
            org.telegram.tgnet.TLRPC$TL_channels_sendAsPeers r4 = r2.sendAsPeers
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r4 = r4.chats
            int r4 = r4.size()
            if (r3 >= r4) goto L_0x0059
            org.telegram.tgnet.TLRPC$TL_channels_sendAsPeers r4 = r2.sendAsPeers
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r4 = r4.chats
            java.lang.Object r4 = r4.get(r3)
            org.telegram.tgnet.TLRPC$Chat r4 = (org.telegram.tgnet.TLRPC.Chat) r4
            long r4 = r4.id
            long r6 = -r12
            int r8 = (r4 > r6 ? 1 : (r4 == r6 ? 0 : -1))
            if (r8 != 0) goto L_0x0056
            org.telegram.tgnet.TLRPC$TL_channels_sendAsPeers r4 = r2.sendAsPeers
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r4 = r4.chats
            r4.remove(r3)
            goto L_0x0059
        L_0x0056:
            int r3 = r3 + 1
            goto L_0x002d
        L_0x0059:
            r3 = 0
        L_0x005a:
            org.telegram.tgnet.TLRPC$TL_channels_sendAsPeers r4 = r2.sendAsPeers
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Peer> r4 = r4.peers
            int r4 = r4.size()
            if (r3 >= r4) goto L_0x0099
            org.telegram.tgnet.TLRPC$TL_channels_sendAsPeers r4 = r2.sendAsPeers
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Peer> r4 = r4.peers
            java.lang.Object r4 = r4.get(r3)
            org.telegram.tgnet.TLRPC$Peer r4 = (org.telegram.tgnet.TLRPC.Peer) r4
            long r4 = r4.channel_id
            long r6 = -r12
            int r8 = (r4 > r6 ? 1 : (r4 == r6 ? 0 : -1))
            if (r8 == 0) goto L_0x0090
            org.telegram.tgnet.TLRPC$TL_channels_sendAsPeers r4 = r2.sendAsPeers
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Peer> r4 = r4.peers
            java.lang.Object r4 = r4.get(r3)
            org.telegram.tgnet.TLRPC$Peer r4 = (org.telegram.tgnet.TLRPC.Peer) r4
            long r4 = r4.chat_id
            long r6 = -r12
            int r8 = (r4 > r6 ? 1 : (r4 == r6 ? 0 : -1))
            if (r8 != 0) goto L_0x008d
            goto L_0x0090
        L_0x008d:
            int r3 = r3 + 1
            goto L_0x005a
        L_0x0090:
            org.telegram.tgnet.TLRPC$TL_channels_sendAsPeers r4 = r2.sendAsPeers
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Peer> r4 = r4.peers
            r4.remove(r3)
        L_0x0099:
            int r1 = r1 + 1
            goto L_0x0016
        L_0x009d:
            androidx.collection.LongSparseArray<org.telegram.messenger.MessagesController$SendAsPeersInfo> r1 = r11.sendAsPeers
            r1.remove(r12)
            r1 = 1
            if (r14 != r1) goto L_0x00c2
            if (r34 != 0) goto L_0x00c2
            r7 = r36
            org.telegram.messenger.MessagesStorage r0 = r29.getMessagesStorage()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda142 r8 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda142
            r1 = r8
            r2 = r29
            r3 = r30
            r5 = r33
            r6 = r35
            r10 = r8
            r8 = r37
            r1.<init>(r2, r3, r5, r6, r7, r8)
            r0.getDialogMaxMessageId(r12, r10)
            return
        L_0x00c2:
            r2 = 3
            if (r15 == 0) goto L_0x00c7
            if (r15 != r2) goto L_0x00ce
        L_0x00c7:
            org.telegram.messenger.MediaDataController r3 = r29.getMediaDataController()
            r3.uninstallShortcut(r12)
        L_0x00ce:
            r3 = r34
            r7 = 0
            if (r14 == 0) goto L_0x030c
            boolean r8 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r8 == 0) goto L_0x00eb
            java.lang.StringBuilder r8 = new java.lang.StringBuilder
            r8.<init>()
            java.lang.String r9 = "delete dialog with id "
            r8.append(r9)
            r8.append(r12)
            java.lang.String r8 = r8.toString()
            org.telegram.messenger.FileLog.d(r8)
        L_0x00eb:
            r8 = 0
            org.telegram.messenger.MessagesStorage r9 = r29.getMessagesStorage()
            r9.deleteDialog(r12, r15)
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r9 = r11.dialogs_dict
            java.lang.Object r9 = r9.get(r12)
            org.telegram.tgnet.TLRPC$Dialog r9 = (org.telegram.tgnet.TLRPC.Dialog) r9
            if (r15 == 0) goto L_0x00ff
            if (r15 != r2) goto L_0x011c
        L_0x00ff:
            org.telegram.messenger.NotificationCenter r10 = r29.getNotificationCenter()
            int r4 = org.telegram.messenger.NotificationCenter.dialogDeleted
            java.lang.Object[] r5 = new java.lang.Object[r1]
            java.lang.Long r6 = java.lang.Long.valueOf(r30)
            r5[r7] = r6
            r10.postNotificationName(r4, r5)
            org.telegram.messenger.NotificationsController r4 = r29.getNotificationsController()
            r4.deleteNotificationChannel(r12)
            int r4 = r11.currentAccount
            org.telegram.ui.Components.JoinCallAlert.processDeletedChat(r4, r12)
        L_0x011c:
            if (r15 != 0) goto L_0x0125
            org.telegram.messenger.MediaDataController r4 = r29.getMediaDataController()
            r4.cleanDraft(r12, r7, r7)
        L_0x0125:
            if (r9 == 0) goto L_0x0288
            if (r14 != r0) goto L_0x013b
            int r4 = r9.top_message
            int r3 = java.lang.Math.max(r7, r4)
            int r4 = r9.read_inbox_max_id
            int r3 = java.lang.Math.max(r3, r4)
            int r4 = r9.read_outbox_max_id
            int r3 = java.lang.Math.max(r3, r4)
        L_0x013b:
            if (r15 == 0) goto L_0x0143
            if (r15 != r2) goto L_0x0140
            goto L_0x0143
        L_0x0140:
            r9.unread_count = r7
            goto L_0x018c
        L_0x0143:
            org.telegram.tgnet.TLRPC$Dialog r4 = r11.promoDialog
            if (r4 == 0) goto L_0x014f
            long r4 = r4.id
            int r6 = (r4 > r12 ? 1 : (r4 == r12 ? 0 : -1))
            if (r6 != 0) goto L_0x014f
            r4 = 1
            goto L_0x0150
        L_0x014f:
            r4 = 0
        L_0x0150:
            r8 = r4
            if (r4 == 0) goto L_0x0175
            r11.isLeftPromoChannel = r1
            org.telegram.tgnet.TLRPC$Dialog r4 = r11.promoDialog
            long r4 = r4.id
            r17 = 0
            int r6 = (r4 > r17 ? 1 : (r4 == r17 ? 0 : -1))
            if (r6 >= 0) goto L_0x0170
            org.telegram.tgnet.TLRPC$Dialog r4 = r11.promoDialog
            long r4 = r4.id
            long r4 = -r4
            java.lang.Long r4 = java.lang.Long.valueOf(r4)
            org.telegram.tgnet.TLRPC$Chat r4 = r11.getChat(r4)
            if (r4 == 0) goto L_0x0170
            r4.left = r1
        L_0x0170:
            r4 = 0
            r11.sortDialogs(r4)
            goto L_0x018c
        L_0x0175:
            r11.removeDialog(r9)
            android.util.SparseIntArray r4 = r11.nextDialogsCacheOffset
            int r5 = r9.folder_id
            int r4 = r4.get(r5, r7)
            if (r4 <= 0) goto L_0x018b
            android.util.SparseIntArray r5 = r11.nextDialogsCacheOffset
            int r6 = r9.folder_id
            int r10 = r4 + -1
            r5.put(r6, r10)
        L_0x018b:
        L_0x018c:
            if (r8 != 0) goto L_0x0286
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r4 = r11.dialogMessage
            long r5 = r9.id
            java.lang.Object r4 = r4.get(r5)
            org.telegram.messenger.MessageObject r4 = (org.telegram.messenger.MessageObject) r4
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r5 = r11.dialogMessage
            r10 = r3
            long r2 = r9.id
            r5.remove(r2)
            if (r4 == 0) goto L_0x01bc
            int r2 = r4.getId()
            org.telegram.tgnet.TLRPC$Message r3 = r4.messageOwner
            org.telegram.tgnet.TLRPC$Peer r3 = r3.peer_id
            long r6 = r3.channel_id
            r17 = 0
            int r3 = (r6 > r17 ? 1 : (r6 == r17 ? 0 : -1))
            if (r3 != 0) goto L_0x01de
            android.util.SparseArray<org.telegram.messenger.MessageObject> r3 = r11.dialogMessagesByIds
            int r6 = r4.getId()
            r3.remove(r6)
            goto L_0x01de
        L_0x01bc:
            int r2 = r9.top_message
            android.util.SparseArray<org.telegram.messenger.MessageObject> r3 = r11.dialogMessagesByIds
            int r6 = r9.top_message
            java.lang.Object r3 = r3.get(r6)
            r4 = r3
            org.telegram.messenger.MessageObject r4 = (org.telegram.messenger.MessageObject) r4
            if (r4 == 0) goto L_0x01de
            org.telegram.tgnet.TLRPC$Message r3 = r4.messageOwner
            org.telegram.tgnet.TLRPC$Peer r3 = r3.peer_id
            long r6 = r3.channel_id
            r17 = 0
            int r3 = (r6 > r17 ? 1 : (r6 == r17 ? 0 : -1))
            if (r3 != 0) goto L_0x01de
            android.util.SparseArray<org.telegram.messenger.MessageObject> r3 = r11.dialogMessagesByIds
            int r6 = r9.top_message
            r3.remove(r6)
        L_0x01de:
            if (r4 == 0) goto L_0x01f3
            org.telegram.tgnet.TLRPC$Message r3 = r4.messageOwner
            long r6 = r3.random_id
            r17 = 0
            int r3 = (r6 > r17 ? 1 : (r6 == r17 ? 0 : -1))
            if (r3 == 0) goto L_0x01f3
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r3 = r11.dialogMessagesByRandomIds
            org.telegram.tgnet.TLRPC$Message r6 = r4.messageOwner
            long r6 = r6.random_id
            r3.remove(r6)
        L_0x01f3:
            if (r15 != r1) goto L_0x0280
            boolean r3 = org.telegram.messenger.DialogObject.isEncryptedDialog(r30)
            if (r3 != 0) goto L_0x0280
            if (r2 <= 0) goto L_0x0280
            org.telegram.tgnet.TLRPC$TL_messageService r3 = new org.telegram.tgnet.TLRPC$TL_messageService
            r3.<init>()
            int r6 = r9.top_message
            r3.id = r6
            org.telegram.messenger.UserConfig r6 = r29.getUserConfig()
            long r6 = r6.getClientUserId()
            int r20 = (r6 > r12 ? 1 : (r6 == r12 ? 0 : -1))
            if (r20 != 0) goto L_0x0214
            r6 = 1
            goto L_0x0215
        L_0x0214:
            r6 = 0
        L_0x0215:
            r3.out = r6
            org.telegram.tgnet.TLRPC$TL_peerUser r6 = new org.telegram.tgnet.TLRPC$TL_peerUser
            r6.<init>()
            r3.from_id = r6
            org.telegram.tgnet.TLRPC$Peer r6 = r3.from_id
            org.telegram.messenger.UserConfig r7 = r29.getUserConfig()
            r21 = r2
            long r1 = r7.getClientUserId()
            r6.user_id = r1
            int r1 = r3.flags
            r1 = r1 | 256(0x100, float:3.59E-43)
            r3.flags = r1
            org.telegram.tgnet.TLRPC$TL_messageActionHistoryClear r1 = new org.telegram.tgnet.TLRPC$TL_messageActionHistoryClear
            r1.<init>()
            r3.action = r1
            int r1 = r9.last_message_date
            r3.date = r1
            r3.dialog_id = r12
            org.telegram.tgnet.TLRPC$Peer r1 = r29.getPeer(r30)
            r3.peer_id = r1
            java.util.ArrayList<java.lang.Long> r1 = r11.createdDialogIds
            long r6 = r3.dialog_id
            java.lang.Long r2 = java.lang.Long.valueOf(r6)
            boolean r1 = r1.contains(r2)
            org.telegram.messenger.MessageObject r2 = new org.telegram.messenger.MessageObject
            int r6 = r11.currentAccount
            r2.<init>(r6, r3, r1, r1)
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            r6.add(r2)
            java.util.ArrayList r7 = new java.util.ArrayList
            r7.<init>()
            r7.add(r3)
            r5 = 0
            r11.updateInterfaceWithMessages(r12, r6, r5)
            org.telegram.messenger.MessagesStorage r22 = r29.getMessagesStorage()
            r24 = 0
            r25 = 1
            r26 = 0
            r27 = 0
            r28 = 0
            r23 = r7
            r22.putMessages((java.util.ArrayList<org.telegram.tgnet.TLRPC.Message>) r23, (boolean) r24, (boolean) r25, (boolean) r26, (int) r27, (boolean) r28)
            goto L_0x0287
        L_0x0280:
            r21 = r2
            r1 = 0
            r9.top_message = r1
            goto L_0x0287
        L_0x0286:
            r10 = r3
        L_0x0287:
            r3 = r10
        L_0x0288:
            if (r14 != r0) goto L_0x02b8
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r11.dialogs_read_inbox_max
            java.lang.Long r2 = java.lang.Long.valueOf(r30)
            java.lang.Object r1 = r1.get(r2)
            java.lang.Integer r1 = (java.lang.Integer) r1
            if (r1 == 0) goto L_0x02a0
            int r2 = r1.intValue()
            int r3 = java.lang.Math.max(r2, r3)
        L_0x02a0:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r2 = r11.dialogs_read_outbox_max
            java.lang.Long r4 = java.lang.Long.valueOf(r30)
            java.lang.Object r2 = r2.get(r4)
            r1 = r2
            java.lang.Integer r1 = (java.lang.Integer) r1
            if (r1 == 0) goto L_0x02b8
            int r2 = r1.intValue()
            int r2 = java.lang.Math.max(r2, r3)
            r3 = r2
        L_0x02b8:
            boolean r1 = r11.dialogsInTransaction
            if (r1 != 0) goto L_0x02fa
            if (r8 == 0) goto L_0x02d2
            org.telegram.messenger.NotificationCenter r0 = r29.getNotificationCenter()
            int r1 = org.telegram.messenger.NotificationCenter.dialogsNeedReload
            r2 = 1
            java.lang.Object[] r4 = new java.lang.Object[r2]
            java.lang.Boolean r6 = java.lang.Boolean.valueOf(r2)
            r2 = 0
            r4[r2] = r6
            r0.postNotificationName(r1, r4)
            goto L_0x02fa
        L_0x02d2:
            r2 = 0
            org.telegram.messenger.NotificationCenter r1 = r29.getNotificationCenter()
            int r4 = org.telegram.messenger.NotificationCenter.dialogsNeedReload
            java.lang.Object[] r5 = new java.lang.Object[r2]
            r1.postNotificationName(r4, r5)
            org.telegram.messenger.NotificationCenter r1 = r29.getNotificationCenter()
            int r4 = org.telegram.messenger.NotificationCenter.removeAllMessagesFromDialog
            r5 = 3
            java.lang.Object[] r7 = new java.lang.Object[r5]
            java.lang.Long r5 = java.lang.Long.valueOf(r30)
            r7[r2] = r5
            java.lang.Boolean r10 = java.lang.Boolean.valueOf(r2)
            r2 = 1
            r7[r2] = r10
            r2 = 0
            r7[r0] = r2
            r1.postNotificationName(r4, r7)
        L_0x02fa:
            org.telegram.messenger.MessagesStorage r0 = r29.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r0 = r0.getStorageQueue()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda316 r1 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda316
            r1.<init>(r11, r12)
            r0.postRunnable(r1)
            r9 = r3
            goto L_0x030d
        L_0x030c:
            r9 = r3
        L_0x030d:
            r0 = 3
            if (r15 != r0) goto L_0x0311
            return
        L_0x0311:
            boolean r0 = org.telegram.messenger.DialogObject.isEncryptedDialog(r30)
            if (r0 != 0) goto L_0x0419
            if (r36 != 0) goto L_0x031f
            org.telegram.tgnet.TLRPC$InputPeer r0 = r29.getInputPeer((long) r30)
            r7 = r0
            goto L_0x0321
        L_0x031f:
            r7 = r36
        L_0x0321:
            if (r7 != 0) goto L_0x0324
            return
        L_0x0324:
            boolean r0 = r7 instanceof org.telegram.tgnet.TLRPC.TL_inputPeerChannel
            r1 = 2147483647(0x7fffffff, float:NaN)
            if (r0 == 0) goto L_0x0335
            if (r15 == 0) goto L_0x032e
            goto L_0x0335
        L_0x032e:
            r2 = r37
            r12 = r2
            r5 = 0
            r3 = r35
            goto L_0x0396
        L_0x0335:
            if (r9 <= 0) goto L_0x034a
            if (r9 == r1) goto L_0x034a
            org.telegram.messenger.support.LongSparseIntArray r0 = r11.deletedHistory
            r5 = 0
            int r0 = r0.get(r12, r5)
            org.telegram.messenger.support.LongSparseIntArray r2 = r11.deletedHistory
            int r3 = java.lang.Math.max(r0, r9)
            r2.put(r12, r3)
            goto L_0x034b
        L_0x034a:
            r5 = 0
        L_0x034b:
            r2 = 0
            int r0 = (r37 > r2 ? 1 : (r37 == r2 ? 0 : -1))
            if (r0 != 0) goto L_0x0390
            r2 = 0
            org.telegram.tgnet.NativeByteBuffer r0 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x037f }
            int r3 = r7.getObjectSize()     // Catch:{ Exception -> 0x037f }
            int r3 = r3 + 28
            r0.<init>((int) r3)     // Catch:{ Exception -> 0x037f }
            r2 = r0
            r0 = 13
            r2.writeInt32(r0)     // Catch:{ Exception -> 0x037f }
            r2.writeInt64(r12)     // Catch:{ Exception -> 0x037f }
            if (r14 == 0) goto L_0x036a
            r0 = 1
            goto L_0x036b
        L_0x036a:
            r0 = 0
        L_0x036b:
            r2.writeBool(r0)     // Catch:{ Exception -> 0x037f }
            r2.writeInt32(r15)     // Catch:{ Exception -> 0x037f }
            r2.writeInt32(r9)     // Catch:{ Exception -> 0x037f }
            r3 = r35
            r2.writeBool(r3)     // Catch:{ Exception -> 0x037d }
            r7.serializeToStream(r2)     // Catch:{ Exception -> 0x037d }
            goto L_0x0385
        L_0x037d:
            r0 = move-exception
            goto L_0x0382
        L_0x037f:
            r0 = move-exception
            r3 = r35
        L_0x0382:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
        L_0x0385:
            org.telegram.messenger.MessagesStorage r0 = r29.getMessagesStorage()
            long r21 = r0.createPendingTask(r2)
            r12 = r21
            goto L_0x0396
        L_0x0390:
            r3 = r35
            r21 = r37
            r12 = r21
        L_0x0396:
            boolean r0 = r7 instanceof org.telegram.tgnet.TLRPC.TL_inputPeerChannel
            r6 = 64
            if (r0 == 0) goto L_0x03dd
            if (r15 != 0) goto L_0x03ac
            r1 = 0
            int r0 = (r12 > r1 ? 1 : (r12 == r1 ? 0 : -1))
            if (r0 == 0) goto L_0x03ab
            org.telegram.messenger.MessagesStorage r0 = r29.getMessagesStorage()
            r0.removePendingTask(r12)
        L_0x03ab:
            return
        L_0x03ac:
            org.telegram.tgnet.TLRPC$TL_channels_deleteHistory r0 = new org.telegram.tgnet.TLRPC$TL_channels_deleteHistory
            r0.<init>()
            org.telegram.tgnet.TLRPC$TL_inputChannel r2 = new org.telegram.tgnet.TLRPC$TL_inputChannel
            r2.<init>()
            r0.channel = r2
            r0.for_everyone = r3
            org.telegram.tgnet.TLRPC$InputChannel r2 = r0.channel
            long r4 = r7.channel_id
            r2.channel_id = r4
            org.telegram.tgnet.TLRPC$InputChannel r2 = r0.channel
            long r4 = r7.access_hash
            r2.access_hash = r4
            if (r9 <= 0) goto L_0x03c9
            r1 = r9
        L_0x03c9:
            r0.max_id = r1
            org.telegram.tgnet.ConnectionsManager r1 = r29.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda192 r2 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda192
            r2.<init>(r11, r12)
            r1.sendRequest(r0, r2, r6)
            r12 = r3
            r18 = r7
            r19 = r9
            goto L_0x0416
        L_0x03dd:
            org.telegram.tgnet.TLRPC$TL_messages_deleteHistory r0 = new org.telegram.tgnet.TLRPC$TL_messages_deleteHistory
            r0.<init>()
            r0.peer = r7
            if (r9 <= 0) goto L_0x03e7
            r1 = r9
        L_0x03e7:
            r0.max_id = r1
            if (r15 == 0) goto L_0x03ed
            r1 = 1
            goto L_0x03ee
        L_0x03ed:
            r1 = 0
        L_0x03ee:
            r0.just_clear = r1
            r0.revoke = r3
            r8 = r9
            r5 = r3
            r10 = r7
            org.telegram.tgnet.ConnectionsManager r3 = r29.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda215 r4 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda215
            r1 = r4
            r2 = r29
            r14 = r3
            r11 = r4
            r3 = r12
            r16 = r12
            r13 = 64
            r12 = r5
            r5 = r30
            r18 = r7
            r7 = r33
            r19 = r9
            r9 = r35
            r1.<init>(r2, r3, r5, r7, r8, r9, r10)
            r14.sendRequest(r0, r11, r13)
        L_0x0416:
            r3 = r29
            goto L_0x0442
        L_0x0419:
            r12 = r35
            r19 = r9
            int r0 = org.telegram.messenger.DialogObject.getEncryptedChatId(r30)
            r1 = 1
            if (r15 != r1) goto L_0x0437
            org.telegram.messenger.SecretChatHelper r1 = r29.getSecretChatHelper()
            java.lang.Integer r2 = java.lang.Integer.valueOf(r0)
            r3 = r29
            org.telegram.tgnet.TLRPC$EncryptedChat r2 = r3.getEncryptedChat(r2)
            r4 = 0
            r1.sendClearHistoryMessage(r2, r4)
            goto L_0x0440
        L_0x0437:
            r3 = r29
            org.telegram.messenger.SecretChatHelper r1 = r29.getSecretChatHelper()
            r1.declineSecretChat(r0, r12)
        L_0x0440:
            r18 = r36
        L_0x0442:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.deleteDialog(long, int, int, int, boolean, org.telegram.tgnet.TLRPC$InputPeer, long):void");
    }

    /* renamed from: lambda$deleteDialog$111$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m174xe353b85e(long did, int onlyHistory, boolean revoke, TLRPC.InputPeer peerFinal, long taskId, int param) {
        deleteDialog(did, 2, onlyHistory, Math.max(0, param), revoke, peerFinal, taskId);
        checkIfFolderEmpty(1);
    }

    /* renamed from: lambda$deleteDialog$112$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m175xCLASSNAMEf(long did) {
        getNotificationsController().removeNotificationsForDialog(did);
    }

    /* renamed from: lambda$deleteDialog$113$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m176xadd695e0(long did) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda315(this, did));
    }

    /* renamed from: lambda$deleteDialog$114$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m177x931804a1(long newTaskId, TLObject response, TLRPC.TL_error error) {
        if (newTaskId != 0) {
            getMessagesStorage().removePendingTask(newTaskId);
        }
        if (response != null) {
            processUpdates((TLRPC.Updates) response, false);
        }
    }

    /* renamed from: lambda$deleteDialog$115$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m178x78597362(long newTaskId, long did, int onlyHistory, int max_id_delete_final, boolean revoke, TLRPC.InputPeer peerFinal, TLObject response, TLRPC.TL_error error) {
        long j = newTaskId;
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
        if (error == null) {
            TLRPC.TL_messages_affectedHistory res = (TLRPC.TL_messages_affectedHistory) response;
            if (res.offset > 0) {
                deleteDialog(did, 0, onlyHistory, max_id_delete_final, revoke, peerFinal, 0);
            }
            processNewDifferenceParams(-1, res.pts, -1, res.pts_count);
            getMessagesStorage().onDeleteQueryComplete(did);
            return;
        }
        long j2 = did;
    }

    public void saveGif(Object parentObject, TLRPC.Document document) {
        if (parentObject != null && MessageObject.isGifDocument(document)) {
            TLRPC.TL_messages_saveGif req = new TLRPC.TL_messages_saveGif();
            req.id = new TLRPC.TL_inputDocument();
            req.id.id = document.id;
            req.id.access_hash = document.access_hash;
            req.id.file_reference = document.file_reference;
            if (req.id.file_reference == null) {
                req.id.file_reference = new byte[0];
            }
            req.unsave = false;
            getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda236(this, parentObject, req));
        }
    }

    /* renamed from: lambda$saveGif$116$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m378lambda$saveGif$116$orgtelegrammessengerMessagesController(Object parentObject, TLRPC.TL_messages_saveGif req, TLObject response, TLRPC.TL_error error) {
        if (error != null && FileRefController.isFileRefError(error.text)) {
            getFileRefController().requestReference(parentObject, req);
        }
    }

    public void saveRecentSticker(Object parentObject, TLRPC.Document document, boolean asMask) {
        if (parentObject != null && document != null) {
            TLRPC.TL_messages_saveRecentSticker req = new TLRPC.TL_messages_saveRecentSticker();
            req.id = new TLRPC.TL_inputDocument();
            req.id.id = document.id;
            req.id.access_hash = document.access_hash;
            req.id.file_reference = document.file_reference;
            if (req.id.file_reference == null) {
                req.id.file_reference = new byte[0];
            }
            req.unsave = false;
            req.attached = asMask;
            getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda237(this, parentObject, req));
        }
    }

    /* renamed from: lambda$saveRecentSticker$117$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m379xce84869c(Object parentObject, TLRPC.TL_messages_saveRecentSticker req, TLObject response, TLRPC.TL_error error) {
        if (error != null && FileRefController.isFileRefError(error.text)) {
            getFileRefController().requestReference(parentObject, req);
        }
    }

    public void loadChannelParticipants(Long chatId) {
        if (!this.loadingFullParticipants.contains(chatId) && !this.loadedFullParticipants.contains(chatId)) {
            this.loadingFullParticipants.add(chatId);
            TLRPC.TL_channels_getParticipants req = new TLRPC.TL_channels_getParticipants();
            req.channel = getInputChannel(chatId.longValue());
            req.filter = new TLRPC.TL_channelParticipantsRecent();
            req.offset = 0;
            req.limit = 32;
            getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda235(this, chatId));
        }
    }

    /* renamed from: lambda$loadChannelParticipants$119$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m246xaaa69d76(Long chatId, TLObject response, TLRPC.TL_error error) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda71(this, error, response, chatId));
    }

    /* renamed from: lambda$loadChannelParticipants$118$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m245xCLASSNAMEeb5(TLRPC.TL_error error, TLObject response, Long chatId) {
        if (error == null) {
            TLRPC.TL_channels_channelParticipants res = (TLRPC.TL_channels_channelParticipants) response;
            putUsers(res.users, false);
            putChats(res.chats, false);
            getMessagesStorage().putUsersAndChats(res.users, res.chats, true, true);
            getMessagesStorage().updateChannelUsers(chatId.longValue(), res.participants);
            this.loadedFullParticipants.add(chatId);
        }
        this.loadingFullParticipants.remove(chatId);
    }

    public void putChatFull(TLRPC.ChatFull chatFull) {
        this.fullChats.put(chatFull.id, chatFull);
    }

    public void processChatInfo(long chatId, TLRPC.ChatFull info, ArrayList<TLRPC.User> usersArr, boolean fromCache, boolean force, boolean byChannelUsers, ArrayList<Integer> pinnedMessages, HashMap<Integer, MessageObject> pinnedMessagesMap, int totalPinnedCount, boolean pinnedEndReached) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda121(this, fromCache, chatId, byChannelUsers, force, info, usersArr, pinnedMessages, pinnedMessagesMap, totalPinnedCount, pinnedEndReached));
    }

    /* renamed from: lambda$processChatInfo$120$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m314xdcc1bd44(boolean fromCache, long chatId, boolean byChannelUsers, boolean force, TLRPC.ChatFull info, ArrayList usersArr, ArrayList pinnedMessages, HashMap pinnedMessagesMap, int totalPinnedCount, boolean pinnedEndReached) {
        boolean z = fromCache;
        long j = chatId;
        TLRPC.ChatFull chatFull = info;
        if (!z || j <= 0 || byChannelUsers) {
            boolean z2 = force;
        } else {
            loadFullChat(j, 0, force);
        }
        if (chatFull != null) {
            if (this.fullChats.get(j) == null) {
                this.fullChats.put(j, chatFull);
            }
            putUsers(usersArr, z);
            if (chatFull.stickerset != null) {
                getMediaDataController().getGroupStickerSetById(chatFull.stickerset);
            }
            getNotificationCenter().postNotificationName(NotificationCenter.chatInfoDidLoad, chatFull, 0, Boolean.valueOf(byChannelUsers), false);
        } else {
            ArrayList arrayList = usersArr;
        }
        if (pinnedMessages != null) {
            getNotificationCenter().postNotificationName(NotificationCenter.pinnedInfoDidLoad, Long.valueOf(-j), pinnedMessages, pinnedMessagesMap, Integer.valueOf(totalPinnedCount), Boolean.valueOf(pinnedEndReached));
        }
    }

    public void loadUserInfo(TLRPC.User user, boolean force, int classGuid) {
        loadUserInfo(user, force, classGuid, 0);
    }

    public void loadUserInfo(TLRPC.User user, boolean force, int classGuid, int fromMessageId) {
        getMessagesStorage().loadUserInfo(user, force, classGuid, fromMessageId);
    }

    public void processUserInfo(TLRPC.User user, TLRPC.UserFull info, boolean fromCache, boolean force, int classGuid, ArrayList<Integer> pinnedMessages, HashMap<Integer, MessageObject> pinnedMessagesMap, int totalPinnedCount, boolean pinnedEndReached) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda124(this, fromCache, user, classGuid, force, info, pinnedMessages, pinnedMessagesMap, totalPinnedCount, pinnedEndReached));
    }

    /* renamed from: lambda$processUserInfo$121$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m362xd9c3e1b8(boolean fromCache, TLRPC.User user, int classGuid, boolean force, TLRPC.UserFull info, ArrayList pinnedMessages, HashMap pinnedMessagesMap, int totalPinnedCount, boolean pinnedEndReached) {
        TLRPC.User user2 = user;
        TLRPC.UserFull userFull = info;
        if (fromCache) {
            loadFullUser(user, classGuid, force);
        } else {
            int i = classGuid;
            boolean z = force;
        }
        if (userFull != null) {
            if (this.fullUsers.get(user2.id) == null) {
                this.fullUsers.put(user2.id, userFull);
                int index = this.blockePeers.indexOfKey(user2.id);
                if (userFull.blocked) {
                    if (index < 0) {
                        this.blockePeers.put(user2.id, 1);
                        getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
                    }
                } else if (index >= 0) {
                    this.blockePeers.removeAt(index);
                    getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
                }
            }
            getNotificationCenter().postNotificationName(NotificationCenter.userInfoDidLoad, Long.valueOf(user2.id), userFull);
        }
        if (pinnedMessages != null) {
            getNotificationCenter().postNotificationName(NotificationCenter.pinnedInfoDidLoad, Long.valueOf(user2.id), pinnedMessages, pinnedMessagesMap, Integer.valueOf(totalPinnedCount), Boolean.valueOf(pinnedEndReached));
        }
    }

    public void updateTimerProc() {
        Long dialogKey;
        int b;
        int currentServerTime;
        int b2;
        Long dialogKey2;
        int b3;
        int currentServerTime2;
        int timeToRemove;
        long currentTime = System.currentTimeMillis();
        checkDeletingTask(false);
        checkReadTasks();
        if (getUserConfig().isClientActivated()) {
            if (this.ignoreSetOnline || getConnectionsManager().getPauseTime() != 0 || !ApplicationLoader.isScreenOn || ApplicationLoader.mainInterfacePausedStageQueue) {
                if (this.statusSettingState != 2 && !this.offlineSent && Math.abs(System.currentTimeMillis() - getConnectionsManager().getPauseTime()) >= 2000) {
                    this.statusSettingState = 2;
                    if (this.statusRequest != 0) {
                        getConnectionsManager().cancelRequest(this.statusRequest, true);
                    }
                    TLRPC.TL_account_updateStatus req = new TLRPC.TL_account_updateStatus();
                    req.offline = true;
                    this.statusRequest = getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda174(this));
                }
            } else if (ApplicationLoader.mainInterfacePausedStageQueueTime != 0 && Math.abs(ApplicationLoader.mainInterfacePausedStageQueueTime - System.currentTimeMillis()) > 1000 && this.statusSettingState != 1 && (this.lastStatusUpdateTime == 0 || Math.abs(System.currentTimeMillis() - this.lastStatusUpdateTime) >= 55000 || this.offlineSent)) {
                this.statusSettingState = 1;
                if (this.statusRequest != 0) {
                    getConnectionsManager().cancelRequest(this.statusRequest, true);
                }
                TLRPC.TL_account_updateStatus req2 = new TLRPC.TL_account_updateStatus();
                req2.offline = false;
                this.statusRequest = getConnectionsManager().sendRequest(req2, new MessagesController$$ExternalSyntheticLambda173(this));
            }
            if (this.updatesQueueChannels.size() != 0) {
                for (int a = 0; a < this.updatesQueueChannels.size(); a++) {
                    long key = this.updatesQueueChannels.keyAt(a);
                    if (Math.abs(currentTime - this.updatesStartWaitTimeChannels.valueAt(a)) >= 1500) {
                        if (BuildVars.LOGS_ENABLED) {
                            FileLog.d("QUEUE CHANNEL " + key + " UPDATES WAIT TIMEOUT - CHECK QUEUE");
                        }
                        processChannelsUpdatesQueue(key, 0);
                    }
                }
            }
            for (int a2 = 0; a2 < 3; a2++) {
                if (getUpdatesStartTime(a2) != 0 && Math.abs(currentTime - getUpdatesStartTime(a2)) >= 1500) {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d(a2 + " QUEUE UPDATES WAIT TIMEOUT - CHECK QUEUE");
                    }
                    processUpdatesQueue(a2, 0);
                }
            }
        }
        int currentServerTime3 = getConnectionsManager().getCurrentTime();
        if (Math.abs(System.currentTimeMillis() - this.lastViewsCheckTime) >= 5000) {
            this.lastViewsCheckTime = System.currentTimeMillis();
            if (this.channelViewsToSend.size() != 0) {
                int a3 = 0;
                while (a3 < this.channelViewsToSend.size()) {
                    long key2 = this.channelViewsToSend.keyAt(a3);
                    TLRPC.TL_messages_getMessagesViews req3 = new TLRPC.TL_messages_getMessagesViews();
                    req3.peer = getInputPeer(key2);
                    req3.id = this.channelViewsToSend.valueAt(a3);
                    req3.increment = a3 == 0;
                    getConnectionsManager().sendRequest(req3, new MessagesController$$ExternalSyntheticLambda228(this, key2, req3));
                    a3++;
                }
                this.channelViewsToSend.clear();
            }
            if (this.pollsToCheckSize > 0) {
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda297(this, currentServerTime3));
            }
        }
        if (!this.onlinePrivacy.isEmpty()) {
            ArrayList<Long> toRemove = null;
            for (Map.Entry<Long, Integer> entry : this.onlinePrivacy.entrySet()) {
                if (entry.getValue().intValue() < currentServerTime3 - 30) {
                    if (toRemove == null) {
                        toRemove = new ArrayList<>();
                    }
                    toRemove.add(entry.getKey());
                }
            }
            if (toRemove != null) {
                Iterator<Long> it = toRemove.iterator();
                while (it.hasNext()) {
                    this.onlinePrivacy.remove(it.next());
                }
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda291(this));
            }
        }
        if (this.shortPollChannels.size() != 0) {
            int a4 = 0;
            while (a4 < this.shortPollChannels.size()) {
                long key3 = this.shortPollChannels.keyAt(a4);
                if (((long) this.shortPollChannels.valueAt(a4)) < System.currentTimeMillis() / 1000) {
                    this.shortPollChannels.delete(key3);
                    a4--;
                    if (this.needShortPollChannels.indexOfKey(key3) >= 0) {
                        getChannelDifference(key3);
                    }
                }
                a4++;
            }
        }
        if (this.shortPollOnlines.size() != 0) {
            long time = SystemClock.elapsedRealtime() / 1000;
            int a5 = 0;
            while (a5 < this.shortPollOnlines.size()) {
                long key4 = this.shortPollOnlines.keyAt(a5);
                if (((long) this.shortPollOnlines.valueAt(a5)) < time) {
                    if (this.needShortPollChannels.indexOfKey(key4) >= 0) {
                        this.shortPollOnlines.put(key4, (int) (300 + time));
                    } else {
                        this.shortPollOnlines.delete(key4);
                        a5--;
                    }
                    TLRPC.TL_messages_getOnlines req4 = new TLRPC.TL_messages_getOnlines();
                    req4.peer = getInputPeer(-key4);
                    getConnectionsManager().sendRequest(req4, new MessagesController$$ExternalSyntheticLambda206(this, key4));
                }
                a5++;
            }
        }
        if (!this.printingUsers.isEmpty() || this.lastPrintingStringCount != this.printingUsers.size()) {
            boolean updated = false;
            ArrayList<Long> dialogKeys = new ArrayList<>(this.printingUsers.keySet());
            int b4 = 0;
            while (b4 < dialogKeys.size()) {
                Long dialogKey3 = dialogKeys.get(b4);
                ConcurrentHashMap concurrentHashMap = this.printingUsers.get(dialogKey3);
                if (concurrentHashMap != null) {
                    ArrayList<Integer> threadKeys = new ArrayList<>(concurrentHashMap.keySet());
                    int c = 0;
                    while (c < threadKeys.size()) {
                        Integer threadKey = threadKeys.get(c);
                        ArrayList<PrintingUser> arr = (ArrayList) concurrentHashMap.get(threadKey);
                        if (arr != null) {
                            int a6 = 0;
                            while (a6 < arr.size()) {
                                PrintingUser user = arr.get(a6);
                                if (user.action instanceof TLRPC.TL_sendMessageGamePlayAction) {
                                    timeToRemove = 30000;
                                } else {
                                    timeToRemove = 5900;
                                }
                                int currentServerTime4 = currentServerTime3;
                                boolean updated2 = updated;
                                int b5 = b4;
                                Long dialogKey4 = dialogKey3;
                                if (user.lastTime + ((long) timeToRemove) < currentTime) {
                                    arr.remove(user);
                                    a6--;
                                    updated = true;
                                } else {
                                    updated = updated2;
                                }
                                a6++;
                                currentServerTime3 = currentServerTime4;
                                b4 = b5;
                                dialogKey3 = dialogKey4;
                            }
                            currentServerTime2 = currentServerTime3;
                            boolean z = updated;
                            b3 = b4;
                            dialogKey2 = dialogKey3;
                        } else {
                            currentServerTime2 = currentServerTime3;
                            b3 = b4;
                            dialogKey2 = dialogKey3;
                        }
                        if (arr == null || arr.isEmpty()) {
                            concurrentHashMap.remove(threadKey);
                            threadKeys.remove(c);
                            c--;
                        }
                        c++;
                        currentServerTime3 = currentServerTime2;
                        b4 = b3;
                        dialogKey3 = dialogKey2;
                    }
                    currentServerTime = currentServerTime3;
                    b = b4;
                    dialogKey = dialogKey3;
                } else {
                    currentServerTime = currentServerTime3;
                    b = b4;
                    dialogKey = dialogKey3;
                }
                if (concurrentHashMap == null || concurrentHashMap.isEmpty()) {
                    this.printingUsers.remove(dialogKey);
                    int b6 = b;
                    dialogKeys.remove(b6);
                    b2 = b6 - 1;
                } else {
                    b2 = b;
                }
                b4 = b2 + 1;
                currentServerTime3 = currentServerTime;
            }
            updatePrintingStrings();
            if (updated) {
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda292(this));
            }
        } else {
            int i = currentServerTime3;
        }
        if (Theme.selectedAutoNightType == 1 && Math.abs(currentTime - lastThemeCheckTime) >= 60) {
            AndroidUtilities.runOnUIThread(this.themeCheckRunnable);
            lastThemeCheckTime = currentTime;
        }
        if (getUserConfig().savedPasswordHash != null && Math.abs(currentTime - lastPasswordCheckTime) >= 60) {
            AndroidUtilities.runOnUIThread(this.passwordCheckRunnable);
            lastPasswordCheckTime = currentTime;
        }
        if (this.lastPushRegisterSendTime != 0 && Math.abs(SystemClock.elapsedRealtime() - this.lastPushRegisterSendTime) >= 10800000) {
            GcmPushListenerService.sendRegistrationToServer(SharedConfig.pushString);
        }
        getLocationController().update();
        m144xa5dCLASSNAME(false);
        checkTosUpdate();
    }

    /* renamed from: lambda$updateTimerProc$122$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m429x821321c3(TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            this.lastStatusUpdateTime = System.currentTimeMillis();
            this.offlineSent = false;
            this.statusSettingState = 0;
        } else {
            long j = this.lastStatusUpdateTime;
            if (j != 0) {
                this.lastStatusUpdateTime = j + 5000;
            }
        }
        this.statusRequest = 0;
    }

    /* renamed from: lambda$updateTimerProc$123$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m430x67549084(TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            this.offlineSent = true;
        } else {
            long j = this.lastStatusUpdateTime;
            if (j != 0) {
                this.lastStatusUpdateTime = j + 5000;
            }
        }
        this.statusRequest = 0;
    }

    /* renamed from: lambda$updateTimerProc$125$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m432x31d76e06(long key, TLRPC.TL_messages_getMessagesViews req, TLObject response, TLRPC.TL_error error) {
        long j = key;
        TLRPC.TL_messages_getMessagesViews tL_messages_getMessagesViews = req;
        if (response != null) {
            TLRPC.TL_messages_messageViews res = (TLRPC.TL_messages_messageViews) response;
            LongSparseArray<SparseIntArray> channelViews = new LongSparseArray<>();
            LongSparseArray<SparseIntArray> channelForwards = new LongSparseArray<>();
            LongSparseArray<SparseArray<TLRPC.MessageReplies>> channelReplies = new LongSparseArray<>();
            int a1 = 0;
            SparseIntArray views = channelViews.get(j);
            SparseIntArray forwards = channelForwards.get(j);
            SparseArray<TLRPC.MessageReplies> replies = channelReplies.get(j);
            while (a1 < tL_messages_getMessagesViews.id.size() && a1 < res.views.size()) {
                TLRPC.TL_messageViews messageViews = res.views.get(a1);
                if ((1 & messageViews.flags) != 0) {
                    if (views == null) {
                        views = new SparseIntArray();
                        channelViews.put(j, views);
                    }
                    views.put(tL_messages_getMessagesViews.id.get(a1).intValue(), messageViews.views);
                }
                if ((messageViews.flags & 2) != 0) {
                    if (forwards == null) {
                        forwards = new SparseIntArray();
                        channelForwards.put(j, forwards);
                    }
                    forwards.put(tL_messages_getMessagesViews.id.get(a1).intValue(), messageViews.forwards);
                }
                if ((messageViews.flags & 4) != 0) {
                    if (replies == null) {
                        replies = new SparseArray<>();
                        channelReplies.put(j, replies);
                    }
                    replies.put(tL_messages_getMessagesViews.id.get(a1).intValue(), messageViews.replies);
                }
                a1++;
            }
            getMessagesStorage().putUsersAndChats(res.users, res.chats, true, true);
            getMessagesStorage().putChannelViews(channelViews, channelForwards, channelReplies, false);
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda83(this, res, channelViews, channelForwards, channelReplies));
        }
    }

    /* renamed from: lambda$updateTimerProc$124$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m431x4CLASSNAMEfvar_(TLRPC.TL_messages_messageViews res, LongSparseArray channelViews, LongSparseArray channelForwards, LongSparseArray channelReplies) {
        putUsers(res.users, false);
        putChats(res.chats, false);
        getNotificationCenter().postNotificationName(NotificationCenter.didUpdateMessagesViews, channelViews, channelForwards, channelReplies, false);
    }

    /* renamed from: lambda$updateTimerProc$127$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m434xfc5a4b88(int currentServerTime) {
        int b;
        int i = currentServerTime;
        long time = SystemClock.elapsedRealtime();
        int minExpireTime = Integer.MAX_VALUE;
        int a = 0;
        int N = this.pollsToCheck.size();
        while (a < N) {
            SparseArray<MessageObject> array = this.pollsToCheck.valueAt(a);
            if (array != null) {
                int b2 = 0;
                int N2 = array.size();
                while (b2 < N2) {
                    MessageObject messageObject = array.valueAt(b2);
                    TLRPC.TL_messageMediaPoll mediaPoll = (TLRPC.TL_messageMediaPoll) messageObject.messageOwner.media;
                    int timeout = 30000;
                    boolean z = mediaPoll.poll.close_date != 0 && !mediaPoll.poll.closed;
                    boolean expired = z;
                    if (z) {
                        if (mediaPoll.poll.close_date <= i) {
                            timeout = 1000;
                        } else {
                            minExpireTime = Math.min(minExpireTime, mediaPoll.poll.close_date - i);
                        }
                    }
                    int b3 = b2;
                    boolean expired2 = expired;
                    if (Math.abs(time - messageObject.pollLastCheckTime) >= ((long) timeout)) {
                        messageObject.pollLastCheckTime = time;
                        TLRPC.TL_messages_getPollResults req = new TLRPC.TL_messages_getPollResults();
                        req.peer = getInputPeer(messageObject.getDialogId());
                        req.msg_id = messageObject.getId();
                        getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda262(this, expired2));
                    } else if (!messageObject.pollVisibleOnScreen && !expired2) {
                        array.remove(messageObject.getId());
                        N2--;
                        b = b3 - 1;
                        b2 = b + 1;
                    }
                    b = b3;
                    b2 = b + 1;
                }
                int i2 = b2;
                if (minExpireTime < 5) {
                    this.lastViewsCheckTime = Math.min(this.lastViewsCheckTime, System.currentTimeMillis() - ((long) ((5 - minExpireTime) * 1000)));
                }
                if (array.size() == 0) {
                    LongSparseArray<SparseArray<MessageObject>> longSparseArray = this.pollsToCheck;
                    longSparseArray.remove(longSparseArray.keyAt(a));
                    N--;
                    a--;
                }
            }
            a++;
        }
        this.pollsToCheckSize = this.pollsToCheck.size();
    }

    /* renamed from: lambda$updateTimerProc$126$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m433x1718dcc7(boolean expired, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            TLRPC.Updates updates = (TLRPC.Updates) response;
            if (expired) {
                for (int i = 0; i < updates.updates.size(); i++) {
                    TLRPC.Update update = updates.updates.get(i);
                    if (update instanceof TLRPC.TL_updateMessagePoll) {
                        TLRPC.TL_updateMessagePoll messagePoll = (TLRPC.TL_updateMessagePoll) update;
                        if (messagePoll.poll != null && !messagePoll.poll.closed) {
                            this.lastViewsCheckTime = System.currentTimeMillis() - 4000;
                        }
                    }
                }
            }
            processUpdates(updates, false);
        }
    }

    /* renamed from: lambda$updateTimerProc$128$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m435xe19bba49() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_STATUS));
    }

    /* renamed from: lambda$updateTimerProc$130$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m437x7a7cada0(long key, TLObject response, TLRPC.TL_error error) {
        if (response != null) {
            TLRPC.TL_chatOnlines res = (TLRPC.TL_chatOnlines) response;
            getMessagesStorage().updateChatOnlineCount(key, res.onlines);
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda348(this, key, res));
        }
    }

    /* renamed from: lambda$updateTimerProc$129$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m436xc6dd290a(long key, TLRPC.TL_chatOnlines res) {
        getNotificationCenter().postNotificationName(NotificationCenter.chatOnlineCountDidLoad, Long.valueOf(key), Integer.valueOf(res.onlines));
    }

    /* renamed from: lambda$updateTimerProc$131$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m438x5fbe1CLASSNAME() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_USER_PRINT));
    }

    private void checkTosUpdate() {
        if (this.nextTosCheckTime <= getConnectionsManager().getCurrentTime() && !this.checkingTosUpdate && getUserConfig().isClientActivated()) {
            this.checkingTosUpdate = true;
            getConnectionsManager().sendRequest(new TLRPC.TL_help_getTermsOfServiceUpdate(), new MessagesController$$ExternalSyntheticLambda148(this));
        }
    }

    /* renamed from: lambda$checkTosUpdate$133$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m151x58f7var_(TLObject response, TLRPC.TL_error error) {
        this.checkingTosUpdate = false;
        if (response instanceof TLRPC.TL_help_termsOfServiceUpdateEmpty) {
            this.nextTosCheckTime = ((TLRPC.TL_help_termsOfServiceUpdateEmpty) response).expires;
        } else if (response instanceof TLRPC.TL_help_termsOfServiceUpdate) {
            TLRPC.TL_help_termsOfServiceUpdate res = (TLRPC.TL_help_termsOfServiceUpdate) response;
            this.nextTosCheckTime = res.expires;
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda81(this, res));
        } else {
            this.nextTosCheckTime = getConnectionsManager().getCurrentTime() + 3600;
        }
        this.notificationsPreferences.edit().putInt("nextTosCheckTime", this.nextTosCheckTime).commit();
    }

    /* renamed from: lambda$checkTosUpdate$132$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m150x73b68963(TLRPC.TL_help_termsOfServiceUpdate res) {
        getNotificationCenter().postNotificationName(NotificationCenter.needShowAlert, 4, res.terms_of_service);
    }

    public void checkPromoInfo(boolean reset) {
        Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda118(this, reset));
    }

    /* access modifiers changed from: private */
    /* renamed from: checkPromoInfoInternal */
    public void m144xa5dCLASSNAME(boolean reset) {
        String str;
        if (reset && this.checkingPromoInfo) {
            this.checkingPromoInfo = false;
        }
        if ((reset || this.nextPromoInfoCheckTime <= getConnectionsManager().getCurrentTime()) && !this.checkingPromoInfo) {
            if (this.checkingPromoInfoRequestId != 0) {
                getConnectionsManager().cancelRequest(this.checkingPromoInfoRequestId, true);
                this.checkingPromoInfoRequestId = 0;
            }
            SharedPreferences preferences = getGlobalMainSettings();
            boolean z = preferences.getBoolean("proxy_enabled", false);
            String proxyAddress = preferences.getString("proxy_ip", "");
            String proxySecret = preferences.getString("proxy_secret", "");
            int removeCurrent = 0;
            if (!(this.promoDialogId == 0 || this.promoDialogType != PROMO_TYPE_PROXY || (str = this.proxyDialogAddress) == null)) {
                if (!str.equals(proxyAddress + proxySecret)) {
                    removeCurrent = 1;
                }
            }
            this.lastCheckPromoId++;
            this.checkingPromoInfo = true;
            this.checkingPromoInfoRequestId = getConnectionsManager().sendRequest(new TLRPC.TL_help_getPromoData(), new MessagesController$$ExternalSyntheticLambda187(this, this.lastCheckPromoId, proxyAddress, proxySecret));
            if (removeCurrent != 0) {
                this.promoDialogId = 0;
                this.proxyDialogAddress = null;
                this.nextPromoInfoCheckTime = getConnectionsManager().getCurrentTime() + 3600;
                getGlobalMainSettings().edit().putLong("proxy_dialog", this.promoDialogId).remove("proxyDialogAddress").putInt("nextPromoInfoCheckTime", this.nextPromoInfoCheckTime).commit();
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda293(this));
            }
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:38:0x00ae, code lost:
        r12 = r1;
     */
    /* renamed from: lambda$checkPromoInfoInternal$139$org-telegram-messenger-MessagesController  reason: not valid java name */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void m149x528f9be3(int r19, java.lang.String r20, java.lang.String r21, org.telegram.tgnet.TLObject r22, org.telegram.tgnet.TLRPC.TL_error r23) {
        /*
            r18 = this;
            r6 = r18
            r7 = r22
            int r0 = r6.lastCheckPromoId
            r8 = r19
            if (r8 == r0) goto L_0x000b
            return
        L_0x000b:
            r0 = 0
            boolean r1 = r7 instanceof org.telegram.tgnet.TLRPC.TL_help_promoDataEmpty
            java.lang.String r9 = "nextPromoInfoCheckTime"
            java.lang.String r10 = "proxyDialogAddress"
            java.lang.String r11 = "proxy_dialog"
            r12 = 0
            if (r1 == 0) goto L_0x0022
            r1 = r7
            org.telegram.tgnet.TLRPC$TL_help_promoDataEmpty r1 = (org.telegram.tgnet.TLRPC.TL_help_promoDataEmpty) r1
            int r2 = r1.expires
            r6.nextPromoInfoCheckTime = r2
            r0 = 1
            goto L_0x014e
        L_0x0022:
            boolean r1 = r7 instanceof org.telegram.tgnet.TLRPC.TL_help_promoData
            if (r1 == 0) goto L_0x0140
            r14 = r7
            org.telegram.tgnet.TLRPC$TL_help_promoData r14 = (org.telegram.tgnet.TLRPC.TL_help_promoData) r14
            org.telegram.tgnet.TLRPC$Peer r1 = r14.peer
            long r1 = r1.user_id
            int r3 = (r1 > r12 ? 1 : (r1 == r12 ? 0 : -1))
            if (r3 == 0) goto L_0x0039
            org.telegram.tgnet.TLRPC$Peer r1 = r14.peer
            long r1 = r1.user_id
            r15 = r0
            r12 = r1
            goto L_0x00af
        L_0x0039:
            org.telegram.tgnet.TLRPC$Peer r1 = r14.peer
            long r1 = r1.chat_id
            int r3 = (r1 > r12 ? 1 : (r1 == r12 ? 0 : -1))
            if (r3 == 0) goto L_0x007e
            org.telegram.tgnet.TLRPC$Peer r1 = r14.peer
            long r1 = r1.chat_id
            long r1 = -r1
            r3 = 0
        L_0x0047:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r4 = r14.chats
            int r4 = r4.size()
            if (r3 >= r4) goto L_0x0076
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r4 = r14.chats
            java.lang.Object r4 = r4.get(r3)
            org.telegram.tgnet.TLRPC$Chat r4 = (org.telegram.tgnet.TLRPC.Chat) r4
            long r12 = r4.id
            org.telegram.tgnet.TLRPC$Peer r5 = r14.peer
            r15 = r0
            r16 = r1
            long r0 = r5.chat_id
            int r2 = (r12 > r0 ? 1 : (r12 == r0 ? 0 : -1))
            if (r2 != 0) goto L_0x006e
            boolean r0 = r4.kicked
            if (r0 != 0) goto L_0x006c
            boolean r0 = r4.restricted
            if (r0 == 0) goto L_0x0079
        L_0x006c:
            r0 = 1
            goto L_0x007a
        L_0x006e:
            int r3 = r3 + 1
            r0 = r15
            r1 = r16
            r12 = 0
            goto L_0x0047
        L_0x0076:
            r15 = r0
            r16 = r1
        L_0x0079:
            r0 = r15
        L_0x007a:
            r15 = r0
            r12 = r16
            goto L_0x00af
        L_0x007e:
            r15 = r0
            org.telegram.tgnet.TLRPC$Peer r0 = r14.peer
            long r0 = r0.channel_id
            long r1 = -r0
            r0 = 0
        L_0x0085:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r3 = r14.chats
            int r3 = r3.size()
            if (r0 >= r3) goto L_0x00ae
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r3 = r14.chats
            java.lang.Object r3 = r3.get(r0)
            org.telegram.tgnet.TLRPC$Chat r3 = (org.telegram.tgnet.TLRPC.Chat) r3
            long r4 = r3.id
            org.telegram.tgnet.TLRPC$Peer r12 = r14.peer
            long r12 = r12.channel_id
            int r16 = (r4 > r12 ? 1 : (r4 == r12 ? 0 : -1))
            if (r16 != 0) goto L_0x00ab
            boolean r4 = r3.kicked
            if (r4 != 0) goto L_0x00a7
            boolean r4 = r3.restricted
            if (r4 == 0) goto L_0x00ae
        L_0x00a7:
            r4 = 1
            r12 = r1
            r15 = r4
            goto L_0x00af
        L_0x00ab:
            int r0 = r0 + 1
            goto L_0x0085
        L_0x00ae:
            r12 = r1
        L_0x00af:
            r6.promoDialogId = r12
            boolean r0 = r14.proxy
            if (r0 == 0) goto L_0x00ba
            int r0 = PROMO_TYPE_PROXY
            r6.promoDialogType = r0
            goto L_0x00cf
        L_0x00ba:
            java.lang.String r0 = r14.psa_type
            boolean r0 = android.text.TextUtils.isEmpty(r0)
            if (r0 != 0) goto L_0x00cb
            int r0 = PROMO_TYPE_PSA
            r6.promoDialogType = r0
            java.lang.String r0 = r14.psa_type
            r6.promoPsaType = r0
            goto L_0x00cf
        L_0x00cb:
            int r0 = PROMO_TYPE_OTHER
            r6.promoDialogType = r0
        L_0x00cf:
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r5 = r20
            r0.append(r5)
            r4 = r21
            r0.append(r4)
            java.lang.String r0 = r0.toString()
            r6.proxyDialogAddress = r0
            java.lang.String r0 = r14.psa_message
            r6.promoPsaMessage = r0
            int r0 = r14.expires
            r6.nextPromoInfoCheckTime = r0
            android.content.SharedPreferences r0 = getGlobalMainSettings()
            android.content.SharedPreferences$Editor r2 = r0.edit()
            long r0 = r6.promoDialogId
            r2.putLong(r11, r0)
            java.lang.String r0 = r6.proxyDialogAddress
            r2.putString(r10, r0)
            int r0 = r6.promoDialogType
            java.lang.String r1 = "promo_dialog_type"
            r2.putInt(r1, r0)
            java.lang.String r0 = r6.promoPsaMessage
            java.lang.String r1 = "promo_psa_message"
            if (r0 == 0) goto L_0x010f
            r2.putString(r1, r0)
            goto L_0x0112
        L_0x010f:
            r2.remove(r1)
        L_0x0112:
            java.lang.String r0 = r6.promoPsaType
            java.lang.String r1 = "promo_psa_type"
            if (r0 == 0) goto L_0x011c
            r2.putString(r1, r0)
            goto L_0x011f
        L_0x011c:
            r2.remove(r1)
        L_0x011f:
            int r0 = r6.nextPromoInfoCheckTime
            r2.putInt(r9, r0)
            r2.commit()
            if (r15 != 0) goto L_0x013c
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda349 r16 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda349
            r0 = r16
            r1 = r18
            r17 = r2
            r2 = r12
            r4 = r14
            r5 = r19
            r0.<init>(r1, r2, r4, r5)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r16)
            goto L_0x013e
        L_0x013c:
            r17 = r2
        L_0x013e:
            r0 = r15
            goto L_0x014e
        L_0x0140:
            r15 = r0
            org.telegram.tgnet.ConnectionsManager r0 = r18.getConnectionsManager()
            int r0 = r0.getCurrentTime()
            int r0 = r0 + 3600
            r6.nextPromoInfoCheckTime = r0
            r0 = 1
        L_0x014e:
            if (r0 == 0) goto L_0x017c
            r1 = 0
            r6.promoDialogId = r1
            android.content.SharedPreferences r1 = getGlobalMainSettings()
            android.content.SharedPreferences$Editor r1 = r1.edit()
            long r2 = r6.promoDialogId
            android.content.SharedPreferences$Editor r1 = r1.putLong(r11, r2)
            android.content.SharedPreferences$Editor r1 = r1.remove(r10)
            int r2 = r6.nextPromoInfoCheckTime
            android.content.SharedPreferences$Editor r1 = r1.putInt(r9, r2)
            r1.commit()
            r1 = 0
            r6.checkingPromoInfoRequestId = r1
            r6.checkingPromoInfo = r1
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda293 r1 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda293
            r1.<init>(r6)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r1)
        L_0x017c:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.m149x528f9be3(int, java.lang.String, java.lang.String, org.telegram.tgnet.TLObject, org.telegram.tgnet.TLRPC$TL_error):void");
    }

    /* renamed from: lambda$checkPromoInfoInternal$138$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m148x6d4e2d22(long did, TLRPC.TL_help_promoData res, int checkPromoId) {
        long j = did;
        TLRPC.TL_help_promoData tL_help_promoData = res;
        TLRPC.Dialog dialog = this.promoDialog;
        if (!(dialog == null || j == dialog.id)) {
            removePromoDialog();
        }
        TLRPC.Dialog dialog2 = this.dialogs_dict.get(j);
        this.promoDialog = dialog2;
        if (dialog2 != null) {
            this.checkingPromoInfo = false;
            sortDialogs((LongSparseArray<TLRPC.Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, true);
            return;
        }
        LongSparseArray longSparseArray = new LongSparseArray();
        LongSparseArray longSparseArray2 = new LongSparseArray();
        for (int a = 0; a < tL_help_promoData.users.size(); a++) {
            TLRPC.User u = tL_help_promoData.users.get(a);
            longSparseArray.put(u.id, u);
        }
        for (int a2 = 0; a2 < tL_help_promoData.chats.size(); a2++) {
            TLRPC.Chat c = tL_help_promoData.chats.get(a2);
            longSparseArray2.put(c.id, c);
        }
        TLRPC.TL_messages_getPeerDialogs req1 = new TLRPC.TL_messages_getPeerDialogs();
        TLRPC.TL_inputDialogPeer peer = new TLRPC.TL_inputDialogPeer();
        if (tL_help_promoData.peer.user_id != 0) {
            peer.peer = new TLRPC.TL_inputPeerUser();
            peer.peer.user_id = tL_help_promoData.peer.user_id;
            TLRPC.User user = (TLRPC.User) longSparseArray.get(tL_help_promoData.peer.user_id);
            if (user != null) {
                peer.peer.access_hash = user.access_hash;
            }
        } else if (tL_help_promoData.peer.chat_id != 0) {
            peer.peer = new TLRPC.TL_inputPeerChat();
            peer.peer.chat_id = tL_help_promoData.peer.chat_id;
            TLRPC.Chat chat = (TLRPC.Chat) longSparseArray2.get(tL_help_promoData.peer.chat_id);
            if (chat != null) {
                peer.peer.access_hash = chat.access_hash;
            }
        } else {
            peer.peer = new TLRPC.TL_inputPeerChannel();
            peer.peer.channel_id = tL_help_promoData.peer.channel_id;
            TLRPC.Chat chat2 = (TLRPC.Chat) longSparseArray2.get(tL_help_promoData.peer.channel_id);
            if (chat2 != null) {
                peer.peer.access_hash = chat2.access_hash;
            }
        }
        req1.peers.add(peer);
        this.checkingPromoInfoRequestId = getConnectionsManager().sendRequest(req1, new MessagesController$$ExternalSyntheticLambda190(this, checkPromoId, res, did));
    }

    /* renamed from: lambda$checkPromoInfoInternal$137$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m147x880cbe61(int checkPromoId, TLRPC.TL_help_promoData res, long did, TLObject response1, TLRPC.TL_error error1) {
        TLRPC.TL_help_promoData tL_help_promoData = res;
        if (checkPromoId == this.lastCheckPromoId) {
            this.checkingPromoInfoRequestId = 0;
            TLRPC.TL_messages_peerDialogs res2 = (TLRPC.TL_messages_peerDialogs) response1;
            if (res2 == null || res2.dialogs.isEmpty()) {
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda22(this));
            } else {
                getMessagesStorage().putUsersAndChats(tL_help_promoData.users, tL_help_promoData.chats, true, true);
                TLRPC.TL_messages_dialogs dialogs = new TLRPC.TL_messages_dialogs();
                dialogs.chats = res2.chats;
                dialogs.users = res2.users;
                dialogs.dialogs = res2.dialogs;
                dialogs.messages = res2.messages;
                getMessagesStorage().putDialogs(dialogs, 2);
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda80(this, res, res2, did));
            }
            this.checkingPromoInfo = false;
        }
    }

    /* renamed from: lambda$checkPromoInfoInternal$135$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m145xbd89e0df(TLRPC.TL_help_promoData res, TLRPC.TL_messages_peerDialogs res2, long did) {
        TLRPC.TL_help_promoData tL_help_promoData = res;
        TLRPC.TL_messages_peerDialogs tL_messages_peerDialogs = res2;
        long j = did;
        putUsers(tL_help_promoData.users, false);
        putChats(tL_help_promoData.chats, false);
        putUsers(tL_messages_peerDialogs.users, false);
        putChats(tL_messages_peerDialogs.chats, false);
        TLRPC.Dialog dialog = this.promoDialog;
        if (dialog != null) {
            if (dialog.id < 0) {
                TLRPC.Chat chat = getChat(Long.valueOf(-this.promoDialog.id));
                if (ChatObject.isNotInChat(chat) || chat.restricted) {
                    removeDialog(this.promoDialog);
                }
            } else {
                removeDialog(this.promoDialog);
            }
        }
        TLRPC.Dialog dialog2 = tL_messages_peerDialogs.dialogs.get(0);
        this.promoDialog = dialog2;
        dialog2.id = j;
        this.promoDialog.folder_id = 0;
        if (DialogObject.isChannel(this.promoDialog)) {
            this.channelsPts.put(-this.promoDialog.id, this.promoDialog.pts);
        }
        Integer value = this.dialogs_read_inbox_max.get(Long.valueOf(this.promoDialog.id));
        if (value == null) {
            value = 0;
        }
        this.dialogs_read_inbox_max.put(Long.valueOf(this.promoDialog.id), Integer.valueOf(Math.max(value.intValue(), this.promoDialog.read_inbox_max_id)));
        Integer value2 = this.dialogs_read_outbox_max.get(Long.valueOf(this.promoDialog.id));
        if (value2 == null) {
            value2 = 0;
        }
        this.dialogs_read_outbox_max.put(Long.valueOf(this.promoDialog.id), Integer.valueOf(Math.max(value2.intValue(), this.promoDialog.read_outbox_max_id)));
        this.dialogs_dict.put(j, this.promoDialog);
        if (!tL_messages_peerDialogs.messages.isEmpty()) {
            LongSparseArray<TLRPC.User> usersDict1 = new LongSparseArray<>();
            LongSparseArray<TLRPC.Chat> chatsDict1 = new LongSparseArray<>();
            for (int a = 0; a < tL_messages_peerDialogs.users.size(); a++) {
                TLRPC.User u = tL_messages_peerDialogs.users.get(a);
                usersDict1.put(u.id, u);
            }
            for (int a2 = 0; a2 < tL_messages_peerDialogs.chats.size(); a2++) {
                TLRPC.Chat c = tL_messages_peerDialogs.chats.get(a2);
                chatsDict1.put(c.id, c);
            }
            MessageObject messageObject = new MessageObject(this.currentAccount, tL_messages_peerDialogs.messages.get(0), usersDict1, chatsDict1, false, true);
            this.dialogMessage.put(j, messageObject);
            if (this.promoDialog.last_message_date == 0) {
                this.promoDialog.last_message_date = messageObject.messageOwner.date;
            }
        }
        sortDialogs((LongSparseArray<TLRPC.Chat>) null);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, true);
    }

    /* renamed from: lambda$checkPromoInfoInternal$136$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m146xa2cb4fa0() {
        TLRPC.Dialog dialog = this.promoDialog;
        if (dialog != null) {
            if (dialog.id < 0) {
                TLRPC.Chat chat = getChat(Long.valueOf(-this.promoDialog.id));
                if (ChatObject.isNotInChat(chat) || chat.restricted) {
                    removeDialog(this.promoDialog);
                }
            } else {
                removeDialog(this.promoDialog);
            }
            this.promoDialog = null;
            sortDialogs((LongSparseArray<TLRPC.Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
    }

    /* access modifiers changed from: private */
    public void removePromoDialog() {
        TLRPC.Dialog dialog = this.promoDialog;
        if (dialog != null) {
            if (dialog.id < 0) {
                TLRPC.Chat chat = getChat(Long.valueOf(-this.promoDialog.id));
                if (ChatObject.isNotInChat(chat) || chat.restricted) {
                    removeDialog(this.promoDialog);
                }
            } else {
                removeDialog(this.promoDialog);
            }
            this.promoDialog = null;
            sortDialogs((LongSparseArray<TLRPC.Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
    }

    public boolean isPromoDialog(long did, boolean checkLeft) {
        TLRPC.Dialog dialog = this.promoDialog;
        return dialog != null && dialog.id == did && (!checkLeft || this.isLeftPromoChannel);
    }

    private String getUserNameForTyping(TLRPC.User user) {
        if (user == null) {
            return "";
        }
        if (user.first_name != null && user.first_name.length() > 0) {
            return user.first_name;
        }
        if (user.last_name == null || user.last_name.length() <= 0) {
            return "";
        }
        return user.last_name;
    }

    private void updatePrintingStrings() {
        Iterator it;
        int i;
        String printingString;
        Iterator it2;
        LongSparseArray<SparseArray<CharSequence>> newStrings = new LongSparseArray<>();
        LongSparseArray<SparseArray<Integer>> newTypes = new LongSparseArray<>();
        Iterator<Map.Entry<Long, ConcurrentHashMap<Integer, ArrayList<PrintingUser>>>> it3 = this.printingUsers.entrySet().iterator();
        while (it3.hasNext()) {
            Map.Entry<Long, java.util.concurrent.ConcurrentHashMap<Integer, ArrayList<PrintingUser>>> dialogEntry = it3.next();
            Long key = dialogEntry.getKey();
            boolean isEncryptedChat = DialogObject.isEncryptedDialog(key.longValue());
            ConcurrentHashMap concurrentHashMap = (ConcurrentHashMap) dialogEntry.getValue();
            Iterator it4 = concurrentHashMap.entrySet().iterator();
            while (it4.hasNext()) {
                Map.Entry<Integer, ArrayList<PrintingUser>> threadEntry = (Map.Entry) it4.next();
                Integer threadId = threadEntry.getKey();
                ArrayList<PrintingUser> arr = threadEntry.getValue();
                SparseArray sparseArray = new SparseArray();
                SparseArray sparseArray2 = new SparseArray();
                Iterator<Map.Entry<Long, ConcurrentHashMap<Integer, ArrayList<PrintingUser>>>> it5 = it3;
                Map.Entry<Long, java.util.concurrent.ConcurrentHashMap<Integer, ArrayList<PrintingUser>>> dialogEntry2 = dialogEntry;
                newStrings.put(key.longValue(), sparseArray);
                newTypes.put(key.longValue(), sparseArray2);
                ConcurrentHashMap concurrentHashMap2 = concurrentHashMap;
                if (key.longValue() > 0 || isEncryptedChat) {
                    it2 = it4;
                    Map.Entry<Integer, ArrayList<PrintingUser>> entry = threadEntry;
                    i = 0;
                } else if (arr.size() == 1) {
                    it2 = it4;
                    Map.Entry<Integer, ArrayList<PrintingUser>> entry2 = threadEntry;
                    i = 0;
                } else {
                    int count = 0;
                    StringBuilder label = new StringBuilder();
                    Iterator<PrintingUser> it6 = arr.iterator();
                    while (true) {
                        if (!it6.hasNext()) {
                            it = it4;
                            Map.Entry<Integer, ArrayList<PrintingUser>> entry3 = threadEntry;
                            break;
                        }
                        it = it4;
                        Map.Entry<Integer, ArrayList<PrintingUser>> threadEntry2 = threadEntry;
                        TLRPC.User user = getUser(Long.valueOf(it6.next().userId));
                        if (user != null) {
                            if (label.length() != 0) {
                                label.append(", ");
                            }
                            label.append(getUserNameForTyping(user));
                            count++;
                        }
                        if (count == 2) {
                            break;
                        }
                        it4 = it;
                        threadEntry = threadEntry2;
                    }
                    if (label.length() != 0) {
                        if (count == 1) {
                            sparseArray.put(threadId.intValue(), LocaleController.formatString("IsTypingGroup", NUM, label.toString()));
                        } else if (arr.size() > 2) {
                            String plural = LocaleController.getPluralString("AndMoreTypingGroup", arr.size() - 2);
                            try {
                                sparseArray.put(threadId.intValue(), String.format(plural, new Object[]{label.toString(), Integer.valueOf(arr.size() - 2)}));
                            } catch (Exception e) {
                                sparseArray.put(threadId.intValue(), "LOC_ERR: AndMoreTypingGroup");
                            }
                        } else {
                            sparseArray.put(threadId.intValue(), LocaleController.formatString("AreTypingGroup", NUM, label.toString()));
                        }
                        sparseArray2.put(threadId.intValue(), 0);
                    }
                    it3 = it5;
                    dialogEntry = dialogEntry2;
                    concurrentHashMap = concurrentHashMap2;
                    it4 = it;
                }
                PrintingUser pu = arr.get(i);
                TLRPC.User user2 = getUser(Long.valueOf(pu.userId));
                if (user2 == null) {
                    it3 = it5;
                    dialogEntry = dialogEntry2;
                    concurrentHashMap = concurrentHashMap2;
                    it4 = it;
                } else {
                    if (pu.action instanceof TLRPC.TL_sendMessageRecordAudioAction) {
                        if (key.longValue() >= 0 || isEncryptedChat) {
                            sparseArray.put(threadId.intValue(), LocaleController.getString("RecordingAudio", NUM));
                        } else {
                            sparseArray.put(threadId.intValue(), LocaleController.formatString("IsRecordingAudio", NUM, getUserNameForTyping(user2)));
                        }
                        sparseArray2.put(threadId.intValue(), 1);
                    } else if (pu.action instanceof TLRPC.TL_sendMessageRecordRoundAction) {
                        if (key.longValue() >= 0 || isEncryptedChat) {
                            sparseArray.put(threadId.intValue(), LocaleController.getString("RecordingRound", NUM));
                        } else {
                            sparseArray.put(threadId.intValue(), LocaleController.formatString("IsRecordingRound", NUM, getUserNameForTyping(user2)));
                        }
                        sparseArray2.put(threadId.intValue(), 4);
                    } else if (pu.action instanceof TLRPC.TL_sendMessageUploadRoundAction) {
                        if (key.longValue() >= 0 || isEncryptedChat) {
                            sparseArray.put(threadId.intValue(), LocaleController.getString("SendingVideoStatus", NUM));
                        } else {
                            sparseArray.put(threadId.intValue(), LocaleController.formatString("IsSendingVideo", NUM, getUserNameForTyping(user2)));
                        }
                        sparseArray2.put(threadId.intValue(), 4);
                    } else if (pu.action instanceof TLRPC.TL_sendMessageUploadAudioAction) {
                        if (key.longValue() >= 0 || isEncryptedChat) {
                            sparseArray.put(threadId.intValue(), LocaleController.getString("SendingAudio", NUM));
                        } else {
                            sparseArray.put(threadId.intValue(), LocaleController.formatString("IsSendingAudio", NUM, getUserNameForTyping(user2)));
                        }
                        sparseArray2.put(threadId.intValue(), 2);
                    } else if (pu.action instanceof TLRPC.TL_sendMessageUploadVideoAction) {
                        if (key.longValue() >= 0 || isEncryptedChat) {
                            sparseArray.put(threadId.intValue(), LocaleController.getString("SendingVideoStatus", NUM));
                        } else {
                            sparseArray.put(threadId.intValue(), LocaleController.formatString("IsSendingVideo", NUM, getUserNameForTyping(user2)));
                        }
                        sparseArray2.put(threadId.intValue(), 2);
                    } else if (pu.action instanceof TLRPC.TL_sendMessageRecordVideoAction) {
                        if (key.longValue() >= 0 || isEncryptedChat) {
                            sparseArray.put(threadId.intValue(), LocaleController.getString("RecordingVideoStatus", NUM));
                        } else {
                            sparseArray.put(threadId.intValue(), LocaleController.formatString("IsRecordingVideo", NUM, getUserNameForTyping(user2)));
                        }
                        sparseArray2.put(threadId.intValue(), 2);
                    } else if (pu.action instanceof TLRPC.TL_sendMessageUploadDocumentAction) {
                        if (key.longValue() >= 0 || isEncryptedChat) {
                            sparseArray.put(threadId.intValue(), LocaleController.getString("SendingFile", NUM));
                        } else {
                            sparseArray.put(threadId.intValue(), LocaleController.formatString("IsSendingFile", NUM, getUserNameForTyping(user2)));
                        }
                        sparseArray2.put(threadId.intValue(), 2);
                    } else if (pu.action instanceof TLRPC.TL_sendMessageUploadPhotoAction) {
                        if (key.longValue() >= 0 || isEncryptedChat) {
                            sparseArray.put(threadId.intValue(), LocaleController.getString("SendingPhoto", NUM));
                        } else {
                            sparseArray.put(threadId.intValue(), LocaleController.formatString("IsSendingPhoto", NUM, getUserNameForTyping(user2)));
                        }
                        sparseArray2.put(threadId.intValue(), 2);
                    } else if (pu.action instanceof TLRPC.TL_sendMessageGamePlayAction) {
                        if (key.longValue() >= 0 || isEncryptedChat) {
                            sparseArray.put(threadId.intValue(), LocaleController.getString("SendingGame", NUM));
                        } else {
                            sparseArray.put(threadId.intValue(), LocaleController.formatString("IsSendingGame", NUM, getUserNameForTyping(user2)));
                        }
                        sparseArray2.put(threadId.intValue(), 3);
                    } else if (pu.action instanceof TLRPC.TL_sendMessageGeoLocationAction) {
                        if (key.longValue() >= 0 || isEncryptedChat) {
                            sparseArray.put(threadId.intValue(), LocaleController.getString("SelectingLocation", NUM));
                        } else {
                            sparseArray.put(threadId.intValue(), LocaleController.formatString("IsSelectingLocation", NUM, getUserNameForTyping(user2)));
                        }
                        sparseArray2.put(threadId.intValue(), 0);
                    } else if (pu.action instanceof TLRPC.TL_sendMessageChooseContactAction) {
                        if (key.longValue() >= 0 || isEncryptedChat) {
                            sparseArray.put(threadId.intValue(), LocaleController.getString("SelectingContact", NUM));
                        } else {
                            sparseArray.put(threadId.intValue(), LocaleController.formatString("IsSelectingContact", NUM, getUserNameForTyping(user2)));
                        }
                        sparseArray2.put(threadId.intValue(), 0);
                    } else if (pu.action instanceof TLRPC.TL_sendMessageEmojiInteractionSeen) {
                        String emoji = ((TLRPC.TL_sendMessageEmojiInteractionSeen) pu.action).emoticon;
                        if (key.longValue() >= 0 || isEncryptedChat) {
                            printingString = LocaleController.formatString("EnjoyngAnimations", NUM, emoji);
                        } else {
                            printingString = LocaleController.formatString("IsEnjoyngAnimations", NUM, getUserNameForTyping(user2), emoji);
                        }
                        sparseArray.put(threadId.intValue(), printingString);
                        sparseArray2.put(threadId.intValue(), 5);
                    } else if (pu.action instanceof TLRPC.TL_sendMessageChooseStickerAction) {
                        if (key.longValue() >= 0 || isEncryptedChat) {
                            sparseArray.put(threadId.intValue(), LocaleController.getString("ChoosingSticker", NUM));
                        } else {
                            sparseArray.put(threadId.intValue(), LocaleController.formatString("IsChoosingSticker", NUM, getUserNameForTyping(user2)));
                        }
                        sparseArray2.put(threadId.intValue(), 5);
                    } else {
                        if (key.longValue() >= 0 || isEncryptedChat) {
                            sparseArray.put(threadId.intValue(), LocaleController.getString("Typing", NUM));
                        } else {
                            sparseArray.put(threadId.intValue(), LocaleController.formatString("IsTypingGroup", NUM, getUserNameForTyping(user2)));
                        }
                        sparseArray2.put(threadId.intValue(), 0);
                    }
                    it3 = it5;
                    dialogEntry = dialogEntry2;
                    concurrentHashMap = concurrentHashMap2;
                    it4 = it;
                }
            }
            Iterator<Map.Entry<Long, ConcurrentHashMap<Integer, ArrayList<PrintingUser>>>> it7 = it3;
            Map.Entry<Long, java.util.concurrent.ConcurrentHashMap<Integer, ArrayList<PrintingUser>>> entry4 = dialogEntry;
            ConcurrentHashMap concurrentHashMap3 = concurrentHashMap;
        }
        this.lastPrintingStringCount = newStrings.size();
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda1(this, newStrings, newTypes));
    }

    /* renamed from: lambda$updatePrintingStrings$140$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m428x3f8a7e71(LongSparseArray newStrings, LongSparseArray newTypes) {
        this.printingStrings = newStrings;
        this.printingStringsTypes = newTypes;
    }

    /* JADX WARNING: Code restructure failed: missing block: B:5:0x000c, code lost:
        r0 = r0[r4];
     */
    /* renamed from: cancelTyping */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void m387lambda$sendTyping$143$orgtelegrammessengerMessagesController(int r4, long r5, int r7) {
        /*
            r3 = this;
            if (r4 < 0) goto L_0x0024
            androidx.collection.LongSparseArray<android.util.SparseArray<java.lang.Boolean>>[] r0 = r3.sendingTypings
            int r1 = r0.length
            if (r4 >= r1) goto L_0x0024
            r1 = r0[r4]
            if (r1 != 0) goto L_0x000c
            goto L_0x0024
        L_0x000c:
            r0 = r0[r4]
            java.lang.Object r1 = r0.get(r5)
            android.util.SparseArray r1 = (android.util.SparseArray) r1
            if (r1 != 0) goto L_0x0017
            return
        L_0x0017:
            r1.remove(r7)
            int r2 = r1.size()
            if (r2 != 0) goto L_0x0023
            r0.remove(r5)
        L_0x0023:
            return
        L_0x0024:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.m387lambda$sendTyping$143$orgtelegrammessengerMessagesController(int, long, int):void");
    }

    public boolean sendTyping(long dialogId, int threadMsgId, int action, int classGuid) {
        return sendTyping(dialogId, threadMsgId, action, (String) null, classGuid);
    }

    public boolean sendTyping(long dialogId, int threadMsgId, int action, String emojicon, int classGuid) {
        LongSparseArray<SparseArray<Boolean>> dialogs;
        SparseArray<Boolean> threads;
        TLRPC.Chat chat;
        long j = dialogId;
        int i = threadMsgId;
        int i2 = action;
        int i3 = classGuid;
        if (i2 < 0 || i2 >= this.sendingTypings.length || j == 0) {
            return false;
        }
        if (j >= 0) {
            TLRPC.User user = getUser(Long.valueOf(dialogId));
            if (user != null) {
                if (user.id == getUserConfig().getClientUserId()) {
                    return false;
                }
                if (!(user.status == null || user.status.expires == -100 || this.onlinePrivacy.containsKey(Long.valueOf(user.id)))) {
                    if (user.status.expires <= getConnectionsManager().getCurrentTime() - 30) {
                        return false;
                    }
                }
            }
        } else if (ChatObject.getSendAsPeerId(getChat(Long.valueOf(-j)), getChatFull(-j)) != UserConfig.getInstance(UserConfig.selectedAccount).getClientUserId()) {
            return false;
        }
        LongSparseArray<SparseArray<Boolean>>[] longSparseArrayArr = this.sendingTypings;
        LongSparseArray<SparseArray<Boolean>> dialogs2 = longSparseArrayArr[i2];
        if (dialogs2 == null) {
            LongSparseArray<SparseArray<Boolean>> dialogs3 = new LongSparseArray<>();
            longSparseArrayArr[i2] = dialogs3;
            dialogs = dialogs3;
        } else {
            dialogs = dialogs2;
        }
        SparseArray<Boolean> threads2 = dialogs.get(j);
        if (threads2 == null) {
            SparseArray<Boolean> threads3 = new SparseArray<>();
            dialogs.put(j, threads3);
            threads = threads3;
        } else {
            threads = threads2;
        }
        if (threads.get(i) != null) {
            return false;
        }
        if (!DialogObject.isEncryptedDialog(dialogId)) {
            TLRPC.TL_messages_setTyping req = new TLRPC.TL_messages_setTyping();
            if (i != 0) {
                req.top_msg_id = i;
                req.flags |= 1;
            }
            req.peer = getInputPeer(dialogId);
            if (((req.peer instanceof TLRPC.TL_inputPeerChannel) && ((chat = getChat(Long.valueOf(req.peer.channel_id))) == null || !chat.megagroup)) || req.peer == null) {
                return false;
            }
            if (i2 == 0) {
                req.action = new TLRPC.TL_sendMessageTypingAction();
                String str = emojicon;
            } else if (i2 == 1) {
                req.action = new TLRPC.TL_sendMessageRecordAudioAction();
                String str2 = emojicon;
            } else if (i2 == 2) {
                req.action = new TLRPC.TL_sendMessageCancelAction();
                String str3 = emojicon;
            } else if (i2 == 3) {
                req.action = new TLRPC.TL_sendMessageUploadDocumentAction();
                String str4 = emojicon;
            } else if (i2 == 4) {
                req.action = new TLRPC.TL_sendMessageUploadPhotoAction();
                String str5 = emojicon;
            } else if (i2 == 5) {
                req.action = new TLRPC.TL_sendMessageUploadVideoAction();
                String str6 = emojicon;
            } else if (i2 == 6) {
                req.action = new TLRPC.TL_sendMessageGamePlayAction();
                String str7 = emojicon;
            } else if (i2 == 7) {
                req.action = new TLRPC.TL_sendMessageRecordRoundAction();
                String str8 = emojicon;
            } else if (i2 == 8) {
                req.action = new TLRPC.TL_sendMessageUploadRoundAction();
                String str9 = emojicon;
            } else if (i2 == 9) {
                req.action = new TLRPC.TL_sendMessageUploadAudioAction();
                String str10 = emojicon;
            } else if (i2 == 10) {
                req.action = new TLRPC.TL_sendMessageChooseStickerAction();
                String str11 = emojicon;
            } else if (i2 == 11) {
                TLRPC.TL_sendMessageEmojiInteractionSeen interactionSeen = new TLRPC.TL_sendMessageEmojiInteractionSeen();
                interactionSeen.emoticon = emojicon;
                req.action = interactionSeen;
            } else {
                String str12 = emojicon;
            }
            threads.put(i, true);
            MessagesController$$ExternalSyntheticLambda185 messagesController$$ExternalSyntheticLambda185 = r0;
            MessagesController$$ExternalSyntheticLambda185 messagesController$$ExternalSyntheticLambda1852 = new MessagesController$$ExternalSyntheticLambda185(this, action, dialogId, threadMsgId);
            int reqId = getConnectionsManager().sendRequest(req, messagesController$$ExternalSyntheticLambda185, 2);
            if (i3 == 0) {
                return true;
            }
            getConnectionsManager().bindRequestToGuid(reqId, i3);
            return true;
        } else if (i2 != 0) {
            return false;
        } else {
            TLRPC.EncryptedChat chat2 = getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(dialogId)));
            if (chat2.auth_key == null || chat2.auth_key.length <= 1 || !(chat2 instanceof TLRPC.TL_encryptedChat)) {
                return true;
            }
            TLRPC.TL_messages_setEncryptedTyping req2 = new TLRPC.TL_messages_setEncryptedTyping();
            req2.peer = new TLRPC.TL_inputEncryptedChat();
            req2.peer.chat_id = chat2.id;
            req2.peer.access_hash = chat2.access_hash;
            req2.typing = true;
            threads.put(i, true);
            int reqId2 = getConnectionsManager().sendRequest(req2, new MessagesController$$ExternalSyntheticLambda186(this, action, dialogId, threadMsgId), 2);
            if (i3 == 0) {
                return true;
            }
            getConnectionsManager().bindRequestToGuid(reqId2, i3);
            return true;
        }
    }

    /* renamed from: lambda$sendTyping$142$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m386lambda$sendTyping$142$orgtelegrammessengerMessagesController(int action, long dialogId, int threadMsgId, TLObject response, TLRPC.TL_error error) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda301(this, action, dialogId, threadMsgId));
    }

    /* renamed from: lambda$sendTyping$144$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m388lambda$sendTyping$144$orgtelegrammessengerMessagesController(int action, long dialogId, int threadMsgId, TLObject response, TLRPC.TL_error error) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda302(this, action, dialogId, threadMsgId));
    }

    /* access modifiers changed from: protected */
    public void removeDeletedMessagesFromArray(long dialogId, ArrayList<TLRPC.Message> messages) {
        int maxDeletedId = this.deletedHistory.get(dialogId, 0);
        if (maxDeletedId != 0) {
            int a = 0;
            int N = messages.size();
            while (a < N) {
                if (messages.get(a).id <= maxDeletedId) {
                    messages.remove(a);
                    a--;
                    N--;
                }
                a++;
            }
        }
    }

    public void loadMessages(long dialogId, long mergeDialogId, boolean loadInfo, int count, int max_id, int offset_date, boolean fromCache, int midDate, int classGuid, int load_type, int last_message_id, int mode, int threadMessageId, int replyFirstUnread, int loadIndex) {
        loadMessages(dialogId, mergeDialogId, loadInfo, count, max_id, offset_date, fromCache, midDate, classGuid, load_type, last_message_id, mode, threadMessageId, loadIndex, threadMessageId != 0 ? replyFirstUnread : 0, 0, 0, false, 0);
    }

    public void loadMessages(long dialogId, long mergeDialogId, boolean loadInfo, int count, int max_id, int offset_date, boolean fromCache, int midDate, int classGuid, int load_type, int last_message_id, int mode, int threadMessageId, int loadIndex, int first_unread, int unread_count, int last_date, boolean queryFromServer, int mentionsCount) {
        loadMessagesInternal(dialogId, mergeDialogId, loadInfo, count, max_id, offset_date, fromCache, midDate, classGuid, load_type, last_message_id, mode, threadMessageId, loadIndex, first_unread, unread_count, last_date, queryFromServer, mentionsCount, true, true);
    }

    /* access modifiers changed from: private */
    /*  JADX ERROR: JadxRuntimeException in pass: IfRegionVisitor
        jadx.core.utils.exceptions.JadxRuntimeException: Don't wrap MOVE or CONST insns: 0x01f2: MOVE  (r14v3 int) = (r53v0 'load_type' int)
        	at jadx.core.dex.instructions.args.InsnArg.wrapArg(InsnArg.java:164)
        	at jadx.core.dex.visitors.shrink.CodeShrinkVisitor.assignInline(CodeShrinkVisitor.java:133)
        	at jadx.core.dex.visitors.shrink.CodeShrinkVisitor.checkInline(CodeShrinkVisitor.java:118)
        	at jadx.core.dex.visitors.shrink.CodeShrinkVisitor.shrinkBlock(CodeShrinkVisitor.java:65)
        	at jadx.core.dex.visitors.shrink.CodeShrinkVisitor.shrinkMethod(CodeShrinkVisitor.java:43)
        	at jadx.core.dex.visitors.regions.TernaryMod.makeTernaryInsn(TernaryMod.java:122)
        	at jadx.core.dex.visitors.regions.TernaryMod.visitRegion(TernaryMod.java:34)
        	at jadx.core.dex.visitors.regions.DepthRegionTraversal.traverseIterativeStepInternal(DepthRegionTraversal.java:73)
        	at jadx.core.dex.visitors.regions.DepthRegionTraversal.traverseIterativeStepInternal(DepthRegionTraversal.java:78)
        	at jadx.core.dex.visitors.regions.DepthRegionTraversal.traverseIterativeStepInternal(DepthRegionTraversal.java:78)
        	at jadx.core.dex.visitors.regions.DepthRegionTraversal.traverseIterativeStepInternal(DepthRegionTraversal.java:78)
        	at jadx.core.dex.visitors.regions.DepthRegionTraversal.traverseIterative(DepthRegionTraversal.java:27)
        	at jadx.core.dex.visitors.regions.IfRegionVisitor.visit(IfRegionVisitor.java:31)
        */
    public void loadMessagesInternal(long r42, long r44, boolean r46, int r47, int r48, int r49, boolean r50, int r51, int r52, int r53, int r54, int r55, int r56, int r57, int r58, int r59, int r60, boolean r61, int r62, boolean r63, boolean r64) {
        /*
            r41 = this;
            r15 = r41
            r13 = r42
            r12 = r47
            r11 = r48
            r9 = r49
            r10 = r50
            r7 = r51
            r8 = r52
            r6 = r53
            r5 = r54
            r4 = r55
            r3 = r56
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x00a3
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "load messages in chat "
            r0.append(r1)
            r0.append(r13)
            java.lang.String r1 = " count "
            r0.append(r1)
            r0.append(r12)
            java.lang.String r1 = " max_id "
            r0.append(r1)
            r0.append(r11)
            java.lang.String r1 = " cache "
            r0.append(r1)
            r0.append(r10)
            java.lang.String r1 = " mindate = "
            r0.append(r1)
            r0.append(r7)
            java.lang.String r1 = " guid "
            r0.append(r1)
            r0.append(r8)
            java.lang.String r1 = " load_type "
            r0.append(r1)
            r0.append(r6)
            java.lang.String r1 = " last_message_id "
            r0.append(r1)
            r0.append(r5)
            java.lang.String r1 = " mode "
            r0.append(r1)
            r0.append(r4)
            java.lang.String r1 = " index "
            r0.append(r1)
            r2 = r57
            r0.append(r2)
            java.lang.String r1 = " firstUnread "
            r0.append(r1)
            r1 = r58
            r0.append(r1)
            java.lang.String r1 = " unread_count "
            r0.append(r1)
            r1 = r59
            r0.append(r1)
            java.lang.String r1 = " last_date "
            r0.append(r1)
            r1 = r60
            r0.append(r1)
            java.lang.String r1 = " queryFromServer "
            r0.append(r1)
            r1 = r61
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
            goto L_0x00a7
        L_0x00a3:
            r2 = r57
            r1 = r61
        L_0x00a7:
            if (r3 != 0) goto L_0x00df
            r0 = 2
            if (r4 == r0) goto L_0x00df
            if (r10 != 0) goto L_0x00b4
            boolean r0 = org.telegram.messenger.DialogObject.isEncryptedDialog(r42)
            if (r0 == 0) goto L_0x00df
        L_0x00b4:
            org.telegram.messenger.MessagesStorage r16 = r41.getMessagesStorage()
            r0 = 1
            if (r4 != r0) goto L_0x00be
            r28 = 1
            goto L_0x00c1
        L_0x00be:
            r0 = 0
            r28 = 0
        L_0x00c1:
            r17 = r42
            r19 = r44
            r21 = r46
            r22 = r47
            r23 = r48
            r24 = r49
            r25 = r51
            r26 = r52
            r27 = r53
            r29 = r56
            r30 = r57
            r31 = r64
            r16.getMessages(r17, r19, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31)
            r3 = r8
            goto L_0x0318
        L_0x00df:
            r18 = 0
            if (r3 == 0) goto L_0x0189
            if (r4 == 0) goto L_0x00e6
            return
        L_0x00e6:
            org.telegram.tgnet.TLRPC$TL_messages_getReplies r22 = new org.telegram.tgnet.TLRPC$TL_messages_getReplies
            r22.<init>()
            r23 = r22
            org.telegram.tgnet.TLRPC$InputPeer r0 = r41.getInputPeer((long) r42)
            r10 = r23
            r10.peer = r0
            r10.msg_id = r3
            r10.offset_date = r9
            r0 = 4
            if (r6 != r0) goto L_0x0102
            int r0 = -r12
            int r0 = r0 + 5
            r10.add_offset = r0
            goto L_0x013e
        L_0x0102:
            r0 = 3
            if (r6 != r0) goto L_0x010b
            int r0 = -r12
            r1 = 2
            int r0 = r0 / r1
            r10.add_offset = r0
            goto L_0x013e
        L_0x010b:
            r1 = 2
            r0 = 1
            if (r6 != r0) goto L_0x0114
            int r1 = -r12
            int r1 = r1 - r0
            r10.add_offset = r1
            goto L_0x013e
        L_0x0114:
            if (r6 != r1) goto L_0x011e
            if (r11 == 0) goto L_0x011e
            int r0 = -r12
            int r0 = r0 + 10
            r10.add_offset = r0
            goto L_0x013e
        L_0x011e:
            int r0 = (r13 > r18 ? 1 : (r13 == r18 ? 0 : -1))
            if (r0 >= 0) goto L_0x013e
            if (r11 == 0) goto L_0x013e
            long r0 = -r13
            java.lang.Long r0 = java.lang.Long.valueOf(r0)
            org.telegram.tgnet.TLRPC$Chat r0 = r15.getChat(r0)
            boolean r1 = org.telegram.messenger.ChatObject.isChannel(r0)
            if (r1 == 0) goto L_0x013e
            r1 = -1
            r10.add_offset = r1
            int r1 = r10.limit
            r16 = 1
            int r1 = r1 + 1
            r10.limit = r1
        L_0x013e:
            r10.limit = r12
            r10.offset_id = r11
            org.telegram.tgnet.ConnectionsManager r1 = r41.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda182 r0 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda182
            r21 = r0
            r32 = r1
            r1 = r41
            r2 = r47
            r3 = r48
            r4 = r49
            r5 = r58
            r6 = r53
            r7 = r42
            r22 = r10
            r9 = r44
            r11 = r52
            r12 = r54
            r13 = r59
            r14 = r60
            r15 = r56
            r16 = r57
            r17 = r61
            r18 = r62
            r19 = r64
            r20 = r22
            r0.<init>(r1, r2, r3, r4, r5, r6, r7, r9, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20)
            r2 = r21
            r0 = r22
            r1 = r32
            int r1 = r1.sendRequest(r0, r2)
            org.telegram.tgnet.ConnectionsManager r2 = r41.getConnectionsManager()
            r15 = r52
            r2.bindRequestToGuid(r1, r15)
            goto L_0x018f
        L_0x0189:
            r15 = r8
            r14 = r55
            r0 = 2
            if (r14 != r0) goto L_0x0192
        L_0x018f:
            r3 = r15
            goto L_0x0318
        L_0x0192:
            r0 = 1
            if (r14 != r0) goto L_0x01f0
            org.telegram.tgnet.TLRPC$TL_messages_getScheduledHistory r0 = new org.telegram.tgnet.TLRPC$TL_messages_getScheduledHistory
            r0.<init>()
            r13 = r0
            org.telegram.tgnet.TLRPC$InputPeer r0 = r41.getInputPeer((long) r42)
            r13.peer = r0
            r12 = r51
            long r0 = (long) r12
            r13.hash = r0
            org.telegram.tgnet.ConnectionsManager r11 = r41.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda183 r10 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda183
            r0 = r10
            r1 = r41
            r2 = r48
            r3 = r49
            r4 = r42
            r6 = r44
            r8 = r47
            r9 = r52
            r33 = r10
            r10 = r58
            r34 = r11
            r11 = r54
            r12 = r59
            r35 = r13
            r13 = r60
            r14 = r53
            r15 = r55
            r16 = r56
            r17 = r57
            r18 = r61
            r19 = r62
            r20 = r64
            r0.<init>(r1, r2, r3, r4, r6, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20)
            r2 = r33
            r1 = r34
            r0 = r35
            int r1 = r1.sendRequest(r0, r2)
            org.telegram.tgnet.ConnectionsManager r2 = r41.getConnectionsManager()
            r15 = r52
            r2.bindRequestToGuid(r1, r15)
            r3 = r15
            goto L_0x0318
        L_0x01f0:
            if (r63 == 0) goto L_0x0253
            r14 = r53
            r0 = 3
            if (r14 == r0) goto L_0x01fa
            r0 = 2
            if (r14 != r0) goto L_0x0253
        L_0x01fa:
            if (r54 != 0) goto L_0x0253
            org.telegram.tgnet.TLRPC$TL_messages_getPeerDialogs r0 = new org.telegram.tgnet.TLRPC$TL_messages_getPeerDialogs
            r0.<init>()
            r13 = r0
            r19 = r13
            org.telegram.tgnet.TLRPC$InputPeer r12 = r41.getInputPeer((long) r42)
            org.telegram.tgnet.TLRPC$TL_inputDialogPeer r0 = new org.telegram.tgnet.TLRPC$TL_inputDialogPeer
            r0.<init>()
            r11 = r0
            r11.peer = r12
            java.util.ArrayList<org.telegram.tgnet.TLRPC$InputDialogPeer> r0 = r13.peers
            r0.add(r11)
            org.telegram.tgnet.ConnectionsManager r10 = r41.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda216 r9 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda216
            r0 = r9
            r1 = r41
            r2 = r42
            r4 = r44
            r6 = r46
            r7 = r47
            r8 = r48
            r36 = r9
            r9 = r49
            r37 = r10
            r10 = r51
            r20 = r11
            r11 = r52
            r21 = r12
            r12 = r53
            r38 = r13
            r13 = r56
            r14 = r57
            r15 = r58
            r16 = r60
            r17 = r61
            r18 = r64
            r0.<init>(r1, r2, r4, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19)
            r2 = r36
            r1 = r37
            r0 = r38
            r1.sendRequest(r0, r2)
            return
        L_0x0253:
            org.telegram.tgnet.TLRPC$TL_messages_getHistory r0 = new org.telegram.tgnet.TLRPC$TL_messages_getHistory
            r0.<init>()
            r15 = r0
            org.telegram.tgnet.TLRPC$InputPeer r0 = r41.getInputPeer((long) r42)
            r15.peer = r0
            r14 = r53
            r0 = 4
            if (r14 != r0) goto L_0x0272
            r13 = r47
            int r0 = -r13
            int r0 = r0 + 5
            r15.add_offset = r0
            r9 = r41
            r10 = r42
            r12 = r48
            goto L_0x02c9
        L_0x0272:
            r13 = r47
            r0 = 3
            if (r14 != r0) goto L_0x0283
            int r0 = -r13
            r1 = 2
            int r0 = r0 / r1
            r15.add_offset = r0
            r9 = r41
            r10 = r42
            r12 = r48
            goto L_0x02c9
        L_0x0283:
            r1 = 2
            r0 = 1
            if (r14 != r0) goto L_0x0292
            int r1 = -r13
            int r1 = r1 - r0
            r15.add_offset = r1
            r9 = r41
            r10 = r42
            r12 = r48
            goto L_0x02c9
        L_0x0292:
            if (r14 != r1) goto L_0x02a2
            r12 = r48
            if (r12 == 0) goto L_0x02a4
            int r0 = -r13
            int r0 = r0 + 6
            r15.add_offset = r0
            r9 = r41
            r10 = r42
            goto L_0x02c9
        L_0x02a2:
            r12 = r48
        L_0x02a4:
            r10 = r42
            int r0 = (r10 > r18 ? 1 : (r10 == r18 ? 0 : -1))
            if (r0 >= 0) goto L_0x02c7
            if (r12 == 0) goto L_0x02c7
            long r0 = -r10
            java.lang.Long r0 = java.lang.Long.valueOf(r0)
            r9 = r41
            org.telegram.tgnet.TLRPC$Chat r0 = r9.getChat(r0)
            boolean r1 = org.telegram.messenger.ChatObject.isChannel(r0)
            if (r1 == 0) goto L_0x02c9
            r1 = -1
            r15.add_offset = r1
            int r1 = r15.limit
            r2 = 1
            int r1 = r1 + r2
            r15.limit = r1
            goto L_0x02c9
        L_0x02c7:
            r9 = r41
        L_0x02c9:
            r15.limit = r13
            r15.offset_id = r12
            r7 = r49
            r15.offset_date = r7
            org.telegram.tgnet.ConnectionsManager r8 = r41.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda209 r6 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda209
            r0 = r6
            r1 = r41
            r2 = r42
            r4 = r47
            r5 = r48
            r39 = r6
            r6 = r49
            r40 = r8
            r7 = r44
            r9 = r52
            r10 = r58
            r11 = r54
            r12 = r59
            r13 = r60
            r14 = r53
            r21 = r15
            r15 = r56
            r16 = r57
            r17 = r61
            r18 = r62
            r19 = r64
            r20 = r21
            r0.<init>(r1, r2, r4, r5, r6, r7, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20)
            r0 = r21
            r2 = r39
            r1 = r40
            int r1 = r1.sendRequest(r0, r2)
            org.telegram.tgnet.ConnectionsManager r2 = r41.getConnectionsManager()
            r3 = r52
            r2.bindRequestToGuid(r1, r3)
        L_0x0318:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.loadMessagesInternal(long, long, boolean, int, int, int, boolean, int, int, int, int, int, int, int, int, int, int, boolean, int, boolean, boolean):void");
    }

    /* renamed from: lambda$loadMessagesInternal$146$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m263x63var_a9c(int count, int max_id, int offset_date, int first_unread, int load_type, long dialogId, long mergeDialogId, int classGuid, int last_message_id, int unread_count, int last_date, int threadMessageId, int loadIndex, boolean queryFromServer, int mentionsCount, boolean processMessages, TLRPC.TL_messages_getReplies req, TLObject response, TLRPC.TL_error error) {
        int fnid;
        int mid;
        int i = offset_date;
        int i2 = first_unread;
        if (response != null) {
            TLRPC.messages_Messages res = (TLRPC.messages_Messages) response;
            if (res.messages.size() > count) {
                res.messages.remove(0);
            }
            int mid2 = max_id;
            if (!res.messages.isEmpty()) {
                if (i != 0) {
                    int mid3 = res.messages.get(res.messages.size() - 1).id;
                    int a = res.messages.size() - 1;
                    while (true) {
                        if (a < 0) {
                            break;
                        }
                        TLRPC.Message message = res.messages.get(a);
                        if (message.date > i) {
                            mid3 = message.id;
                            break;
                        }
                        a--;
                    }
                    int i3 = load_type;
                    mid = mid3;
                    fnid = 0;
                } else if (i2 == 0) {
                    int i4 = load_type;
                } else if (load_type == 2 && max_id > 0) {
                    int a2 = res.messages.size() - 1;
                    while (true) {
                        if (a2 < 0) {
                            break;
                        }
                        TLRPC.Message message2 = res.messages.get(a2);
                        if (message2.id > i2 && !message2.out) {
                            mid = mid2;
                            fnid = message2.id;
                            break;
                        }
                        a2--;
                    }
                }
                TLRPC.messages_Messages messages_messages = res;
                processLoadedMessages(res, res.messages.size(), dialogId, mergeDialogId, count, mid, offset_date, false, classGuid, fnid, last_message_id, unread_count, last_date, load_type, false, 0, threadMessageId, loadIndex, queryFromServer, mentionsCount, processMessages);
                int i5 = classGuid;
                TLRPC.TL_messages_getReplies tL_messages_getReplies = req;
                TLRPC.TL_error tL_error = error;
                return;
            }
            int i6 = load_type;
            mid = mid2;
            fnid = 0;
            TLRPC.messages_Messages messages_messages2 = res;
            processLoadedMessages(res, res.messages.size(), dialogId, mergeDialogId, count, mid, offset_date, false, classGuid, fnid, last_message_id, unread_count, last_date, load_type, false, 0, threadMessageId, loadIndex, queryFromServer, mentionsCount, processMessages);
            int i52 = classGuid;
            TLRPC.TL_messages_getReplies tL_messages_getReplies2 = req;
            TLRPC.TL_error tL_error2 = error;
            return;
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda311(this, classGuid, req, error));
    }

    /* renamed from: lambda$loadMessagesInternal$145$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m262x7eaefbdb(int classGuid, TLRPC.TL_messages_getReplies req, TLRPC.TL_error error) {
        getNotificationCenter().postNotificationName(NotificationCenter.loadingMessagesFailed, Integer.valueOf(classGuid), req, error);
    }

    /* renamed from: lambda$loadMessagesInternal$147$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m264x4931d95d(int max_id, int offset_date, long dialogId, long mergeDialogId, int count, int classGuid, int first_unread, int last_message_id, int unread_count, int last_date, int load_type, int mode, int threadMessageId, int loadIndex, boolean queryFromServer, int mentionsCount, boolean processMessages, TLObject response, TLRPC.TL_error error) {
        int mid;
        int i = offset_date;
        if (response != null) {
            TLRPC.messages_Messages res = (TLRPC.messages_Messages) response;
            if (!(res instanceof TLRPC.TL_messages_messagesNotModified)) {
                int mid2 = max_id;
                if (i != 0 && !res.messages.isEmpty()) {
                    int mid3 = res.messages.get(res.messages.size() - 1).id;
                    int a = res.messages.size() - 1;
                    while (true) {
                        if (a < 0) {
                            mid = mid3;
                            break;
                        }
                        TLRPC.Message message = res.messages.get(a);
                        if (message.date > i) {
                            mid = message.id;
                            break;
                        }
                        a--;
                    }
                } else {
                    mid = mid2;
                }
                TLRPC.messages_Messages messages_messages = res;
                processLoadedMessages(res, res.messages.size(), dialogId, mergeDialogId, count, mid, offset_date, false, classGuid, first_unread, last_message_id, unread_count, last_date, load_type, false, mode, threadMessageId, loadIndex, queryFromServer, mentionsCount, processMessages);
            }
        }
    }

    /* renamed from: lambda$loadMessagesInternal$149$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m266x13b4b6df(long dialogId, long mergeDialogId, boolean loadInfo, int count, int max_id, int offset_date, int minDate, int classGuid, int load_type, int threadMessageId, int loadIndex, int first_unread, int last_date, boolean queryFromServer, boolean processMessages, TLRPC.TL_messages_getPeerDialogs req, TLObject response, TLRPC.TL_error error) {
        if (response != null) {
            TLRPC.TL_messages_peerDialogs res = (TLRPC.TL_messages_peerDialogs) response;
            if (!res.dialogs.isEmpty()) {
                TLRPC.Dialog dialog = res.dialogs.get(0);
                if (dialog.top_message != 0) {
                    TLRPC.TL_messages_dialogs dialogs = new TLRPC.TL_messages_dialogs();
                    dialogs.chats = res.chats;
                    dialogs.users = res.users;
                    dialogs.dialogs = res.dialogs;
                    dialogs.messages = res.messages;
                    getMessagesStorage().putDialogs(dialogs, 2);
                }
                loadMessagesInternal(dialogId, mergeDialogId, loadInfo, count, max_id, offset_date, false, minDate, classGuid, load_type, dialog.top_message, 0, threadMessageId, loadIndex, first_unread, dialog.unread_count, last_date, queryFromServer, dialog.unread_mentions_count, false, processMessages);
            }
            int i = classGuid;
            TLRPC.TL_messages_getPeerDialogs tL_messages_getPeerDialogs = req;
            TLRPC.TL_error tL_error = error;
            return;
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda310(this, classGuid, req, error));
    }

    /* renamed from: lambda$loadMessagesInternal$148$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m265x2e73481e(int classGuid, TLRPC.TL_messages_getPeerDialogs req, TLRPC.TL_error error) {
        getNotificationCenter().postNotificationName(NotificationCenter.loadingMessagesFailed, Integer.valueOf(classGuid), req, error);
    }

    /* renamed from: lambda$loadMessagesInternal$151$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m268xaCLASSNAMEaa36(long dialogId, int count, int max_id, int offset_date, long mergeDialogId, int classGuid, int first_unread, int last_message_id, int unread_count, int last_date, int load_type, int threadMessageId, int loadIndex, boolean queryFromServer, int mentionsCount, boolean processMessages, TLRPC.TL_messages_getHistory req, TLObject response, TLRPC.TL_error error) {
        int mid;
        int i = offset_date;
        if (response != null) {
            TLRPC.messages_Messages res = (TLRPC.messages_Messages) response;
            removeDeletedMessagesFromArray(dialogId, res.messages);
            if (res.messages.size() > count) {
                res.messages.remove(0);
            }
            int mid2 = max_id;
            if (i != 0 && !res.messages.isEmpty()) {
                int mid3 = res.messages.get(res.messages.size() - 1).id;
                int a = res.messages.size() - 1;
                while (true) {
                    if (a < 0) {
                        mid = mid3;
                        break;
                    }
                    TLRPC.Message message = res.messages.get(a);
                    if (message.date > i) {
                        mid = message.id;
                        break;
                    }
                    a--;
                }
            } else {
                mid = mid2;
            }
            TLRPC.messages_Messages messages_messages = res;
            processLoadedMessages(res, res.messages.size(), dialogId, mergeDialogId, count, mid, offset_date, false, classGuid, first_unread, last_message_id, unread_count, last_date, load_type, false, 0, threadMessageId, loadIndex, queryFromServer, mentionsCount, processMessages);
            int i2 = classGuid;
            TLRPC.TL_messages_getHistory tL_messages_getHistory = req;
            TLRPC.TL_error tL_error = error;
            return;
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda309(this, classGuid, req, error));
    }

    /* renamed from: lambda$loadMessagesInternal$150$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m267xCLASSNAMEb75(int classGuid, TLRPC.TL_messages_getHistory req, TLRPC.TL_error error) {
        getNotificationCenter().postNotificationName(NotificationCenter.loadingMessagesFailed, Integer.valueOf(classGuid), req, error);
    }

    public void reloadWebPages(long dialogId, HashMap<String, ArrayList<MessageObject>> webpagesToReload, boolean scheduled) {
        HashMap<String, ArrayList<MessageObject>> map = scheduled ? this.reloadingScheduledWebpages : this.reloadingWebpages;
        LongSparseArray<ArrayList<MessageObject>> array = scheduled ? this.reloadingScheduledWebpagesPending : this.reloadingWebpagesPending;
        for (Map.Entry<String, ArrayList<MessageObject>> entry : webpagesToReload.entrySet()) {
            String url = entry.getKey();
            ArrayList<MessageObject> messages = entry.getValue();
            ArrayList<MessageObject> arrayList = map.get(url);
            if (arrayList == null) {
                arrayList = new ArrayList<>();
                map.put(url, arrayList);
            }
            arrayList.addAll(messages);
            TLRPC.TL_messages_getWebPagePreview req = new TLRPC.TL_messages_getWebPagePreview();
            req.message = url;
            MessagesController$$ExternalSyntheticLambda242 messagesController$$ExternalSyntheticLambda242 = r0;
            HashMap<String, ArrayList<MessageObject>> map2 = map;
            ConnectionsManager connectionsManager = getConnectionsManager();
            MessagesController$$ExternalSyntheticLambda242 messagesController$$ExternalSyntheticLambda2422 = new MessagesController$$ExternalSyntheticLambda242(this, map, url, array, dialogId, scheduled);
            connectionsManager.sendRequest(req, messagesController$$ExternalSyntheticLambda242);
            map = map2;
        }
    }

    /* renamed from: lambda$reloadWebPages$153$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m373x16584452(HashMap map, String url, LongSparseArray array, long dialogId, boolean scheduled, TLObject response, TLRPC.TL_error error) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda28(this, map, url, response, array, dialogId, scheduled));
    }

    /* renamed from: lambda$reloadWebPages$152$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m372x3116d591(HashMap map, String url, TLObject response, LongSparseArray array, long dialogId, boolean scheduled) {
        TLObject tLObject = response;
        ArrayList<MessageObject> arrayList1 = (ArrayList) map.remove(url);
        if (arrayList1 != null) {
            TLRPC.TL_messages_messages messagesRes = new TLRPC.TL_messages_messages();
            if (!(tLObject instanceof TLRPC.TL_messageMediaWebPage)) {
                for (int a = 0; a < arrayList1.size(); a++) {
                    arrayList1.get(a).messageOwner.media.webpage = new TLRPC.TL_webPageEmpty();
                    messagesRes.messages.add(arrayList1.get(a).messageOwner);
                }
                LongSparseArray longSparseArray = array;
            } else {
                TLRPC.TL_messageMediaWebPage media = (TLRPC.TL_messageMediaWebPage) tLObject;
                if (media.webpage instanceof TLRPC.TL_webPage) {
                    LongSparseArray longSparseArray2 = array;
                } else if (media.webpage instanceof TLRPC.TL_webPageEmpty) {
                    LongSparseArray longSparseArray3 = array;
                } else {
                    array.put(media.webpage.id, arrayList1);
                }
                for (int a2 = 0; a2 < arrayList1.size(); a2++) {
                    arrayList1.get(a2).messageOwner.media.webpage = media.webpage;
                    if (a2 == 0) {
                        ImageLoader.saveMessageThumbs(arrayList1.get(a2).messageOwner);
                    }
                    messagesRes.messages.add(arrayList1.get(a2).messageOwner);
                }
            }
            if (!messagesRes.messages.isEmpty()) {
                getMessagesStorage().putMessages((TLRPC.messages_Messages) messagesRes, dialogId, -2, 0, false, scheduled);
                getNotificationCenter().postNotificationName(NotificationCenter.replaceMessagesObjects, Long.valueOf(dialogId), arrayList1);
            }
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:155:0x0427, code lost:
        if (r3.media.bytes[0] >= 143) goto L_0x042c;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:160:0x043c, code lost:
        if (org.telegram.messenger.Utilities.bytesToInt(r3.media.bytes) < 143) goto L_0x0441;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void processLoadedMessages(org.telegram.tgnet.TLRPC.messages_Messages r40, int r41, long r42, long r44, int r46, int r47, int r48, boolean r49, int r50, int r51, int r52, int r53, int r54, int r55, boolean r56, int r57, int r58, int r59, boolean r60, int r61, boolean r62) {
        /*
            r39 = this;
            r15 = r39
            r14 = r40
            r12 = r42
            r11 = r47
            r10 = r49
            r9 = r57
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x009d
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "processLoadedMessages size "
            r0.append(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r14.messages
            int r1 = r1.size()
            r0.append(r1)
            java.lang.String r1 = " in chat "
            r0.append(r1)
            r0.append(r12)
            java.lang.String r1 = " count "
            r0.append(r1)
            r8 = r46
            r0.append(r8)
            java.lang.String r1 = " max_id "
            r0.append(r1)
            r0.append(r11)
            java.lang.String r1 = " cache "
            r0.append(r1)
            r0.append(r10)
            java.lang.String r1 = " guid "
            r0.append(r1)
            r7 = r50
            r0.append(r7)
            java.lang.String r1 = " load_type "
            r0.append(r1)
            r6 = r55
            r0.append(r6)
            java.lang.String r1 = " last_message_id "
            r0.append(r1)
            r4 = r52
            r0.append(r4)
            java.lang.String r1 = " index "
            r0.append(r1)
            r5 = r59
            r0.append(r5)
            java.lang.String r1 = " firstUnread "
            r0.append(r1)
            r3 = r51
            r0.append(r3)
            java.lang.String r1 = " unread_count "
            r0.append(r1)
            r1 = r53
            r0.append(r1)
            java.lang.String r2 = " last_date "
            r0.append(r2)
            r2 = r54
            r0.append(r2)
            java.lang.String r1 = " queryFromServer "
            r0.append(r1)
            r1 = r60
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
            goto L_0x00ad
        L_0x009d:
            r8 = r46
            r7 = r50
            r3 = r51
            r4 = r52
            r2 = r54
            r6 = r55
            r5 = r59
            r1 = r60
        L_0x00ad:
            long r24 = android.os.SystemClock.elapsedRealtime()
            r0 = 0
            r16 = r0
            boolean r0 = r14 instanceof org.telegram.tgnet.TLRPC.TL_messages_channelMessages
            if (r0 == 0) goto L_0x010a
            long r6 = -r12
            if (r9 != 0) goto L_0x0109
            if (r58 != 0) goto L_0x0109
            org.telegram.messenger.support.LongSparseIntArray r0 = r15.channelsPts
            int r0 = r0.get(r6)
            if (r0 != 0) goto L_0x0105
            r17 = r0
            org.telegram.messenger.MessagesStorage r0 = r39.getMessagesStorage()
            int r17 = r0.getChannelPtsSync(r6)
            if (r17 != 0) goto L_0x0103
            org.telegram.messenger.support.LongSparseIntArray r0 = r15.channelsPts
            int r1 = r14.pts
            r0.put(r6, r1)
            r16 = 1
            androidx.collection.LongSparseArray<java.util.ArrayList<java.lang.Integer>> r0 = r15.needShortPollChannels
            int r0 = r0.indexOfKey(r6)
            if (r0 < 0) goto L_0x00fe
            org.telegram.messenger.support.LongSparseIntArray r0 = r15.shortPollChannels
            int r0 = r0.indexOfKey(r6)
            if (r0 >= 0) goto L_0x00fe
            r18 = 2
            r19 = 0
            r21 = 0
            r0 = r39
            r1 = r6
            r3 = r18
            r4 = r19
            r7 = r6
            r6 = r21
            r0.getChannelDifference(r1, r3, r4, r6)
            goto L_0x010a
        L_0x00fe:
            r7 = r6
            r15.getChannelDifference(r7)
            goto L_0x010a
        L_0x0103:
            r7 = r6
            goto L_0x010a
        L_0x0105:
            r17 = r0
            r7 = r6
            goto L_0x010a
        L_0x0109:
            r7 = r6
        L_0x010a:
            r26 = r16
            if (r10 != 0) goto L_0x0113
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r0 = r14.messages
            org.telegram.messenger.ImageLoader.saveMessagesThumbs(r0)
        L_0x0113:
            r7 = 1
            if (r48 != 0) goto L_0x011a
            if (r11 != 0) goto L_0x011a
            r0 = 1
            goto L_0x011b
        L_0x011a:
            r0 = 0
        L_0x011b:
            r27 = r0
            r0 = 60000(0xea60, double:2.9644E-319)
            r2 = 0
            if (r9 != r7) goto L_0x0143
            long r4 = android.os.SystemClock.elapsedRealtime()
            androidx.collection.LongSparseArray<java.lang.Long> r6 = r15.lastScheduledServerQueryTime
            java.lang.Long r2 = java.lang.Long.valueOf(r2)
            java.lang.Object r2 = r6.get(r12, r2)
            java.lang.Long r2 = (java.lang.Long) r2
            long r2 = r2.longValue()
            long r4 = r4 - r2
            int r2 = (r4 > r0 ? 1 : (r4 == r0 ? 0 : -1))
            if (r2 <= 0) goto L_0x013f
            r0 = 1
            goto L_0x0140
        L_0x013f:
            r0 = 0
        L_0x0140:
            r28 = r0
            goto L_0x019b
        L_0x0143:
            if (r41 != 0) goto L_0x0163
            if (r27 == 0) goto L_0x0161
            long r4 = android.os.SystemClock.elapsedRealtime()
            androidx.collection.LongSparseArray<java.lang.Long> r6 = r15.lastServerQueryTime
            java.lang.Long r8 = java.lang.Long.valueOf(r2)
            java.lang.Object r6 = r6.get(r12, r8)
            java.lang.Long r6 = (java.lang.Long) r6
            long r17 = r6.longValue()
            long r4 = r4 - r17
            int r6 = (r4 > r0 ? 1 : (r4 == r0 ? 0 : -1))
            if (r6 <= 0) goto L_0x0163
        L_0x0161:
            r0 = 1
            goto L_0x0164
        L_0x0163:
            r0 = 0
        L_0x0164:
            if (r9 != 0) goto L_0x0199
            if (r10 == 0) goto L_0x0199
            int r1 = (r12 > r2 ? 1 : (r12 == r2 ? 0 : -1))
            if (r1 >= 0) goto L_0x0199
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r1 = r15.dialogs_dict
            boolean r1 = r1.containsKey(r12)
            if (r1 != 0) goto L_0x0199
            long r4 = android.os.SystemClock.elapsedRealtime()
            androidx.collection.LongSparseArray<java.lang.Long> r1 = r15.lastServerQueryTime
            java.lang.Long r2 = java.lang.Long.valueOf(r2)
            java.lang.Object r1 = r1.get(r12, r2)
            java.lang.Long r1 = (java.lang.Long) r1
            long r1 = r1.longValue()
            long r4 = r4 - r1
            r1 = 86400000(0x5265CLASSNAME, double:4.2687272E-316)
            int r3 = (r4 > r1 ? 1 : (r4 == r1 ? 0 : -1))
            if (r3 <= 0) goto L_0x0199
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r14.messages
            r1.clear()
            r0 = 1
            r28 = r0
            goto L_0x019b
        L_0x0199:
            r28 = r0
        L_0x019b:
            boolean r0 = org.telegram.messenger.DialogObject.isEncryptedDialog(r42)
            if (r0 != 0) goto L_0x023d
            if (r10 == 0) goto L_0x023d
            if (r28 == 0) goto L_0x023d
            r0 = 2
            if (r9 != r0) goto L_0x01ac
            r0 = 0
            r22 = r0
            goto L_0x0201
        L_0x01ac:
            if (r9 != r7) goto L_0x01f1
            androidx.collection.LongSparseArray<java.lang.Long> r0 = r15.lastScheduledServerQueryTime
            long r1 = android.os.SystemClock.elapsedRealtime()
            java.lang.Long r1 = java.lang.Long.valueOf(r1)
            r0.put(r12, r1)
            r0 = 0
            r2 = 0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r3 = r14.messages
            int r3 = r3.size()
        L_0x01c4:
            if (r2 >= r3) goto L_0x01eb
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r4 = r14.messages
            java.lang.Object r4 = r4.get(r2)
            org.telegram.tgnet.TLRPC$Message r4 = (org.telegram.tgnet.TLRPC.Message) r4
            int r5 = r4.id
            if (r5 >= 0) goto L_0x01d3
            goto L_0x01e8
        L_0x01d3:
            int r5 = r4.id
            long r5 = (long) r5
            long r0 = org.telegram.messenger.MediaDataController.calcHash(r0, r5)
            int r5 = r4.edit_date
            long r5 = (long) r5
            long r0 = org.telegram.messenger.MediaDataController.calcHash(r0, r5)
            int r5 = r4.date
            long r5 = (long) r5
            long r0 = org.telegram.messenger.MediaDataController.calcHash(r0, r5)
        L_0x01e8:
            int r2 = r2 + 1
            goto L_0x01c4
        L_0x01eb:
            int r2 = (int) r0
            int r0 = r2 + -1
            r22 = r0
            goto L_0x0201
        L_0x01f1:
            androidx.collection.LongSparseArray<java.lang.Long> r0 = r15.lastServerQueryTime
            long r1 = android.os.SystemClock.elapsedRealtime()
            java.lang.Long r1 = java.lang.Long.valueOf(r1)
            r0.put(r12, r1)
            r0 = 0
            r22 = r0
        L_0x0201:
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda333 r23 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda333
            r0 = r23
            r1 = r39
            r2 = r42
            r4 = r44
            r6 = r46
            r8 = 1
            r7 = r55
            r8 = r60
            r9 = r51
            r10 = r47
            r11 = r48
            r12 = r22
            r13 = r50
            r14 = r52
            r15 = r57
            r16 = r58
            r17 = r59
            r18 = r53
            r19 = r54
            r20 = r61
            r21 = r62
            r0.<init>(r1, r2, r4, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r23)
            r15 = r40
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r0 = r15.messages
            boolean r0 = r0.isEmpty()
            if (r0 == 0) goto L_0x023e
            return
        L_0x023d:
            r15 = r14
        L_0x023e:
            androidx.collection.LongSparseArray r0 = new androidx.collection.LongSparseArray
            r0.<init>()
            r14 = r0
            androidx.collection.LongSparseArray r0 = new androidx.collection.LongSparseArray
            r0.<init>()
            r13 = r0
            r0 = 0
        L_0x024b:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r1 = r15.users
            int r1 = r1.size()
            if (r0 >= r1) goto L_0x0263
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r1 = r15.users
            java.lang.Object r1 = r1.get(r0)
            org.telegram.tgnet.TLRPC$User r1 = (org.telegram.tgnet.TLRPC.User) r1
            long r2 = r1.id
            r14.put(r2, r1)
            int r0 = r0 + 1
            goto L_0x024b
        L_0x0263:
            r0 = 0
        L_0x0264:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r1 = r15.chats
            int r1 = r1.size()
            if (r0 >= r1) goto L_0x027c
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r1 = r15.chats
            java.lang.Object r1 = r1.get(r0)
            org.telegram.tgnet.TLRPC$Chat r1 = (org.telegram.tgnet.TLRPC.Chat) r1
            long r2 = r1.id
            r13.put(r2, r1)
            int r0 = r0 + 1
            goto L_0x0264
        L_0x027c:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r0 = r15.messages
            int r12 = r0.size()
            if (r49 != 0) goto L_0x0363
            r11 = r39
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r0 = r11.dialogs_read_inbox_max
            java.lang.Long r1 = java.lang.Long.valueOf(r42)
            java.lang.Object r0 = r0.get(r1)
            java.lang.Integer r0 = (java.lang.Integer) r0
            if (r0 != 0) goto L_0x02af
            org.telegram.messenger.MessagesStorage r1 = r39.getMessagesStorage()
            r9 = r42
            r8 = 0
            int r1 = r1.getDialogReadMax(r8, r9)
            java.lang.Integer r0 = java.lang.Integer.valueOf(r1)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r11.dialogs_read_inbox_max
            java.lang.Long r2 = java.lang.Long.valueOf(r42)
            r1.put(r2, r0)
            r16 = r0
            goto L_0x02b4
        L_0x02af:
            r9 = r42
            r8 = 0
            r16 = r0
        L_0x02b4:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r0 = r11.dialogs_read_outbox_max
            java.lang.Long r1 = java.lang.Long.valueOf(r42)
            java.lang.Object r0 = r0.get(r1)
            java.lang.Integer r0 = (java.lang.Integer) r0
            if (r0 != 0) goto L_0x02db
            org.telegram.messenger.MessagesStorage r1 = r39.getMessagesStorage()
            r7 = 1
            int r1 = r1.getDialogReadMax(r7, r9)
            java.lang.Integer r0 = java.lang.Integer.valueOf(r1)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r11.dialogs_read_outbox_max
            java.lang.Long r2 = java.lang.Long.valueOf(r42)
            r1.put(r2, r0)
            r17 = r0
            goto L_0x02de
        L_0x02db:
            r7 = 1
            r17 = r0
        L_0x02de:
            r0 = 0
        L_0x02df:
            if (r0 >= r12) goto L_0x0340
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r15.messages
            java.lang.Object r1 = r1.get(r0)
            org.telegram.tgnet.TLRPC$Message r1 = (org.telegram.tgnet.TLRPC.Message) r1
            r6 = r57
            if (r6 != 0) goto L_0x033d
            org.telegram.tgnet.TLRPC$MessageAction r2 = r1.action
            boolean r2 = r2 instanceof org.telegram.tgnet.TLRPC.TL_messageActionChatDeleteUser
            if (r2 == 0) goto L_0x0310
            org.telegram.tgnet.TLRPC$MessageAction r2 = r1.action
            long r2 = r2.user_id
            java.lang.Object r2 = r14.get(r2)
            org.telegram.tgnet.TLRPC$User r2 = (org.telegram.tgnet.TLRPC.User) r2
            if (r2 == 0) goto L_0x0310
            boolean r3 = r2.bot
            if (r3 == 0) goto L_0x0310
            org.telegram.tgnet.TLRPC$TL_replyKeyboardHide r3 = new org.telegram.tgnet.TLRPC$TL_replyKeyboardHide
            r3.<init>()
            r1.reply_markup = r3
            int r3 = r1.flags
            r3 = r3 | 64
            r1.flags = r3
        L_0x0310:
            org.telegram.tgnet.TLRPC$MessageAction r2 = r1.action
            boolean r2 = r2 instanceof org.telegram.tgnet.TLRPC.TL_messageActionChatMigrateTo
            if (r2 != 0) goto L_0x0339
            org.telegram.tgnet.TLRPC$MessageAction r2 = r1.action
            boolean r2 = r2 instanceof org.telegram.tgnet.TLRPC.TL_messageActionChannelCreate
            if (r2 == 0) goto L_0x031d
            goto L_0x0339
        L_0x031d:
            if (r58 != 0) goto L_0x0336
            boolean r2 = r1.out
            if (r2 == 0) goto L_0x0326
            r2 = r17
            goto L_0x0328
        L_0x0326:
            r2 = r16
        L_0x0328:
            int r2 = r2.intValue()
            int r3 = r1.id
            if (r2 >= r3) goto L_0x0332
            r2 = 1
            goto L_0x0333
        L_0x0332:
            r2 = 0
        L_0x0333:
            r1.unread = r2
            goto L_0x033d
        L_0x0336:
            r1.unread = r7
            goto L_0x033d
        L_0x0339:
            r1.unread = r8
            r1.media_unread = r8
        L_0x033d:
            int r0 = r0 + 1
            goto L_0x02df
        L_0x0340:
            r6 = r57
            if (r58 != 0) goto L_0x0361
            org.telegram.messenger.MessagesStorage r0 = r39.getMessagesStorage()
            if (r6 != r7) goto L_0x034d
            r18 = 1
            goto L_0x034f
        L_0x034d:
            r18 = 0
        L_0x034f:
            r1 = r40
            r2 = r42
            r4 = r55
            r5 = r47
            r8 = r6
            r6 = r26
            r8 = 1
            r7 = r18
            r0.putMessages((org.telegram.tgnet.TLRPC.messages_Messages) r1, (long) r2, (int) r4, (int) r5, (boolean) r6, (boolean) r7)
            goto L_0x0368
        L_0x0361:
            r8 = 1
            goto L_0x0368
        L_0x0363:
            r8 = 1
            r11 = r39
            r9 = r42
        L_0x0368:
            if (r62 != 0) goto L_0x0386
            boolean r0 = org.telegram.messenger.DialogObject.isEncryptedDialog(r42)
            if (r0 == 0) goto L_0x0386
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda312 r7 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda312
            r0 = r7
            r1 = r39
            r2 = r50
            r3 = r40
            r4 = r49
            r5 = r56
            r6 = r52
            r0.<init>(r1, r2, r3, r4, r5, r6)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r7)
            return
        L_0x0386:
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            r7 = r1
            java.util.HashMap r1 = new java.util.HashMap
            r1.<init>()
            r6 = r1
            r30 = 0
            r1 = 0
            r3 = 0
            r4 = r1
        L_0x039d:
            if (r3 >= r12) goto L_0x04b0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r15.messages
            java.lang.Object r1 = r1.get(r3)
            r2 = r1
            org.telegram.tgnet.TLRPC$Message r2 = (org.telegram.tgnet.TLRPC.Message) r2
            r2.dialog_id = r9
            long r16 = android.os.SystemClock.elapsedRealtime()
            org.telegram.messenger.MessageObject r18 = new org.telegram.messenger.MessageObject
            int r1 = r11.currentAccount
            r19 = 1
            r20 = 0
            r21 = r1
            r1 = r18
            r22 = r2
            r2 = r21
            r21 = r3
            r3 = r22
            r31 = r4
            r4 = r14
            r5 = r13
            r15 = r6
            r6 = r19
            r19 = r14
            r14 = r7
            r7 = r20
            r1.<init>((int) r2, (org.telegram.tgnet.TLRPC.Message) r3, (androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC.User>) r4, (androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC.Chat>) r5, (boolean) r6, (boolean) r7)
            r1.createStrippedThumb()
            long r2 = android.os.SystemClock.elapsedRealtime()
            long r2 = r2 - r16
            r6 = r31
            long r4 = r6 + r2
            r8 = r57
            r2 = 1
            if (r8 != r2) goto L_0x03e5
            r3 = 1
            goto L_0x03e6
        L_0x03e5:
            r3 = 0
        L_0x03e6:
            r1.scheduled = r3
            r0.add(r1)
            if (r49 == 0) goto L_0x04a1
            r3 = r22
            boolean r6 = r3.legacy
            r7 = 143(0x8f, float:2.0E-43)
            if (r6 == 0) goto L_0x0405
            int r6 = r3.layer
            if (r6 >= r7) goto L_0x0405
            int r6 = r3.id
            java.lang.Integer r6 = java.lang.Integer.valueOf(r6)
            r14.add(r6)
            r18 = 0
            goto L_0x0450
        L_0x0405:
            org.telegram.tgnet.TLRPC$MessageMedia r6 = r3.media
            boolean r6 = r6 instanceof org.telegram.tgnet.TLRPC.TL_messageMediaUnsupported
            if (r6 == 0) goto L_0x044e
            org.telegram.tgnet.TLRPC$MessageMedia r6 = r3.media
            byte[] r6 = r6.bytes
            if (r6 == 0) goto L_0x044b
            org.telegram.tgnet.TLRPC$MessageMedia r6 = r3.media
            byte[] r6 = r6.bytes
            int r6 = r6.length
            if (r6 == 0) goto L_0x043f
            org.telegram.tgnet.TLRPC$MessageMedia r6 = r3.media
            byte[] r6 = r6.bytes
            int r6 = r6.length
            if (r6 != r2) goto L_0x042a
            org.telegram.tgnet.TLRPC$MessageMedia r6 = r3.media
            byte[] r6 = r6.bytes
            r18 = 0
            byte r6 = r6[r18]
            if (r6 < r7) goto L_0x0441
            goto L_0x042c
        L_0x042a:
            r18 = 0
        L_0x042c:
            org.telegram.tgnet.TLRPC$MessageMedia r6 = r3.media
            byte[] r6 = r6.bytes
            int r6 = r6.length
            r2 = 4
            if (r6 != r2) goto L_0x0450
            org.telegram.tgnet.TLRPC$MessageMedia r2 = r3.media
            byte[] r2 = r2.bytes
            int r2 = org.telegram.messenger.Utilities.bytesToInt(r2)
            if (r2 >= r7) goto L_0x0450
            goto L_0x0441
        L_0x043f:
            r18 = 0
        L_0x0441:
            int r2 = r3.id
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)
            r14.add(r2)
            goto L_0x0450
        L_0x044b:
            r18 = 0
            goto L_0x0450
        L_0x044e:
            r18 = 0
        L_0x0450:
            org.telegram.tgnet.TLRPC$MessageMedia r2 = r3.media
            boolean r2 = r2 instanceof org.telegram.tgnet.TLRPC.TL_messageMediaWebPage
            if (r2 == 0) goto L_0x04a5
            org.telegram.tgnet.TLRPC$MessageMedia r2 = r3.media
            org.telegram.tgnet.TLRPC$WebPage r2 = r2.webpage
            boolean r2 = r2 instanceof org.telegram.tgnet.TLRPC.TL_webPagePending
            if (r2 == 0) goto L_0x0478
            org.telegram.tgnet.TLRPC$MessageMedia r2 = r3.media
            org.telegram.tgnet.TLRPC$WebPage r2 = r2.webpage
            int r2 = r2.date
            org.telegram.tgnet.ConnectionsManager r6 = r39.getConnectionsManager()
            int r6 = r6.getCurrentTime()
            if (r2 > r6) goto L_0x0478
            int r2 = r3.id
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)
            r14.add(r2)
            goto L_0x04a5
        L_0x0478:
            org.telegram.tgnet.TLRPC$MessageMedia r2 = r3.media
            org.telegram.tgnet.TLRPC$WebPage r2 = r2.webpage
            boolean r2 = r2 instanceof org.telegram.tgnet.TLRPC.TL_webPageUrlPending
            if (r2 == 0) goto L_0x04a5
            org.telegram.tgnet.TLRPC$MessageMedia r2 = r3.media
            org.telegram.tgnet.TLRPC$WebPage r2 = r2.webpage
            java.lang.String r2 = r2.url
            java.lang.Object r2 = r15.get(r2)
            java.util.ArrayList r2 = (java.util.ArrayList) r2
            if (r2 != 0) goto L_0x049d
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            r2 = r6
            org.telegram.tgnet.TLRPC$MessageMedia r6 = r3.media
            org.telegram.tgnet.TLRPC$WebPage r6 = r6.webpage
            java.lang.String r6 = r6.url
            r15.put(r6, r2)
        L_0x049d:
            r2.add(r1)
            goto L_0x04a5
        L_0x04a1:
            r3 = r22
            r18 = 0
        L_0x04a5:
            int r3 = r21 + 1
            r7 = r14
            r6 = r15
            r14 = r19
            r8 = 1
            r15 = r40
            goto L_0x039d
        L_0x04b0:
            r8 = r57
            r21 = r3
            r15 = r6
            r19 = r14
            r14 = r7
            r6 = r4
            org.telegram.messenger.FileLoader r1 = r39.getFileLoader()
            r1.checkMediaExistance(r0)
            boolean r1 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r1 == 0) goto L_0x04ee
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "process time = "
            r1.append(r2)
            long r2 = android.os.SystemClock.elapsedRealtime()
            long r2 = r2 - r24
            r1.append(r2)
            java.lang.String r2 = " file time = "
            r1.append(r2)
            r1.append(r6)
            java.lang.String r2 = " for dialog = "
            r1.append(r2)
            r1.append(r9)
            java.lang.String r1 = r1.toString()
            org.telegram.messenger.FileLog.d(r1)
        L_0x04ee:
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda106 r29 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda106
            r31 = r0
            r0 = r29
            r1 = r39
            r2 = r40
            r3 = r49
            r4 = r57
            r5 = r60
            r32 = r6
            r6 = r55
            r7 = r51
            r8 = r46
            r9 = r42
            r11 = r31
            r34 = r12
            r12 = r62
            r35 = r13
            r13 = r50
            r37 = r14
            r36 = r19
            r14 = r41
            r38 = r15
            r15 = r56
            r16 = r52
            r17 = r53
            r18 = r54
            r19 = r59
            r20 = r47
            r21 = r61
            r22 = r37
            r23 = r38
            r0.<init>(r1, r2, r3, r4, r5, r6, r7, r8, r9, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r29)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.processLoadedMessages(org.telegram.tgnet.TLRPC$messages_Messages, int, long, long, int, int, int, boolean, int, int, int, int, int, int, boolean, int, int, int, boolean, int, boolean):void");
    }

    /* renamed from: lambda$processLoadedMessages$154$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m327x84cc7bf0(long dialogId, long mergeDialogId, int count, int load_type, boolean queryFromServer, int first_unread, int max_id, int offset_date, int hash, int classGuid, int last_message_id, int mode, int threadMessageId, int loadIndex, int unread_count, int last_date, int mentionsCount, boolean needProcess) {
        loadMessagesInternal(dialogId, mergeDialogId, false, count, (load_type != 2 || !queryFromServer) ? max_id : first_unread, offset_date, false, hash, classGuid, load_type, last_message_id, mode, threadMessageId, loadIndex, first_unread, unread_count, last_date, queryFromServer, mentionsCount, true, needProcess);
    }

    /* renamed from: lambda$processLoadedMessages$155$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m328x6a0deab1(int classGuid, TLRPC.messages_Messages messagesRes, boolean isCache, boolean isEnd, int last_message_id) {
        getNotificationCenter().postNotificationName(NotificationCenter.messagesDidLoadWithoutProcess, Integer.valueOf(classGuid), Integer.valueOf(messagesRes.messages.size()), Boolean.valueOf(isCache), Boolean.valueOf(isEnd), Integer.valueOf(last_message_id));
    }

    /* JADX WARNING: Removed duplicated region for block: B:26:0x0061  */
    /* JADX WARNING: Removed duplicated region for block: B:27:0x0066  */
    /* renamed from: lambda$processLoadedMessages$157$org-telegram-messenger-MessagesController  reason: not valid java name */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void m330x3490CLASSNAME(org.telegram.tgnet.TLRPC.messages_Messages r26, boolean r27, int r28, boolean r29, int r30, int r31, int r32, long r33, java.util.ArrayList r35, boolean r36, int r37, int r38, boolean r39, int r40, int r41, int r42, int r43, int r44, int r45, java.util.ArrayList r46, java.util.HashMap r47) {
        /*
            r25 = this;
            r15 = r25
            r14 = r26
            r13 = r27
            r11 = r28
            r8 = r33
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r0 = r14.users
            r15.putUsers(r0, r13)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r0 = r14.chats
            r15.putChats(r0, r13)
            r0 = 2
            r10 = 1
            if (r11 != r10) goto L_0x0020
            r1 = 0
            r7 = r30
            r6 = r31
            r20 = r1
            goto L_0x0068
        L_0x0020:
            r1 = 2147483647(0x7fffffff, float:NaN)
            if (r29 == 0) goto L_0x0058
            r7 = r30
            if (r7 != r0) goto L_0x005a
            r2 = 0
        L_0x002a:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r3 = r14.messages
            int r3 = r3.size()
            if (r2 >= r3) goto L_0x0055
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r3 = r14.messages
            java.lang.Object r3 = r3.get(r2)
            org.telegram.tgnet.TLRPC$Message r3 = (org.telegram.tgnet.TLRPC.Message) r3
            boolean r4 = r3.out
            if (r4 == 0) goto L_0x0046
            boolean r4 = r3.from_scheduled
            if (r4 == 0) goto L_0x0043
            goto L_0x0046
        L_0x0043:
            r6 = r31
            goto L_0x0052
        L_0x0046:
            int r4 = r3.id
            r6 = r31
            if (r4 <= r6) goto L_0x0052
            int r4 = r3.id
            if (r4 >= r1) goto L_0x0052
            int r1 = r3.id
        L_0x0052:
            int r2 = r2 + 1
            goto L_0x002a
        L_0x0055:
            r6 = r31
            goto L_0x005c
        L_0x0058:
            r7 = r30
        L_0x005a:
            r6 = r31
        L_0x005c:
            r2 = 2147483647(0x7fffffff, float:NaN)
            if (r1 != r2) goto L_0x0066
            r1 = r31
            r20 = r1
            goto L_0x0068
        L_0x0066:
            r20 = r1
        L_0x0068:
            r21 = 0
            if (r11 != r10) goto L_0x008c
            r5 = r32
            if (r5 != r10) goto L_0x008e
            org.telegram.messenger.NotificationCenter r1 = r25.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.scheduledMessagesUpdated
            java.lang.Object[] r3 = new java.lang.Object[r0]
            java.lang.Long r4 = java.lang.Long.valueOf(r33)
            r3[r21] = r4
            int r4 = r35.size()
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)
            r3[r10] = r4
            r1.postNotificationName(r2, r3)
            goto L_0x008e
        L_0x008c:
            r5 = r32
        L_0x008e:
            boolean r1 = org.telegram.messenger.DialogObject.isEncryptedDialog(r33)
            if (r1 != 0) goto L_0x00d9
            r12 = r20
            org.telegram.messenger.MediaDataController r22 = r25.getMediaDataController()
            if (r11 != r10) goto L_0x009f
            r23 = 1
            goto L_0x00a1
        L_0x009f:
            r23 = 0
        L_0x00a1:
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda119 r24 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda119
            r0 = r24
            r1 = r25
            r2 = r36
            r3 = r37
            r4 = r38
            r5 = r27
            r6 = r39
            r7 = r40
            r8 = r33
            r10 = r32
            r11 = r35
            r13 = r41
            r14 = r42
            r15 = r30
            r16 = r43
            r17 = r44
            r18 = r45
            r19 = r28
            r0.<init>(r1, r2, r3, r4, r5, r6, r7, r8, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19)
            r0 = r22
            r1 = r35
            r2 = r33
            r4 = r23
            r5 = r24
            r0.loadReplyMessagesForMessages(r1, r2, r4, r5)
            r5 = 1
            goto L_0x0150
        L_0x00d9:
            org.telegram.messenger.NotificationCenter r1 = r25.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.messagesDidLoad
            r3 = 15
            java.lang.Object[] r3 = new java.lang.Object[r3]
            java.lang.Long r4 = java.lang.Long.valueOf(r33)
            r3[r21] = r4
            java.lang.Integer r4 = java.lang.Integer.valueOf(r32)
            r5 = 1
            r3[r5] = r4
            r3[r0] = r35
            r0 = 3
            java.lang.Boolean r4 = java.lang.Boolean.valueOf(r27)
            r3[r0] = r4
            r0 = 4
            java.lang.Integer r4 = java.lang.Integer.valueOf(r20)
            r3[r0] = r4
            r0 = 5
            java.lang.Integer r4 = java.lang.Integer.valueOf(r40)
            r3[r0] = r4
            r0 = 6
            java.lang.Integer r4 = java.lang.Integer.valueOf(r41)
            r3[r0] = r4
            r0 = 7
            java.lang.Integer r4 = java.lang.Integer.valueOf(r42)
            r3[r0] = r4
            r0 = 8
            java.lang.Integer r4 = java.lang.Integer.valueOf(r30)
            r3[r0] = r4
            r0 = 9
            java.lang.Boolean r4 = java.lang.Boolean.valueOf(r39)
            r3[r0] = r4
            r0 = 10
            java.lang.Integer r4 = java.lang.Integer.valueOf(r37)
            r3[r0] = r4
            r0 = 11
            java.lang.Integer r4 = java.lang.Integer.valueOf(r43)
            r3[r0] = r4
            r0 = 12
            java.lang.Integer r4 = java.lang.Integer.valueOf(r44)
            r3[r0] = r4
            r0 = 13
            java.lang.Integer r4 = java.lang.Integer.valueOf(r45)
            r3[r0] = r4
            r0 = 14
            java.lang.Integer r4 = java.lang.Integer.valueOf(r28)
            r3[r0] = r4
            r1.postNotificationName(r2, r3)
        L_0x0150:
            boolean r0 = r46.isEmpty()
            if (r0 != 0) goto L_0x0167
            r0 = r28
            if (r0 != r5) goto L_0x015c
            r10 = 1
            goto L_0x015d
        L_0x015c:
            r10 = 0
        L_0x015d:
            r1 = r25
            r2 = r33
            r4 = r46
            r1.reloadMessages(r4, r2, r10)
            goto L_0x016f
        L_0x0167:
            r1 = r25
            r0 = r28
            r2 = r33
            r4 = r46
        L_0x016f:
            boolean r6 = r47.isEmpty()
            if (r6 != 0) goto L_0x0180
            if (r0 != r5) goto L_0x0179
            r10 = 1
            goto L_0x017a
        L_0x0179:
            r10 = 0
        L_0x017a:
            r5 = r47
            r1.reloadWebPages(r2, r5, r10)
            goto L_0x0182
        L_0x0180:
            r5 = r47
        L_0x0182:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.m330x3490CLASSNAME(org.telegram.tgnet.TLRPC$messages_Messages, boolean, int, boolean, int, int, int, long, java.util.ArrayList, boolean, int, int, boolean, int, int, int, int, int, int, java.util.ArrayList, java.util.HashMap):void");
    }

    /* renamed from: lambda$processLoadedMessages$156$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m329x4f4var_(boolean needProcess, int classGuid, int resCount, boolean isCache, boolean isEnd, int last_message_id, long dialogId, int count, ArrayList objects, int finalFirst_unread_final, int unread_count, int last_date, int load_type, int loadIndex, int max_id, int mentionsCount, int mode) {
        if (!needProcess) {
            getNotificationCenter().postNotificationName(NotificationCenter.messagesDidLoadWithoutProcess, Integer.valueOf(classGuid), Integer.valueOf(resCount), Boolean.valueOf(isCache), Boolean.valueOf(isEnd), Integer.valueOf(last_message_id));
            return;
        }
        getNotificationCenter().postNotificationName(NotificationCenter.messagesDidLoad, Long.valueOf(dialogId), Integer.valueOf(count), objects, Boolean.valueOf(isCache), Integer.valueOf(finalFirst_unread_final), Integer.valueOf(last_message_id), Integer.valueOf(unread_count), Integer.valueOf(last_date), Integer.valueOf(load_type), Boolean.valueOf(isEnd), Integer.valueOf(classGuid), Integer.valueOf(loadIndex), Integer.valueOf(max_id), Integer.valueOf(mentionsCount), Integer.valueOf(mode));
    }

    public void loadHintDialogs() {
        if (this.hintDialogs.isEmpty() && !TextUtils.isEmpty(this.installReferer)) {
            TLRPC.TL_help_getRecentMeUrls req = new TLRPC.TL_help_getRecentMeUrls();
            req.referer = this.installReferer;
            getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda156(this));
        }
    }

    /* renamed from: lambda$loadHintDialogs$159$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m261x67466193(TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda41(this, response));
        }
    }

    /* renamed from: lambda$loadHintDialogs$158$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m260x8204f2d2(TLObject response) {
        TLRPC.TL_help_recentMeUrls res = (TLRPC.TL_help_recentMeUrls) response;
        putUsers(res.users, false);
        putChats(res.chats, false);
        this.hintDialogs.clear();
        this.hintDialogs.addAll(res.urls);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    private TLRPC.TL_dialogFolder ensureFolderDialogExists(int folderId, boolean[] folderCreated) {
        int i = folderId;
        if (i == 0) {
            return null;
        }
        long folderDialogId = DialogObject.makeFolderDialogId(folderId);
        TLRPC.Dialog dialog = this.dialogs_dict.get(folderDialogId);
        if (dialog instanceof TLRPC.TL_dialogFolder) {
            if (folderCreated != null) {
                folderCreated[0] = false;
            }
            return (TLRPC.TL_dialogFolder) dialog;
        }
        if (folderCreated != null) {
            folderCreated[0] = true;
        }
        TLRPC.TL_dialogFolder dialogFolder = new TLRPC.TL_dialogFolder();
        dialogFolder.id = folderDialogId;
        dialogFolder.peer = new TLRPC.TL_peerUser();
        dialogFolder.folder = new TLRPC.TL_folder();
        dialogFolder.folder.id = i;
        dialogFolder.folder.title = LocaleController.getString("ArchivedChats", NUM);
        dialogFolder.pinned = true;
        int maxPinnedNum = 0;
        for (int a = 0; a < this.allDialogs.size(); a++) {
            TLRPC.Dialog d = this.allDialogs.get(a);
            if (d.pinned) {
                maxPinnedNum = Math.max(d.pinnedNum, maxPinnedNum);
            } else if (d.id != this.promoDialogId) {
                break;
            }
        }
        dialogFolder.pinnedNum = maxPinnedNum + 1;
        TLRPC.TL_messages_dialogs dialogs = new TLRPC.TL_messages_dialogs();
        dialogs.dialogs.add(dialogFolder);
        getMessagesStorage().putDialogs(dialogs, 1);
        this.dialogs_dict.put(folderDialogId, dialogFolder);
        this.allDialogs.add(0, dialogFolder);
        return dialogFolder;
    }

    /* access modifiers changed from: private */
    /* renamed from: removeFolder */
    public void m306x10ed6eab(int folderId) {
        long dialogId = DialogObject.makeFolderDialogId(folderId);
        TLRPC.Dialog dialog = this.dialogs_dict.get(dialogId);
        if (dialog != null) {
            this.dialogs_dict.remove(dialogId);
            this.allDialogs.remove(dialog);
            sortDialogs((LongSparseArray<TLRPC.Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
            getNotificationCenter().postNotificationName(NotificationCenter.folderBecomeEmpty, Integer.valueOf(folderId));
        }
    }

    /* access modifiers changed from: protected */
    public void onFolderEmpty(int folderId) {
        if (getUserConfig().getDialogLoadOffsets(folderId)[0] == 2147483647L) {
            m306x10ed6eab(folderId);
            return;
        }
        loadDialogs(folderId, 0, 10, false, new MessagesController$$ExternalSyntheticLambda296(this, folderId));
    }

    public void checkIfFolderEmpty(int folderId) {
        if (folderId != 0) {
            getMessagesStorage().checkIfFolderEmpty(folderId);
        }
    }

    public int addDialogToFolder(long dialogId, int folderId, int pinnedNum, long taskId) {
        ArrayList<Long> arrayList = new ArrayList<>(1);
        arrayList.add(Long.valueOf(dialogId));
        return addDialogToFolder(arrayList, folderId, pinnedNum, (ArrayList<TLRPC.TL_inputFolderPeer>) null, taskId);
    }

    public int addDialogToFolder(ArrayList<Long> dialogIds, int folderId, int pinnedNum, ArrayList<TLRPC.TL_inputFolderPeer> peers, long taskId) {
        long newTaskId;
        long newTaskId2;
        TLRPC.Dialog dialog;
        boolean[] folderCreated;
        int i = folderId;
        int i2 = pinnedNum;
        TLRPC.TL_folders_editPeerFolders req = new TLRPC.TL_folders_editPeerFolders();
        boolean[] folderCreated2 = null;
        if (taskId == 0) {
            long selfUserId = getUserConfig().getClientUserId();
            int N = dialogIds.size();
            int size = 0;
            int size2 = 0;
            boolean[] folderCreated3 = null;
            for (int a = 0; a < N; a++) {
                long dialogId = dialogIds.get(a).longValue();
                if ((DialogObject.isChatDialog(dialogId) || DialogObject.isUserDialog(dialogId) || DialogObject.isEncryptedDialog(dialogId)) && !((i == 1 && (dialogId == selfUserId || dialogId == 777000 || isPromoDialog(dialogId, false))) || (dialog = this.dialogs_dict.get(dialogId)) == null)) {
                    dialog.folder_id = i;
                    if (i2 > 0) {
                        dialog.pinned = true;
                        dialog.pinnedNum = i2;
                    } else {
                        dialog.pinned = false;
                        dialog.pinnedNum = 0;
                    }
                    if (folderCreated3 == null) {
                        boolean[] folderCreated4 = new boolean[1];
                        ensureFolderDialogExists(i, folderCreated4);
                        folderCreated = folderCreated4;
                    } else {
                        folderCreated = folderCreated3;
                    }
                    if (DialogObject.isEncryptedDialog(dialogId)) {
                        TLRPC.Dialog dialog2 = dialog;
                        long j = dialogId;
                        getMessagesStorage().setDialogsFolderId((ArrayList<TLRPC.TL_folderPeer>) null, (ArrayList<TLRPC.TL_inputFolderPeer>) null, dialogId, folderId);
                        size2 = 1;
                        folderCreated3 = folderCreated;
                    } else {
                        TLRPC.TL_inputFolderPeer folderPeer = new TLRPC.TL_inputFolderPeer();
                        folderPeer.folder_id = i;
                        folderPeer.peer = getInputPeer(dialogId);
                        req.folder_peers.add(folderPeer);
                        size += folderPeer.getObjectSize();
                        size2 = 1;
                        folderCreated3 = folderCreated;
                    }
                }
            }
            if (size2 == 0) {
                return 0;
            }
            sortDialogs((LongSparseArray<TLRPC.Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
            if (size != 0) {
                NativeByteBuffer data = null;
                try {
                    data = new NativeByteBuffer(size + 12);
                    data.writeInt32(17);
                    data.writeInt32(i);
                    data.writeInt32(req.folder_peers.size());
                    int N2 = req.folder_peers.size();
                    for (int a2 = 0; a2 < N2; a2++) {
                        req.folder_peers.get(a2).serializeToStream(data);
                    }
                } catch (Exception e) {
                    FileLog.e((Throwable) e);
                }
                newTaskId2 = getMessagesStorage().createPendingTask(data);
            } else {
                newTaskId2 = 0;
            }
            ArrayList<TLRPC.TL_inputFolderPeer> arrayList = peers;
            folderCreated2 = folderCreated3;
            newTaskId = newTaskId2;
        } else {
            req.folder_peers = peers;
            newTaskId = taskId;
        }
        if (!req.folder_peers.isEmpty()) {
            getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda191(this, newTaskId));
            getMessagesStorage().setDialogsFolderId((ArrayList<TLRPC.TL_folderPeer>) null, req.folder_peers, 0, folderId);
        }
        if (folderCreated2 == null) {
            return 0;
        }
        if (folderCreated2[0]) {
            return 2;
        }
        return 1;
    }

    /* renamed from: lambda$addDialogToFolder$161$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m117x8aa7ed7e(long newTaskId, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            processUpdates((TLRPC.Updates) response, false);
        }
        if (newTaskId != 0) {
            getMessagesStorage().removePendingTask(newTaskId);
        }
    }

    public void loadDialogs(int folderId, int offset, int count, boolean fromCache) {
        loadDialogs(folderId, offset, count, fromCache, (Runnable) null);
    }

    public void loadDialogs(int folderId, int offset, int count, boolean fromCache, Runnable onEmptyCallback) {
        MessageObject message;
        long id;
        int i = folderId;
        int i2 = offset;
        int i3 = count;
        boolean z = fromCache;
        if (this.loadingDialogs.get(i)) {
            Runnable runnable = onEmptyCallback;
        } else if (this.resetingDialogs) {
            Runnable runnable2 = onEmptyCallback;
        } else {
            boolean z2 = true;
            this.loadingDialogs.put(i, true);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("folderId = " + i + " load cacheOffset = " + i2 + " count = " + i3 + " cache = " + z);
            }
            if (z) {
                MessagesStorage messagesStorage = getMessagesStorage();
                int i4 = i2 == 0 ? 0 : this.nextDialogsCacheOffset.get(i, 0);
                if (!(i == 0 && i2 == 0)) {
                    z2 = false;
                }
                messagesStorage.getDialogs(i, i4, i3, z2);
                Runnable runnable3 = onEmptyCallback;
                return;
            }
            TLRPC.TL_messages_getDialogs req = new TLRPC.TL_messages_getDialogs();
            req.limit = i3;
            req.exclude_pinned = true;
            if (i != 0) {
                req.flags |= 2;
                req.folder_id = i;
            }
            long[] dialogsLoadOffset = getUserConfig().getDialogLoadOffsets(i);
            if (dialogsLoadOffset[0] == -1) {
                boolean found = false;
                ArrayList<TLRPC.Dialog> dialogs = getDialogs(folderId);
                int a = dialogs.size() - 1;
                while (true) {
                    if (a < 0) {
                        break;
                    }
                    TLRPC.Dialog dialog = dialogs.get(a);
                    if (!dialog.pinned && !DialogObject.isEncryptedDialog(dialog.id) && dialog.top_message > 0 && (message = this.dialogMessage.get(dialog.id)) != null && message.getId() > 0) {
                        req.offset_date = message.messageOwner.date;
                        req.offset_id = message.messageOwner.id;
                        if (message.messageOwner.peer_id.channel_id != 0) {
                            id = -message.messageOwner.peer_id.channel_id;
                        } else if (message.messageOwner.peer_id.chat_id != 0) {
                            id = -message.messageOwner.peer_id.chat_id;
                        } else {
                            id = message.messageOwner.peer_id.user_id;
                        }
                        req.offset_peer = getInputPeer(id);
                        found = true;
                    } else {
                        a--;
                    }
                }
                if (!found) {
                    req.offset_peer = new TLRPC.TL_inputPeerEmpty();
                }
            } else if (dialogsLoadOffset[0] == 2147483647L) {
                this.dialogsEndReached.put(i, true);
                this.serverDialogsEndReached.put(i, true);
                this.loadingDialogs.put(i, false);
                getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                return;
            } else {
                req.offset_id = (int) dialogsLoadOffset[0];
                req.offset_date = (int) dialogsLoadOffset[1];
                if (req.offset_id == 0) {
                    req.offset_peer = new TLRPC.TL_inputPeerEmpty();
                } else {
                    if (dialogsLoadOffset[4] != 0) {
                        req.offset_peer = new TLRPC.TL_inputPeerChannel();
                        req.offset_peer.channel_id = dialogsLoadOffset[4];
                    } else if (dialogsLoadOffset[2] != 0) {
                        req.offset_peer = new TLRPC.TL_inputPeerUser();
                        req.offset_peer.user_id = dialogsLoadOffset[2];
                    } else {
                        req.offset_peer = new TLRPC.TL_inputPeerChat();
                        req.offset_peer.chat_id = dialogsLoadOffset[3];
                    }
                    req.offset_peer.access_hash = dialogsLoadOffset[5];
                }
            }
            getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda184(this, i, i3, onEmptyCallback));
        }
    }

    /* renamed from: lambda$loadDialogs$162$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m250lambda$loadDialogs$162$orgtelegrammessengerMessagesController(int folderId, int count, Runnable onEmptyCallback, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            TLRPC.messages_Dialogs dialogsRes = (TLRPC.messages_Dialogs) response;
            processLoadedDialogs(dialogsRes, (ArrayList<TLRPC.EncryptedChat>) null, folderId, 0, count, 0, false, false, false);
            if (onEmptyCallback != null && dialogsRes.dialogs.isEmpty()) {
                AndroidUtilities.runOnUIThread(onEmptyCallback);
            }
        }
    }

    public void loadGlobalNotificationsSettings() {
        if (this.loadingNotificationSettings == 0 && !getUserConfig().notificationsSettingsLoaded) {
            SharedPreferences preferences = getNotificationsSettings(this.currentAccount);
            SharedPreferences.Editor editor1 = null;
            if (preferences.contains("EnableGroup")) {
                boolean enabled = preferences.getBoolean("EnableGroup", true);
                editor1 = preferences.edit();
                if (!enabled) {
                    editor1.putInt("EnableGroup2", Integer.MAX_VALUE);
                    editor1.putInt("EnableChannel2", Integer.MAX_VALUE);
                }
                editor1.remove("EnableGroup").commit();
            }
            if (preferences.contains("EnableAll")) {
                boolean enabled2 = preferences.getBoolean("EnableAll", true);
                if (editor1 == null) {
                    editor1 = preferences.edit();
                }
                if (!enabled2) {
                    editor1.putInt("EnableAll2", Integer.MAX_VALUE);
                }
                editor1.remove("EnableAll").commit();
            }
            if (editor1 != null) {
                editor1.commit();
            }
            this.loadingNotificationSettings = 3;
            for (int a = 0; a < 3; a++) {
                TLRPC.TL_account_getNotifySettings req = new TLRPC.TL_account_getNotifySettings();
                if (a == 0) {
                    req.peer = new TLRPC.TL_inputNotifyChats();
                } else if (a == 1) {
                    req.peer = new TLRPC.TL_inputNotifyUsers();
                } else {
                    req.peer = new TLRPC.TL_inputNotifyBroadcasts();
                }
                getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda175(this, a));
            }
        }
        if (!getUserConfig().notificationsSignUpSettingsLoaded) {
            loadSignUpNotificationsSettings();
        }
    }

    /* renamed from: lambda$loadGlobalNotificationsSettings$164$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m259xe05885d1(int type, TLObject response, TLRPC.TL_error error) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda46(this, response, type));
    }

    /* renamed from: lambda$loadGlobalNotificationsSettings$163$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m258xfb171710(TLObject response, int type) {
        if (response != null) {
            this.loadingNotificationSettings--;
            TLRPC.TL_peerNotifySettings notify_settings = (TLRPC.TL_peerNotifySettings) response;
            SharedPreferences.Editor editor = this.notificationsPreferences.edit();
            if (type == 0) {
                if ((notify_settings.flags & 1) != 0) {
                    editor.putBoolean("EnablePreviewGroup", notify_settings.show_previews);
                }
                int i = notify_settings.flags;
                if ((notify_settings.flags & 4) != 0) {
                    editor.putInt("EnableGroup2", notify_settings.mute_until);
                }
            } else if (type == 1) {
                if ((notify_settings.flags & 1) != 0) {
                    editor.putBoolean("EnablePreviewAll", notify_settings.show_previews);
                }
                int i2 = notify_settings.flags;
                if ((notify_settings.flags & 4) != 0) {
                    editor.putInt("EnableAll2", notify_settings.mute_until);
                }
            } else {
                if ((notify_settings.flags & 1) != 0) {
                    editor.putBoolean("EnablePreviewChannel", notify_settings.show_previews);
                }
                int i3 = notify_settings.flags;
                if ((notify_settings.flags & 4) != 0) {
                    editor.putInt("EnableChannel2", notify_settings.mute_until);
                }
            }
            applySoundSettings(notify_settings.android_sound, editor, 0, type, false);
            editor.commit();
            if (this.loadingNotificationSettings == 0) {
                getUserConfig().notificationsSettingsLoaded = true;
                getUserConfig().saveConfig(false);
            }
        }
    }

    public void loadSignUpNotificationsSettings() {
        if (!this.loadingNotificationSignUpSettings) {
            this.loadingNotificationSignUpSettings = true;
            getConnectionsManager().sendRequest(new TLRPC.TL_account_getContactSignUpNotification(), new MessagesController$$ExternalSyntheticLambda159(this));
        }
    }

    /* renamed from: lambda$loadSignUpNotificationsSettings$166$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m278x2b963d9e(TLObject response, TLRPC.TL_error error) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda42(this, response));
    }

    /* renamed from: lambda$loadSignUpNotificationsSettings$165$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m277x4654cedd(TLObject response) {
        this.loadingNotificationSignUpSettings = false;
        SharedPreferences.Editor editor = this.notificationsPreferences.edit();
        boolean z = response instanceof TLRPC.TL_boolFalse;
        this.enableJoined = z;
        editor.putBoolean("EnableContactJoined", z);
        editor.commit();
        getUserConfig().notificationsSignUpSettingsLoaded = true;
        getUserConfig().saveConfig(false);
    }

    public void forceResetDialogs() {
        resetDialogs(true, getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
        getNotificationsController().deleteAllNotificationChannels();
    }

    /* access modifiers changed from: protected */
    public void loadUnknownDialog(TLRPC.InputPeer peer, long taskId) {
        long newTaskId;
        TLRPC.InputPeer inputPeer = peer;
        if (inputPeer != null) {
            long dialogId = DialogObject.getPeerDialogId(peer);
            if (this.gettingUnknownDialogs.indexOfKey(dialogId) < 0) {
                this.gettingUnknownDialogs.put(dialogId, true);
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("load unknown dialog " + dialogId);
                }
                TLRPC.TL_messages_getPeerDialogs req = new TLRPC.TL_messages_getPeerDialogs();
                TLRPC.TL_inputDialogPeer inputDialogPeer = new TLRPC.TL_inputDialogPeer();
                inputDialogPeer.peer = inputPeer;
                req.peers.add(inputDialogPeer);
                if (taskId == 0) {
                    NativeByteBuffer data = null;
                    try {
                        data = new NativeByteBuffer(peer.getObjectSize() + 4);
                        data.writeInt32(15);
                        inputPeer.serializeToStream(data);
                    } catch (Exception e) {
                        FileLog.e((Throwable) e);
                    }
                    newTaskId = getMessagesStorage().createPendingTask(data);
                } else {
                    newTaskId = taskId;
                }
                getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda214(this, newTaskId, dialogId));
            }
        }
    }

    /* renamed from: lambda$loadUnknownDialog$167$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m282x3212183e(long newTaskId, long dialogId, TLObject response, TLRPC.TL_error error) {
        long j = newTaskId;
        if (response != null) {
            TLRPC.TL_messages_peerDialogs res = (TLRPC.TL_messages_peerDialogs) response;
            if (!res.dialogs.isEmpty()) {
                TLRPC.TL_messages_dialogs dialogs = new TLRPC.TL_messages_dialogs();
                dialogs.dialogs.addAll(res.dialogs);
                dialogs.messages.addAll(res.messages);
                dialogs.users.addAll(res.users);
                dialogs.chats.addAll(res.chats);
                processLoadedDialogs(dialogs, (ArrayList<TLRPC.EncryptedChat>) null, ((TLRPC.TL_dialog) res.dialogs.get(0)).folder_id, 0, 1, this.DIALOGS_LOAD_TYPE_UNKNOWN, false, false, false);
            }
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
        this.gettingUnknownDialogs.delete(dialogId);
    }

    private void fetchFolderInLoadedPinnedDialogs(TLRPC.TL_messages_peerDialogs res) {
        int N;
        TLRPC.InputPeer inputPeer;
        TLRPC.TL_messages_peerDialogs tL_messages_peerDialogs = res;
        int a = 0;
        int N2 = tL_messages_peerDialogs.dialogs.size();
        while (a < N2) {
            TLRPC.Dialog dialog = tL_messages_peerDialogs.dialogs.get(a);
            if (dialog instanceof TLRPC.TL_dialogFolder) {
                TLRPC.TL_dialogFolder dialogFolder = (TLRPC.TL_dialogFolder) dialog;
                long folderTopDialogId = DialogObject.getPeerDialogId(dialog.peer);
                if (dialogFolder.top_message != 0) {
                    long folderTopDialogId2 = 0;
                    if (folderTopDialogId == 0) {
                        N = N2;
                        long j = folderTopDialogId;
                    } else {
                        int b = 0;
                        int N22 = tL_messages_peerDialogs.messages.size();
                        while (b < N22) {
                            TLRPC.Message message = tL_messages_peerDialogs.messages.get(b);
                            if (folderTopDialogId == MessageObject.getDialogId(message) && dialog.top_message == message.id) {
                                TLRPC.TL_dialog newDialog = new TLRPC.TL_dialog();
                                newDialog.peer = dialog.peer;
                                newDialog.top_message = dialog.top_message;
                                newDialog.folder_id = dialogFolder.folder.id;
                                newDialog.flags |= 16;
                                tL_messages_peerDialogs.dialogs.add(newDialog);
                                if (!(dialog.peer instanceof TLRPC.TL_peerChannel)) {
                                    long j2 = folderTopDialogId;
                                    int i = N22;
                                    TLRPC.Message message2 = message;
                                    if (!(dialog.peer instanceof TLRPC.TL_peerChat)) {
                                        inputPeer = new TLRPC.TL_inputPeerUser();
                                        inputPeer.user_id = dialog.peer.user_id;
                                        int c = 0;
                                        int N3 = tL_messages_peerDialogs.users.size();
                                        while (true) {
                                            if (c >= N3) {
                                                break;
                                            }
                                            TLRPC.User user = tL_messages_peerDialogs.users.get(c);
                                            if (user.id == inputPeer.user_id) {
                                                inputPeer.access_hash = user.access_hash;
                                                break;
                                            }
                                            c++;
                                        }
                                    } else {
                                        inputPeer = new TLRPC.TL_inputPeerChat();
                                        inputPeer.chat_id = dialog.peer.chat_id;
                                    }
                                } else {
                                    inputPeer = new TLRPC.TL_inputPeerChannel();
                                    inputPeer.channel_id = dialog.peer.channel_id;
                                    int c2 = 0;
                                    int N32 = tL_messages_peerDialogs.chats.size();
                                    while (true) {
                                        if (c2 >= N32) {
                                            long j3 = folderTopDialogId;
                                            int i2 = N22;
                                            TLRPC.Message message3 = message;
                                            break;
                                        }
                                        int N4 = N2;
                                        TLRPC.Chat chat = tL_messages_peerDialogs.chats.get(c2);
                                        long folderTopDialogId3 = folderTopDialogId;
                                        int N23 = N22;
                                        TLRPC.Message message4 = message;
                                        if (chat.id == inputPeer.channel_id) {
                                            inputPeer.access_hash = chat.access_hash;
                                            break;
                                        }
                                        c2++;
                                        N2 = N4;
                                        folderTopDialogId = folderTopDialogId3;
                                        N22 = N23;
                                        message = message4;
                                    }
                                }
                                loadUnknownDialog(inputPeer, 0);
                                return;
                            }
                            int N5 = N2;
                            TLRPC.Message message5 = message;
                            b++;
                            folderTopDialogId2 = folderTopDialogId2;
                            N2 = N5;
                            folderTopDialogId = folderTopDialogId;
                            N22 = N22;
                        }
                        long j4 = folderTopDialogId;
                        int i3 = N22;
                        return;
                    }
                } else {
                    N = N2;
                    long j5 = folderTopDialogId;
                }
                tL_messages_peerDialogs.dialogs.remove(dialogFolder);
            } else {
                N = N2;
            }
            a++;
            N2 = N;
        }
    }

    private void resetDialogs(boolean query, int seq, int newPts, int date, int qts) {
        TLRPC.messages_Dialogs messages_dialogs;
        long j;
        int messagesCount;
        int messagesCount2;
        TLRPC.User user;
        TLRPC.Chat chat;
        MessageObject mess;
        TLRPC.Message lastMessage;
        int a;
        TLRPC.Chat chat2;
        if (query) {
            if (!this.resetingDialogs) {
                getUserConfig().setPinnedDialogsLoaded(1, false);
                this.resetingDialogs = true;
                int i = seq;
                int i2 = newPts;
                int i3 = date;
                int i4 = qts;
                getConnectionsManager().sendRequest(new TLRPC.TL_messages_getPinnedDialogs(), new MessagesController$$ExternalSyntheticLambda180(this, i, i2, i3, i4));
                TLRPC.TL_messages_getDialogs req2 = new TLRPC.TL_messages_getDialogs();
                req2.limit = 100;
                req2.exclude_pinned = true;
                req2.offset_peer = new TLRPC.TL_inputPeerEmpty();
                getConnectionsManager().sendRequest(req2, new MessagesController$$ExternalSyntheticLambda181(this, i, i2, i3, i4));
            }
        } else if (this.resetDialogsPinned != null && (messages_dialogs = this.resetDialogsAll) != null) {
            int messagesCount3 = messages_dialogs.messages.size();
            int dialogsCount = this.resetDialogsAll.dialogs.size();
            fetchFolderInLoadedPinnedDialogs(this.resetDialogsPinned);
            this.resetDialogsAll.dialogs.addAll(this.resetDialogsPinned.dialogs);
            this.resetDialogsAll.messages.addAll(this.resetDialogsPinned.messages);
            this.resetDialogsAll.users.addAll(this.resetDialogsPinned.users);
            this.resetDialogsAll.chats.addAll(this.resetDialogsPinned.chats);
            LongSparseArray<TLRPC.Dialog> new_dialogs_dict = new LongSparseArray<>();
            LongSparseArray<MessageObject> new_dialogMessage = new LongSparseArray<>();
            LongSparseArray<TLRPC.User> usersDict = new LongSparseArray<>();
            LongSparseArray<TLRPC.Chat> chatsDict = new LongSparseArray<>();
            for (int a2 = 0; a2 < this.resetDialogsAll.users.size(); a2++) {
                TLRPC.User u = this.resetDialogsAll.users.get(a2);
                usersDict.put(u.id, u);
            }
            for (int a3 = 0; a3 < this.resetDialogsAll.chats.size(); a3++) {
                TLRPC.Chat c = this.resetDialogsAll.chats.get(a3);
                chatsDict.put(c.id, c);
            }
            TLRPC.Message lastMessage2 = null;
            int a4 = 0;
            while (true) {
                j = 0;
                if (a4 >= this.resetDialogsAll.messages.size()) {
                    break;
                }
                TLRPC.Message message = this.resetDialogsAll.messages.get(a4);
                if (a4 >= messagesCount3 || (lastMessage2 != null && message.date >= lastMessage2.date)) {
                    lastMessage = lastMessage2;
                } else {
                    lastMessage = message;
                }
                if (message.peer_id.channel_id != 0) {
                    TLRPC.Chat chat3 = chatsDict.get(message.peer_id.channel_id);
                    if (chat3 != null && chat3.left) {
                        a = a4;
                        a4 = a + 1;
                        lastMessage2 = lastMessage;
                    }
                } else if (!(message.peer_id.chat_id == 0 || (chat2 = chatsDict.get(message.peer_id.chat_id)) == null || chat2.migrated_to == null)) {
                    a = a4;
                    a4 = a + 1;
                    lastMessage2 = lastMessage;
                }
                TLRPC.Message message2 = message;
                a = a4;
                MessageObject messageObject = new MessageObject(this.currentAccount, message, usersDict, chatsDict, false, true);
                new_dialogMessage.put(messageObject.getDialogId(), messageObject);
                a4 = a + 1;
                lastMessage2 = lastMessage;
            }
            int i5 = a4;
            int a5 = 0;
            while (a5 < this.resetDialogsAll.dialogs.size()) {
                TLRPC.Dialog d = this.resetDialogsAll.dialogs.get(a5);
                DialogObject.initDialog(d);
                if (d.id != j) {
                    if (d.last_message_date == 0 && (mess = new_dialogMessage.get(d.id)) != null) {
                        d.last_message_date = mess.messageOwner.date;
                    }
                    if (DialogObject.isChannel(d)) {
                        TLRPC.Chat chat4 = chatsDict.get(-d.id);
                        if (chat4 == null || !chat4.left) {
                            this.channelsPts.put(-d.id, d.pts);
                        }
                    } else if (!(!DialogObject.isChatDialog(d.id) || (chat = chatsDict.get(-d.id)) == null || chat.migrated_to == null)) {
                    }
                    new_dialogs_dict.put(d.id, d);
                    Integer value = this.dialogs_read_inbox_max.get(Long.valueOf(d.id));
                    if (value == null) {
                        value = 0;
                    }
                    this.dialogs_read_inbox_max.put(Long.valueOf(d.id), Integer.valueOf(Math.max(value.intValue(), d.read_inbox_max_id)));
                    Integer value2 = this.dialogs_read_outbox_max.get(Long.valueOf(d.id));
                    if (value2 == null) {
                        value2 = 0;
                    }
                    this.dialogs_read_outbox_max.put(Long.valueOf(d.id), Integer.valueOf(Math.max(value2.intValue(), d.read_outbox_max_id)));
                }
                a5++;
                j = 0;
            }
            ImageLoader.saveMessagesThumbs(this.resetDialogsAll.messages);
            int a6 = 0;
            while (a6 < this.resetDialogsAll.messages.size()) {
                TLRPC.Message message3 = this.resetDialogsAll.messages.get(a6);
                if ((message3.action instanceof TLRPC.TL_messageActionChatDeleteUser) && (user = usersDict.get(message3.action.user_id)) != null && user.bot) {
                    message3.reply_markup = new TLRPC.TL_replyKeyboardHide();
                    message3.flags |= 64;
                }
                if (message3.action instanceof TLRPC.TL_messageActionChatMigrateTo) {
                    messagesCount2 = messagesCount3;
                } else if (message3.action instanceof TLRPC.TL_messageActionChannelCreate) {
                    messagesCount2 = messagesCount3;
                } else {
                    ConcurrentHashMap<Long, Integer> concurrentHashMap = message3.out ? this.dialogs_read_outbox_max : this.dialogs_read_inbox_max;
                    Integer value3 = concurrentHashMap.get(Long.valueOf(message3.dialog_id));
                    if (value3 == null) {
                        messagesCount = messagesCount3;
                        value3 = Integer.valueOf(getMessagesStorage().getDialogReadMax(message3.out, message3.dialog_id));
                        concurrentHashMap.put(Long.valueOf(message3.dialog_id), value3);
                    } else {
                        messagesCount = messagesCount3;
                    }
                    message3.unread = value3.intValue() < message3.id;
                    a6++;
                    messagesCount3 = messagesCount;
                }
                message3.unread = false;
                message3.media_unread = false;
                a6++;
                messagesCount3 = messagesCount;
            }
            LongSparseArray<TLRPC.Chat> longSparseArray = chatsDict;
            getMessagesStorage().resetDialogs(this.resetDialogsAll, messagesCount3, seq, newPts, date, qts, new_dialogs_dict, new_dialogMessage, lastMessage2, dialogsCount);
            this.resetDialogsPinned = null;
            this.resetDialogsAll = null;
        }
    }

    /* renamed from: lambda$resetDialogs$168$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m376x17dvar_c9(int seq, int newPts, int date, int qts, TLObject response, TLRPC.TL_error error) {
        if (response != null) {
            this.resetDialogsPinned = (TLRPC.TL_messages_peerDialogs) response;
            for (int a = 0; a < this.resetDialogsPinned.dialogs.size(); a++) {
                this.resetDialogsPinned.dialogs.get(a).pinned = true;
            }
            resetDialogs(false, seq, newPts, date, qts);
        }
    }

    /* renamed from: lambda$resetDialogs$169$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m377xfd20var_a(int seq, int newPts, int date, int qts, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            this.resetDialogsAll = (TLRPC.messages_Dialogs) response;
            resetDialogs(false, seq, newPts, date, qts);
        }
    }

    /* access modifiers changed from: protected */
    public void completeDialogsReset(TLRPC.messages_Dialogs dialogsRes, int messagesCount, int seq, int newPts, int date, int qts, LongSparseArray<TLRPC.Dialog> new_dialogs_dict, LongSparseArray<MessageObject> new_dialogMessage, TLRPC.Message lastMessage) {
        Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda298(this, newPts, date, qts, dialogsRes, new_dialogs_dict, new_dialogMessage));
    }

    /* renamed from: lambda$completeDialogsReset$171$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m160x292CLASSNAME(int newPts, int date, int qts, TLRPC.messages_Dialogs dialogsRes, LongSparseArray new_dialogs_dict, LongSparseArray new_dialogMessage) {
        this.gettingDifference = false;
        getMessagesStorage().setLastPtsValue(newPts);
        getMessagesStorage().setLastDateValue(date);
        getMessagesStorage().setLastQtsValue(qts);
        getDifference();
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda102(this, dialogsRes, new_dialogs_dict, new_dialogMessage));
    }

    /* renamed from: lambda$completeDialogsReset$170$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m159x43eb0441(TLRPC.messages_Dialogs dialogsRes, LongSparseArray new_dialogs_dict, LongSparseArray new_dialogMessage) {
        MediaDataController mediaDataController;
        long key;
        TLRPC.messages_Dialogs messages_dialogs = dialogsRes;
        LongSparseArray longSparseArray = new_dialogs_dict;
        this.resetingDialogs = false;
        applyDialogsNotificationsSettings(messages_dialogs.dialogs);
        MediaDataController mediaDataController2 = getMediaDataController();
        mediaDataController2.clearAllDrafts(false);
        mediaDataController2.loadDraftsIfNeed();
        putUsers(messages_dialogs.users, false);
        putChats(messages_dialogs.chats, false);
        for (int a = 0; a < this.allDialogs.size(); a++) {
            TLRPC.Dialog oldDialog = this.allDialogs.get(a);
            if (!DialogObject.isEncryptedDialog(oldDialog.id)) {
                this.dialogs_dict.remove(oldDialog.id);
                MessageObject messageObject = this.dialogMessage.get(oldDialog.id);
                this.dialogMessage.remove(oldDialog.id);
                if (messageObject != null) {
                    if (messageObject.messageOwner.peer_id.channel_id == 0) {
                        this.dialogMessagesByIds.remove(messageObject.getId());
                    }
                    if (messageObject.messageOwner.random_id != 0) {
                        this.dialogMessagesByRandomIds.remove(messageObject.messageOwner.random_id);
                    }
                }
            }
        }
        int a2 = 0;
        while (a2 < new_dialogs_dict.size()) {
            long key2 = longSparseArray.keyAt(a2);
            TLRPC.Dialog value = (TLRPC.Dialog) longSparseArray.valueAt(a2);
            if (value.draft instanceof TLRPC.TL_draftMessage) {
                mediaDataController = mediaDataController2;
                key = key2;
                mediaDataController2.saveDraft(value.id, 0, value.draft, (TLRPC.Message) null, false);
            } else {
                mediaDataController = mediaDataController2;
                key = key2;
            }
            this.dialogs_dict.put(key, value);
            MessageObject messageObject2 = (MessageObject) new_dialogMessage.get(value.id);
            this.dialogMessage.put(key, messageObject2);
            if (messageObject2 != null && messageObject2.messageOwner.peer_id.channel_id == 0) {
                this.dialogMessagesByIds.put(messageObject2.getId(), messageObject2);
                this.dialogsLoadedTillDate = Math.min(this.dialogsLoadedTillDate, messageObject2.messageOwner.date);
                if (messageObject2.messageOwner.random_id != 0) {
                    this.dialogMessagesByRandomIds.put(messageObject2.messageOwner.random_id, messageObject2);
                }
            }
            a2++;
            mediaDataController2 = mediaDataController;
        }
        LongSparseArray longSparseArray2 = new_dialogMessage;
        MediaDataController mediaDataController3 = mediaDataController2;
        this.allDialogs.clear();
        int size = this.dialogs_dict.size();
        for (int a3 = 0; a3 < size; a3++) {
            TLRPC.Dialog dialog = this.dialogs_dict.valueAt(a3);
            if (this.deletingDialogs.indexOfKey(dialog.id) < 0) {
                this.allDialogs.add(dialog);
            }
        }
        sortDialogs((LongSparseArray<TLRPC.Chat>) null);
        this.dialogsEndReached.put(0, true);
        this.serverDialogsEndReached.put(0, false);
        this.dialogsEndReached.put(1, true);
        this.serverDialogsEndReached.put(1, false);
        int totalDialogsLoadCount = getUserConfig().getTotalDialogsCount(0);
        long[] dialogsLoadOffset = getUserConfig().getDialogLoadOffsets(0);
        if (!(totalDialogsLoadCount >= 400 || dialogsLoadOffset[0] == -1 || dialogsLoadOffset[0] == 2147483647L)) {
            loadDialogs(0, 0, 100, false);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    private void migrateDialogs(int offset, int offsetDate, long offsetUser, long offsetChat, long offsetChannel, long accessPeer) {
        int i = offset;
        int i2 = offsetDate;
        long j = offsetUser;
        long j2 = offsetChannel;
        if (this.migratingDialogs) {
            long j3 = offsetChat;
            long j4 = accessPeer;
        } else if (i == -1) {
            long j5 = offsetChat;
            long j6 = accessPeer;
        } else {
            this.migratingDialogs = true;
            TLRPC.TL_messages_getDialogs req = new TLRPC.TL_messages_getDialogs();
            req.exclude_pinned = true;
            req.limit = 100;
            req.offset_id = i;
            req.offset_date = i2;
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("start migrate with id " + offset + " date " + LocaleController.getInstance().formatterStats.format(((long) i2) * 1000));
            }
            if (i == 0) {
                req.offset_peer = new TLRPC.TL_inputPeerEmpty();
                long j7 = offsetChat;
                long j8 = accessPeer;
            } else {
                if (j2 != 0) {
                    req.offset_peer = new TLRPC.TL_inputPeerChannel();
                    req.offset_peer.channel_id = j2;
                    long j9 = offsetChat;
                } else if (j != 0) {
                    req.offset_peer = new TLRPC.TL_inputPeerUser();
                    req.offset_peer.user_id = j;
                    long j10 = offsetChat;
                } else {
                    req.offset_peer = new TLRPC.TL_inputPeerChat();
                    req.offset_peer.chat_id = offsetChat;
                }
                req.offset_peer.access_hash = accessPeer;
            }
            getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda178(this, offset));
        }
    }

    /* renamed from: lambda$migrateDialogs$175$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m299x991d9ec9(int offset, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            getMessagesStorage().getStorageQueue().postRunnable(new MessagesController$$ExternalSyntheticLambda100(this, (TLRPC.messages_Dialogs) response, offset));
        } else {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda122(this));
        }
    }

    /* renamed from: lambda$migrateDialogs$173$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m297xce9aCLASSNAME(TLRPC.messages_Dialogs dialogsRes, int offset) {
        int offsetId;
        int offsetId2;
        SQLiteCursor cursor;
        StringBuilder dids;
        TLRPC.Message lastMessage;
        int totalDialogsLoadCount;
        SQLiteCursor cursor2;
        LongSparseArray<TLRPC.Dialog> dialogHashMap;
        int a;
        LongSparseArray<TLRPC.Dialog> dialogHashMap2;
        TLRPC.messages_Dialogs messages_dialogs = dialogsRes;
        int i = offset;
        try {
            int i2 = 0;
            int totalDialogsLoadCount2 = getUserConfig().getTotalDialogsCount(0);
            getUserConfig().setTotalDialogsCount(0, messages_dialogs.dialogs.size() + totalDialogsLoadCount2);
            TLRPC.Message lastMessage2 = null;
            for (int a2 = 0; a2 < messages_dialogs.messages.size(); a2++) {
                TLRPC.Message message = messages_dialogs.messages.get(a2);
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("search migrate id " + message.id + " date " + LocaleController.getInstance().formatterStats.format(((long) message.date) * 1000));
                }
                if (lastMessage2 == null || message.date < lastMessage2.date) {
                    lastMessage2 = message;
                }
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("migrate step with id " + lastMessage2.id + " date " + LocaleController.getInstance().formatterStats.format(((long) lastMessage2.date) * 1000));
            }
            if (messages_dialogs.dialogs.size() >= 100) {
                offsetId = lastMessage2.id;
            } else {
                if (BuildVars.LOGS_ENABLED != 0) {
                    FileLog.d("migrate stop due to not 100 dialogs");
                }
                int i3 = 0;
                for (int i4 = 2; i3 < i4; i4 = 2) {
                    UserConfig userConfig = getUserConfig();
                    int i5 = getUserConfig().migrateOffsetDate;
                    long j = getUserConfig().migrateOffsetUserId;
                    userConfig.setDialogsLoadOffset(i3, Integer.MAX_VALUE, i5, j, getUserConfig().migrateOffsetChatId, getUserConfig().migrateOffsetChannelId, getUserConfig().migrateOffsetAccess);
                    i3++;
                }
                offsetId = -1;
            }
            StringBuilder dids2 = new StringBuilder(messages_dialogs.dialogs.size() * 12);
            LongSparseArray<TLRPC.Dialog> dialogHashMap3 = new LongSparseArray<>();
            for (int a3 = 0; a3 < messages_dialogs.dialogs.size(); a3++) {
                TLRPC.Dialog dialog = messages_dialogs.dialogs.get(a3);
                DialogObject.initDialog(dialog);
                if (dids2.length() > 0) {
                    dids2.append(",");
                }
                dids2.append(dialog.id);
                dialogHashMap3.put(dialog.id, dialog);
            }
            int i6 = 1;
            SQLiteCursor cursor3 = getMessagesStorage().getDatabase().queryFinalized(String.format(Locale.US, "SELECT did, folder_id FROM dialogs WHERE did IN (%s)", new Object[]{dids2.toString()}), new Object[0]);
            while (cursor3.next()) {
                long did = cursor3.longValue(i2);
                int folder_id = cursor3.intValue(i6);
                TLRPC.Dialog dialog2 = dialogHashMap3.get(did);
                if (dialog2 != null) {
                    if (dialog2.folder_id == folder_id) {
                        messages_dialogs.dialogs.remove(dialog2);
                        int a4 = 0;
                        while (true) {
                            if (a4 >= messages_dialogs.messages.size()) {
                                break;
                            }
                            TLRPC.Message message2 = messages_dialogs.messages.get(a4);
                            if (MessageObject.getDialogId(message2) == did) {
                                messages_dialogs.messages.remove(a4);
                                a4--;
                                if (message2.id == dialog2.top_message) {
                                    dialog2.top_message = 0;
                                    break;
                                }
                            }
                            a4++;
                        }
                    }
                }
                dialogHashMap3.remove(did);
                i2 = 0;
                i6 = 1;
            }
            cursor3.dispose();
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("migrate found missing dialogs " + messages_dialogs.dialogs.size());
            }
            SQLiteCursor cursor4 = getMessagesStorage().getDatabase().queryFinalized("SELECT min(date) FROM dialogs WHERE date != 0 AND did >> 32 NOT IN (NUM, NUM)", new Object[0]);
            if (cursor4.next()) {
                try {
                    int date = Math.max(NUM, cursor4.intValue(0));
                    int a5 = 0;
                    while (a5 < messages_dialogs.messages.size()) {
                        TLRPC.Message message3 = messages_dialogs.messages.get(a5);
                        if (message3.date < date) {
                            if (i != -1) {
                                int i7 = 0;
                                while (i7 < 2) {
                                    getUserConfig().setDialogsLoadOffset(i7, getUserConfig().migrateOffsetId, getUserConfig().migrateOffsetDate, getUserConfig().migrateOffsetUserId, getUserConfig().migrateOffsetChatId, getUserConfig().migrateOffsetChannelId, getUserConfig().migrateOffsetAccess);
                                    i7++;
                                    int i8 = offset;
                                    cursor4 = cursor4;
                                    totalDialogsLoadCount2 = totalDialogsLoadCount2;
                                    lastMessage2 = lastMessage2;
                                    dids2 = dids2;
                                    dialogHashMap3 = dialogHashMap3;
                                    offsetId = offsetId;
                                    a5 = a5;
                                }
                                totalDialogsLoadCount = totalDialogsLoadCount2;
                                int i9 = offsetId;
                                a = a5;
                                cursor2 = cursor4;
                                lastMessage = lastMessage2;
                                dids = dids2;
                                dialogHashMap2 = dialogHashMap3;
                                offsetId = -1;
                                if (BuildVars.LOGS_ENABLED) {
                                    FileLog.d("migrate stop due to reached loaded dialogs " + LocaleController.getInstance().formatterStats.format(((long) date) * 1000));
                                }
                            } else {
                                totalDialogsLoadCount = totalDialogsLoadCount2;
                                int i10 = offsetId;
                                a = a5;
                                cursor2 = cursor4;
                                lastMessage = lastMessage2;
                                dids = dids2;
                                dialogHashMap2 = dialogHashMap3;
                            }
                            int a6 = a;
                            messages_dialogs.messages.remove(a6);
                            a5 = a6 - 1;
                            long did2 = MessageObject.getDialogId(message3);
                            dialogHashMap = dialogHashMap2;
                            TLRPC.Dialog dialog3 = dialogHashMap.get(did2);
                            dialogHashMap.remove(did2);
                            if (dialog3 != null) {
                                messages_dialogs.dialogs.remove(dialog3);
                            }
                        } else {
                            totalDialogsLoadCount = totalDialogsLoadCount2;
                            int i11 = offsetId;
                            cursor2 = cursor4;
                            lastMessage = lastMessage2;
                            dids = dids2;
                            dialogHashMap = dialogHashMap3;
                        }
                        a5++;
                        i = offset;
                        dialogHashMap3 = dialogHashMap;
                        cursor4 = cursor2;
                        totalDialogsLoadCount2 = totalDialogsLoadCount;
                        lastMessage2 = lastMessage;
                        dids2 = dids;
                    }
                    offsetId2 = offsetId;
                    cursor = cursor4;
                    TLRPC.Message lastMessage3 = lastMessage2;
                    StringBuilder sb = dids2;
                    LongSparseArray<TLRPC.Dialog> longSparseArray = dialogHashMap3;
                    if (lastMessage3 != null) {
                        lastMessage2 = lastMessage3;
                        if (lastMessage2.date < date && offset != -1) {
                            int i12 = 0;
                            while (i12 < 2) {
                                getUserConfig().setDialogsLoadOffset(i12, getUserConfig().migrateOffsetId, getUserConfig().migrateOffsetDate, getUserConfig().migrateOffsetUserId, getUserConfig().migrateOffsetChatId, getUserConfig().migrateOffsetChannelId, getUserConfig().migrateOffsetAccess);
                                i12++;
                                TLRPC.messages_Dialogs messages_dialogs2 = dialogsRes;
                                int i13 = offset;
                            }
                            if (BuildVars.LOGS_ENABLED) {
                                FileLog.d("migrate stop due to reached loaded dialogs " + LocaleController.getInstance().formatterStats.format(((long) date) * 1000));
                            }
                            offsetId2 = -1;
                        }
                    } else {
                        lastMessage2 = lastMessage3;
                    }
                } catch (Exception e) {
                    e = e;
                    TLRPC.messages_Dialogs messages_dialogs3 = dialogsRes;
                    FileLog.e((Throwable) e);
                    AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda110(this));
                }
            } else {
                cursor = cursor4;
                StringBuilder sb2 = dids2;
                LongSparseArray<TLRPC.Dialog> longSparseArray2 = dialogHashMap3;
                offsetId2 = offsetId;
            }
            cursor.dispose();
            getUserConfig().migrateOffsetDate = lastMessage2.date;
            if (lastMessage2.peer_id.channel_id != 0) {
                getUserConfig().migrateOffsetChannelId = lastMessage2.peer_id.channel_id;
                getUserConfig().migrateOffsetChatId = 0;
                getUserConfig().migrateOffsetUserId = 0;
                int a7 = 0;
                while (true) {
                    TLRPC.messages_Dialogs messages_dialogs4 = dialogsRes;
                    if (a7 >= messages_dialogs4.chats.size()) {
                        break;
                    }
                    TLRPC.Chat chat = messages_dialogs4.chats.get(a7);
                    if (chat.id == getUserConfig().migrateOffsetChannelId) {
                        getUserConfig().migrateOffsetAccess = chat.access_hash;
                        break;
                    }
                    a7++;
                }
            } else {
                TLRPC.messages_Dialogs messages_dialogs5 = dialogsRes;
                if (lastMessage2.peer_id.chat_id != 0) {
                    getUserConfig().migrateOffsetChatId = lastMessage2.peer_id.chat_id;
                    getUserConfig().migrateOffsetChannelId = 0;
                    getUserConfig().migrateOffsetUserId = 0;
                    int a8 = 0;
                    while (true) {
                        if (a8 >= messages_dialogs5.chats.size()) {
                            break;
                        }
                        TLRPC.Chat chat2 = messages_dialogs5.chats.get(a8);
                        if (chat2.id == getUserConfig().migrateOffsetChatId) {
                            getUserConfig().migrateOffsetAccess = chat2.access_hash;
                            break;
                        }
                        a8++;
                    }
                } else if (lastMessage2.peer_id.user_id != 0) {
                    getUserConfig().migrateOffsetUserId = lastMessage2.peer_id.user_id;
                    getUserConfig().migrateOffsetChatId = 0;
                    getUserConfig().migrateOffsetChannelId = 0;
                    int a9 = 0;
                    while (true) {
                        if (a9 >= messages_dialogs5.users.size()) {
                            break;
                        }
                        TLRPC.User user = messages_dialogs5.users.get(a9);
                        if (user.id == getUserConfig().migrateOffsetUserId) {
                            getUserConfig().migrateOffsetAccess = user.access_hash;
                            break;
                        }
                        a9++;
                    }
                }
            }
            SQLiteCursor sQLiteCursor = cursor;
            processLoadedDialogs(dialogsRes, (ArrayList<TLRPC.EncryptedChat>) null, 0, offsetId2, 0, 0, false, true, false);
        } catch (Exception e2) {
            e = e2;
            FileLog.e((Throwable) e);
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda110(this));
        }
    }

    /* renamed from: lambda$migrateDialogs$172$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m296xe9595286() {
        this.migratingDialogs = false;
    }

    /* renamed from: lambda$migrateDialogs$174$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m298xb3dCLASSNAME() {
        this.migratingDialogs = false;
    }

    public void processLoadedDialogs(TLRPC.messages_Dialogs dialogsRes, ArrayList<TLRPC.EncryptedChat> encChats, int folderId, int offset, int count, int loadType, boolean resetEnd, boolean migrate, boolean fromCache) {
        Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda299(this, folderId, loadType, dialogsRes, resetEnd, count, encChats, offset, fromCache, migrate));
    }

    /* renamed from: lambda$processLoadedDialogs$179$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m326x75e8fa04(int folderId, int loadType, TLRPC.messages_Dialogs dialogsRes, boolean resetEnd, int count, ArrayList encChats, int offset, boolean fromCache, boolean migrate) {
        SparseArray<TLRPC.EncryptedChat> enc_chats_dict;
        LongSparseArray<TLRPC.User> usersDict;
        LongSparseArray<MessageObject> new_dialogMessage;
        LongSparseArray<TLRPC.Dialog> new_dialogs_dict;
        ArrayList<MessageObject> newMessages;
        TLRPC.Message lastMessage;
        int i;
        LongSparseArray<MessageObject> new_dialogMessage2;
        LongSparseArray<TLRPC.Chat> chatsDict;
        LongSparseArray<TLRPC.User> usersDict2;
        LongSparseArray<TLRPC.User> usersDict3;
        LongSparseArray<MessageObject> new_dialogMessage3;
        LongSparseArray<TLRPC.Chat> chatsDict2;
        LongSparseArray<TLRPC.Chat> chatsDict3;
        LongSparseArray<MessageObject> new_dialogMessage4;
        LongSparseArray<TLRPC.Dialog> new_dialogs_dict2;
        ArrayList<MessageObject> newMessages2;
        SparseArray<TLRPC.EncryptedChat> enc_chats_dict2;
        LongSparseArray<MessageObject> new_dialogMessage5;
        LongSparseArray<TLRPC.Chat> chatsDict4;
        TLRPC.Chat chat;
        long dialogsLoadOffsetAccess;
        int dialogsLoadOffsetDate;
        int dialogsLoadOffsetId;
        LongSparseArray<TLRPC.User> usersDict4;
        long dialogsLoadOffsetAccess2;
        long dialogsLoadOffsetUserId;
        TLRPC.Message lastMessage2;
        int totalDialogsLoadCount;
        int dialogsLoadOffsetDate2;
        LongSparseArray<TLRPC.User> usersDict5;
        TLRPC.Message lastMessage3;
        int totalDialogsLoadCount2;
        TLRPC.Message lastMessage4;
        LongSparseArray<TLRPC.Chat> chatsDict5;
        SparseArray<TLRPC.EncryptedChat> enc_chats_dict3;
        ArrayList<MessageObject> newMessages3;
        ArrayList<MessageObject> newMessages4;
        SparseArray<TLRPC.EncryptedChat> enc_chats_dict4;
        TLRPC.Chat chat2;
        MessagesController messagesController = this;
        int i2 = folderId;
        int i3 = loadType;
        TLRPC.messages_Dialogs messages_dialogs = dialogsRes;
        ArrayList arrayList = encChats;
        if (!messagesController.firstGettingTask) {
            messagesController.getNewDeleteTask((LongSparseArray<ArrayList<Integer>>) null, (LongSparseArray<ArrayList<Integer>>) null);
            messagesController.firstGettingTask = true;
        }
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("loaded folderId " + i2 + " loadType " + i3 + " count " + messages_dialogs.dialogs.size());
        }
        long[] dialogsLoadOffset = getUserConfig().getDialogLoadOffsets(i2);
        if (i3 == messagesController.DIALOGS_LOAD_TYPE_CACHE && messages_dialogs.dialogs.size() == 0) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda101(this, dialogsRes, folderId, resetEnd, dialogsLoadOffset, count));
            return;
        }
        LongSparseArray<TLRPC.Dialog> new_dialogs_dict3 = new LongSparseArray<>();
        LongSparseArray<MessageObject> new_dialogMessage6 = new LongSparseArray<>();
        LongSparseArray<TLRPC.User> usersDict6 = new LongSparseArray<>();
        LongSparseArray<TLRPC.Chat> chatsDict6 = new LongSparseArray<>();
        for (int a = 0; a < messages_dialogs.users.size(); a++) {
            TLRPC.User u = messages_dialogs.users.get(a);
            usersDict6.put(u.id, u);
        }
        for (int a2 = 0; a2 < messages_dialogs.chats.size(); a2++) {
            TLRPC.Chat c = messages_dialogs.chats.get(a2);
            chatsDict6.put(c.id, c);
        }
        if (arrayList != null) {
            SparseArray<TLRPC.EncryptedChat> enc_chats_dict5 = new SparseArray<>();
            int N = encChats.size();
            for (int a3 = 0; a3 < N; a3++) {
                TLRPC.EncryptedChat encryptedChat = (TLRPC.EncryptedChat) arrayList.get(a3);
                enc_chats_dict5.put(encryptedChat.id, encryptedChat);
            }
            enc_chats_dict = enc_chats_dict5;
        } else {
            enc_chats_dict = null;
        }
        if (i3 == messagesController.DIALOGS_LOAD_TYPE_CACHE) {
            messagesController.nextDialogsCacheOffset.put(i2, offset + count);
        }
        ArrayList<MessageObject> newMessages5 = new ArrayList<>();
        TLRPC.Message lastMessage5 = null;
        int a4 = 0;
        while (a4 < messages_dialogs.messages.size()) {
            TLRPC.Message message = messages_dialogs.messages.get(a4);
            if (lastMessage5 == null || message.date < lastMessage5.date) {
                lastMessage4 = message;
            } else {
                lastMessage4 = lastMessage5;
            }
            int a5 = a4;
            if (message.peer_id.channel_id != 0) {
                TLRPC.Chat chat3 = chatsDict6.get(message.peer_id.channel_id);
                if (chat3 == null || !chat3.left) {
                    newMessages4 = newMessages5;
                    enc_chats_dict4 = enc_chats_dict;
                } else {
                    long j = messagesController.promoDialogId;
                    if (j != 0) {
                        newMessages4 = newMessages5;
                        enc_chats_dict4 = enc_chats_dict;
                        if (j != (-chat3.id)) {
                            chatsDict5 = chatsDict6;
                            enc_chats_dict3 = enc_chats_dict4;
                            newMessages3 = newMessages4;
                        }
                    } else {
                        chatsDict5 = chatsDict6;
                        enc_chats_dict3 = enc_chats_dict;
                        newMessages3 = newMessages5;
                    }
                    a4 = a5 + 1;
                    lastMessage5 = lastMessage4;
                    newMessages5 = newMessages3;
                    enc_chats_dict = enc_chats_dict3;
                    chatsDict6 = chatsDict5;
                    messagesController = this;
                }
            } else {
                newMessages4 = newMessages5;
                enc_chats_dict4 = enc_chats_dict;
                if (!(message.peer_id.chat_id == 0 || (chat2 = chatsDict6.get(message.peer_id.chat_id)) == null || chat2.migrated_to == null)) {
                    chatsDict5 = chatsDict6;
                    enc_chats_dict3 = enc_chats_dict4;
                    newMessages3 = newMessages4;
                    a4 = a5 + 1;
                    lastMessage5 = lastMessage4;
                    newMessages5 = newMessages3;
                    enc_chats_dict = enc_chats_dict3;
                    chatsDict6 = chatsDict5;
                    messagesController = this;
                }
            }
            newMessages3 = newMessages4;
            enc_chats_dict3 = enc_chats_dict4;
            chatsDict5 = chatsDict6;
            MessageObject messageObject = new MessageObject(messagesController.currentAccount, message, usersDict6, chatsDict6, false, false);
            newMessages3.add(messageObject);
            new_dialogMessage6.put(messageObject.getDialogId(), messageObject);
            a4 = a5 + 1;
            lastMessage5 = lastMessage4;
            newMessages5 = newMessages3;
            enc_chats_dict = enc_chats_dict3;
            chatsDict6 = chatsDict5;
            messagesController = this;
        }
        int i4 = a4;
        ArrayList<MessageObject> newMessages6 = newMessages5;
        SparseArray<TLRPC.EncryptedChat> enc_chats_dict6 = enc_chats_dict;
        LongSparseArray<TLRPC.Chat> chatsDict7 = chatsDict6;
        getFileLoader().checkMediaExistance(newMessages6);
        if (fromCache || migrate || dialogsLoadOffset[0] == -1 || i3 != 0) {
            usersDict = usersDict6;
            lastMessage = lastMessage5;
            new_dialogs_dict = new_dialogs_dict3;
            new_dialogMessage = new_dialogMessage6;
            newMessages = newMessages6;
            i = 0;
        } else {
            int totalDialogsLoadCount3 = getUserConfig().getTotalDialogsCount(i2);
            long dialogsLoadOffsetChatId = 0;
            long dialogsLoadOffsetAccess3 = 0;
            if (lastMessage5 != null) {
                dialogsLoadOffsetDate2 = 0;
                if (((long) lastMessage5.id) != dialogsLoadOffset[0]) {
                    int totalDialogsLoadCount4 = totalDialogsLoadCount3 + messages_dialogs.dialogs.size();
                    int dialogsLoadOffsetId2 = lastMessage5.id;
                    int dialogsLoadOffsetDate3 = lastMessage5.date;
                    if (lastMessage5.peer_id.channel_id != 0) {
                        long dialogsLoadOffsetChannelId = lastMessage5.peer_id.channel_id;
                        dialogsLoadOffsetChatId = 0;
                        int a6 = 0;
                        while (true) {
                            messages_dialogs = dialogsRes;
                            if (a6 >= messages_dialogs.chats.size()) {
                                usersDict4 = usersDict6;
                                totalDialogsLoadCount2 = totalDialogsLoadCount4;
                                break;
                            }
                            TLRPC.Chat chat4 = messages_dialogs.chats.get(a6);
                            usersDict4 = usersDict6;
                            totalDialogsLoadCount2 = totalDialogsLoadCount4;
                            if (chat4.id == dialogsLoadOffsetChannelId) {
                                dialogsLoadOffsetAccess3 = chat4.access_hash;
                                break;
                            }
                            a6++;
                            usersDict6 = usersDict4;
                            totalDialogsLoadCount4 = totalDialogsLoadCount2;
                        }
                        dialogsLoadOffsetId = dialogsLoadOffsetId2;
                        dialogsLoadOffsetDate = dialogsLoadOffsetDate3;
                        lastMessage2 = lastMessage5;
                        dialogsLoadOffsetAccess = dialogsLoadOffsetAccess3;
                        dialogsLoadOffsetAccess2 = 0;
                        dialogsLoadOffsetUserId = dialogsLoadOffsetChannelId;
                        totalDialogsLoadCount = totalDialogsLoadCount2;
                    } else {
                        messages_dialogs = dialogsRes;
                        usersDict4 = usersDict6;
                        int totalDialogsLoadCount5 = totalDialogsLoadCount4;
                        if (lastMessage5.peer_id.chat_id != 0) {
                            long dialogsLoadOffsetChatId2 = lastMessage5.peer_id.chat_id;
                            int a7 = 0;
                            while (true) {
                                if (a7 >= messages_dialogs.chats.size()) {
                                    dialogsLoadOffsetId = dialogsLoadOffsetId2;
                                    dialogsLoadOffsetDate = dialogsLoadOffsetDate3;
                                    break;
                                }
                                TLRPC.Chat chat5 = messages_dialogs.chats.get(a7);
                                dialogsLoadOffsetId = dialogsLoadOffsetId2;
                                dialogsLoadOffsetDate = dialogsLoadOffsetDate3;
                                if (chat5.id == dialogsLoadOffsetChatId2) {
                                    dialogsLoadOffsetAccess3 = chat5.access_hash;
                                    break;
                                }
                                a7++;
                                dialogsLoadOffsetId2 = dialogsLoadOffsetId;
                                dialogsLoadOffsetDate3 = dialogsLoadOffsetDate;
                            }
                            dialogsLoadOffsetChatId = dialogsLoadOffsetChatId2;
                            lastMessage2 = lastMessage5;
                            dialogsLoadOffsetAccess = dialogsLoadOffsetAccess3;
                            dialogsLoadOffsetAccess2 = 0;
                            dialogsLoadOffsetUserId = 0;
                            totalDialogsLoadCount = totalDialogsLoadCount5;
                        } else {
                            dialogsLoadOffsetId = dialogsLoadOffsetId2;
                            dialogsLoadOffsetDate = dialogsLoadOffsetDate3;
                            if (lastMessage5.peer_id.user_id != 0) {
                                long dialogsLoadOffsetUserId2 = lastMessage5.peer_id.user_id;
                                dialogsLoadOffsetChatId = 0;
                                long dialogsLoadOffsetChannelId2 = 0;
                                int a8 = 0;
                                while (true) {
                                    if (a8 >= messages_dialogs.users.size()) {
                                        lastMessage2 = lastMessage5;
                                        dialogsLoadOffsetUserId = dialogsLoadOffsetChannelId2;
                                        break;
                                    }
                                    TLRPC.User user = messages_dialogs.users.get(a8);
                                    lastMessage2 = lastMessage5;
                                    dialogsLoadOffsetUserId = dialogsLoadOffsetChannelId2;
                                    if (user.id == dialogsLoadOffsetUserId2) {
                                        dialogsLoadOffsetAccess3 = user.access_hash;
                                        break;
                                    }
                                    a8++;
                                    lastMessage5 = lastMessage2;
                                    dialogsLoadOffsetChannelId2 = dialogsLoadOffsetUserId;
                                }
                                dialogsLoadOffsetAccess = dialogsLoadOffsetAccess3;
                                totalDialogsLoadCount = totalDialogsLoadCount5;
                                dialogsLoadOffsetAccess2 = dialogsLoadOffsetUserId2;
                            } else {
                                lastMessage2 = lastMessage5;
                                dialogsLoadOffsetAccess = 0;
                                dialogsLoadOffsetAccess2 = 0;
                                dialogsLoadOffsetUserId = 0;
                                totalDialogsLoadCount = totalDialogsLoadCount5;
                            }
                        }
                    }
                    LongSparseArray<TLRPC.User> usersDict7 = usersDict4;
                    lastMessage = lastMessage2;
                    newMessages = newMessages6;
                    new_dialogs_dict = new_dialogs_dict3;
                    usersDict = usersDict7;
                    new_dialogMessage = new_dialogMessage6;
                    i = 0;
                    getUserConfig().setDialogsLoadOffset(folderId, dialogsLoadOffsetId, dialogsLoadOffsetDate, dialogsLoadOffsetAccess2, dialogsLoadOffsetChatId, dialogsLoadOffsetUserId, dialogsLoadOffsetAccess);
                    getUserConfig().setTotalDialogsCount(i2, totalDialogsLoadCount);
                    getUserConfig().saveConfig(false);
                } else {
                    usersDict5 = usersDict6;
                    lastMessage3 = lastMessage5;
                }
            } else {
                usersDict5 = usersDict6;
                dialogsLoadOffsetDate2 = 0;
                lastMessage3 = lastMessage5;
            }
            dialogsLoadOffsetId = Integer.MAX_VALUE;
            dialogsLoadOffsetDate = dialogsLoadOffsetDate2;
            dialogsLoadOffsetAccess = 0;
            dialogsLoadOffsetAccess2 = 0;
            dialogsLoadOffsetUserId = 0;
            totalDialogsLoadCount = totalDialogsLoadCount3;
            LongSparseArray<TLRPC.User> usersDict72 = usersDict4;
            lastMessage = lastMessage2;
            newMessages = newMessages6;
            new_dialogs_dict = new_dialogs_dict3;
            usersDict = usersDict72;
            new_dialogMessage = new_dialogMessage6;
            i = 0;
            getUserConfig().setDialogsLoadOffset(folderId, dialogsLoadOffsetId, dialogsLoadOffsetDate, dialogsLoadOffsetAccess2, dialogsLoadOffsetChatId, dialogsLoadOffsetUserId, dialogsLoadOffsetAccess);
            getUserConfig().setTotalDialogsCount(i2, totalDialogsLoadCount);
            getUserConfig().saveConfig(false);
        }
        ArrayList<TLRPC.Dialog> dialogsToReload = new ArrayList<>();
        int a9 = 0;
        while (a9 < messages_dialogs.dialogs.size()) {
            TLRPC.Dialog d = messages_dialogs.dialogs.get(a9);
            DialogObject.initDialog(d);
            if (d.id == 0) {
                int i5 = loadType;
                enc_chats_dict2 = enc_chats_dict6;
                chatsDict4 = chatsDict7;
                newMessages2 = newMessages;
                new_dialogs_dict2 = new_dialogs_dict;
                new_dialogMessage5 = new_dialogMessage;
            } else {
                if (DialogObject.isEncryptedDialog(d.id)) {
                    enc_chats_dict2 = enc_chats_dict6;
                    if (enc_chats_dict2 != null && enc_chats_dict2.get(DialogObject.getEncryptedChatId(d.id)) == null) {
                        int i6 = loadType;
                        chatsDict4 = chatsDict7;
                        newMessages2 = newMessages;
                        new_dialogs_dict2 = new_dialogs_dict;
                        new_dialogMessage5 = new_dialogMessage;
                    }
                } else {
                    enc_chats_dict2 = enc_chats_dict6;
                }
                newMessages2 = newMessages;
                long j2 = this.promoDialogId;
                if (j2 != 0 && j2 == d.id) {
                    this.promoDialog = d;
                }
                if (d.last_message_date == 0) {
                    new_dialogMessage5 = new_dialogMessage;
                    MessageObject mess = new_dialogMessage5.get(d.id);
                    if (mess != null) {
                        d.last_message_date = mess.messageOwner.date;
                    }
                } else {
                    new_dialogMessage5 = new_dialogMessage;
                }
                boolean allowCheck = true;
                if (DialogObject.isChannel(d)) {
                    chatsDict4 = chatsDict7;
                    TLRPC.Chat chat6 = chatsDict4.get(-d.id);
                    if (chat6 != null) {
                        if (!chat6.megagroup) {
                            allowCheck = false;
                        }
                        if (ChatObject.isNotInChat(chat6)) {
                            long j3 = this.promoDialogId;
                            if (j3 == 0) {
                                int i7 = loadType;
                                new_dialogs_dict2 = new_dialogs_dict;
                            } else if (j3 != d.id) {
                                int i8 = loadType;
                                new_dialogs_dict2 = new_dialogs_dict;
                            }
                        }
                    }
                    this.channelsPts.put(-d.id, d.pts);
                } else {
                    chatsDict4 = chatsDict7;
                    if (DialogObject.isChatDialog(d.id) && (chat = chatsDict4.get(-d.id)) != null) {
                        if (chat.migrated_to != null) {
                            int i9 = loadType;
                            new_dialogs_dict2 = new_dialogs_dict;
                        } else if (ChatObject.isNotInChat(chat)) {
                            int i10 = loadType;
                            new_dialogs_dict2 = new_dialogs_dict;
                        }
                    }
                }
                LongSparseArray<TLRPC.Dialog> new_dialogs_dict4 = new_dialogs_dict;
                new_dialogs_dict4.put(d.id, d);
                if (allowCheck) {
                    new_dialogs_dict2 = new_dialogs_dict4;
                    if (loadType == this.DIALOGS_LOAD_TYPE_CACHE && ((d.read_outbox_max_id == 0 || d.read_inbox_max_id == 0) && d.top_message != 0)) {
                        dialogsToReload.add(d);
                    }
                } else {
                    int i11 = loadType;
                    new_dialogs_dict2 = new_dialogs_dict4;
                }
                Integer value = this.dialogs_read_inbox_max.get(Long.valueOf(d.id));
                if (value == null) {
                    value = Integer.valueOf(i);
                }
                this.dialogs_read_inbox_max.put(Long.valueOf(d.id), Integer.valueOf(Math.max(value.intValue(), d.read_inbox_max_id)));
                Integer value2 = this.dialogs_read_outbox_max.get(Long.valueOf(d.id));
                if (value2 == null) {
                    value2 = 0;
                }
                this.dialogs_read_outbox_max.put(Long.valueOf(d.id), Integer.valueOf(Math.max(value2.intValue(), d.read_outbox_max_id)));
            }
            a9++;
            chatsDict7 = chatsDict4;
            new_dialogMessage = new_dialogMessage5;
            enc_chats_dict6 = enc_chats_dict2;
            newMessages = newMessages2;
            new_dialogs_dict = new_dialogs_dict2;
            i = 0;
        }
        int i12 = loadType;
        SparseArray<TLRPC.EncryptedChat> enc_chats_dict7 = enc_chats_dict6;
        LongSparseArray<TLRPC.Chat> chatsDict8 = chatsDict7;
        ArrayList<MessageObject> arrayList2 = newMessages;
        LongSparseArray<TLRPC.Dialog> new_dialogs_dict5 = new_dialogs_dict;
        LongSparseArray<MessageObject> new_dialogMessage7 = new_dialogMessage;
        if (i12 != this.DIALOGS_LOAD_TYPE_CACHE) {
            ImageLoader.saveMessagesThumbs(messages_dialogs.messages);
            int a10 = 0;
            while (a10 < messages_dialogs.messages.size()) {
                TLRPC.Message message2 = messages_dialogs.messages.get(a10);
                if (message2.action instanceof TLRPC.TL_messageActionChatDeleteUser) {
                    usersDict3 = usersDict;
                    TLRPC.User user2 = usersDict3.get(message2.action.user_id);
                    if (user2 != null && user2.bot) {
                        message2.reply_markup = new TLRPC.TL_replyKeyboardHide();
                        message2.flags |= 64;
                    }
                } else {
                    usersDict3 = usersDict;
                }
                if (message2.action instanceof TLRPC.TL_messageActionChatMigrateTo) {
                    chatsDict3 = chatsDict8;
                    new_dialogMessage4 = new_dialogMessage7;
                } else if (message2.action instanceof TLRPC.TL_messageActionChannelCreate) {
                    chatsDict3 = chatsDict8;
                    new_dialogMessage4 = new_dialogMessage7;
                } else {
                    ConcurrentHashMap<Long, Integer> concurrentHashMap = message2.out ? this.dialogs_read_outbox_max : this.dialogs_read_inbox_max;
                    Integer value3 = concurrentHashMap.get(Long.valueOf(message2.dialog_id));
                    if (value3 == null) {
                        chatsDict2 = chatsDict8;
                        new_dialogMessage3 = new_dialogMessage7;
                        value3 = Integer.valueOf(getMessagesStorage().getDialogReadMax(message2.out, message2.dialog_id));
                        concurrentHashMap.put(Long.valueOf(message2.dialog_id), value3);
                    } else {
                        chatsDict2 = chatsDict8;
                        new_dialogMessage3 = new_dialogMessage7;
                    }
                    message2.unread = value3.intValue() < message2.id;
                    a10++;
                    usersDict = usersDict3;
                    chatsDict8 = chatsDict2;
                    new_dialogMessage7 = new_dialogMessage3;
                }
                message2.unread = false;
                message2.media_unread = false;
                a10++;
                usersDict = usersDict3;
                chatsDict8 = chatsDict2;
                new_dialogMessage7 = new_dialogMessage3;
            }
            chatsDict = chatsDict8;
            new_dialogMessage2 = new_dialogMessage7;
            usersDict2 = usersDict;
            getMessagesStorage().putDialogs(messages_dialogs, i12 == this.DIALOGS_LOAD_TYPE_UNKNOWN ? 3 : 0);
        } else {
            chatsDict = chatsDict8;
            new_dialogMessage2 = new_dialogMessage7;
            usersDict2 = usersDict;
        }
        if (i12 == this.DIALOGS_LOAD_TYPE_CHANNEL) {
            TLRPC.Chat chat7 = messages_dialogs.chats.get(0);
            getChannelDifference(chat7.id);
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda52(this, chat7));
        }
        SparseArray<TLRPC.EncryptedChat> sparseArray = enc_chats_dict7;
        LongSparseArray<TLRPC.User> longSparseArray = usersDict2;
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda62(this, lastMessage, loadType, dialogsRes, encChats, migrate, folderId, new_dialogs_dict5, new_dialogMessage2, chatsDict, count, fromCache, offset, dialogsToReload));
    }

    /* renamed from: lambda$processLoadedDialogs$176$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m323xCLASSNAMEadc1(TLRPC.messages_Dialogs dialogsRes, int folderId, boolean resetEnd, long[] dialogsLoadOffset, int count) {
        putUsers(dialogsRes.users, true);
        this.loadingDialogs.put(folderId, false);
        if (resetEnd) {
            this.dialogsEndReached.put(folderId, false);
            this.serverDialogsEndReached.put(folderId, false);
        } else if (dialogsLoadOffset[0] == 2147483647L) {
            this.dialogsEndReached.put(folderId, true);
            this.serverDialogsEndReached.put(folderId, true);
        } else {
            loadDialogs(folderId, 0, count, false);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    /* renamed from: lambda$processLoadedDialogs$177$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m324xab661CLASSNAME(TLRPC.Chat chat) {
        checkChatInviter(chat.id, true);
    }

    /* JADX WARNING: Code restructure failed: missing block: B:134:0x02b2, code lost:
        if (r14.dialogs.size() != r7) goto L_0x02b7;
     */
    /* JADX WARNING: Removed duplicated region for block: B:149:0x02e7  */
    /* renamed from: lambda$processLoadedDialogs$178$org-telegram-messenger-MessagesController  reason: not valid java name */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void m325x90a78b43(org.telegram.tgnet.TLRPC.Message r31, int r32, org.telegram.tgnet.TLRPC.messages_Dialogs r33, java.util.ArrayList r34, boolean r35, int r36, androidx.collection.LongSparseArray r37, androidx.collection.LongSparseArray r38, androidx.collection.LongSparseArray r39, int r40, boolean r41, int r42, java.util.ArrayList r43) {
        /*
            r30 = this;
            r11 = r30
            r12 = r31
            r13 = r32
            r14 = r33
            r15 = r34
            r9 = r36
            r10 = r37
            r7 = r40
            if (r12 == 0) goto L_0x001d
            int r0 = r11.dialogsLoadedTillDate
            int r1 = r12.date
            int r0 = java.lang.Math.min(r0, r1)
            r11.dialogsLoadedTillDate = r0
            goto L_0x0021
        L_0x001d:
            r0 = -2147483648(0xfffffffvar_, float:-0.0)
            r11.dialogsLoadedTillDate = r0
        L_0x0021:
            int r0 = r11.DIALOGS_LOAD_TYPE_CACHE
            if (r13 == r0) goto L_0x0031
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r0 = r14.dialogs
            r11.applyDialogsNotificationsSettings(r0)
            org.telegram.messenger.MediaDataController r0 = r30.getMediaDataController()
            r0.loadDraftsIfNeed()
        L_0x0031:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r0 = r14.users
            int r1 = r11.DIALOGS_LOAD_TYPE_CACHE
            r2 = 1
            r3 = 0
            if (r13 != r1) goto L_0x003b
            r1 = 1
            goto L_0x003c
        L_0x003b:
            r1 = 0
        L_0x003c:
            r11.putUsers(r0, r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r0 = r14.chats
            int r1 = r11.DIALOGS_LOAD_TYPE_CACHE
            if (r13 != r1) goto L_0x0047
            r1 = 1
            goto L_0x0048
        L_0x0047:
            r1 = 0
        L_0x0048:
            r11.putChats(r0, r1)
            r0 = 0
            if (r15 == 0) goto L_0x0076
            r1 = 0
        L_0x004f:
            int r4 = r34.size()
            if (r1 >= r4) goto L_0x0076
            java.lang.Object r4 = r15.get(r1)
            org.telegram.tgnet.TLRPC$EncryptedChat r4 = (org.telegram.tgnet.TLRPC.EncryptedChat) r4
            boolean r5 = r4 instanceof org.telegram.tgnet.TLRPC.TL_encryptedChat
            if (r5 == 0) goto L_0x0070
            int r5 = r4.layer
            int r5 = org.telegram.messenger.AndroidUtilities.getMyLayerVersion(r5)
            int r6 = org.telegram.messenger.SecretChatHelper.CURRENT_SECRET_CHAT_LAYER
            if (r5 >= r6) goto L_0x0070
            org.telegram.messenger.SecretChatHelper r5 = r30.getSecretChatHelper()
            r5.sendNotifyLayerMessage(r4, r0)
        L_0x0070:
            r11.putEncryptedChat(r4, r2)
            int r1 = r1 + 1
            goto L_0x004f
        L_0x0076:
            if (r35 != 0) goto L_0x0085
            int r1 = r11.DIALOGS_LOAD_TYPE_UNKNOWN
            if (r13 == r1) goto L_0x0085
            int r1 = r11.DIALOGS_LOAD_TYPE_CHANNEL
            if (r13 == r1) goto L_0x0085
            android.util.SparseBooleanArray r1 = r11.loadingDialogs
            r1.put(r9, r3)
        L_0x0085:
            r1 = 0
            r11.dialogsLoaded = r2
            r4 = 0
            if (r35 == 0) goto L_0x00a3
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r5 = r11.allDialogs
            boolean r5 = r5.isEmpty()
            if (r5 != 0) goto L_0x00a3
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r5 = r11.allDialogs
            int r6 = r5.size()
            int r6 = r6 - r2
            java.lang.Object r5 = r5.get(r6)
            org.telegram.tgnet.TLRPC$Dialog r5 = (org.telegram.tgnet.TLRPC.Dialog) r5
            int r5 = r5.last_message_date
            goto L_0x00a4
        L_0x00a3:
            r5 = 0
        L_0x00a4:
            r8 = r5
            r5 = 0
            r16 = r1
            r1 = r5
            r5 = r4
        L_0x00aa:
            int r4 = r37.size()
            if (r1 >= r4) goto L_0x025a
            long r6 = r10.keyAt(r1)
            java.lang.Object r18 = r10.valueAt(r1)
            r0 = r18
            org.telegram.tgnet.TLRPC$Dialog r0 = (org.telegram.tgnet.TLRPC.Dialog) r0
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r4 = r11.dialogs_dict
            java.lang.Object r4 = r4.get(r6)
            org.telegram.tgnet.TLRPC$Dialog r4 = (org.telegram.tgnet.TLRPC.Dialog) r4
            if (r35 == 0) goto L_0x00cc
            if (r4 == 0) goto L_0x00cc
            int r2 = r0.folder_id
            r4.folder_id = r2
        L_0x00cc:
            if (r35 == 0) goto L_0x00d8
            if (r8 == 0) goto L_0x00d8
            int r2 = r0.last_message_date
            if (r2 >= r8) goto L_0x00d8
            r29 = r8
            goto L_0x024b
        L_0x00d8:
            int r2 = r11.DIALOGS_LOAD_TYPE_CACHE
            if (r13 == r2) goto L_0x00fa
            org.telegram.tgnet.TLRPC$DraftMessage r2 = r0.draft
            boolean r2 = r2 instanceof org.telegram.tgnet.TLRPC.TL_draftMessage
            if (r2 == 0) goto L_0x00fa
            org.telegram.messenger.MediaDataController r22 = r30.getMediaDataController()
            long r2 = r0.id
            r25 = 0
            r29 = r8
            org.telegram.tgnet.TLRPC$DraftMessage r8 = r0.draft
            r27 = 0
            r28 = 0
            r23 = r2
            r26 = r8
            r22.saveDraft(r23, r25, r26, r27, r28)
            goto L_0x00fc
        L_0x00fa:
            r29 = r8
        L_0x00fc:
            int r2 = r0.folder_id
            if (r2 == r9) goto L_0x0102
            int r5 = r5 + 1
        L_0x0102:
            long r2 = r0.id
            r8 = r38
            java.lang.Object r2 = r8.get(r2)
            org.telegram.messenger.MessageObject r2 = (org.telegram.messenger.MessageObject) r2
            if (r4 != 0) goto L_0x0145
            r3 = 1
            r16 = r3
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r3 = r11.dialogs_dict
            r3.put(r6, r0)
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r3 = r11.dialogMessage
            r3.put(r6, r2)
            if (r2 == 0) goto L_0x024b
            org.telegram.tgnet.TLRPC$Message r3 = r2.messageOwner
            org.telegram.tgnet.TLRPC$Peer r3 = r3.peer_id
            long r8 = r3.channel_id
            r20 = 0
            int r3 = (r8 > r20 ? 1 : (r8 == r20 ? 0 : -1))
            if (r3 != 0) goto L_0x024b
            android.util.SparseArray<org.telegram.messenger.MessageObject> r3 = r11.dialogMessagesByIds
            int r8 = r2.getId()
            r3.put(r8, r2)
            org.telegram.tgnet.TLRPC$Message r3 = r2.messageOwner
            long r8 = r3.random_id
            int r3 = (r8 > r20 ? 1 : (r8 == r20 ? 0 : -1))
            if (r3 == 0) goto L_0x024b
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r3 = r11.dialogMessagesByRandomIds
            org.telegram.tgnet.TLRPC$Message r8 = r2.messageOwner
            long r8 = r8.random_id
            r3.put(r8, r2)
            goto L_0x024b
        L_0x0145:
            int r3 = r11.DIALOGS_LOAD_TYPE_CACHE
            if (r13 == r3) goto L_0x014d
            org.telegram.tgnet.TLRPC$PeerNotifySettings r3 = r0.notify_settings
            r4.notify_settings = r3
        L_0x014d:
            boolean r3 = r0.pinned
            r4.pinned = r3
            int r3 = r0.pinnedNum
            r4.pinnedNum = r3
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r3 = r11.dialogMessage
            java.lang.Object r3 = r3.get(r6)
            org.telegram.messenger.MessageObject r3 = (org.telegram.messenger.MessageObject) r3
            if (r3 == 0) goto L_0x0163
            boolean r8 = r3.deleted
            if (r8 != 0) goto L_0x01d9
        L_0x0163:
            if (r3 == 0) goto L_0x01d9
            int r8 = r4.top_message
            if (r8 <= 0) goto L_0x016a
            goto L_0x01d9
        L_0x016a:
            if (r2 != 0) goto L_0x0172
            int r8 = r3.getId()
            if (r8 > 0) goto L_0x017e
        L_0x0172:
            if (r2 == 0) goto L_0x024b
            org.telegram.tgnet.TLRPC$Message r8 = r2.messageOwner
            int r8 = r8.date
            org.telegram.tgnet.TLRPC$Message r9 = r3.messageOwner
            int r9 = r9.date
            if (r8 <= r9) goto L_0x024b
        L_0x017e:
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r8 = r11.dialogs_dict
            r8.put(r6, r0)
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r8 = r11.dialogMessage
            r8.put(r6, r2)
            org.telegram.tgnet.TLRPC$Message r8 = r3.messageOwner
            org.telegram.tgnet.TLRPC$Peer r8 = r8.peer_id
            long r8 = r8.channel_id
            r20 = 0
            int r22 = (r8 > r20 ? 1 : (r8 == r20 ? 0 : -1))
            if (r22 != 0) goto L_0x019d
            android.util.SparseArray<org.telegram.messenger.MessageObject> r8 = r11.dialogMessagesByIds
            int r9 = r3.getId()
            r8.remove(r9)
        L_0x019d:
            if (r2 == 0) goto L_0x01c5
            org.telegram.tgnet.TLRPC$Message r8 = r2.messageOwner
            org.telegram.tgnet.TLRPC$Peer r8 = r8.peer_id
            long r8 = r8.channel_id
            r20 = 0
            int r22 = (r8 > r20 ? 1 : (r8 == r20 ? 0 : -1))
            if (r22 != 0) goto L_0x01c5
            android.util.SparseArray<org.telegram.messenger.MessageObject> r8 = r11.dialogMessagesByIds
            int r9 = r2.getId()
            r8.put(r9, r2)
            org.telegram.tgnet.TLRPC$Message r8 = r2.messageOwner
            long r8 = r8.random_id
            int r22 = (r8 > r20 ? 1 : (r8 == r20 ? 0 : -1))
            if (r22 == 0) goto L_0x01c5
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r8 = r11.dialogMessagesByRandomIds
            org.telegram.tgnet.TLRPC$Message r9 = r2.messageOwner
            long r9 = r9.random_id
            r8.put(r9, r2)
        L_0x01c5:
            org.telegram.tgnet.TLRPC$Message r8 = r3.messageOwner
            long r8 = r8.random_id
            r20 = 0
            int r10 = (r8 > r20 ? 1 : (r8 == r20 ? 0 : -1))
            if (r10 == 0) goto L_0x024b
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r8 = r11.dialogMessagesByRandomIds
            org.telegram.tgnet.TLRPC$Message r9 = r3.messageOwner
            long r9 = r9.random_id
            r8.remove(r9)
            goto L_0x024b
        L_0x01d9:
            int r8 = r0.top_message
            int r9 = r4.top_message
            if (r8 < r9) goto L_0x024b
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r8 = r11.dialogs_dict
            r8.put(r6, r0)
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r8 = r11.dialogMessage
            r8.put(r6, r2)
            if (r3 == 0) goto L_0x0213
            org.telegram.tgnet.TLRPC$Message r8 = r3.messageOwner
            org.telegram.tgnet.TLRPC$Peer r8 = r8.peer_id
            long r8 = r8.channel_id
            r20 = 0
            int r10 = (r8 > r20 ? 1 : (r8 == r20 ? 0 : -1))
            if (r10 != 0) goto L_0x0200
            android.util.SparseArray<org.telegram.messenger.MessageObject> r8 = r11.dialogMessagesByIds
            int r9 = r3.getId()
            r8.remove(r9)
        L_0x0200:
            org.telegram.tgnet.TLRPC$Message r8 = r3.messageOwner
            long r8 = r8.random_id
            r20 = 0
            int r10 = (r8 > r20 ? 1 : (r8 == r20 ? 0 : -1))
            if (r10 == 0) goto L_0x0213
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r8 = r11.dialogMessagesByRandomIds
            org.telegram.tgnet.TLRPC$Message r9 = r3.messageOwner
            long r9 = r9.random_id
            r8.remove(r9)
        L_0x0213:
            if (r2 == 0) goto L_0x024b
            if (r3 == 0) goto L_0x0225
            int r8 = r3.getId()
            int r9 = r2.getId()
            if (r8 != r9) goto L_0x0225
            boolean r8 = r3.deleted
            r2.deleted = r8
        L_0x0225:
            org.telegram.tgnet.TLRPC$Message r8 = r2.messageOwner
            org.telegram.tgnet.TLRPC$Peer r8 = r8.peer_id
            long r8 = r8.channel_id
            r20 = 0
            int r10 = (r8 > r20 ? 1 : (r8 == r20 ? 0 : -1))
            if (r10 != 0) goto L_0x024b
            android.util.SparseArray<org.telegram.messenger.MessageObject> r8 = r11.dialogMessagesByIds
            int r9 = r2.getId()
            r8.put(r9, r2)
            org.telegram.tgnet.TLRPC$Message r8 = r2.messageOwner
            long r8 = r8.random_id
            int r10 = (r8 > r20 ? 1 : (r8 == r20 ? 0 : -1))
            if (r10 == 0) goto L_0x024b
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r8 = r11.dialogMessagesByRandomIds
            org.telegram.tgnet.TLRPC$Message r9 = r2.messageOwner
            long r9 = r9.random_id
            r8.put(r9, r2)
        L_0x024b:
            int r1 = r1 + 1
            r9 = r36
            r10 = r37
            r7 = r40
            r8 = r29
            r0 = 0
            r2 = 1
            r3 = 0
            goto L_0x00aa
        L_0x025a:
            r29 = r8
            r20 = 0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r0 = r11.allDialogs
            r0.clear()
            r0 = 0
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r1 = r11.dialogs_dict
            int r1 = r1.size()
        L_0x026a:
            if (r0 >= r1) goto L_0x0287
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r2 = r11.dialogs_dict
            java.lang.Object r2 = r2.valueAt(r0)
            org.telegram.tgnet.TLRPC$Dialog r2 = (org.telegram.tgnet.TLRPC.Dialog) r2
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r3 = r11.deletingDialogs
            long r6 = r2.id
            int r3 = r3.indexOfKey(r6)
            if (r3 < 0) goto L_0x027f
            goto L_0x0284
        L_0x027f:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r3 = r11.allDialogs
            r3.add(r2)
        L_0x0284:
            int r0 = r0 + 1
            goto L_0x026a
        L_0x0287:
            if (r35 == 0) goto L_0x028c
            r0 = r39
            goto L_0x028d
        L_0x028c:
            r0 = 0
        L_0x028d:
            r11.sortDialogs(r0)
            r30.putAllNeededDraftDialogs()
            int r0 = r11.DIALOGS_LOAD_TYPE_CHANNEL
            r1 = 2147483647(0x7fffffff, double:1.060997895E-314)
            if (r13 == r0) goto L_0x0306
            int r0 = r11.DIALOGS_LOAD_TYPE_UNKNOWN
            if (r13 == r0) goto L_0x0306
            if (r35 != 0) goto L_0x0301
            android.util.SparseBooleanArray r0 = r11.dialogsEndReached
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r3 = r14.dialogs
            int r3 = r3.size()
            if (r3 == 0) goto L_0x02b5
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r3 = r14.dialogs
            int r3 = r3.size()
            r7 = r40
            if (r3 == r7) goto L_0x02bb
            goto L_0x02b7
        L_0x02b5:
            r7 = r40
        L_0x02b7:
            if (r13 != 0) goto L_0x02bb
            r3 = 1
            goto L_0x02bc
        L_0x02bb:
            r3 = 0
        L_0x02bc:
            r9 = r36
            r0.put(r9, r3)
            if (r5 <= 0) goto L_0x02e4
            r0 = 20
            if (r5 >= r0) goto L_0x02e4
            if (r9 != 0) goto L_0x02e4
            android.util.SparseBooleanArray r0 = r11.dialogsEndReached
            r3 = 1
            r0.put(r3, r3)
            org.telegram.messenger.UserConfig r0 = r30.getUserConfig()
            long[] r0 = r0.getDialogLoadOffsets(r9)
            r4 = 0
            r18 = r0[r4]
            int r4 = (r18 > r1 ? 1 : (r18 == r1 ? 0 : -1))
            if (r4 != 0) goto L_0x02e5
            android.util.SparseBooleanArray r4 = r11.serverDialogsEndReached
            r4.put(r3, r3)
            goto L_0x02e5
        L_0x02e4:
            r3 = 1
        L_0x02e5:
            if (r41 != 0) goto L_0x030a
            android.util.SparseBooleanArray r0 = r11.serverDialogsEndReached
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r4 = r14.dialogs
            int r4 = r4.size()
            if (r4 == 0) goto L_0x02f9
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r4 = r14.dialogs
            int r4 = r4.size()
            if (r4 == r7) goto L_0x02fc
        L_0x02f9:
            if (r13 != 0) goto L_0x02fc
            goto L_0x02fd
        L_0x02fc:
            r3 = 0
        L_0x02fd:
            r0.put(r9, r3)
            goto L_0x030a
        L_0x0301:
            r9 = r36
            r7 = r40
            goto L_0x030a
        L_0x0306:
            r9 = r36
            r7 = r40
        L_0x030a:
            org.telegram.messenger.UserConfig r0 = r30.getUserConfig()
            int r10 = r0.getTotalDialogsCount(r9)
            org.telegram.messenger.UserConfig r0 = r30.getUserConfig()
            long[] r18 = r0.getDialogLoadOffsets(r9)
            if (r41 != 0) goto L_0x0336
            if (r35 != 0) goto L_0x0336
            r0 = 400(0x190, float:5.6E-43)
            if (r10 >= r0) goto L_0x0336
            r0 = 0
            r3 = r18[r0]
            r22 = -1
            int r6 = (r3 > r22 ? 1 : (r3 == r22 ? 0 : -1))
            if (r6 == 0) goto L_0x0336
            r3 = r18[r0]
            int r6 = (r3 > r1 ? 1 : (r3 == r1 ? 0 : -1))
            if (r6 == 0) goto L_0x0336
            r1 = 100
            r11.loadDialogs(r9, r0, r1, r0)
        L_0x0336:
            org.telegram.messenger.NotificationCenter r0 = r30.getNotificationCenter()
            int r1 = org.telegram.messenger.NotificationCenter.dialogsNeedReload
            r2 = 0
            java.lang.Object[] r3 = new java.lang.Object[r2]
            r0.postNotificationName(r1, r3)
            if (r35 == 0) goto L_0x0361
            org.telegram.messenger.UserConfig r0 = r30.getUserConfig()
            r8 = r42
            r0.migrateOffsetId = r8
            org.telegram.messenger.UserConfig r0 = r30.getUserConfig()
            r0.saveConfig(r2)
            r11.migratingDialogs = r2
            org.telegram.messenger.NotificationCenter r0 = r30.getNotificationCenter()
            int r1 = org.telegram.messenger.NotificationCenter.needReloadRecentDialogsSearch
            java.lang.Object[] r2 = new java.lang.Object[r2]
            r0.postNotificationName(r1, r2)
            goto L_0x0378
        L_0x0361:
            r8 = r42
            r30.generateUpdateMessage()
            if (r16 != 0) goto L_0x0378
            int r0 = r11.DIALOGS_LOAD_TYPE_CACHE
            if (r13 != r0) goto L_0x0378
            android.util.SparseBooleanArray r0 = r11.dialogsEndReached
            boolean r0 = r0.get(r9)
            if (r0 == 0) goto L_0x0378
            r0 = 0
            r11.loadDialogs(r9, r0, r7, r0)
        L_0x0378:
            org.telegram.messenger.UserConfig r0 = r30.getUserConfig()
            int r1 = r0.migrateOffsetId
            org.telegram.messenger.UserConfig r0 = r30.getUserConfig()
            int r2 = r0.migrateOffsetDate
            org.telegram.messenger.UserConfig r0 = r30.getUserConfig()
            long r3 = r0.migrateOffsetUserId
            org.telegram.messenger.UserConfig r0 = r30.getUserConfig()
            r17 = r5
            long r5 = r0.migrateOffsetChatId
            org.telegram.messenger.UserConfig r0 = r30.getUserConfig()
            long r7 = r0.migrateOffsetChannelId
            org.telegram.messenger.UserConfig r0 = r30.getUserConfig()
            r19 = r10
            long r9 = r0.migrateOffsetAccess
            r0 = r30
            r12 = r20
            r20 = r29
            r0.migrateDialogs(r1, r2, r3, r5, r7, r9)
            boolean r0 = r43.isEmpty()
            if (r0 != 0) goto L_0x03b5
            r0 = r43
            r11.reloadDialogsReadValue(r0, r12)
            goto L_0x03b7
        L_0x03b5:
            r0 = r43
        L_0x03b7:
            r30.loadUnreadDialogs()
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.m325x90a78b43(org.telegram.tgnet.TLRPC$Message, int, org.telegram.tgnet.TLRPC$messages_Dialogs, java.util.ArrayList, boolean, int, androidx.collection.LongSparseArray, androidx.collection.LongSparseArray, androidx.collection.LongSparseArray, int, boolean, int, java.util.ArrayList):void");
    }

    private void applyDialogNotificationsSettings(long dialogId, TLRPC.PeerNotifySettings notify_settings) {
        boolean updated;
        long j = dialogId;
        TLRPC.PeerNotifySettings peerNotifySettings = notify_settings;
        if (peerNotifySettings != null) {
            SharedPreferences sharedPreferences = this.notificationsPreferences;
            int currentValue = sharedPreferences.getInt("notify2_" + j, -1);
            SharedPreferences sharedPreferences2 = this.notificationsPreferences;
            int currentValue2 = sharedPreferences2.getInt("notifyuntil_" + j, 0);
            SharedPreferences.Editor editor = this.notificationsPreferences.edit();
            boolean updated2 = false;
            TLRPC.Dialog dialog = this.dialogs_dict.get(j);
            if (dialog != null) {
                dialog.notify_settings = peerNotifySettings;
            }
            if ((peerNotifySettings.flags & 2) != 0) {
                editor.putBoolean("silent_" + j, peerNotifySettings.silent);
            } else {
                editor.remove("silent_" + j);
            }
            String str = "notifyuntil_";
            if ((peerNotifySettings.flags & 4) == 0) {
                if (currentValue != -1) {
                    updated2 = true;
                    if (dialog != null) {
                        dialog.notify_settings.mute_until = 0;
                    }
                    editor.remove("notify2_" + j);
                }
                getMessagesStorage().setDialogFlags(j, 0);
                updated = updated2;
            } else if (peerNotifySettings.mute_until > getConnectionsManager().getCurrentTime()) {
                int until = 0;
                if (peerNotifySettings.mute_until <= getConnectionsManager().getCurrentTime() + 31536000) {
                    if (!(currentValue == 3 && currentValue2 == peerNotifySettings.mute_until)) {
                        updated2 = true;
                        editor.putInt("notify2_" + j, 3);
                        editor.putInt(str + j, peerNotifySettings.mute_until);
                        if (dialog != null) {
                            dialog.notify_settings.mute_until = 0;
                        }
                    }
                    until = peerNotifySettings.mute_until;
                } else if (currentValue != 2) {
                    updated2 = true;
                    editor.putInt("notify2_" + j, 2);
                    if (dialog != null) {
                        dialog.notify_settings.mute_until = Integer.MAX_VALUE;
                    }
                }
                getMessagesStorage().setDialogFlags(j, (((long) until) << 32) | 1);
                getNotificationsController().removeNotificationsForDialog(j);
                updated = updated2;
            } else {
                if (!(currentValue == 0 || currentValue == 1)) {
                    updated2 = true;
                    if (dialog != null) {
                        dialog.notify_settings.mute_until = 0;
                    }
                    editor.putInt("notify2_" + j, 0);
                }
                getMessagesStorage().setDialogFlags(j, 0);
                updated = updated2;
            }
            applySoundSettings(peerNotifySettings.android_sound, editor, dialogId, 0, false);
            editor.commit();
            if (updated) {
                getNotificationCenter().postNotificationName(NotificationCenter.notificationsSettingsUpdated, new Object[0]);
            }
        }
    }

    private void applyDialogsNotificationsSettings(ArrayList<TLRPC.Dialog> dialogs) {
        SharedPreferences.Editor editor = null;
        for (int a = 0; a < dialogs.size(); a++) {
            TLRPC.Dialog dialog = dialogs.get(a);
            if (dialog.peer != null && (dialog.notify_settings instanceof TLRPC.TL_peerNotifySettings)) {
                if (editor == null) {
                    editor = this.notificationsPreferences.edit();
                }
                long dialogId = MessageObject.getPeerId(dialog.peer);
                if ((dialog.notify_settings.flags & 2) != 0) {
                    editor.putBoolean("silent_" + dialogId, dialog.notify_settings.silent);
                } else {
                    editor.remove("silent_" + dialogId);
                }
                if ((dialog.notify_settings.flags & 4) == 0) {
                    editor.remove("notify2_" + dialogId);
                } else if (dialog.notify_settings.mute_until <= getConnectionsManager().getCurrentTime()) {
                    editor.putInt("notify2_" + dialogId, 0);
                } else if (dialog.notify_settings.mute_until > getConnectionsManager().getCurrentTime() + 31536000) {
                    editor.putInt("notify2_" + dialogId, 2);
                    dialog.notify_settings.mute_until = Integer.MAX_VALUE;
                } else {
                    editor.putInt("notify2_" + dialogId, 3);
                    editor.putInt("notifyuntil_" + dialogId, dialog.notify_settings.mute_until);
                }
            }
        }
        if (editor != null) {
            editor.commit();
        }
    }

    public void reloadMentionsCountForChannel(TLRPC.InputPeer peer, long taskId) {
        long newTaskId;
        if (taskId == 0) {
            NativeByteBuffer data = null;
            try {
                data = new NativeByteBuffer(peer.getObjectSize() + 4);
                data.writeInt32(22);
                peer.serializeToStream(data);
            } catch (Exception e) {
                FileLog.e((Throwable) e);
            }
            newTaskId = getMessagesStorage().createPendingTask(data);
        } else {
            newTaskId = taskId;
        }
        TLRPC.TL_messages_getUnreadMentions req = new TLRPC.TL_messages_getUnreadMentions();
        req.peer = peer;
        req.limit = 1;
        getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda250(this, peer, newTaskId));
    }

    /* renamed from: lambda$reloadMentionsCountForChannel$180$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m368xeec5da90(TLRPC.InputPeer peer, long newTaskId, TLObject response, TLRPC.TL_error error) {
        int newCount;
        TLRPC.messages_Messages res = (TLRPC.messages_Messages) response;
        if (res != null) {
            if (res.count != 0) {
                newCount = res.count;
            } else {
                newCount = res.messages.size();
            }
            getMessagesStorage().resetMentionsCount(-peer.channel_id, newCount);
        }
        if (newTaskId != 0) {
            getMessagesStorage().removePendingTask(newTaskId);
        }
    }

    public void reloadMentionsCountForChannels(ArrayList<Long> arrayList) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda16(this, arrayList));
    }

    /* renamed from: lambda$reloadMentionsCountForChannels$181$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m369x988225f0(ArrayList arrayList) {
        for (int a = 0; a < arrayList.size(); a++) {
            reloadMentionsCountForChannel(getInputPeer(-((Long) arrayList.get(a)).longValue()), 0);
        }
    }

    public void processDialogsUpdateRead(LongSparseIntArray dialogsToUpdate, LongSparseIntArray dialogsMentionsToUpdate) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda37(this, dialogsToUpdate, dialogsMentionsToUpdate));
    }

    /* JADX WARNING: Code restructure failed: missing block: B:63:0x00e7, code lost:
        r0 = true;
     */
    /* renamed from: lambda$processDialogsUpdateRead$182$org-telegram-messenger-MessagesController  reason: not valid java name */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void m317x283b1a40(org.telegram.messenger.support.LongSparseIntArray r13, org.telegram.messenger.support.LongSparseIntArray r14) {
        /*
            r12 = this;
            r0 = 0
            r1 = 1
            if (r13 == 0) goto L_0x007f
            r2 = 0
        L_0x0005:
            int r3 = r13.size()
            if (r2 >= r3) goto L_0x007f
            long r3 = r13.keyAt(r2)
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r5 = r12.dialogs_dict
            java.lang.Object r5 = r5.get(r3)
            org.telegram.tgnet.TLRPC$Dialog r5 = (org.telegram.tgnet.TLRPC.Dialog) r5
            if (r5 == 0) goto L_0x007c
            int r6 = r5.unread_count
            int r7 = r13.valueAt(r2)
            r5.unread_count = r7
            if (r6 == 0) goto L_0x004d
            int r7 = r5.unread_count
            if (r7 != 0) goto L_0x004d
            boolean r7 = r12.isDialogMuted(r3)
            if (r7 != 0) goto L_0x0032
            int r7 = r12.unreadUnmutedDialogs
            int r7 = r7 - r1
            r12.unreadUnmutedDialogs = r7
        L_0x0032:
            if (r0 != 0) goto L_0x007c
            r7 = 0
        L_0x0035:
            org.telegram.messenger.MessagesController$DialogFilter[] r8 = r12.selectedDialogFilter
            int r9 = r8.length
            if (r7 >= r9) goto L_0x004c
            r9 = r8[r7]
            if (r9 == 0) goto L_0x0049
            r8 = r8[r7]
            int r8 = r8.flags
            int r9 = DIALOG_FILTER_FLAG_EXCLUDE_READ
            r8 = r8 & r9
            if (r8 == 0) goto L_0x0049
            r0 = 1
            goto L_0x004c
        L_0x0049:
            int r7 = r7 + 1
            goto L_0x0035
        L_0x004c:
            goto L_0x007c
        L_0x004d:
            if (r6 != 0) goto L_0x007c
            boolean r7 = r5.unread_mark
            if (r7 != 0) goto L_0x007c
            int r7 = r5.unread_count
            if (r7 == 0) goto L_0x007c
            boolean r7 = r12.isDialogMuted(r3)
            if (r7 != 0) goto L_0x0062
            int r7 = r12.unreadUnmutedDialogs
            int r7 = r7 + r1
            r12.unreadUnmutedDialogs = r7
        L_0x0062:
            if (r0 != 0) goto L_0x007c
            r7 = 0
        L_0x0065:
            org.telegram.messenger.MessagesController$DialogFilter[] r8 = r12.selectedDialogFilter
            int r9 = r8.length
            if (r7 >= r9) goto L_0x007c
            r9 = r8[r7]
            if (r9 == 0) goto L_0x0079
            r8 = r8[r7]
            int r8 = r8.flags
            int r9 = DIALOG_FILTER_FLAG_EXCLUDE_READ
            r8 = r8 & r9
            if (r8 == 0) goto L_0x0079
            r0 = 1
            goto L_0x007c
        L_0x0079:
            int r7 = r7 + 1
            goto L_0x0065
        L_0x007c:
            int r2 = r2 + 1
            goto L_0x0005
        L_0x007f:
            r2 = 0
            if (r14 == 0) goto L_0x00ef
            r3 = 0
        L_0x0083:
            int r4 = r14.size()
            if (r3 >= r4) goto L_0x00ef
            long r4 = r14.keyAt(r3)
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r6 = r12.dialogs_dict
            java.lang.Object r6 = r6.get(r4)
            org.telegram.tgnet.TLRPC$Dialog r6 = (org.telegram.tgnet.TLRPC.Dialog) r6
            if (r6 == 0) goto L_0x00ec
            int r7 = r14.valueAt(r3)
            r6.unread_mentions_count = r7
            java.util.ArrayList<java.lang.Long> r7 = r12.createdDialogMainThreadIds
            long r8 = r6.id
            java.lang.Long r8 = java.lang.Long.valueOf(r8)
            boolean r7 = r7.contains(r8)
            if (r7 == 0) goto L_0x00c7
            org.telegram.messenger.NotificationCenter r7 = r12.getNotificationCenter()
            int r8 = org.telegram.messenger.NotificationCenter.updateMentionsCount
            r9 = 2
            java.lang.Object[] r9 = new java.lang.Object[r9]
            long r10 = r6.id
            java.lang.Long r10 = java.lang.Long.valueOf(r10)
            r9[r2] = r10
            int r10 = r6.unread_mentions_count
            java.lang.Integer r10 = java.lang.Integer.valueOf(r10)
            r9[r1] = r10
            r7.postNotificationName(r8, r9)
        L_0x00c7:
            if (r0 != 0) goto L_0x00ec
            r7 = 0
        L_0x00ca:
            org.telegram.messenger.MessagesController$DialogFilter[] r8 = r12.selectedDialogFilter
            int r9 = r8.length
            if (r7 >= r9) goto L_0x00ec
            r9 = r8[r7]
            if (r9 == 0) goto L_0x00e9
            r8 = r8[r7]
            int r8 = r8.flags
            int r9 = DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r8 = r8 & r9
            if (r8 != 0) goto L_0x00e7
            org.telegram.messenger.MessagesController$DialogFilter[] r8 = r12.selectedDialogFilter
            r8 = r8[r7]
            int r8 = r8.flags
            int r9 = DIALOG_FILTER_FLAG_EXCLUDE_READ
            r8 = r8 & r9
            if (r8 == 0) goto L_0x00e9
        L_0x00e7:
            r0 = 1
            goto L_0x00ec
        L_0x00e9:
            int r7 = r7 + 1
            goto L_0x00ca
        L_0x00ec:
            int r3 = r3 + 1
            goto L_0x0083
        L_0x00ef:
            if (r0 == 0) goto L_0x0100
            r3 = 0
            r12.sortDialogs(r3)
            org.telegram.messenger.NotificationCenter r3 = r12.getNotificationCenter()
            int r4 = org.telegram.messenger.NotificationCenter.dialogsNeedReload
            java.lang.Object[] r5 = new java.lang.Object[r2]
            r3.postNotificationName(r4, r5)
        L_0x0100:
            org.telegram.messenger.NotificationCenter r3 = r12.getNotificationCenter()
            int r4 = org.telegram.messenger.NotificationCenter.updateInterfaces
            java.lang.Object[] r1 = new java.lang.Object[r1]
            int r5 = UPDATE_MASK_READ_DIALOG_MESSAGE
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
            r1[r2] = r5
            r3.postNotificationName(r4, r1)
            if (r13 == 0) goto L_0x011c
            org.telegram.messenger.NotificationsController r1 = r12.getNotificationsController()
            r1.processDialogsUpdateRead(r13)
        L_0x011c:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.m317x283b1a40(org.telegram.messenger.support.LongSparseIntArray, org.telegram.messenger.support.LongSparseIntArray):void");
    }

    /* access modifiers changed from: protected */
    public void checkLastDialogMessage(TLRPC.Dialog dialog, TLRPC.InputPeer peer, long taskId) {
        long newTaskId;
        if (!DialogObject.isEncryptedDialog(dialog.id) && this.checkingLastMessagesDialogs.indexOfKey(dialog.id) < 0) {
            TLRPC.TL_messages_getHistory req = new TLRPC.TL_messages_getHistory();
            req.peer = peer == null ? getInputPeer(dialog.id) : peer;
            if (req.peer != null) {
                req.limit = 1;
                this.checkingLastMessagesDialogs.put(dialog.id, true);
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("checkLastDialogMessage for " + dialog.id);
                }
                if (taskId == 0) {
                    NativeByteBuffer data = null;
                    try {
                        data = new NativeByteBuffer(req.peer.getObjectSize() + 60);
                        data.writeInt32(14);
                        data.writeInt64(dialog.id);
                        data.writeInt32(dialog.top_message);
                        data.writeInt32(dialog.read_inbox_max_id);
                        data.writeInt32(dialog.read_outbox_max_id);
                        data.writeInt32(dialog.unread_count);
                        data.writeInt32(dialog.last_message_date);
                        data.writeInt32(dialog.pts);
                        data.writeInt32(dialog.flags);
                        data.writeBool(dialog.pinned);
                        data.writeInt32(dialog.pinnedNum);
                        data.writeInt32(dialog.unread_mentions_count);
                        data.writeBool(dialog.unread_mark);
                        data.writeInt32(dialog.folder_id);
                        req.peer.serializeToStream(data);
                    } catch (Exception e) {
                        FileLog.e((Throwable) e);
                    }
                    newTaskId = getMessagesStorage().createPendingTask(data);
                } else {
                    newTaskId = taskId;
                }
                getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda249(this, dialog, newTaskId));
            }
        }
    }

    /* renamed from: lambda$checkLastDialogMessage$186$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m143xCLASSNAMEa0eaa(TLRPC.Dialog dialog, long newTaskId, TLObject response, TLRPC.TL_error error) {
        TLRPC.Dialog dialog2 = dialog;
        long j = newTaskId;
        if (response != null) {
            TLRPC.messages_Messages res = (TLRPC.messages_Messages) response;
            removeDeletedMessagesFromArray(dialog2.id, res.messages);
            if (!res.messages.isEmpty()) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("checkLastDialogMessage for " + dialog2.id + " has message");
                }
                TLRPC.TL_messages_dialogs dialogs = new TLRPC.TL_messages_dialogs();
                TLRPC.Message newMessage = res.messages.get(0);
                TLRPC.Dialog newDialog = new TLRPC.TL_dialog();
                newDialog.flags = dialog2.flags;
                newDialog.top_message = newMessage.id;
                newDialog.last_message_date = newMessage.date;
                newDialog.notify_settings = dialog2.notify_settings;
                newDialog.pts = dialog2.pts;
                newDialog.unread_count = dialog2.unread_count;
                newDialog.unread_mark = dialog2.unread_mark;
                newDialog.unread_mentions_count = dialog2.unread_mentions_count;
                newDialog.unread_reactions_count = dialog2.unread_reactions_count;
                newDialog.read_inbox_max_id = dialog2.read_inbox_max_id;
                newDialog.read_outbox_max_id = dialog2.read_outbox_max_id;
                newDialog.pinned = dialog2.pinned;
                newDialog.pinnedNum = dialog2.pinnedNum;
                newDialog.folder_id = dialog2.folder_id;
                long j2 = dialog2.id;
                newDialog.id = j2;
                newMessage.dialog_id = j2;
                dialogs.users.addAll(res.users);
                dialogs.chats.addAll(res.chats);
                dialogs.dialogs.add(newDialog);
                dialogs.messages.addAll(res.messages);
                dialogs.count = 1;
                processDialogsUpdate(dialogs, (ArrayList<TLRPC.EncryptedChat>) null, false);
                getMessagesStorage().putMessages(res.messages, true, true, false, getDownloadController().getAutodownloadMask(), true, false);
            } else {
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda60(this, dialog2));
            }
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda61(this, dialog2));
    }

    /* renamed from: lambda$checkLastDialogMessage$184$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m141xfavar_(TLRPC.Dialog dialog) {
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("checkLastDialogMessage for " + dialog.id + " has not message");
        }
        if (getMediaDataController().getDraft(dialog.id, 0) == null) {
            TLRPC.Dialog currentDialog = this.dialogs_dict.get(dialog.id);
            if (currentDialog == null) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("checkLastDialogMessage for " + dialog.id + " current dialog not found");
                }
                getMessagesStorage().isDialogHasTopMessage(dialog.id, new MessagesController$$ExternalSyntheticLambda59(this, dialog));
                return;
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("checkLastDialogMessage for " + dialog.id + " current dialog top message " + currentDialog.top_message);
            }
            if (currentDialog.top_message == 0) {
                deleteDialog(dialog.id, 3);
            }
        }
    }

    /* renamed from: lambda$checkLastDialogMessage$183$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m140x15b5CLASSNAME(TLRPC.Dialog dialog) {
        deleteDialog(dialog.id, 3);
    }

    /* renamed from: lambda$checkLastDialogMessage$185$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m142xe0389fe9(TLRPC.Dialog dialog) {
        this.checkingLastMessagesDialogs.delete(dialog.id);
    }

    public void processDialogsUpdate(TLRPC.messages_Dialogs dialogsRes, ArrayList<TLRPC.EncryptedChat> arrayList, boolean fromCache) {
        Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda105(this, dialogsRes, fromCache));
    }

    /* renamed from: lambda$processDialogsUpdate$188$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m316xbvar_(TLRPC.messages_Dialogs dialogsRes, boolean fromCache) {
        MessageObject mess;
        TLRPC.messages_Dialogs messages_dialogs = dialogsRes;
        LongSparseArray<TLRPC.Dialog> new_dialogs_dict = new LongSparseArray<>();
        LongSparseArray<MessageObject> new_dialogMessage = new LongSparseArray<>();
        LongSparseArray<TLRPC.User> usersDict = new LongSparseArray<>(messages_dialogs.users.size());
        LongSparseArray<TLRPC.Chat> chatsDict = new LongSparseArray<>(messages_dialogs.chats.size());
        LongSparseIntArray dialogsToUpdate = new LongSparseIntArray();
        for (int a = 0; a < messages_dialogs.users.size(); a++) {
            TLRPC.User u = messages_dialogs.users.get(a);
            usersDict.put(u.id, u);
        }
        for (int a2 = 0; a2 < messages_dialogs.chats.size(); a2++) {
            TLRPC.Chat c = messages_dialogs.chats.get(a2);
            chatsDict.put(c.id, c);
        }
        ArrayList<MessageObject> newMessages = new ArrayList<>();
        for (int a3 = 0; a3 < messages_dialogs.messages.size(); a3++) {
            TLRPC.Message message = messages_dialogs.messages.get(a3);
            long j = this.promoDialogId;
            if (j == 0 || j != message.dialog_id) {
                if (message.peer_id.channel_id != 0) {
                    TLRPC.Chat chat = chatsDict.get(message.peer_id.channel_id);
                    if (chat != null && ChatObject.isNotInChat(chat)) {
                    }
                } else if (message.peer_id.chat_id != 0) {
                    TLRPC.Chat chat2 = chatsDict.get(message.peer_id.chat_id);
                    if (chat2 != null) {
                        if (chat2.migrated_to == null) {
                            if (ChatObject.isNotInChat(chat2)) {
                            }
                        }
                    }
                }
            }
            MessageObject messageObject = new MessageObject(this.currentAccount, message, usersDict, chatsDict, false, false);
            newMessages.add(messageObject);
            new_dialogMessage.put(messageObject.getDialogId(), messageObject);
        }
        getFileLoader().checkMediaExistance(newMessages);
        for (int a4 = 0; a4 < messages_dialogs.dialogs.size(); a4++) {
            TLRPC.Dialog d = messages_dialogs.dialogs.get(a4);
            DialogObject.initDialog(d);
            long j2 = this.promoDialogId;
            if (j2 == 0 || j2 != d.id) {
                if (DialogObject.isChannel(d)) {
                    TLRPC.Chat chat3 = chatsDict.get(-d.id);
                    if (chat3 != null && ChatObject.isNotInChat(chat3)) {
                    }
                } else if (DialogObject.isChatDialog(d.id)) {
                    TLRPC.Chat chat4 = chatsDict.get(-d.id);
                    if (chat4 != null) {
                        if (chat4.migrated_to == null) {
                            if (ChatObject.isNotInChat(chat4)) {
                            }
                        }
                    }
                }
            }
            if (d.last_message_date == 0 && (mess = new_dialogMessage.get(d.id)) != null) {
                d.last_message_date = mess.messageOwner.date;
            }
            new_dialogs_dict.put(d.id, d);
            dialogsToUpdate.put(d.id, d.unread_count);
            Integer value = this.dialogs_read_inbox_max.get(Long.valueOf(d.id));
            if (value == null) {
                value = 0;
            }
            this.dialogs_read_inbox_max.put(Long.valueOf(d.id), Integer.valueOf(Math.max(value.intValue(), d.read_inbox_max_id)));
            Integer value2 = this.dialogs_read_outbox_max.get(Long.valueOf(d.id));
            if (value2 == null) {
                value2 = 0;
            }
            this.dialogs_read_outbox_max.put(Long.valueOf(d.id), Integer.valueOf(Math.max(value2.intValue(), d.read_outbox_max_id)));
        }
        ArrayList<MessageObject> arrayList = newMessages;
        LongSparseArray<TLRPC.Chat> longSparseArray = chatsDict;
        LongSparseArray<TLRPC.User> longSparseArray2 = usersDict;
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda103(this, dialogsRes, new_dialogs_dict, new_dialogMessage, fromCache, dialogsToUpdate));
    }

    /* renamed from: lambda$processDialogsUpdate$187$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m315xda2fc5cf(TLRPC.messages_Dialogs dialogsRes, LongSparseArray new_dialogs_dict, LongSparseArray new_dialogMessage, boolean fromCache, LongSparseIntArray dialogsToUpdate) {
        long key;
        TLRPC.messages_Dialogs messages_dialogs = dialogsRes;
        LongSparseArray longSparseArray = new_dialogs_dict;
        boolean z = fromCache;
        int i = 1;
        putUsers(messages_dialogs.users, true);
        putChats(messages_dialogs.chats, true);
        int a = 0;
        while (a < new_dialogs_dict.size()) {
            long key2 = longSparseArray.keyAt(a);
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("processDialogsUpdate " + key2);
            }
            TLRPC.Dialog value = (TLRPC.Dialog) longSparseArray.valueAt(a);
            TLRPC.Dialog currentDialog = this.dialogs_dict.get(key2);
            MessageObject newMsg = (MessageObject) new_dialogMessage.get(value.id);
            if (currentDialog == null) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("processDialogsUpdate dialog null");
                }
                this.nextDialogsCacheOffset.put(value.folder_id, this.nextDialogsCacheOffset.get(value.folder_id, 0) + i);
                this.dialogs_dict.put(key2, value);
                this.dialogMessage.put(key2, newMsg);
                if (newMsg == null) {
                    if (z) {
                        checkLastDialogMessage(value, (TLRPC.InputPeer) null, 0);
                    }
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("processDialogsUpdate new message is null");
                        TLRPC.Dialog dialog = value;
                    } else {
                        TLRPC.Dialog dialog2 = value;
                    }
                } else if (newMsg.messageOwner.peer_id.channel_id == 0) {
                    this.dialogMessagesByIds.put(newMsg.getId(), newMsg);
                    this.dialogsLoadedTillDate = Math.min(this.dialogsLoadedTillDate, newMsg.messageOwner.date);
                    if (newMsg.messageOwner.random_id != 0) {
                        TLRPC.Dialog dialog3 = value;
                        this.dialogMessagesByRandomIds.put(newMsg.messageOwner.random_id, newMsg);
                    }
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("processDialogsUpdate new message not null");
                    }
                }
            } else {
                TLRPC.Dialog value2 = value;
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("processDialogsUpdate dialog not null");
                }
                TLRPC.Dialog value3 = value2;
                currentDialog.unread_count = value3.unread_count;
                if (currentDialog.unread_mentions_count != value3.unread_mentions_count) {
                    currentDialog.unread_mentions_count = value3.unread_mentions_count;
                    key = key2;
                    if (this.createdDialogMainThreadIds.contains(Long.valueOf(currentDialog.id))) {
                        getNotificationCenter().postNotificationName(NotificationCenter.updateMentionsCount, Long.valueOf(currentDialog.id), Integer.valueOf(currentDialog.unread_mentions_count));
                    }
                } else {
                    key = key2;
                }
                if (currentDialog.unread_reactions_count != value3.unread_reactions_count) {
                    currentDialog.unread_reactions_count = value3.unread_reactions_count;
                    getNotificationCenter().postNotificationName(NotificationCenter.dialogsUnreadReactionsCounterChanged, Long.valueOf(currentDialog.id), Integer.valueOf(currentDialog.unread_reactions_count), null);
                }
                long key3 = key;
                MessageObject oldMsg = this.dialogMessage.get(key3);
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("processDialogsUpdate oldMsg " + oldMsg + " old top_message = " + currentDialog.top_message + " new top_message = " + value3.top_message + "  unread_count =" + currentDialog.unread_count + " fromCache=" + z);
                    StringBuilder sb = new StringBuilder();
                    sb.append("processDialogsUpdate oldMsgDeleted ");
                    sb.append(oldMsg != null && oldMsg.deleted);
                    FileLog.d(sb.toString());
                }
                if (oldMsg == null || currentDialog.top_message > 0) {
                    if ((oldMsg != null && oldMsg.deleted) || value3.top_message > currentDialog.top_message) {
                        this.dialogs_dict.put(key3, value3);
                        this.dialogMessage.put(key3, newMsg);
                        if (oldMsg != null && oldMsg.messageOwner.peer_id.channel_id == 0) {
                            this.dialogMessagesByIds.remove(oldMsg.getId());
                            if (oldMsg.messageOwner.random_id != 0) {
                                this.dialogMessagesByRandomIds.remove(oldMsg.messageOwner.random_id);
                            }
                        }
                        if (newMsg != null) {
                            if (oldMsg != null && oldMsg.getId() == newMsg.getId()) {
                                newMsg.deleted = oldMsg.deleted;
                            }
                            if (newMsg.messageOwner.peer_id.channel_id == 0) {
                                this.dialogMessagesByIds.put(newMsg.getId(), newMsg);
                                this.dialogsLoadedTillDate = Math.min(this.dialogsLoadedTillDate, newMsg.messageOwner.date);
                                if (newMsg.messageOwner.random_id != 0) {
                                    this.dialogMessagesByRandomIds.put(newMsg.messageOwner.random_id, newMsg);
                                }
                            }
                        }
                    }
                    if (z && newMsg == null) {
                        checkLastDialogMessage(value3, (TLRPC.InputPeer) null, 0);
                        if (BuildVars.LOGS_ENABLED) {
                            FileLog.d("processDialogsUpdate new message is null");
                        }
                    }
                } else if (oldMsg.deleted || newMsg == null || newMsg.messageOwner.date > oldMsg.messageOwner.date) {
                    this.dialogs_dict.put(key3, value3);
                    this.dialogMessage.put(key3, newMsg);
                    if (oldMsg.messageOwner.peer_id.channel_id == 0) {
                        this.dialogMessagesByIds.remove(oldMsg.getId());
                    }
                    if (newMsg != null) {
                        if (oldMsg.getId() == newMsg.getId()) {
                            newMsg.deleted = oldMsg.deleted;
                        }
                        if (newMsg.messageOwner.peer_id.channel_id == 0) {
                            this.dialogMessagesByIds.put(newMsg.getId(), newMsg);
                            this.dialogsLoadedTillDate = Math.min(this.dialogsLoadedTillDate, newMsg.messageOwner.date);
                            if (newMsg.messageOwner.random_id != 0) {
                                this.dialogMessagesByRandomIds.put(newMsg.messageOwner.random_id, newMsg);
                            }
                        }
                    }
                    if (oldMsg.messageOwner.random_id != 0) {
                        this.dialogMessagesByRandomIds.remove(oldMsg.messageOwner.random_id);
                    }
                }
            }
            a++;
            TLRPC.messages_Dialogs messages_dialogs2 = dialogsRes;
            longSparseArray = new_dialogs_dict;
            i = 1;
        }
        LongSparseArray longSparseArray2 = new_dialogMessage;
        this.allDialogs.clear();
        int size = this.dialogs_dict.size();
        for (int a2 = 0; a2 < size; a2++) {
            TLRPC.Dialog dialog4 = this.dialogs_dict.valueAt(a2);
            if (this.deletingDialogs.indexOfKey(dialog4.id) < 0) {
                this.allDialogs.add(dialog4);
            }
        }
        sortDialogs((LongSparseArray<TLRPC.Chat>) null);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        getNotificationsController().processDialogsUpdateRead(dialogsToUpdate);
    }

    public void addToViewsQueue(MessageObject messageObject) {
        Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda30(this, messageObject));
    }

    /* renamed from: lambda$addToViewsQueue$189$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m119xeda3071(MessageObject messageObject) {
        long peer = messageObject.getDialogId();
        int id = messageObject.getId();
        ArrayList<Integer> ids = this.channelViewsToSend.get(peer);
        if (ids == null) {
            ids = new ArrayList<>();
            this.channelViewsToSend.put(peer, ids);
        }
        if (!ids.contains(Integer.valueOf(id))) {
            ids.add(Integer.valueOf(id));
        }
    }

    public void loadReactionsForMessages(long dialogId, ArrayList<MessageObject> visibleObjects) {
        if (!visibleObjects.isEmpty()) {
            TLRPC.TL_messages_getMessagesReactions req = new TLRPC.TL_messages_getMessagesReactions();
            req.peer = getInputPeer(dialogId);
            for (int i = 0; i < visibleObjects.size(); i++) {
                req.id.add(Integer.valueOf(visibleObjects.get(i).getId()));
            }
            getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda157(this));
        }
    }

    /* renamed from: lambda$loadReactionsForMessages$190$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m274x27fd5333(TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            TLRPC.Updates updates = (TLRPC.Updates) response;
            for (int i = 0; i < updates.updates.size(); i++) {
                if (updates.updates.get(i) instanceof TLRPC.TL_updateMessageReactions) {
                    ((TLRPC.TL_updateMessageReactions) updates.updates.get(i)).updateUnreadState = false;
                }
            }
            processUpdates(updates, false);
        }
    }

    public void addToPollsQueue(long dialogId, ArrayList<MessageObject> visibleObjects) {
        SparseArray<MessageObject> array = this.pollsToCheck.get(dialogId);
        if (array == null) {
            array = new SparseArray<>();
            this.pollsToCheck.put(dialogId, array);
            this.pollsToCheckSize++;
        }
        int N = array.size();
        for (int a = 0; a < N; a++) {
            array.valueAt(a).pollVisibleOnScreen = false;
        }
        int time = getConnectionsManager().getCurrentTime();
        int minExpireTime = Integer.MAX_VALUE;
        boolean hasExpiredPolls = false;
        int N2 = visibleObjects.size();
        for (int a2 = 0; a2 < N2; a2++) {
            MessageObject messageObject = visibleObjects.get(a2);
            if (messageObject.type == 17) {
                TLRPC.TL_messageMediaPoll mediaPoll = (TLRPC.TL_messageMediaPoll) messageObject.messageOwner.media;
                if (!mediaPoll.poll.closed && mediaPoll.poll.close_date != 0) {
                    if (mediaPoll.poll.close_date <= time) {
                        hasExpiredPolls = true;
                    } else {
                        minExpireTime = Math.min(minExpireTime, mediaPoll.poll.close_date - time);
                    }
                }
                int id = messageObject.getId();
                MessageObject object = array.get(id);
                if (object != null) {
                    object.pollVisibleOnScreen = true;
                } else {
                    array.put(id, messageObject);
                }
            }
        }
        if (hasExpiredPolls) {
            this.lastViewsCheckTime = 0;
        } else if (minExpireTime < 5) {
            this.lastViewsCheckTime = Math.min(this.lastViewsCheckTime, System.currentTimeMillis() - ((long) ((5 - minExpireTime) * 1000)));
        }
    }

    public void markMessageContentAsRead(MessageObject messageObject) {
        if (!messageObject.scheduled) {
            ArrayList<Integer> arrayList = new ArrayList<>();
            if (messageObject.messageOwner.mentioned) {
                getMessagesStorage().markMentionMessageAsRead(-messageObject.messageOwner.peer_id.channel_id, messageObject.getId(), messageObject.getDialogId());
            }
            arrayList.add(Integer.valueOf(messageObject.getId()));
            long dialogId = messageObject.getDialogId();
            getMessagesStorage().markMessagesContentAsRead(dialogId, arrayList, 0);
            getNotificationCenter().postNotificationName(NotificationCenter.messagesReadContent, Long.valueOf(dialogId), arrayList);
            if (messageObject.getId() < 0) {
                markMessageAsRead(messageObject.getDialogId(), messageObject.messageOwner.random_id, Integer.MIN_VALUE);
            } else if (messageObject.messageOwner.peer_id.channel_id != 0) {
                TLRPC.TL_channels_readMessageContents req = new TLRPC.TL_channels_readMessageContents();
                req.channel = getInputChannel(messageObject.messageOwner.peer_id.channel_id);
                if (req.channel != null) {
                    req.id.add(Integer.valueOf(messageObject.getId()));
                    getConnectionsManager().sendRequest(req, MessagesController$$ExternalSyntheticLambda280.INSTANCE);
                }
            } else {
                TLRPC.TL_messages_readMessageContents req2 = new TLRPC.TL_messages_readMessageContents();
                req2.id.add(Integer.valueOf(messageObject.getId()));
                getConnectionsManager().sendRequest(req2, new MessagesController$$ExternalSyntheticLambda163(this));
            }
        }
    }

    static /* synthetic */ void lambda$markMessageContentAsRead$191(TLObject response, TLRPC.TL_error error) {
    }

    /* renamed from: lambda$markMessageContentAsRead$192$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m295x3dae112b(TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            TLRPC.TL_messages_affectedMessages res = (TLRPC.TL_messages_affectedMessages) response;
            processNewDifferenceParams(-1, res.pts, -1, res.pts_count);
        }
    }

    public void markMentionMessageAsRead(int mid, long channelId, long did) {
        getMessagesStorage().markMentionMessageAsRead(-channelId, mid, did);
        if (channelId != 0) {
            TLRPC.TL_channels_readMessageContents req = new TLRPC.TL_channels_readMessageContents();
            req.channel = getInputChannel(channelId);
            if (req.channel != null) {
                req.id.add(Integer.valueOf(mid));
                getConnectionsManager().sendRequest(req, MessagesController$$ExternalSyntheticLambda278.INSTANCE);
                return;
            }
            return;
        }
        TLRPC.TL_messages_readMessageContents req2 = new TLRPC.TL_messages_readMessageContents();
        req2.id.add(Integer.valueOf(mid));
        getConnectionsManager().sendRequest(req2, new MessagesController$$ExternalSyntheticLambda162(this));
    }

    static /* synthetic */ void lambda$markMentionMessageAsRead$193(TLObject response, TLRPC.TL_error error) {
    }

    /* renamed from: lambda$markMentionMessageAsRead$194$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m292x6da0CLASSNAME(TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            TLRPC.TL_messages_affectedMessages res = (TLRPC.TL_messages_affectedMessages) response;
            processNewDifferenceParams(-1, res.pts, -1, res.pts_count);
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:34:0x0082  */
    /* JADX WARNING: Removed duplicated region for block: B:35:0x009f  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void markMessageAsRead2(long r17, int r19, org.telegram.tgnet.TLRPC.InputChannel r20, int r21, long r22) {
        /*
            r16 = this;
            r1 = r16
            r10 = r19
            r11 = r21
            if (r10 == 0) goto L_0x00ba
            if (r11 > 0) goto L_0x000e
            r13 = r17
            goto L_0x00bc
        L_0x000e:
            boolean r0 = org.telegram.messenger.DialogObject.isChatDialog(r17)
            if (r0 == 0) goto L_0x001f
            if (r20 != 0) goto L_0x001f
            org.telegram.tgnet.TLRPC$InputChannel r0 = r16.getInputChannel((long) r17)
            if (r0 != 0) goto L_0x001d
            return
        L_0x001d:
            r12 = r0
            goto L_0x0021
        L_0x001f:
            r12 = r20
        L_0x0021:
            r2 = 0
            int r0 = (r22 > r2 ? 1 : (r22 == r2 ? 0 : -1))
            if (r0 != 0) goto L_0x0061
            r2 = 0
            org.telegram.tgnet.NativeByteBuffer r0 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x0051 }
            r3 = 20
            if (r12 == 0) goto L_0x0033
            int r4 = r12.getObjectSize()     // Catch:{ Exception -> 0x0051 }
            goto L_0x0034
        L_0x0033:
            r4 = 0
        L_0x0034:
            int r3 = r3 + r4
            r0.<init>((int) r3)     // Catch:{ Exception -> 0x0051 }
            r2 = r0
            r0 = 23
            r2.writeInt32(r0)     // Catch:{ Exception -> 0x0051 }
            r13 = r17
            r2.writeInt64(r13)     // Catch:{ Exception -> 0x004f }
            r2.writeInt32(r10)     // Catch:{ Exception -> 0x004f }
            r2.writeInt32(r11)     // Catch:{ Exception -> 0x004f }
            if (r12 == 0) goto L_0x004e
            r12.serializeToStream(r2)     // Catch:{ Exception -> 0x004f }
        L_0x004e:
            goto L_0x0057
        L_0x004f:
            r0 = move-exception
            goto L_0x0054
        L_0x0051:
            r0 = move-exception
            r13 = r17
        L_0x0054:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
        L_0x0057:
            org.telegram.messenger.MessagesStorage r0 = r16.getMessagesStorage()
            long r2 = r0.createPendingTask(r2)
            r8 = r2
            goto L_0x0066
        L_0x0061:
            r13 = r17
            r2 = r22
            r8 = r2
        L_0x0066:
            org.telegram.tgnet.ConnectionsManager r0 = r16.getConnectionsManager()
            int r0 = r0.getCurrentTime()
            org.telegram.messenger.MessagesStorage r2 = r16.getMessagesStorage()
            r15 = 0
            r3 = r17
            r5 = r19
            r6 = r0
            r7 = r0
            r10 = r8
            r8 = r21
            r9 = r15
            r2.createTaskForMid(r3, r5, r6, r7, r8, r9)
            if (r12 == 0) goto L_0x009f
            org.telegram.tgnet.TLRPC$TL_channels_readMessageContents r2 = new org.telegram.tgnet.TLRPC$TL_channels_readMessageContents
            r2.<init>()
            r2.channel = r12
            java.util.ArrayList<java.lang.Integer> r3 = r2.id
            java.lang.Integer r4 = java.lang.Integer.valueOf(r19)
            r3.add(r4)
            org.telegram.tgnet.ConnectionsManager r3 = r16.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda198 r4 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda198
            r4.<init>(r1, r10)
            r3.sendRequest(r2, r4)
            goto L_0x00b9
        L_0x009f:
            org.telegram.tgnet.TLRPC$TL_messages_readMessageContents r2 = new org.telegram.tgnet.TLRPC$TL_messages_readMessageContents
            r2.<init>()
            java.util.ArrayList<java.lang.Integer> r3 = r2.id
            java.lang.Integer r4 = java.lang.Integer.valueOf(r19)
            r3.add(r4)
            org.telegram.tgnet.ConnectionsManager r3 = r16.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda200 r4 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda200
            r4.<init>(r1, r10)
            r3.sendRequest(r2, r4)
        L_0x00b9:
            return
        L_0x00ba:
            r13 = r17
        L_0x00bc:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.markMessageAsRead2(long, int, org.telegram.tgnet.TLRPC$InputChannel, int, long):void");
    }

    /* renamed from: lambda$markMessageAsRead2$195$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m293xvar_a577(long newTaskId, TLObject response, TLRPC.TL_error error) {
        if (newTaskId != 0) {
            getMessagesStorage().removePendingTask(newTaskId);
        }
    }

    /* renamed from: lambda$markMessageAsRead2$196$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m294xdd471438(long newTaskId, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            TLRPC.TL_messages_affectedMessages res = (TLRPC.TL_messages_affectedMessages) response;
            processNewDifferenceParams(-1, res.pts, -1, res.pts_count);
        }
        if (newTaskId != 0) {
            getMessagesStorage().removePendingTask(newTaskId);
        }
    }

    public void markMessageAsRead(long dialogId, long randomId, int ttl) {
        TLRPC.EncryptedChat chat;
        if (randomId != 0 && dialogId != 0) {
            if ((ttl > 0 || ttl == Integer.MIN_VALUE) && DialogObject.isEncryptedDialog(dialogId) && (chat = getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(dialogId)))) != null) {
                ArrayList<Long> randomIds = new ArrayList<>();
                randomIds.add(Long.valueOf(randomId));
                getSecretChatHelper().sendMessagesReadMessage(chat, randomIds, (TLRPC.Message) null);
                if (ttl > 0) {
                    int time = getConnectionsManager().getCurrentTime();
                    getMessagesStorage().createTaskForSecretChat(chat.id, time, time, 0, randomIds);
                }
            }
        }
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v6, resolved type: org.telegram.tgnet.TLRPC$TL_messages_readHistory} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v8, resolved type: org.telegram.tgnet.TLRPC$TL_channels_readHistory} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v14, resolved type: org.telegram.tgnet.TLRPC$TL_messages_readHistory} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v15, resolved type: org.telegram.tgnet.TLRPC$TL_messages_readHistory} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void completeReadTask(org.telegram.messenger.MessagesController.ReadTask r6) {
        /*
            r5 = this;
            long r0 = r6.replyId
            r2 = 0
            int r4 = (r0 > r2 ? 1 : (r0 == r2 ? 0 : -1))
            if (r4 == 0) goto L_0x0029
            org.telegram.tgnet.TLRPC$TL_messages_readDiscussion r0 = new org.telegram.tgnet.TLRPC$TL_messages_readDiscussion
            r0.<init>()
            long r1 = r6.replyId
            int r2 = (int) r1
            r0.msg_id = r2
            long r1 = r6.dialogId
            org.telegram.tgnet.TLRPC$InputPeer r1 = r5.getInputPeer((long) r1)
            r0.peer = r1
            int r1 = r6.maxId
            r0.read_max_id = r1
            org.telegram.tgnet.ConnectionsManager r1 = r5.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda269 r2 = org.telegram.messenger.MessagesController$$ExternalSyntheticLambda269.INSTANCE
            r1.sendRequest(r0, r2)
            goto L_0x00a9
        L_0x0029:
            long r0 = r6.dialogId
            boolean r0 = org.telegram.messenger.DialogObject.isEncryptedDialog(r0)
            if (r0 != 0) goto L_0x0068
            long r0 = r6.dialogId
            org.telegram.tgnet.TLRPC$InputPeer r0 = r5.getInputPeer((long) r0)
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC.TL_inputPeerChannel
            if (r1 == 0) goto L_0x004f
            org.telegram.tgnet.TLRPC$TL_channels_readHistory r1 = new org.telegram.tgnet.TLRPC$TL_channels_readHistory
            r1.<init>()
            long r2 = r6.dialogId
            long r2 = -r2
            org.telegram.tgnet.TLRPC$InputChannel r2 = r5.getInputChannel((long) r2)
            r1.channel = r2
            int r2 = r6.maxId
            r1.max_id = r2
            goto L_0x005b
        L_0x004f:
            org.telegram.tgnet.TLRPC$TL_messages_readHistory r1 = new org.telegram.tgnet.TLRPC$TL_messages_readHistory
            r1.<init>()
            r1.peer = r0
            int r2 = r6.maxId
            r1.max_id = r2
            r2 = r1
        L_0x005b:
            org.telegram.tgnet.ConnectionsManager r2 = r5.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda149 r3 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda149
            r3.<init>(r5)
            r2.sendRequest(r1, r3)
            goto L_0x00a9
        L_0x0068:
            long r0 = r6.dialogId
            int r0 = org.telegram.messenger.DialogObject.getEncryptedChatId(r0)
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)
            org.telegram.tgnet.TLRPC$EncryptedChat r0 = r5.getEncryptedChat(r0)
            byte[] r1 = r0.auth_key
            if (r1 == 0) goto L_0x00a9
            byte[] r1 = r0.auth_key
            int r1 = r1.length
            r2 = 1
            if (r1 <= r2) goto L_0x00a9
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC.TL_encryptedChat
            if (r1 == 0) goto L_0x00a9
            org.telegram.tgnet.TLRPC$TL_messages_readEncryptedHistory r1 = new org.telegram.tgnet.TLRPC$TL_messages_readEncryptedHistory
            r1.<init>()
            org.telegram.tgnet.TLRPC$TL_inputEncryptedChat r2 = new org.telegram.tgnet.TLRPC$TL_inputEncryptedChat
            r2.<init>()
            r1.peer = r2
            org.telegram.tgnet.TLRPC$TL_inputEncryptedChat r2 = r1.peer
            int r3 = r0.id
            r2.chat_id = r3
            org.telegram.tgnet.TLRPC$TL_inputEncryptedChat r2 = r1.peer
            long r3 = r0.access_hash
            r2.access_hash = r3
            int r2 = r6.maxDate
            r1.max_date = r2
            org.telegram.tgnet.ConnectionsManager r2 = r5.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda270 r3 = org.telegram.messenger.MessagesController$$ExternalSyntheticLambda270.INSTANCE
            r2.sendRequest(r1, r3)
        L_0x00a9:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.completeReadTask(org.telegram.messenger.MessagesController$ReadTask):void");
    }

    static /* synthetic */ void lambda$completeReadTask$197(TLObject response, TLRPC.TL_error error) {
    }

    /* renamed from: lambda$completeReadTask$198$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m161xd486ac1e(TLObject response, TLRPC.TL_error error) {
        if (error == null && (response instanceof TLRPC.TL_messages_affectedMessages)) {
            TLRPC.TL_messages_affectedMessages res = (TLRPC.TL_messages_affectedMessages) response;
            processNewDifferenceParams(-1, res.pts, -1, res.pts_count);
        }
    }

    static /* synthetic */ void lambda$completeReadTask$199(TLObject response, TLRPC.TL_error error) {
    }

    private void checkReadTasks() {
        long time = SystemClock.elapsedRealtime();
        int a = 0;
        int size = this.readTasks.size();
        while (a < size) {
            ReadTask task = this.readTasks.get(a);
            if (task.sendRequestTime <= time) {
                completeReadTask(task);
                this.readTasks.remove(a);
                this.readTasksMap.remove(task.dialogId);
                a--;
                size--;
            }
            a++;
        }
        int a2 = 0;
        int size2 = this.repliesReadTasks.size();
        while (a2 < size2) {
            ReadTask task2 = this.repliesReadTasks.get(a2);
            if (task2.sendRequestTime <= time) {
                completeReadTask(task2);
                this.repliesReadTasks.remove(a2);
                this.threadsReadTasksMap.remove(task2.dialogId + "_" + task2.replyId);
                a2 += -1;
                size2 += -1;
            }
            a2++;
        }
    }

    public void markDialogAsReadNow(long dialogId, int replyId) {
        Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda300(this, replyId, dialogId));
    }

    /* renamed from: lambda$markDialogAsReadNow$200$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m290x64edaaab(int replyId, long dialogId) {
        if (replyId != 0) {
            String key = dialogId + "_" + replyId;
            ReadTask currentReadTask = this.threadsReadTasksMap.get(key);
            if (currentReadTask != null) {
                completeReadTask(currentReadTask);
                this.repliesReadTasks.remove(currentReadTask);
                this.threadsReadTasksMap.remove(key);
                return;
            }
            return;
        }
        ReadTask currentReadTask2 = this.readTasksMap.get(dialogId);
        if (currentReadTask2 != null) {
            completeReadTask(currentReadTask2);
            this.readTasks.remove(currentReadTask2);
            this.readTasksMap.remove(dialogId);
        }
    }

    public void markMentionsAsRead(long dialogId) {
        if (!DialogObject.isEncryptedDialog(dialogId)) {
            getMessagesStorage().resetMentionsCount(dialogId, 0);
            TLRPC.TL_messages_readMentions req = new TLRPC.TL_messages_readMentions();
            req.peer = getInputPeer(dialogId);
            getConnectionsManager().sendRequest(req, MessagesController$$ExternalSyntheticLambda279.INSTANCE);
        }
    }

    static /* synthetic */ void lambda$markMentionsAsRead$201(TLObject response, TLRPC.TL_error error) {
    }

    public void markDialogAsRead(long dialogId, int maxPositiveId, int maxNegativeId, int maxDate, boolean popup, int threadId, int countDiff, boolean readNow, int scheduledCount) {
        boolean createReadTask;
        Integer value;
        int i = maxPositiveId;
        int i2 = maxDate;
        if (threadId != 0) {
            createReadTask = i != Integer.MAX_VALUE;
        } else {
            boolean z = getNotificationsController().showBadgeMessages;
            if (!DialogObject.isEncryptedDialog(dialogId)) {
                if (i != 0) {
                    Integer value2 = this.dialogs_read_inbox_max.get(Long.valueOf(dialogId));
                    if (value2 == null) {
                        value = 0;
                    } else {
                        value = value2;
                    }
                    this.dialogs_read_inbox_max.put(Long.valueOf(dialogId), Integer.valueOf(Math.max(value.intValue(), i)));
                    getMessagesStorage().processPendingRead(dialogId, maxPositiveId, maxNegativeId, scheduledCount);
                    DispatchQueue storageQueue = getMessagesStorage().getStorageQueue();
                    MessagesController$$ExternalSyntheticLambda327 messagesController$$ExternalSyntheticLambda327 = r0;
                    MessagesController$$ExternalSyntheticLambda327 messagesController$$ExternalSyntheticLambda3272 = new MessagesController$$ExternalSyntheticLambda327(this, dialogId, countDiff, maxPositiveId, popup);
                    storageQueue.postRunnable(messagesController$$ExternalSyntheticLambda327);
                    createReadTask = i != Integer.MAX_VALUE;
                } else {
                    return;
                }
            } else if (i2 != 0) {
                createReadTask = true;
                TLRPC.EncryptedChat chat = getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(dialogId)));
                getMessagesStorage().processPendingRead(dialogId, maxPositiveId, maxNegativeId, scheduledCount);
                getMessagesStorage().getStorageQueue().postRunnable(new MessagesController$$ExternalSyntheticLambda332(this, dialogId, maxDate, popup, countDiff, maxNegativeId));
                if (chat != null && chat.ttl > 0) {
                    getMessagesStorage().createTaskForSecretChat(chat.id, maxDate, Math.max(getConnectionsManager().getCurrentTime(), i2), 0, (ArrayList<Long>) null);
                }
            } else {
                return;
            }
        }
        if (createReadTask) {
            Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda303(this, threadId, dialogId, readNow, maxDate, maxPositiveId));
        }
    }

    /* renamed from: lambda$markDialogAsRead$203$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m286x3685afec(long dialogId, int countDiff, int maxPositiveId, boolean popup) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda326(this, dialogId, countDiff, maxPositiveId, popup));
    }

    /* renamed from: lambda$markDialogAsRead$202$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m285x5144412b(long dialogId, int countDiff, int maxPositiveId, boolean popup) {
        long j = dialogId;
        int i = maxPositiveId;
        TLRPC.Dialog dialog = this.dialogs_dict.get(j);
        if (dialog != null) {
            int prevCount = dialog.unread_count;
            if (countDiff == 0 || i >= dialog.top_message) {
                dialog.unread_count = 0;
            } else {
                dialog.unread_count = Math.max(dialog.unread_count - countDiff, 0);
                if (i != Integer.MIN_VALUE && dialog.unread_count > dialog.top_message - i) {
                    dialog.unread_count = dialog.top_message - i;
                }
            }
            boolean z = dialog.unread_mark;
            boolean wasUnread = z;
            if (z) {
                dialog.unread_mark = false;
                getMessagesStorage().setDialogUnread(dialog.id, false);
            }
            if ((prevCount != 0 || wasUnread) && dialog.unread_count == 0) {
                if (!isDialogMuted(dialogId)) {
                    this.unreadUnmutedDialogs--;
                }
                int b = 0;
                while (true) {
                    DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                    if (b < dialogFilterArr.length) {
                        if (dialogFilterArr[b] != null && (dialogFilterArr[b].flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                            sortDialogs((LongSparseArray<TLRPC.Chat>) null);
                            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                            break;
                        }
                        b++;
                    } else {
                        break;
                    }
                }
            }
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_READ_DIALOG_MESSAGE));
        }
        if (!popup) {
            getNotificationsController().processReadMessages((LongSparseIntArray) null, dialogId, 0, maxPositiveId, false);
            LongSparseIntArray dialogsToUpdate = new LongSparseIntArray(1);
            dialogsToUpdate.put(j, 0);
            getNotificationsController().processDialogsUpdateRead(dialogsToUpdate);
            return;
        }
        getNotificationsController().processReadMessages((LongSparseIntArray) null, dialogId, 0, maxPositiveId, true);
        LongSparseIntArray dialogsToUpdate2 = new LongSparseIntArray(1);
        dialogsToUpdate2.put(j, -1);
        getNotificationsController().processDialogsUpdateRead(dialogsToUpdate2);
    }

    /* renamed from: lambda$markDialogAsRead$205$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m288x1088d6e(long dialogId, int maxDate, boolean popup, int countDiff, int maxNegativeId) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda331(this, dialogId, maxDate, popup, countDiff, maxNegativeId));
    }

    /* renamed from: lambda$markDialogAsRead$204$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m287x1bCLASSNAMEead(long dialogId, int maxDate, boolean popup, int countDiff, int maxNegativeId) {
        getNotificationsController().processReadMessages((LongSparseIntArray) null, dialogId, maxDate, 0, popup);
        TLRPC.Dialog dialog = this.dialogs_dict.get(dialogId);
        if (dialog != null) {
            int prevCount = dialog.unread_count;
            if (countDiff == 0 || maxNegativeId <= dialog.top_message) {
                dialog.unread_count = 0;
            } else {
                dialog.unread_count = Math.max(dialog.unread_count - countDiff, 0);
                if (maxNegativeId != Integer.MAX_VALUE && dialog.unread_count > maxNegativeId - dialog.top_message) {
                    dialog.unread_count = maxNegativeId - dialog.top_message;
                }
            }
            boolean z = dialog.unread_mark;
            boolean wasUnread = z;
            if (z) {
                dialog.unread_mark = false;
                getMessagesStorage().setDialogUnread(dialog.id, false);
            }
            if ((prevCount != 0 || wasUnread) && dialog.unread_count == 0) {
                if (!isDialogMuted(dialogId)) {
                    this.unreadUnmutedDialogs--;
                }
                int b = 0;
                while (true) {
                    DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                    if (b < dialogFilterArr.length) {
                        if (dialogFilterArr[b] != null && (dialogFilterArr[b].flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                            sortDialogs((LongSparseArray<TLRPC.Chat>) null);
                            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                            break;
                        }
                        b++;
                    } else {
                        break;
                    }
                }
            }
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_READ_DIALOG_MESSAGE));
        }
        LongSparseIntArray dialogsToUpdate = new LongSparseIntArray(1);
        dialogsToUpdate.put(dialogId, 0);
        getNotificationsController().processDialogsUpdateRead(dialogsToUpdate);
    }

    /* renamed from: lambda$markDialogAsRead$206$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m289xe649fc2f(int threadId, long dialogId, boolean readNow, int maxDate, int maxPositiveId) {
        ReadTask currentReadTask;
        if (threadId != 0) {
            HashMap<String, ReadTask> hashMap = this.threadsReadTasksMap;
            currentReadTask = hashMap.get(dialogId + "_" + threadId);
        } else {
            currentReadTask = this.readTasksMap.get(dialogId);
        }
        if (currentReadTask == null) {
            currentReadTask = new ReadTask();
            currentReadTask.dialogId = dialogId;
            currentReadTask.replyId = (long) threadId;
            currentReadTask.sendRequestTime = SystemClock.elapsedRealtime() + 5000;
            if (!readNow) {
                if (threadId != 0) {
                    HashMap<String, ReadTask> hashMap2 = this.threadsReadTasksMap;
                    hashMap2.put(dialogId + "_" + threadId, currentReadTask);
                    this.repliesReadTasks.add(currentReadTask);
                } else {
                    this.readTasksMap.put(dialogId, currentReadTask);
                    this.readTasks.add(currentReadTask);
                }
            }
        }
        currentReadTask.maxDate = maxDate;
        currentReadTask.maxId = maxPositiveId;
        if (readNow) {
            completeReadTask(currentReadTask);
        }
    }

    public int createChat(String title, ArrayList<Long> selectedContacts, String about, int type, boolean forImport, Location location, String locationAddress, BaseFragment fragment) {
        if (type == 0 && !forImport) {
            TLRPC.TL_messages_createChat req = new TLRPC.TL_messages_createChat();
            req.title = title;
            for (int a = 0; a < selectedContacts.size(); a++) {
                TLRPC.User user = getUser(selectedContacts.get(a));
                if (user != null) {
                    req.users.add(getInputUser(user));
                }
            }
            return getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda258(this, fragment, req), 2);
        } else if (!forImport && type != 2 && type != 4) {
            return 0;
        } else {
            TLRPC.TL_channels_createChannel req2 = new TLRPC.TL_channels_createChannel();
            req2.title = title;
            req2.about = about != null ? about : "";
            req2.for_import = forImport;
            if (forImport || type == 4) {
                req2.megagroup = true;
            } else {
                req2.broadcast = true;
            }
            if (location != null) {
                req2.geo_point = new TLRPC.TL_inputGeoPoint();
                req2.geo_point.lat = location.getLatitude();
                req2.geo_point._long = location.getLongitude();
                req2.address = locationAddress;
                req2.flags = 4 | req2.flags;
            }
            return getConnectionsManager().sendRequest(req2, new MessagesController$$ExternalSyntheticLambda256(this, fragment, req2), 2);
        }
    }

    /* renamed from: lambda$createChat$209$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m170lambda$createChat$209$orgtelegrammessengerMessagesController(BaseFragment fragment, TLRPC.TL_messages_createChat req, TLObject response, TLRPC.TL_error error) {
        if (error != null) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda76(this, error, fragment, req));
            return;
        }
        TLRPC.Updates updates = (TLRPC.Updates) response;
        processUpdates(updates, false);
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda93(this, updates));
    }

    /* renamed from: lambda$createChat$207$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m168lambda$createChat$207$orgtelegrammessengerMessagesController(TLRPC.TL_error error, BaseFragment fragment, TLRPC.TL_messages_createChat req) {
        AlertsCreator.processError(this.currentAccount, error, fragment, req, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.chatDidFailCreate, new Object[0]);
    }

    /* renamed from: lambda$createChat$208$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m169lambda$createChat$208$orgtelegrammessengerMessagesController(TLRPC.Updates updates) {
        putUsers(updates.users, false);
        putChats(updates.chats, false);
        if (updates.chats == null || updates.chats.isEmpty()) {
            getNotificationCenter().postNotificationName(NotificationCenter.chatDidFailCreate, new Object[0]);
            return;
        }
        getNotificationCenter().postNotificationName(NotificationCenter.chatDidCreated, Long.valueOf(updates.chats.get(0).id));
    }

    /* renamed from: lambda$createChat$212$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m173lambda$createChat$212$orgtelegrammessengerMessagesController(BaseFragment fragment, TLRPC.TL_channels_createChannel req, TLObject response, TLRPC.TL_error error) {
        if (error != null) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda72(this, error, fragment, req));
            return;
        }
        TLRPC.Updates updates = (TLRPC.Updates) response;
        processUpdates(updates, false);
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda94(this, updates));
    }

    /* renamed from: lambda$createChat$210$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m171lambda$createChat$210$orgtelegrammessengerMessagesController(TLRPC.TL_error error, BaseFragment fragment, TLRPC.TL_channels_createChannel req) {
        AlertsCreator.processError(this.currentAccount, error, fragment, req, new Object[0]);
        getNotificationCenter().postNotificationName(NotificationCenter.chatDidFailCreate, new Object[0]);
    }

    /* renamed from: lambda$createChat$211$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m172lambda$createChat$211$orgtelegrammessengerMessagesController(TLRPC.Updates updates) {
        putUsers(updates.users, false);
        putChats(updates.chats, false);
        if (updates.chats == null || updates.chats.isEmpty()) {
            getNotificationCenter().postNotificationName(NotificationCenter.chatDidFailCreate, new Object[0]);
            return;
        }
        getNotificationCenter().postNotificationName(NotificationCenter.chatDidCreated, Long.valueOf(updates.chats.get(0).id));
    }

    public void convertToMegaGroup(Context context, long chatId, BaseFragment fragment, MessagesStorage.LongCallback convertRunnable) {
        convertToMegaGroup(context, chatId, fragment, convertRunnable, (Runnable) null);
    }

    public void convertToMegaGroup(Context context, long chatId, BaseFragment fragment, MessagesStorage.LongCallback convertRunnable, Runnable errorRunnable) {
        Context context2 = context;
        TLRPC.TL_messages_migrateChat req = new TLRPC.TL_messages_migrateChat();
        req.chat_id = chatId;
        AlertDialog progressDialog = context2 != null ? new AlertDialog(context2, 3) : null;
        int reqId = getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda234(this, context, progressDialog, convertRunnable, errorRunnable, fragment, req));
        if (progressDialog != null) {
            progressDialog.setOnCancelListener(new MessagesController$$ExternalSyntheticLambda111(this, reqId));
            try {
                progressDialog.show();
            } catch (Exception e) {
            }
        }
    }

    /* renamed from: lambda$convertToMegaGroup$216$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m166x1CLASSNAME(Context context, AlertDialog progressDialog, MessagesStorage.LongCallback convertRunnable, Runnable errorRunnable, BaseFragment fragment, TLRPC.TL_messages_migrateChat req, TLObject response, TLRPC.TL_error error) {
        Context context2 = context;
        if (error == null) {
            if (context2 != null) {
                AlertDialog alertDialog = progressDialog;
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda317(context, progressDialog));
            } else {
                AlertDialog alertDialog2 = progressDialog;
            }
            processUpdates((TLRPC.Updates) response, false);
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda129(convertRunnable, (TLRPC.Updates) response));
            return;
        }
        AlertDialog alertDialog3 = progressDialog;
        MessagesStorage.LongCallback longCallback = convertRunnable;
        if (errorRunnable != null) {
            errorRunnable.run();
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda35(this, convertRunnable, context, progressDialog, error, fragment, req));
    }

    static /* synthetic */ void lambda$convertToMegaGroup$213(Context context, AlertDialog progressDialog) {
        if (!((Activity) context).isFinishing()) {
            try {
                progressDialog.dismiss();
            } catch (Exception e) {
                FileLog.e((Throwable) e);
            }
        }
    }

    static /* synthetic */ void lambda$convertToMegaGroup$214(MessagesStorage.LongCallback convertRunnable, TLRPC.Updates updates) {
        if (convertRunnable != null) {
            for (int a = 0; a < updates.chats.size(); a++) {
                TLRPC.Chat chat = updates.chats.get(a);
                if (ChatObject.isChannel(chat)) {
                    convertRunnable.run(chat.id);
                    return;
                }
            }
        }
    }

    /* renamed from: lambda$convertToMegaGroup$215$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m165x3713CLASSNAMEf(MessagesStorage.LongCallback convertRunnable, Context context, AlertDialog progressDialog, TLRPC.TL_error error, BaseFragment fragment, TLRPC.TL_messages_migrateChat req) {
        if (convertRunnable != null) {
            convertRunnable.run(0);
        }
        if (context != null && !((Activity) context).isFinishing()) {
            try {
                progressDialog.dismiss();
            } catch (Exception e) {
                FileLog.e((Throwable) e);
            }
            AlertsCreator.processError(this.currentAccount, error, fragment, req, false);
        }
    }

    /* renamed from: lambda$convertToMegaGroup$217$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m167x196a311(int reqId, DialogInterface dialog) {
        getConnectionsManager().cancelRequest(reqId, true);
    }

    public void convertToGigaGroup(Context context, TLRPC.Chat chat, BaseFragment fragment, MessagesStorage.BooleanCallback convertRunnable) {
        TLRPC.TL_channels_convertToGigagroup req = new TLRPC.TL_channels_convertToGigagroup();
        req.channel = getInputChannel(chat);
        AlertDialog progressDialog = context != null ? new AlertDialog(context, 3) : null;
        int reqId = getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda232(this, context, progressDialog, convertRunnable, fragment, req));
        if (progressDialog != null) {
            progressDialog.setOnCancelListener(new MessagesController$$ExternalSyntheticLambda0(this, reqId));
            try {
                progressDialog.showDelayed(400);
            } catch (Exception e) {
            }
        }
    }

    /* renamed from: lambda$convertToGigaGroup$221$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m163xd56e6ee0(Context context, AlertDialog progressDialog, MessagesStorage.BooleanCallback convertRunnable, BaseFragment fragment, TLRPC.TL_channels_convertToGigagroup req, TLObject response, TLRPC.TL_error error) {
        Context context2 = context;
        if (error == null) {
            if (context2 != null) {
                AlertDialog alertDialog = progressDialog;
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda306(context, progressDialog));
            } else {
                AlertDialog alertDialog2 = progressDialog;
            }
            TLRPC.Updates updates = (TLRPC.Updates) response;
            processUpdates((TLRPC.Updates) response, false);
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda128(convertRunnable));
            return;
        }
        AlertDialog alertDialog3 = progressDialog;
        MessagesStorage.BooleanCallback booleanCallback = convertRunnable;
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda34(this, convertRunnable, context, progressDialog, error, fragment, req));
    }

    static /* synthetic */ void lambda$convertToGigaGroup$218(Context context, AlertDialog progressDialog) {
        if (!((Activity) context).isFinishing()) {
            try {
                progressDialog.dismiss();
            } catch (Exception e) {
                FileLog.e((Throwable) e);
            }
        }
    }

    static /* synthetic */ void lambda$convertToGigaGroup$219(MessagesStorage.BooleanCallback convertRunnable) {
        if (convertRunnable != null) {
            convertRunnable.run(true);
        }
    }

    /* renamed from: lambda$convertToGigaGroup$220$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m162xvar_d001f(MessagesStorage.BooleanCallback convertRunnable, Context context, AlertDialog progressDialog, TLRPC.TL_error error, BaseFragment fragment, TLRPC.TL_channels_convertToGigagroup req) {
        if (convertRunnable != null) {
            convertRunnable.run(false);
        }
        if (context != null && !((Activity) context).isFinishing()) {
            try {
                progressDialog.dismiss();
            } catch (Exception e) {
                FileLog.e((Throwable) e);
            }
            AlertsCreator.processError(this.currentAccount, error, fragment, req, false);
        }
    }

    /* renamed from: lambda$convertToGigaGroup$222$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m164xbaafdda1(int reqId, DialogInterface dialog) {
        getConnectionsManager().cancelRequest(reqId, true);
    }

    public void addUsersToChannel(long chatId, ArrayList<TLRPC.InputUser> users2, BaseFragment fragment) {
        if (users2 != null && !users2.isEmpty()) {
            TLRPC.TL_channels_inviteToChannel req = new TLRPC.TL_channels_inviteToChannel();
            req.channel = getInputChannel(chatId);
            req.users = users2;
            getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda257(this, fragment, req));
        }
    }

    /* renamed from: lambda$addUsersToChannel$224$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m126xdd488535(BaseFragment fragment, TLRPC.TL_channels_inviteToChannel req, TLObject response, TLRPC.TL_error error) {
        if (error != null) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda75(this, error, fragment, req));
        } else {
            processUpdates((TLRPC.Updates) response, false);
        }
    }

    /* renamed from: lambda$addUsersToChannel$223$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m125xvar_(TLRPC.TL_error error, BaseFragment fragment, TLRPC.TL_channels_inviteToChannel req) {
        AlertsCreator.processError(this.currentAccount, error, fragment, req, true);
    }

    public void setDefaultSendAs(long chatId, long newPeer) {
        TLRPC.ChatFull cachedFull = getChatFull(-chatId);
        if (cachedFull != null) {
            cachedFull.default_send_as = getPeer(newPeer);
            getMessagesStorage().updateChatInfo(cachedFull, false);
            getNotificationCenter().postNotificationName(NotificationCenter.updateDefaultSendAsPeer, Long.valueOf(chatId), cachedFull.default_send_as);
        }
        TLRPC.TL_messages_saveDefaultSendAs req = new TLRPC.TL_messages_saveDefaultSendAs();
        req.peer = getInputPeer(chatId);
        req.send_as = getInputPeer(newPeer);
        getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda205(this, chatId), 64);
    }

    /* renamed from: lambda$setDefaultSendAs$225$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m396x156var_a8(long chatId, TLObject response, TLRPC.TL_error error) {
        if (response instanceof TLRPC.TL_boolTrue) {
            if (getChatFull(-chatId) == null) {
                loadFullChat(-chatId, 0, true);
            }
        } else if (error != null && error.code == 400) {
            loadFullChat(-chatId, 0, true);
        }
    }

    public void toggleChatNoForwards(long chatId, boolean enabled) {
        TLRPC.TL_messages_toggleNoForwards req = new TLRPC.TL_messages_toggleNoForwards();
        req.peer = getInputPeer(-chatId);
        req.enabled = enabled;
        getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda172(this), 64);
    }

    /* renamed from: lambda$toggleChatNoForwards$227$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m420x3b5e5c0c(TLObject response, TLRPC.TL_error error) {
        if (response != null) {
            processUpdates((TLRPC.Updates) response, false);
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda288(this));
        }
    }

    /* renamed from: lambda$toggleChatNoForwards$226$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m419x561ced4b() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
    }

    public void toggleChatJoinToSend(long chatId, boolean enabled, Runnable onSuccess, Runnable onError) {
        TLRPC.TL_channels_toggleJoinToSend req = new TLRPC.TL_channels_toggleJoinToSend();
        req.channel = getInputChannel(chatId);
        req.enabled = enabled;
        getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda239(this, onSuccess, onError), 64);
    }

    /* renamed from: lambda$toggleChatJoinToSend$229$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m418xb852b44c(Runnable onSuccess, Runnable onError, TLObject response, TLRPC.TL_error error) {
        if (response != null) {
            processUpdates((TLRPC.Updates) response, false);
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda277(this));
            if (onSuccess != null) {
                onSuccess.run();
            }
        }
        if (error == null) {
            return;
        }
        if (!"CHAT_NOT_MODIFIED".equals(error.text)) {
            if (onError != null) {
                onError.run();
            }
        } else if (response == null && onSuccess != null) {
            onSuccess.run();
        }
    }

    /* renamed from: lambda$toggleChatJoinToSend$228$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m417xd311458b() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
    }

    public void toggleChatJoinRequest(long chatId, boolean enabled, Runnable onSuccess, Runnable onError) {
        TLRPC.TL_channels_toggleJoinRequest req = new TLRPC.TL_channels_toggleJoinRequest();
        req.channel = getInputChannel(chatId);
        req.enabled = enabled;
        getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda238(this, onSuccess, onError), 64);
    }

    /* renamed from: lambda$toggleChatJoinRequest$231$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m416xd5103089(Runnable onSuccess, Runnable onError, TLObject response, TLRPC.TL_error error) {
        if (response != null) {
            processUpdates((TLRPC.Updates) response, false);
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda266(this));
            if (onSuccess != null) {
                onSuccess.run();
            }
        }
        if (error == null) {
            return;
        }
        if (!"CHAT_NOT_MODIFIED".equals(error.text)) {
            if (onError != null) {
                onError.run();
            }
        } else if (response == null && onSuccess != null) {
            onSuccess.run();
        }
    }

    /* renamed from: lambda$toggleChatJoinRequest$230$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m415xefcec1c8() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
    }

    public void toggleChannelSignatures(long chatId, boolean enabled) {
        TLRPC.TL_channels_toggleSignatures req = new TLRPC.TL_channels_toggleSignatures();
        req.channel = getInputChannel(chatId);
        req.enabled = enabled;
        getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda171(this), 64);
    }

    /* renamed from: lambda$toggleChannelSignatures$233$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m414x68e9011c(TLObject response, TLRPC.TL_error error) {
        if (response != null) {
            processUpdates((TLRPC.Updates) response, false);
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda255(this));
        }
    }

    /* renamed from: lambda$toggleChannelSignatures$232$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m413x83a7925b() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
    }

    public void toggleChannelInvitesHistory(long chatId, boolean enabled) {
        TLRPC.TL_channels_togglePreHistoryHidden req = new TLRPC.TL_channels_togglePreHistoryHidden();
        req.channel = getInputChannel(chatId);
        req.enabled = enabled;
        getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda170(this), 64);
    }

    /* renamed from: lambda$toggleChannelInvitesHistory$235$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m412x96a1b74d(TLObject response, TLRPC.TL_error error) {
        if (response != null) {
            processUpdates((TLRPC.Updates) response, false);
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda244(this));
        }
    }

    /* renamed from: lambda$toggleChannelInvitesHistory$234$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m411xb160488c() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
    }

    public void updateChatAbout(long chatId, String about, TLRPC.ChatFull info) {
        TLRPC.TL_messages_editChatAbout req = new TLRPC.TL_messages_editChatAbout();
        req.peer = getInputPeer(-chatId);
        req.about = about;
        getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda248(this, info, about), 64);
    }

    /* renamed from: lambda$updateChatAbout$237$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m425xcbaf8cc2(TLRPC.ChatFull info, String about, TLObject response, TLRPC.TL_error error) {
        if ((response instanceof TLRPC.TL_boolTrue) && info != null) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda58(this, info, about));
        }
    }

    /* renamed from: lambda$updateChatAbout$236$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m424xe66e1e01(TLRPC.ChatFull info, String about) {
        info.about = about;
        getMessagesStorage().updateChatInfo(info, false);
        getNotificationCenter().postNotificationName(NotificationCenter.chatInfoDidLoad, info, 0, false, false);
    }

    public void updateChannelUserName(long chatId, String userName) {
        TLRPC.TL_channels_updateUsername req = new TLRPC.TL_channels_updateUsername();
        req.channel = getInputChannel(chatId);
        req.username = userName;
        getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda220(this, chatId, userName), 64);
    }

    /* renamed from: lambda$updateChannelUserName$239$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m423x4caaabc8(long chatId, String userName, TLObject response, TLRPC.TL_error error) {
        if (response instanceof TLRPC.TL_boolTrue) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda340(this, chatId, userName));
        }
    }

    /* renamed from: lambda$updateChannelUserName$238$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m422x67693d07(long chatId, String userName) {
        TLRPC.Chat chat = getChat(Long.valueOf(chatId));
        if (userName.length() != 0) {
            chat.flags |= 64;
        } else {
            chat.flags &= -65;
        }
        chat.username = userName;
        ArrayList<TLRPC.Chat> arrayList = new ArrayList<>();
        arrayList.add(chat);
        getMessagesStorage().putUsersAndChats((ArrayList<TLRPC.User>) null, arrayList, true, true);
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
    }

    public void sendBotStart(TLRPC.User user, String botHash) {
        if (user != null) {
            TLRPC.TL_messages_startBot req = new TLRPC.TL_messages_startBot();
            req.bot = getInputUser(user);
            req.peer = getInputPeer(user.id);
            req.start_param = botHash;
            req.random_id = Utilities.random.nextLong();
            getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda168(this));
        }
    }

    /* renamed from: lambda$sendBotStart$240$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m383xcb4b17eb(TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            processUpdates((TLRPC.Updates) response, false);
        }
    }

    public boolean isJoiningChannel(long chatId) {
        return this.joiningToChannels.contains(Long.valueOf(chatId));
    }

    public void addUserToChat(long chatId, TLRPC.User user, int forwardCount, String botHash, BaseFragment fragment, Runnable onFinishRunnable) {
        addUserToChat(chatId, user, forwardCount, botHash, fragment, false, onFinishRunnable, (ErrorDelegate) null);
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v3, resolved type: org.telegram.tgnet.TLRPC$TL_channels_inviteToChannel} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v7, resolved type: org.telegram.tgnet.TLRPC$TL_messages_addChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v4, resolved type: org.telegram.tgnet.TLRPC$TL_channels_joinChannel} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v11, resolved type: org.telegram.tgnet.TLRPC$TL_messages_addChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v5, resolved type: org.telegram.tgnet.TLRPC$TL_messages_startBot} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v14, resolved type: org.telegram.tgnet.TLRPC$TL_messages_addChatUser} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void addUserToChat(long r20, org.telegram.tgnet.TLRPC.User r22, int r23, java.lang.String r24, org.telegram.ui.ActionBar.BaseFragment r25, boolean r26, java.lang.Runnable r27, org.telegram.messenger.MessagesController.ErrorDelegate r28) {
        /*
            r19 = this;
            r12 = r19
            r13 = r20
            r15 = r22
            r11 = r24
            r10 = r28
            r0 = 0
            if (r15 != 0) goto L_0x0013
            if (r10 == 0) goto L_0x0012
            r10.run(r0)
        L_0x0012:
            return
        L_0x0013:
            int r1 = r12.currentAccount
            boolean r16 = org.telegram.messenger.ChatObject.isChannel(r13, r1)
            if (r16 == 0) goto L_0x0029
            java.lang.Long r1 = java.lang.Long.valueOf(r20)
            org.telegram.tgnet.TLRPC$Chat r1 = r12.getChat(r1)
            boolean r1 = r1.megagroup
            if (r1 == 0) goto L_0x0029
            r1 = 1
            goto L_0x002a
        L_0x0029:
            r1 = 0
        L_0x002a:
            r17 = r1
            org.telegram.tgnet.TLRPC$InputUser r9 = r12.getInputUser((org.telegram.tgnet.TLRPC.User) r15)
            if (r11 == 0) goto L_0x0062
            if (r16 == 0) goto L_0x0037
            if (r17 != 0) goto L_0x0037
            goto L_0x0062
        L_0x0037:
            org.telegram.tgnet.TLRPC$TL_messages_startBot r0 = new org.telegram.tgnet.TLRPC$TL_messages_startBot
            r0.<init>()
            r0.bot = r9
            if (r16 == 0) goto L_0x0048
            long r1 = -r13
            org.telegram.tgnet.TLRPC$InputPeer r1 = r12.getInputPeer((long) r1)
            r0.peer = r1
            goto L_0x0053
        L_0x0048:
            org.telegram.tgnet.TLRPC$TL_inputPeerChat r1 = new org.telegram.tgnet.TLRPC$TL_inputPeerChat
            r1.<init>()
            r0.peer = r1
            org.telegram.tgnet.TLRPC$InputPeer r1 = r0.peer
            r1.chat_id = r13
        L_0x0053:
            r0.start_param = r11
            java.security.SecureRandom r1 = org.telegram.messenger.Utilities.random
            long r1 = r1.nextLong()
            r0.random_id = r1
            r1 = r0
            r8 = r23
            r7 = r1
            goto L_0x00b7
        L_0x0062:
            if (r16 == 0) goto L_0x00a8
            boolean r1 = r9 instanceof org.telegram.tgnet.TLRPC.TL_inputUserSelf
            if (r1 == 0) goto L_0x0093
            java.util.ArrayList<java.lang.Long> r1 = r12.joiningToChannels
            java.lang.Long r2 = java.lang.Long.valueOf(r20)
            boolean r1 = r1.contains(r2)
            if (r1 == 0) goto L_0x007a
            if (r10 == 0) goto L_0x0079
            r10.run(r0)
        L_0x0079:
            return
        L_0x007a:
            org.telegram.tgnet.TLRPC$TL_channels_joinChannel r0 = new org.telegram.tgnet.TLRPC$TL_channels_joinChannel
            r0.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r1 = r19.getInputChannel((long) r20)
            r0.channel = r1
            r1 = r0
            java.util.ArrayList<java.lang.Long> r2 = r12.joiningToChannels
            java.lang.Long r3 = java.lang.Long.valueOf(r20)
            r2.add(r3)
            r8 = r23
            r7 = r1
            goto L_0x00b7
        L_0x0093:
            org.telegram.tgnet.TLRPC$TL_channels_inviteToChannel r0 = new org.telegram.tgnet.TLRPC$TL_channels_inviteToChannel
            r0.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r1 = r19.getInputChannel((long) r20)
            r0.channel = r1
            java.util.ArrayList<org.telegram.tgnet.TLRPC$InputUser> r1 = r0.users
            r1.add(r9)
            r1 = r0
            r8 = r23
            r7 = r1
            goto L_0x00b7
        L_0x00a8:
            org.telegram.tgnet.TLRPC$TL_messages_addChatUser r0 = new org.telegram.tgnet.TLRPC$TL_messages_addChatUser
            r0.<init>()
            r0.chat_id = r13
            r8 = r23
            r0.fwd_limit = r8
            r0.user_id = r9
            r1 = r0
            r7 = r1
        L_0x00b7:
            org.telegram.tgnet.ConnectionsManager r6 = r19.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda263 r4 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda263
            r0 = r4
            r1 = r19
            r2 = r16
            r3 = r9
            r12 = r4
            r4 = r20
            r13 = r6
            r6 = r26
            r14 = r7
            r7 = r27
            r8 = r28
            r18 = r9
            r9 = r25
            r10 = r14
            r11 = r17
            r0.<init>(r1, r2, r3, r4, r6, r7, r8, r9, r10, r11)
            r13.sendRequest(r14, r12)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.addUserToChat(long, org.telegram.tgnet.TLRPC$User, int, java.lang.String, org.telegram.ui.ActionBar.BaseFragment, boolean, java.lang.Runnable, org.telegram.messenger.MessagesController$ErrorDelegate):void");
    }

    /* renamed from: lambda$addUserToChat$245$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m124x61e3dvar_(boolean isChannel, TLRPC.InputUser inputUser, long chatId, boolean ignoreIfAlreadyExists, Runnable onFinishRunnable, ErrorDelegate onError, BaseFragment fragment, TLObject request, boolean isMegagroup, TLObject response, TLRPC.TL_error error) {
        boolean hasJoinMessage;
        TLRPC.InputUser inputUser2 = inputUser;
        long j = chatId;
        TLRPC.TL_error tL_error = error;
        if (isChannel && (inputUser2 instanceof TLRPC.TL_inputUserSelf)) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda313(this, j));
        }
        if (tL_error == null) {
            TLRPC.Updates updates = (TLRPC.Updates) response;
            int a = 0;
            while (true) {
                if (a >= updates.updates.size()) {
                    hasJoinMessage = false;
                    break;
                }
                TLRPC.Update update = updates.updates.get(a);
                if ((update instanceof TLRPC.TL_updateNewChannelMessage) && (((TLRPC.TL_updateNewChannelMessage) update).message.action instanceof TLRPC.TL_messageActionChatAddUser)) {
                    hasJoinMessage = true;
                    break;
                }
                a++;
            }
            processUpdates(updates, false);
            if (isChannel) {
                if (!hasJoinMessage && (inputUser2 instanceof TLRPC.TL_inputUserSelf)) {
                    generateJoinMessage(j, true);
                }
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda314(this, j), 1000);
            }
            if (isChannel && (inputUser2 instanceof TLRPC.TL_inputUserSelf)) {
                getMessagesStorage().updateDialogsWithDeletedMessages(-j, chatId, new ArrayList(), (ArrayList<Long>) null, true);
            }
            if (onFinishRunnable != null) {
                AndroidUtilities.runOnUIThread(onFinishRunnable);
            }
        } else if (!"USER_ALREADY_PARTICIPANT".equals(tL_error.text) || !ignoreIfAlreadyExists) {
            if (onError != null) {
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda31(this, onError, error, fragment, request, isChannel, isMegagroup));
            }
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda32(this, onError, error, fragment, request, isChannel, isMegagroup, inputUser));
        } else if (onFinishRunnable != null) {
            AndroidUtilities.runOnUIThread(onFinishRunnable);
        }
    }

    /* renamed from: lambda$addUserToChat$241$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m120xccde246e(long chatId) {
        this.joiningToChannels.remove(Long.valueOf(chatId));
    }

    /* renamed from: lambda$addUserToChat$242$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m121xb21var_f(ErrorDelegate onError, TLRPC.TL_error error, BaseFragment fragment, TLObject request, boolean isChannel, boolean isMegagroup) {
        if (onError.run(error)) {
            int i = this.currentAccount;
            boolean z = true;
            Object[] objArr = new Object[1];
            if (!isChannel || isMegagroup) {
                z = false;
            }
            objArr[0] = Boolean.valueOf(z);
            AlertsCreator.processError(i, error, fragment, request, objArr);
        }
    }

    /* renamed from: lambda$addUserToChat$243$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m122x976101f0(ErrorDelegate onError, TLRPC.TL_error error, BaseFragment fragment, TLObject request, boolean isChannel, boolean isMegagroup, TLRPC.InputUser inputUser) {
        if (onError == null) {
            int i = this.currentAccount;
            Object[] objArr = new Object[1];
            objArr[0] = Boolean.valueOf(isChannel && !isMegagroup);
            AlertsCreator.processError(i, error, fragment, request, objArr);
        }
        if (isChannel && (inputUser instanceof TLRPC.TL_inputUserSelf)) {
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_CHAT));
        }
    }

    /* renamed from: lambda$addUserToChat$244$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m123x7ca270b1(long chatId) {
        loadFullChat(chatId, 0, true);
    }

    public void deleteParticipantFromChat(long chatId, TLRPC.User user, TLRPC.ChatFull info) {
        deleteParticipantFromChat(chatId, user, (TLRPC.Chat) null, info, false, false);
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r13v0, resolved type: org.telegram.tgnet.TLRPC$TL_messages_deleteChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r13v1, resolved type: org.telegram.tgnet.TLRPC$TL_messages_deleteChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v4, resolved type: org.telegram.tgnet.TLRPC$TL_channels_editBanned} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v8, resolved type: org.telegram.tgnet.TLRPC$TL_messages_deleteChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r13v2, resolved type: org.telegram.tgnet.TLRPC$TL_messages_deleteChatUser} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r13v3, resolved type: org.telegram.tgnet.TLRPC$TL_channels_leaveChannel} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r13v4, resolved type: org.telegram.tgnet.TLRPC$TL_channels_deleteChannel} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void deleteParticipantFromChat(long r17, org.telegram.tgnet.TLRPC.User r19, org.telegram.tgnet.TLRPC.Chat r20, org.telegram.tgnet.TLRPC.ChatFull r21, boolean r22, boolean r23) {
        /*
            r16 = this;
            r6 = r16
            r7 = r17
            r9 = r19
            if (r9 != 0) goto L_0x000b
            if (r20 != 0) goto L_0x000b
            return
        L_0x000b:
            if (r9 == 0) goto L_0x0013
            org.telegram.tgnet.TLRPC$InputPeer r0 = getInputPeer((org.telegram.tgnet.TLRPC.User) r19)
            r10 = r0
            goto L_0x0018
        L_0x0013:
            org.telegram.tgnet.TLRPC$InputPeer r0 = getInputPeer((org.telegram.tgnet.TLRPC.Chat) r20)
            r10 = r0
        L_0x0018:
            java.lang.Long r0 = java.lang.Long.valueOf(r17)
            org.telegram.tgnet.TLRPC$Chat r11 = r6.getChat(r0)
            boolean r12 = org.telegram.messenger.ChatObject.isChannel(r11)
            r0 = 1
            if (r12 == 0) goto L_0x0097
            boolean r1 = org.telegram.messenger.UserObject.isUserSelf(r19)
            if (r1 == 0) goto L_0x0050
            boolean r0 = r11.creator
            if (r0 == 0) goto L_0x0042
            if (r22 == 0) goto L_0x0042
            org.telegram.tgnet.TLRPC$TL_channels_deleteChannel r0 = new org.telegram.tgnet.TLRPC$TL_channels_deleteChannel
            r0.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r1 = getInputChannel((org.telegram.tgnet.TLRPC.Chat) r11)
            r0.channel = r1
            r13 = r0
            goto L_0x00bb
        L_0x0042:
            org.telegram.tgnet.TLRPC$TL_channels_leaveChannel r0 = new org.telegram.tgnet.TLRPC$TL_channels_leaveChannel
            r0.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r1 = getInputChannel((org.telegram.tgnet.TLRPC.Chat) r11)
            r0.channel = r1
            r13 = r0
            goto L_0x00bb
        L_0x0050:
            org.telegram.tgnet.TLRPC$TL_channels_editBanned r1 = new org.telegram.tgnet.TLRPC$TL_channels_editBanned
            r1.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r2 = getInputChannel((org.telegram.tgnet.TLRPC.Chat) r11)
            r1.channel = r2
            r1.participant = r10
            org.telegram.tgnet.TLRPC$TL_chatBannedRights r2 = new org.telegram.tgnet.TLRPC$TL_chatBannedRights
            r2.<init>()
            r1.banned_rights = r2
            org.telegram.tgnet.TLRPC$TL_chatBannedRights r2 = r1.banned_rights
            r2.view_messages = r0
            org.telegram.tgnet.TLRPC$TL_chatBannedRights r2 = r1.banned_rights
            r2.send_media = r0
            org.telegram.tgnet.TLRPC$TL_chatBannedRights r2 = r1.banned_rights
            r2.send_messages = r0
            org.telegram.tgnet.TLRPC$TL_chatBannedRights r2 = r1.banned_rights
            r2.send_stickers = r0
            org.telegram.tgnet.TLRPC$TL_chatBannedRights r2 = r1.banned_rights
            r2.send_gifs = r0
            org.telegram.tgnet.TLRPC$TL_chatBannedRights r2 = r1.banned_rights
            r2.send_games = r0
            org.telegram.tgnet.TLRPC$TL_chatBannedRights r2 = r1.banned_rights
            r2.send_inline = r0
            org.telegram.tgnet.TLRPC$TL_chatBannedRights r2 = r1.banned_rights
            r2.embed_links = r0
            org.telegram.tgnet.TLRPC$TL_chatBannedRights r2 = r1.banned_rights
            r2.pin_messages = r0
            org.telegram.tgnet.TLRPC$TL_chatBannedRights r2 = r1.banned_rights
            r2.send_polls = r0
            org.telegram.tgnet.TLRPC$TL_chatBannedRights r2 = r1.banned_rights
            r2.invite_users = r0
            org.telegram.tgnet.TLRPC$TL_chatBannedRights r2 = r1.banned_rights
            r2.change_info = r0
            r0 = r1
            r13 = r0
            goto L_0x00bb
        L_0x0097:
            if (r22 == 0) goto L_0x00aa
            org.telegram.tgnet.TLRPC$TL_messages_deleteChat r0 = new org.telegram.tgnet.TLRPC$TL_messages_deleteChat
            r0.<init>()
            r0.chat_id = r7
            org.telegram.tgnet.ConnectionsManager r1 = r16.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda271 r2 = org.telegram.messenger.MessagesController$$ExternalSyntheticLambda271.INSTANCE
            r1.sendRequest(r0, r2)
            return
        L_0x00aa:
            org.telegram.tgnet.TLRPC$TL_messages_deleteChatUser r1 = new org.telegram.tgnet.TLRPC$TL_messages_deleteChatUser
            r1.<init>()
            r1.chat_id = r7
            org.telegram.tgnet.TLRPC$InputUser r2 = r6.getInputUser((org.telegram.tgnet.TLRPC.User) r9)
            r1.user_id = r2
            r1.revoke_history = r0
            r0 = r1
            r13 = r0
        L_0x00bb:
            boolean r0 = org.telegram.messenger.UserObject.isUserSelf(r19)
            if (r0 == 0) goto L_0x00c9
            long r0 = -r7
            r2 = 0
            r14 = r23
            r6.deleteDialog(r0, r2, r14)
            goto L_0x00cb
        L_0x00c9:
            r14 = r23
        L_0x00cb:
            org.telegram.tgnet.ConnectionsManager r15 = r16.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda265 r4 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda265
            r0 = r4
            r1 = r16
            r2 = r12
            r3 = r19
            r6 = r4
            r4 = r17
            r0.<init>(r1, r2, r3, r4)
            r0 = 64
            r15.sendRequest(r13, r6, r0)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.deleteParticipantFromChat(long, org.telegram.tgnet.TLRPC$User, org.telegram.tgnet.TLRPC$Chat, org.telegram.tgnet.TLRPC$ChatFull, boolean, boolean):void");
    }

    static /* synthetic */ void lambda$deleteParticipantFromChat$246(TLObject response, TLRPC.TL_error error) {
    }

    /* renamed from: lambda$deleteParticipantFromChat$248$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m188x1d40CLASSNAME(boolean isChannel, TLRPC.User user, long chatId, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            processUpdates((TLRPC.Updates) response, false);
            if (isChannel && !UserObject.isUserSelf(user)) {
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda318(this, chatId), 1000);
            }
        }
    }

    /* renamed from: lambda$deleteParticipantFromChat$247$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m187x37fvar_f(long chatId) {
        loadFullChat(chatId, 0, true);
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v2, resolved type: org.telegram.tgnet.TLRPC$TL_messages_editChatTitle} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v4, resolved type: org.telegram.tgnet.TLRPC$TL_channels_editTitle} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v5, resolved type: org.telegram.tgnet.TLRPC$TL_messages_editChatTitle} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v6, resolved type: org.telegram.tgnet.TLRPC$TL_messages_editChatTitle} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void changeChatTitle(long r5, java.lang.String r7) {
        /*
            r4 = this;
            int r0 = r4.currentAccount
            boolean r0 = org.telegram.messenger.ChatObject.isChannel(r5, r0)
            if (r0 == 0) goto L_0x0017
            org.telegram.tgnet.TLRPC$TL_channels_editTitle r0 = new org.telegram.tgnet.TLRPC$TL_channels_editTitle
            r0.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r1 = r4.getInputChannel((long) r5)
            r0.channel = r1
            r0.title = r7
            goto L_0x0021
        L_0x0017:
            org.telegram.tgnet.TLRPC$TL_messages_editChatTitle r0 = new org.telegram.tgnet.TLRPC$TL_messages_editChatTitle
            r0.<init>()
            r0.chat_id = r5
            r0.title = r7
            r1 = r0
        L_0x0021:
            org.telegram.tgnet.ConnectionsManager r1 = r4.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda147 r2 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda147
            r2.<init>(r4)
            r3 = 64
            r1.sendRequest(r0, r2, r3)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.changeChatTitle(long, java.lang.String):void");
    }

    /* renamed from: lambda$changeChatTitle$249$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m129xcc7e5467(TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            processUpdates((TLRPC.Updates) response, false);
        }
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v0, resolved type: org.telegram.tgnet.TLRPC$TL_messages_editChatPhoto} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v1, resolved type: org.telegram.tgnet.TLRPC$TL_messages_editChatPhoto} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v5, resolved type: org.telegram.tgnet.TLRPC$TL_channels_editPhoto} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v2, resolved type: org.telegram.tgnet.TLRPC$TL_messages_editChatPhoto} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void changeChatAvatar(long r17, org.telegram.tgnet.TLRPC.TL_inputChatPhoto r19, org.telegram.tgnet.TLRPC.InputFile r20, org.telegram.tgnet.TLRPC.InputFile r21, double r22, java.lang.String r24, org.telegram.tgnet.TLRPC.FileLocation r25, org.telegram.tgnet.TLRPC.FileLocation r26, java.lang.Runnable r27) {
        /*
            r16 = this;
            r0 = r17
            r2 = r20
            r3 = r21
            if (r19 == 0) goto L_0x000e
            r4 = r19
            r11 = r22
            r13 = r4
            goto L_0x0044
        L_0x000e:
            if (r2 != 0) goto L_0x001c
            if (r3 == 0) goto L_0x0013
            goto L_0x001c
        L_0x0013:
            org.telegram.tgnet.TLRPC$TL_inputChatPhotoEmpty r4 = new org.telegram.tgnet.TLRPC$TL_inputChatPhotoEmpty
            r4.<init>()
            r11 = r22
            r13 = r4
            goto L_0x0044
        L_0x001c:
            org.telegram.tgnet.TLRPC$TL_inputChatUploadedPhoto r4 = new org.telegram.tgnet.TLRPC$TL_inputChatUploadedPhoto
            r4.<init>()
            if (r2 == 0) goto L_0x002b
            r4.file = r2
            int r5 = r4.flags
            r5 = r5 | 1
            r4.flags = r5
        L_0x002b:
            if (r3 == 0) goto L_0x0040
            r4.video = r3
            int r5 = r4.flags
            r5 = r5 | 2
            r4.flags = r5
            r11 = r22
            r4.video_start_ts = r11
            int r5 = r4.flags
            r5 = r5 | 4
            r4.flags = r5
            goto L_0x0042
        L_0x0040:
            r11 = r22
        L_0x0042:
            r13 = r4
        L_0x0044:
            r14 = r16
            int r4 = r14.currentAccount
            boolean r4 = org.telegram.messenger.ChatObject.isChannel(r0, r4)
            if (r4 == 0) goto L_0x005e
            org.telegram.tgnet.TLRPC$TL_channels_editPhoto r4 = new org.telegram.tgnet.TLRPC$TL_channels_editPhoto
            r4.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r5 = r16.getInputChannel((long) r17)
            r4.channel = r5
            r4.photo = r13
            r15 = r4
            goto L_0x0069
        L_0x005e:
            org.telegram.tgnet.TLRPC$TL_messages_editChatPhoto r4 = new org.telegram.tgnet.TLRPC$TL_messages_editChatPhoto
            r4.<init>()
            r4.chat_id = r0
            r4.photo = r13
            r5 = r4
            r15 = r5
        L_0x0069:
            org.telegram.tgnet.ConnectionsManager r10 = r16.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda251 r9 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda251
            r4 = r9
            r5 = r16
            r6 = r19
            r7 = r25
            r8 = r26
            r0 = r9
            r9 = r24
            r1 = r10
            r10 = r27
            r4.<init>(r5, r6, r7, r8, r9, r10)
            r4 = 64
            r1.sendRequest(r15, r0, r4)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.changeChatAvatar(long, org.telegram.tgnet.TLRPC$TL_inputChatPhoto, org.telegram.tgnet.TLRPC$InputFile, org.telegram.tgnet.TLRPC$InputFile, double, java.lang.String, org.telegram.tgnet.TLRPC$FileLocation, org.telegram.tgnet.TLRPC$FileLocation, java.lang.Runnable):void");
    }

    /* renamed from: lambda$changeChatAvatar$251$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m128x517e1129(TLRPC.TL_inputChatPhoto oldPhoto, TLRPC.FileLocation smallSize, TLRPC.FileLocation bigSize, String videoPath, Runnable callback, TLObject response, TLRPC.TL_error error) {
        TLRPC.FileLocation fileLocation = smallSize;
        TLRPC.FileLocation fileLocation2 = bigSize;
        String str = videoPath;
        if (error == null) {
            TLRPC.Updates updates = (TLRPC.Updates) response;
            if (oldPhoto == null) {
                TLRPC.Photo photo = null;
                int a = 0;
                int N = updates.updates.size();
                while (true) {
                    if (a >= N) {
                        break;
                    }
                    TLRPC.Update update = updates.updates.get(a);
                    if (update instanceof TLRPC.TL_updateNewChannelMessage) {
                        TLRPC.Message message = ((TLRPC.TL_updateNewChannelMessage) update).message;
                        if ((message.action instanceof TLRPC.TL_messageActionChatEditPhoto) && (message.action.photo instanceof TLRPC.TL_photo)) {
                            photo = message.action.photo;
                            break;
                        }
                    } else if (update instanceof TLRPC.TL_updateNewMessage) {
                        TLRPC.Message message2 = ((TLRPC.TL_updateNewMessage) update).message;
                        if ((message2.action instanceof TLRPC.TL_messageActionChatEditPhoto) && (message2.action.photo instanceof TLRPC.TL_photo)) {
                            photo = message2.action.photo;
                            break;
                        }
                    } else {
                        continue;
                    }
                    a++;
                }
                if (photo != null) {
                    TLRPC.PhotoSize small = FileLoader.getClosestPhotoSizeWithSize(photo.sizes, 150);
                    TLRPC.VideoSize videoSize = photo.video_sizes.isEmpty() ? null : photo.video_sizes.get(0);
                    if (!(small == null || fileLocation == null)) {
                        File destFile = getFileLoader().getPathToAttach(small, true);
                        getFileLoader().getPathToAttach(fileLocation, true).renameTo(destFile);
                        StringBuilder sb = new StringBuilder();
                        File file = destFile;
                        sb.append(small.location.volume_id);
                        sb.append("_");
                        sb.append(small.location.local_id);
                        sb.append("@50_50");
                        ImageLoader.getInstance().replaceImageInCache(fileLocation.volume_id + "_" + fileLocation.local_id + "@50_50", sb.toString(), ImageLocation.getForPhoto(small, photo), true);
                    }
                    TLRPC.PhotoSize big = FileLoader.getClosestPhotoSizeWithSize(photo.sizes, 800);
                    if (!(big == null || fileLocation2 == null)) {
                        getFileLoader().getPathToAttach(fileLocation2, true).renameTo(getFileLoader().getPathToAttach(big, true));
                    }
                    if (!(videoSize == null || str == null)) {
                        new File(str).renameTo(getFileLoader().getPathToAttach(videoSize, "mp4", true));
                    }
                }
            }
            processUpdates(updates, false);
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda3(this, callback));
        }
    }

    /* renamed from: lambda$changeChatAvatar$250$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m127x6c3ca268(Runnable callback) {
        if (callback != null) {
            callback.run();
        }
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_AVATAR));
    }

    public void unregistedPush() {
        if (getUserConfig().registeredForPush && SharedConfig.pushString.length() == 0) {
            TLRPC.TL_account_unregisterDevice req = new TLRPC.TL_account_unregisterDevice();
            req.token = SharedConfig.pushString;
            req.token_type = 2;
            for (int a = 0; a < 4; a++) {
                UserConfig userConfig = UserConfig.getInstance(a);
                if (a != this.currentAccount && userConfig.isClientActivated()) {
                    req.other_uids.add(Long.valueOf(userConfig.getClientUserId()));
                }
            }
            getConnectionsManager().sendRequest(req, MessagesController$$ExternalSyntheticLambda290.INSTANCE);
        }
    }

    static /* synthetic */ void lambda$unregistedPush$252(TLObject response, TLRPC.TL_error error) {
    }

    public void performLogout(int type) {
        boolean z = true;
        if (type == 1) {
            unregistedPush();
            getConnectionsManager().sendRequest(new TLRPC.TL_auth_logOut(), new MessagesController$$ExternalSyntheticLambda164(this));
        } else {
            ConnectionsManager connectionsManager = getConnectionsManager();
            if (type != 2) {
                z = false;
            }
            connectionsManager.cleanup(z);
        }
        getUserConfig().clearConfig();
        SharedPrefsHelper.cleanupAccount(this.currentAccount);
        boolean shouldHandle = true;
        ArrayList<NotificationCenter.NotificationCenterDelegate> observers = getNotificationCenter().getObservers(NotificationCenter.appDidLogout);
        if (observers != null) {
            int a = 0;
            int N = observers.size();
            while (true) {
                if (a >= N) {
                    break;
                } else if (observers.get(a) instanceof LaunchActivity) {
                    shouldHandle = false;
                    break;
                } else {
                    a++;
                }
            }
        }
        if (shouldHandle && UserConfig.selectedAccount == this.currentAccount) {
            int account = -1;
            int a2 = 0;
            while (true) {
                if (a2 >= 4) {
                    break;
                } else if (UserConfig.getInstance(a2).isClientActivated()) {
                    account = a2;
                    break;
                } else {
                    a2++;
                }
            }
            if (account != -1) {
                UserConfig.selectedAccount = account;
                UserConfig.getInstance(0).saveConfig(false);
                LaunchActivity.clearFragments();
            }
        }
        getNotificationCenter().postNotificationName(NotificationCenter.appDidLogout, new Object[0]);
        getMessagesStorage().cleanup(false);
        cleanup();
        getContactsController().deleteUnknownAppAccounts();
    }

    /* renamed from: lambda$performLogout$254$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m311xe373f5bc(TLObject response, TLRPC.TL_error error) {
        getConnectionsManager().cleanup(false);
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda130(response));
    }

    static /* synthetic */ void lambda$performLogout$253(TLObject response) {
        if (response instanceof TLRPC.TL_auth_loggedOut) {
            TLRPC.TL_auth_loggedOut res = (TLRPC.TL_auth_loggedOut) response;
            if (((TLRPC.TL_auth_loggedOut) response).future_auth_token != null) {
                SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("saved_tokens", 0);
                int count = preferences.getInt("count", 0);
                SerializedData data = new SerializedData(response.getObjectSize());
                res.serializeToStream(data);
                SharedPreferences.Editor edit = preferences.edit();
                edit.putString("log_out_token_" + count, Utilities.bytesToHex(data.toByteArray())).putInt("count", count + 1).apply();
            }
        }
    }

    public static ArrayList<TLRPC.TL_auth_loggedOut> getSavedLogOutTokens() {
        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("saved_tokens", 0);
        int count = preferences.getInt("count", 0);
        if (count == 0) {
            return null;
        }
        ArrayList<TLRPC.TL_auth_loggedOut> tokens = new ArrayList<>();
        for (int i = 0; i < count; i++) {
            SerializedData serializedData = new SerializedData(Utilities.hexToBytes(preferences.getString("log_out_token_" + i, "")));
            TLRPC.TL_auth_loggedOut token = TLRPC.TL_auth_loggedOut.TLdeserialize(serializedData, serializedData.readInt32(true), true);
            if (token != null) {
                tokens.add(token);
            }
        }
        return tokens;
    }

    public static void saveLogOutTokens(ArrayList<TLRPC.TL_auth_loggedOut> tokens) {
        SharedPreferences preferences = ApplicationLoader.applicationContext.getSharedPreferences("saved_tokens", 0);
        ArrayList<TLRPC.TL_auth_loggedOut> activeTokens = new ArrayList<>();
        preferences.edit().clear().apply();
        int currentTimeMillis = (int) (System.currentTimeMillis() / 1000);
        for (int i = 0; i < Math.min(20, tokens.size()); i++) {
            activeTokens.add(tokens.get(i));
        }
        if (activeTokens.size() > 0) {
            SharedPreferences.Editor editor = preferences.edit();
            editor.putInt("count", activeTokens.size());
            for (int i2 = 0; i2 < activeTokens.size(); i2++) {
                SerializedData data = new SerializedData(activeTokens.get(i2).getObjectSize());
                activeTokens.get(i2).serializeToStream(data);
                editor.putString("log_out_token_" + i2, Utilities.bytesToHex(data.toByteArray()));
            }
            editor.apply();
        }
    }

    public void generateUpdateMessage() {
        if (!this.gettingAppChangelog && !BuildVars.DEBUG_VERSION && SharedConfig.lastUpdateVersion != null && !SharedConfig.lastUpdateVersion.equals(BuildVars.BUILD_VERSION_STRING)) {
            this.gettingAppChangelog = true;
            TLRPC.TL_help_getAppChangelog req = new TLRPC.TL_help_getAppChangelog();
            req.prev_app_version = SharedConfig.lastUpdateVersion;
            getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda152(this));
        }
    }

    /* renamed from: lambda$generateUpdateMessage$255$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m209xb2e3var_b(TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            SharedConfig.lastUpdateVersion = BuildVars.BUILD_VERSION_STRING;
            SharedConfig.saveConfig();
        }
        if (response instanceof TLRPC.Updates) {
            processUpdates((TLRPC.Updates) response, false);
        }
    }

    public void registerForPush(String regid) {
        if (!TextUtils.isEmpty(regid) && !this.registeringForPush && getUserConfig().getClientUserId() != 0) {
            if (!getUserConfig().registeredForPush || !regid.equals(SharedConfig.pushString)) {
                this.registeringForPush = true;
                this.lastPushRegisterSendTime = SystemClock.elapsedRealtime();
                if (SharedConfig.pushAuthKey == null) {
                    SharedConfig.pushAuthKey = new byte[256];
                    Utilities.random.nextBytes(SharedConfig.pushAuthKey);
                    SharedConfig.saveConfig();
                }
                TLRPC.TL_account_registerDevice req = new TLRPC.TL_account_registerDevice();
                req.token_type = 2;
                req.token = regid;
                req.no_muted = false;
                req.secret = SharedConfig.pushAuthKey;
                for (int a = 0; a < 4; a++) {
                    UserConfig userConfig = UserConfig.getInstance(a);
                    if (a != this.currentAccount && userConfig.isClientActivated()) {
                        long uid = userConfig.getClientUserId();
                        req.other_uids.add(Long.valueOf(uid));
                        if (BuildVars.LOGS_ENABLED) {
                            FileLog.d("add other uid = " + uid + " for account " + this.currentAccount);
                        }
                    }
                }
                getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda240(this, regid));
            }
        }
    }

    /* renamed from: lambda$registerForPush$257$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m366x159acb94(String regid, TLObject response, TLRPC.TL_error error) {
        if (response instanceof TLRPC.TL_boolTrue) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("account " + this.currentAccount + " registered for push");
            }
            getUserConfig().registeredForPush = true;
            SharedConfig.pushString = regid;
            getUserConfig().saveConfig(false);
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda233(this));
    }

    /* renamed from: lambda$registerForPush$256$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m365x30595cd3() {
        this.registeringForPush = false;
    }

    public void loadCurrentState() {
        if (!this.updatingState) {
            this.updatingState = true;
            getConnectionsManager().sendRequest(new TLRPC.TL_updates_getState(), new MessagesController$$ExternalSyntheticLambda154(this));
        }
    }

    /* renamed from: lambda$loadCurrentState$258$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m247xe72bbdad(TLObject response, TLRPC.TL_error error) {
        this.updatingState = false;
        if (error == null) {
            TLRPC.TL_updates_state res = (TLRPC.TL_updates_state) response;
            getMessagesStorage().setLastDateValue(res.date);
            getMessagesStorage().setLastPtsValue(res.pts);
            getMessagesStorage().setLastSeqValue(res.seq);
            getMessagesStorage().setLastQtsValue(res.qts);
            for (int a = 0; a < 3; a++) {
                processUpdatesQueue(a, 2);
            }
            getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
        } else if (error.code != 401) {
            loadCurrentState();
        }
    }

    private int getUpdateSeq(TLRPC.Updates updates) {
        if (updates instanceof TLRPC.TL_updatesCombined) {
            return updates.seq_start;
        }
        return updates.seq;
    }

    private void setUpdatesStartTime(int type, long time) {
        if (type == 0) {
            this.updatesStartWaitTimeSeq = time;
        } else if (type == 1) {
            this.updatesStartWaitTimePts = time;
        } else if (type == 2) {
            this.updatesStartWaitTimeQts = time;
        }
    }

    public long getUpdatesStartTime(int type) {
        if (type == 0) {
            return this.updatesStartWaitTimeSeq;
        }
        if (type == 1) {
            return this.updatesStartWaitTimePts;
        }
        if (type == 2) {
            return this.updatesStartWaitTimeQts;
        }
        return 0;
    }

    private int isValidUpdate(TLRPC.Updates updates, int type) {
        if (type == 0) {
            int seq = getUpdateSeq(updates);
            if (getMessagesStorage().getLastSeqValue() + 1 == seq || getMessagesStorage().getLastSeqValue() == seq) {
                return 0;
            }
            return getMessagesStorage().getLastSeqValue() < seq ? 1 : 2;
        } else if (type == 1) {
            if (updates.pts <= getMessagesStorage().getLastPtsValue()) {
                return 2;
            }
            return getMessagesStorage().getLastPtsValue() + updates.pts_count == updates.pts ? 0 : 1;
        } else if (type != 2) {
            return 0;
        } else {
            if (updates.pts <= getMessagesStorage().getLastQtsValue()) {
                return 2;
            }
            return getMessagesStorage().getLastQtsValue() + updates.updates.size() == updates.pts ? 0 : 1;
        }
    }

    private void processChannelsUpdatesQueue(long channelId, int state) {
        int updateState;
        long j = channelId;
        ArrayList<TLRPC.Updates> updatesQueue = this.updatesQueueChannels.get(j);
        if (updatesQueue != null) {
            int channelPts = this.channelsPts.get(j);
            if (updatesQueue.isEmpty()) {
                int i = state;
            } else if (channelPts == 0) {
                int i2 = state;
            } else {
                Collections.sort(updatesQueue, MessagesController$$ExternalSyntheticLambda139.INSTANCE);
                boolean anyProceed = false;
                if (state == 2) {
                    this.channelsPts.put(j, updatesQueue.get(0).pts);
                }
                for (int a = 0; a < updatesQueue.size(); a = (a - 1) + 1) {
                    TLRPC.Updates updates = updatesQueue.get(a);
                    if (updates.pts <= channelPts) {
                        updateState = 2;
                    } else if (updates.pts_count + channelPts == updates.pts) {
                        updateState = 0;
                    } else {
                        updateState = 1;
                    }
                    if (updateState == 0) {
                        processUpdates(updates, true);
                        anyProceed = true;
                        updatesQueue.remove(a);
                    } else if (updateState == 1) {
                        long updatesStartWaitTime = this.updatesStartWaitTimeChannels.get(j);
                        if (updatesStartWaitTime == 0 || (!anyProceed && Math.abs(System.currentTimeMillis() - updatesStartWaitTime) > 1500)) {
                            if (BuildVars.LOGS_ENABLED) {
                                FileLog.d("HOLE IN CHANNEL " + j + " UPDATES QUEUE - getChannelDifference ");
                            }
                            this.updatesStartWaitTimeChannels.delete(j);
                            this.updatesQueueChannels.remove(j);
                            getChannelDifference(channelId);
                            return;
                        }
                        if (BuildVars.LOGS_ENABLED) {
                            FileLog.d("HOLE IN CHANNEL " + j + " UPDATES QUEUE - will wait more time");
                        }
                        if (anyProceed) {
                            this.updatesStartWaitTimeChannels.put(j, System.currentTimeMillis());
                            return;
                        }
                        return;
                    } else {
                        updatesQueue.remove(a);
                    }
                }
                this.updatesQueueChannels.remove(j);
                this.updatesStartWaitTimeChannels.delete(j);
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("UPDATES CHANNEL " + j + " QUEUE PROCEED - OK");
                    return;
                }
                return;
            }
            this.updatesQueueChannels.remove(j);
        }
    }

    private void processUpdatesQueue(int type, int state) {
        ArrayList<TLRPC.Updates> updatesQueue = null;
        if (type == 0) {
            updatesQueue = this.updatesQueueSeq;
            Collections.sort(updatesQueue, new MessagesController$$ExternalSyntheticLambda137(this));
        } else if (type == 1) {
            updatesQueue = this.updatesQueuePts;
            Collections.sort(updatesQueue, MessagesController$$ExternalSyntheticLambda140.INSTANCE);
        } else if (type == 2) {
            updatesQueue = this.updatesQueueQts;
            Collections.sort(updatesQueue, MessagesController$$ExternalSyntheticLambda141.INSTANCE);
        }
        if (updatesQueue != null && !updatesQueue.isEmpty()) {
            boolean anyProceed = false;
            if (state == 2) {
                TLRPC.Updates updates = updatesQueue.get(0);
                if (type == 0) {
                    getMessagesStorage().setLastSeqValue(getUpdateSeq(updates));
                } else if (type == 1) {
                    getMessagesStorage().setLastPtsValue(updates.pts);
                } else {
                    getMessagesStorage().setLastQtsValue(updates.pts);
                }
            }
            for (int a = 0; a < updatesQueue.size(); a = (a - 1) + 1) {
                TLRPC.Updates updates2 = updatesQueue.get(a);
                int updateState = isValidUpdate(updates2, type);
                if (updateState == 0) {
                    processUpdates(updates2, true);
                    anyProceed = true;
                    updatesQueue.remove(a);
                } else if (updateState != 1) {
                    updatesQueue.remove(a);
                } else if (getUpdatesStartTime(type) == 0 || (!anyProceed && Math.abs(System.currentTimeMillis() - getUpdatesStartTime(type)) > 1500)) {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("HOLE IN UPDATES QUEUE - getDifference");
                    }
                    setUpdatesStartTime(type, 0);
                    updatesQueue.clear();
                    getDifference();
                    return;
                } else {
                    if (BuildVars.LOGS_ENABLED) {
                        FileLog.d("HOLE IN UPDATES QUEUE - will wait more time");
                    }
                    if (anyProceed) {
                        setUpdatesStartTime(type, System.currentTimeMillis());
                        return;
                    }
                    return;
                }
            }
            updatesQueue.clear();
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("UPDATES QUEUE PROCEED - OK");
            }
        }
        setUpdatesStartTime(type, 0);
    }

    /* renamed from: lambda$processUpdatesQueue$260$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ int m361xd533a8c2(TLRPC.Updates updates, TLRPC.Updates updates2) {
        return AndroidUtilities.compare(getUpdateSeq(updates), getUpdateSeq(updates2));
    }

    /* access modifiers changed from: protected */
    public void loadUnknownChannel(TLRPC.Chat channel, long taskId) {
        long newTaskId;
        if ((channel instanceof TLRPC.TL_channel) && this.gettingUnknownChannels.indexOfKey(channel.id) < 0) {
            if (channel.access_hash != 0) {
                TLRPC.TL_inputPeerChannel inputPeer = new TLRPC.TL_inputPeerChannel();
                inputPeer.channel_id = channel.id;
                inputPeer.access_hash = channel.access_hash;
                this.gettingUnknownChannels.put(channel.id, true);
                TLRPC.TL_messages_getPeerDialogs req = new TLRPC.TL_messages_getPeerDialogs();
                TLRPC.TL_inputDialogPeer inputDialogPeer = new TLRPC.TL_inputDialogPeer();
                inputDialogPeer.peer = inputPeer;
                req.peers.add(inputDialogPeer);
                if (taskId == 0) {
                    NativeByteBuffer data = null;
                    try {
                        data = new NativeByteBuffer(channel.getObjectSize() + 4);
                        data.writeInt32(0);
                        channel.serializeToStream(data);
                    } catch (Exception e) {
                        FileLog.e((Throwable) e);
                    }
                    newTaskId = getMessagesStorage().createPendingTask(data);
                } else {
                    newTaskId = taskId;
                }
                getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda227(this, newTaskId, channel));
            } else if (taskId != 0) {
                getMessagesStorage().removePendingTask(taskId);
            }
        }
    }

    /* renamed from: lambda$loadUnknownChannel$263$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m281xfd9d2588(long newTaskId, TLRPC.Chat channel, TLObject response, TLRPC.TL_error error) {
        long j = newTaskId;
        if (response != null) {
            TLRPC.TL_messages_peerDialogs res = (TLRPC.TL_messages_peerDialogs) response;
            if (!res.dialogs.isEmpty() && !res.chats.isEmpty()) {
                TLRPC.TL_messages_dialogs dialogs = new TLRPC.TL_messages_dialogs();
                dialogs.dialogs.addAll(res.dialogs);
                dialogs.messages.addAll(res.messages);
                dialogs.users.addAll(res.users);
                dialogs.chats.addAll(res.chats);
                processLoadedDialogs(dialogs, (ArrayList<TLRPC.EncryptedChat>) null, ((TLRPC.TL_dialog) res.dialogs.get(0)).folder_id, 0, 1, this.DIALOGS_LOAD_TYPE_CHANNEL, false, false, false);
            }
        }
        if (j != 0) {
            getMessagesStorage().removePendingTask(j);
        }
        this.gettingUnknownChannels.delete(channel.id);
    }

    public void startShortPoll(TLRPC.Chat chat, int guid, boolean stop) {
        if (chat != null) {
            Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda57(this, chat, stop, guid));
        }
    }

    /* renamed from: lambda$startShortPoll$264$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m410x409983(TLRPC.Chat chat, boolean stop, int guid) {
        ArrayList<Integer> guids = this.needShortPollChannels.get(chat.id);
        ArrayList<Integer> onlineGuids = this.needShortPollOnlines.get(chat.id);
        if (stop) {
            if (guids != null) {
                guids.remove(Integer.valueOf(guid));
            }
            if (guids == null || guids.isEmpty()) {
                this.needShortPollChannels.delete(chat.id);
            }
            if (chat.megagroup) {
                if (onlineGuids != null) {
                    onlineGuids.remove(Integer.valueOf(guid));
                }
                if (onlineGuids == null || onlineGuids.isEmpty()) {
                    this.needShortPollOnlines.delete(chat.id);
                    return;
                }
                return;
            }
            return;
        }
        if (guids == null) {
            guids = new ArrayList<>();
            this.needShortPollChannels.put(chat.id, guids);
        }
        if (!guids.contains(Integer.valueOf(guid))) {
            guids.add(Integer.valueOf(guid));
        }
        if (this.shortPollChannels.indexOfKey(chat.id) < 0) {
            getChannelDifference(chat.id, 3, 0, (TLRPC.InputChannel) null);
        }
        if (chat.megagroup) {
            if (onlineGuids == null) {
                onlineGuids = new ArrayList<>();
                this.needShortPollOnlines.put(chat.id, onlineGuids);
            }
            if (!onlineGuids.contains(Integer.valueOf(guid))) {
                onlineGuids.add(Integer.valueOf(guid));
            }
            if (this.shortPollOnlines.indexOfKey(chat.id) < 0) {
                this.shortPollOnlines.put(chat.id, 0);
            }
        }
    }

    private void getChannelDifference(long channelId) {
        getChannelDifference(channelId, 0, 0, (TLRPC.InputChannel) null);
    }

    public static boolean isSupportUser(TLRPC.User user) {
        return user != null && (user.support || user.id == 777000 || user.id == 333000 || user.id == 4240000 || user.id == 4244000 || user.id == 4245000 || user.id == 4246000 || user.id == 410000 || user.id == 420000 || user.id == 431000 || user.id == NUM || user.id == 434000 || user.id == 4243000 || user.id == 439000 || user.id == 449000 || user.id == 450000 || user.id == 452000 || user.id == 454000 || user.id == 4254000 || user.id == 455000 || user.id == 460000 || user.id == 470000 || user.id == 479000 || user.id == 796000 || user.id == 482000 || user.id == 490000 || user.id == 496000 || user.id == 497000 || user.id == 498000 || user.id == 4298000);
    }

    /* access modifiers changed from: protected */
    public void getChannelDifference(long channelId, int newDialogType, long taskId, TLRPC.InputChannel inputChannel) {
        int limit;
        int channelPts;
        TLRPC.InputChannel inputChannel2;
        long newTaskId;
        long j = channelId;
        int i = newDialogType;
        long j2 = taskId;
        boolean z = false;
        if (!this.gettingDifferenceChannels.get(j, false).booleanValue()) {
            if (i != 1) {
                int channelPts2 = this.channelsPts.get(j);
                if (channelPts2 == 0) {
                    channelPts2 = getMessagesStorage().getChannelPtsSync(j);
                    if (channelPts2 != 0) {
                        this.channelsPts.put(j, channelPts2);
                    }
                    if (channelPts2 == 0 && (i == 2 || i == 3)) {
                        return;
                    }
                }
                if (channelPts2 != 0) {
                    limit = 100;
                    channelPts = channelPts2;
                } else {
                    return;
                }
            } else if (this.channelsPts.get(j) == 0) {
                limit = 1;
                channelPts = 1;
            } else {
                return;
            }
            if (inputChannel == null) {
                TLRPC.Chat chat = getChat(Long.valueOf(channelId));
                if (chat == null && (chat = getMessagesStorage().getChatSync(j)) != null) {
                    putChat(chat, true);
                }
                inputChannel2 = getInputChannel(chat);
            } else {
                inputChannel2 = inputChannel;
            }
            if (inputChannel2.access_hash != 0) {
                if (j2 == 0) {
                    NativeByteBuffer data = null;
                    try {
                        data = new NativeByteBuffer(inputChannel2.getObjectSize() + 16);
                        data.writeInt32(25);
                        data.writeInt64(j);
                        data.writeInt32(i);
                        inputChannel2.serializeToStream(data);
                    } catch (Exception e) {
                        FileLog.e((Throwable) e);
                    }
                    newTaskId = getMessagesStorage().createPendingTask(data);
                } else {
                    newTaskId = taskId;
                }
                this.gettingDifferenceChannels.put(j, true);
                TLRPC.TL_updates_getChannelDifference req = new TLRPC.TL_updates_getChannelDifference();
                req.channel = inputChannel2;
                req.filter = new TLRPC.TL_channelMessagesFilterEmpty();
                req.pts = channelPts;
                req.limit = limit;
                if (i != 3) {
                    z = true;
                }
                req.force = z;
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("start getChannelDifference with pts = " + channelPts + " channelId = " + j);
                }
                MessagesController$$ExternalSyntheticLambda212 messagesController$$ExternalSyntheticLambda212 = r1;
                ConnectionsManager connectionsManager = getConnectionsManager();
                int i2 = channelPts;
                TLRPC.InputChannel inputChannel3 = inputChannel2;
                MessagesController$$ExternalSyntheticLambda212 messagesController$$ExternalSyntheticLambda2122 = new MessagesController$$ExternalSyntheticLambda212(this, channelId, newDialogType, newTaskId);
                connectionsManager.sendRequest(req, messagesController$$ExternalSyntheticLambda212);
            } else if (j2 != 0) {
                getMessagesStorage().removePendingTask(j2);
            }
        }
    }

    /* renamed from: lambda$getChannelDifference$273$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m220x2990de72(long channelId, int newDialogType, long newTaskId, TLObject response, TLRPC.TL_error error) {
        TLRPC.Chat channel;
        long j = channelId;
        long j2 = newTaskId;
        TLRPC.TL_error tL_error = error;
        if (response != null) {
            TLRPC.updates_ChannelDifference res = (TLRPC.updates_ChannelDifference) response;
            LongSparseArray<TLRPC.User> usersDict = new LongSparseArray<>();
            for (int a = 0; a < res.users.size(); a++) {
                TLRPC.User user = res.users.get(a);
                usersDict.put(user.id, user);
            }
            int a2 = 0;
            while (true) {
                if (a2 >= res.chats.size()) {
                    channel = null;
                    break;
                }
                TLRPC.Chat chat = res.chats.get(a2);
                if (chat.id == j) {
                    channel = chat;
                    break;
                }
                a2++;
            }
            TLRPC.Chat channelFinal = channel;
            ArrayList<TLRPC.TL_updateMessageID> msgUpdates = new ArrayList<>();
            if (!res.other_updates.isEmpty()) {
                int a3 = 0;
                while (a3 < res.other_updates.size()) {
                    TLRPC.Update upd = res.other_updates.get(a3);
                    if (upd instanceof TLRPC.TL_updateMessageID) {
                        msgUpdates.add((TLRPC.TL_updateMessageID) upd);
                        res.other_updates.remove(a3);
                        a3--;
                    }
                    a3++;
                }
            }
            getMessagesStorage().putUsersAndChats(res.users, res.chats, true, true);
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda108(this, res));
            MessagesController$$ExternalSyntheticLambda21 messagesController$$ExternalSyntheticLambda21 = r0;
            DispatchQueue storageQueue = getMessagesStorage().getStorageQueue();
            ArrayList<TLRPC.TL_updateMessageID> arrayList = msgUpdates;
            LongSparseArray<TLRPC.User> longSparseArray = usersDict;
            TLRPC.updates_ChannelDifference updates_channeldifference = res;
            MessagesController$$ExternalSyntheticLambda21 messagesController$$ExternalSyntheticLambda212 = new MessagesController$$ExternalSyntheticLambda21(this, msgUpdates, channelId, res, channelFinal, usersDict, newDialogType, newTaskId);
            storageQueue.postRunnable(messagesController$$ExternalSyntheticLambda21);
            long j3 = newTaskId;
            TLRPC.TL_error tL_error2 = tL_error;
            return;
        }
        TLRPC.TL_error tL_error3 = tL_error;
        if (tL_error3 != null) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda69(this, tL_error3, j));
            this.gettingDifferenceChannels.delete(j);
            long j4 = newTaskId;
            if (j4 != 0) {
                getMessagesStorage().removePendingTask(j4);
                return;
            }
            return;
        }
        long j5 = newTaskId;
        TLRPC.TL_error tL_error4 = tL_error3;
    }

    /* renamed from: lambda$getChannelDifference$265$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m212x31275295(TLRPC.updates_ChannelDifference res) {
        putUsers(res.users, false);
        putChats(res.chats, false);
    }

    /* renamed from: lambda$getChannelDifference$271$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m218x5f0e00f0(ArrayList msgUpdates, long channelId, TLRPC.updates_ChannelDifference res, TLRPC.Chat channelFinal, LongSparseArray usersDict, int newDialogType, long newTaskId) {
        if (!msgUpdates.isEmpty()) {
            SparseArray<long[]> corrected = new SparseArray<>();
            Iterator it = msgUpdates.iterator();
            while (it.hasNext()) {
                TLRPC.TL_updateMessageID update = (TLRPC.TL_updateMessageID) it.next();
                long[] ids = getMessagesStorage().updateMessageStateAndId(update.random_id, -channelId, (Integer) null, update.id, 0, false, -1);
                if (ids != null) {
                    corrected.put(update.id, ids);
                }
            }
            long j = channelId;
            if (corrected.size() != 0) {
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda352(this, corrected));
            }
        } else {
            long j2 = channelId;
        }
        Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda109(this, res, channelId, channelFinal, usersDict, newDialogType, newTaskId));
    }

    /* renamed from: lambda$getChannelDifference$266$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m213x1668CLASSNAME(SparseArray corrected) {
        for (int a = 0; a < corrected.size(); a++) {
            int newId = corrected.keyAt(a);
            long[] ids = (long[]) corrected.valueAt(a);
            getSendMessagesHelper().processSentMessage((int) ids[1]);
            getNotificationCenter().postNotificationName(NotificationCenter.messageReceivedByServer, Integer.valueOf((int) ids[1]), Integer.valueOf(newId), null, Long.valueOf(ids[0]), 0L, -1, false);
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:70:0x0197  */
    /* JADX WARNING: Removed duplicated region for block: B:71:0x01a6  */
    /* JADX WARNING: Removed duplicated region for block: B:81:0x0209  */
    /* JADX WARNING: Removed duplicated region for block: B:84:0x021d  */
    /* JADX WARNING: Removed duplicated region for block: B:87:0x0224  */
    /* JADX WARNING: Removed duplicated region for block: B:90:0x029a  */
    /* JADX WARNING: Removed duplicated region for block: B:98:? A[RETURN, SYNTHETIC] */
    /* renamed from: lambda$getChannelDifference$270$org-telegram-messenger-MessagesController  reason: not valid java name */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void m217x79cCLASSNAMEf(org.telegram.tgnet.TLRPC.updates_ChannelDifference r29, long r30, org.telegram.tgnet.TLRPC.Chat r32, androidx.collection.LongSparseArray r33, int r34, long r35) {
        /*
            r28 = this;
            r6 = r28
            r7 = r29
            r8 = r30
            r10 = r32
            r11 = r35
            boolean r0 = r7 instanceof org.telegram.tgnet.TLRPC.TL_updates_channelDifference
            r1 = 0
            r13 = 1
            if (r0 != 0) goto L_0x00b3
            boolean r0 = r7 instanceof org.telegram.tgnet.TLRPC.TL_updates_channelDifferenceEmpty
            if (r0 == 0) goto L_0x0018
            r14 = r34
            goto L_0x00b5
        L_0x0018:
            boolean r0 = r7 instanceof org.telegram.tgnet.TLRPC.TL_updates_channelDifferenceTooLong
            if (r0 == 0) goto L_0x00af
            long r2 = -r8
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r0 = r6.dialogs_read_inbox_max
            java.lang.Long r4 = java.lang.Long.valueOf(r2)
            java.lang.Object r0 = r0.get(r4)
            java.lang.Integer r0 = (java.lang.Integer) r0
            if (r0 != 0) goto L_0x0040
            org.telegram.messenger.MessagesStorage r4 = r28.getMessagesStorage()
            int r4 = r4.getDialogReadMax(r1, r2)
            java.lang.Integer r0 = java.lang.Integer.valueOf(r4)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r4 = r6.dialogs_read_inbox_max
            java.lang.Long r5 = java.lang.Long.valueOf(r2)
            r4.put(r5, r0)
        L_0x0040:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r4 = r6.dialogs_read_outbox_max
            java.lang.Long r5 = java.lang.Long.valueOf(r2)
            java.lang.Object r4 = r4.get(r5)
            java.lang.Integer r4 = (java.lang.Integer) r4
            if (r4 != 0) goto L_0x0063
            org.telegram.messenger.MessagesStorage r5 = r28.getMessagesStorage()
            int r5 = r5.getDialogReadMax(r13, r2)
            java.lang.Integer r4 = java.lang.Integer.valueOf(r5)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r5 = r6.dialogs_read_outbox_max
            java.lang.Long r14 = java.lang.Long.valueOf(r2)
            r5.put(r14, r4)
        L_0x0063:
            r5 = 0
        L_0x0064:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r14 = r7.messages
            int r14 = r14.size()
            if (r5 >= r14) goto L_0x009f
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r14 = r7.messages
            java.lang.Object r14 = r14.get(r5)
            org.telegram.tgnet.TLRPC$Message r14 = (org.telegram.tgnet.TLRPC.Message) r14
            r16 = r2
            long r1 = -r8
            r14.dialog_id = r1
            org.telegram.tgnet.TLRPC$MessageAction r1 = r14.action
            boolean r1 = r1 instanceof org.telegram.tgnet.TLRPC.TL_messageActionChannelCreate
            if (r1 != 0) goto L_0x0096
            if (r10 == 0) goto L_0x0085
            boolean r1 = r10.left
            if (r1 != 0) goto L_0x0096
        L_0x0085:
            boolean r1 = r14.out
            if (r1 == 0) goto L_0x008b
            r1 = r4
            goto L_0x008c
        L_0x008b:
            r1 = r0
        L_0x008c:
            int r1 = r1.intValue()
            int r2 = r14.id
            if (r1 >= r2) goto L_0x0096
            r1 = 1
            goto L_0x0097
        L_0x0096:
            r1 = 0
        L_0x0097:
            r14.unread = r1
            int r5 = r5 + 1
            r2 = r16
            r1 = 0
            goto L_0x0064
        L_0x009f:
            r16 = r2
            org.telegram.messenger.MessagesStorage r1 = r28.getMessagesStorage()
            r2 = r7
            org.telegram.tgnet.TLRPC$TL_updates_channelDifferenceTooLong r2 = (org.telegram.tgnet.TLRPC.TL_updates_channelDifferenceTooLong) r2
            r14 = r34
            r1.overwriteChannel(r8, r2, r14)
            goto L_0x01f7
        L_0x00af:
            r14 = r34
            goto L_0x01f7
        L_0x00b3:
            r14 = r34
        L_0x00b5:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r0 = r7.new_messages
            boolean r0 = r0.isEmpty()
            if (r0 != 0) goto L_0x01d5
            androidx.collection.LongSparseArray r0 = new androidx.collection.LongSparseArray
            r0.<init>()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r7.new_messages
            org.telegram.messenger.ImageLoader.saveMessagesThumbs(r1)
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            long r2 = -r8
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r4 = r6.dialogs_read_inbox_max
            java.lang.Long r5 = java.lang.Long.valueOf(r2)
            java.lang.Object r4 = r4.get(r5)
            java.lang.Integer r4 = (java.lang.Integer) r4
            if (r4 != 0) goto L_0x00f1
            org.telegram.messenger.MessagesStorage r5 = r28.getMessagesStorage()
            r15 = 0
            int r5 = r5.getDialogReadMax(r15, r2)
            java.lang.Integer r4 = java.lang.Integer.valueOf(r5)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r5 = r6.dialogs_read_inbox_max
            java.lang.Long r15 = java.lang.Long.valueOf(r2)
            r5.put(r15, r4)
        L_0x00f1:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r5 = r6.dialogs_read_outbox_max
            java.lang.Long r15 = java.lang.Long.valueOf(r2)
            java.lang.Object r5 = r5.get(r15)
            java.lang.Integer r5 = (java.lang.Integer) r5
            if (r5 != 0) goto L_0x0114
            org.telegram.messenger.MessagesStorage r15 = r28.getMessagesStorage()
            int r15 = r15.getDialogReadMax(r13, r2)
            java.lang.Integer r5 = java.lang.Integer.valueOf(r15)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r15 = r6.dialogs_read_outbox_max
            java.lang.Long r13 = java.lang.Long.valueOf(r2)
            r15.put(r13, r5)
        L_0x0114:
            r13 = 0
        L_0x0115:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r15 = r7.new_messages
            int r15 = r15.size()
            if (r13 >= r15) goto L_0x01b7
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r15 = r7.new_messages
            java.lang.Object r15 = r15.get(r13)
            org.telegram.tgnet.TLRPC$Message r15 = (org.telegram.tgnet.TLRPC.Message) r15
            r24 = r4
            boolean r4 = r15 instanceof org.telegram.tgnet.TLRPC.TL_messageEmpty
            if (r4 == 0) goto L_0x0131
            r26 = r2
            r25 = r5
            goto L_0x01ad
        L_0x0131:
            if (r10 == 0) goto L_0x013b
            boolean r4 = r10.left
            if (r4 != 0) goto L_0x0138
            goto L_0x013b
        L_0x0138:
            r25 = r5
            goto L_0x0155
        L_0x013b:
            boolean r4 = r15.out
            if (r4 == 0) goto L_0x0141
            r4 = r5
            goto L_0x0143
        L_0x0141:
            r4 = r24
        L_0x0143:
            int r4 = r4.intValue()
            r25 = r5
            int r5 = r15.id
            if (r4 >= r5) goto L_0x0155
            org.telegram.tgnet.TLRPC$MessageAction r4 = r15.action
            boolean r4 = r4 instanceof org.telegram.tgnet.TLRPC.TL_messageActionChannelCreate
            if (r4 != 0) goto L_0x0155
            r4 = 1
            goto L_0x0156
        L_0x0155:
            r4 = 0
        L_0x0156:
            r15.unread = r4
            java.util.ArrayList<java.lang.Long> r4 = r6.createdDialogIds
            java.lang.Long r5 = java.lang.Long.valueOf(r2)
            boolean r4 = r4.contains(r5)
            org.telegram.messenger.MessageObject r5 = new org.telegram.messenger.MessageObject
            r26 = r2
            int r2 = r6.currentAccount
            r18 = r5
            r19 = r2
            r20 = r15
            r21 = r33
            r22 = r4
            r23 = r4
            r18.<init>((int) r19, (org.telegram.tgnet.TLRPC.Message) r20, (androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC.User>) r21, (boolean) r22, (boolean) r23)
            r2 = r5
            boolean r3 = r2.isOut()
            if (r3 == 0) goto L_0x0184
            org.telegram.tgnet.TLRPC$Message r3 = r2.messageOwner
            boolean r3 = r3.from_scheduled
            if (r3 == 0) goto L_0x018d
        L_0x0184:
            boolean r3 = r2.isUnread()
            if (r3 == 0) goto L_0x018d
            r1.add(r2)
        L_0x018d:
            r5 = r4
            long r3 = -r8
            java.lang.Object r18 = r0.get(r3)
            java.util.ArrayList r18 = (java.util.ArrayList) r18
            if (r18 != 0) goto L_0x01a6
            java.util.ArrayList r19 = new java.util.ArrayList
            r19.<init>()
            r18 = r19
            r19 = r5
            r5 = r18
            r0.put(r3, r5)
            goto L_0x01aa
        L_0x01a6:
            r19 = r5
            r5 = r18
        L_0x01aa:
            r5.add(r2)
        L_0x01ad:
            int r13 = r13 + 1
            r4 = r24
            r5 = r25
            r2 = r26
            goto L_0x0115
        L_0x01b7:
            r26 = r2
            r24 = r4
            r25 = r5
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda355 r2 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda355
            r2.<init>(r6, r0)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r2)
            org.telegram.messenger.MessagesStorage r2 = r28.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r2 = r2.getStorageQueue()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda25 r3 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda25
            r3.<init>(r6, r1, r7)
            r2.postRunnable(r3)
        L_0x01d5:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r0 = r7.other_updates
            boolean r0 = r0.isEmpty()
            if (r0 != 0) goto L_0x01ea
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r7.other_updates
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r7.users
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r3 = r7.chats
            r4 = 1
            r5 = 0
            r0 = r28
            r0.processUpdateArray(r1, r2, r3, r4, r5)
        L_0x01ea:
            r0 = 1
            r6.processChannelsUpdatesQueue(r8, r0)
            org.telegram.messenger.MessagesStorage r0 = r28.getMessagesStorage()
            int r1 = r7.pts
            r0.saveChannelPts(r8, r1)
        L_0x01f7:
            androidx.collection.LongSparseArray<java.lang.Boolean> r0 = r6.gettingDifferenceChannels
            r0.delete(r8)
            org.telegram.messenger.support.LongSparseIntArray r0 = r6.channelsPts
            int r1 = r7.pts
            r0.put(r8, r1)
            int r0 = r7.flags
            r0 = r0 & 2
            if (r0 == 0) goto L_0x0219
            org.telegram.messenger.support.LongSparseIntArray r0 = r6.shortPollChannels
            long r1 = java.lang.System.currentTimeMillis()
            r3 = 1000(0x3e8, double:4.94E-321)
            long r1 = r1 / r3
            int r2 = (int) r1
            int r1 = r7.timeout
            int r2 = r2 + r1
            r0.put(r8, r2)
        L_0x0219:
            boolean r0 = r7.isFinal
            if (r0 != 0) goto L_0x0220
            r6.getChannelDifference(r8)
        L_0x0220:
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0294
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "received channel difference with pts = "
            r0.append(r1)
            int r1 = r7.pts
            r0.append(r1)
            java.lang.String r1 = " channelId = "
            r0.append(r1)
            r0.append(r8)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r1 = "new_messages = "
            r0.append(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r7.new_messages
            int r1 = r1.size()
            r0.append(r1)
            java.lang.String r1 = " messages = "
            r0.append(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r7.messages
            int r1 = r1.size()
            r0.append(r1)
            java.lang.String r1 = " users = "
            r0.append(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r1 = r7.users
            int r1 = r1.size()
            r0.append(r1)
            java.lang.String r1 = " chats = "
            r0.append(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r1 = r7.chats
            int r1 = r1.size()
            r0.append(r1)
            java.lang.String r1 = " other updates = "
            r0.append(r1)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r1 = r7.other_updates
            int r1 = r1.size()
            r0.append(r1)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x0294:
            r0 = 0
            int r2 = (r11 > r0 ? 1 : (r11 == r0 ? 0 : -1))
            if (r2 == 0) goto L_0x02a1
            org.telegram.messenger.MessagesStorage r0 = r28.getMessagesStorage()
            r0.removePendingTask(r11)
        L_0x02a1:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.m217x79cCLASSNAMEf(org.telegram.tgnet.TLRPC$updates_ChannelDifference, long, org.telegram.tgnet.TLRPC$Chat, androidx.collection.LongSparseArray, int, long):void");
    }

    /* renamed from: lambda$getChannelDifference$267$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m214xfbaa3017(LongSparseArray messages) {
        for (int a = 0; a < messages.size(); a++) {
            updateInterfaceWithMessages(messages.keyAt(a), (ArrayList) messages.valueAt(a), false);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    /* renamed from: lambda$getChannelDifference$269$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m216xCLASSNAMEd0d99(ArrayList pushMessages, TLRPC.updates_ChannelDifference res) {
        if (!pushMessages.isEmpty()) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda10(this, pushMessages));
        }
        getMessagesStorage().putMessages(res.new_messages, true, false, false, getDownloadController().getAutodownloadMask(), false);
    }

    /* renamed from: lambda$getChannelDifference$268$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m215xe0eb9ed8(ArrayList pushMessages) {
        getNotificationsController().processNewMessages(pushMessages, true, false, (CountDownLatch) null);
    }

    /* renamed from: lambda$getChannelDifference$272$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m219x444f6fb1(TLRPC.TL_error error, long channelId) {
        checkChannelError(error.text, channelId);
    }

    /* JADX WARNING: Can't fix incorrect switch cases order */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void checkChannelError(java.lang.String r8, long r9) {
        /*
            r7 = this;
            int r0 = r8.hashCode()
            r1 = 1
            r2 = 0
            r3 = 2
            switch(r0) {
                case -1809401834: goto L_0x001f;
                case -795226617: goto L_0x0015;
                case -471086771: goto L_0x000b;
                default: goto L_0x000a;
            }
        L_0x000a:
            goto L_0x0029
        L_0x000b:
            java.lang.String r0 = "CHANNEL_PUBLIC_GROUP_NA"
            boolean r0 = r8.equals(r0)
            if (r0 == 0) goto L_0x000a
            r0 = 1
            goto L_0x002a
        L_0x0015:
            java.lang.String r0 = "CHANNEL_PRIVATE"
            boolean r0 = r8.equals(r0)
            if (r0 == 0) goto L_0x000a
            r0 = 0
            goto L_0x002a
        L_0x001f:
            java.lang.String r0 = "USER_BANNED_IN_CHANNEL"
            boolean r0 = r8.equals(r0)
            if (r0 == 0) goto L_0x000a
            r0 = 2
            goto L_0x002a
        L_0x0029:
            r0 = -1
        L_0x002a:
            switch(r0) {
                case 0: goto L_0x005e;
                case 1: goto L_0x0046;
                case 2: goto L_0x002e;
                default: goto L_0x002d;
            }
        L_0x002d:
            goto L_0x0076
        L_0x002e:
            org.telegram.messenger.NotificationCenter r0 = r7.getNotificationCenter()
            int r4 = org.telegram.messenger.NotificationCenter.chatInfoCantLoad
            java.lang.Object[] r5 = new java.lang.Object[r3]
            java.lang.Long r6 = java.lang.Long.valueOf(r9)
            r5[r2] = r6
            java.lang.Integer r2 = java.lang.Integer.valueOf(r3)
            r5[r1] = r2
            r0.postNotificationName(r4, r5)
            goto L_0x0076
        L_0x0046:
            org.telegram.messenger.NotificationCenter r0 = r7.getNotificationCenter()
            int r4 = org.telegram.messenger.NotificationCenter.chatInfoCantLoad
            java.lang.Object[] r3 = new java.lang.Object[r3]
            java.lang.Long r5 = java.lang.Long.valueOf(r9)
            r3[r2] = r5
            java.lang.Integer r2 = java.lang.Integer.valueOf(r1)
            r3[r1] = r2
            r0.postNotificationName(r4, r3)
            goto L_0x0076
        L_0x005e:
            org.telegram.messenger.NotificationCenter r0 = r7.getNotificationCenter()
            int r4 = org.telegram.messenger.NotificationCenter.chatInfoCantLoad
            java.lang.Object[] r3 = new java.lang.Object[r3]
            java.lang.Long r5 = java.lang.Long.valueOf(r9)
            r3[r2] = r5
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)
            r3[r1] = r2
            r0.postNotificationName(r4, r3)
        L_0x0076:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.checkChannelError(java.lang.String, long):void");
    }

    public void getDifference() {
        getDifference(getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue(), false);
    }

    public void getDifference(int pts, int date, int qts, boolean slice) {
        registerForPush(SharedConfig.pushString);
        if (getMessagesStorage().getLastPtsValue() == 0) {
            loadCurrentState();
        } else if (slice || !this.gettingDifference) {
            this.gettingDifference = true;
            TLRPC.TL_updates_getDifference req = new TLRPC.TL_updates_getDifference();
            req.pts = pts;
            req.date = date;
            req.qts = qts;
            if (this.getDifferenceFirstSync) {
                req.flags |= 1;
                if (ApplicationLoader.isConnectedOrConnectingToWiFi()) {
                    req.pts_total_limit = 5000;
                } else {
                    req.pts_total_limit = 1000;
                }
                this.getDifferenceFirstSync = false;
            }
            if (req.date == 0) {
                req.date = getConnectionsManager().getCurrentTime();
            }
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("start getDifference with date = " + date + " pts = " + pts + " qts = " + qts);
            }
            getConnectionsManager().setIsUpdating(true);
            getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda179(this, date, qts));
        }
    }

    /* renamed from: lambda$getDifference$283$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m230x3429be00(int date, int qts, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            TLRPC.updates_Difference res = (TLRPC.updates_Difference) response;
            if (res instanceof TLRPC.TL_updates_differenceTooLong) {
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda113(this, res, date, qts));
                return;
            }
            int i = date;
            int i2 = qts;
            if (res instanceof TLRPC.TL_updates_differenceSlice) {
                getDifference(res.intermediate_state.pts, res.intermediate_state.date, res.intermediate_state.qts, true);
            }
            LongSparseArray<TLRPC.User> usersDict = new LongSparseArray<>();
            LongSparseArray<TLRPC.Chat> chatsDict = new LongSparseArray<>();
            for (int a = 0; a < res.users.size(); a++) {
                TLRPC.User user = res.users.get(a);
                usersDict.put(user.id, user);
            }
            for (int a2 = 0; a2 < res.chats.size(); a2++) {
                TLRPC.Chat chat = res.chats.get(a2);
                chatsDict.put(chat.id, chat);
            }
            ArrayList<TLRPC.TL_updateMessageID> msgUpdates = new ArrayList<>();
            if (!res.other_updates.isEmpty()) {
                int a3 = 0;
                while (a3 < res.other_updates.size()) {
                    TLRPC.Update upd = res.other_updates.get(a3);
                    if (upd instanceof TLRPC.TL_updateMessageID) {
                        msgUpdates.add((TLRPC.TL_updateMessageID) upd);
                        res.other_updates.remove(a3);
                        a3--;
                    } else if (getUpdateType(upd) == 2) {
                        long channelId = getUpdateChannelId(upd);
                        int channelPts = this.channelsPts.get(channelId);
                        if (channelPts == 0 && (channelPts = getMessagesStorage().getChannelPtsSync(channelId)) != 0) {
                            this.channelsPts.put(channelId, channelPts);
                        }
                        if (channelPts != 0 && getUpdatePts(upd) <= channelPts) {
                            res.other_updates.remove(a3);
                            a3--;
                        }
                    }
                    a3++;
                }
            }
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda112(this, res));
            getMessagesStorage().getStorageQueue().postRunnable(new MessagesController$$ExternalSyntheticLambda115(this, res, msgUpdates, usersDict, chatsDict));
            return;
        }
        int i3 = date;
        int i4 = qts;
        this.gettingDifference = false;
        getConnectionsManager().setIsUpdating(false);
    }

    /* renamed from: lambda$getDifference$274$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m221x567eCLASSNAME(TLRPC.updates_Difference res, int date, int qts) {
        this.loadedFullUsers.clear();
        this.loadedFullChats.clear();
        resetDialogs(true, getMessagesStorage().getLastSeqValue(), res.pts, date, qts);
    }

    /* renamed from: lambda$getDifference$275$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m222x3bCLASSNAME(TLRPC.updates_Difference res) {
        this.loadedFullUsers.clear();
        this.loadedFullChats.clear();
        putUsers(res.users, false);
        putChats(res.chats, false);
    }

    /* renamed from: lambda$getDifference$282$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m229x4ee84f3f(TLRPC.updates_Difference res, ArrayList msgUpdates, LongSparseArray usersDict, LongSparseArray chatsDict) {
        TLRPC.updates_Difference updates_difference = res;
        getMessagesStorage().putUsersAndChats(updates_difference.users, updates_difference.chats, true, false);
        if (!msgUpdates.isEmpty()) {
            SparseArray<long[]> corrected = new SparseArray<>();
            for (int a = 0; a < msgUpdates.size(); a++) {
                TLRPC.TL_updateMessageID update = (TLRPC.TL_updateMessageID) msgUpdates.get(a);
                long[] ids = getMessagesStorage().updateMessageStateAndId(update.random_id, 0, (Integer) null, update.id, 0, false, -1);
                if (ids != null) {
                    corrected.put(update.id, ids);
                }
            }
            ArrayList arrayList = msgUpdates;
            if (corrected.size() != 0) {
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda353(this, corrected));
            }
        } else {
            ArrayList arrayList2 = msgUpdates;
        }
        Utilities.stageQueue.postRunnable(new MessagesController$$ExternalSyntheticLambda114(this, updates_difference, usersDict, chatsDict));
    }

    /* renamed from: lambda$getDifference$276$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m223x2101a0e4(SparseArray corrected) {
        for (int a = 0; a < corrected.size(); a++) {
            int newId = corrected.keyAt(a);
            long[] ids = (long[]) corrected.valueAt(a);
            getSendMessagesHelper().processSentMessage((int) ids[1]);
            getNotificationCenter().postNotificationName(NotificationCenter.messageReceivedByServer, Integer.valueOf((int) ids[1]), Integer.valueOf(newId), null, Long.valueOf(ids[0]), 0L, -1, false);
        }
    }

    /* renamed from: lambda$getDifference$281$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m228x69a6e07e(TLRPC.updates_Difference res, LongSparseArray usersDict, LongSparseArray chatsDict) {
        boolean z;
        TLRPC.updates_Difference updates_difference = res;
        if (!updates_difference.new_messages.isEmpty() || !updates_difference.new_encrypted_messages.isEmpty()) {
            LongSparseArray<ArrayList<MessageObject>> messages = new LongSparseArray<>();
            for (int b = 0; b < updates_difference.new_encrypted_messages.size(); b++) {
                ArrayList<TLRPC.Message> decryptedMessages = getSecretChatHelper().decryptMessage(updates_difference.new_encrypted_messages.get(b));
                if (decryptedMessages != null && !decryptedMessages.isEmpty()) {
                    updates_difference.new_messages.addAll(decryptedMessages);
                }
            }
            ImageLoader.saveMessagesThumbs(updates_difference.new_messages);
            ArrayList<MessageObject> pushMessages = new ArrayList<>();
            long clientUserId = getUserConfig().getClientUserId();
            for (int a = 0; a < updates_difference.new_messages.size(); a++) {
                TLRPC.Message message = updates_difference.new_messages.get(a);
                if (!(message instanceof TLRPC.TL_messageEmpty)) {
                    MessageObject.getDialogId(message);
                    if (!DialogObject.isEncryptedDialog(message.dialog_id)) {
                        if (message.action instanceof TLRPC.TL_messageActionChatDeleteUser) {
                            TLRPC.User user = (TLRPC.User) usersDict.get(message.action.user_id);
                            if (user != null && user.bot) {
                                message.reply_markup = new TLRPC.TL_replyKeyboardHide();
                                message.flags |= 64;
                            }
                        } else {
                            LongSparseArray longSparseArray = usersDict;
                        }
                        if ((message.action instanceof TLRPC.TL_messageActionChatMigrateTo) || (message.action instanceof TLRPC.TL_messageActionChannelCreate)) {
                            z = false;
                            message.unread = false;
                            message.media_unread = false;
                        } else {
                            ConcurrentHashMap<Long, Integer> concurrentHashMap = message.out ? this.dialogs_read_outbox_max : this.dialogs_read_inbox_max;
                            Integer value = concurrentHashMap.get(Long.valueOf(message.dialog_id));
                            if (value == null) {
                                value = Integer.valueOf(getMessagesStorage().getDialogReadMax(message.out, message.dialog_id));
                                concurrentHashMap.put(Long.valueOf(message.dialog_id), value);
                            }
                            message.unread = value.intValue() < message.id;
                            z = false;
                        }
                    } else {
                        LongSparseArray longSparseArray2 = usersDict;
                        z = false;
                    }
                    if (message.dialog_id == clientUserId) {
                        message.unread = z;
                        message.media_unread = z;
                        message.out = true;
                    }
                    boolean isDialogCreated = this.createdDialogIds.contains(Long.valueOf(message.dialog_id));
                    MessageObject messageObject = new MessageObject(this.currentAccount, message, (LongSparseArray<TLRPC.User>) usersDict, (LongSparseArray<TLRPC.Chat>) chatsDict, isDialogCreated, isDialogCreated);
                    if ((!messageObject.isOut() || messageObject.messageOwner.from_scheduled) && messageObject.isUnread()) {
                        pushMessages.add(messageObject);
                    }
                    ArrayList<MessageObject> arr = messages.get(message.dialog_id);
                    if (arr == null) {
                        arr = new ArrayList<>();
                        messages.put(message.dialog_id, arr);
                    }
                    arr.add(messageObject);
                }
            }
            getMessagesStorage().getStorageQueue().postRunnable(new MessagesController$$ExternalSyntheticLambda27(this, pushMessages, updates_difference, messages));
            getSecretChatHelper().processPendingEncMessages();
        }
        if (!updates_difference.other_updates.isEmpty()) {
            processUpdateArray(updates_difference.other_updates, updates_difference.users, updates_difference.chats, true, 0);
        }
        if (updates_difference instanceof TLRPC.TL_updates_difference) {
            this.gettingDifference = false;
            getMessagesStorage().setLastSeqValue(updates_difference.state.seq);
            getMessagesStorage().setLastDateValue(updates_difference.state.date);
            getMessagesStorage().setLastPtsValue(updates_difference.state.pts);
            getMessagesStorage().setLastQtsValue(updates_difference.state.qts);
            getConnectionsManager().setIsUpdating(false);
            for (int a2 = 0; a2 < 3; a2++) {
                processUpdatesQueue(a2, 1);
            }
        } else if (updates_difference instanceof TLRPC.TL_updates_differenceSlice) {
            getMessagesStorage().setLastDateValue(updates_difference.intermediate_state.date);
            getMessagesStorage().setLastPtsValue(updates_difference.intermediate_state.pts);
            getMessagesStorage().setLastQtsValue(updates_difference.intermediate_state.qts);
        } else if (updates_difference instanceof TLRPC.TL_updates_differenceEmpty) {
            this.gettingDifference = false;
            getMessagesStorage().setLastSeqValue(updates_difference.seq);
            getMessagesStorage().setLastDateValue(updates_difference.date);
            getConnectionsManager().setIsUpdating(false);
            for (int a3 = 0; a3 < 3; a3++) {
                processUpdatesQueue(a3, 1);
            }
        }
        getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
        if (BuildVars.LOGS_ENABLED) {
            FileLog.d("received difference with date = " + getMessagesStorage().getLastDateValue() + " pts = " + getMessagesStorage().getLastPtsValue() + " seq = " + getMessagesStorage().getLastSeqValue() + " messages = " + updates_difference.new_messages.size() + " users = " + updates_difference.users.size() + " chats = " + updates_difference.chats.size() + " other updates = " + updates_difference.other_updates.size());
        }
    }

    /* renamed from: lambda$getDifference$280$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m227x846571bd(ArrayList pushMessages, TLRPC.updates_Difference res, LongSparseArray messages) {
        if (!pushMessages.isEmpty()) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda26(this, pushMessages, res));
        }
        getMessagesStorage().putMessages(res.new_messages, true, false, false, getDownloadController().getAutodownloadMask(), false);
        for (int a = 0; a < messages.size(); a++) {
            long dialogId = messages.keyAt(a);
            ArrayList<MessageObject> arr = (ArrayList) messages.valueAt(a);
            getMediaDataController().loadReplyMessagesForMessages(arr, dialogId, false, new MessagesController$$ExternalSyntheticLambda343(this, dialogId, arr));
        }
    }

    /* renamed from: lambda$getDifference$277$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m224x6430fa5(ArrayList pushMessages, TLRPC.updates_Difference res) {
        getNotificationsController().processNewMessages(pushMessages, !(res instanceof TLRPC.TL_updates_differenceSlice), false, (CountDownLatch) null);
    }

    /* renamed from: lambda$getDifference$279$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m226xd0c5ed27(long dialogId, ArrayList arr) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda342(this, dialogId, arr));
    }

    /* renamed from: lambda$getDifference$278$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m225xeb847e66(long dialogId, ArrayList arr) {
        updateInterfaceWithMessages(dialogId, arr, false);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    public void markDialogAsUnread(long dialogId, TLRPC.InputPeer peer, long taskId) {
        long newTaskId;
        TLRPC.Dialog dialog = this.dialogs_dict.get(dialogId);
        if (dialog != null) {
            dialog.unread_mark = true;
            if (dialog.unread_count == 0 && !isDialogMuted(dialogId)) {
                this.unreadUnmutedDialogs++;
            }
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_READ_DIALOG_MESSAGE));
            getMessagesStorage().setDialogUnread(dialogId, true);
            int b = 0;
            while (true) {
                DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
                if (b < dialogFilterArr.length) {
                    if (dialogFilterArr[b] != null && (dialogFilterArr[b].flags & DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
                        sortDialogs((LongSparseArray<TLRPC.Chat>) null);
                        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
                        break;
                    }
                    b++;
                } else {
                    break;
                }
            }
        }
        if (DialogObject.isEncryptedDialog(dialogId) == 0) {
            TLRPC.TL_messages_markDialogUnread req = new TLRPC.TL_messages_markDialogUnread();
            req.unread = true;
            if (peer == null) {
                peer = getInputPeer(dialogId);
            }
            if (!(peer instanceof TLRPC.TL_inputPeerEmpty)) {
                TLRPC.TL_inputDialogPeer inputDialogPeer = new TLRPC.TL_inputDialogPeer();
                inputDialogPeer.peer = peer;
                req.peer = inputDialogPeer;
                if (taskId == 0) {
                    NativeByteBuffer data = null;
                    try {
                        data = new NativeByteBuffer(peer.getObjectSize() + 12);
                        data.writeInt32(9);
                        data.writeInt64(dialogId);
                        peer.serializeToStream(data);
                    } catch (Exception e) {
                        FileLog.e((Throwable) e);
                    }
                    newTaskId = getMessagesStorage().createPendingTask(data);
                } else {
                    newTaskId = taskId;
                }
                getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda197(this, newTaskId));
            }
        }
    }

    /* renamed from: lambda$markDialogAsUnread$284$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m291x8e1bb6fe(long newTaskId, TLObject response, TLRPC.TL_error error) {
        if (newTaskId != 0) {
            getMessagesStorage().removePendingTask(newTaskId);
        }
    }

    public void loadUnreadDialogs() {
        if (!this.loadingUnreadDialogs && !getUserConfig().unreadDialogsLoaded) {
            this.loadingUnreadDialogs = true;
            getConnectionsManager().sendRequest(new TLRPC.TL_messages_getDialogUnreadMarks(), new MessagesController$$ExternalSyntheticLambda161(this));
        }
    }

    /* renamed from: lambda$loadUnreadDialogs$286$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m284xa3667486(TLObject response, TLRPC.TL_error error) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda45(this, response));
    }

    /* renamed from: lambda$loadUnreadDialogs$285$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m283xbe2505c5(TLObject response) {
        long did;
        if (response != null) {
            TLRPC.Vector vector = (TLRPC.Vector) response;
            int size = vector.objects.size();
            for (int a = 0; a < size; a++) {
                TLRPC.DialogPeer peer = (TLRPC.DialogPeer) vector.objects.get(a);
                if (peer instanceof TLRPC.TL_dialogPeer) {
                    TLRPC.TL_dialogPeer dialogPeer = (TLRPC.TL_dialogPeer) peer;
                    if (dialogPeer.peer.user_id != 0) {
                        did = dialogPeer.peer.user_id;
                    } else if (dialogPeer.peer.chat_id != 0) {
                        did = -dialogPeer.peer.chat_id;
                    } else {
                        did = -dialogPeer.peer.channel_id;
                    }
                    getMessagesStorage().setDialogUnread(did, true);
                    TLRPC.Dialog dialog = this.dialogs_dict.get(did);
                    if (dialog != null && !dialog.unread_mark) {
                        dialog.unread_mark = true;
                        if (dialog.unread_count == 0 && !isDialogMuted(did)) {
                            this.unreadUnmutedDialogs++;
                        }
                    }
                }
            }
            getUserConfig().unreadDialogsLoaded = true;
            getUserConfig().saveConfig(false);
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_READ_DIALOG_MESSAGE));
            this.loadingUnreadDialogs = false;
        }
    }

    public void reorderPinnedDialogs(int folderId, ArrayList<TLRPC.InputDialogPeer> order, long taskId) {
        long newTaskId;
        int i = folderId;
        TLRPC.TL_messages_reorderPinnedDialogs req = new TLRPC.TL_messages_reorderPinnedDialogs();
        req.folder_id = i;
        req.force = true;
        if (taskId == 0) {
            ArrayList<TLRPC.Dialog> dialogs = getDialogs(folderId);
            if (!dialogs.isEmpty()) {
                ArrayList<Long> dids = new ArrayList<>();
                ArrayList<Integer> pinned = new ArrayList<>();
                int N = dialogs.size();
                int size = 0;
                for (int a = 0; a < N; a++) {
                    TLRPC.Dialog dialog = dialogs.get(a);
                    if (!(dialog instanceof TLRPC.TL_dialogFolder)) {
                        if (dialog.pinned) {
                            dids.add(Long.valueOf(dialog.id));
                            pinned.add(Integer.valueOf(dialog.pinnedNum));
                            if (!DialogObject.isEncryptedDialog(dialog.id)) {
                                TLRPC.InputPeer inputPeer = getInputPeer(dialog.id);
                                TLRPC.TL_inputDialogPeer inputDialogPeer = new TLRPC.TL_inputDialogPeer();
                                inputDialogPeer.peer = inputPeer;
                                req.order.add(inputDialogPeer);
                                size += inputDialogPeer.getObjectSize();
                            }
                        } else if (dialog.id != this.promoDialogId) {
                            break;
                        }
                    }
                }
                getMessagesStorage().setDialogsPinned(dids, pinned);
                NativeByteBuffer data = null;
                try {
                    data = new NativeByteBuffer(size + 12);
                    data.writeInt32(16);
                    data.writeInt32(i);
                    data.writeInt32(req.order.size());
                    int N2 = req.order.size();
                    for (int a2 = 0; a2 < N2; a2++) {
                        req.order.get(a2).serializeToStream(data);
                    }
                } catch (Exception e) {
                    FileLog.e((Throwable) e);
                }
                newTaskId = getMessagesStorage().createPendingTask(data);
                ArrayList<TLRPC.InputDialogPeer> arrayList = order;
            } else {
                return;
            }
        } else {
            req.order = order;
            newTaskId = taskId;
        }
        getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda202(this, newTaskId));
    }

    /* renamed from: lambda$reorderPinnedDialogs$287$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m375x4d3d5863(long newTaskId, TLObject response, TLRPC.TL_error error) {
        if (newTaskId != 0) {
            getMessagesStorage().removePendingTask(newTaskId);
        }
    }

    public boolean pinDialog(long dialogId, boolean pin, TLRPC.InputPeer peer, long taskId) {
        TLRPC.InputPeer peer2;
        long newTaskId;
        long j = dialogId;
        boolean z = pin;
        TLRPC.Dialog dialog = this.dialogs_dict.get(j);
        if (dialog != null && dialog.pinned != z) {
            int folderId = dialog.folder_id;
            ArrayList<TLRPC.Dialog> dialogs = getDialogs(folderId);
            dialog.pinned = z;
            if (z) {
                int maxPinnedNum = 0;
                for (int a = 0; a < dialogs.size(); a++) {
                    TLRPC.Dialog d = dialogs.get(a);
                    if (!(d instanceof TLRPC.TL_dialogFolder)) {
                        if (d.pinned) {
                            maxPinnedNum = Math.max(d.pinnedNum, maxPinnedNum);
                        } else if (d.id != this.promoDialogId) {
                            break;
                        }
                    }
                }
                dialog.pinnedNum = maxPinnedNum + 1;
            } else {
                dialog.pinnedNum = 0;
            }
            sortDialogs((LongSparseArray<TLRPC.Chat>) null);
            if (!z && !dialogs.isEmpty() && dialogs.get(dialogs.size() - 1) == dialog && !this.dialogsEndReached.get(folderId)) {
                dialogs.remove(dialogs.size() - 1);
            }
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
            if (DialogObject.isEncryptedDialog(dialogId) || taskId == -1) {
            } else {
                TLRPC.TL_messages_toggleDialogPin req = new TLRPC.TL_messages_toggleDialogPin();
                req.pinned = z;
                if (peer == null) {
                    peer2 = getInputPeer(dialogId);
                } else {
                    peer2 = peer;
                }
                if (peer2 instanceof TLRPC.TL_inputPeerEmpty) {
                    return false;
                }
                TLRPC.TL_inputDialogPeer inputDialogPeer = new TLRPC.TL_inputDialogPeer();
                inputDialogPeer.peer = peer2;
                req.peer = inputDialogPeer;
                if (taskId == 0) {
                    NativeByteBuffer data = null;
                    try {
                        data = new NativeByteBuffer(peer2.getObjectSize() + 16);
                        data.writeInt32(4);
                        data.writeInt64(j);
                        data.writeBool(z);
                        peer2.serializeToStream(data);
                    } catch (Exception e) {
                        FileLog.e((Throwable) e);
                    }
                    newTaskId = getMessagesStorage().createPendingTask(data);
                } else {
                    newTaskId = taskId;
                }
                getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda201(this, newTaskId));
            }
            getMessagesStorage().setDialogPinned(j, dialog.pinnedNum);
            return true;
        } else if (dialog != null) {
            return true;
        } else {
            return false;
        }
    }

    /* renamed from: lambda$pinDialog$288$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m312lambda$pinDialog$288$orgtelegrammessengerMessagesController(long newTaskId, TLObject response, TLRPC.TL_error error) {
        if (newTaskId != 0) {
            getMessagesStorage().removePendingTask(newTaskId);
        }
    }

    public void loadPinnedDialogs(int folderId, long newDialogId, ArrayList<Long> arrayList) {
        if (this.loadingPinnedDialogs.indexOfKey(folderId) < 0 && !getUserConfig().isPinnedDialogsLoaded(folderId)) {
            this.loadingPinnedDialogs.put(folderId, 1);
            TLRPC.TL_messages_getPinnedDialogs req = new TLRPC.TL_messages_getPinnedDialogs();
            req.folder_id = folderId;
            getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda176(this, folderId));
        }
    }

    /* renamed from: lambda$loadPinnedDialogs$291$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m273xf1CLASSNAMEb97(int folderId, TLObject response, TLRPC.TL_error error) {
        int N;
        MessageObject mess;
        TLRPC.Chat chat;
        TLRPC.Chat chat2;
        MessagesController messagesController = this;
        if (response != null) {
            TLRPC.TL_messages_peerDialogs res = (TLRPC.TL_messages_peerDialogs) response;
            ArrayList<TLRPC.Dialog> newPinnedDialogs = new ArrayList<>(res.dialogs);
            messagesController.fetchFolderInLoadedPinnedDialogs(res);
            TLRPC.TL_messages_dialogs toCache = new TLRPC.TL_messages_dialogs();
            toCache.users.addAll(res.users);
            toCache.chats.addAll(res.chats);
            toCache.dialogs.addAll(res.dialogs);
            toCache.messages.addAll(res.messages);
            LongSparseArray<MessageObject> new_dialogMessage = new LongSparseArray<>();
            LongSparseArray<TLRPC.User> usersDict = new LongSparseArray<>();
            LongSparseArray<TLRPC.Chat> chatsDict = new LongSparseArray<>();
            for (int a = 0; a < res.users.size(); a++) {
                TLRPC.User u = res.users.get(a);
                usersDict.put(u.id, u);
            }
            for (int a2 = 0; a2 < res.chats.size(); a2++) {
                TLRPC.Chat c = res.chats.get(a2);
                chatsDict.put(c.id, c);
            }
            ArrayList arrayList = new ArrayList();
            for (int a3 = 0; a3 < res.messages.size(); a3++) {
                TLRPC.Message message = res.messages.get(a3);
                if (message.peer_id.channel_id != 0) {
                    TLRPC.Chat chat3 = chatsDict.get(message.peer_id.channel_id);
                    if (chat3 != null && chat3.left) {
                    }
                } else if (!(message.peer_id.chat_id == 0 || (chat2 = chatsDict.get(message.peer_id.chat_id)) == null || chat2.migrated_to == null)) {
                }
                TLRPC.Message message2 = message;
                MessageObject messageObject = new MessageObject(messagesController.currentAccount, message, usersDict, chatsDict, false, false);
                arrayList.add(messageObject);
                new_dialogMessage.put(messageObject.getDialogId(), messageObject);
            }
            getFileLoader().checkMediaExistance(arrayList);
            int i = 0;
            boolean z = true;
            boolean firstIsFolder = !newPinnedDialogs.isEmpty() && (newPinnedDialogs.get(0) instanceof TLRPC.TL_dialogFolder);
            int a4 = 0;
            int N2 = newPinnedDialogs.size();
            while (a4 < N2) {
                TLRPC.Dialog d = newPinnedDialogs.get(a4);
                d.pinned = z;
                DialogObject.initDialog(d);
                if (DialogObject.isChannel(d)) {
                    TLRPC.Chat chat4 = chatsDict.get(-d.id);
                    if (chat4 != null && chat4.left) {
                        N = N2;
                        a4++;
                        N2 = N;
                        i = 0;
                        z = true;
                    }
                } else if (!(!DialogObject.isChatDialog(d.id) || (chat = chatsDict.get(-d.id)) == null || chat.migrated_to == null)) {
                    N = N2;
                    a4++;
                    N2 = N;
                    i = 0;
                    z = true;
                }
                if (d.last_message_date == 0 && (mess = new_dialogMessage.get(d.id)) != null) {
                    d.last_message_date = mess.messageOwner.date;
                }
                N = N2;
                Integer value = messagesController.dialogs_read_inbox_max.get(Long.valueOf(d.id));
                if (value == null) {
                    value = Integer.valueOf(i);
                }
                messagesController.dialogs_read_inbox_max.put(Long.valueOf(d.id), Integer.valueOf(Math.max(value.intValue(), d.read_inbox_max_id)));
                messagesController = this;
                Integer value2 = messagesController.dialogs_read_outbox_max.get(Long.valueOf(d.id));
                if (value2 == null) {
                    value2 = Integer.valueOf(i);
                }
                messagesController.dialogs_read_outbox_max.put(Long.valueOf(d.id), Integer.valueOf(Math.max(value2.intValue(), d.read_outbox_max_id)));
                a4++;
                N2 = N;
                i = 0;
                z = true;
            }
            MessagesController$$ExternalSyntheticLambda308 messagesController$$ExternalSyntheticLambda308 = r0;
            TLRPC.TL_messages_peerDialogs tL_messages_peerDialogs = res;
            DispatchQueue storageQueue = getMessagesStorage().getStorageQueue();
            MessagesController$$ExternalSyntheticLambda308 messagesController$$ExternalSyntheticLambda3082 = new MessagesController$$ExternalSyntheticLambda308(this, folderId, newPinnedDialogs, firstIsFolder, res, new_dialogMessage, toCache);
            storageQueue.postRunnable(messagesController$$ExternalSyntheticLambda308);
        }
    }

    /* renamed from: lambda$loadPinnedDialogs$290$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m272xCLASSNAMEecd6(int folderId, ArrayList newPinnedDialogs, boolean firstIsFolder, TLRPC.TL_messages_peerDialogs res, LongSparseArray new_dialogMessage, TLRPC.TL_messages_dialogs toCache) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda307(this, folderId, newPinnedDialogs, firstIsFolder, res, new_dialogMessage, toCache));
    }

    /* renamed from: lambda$loadPinnedDialogs$289$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m271x58e66840(int folderId, ArrayList newPinnedDialogs, boolean firstIsFolder, TLRPC.TL_messages_peerDialogs res, LongSparseArray new_dialogMessage, TLRPC.TL_messages_dialogs toCache) {
        int maxPinnedNum;
        int i = folderId;
        ArrayList arrayList = newPinnedDialogs;
        TLRPC.TL_messages_peerDialogs tL_messages_peerDialogs = res;
        this.loadingPinnedDialogs.delete(i);
        applyDialogsNotificationsSettings(arrayList);
        boolean changed = false;
        boolean added = false;
        int maxPinnedNum2 = 0;
        ArrayList<TLRPC.Dialog> dialogs = getDialogs(folderId);
        int pinnedNum = firstIsFolder;
        for (int a = 0; a < dialogs.size(); a++) {
            TLRPC.Dialog dialog = dialogs.get(a);
            if (!(dialog instanceof TLRPC.TL_dialogFolder)) {
                if (DialogObject.isEncryptedDialog(dialog.id)) {
                    if (pinnedNum < newPinnedDialogs.size()) {
                        arrayList.add(pinnedNum, dialog);
                    } else {
                        arrayList.add(dialog);
                    }
                    pinnedNum++;
                } else if (dialog.pinned) {
                    maxPinnedNum2 = Math.max(dialog.pinnedNum, maxPinnedNum2);
                    dialog.pinned = false;
                    dialog.pinnedNum = 0;
                    changed = true;
                    pinnedNum++;
                } else if (dialog.id != this.promoDialogId) {
                    break;
                }
            }
        }
        ArrayList<Long> pinnedDialogs = new ArrayList<>();
        if (!newPinnedDialogs.isEmpty()) {
            putUsers(tL_messages_peerDialogs.users, false);
            putChats(tL_messages_peerDialogs.chats, false);
            ArrayList<Long> dids = new ArrayList<>();
            ArrayList<Integer> pinned = new ArrayList<>();
            int a2 = 0;
            int N = newPinnedDialogs.size();
            while (a2 < N) {
                TLRPC.Dialog dialog2 = (TLRPC.Dialog) arrayList.get(a2);
                dialog2.pinnedNum = (N - a2) + maxPinnedNum2;
                pinnedDialogs.add(Long.valueOf(dialog2.id));
                boolean z = changed;
                TLRPC.Dialog d = this.dialogs_dict.get(dialog2.id);
                if (d != null) {
                    d.pinned = true;
                    d.pinnedNum = dialog2.pinnedNum;
                    dids.add(Long.valueOf(dialog2.id));
                    pinned.add(Integer.valueOf(dialog2.pinnedNum));
                    maxPinnedNum = maxPinnedNum2;
                } else {
                    this.dialogs_dict.put(dialog2.id, dialog2);
                    MessageObject messageObject = (MessageObject) new_dialogMessage.get(dialog2.id);
                    maxPinnedNum = maxPinnedNum2;
                    this.dialogMessage.put(dialog2.id, messageObject);
                    if (messageObject != null && messageObject.messageOwner.peer_id.channel_id == 0) {
                        this.dialogMessagesByIds.put(messageObject.getId(), messageObject);
                        this.dialogsLoadedTillDate = Math.min(this.dialogsLoadedTillDate, messageObject.messageOwner.date);
                        if (messageObject.messageOwner.random_id != 0) {
                            this.dialogMessagesByRandomIds.put(messageObject.messageOwner.random_id, messageObject);
                        }
                    }
                    added = true;
                }
                changed = true;
                a2++;
                arrayList = newPinnedDialogs;
                TLRPC.TL_messages_peerDialogs tL_messages_peerDialogs2 = res;
                maxPinnedNum2 = maxPinnedNum;
            }
            boolean z2 = changed;
            int i2 = maxPinnedNum2;
            getMessagesStorage().setDialogsPinned(dids, pinned);
        }
        if (changed) {
            if (added) {
                this.allDialogs.clear();
                int size = this.dialogs_dict.size();
                for (int a3 = 0; a3 < size; a3++) {
                    TLRPC.Dialog dialog3 = this.dialogs_dict.valueAt(a3);
                    if (this.deletingDialogs.indexOfKey(dialog3.id) < 0) {
                        this.allDialogs.add(dialog3);
                    }
                }
            }
            sortDialogs((LongSparseArray<TLRPC.Chat>) null);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
        getMessagesStorage().unpinAllDialogsExceptNew(pinnedDialogs, i);
        getMessagesStorage().putDialogs(toCache, 1);
        getUserConfig().setPinnedDialogsLoaded(i, true);
        getUserConfig().saveConfig(false);
    }

    public void generateJoinMessage(long chatId, boolean ignoreLeft) {
        long j = chatId;
        TLRPC.Chat chat = getChat(Long.valueOf(chatId));
        if (chat != null && ChatObject.isChannel(j, this.currentAccount)) {
            if ((!chat.left && !chat.kicked) || ignoreLeft) {
                TLRPC.TL_messageService message = new TLRPC.TL_messageService();
                message.flags = 256;
                int newMessageId = getUserConfig().getNewMessageId();
                message.id = newMessageId;
                message.local_id = newMessageId;
                message.date = getConnectionsManager().getCurrentTime();
                message.from_id = new TLRPC.TL_peerUser();
                message.from_id.user_id = getUserConfig().getClientUserId();
                message.peer_id = new TLRPC.TL_peerChannel();
                message.peer_id.channel_id = j;
                message.dialog_id = -j;
                message.post = true;
                message.action = new TLRPC.TL_messageActionChatAddUser();
                message.action.users.add(Long.valueOf(getUserConfig().getClientUserId()));
                getUserConfig().saveConfig(false);
                ArrayList<MessageObject> pushMessages = new ArrayList<>();
                ArrayList<TLRPC.Message> messagesArr = new ArrayList<>();
                messagesArr.add(message);
                pushMessages.add(new MessageObject(this.currentAccount, message, true, false));
                getMessagesStorage().getStorageQueue().postRunnable(new MessagesController$$ExternalSyntheticLambda9(this, pushMessages));
                getMessagesStorage().putMessages(messagesArr, true, true, false, 0, false);
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda341(this, j, pushMessages));
            }
        }
    }

    /* renamed from: lambda$generateJoinMessage$292$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m206x37e90733(ArrayList pushMessages) {
        getNotificationsController().processNewMessages(pushMessages, true, false, (CountDownLatch) null);
    }

    /* renamed from: lambda$generateJoinMessage$293$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m207x1d2a75f4(ArrayList pushMessages) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda8(this, pushMessages));
    }

    /* renamed from: lambda$generateJoinMessage$294$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m208x26be4b5(long chatId, ArrayList pushMessages) {
        updateInterfaceWithMessages(-chatId, pushMessages, false);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    /* access modifiers changed from: protected */
    public void deleteMessagesByPush(long dialogId, ArrayList<Integer> ids, long channelId) {
        getMessagesStorage().getStorageQueue().postRunnable(new MessagesController$$ExternalSyntheticLambda18(this, ids, channelId, dialogId));
    }

    /* renamed from: lambda$deleteMessagesByPush$296$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m183x600cCLASSNAME(ArrayList ids, long channelId, long dialogId) {
        ArrayList arrayList = ids;
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda17(this, arrayList, channelId));
        getMessagesStorage().deletePushMessages(dialogId, arrayList);
        long j = dialogId;
        getMessagesStorage().updateDialogsWithDeletedMessages(j, channelId, ids, getMessagesStorage().markMessagesAsDeleted(j, ids, false, true, false), false);
    }

    /* renamed from: lambda$deleteMessagesByPush$295$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m182x7acb5750(ArrayList ids, long channelId) {
        getNotificationCenter().postNotificationName(NotificationCenter.messagesDeleted, ids, Long.valueOf(channelId), false);
        if (channelId == 0) {
            int size2 = ids.size();
            for (int b = 0; b < size2; b++) {
                MessageObject obj = this.dialogMessagesByIds.get(((Integer) ids.get(b)).intValue());
                if (obj != null) {
                    obj.deleted = true;
                }
            }
            return;
        }
        MessageObject obj2 = this.dialogMessage.get(-channelId);
        if (obj2 != null) {
            int size22 = ids.size();
            for (int b2 = 0; b2 < size22; b2++) {
                if (obj2.getId() == ((Integer) ids.get(b2)).intValue()) {
                    obj2.deleted = true;
                    return;
                }
            }
        }
    }

    public void checkChatInviter(long chatId, boolean createMessage) {
        TLRPC.Chat chat = getChat(Long.valueOf(chatId));
        if (ChatObject.isChannel(chat) && !chat.creator && this.gettingChatInviters.indexOfKey(chatId) < 0) {
            this.gettingChatInviters.put(chatId, true);
            TLRPC.TL_channels_getParticipant req = new TLRPC.TL_channels_getParticipant();
            req.channel = getInputChannel(chatId);
            req.participant = getInputPeer(getUserConfig().getClientUserId());
            getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda247(this, chat, createMessage, chatId));
        }
    }

    /* renamed from: lambda$checkChatInviter$301$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m137x7a106617(TLRPC.Chat chat, boolean createMessage, long chatId, TLObject response, TLRPC.TL_error error) {
        ArrayList<MessageObject> pushMessages;
        TLRPC.Chat chat2 = chat;
        long j = chatId;
        TLRPC.TL_channels_channelParticipant res = (TLRPC.TL_channels_channelParticipant) response;
        if (res != null && (res.participant instanceof TLRPC.TL_channelParticipantSelf)) {
            TLRPC.TL_channelParticipantSelf selfParticipant = (TLRPC.TL_channelParticipantSelf) res.participant;
            if (selfParticipant.inviter_id == getUserConfig().getClientUserId() && !selfParticipant.via_invite) {
                return;
            }
            if (!chat2.megagroup || !getMessagesStorage().isMigratedChat(chat2.id)) {
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda63(this, res));
                getMessagesStorage().putUsersAndChats(res.users, res.chats, true, true);
                if (!createMessage || Math.abs(getConnectionsManager().getCurrentTime() - res.participant.date) >= 86400 || getMessagesStorage().hasInviteMeMessage(j)) {
                    pushMessages = null;
                } else {
                    TLRPC.TL_messageService message = new TLRPC.TL_messageService();
                    message.media_unread = true;
                    message.unread = true;
                    message.flags = 256;
                    message.post = true;
                    int newMessageId = getUserConfig().getNewMessageId();
                    message.id = newMessageId;
                    message.local_id = newMessageId;
                    message.date = res.participant.date;
                    if (selfParticipant.inviter_id != getUserConfig().getClientUserId()) {
                        message.action = new TLRPC.TL_messageActionChatAddUser();
                    } else if (selfParticipant.via_invite) {
                        message.action = new TLRPC.TL_messageActionChatJoinedByRequest();
                    }
                    message.from_id = new TLRPC.TL_peerUser();
                    message.from_id.user_id = res.participant.inviter_id;
                    message.action.users.add(Long.valueOf(getUserConfig().getClientUserId()));
                    message.peer_id = new TLRPC.TL_peerChannel();
                    message.peer_id.channel_id = j;
                    message.dialog_id = -j;
                    getUserConfig().saveConfig(false);
                    ArrayList<MessageObject> pushMessages2 = new ArrayList<>();
                    ArrayList<TLRPC.Message> messagesArr = new ArrayList<>();
                    ConcurrentHashMap concurrentHashMap = new ConcurrentHashMap();
                    for (int a = 0; a < res.users.size(); a++) {
                        TLRPC.User user = res.users.get(a);
                        concurrentHashMap.put(Long.valueOf(user.id), user);
                    }
                    messagesArr.add(message);
                    pushMessages2.add(new MessageObject(this.currentAccount, (TLRPC.Message) message, (AbstractMap<Long, TLRPC.User>) concurrentHashMap, true, false));
                    getMessagesStorage().getStorageQueue().postRunnable(new MessagesController$$ExternalSyntheticLambda7(this, pushMessages2));
                    getMessagesStorage().putMessages(messagesArr, true, true, false, 0, false);
                    pushMessages = pushMessages2;
                }
                getMessagesStorage().saveChatInviter(j, res.participant.inviter_id);
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda346(this, chatId, pushMessages, res));
            }
        }
    }

    /* renamed from: lambda$checkChatInviter$297$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m133x1947var_(TLRPC.TL_channels_channelParticipant res) {
        putUsers(res.users, false);
        putChats(res.chats, false);
    }

    /* renamed from: lambda$checkChatInviter$298$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m134xfe895var_(ArrayList pushMessages) {
        getNotificationsController().processNewMessages(pushMessages, true, false, (CountDownLatch) null);
    }

    /* renamed from: lambda$checkChatInviter$299$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m135xe3cacdf5(ArrayList pushMessages) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda6(this, pushMessages));
    }

    /* renamed from: lambda$checkChatInviter$300$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m136x94cevar_(long chatId, ArrayList pushMessages, TLRPC.TL_channels_channelParticipant res) {
        this.gettingChatInviters.delete(chatId);
        if (pushMessages != null) {
            updateInterfaceWithMessages(-chatId, pushMessages, false);
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.didLoadChatInviter, Long.valueOf(chatId), Long.valueOf(res.participant.inviter_id));
    }

    private int getUpdateType(TLRPC.Update update) {
        if ((update instanceof TLRPC.TL_updateNewMessage) || (update instanceof TLRPC.TL_updateReadMessagesContents) || (update instanceof TLRPC.TL_updateReadHistoryInbox) || (update instanceof TLRPC.TL_updateReadHistoryOutbox) || (update instanceof TLRPC.TL_updateDeleteMessages) || (update instanceof TLRPC.TL_updateWebPage) || (update instanceof TLRPC.TL_updateEditMessage) || (update instanceof TLRPC.TL_updateFolderPeers) || (update instanceof TLRPC.TL_updatePinnedMessages)) {
            return 0;
        }
        if (update instanceof TLRPC.TL_updateNewEncryptedMessage) {
            return 1;
        }
        if ((update instanceof TLRPC.TL_updateNewChannelMessage) || (update instanceof TLRPC.TL_updateDeleteChannelMessages) || (update instanceof TLRPC.TL_updateEditChannelMessage) || (update instanceof TLRPC.TL_updateChannelWebPage) || (update instanceof TLRPC.TL_updatePinnedChannelMessages)) {
            return 2;
        }
        return 3;
    }

    private static int getUpdatePts(TLRPC.Update update) {
        if (update instanceof TLRPC.TL_updateDeleteMessages) {
            return ((TLRPC.TL_updateDeleteMessages) update).pts;
        }
        if (update instanceof TLRPC.TL_updateNewChannelMessage) {
            return ((TLRPC.TL_updateNewChannelMessage) update).pts;
        }
        if (update instanceof TLRPC.TL_updateReadHistoryOutbox) {
            return ((TLRPC.TL_updateReadHistoryOutbox) update).pts;
        }
        if (update instanceof TLRPC.TL_updateNewMessage) {
            return ((TLRPC.TL_updateNewMessage) update).pts;
        }
        if (update instanceof TLRPC.TL_updateEditMessage) {
            return ((TLRPC.TL_updateEditMessage) update).pts;
        }
        if (update instanceof TLRPC.TL_updateWebPage) {
            return ((TLRPC.TL_updateWebPage) update).pts;
        }
        if (update instanceof TLRPC.TL_updateReadHistoryInbox) {
            return ((TLRPC.TL_updateReadHistoryInbox) update).pts;
        }
        if (update instanceof TLRPC.TL_updateChannelWebPage) {
            return ((TLRPC.TL_updateChannelWebPage) update).pts;
        }
        if (update instanceof TLRPC.TL_updateDeleteChannelMessages) {
            return ((TLRPC.TL_updateDeleteChannelMessages) update).pts;
        }
        if (update instanceof TLRPC.TL_updateEditChannelMessage) {
            return ((TLRPC.TL_updateEditChannelMessage) update).pts;
        }
        if (update instanceof TLRPC.TL_updateReadMessagesContents) {
            return ((TLRPC.TL_updateReadMessagesContents) update).pts;
        }
        if (update instanceof TLRPC.TL_updateChannelTooLong) {
            return ((TLRPC.TL_updateChannelTooLong) update).pts;
        }
        if (update instanceof TLRPC.TL_updateFolderPeers) {
            return ((TLRPC.TL_updateFolderPeers) update).pts;
        }
        if (update instanceof TLRPC.TL_updatePinnedChannelMessages) {
            return ((TLRPC.TL_updatePinnedChannelMessages) update).pts;
        }
        if (update instanceof TLRPC.TL_updatePinnedMessages) {
            return ((TLRPC.TL_updatePinnedMessages) update).pts;
        }
        return 0;
    }

    private static int getUpdatePtsCount(TLRPC.Update update) {
        if (update instanceof TLRPC.TL_updateDeleteMessages) {
            return ((TLRPC.TL_updateDeleteMessages) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updateNewChannelMessage) {
            return ((TLRPC.TL_updateNewChannelMessage) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updateReadHistoryOutbox) {
            return ((TLRPC.TL_updateReadHistoryOutbox) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updateNewMessage) {
            return ((TLRPC.TL_updateNewMessage) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updateEditMessage) {
            return ((TLRPC.TL_updateEditMessage) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updateWebPage) {
            return ((TLRPC.TL_updateWebPage) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updateReadHistoryInbox) {
            return ((TLRPC.TL_updateReadHistoryInbox) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updateChannelWebPage) {
            return ((TLRPC.TL_updateChannelWebPage) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updateDeleteChannelMessages) {
            return ((TLRPC.TL_updateDeleteChannelMessages) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updateEditChannelMessage) {
            return ((TLRPC.TL_updateEditChannelMessage) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updateReadMessagesContents) {
            return ((TLRPC.TL_updateReadMessagesContents) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updateFolderPeers) {
            return ((TLRPC.TL_updateFolderPeers) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updatePinnedChannelMessages) {
            return ((TLRPC.TL_updatePinnedChannelMessages) update).pts_count;
        }
        if (update instanceof TLRPC.TL_updatePinnedMessages) {
            return ((TLRPC.TL_updatePinnedMessages) update).pts_count;
        }
        return 0;
    }

    private static int getUpdateQts(TLRPC.Update update) {
        if (update instanceof TLRPC.TL_updateNewEncryptedMessage) {
            return ((TLRPC.TL_updateNewEncryptedMessage) update).qts;
        }
        return 0;
    }

    public static long getUpdateChannelId(TLRPC.Update update) {
        if (update instanceof TLRPC.TL_updateNewChannelMessage) {
            return ((TLRPC.TL_updateNewChannelMessage) update).message.peer_id.channel_id;
        }
        if (update instanceof TLRPC.TL_updateEditChannelMessage) {
            return ((TLRPC.TL_updateEditChannelMessage) update).message.peer_id.channel_id;
        }
        if (update instanceof TLRPC.TL_updateReadChannelOutbox) {
            return ((TLRPC.TL_updateReadChannelOutbox) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateChannelMessageViews) {
            return ((TLRPC.TL_updateChannelMessageViews) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateChannelMessageForwards) {
            return ((TLRPC.TL_updateChannelMessageForwards) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateChannelTooLong) {
            return ((TLRPC.TL_updateChannelTooLong) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateChannelReadMessagesContents) {
            return ((TLRPC.TL_updateChannelReadMessagesContents) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateChannelAvailableMessages) {
            return ((TLRPC.TL_updateChannelAvailableMessages) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateChannel) {
            return ((TLRPC.TL_updateChannel) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateChannelWebPage) {
            return ((TLRPC.TL_updateChannelWebPage) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateDeleteChannelMessages) {
            return ((TLRPC.TL_updateDeleteChannelMessages) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateReadChannelInbox) {
            return ((TLRPC.TL_updateReadChannelInbox) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateReadChannelDiscussionInbox) {
            return ((TLRPC.TL_updateReadChannelDiscussionInbox) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateReadChannelDiscussionOutbox) {
            return ((TLRPC.TL_updateReadChannelDiscussionOutbox) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updateChannelUserTyping) {
            return ((TLRPC.TL_updateChannelUserTyping) update).channel_id;
        }
        if (update instanceof TLRPC.TL_updatePinnedChannelMessages) {
            return ((TLRPC.TL_updatePinnedChannelMessages) update).channel_id;
        }
        if (!BuildVars.LOGS_ENABLED) {
            return 0;
        }
        FileLog.e("trying to get unknown update channel_id for " + update);
        return 0;
    }

    public void processUpdates(TLRPC.Updates updates, boolean fromQueue) {
        String str;
        boolean updateStatus;
        String str2;
        String str3;
        TLRPC.User user;
        TLRPC.Chat channel;
        TLRPC.User user3;
        boolean needFwdUser;
        TLRPC.User user2;
        TLRPC.User user32;
        TLRPC.User user33;
        boolean missingData;
        boolean missingData2;
        ArrayList<Long> needGetChannelsDiff;
        boolean needGetDiff;
        Integer value;
        MessageObject obj;
        ArrayList<TLRPC.Message> arr;
        ArrayList<MessageObject> objArr;
        boolean missingData3;
        TLRPC.User user34;
        TLRPC.Chat channel2;
        TLRPC.Chat channel3;
        TLRPC.User user22;
        boolean updateStatus2;
        boolean needGetDiff2;
        boolean needReceivedQueue;
        String str4;
        boolean processUpdate;
        String str5;
        int a;
        LongSparseArray<TLRPC.Chat> minChannels;
        String str6;
        boolean skipUpdate;
        int channelPts;
        boolean needReceivedQueue2;
        String str7;
        int channelPts2;
        boolean needGetDiff3;
        String str8;
        boolean needGetDiff4;
        String str9;
        String str10;
        TLRPC.Chat chat;
        TLRPC.Updates updates2 = updates;
        ArrayList<Long> needGetChannelsDiff2 = null;
        boolean needGetDiff5 = false;
        boolean needReceivedQueue3 = false;
        boolean updateStatus3 = false;
        if (updates2 instanceof TLRPC.TL_updateShort) {
            ArrayList arrayList = new ArrayList();
            arrayList.add(updates2.update);
            processUpdateArray(arrayList, (ArrayList<TLRPC.User>) null, (ArrayList<TLRPC.Chat>) null, false, updates2.date);
        } else {
            String str11 = " count = ";
            String str12 = "add to queue";
            String str13 = " ";
            if (updates2 instanceof TLRPC.TL_updateShortChatMessage) {
                updateStatus = false;
                str3 = str11;
                str = str12;
                str2 = str13;
            } else if (updates2 instanceof TLRPC.TL_updateShortMessage) {
                updateStatus = false;
                str3 = str11;
                str = str12;
                str2 = str13;
            } else if ((updates2 instanceof TLRPC.TL_updatesCombined) || (updates2 instanceof TLRPC.TL_updates)) {
                LongSparseArray<TLRPC.Chat> minChannels2 = null;
                int a2 = 0;
                while (a2 < updates2.chats.size()) {
                    TLRPC.Chat chat2 = updates2.chats.get(a2);
                    if (!(chat2 instanceof TLRPC.TL_channel)) {
                        str9 = str11;
                        str10 = str12;
                    } else if (chat2.min) {
                        str9 = str11;
                        TLRPC.Chat existChat = getChat(Long.valueOf(chat2.id));
                        if (existChat == null || existChat.min) {
                            chat = chat2;
                            TLRPC.Chat cacheChat = getMessagesStorage().getChatSync(updates2.chat_id);
                            putChat(cacheChat, true);
                            existChat = cacheChat;
                        } else {
                            chat = chat2;
                        }
                        if (existChat == null || existChat.min) {
                            if (minChannels2 == null) {
                                minChannels2 = new LongSparseArray<>();
                            }
                            str10 = str12;
                            TLRPC.Chat chat3 = chat;
                            minChannels2.put(chat3.id, chat3);
                        } else {
                            str10 = str12;
                        }
                    } else {
                        str9 = str11;
                        str10 = str12;
                    }
                    a2++;
                    str12 = str10;
                    str11 = str9;
                }
                String str14 = str11;
                String str15 = str12;
                if (minChannels2 != null) {
                    int a3 = 0;
                    while (true) {
                        if (a3 >= updates2.updates.size()) {
                            break;
                        }
                        TLRPC.Update update = updates2.updates.get(a3);
                        if (update instanceof TLRPC.TL_updateNewChannelMessage) {
                            long channelId = ((TLRPC.TL_updateNewChannelMessage) update).message.peer_id.channel_id;
                            if (minChannels2.indexOfKey(channelId) >= 0) {
                                if (BuildVars.LOGS_ENABLED) {
                                    FileLog.d("need get diff because of min channel " + channelId);
                                }
                                needGetDiff5 = true;
                            }
                        }
                        a3++;
                    }
                }
                if (!needGetDiff5) {
                    getMessagesStorage().putUsersAndChats(updates2.users, updates2.chats, true, true);
                    Collections.sort(updates2.updates, this.updatesComparator);
                    boolean needReceivedQueue4 = false;
                    boolean needGetDiff6 = needGetDiff5;
                    ArrayList<Long> needGetChannelsDiff3 = null;
                    int a4 = 0;
                    while (true) {
                        if (a4 >= updates2.updates.size()) {
                            int i = a4;
                            needGetDiff2 = needGetDiff6;
                            updateStatus2 = updateStatus3;
                            needReceivedQueue = needReceivedQueue4;
                            str4 = str13;
                            break;
                        }
                        TLRPC.Update update2 = updates2.updates.get(a4);
                        if (getUpdateType(update2) != 0) {
                            minChannels = minChannels2;
                            needGetDiff2 = needGetDiff6;
                            updateStatus2 = updateStatus3;
                            String str16 = str14;
                            str4 = str13;
                            if (getUpdateType(update2) != 1) {
                                if (getUpdateType(update2) != 2) {
                                    int i2 = a4;
                                    needReceivedQueue = needReceivedQueue4;
                                    break;
                                }
                                long channelId2 = getUpdateChannelId(update2);
                                boolean skipUpdate2 = false;
                                int channelPts3 = this.channelsPts.get(channelId2);
                                if (channelPts3 == 0) {
                                    int channelPts4 = getMessagesStorage().getChannelPtsSync(channelId2);
                                    if (channelPts4 == 0) {
                                        int c = 0;
                                        while (true) {
                                            if (c >= updates2.chats.size()) {
                                                channelPts2 = channelPts4;
                                                break;
                                            }
                                            TLRPC.Chat chat4 = updates2.chats.get(c);
                                            channelPts2 = channelPts4;
                                            if (chat4.id == channelId2) {
                                                loadUnknownChannel(chat4, 0);
                                                skipUpdate2 = true;
                                                break;
                                            }
                                            c++;
                                            channelPts4 = channelPts2;
                                        }
                                        skipUpdate = skipUpdate2;
                                        channelPts = channelPts2;
                                    } else {
                                        this.channelsPts.put(channelId2, channelPts4);
                                        skipUpdate = false;
                                        channelPts = channelPts4;
                                    }
                                } else {
                                    skipUpdate = false;
                                    channelPts = channelPts3;
                                }
                                TLRPC.TL_updates updatesNew = new TLRPC.TL_updates();
                                updatesNew.updates.add(update2);
                                updatesNew.pts = getUpdatePts(update2);
                                updatesNew.pts_count = getUpdatePtsCount(update2);
                                int b = a4 + 1;
                                while (true) {
                                    if (b >= updates2.updates.size()) {
                                        a = a4;
                                        str5 = str15;
                                        needReceivedQueue2 = needReceivedQueue4;
                                        break;
                                    }
                                    TLRPC.Update update22 = updates2.updates.get(b);
                                    needReceivedQueue2 = needReceivedQueue4;
                                    int pts2 = getUpdatePts(update22);
                                    int count2 = getUpdatePtsCount(update22);
                                    a = a4;
                                    str5 = str15;
                                    if (getUpdateType(update22) != 2 || channelId2 != getUpdateChannelId(update22) || updatesNew.pts + count2 != pts2) {
                                        break;
                                    }
                                    updatesNew.updates.add(update22);
                                    updatesNew.pts = pts2;
                                    updatesNew.pts_count += count2;
                                    updates2.updates.remove(b);
                                    b = (b - 1) + 1;
                                    needReceivedQueue4 = needReceivedQueue2;
                                    a4 = a;
                                    str15 = str5;
                                }
                                if (skipUpdate) {
                                    int i3 = channelPts;
                                    str7 = str16;
                                    long channelId3 = channelId2;
                                    if (BuildVars.LOGS_ENABLED) {
                                        FileLog.d("need load unknown channel = " + channelId3);
                                    }
                                } else if (updatesNew.pts_count + channelPts == updatesNew.pts) {
                                    TLRPC.TL_updates updatesNew2 = updatesNew;
                                    int i4 = channelPts;
                                    String str17 = str16;
                                    long channelId4 = channelId2;
                                    if (!processUpdateArray(updatesNew.updates, updates2.users, updates2.chats, false, updates2.date)) {
                                        if (BuildVars.LOGS_ENABLED) {
                                            FileLog.d("need get channel diff inner TL_updates, channel_id = " + channelId4);
                                        }
                                        if (needGetChannelsDiff3 == null) {
                                            needGetChannelsDiff3 = new ArrayList<>();
                                            needReceivedQueue4 = needReceivedQueue2;
                                            str6 = str17;
                                            needGetDiff6 = needGetDiff2;
                                        } else if (!needGetChannelsDiff3.contains(Long.valueOf(channelId4))) {
                                            needGetChannelsDiff3.add(Long.valueOf(channelId4));
                                            str7 = str17;
                                        } else {
                                            str7 = str17;
                                        }
                                    } else {
                                        TLRPC.TL_updates updatesNew3 = updatesNew2;
                                        this.channelsPts.put(channelId4, updatesNew3.pts);
                                        getMessagesStorage().saveChannelPts(channelId4, updatesNew3.pts);
                                        str7 = str17;
                                    }
                                } else {
                                    TLRPC.TL_updates updatesNew4 = updatesNew;
                                    int channelPts5 = channelPts;
                                    String str18 = str16;
                                    long channelId5 = channelId2;
                                    if (channelPts5 != updatesNew4.pts) {
                                        if (BuildVars.LOGS_ENABLED) {
                                            StringBuilder sb = new StringBuilder();
                                            sb.append(update2);
                                            sb.append(" need get channel diff, pts: ");
                                            sb.append(channelPts5);
                                            sb.append(str4);
                                            sb.append(updatesNew4.pts);
                                            str6 = str18;
                                            sb.append(str6);
                                            sb.append(updatesNew4.pts_count);
                                            sb.append(" channelId = ");
                                            sb.append(channelId5);
                                            FileLog.d(sb.toString());
                                        } else {
                                            str6 = str18;
                                        }
                                        long updatesStartWaitTime = this.updatesStartWaitTimeChannels.get(channelId5);
                                        if (this.gettingDifferenceChannels.get(channelId5, false).booleanValue() || updatesStartWaitTime == 0 || Math.abs(System.currentTimeMillis() - updatesStartWaitTime) <= 1500) {
                                            if (updatesStartWaitTime == 0) {
                                                long j = updatesStartWaitTime;
                                                this.updatesStartWaitTimeChannels.put(channelId5, System.currentTimeMillis());
                                            }
                                            if (BuildVars.LOGS_ENABLED) {
                                                FileLog.d(str5);
                                            }
                                            ArrayList<TLRPC.Updates> arrayList2 = this.updatesQueueChannels.get(channelId5);
                                            if (arrayList2 == null) {
                                                arrayList2 = new ArrayList<>();
                                                this.updatesQueueChannels.put(channelId5, arrayList2);
                                            }
                                            arrayList2.add(updatesNew4);
                                        } else if (needGetChannelsDiff3 == null) {
                                            needGetChannelsDiff3 = new ArrayList<>();
                                        } else if (!needGetChannelsDiff3.contains(Long.valueOf(channelId5))) {
                                            needGetChannelsDiff3.add(Long.valueOf(channelId5));
                                        }
                                        needReceivedQueue4 = needReceivedQueue2;
                                        needGetDiff6 = needGetDiff2;
                                    } else {
                                        str7 = str18;
                                    }
                                }
                                needReceivedQueue4 = needReceivedQueue2;
                                needGetDiff6 = needGetDiff2;
                            } else {
                                TLRPC.TL_updates updatesNew5 = new TLRPC.TL_updates();
                                updatesNew5.updates.add(update2);
                                updatesNew5.pts = getUpdateQts(update2);
                                for (int b2 = a4 + 1; b2 < updates2.updates.size(); b2 = (b2 - 1) + 1) {
                                    TLRPC.Update update23 = updates2.updates.get(b2);
                                    int qts2 = getUpdateQts(update23);
                                    if (getUpdateType(update23) != 1 || updatesNew5.pts + 1 != qts2) {
                                        break;
                                    }
                                    updatesNew5.updates.add(update23);
                                    updatesNew5.pts = qts2;
                                    updates2.updates.remove(b2);
                                }
                                if (getMessagesStorage().getLastQtsValue() == 0 || getMessagesStorage().getLastQtsValue() + updatesNew5.updates.size() == updatesNew5.pts) {
                                    processUpdateArray(updatesNew5.updates, updates2.users, updates2.chats, false, updates2.date);
                                    getMessagesStorage().setLastQtsValue(updatesNew5.pts);
                                    needReceivedQueue4 = true;
                                    needGetDiff3 = needGetDiff2;
                                } else {
                                    if (getMessagesStorage().getLastPtsValue() != updatesNew5.pts) {
                                        if (BuildVars.LOGS_ENABLED) {
                                            FileLog.d(update2 + " need get diff, qts: " + getMessagesStorage().getLastQtsValue() + str4 + updatesNew5.pts);
                                        }
                                        if (this.gettingDifference || this.updatesStartWaitTimeQts == 0 || Math.abs(System.currentTimeMillis() - this.updatesStartWaitTimeQts) <= 1500) {
                                            if (this.updatesStartWaitTimeQts == 0) {
                                                this.updatesStartWaitTimeQts = System.currentTimeMillis();
                                            }
                                            if (BuildVars.LOGS_ENABLED) {
                                                FileLog.d(str15);
                                            }
                                            this.updatesQueueQts.add(updatesNew5);
                                        } else {
                                            needGetDiff3 = true;
                                        }
                                    }
                                    needGetDiff3 = needGetDiff2;
                                }
                                a = a4;
                                str5 = str15;
                                str6 = str16;
                            }
                        } else {
                            TLRPC.TL_updates updatesNew6 = new TLRPC.TL_updates();
                            updatesNew6.updates.add(update2);
                            updatesNew6.pts = getUpdatePts(update2);
                            updatesNew6.pts_count = getUpdatePtsCount(update2);
                            int b3 = a4 + 1;
                            while (true) {
                                if (b3 >= updates2.updates.size()) {
                                    break;
                                }
                                TLRPC.Update update24 = updates2.updates.get(b3);
                                int pts22 = getUpdatePts(update24);
                                int count22 = getUpdatePtsCount(update24);
                                if (getUpdateType(update24) == 0 && updatesNew6.pts + count22 == pts22) {
                                    updatesNew6.updates.add(update24);
                                    updatesNew6.pts = pts22;
                                    updatesNew6.pts_count += count22;
                                    updates2.updates.remove(b3);
                                    b3 = (b3 - 1) + 1;
                                }
                            }
                            if (getMessagesStorage().getLastPtsValue() + updatesNew6.pts_count == updatesNew6.pts) {
                                minChannels = minChannels2;
                                needGetDiff4 = needGetDiff6;
                                updateStatus2 = updateStatus3;
                                TLRPC.TL_updates updatesNew7 = updatesNew6;
                                str4 = str13;
                                if (!processUpdateArray(updatesNew6.updates, updates2.users, updates2.chats, false, updates2.date)) {
                                    if (BuildVars.LOGS_ENABLED) {
                                        FileLog.d("need get diff inner TL_updates, pts: " + getMessagesStorage().getLastPtsValue() + str4 + updates2.seq);
                                    }
                                    needGetDiff6 = true;
                                    str8 = str14;
                                    a = a4;
                                    str5 = str15;
                                    str6 = str8;
                                } else {
                                    getMessagesStorage().setLastPtsValue(updatesNew7.pts);
                                    str8 = str14;
                                }
                            } else {
                                minChannels = minChannels2;
                                needGetDiff4 = needGetDiff6;
                                updateStatus2 = updateStatus3;
                                TLRPC.TL_updates updatesNew8 = updatesNew6;
                                str4 = str13;
                                if (getMessagesStorage().getLastPtsValue() != updatesNew8.pts) {
                                    if (BuildVars.LOGS_ENABLED) {
                                        StringBuilder sb2 = new StringBuilder();
                                        sb2.append(update2);
                                        sb2.append(" need get diff, pts: ");
                                        sb2.append(getMessagesStorage().getLastPtsValue());
                                        sb2.append(str4);
                                        sb2.append(updatesNew8.pts);
                                        str8 = str14;
                                        sb2.append(str8);
                                        sb2.append(updatesNew8.pts_count);
                                        FileLog.d(sb2.toString());
                                    } else {
                                        str8 = str14;
                                    }
                                    if (this.gettingDifference || this.updatesStartWaitTimePts == 0 || Math.abs(System.currentTimeMillis() - this.updatesStartWaitTimePts) <= 1500) {
                                        if (this.updatesStartWaitTimePts == 0) {
                                            this.updatesStartWaitTimePts = System.currentTimeMillis();
                                        }
                                        if (BuildVars.LOGS_ENABLED) {
                                            FileLog.d(str15);
                                        }
                                        this.updatesQueuePts.add(updatesNew8);
                                    } else {
                                        needGetDiff6 = true;
                                        a = a4;
                                        str5 = str15;
                                        str6 = str8;
                                    }
                                } else {
                                    str8 = str14;
                                }
                            }
                            needGetDiff6 = needGetDiff4;
                            a = a4;
                            str5 = str15;
                            str6 = str8;
                        }
                        int a5 = a;
                        updates2.updates.remove(a5);
                        a4 = (a5 - 1) + 1;
                        str14 = str6;
                        str13 = str4;
                        updateStatus3 = updateStatus2;
                        minChannels2 = minChannels;
                        str15 = str5;
                    }
                    if (updates2 instanceof TLRPC.TL_updatesCombined) {
                        processUpdate = getMessagesStorage().getLastSeqValue() + 1 == updates2.seq_start || getMessagesStorage().getLastSeqValue() == updates2.seq_start;
                    } else {
                        processUpdate = getMessagesStorage().getLastSeqValue() + 1 == updates2.seq || updates2.seq == 0 || updates2.seq == getMessagesStorage().getLastSeqValue();
                    }
                    if (processUpdate) {
                        processUpdateArray(updates2.updates, updates2.users, updates2.chats, false, updates2.date);
                        if (updates2.seq != 0) {
                            if (updates2.date != 0) {
                                getMessagesStorage().setLastDateValue(updates2.date);
                            }
                            getMessagesStorage().setLastSeqValue(updates2.seq);
                        }
                    } else {
                        if (BuildVars.LOGS_ENABLED) {
                            if (updates2 instanceof TLRPC.TL_updatesCombined) {
                                FileLog.d("need get diff TL_updatesCombined, seq: " + getMessagesStorage().getLastSeqValue() + str4 + updates2.seq_start);
                            } else {
                                FileLog.d("need get diff TL_updates, seq: " + getMessagesStorage().getLastSeqValue() + str4 + updates2.seq);
                            }
                        }
                        if (this.gettingDifference || this.updatesStartWaitTimeSeq == 0 || Math.abs(System.currentTimeMillis() - this.updatesStartWaitTimeSeq) <= 1500) {
                            if (this.updatesStartWaitTimeSeq == 0) {
                                this.updatesStartWaitTimeSeq = System.currentTimeMillis();
                            }
                            if (BuildVars.LOGS_ENABLED) {
                                FileLog.d("add TL_updates/Combined to queue");
                            }
                            this.updatesQueueSeq.add(updates2);
                        } else {
                            needGetChannelsDiff2 = needGetChannelsDiff3;
                            needReceivedQueue3 = needReceivedQueue;
                            needGetDiff5 = true;
                        }
                    }
                    needGetChannelsDiff2 = needGetChannelsDiff3;
                    needReceivedQueue3 = needReceivedQueue;
                    needGetDiff5 = needGetDiff2;
                } else {
                    LongSparseArray<TLRPC.Chat> longSparseArray = minChannels2;
                    updateStatus2 = false;
                }
                updateStatus3 = updateStatus2;
            } else if (updates2 instanceof TLRPC.TL_updatesTooLong) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("need get diff TL_updatesTooLong");
                }
                needGetDiff5 = true;
            } else if (updates2 instanceof UserActionUpdatesSeq) {
                getMessagesStorage().setLastSeqValue(updates2.seq);
            } else if (updates2 instanceof UserActionUpdatesPts) {
                if (updates2.chat_id != 0) {
                    this.channelsPts.put(updates2.chat_id, updates2.pts);
                    getMessagesStorage().saveChannelPts(updates2.chat_id, updates2.pts);
                } else {
                    getMessagesStorage().setLastPtsValue(updates2.pts);
                }
            }
            long userId = updates2 instanceof TLRPC.TL_updateShortChatMessage ? updates2.from_id : updates2.user_id;
            TLRPC.User user4 = getUser(Long.valueOf(userId));
            if (user4 == null || user4.min) {
                TLRPC.User user5 = getMessagesStorage().getUserSync(userId);
                if (user5 != null && user5.min) {
                    user5 = null;
                }
                putUser(user5, true);
                user = user5;
            } else {
                user = user4;
            }
            if (updates2.fwd_from == null) {
                needFwdUser = false;
                user2 = null;
                user3 = null;
                channel = null;
            } else if (updates2.fwd_from.from_id instanceof TLRPC.TL_peerUser) {
                TLRPC.User user23 = getUser(Long.valueOf(updates2.fwd_from.from_id.user_id));
                if (user23 == null) {
                    user3 = null;
                    channel = null;
                    TLRPC.User user24 = getMessagesStorage().getUserSync(updates2.fwd_from.from_id.user_id);
                    putUser(user24, true);
                    user22 = user24;
                } else {
                    user3 = null;
                    channel = null;
                    user22 = user23;
                }
                needFwdUser = true;
                user2 = user22;
            } else {
                needFwdUser = false;
                user2 = null;
                user3 = null;
                channel = null;
                if (updates2.fwd_from.from_id instanceof TLRPC.TL_peerChannel) {
                    TLRPC.Chat channel4 = getChat(Long.valueOf(updates2.fwd_from.from_id.channel_id));
                    if (channel4 == null) {
                        TLRPC.Chat channel5 = getMessagesStorage().getChatSync(updates2.fwd_from.from_id.channel_id);
                        putChat(channel5, true);
                        channel3 = channel5;
                    } else {
                        channel3 = channel4;
                    }
                    needFwdUser = true;
                    channel = channel3;
                } else if (updates2.fwd_from.from_id instanceof TLRPC.TL_peerChat) {
                    TLRPC.Chat channel6 = getChat(Long.valueOf(updates2.fwd_from.from_id.chat_id));
                    if (channel6 == null) {
                        TLRPC.Chat channel7 = getMessagesStorage().getChatSync(updates2.fwd_from.from_id.chat_id);
                        putChat(channel7, true);
                        channel2 = channel7;
                    } else {
                        channel2 = channel6;
                    }
                    needFwdUser = true;
                    channel = channel2;
                }
            }
            if (updates2.via_bot_id != 0) {
                TLRPC.User user35 = getUser(Long.valueOf(updates2.via_bot_id));
                if (user35 == null) {
                    TLRPC.User user36 = getMessagesStorage().getUserSync(updates2.via_bot_id);
                    putUser(user36, true);
                    user34 = user36;
                } else {
                    user34 = user35;
                }
                user33 = 1;
                user32 = user34;
            } else {
                user32 = user3;
                user33 = null;
            }
            if (updates2 instanceof TLRPC.TL_updateShortMessage) {
                missingData = user == null || (needFwdUser && user2 == null && channel == null) || (user33 != null && user32 == null);
            } else {
                TLRPC.Chat chat5 = getChat(Long.valueOf(updates2.chat_id));
                if (chat5 == null) {
                    chat5 = getMessagesStorage().getChatSync(updates2.chat_id);
                    putChat(chat5, true);
                }
                missingData = chat5 == null || user == null || (needFwdUser && user2 == null && channel == null) || (user33 != null && user32 == null);
            }
            if (!missingData && !updates2.entities.isEmpty()) {
                int a6 = 0;
                while (true) {
                    if (a6 >= updates2.entities.size()) {
                        missingData2 = missingData;
                        break;
                    }
                    TLRPC.MessageEntity entity = updates2.entities.get(a6);
                    if (entity instanceof TLRPC.TL_messageEntityMentionName) {
                        long uid = ((TLRPC.TL_messageEntityMentionName) entity).user_id;
                        missingData3 = missingData;
                        TLRPC.User entityUser = getUser(Long.valueOf(uid));
                        if (entityUser != null) {
                            TLRPC.MessageEntity messageEntity = entity;
                            if (!entityUser.min) {
                                continue;
                            }
                        }
                        TLRPC.User entityUser2 = getMessagesStorage().getUserSync(uid);
                        if (entityUser2 != null && entityUser2.min) {
                            entityUser2 = null;
                        }
                        if (entityUser2 == null) {
                            missingData2 = true;
                            break;
                        }
                        putUser(user, true);
                    } else {
                        missingData3 = missingData;
                        TLRPC.MessageEntity messageEntity2 = entity;
                    }
                    a6++;
                    missingData = missingData3;
                }
            } else {
                missingData2 = missingData;
            }
            if (!updates2.out && user != null && user.status != null && user.status.expires <= 0 && Math.abs(getConnectionsManager().getCurrentTime() - updates2.date) < 30) {
                this.onlinePrivacy.put(Long.valueOf(user.id), Integer.valueOf(updates2.date));
                updateStatus = true;
            }
            if (missingData2) {
                needGetDiff5 = true;
                needGetChannelsDiff = null;
            } else {
                if (getMessagesStorage().getLastPtsValue() + updates2.pts_count == updates2.pts) {
                    TLRPC.TL_message message = new TLRPC.TL_message();
                    message.id = updates2.id;
                    long clientUserId = getUserConfig().getClientUserId();
                    if (updates2 instanceof TLRPC.TL_updateShortMessage) {
                        message.from_id = new TLRPC.TL_peerUser();
                        if (updates2.out) {
                            message.from_id.user_id = clientUserId;
                        } else {
                            message.from_id.user_id = userId;
                        }
                        message.peer_id = new TLRPC.TL_peerUser();
                        message.peer_id.user_id = userId;
                        message.dialog_id = userId;
                    } else {
                        message.from_id = new TLRPC.TL_peerUser();
                        message.from_id.user_id = userId;
                        message.peer_id = new TLRPC.TL_peerChat();
                        message.peer_id.chat_id = updates2.chat_id;
                        message.dialog_id = -updates2.chat_id;
                    }
                    message.fwd_from = updates2.fwd_from;
                    message.silent = updates2.silent;
                    message.out = updates2.out;
                    message.mentioned = updates2.mentioned;
                    message.media_unread = updates2.media_unread;
                    message.entities = updates2.entities;
                    message.message = updates2.message;
                    message.date = updates2.date;
                    message.via_bot_id = updates2.via_bot_id;
                    message.flags = updates2.flags | 256;
                    message.reply_to = updates2.reply_to;
                    message.ttl_period = updates2.ttl_period;
                    message.media = new TLRPC.TL_messageMediaEmpty();
                    ConcurrentHashMap<Long, Integer> concurrentHashMap = message.out ? this.dialogs_read_outbox_max : this.dialogs_read_inbox_max;
                    Integer value2 = concurrentHashMap.get(Long.valueOf(message.dialog_id));
                    if (value2 == null) {
                        needGetChannelsDiff = null;
                        needGetDiff = false;
                        Integer value3 = Integer.valueOf(getMessagesStorage().getDialogReadMax(message.out, message.dialog_id));
                        concurrentHashMap.put(Long.valueOf(message.dialog_id), value3);
                        value = value3;
                    } else {
                        needGetChannelsDiff = null;
                        needGetDiff = false;
                        value = value2;
                    }
                    message.unread = value.intValue() < message.id;
                    if (message.dialog_id == clientUserId) {
                        message.unread = false;
                        message.media_unread = false;
                        message.out = true;
                    }
                    getMessagesStorage().setLastPtsValue(updates2.pts);
                    long j2 = clientUserId;
                    boolean isDialogCreated = this.createdDialogIds.contains(Long.valueOf(message.dialog_id));
                    MessageObject obj2 = new MessageObject(this.currentAccount, message, isDialogCreated, isDialogCreated);
                    ArrayList<MessageObject> objArr2 = new ArrayList<>();
                    objArr2.add(obj2);
                    ArrayList<TLRPC.Message> arr2 = new ArrayList<>();
                    arr2.add(message);
                    if (updates2 instanceof TLRPC.TL_updateShortMessage) {
                        boolean printUpdate = !updates2.out && updatePrintingUsersWithNewMessages(updates2.user_id, objArr2);
                        if (printUpdate) {
                            updatePrintingStrings();
                        }
                        arr = arr2;
                        obj = obj2;
                        ArrayList<MessageObject> objArr3 = objArr2;
                        ConcurrentHashMap<Long, Integer> concurrentHashMap2 = concurrentHashMap;
                        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda120(this, printUpdate, userId, objArr3));
                        objArr = objArr3;
                    } else {
                        arr = arr2;
                        obj = obj2;
                        ConcurrentHashMap<Long, Integer> concurrentHashMap3 = concurrentHashMap;
                        objArr = objArr2;
                        boolean printUpdate2 = updatePrintingUsersWithNewMessages(-updates2.chat_id, objArr);
                        if (printUpdate2) {
                            updatePrintingStrings();
                        }
                        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda123(this, printUpdate2, updates2, objArr));
                    }
                    if (!obj.isOut()) {
                        getMessagesStorage().getStorageQueue().postRunnable(new MessagesController$$ExternalSyntheticLambda15(this, objArr));
                    }
                    getMessagesStorage().putMessages(arr, false, true, false, 0, false);
                } else {
                    needGetChannelsDiff = null;
                    needGetDiff = false;
                    if (getMessagesStorage().getLastPtsValue() != updates2.pts) {
                        if (BuildVars.LOGS_ENABLED) {
                            FileLog.d("need get diff short message, pts: " + getMessagesStorage().getLastPtsValue() + str2 + updates2.pts + str3 + updates2.pts_count);
                        }
                        if (this.gettingDifference || this.updatesStartWaitTimePts == 0 || Math.abs(System.currentTimeMillis() - this.updatesStartWaitTimePts) <= 1500) {
                            if (this.updatesStartWaitTimePts == 0) {
                                this.updatesStartWaitTimePts = System.currentTimeMillis();
                            }
                            if (BuildVars.LOGS_ENABLED) {
                                FileLog.d(str);
                            }
                            this.updatesQueuePts.add(updates2);
                        } else {
                            needGetDiff5 = true;
                        }
                    }
                }
                needGetDiff5 = needGetDiff;
            }
            updateStatus3 = updateStatus;
            needGetChannelsDiff2 = needGetChannelsDiff;
        }
        getSecretChatHelper().processPendingEncMessages();
        if (!fromQueue) {
            for (int a7 = 0; a7 < this.updatesQueueChannels.size(); a7++) {
                long key = this.updatesQueueChannels.keyAt(a7);
                if (needGetChannelsDiff2 == null || !needGetChannelsDiff2.contains(Long.valueOf(key))) {
                    processChannelsUpdatesQueue(key, 0);
                } else {
                    getChannelDifference(key);
                }
            }
            if (needGetDiff5) {
                getDifference();
            } else {
                for (int a8 = 0; a8 < 3; a8++) {
                    processUpdatesQueue(a8, 0);
                }
            }
        }
        if (needReceivedQueue3) {
            TLRPC.TL_messages_receivedQueue req = new TLRPC.TL_messages_receivedQueue();
            req.max_qts = getMessagesStorage().getLastQtsValue();
            getConnectionsManager().sendRequest(req, MessagesController$$ExternalSyntheticLambda282.INSTANCE);
        }
        if (updateStatus3) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda210(this));
        }
        getMessagesStorage().saveDiffParams(getMessagesStorage().getLastSeqValue(), getMessagesStorage().getLastPtsValue(), getMessagesStorage().getLastDateValue(), getMessagesStorage().getLastQtsValue());
    }

    /* renamed from: lambda$processUpdates$302$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m356x8399960a(boolean printUpdate, long userId, ArrayList objArr) {
        if (printUpdate) {
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_USER_PRINT));
        }
        updateInterfaceWithMessages(userId, objArr, false);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    /* renamed from: lambda$processUpdates$303$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m357x68db04cb(boolean printUpdate, TLRPC.Updates updates, ArrayList objArr) {
        if (printUpdate) {
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_USER_PRINT));
        }
        updateInterfaceWithMessages(-updates.chat_id, objArr, false);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, new Object[0]);
    }

    /* renamed from: lambda$processUpdates$304$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m358x4e1CLASSNAMEc(ArrayList objArr) {
        getNotificationsController().processNewMessages(objArr, true, false, (CountDownLatch) null);
    }

    /* renamed from: lambda$processUpdates$305$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m359x335de24d(ArrayList objArr) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda14(this, objArr));
    }

    static /* synthetic */ void lambda$processUpdates$306(TLObject response, TLRPC.TL_error error) {
    }

    /* renamed from: lambda$processUpdates$307$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m360xfde0bfcf() {
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(UPDATE_MASK_STATUS));
    }

    private boolean applyFoldersUpdates(ArrayList<TLRPC.TL_updateFolderPeers> folderUpdates) {
        if (folderUpdates == null) {
            return false;
        }
        boolean updated = false;
        int size = folderUpdates.size();
        for (int a = 0; a < size; a++) {
            TLRPC.TL_updateFolderPeers update = folderUpdates.get(a);
            int size2 = update.folder_peers.size();
            for (int b = 0; b < size2; b++) {
                TLRPC.TL_folderPeer folderPeer = update.folder_peers.get(b);
                TLRPC.Dialog dialog = this.dialogs_dict.get(DialogObject.getPeerDialogId(folderPeer.peer));
                if (!(dialog == null || dialog.folder_id == folderPeer.folder_id)) {
                    dialog.pinned = false;
                    dialog.pinnedNum = 0;
                    dialog.folder_id = folderPeer.folder_id;
                    ensureFolderDialogExists(folderPeer.folder_id, (boolean[]) null);
                }
            }
            updated = true;
            getMessagesStorage().setDialogsFolderId(folderUpdates.get(a).folder_peers, (ArrayList<TLRPC.TL_inputFolderPeer>) null, 0, 0);
        }
        return updated;
    }

    /* JADX WARNING: Removed duplicated region for block: B:1156:0x1d82  */
    /* JADX WARNING: Removed duplicated region for block: B:1160:0x1dc5  */
    /* JADX WARNING: Removed duplicated region for block: B:1163:0x1dd1  */
    /* JADX WARNING: Removed duplicated region for block: B:1167:0x1e0c  */
    /* JADX WARNING: Removed duplicated region for block: B:1170:0x1e16  */
    /* JADX WARNING: Removed duplicated region for block: B:1175:0x1e3f  */
    /* JADX WARNING: Removed duplicated region for block: B:1179:0x1e74  */
    /* JADX WARNING: Removed duplicated region for block: B:1182:0x1e7c  */
    /* JADX WARNING: Removed duplicated region for block: B:1186:0x1eaa  */
    /* JADX WARNING: Removed duplicated region for block: B:850:0x1670  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean processUpdateArray(java.util.ArrayList<org.telegram.tgnet.TLRPC.Update> r79, java.util.ArrayList<org.telegram.tgnet.TLRPC.User> r80, java.util.ArrayList<org.telegram.tgnet.TLRPC.Chat> r81, boolean r82, int r83) {
        /*
            r78 = this;
            r5 = r78
            r1 = r80
            r0 = r81
            boolean r2 = r79.isEmpty()
            r6 = 1
            if (r2 == 0) goto L_0x001a
            if (r1 != 0) goto L_0x0011
            if (r0 == 0) goto L_0x0019
        L_0x0011:
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda23 r2 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda23
            r2.<init>(r5, r1, r0)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r2)
        L_0x0019:
            return r6
        L_0x001a:
            long r3 = java.lang.System.currentTimeMillis()
            r2 = 0
            r7 = 0
            r8 = 0
            r9 = 0
            r10 = 0
            r11 = 0
            r28 = 0
            r12 = 0
            r13 = 0
            r14 = 0
            r15 = 0
            r16 = 0
            r17 = 0
            r18 = 0
            r19 = 0
            r20 = 0
            r21 = 0
            r22 = 0
            r23 = 0
            r24 = 0
            r25 = 0
            r26 = 0
            r27 = 0
            r29 = 0
            r30 = 0
            r31 = 0
            r32 = 0
            if (r1 == 0) goto L_0x008b
            j$.util.concurrent.ConcurrentHashMap r33 = new j$.util.concurrent.ConcurrentHashMap
            r33.<init>()
            r34 = r33
            r33 = 0
            int r6 = r80.size()
            r36 = r2
            r2 = r33
        L_0x005d:
            if (r2 >= r6) goto L_0x0081
            java.lang.Object r33 = r1.get(r2)
            r37 = r6
            r6 = r33
            org.telegram.tgnet.TLRPC$User r6 = (org.telegram.tgnet.TLRPC.User) r6
            r33 = r7
            r38 = r8
            long r7 = r6.id
            java.lang.Long r7 = java.lang.Long.valueOf(r7)
            r8 = r34
            r8.put(r7, r6)
            int r2 = r2 + 1
            r7 = r33
            r6 = r37
            r8 = r38
            goto L_0x005d
        L_0x0081:
            r37 = r6
            r33 = r7
            r38 = r8
            r8 = r34
            r6 = r8
            goto L_0x0094
        L_0x008b:
            r36 = r2
            r33 = r7
            r38 = r8
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, org.telegram.tgnet.TLRPC$User> r2 = r5.users
            r6 = r2
        L_0x0094:
            if (r0 == 0) goto L_0x00ca
            j$.util.concurrent.ConcurrentHashMap r2 = new j$.util.concurrent.ConcurrentHashMap
            r2.<init>()
            r7 = 0
            int r8 = r81.size()
        L_0x00a0:
            if (r7 >= r8) goto L_0x00c2
            java.lang.Object r34 = r0.get(r7)
            r37 = r8
            r8 = r34
            org.telegram.tgnet.TLRPC$Chat r8 = (org.telegram.tgnet.TLRPC.Chat) r8
            r34 = r9
            r39 = r10
            long r9 = r8.id
            java.lang.Long r9 = java.lang.Long.valueOf(r9)
            r2.put(r9, r8)
            int r7 = r7 + 1
            r9 = r34
            r8 = r37
            r10 = r39
            goto L_0x00a0
        L_0x00c2:
            r37 = r8
            r34 = r9
            r39 = r10
            r9 = r2
            goto L_0x00d1
        L_0x00ca:
            r34 = r9
            r39 = r10
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, org.telegram.tgnet.TLRPC$Chat> r2 = r5.chats
            r9 = r2
        L_0x00d1:
            if (r1 != 0) goto L_0x00d5
            if (r0 == 0) goto L_0x00dd
        L_0x00d5:
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda24 r2 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda24
            r2.<init>(r5, r1, r0)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r2)
        L_0x00dd:
            r2 = 0
            org.telegram.messenger.UserConfig r7 = r78.getUserConfig()
            long r46 = r7.getClientUserId()
            r7 = 0
            int r8 = r79.size()
            r1 = r17
            r0 = r18
            r10 = r21
            r48 = r25
            r37 = r27
            r25 = r29
            r49 = r32
            r29 = r2
            r32 = r12
            r18 = r15
            r17 = r16
            r2 = r19
            r12 = r20
            r15 = r22
            r16 = r36
            r22 = r13
            r36 = r26
            r13 = r33
            r33 = r23
            r23 = r14
            r14 = r30
            r30 = r39
            r76 = r31
            r31 = r11
            r11 = r76
            r77 = r34
            r34 = r24
            r24 = r77
        L_0x0123:
            if (r7 >= r8) goto L_0x1b1f
            r19 = r8
            r8 = r79
            java.lang.Object r20 = r8.get(r7)
            r8 = r20
            org.telegram.tgnet.TLRPC$Update r8 = (org.telegram.tgnet.TLRPC.Update) r8
            boolean r20 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r20 == 0) goto L_0x014e
            r20 = r7
            java.lang.StringBuilder r7 = new java.lang.StringBuilder
            r7.<init>()
            r26 = r14
            java.lang.String r14 = "process update "
            r7.append(r14)
            r7.append(r8)
            java.lang.String r7 = r7.toString()
            org.telegram.messenger.FileLog.d(r7)
            goto L_0x0152
        L_0x014e:
            r20 = r7
            r26 = r14
        L_0x0152:
            boolean r7 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateNewMessage
            java.lang.String r14 = " channelId = "
            r39 = r14
            r50 = r15
            r14 = 0
            if (r7 != 0) goto L_0x16a2
            boolean r7 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateNewChannelMessage
            if (r7 != 0) goto L_0x16a2
            boolean r7 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateNewScheduledMessage
            if (r7 == 0) goto L_0x017a
            r55 = r0
            r54 = r1
            r57 = r2
            r60 = r8
            r59 = r9
            r58 = r10
            r56 = r11
            r51 = r12
            r2 = r39
            goto L_0x16b4
        L_0x017a:
            boolean r7 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateReadMessagesContents
            if (r7 == 0) goto L_0x01b3
            r7 = r8
            org.telegram.tgnet.TLRPC$TL_updateReadMessagesContents r7 = (org.telegram.tgnet.TLRPC.TL_updateReadMessagesContents) r7
            if (r2 != 0) goto L_0x018a
            androidx.collection.LongSparseArray r21 = new androidx.collection.LongSparseArray
            r21.<init>()
            r2 = r21
        L_0x018a:
            java.lang.Object r21 = r2.get(r14)
            java.util.ArrayList r21 = (java.util.ArrayList) r21
            if (r21 != 0) goto L_0x01a1
            java.util.ArrayList r27 = new java.util.ArrayList
            r27.<init>()
            r21 = r27
            r51 = r12
            r12 = r21
            r2.put(r14, r12)
            goto L_0x01a5
        L_0x01a1:
            r51 = r12
            r12 = r21
        L_0x01a5:
            java.util.ArrayList<java.lang.Integer> r14 = r7.messages
            r12.addAll(r14)
            r52 = r3
            r14 = r9
            r15 = r50
            r12 = r51
            goto L_0x1b14
        L_0x01b3:
            r51 = r12
            boolean r7 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateChannelReadMessagesContents
            if (r7 == 0) goto L_0x01eb
            r7 = r8
            org.telegram.tgnet.TLRPC$TL_updateChannelReadMessagesContents r7 = (org.telegram.tgnet.TLRPC.TL_updateChannelReadMessagesContents) r7
            if (r2 != 0) goto L_0x01c4
            androidx.collection.LongSparseArray r12 = new androidx.collection.LongSparseArray
            r12.<init>()
            r2 = r12
        L_0x01c4:
            long r14 = r7.channel_id
            long r14 = -r14
            java.lang.Object r12 = r2.get(r14)
            java.util.ArrayList r12 = (java.util.ArrayList) r12
            if (r12 != 0) goto L_0x01d9
            java.util.ArrayList r21 = new java.util.ArrayList
            r21.<init>()
            r12 = r21
            r2.put(r14, r12)
        L_0x01d9:
            r21 = r2
            java.util.ArrayList<java.lang.Integer> r2 = r7.messages
            r12.addAll(r2)
            r52 = r3
            r14 = r9
            r2 = r21
            r15 = r50
            r12 = r51
            goto L_0x1b14
        L_0x01eb:
            boolean r7 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateReadHistoryInbox
            if (r7 == 0) goto L_0x0262
            r7 = r8
            org.telegram.tgnet.TLRPC$TL_updateReadHistoryInbox r7 = (org.telegram.tgnet.TLRPC.TL_updateReadHistoryInbox) r7
            if (r1 != 0) goto L_0x01fa
            org.telegram.messenger.support.LongSparseIntArray r12 = new org.telegram.messenger.support.LongSparseIntArray
            r12.<init>()
            r1 = r12
        L_0x01fa:
            org.telegram.tgnet.TLRPC$Peer r12 = r7.peer
            r52 = r3
            r4 = r2
            long r2 = r12.chat_id
            int r12 = (r2 > r14 ? 1 : (r2 == r14 ? 0 : -1))
            if (r12 == 0) goto L_0x0215
            org.telegram.tgnet.TLRPC$Peer r2 = r7.peer
            long r2 = r2.chat_id
            long r2 = -r2
            int r12 = r7.max_id
            r1.put(r2, r12)
            org.telegram.tgnet.TLRPC$Peer r2 = r7.peer
            long r2 = r2.chat_id
            long r2 = -r2
            goto L_0x0222
        L_0x0215:
            org.telegram.tgnet.TLRPC$Peer r2 = r7.peer
            long r2 = r2.user_id
            int r12 = r7.max_id
            r1.put(r2, r12)
            org.telegram.tgnet.TLRPC$Peer r2 = r7.peer
            long r2 = r2.user_id
        L_0x0222:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r12 = r5.dialogs_read_inbox_max
            java.lang.Long r14 = java.lang.Long.valueOf(r2)
            java.lang.Object r12 = r12.get(r14)
            java.lang.Integer r12 = (java.lang.Integer) r12
            if (r12 != 0) goto L_0x023d
            org.telegram.messenger.MessagesStorage r14 = r78.getMessagesStorage()
            r15 = 0
            int r14 = r14.getDialogReadMax(r15, r2)
            java.lang.Integer r12 = java.lang.Integer.valueOf(r14)
        L_0x023d:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r14 = r5.dialogs_read_inbox_max
            java.lang.Long r15 = java.lang.Long.valueOf(r2)
            r21 = r1
            int r1 = r12.intValue()
            r39 = r2
            int r2 = r7.max_id
            int r1 = java.lang.Math.max(r1, r2)
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            r14.put(r15, r1)
            r2 = r4
            r14 = r9
            r1 = r21
            r15 = r50
            r12 = r51
            goto L_0x1b14
        L_0x0262:
            r52 = r3
            r4 = r2
            boolean r2 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateReadHistoryOutbox
            if (r2 == 0) goto L_0x0322
            r2 = r8
            org.telegram.tgnet.TLRPC$TL_updateReadHistoryOutbox r2 = (org.telegram.tgnet.TLRPC.TL_updateReadHistoryOutbox) r2
            if (r0 != 0) goto L_0x0274
            org.telegram.messenger.support.LongSparseIntArray r3 = new org.telegram.messenger.support.LongSparseIntArray
            r3.<init>()
            r0 = r3
        L_0x0274:
            org.telegram.tgnet.TLRPC$Peer r3 = r2.peer
            r7 = r4
            long r3 = r3.chat_id
            int r12 = (r3 > r14 ? 1 : (r3 == r14 ? 0 : -1))
            if (r12 == 0) goto L_0x028d
            org.telegram.tgnet.TLRPC$Peer r3 = r2.peer
            long r3 = r3.chat_id
            long r3 = -r3
            int r12 = r2.max_id
            r0.put(r3, r12)
            org.telegram.tgnet.TLRPC$Peer r3 = r2.peer
            long r3 = r3.chat_id
            long r3 = -r3
            goto L_0x02e2
        L_0x028d:
            org.telegram.tgnet.TLRPC$Peer r3 = r2.peer
            long r3 = r3.user_id
            int r12 = r2.max_id
            r0.put(r3, r12)
            org.telegram.tgnet.TLRPC$Peer r3 = r2.peer
            long r3 = r3.user_id
            org.telegram.tgnet.TLRPC$Peer r12 = r2.peer
            long r14 = r12.user_id
            java.lang.Long r12 = java.lang.Long.valueOf(r14)
            org.telegram.tgnet.TLRPC$User r12 = r5.getUser(r12)
            if (r12 == 0) goto L_0x02de
            org.telegram.tgnet.TLRPC$UserStatus r14 = r12.status
            if (r14 == 0) goto L_0x02de
            org.telegram.tgnet.TLRPC$UserStatus r14 = r12.status
            int r14 = r14.expires
            if (r14 > 0) goto L_0x02de
            org.telegram.tgnet.ConnectionsManager r14 = r78.getConnectionsManager()
            int r14 = r14.getCurrentTime()
            int r14 = r14 - r83
            int r14 = java.lang.Math.abs(r14)
            r15 = 30
            if (r14 >= r15) goto L_0x02de
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r14 = r5.onlinePrivacy
            org.telegram.tgnet.TLRPC$Peer r15 = r2.peer
            r39 = r3
            long r3 = r15.user_id
            java.lang.Long r3 = java.lang.Long.valueOf(r3)
            java.lang.Integer r4 = java.lang.Integer.valueOf(r83)
            r14.put(r3, r4)
            int r3 = UPDATE_MASK_STATUS
            r29 = r29 | r3
            r3 = r39
            goto L_0x02e2
        L_0x02de:
            r39 = r3
            r3 = r39
        L_0x02e2:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r12 = r5.dialogs_read_outbox_max
            java.lang.Long r14 = java.lang.Long.valueOf(r3)
            java.lang.Object r12 = r12.get(r14)
            java.lang.Integer r12 = (java.lang.Integer) r12
            if (r12 != 0) goto L_0x02fd
            org.telegram.messenger.MessagesStorage r14 = r78.getMessagesStorage()
            r15 = 1
            int r14 = r14.getDialogReadMax(r15, r3)
            java.lang.Integer r12 = java.lang.Integer.valueOf(r14)
        L_0x02fd:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r14 = r5.dialogs_read_outbox_max
            java.lang.Long r15 = java.lang.Long.valueOf(r3)
            r21 = r0
            int r0 = r12.intValue()
            r39 = r3
            int r3 = r2.max_id
            int r0 = java.lang.Math.max(r0, r3)
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)
            r14.put(r15, r0)
            r2 = r7
            r14 = r9
            r0 = r21
            r15 = r50
            r12 = r51
            goto L_0x1b14
        L_0x0322:
            r7 = r4
            boolean r2 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateDeleteMessages
            if (r2 == 0) goto L_0x0350
            r2 = r8
            org.telegram.tgnet.TLRPC$TL_updateDeleteMessages r2 = (org.telegram.tgnet.TLRPC.TL_updateDeleteMessages) r2
            if (r10 != 0) goto L_0x0332
            androidx.collection.LongSparseArray r3 = new androidx.collection.LongSparseArray
            r3.<init>()
            r10 = r3
        L_0x0332:
            java.lang.Object r3 = r10.get(r14)
            java.util.ArrayList r3 = (java.util.ArrayList) r3
            if (r3 != 0) goto L_0x0343
            java.util.ArrayList r4 = new java.util.ArrayList
            r4.<init>()
            r3 = r4
            r10.put(r14, r3)
        L_0x0343:
            java.util.ArrayList<java.lang.Integer> r4 = r2.messages
            r3.addAll(r4)
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            goto L_0x1b14
        L_0x0350:
            boolean r2 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateDeleteScheduledMessages
            if (r2 == 0) goto L_0x0392
            r2 = r8
            org.telegram.tgnet.TLRPC$TL_updateDeleteScheduledMessages r2 = (org.telegram.tgnet.TLRPC.TL_updateDeleteScheduledMessages) r2
            if (r50 != 0) goto L_0x0360
            androidx.collection.LongSparseArray r3 = new androidx.collection.LongSparseArray
            r3.<init>()
            r15 = r3
            goto L_0x0362
        L_0x0360:
            r15 = r50
        L_0x0362:
            org.telegram.tgnet.TLRPC$Peer r3 = r2.peer
            long r3 = org.telegram.messenger.MessageObject.getPeerId(r3)
            org.telegram.tgnet.TLRPC$Peer r12 = r2.peer
            r55 = r0
            r54 = r1
            long r0 = org.telegram.messenger.MessageObject.getPeerId(r12)
            java.lang.Object r0 = r15.get(r0)
            java.util.ArrayList r0 = (java.util.ArrayList) r0
            if (r0 != 0) goto L_0x0383
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            r0 = r1
            r15.put(r3, r0)
        L_0x0383:
            java.util.ArrayList<java.lang.Integer> r1 = r2.messages
            r0.addAll(r1)
            r2 = r7
            r14 = r9
            r12 = r51
            r1 = r54
            r0 = r55
            goto L_0x1b14
        L_0x0392:
            r55 = r0
            r54 = r1
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateUserTyping
            if (r0 != 0) goto L_0x144d
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateChatUserTyping
            if (r0 != 0) goto L_0x144d
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateChannelUserTyping
            if (r0 == 0) goto L_0x03a6
            r56 = r11
            goto L_0x144f
        L_0x03a6:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateChatParticipants
            if (r0 == 0) goto L_0x03d2
            r0 = r8
            org.telegram.tgnet.TLRPC$TL_updateChatParticipants r0 = (org.telegram.tgnet.TLRPC.TL_updateChatParticipants) r0
            int r1 = UPDATE_MASK_CHAT_MEMBERS
            r1 = r29 | r1
            if (r36 != 0) goto L_0x03bb
            java.util.ArrayList r2 = new java.util.ArrayList
            r2.<init>()
            r36 = r2
            goto L_0x03bd
        L_0x03bb:
            r2 = r36
        L_0x03bd:
            org.telegram.tgnet.TLRPC$ChatParticipants r3 = r0.participants
            r2.add(r3)
            r29 = r1
            r36 = r2
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            goto L_0x1b14
        L_0x03d2:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateUserStatus
            if (r0 == 0) goto L_0x03f9
            int r0 = UPDATE_MASK_STATUS
            r0 = r29 | r0
            if (r37 != 0) goto L_0x03e4
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            r37 = r1
            goto L_0x03e6
        L_0x03e4:
            r1 = r37
        L_0x03e6:
            r1.add(r8)
            r29 = r0
            r37 = r1
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            goto L_0x1b14
        L_0x03f9:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateUserName
            if (r0 == 0) goto L_0x0420
            int r0 = UPDATE_MASK_NAME
            r0 = r29 | r0
            if (r37 != 0) goto L_0x040b
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            r37 = r1
            goto L_0x040d
        L_0x040b:
            r1 = r37
        L_0x040d:
            r1.add(r8)
            r29 = r0
            r37 = r1
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            goto L_0x1b14
        L_0x0420:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateUserPhoto
            if (r0 == 0) goto L_0x0453
            r0 = r8
            org.telegram.tgnet.TLRPC$TL_updateUserPhoto r0 = (org.telegram.tgnet.TLRPC.TL_updateUserPhoto) r0
            int r1 = UPDATE_MASK_AVATAR
            r1 = r29 | r1
            org.telegram.messenger.MessagesStorage r2 = r78.getMessagesStorage()
            long r3 = r0.user_id
            r2.clearUserPhotos(r3)
            if (r37 != 0) goto L_0x043e
            java.util.ArrayList r2 = new java.util.ArrayList
            r2.<init>()
            r37 = r2
            goto L_0x0440
        L_0x043e:
            r2 = r37
        L_0x0440:
            r2.add(r8)
            r29 = r1
            r37 = r2
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            goto L_0x1b14
        L_0x0453:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateUserPhone
            if (r0 == 0) goto L_0x047a
            int r0 = UPDATE_MASK_PHONE
            r0 = r29 | r0
            if (r37 != 0) goto L_0x0465
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            r37 = r1
            goto L_0x0467
        L_0x0465:
            r1 = r37
        L_0x0467:
            r1.add(r8)
            r29 = r0
            r37 = r1
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            goto L_0x1b14
        L_0x047a:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updatePeerSettings
            if (r0 == 0) goto L_0x0518
            r0 = r8
            org.telegram.tgnet.TLRPC$TL_updatePeerSettings r0 = (org.telegram.tgnet.TLRPC.TL_updatePeerSettings) r0
            if (r11 != 0) goto L_0x0489
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            r11 = r1
        L_0x0489:
            org.telegram.tgnet.TLRPC$Peer r1 = r0.peer
            boolean r1 = r1 instanceof org.telegram.tgnet.TLRPC.TL_peerUser
            if (r1 == 0) goto L_0x04fb
            org.telegram.tgnet.TLRPC$Peer r1 = r0.peer
            long r1 = r1.user_id
            java.lang.Long r1 = java.lang.Long.valueOf(r1)
            java.lang.Object r1 = r6.get(r1)
            org.telegram.tgnet.TLRPC$User r1 = (org.telegram.tgnet.TLRPC.User) r1
            if (r1 == 0) goto L_0x04fb
            boolean r2 = r1.contact
            r3 = -1
            if (r2 == 0) goto L_0x04d0
            org.telegram.tgnet.TLRPC$Peer r2 = r0.peer
            long r14 = r2.user_id
            long r14 = -r14
            java.lang.Long r2 = java.lang.Long.valueOf(r14)
            int r2 = r11.indexOf(r2)
            if (r2 == r3) goto L_0x04b6
            r11.remove(r2)
        L_0x04b6:
            org.telegram.tgnet.TLRPC$Peer r3 = r0.peer
            long r3 = r3.user_id
            java.lang.Long r3 = java.lang.Long.valueOf(r3)
            boolean r3 = r11.contains(r3)
            if (r3 != 0) goto L_0x04cf
            org.telegram.tgnet.TLRPC$Peer r3 = r0.peer
            long r3 = r3.user_id
            java.lang.Long r3 = java.lang.Long.valueOf(r3)
            r11.add(r3)
        L_0x04cf:
            goto L_0x04fb
        L_0x04d0:
            org.telegram.tgnet.TLRPC$Peer r2 = r0.peer
            long r14 = r2.user_id
            java.lang.Long r2 = java.lang.Long.valueOf(r14)
            int r2 = r11.indexOf(r2)
            if (r2 == r3) goto L_0x04e1
            r11.remove(r2)
        L_0x04e1:
            org.telegram.tgnet.TLRPC$Peer r3 = r0.peer
            long r3 = r3.user_id
            java.lang.Long r3 = java.lang.Long.valueOf(r3)
            boolean r3 = r11.contains(r3)
            if (r3 != 0) goto L_0x04fb
            org.telegram.tgnet.TLRPC$Peer r3 = r0.peer
            long r3 = r3.user_id
            long r3 = -r3
            java.lang.Long r3 = java.lang.Long.valueOf(r3)
            r11.add(r3)
        L_0x04fb:
            if (r37 != 0) goto L_0x0505
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            r37 = r1
            goto L_0x0507
        L_0x0505:
            r1 = r37
        L_0x0507:
            r1.add(r8)
            r37 = r1
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            goto L_0x1b14
        L_0x0518:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateNewEncryptedMessage
            if (r0 == 0) goto L_0x05d2
            org.telegram.messenger.SecretChatHelper r0 = r78.getSecretChatHelper()
            r1 = r8
            org.telegram.tgnet.TLRPC$TL_updateNewEncryptedMessage r1 = (org.telegram.tgnet.TLRPC.TL_updateNewEncryptedMessage) r1
            org.telegram.tgnet.TLRPC$EncryptedMessage r1 = r1.message
            java.util.ArrayList r0 = r0.decryptMessage(r1)
            if (r0 == 0) goto L_0x05c4
            boolean r1 = r0.isEmpty()
            if (r1 != 0) goto L_0x05c4
            r1 = r8
            org.telegram.tgnet.TLRPC$TL_updateNewEncryptedMessage r1 = (org.telegram.tgnet.TLRPC.TL_updateNewEncryptedMessage) r1
            org.telegram.tgnet.TLRPC$EncryptedMessage r1 = r1.message
            int r1 = r1.chat_id
            long r2 = (long) r1
            long r2 = org.telegram.messenger.DialogObject.makeEncryptedDialogId(r2)
            if (r13 != 0) goto L_0x0545
            androidx.collection.LongSparseArray r4 = new androidx.collection.LongSparseArray
            r4.<init>()
            r13 = r4
        L_0x0545:
            java.lang.Object r4 = r13.get(r2)
            java.util.ArrayList r4 = (java.util.ArrayList) r4
            if (r4 != 0) goto L_0x0556
            java.util.ArrayList r12 = new java.util.ArrayList
            r12.<init>()
            r4 = r12
            r13.put(r2, r4)
        L_0x0556:
            r12 = 0
            int r14 = r0.size()
        L_0x055b:
            if (r12 >= r14) goto L_0x05bd
            java.lang.Object r15 = r0.get(r12)
            org.telegram.tgnet.TLRPC$Message r15 = (org.telegram.tgnet.TLRPC.Message) r15
            org.telegram.messenger.ImageLoader.saveMessageThumbs(r15)
            if (r31 != 0) goto L_0x0574
            java.util.ArrayList r21 = new java.util.ArrayList
            r21.<init>()
            r76 = r21
            r21 = r0
            r0 = r76
            goto L_0x0578
        L_0x0574:
            r21 = r0
            r0 = r31
        L_0x0578:
            r0.add(r15)
            r27 = r0
            java.util.ArrayList<java.lang.Long> r0 = r5.createdDialogIds
            r56 = r1
            java.lang.Long r1 = java.lang.Long.valueOf(r2)
            boolean r0 = r0.contains(r1)
            org.telegram.messenger.MessageObject r1 = new org.telegram.messenger.MessageObject
            r57 = r2
            int r2 = r5.currentAccount
            r39 = r1
            r40 = r2
            r41 = r15
            r42 = r6
            r43 = r9
            r44 = r0
            r45 = r0
            r39.<init>((int) r40, (org.telegram.tgnet.TLRPC.Message) r41, (java.util.AbstractMap<java.lang.Long, org.telegram.tgnet.TLRPC.User>) r42, (java.util.AbstractMap<java.lang.Long, org.telegram.tgnet.TLRPC.Chat>) r43, (boolean) r44, (boolean) r45)
            r4.add(r1)
            if (r30 != 0) goto L_0x05ab
            java.util.ArrayList r2 = new java.util.ArrayList
            r2.<init>()
            goto L_0x05ad
        L_0x05ab:
            r2 = r30
        L_0x05ad:
            r2.add(r1)
            int r12 = r12 + 1
            r30 = r2
            r0 = r21
            r31 = r27
            r1 = r56
            r2 = r57
            goto L_0x055b
        L_0x05bd:
            r21 = r0
            r56 = r1
            r57 = r2
            goto L_0x05c6
        L_0x05c4:
            r21 = r0
        L_0x05c6:
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            goto L_0x1b14
        L_0x05d2:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateEncryptedChatTyping
            if (r0 == 0) goto L_0x06c0
            r0 = r8
            org.telegram.tgnet.TLRPC$TL_updateEncryptedChatTyping r0 = (org.telegram.tgnet.TLRPC.TL_updateEncryptedChatTyping) r0
            int r1 = r0.chat_id
            r2 = 1
            org.telegram.tgnet.TLRPC$EncryptedChat r1 = r5.getEncryptedChatDB(r1, r2)
            if (r1 == 0) goto L_0x06aa
            int r2 = r0.chat_id
            long r2 = (long) r2
            long r2 = org.telegram.messenger.DialogObject.makeEncryptedDialogId(r2)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, j$.util.concurrent.ConcurrentHashMap<java.lang.Integer, java.util.ArrayList<org.telegram.messenger.MessagesController$PrintingUser>>> r4 = r5.printingUsers
            java.lang.Long r12 = java.lang.Long.valueOf(r2)
            java.lang.Object r4 = r4.get(r12)
            j$.util.concurrent.ConcurrentHashMap r4 = (j$.util.concurrent.ConcurrentHashMap) r4
            if (r4 != 0) goto L_0x0606
            j$.util.concurrent.ConcurrentHashMap r12 = new j$.util.concurrent.ConcurrentHashMap
            r12.<init>()
            r4 = r12
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, j$.util.concurrent.ConcurrentHashMap<java.lang.Integer, java.util.ArrayList<org.telegram.messenger.MessagesController$PrintingUser>>> r12 = r5.printingUsers
            java.lang.Long r14 = java.lang.Long.valueOf(r2)
            r12.put(r14, r4)
        L_0x0606:
            r12 = 0
            java.lang.Integer r14 = java.lang.Integer.valueOf(r12)
            java.lang.Object r14 = r4.get(r14)
            java.util.ArrayList r14 = (java.util.ArrayList) r14
            if (r14 != 0) goto L_0x0620
            java.util.ArrayList r15 = new java.util.ArrayList
            r15.<init>()
            r14 = r15
            java.lang.Integer r12 = java.lang.Integer.valueOf(r12)
            r4.put(r12, r14)
        L_0x0620:
            r12 = 0
            r15 = 0
            r21 = r0
            int r0 = r14.size()
        L_0x0628:
            if (r15 >= r0) goto L_0x065c
            java.lang.Object r39 = r14.get(r15)
            r40 = r0
            r0 = r39
            org.telegram.messenger.MessagesController$PrintingUser r0 = (org.telegram.messenger.MessagesController.PrintingUser) r0
            r41 = r2
            long r2 = r0.userId
            r56 = r11
            r39 = r12
            long r11 = r1.user_id
            int r43 = (r2 > r11 ? 1 : (r2 == r11 ? 0 : -1))
            if (r43 != 0) goto L_0x064f
            r12 = 1
            r2 = r52
            r0.lastTime = r2
            org.telegram.tgnet.TLRPC$TL_sendMessageTypingAction r11 = new org.telegram.tgnet.TLRPC$TL_sendMessageTypingAction
            r11.<init>()
            r0.action = r11
            goto L_0x0666
        L_0x064f:
            r2 = r52
            int r15 = r15 + 1
            r12 = r39
            r0 = r40
            r2 = r41
            r11 = r56
            goto L_0x0628
        L_0x065c:
            r40 = r0
            r41 = r2
            r56 = r11
            r39 = r12
            r2 = r52
        L_0x0666:
            if (r12 != 0) goto L_0x0680
            org.telegram.messenger.MessagesController$PrintingUser r0 = new org.telegram.messenger.MessagesController$PrintingUser
            r0.<init>()
            r15 = r12
            long r11 = r1.user_id
            r0.userId = r11
            r0.lastTime = r2
            org.telegram.tgnet.TLRPC$TL_sendMessageTypingAction r11 = new org.telegram.tgnet.TLRPC$TL_sendMessageTypingAction
            r11.<init>()
            r0.action = r11
            r14.add(r0)
            r11 = 1
            goto L_0x0683
        L_0x0680:
            r15 = r12
            r11 = r16
        L_0x0683:
            org.telegram.tgnet.ConnectionsManager r0 = r78.getConnectionsManager()
            int r0 = r0.getCurrentTime()
            int r0 = r0 - r83
            int r0 = java.lang.Math.abs(r0)
            r12 = 30
            if (r0 >= r12) goto L_0x06a7
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r0 = r5.onlinePrivacy
            r16 = r11
            long r11 = r1.user_id
            java.lang.Long r11 = java.lang.Long.valueOf(r11)
            java.lang.Integer r12 = java.lang.Integer.valueOf(r83)
            r0.put(r11, r12)
            goto L_0x06b0
        L_0x06a7:
            r16 = r11
            goto L_0x06b0
        L_0x06aa:
            r21 = r0
            r56 = r11
            r2 = r52
        L_0x06b0:
            r52 = r2
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x06c0:
            r56 = r11
            r2 = r52
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateEncryptedMessagesRead
            if (r0 == 0) goto L_0x06fe
            r0 = r8
            org.telegram.tgnet.TLRPC$TL_updateEncryptedMessagesRead r0 = (org.telegram.tgnet.TLRPC.TL_updateEncryptedMessagesRead) r0
            if (r51 != 0) goto L_0x06d4
            android.util.SparseIntArray r1 = new android.util.SparseIntArray
            r1.<init>()
            r12 = r1
            goto L_0x06d6
        L_0x06d4:
            r12 = r51
        L_0x06d6:
            int r1 = r0.chat_id
            int r4 = r0.max_date
            r12.put(r1, r4)
            if (r26 != 0) goto L_0x06e6
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            r14 = r1
            goto L_0x06e8
        L_0x06e6:
            r14 = r26
        L_0x06e8:
            r1 = r8
            org.telegram.tgnet.TLRPC$TL_updateEncryptedMessagesRead r1 = (org.telegram.tgnet.TLRPC.TL_updateEncryptedMessagesRead) r1
            r14.add(r1)
            r52 = r2
            r2 = r7
            r26 = r14
            r15 = r50
            r1 = r54
            r0 = r55
            r11 = r56
            r14 = r9
            goto L_0x1b14
        L_0x06fe:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateChatParticipantAdd
            if (r0 == 0) goto L_0x072a
            r0 = r8
            org.telegram.tgnet.TLRPC$TL_updateChatParticipantAdd r0 = (org.telegram.tgnet.TLRPC.TL_updateChatParticipantAdd) r0
            org.telegram.messenger.MessagesStorage r57 = r78.getMessagesStorage()
            long r11 = r0.chat_id
            long r14 = r0.user_id
            r62 = 0
            r52 = r2
            long r1 = r0.inviter_id
            int r3 = r0.version
            r58 = r11
            r60 = r14
            r63 = r1
            r65 = r3
            r57.updateChatInfo(r58, r60, r62, r63, r65)
            r57 = r7
            r59 = r9
            r58 = r10
            r3 = r52
            goto L_0x170e
        L_0x072a:
            r52 = r2
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateChatParticipantDelete
            if (r0 == 0) goto L_0x0754
            r0 = r8
            org.telegram.tgnet.TLRPC$TL_updateChatParticipantDelete r0 = (org.telegram.tgnet.TLRPC.TL_updateChatParticipantDelete) r0
            org.telegram.messenger.MessagesStorage r57 = r78.getMessagesStorage()
            long r1 = r0.chat_id
            long r3 = r0.user_id
            r62 = 1
            r63 = 0
            int r11 = r0.version
            r58 = r1
            r60 = r3
            r65 = r11
            r57.updateChatInfo(r58, r60, r62, r63, r65)
            r57 = r7
            r59 = r9
            r58 = r10
            r3 = r52
            goto L_0x170e
        L_0x0754:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateDcOptions
            if (r0 != 0) goto L_0x143c
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateConfig
            if (r0 == 0) goto L_0x075e
            goto L_0x143c
        L_0x075e:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateEncryption
            if (r0 == 0) goto L_0x0776
            org.telegram.messenger.SecretChatHelper r0 = r78.getSecretChatHelper()
            r1 = r8
            org.telegram.tgnet.TLRPC$TL_updateEncryption r1 = (org.telegram.tgnet.TLRPC.TL_updateEncryption) r1
            r0.processUpdateEncryption(r1, r6)
            r57 = r7
            r59 = r9
            r58 = r10
            r3 = r52
            goto L_0x170e
        L_0x0776:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updatePeerBlocked
            if (r0 == 0) goto L_0x0797
            r0 = r8
            org.telegram.tgnet.TLRPC$TL_updatePeerBlocked r0 = (org.telegram.tgnet.TLRPC.TL_updatePeerBlocked) r0
            org.telegram.messenger.MessagesStorage r1 = r78.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r1 = r1.getStorageQueue()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda90 r2 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda90
            r2.<init>(r5, r0)
            r1.postRunnable(r2)
            r57 = r7
            r59 = r9
            r58 = r10
            r3 = r52
            goto L_0x170e
        L_0x0797:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateNotifySettings
            if (r0 == 0) goto L_0x07ba
            if (r37 != 0) goto L_0x07a5
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x07a7
        L_0x07a5:
            r0 = r37
        L_0x07a7:
            r0.add(r8)
            r37 = r0
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x07ba:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateServiceNotification
            if (r0 == 0) goto L_0x08c6
            r0 = r8
            org.telegram.tgnet.TLRPC$TL_updateServiceNotification r0 = (org.telegram.tgnet.TLRPC.TL_updateServiceNotification) r0
            boolean r1 = r0.popup
            if (r1 == 0) goto L_0x07d9
            java.lang.String r1 = r0.message
            if (r1 == 0) goto L_0x07d9
            java.lang.String r1 = r0.message
            int r1 = r1.length()
            if (r1 <= 0) goto L_0x07d9
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda91 r1 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda91
            r1.<init>(r5, r0)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r1)
        L_0x07d9:
            int r1 = r0.flags
            r2 = 2
            r1 = r1 & r2
            if (r1 == 0) goto L_0x08b8
            org.telegram.tgnet.TLRPC$TL_message r1 = new org.telegram.tgnet.TLRPC$TL_message
            r1.<init>()
            org.telegram.messenger.UserConfig r2 = r78.getUserConfig()
            int r2 = r2.getNewMessageId()
            r1.id = r2
            r1.local_id = r2
            org.telegram.messenger.UserConfig r2 = r78.getUserConfig()
            r3 = 0
            r2.saveConfig(r3)
            r2 = 1
            r1.unread = r2
            r2 = 256(0x100, float:3.59E-43)
            r1.flags = r2
            int r2 = r0.inbox_date
            if (r2 == 0) goto L_0x0808
            int r2 = r0.inbox_date
            r1.date = r2
            goto L_0x0812
        L_0x0808:
            long r2 = java.lang.System.currentTimeMillis()
            r11 = 1000(0x3e8, double:4.94E-321)
            long r2 = r2 / r11
            int r3 = (int) r2
            r1.date = r3
        L_0x0812:
            org.telegram.tgnet.TLRPC$TL_peerUser r2 = new org.telegram.tgnet.TLRPC$TL_peerUser
            r2.<init>()
            r1.from_id = r2
            org.telegram.tgnet.TLRPC$Peer r2 = r1.from_id
            r3 = 777000(0xbdb28, double:3.83889E-318)
            r2.user_id = r3
            org.telegram.tgnet.TLRPC$TL_peerUser r2 = new org.telegram.tgnet.TLRPC$TL_peerUser
            r2.<init>()
            r1.peer_id = r2
            org.telegram.tgnet.TLRPC$Peer r2 = r1.peer_id
            org.telegram.messenger.UserConfig r11 = r78.getUserConfig()
            long r11 = r11.getClientUserId()
            r2.user_id = r11
            r1.dialog_id = r3
            org.telegram.tgnet.TLRPC$MessageMedia r2 = r0.media
            if (r2 == 0) goto L_0x0843
            org.telegram.tgnet.TLRPC$MessageMedia r2 = r0.media
            r1.media = r2
            int r2 = r1.flags
            r2 = r2 | 512(0x200, float:7.175E-43)
            r1.flags = r2
        L_0x0843:
            java.lang.String r2 = r0.message
            r1.message = r2
            java.util.ArrayList<org.telegram.tgnet.TLRPC$MessageEntity> r2 = r0.entities
            if (r2 == 0) goto L_0x0855
            java.util.ArrayList<org.telegram.tgnet.TLRPC$MessageEntity> r2 = r0.entities
            r1.entities = r2
            int r2 = r1.flags
            r2 = r2 | 128(0x80, float:1.794E-43)
            r1.flags = r2
        L_0x0855:
            if (r31 != 0) goto L_0x085f
            java.util.ArrayList r2 = new java.util.ArrayList
            r2.<init>()
            r31 = r2
            goto L_0x0861
        L_0x085f:
            r2 = r31
        L_0x0861:
            r2.add(r1)
            java.util.ArrayList<java.lang.Long> r3 = r5.createdDialogIds
            long r11 = r1.dialog_id
            java.lang.Long r4 = java.lang.Long.valueOf(r11)
            boolean r3 = r3.contains(r4)
            org.telegram.messenger.MessageObject r4 = new org.telegram.messenger.MessageObject
            int r11 = r5.currentAccount
            r39 = r4
            r40 = r11
            r41 = r1
            r42 = r6
            r43 = r9
            r44 = r3
            r45 = r3
            r39.<init>((int) r40, (org.telegram.tgnet.TLRPC.Message) r41, (java.util.AbstractMap<java.lang.Long, org.telegram.tgnet.TLRPC.User>) r42, (java.util.AbstractMap<java.lang.Long, org.telegram.tgnet.TLRPC.Chat>) r43, (boolean) r44, (boolean) r45)
            if (r13 != 0) goto L_0x088d
            androidx.collection.LongSparseArray r11 = new androidx.collection.LongSparseArray
            r11.<init>()
            r13 = r11
        L_0x088d:
            long r11 = r1.dialog_id
            java.lang.Object r11 = r13.get(r11)
            java.util.ArrayList r11 = (java.util.ArrayList) r11
            if (r11 != 0) goto L_0x08a2
            java.util.ArrayList r12 = new java.util.ArrayList
            r12.<init>()
            r11 = r12
            long r14 = r1.dialog_id
            r13.put(r14, r11)
        L_0x08a2:
            r11.add(r4)
            if (r30 != 0) goto L_0x08af
            java.util.ArrayList r12 = new java.util.ArrayList
            r12.<init>()
            r30 = r12
            goto L_0x08b1
        L_0x08af:
            r12 = r30
        L_0x08b1:
            r12.add(r4)
            r31 = r2
            r30 = r12
        L_0x08b8:
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x08c6:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateDialogPinned
            if (r0 == 0) goto L_0x08e9
            if (r37 != 0) goto L_0x08d4
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x08d6
        L_0x08d4:
            r0 = r37
        L_0x08d6:
            r0.add(r8)
            r37 = r0
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x08e9:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updatePinnedDialogs
            if (r0 == 0) goto L_0x090c
            if (r37 != 0) goto L_0x08f7
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x08f9
        L_0x08f7:
            r0 = r37
        L_0x08f9:
            r0.add(r8)
            r37 = r0
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x090c:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateFolderPeers
            if (r0 == 0) goto L_0x0931
            r0 = r8
            org.telegram.tgnet.TLRPC$TL_updateFolderPeers r0 = (org.telegram.tgnet.TLRPC.TL_updateFolderPeers) r0
            if (r25 != 0) goto L_0x091c
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            r11 = r1
            goto L_0x091e
        L_0x091c:
            r11 = r25
        L_0x091e:
            r11.add(r0)
            r2 = r7
            r14 = r9
            r25 = r11
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x0931:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updatePrivacy
            if (r0 == 0) goto L_0x0954
            if (r37 != 0) goto L_0x093f
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x0941
        L_0x093f:
            r0 = r37
        L_0x0941:
            r0.add(r8)
            r37 = r0
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x0954:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateWebPage
            if (r0 == 0) goto L_0x097f
            r0 = r8
            org.telegram.tgnet.TLRPC$TL_updateWebPage r0 = (org.telegram.tgnet.TLRPC.TL_updateWebPage) r0
            if (r24 != 0) goto L_0x0964
            androidx.collection.LongSparseArray r1 = new androidx.collection.LongSparseArray
            r1.<init>()
            r14 = r1
            goto L_0x0966
        L_0x0964:
            r14 = r24
        L_0x0966:
            org.telegram.tgnet.TLRPC$WebPage r1 = r0.webpage
            long r1 = r1.id
            org.telegram.tgnet.TLRPC$WebPage r3 = r0.webpage
            r14.put(r1, r3)
            r2 = r7
            r24 = r14
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            r14 = r9
            goto L_0x1b14
        L_0x097f:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateChannelWebPage
            if (r0 == 0) goto L_0x09aa
            r0 = r8
            org.telegram.tgnet.TLRPC$TL_updateChannelWebPage r0 = (org.telegram.tgnet.TLRPC.TL_updateChannelWebPage) r0
            if (r24 != 0) goto L_0x098f
            androidx.collection.LongSparseArray r1 = new androidx.collection.LongSparseArray
            r1.<init>()
            r14 = r1
            goto L_0x0991
        L_0x098f:
            r14 = r24
        L_0x0991:
            org.telegram.tgnet.TLRPC$WebPage r1 = r0.webpage
            long r1 = r1.id
            org.telegram.tgnet.TLRPC$WebPage r3 = r0.webpage
            r14.put(r1, r3)
            r2 = r7
            r24 = r14
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            r14 = r9
            goto L_0x1b14
        L_0x09aa:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateChannelTooLong
            if (r0 == 0) goto L_0x0a47
            r0 = r8
            org.telegram.tgnet.TLRPC$TL_updateChannelTooLong r0 = (org.telegram.tgnet.TLRPC.TL_updateChannelTooLong) r0
            boolean r1 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r1 == 0) goto L_0x09ce
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            r1.append(r8)
            r2 = r39
            r1.append(r2)
            long r2 = r0.channel_id
            r1.append(r2)
            java.lang.String r1 = r1.toString()
            org.telegram.messenger.FileLog.d(r1)
        L_0x09ce:
            org.telegram.messenger.support.LongSparseIntArray r1 = r5.channelsPts
            long r2 = r0.channel_id
            r4 = 0
            int r1 = r1.get(r2, r4)
            if (r1 != 0) goto L_0x0a26
            org.telegram.messenger.MessagesStorage r2 = r78.getMessagesStorage()
            long r3 = r0.channel_id
            int r1 = r2.getChannelPtsSync(r3)
            if (r1 != 0) goto L_0x0a1f
            long r2 = r0.channel_id
            java.lang.Long r2 = java.lang.Long.valueOf(r2)
            java.lang.Object r2 = r9.get(r2)
            org.telegram.tgnet.TLRPC$Chat r2 = (org.telegram.tgnet.TLRPC.Chat) r2
            if (r2 == 0) goto L_0x09f7
            boolean r3 = r2.min
            if (r3 == 0) goto L_0x0a01
        L_0x09f7:
            long r3 = r0.channel_id
            java.lang.Long r3 = java.lang.Long.valueOf(r3)
            org.telegram.tgnet.TLRPC$Chat r2 = r5.getChat(r3)
        L_0x0a01:
            if (r2 == 0) goto L_0x0a07
            boolean r3 = r2.min
            if (r3 == 0) goto L_0x0a15
        L_0x0a07:
            org.telegram.messenger.MessagesStorage r3 = r78.getMessagesStorage()
            long r11 = r0.channel_id
            org.telegram.tgnet.TLRPC$Chat r2 = r3.getChatSync(r11)
            r3 = 1
            r5.putChat(r2, r3)
        L_0x0a15:
            if (r2 == 0) goto L_0x0a1e
            boolean r3 = r2.min
            if (r3 != 0) goto L_0x0a1e
            r5.loadUnknownChannel(r2, r14)
        L_0x0a1e:
            goto L_0x0a26
        L_0x0a1f:
            org.telegram.messenger.support.LongSparseIntArray r2 = r5.channelsPts
            long r3 = r0.channel_id
            r2.put(r3, r1)
        L_0x0a26:
            if (r1 == 0) goto L_0x0a3d
            int r2 = r0.flags
            r3 = 1
            r2 = r2 & r3
            if (r2 == 0) goto L_0x0a38
            int r2 = r0.pts
            if (r2 <= r1) goto L_0x0a3d
            long r2 = r0.channel_id
            r5.getChannelDifference(r2)
            goto L_0x0a3d
        L_0x0a38:
            long r2 = r0.channel_id
            r5.getChannelDifference(r2)
        L_0x0a3d:
            r57 = r7
            r59 = r9
            r58 = r10
            r3 = r52
            goto L_0x170e
        L_0x0a47:
            r2 = r39
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateReadChannelInbox
            if (r0 == 0) goto L_0x0aa0
            r0 = r8
            org.telegram.tgnet.TLRPC$TL_updateReadChannelInbox r0 = (org.telegram.tgnet.TLRPC.TL_updateReadChannelInbox) r0
            if (r54 != 0) goto L_0x0a58
            org.telegram.messenger.support.LongSparseIntArray r1 = new org.telegram.messenger.support.LongSparseIntArray
            r1.<init>()
            goto L_0x0a5a
        L_0x0a58:
            r1 = r54
        L_0x0a5a:
            long r2 = r0.channel_id
            long r2 = -r2
            int r4 = r0.max_id
            r1.put(r2, r4)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r4 = r5.dialogs_read_inbox_max
            java.lang.Long r11 = java.lang.Long.valueOf(r2)
            java.lang.Object r4 = r4.get(r11)
            java.lang.Integer r4 = (java.lang.Integer) r4
            if (r4 != 0) goto L_0x0a7d
            org.telegram.messenger.MessagesStorage r11 = r78.getMessagesStorage()
            r12 = 0
            int r11 = r11.getDialogReadMax(r12, r2)
            java.lang.Integer r4 = java.lang.Integer.valueOf(r11)
        L_0x0a7d:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r11 = r5.dialogs_read_inbox_max
            java.lang.Long r12 = java.lang.Long.valueOf(r2)
            int r14 = r4.intValue()
            int r15 = r0.max_id
            int r14 = java.lang.Math.max(r14, r15)
            java.lang.Integer r14 = java.lang.Integer.valueOf(r14)
            r11.put(r12, r14)
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x0aa0:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateReadChannelOutbox
            if (r0 == 0) goto L_0x0b13
            r0 = r8
            org.telegram.tgnet.TLRPC$TL_updateReadChannelOutbox r0 = (org.telegram.tgnet.TLRPC.TL_updateReadChannelOutbox) r0
            boolean r1 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r1 == 0) goto L_0x0ac2
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            r1.append(r8)
            r1.append(r2)
            long r2 = r0.channel_id
            r1.append(r2)
            java.lang.String r1 = r1.toString()
            org.telegram.messenger.FileLog.d(r1)
        L_0x0ac2:
            if (r55 != 0) goto L_0x0aca
            org.telegram.messenger.support.LongSparseIntArray r1 = new org.telegram.messenger.support.LongSparseIntArray
            r1.<init>()
            goto L_0x0acc
        L_0x0aca:
            r1 = r55
        L_0x0acc:
            long r2 = r0.channel_id
            long r2 = -r2
            int r4 = r0.max_id
            r1.put(r2, r4)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r4 = r5.dialogs_read_outbox_max
            java.lang.Long r11 = java.lang.Long.valueOf(r2)
            java.lang.Object r4 = r4.get(r11)
            java.lang.Integer r4 = (java.lang.Integer) r4
            if (r4 != 0) goto L_0x0aef
            org.telegram.messenger.MessagesStorage r11 = r78.getMessagesStorage()
            r12 = 1
            int r11 = r11.getDialogReadMax(r12, r2)
            java.lang.Integer r4 = java.lang.Integer.valueOf(r11)
        L_0x0aef:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r11 = r5.dialogs_read_outbox_max
            java.lang.Long r12 = java.lang.Long.valueOf(r2)
            int r14 = r4.intValue()
            int r15 = r0.max_id
            int r14 = java.lang.Math.max(r14, r15)
            java.lang.Integer r14 = java.lang.Integer.valueOf(r14)
            r11.put(r12, r14)
            r0 = r1
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r11 = r56
            goto L_0x1b14
        L_0x0b13:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateDeleteChannelMessages
            if (r0 == 0) goto L_0x0b64
            r0 = r8
            org.telegram.tgnet.TLRPC$TL_updateDeleteChannelMessages r0 = (org.telegram.tgnet.TLRPC.TL_updateDeleteChannelMessages) r0
            boolean r1 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r1 == 0) goto L_0x0b35
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            r1.append(r8)
            r1.append(r2)
            long r2 = r0.channel_id
            r1.append(r2)
            java.lang.String r1 = r1.toString()
            org.telegram.messenger.FileLog.d(r1)
        L_0x0b35:
            if (r10 != 0) goto L_0x0b3d
            androidx.collection.LongSparseArray r1 = new androidx.collection.LongSparseArray
            r1.<init>()
            r10 = r1
        L_0x0b3d:
            long r1 = r0.channel_id
            long r1 = -r1
            java.lang.Object r3 = r10.get(r1)
            java.util.ArrayList r3 = (java.util.ArrayList) r3
            if (r3 != 0) goto L_0x0b51
            java.util.ArrayList r4 = new java.util.ArrayList
            r4.<init>()
            r3 = r4
            r10.put(r1, r3)
        L_0x0b51:
            java.util.ArrayList<java.lang.Integer> r4 = r0.messages
            r3.addAll(r4)
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x0b64:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateChannel
            if (r0 == 0) goto L_0x0ba5
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0b86
            r0 = r8
            org.telegram.tgnet.TLRPC$TL_updateChannel r0 = (org.telegram.tgnet.TLRPC.TL_updateChannel) r0
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            r1.append(r8)
            r1.append(r2)
            long r2 = r0.channel_id
            r1.append(r2)
            java.lang.String r1 = r1.toString()
            org.telegram.messenger.FileLog.d(r1)
        L_0x0b86:
            if (r37 != 0) goto L_0x0b90
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x0b92
        L_0x0b90:
            r0 = r37
        L_0x0b92:
            r0.add(r8)
            r37 = r0
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x0ba5:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateChat
            if (r0 == 0) goto L_0x0bc8
            if (r37 != 0) goto L_0x0bb3
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x0bb5
        L_0x0bb3:
            r0 = r37
        L_0x0bb5:
            r0.add(r8)
            r37 = r0
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x0bc8:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateChannelMessageViews
            if (r0 == 0) goto L_0x0CLASSNAME
            r0 = r8
            org.telegram.tgnet.TLRPC$TL_updateChannelMessageViews r0 = (org.telegram.tgnet.TLRPC.TL_updateChannelMessageViews) r0
            boolean r1 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r1 == 0) goto L_0x0bea
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            r1.append(r8)
            r1.append(r2)
            long r2 = r0.channel_id
            r1.append(r2)
            java.lang.String r1 = r1.toString()
            org.telegram.messenger.FileLog.d(r1)
        L_0x0bea:
            if (r23 != 0) goto L_0x0bf3
            androidx.collection.LongSparseArray r1 = new androidx.collection.LongSparseArray
            r1.<init>()
            r11 = r1
            goto L_0x0bf5
        L_0x0bf3:
            r11 = r23
        L_0x0bf5:
            long r1 = r0.channel_id
            long r1 = -r1
            java.lang.Object r3 = r11.get(r1)
            android.util.SparseIntArray r3 = (android.util.SparseIntArray) r3
            if (r3 != 0) goto L_0x0CLASSNAME
            android.util.SparseIntArray r4 = new android.util.SparseIntArray
            r4.<init>()
            r3 = r4
            r11.put(r1, r3)
        L_0x0CLASSNAME:
            int r4 = r0.id
            int r12 = r0.views
            r3.put(r4, r12)
            r2 = r7
            r14 = r9
            r23 = r11
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x0CLASSNAME:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateChannelMessageForwards
            if (r0 == 0) goto L_0x0CLASSNAME
            r0 = r8
            org.telegram.tgnet.TLRPC$TL_updateChannelMessageForwards r0 = (org.telegram.tgnet.TLRPC.TL_updateChannelMessageForwards) r0
            boolean r1 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r1 == 0) goto L_0x0CLASSNAME
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            r1.append(r8)
            r1.append(r2)
            long r2 = r0.channel_id
            r1.append(r2)
            java.lang.String r1 = r1.toString()
            org.telegram.messenger.FileLog.d(r1)
        L_0x0CLASSNAME:
            if (r18 != 0) goto L_0x0c4b
            androidx.collection.LongSparseArray r1 = new androidx.collection.LongSparseArray
            r1.<init>()
            r15 = r1
            goto L_0x0c4d
        L_0x0c4b:
            r15 = r18
        L_0x0c4d:
            long r1 = r0.channel_id
            long r1 = -r1
            java.lang.Object r3 = r15.get(r1)
            android.util.SparseIntArray r3 = (android.util.SparseIntArray) r3
            if (r3 != 0) goto L_0x0CLASSNAME
            android.util.SparseIntArray r4 = new android.util.SparseIntArray
            r4.<init>()
            r3 = r4
            r15.put(r1, r3)
        L_0x0CLASSNAME:
            int r4 = r0.id
            int r11 = r0.forwards
            r3.put(r4, r11)
            r2 = r7
            r14 = r9
            r18 = r15
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x0CLASSNAME:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateChatParticipantAdmin
            if (r0 == 0) goto L_0x0ca6
            r0 = r8
            org.telegram.tgnet.TLRPC$TL_updateChatParticipantAdmin r0 = (org.telegram.tgnet.TLRPC.TL_updateChatParticipantAdmin) r0
            org.telegram.messenger.MessagesStorage r57 = r78.getMessagesStorage()
            long r1 = r0.chat_id
            long r3 = r0.user_id
            r62 = 2
            boolean r11 = r0.is_admin
            if (r11 == 0) goto L_0x0c8f
            r14 = 1
        L_0x0c8f:
            r63 = r14
            int r11 = r0.version
            r58 = r1
            r60 = r3
            r65 = r11
            r57.updateChatInfo(r58, r60, r62, r63, r65)
            r57 = r7
            r59 = r9
            r58 = r10
            r3 = r52
            goto L_0x170e
        L_0x0ca6:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateChatDefaultBannedRights
            if (r0 == 0) goto L_0x0ce8
            r0 = r8
            org.telegram.tgnet.TLRPC$TL_updateChatDefaultBannedRights r0 = (org.telegram.tgnet.TLRPC.TL_updateChatDefaultBannedRights) r0
            org.telegram.tgnet.TLRPC$Peer r1 = r0.peer
            long r1 = r1.channel_id
            int r3 = (r1 > r14 ? 1 : (r1 == r14 ? 0 : -1))
            if (r3 == 0) goto L_0x0cba
            org.telegram.tgnet.TLRPC$Peer r1 = r0.peer
            long r1 = r1.channel_id
            goto L_0x0cbe
        L_0x0cba:
            org.telegram.tgnet.TLRPC$Peer r1 = r0.peer
            long r1 = r1.chat_id
        L_0x0cbe:
            org.telegram.messenger.MessagesStorage r3 = r78.getMessagesStorage()
            org.telegram.tgnet.TLRPC$TL_chatBannedRights r4 = r0.default_banned_rights
            int r11 = r0.version
            r3.updateChatDefaultBannedRights(r1, r4, r11)
            if (r37 != 0) goto L_0x0cd3
            java.util.ArrayList r3 = new java.util.ArrayList
            r3.<init>()
            r37 = r3
            goto L_0x0cd5
        L_0x0cd3:
            r3 = r37
        L_0x0cd5:
            r3.add(r8)
            r37 = r3
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x0ce8:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateStickerSets
            if (r0 == 0) goto L_0x0d0b
            if (r37 != 0) goto L_0x0cf6
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x0cf8
        L_0x0cf6:
            r0 = r37
        L_0x0cf8:
            r0.add(r8)
            r37 = r0
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x0d0b:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateStickerSetsOrder
            if (r0 == 0) goto L_0x0d2e
            if (r37 != 0) goto L_0x0d19
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x0d1b
        L_0x0d19:
            r0 = r37
        L_0x0d1b:
            r0.add(r8)
            r37 = r0
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x0d2e:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateNewStickerSet
            if (r0 == 0) goto L_0x0d51
            if (r37 != 0) goto L_0x0d3c
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x0d3e
        L_0x0d3c:
            r0 = r37
        L_0x0d3e:
            r0.add(r8)
            r37 = r0
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x0d51:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateDraftMessage
            if (r0 == 0) goto L_0x0d74
            if (r37 != 0) goto L_0x0d5f
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x0d61
        L_0x0d5f:
            r0 = r37
        L_0x0d61:
            r0.add(r8)
            r37 = r0
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x0d74:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateSavedGifs
            if (r0 == 0) goto L_0x0d97
            if (r37 != 0) goto L_0x0d82
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x0d84
        L_0x0d82:
            r0 = r37
        L_0x0d84:
            r0.add(r8)
            r37 = r0
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x0d97:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateEditChannelMessage
            if (r0 != 0) goto L_0x12cb
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateEditMessage
            if (r0 == 0) goto L_0x0da3
            r1 = r48
            goto L_0x12cd
        L_0x0da3:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updatePinnedChannelMessages
            if (r0 == 0) goto L_0x0deb
            r0 = r8
            org.telegram.tgnet.TLRPC$TL_updatePinnedChannelMessages r0 = (org.telegram.tgnet.TLRPC.TL_updatePinnedChannelMessages) r0
            boolean r1 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r1 == 0) goto L_0x0dc5
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            r1.append(r8)
            r1.append(r2)
            long r2 = r0.channel_id
            r1.append(r2)
            java.lang.String r1 = r1.toString()
            org.telegram.messenger.FileLog.d(r1)
        L_0x0dc5:
            org.telegram.messenger.MessagesStorage r57 = r78.getMessagesStorage()
            long r1 = r0.channel_id
            long r1 = -r1
            java.util.ArrayList<java.lang.Integer> r3 = r0.messages
            boolean r4 = r0.pinned
            r62 = -1
            r63 = 0
            r64 = 0
            r65 = 0
            r58 = r1
            r60 = r3
            r61 = r4
            r57.updatePinnedMessages(r58, r60, r61, r62, r63, r64, r65)
            r57 = r7
            r59 = r9
            r58 = r10
            r3 = r52
            goto L_0x170e
        L_0x0deb:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updatePinnedMessages
            if (r0 == 0) goto L_0x0e19
            r0 = r8
            org.telegram.tgnet.TLRPC$TL_updatePinnedMessages r0 = (org.telegram.tgnet.TLRPC.TL_updatePinnedMessages) r0
            org.telegram.messenger.MessagesStorage r57 = r78.getMessagesStorage()
            org.telegram.tgnet.TLRPC$Peer r1 = r0.peer
            long r58 = org.telegram.messenger.MessageObject.getPeerId(r1)
            java.util.ArrayList<java.lang.Integer> r1 = r0.messages
            boolean r2 = r0.pinned
            r62 = -1
            r63 = 0
            r64 = 0
            r65 = 0
            r60 = r1
            r61 = r2
            r57.updatePinnedMessages(r58, r60, r61, r62, r63, r64, r65)
            r57 = r7
            r59 = r9
            r58 = r10
            r3 = r52
            goto L_0x170e
        L_0x0e19:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateReadFeaturedStickers
            if (r0 == 0) goto L_0x0e3c
            if (r37 != 0) goto L_0x0e27
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x0e29
        L_0x0e27:
            r0 = r37
        L_0x0e29:
            r0.add(r8)
            r37 = r0
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x0e3c:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updatePhoneCall
            if (r0 == 0) goto L_0x0e5f
            if (r37 != 0) goto L_0x0e4a
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x0e4c
        L_0x0e4a:
            r0 = r37
        L_0x0e4c:
            r0.add(r8)
            r37 = r0
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x0e5f:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateGroupCallParticipants
            if (r0 == 0) goto L_0x0e82
            if (r37 != 0) goto L_0x0e6d
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x0e6f
        L_0x0e6d:
            r0 = r37
        L_0x0e6f:
            r0.add(r8)
            r37 = r0
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x0e82:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateGroupCall
            if (r0 == 0) goto L_0x0ea5
            if (r37 != 0) goto L_0x0e90
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x0e92
        L_0x0e90:
            r0 = r37
        L_0x0e92:
            r0.add(r8)
            r37 = r0
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x0ea5:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateGroupCallConnection
            if (r0 == 0) goto L_0x0eb3
            r57 = r7
            r59 = r9
            r58 = r10
            r3 = r52
            goto L_0x170e
        L_0x0eb3:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateBotCommands
            if (r0 == 0) goto L_0x0ed6
            if (r37 != 0) goto L_0x0ec1
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x0ec3
        L_0x0ec1:
            r0 = r37
        L_0x0ec3:
            r0.add(r8)
            r37 = r0
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x0ed6:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updatePhoneCallSignalingData
            if (r0 == 0) goto L_0x0ef9
            if (r37 != 0) goto L_0x0ee4
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x0ee6
        L_0x0ee4:
            r0 = r37
        L_0x0ee6:
            r0.add(r8)
            r37 = r0
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x0ef9:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateLangPack
            if (r0 == 0) goto L_0x0var_
            r0 = r8
            org.telegram.tgnet.TLRPC$TL_updateLangPack r0 = (org.telegram.tgnet.TLRPC.TL_updateLangPack) r0
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda87 r1 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda87
            r1.<init>(r5, r0)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r1)
            r57 = r7
            r59 = r9
            r58 = r10
            r3 = r52
            goto L_0x170e
        L_0x0var_:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateLangPackTooLong
            if (r0 == 0) goto L_0x0f2f
            r0 = r8
            org.telegram.tgnet.TLRPC$TL_updateLangPackTooLong r0 = (org.telegram.tgnet.TLRPC.TL_updateLangPackTooLong) r0
            org.telegram.messenger.LocaleController r1 = org.telegram.messenger.LocaleController.getInstance()
            int r2 = r5.currentAccount
            java.lang.String r3 = r0.lang_code
            r4 = 0
            r1.reloadCurrentRemoteLocale(r2, r3, r4)
            r57 = r7
            r59 = r9
            r58 = r10
            r3 = r52
            goto L_0x170e
        L_0x0f2f:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateFavedStickers
            if (r0 == 0) goto L_0x0var_
            if (r37 != 0) goto L_0x0f3d
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x0f3f
        L_0x0f3d:
            r0 = r37
        L_0x0f3f:
            r0.add(r8)
            r37 = r0
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x0var_:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateContactsReset
            if (r0 == 0) goto L_0x0var_
            if (r37 != 0) goto L_0x0var_
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x0var_
        L_0x0var_:
            r0 = r37
        L_0x0var_:
            r0.add(r8)
            r37 = r0
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x0var_:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateChannelAvailableMessages
            if (r0 == 0) goto L_0x0fac
            r0 = r8
            org.telegram.tgnet.TLRPC$TL_updateChannelAvailableMessages r0 = (org.telegram.tgnet.TLRPC.TL_updateChannelAvailableMessages) r0
            r1 = r48
            if (r1 != 0) goto L_0x0var_
            org.telegram.messenger.support.LongSparseIntArray r2 = new org.telegram.messenger.support.LongSparseIntArray
            r2.<init>()
            r48 = r2
            r1 = r48
        L_0x0var_:
            long r2 = r0.channel_id
            long r2 = -r2
            r4 = 0
            int r4 = r1.get(r2, r4)
            if (r4 == 0) goto L_0x0var_
            int r11 = r0.available_min_id
            if (r4 >= r11) goto L_0x0f9c
        L_0x0var_:
            int r11 = r0.available_min_id
            r1.put(r2, r11)
        L_0x0f9c:
            r48 = r1
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x0fac:
            r1 = r48
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateDialogUnreadMark
            if (r0 == 0) goto L_0x0fd3
            if (r37 != 0) goto L_0x0fbc
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x0fbe
        L_0x0fbc:
            r0 = r37
        L_0x0fbe:
            r0.add(r8)
            r37 = r0
            r48 = r1
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x0fd3:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateMessagePoll
            if (r0 == 0) goto L_0x102d
            r0 = r8
            org.telegram.tgnet.TLRPC$TL_updateMessagePoll r0 = (org.telegram.tgnet.TLRPC.TL_updateMessagePoll) r0
            org.telegram.messenger.SendMessagesHelper r2 = r78.getSendMessagesHelper()
            long r3 = r0.poll_id
            long r2 = r2.getVoteSendTime(r3)
            long r11 = android.os.SystemClock.elapsedRealtime()
            long r11 = r11 - r2
            long r11 = java.lang.Math.abs(r11)
            r14 = 600(0x258, double:2.964E-321)
            int r4 = (r11 > r14 ? 1 : (r11 == r14 ? 0 : -1))
            if (r4 >= 0) goto L_0x0fff
            r48 = r1
            r57 = r7
            r59 = r9
            r58 = r10
            r3 = r52
            goto L_0x170e
        L_0x0fff:
            org.telegram.messenger.MessagesStorage r4 = r78.getMessagesStorage()
            long r11 = r0.poll_id
            org.telegram.tgnet.TLRPC$Poll r14 = r0.poll
            org.telegram.tgnet.TLRPC$PollResults r15 = r0.results
            r4.updateMessagePollResults(r11, r14, r15)
            if (r37 != 0) goto L_0x1016
            java.util.ArrayList r4 = new java.util.ArrayList
            r4.<init>()
            r37 = r4
            goto L_0x1018
        L_0x1016:
            r4 = r37
        L_0x1018:
            r4.add(r8)
            r48 = r1
            r37 = r4
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x102d:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateMessageReactions
            if (r0 == 0) goto L_0x107d
            r0 = r8
            org.telegram.tgnet.TLRPC$TL_updateMessageReactions r0 = (org.telegram.tgnet.TLRPC.TL_updateMessageReactions) r0
            org.telegram.tgnet.TLRPC$Peer r2 = r0.peer
            long r2 = org.telegram.messenger.MessageObject.getPeerId(r2)
            org.telegram.messenger.MessagesStorage r4 = r78.getMessagesStorage()
            int r11 = r0.msg_id
            org.telegram.tgnet.TLRPC$TL_messageReactions r12 = r0.reactions
            r4.updateMessageReactions(r2, r11, r12)
            boolean r4 = r0.updateUnreadState
            if (r4 == 0) goto L_0x105c
            android.util.SparseBooleanArray r4 = new android.util.SparseBooleanArray
            r4.<init>()
            int r11 = r0.msg_id
            org.telegram.tgnet.TLRPC$TL_messageReactions r12 = r0.reactions
            boolean r12 = org.telegram.messenger.MessageObject.hasUnreadReactions((org.telegram.tgnet.TLRPC.TL_messageReactions) r12)
            r4.put(r11, r12)
            r5.checkUnreadReactions(r2, r4)
        L_0x105c:
            if (r37 != 0) goto L_0x1066
            java.util.ArrayList r4 = new java.util.ArrayList
            r4.<init>()
            r37 = r4
            goto L_0x1068
        L_0x1066:
            r4 = r37
        L_0x1068:
            r4.add(r8)
            r48 = r1
            r37 = r4
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x107d:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updatePeerLocated
            if (r0 == 0) goto L_0x10a2
            if (r37 != 0) goto L_0x108b
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x108d
        L_0x108b:
            r0 = r37
        L_0x108d:
            r0.add(r8)
            r37 = r0
            r48 = r1
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x10a2:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateTheme
            if (r0 == 0) goto L_0x10c7
            if (r37 != 0) goto L_0x10b0
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x10b2
        L_0x10b0:
            r0 = r37
        L_0x10b2:
            r0.add(r8)
            r37 = r0
            r48 = r1
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x10c7:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateGeoLiveViewed
            if (r0 == 0) goto L_0x10de
            org.telegram.messenger.LocationController r0 = r78.getLocationController()
            r0.setNewLocationEndWatchTime()
            r48 = r1
            r57 = r7
            r59 = r9
            r58 = r10
            r3 = r52
            goto L_0x170e
        L_0x10de:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateDialogFilter
            if (r0 == 0) goto L_0x1103
            if (r37 != 0) goto L_0x10ec
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x10ee
        L_0x10ec:
            r0 = r37
        L_0x10ee:
            r0.add(r8)
            r37 = r0
            r48 = r1
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x1103:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateDialogFilterOrder
            if (r0 == 0) goto L_0x1128
            if (r37 != 0) goto L_0x1111
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x1113
        L_0x1111:
            r0 = r37
        L_0x1113:
            r0.add(r8)
            r37 = r0
            r48 = r1
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x1128:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateDialogFilters
            if (r0 == 0) goto L_0x114d
            if (r37 != 0) goto L_0x1136
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x1138
        L_0x1136:
            r0 = r37
        L_0x1138:
            r0.add(r8)
            r37 = r0
            r48 = r1
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x114d:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateWebViewResultSent
            if (r0 == 0) goto L_0x1172
            if (r37 != 0) goto L_0x115b
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x115d
        L_0x115b:
            r0 = r37
        L_0x115d:
            r0.add(r8)
            r37 = r0
            r48 = r1
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x1172:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateAttachMenuBots
            if (r0 == 0) goto L_0x1197
            if (r37 != 0) goto L_0x1180
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x1182
        L_0x1180:
            r0 = r37
        L_0x1182:
            r0.add(r8)
            r37 = r0
            r48 = r1
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x1197:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateBotMenuButton
            if (r0 == 0) goto L_0x11bc
            if (r37 != 0) goto L_0x11a5
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x11a7
        L_0x11a5:
            r0 = r37
        L_0x11a7:
            r0.add(r8)
            r37 = r0
            r48 = r1
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x11bc:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateReadChannelDiscussionInbox
            if (r0 == 0) goto L_0x11e1
            if (r37 != 0) goto L_0x11ca
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x11cc
        L_0x11ca:
            r0 = r37
        L_0x11cc:
            r0.add(r8)
            r37 = r0
            r48 = r1
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x11e1:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateReadChannelDiscussionOutbox
            if (r0 == 0) goto L_0x1206
            if (r37 != 0) goto L_0x11ef
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x11f1
        L_0x11ef:
            r0 = r37
        L_0x11f1:
            r0.add(r8)
            r37 = r0
            r48 = r1
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x1206:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updatePeerHistoryTTL
            if (r0 == 0) goto L_0x122b
            if (r37 != 0) goto L_0x1214
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x1216
        L_0x1214:
            r0 = r37
        L_0x1216:
            r0.add(r8)
            r37 = r0
            r48 = r1
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x122b:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updatePendingJoinRequests
            if (r0 == 0) goto L_0x1250
            if (r37 != 0) goto L_0x1239
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x123b
        L_0x1239:
            r0 = r37
        L_0x123b:
            r0.add(r8)
            r37 = r0
            r48 = r1
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x1250:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateSavedRingtones
            if (r0 == 0) goto L_0x1275
            if (r37 != 0) goto L_0x125e
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x1260
        L_0x125e:
            r0 = r37
        L_0x1260:
            r0.add(r8)
            r37 = r0
            r48 = r1
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x1275:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateTranscribeAudio
            if (r0 == 0) goto L_0x129a
            if (r37 != 0) goto L_0x1283
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x1285
        L_0x1283:
            r0 = r37
        L_0x1285:
            r0.add(r8)
            r37 = r0
            r48 = r1
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x129a:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateTranscribedAudio
            if (r0 == 0) goto L_0x12bf
            if (r37 != 0) goto L_0x12a8
            java.util.ArrayList r0 = new java.util.ArrayList
            r0.<init>()
            r37 = r0
            goto L_0x12aa
        L_0x12a8:
            r0 = r37
        L_0x12aa:
            r0.add(r8)
            r37 = r0
            r48 = r1
            r2 = r7
            r14 = r9
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x12bf:
            r48 = r1
            r57 = r7
            r59 = r9
            r58 = r10
            r3 = r52
            goto L_0x170e
        L_0x12cb:
            r1 = r48
        L_0x12cd:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateEditChannelMessage
            if (r0 == 0) goto L_0x1305
            r0 = r8
            org.telegram.tgnet.TLRPC$TL_updateEditChannelMessage r0 = (org.telegram.tgnet.TLRPC.TL_updateEditChannelMessage) r0
            org.telegram.tgnet.TLRPC$Message r0 = r0.message
            org.telegram.tgnet.TLRPC$Peer r2 = r0.peer_id
            long r2 = r2.channel_id
            java.lang.Long r2 = java.lang.Long.valueOf(r2)
            java.lang.Object r2 = r9.get(r2)
            org.telegram.tgnet.TLRPC$Chat r2 = (org.telegram.tgnet.TLRPC.Chat) r2
            if (r2 != 0) goto L_0x12f2
            org.telegram.tgnet.TLRPC$Peer r3 = r0.peer_id
            long r3 = r3.channel_id
            java.lang.Long r3 = java.lang.Long.valueOf(r3)
            org.telegram.tgnet.TLRPC$Chat r2 = r5.getChat(r3)
        L_0x12f2:
            if (r2 != 0) goto L_0x1304
            org.telegram.messenger.MessagesStorage r3 = r78.getMessagesStorage()
            org.telegram.tgnet.TLRPC$Peer r4 = r0.peer_id
            long r11 = r4.channel_id
            org.telegram.tgnet.TLRPC$Chat r2 = r3.getChatSync(r11)
            r3 = 1
            r5.putChat(r2, r3)
        L_0x1304:
            goto L_0x1318
        L_0x1305:
            r0 = r8
            org.telegram.tgnet.TLRPC$TL_updateEditMessage r0 = (org.telegram.tgnet.TLRPC.TL_updateEditMessage) r0
            org.telegram.tgnet.TLRPC$Message r0 = r0.message
            long r2 = r0.dialog_id
            int r4 = (r2 > r46 ? 1 : (r2 == r46 ? 0 : -1))
            if (r4 != 0) goto L_0x1318
            r2 = 0
            r0.unread = r2
            r0.media_unread = r2
            r2 = 1
            r0.out = r2
        L_0x1318:
            boolean r2 = r0.out
            if (r2 != 0) goto L_0x132d
            org.telegram.tgnet.TLRPC$Peer r2 = r0.from_id
            boolean r2 = r2 instanceof org.telegram.tgnet.TLRPC.TL_peerUser
            if (r2 == 0) goto L_0x132d
            org.telegram.tgnet.TLRPC$Peer r2 = r0.from_id
            long r2 = r2.user_id
            int r4 = (r2 > r46 ? 1 : (r2 == r46 ? 0 : -1))
            if (r4 != 0) goto L_0x132d
            r2 = 1
            r0.out = r2
        L_0x132d:
            if (r82 != 0) goto L_0x1381
            r2 = 0
            java.util.ArrayList<org.telegram.tgnet.TLRPC$MessageEntity> r3 = r0.entities
            int r3 = r3.size()
        L_0x1336:
            if (r2 >= r3) goto L_0x1381
            java.util.ArrayList<org.telegram.tgnet.TLRPC$MessageEntity> r4 = r0.entities
            java.lang.Object r4 = r4.get(r2)
            org.telegram.tgnet.TLRPC$MessageEntity r4 = (org.telegram.tgnet.TLRPC.MessageEntity) r4
            boolean r11 = r4 instanceof org.telegram.tgnet.TLRPC.TL_messageEntityMentionName
            if (r11 == 0) goto L_0x137e
            r11 = r4
            org.telegram.tgnet.TLRPC$TL_messageEntityMentionName r11 = (org.telegram.tgnet.TLRPC.TL_messageEntityMentionName) r11
            long r11 = r11.user_id
            java.lang.Long r14 = java.lang.Long.valueOf(r11)
            java.lang.Object r14 = r6.get(r14)
            org.telegram.tgnet.TLRPC$User r14 = (org.telegram.tgnet.TLRPC.User) r14
            if (r14 == 0) goto L_0x1359
            boolean r15 = r14.min
            if (r15 == 0) goto L_0x1361
        L_0x1359:
            java.lang.Long r15 = java.lang.Long.valueOf(r11)
            org.telegram.tgnet.TLRPC$User r14 = r5.getUser(r15)
        L_0x1361:
            if (r14 == 0) goto L_0x1367
            boolean r15 = r14.min
            if (r15 == 0) goto L_0x137a
        L_0x1367:
            org.telegram.messenger.MessagesStorage r15 = r78.getMessagesStorage()
            org.telegram.tgnet.TLRPC$User r14 = r15.getUserSync(r11)
            if (r14 == 0) goto L_0x1376
            boolean r15 = r14.min
            if (r15 == 0) goto L_0x1376
            r14 = 0
        L_0x1376:
            r15 = 1
            r5.putUser(r14, r15)
        L_0x137a:
            if (r14 != 0) goto L_0x137e
            r15 = 0
            return r15
        L_0x137e:
            int r2 = r2 + 1
            goto L_0x1336
        L_0x1381:
            org.telegram.messenger.MessageObject.getDialogId(r0)
            boolean r2 = r0.out
            if (r2 == 0) goto L_0x138b
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r2 = r5.dialogs_read_outbox_max
            goto L_0x138d
        L_0x138b:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r2 = r5.dialogs_read_inbox_max
        L_0x138d:
            long r3 = r0.dialog_id
            java.lang.Long r3 = java.lang.Long.valueOf(r3)
            java.lang.Object r3 = r2.get(r3)
            java.lang.Integer r3 = (java.lang.Integer) r3
            if (r3 != 0) goto L_0x13b4
            org.telegram.messenger.MessagesStorage r4 = r78.getMessagesStorage()
            boolean r11 = r0.out
            long r14 = r0.dialog_id
            int r4 = r4.getDialogReadMax(r11, r14)
            java.lang.Integer r3 = java.lang.Integer.valueOf(r4)
            long r11 = r0.dialog_id
            java.lang.Long r4 = java.lang.Long.valueOf(r11)
            r2.put(r4, r3)
        L_0x13b4:
            int r4 = r3.intValue()
            int r11 = r0.id
            if (r4 >= r11) goto L_0x13be
            r4 = 1
            goto L_0x13bf
        L_0x13be:
            r4 = 0
        L_0x13bf:
            r0.unread = r4
            long r11 = r0.dialog_id
            int r4 = (r11 > r46 ? 1 : (r11 == r46 ? 0 : -1))
            if (r4 != 0) goto L_0x13cf
            r4 = 1
            r0.out = r4
            r4 = 0
            r0.unread = r4
            r0.media_unread = r4
        L_0x13cf:
            boolean r4 = r0.out
            if (r4 == 0) goto L_0x13dd
            java.lang.String r4 = r0.message
            if (r4 != 0) goto L_0x13dd
            java.lang.String r4 = ""
            r0.message = r4
            r0.attachPath = r4
        L_0x13dd:
            org.telegram.messenger.ImageLoader.saveMessageThumbs(r0)
            java.util.ArrayList<java.lang.Long> r4 = r5.createdDialogIds
            long r11 = r0.dialog_id
            java.lang.Long r11 = java.lang.Long.valueOf(r11)
            boolean r4 = r4.contains(r11)
            org.telegram.messenger.MessageObject r11 = new org.telegram.messenger.MessageObject
            int r12 = r5.currentAccount
            r39 = r11
            r40 = r12
            r41 = r0
            r42 = r6
            r43 = r9
            r44 = r4
            r45 = r4
            r39.<init>((int) r40, (org.telegram.tgnet.TLRPC.Message) r41, (java.util.AbstractMap<java.lang.Long, org.telegram.tgnet.TLRPC.User>) r42, (java.util.AbstractMap<java.lang.Long, org.telegram.tgnet.TLRPC.Chat>) r43, (boolean) r44, (boolean) r45)
            if (r22 != 0) goto L_0x1409
            androidx.collection.LongSparseArray r12 = new androidx.collection.LongSparseArray
            r12.<init>()
            goto L_0x140b
        L_0x1409:
            r12 = r22
        L_0x140b:
            r14 = r12
            r48 = r1
            r15 = r2
            long r1 = r0.dialog_id
            java.lang.Object r1 = r14.get(r1)
            java.util.ArrayList r1 = (java.util.ArrayList) r1
            if (r1 != 0) goto L_0x1427
            java.util.ArrayList r2 = new java.util.ArrayList
            r2.<init>()
            r1 = r2
            r21 = r3
            long r2 = r0.dialog_id
            r14.put(r2, r1)
            goto L_0x1429
        L_0x1427:
            r21 = r3
        L_0x1429:
            r1.add(r11)
            r2 = r7
            r14 = r9
            r22 = r12
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            goto L_0x1b14
        L_0x143c:
            org.telegram.tgnet.ConnectionsManager r0 = r78.getConnectionsManager()
            r0.updateDcSettings()
            r57 = r7
            r59 = r9
            r58 = r10
            r3 = r52
            goto L_0x170e
        L_0x144d:
            r56 = r11
        L_0x144f:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateChannelUserTyping
            if (r0 == 0) goto L_0x147e
            r0 = r8
            org.telegram.tgnet.TLRPC$TL_updateChannelUserTyping r0 = (org.telegram.tgnet.TLRPC.TL_updateChannelUserTyping) r0
            org.telegram.tgnet.TLRPC$Peer r1 = r0.from_id
            long r1 = r1.user_id
            int r3 = (r1 > r14 ? 1 : (r1 == r14 ? 0 : -1))
            if (r3 == 0) goto L_0x1463
            org.telegram.tgnet.TLRPC$Peer r1 = r0.from_id
            long r1 = r1.user_id
            goto L_0x1476
        L_0x1463:
            org.telegram.tgnet.TLRPC$Peer r1 = r0.from_id
            long r1 = r1.channel_id
            int r3 = (r1 > r14 ? 1 : (r1 == r14 ? 0 : -1))
            if (r3 == 0) goto L_0x1471
            org.telegram.tgnet.TLRPC$Peer r1 = r0.from_id
            long r1 = r1.channel_id
            long r1 = -r1
            goto L_0x1476
        L_0x1471:
            org.telegram.tgnet.TLRPC$Peer r1 = r0.from_id
            long r1 = r1.chat_id
            long r1 = -r1
        L_0x1476:
            long r3 = r0.channel_id
            org.telegram.tgnet.TLRPC$SendMessageAction r11 = r0.action
            int r0 = r0.top_msg_id
            goto L_0x14e9
        L_0x147e:
            boolean r0 = r8 instanceof org.telegram.tgnet.TLRPC.TL_updateUserTyping
            if (r0 == 0) goto L_0x14a6
            r0 = r8
            org.telegram.tgnet.TLRPC$TL_updateUserTyping r0 = (org.telegram.tgnet.TLRPC.TL_updateUserTyping) r0
            long r1 = r0.user_id
            org.telegram.tgnet.TLRPC$SendMessageAction r11 = r0.action
            r3 = 0
            r12 = 0
            org.telegram.tgnet.TLRPC$SendMessageAction r14 = r0.action
            boolean r14 = r14 instanceof org.telegram.tgnet.TLRPC.TL_sendMessageEmojiInteraction
            if (r14 == 0) goto L_0x14a4
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda92 r14 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda92
            r14.<init>(r5, r0)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r14)
            r57 = r7
            r59 = r9
            r58 = r10
            r3 = r52
            goto L_0x170e
        L_0x14a4:
            r0 = r12
            goto L_0x14e9
        L_0x14a6:
            r0 = r8
            org.telegram.tgnet.TLRPC$TL_updateChatUserTyping r0 = (org.telegram.tgnet.TLRPC.TL_updateChatUserTyping) r0
            long r3 = r0.chat_id
            org.telegram.tgnet.TLRPC$Peer r1 = r0.from_id
            long r1 = r1.user_id
            r11 = 0
            int r14 = (r1 > r11 ? 1 : (r1 == r11 ? 0 : -1))
            if (r14 == 0) goto L_0x14ba
            org.telegram.tgnet.TLRPC$Peer r1 = r0.from_id
            long r1 = r1.user_id
            goto L_0x14cd
        L_0x14ba:
            org.telegram.tgnet.TLRPC$Peer r1 = r0.from_id
            long r1 = r1.channel_id
            int r14 = (r1 > r11 ? 1 : (r1 == r11 ? 0 : -1))
            if (r14 == 0) goto L_0x14c8
            org.telegram.tgnet.TLRPC$Peer r1 = r0.from_id
            long r1 = r1.channel_id
            long r1 = -r1
            goto L_0x14cd
        L_0x14c8:
            org.telegram.tgnet.TLRPC$Peer r1 = r0.from_id
            long r1 = r1.chat_id
            long r1 = -r1
        L_0x14cd:
            org.telegram.tgnet.TLRPC$SendMessageAction r11 = r0.action
            r12 = 0
            org.telegram.tgnet.TLRPC$SendMessageAction r14 = r0.action
            boolean r14 = r14 instanceof org.telegram.tgnet.TLRPC.TL_sendMessageEmojiInteraction
            if (r14 == 0) goto L_0x14e8
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda86 r14 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda86
            r14.<init>(r5, r0)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r14)
            r57 = r7
            r59 = r9
            r58 = r10
            r3 = r52
            goto L_0x170e
        L_0x14e8:
            r0 = r12
        L_0x14e9:
            long r14 = -r3
            r39 = 0
            int r12 = (r14 > r39 ? 1 : (r14 == r39 ? 0 : -1))
            if (r12 != 0) goto L_0x14f1
            r14 = r1
        L_0x14f1:
            boolean r12 = r11 instanceof org.telegram.tgnet.TLRPC.TL_sendMessageHistoryImportAction
            if (r12 == 0) goto L_0x1519
            if (r34 != 0) goto L_0x14ff
            org.telegram.messenger.support.LongSparseIntArray r12 = new org.telegram.messenger.support.LongSparseIntArray
            r12.<init>()
            r34 = r12
            goto L_0x1501
        L_0x14ff:
            r12 = r34
        L_0x1501:
            r57 = r7
            r7 = r11
            org.telegram.tgnet.TLRPC$TL_sendMessageHistoryImportAction r7 = (org.telegram.tgnet.TLRPC.TL_sendMessageHistoryImportAction) r7
            r58 = r10
            int r10 = r7.progress
            r12.put(r14, r10)
            r60 = r8
            r59 = r9
            r34 = r12
            r2 = r16
            r3 = r52
            goto L_0x168c
        L_0x1519:
            r57 = r7
            r58 = r10
            org.telegram.messenger.UserConfig r7 = r78.getUserConfig()
            long r39 = r7.getClientUserId()
            int r7 = (r1 > r39 ? 1 : (r1 == r39 ? 0 : -1))
            if (r7 == 0) goto L_0x1680
            boolean r7 = r11 instanceof org.telegram.tgnet.TLRPC.TL_speakingInGroupCallAction
            if (r7 == 0) goto L_0x156d
            r39 = 0
            int r7 = (r3 > r39 ? 1 : (r3 == r39 ? 0 : -1))
            if (r7 == 0) goto L_0x1565
            if (r33 != 0) goto L_0x153d
            androidx.collection.LongSparseArray r7 = new androidx.collection.LongSparseArray
            r7.<init>()
            r33 = r7
            goto L_0x153f
        L_0x153d:
            r7 = r33
        L_0x153f:
            java.lang.Object r10 = r7.get(r3)
            java.util.ArrayList r10 = (java.util.ArrayList) r10
            if (r10 != 0) goto L_0x1550
            java.util.ArrayList r12 = new java.util.ArrayList
            r12.<init>()
            r10 = r12
            r7.put(r3, r10)
        L_0x1550:
            java.lang.Long r12 = java.lang.Long.valueOf(r1)
            r10.add(r12)
            r21 = r0
            r39 = r3
            r33 = r7
            r60 = r8
            r59 = r9
            r3 = r52
            goto L_0x165e
        L_0x1565:
            r39 = r3
            r60 = r8
            r59 = r9
            goto L_0x15e0
        L_0x156d:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, j$.util.concurrent.ConcurrentHashMap<java.lang.Integer, java.util.ArrayList<org.telegram.messenger.MessagesController$PrintingUser>>> r7 = r5.printingUsers
            java.lang.Long r10 = java.lang.Long.valueOf(r14)
            java.lang.Object r7 = r7.get(r10)
            j$.util.concurrent.ConcurrentHashMap r7 = (j$.util.concurrent.ConcurrentHashMap) r7
            if (r7 == 0) goto L_0x1586
            java.lang.Integer r10 = java.lang.Integer.valueOf(r0)
            java.lang.Object r10 = r7.get(r10)
            java.util.ArrayList r10 = (java.util.ArrayList) r10
            goto L_0x1587
        L_0x1586:
            r10 = 0
        L_0x1587:
            boolean r12 = r11 instanceof org.telegram.tgnet.TLRPC.TL_sendMessageCancelAction
            if (r12 == 0) goto L_0x15e6
            if (r10 == 0) goto L_0x15da
            r12 = 0
            r39 = r3
            int r3 = r10.size()
        L_0x1594:
            if (r12 >= r3) goto L_0x15b4
            java.lang.Object r4 = r10.get(r12)
            org.telegram.messenger.MessagesController$PrintingUser r4 = (org.telegram.messenger.MessagesController.PrintingUser) r4
            r60 = r8
            r59 = r9
            long r8 = r4.userId
            int r21 = (r8 > r1 ? 1 : (r8 == r1 ? 0 : -1))
            if (r21 != 0) goto L_0x15ad
            r10.remove(r12)
            r8 = 1
            r16 = r8
            goto L_0x15b8
        L_0x15ad:
            int r12 = r12 + 1
            r9 = r59
            r8 = r60
            goto L_0x1594
        L_0x15b4:
            r60 = r8
            r59 = r9
        L_0x15b8:
            boolean r3 = r10.isEmpty()
            if (r3 == 0) goto L_0x15d4
            java.lang.Integer r3 = java.lang.Integer.valueOf(r0)
            r7.remove(r3)
            boolean r3 = r7.isEmpty()
            if (r3 == 0) goto L_0x15d4
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, j$.util.concurrent.ConcurrentHashMap<java.lang.Integer, java.util.ArrayList<org.telegram.messenger.MessagesController$PrintingUser>>> r3 = r5.printingUsers
            java.lang.Long r4 = java.lang.Long.valueOf(r14)
            r3.remove(r4)
        L_0x15d4:
            r21 = r0
            r3 = r52
            goto L_0x165e
        L_0x15da:
            r39 = r3
            r60 = r8
            r59 = r9
        L_0x15e0:
            r21 = r0
            r3 = r52
            goto L_0x165e
        L_0x15e6:
            r39 = r3
            r60 = r8
            r59 = r9
            if (r7 != 0) goto L_0x15fd
            j$.util.concurrent.ConcurrentHashMap r3 = new j$.util.concurrent.ConcurrentHashMap
            r3.<init>()
            r7 = r3
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, j$.util.concurrent.ConcurrentHashMap<java.lang.Integer, java.util.ArrayList<org.telegram.messenger.MessagesController$PrintingUser>>> r3 = r5.printingUsers
            java.lang.Long r4 = java.lang.Long.valueOf(r14)
            r3.put(r4, r7)
        L_0x15fd:
            if (r10 != 0) goto L_0x160c
            java.util.ArrayList r3 = new java.util.ArrayList
            r3.<init>()
            r10 = r3
            java.lang.Integer r3 = java.lang.Integer.valueOf(r0)
            r7.put(r3, r10)
        L_0x160c:
            r3 = 0
            java.util.Iterator r4 = r10.iterator()
        L_0x1611:
            boolean r8 = r4.hasNext()
            if (r8 == 0) goto L_0x1646
            java.lang.Object r8 = r4.next()
            org.telegram.messenger.MessagesController$PrintingUser r8 = (org.telegram.messenger.MessagesController.PrintingUser) r8
            r9 = r3
            r12 = r4
            long r3 = r8.userId
            int r21 = (r3 > r1 ? 1 : (r3 == r1 ? 0 : -1))
            if (r21 != 0) goto L_0x163f
            r3 = 1
            r9 = r3
            r3 = r52
            r8.lastTime = r3
            org.telegram.tgnet.TLRPC$SendMessageAction r12 = r8.action
            java.lang.Class r12 = r12.getClass()
            r21 = r0
            java.lang.Class r0 = r11.getClass()
            if (r12 == r0) goto L_0x163c
            r0 = 1
            r16 = r0
        L_0x163c:
            r8.action = r11
            goto L_0x164b
        L_0x163f:
            r21 = r0
            r3 = r52
            r3 = r9
            r4 = r12
            goto L_0x1611
        L_0x1646:
            r21 = r0
            r9 = r3
            r3 = r52
        L_0x164b:
            if (r9 != 0) goto L_0x165e
            org.telegram.messenger.MessagesController$PrintingUser r0 = new org.telegram.messenger.MessagesController$PrintingUser
            r0.<init>()
            r0.userId = r1
            r0.lastTime = r3
            r0.action = r11
            r10.add(r0)
            r8 = 1
            r16 = r8
        L_0x165e:
            org.telegram.tgnet.ConnectionsManager r0 = r78.getConnectionsManager()
            int r0 = r0.getCurrentTime()
            int r0 = r0 - r83
            int r0 = java.lang.Math.abs(r0)
            r7 = 30
            if (r0 >= r7) goto L_0x167d
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r0 = r5.onlinePrivacy
            java.lang.Long r7 = java.lang.Long.valueOf(r1)
            java.lang.Integer r8 = java.lang.Integer.valueOf(r83)
            r0.put(r7, r8)
        L_0x167d:
            r2 = r16
            goto L_0x168c
        L_0x1680:
            r21 = r0
            r39 = r3
            r60 = r8
            r59 = r9
            r3 = r52
            r2 = r16
        L_0x168c:
            r16 = r2
            r52 = r3
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            r2 = r57
            r10 = r58
            r14 = r59
            goto L_0x1b14
        L_0x16a2:
            r55 = r0
            r54 = r1
            r57 = r2
            r60 = r8
            r59 = r9
            r58 = r10
            r56 = r11
            r51 = r12
            r2 = r39
        L_0x16b4:
            r0 = r60
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC.TL_updateNewMessage
            if (r1 == 0) goto L_0x16c0
            r1 = r0
            org.telegram.tgnet.TLRPC$TL_updateNewMessage r1 = (org.telegram.tgnet.TLRPC.TL_updateNewMessage) r1
            org.telegram.tgnet.TLRPC$Message r1 = r1.message
            goto L_0x1709
        L_0x16c0:
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC.TL_updateNewScheduledMessage
            if (r1 == 0) goto L_0x16ca
            r1 = r0
            org.telegram.tgnet.TLRPC$TL_updateNewScheduledMessage r1 = (org.telegram.tgnet.TLRPC.TL_updateNewScheduledMessage) r1
            org.telegram.tgnet.TLRPC$Message r1 = r1.message
            goto L_0x1709
        L_0x16ca:
            r1 = r0
            org.telegram.tgnet.TLRPC$TL_updateNewChannelMessage r1 = (org.telegram.tgnet.TLRPC.TL_updateNewChannelMessage) r1
            org.telegram.tgnet.TLRPC$Message r1 = r1.message
            boolean r7 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r7 == 0) goto L_0x16ec
            java.lang.StringBuilder r7 = new java.lang.StringBuilder
            r7.<init>()
            r7.append(r0)
            r7.append(r2)
            org.telegram.tgnet.TLRPC$Peer r2 = r1.peer_id
            long r8 = r2.channel_id
            r7.append(r8)
            java.lang.String r2 = r7.toString()
            org.telegram.messenger.FileLog.d(r2)
        L_0x16ec:
            boolean r2 = r1.out
            if (r2 != 0) goto L_0x1709
            org.telegram.tgnet.TLRPC$Peer r2 = r1.from_id
            boolean r2 = r2 instanceof org.telegram.tgnet.TLRPC.TL_peerUser
            if (r2 == 0) goto L_0x1709
            org.telegram.tgnet.TLRPC$Peer r2 = r1.from_id
            long r7 = r2.user_id
            org.telegram.messenger.UserConfig r2 = r78.getUserConfig()
            long r9 = r2.getClientUserId()
            int r2 = (r7 > r9 ? 1 : (r7 == r9 ? 0 : -1))
            if (r2 != 0) goto L_0x1709
            r2 = 1
            r1.out = r2
        L_0x1709:
            boolean r2 = r1 instanceof org.telegram.tgnet.TLRPC.TL_messageEmpty
            if (r2 == 0) goto L_0x1722
        L_0x170e:
            r52 = r3
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            r2 = r57
            r10 = r58
            r14 = r59
            goto L_0x1b14
        L_0x1722:
            r2 = 0
            r7 = 0
            r9 = 0
            org.telegram.tgnet.TLRPC$Peer r11 = r1.peer_id
            long r11 = r11.channel_id
            r14 = 0
            int r39 = (r11 > r14 ? 1 : (r11 == r14 ? 0 : -1))
            if (r39 == 0) goto L_0x1736
            org.telegram.tgnet.TLRPC$Peer r11 = r1.peer_id
            long r7 = r11.channel_id
            goto L_0x174f
        L_0x1736:
            org.telegram.tgnet.TLRPC$Peer r11 = r1.peer_id
            long r11 = r11.chat_id
            int r39 = (r11 > r14 ? 1 : (r11 == r14 ? 0 : -1))
            if (r39 == 0) goto L_0x1743
            org.telegram.tgnet.TLRPC$Peer r11 = r1.peer_id
            long r7 = r11.chat_id
            goto L_0x174f
        L_0x1743:
            org.telegram.tgnet.TLRPC$Peer r11 = r1.peer_id
            long r11 = r11.user_id
            int r39 = (r11 > r14 ? 1 : (r11 == r14 ? 0 : -1))
            if (r39 == 0) goto L_0x174f
            org.telegram.tgnet.TLRPC$Peer r11 = r1.peer_id
            long r9 = r11.user_id
        L_0x174f:
            int r11 = (r7 > r14 ? 1 : (r7 == r14 ? 0 : -1))
            if (r11 == 0) goto L_0x1781
            java.lang.Long r11 = java.lang.Long.valueOf(r7)
            r14 = r59
            java.lang.Object r11 = r14.get(r11)
            r2 = r11
            org.telegram.tgnet.TLRPC$Chat r2 = (org.telegram.tgnet.TLRPC.Chat) r2
            if (r2 == 0) goto L_0x1766
            boolean r11 = r2.min
            if (r11 == 0) goto L_0x176e
        L_0x1766:
            java.lang.Long r11 = java.lang.Long.valueOf(r7)
            org.telegram.tgnet.TLRPC$Chat r2 = r5.getChat(r11)
        L_0x176e:
            if (r2 == 0) goto L_0x1774
            boolean r11 = r2.min
            if (r11 == 0) goto L_0x1783
        L_0x1774:
            org.telegram.messenger.MessagesStorage r11 = r78.getMessagesStorage()
            org.telegram.tgnet.TLRPC$Chat r2 = r11.getChatSync(r7)
            r11 = 1
            r5.putChat(r2, r11)
            goto L_0x1783
        L_0x1781:
            r14 = r59
        L_0x1783:
            if (r82 != 0) goto L_0x18af
            r11 = 0
            int r15 = (r7 > r11 ? 1 : (r7 == r11 ? 0 : -1))
            if (r15 == 0) goto L_0x17a7
            if (r2 != 0) goto L_0x17a7
            boolean r11 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r11 == 0) goto L_0x17a5
            java.lang.StringBuilder r11 = new java.lang.StringBuilder
            r11.<init>()
            java.lang.String r12 = "not found chat "
            r11.append(r12)
            r11.append(r7)
            java.lang.String r11 = r11.toString()
            org.telegram.messenger.FileLog.d(r11)
        L_0x17a5:
            r11 = 0
            return r11
        L_0x17a7:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$MessageEntity> r11 = r1.entities
            int r11 = r11.size()
            int r11 = r11 + 3
            r12 = 0
        L_0x17b0:
            if (r12 >= r11) goto L_0x18aa
            r15 = 0
            if (r12 == 0) goto L_0x1804
            r52 = r3
            r3 = 1
            if (r12 != r3) goto L_0x17ce
            org.telegram.tgnet.TLRPC$Peer r3 = r1.from_id
            boolean r3 = r3 instanceof org.telegram.tgnet.TLRPC.TL_peerUser
            if (r3 == 0) goto L_0x17c5
            org.telegram.tgnet.TLRPC$Peer r3 = r1.from_id
            long r3 = r3.user_id
            goto L_0x17c7
        L_0x17c5:
            r3 = 0
        L_0x17c7:
            r9 = r3
            boolean r3 = r1.post
            if (r3 == 0) goto L_0x1806
            r15 = 1
            goto L_0x1806
        L_0x17ce:
            r3 = 2
            if (r12 != r3) goto L_0x17e8
            org.telegram.tgnet.TLRPC$MessageFwdHeader r4 = r1.fwd_from
            if (r4 == 0) goto L_0x17e4
            org.telegram.tgnet.TLRPC$MessageFwdHeader r4 = r1.fwd_from
            org.telegram.tgnet.TLRPC$Peer r4 = r4.from_id
            boolean r4 = r4 instanceof org.telegram.tgnet.TLRPC.TL_peerUser
            if (r4 == 0) goto L_0x17e4
            org.telegram.tgnet.TLRPC$MessageFwdHeader r4 = r1.fwd_from
            org.telegram.tgnet.TLRPC$Peer r4 = r4.from_id
            long r3 = r4.user_id
            goto L_0x17e6
        L_0x17e4:
            r3 = 0
        L_0x17e6:
            r9 = r3
            goto L_0x1806
        L_0x17e8:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$MessageEntity> r3 = r1.entities
            int r4 = r12 + -3
            java.lang.Object r3 = r3.get(r4)
            org.telegram.tgnet.TLRPC$MessageEntity r3 = (org.telegram.tgnet.TLRPC.MessageEntity) r3
            boolean r4 = r3 instanceof org.telegram.tgnet.TLRPC.TL_messageEntityMentionName
            if (r4 == 0) goto L_0x17fe
            r4 = r3
            org.telegram.tgnet.TLRPC$TL_messageEntityMentionName r4 = (org.telegram.tgnet.TLRPC.TL_messageEntityMentionName) r4
            r39 = r3
            long r3 = r4.user_id
            goto L_0x1802
        L_0x17fe:
            r39 = r3
            r3 = 0
        L_0x1802:
            r9 = r3
            goto L_0x1806
        L_0x1804:
            r52 = r3
        L_0x1806:
            r3 = 0
            int r39 = (r9 > r3 ? 1 : (r9 == r3 ? 0 : -1))
            if (r39 <= 0) goto L_0x18a0
            java.lang.Long r3 = java.lang.Long.valueOf(r9)
            java.lang.Object r3 = r6.get(r3)
            org.telegram.tgnet.TLRPC$User r3 = (org.telegram.tgnet.TLRPC.User) r3
            if (r3 == 0) goto L_0x181e
            if (r15 != 0) goto L_0x1826
            boolean r4 = r3.min
            if (r4 == 0) goto L_0x1826
        L_0x181e:
            java.lang.Long r4 = java.lang.Long.valueOf(r9)
            org.telegram.tgnet.TLRPC$User r3 = r5.getUser(r4)
        L_0x1826:
            if (r3 == 0) goto L_0x182e
            if (r15 != 0) goto L_0x1843
            boolean r4 = r3.min
            if (r4 == 0) goto L_0x1843
        L_0x182e:
            org.telegram.messenger.MessagesStorage r4 = r78.getMessagesStorage()
            org.telegram.tgnet.TLRPC$User r3 = r4.getUserSync(r9)
            if (r3 == 0) goto L_0x183f
            if (r15 != 0) goto L_0x183f
            boolean r4 = r3.min
            if (r4 == 0) goto L_0x183f
            r3 = 0
        L_0x183f:
            r4 = 1
            r5.putUser(r3, r4)
        L_0x1843:
            if (r3 != 0) goto L_0x1864
            boolean r4 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r4 == 0) goto L_0x1860
            java.lang.StringBuilder r4 = new java.lang.StringBuilder
            r4.<init>()
            r59 = r7
            java.lang.String r7 = "not found user "
            r4.append(r7)
            r4.append(r9)
            java.lang.String r4 = r4.toString()
            org.telegram.messenger.FileLog.d(r4)
            goto L_0x1862
        L_0x1860:
            r59 = r7
        L_0x1862:
            r4 = 0
            return r4
        L_0x1864:
            r59 = r7
            boolean r4 = r1.out
            if (r4 != 0) goto L_0x18a2
            r4 = 1
            if (r12 != r4) goto L_0x18a2
            org.telegram.tgnet.TLRPC$UserStatus r4 = r3.status
            if (r4 == 0) goto L_0x18a2
            org.telegram.tgnet.TLRPC$UserStatus r4 = r3.status
            int r4 = r4.expires
            if (r4 > 0) goto L_0x18a2
            org.telegram.tgnet.ConnectionsManager r4 = r78.getConnectionsManager()
            int r4 = r4.getCurrentTime()
            int r7 = r1.date
            int r4 = r4 - r7
            int r4 = java.lang.Math.abs(r4)
            r7 = 30
            if (r4 >= r7) goto L_0x18a2
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r4 = r5.onlinePrivacy
            java.lang.Long r8 = java.lang.Long.valueOf(r9)
            int r7 = r1.date
            java.lang.Integer r7 = java.lang.Integer.valueOf(r7)
            r4.put(r8, r7)
            int r4 = UPDATE_MASK_STATUS
            r4 = r29 | r4
            r29 = r4
            goto L_0x18a2
        L_0x18a0:
            r59 = r7
        L_0x18a2:
            int r12 = r12 + 1
            r3 = r52
            r7 = r59
            goto L_0x17b0
        L_0x18aa:
            r52 = r3
            r59 = r7
            goto L_0x18b3
        L_0x18af:
            r52 = r3
            r59 = r7
        L_0x18b3:
            org.telegram.tgnet.TLRPC$MessageAction r3 = r1.action
            boolean r3 = r3 instanceof org.telegram.tgnet.TLRPC.TL_messageActionChatDeleteUser
            if (r3 == 0) goto L_0x1901
            org.telegram.tgnet.TLRPC$MessageAction r3 = r1.action
            long r3 = r3.user_id
            java.lang.Long r3 = java.lang.Long.valueOf(r3)
            java.lang.Object r3 = r6.get(r3)
            org.telegram.tgnet.TLRPC$User r3 = (org.telegram.tgnet.TLRPC.User) r3
            if (r3 == 0) goto L_0x18db
            boolean r4 = r3.bot
            if (r4 == 0) goto L_0x18db
            org.telegram.tgnet.TLRPC$TL_replyKeyboardHide r4 = new org.telegram.tgnet.TLRPC$TL_replyKeyboardHide
            r4.<init>()
            r1.reply_markup = r4
            int r4 = r1.flags
            r4 = r4 | 64
            r1.flags = r4
            goto L_0x1901
        L_0x18db:
            org.telegram.tgnet.TLRPC$Peer r4 = r1.from_id
            boolean r4 = r4 instanceof org.telegram.tgnet.TLRPC.TL_peerUser
            if (r4 == 0) goto L_0x1901
            org.telegram.tgnet.TLRPC$Peer r4 = r1.from_id
            long r7 = r4.user_id
            int r4 = (r7 > r46 ? 1 : (r7 == r46 ? 0 : -1))
            if (r4 != 0) goto L_0x1901
            org.telegram.tgnet.TLRPC$MessageAction r4 = r1.action
            long r7 = r4.user_id
            int r4 = (r7 > r46 ? 1 : (r7 == r46 ? 0 : -1))
            if (r4 != 0) goto L_0x1901
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            r2 = r57
            r10 = r58
            goto L_0x1b14
        L_0x1901:
            org.telegram.messenger.ImageLoader.saveMessageThumbs(r1)
            org.telegram.messenger.MessageObject.getDialogId(r1)
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC.TL_updateNewChannelMessage
            if (r3 == 0) goto L_0x1968
            org.telegram.tgnet.TLRPC$TL_messageReplyHeader r3 = r1.reply_to
            if (r3 == 0) goto L_0x1968
            org.telegram.tgnet.TLRPC$MessageAction r3 = r1.action
            boolean r3 = r3 instanceof org.telegram.tgnet.TLRPC.TL_messageActionPinMessage
            if (r3 != 0) goto L_0x1968
            if (r17 != 0) goto L_0x191e
            androidx.collection.LongSparseArray r3 = new androidx.collection.LongSparseArray
            r3.<init>()
            r12 = r3
            goto L_0x1920
        L_0x191e:
            r12 = r17
        L_0x1920:
            long r3 = r1.dialog_id
            java.lang.Object r3 = r12.get(r3)
            android.util.SparseArray r3 = (android.util.SparseArray) r3
            if (r3 != 0) goto L_0x1935
            android.util.SparseArray r4 = new android.util.SparseArray
            r4.<init>()
            r3 = r4
            long r7 = r1.dialog_id
            r12.put(r7, r3)
        L_0x1935:
            org.telegram.tgnet.TLRPC$TL_messageReplyHeader r4 = r1.reply_to
            int r4 = r4.reply_to_top_id
            if (r4 == 0) goto L_0x1940
            org.telegram.tgnet.TLRPC$TL_messageReplyHeader r4 = r1.reply_to
            int r4 = r4.reply_to_top_id
            goto L_0x1944
        L_0x1940:
            org.telegram.tgnet.TLRPC$TL_messageReplyHeader r4 = r1.reply_to
            int r4 = r4.reply_to_msg_id
        L_0x1944:
            java.lang.Object r7 = r3.get(r4)
            org.telegram.tgnet.TLRPC$MessageReplies r7 = (org.telegram.tgnet.TLRPC.MessageReplies) r7
            if (r7 != 0) goto L_0x1955
            org.telegram.tgnet.TLRPC$TL_messageReplies r8 = new org.telegram.tgnet.TLRPC$TL_messageReplies
            r8.<init>()
            r7 = r8
            r3.put(r4, r7)
        L_0x1955:
            org.telegram.tgnet.TLRPC$Peer r8 = r1.from_id
            if (r8 == 0) goto L_0x1961
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Peer> r8 = r7.recent_repliers
            org.telegram.tgnet.TLRPC$Peer r11 = r1.from_id
            r15 = 0
            r8.add(r15, r11)
        L_0x1961:
            int r8 = r7.replies
            r11 = 1
            int r8 = r8 + r11
            r7.replies = r8
            goto L_0x196a
        L_0x1968:
            r12 = r17
        L_0x196a:
            java.util.ArrayList<java.lang.Long> r3 = r5.createdDialogIds
            long r7 = r1.dialog_id
            java.lang.Long r4 = java.lang.Long.valueOf(r7)
            boolean r3 = r3.contains(r4)
            if (r3 == 0) goto L_0x1997
            long r3 = r1.grouped_id
            r7 = 0
            int r11 = (r3 > r7 ? 1 : (r3 == r7 ? 0 : -1))
            if (r11 != 0) goto L_0x1997
            org.telegram.messenger.ImageLoader$MessageThumb r3 = org.telegram.messenger.ImageLoader.generateMessageThumb(r1)
            if (r3 == 0) goto L_0x1997
            if (r49 != 0) goto L_0x1990
            java.util.ArrayList r4 = new java.util.ArrayList
            r4.<init>()
            r49 = r4
            goto L_0x1992
        L_0x1990:
            r4 = r49
        L_0x1992:
            r4.add(r3)
            r49 = r4
        L_0x1997:
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC.TL_updateNewScheduledMessage
            if (r3 == 0) goto L_0x19ff
            if (r32 != 0) goto L_0x19a5
            java.util.ArrayList r3 = new java.util.ArrayList
            r3.<init>()
            r32 = r3
            goto L_0x19a7
        L_0x19a5:
            r3 = r32
        L_0x19a7:
            r3.add(r1)
            java.util.ArrayList<java.lang.Long> r4 = r5.createdScheduledDialogIds
            long r7 = r1.dialog_id
            java.lang.Long r7 = java.lang.Long.valueOf(r7)
            boolean r4 = r4.contains(r7)
            org.telegram.messenger.MessageObject r7 = new org.telegram.messenger.MessageObject
            int r8 = r5.currentAccount
            r39 = r7
            r40 = r8
            r41 = r1
            r42 = r6
            r43 = r14
            r44 = r4
            r45 = r4
            r39.<init>((int) r40, (org.telegram.tgnet.TLRPC.Message) r41, (java.util.AbstractMap<java.lang.Long, org.telegram.tgnet.TLRPC.User>) r42, (java.util.AbstractMap<java.lang.Long, org.telegram.tgnet.TLRPC.Chat>) r43, (boolean) r44, (boolean) r45)
            r8 = 1
            r7.scheduled = r8
            if (r38 != 0) goto L_0x19d8
            androidx.collection.LongSparseArray r8 = new androidx.collection.LongSparseArray
            r8.<init>()
            r38 = r8
            goto L_0x19da
        L_0x19d8:
            r8 = r38
        L_0x19da:
            r11 = r3
            r15 = r4
            long r3 = r1.dialog_id
            java.lang.Object r3 = r8.get(r3)
            java.util.ArrayList r3 = (java.util.ArrayList) r3
            if (r3 != 0) goto L_0x19f4
            java.util.ArrayList r4 = new java.util.ArrayList
            r4.<init>()
            r3 = r4
            r61 = r9
            long r9 = r1.dialog_id
            r8.put(r9, r3)
            goto L_0x19f6
        L_0x19f4:
            r61 = r9
        L_0x19f6:
            r3.add(r7)
            r38 = r8
            r32 = r11
            goto L_0x1b04
        L_0x19ff:
            r61 = r9
            if (r31 != 0) goto L_0x1a0b
            java.util.ArrayList r3 = new java.util.ArrayList
            r3.<init>()
            r31 = r3
            goto L_0x1a0d
        L_0x1a0b:
            r3 = r31
        L_0x1a0d:
            r3.add(r1)
            boolean r4 = r1.out
            if (r4 == 0) goto L_0x1a17
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r4 = r5.dialogs_read_outbox_max
            goto L_0x1a19
        L_0x1a17:
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r4 = r5.dialogs_read_inbox_max
        L_0x1a19:
            long r7 = r1.dialog_id
            java.lang.Long r7 = java.lang.Long.valueOf(r7)
            java.lang.Object r7 = r4.get(r7)
            java.lang.Integer r7 = (java.lang.Integer) r7
            if (r7 != 0) goto L_0x1a40
            org.telegram.messenger.MessagesStorage r8 = r78.getMessagesStorage()
            boolean r9 = r1.out
            long r10 = r1.dialog_id
            int r8 = r8.getDialogReadMax(r9, r10)
            java.lang.Integer r7 = java.lang.Integer.valueOf(r8)
            long r8 = r1.dialog_id
            java.lang.Long r8 = java.lang.Long.valueOf(r8)
            r4.put(r8, r7)
        L_0x1a40:
            int r8 = r7.intValue()
            int r9 = r1.id
            if (r8 >= r9) goto L_0x1a5e
            if (r2 == 0) goto L_0x1a50
            boolean r8 = org.telegram.messenger.ChatObject.isNotInChat(r2)
            if (r8 != 0) goto L_0x1a5e
        L_0x1a50:
            org.telegram.tgnet.TLRPC$MessageAction r8 = r1.action
            boolean r8 = r8 instanceof org.telegram.tgnet.TLRPC.TL_messageActionChatMigrateTo
            if (r8 != 0) goto L_0x1a5e
            org.telegram.tgnet.TLRPC$MessageAction r8 = r1.action
            boolean r8 = r8 instanceof org.telegram.tgnet.TLRPC.TL_messageActionChannelCreate
            if (r8 != 0) goto L_0x1a5e
            r8 = 1
            goto L_0x1a5f
        L_0x1a5e:
            r8 = 0
        L_0x1a5f:
            r1.unread = r8
            long r8 = r1.dialog_id
            int r10 = (r8 > r46 ? 1 : (r8 == r46 ? 0 : -1))
            if (r10 != 0) goto L_0x1a75
            boolean r8 = r1.from_scheduled
            if (r8 != 0) goto L_0x1a6f
            r8 = 0
            r1.unread = r8
            goto L_0x1a70
        L_0x1a6f:
            r8 = 0
        L_0x1a70:
            r1.media_unread = r8
            r8 = 1
            r1.out = r8
        L_0x1a75:
            java.util.ArrayList<java.lang.Long> r8 = r5.createdDialogIds
            long r9 = r1.dialog_id
            java.lang.Long r9 = java.lang.Long.valueOf(r9)
            boolean r8 = r8.contains(r9)
            org.telegram.messenger.MessageObject r9 = new org.telegram.messenger.MessageObject
            int r10 = r5.currentAccount
            r39 = r9
            r40 = r10
            r41 = r1
            r42 = r6
            r43 = r14
            r44 = r8
            r45 = r8
            r39.<init>((int) r40, (org.telegram.tgnet.TLRPC.Message) r41, (java.util.AbstractMap<java.lang.Long, org.telegram.tgnet.TLRPC.User>) r42, (java.util.AbstractMap<java.lang.Long, org.telegram.tgnet.TLRPC.Chat>) r43, (boolean) r44, (boolean) r45)
            int r10 = r9.type
            r11 = 11
            if (r10 != r11) goto L_0x1aa1
            int r10 = UPDATE_MASK_CHAT_AVATAR
            r29 = r29 | r10
            goto L_0x1aab
        L_0x1aa1:
            int r10 = r9.type
            r11 = 10
            if (r10 != r11) goto L_0x1aab
            int r10 = UPDATE_MASK_CHAT_NAME
            r29 = r29 | r10
        L_0x1aab:
            if (r13 != 0) goto L_0x1ab3
            androidx.collection.LongSparseArray r10 = new androidx.collection.LongSparseArray
            r10.<init>()
            r13 = r10
        L_0x1ab3:
            long r10 = r1.dialog_id
            java.lang.Object r10 = r13.get(r10)
            java.util.ArrayList r10 = (java.util.ArrayList) r10
            if (r10 != 0) goto L_0x1acb
            java.util.ArrayList r11 = new java.util.ArrayList
            r11.<init>()
            r10 = r11
            r11 = r3
            r15 = r4
            long r3 = r1.dialog_id
            r13.put(r3, r10)
            goto L_0x1acd
        L_0x1acb:
            r11 = r3
            r15 = r4
        L_0x1acd:
            r10.add(r9)
            boolean r3 = r9.isOut()
            if (r3 == 0) goto L_0x1adc
            org.telegram.tgnet.TLRPC$Message r3 = r9.messageOwner
            boolean r3 = r3.from_scheduled
            if (r3 == 0) goto L_0x1b02
        L_0x1adc:
            boolean r3 = r9.isUnread()
            if (r3 == 0) goto L_0x1b02
            if (r2 == 0) goto L_0x1aee
            boolean r3 = org.telegram.messenger.ChatObject.isNotInChat(r2)
            if (r3 != 0) goto L_0x1b02
            boolean r3 = r2.min
            if (r3 != 0) goto L_0x1b02
        L_0x1aee:
            if (r30 != 0) goto L_0x1af8
            java.util.ArrayList r3 = new java.util.ArrayList
            r3.<init>()
            r30 = r3
            goto L_0x1afa
        L_0x1af8:
            r3 = r30
        L_0x1afa:
            r3.add(r9)
            r30 = r3
            r31 = r11
            goto L_0x1b04
        L_0x1b02:
            r31 = r11
        L_0x1b04:
            r17 = r12
            r15 = r50
            r12 = r51
            r1 = r54
            r0 = r55
            r11 = r56
            r2 = r57
            r10 = r58
        L_0x1b14:
            int r7 = r20 + 1
            r9 = r14
            r8 = r19
            r14 = r26
            r3 = r52
            goto L_0x0123
        L_0x1b1f:
            r55 = r0
            r54 = r1
            r57 = r2
            r52 = r3
            r20 = r7
            r19 = r8
            r58 = r10
            r56 = r11
            r51 = r12
            r26 = r14
            r50 = r15
            r14 = r9
            if (r13 == 0) goto L_0x1b58
            r0 = 0
            int r1 = r13.size()
            r2 = r16
        L_0x1b3f:
            if (r0 >= r1) goto L_0x1b55
            long r3 = r13.keyAt(r0)
            java.lang.Object r7 = r13.valueAt(r0)
            java.util.ArrayList r7 = (java.util.ArrayList) r7
            boolean r8 = r5.updatePrintingUsersWithNewMessages(r3, r7)
            if (r8 == 0) goto L_0x1b52
            r2 = 1
        L_0x1b52:
            int r0 = r0 + 1
            goto L_0x1b3f
        L_0x1b55:
            r39 = r2
            goto L_0x1b5a
        L_0x1b58:
            r39 = r16
        L_0x1b5a:
            if (r39 == 0) goto L_0x1b5f
            r78.updatePrintingStrings()
        L_0x1b5f:
            r0 = r52
            r4 = r57
            r2 = r29
            r9 = r17
            r3 = r51
            r12 = r39
            if (r56 == 0) goto L_0x1b77
            org.telegram.messenger.ContactsController r7 = r78.getContactsController()
            r11 = r56
            r7.processContactsUpdates(r11, r6)
            goto L_0x1b79
        L_0x1b77:
            r11 = r56
        L_0x1b79:
            if (r30 == 0) goto L_0x1b8d
            r7 = r30
            org.telegram.messenger.MessagesStorage r8 = r78.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r8 = r8.getStorageQueue()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda13 r10 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda13
            r10.<init>(r5, r7)
            r8.postRunnable(r10)
        L_0x1b8d:
            if (r32 == 0) goto L_0x1bae
            org.telegram.messenger.MessagesStorage r15 = r78.getMessagesStorage()
            r17 = 1
            r7 = 1
            r19 = 0
            org.telegram.messenger.DownloadController r8 = r78.getDownloadController()
            int r20 = r8.getAutodownloadMask()
            r21 = 1
            r10 = r18
            r8 = r50
            r16 = r32
            r18 = r7
            r15.putMessages((java.util.ArrayList<org.telegram.tgnet.TLRPC.Message>) r16, (boolean) r17, (boolean) r18, (boolean) r19, (int) r20, (boolean) r21)
            goto L_0x1bb2
        L_0x1bae:
            r10 = r18
            r8 = r50
        L_0x1bb2:
            if (r31 == 0) goto L_0x1be0
            org.telegram.messenger.StatsController r7 = r78.getStatsController()
            int r15 = org.telegram.messenger.ApplicationLoader.getCurrentNetworkType()
            r52 = r0
            int r0 = r31.size()
            r1 = 1
            r7.incrementReceivedItemsCount(r15, r1, r0)
            org.telegram.messenger.MessagesStorage r15 = r78.getMessagesStorage()
            r17 = 1
            r18 = 1
            r19 = 0
            org.telegram.messenger.DownloadController r0 = r78.getDownloadController()
            int r20 = r0.getAutodownloadMask()
            r21 = 0
            r16 = r31
            r15.putMessages((java.util.ArrayList<org.telegram.tgnet.TLRPC.Message>) r16, (boolean) r17, (boolean) r18, (boolean) r19, (int) r20, (boolean) r21)
            goto L_0x1be2
        L_0x1be0:
            r52 = r0
        L_0x1be2:
            if (r22 == 0) goto L_0x1CLASSNAME
            r0 = 0
            int r1 = r22.size()
        L_0x1be9:
            if (r0 >= r1) goto L_0x1CLASSNAME
            org.telegram.tgnet.TLRPC$TL_messages_messages r7 = new org.telegram.tgnet.TLRPC$TL_messages_messages
            r7.<init>()
            r15 = r22
            java.lang.Object r16 = r15.valueAt(r0)
            r17 = r1
            r1 = r16
            java.util.ArrayList r1 = (java.util.ArrayList) r1
            r16 = 0
            r51 = r3
            int r3 = r1.size()
            r57 = r4
            r4 = r16
        L_0x1CLASSNAME:
            if (r4 >= r3) goto L_0x1CLASSNAME
            r16 = r3
            java.util.ArrayList r3 = r7.messages
            java.lang.Object r18 = r1.get(r4)
            r19 = r1
            r1 = r18
            org.telegram.messenger.MessageObject r1 = (org.telegram.messenger.MessageObject) r1
            org.telegram.tgnet.TLRPC$Message r1 = r1.messageOwner
            r3.add(r1)
            int r4 = r4 + 1
            r3 = r16
            r1 = r19
            goto L_0x1CLASSNAME
        L_0x1CLASSNAME:
            r19 = r1
            r16 = r3
            org.telegram.messenger.MessagesStorage r59 = r78.getMessagesStorage()
            long r61 = r15.keyAt(r0)
            r63 = -2
            r64 = 0
            r65 = 0
            r66 = 0
            r60 = r7
            r59.putMessages((org.telegram.tgnet.TLRPC.messages_Messages) r60, (long) r61, (int) r63, (int) r64, (boolean) r65, (boolean) r66)
            int r0 = r0 + 1
            r22 = r15
            r1 = r17
            r3 = r51
            r4 = r57
            goto L_0x1be9
        L_0x1CLASSNAME:
            r17 = r1
            r51 = r3
            r57 = r4
            r15 = r22
            r0 = r15
            org.telegram.messenger.MessagesStorage r1 = r78.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r1 = r1.getStorageQueue()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda357 r3 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda357
            r3.<init>(r5, r0)
            r1.postRunnable(r3)
            goto L_0x1CLASSNAME
        L_0x1CLASSNAME:
            r51 = r3
            r57 = r4
            r15 = r22
        L_0x1CLASSNAME:
            if (r23 != 0) goto L_0x1CLASSNAME
            if (r10 != 0) goto L_0x1CLASSNAME
            if (r9 == 0) goto L_0x1c6f
            goto L_0x1CLASSNAME
        L_0x1c6f:
            r1 = r23
            r4 = 1
            goto L_0x1c7d
        L_0x1CLASSNAME:
            org.telegram.messenger.MessagesStorage r0 = r78.getMessagesStorage()
            r1 = r23
            r4 = 1
            r0.putChannelViews(r1, r10, r9, r4)
        L_0x1c7d:
            if (r25 == 0) goto L_0x1ca8
            r0 = 0
            int r3 = r25.size()
        L_0x1CLASSNAME:
            if (r0 >= r3) goto L_0x1ca5
            org.telegram.messenger.MessagesStorage r16 = r78.getMessagesStorage()
            r7 = r25
            java.lang.Object r17 = r7.get(r0)
            r4 = r17
            org.telegram.tgnet.TLRPC$TL_updateFolderPeers r4 = (org.telegram.tgnet.TLRPC.TL_updateFolderPeers) r4
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_folderPeer> r4 = r4.folder_peers
            r18 = 0
            r19 = 0
            r21 = 0
            r17 = r4
            r16.setDialogsFolderId(r17, r18, r19, r21)
            int r0 = r0 + 1
            r4 = 1
            goto L_0x1CLASSNAME
        L_0x1ca5:
            r7 = r25
            goto L_0x1caa
        L_0x1ca8:
            r7 = r25
        L_0x1caa:
            r41 = r1
            r42 = r7
            r40 = r11
            r11 = r15
            r22 = r15
            r15 = r41
            r16 = r10
            r17 = r9
            r7 = r24
            r1 = r8
            r8 = r13
            r44 = r10
            r43 = r22
            r0 = r58
            r10 = r38
            r4 = r14
            r3 = r24
            r67 = r26
            r14 = r36
            r45 = r13
            r13 = r40
            r68 = r3
            r76 = r52
            r52 = r51
            r50 = r76
            r3 = r37
            r18 = r49
            r53 = r4
            r56 = r9
            r9 = r42
            r58 = r57
            r19 = 1
            r4 = r33
            r35 = r6
            r6 = r34
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda304 r19 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda304
            r57 = r0
            r0 = r19
            r59 = r48
            r48 = r1
            r1 = r78
            r5 = r83
            r0.<init>(r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r19)
            r21 = r54
            r22 = r55
            r24 = r58
            r23 = r52
            r25 = r57
            r26 = r48
            r27 = r59
            org.telegram.messenger.MessagesStorage r0 = r78.getMessagesStorage()
            org.telegram.messenger.DispatchQueue r0 = r0.getStorageQueue()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda39 r1 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda39
            r19 = r1
            r20 = r78
            r19.<init>(r20, r21, r22, r23, r24, r25, r26, r27)
            r0.postRunnable(r1)
            r0 = r68
            if (r0 == 0) goto L_0x1d2d
            org.telegram.messenger.MessagesStorage r1 = r78.getMessagesStorage()
            r1.putWebPages(r0)
        L_0x1d2d:
            r1 = r54
            if (r1 != 0) goto L_0x1d56
            r5 = r55
            if (r5 != 0) goto L_0x1d4d
            r68 = r0
            r0 = r52
            if (r0 != 0) goto L_0x1d48
            r19 = r2
            r2 = r58
            if (r2 == 0) goto L_0x1d42
            goto L_0x1d60
        L_0x1d42:
            r20 = r3
            r52 = r4
            r4 = 1
            goto L_0x1d80
        L_0x1d48:
            r19 = r2
            r2 = r58
            goto L_0x1d60
        L_0x1d4d:
            r68 = r0
            r19 = r2
            r0 = r52
            r2 = r58
            goto L_0x1d60
        L_0x1d56:
            r68 = r0
            r19 = r2
            r0 = r52
            r5 = r55
            r2 = r58
        L_0x1d60:
            if (r1 != 0) goto L_0x1d6d
            if (r5 != 0) goto L_0x1d6d
            if (r2 == 0) goto L_0x1d67
            goto L_0x1d6d
        L_0x1d67:
            r20 = r3
            r52 = r4
            r4 = 1
            goto L_0x1d79
        L_0x1d6d:
            r20 = r3
            org.telegram.messenger.MessagesStorage r3 = r78.getMessagesStorage()
            r52 = r4
            r4 = 1
            r3.updateDialogsWithReadMessages(r1, r5, r2, r4)
        L_0x1d79:
            org.telegram.messenger.MessagesStorage r3 = r78.getMessagesStorage()
            r3.markMessagesAsRead(r1, r5, r0, r4)
        L_0x1d80:
            if (r2 == 0) goto L_0x1dc5
            org.telegram.tgnet.ConnectionsManager r3 = r78.getConnectionsManager()
            int r3 = r3.getCurrentTime()
            r54 = 0
            int r4 = r2.size()
            r55 = r0
            r0 = r54
        L_0x1d94:
            if (r0 >= r4) goto L_0x1dbc
            r58 = r4
            r54 = r5
            long r4 = r2.keyAt(r0)
            java.lang.Object r60 = r2.valueAt(r0)
            r61 = r1
            r1 = r60
            java.util.ArrayList r1 = (java.util.ArrayList) r1
            r60 = r2
            org.telegram.messenger.MessagesStorage r2 = r78.getMessagesStorage()
            r2.markMessagesContentAsRead(r4, r1, r3)
            int r0 = r0 + 1
            r5 = r54
            r4 = r58
            r2 = r60
            r1 = r61
            goto L_0x1d94
        L_0x1dbc:
            r61 = r1
            r60 = r2
            r58 = r4
            r54 = r5
            goto L_0x1dcd
        L_0x1dc5:
            r55 = r0
            r61 = r1
            r60 = r2
            r54 = r5
        L_0x1dcd:
            r0 = r57
            if (r0 == 0) goto L_0x1e0c
            r1 = 0
            int r2 = r0.size()
        L_0x1dd6:
            if (r1 >= r2) goto L_0x1e03
            long r3 = r0.keyAt(r1)
            java.lang.Object r5 = r0.valueAt(r1)
            java.util.ArrayList r5 = (java.util.ArrayList) r5
            org.telegram.messenger.MessagesStorage r57 = r78.getMessagesStorage()
            r58 = r0
            org.telegram.messenger.DispatchQueue r0 = r57.getStorageQueue()
            r57 = r2
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda344 r2 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda344
            r62 = r6
            r6 = r78
            r2.<init>(r6, r3, r5)
            r0.postRunnable(r2)
            int r1 = r1 + 1
            r2 = r57
            r0 = r58
            r6 = r62
            goto L_0x1dd6
        L_0x1e03:
            r58 = r0
            r57 = r2
            r62 = r6
            r6 = r78
            goto L_0x1e12
        L_0x1e0c:
            r58 = r0
            r62 = r6
            r6 = r78
        L_0x1e12:
            r0 = r48
            if (r0 == 0) goto L_0x1e3b
            r1 = 0
            int r2 = r0.size()
        L_0x1e1b:
            if (r1 >= r2) goto L_0x1e3b
            long r3 = r0.keyAt(r1)
            java.lang.Object r5 = r0.valueAt(r1)
            java.util.ArrayList r5 = (java.util.ArrayList) r5
            org.telegram.messenger.MessagesStorage r69 = r78.getMessagesStorage()
            r73 = 1
            r74 = 0
            r75 = 1
            r70 = r3
            r72 = r5
            r69.markMessagesAsDeleted(r70, r72, r73, r74, r75)
            int r1 = r1 + 1
            goto L_0x1e1b
        L_0x1e3b:
            r1 = r59
            if (r1 == 0) goto L_0x1e74
            r2 = 0
            int r3 = r1.size()
        L_0x1e44:
            if (r2 >= r3) goto L_0x1e6d
            long r4 = r1.keyAt(r2)
            r48 = r0
            int r0 = r1.valueAt(r2)
            org.telegram.messenger.MessagesStorage r57 = r78.getMessagesStorage()
            r59 = r1
            org.telegram.messenger.DispatchQueue r1 = r57.getStorageQueue()
            r57 = r3
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda324 r3 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda324
            r3.<init>(r6, r4, r0)
            r1.postRunnable(r3)
            int r2 = r2 + 1
            r0 = r48
            r3 = r57
            r1 = r59
            goto L_0x1e44
        L_0x1e6d:
            r48 = r0
            r59 = r1
            r57 = r3
            goto L_0x1e78
        L_0x1e74:
            r48 = r0
            r59 = r1
        L_0x1e78:
            r0 = r67
            if (r0 == 0) goto L_0x1eaa
            r1 = 0
            int r2 = r0.size()
        L_0x1e81:
            if (r1 >= r2) goto L_0x1ea7
            java.lang.Object r3 = r0.get(r1)
            org.telegram.tgnet.TLRPC$TL_updateEncryptedMessagesRead r3 = (org.telegram.tgnet.TLRPC.TL_updateEncryptedMessagesRead) r3
            org.telegram.messenger.MessagesStorage r69 = r78.getMessagesStorage()
            int r4 = r3.chat_id
            int r5 = r3.max_date
            r67 = r0
            int r0 = r3.date
            r73 = 1
            r74 = 0
            r70 = r4
            r71 = r5
            r72 = r0
            r69.createTaskForSecretChat(r70, r71, r72, r73, r74)
            int r1 = r1 + 1
            r0 = r67
            goto L_0x1e81
        L_0x1ea7:
            r67 = r0
            goto L_0x1eac
        L_0x1eaa:
            r67 = r0
        L_0x1eac:
            r0 = 1
            return r0
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.processUpdateArray(java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, boolean, int):boolean");
    }

    /* renamed from: lambda$processUpdateArray$308$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m332xa492ab56(ArrayList usersArr, ArrayList chatsArr) {
        putUsers(usersArr, false);
        putChats(chatsArr, false);
    }

    /* renamed from: lambda$processUpdateArray$309$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m333x89d41a17(ArrayList usersArr, ArrayList chatsArr) {
        putUsers(usersArr, false);
        putChats(chatsArr, false);
    }

    /* renamed from: lambda$processUpdateArray$310$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m334x3d739ead(TLRPC.TL_updateUserTyping update) {
        getNotificationCenter().postNotificationName(NotificationCenter.onEmojiInteractionsReceived, Long.valueOf(update.user_id), update.action);
    }

    /* renamed from: lambda$processUpdateArray$311$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m335x22b50d6e(TLRPC.TL_updateChatUserTyping update) {
        getNotificationCenter().postNotificationName(NotificationCenter.onEmojiInteractionsReceived, Long.valueOf(-update.chat_id), update.action);
    }

    /* renamed from: lambda$processUpdateArray$313$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m337xed37eaf0(TLRPC.TL_updatePeerBlocked finalUpdate) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda89(this, finalUpdate));
    }

    /* renamed from: lambda$processUpdateArray$312$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m336x7var_c2f(TLRPC.TL_updatePeerBlocked finalUpdate) {
        long id = MessageObject.getPeerId(finalUpdate.peer_id);
        if (!finalUpdate.blocked) {
            this.blockePeers.delete(id);
        } else if (this.blockePeers.indexOfKey(id) < 0) {
            this.blockePeers.put(id, 1);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.blockedUsersDidLoad, new Object[0]);
    }

    /* renamed from: lambda$processUpdateArray$314$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m338xd27959b1(TLRPC.TL_updateServiceNotification update) {
        getNotificationCenter().postNotificationName(NotificationCenter.needShowAlert, 2, update.message, update.type);
    }

    /* renamed from: lambda$processUpdateArray$315$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m339xb7baCLASSNAME(TLRPC.TL_updateLangPack update) {
        LocaleController.getInstance().saveRemoteLocaleStringsForCurrentLocale(update.difference, this.currentAccount);
    }

    /* renamed from: lambda$processUpdateArray$316$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m340x9cfCLASSNAME(ArrayList pushMessagesFinal) {
        getNotificationsController().processNewMessages(pushMessagesFinal, true, false, (CountDownLatch) null);
    }

    /* renamed from: lambda$processUpdateArray$317$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m341x823da5f4(ArrayList pushMessagesFinal) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda12(this, pushMessagesFinal));
    }

    /* renamed from: lambda$processUpdateArray$318$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m342x677var_b5(LongSparseArray editingMessagesFinal) {
        getNotificationsController().processEditedMessages(editingMessagesFinal);
    }

    /* renamed from: lambda$processUpdateArray$319$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m343x4cCLASSNAME(LongSparseArray editingMessagesFinal) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda356(this, editingMessagesFinal));
    }

    /* JADX WARNING: Removed duplicated region for block: B:579:0x0f6a  */
    /* JADX WARNING: Removed duplicated region for block: B:584:0x0fa3  */
    /* renamed from: lambda$processUpdateArray$327$org-telegram-messenger-MessagesController  reason: not valid java name */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void m351x452a0var_(int r45, java.util.ArrayList r46, androidx.collection.LongSparseArray r47, int r48, org.telegram.messenger.support.LongSparseIntArray r49, androidx.collection.LongSparseArray r50, androidx.collection.LongSparseArray r51, java.util.ArrayList r52, androidx.collection.LongSparseArray r53, androidx.collection.LongSparseArray r54, boolean r55, java.util.ArrayList r56, java.util.ArrayList r57, androidx.collection.LongSparseArray r58, androidx.collection.LongSparseArray r59, androidx.collection.LongSparseArray r60, java.util.ArrayList r61) {
        /*
            r44 = this;
            r8 = r44
            r9 = r46
            r10 = r47
            r11 = r49
            r12 = r50
            r13 = r51
            r14 = r52
            r15 = r53
            r6 = r54
            r7 = r57
            r5 = r61
            r0 = r45
            r1 = 0
            r2 = 0
            r5 = 0
            java.lang.Integer r19 = java.lang.Integer.valueOf(r5)
            java.lang.Boolean r20 = java.lang.Boolean.valueOf(r5)
            r4 = 1
            if (r9 == 0) goto L_0x0e63
            java.util.ArrayList r21 = new java.util.ArrayList
            r21.<init>()
            r22 = r21
            java.util.ArrayList r21 = new java.util.ArrayList
            r21.<init>()
            r23 = r21
            r21 = 0
            r24 = 0
            int r6 = r46.size()
            r26 = r2
            r27 = r21
            r2 = r24
            r21 = r0
            r24 = r1
        L_0x0046:
            if (r2 >= r6) goto L_0x0e2e
            java.lang.Object r0 = r9.get(r2)
            r1 = r0
            org.telegram.tgnet.TLRPC$Update r1 = (org.telegram.tgnet.TLRPC.Update) r1
            boolean r0 = r1 instanceof org.telegram.tgnet.TLRPC.TL_updatePrivacy
            if (r0 == 0) goto L_0x00ef
            r0 = r1
            org.telegram.tgnet.TLRPC$TL_updatePrivacy r0 = (org.telegram.tgnet.TLRPC.TL_updatePrivacy) r0
            org.telegram.tgnet.TLRPC$PrivacyKey r3 = r0.key
            boolean r3 = r3 instanceof org.telegram.tgnet.TLRPC.TL_privacyKeyStatusTimestamp
            if (r3 == 0) goto L_0x0068
            org.telegram.messenger.ContactsController r3 = r44.getContactsController()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PrivacyRule> r7 = r0.rules
            r3.setPrivacyRules(r7, r5)
            r5 = 3
            goto L_0x00e2
        L_0x0068:
            org.telegram.tgnet.TLRPC$PrivacyKey r3 = r0.key
            boolean r3 = r3 instanceof org.telegram.tgnet.TLRPC.TL_privacyKeyChatInvite
            if (r3 == 0) goto L_0x0079
            org.telegram.messenger.ContactsController r3 = r44.getContactsController()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PrivacyRule> r7 = r0.rules
            r3.setPrivacyRules(r7, r4)
            r5 = 3
            goto L_0x00e2
        L_0x0079:
            org.telegram.tgnet.TLRPC$PrivacyKey r3 = r0.key
            boolean r3 = r3 instanceof org.telegram.tgnet.TLRPC.TL_privacyKeyPhoneCall
            if (r3 == 0) goto L_0x008b
            org.telegram.messenger.ContactsController r3 = r44.getContactsController()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PrivacyRule> r7 = r0.rules
            r5 = 2
            r3.setPrivacyRules(r7, r5)
            r5 = 3
            goto L_0x00e2
        L_0x008b:
            r5 = 2
            org.telegram.tgnet.TLRPC$PrivacyKey r3 = r0.key
            boolean r3 = r3 instanceof org.telegram.tgnet.TLRPC.TL_privacyKeyPhoneP2P
            if (r3 == 0) goto L_0x009d
            org.telegram.messenger.ContactsController r3 = r44.getContactsController()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PrivacyRule> r7 = r0.rules
            r5 = 3
            r3.setPrivacyRules(r7, r5)
            goto L_0x00e2
        L_0x009d:
            r5 = 3
            org.telegram.tgnet.TLRPC$PrivacyKey r3 = r0.key
            boolean r3 = r3 instanceof org.telegram.tgnet.TLRPC.TL_privacyKeyProfilePhoto
            if (r3 == 0) goto L_0x00af
            org.telegram.messenger.ContactsController r3 = r44.getContactsController()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PrivacyRule> r7 = r0.rules
            r4 = 4
            r3.setPrivacyRules(r7, r4)
            goto L_0x00e2
        L_0x00af:
            r4 = 4
            org.telegram.tgnet.TLRPC$PrivacyKey r3 = r0.key
            boolean r3 = r3 instanceof org.telegram.tgnet.TLRPC.TL_privacyKeyForwards
            if (r3 == 0) goto L_0x00c1
            org.telegram.messenger.ContactsController r3 = r44.getContactsController()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PrivacyRule> r7 = r0.rules
            r4 = 5
            r3.setPrivacyRules(r7, r4)
            goto L_0x00e2
        L_0x00c1:
            org.telegram.tgnet.TLRPC$PrivacyKey r3 = r0.key
            boolean r3 = r3 instanceof org.telegram.tgnet.TLRPC.TL_privacyKeyPhoneNumber
            if (r3 == 0) goto L_0x00d2
            org.telegram.messenger.ContactsController r3 = r44.getContactsController()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PrivacyRule> r4 = r0.rules
            r7 = 6
            r3.setPrivacyRules(r4, r7)
            goto L_0x00e2
        L_0x00d2:
            org.telegram.tgnet.TLRPC$PrivacyKey r3 = r0.key
            boolean r3 = r3 instanceof org.telegram.tgnet.TLRPC.TL_privacyKeyAddedByPhone
            if (r3 == 0) goto L_0x00e2
            org.telegram.messenger.ContactsController r3 = r44.getContactsController()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PrivacyRule> r4 = r0.rules
            r7 = 7
            r3.setPrivacyRules(r4, r7)
        L_0x00e2:
            r16 = r6
            r9 = r22
            r34 = r23
            r3 = 0
            r6 = 2
            r12 = 1
            r23 = r2
            goto L_0x0e16
        L_0x00ef:
            r5 = 3
            boolean r0 = r1 instanceof org.telegram.tgnet.TLRPC.TL_updateUserStatus
            if (r0 == 0) goto L_0x016f
            r0 = r1
            org.telegram.tgnet.TLRPC$TL_updateUserStatus r0 = (org.telegram.tgnet.TLRPC.TL_updateUserStatus) r0
            long r3 = r0.user_id
            java.lang.Long r3 = java.lang.Long.valueOf(r3)
            org.telegram.tgnet.TLRPC$User r3 = r8.getUser(r3)
            org.telegram.tgnet.TLRPC$UserStatus r4 = r0.status
            boolean r4 = r4 instanceof org.telegram.tgnet.TLRPC.TL_userStatusRecently
            if (r4 == 0) goto L_0x010e
            org.telegram.tgnet.TLRPC$UserStatus r4 = r0.status
            r7 = -100
            r4.expires = r7
            goto L_0x0127
        L_0x010e:
            org.telegram.tgnet.TLRPC$UserStatus r4 = r0.status
            boolean r4 = r4 instanceof org.telegram.tgnet.TLRPC.TL_userStatusLastWeek
            if (r4 == 0) goto L_0x011b
            org.telegram.tgnet.TLRPC$UserStatus r4 = r0.status
            r7 = -101(0xffffffffffffff9b, float:NaN)
            r4.expires = r7
            goto L_0x0127
        L_0x011b:
            org.telegram.tgnet.TLRPC$UserStatus r4 = r0.status
            boolean r4 = r4 instanceof org.telegram.tgnet.TLRPC.TL_userStatusLastMonth
            if (r4 == 0) goto L_0x0127
            org.telegram.tgnet.TLRPC$UserStatus r4 = r0.status
            r7 = -102(0xffffffffffffff9a, float:NaN)
            r4.expires = r7
        L_0x0127:
            if (r3 == 0) goto L_0x0133
            r7 = r6
            long r5 = r0.user_id
            r3.id = r5
            org.telegram.tgnet.TLRPC$UserStatus r4 = r0.status
            r3.status = r4
            goto L_0x0134
        L_0x0133:
            r7 = r6
        L_0x0134:
            org.telegram.tgnet.TLRPC$TL_user r4 = new org.telegram.tgnet.TLRPC$TL_user
            r4.<init>()
            long r5 = r0.user_id
            r4.id = r5
            org.telegram.tgnet.TLRPC$UserStatus r5 = r0.status
            r4.status = r5
            r6 = r23
            r6.add(r4)
            r5 = r2
            r23 = r3
            long r2 = r0.user_id
            org.telegram.messenger.UserConfig r29 = r44.getUserConfig()
            long r30 = r29.getClientUserId()
            int r29 = (r2 > r30 ? 1 : (r2 == r30 ? 0 : -1))
            if (r29 != 0) goto L_0x0162
            org.telegram.messenger.NotificationsController r2 = r44.getNotificationsController()
            org.telegram.tgnet.TLRPC$UserStatus r3 = r0.status
            int r3 = r3.expires
            r2.setLastOnlineFromOtherDevice(r3)
        L_0x0162:
            r23 = r5
            r34 = r6
            r16 = r7
            r9 = r22
            r3 = 0
            r6 = 2
            r12 = 1
            goto L_0x0e16
        L_0x016f:
            r5 = r2
            r7 = r6
            r6 = r23
            boolean r0 = r1 instanceof org.telegram.tgnet.TLRPC.TL_updateUserName
            if (r0 == 0) goto L_0x01dc
            r0 = r1
            org.telegram.tgnet.TLRPC$TL_updateUserName r0 = (org.telegram.tgnet.TLRPC.TL_updateUserName) r0
            long r2 = r0.user_id
            java.lang.Long r2 = java.lang.Long.valueOf(r2)
            org.telegram.tgnet.TLRPC$User r2 = r8.getUser(r2)
            if (r2 == 0) goto L_0x01b6
            boolean r3 = org.telegram.messenger.UserObject.isContact(r2)
            if (r3 != 0) goto L_0x0194
            java.lang.String r3 = r0.first_name
            r2.first_name = r3
            java.lang.String r3 = r0.last_name
            r2.last_name = r3
        L_0x0194:
            java.lang.String r3 = r2.username
            boolean r3 = android.text.TextUtils.isEmpty(r3)
            if (r3 != 0) goto L_0x01a3
            j$.util.concurrent.ConcurrentHashMap<java.lang.String, org.telegram.tgnet.TLObject> r3 = r8.objectsByUsernames
            java.lang.String r4 = r2.username
            r3.remove(r4)
        L_0x01a3:
            java.lang.String r3 = r0.username
            boolean r3 = android.text.TextUtils.isEmpty(r3)
            if (r3 == 0) goto L_0x01b2
            j$.util.concurrent.ConcurrentHashMap<java.lang.String, org.telegram.tgnet.TLObject> r3 = r8.objectsByUsernames
            java.lang.String r4 = r0.username
            r3.put(r4, r2)
        L_0x01b2:
            java.lang.String r3 = r0.username
            r2.username = r3
        L_0x01b6:
            org.telegram.tgnet.TLRPC$TL_user r3 = new org.telegram.tgnet.TLRPC$TL_user
            r3.<init>()
            r23 = r5
            long r4 = r0.user_id
            r3.id = r4
            java.lang.String r4 = r0.first_name
            r3.first_name = r4
            java.lang.String r4 = r0.last_name
            r3.last_name = r4
            java.lang.String r4 = r0.username
            r3.username = r4
            r5 = r22
            r5.add(r3)
            r9 = r5
            r34 = r6
            r16 = r7
            r3 = 0
            r6 = 2
            r12 = 1
            goto L_0x0e16
        L_0x01dc:
            r23 = r5
            r5 = r22
            boolean r0 = r1 instanceof org.telegram.tgnet.TLRPC.TL_updateDialogPinned
            if (r0 == 0) goto L_0x023e
            r0 = r1
            org.telegram.tgnet.TLRPC$TL_updateDialogPinned r0 = (org.telegram.tgnet.TLRPC.TL_updateDialogPinned) r0
            org.telegram.tgnet.TLRPC$DialogPeer r2 = r0.peer
            boolean r2 = r2 instanceof org.telegram.tgnet.TLRPC.TL_dialogPeer
            if (r2 == 0) goto L_0x01f8
            org.telegram.tgnet.TLRPC$DialogPeer r2 = r0.peer
            org.telegram.tgnet.TLRPC$TL_dialogPeer r2 = (org.telegram.tgnet.TLRPC.TL_dialogPeer) r2
            org.telegram.tgnet.TLRPC$Peer r3 = r2.peer
            long r2 = org.telegram.messenger.DialogObject.getPeerDialogId((org.telegram.tgnet.TLRPC.Peer) r3)
            goto L_0x01fa
        L_0x01f8:
            r2 = 0
        L_0x01fa:
            boolean r4 = r0.pinned
            r22 = 0
            r30 = -1
            r32 = r1
            r1 = r44
            r28 = r2
            r33 = r5
            r9 = 0
            r16 = 3
            r17 = 2
            r5 = r22
            r34 = r6
            r16 = r7
            r6 = r30
            boolean r1 = r1.pinDialog(r2, r4, r5, r6)
            if (r1 != 0) goto L_0x0234
            org.telegram.messenger.UserConfig r1 = r44.getUserConfig()
            int r2 = r0.folder_id
            r1.setPinnedDialogsLoaded(r2, r9)
            org.telegram.messenger.UserConfig r1 = r44.getUserConfig()
            r1.saveConfig(r9)
            int r1 = r0.folder_id
            r2 = r28
            r7 = 0
            r8.loadPinnedDialogs(r1, r2, r7)
            goto L_0x0237
        L_0x0234:
            r2 = r28
            r7 = 0
        L_0x0237:
            r3 = r7
            r9 = r33
            r6 = 2
            r12 = 1
            goto L_0x0e16
        L_0x023e:
            r32 = r1
            r33 = r5
            r34 = r6
            r16 = r7
            r7 = 0
            r9 = 0
            r6 = r32
            boolean r0 = r6 instanceof org.telegram.tgnet.TLRPC.TL_updatePinnedDialogs
            if (r0 == 0) goto L_0x02c8
            r0 = r6
            org.telegram.tgnet.TLRPC$TL_updatePinnedDialogs r0 = (org.telegram.tgnet.TLRPC.TL_updatePinnedDialogs) r0
            org.telegram.messenger.UserConfig r1 = r44.getUserConfig()
            int r2 = r0.folder_id
            r1.setPinnedDialogsLoaded(r2, r9)
            org.telegram.messenger.UserConfig r1 = r44.getUserConfig()
            r1.saveConfig(r9)
            int r1 = r0.flags
            r4 = 1
            r1 = r1 & r4
            if (r1 == 0) goto L_0x02b9
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$DialogPeer> r2 = r0.order
            r3 = 0
            int r5 = r2.size()
        L_0x0273:
            if (r3 >= r5) goto L_0x02b6
            java.lang.Object r17 = r2.get(r3)
            r4 = r17
            org.telegram.tgnet.TLRPC$DialogPeer r4 = (org.telegram.tgnet.TLRPC.DialogPeer) r4
            boolean r7 = r4 instanceof org.telegram.tgnet.TLRPC.TL_dialogPeer
            if (r7 == 0) goto L_0x029f
            r7 = r4
            org.telegram.tgnet.TLRPC$TL_dialogPeer r7 = (org.telegram.tgnet.TLRPC.TL_dialogPeer) r7
            org.telegram.tgnet.TLRPC$Peer r7 = r7.peer
            long r9 = r7.user_id
            r14 = 0
            int r17 = (r9 > r14 ? 1 : (r9 == r14 ? 0 : -1))
            if (r17 == 0) goto L_0x0291
            long r9 = r7.user_id
            goto L_0x029e
        L_0x0291:
            long r9 = r7.chat_id
            int r17 = (r9 > r14 ? 1 : (r9 == r14 ? 0 : -1))
            if (r17 == 0) goto L_0x029b
            long r9 = r7.chat_id
            long r9 = -r9
            goto L_0x029e
        L_0x029b:
            long r9 = r7.channel_id
            long r9 = -r9
        L_0x029e:
            goto L_0x02a3
        L_0x029f:
            r14 = 0
            r9 = 0
        L_0x02a3:
            java.lang.Long r7 = java.lang.Long.valueOf(r9)
            r1.add(r7)
            int r3 = r3 + 1
            r10 = r47
            r14 = r52
            r15 = r53
            r4 = 1
            r7 = 0
            r9 = 0
            goto L_0x0273
        L_0x02b6:
            r14 = 0
            goto L_0x02bc
        L_0x02b9:
            r14 = 0
            r1 = 0
        L_0x02bc:
            int r2 = r0.folder_id
            r8.loadPinnedDialogs(r2, r14, r1)
            r9 = r33
            r3 = 0
            r6 = 2
            r12 = 1
            goto L_0x0e16
        L_0x02c8:
            r14 = 0
            boolean r0 = r6 instanceof org.telegram.tgnet.TLRPC.TL_updateUserPhoto
            if (r0 == 0) goto L_0x030a
            r0 = r6
            org.telegram.tgnet.TLRPC$TL_updateUserPhoto r0 = (org.telegram.tgnet.TLRPC.TL_updateUserPhoto) r0
            long r1 = r0.user_id
            java.lang.Long r1 = java.lang.Long.valueOf(r1)
            org.telegram.tgnet.TLRPC$User r1 = r8.getUser(r1)
            if (r1 == 0) goto L_0x02e1
            org.telegram.tgnet.TLRPC$UserProfilePhoto r2 = r0.photo
            r1.photo = r2
        L_0x02e1:
            org.telegram.tgnet.TLRPC$TL_user r2 = new org.telegram.tgnet.TLRPC$TL_user
            r2.<init>()
            long r3 = r0.user_id
            r2.id = r3
            org.telegram.tgnet.TLRPC$UserProfilePhoto r3 = r0.photo
            r2.photo = r3
            r9 = r33
            r9.add(r2)
            boolean r3 = org.telegram.messenger.UserObject.isUserSelf(r1)
            if (r3 == 0) goto L_0x0305
            org.telegram.messenger.NotificationCenter r3 = r44.getNotificationCenter()
            int r4 = org.telegram.messenger.NotificationCenter.mainUserInfoChanged
            r5 = 0
            java.lang.Object[] r7 = new java.lang.Object[r5]
            r3.postNotificationName(r4, r7)
        L_0x0305:
            r3 = 0
            r6 = 2
            r12 = 1
            goto L_0x0e16
        L_0x030a:
            r9 = r33
            boolean r0 = r6 instanceof org.telegram.tgnet.TLRPC.TL_updateUserPhone
            if (r0 == 0) goto L_0x0354
            r0 = r6
            org.telegram.tgnet.TLRPC$TL_updateUserPhone r0 = (org.telegram.tgnet.TLRPC.TL_updateUserPhone) r0
            long r1 = r0.user_id
            java.lang.Long r1 = java.lang.Long.valueOf(r1)
            org.telegram.tgnet.TLRPC$User r1 = r8.getUser(r1)
            if (r1 == 0) goto L_0x033f
            java.lang.String r2 = r0.phone
            r1.phone = r2
            org.telegram.messenger.DispatchQueue r2 = org.telegram.messenger.Utilities.phoneBookQueue
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda96 r3 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda96
            r3.<init>(r8, r1)
            r2.postRunnable(r3)
            boolean r2 = org.telegram.messenger.UserObject.isUserSelf(r1)
            if (r2 == 0) goto L_0x033f
            org.telegram.messenger.NotificationCenter r2 = r44.getNotificationCenter()
            int r3 = org.telegram.messenger.NotificationCenter.mainUserInfoChanged
            r4 = 0
            java.lang.Object[] r5 = new java.lang.Object[r4]
            r2.postNotificationName(r3, r5)
        L_0x033f:
            org.telegram.tgnet.TLRPC$TL_user r2 = new org.telegram.tgnet.TLRPC$TL_user
            r2.<init>()
            long r3 = r0.user_id
            r2.id = r3
            java.lang.String r3 = r0.phone
            r2.phone = r3
            r9.add(r2)
            r3 = 0
            r6 = 2
            r12 = 1
            goto L_0x0e16
        L_0x0354:
            boolean r0 = r6 instanceof org.telegram.tgnet.TLRPC.TL_updateNotifySettings
            if (r0 == 0) goto L_0x05e9
            r0 = r6
            org.telegram.tgnet.TLRPC$TL_updateNotifySettings r0 = (org.telegram.tgnet.TLRPC.TL_updateNotifySettings) r0
            org.telegram.tgnet.TLRPC$PeerNotifySettings r1 = r0.notify_settings
            boolean r1 = r1 instanceof org.telegram.tgnet.TLRPC.TL_peerNotifySettings
            if (r1 == 0) goto L_0x05e3
            int r1 = DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r26 = r26 | r1
            if (r27 != 0) goto L_0x0370
            android.content.SharedPreferences r1 = r8.notificationsPreferences
            android.content.SharedPreferences$Editor r27 = r1.edit()
            r10 = r27
            goto L_0x0372
        L_0x0370:
            r10 = r27
        L_0x0372:
            org.telegram.tgnet.ConnectionsManager r1 = r44.getConnectionsManager()
            int r7 = r1.getCurrentTime()
            org.telegram.tgnet.TLRPC$NotifyPeer r1 = r0.peer
            boolean r1 = r1 instanceof org.telegram.tgnet.TLRPC.TL_notifyPeer
            if (r1 == 0) goto L_0x04da
            org.telegram.tgnet.TLRPC$NotifyPeer r1 = r0.peer
            r4 = r1
            org.telegram.tgnet.TLRPC$TL_notifyPeer r4 = (org.telegram.tgnet.TLRPC.TL_notifyPeer) r4
            org.telegram.tgnet.TLRPC$Peer r1 = r4.peer
            long r1 = r1.user_id
            int r3 = (r1 > r14 ? 1 : (r1 == r14 ? 0 : -1))
            if (r3 == 0) goto L_0x0393
            org.telegram.tgnet.TLRPC$Peer r1 = r4.peer
            long r1 = r1.user_id
            r2 = r1
            goto L_0x03a8
        L_0x0393:
            org.telegram.tgnet.TLRPC$Peer r1 = r4.peer
            long r1 = r1.chat_id
            int r3 = (r1 > r14 ? 1 : (r1 == r14 ? 0 : -1))
            if (r3 == 0) goto L_0x03a2
            org.telegram.tgnet.TLRPC$Peer r1 = r4.peer
            long r1 = r1.chat_id
            long r1 = -r1
            r2 = r1
            goto L_0x03a8
        L_0x03a2:
            org.telegram.tgnet.TLRPC$Peer r1 = r4.peer
            long r1 = r1.channel_id
            long r1 = -r1
            r2 = r1
        L_0x03a8:
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r1 = r8.dialogs_dict
            java.lang.Object r1 = r1.get(r2)
            r5 = r1
            org.telegram.tgnet.TLRPC$Dialog r5 = (org.telegram.tgnet.TLRPC.Dialog) r5
            if (r5 == 0) goto L_0x03b7
            org.telegram.tgnet.TLRPC$PeerNotifySettings r1 = r0.notify_settings
            r5.notify_settings = r1
        L_0x03b7:
            org.telegram.tgnet.TLRPC$PeerNotifySettings r1 = r0.notify_settings
            int r1 = r1.flags
            r32 = r6
            r6 = 2
            r1 = r1 & r6
            java.lang.String r14 = "silent_"
            if (r1 == 0) goto L_0x03da
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            r1.append(r14)
            r1.append(r2)
            java.lang.String r1 = r1.toString()
            org.telegram.tgnet.TLRPC$PeerNotifySettings r14 = r0.notify_settings
            boolean r14 = r14.silent
            r10.putBoolean(r1, r14)
            goto L_0x03ec
        L_0x03da:
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            r1.append(r14)
            r1.append(r2)
            java.lang.String r1 = r1.toString()
            r10.remove(r1)
        L_0x03ec:
            org.telegram.tgnet.TLRPC$PeerNotifySettings r1 = r0.notify_settings
            int r1 = r1.flags
            r14 = 4
            r1 = r1 & r14
            java.lang.String r15 = "notify2_"
            if (r1 == 0) goto L_0x049a
            org.telegram.tgnet.TLRPC$PeerNotifySettings r1 = r0.notify_settings
            int r1 = r1.mute_until
            if (r1 <= r7) goto L_0x0474
            r1 = 0
            org.telegram.tgnet.TLRPC$PeerNotifySettings r14 = r0.notify_settings
            int r14 = r14.mute_until
            r17 = 31536000(0x1e13380, float:8.2725845E-38)
            int r6 = r7 + r17
            if (r14 <= r6) goto L_0x0426
            java.lang.StringBuilder r6 = new java.lang.StringBuilder
            r6.<init>()
            r6.append(r15)
            r6.append(r2)
            java.lang.String r6 = r6.toString()
            r14 = 2
            r10.putInt(r6, r14)
            if (r5 == 0) goto L_0x0424
            org.telegram.tgnet.TLRPC$PeerNotifySettings r6 = r0.notify_settings
            r15 = 2147483647(0x7fffffff, float:NaN)
            r6.mute_until = r15
        L_0x0424:
            r15 = 3
            goto L_0x045c
        L_0x0426:
            r14 = 2
            org.telegram.tgnet.TLRPC$PeerNotifySettings r6 = r0.notify_settings
            int r1 = r6.mute_until
            java.lang.StringBuilder r6 = new java.lang.StringBuilder
            r6.<init>()
            r6.append(r15)
            r6.append(r2)
            java.lang.String r6 = r6.toString()
            r15 = 3
            r10.putInt(r6, r15)
            java.lang.StringBuilder r6 = new java.lang.StringBuilder
            r6.<init>()
            java.lang.String r14 = "notifyuntil_"
            r6.append(r14)
            r6.append(r2)
            java.lang.String r6 = r6.toString()
            org.telegram.tgnet.TLRPC$PeerNotifySettings r14 = r0.notify_settings
            int r14 = r14.mute_until
            r10.putInt(r6, r14)
            if (r5 == 0) goto L_0x045c
            org.telegram.tgnet.TLRPC$PeerNotifySettings r6 = r0.notify_settings
            r6.mute_until = r1
        L_0x045c:
            org.telegram.messenger.MessagesStorage r6 = r44.getMessagesStorage()
            long r14 = (long) r1
            r17 = 32
            long r14 = r14 << r17
            r17 = 1
            long r14 = r14 | r17
            r6.setDialogFlags(r2, r14)
            org.telegram.messenger.NotificationsController r6 = r44.getNotificationsController()
            r6.removeNotificationsForDialog(r2)
            goto L_0x04bc
        L_0x0474:
            r14 = 3
            if (r5 == 0) goto L_0x047d
            org.telegram.tgnet.TLRPC$PeerNotifySettings r1 = r0.notify_settings
            r6 = 0
            r1.mute_until = r6
            goto L_0x047e
        L_0x047d:
            r6 = 0
        L_0x047e:
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            r1.append(r15)
            r1.append(r2)
            java.lang.String r1 = r1.toString()
            r10.putInt(r1, r6)
            org.telegram.messenger.MessagesStorage r1 = r44.getMessagesStorage()
            r14 = 0
            r1.setDialogFlags(r2, r14)
            goto L_0x04bc
        L_0x049a:
            r6 = 0
            if (r5 == 0) goto L_0x04a1
            org.telegram.tgnet.TLRPC$PeerNotifySettings r1 = r0.notify_settings
            r1.mute_until = r6
        L_0x04a1:
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            r1.append(r15)
            r1.append(r2)
            java.lang.String r1 = r1.toString()
            r10.remove(r1)
            org.telegram.messenger.MessagesStorage r1 = r44.getMessagesStorage()
            r14 = 0
            r1.setDialogFlags(r2, r14)
        L_0x04bc:
            org.telegram.tgnet.TLRPC$PeerNotifySettings r1 = r0.notify_settings
            org.telegram.tgnet.TLRPC$NotificationSound r6 = r1.android_sound
            r14 = 0
            r15 = 1
            r1 = r44
            r17 = r2
            r2 = r6
            r3 = r10
            r22 = r4
            r25 = r5
            r6 = 1
            r4 = r17
            r13 = r32
            r12 = 1
            r6 = r14
            r14 = r7
            r7 = r15
            r1.applySoundSettings(r2, r3, r4, r6, r7)
            goto L_0x05d9
        L_0x04da:
            r13 = r6
            r14 = r7
            r12 = 1
            org.telegram.tgnet.TLRPC$NotifyPeer r1 = r0.peer
            boolean r1 = r1 instanceof org.telegram.tgnet.TLRPC.TL_notifyChats
            if (r1 == 0) goto L_0x0532
            org.telegram.tgnet.TLRPC$PeerNotifySettings r1 = r0.notify_settings
            int r1 = r1.flags
            r1 = r1 & r12
            if (r1 == 0) goto L_0x04f3
            org.telegram.tgnet.TLRPC$PeerNotifySettings r1 = r0.notify_settings
            boolean r1 = r1.show_previews
            java.lang.String r2 = "EnablePreviewGroup"
            r10.putBoolean(r2, r1)
        L_0x04f3:
            org.telegram.tgnet.TLRPC$PeerNotifySettings r1 = r0.notify_settings
            int r1 = r1.flags
            org.telegram.tgnet.TLRPC$PeerNotifySettings r1 = r0.notify_settings
            int r1 = r1.flags
            r2 = 4
            r1 = r1 & r2
            if (r1 == 0) goto L_0x0522
            android.content.SharedPreferences r1 = r8.notificationsPreferences
            java.lang.String r2 = "EnableGroup2"
            r3 = 0
            int r1 = r1.getInt(r2, r3)
            org.telegram.tgnet.TLRPC$PeerNotifySettings r3 = r0.notify_settings
            int r3 = r3.mute_until
            if (r1 == r3) goto L_0x0522
            org.telegram.tgnet.TLRPC$PeerNotifySettings r1 = r0.notify_settings
            int r1 = r1.mute_until
            r10.putInt(r2, r1)
            java.lang.String r1 = "overwrite_group"
            r10.putBoolean(r1, r12)
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda177 r1 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda177
            r1.<init>(r8)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r1)
        L_0x0522:
            org.telegram.tgnet.TLRPC$PeerNotifySettings r1 = r0.notify_settings
            org.telegram.tgnet.TLRPC$NotificationSound r2 = r1.android_sound
            r4 = 0
            r6 = 0
            r7 = 0
            r1 = r44
            r3 = r10
            r1.applySoundSettings(r2, r3, r4, r6, r7)
            goto L_0x05d9
        L_0x0532:
            org.telegram.tgnet.TLRPC$NotifyPeer r1 = r0.peer
            boolean r1 = r1 instanceof org.telegram.tgnet.TLRPC.TL_notifyUsers
            if (r1 == 0) goto L_0x0586
            org.telegram.tgnet.TLRPC$PeerNotifySettings r1 = r0.notify_settings
            int r1 = r1.flags
            r1 = r1 & r12
            if (r1 == 0) goto L_0x0548
            org.telegram.tgnet.TLRPC$PeerNotifySettings r1 = r0.notify_settings
            boolean r1 = r1.show_previews
            java.lang.String r2 = "EnablePreviewAll"
            r10.putBoolean(r2, r1)
        L_0x0548:
            org.telegram.tgnet.TLRPC$PeerNotifySettings r1 = r0.notify_settings
            int r1 = r1.flags
            org.telegram.tgnet.TLRPC$PeerNotifySettings r1 = r0.notify_settings
            org.telegram.tgnet.TLRPC$NotificationSound r2 = r1.android_sound
            r4 = 0
            r6 = 1
            r7 = 0
            r1 = r44
            r3 = r10
            r1.applySoundSettings(r2, r3, r4, r6, r7)
            org.telegram.tgnet.TLRPC$PeerNotifySettings r1 = r0.notify_settings
            int r1 = r1.flags
            r2 = 4
            r1 = r1 & r2
            if (r1 == 0) goto L_0x05d9
            android.content.SharedPreferences r1 = r8.notificationsPreferences
            java.lang.String r2 = "EnableAll2"
            r3 = 0
            int r1 = r1.getInt(r2, r3)
            org.telegram.tgnet.TLRPC$PeerNotifySettings r3 = r0.notify_settings
            int r3 = r3.mute_until
            if (r1 == r3) goto L_0x05d9
            org.telegram.tgnet.TLRPC$PeerNotifySettings r1 = r0.notify_settings
            int r1 = r1.mute_until
            r10.putInt(r2, r1)
            java.lang.String r1 = "overwrite_private"
            r10.putBoolean(r1, r12)
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda188 r1 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda188
            r1.<init>(r8)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r1)
            goto L_0x05d9
        L_0x0586:
            org.telegram.tgnet.TLRPC$NotifyPeer r1 = r0.peer
            boolean r1 = r1 instanceof org.telegram.tgnet.TLRPC.TL_notifyBroadcasts
            if (r1 == 0) goto L_0x05d9
            org.telegram.tgnet.TLRPC$PeerNotifySettings r1 = r0.notify_settings
            int r1 = r1.flags
            r1 = r1 & r12
            if (r1 == 0) goto L_0x059c
            org.telegram.tgnet.TLRPC$PeerNotifySettings r1 = r0.notify_settings
            boolean r1 = r1.show_previews
            java.lang.String r2 = "EnablePreviewChannel"
            r10.putBoolean(r2, r1)
        L_0x059c:
            org.telegram.tgnet.TLRPC$PeerNotifySettings r1 = r0.notify_settings
            int r1 = r1.flags
            org.telegram.tgnet.TLRPC$PeerNotifySettings r1 = r0.notify_settings
            int r1 = r1.flags
            r2 = 4
            r1 = r1 & r2
            if (r1 == 0) goto L_0x05cb
            android.content.SharedPreferences r1 = r8.notificationsPreferences
            java.lang.String r2 = "EnableChannel2"
            r3 = 0
            int r1 = r1.getInt(r2, r3)
            org.telegram.tgnet.TLRPC$PeerNotifySettings r3 = r0.notify_settings
            int r3 = r3.mute_until
            if (r1 == r3) goto L_0x05cb
            org.telegram.tgnet.TLRPC$PeerNotifySettings r1 = r0.notify_settings
            int r1 = r1.mute_until
            r10.putInt(r2, r1)
            java.lang.String r1 = "overwrite_channel"
            r10.putBoolean(r1, r12)
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda199 r1 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda199
            r1.<init>(r8)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r1)
        L_0x05cb:
            org.telegram.tgnet.TLRPC$PeerNotifySettings r1 = r0.notify_settings
            org.telegram.tgnet.TLRPC$NotificationSound r2 = r1.android_sound
            r4 = 0
            r6 = 2
            r7 = 0
            r1 = r44
            r3 = r10
            r1.applySoundSettings(r2, r3, r4, r6, r7)
        L_0x05d9:
            org.telegram.messenger.MessagesStorage r1 = r44.getMessagesStorage()
            r1.updateMutedDialogsFiltersCounters()
            r27 = r10
            goto L_0x05e5
        L_0x05e3:
            r13 = r6
            r12 = 1
        L_0x05e5:
            r3 = 0
            r6 = 2
            goto L_0x0e16
        L_0x05e9:
            r13 = r6
            r12 = 1
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updateChannel
            if (r0 == 0) goto L_0x068b
            r0 = r13
            org.telegram.tgnet.TLRPC$TL_updateChannel r0 = (org.telegram.tgnet.TLRPC.TL_updateChannel) r0
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r1 = r8.dialogs_dict
            long r2 = r0.channel_id
            long r2 = -r2
            java.lang.Object r1 = r1.get(r2)
            org.telegram.tgnet.TLRPC$Dialog r1 = (org.telegram.tgnet.TLRPC.Dialog) r1
            long r2 = r0.channel_id
            java.lang.Long r2 = java.lang.Long.valueOf(r2)
            org.telegram.tgnet.TLRPC$Chat r2 = r8.getChat(r2)
            if (r2 == 0) goto L_0x067b
            if (r1 != 0) goto L_0x061e
            boolean r3 = r2 instanceof org.telegram.tgnet.TLRPC.TL_channel
            if (r3 == 0) goto L_0x061e
            boolean r3 = r2.left
            if (r3 != 0) goto L_0x061e
            org.telegram.messenger.DispatchQueue r3 = org.telegram.messenger.Utilities.stageQueue
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda85 r4 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda85
            r4.<init>(r8, r0)
            r3.postRunnable(r4)
            goto L_0x0638
        L_0x061e:
            boolean r3 = org.telegram.messenger.ChatObject.isNotInChat(r2)
            if (r3 == 0) goto L_0x0638
            if (r1 == 0) goto L_0x0638
            org.telegram.tgnet.TLRPC$Dialog r3 = r8.promoDialog
            if (r3 == 0) goto L_0x0632
            long r3 = r3.id
            long r5 = r1.id
            int r7 = (r3 > r5 ? 1 : (r3 == r5 ? 0 : -1))
            if (r7 == 0) goto L_0x0638
        L_0x0632:
            long r3 = r1.id
            r5 = 0
            r8.deleteDialog(r3, r5)
        L_0x0638:
            boolean r3 = r2 instanceof org.telegram.tgnet.TLRPC.TL_channelForbidden
            if (r3 != 0) goto L_0x0640
            boolean r3 = r2.kicked
            if (r3 == 0) goto L_0x067b
        L_0x0640:
            long r3 = r2.id
            r5 = 0
            org.telegram.messenger.ChatObject$Call r3 = r8.getGroupCall(r3, r5)
            if (r3 == 0) goto L_0x067b
            org.telegram.tgnet.TLRPC$TL_updateGroupCall r4 = new org.telegram.tgnet.TLRPC$TL_updateGroupCall
            r4.<init>()
            long r5 = r2.id
            r4.chat_id = r5
            org.telegram.tgnet.TLRPC$TL_groupCallDiscarded r5 = new org.telegram.tgnet.TLRPC$TL_groupCallDiscarded
            r5.<init>()
            r4.call = r5
            org.telegram.tgnet.TLRPC$GroupCall r5 = r4.call
            org.telegram.tgnet.TLRPC$GroupCall r6 = r3.call
            long r6 = r6.id
            r5.id = r6
            org.telegram.tgnet.TLRPC$GroupCall r5 = r4.call
            org.telegram.tgnet.TLRPC$GroupCall r6 = r3.call
            long r6 = r6.access_hash
            r5.access_hash = r6
            r3.processGroupCallUpdate(r4)
            org.telegram.messenger.voip.VoIPService r5 = org.telegram.messenger.voip.VoIPService.getSharedInstance()
            if (r5 == 0) goto L_0x067b
            org.telegram.messenger.voip.VoIPService r5 = org.telegram.messenger.voip.VoIPService.getSharedInstance()
            org.telegram.tgnet.TLRPC$GroupCall r6 = r4.call
            r5.onGroupCallUpdated(r6)
        L_0x067b:
            int r3 = UPDATE_MASK_CHAT
            r3 = r21 | r3
            long r4 = r0.channel_id
            r6 = 0
            r8.loadFullChat(r4, r6, r12)
            r21 = r3
            r3 = 0
            r6 = 2
            goto L_0x0e16
        L_0x068b:
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updateChat
            if (r0 == 0) goto L_0x070a
            r0 = r13
            org.telegram.tgnet.TLRPC$TL_updateChat r0 = (org.telegram.tgnet.TLRPC.TL_updateChat) r0
            long r1 = r0.chat_id
            java.lang.Long r1 = java.lang.Long.valueOf(r1)
            org.telegram.tgnet.TLRPC$Chat r1 = r8.getChat(r1)
            if (r1 == 0) goto L_0x06fa
            boolean r2 = r1 instanceof org.telegram.tgnet.TLRPC.TL_chatForbidden
            if (r2 != 0) goto L_0x06a9
            boolean r2 = r1.kicked
            if (r2 == 0) goto L_0x06a7
            goto L_0x06a9
        L_0x06a7:
            r6 = 0
            goto L_0x06fb
        L_0x06a9:
            long r2 = r1.id
            r4 = 0
            org.telegram.messenger.ChatObject$Call r2 = r8.getGroupCall(r2, r4)
            if (r2 == 0) goto L_0x06e4
            org.telegram.tgnet.TLRPC$TL_updateGroupCall r3 = new org.telegram.tgnet.TLRPC$TL_updateGroupCall
            r3.<init>()
            long r4 = r1.id
            r3.chat_id = r4
            org.telegram.tgnet.TLRPC$TL_groupCallDiscarded r4 = new org.telegram.tgnet.TLRPC$TL_groupCallDiscarded
            r4.<init>()
            r3.call = r4
            org.telegram.tgnet.TLRPC$GroupCall r4 = r3.call
            org.telegram.tgnet.TLRPC$GroupCall r5 = r2.call
            long r5 = r5.id
            r4.id = r5
            org.telegram.tgnet.TLRPC$GroupCall r4 = r3.call
            org.telegram.tgnet.TLRPC$GroupCall r5 = r2.call
            long r5 = r5.access_hash
            r4.access_hash = r5
            r2.processGroupCallUpdate(r3)
            org.telegram.messenger.voip.VoIPService r4 = org.telegram.messenger.voip.VoIPService.getSharedInstance()
            if (r4 == 0) goto L_0x06e4
            org.telegram.messenger.voip.VoIPService r4 = org.telegram.messenger.voip.VoIPService.getSharedInstance()
            org.telegram.tgnet.TLRPC$GroupCall r5 = r3.call
            r4.onGroupCallUpdated(r5)
        L_0x06e4:
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r3 = r8.dialogs_dict
            long r4 = r1.id
            long r4 = -r4
            java.lang.Object r3 = r3.get(r4)
            org.telegram.tgnet.TLRPC$Dialog r3 = (org.telegram.tgnet.TLRPC.Dialog) r3
            if (r3 == 0) goto L_0x06f8
            long r4 = r3.id
            r6 = 0
            r8.deleteDialog(r4, r6)
            goto L_0x06fb
        L_0x06f8:
            r6 = 0
            goto L_0x06fb
        L_0x06fa:
            r6 = 0
        L_0x06fb:
            int r2 = UPDATE_MASK_CHAT
            r2 = r21 | r2
            long r3 = r0.chat_id
            r8.loadFullChat(r3, r6, r12)
            r21 = r2
            r3 = 0
            r6 = 2
            goto L_0x0e16
        L_0x070a:
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updateChatDefaultBannedRights
            if (r0 == 0) goto L_0x073e
            r0 = r13
            org.telegram.tgnet.TLRPC$TL_updateChatDefaultBannedRights r0 = (org.telegram.tgnet.TLRPC.TL_updateChatDefaultBannedRights) r0
            org.telegram.tgnet.TLRPC$Peer r1 = r0.peer
            long r1 = r1.channel_id
            r3 = 0
            int r5 = (r1 > r3 ? 1 : (r1 == r3 ? 0 : -1))
            if (r5 == 0) goto L_0x0720
            org.telegram.tgnet.TLRPC$Peer r1 = r0.peer
            long r1 = r1.channel_id
            goto L_0x0724
        L_0x0720:
            org.telegram.tgnet.TLRPC$Peer r1 = r0.peer
            long r1 = r1.chat_id
        L_0x0724:
            java.lang.Long r3 = java.lang.Long.valueOf(r1)
            org.telegram.tgnet.TLRPC$Chat r3 = r8.getChat(r3)
            if (r3 == 0) goto L_0x073a
            org.telegram.tgnet.TLRPC$TL_chatBannedRights r4 = r0.default_banned_rights
            r3.default_banned_rights = r4
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda53 r4 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda53
            r4.<init>(r8, r3)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r4)
        L_0x073a:
            r3 = 0
            r6 = 2
            goto L_0x0e16
        L_0x073e:
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updateBotCommands
            if (r0 == 0) goto L_0x0756
            r0 = r13
            org.telegram.tgnet.TLRPC$TL_updateBotCommands r0 = (org.telegram.tgnet.TLRPC.TL_updateBotCommands) r0
            org.telegram.messenger.MediaDataController r1 = r44.getMediaDataController()
            org.telegram.tgnet.TLRPC$Peer r2 = r0.peer
            long r2 = org.telegram.messenger.MessageObject.getPeerId(r2)
            r1.updateBotInfo(r2, r0)
            r3 = 0
            r6 = 2
            goto L_0x0e16
        L_0x0756:
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updateStickerSets
            if (r0 == 0) goto L_0x0769
            r0 = r13
            org.telegram.tgnet.TLRPC$TL_updateStickerSets r0 = (org.telegram.tgnet.TLRPC.TL_updateStickerSets) r0
            org.telegram.messenger.MediaDataController r1 = r44.getMediaDataController()
            r2 = 0
            r1.loadStickers(r2, r2, r12)
            r3 = 0
            r6 = 2
            goto L_0x0e16
        L_0x0769:
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updateStickerSetsOrder
            if (r0 == 0) goto L_0x0782
            r0 = r13
            org.telegram.tgnet.TLRPC$TL_updateStickerSetsOrder r0 = (org.telegram.tgnet.TLRPC.TL_updateStickerSetsOrder) r0
            org.telegram.messenger.MediaDataController r1 = r44.getMediaDataController()
            boolean r2 = r0.masks
            r3 = r13
            org.telegram.tgnet.TLRPC$TL_updateStickerSetsOrder r3 = (org.telegram.tgnet.TLRPC.TL_updateStickerSetsOrder) r3
            java.util.ArrayList<java.lang.Long> r3 = r3.order
            r1.reorderStickers(r2, r3)
            r3 = 0
            r6 = 2
            goto L_0x0e16
        L_0x0782:
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updateFavedStickers
            if (r0 == 0) goto L_0x0793
            org.telegram.messenger.MediaDataController r0 = r44.getMediaDataController()
            r1 = 2
            r2 = 0
            r0.loadRecents(r1, r2, r2, r12)
            r3 = 0
            r6 = 2
            goto L_0x0e16
        L_0x0793:
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updateContactsReset
            if (r0 == 0) goto L_0x07a2
            org.telegram.messenger.ContactsController r0 = r44.getContactsController()
            r0.forceImportContacts()
            r3 = 0
            r6 = 2
            goto L_0x0e16
        L_0x07a2:
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updateNewStickerSet
            if (r0 == 0) goto L_0x07b6
            r0 = r13
            org.telegram.tgnet.TLRPC$TL_updateNewStickerSet r0 = (org.telegram.tgnet.TLRPC.TL_updateNewStickerSet) r0
            org.telegram.messenger.MediaDataController r1 = r44.getMediaDataController()
            org.telegram.tgnet.TLRPC$TL_messages_stickerSet r2 = r0.stickerset
            r1.addNewStickerSet(r2)
            r3 = 0
            r6 = 2
            goto L_0x0e16
        L_0x07b6:
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updateSavedGifs
            if (r0 == 0) goto L_0x07cf
            android.content.SharedPreferences r0 = r8.emojiPreferences
            android.content.SharedPreferences$Editor r0 = r0.edit()
            java.lang.String r1 = "lastGifLoadTime"
            r2 = 0
            android.content.SharedPreferences$Editor r1 = r0.putLong(r1, r2)
            r1.commit()
            r3 = 0
            r6 = 2
            goto L_0x0e16
        L_0x07cf:
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updateRecentStickers
            if (r0 == 0) goto L_0x07e8
            android.content.SharedPreferences r0 = r8.emojiPreferences
            android.content.SharedPreferences$Editor r0 = r0.edit()
            java.lang.String r1 = "lastStickersLoadTime"
            r2 = 0
            android.content.SharedPreferences$Editor r1 = r0.putLong(r1, r2)
            r1.commit()
            r3 = 0
            r6 = 2
            goto L_0x0e16
        L_0x07e8:
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updateDraftMessage
            if (r0 == 0) goto L_0x0826
            r0 = r13
            org.telegram.tgnet.TLRPC$TL_updateDraftMessage r0 = (org.telegram.tgnet.TLRPC.TL_updateDraftMessage) r0
            r1 = 1
            r2 = r13
            org.telegram.tgnet.TLRPC$TL_updateDraftMessage r2 = (org.telegram.tgnet.TLRPC.TL_updateDraftMessage) r2
            org.telegram.tgnet.TLRPC$Peer r2 = r2.peer
            long r3 = r2.user_id
            r5 = 0
            int r7 = (r3 > r5 ? 1 : (r3 == r5 ? 0 : -1))
            if (r7 == 0) goto L_0x0800
            long r3 = r2.user_id
            goto L_0x080d
        L_0x0800:
            long r3 = r2.channel_id
            int r7 = (r3 > r5 ? 1 : (r3 == r5 ? 0 : -1))
            if (r7 == 0) goto L_0x080a
            long r3 = r2.channel_id
            long r3 = -r3
            goto L_0x080d
        L_0x080a:
            long r3 = r2.chat_id
            long r3 = -r3
        L_0x080d:
            org.telegram.messenger.MediaDataController r36 = r44.getMediaDataController()
            r39 = 0
            org.telegram.tgnet.TLRPC$DraftMessage r5 = r0.draft
            r41 = 0
            r42 = 1
            r37 = r3
            r40 = r5
            r36.saveDraft(r37, r39, r40, r41, r42)
            r24 = r1
            r3 = 0
            r6 = 2
            goto L_0x0e16
        L_0x0826:
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updateReadFeaturedStickers
            if (r0 == 0) goto L_0x0836
            org.telegram.messenger.MediaDataController r0 = r44.getMediaDataController()
            r1 = 0
            r0.markFaturedStickersAsRead(r1)
            r3 = 0
            r6 = 2
            goto L_0x0e16
        L_0x0836:
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updatePhoneCallSignalingData
            if (r0 == 0) goto L_0x084a
            r0 = r13
            org.telegram.tgnet.TLRPC$TL_updatePhoneCallSignalingData r0 = (org.telegram.tgnet.TLRPC.TL_updatePhoneCallSignalingData) r0
            org.telegram.messenger.voip.VoIPService r1 = org.telegram.messenger.voip.VoIPService.getSharedInstance()
            if (r1 == 0) goto L_0x0846
            r1.onSignalingData((org.telegram.tgnet.TLRPC.TL_updatePhoneCallSignalingData) r0)
        L_0x0846:
            r3 = 0
            r6 = 2
            goto L_0x0e16
        L_0x084a:
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updateGroupCallParticipants
            if (r0 == 0) goto L_0x0874
            r0 = r13
            org.telegram.tgnet.TLRPC$TL_updateGroupCallParticipants r0 = (org.telegram.tgnet.TLRPC.TL_updateGroupCallParticipants) r0
            androidx.collection.LongSparseArray<org.telegram.messenger.ChatObject$Call> r1 = r8.groupCalls
            org.telegram.tgnet.TLRPC$TL_inputGroupCall r2 = r0.call
            long r2 = r2.id
            java.lang.Object r1 = r1.get(r2)
            org.telegram.messenger.ChatObject$Call r1 = (org.telegram.messenger.ChatObject.Call) r1
            if (r1 == 0) goto L_0x0863
            r2 = 0
            r1.processParticipantsUpdate(r0, r2)
        L_0x0863:
            org.telegram.messenger.voip.VoIPService r2 = org.telegram.messenger.voip.VoIPService.getSharedInstance()
            if (r2 == 0) goto L_0x0870
            org.telegram.messenger.voip.VoIPService r2 = org.telegram.messenger.voip.VoIPService.getSharedInstance()
            r2.onGroupCallParticipantsUpdate(r0)
        L_0x0870:
            r3 = 0
            r6 = 2
            goto L_0x0e16
        L_0x0874:
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updateGroupCall
            if (r0 == 0) goto L_0x08d4
            r0 = r13
            org.telegram.tgnet.TLRPC$TL_updateGroupCall r0 = (org.telegram.tgnet.TLRPC.TL_updateGroupCall) r0
            androidx.collection.LongSparseArray<org.telegram.messenger.ChatObject$Call> r1 = r8.groupCalls
            org.telegram.tgnet.TLRPC$GroupCall r2 = r0.call
            long r2 = r2.id
            java.lang.Object r1 = r1.get(r2)
            org.telegram.messenger.ChatObject$Call r1 = (org.telegram.messenger.ChatObject.Call) r1
            if (r1 == 0) goto L_0x089f
            r1.processGroupCallUpdate(r0)
            long r2 = r1.chatId
            java.lang.Long r2 = java.lang.Long.valueOf(r2)
            org.telegram.tgnet.TLRPC$Chat r2 = r8.getChat(r2)
            if (r2 == 0) goto L_0x089e
            org.telegram.tgnet.TLRPC$GroupCall r3 = r0.call
            boolean r3 = r3 instanceof org.telegram.tgnet.TLRPC.TL_groupCall
            r2.call_active = r3
        L_0x089e:
            goto L_0x08c1
        L_0x089f:
            long r2 = r0.chat_id
            org.telegram.tgnet.TLRPC$ChatFull r2 = r8.getChatFull(r2)
            if (r2 == 0) goto L_0x08c1
            org.telegram.tgnet.TLRPC$TL_inputGroupCall r3 = r2.call
            if (r3 == 0) goto L_0x08bb
            org.telegram.tgnet.TLRPC$TL_inputGroupCall r3 = r2.call
            if (r3 == 0) goto L_0x08c1
            org.telegram.tgnet.TLRPC$TL_inputGroupCall r3 = r2.call
            long r3 = r3.id
            org.telegram.tgnet.TLRPC$GroupCall r5 = r0.call
            long r5 = r5.id
            int r7 = (r3 > r5 ? 1 : (r3 == r5 ? 0 : -1))
            if (r7 == 0) goto L_0x08c1
        L_0x08bb:
            long r3 = r0.chat_id
            r5 = 0
            r8.loadFullChat(r3, r5, r12)
        L_0x08c1:
            org.telegram.messenger.voip.VoIPService r2 = org.telegram.messenger.voip.VoIPService.getSharedInstance()
            if (r2 == 0) goto L_0x08d0
            org.telegram.messenger.voip.VoIPService r2 = org.telegram.messenger.voip.VoIPService.getSharedInstance()
            org.telegram.tgnet.TLRPC$GroupCall r3 = r0.call
            r2.onGroupCallUpdated(r3)
        L_0x08d0:
            r3 = 0
            r6 = 2
            goto L_0x0e16
        L_0x08d4:
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updatePhoneCall
            if (r0 == 0) goto L_0x0a65
            r1 = r13
            org.telegram.tgnet.TLRPC$TL_updatePhoneCall r1 = (org.telegram.tgnet.TLRPC.TL_updatePhoneCall) r1
            org.telegram.tgnet.TLRPC$PhoneCall r2 = r1.phone_call
            org.telegram.messenger.voip.VoIPService r3 = org.telegram.messenger.voip.VoIPService.getSharedInstance()
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x090f
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r4 = "Received call in update: "
            r0.append(r4)
            r0.append(r2)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r4 = "call id "
            r0.append(r4)
            long r4 = r2.id
            r0.append(r4)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x090f:
            boolean r0 = r2 instanceof org.telegram.tgnet.TLRPC.TL_phoneCallRequested
            if (r0 == 0) goto L_0x0a40
            int r0 = r2.date
            int r4 = r8.callRingTimeout
            int r4 = r4 / 1000
            int r0 = r0 + r4
            org.telegram.tgnet.ConnectionsManager r4 = r44.getConnectionsManager()
            int r4 = r4.getCurrentTime()
            if (r0 >= r4) goto L_0x0935
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0931
            java.lang.String r0 = "ignoring too old call"
            org.telegram.messenger.FileLog.d(r0)
            r3 = 0
            r6 = 2
            goto L_0x0e16
        L_0x0931:
            r3 = 0
            r6 = 2
            goto L_0x0e16
        L_0x0935:
            r0 = 0
            int r4 = android.os.Build.VERSION.SDK_INT
            r5 = 21
            if (r4 < r5) goto L_0x0965
            android.content.Context r4 = org.telegram.messenger.ApplicationLoader.applicationContext
            androidx.core.app.NotificationManagerCompat r4 = androidx.core.app.NotificationManagerCompat.from(r4)
            boolean r4 = r4.areNotificationsEnabled()
            if (r4 != 0) goto L_0x0965
            r0 = 1
            boolean r4 = org.telegram.messenger.ApplicationLoader.mainInterfacePaused
            if (r4 != 0) goto L_0x0954
            boolean r4 = org.telegram.messenger.ApplicationLoader.isScreenOn
            if (r4 != 0) goto L_0x0952
            goto L_0x0954
        L_0x0952:
            r4 = r0
            goto L_0x0966
        L_0x0954:
            boolean r4 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r4 == 0) goto L_0x0961
            java.lang.String r4 = "Ignoring incoming call because notifications are disabled in system"
            org.telegram.messenger.FileLog.d(r4)
            r3 = 0
            r6 = 2
            goto L_0x0e16
        L_0x0961:
            r3 = 0
            r6 = 2
            goto L_0x0e16
        L_0x0965:
            r4 = r0
        L_0x0966:
            android.content.Context r0 = org.telegram.messenger.ApplicationLoader.applicationContext
            java.lang.String r5 = "phone"
            java.lang.Object r0 = r0.getSystemService(r5)
            r5 = r0
            android.telephony.TelephonyManager r5 = (android.telephony.TelephonyManager) r5
            if (r3 != 0) goto L_0x09f2
            org.telegram.tgnet.TLRPC$PhoneCall r0 = org.telegram.messenger.voip.VoIPService.callIShouldHavePutIntoIntent
            if (r0 != 0) goto L_0x09f2
            int r0 = r5.getCallState()
            if (r0 == 0) goto L_0x097f
            goto L_0x09f2
        L_0x097f:
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0999
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r6 = "Starting service for call "
            r0.append(r6)
            long r6 = r2.id
            r0.append(r6)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x0999:
            org.telegram.messenger.voip.VoIPService.callIShouldHavePutIntoIntent = r2
            android.content.Intent r0 = new android.content.Intent
            android.content.Context r6 = org.telegram.messenger.ApplicationLoader.applicationContext
            java.lang.Class<org.telegram.messenger.voip.VoIPService> r7 = org.telegram.messenger.voip.VoIPService.class
            r0.<init>(r6, r7)
            r6 = r0
            java.lang.String r0 = "is_outgoing"
            r7 = 0
            r6.putExtra(r0, r7)
            long r14 = r2.participant_id
            org.telegram.messenger.UserConfig r0 = r44.getUserConfig()
            long r17 = r0.getClientUserId()
            int r0 = (r14 > r17 ? 1 : (r14 == r17 ? 0 : -1))
            if (r0 != 0) goto L_0x09bc
            long r14 = r2.admin_id
            goto L_0x09be
        L_0x09bc:
            long r14 = r2.participant_id
        L_0x09be:
            java.lang.String r0 = "user_id"
            r6.putExtra(r0, r14)
            int r0 = r8.currentAccount
            java.lang.String r7 = "account"
            r6.putExtra(r7, r0)
            java.lang.String r0 = "notifications_disabled"
            r6.putExtra(r0, r4)
            if (r4 != 0) goto L_0x09dd
            int r0 = android.os.Build.VERSION.SDK_INT     // Catch:{ all -> 0x09ed }
            r7 = 26
            if (r0 < r7) goto L_0x09dd
            android.content.Context r0 = org.telegram.messenger.ApplicationLoader.applicationContext     // Catch:{ all -> 0x09ed }
            r0.startForegroundService(r6)     // Catch:{ all -> 0x09ed }
            goto L_0x09e2
        L_0x09dd:
            android.content.Context r0 = org.telegram.messenger.ApplicationLoader.applicationContext     // Catch:{ all -> 0x09ed }
            r0.startService(r6)     // Catch:{ all -> 0x09ed }
        L_0x09e2:
            boolean r0 = org.telegram.messenger.ApplicationLoader.mainInterfacePaused     // Catch:{ all -> 0x09ed }
            if (r0 != 0) goto L_0x09ea
            boolean r0 = org.telegram.messenger.ApplicationLoader.isScreenOn     // Catch:{ all -> 0x09ed }
            if (r0 != 0) goto L_0x09ec
        L_0x09ea:
            r8.ignoreSetOnline = r12     // Catch:{ all -> 0x09ed }
        L_0x09ec:
            goto L_0x09f1
        L_0x09ed:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
        L_0x09f1:
            goto L_0x0a61
        L_0x09f2:
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0a11
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            java.lang.String r6 = "Auto-declining call "
            r0.append(r6)
            long r6 = r2.id
            r0.append(r6)
            java.lang.String r6 = " because there's already active one"
            r0.append(r6)
            java.lang.String r0 = r0.toString()
            org.telegram.messenger.FileLog.d(r0)
        L_0x0a11:
            org.telegram.tgnet.TLRPC$TL_phone_discardCall r0 = new org.telegram.tgnet.TLRPC$TL_phone_discardCall
            r0.<init>()
            org.telegram.tgnet.TLRPC$TL_inputPhoneCall r6 = new org.telegram.tgnet.TLRPC$TL_inputPhoneCall
            r6.<init>()
            r0.peer = r6
            org.telegram.tgnet.TLRPC$TL_inputPhoneCall r6 = r0.peer
            long r14 = r2.access_hash
            r6.access_hash = r14
            org.telegram.tgnet.TLRPC$TL_inputPhoneCall r6 = r0.peer
            long r14 = r2.id
            r6.id = r14
            org.telegram.tgnet.TLRPC$TL_phoneCallDiscardReasonBusy r6 = new org.telegram.tgnet.TLRPC$TL_phoneCallDiscardReasonBusy
            r6.<init>()
            r0.reason = r6
            org.telegram.tgnet.ConnectionsManager r6 = r44.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda165 r7 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda165
            r7.<init>(r8)
            r6.sendRequest(r0, r7)
            r3 = 0
            r6 = 2
            goto L_0x0e16
        L_0x0a40:
            if (r3 == 0) goto L_0x0a48
            if (r2 == 0) goto L_0x0a48
            r3.onCallUpdated(r2)
            goto L_0x0a61
        L_0x0a48:
            org.telegram.tgnet.TLRPC$PhoneCall r0 = org.telegram.messenger.voip.VoIPService.callIShouldHavePutIntoIntent
            if (r0 == 0) goto L_0x0a61
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r0 == 0) goto L_0x0a55
            java.lang.String r0 = "Updated the call while the service is starting"
            org.telegram.messenger.FileLog.d(r0)
        L_0x0a55:
            long r4 = r2.id
            org.telegram.tgnet.TLRPC$PhoneCall r0 = org.telegram.messenger.voip.VoIPService.callIShouldHavePutIntoIntent
            long r6 = r0.id
            int r0 = (r4 > r6 ? 1 : (r4 == r6 ? 0 : -1))
            if (r0 != 0) goto L_0x0a61
            org.telegram.messenger.voip.VoIPService.callIShouldHavePutIntoIntent = r2
        L_0x0a61:
            r3 = 0
            r6 = 2
            goto L_0x0e16
        L_0x0a65:
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updateDialogUnreadMark
            if (r0 == 0) goto L_0x0add
            r0 = r13
            org.telegram.tgnet.TLRPC$TL_updateDialogUnreadMark r0 = (org.telegram.tgnet.TLRPC.TL_updateDialogUnreadMark) r0
            org.telegram.tgnet.TLRPC$DialogPeer r1 = r0.peer
            boolean r1 = r1 instanceof org.telegram.tgnet.TLRPC.TL_dialogPeer
            if (r1 == 0) goto L_0x0a99
            org.telegram.tgnet.TLRPC$DialogPeer r1 = r0.peer
            org.telegram.tgnet.TLRPC$TL_dialogPeer r1 = (org.telegram.tgnet.TLRPC.TL_dialogPeer) r1
            org.telegram.tgnet.TLRPC$Peer r2 = r1.peer
            long r2 = r2.user_id
            r4 = 0
            int r6 = (r2 > r4 ? 1 : (r2 == r4 ? 0 : -1))
            if (r6 == 0) goto L_0x0a85
            org.telegram.tgnet.TLRPC$Peer r2 = r1.peer
            long r2 = r2.user_id
            goto L_0x0a98
        L_0x0a85:
            org.telegram.tgnet.TLRPC$Peer r2 = r1.peer
            long r2 = r2.chat_id
            int r6 = (r2 > r4 ? 1 : (r2 == r4 ? 0 : -1))
            if (r6 == 0) goto L_0x0a93
            org.telegram.tgnet.TLRPC$Peer r2 = r1.peer
            long r2 = r2.chat_id
            long r2 = -r2
            goto L_0x0a98
        L_0x0a93:
            org.telegram.tgnet.TLRPC$Peer r2 = r1.peer
            long r2 = r2.channel_id
            long r2 = -r2
        L_0x0a98:
            goto L_0x0a9b
        L_0x0a99:
            r2 = 0
        L_0x0a9b:
            org.telegram.messenger.MessagesStorage r1 = r44.getMessagesStorage()
            boolean r4 = r0.unread
            r1.setDialogUnread(r2, r4)
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r1 = r8.dialogs_dict
            java.lang.Object r1 = r1.get(r2)
            org.telegram.tgnet.TLRPC$Dialog r1 = (org.telegram.tgnet.TLRPC.Dialog) r1
            if (r1 == 0) goto L_0x0ad9
            boolean r4 = r1.unread_mark
            boolean r5 = r0.unread
            if (r4 == r5) goto L_0x0ad9
            boolean r4 = r0.unread
            r1.unread_mark = r4
            int r4 = r1.unread_count
            if (r4 != 0) goto L_0x0ad1
            boolean r4 = r8.isDialogMuted(r2)
            if (r4 != 0) goto L_0x0ad1
            boolean r4 = r1.unread_mark
            if (r4 == 0) goto L_0x0acc
            int r4 = r8.unreadUnmutedDialogs
            int r4 = r4 + r12
            r8.unreadUnmutedDialogs = r4
            goto L_0x0ad1
        L_0x0acc:
            int r4 = r8.unreadUnmutedDialogs
            int r4 = r4 - r12
            r8.unreadUnmutedDialogs = r4
        L_0x0ad1:
            int r4 = UPDATE_MASK_READ_DIALOG_MESSAGE
            r21 = r21 | r4
            int r4 = DIALOG_FILTER_FLAG_EXCLUDE_READ
            r26 = r26 | r4
        L_0x0ad9:
            r3 = 0
            r6 = 2
            goto L_0x0e16
        L_0x0add:
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updateMessagePoll
            if (r0 == 0) goto L_0x0b06
            r0 = r13
            org.telegram.tgnet.TLRPC$TL_updateMessagePoll r0 = (org.telegram.tgnet.TLRPC.TL_updateMessagePoll) r0
            org.telegram.messenger.NotificationCenter r1 = r44.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.didUpdatePollResults
            r3 = 3
            java.lang.Object[] r4 = new java.lang.Object[r3]
            long r5 = r0.poll_id
            java.lang.Long r3 = java.lang.Long.valueOf(r5)
            r5 = 0
            r4[r5] = r3
            org.telegram.tgnet.TLRPC$Poll r3 = r0.poll
            r4[r12] = r3
            org.telegram.tgnet.TLRPC$PollResults r3 = r0.results
            r5 = 2
            r4[r5] = r3
            r1.postNotificationName(r2, r4)
            r3 = 0
            r6 = 2
            goto L_0x0e16
        L_0x0b06:
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updatePeerSettings
            if (r0 == 0) goto L_0x0b32
            r0 = r13
            org.telegram.tgnet.TLRPC$TL_updatePeerSettings r0 = (org.telegram.tgnet.TLRPC.TL_updatePeerSettings) r0
            org.telegram.tgnet.TLRPC$Peer r1 = r0.peer
            boolean r1 = r1 instanceof org.telegram.tgnet.TLRPC.TL_peerUser
            if (r1 == 0) goto L_0x0b18
            org.telegram.tgnet.TLRPC$Peer r1 = r0.peer
            long r1 = r1.user_id
            goto L_0x0b29
        L_0x0b18:
            org.telegram.tgnet.TLRPC$Peer r1 = r0.peer
            boolean r1 = r1 instanceof org.telegram.tgnet.TLRPC.TL_peerChat
            if (r1 == 0) goto L_0x0b24
            org.telegram.tgnet.TLRPC$Peer r1 = r0.peer
            long r1 = r1.chat_id
            long r1 = -r1
            goto L_0x0b29
        L_0x0b24:
            org.telegram.tgnet.TLRPC$Peer r1 = r0.peer
            long r1 = r1.channel_id
            long r1 = -r1
        L_0x0b29:
            org.telegram.tgnet.TLRPC$TL_peerSettings r3 = r0.settings
            r8.savePeerSettings(r1, r3, r12)
            r3 = 0
            r6 = 2
            goto L_0x0e16
        L_0x0b32:
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updatePeerLocated
            if (r0 == 0) goto L_0x0b48
            org.telegram.messenger.NotificationCenter r0 = r44.getNotificationCenter()
            int r1 = org.telegram.messenger.NotificationCenter.newPeopleNearbyAvailable
            java.lang.Object[] r2 = new java.lang.Object[r12]
            r3 = 0
            r2[r3] = r13
            r0.postNotificationName(r1, r2)
            r3 = 0
            r6 = 2
            goto L_0x0e16
        L_0x0b48:
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updateMessageReactions
            if (r0 == 0) goto L_0x0b79
            r0 = r13
            org.telegram.tgnet.TLRPC$TL_updateMessageReactions r0 = (org.telegram.tgnet.TLRPC.TL_updateMessageReactions) r0
            org.telegram.tgnet.TLRPC$Peer r1 = r0.peer
            long r1 = org.telegram.messenger.MessageObject.getPeerId(r1)
            org.telegram.messenger.NotificationCenter r3 = r44.getNotificationCenter()
            int r4 = org.telegram.messenger.NotificationCenter.didUpdateReactions
            r5 = 3
            java.lang.Object[] r6 = new java.lang.Object[r5]
            java.lang.Long r5 = java.lang.Long.valueOf(r1)
            r7 = 0
            r6[r7] = r5
            int r5 = r0.msg_id
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)
            r6[r12] = r5
            org.telegram.tgnet.TLRPC$TL_messageReactions r5 = r0.reactions
            r7 = 2
            r6[r7] = r5
            r3.postNotificationName(r4, r6)
            r3 = 0
            r6 = 2
            goto L_0x0e16
        L_0x0b79:
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updateTheme
            if (r0 == 0) goto L_0x0b8d
            r0 = r13
            org.telegram.tgnet.TLRPC$TL_updateTheme r0 = (org.telegram.tgnet.TLRPC.TL_updateTheme) r0
            org.telegram.tgnet.TLRPC$Theme r1 = r0.theme
            org.telegram.tgnet.TLRPC$TL_theme r1 = (org.telegram.tgnet.TLRPC.TL_theme) r1
            int r2 = r8.currentAccount
            r3 = 0
            org.telegram.ui.ActionBar.Theme.setThemeUploadInfo(r3, r3, r1, r2, r12)
            r6 = 2
            goto L_0x0e16
        L_0x0b8d:
            r3 = 0
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updateDialogFilter
            if (r0 == 0) goto L_0x0b98
            r8.loadRemoteFilters(r12)
            r6 = 2
            goto L_0x0e16
        L_0x0b98:
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updateDialogFilterOrder
            if (r0 == 0) goto L_0x0ba2
            r8.loadRemoteFilters(r12)
            r6 = 2
            goto L_0x0e16
        L_0x0ba2:
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updateDialogFilters
            if (r0 == 0) goto L_0x0bac
            r8.loadRemoteFilters(r12)
            r6 = 2
            goto L_0x0e16
        L_0x0bac:
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updateWebViewResultSent
            if (r0 == 0) goto L_0x0bca
            r0 = r13
            org.telegram.tgnet.TLRPC$TL_updateWebViewResultSent r0 = (org.telegram.tgnet.TLRPC.TL_updateWebViewResultSent) r0
            org.telegram.messenger.NotificationCenter r1 = r44.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.webViewResultSent
            java.lang.Object[] r4 = new java.lang.Object[r12]
            long r5 = r0.query_id
            java.lang.Long r5 = java.lang.Long.valueOf(r5)
            r6 = 0
            r4[r6] = r5
            r1.postNotificationName(r2, r4)
            r6 = 2
            goto L_0x0e16
        L_0x0bca:
            r6 = 0
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updateAttachMenuBots
            if (r0 == 0) goto L_0x0bd9
            org.telegram.messenger.MediaDataController r0 = r44.getMediaDataController()
            r0.loadAttachMenuBots(r6, r12)
            r6 = 2
            goto L_0x0e16
        L_0x0bd9:
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updateBotMenuButton
            if (r0 == 0) goto L_0x0bfc
            r0 = r13
            org.telegram.tgnet.TLRPC$TL_updateBotMenuButton r0 = (org.telegram.tgnet.TLRPC.TL_updateBotMenuButton) r0
            org.telegram.messenger.NotificationCenter r1 = r44.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.updateBotMenuButton
            r4 = 2
            java.lang.Object[] r5 = new java.lang.Object[r4]
            long r6 = r0.bot_id
            java.lang.Long r4 = java.lang.Long.valueOf(r6)
            r6 = 0
            r5[r6] = r4
            org.telegram.tgnet.TLRPC$BotMenuButton r4 = r0.button
            r5[r12] = r4
            r1.postNotificationName(r2, r5)
            r6 = 2
            goto L_0x0e16
        L_0x0bfc:
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updateReadChannelDiscussionInbox
            if (r0 == 0) goto L_0x0CLASSNAME
            r0 = r13
            org.telegram.tgnet.TLRPC$TL_updateReadChannelDiscussionInbox r0 = (org.telegram.tgnet.TLRPC.TL_updateReadChannelDiscussionInbox) r0
            org.telegram.messenger.NotificationCenter r1 = r44.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.threadMessagesRead
            r4 = 4
            java.lang.Object[] r5 = new java.lang.Object[r4]
            long r6 = r0.channel_id
            long r6 = -r6
            java.lang.Long r4 = java.lang.Long.valueOf(r6)
            r6 = 0
            r5[r6] = r4
            int r4 = r0.top_msg_id
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)
            r5[r12] = r4
            int r4 = r0.read_max_id
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)
            r6 = 2
            r5[r6] = r4
            r4 = 3
            r5[r4] = r19
            r1.postNotificationName(r2, r5)
            int r1 = r0.flags
            r1 = r1 & r12
            if (r1 == 0) goto L_0x0c6d
            org.telegram.messenger.MessagesStorage r35 = r44.getMessagesStorage()
            long r1 = r0.broadcast_id
            int r4 = r0.broadcast_post
            int r5 = r0.read_max_id
            r40 = 1
            r36 = r1
            r38 = r4
            r39 = r5
            r35.updateRepliesMaxReadId(r36, r38, r39, r40)
            org.telegram.messenger.NotificationCenter r1 = r44.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.commentsRead
            r4 = 3
            java.lang.Object[] r5 = new java.lang.Object[r4]
            long r6 = r0.broadcast_id
            java.lang.Long r4 = java.lang.Long.valueOf(r6)
            r6 = 0
            r5[r6] = r4
            int r4 = r0.broadcast_post
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)
            r5[r12] = r4
            int r4 = r0.read_max_id
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)
            r6 = 2
            r5[r6] = r4
            r1.postNotificationName(r2, r5)
        L_0x0c6d:
            r6 = 2
            goto L_0x0e16
        L_0x0CLASSNAME:
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updateReadChannelDiscussionOutbox
            if (r0 == 0) goto L_0x0ca4
            r0 = r13
            org.telegram.tgnet.TLRPC$TL_updateReadChannelDiscussionOutbox r0 = (org.telegram.tgnet.TLRPC.TL_updateReadChannelDiscussionOutbox) r0
            org.telegram.messenger.NotificationCenter r1 = r44.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.threadMessagesRead
            r4 = 4
            java.lang.Object[] r5 = new java.lang.Object[r4]
            long r6 = r0.channel_id
            long r6 = -r6
            java.lang.Long r4 = java.lang.Long.valueOf(r6)
            r6 = 0
            r5[r6] = r4
            int r4 = r0.top_msg_id
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)
            r5[r12] = r4
            r4 = 2
            r5[r4] = r19
            int r4 = r0.read_max_id
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)
            r6 = 3
            r5[r6] = r4
            r1.postNotificationName(r2, r5)
            r6 = 2
            goto L_0x0e16
        L_0x0ca4:
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updatePeerHistoryTTL
            if (r0 == 0) goto L_0x0d4c
            r0 = r13
            org.telegram.tgnet.TLRPC$TL_updatePeerHistoryTTL r0 = (org.telegram.tgnet.TLRPC.TL_updatePeerHistoryTTL) r0
            org.telegram.tgnet.TLRPC$Peer r1 = r0.peer
            long r1 = org.telegram.messenger.MessageObject.getPeerId(r1)
            r4 = 0
            r5 = 0
            r6 = 0
            int r10 = (r1 > r6 ? 1 : (r1 == r6 ? 0 : -1))
            if (r10 <= 0) goto L_0x0cd5
            org.telegram.tgnet.TLRPC$UserFull r5 = r8.getUserFull(r1)
            if (r5 == 0) goto L_0x0d0a
            int r10 = r0.ttl_period
            r5.ttl_period = r10
            int r10 = r5.ttl_period
            if (r10 != 0) goto L_0x0cce
            int r10 = r5.flags
            r10 = r10 & -16385(0xffffffffffffbfff, float:NaN)
            r5.flags = r10
            goto L_0x0d0a
        L_0x0cce:
            int r10 = r5.flags
            r10 = r10 | 16384(0x4000, float:2.2959E-41)
            r5.flags = r10
            goto L_0x0d0a
        L_0x0cd5:
            long r14 = -r1
            org.telegram.tgnet.TLRPC$ChatFull r4 = r8.getChatFull(r14)
            if (r4 == 0) goto L_0x0d0a
            int r10 = r0.ttl_period
            r4.ttl_period = r10
            boolean r10 = r4 instanceof org.telegram.tgnet.TLRPC.TL_channelFull
            if (r10 == 0) goto L_0x0cf9
            int r10 = r4.ttl_period
            if (r10 != 0) goto L_0x0cf1
            int r10 = r4.flags
            r14 = -16777217(0xfffffffffeffffff, float:-1.7014117E38)
            r10 = r10 & r14
            r4.flags = r10
            goto L_0x0d0a
        L_0x0cf1:
            int r10 = r4.flags
            r14 = 16777216(0x1000000, float:2.3509887E-38)
            r10 = r10 | r14
            r4.flags = r10
            goto L_0x0d0a
        L_0x0cf9:
            int r10 = r4.ttl_period
            if (r10 != 0) goto L_0x0d04
            int r10 = r4.flags
            r10 = r10 & -16385(0xffffffffffffbfff, float:NaN)
            r4.flags = r10
            goto L_0x0d0a
        L_0x0d04:
            int r10 = r4.flags
            r10 = r10 | 16384(0x4000, float:2.2959E-41)
            r4.flags = r10
        L_0x0d0a:
            if (r4 == 0) goto L_0x0d2b
            org.telegram.messenger.NotificationCenter r10 = r44.getNotificationCenter()
            int r14 = org.telegram.messenger.NotificationCenter.chatInfoDidLoad
            r15 = 4
            java.lang.Object[] r6 = new java.lang.Object[r15]
            r7 = 0
            r6[r7] = r4
            r6[r12] = r19
            r15 = 2
            r6[r15] = r20
            r15 = 3
            r6[r15] = r20
            r10.postNotificationName(r14, r6)
            org.telegram.messenger.MessagesStorage r6 = r44.getMessagesStorage()
            r6.updateChatInfo(r4, r7)
            goto L_0x0d49
        L_0x0d2b:
            r7 = 0
            if (r5 == 0) goto L_0x0d49
            org.telegram.messenger.NotificationCenter r6 = r44.getNotificationCenter()
            int r10 = org.telegram.messenger.NotificationCenter.userInfoDidLoad
            r14 = 2
            java.lang.Object[] r15 = new java.lang.Object[r14]
            java.lang.Long r14 = java.lang.Long.valueOf(r1)
            r15[r7] = r14
            r15[r12] = r5
            r6.postNotificationName(r10, r15)
            org.telegram.messenger.MessagesStorage r6 = r44.getMessagesStorage()
            r6.updateUserInfo(r5, r7)
        L_0x0d49:
            r6 = 2
            goto L_0x0e16
        L_0x0d4c:
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updatePendingJoinRequests
            if (r0 == 0) goto L_0x0d5d
            r0 = r13
            org.telegram.tgnet.TLRPC$TL_updatePendingJoinRequests r0 = (org.telegram.tgnet.TLRPC.TL_updatePendingJoinRequests) r0
            org.telegram.messenger.MemberRequestsController r1 = r44.getMemberRequestsController()
            r1.onPendingRequestsUpdated(r0)
            r6 = 2
            goto L_0x0e16
        L_0x0d5d:
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updateSavedRingtones
            if (r0 == 0) goto L_0x0d6d
            org.telegram.messenger.MediaDataController r0 = r44.getMediaDataController()
            org.telegram.messenger.ringtone.RingtoneDataStore r0 = r0.ringtoneDataStore
            r0.m2421lambda$new$0$orgtelegrammessengerringtoneRingtoneDataStore()
            r6 = 2
            goto L_0x0e16
        L_0x0d6d:
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updateTranscribeAudio
            if (r0 == 0) goto L_0x0d79
            java.lang.String r0 = "Received legacy TL_updateTranscribeAudio update"
            org.telegram.messenger.FileLog.e((java.lang.String) r0)
            r6 = 2
            goto L_0x0e16
        L_0x0d79:
            boolean r0 = r13 instanceof org.telegram.tgnet.TLRPC.TL_updateTranscribedAudio
            if (r0 == 0) goto L_0x0e15
            r0 = r13
            org.telegram.tgnet.TLRPC$TL_updateTranscribedAudio r0 = (org.telegram.tgnet.TLRPC.TL_updateTranscribedAudio) r0
            boolean r1 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r1 == 0) goto L_0x0dae
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            r1.<init>()
            java.lang.String r2 = "Transcription update received, pending="
            r1.append(r2)
            boolean r2 = r0.pending
            r1.append(r2)
            java.lang.String r2 = " id="
            r1.append(r2)
            long r4 = r0.transcription_id
            r1.append(r4)
            java.lang.String r2 = " text="
            r1.append(r2)
            java.lang.String r2 = r0.text
            r1.append(r2)
            java.lang.String r1 = r1.toString()
            org.telegram.messenger.FileLog.d(r1)
        L_0x0dae:
            boolean r1 = r0.pending
            if (r1 == 0) goto L_0x0dbd
            java.lang.String r1 = r0.text
            boolean r1 = android.text.TextUtils.isEmpty(r1)
            if (r1 != 0) goto L_0x0dbb
            goto L_0x0dbd
        L_0x0dbb:
            r6 = 2
            goto L_0x0e16
        L_0x0dbd:
            boolean r1 = r0.pending
            if (r1 != 0) goto L_0x0dce
            long r1 = r0.transcription_id
            java.lang.String r4 = r0.text
            boolean r1 = org.telegram.ui.Components.TranscribeButton.finishTranscription(r3, r1, r4)
            if (r1 != 0) goto L_0x0dcc
            goto L_0x0dce
        L_0x0dcc:
            r6 = 2
            goto L_0x0e16
        L_0x0dce:
            org.telegram.messenger.MessagesStorage r35 = r44.getMessagesStorage()
            org.telegram.tgnet.TLRPC$Peer r1 = r0.peer
            long r36 = org.telegram.messenger.DialogObject.getPeerDialogId((org.telegram.tgnet.TLRPC.Peer) r1)
            int r1 = r0.msg_id
            java.lang.String r2 = r0.text
            long r4 = r0.transcription_id
            boolean r6 = r0.pending
            r42 = r6 ^ 1
            r38 = r1
            r39 = r2
            r40 = r4
            r35.updateMessageVoiceTranscription(r36, r38, r39, r40, r42)
            org.telegram.messenger.NotificationCenter r1 = r44.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.voiceTranscriptionUpdate
            r4 = 5
            java.lang.Object[] r4 = new java.lang.Object[r4]
            r5 = 0
            r4[r5] = r3
            long r5 = r0.transcription_id
            java.lang.Long r5 = java.lang.Long.valueOf(r5)
            r4[r12] = r5
            java.lang.String r5 = r0.text
            r6 = 2
            r4[r6] = r5
            r5 = 3
            r4[r5] = r3
            boolean r5 = r0.pending
            r5 = r5 ^ r12
            java.lang.Boolean r5 = java.lang.Boolean.valueOf(r5)
            r7 = 4
            r4[r7] = r5
            r1.postNotificationName(r2, r4)
            goto L_0x0e16
        L_0x0e15:
            r6 = 2
        L_0x0e16:
            int r2 = r23 + 1
            r10 = r47
            r12 = r50
            r13 = r51
            r14 = r52
            r15 = r53
            r22 = r9
            r6 = r16
            r23 = r34
            r4 = 1
            r5 = 0
            r9 = r46
            goto L_0x0046
        L_0x0e2e:
            r16 = r6
            r9 = r22
            r34 = r23
            r3 = 0
            r6 = 2
            r12 = 1
            r23 = r2
            if (r27 == 0) goto L_0x0e4b
            r27.commit()
            org.telegram.messenger.NotificationCenter r0 = r44.getNotificationCenter()
            int r1 = org.telegram.messenger.NotificationCenter.notificationsSettingsUpdated
            r2 = 0
            java.lang.Object[] r4 = new java.lang.Object[r2]
            r0.postNotificationName(r1, r4)
            goto L_0x0e4c
        L_0x0e4b:
            r2 = 0
        L_0x0e4c:
            org.telegram.messenger.MessagesStorage r0 = r44.getMessagesStorage()
            r1 = r34
            r0.updateUsers(r1, r12, r12, r12)
            org.telegram.messenger.MessagesStorage r0 = r44.getMessagesStorage()
            r0.updateUsers(r9, r2, r12, r12)
            r0 = r21
            r1 = r24
            r2 = r26
            goto L_0x0e66
        L_0x0e63:
            r3 = 0
            r6 = 2
            r12 = 1
        L_0x0e66:
            r4 = r47
            if (r4 == 0) goto L_0x0e98
            r5 = 0
            int r7 = r47.size()
        L_0x0e6f:
            if (r5 >= r7) goto L_0x0e95
            long r9 = r4.keyAt(r5)
            androidx.collection.LongSparseArray<org.telegram.messenger.ChatObject$Call> r13 = r8.groupCallsByChatId
            java.lang.Object r13 = r13.get(r9)
            org.telegram.messenger.ChatObject$Call r13 = (org.telegram.messenger.ChatObject.Call) r13
            if (r13 == 0) goto L_0x0e8f
            org.telegram.messenger.AccountInstance r14 = r44.getAccountInstance()
            java.lang.Object r15 = r4.valueAt(r5)
            java.util.ArrayList r15 = (java.util.ArrayList) r15
            r6 = r48
            r13.processTypingsUpdate(r14, r15, r6)
            goto L_0x0e91
        L_0x0e8f:
            r6 = r48
        L_0x0e91:
            int r5 = r5 + 1
            r6 = 2
            goto L_0x0e6f
        L_0x0e95:
            r6 = r48
            goto L_0x0e9a
        L_0x0e98:
            r6 = r48
        L_0x0e9a:
            if (r11 == 0) goto L_0x0ebc
            r5 = 0
            int r7 = r49.size()
        L_0x0ea1:
            if (r5 >= r7) goto L_0x0ebc
            long r9 = r11.keyAt(r5)
            org.telegram.messenger.SendMessagesHelper r13 = r44.getSendMessagesHelper()
            org.telegram.messenger.SendMessagesHelper$ImportingHistory r13 = r13.getImportingHistory(r9)
            if (r13 != 0) goto L_0x0eb2
            goto L_0x0eb9
        L_0x0eb2:
            int r14 = r11.valueAt(r5)
            r13.setImportProgress(r14)
        L_0x0eb9:
            int r5 = r5 + 1
            goto L_0x0ea1
        L_0x0ebc:
            r5 = r50
            r7 = 2
            if (r5 == 0) goto L_0x0fc7
            org.telegram.messenger.NotificationCenter r9 = r44.getNotificationCenter()
            int r10 = org.telegram.messenger.NotificationCenter.didReceivedWebpagesInUpdates
            java.lang.Object[] r13 = new java.lang.Object[r12]
            r14 = 0
            r13[r14] = r5
            r9.postNotificationName(r10, r13)
            r9 = 0
        L_0x0ed0:
            if (r9 >= r7) goto L_0x0fc4
            if (r9 != r12) goto L_0x0ed7
            java.util.HashMap<java.lang.String, java.util.ArrayList<org.telegram.messenger.MessageObject>> r10 = r8.reloadingScheduledWebpages
            goto L_0x0ed9
        L_0x0ed7:
            java.util.HashMap<java.lang.String, java.util.ArrayList<org.telegram.messenger.MessageObject>> r10 = r8.reloadingWebpages
        L_0x0ed9:
            if (r9 != r12) goto L_0x0ede
            androidx.collection.LongSparseArray<java.util.ArrayList<org.telegram.messenger.MessageObject>> r13 = r8.reloadingScheduledWebpagesPending
            goto L_0x0ee0
        L_0x0ede:
            androidx.collection.LongSparseArray<java.util.ArrayList<org.telegram.messenger.MessageObject>> r13 = r8.reloadingWebpagesPending
        L_0x0ee0:
            r14 = 0
            int r15 = r50.size()
        L_0x0ee5:
            if (r14 >= r15) goto L_0x0fb7
            long r3 = r5.keyAt(r14)
            java.lang.Object r16 = r13.get(r3)
            r7 = r16
            java.util.ArrayList r7 = (java.util.ArrayList) r7
            r13.remove(r3)
            if (r7 == 0) goto L_0x0fa6
            java.lang.Object r16 = r5.valueAt(r14)
            r12 = r16
            org.telegram.tgnet.TLRPC$WebPage r12 = (org.telegram.tgnet.TLRPC.WebPage) r12
            java.util.ArrayList r16 = new java.util.ArrayList
            r16.<init>()
            r17 = r16
            r18 = 0
            r16 = r1
            boolean r1 = r12 instanceof org.telegram.tgnet.TLRPC.TL_webPage
            if (r1 != 0) goto L_0x0var_
            boolean r1 = r12 instanceof org.telegram.tgnet.TLRPC.TL_webPageEmpty
            if (r1 == 0) goto L_0x0var_
            r28 = r3
            goto L_0x0var_
        L_0x0var_:
            r28 = r3
            long r3 = r12.id
            r13.put(r3, r7)
            r3 = r17
            goto L_0x0var_
        L_0x0var_:
            r28 = r3
        L_0x0var_:
            r1 = 0
            int r3 = r7.size()
        L_0x0var_:
            if (r1 >= r3) goto L_0x0var_
            java.lang.Object r4 = r7.get(r1)
            org.telegram.messenger.MessageObject r4 = (org.telegram.messenger.MessageObject) r4
            org.telegram.tgnet.TLRPC$Message r4 = r4.messageOwner
            org.telegram.tgnet.TLRPC$MessageMedia r4 = r4.media
            r4.webpage = r12
            if (r1 != 0) goto L_0x0f4c
            java.lang.Object r4 = r7.get(r1)
            org.telegram.messenger.MessageObject r4 = (org.telegram.messenger.MessageObject) r4
            long r18 = r4.getDialogId()
            java.lang.Object r4 = r7.get(r1)
            org.telegram.messenger.MessageObject r4 = (org.telegram.messenger.MessageObject) r4
            org.telegram.tgnet.TLRPC$Message r4 = r4.messageOwner
            org.telegram.messenger.ImageLoader.saveMessageThumbs(r4)
        L_0x0f4c:
            java.lang.Object r4 = r7.get(r1)
            org.telegram.messenger.MessageObject r4 = (org.telegram.messenger.MessageObject) r4
            org.telegram.tgnet.TLRPC$Message r4 = r4.messageOwner
            r21 = r3
            r3 = r17
            r3.add(r4)
            int r1 = r1 + 1
            r3 = r21
            goto L_0x0var_
        L_0x0var_:
            r21 = r3
            r3 = r17
        L_0x0var_:
            boolean r1 = r3.isEmpty()
            if (r1 != 0) goto L_0x0fa3
            org.telegram.messenger.MessagesStorage r21 = r44.getMessagesStorage()
            r23 = 1
            r24 = 1
            r25 = 0
            org.telegram.messenger.DownloadController r1 = r44.getDownloadController()
            int r26 = r1.getAutodownloadMask()
            r1 = 1
            if (r9 != r1) goto L_0x0var_
            r27 = 1
            goto L_0x0var_
        L_0x0var_:
            r27 = 0
        L_0x0var_:
            r22 = r3
            r21.putMessages((java.util.ArrayList<org.telegram.tgnet.TLRPC.Message>) r22, (boolean) r23, (boolean) r24, (boolean) r25, (int) r26, (boolean) r27)
            org.telegram.messenger.NotificationCenter r1 = r44.getNotificationCenter()
            int r4 = org.telegram.messenger.NotificationCenter.replaceMessagesObjects
            r17 = r3
            r3 = 2
            java.lang.Object[] r5 = new java.lang.Object[r3]
            java.lang.Long r3 = java.lang.Long.valueOf(r18)
            r21 = 0
            r5[r21] = r3
            r3 = 1
            r5[r3] = r7
            r1.postNotificationName(r4, r5)
            goto L_0x0faa
        L_0x0fa3:
            r17 = r3
            goto L_0x0faa
        L_0x0fa6:
            r16 = r1
            r28 = r3
        L_0x0faa:
            int r14 = r14 + 1
            r4 = r47
            r5 = r50
            r1 = r16
            r3 = 0
            r7 = 2
            r12 = 1
            goto L_0x0ee5
        L_0x0fb7:
            r16 = r1
            int r9 = r9 + 1
            r4 = r47
            r5 = r50
            r3 = 0
            r7 = 2
            r12 = 1
            goto L_0x0ed0
        L_0x0fc4:
            r16 = r1
            goto L_0x0fc9
        L_0x0fc7:
            r16 = r1
        L_0x0fc9:
            if (r2 == 0) goto L_0x0fe2
            r1 = 0
        L_0x0fcc:
            org.telegram.messenger.MessagesController$DialogFilter[] r3 = r8.selectedDialogFilter
            int r4 = r3.length
            if (r1 >= r4) goto L_0x0fe2
            r4 = r3[r1]
            if (r4 == 0) goto L_0x0fdf
            r3 = r3[r1]
            int r3 = r3.flags
            r3 = r3 & r2
            if (r3 == 0) goto L_0x0fdf
            r3 = 1
            r1 = r3
            goto L_0x0fe4
        L_0x0fdf:
            int r1 = r1 + 1
            goto L_0x0fcc
        L_0x0fe2:
            r1 = r16
        L_0x0fe4:
            r3 = 0
            r4 = r51
            if (r4 == 0) goto L_0x101a
            r5 = 0
            r7 = 0
            int r9 = r51.size()
        L_0x0fef:
            if (r7 >= r9) goto L_0x1006
            long r12 = r4.keyAt(r7)
            java.lang.Object r10 = r4.valueAt(r7)
            java.util.ArrayList r10 = (java.util.ArrayList) r10
            r14 = 0
            boolean r15 = r8.updateInterfaceWithMessages(r12, r10, r14)
            if (r15 == 0) goto L_0x1003
            r5 = 1
        L_0x1003:
            int r7 = r7 + 1
            goto L_0x0fef
        L_0x1006:
            r7 = r52
            r9 = 0
            boolean r12 = r8.applyFoldersUpdates(r7)
            if (r12 != 0) goto L_0x1014
            if (r5 != 0) goto L_0x1018
            if (r1 == 0) goto L_0x1018
        L_0x1014:
            r13 = 0
            r8.sortDialogs(r13)
        L_0x1018:
            r3 = 1
            goto L_0x102b
        L_0x101a:
            r7 = r52
            r9 = 0
            boolean r5 = r8.applyFoldersUpdates(r7)
            if (r1 != 0) goto L_0x1026
            if (r5 == 0) goto L_0x102b
        L_0x1026:
            r12 = 0
            r8.sortDialogs(r12)
            r3 = 1
        L_0x102b:
            r5 = r53
            if (r5 == 0) goto L_0x104b
            r12 = 0
            int r13 = r53.size()
        L_0x1034:
            if (r12 >= r13) goto L_0x104b
            long r14 = r5.keyAt(r12)
            java.lang.Object r16 = r5.valueAt(r12)
            r9 = r16
            java.util.ArrayList r9 = (java.util.ArrayList) r9
            r10 = 1
            r8.updateInterfaceWithMessages(r14, r9, r10)
            int r12 = r12 + 1
            r9 = 0
            goto L_0x1034
        L_0x104b:
            r9 = r54
            if (r9 == 0) goto L_0x117f
            r10 = 0
            int r12 = r54.size()
        L_0x1054:
            if (r10 >= r12) goto L_0x1178
            long r14 = r9.keyAt(r10)
            r13 = 0
            java.lang.Object r16 = r9.valueAt(r10)
            r19 = r1
            r1 = r16
            java.util.ArrayList r1 = (java.util.ArrayList) r1
            r16 = 0
            r21 = r2
            int r2 = r1.size()
            r43 = r16
            r16 = r3
            r3 = r43
        L_0x1073:
            if (r3 >= r2) goto L_0x10a4
            java.lang.Object r17 = r1.get(r3)
            r18 = r2
            r2 = r17
            org.telegram.messenger.MessageObject r2 = (org.telegram.messenger.MessageObject) r2
            r22 = 0
            int r17 = (r14 > r22 ? 1 : (r14 == r22 ? 0 : -1))
            if (r17 <= 0) goto L_0x109b
            if (r13 != 0) goto L_0x108e
            android.util.SparseBooleanArray r17 = new android.util.SparseBooleanArray
            r17.<init>()
            r13 = r17
        L_0x108e:
            int r4 = r2.getId()
            org.telegram.tgnet.TLRPC$Message r5 = r2.messageOwner
            boolean r5 = org.telegram.messenger.MessageObject.hasUnreadReactions((org.telegram.tgnet.TLRPC.Message) r5)
            r13.put(r4, r5)
        L_0x109b:
            int r3 = r3 + 1
            r4 = r51
            r5 = r53
            r2 = r18
            goto L_0x1073
        L_0x10a4:
            r18 = r2
            r2 = 0
            int r4 = (r14 > r2 ? 1 : (r14 == r2 ? 0 : -1))
            if (r4 <= 0) goto L_0x10af
            r8.checkUnreadReactions(r14, r13)
        L_0x10af:
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r2 = r8.dialogMessage
            java.lang.Object r2 = r2.get(r14)
            org.telegram.messenger.MessageObject r2 = (org.telegram.messenger.MessageObject) r2
            if (r2 == 0) goto L_0x1138
            r3 = 0
            int r4 = r1.size()
        L_0x10be:
            if (r3 >= r4) goto L_0x1132
            java.lang.Object r5 = r1.get(r3)
            org.telegram.messenger.MessageObject r5 = (org.telegram.messenger.MessageObject) r5
            r17 = r4
            int r4 = r2.getId()
            int r6 = r5.getId()
            if (r4 != r6) goto L_0x10f9
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r4 = r8.dialogMessage
            r4.put(r14, r5)
            org.telegram.tgnet.TLRPC$Message r4 = r5.messageOwner
            org.telegram.tgnet.TLRPC$Peer r4 = r4.peer_id
            if (r4 == 0) goto L_0x10f3
            org.telegram.tgnet.TLRPC$Message r4 = r5.messageOwner
            org.telegram.tgnet.TLRPC$Peer r4 = r4.peer_id
            long r6 = r4.channel_id
            r22 = 0
            int r4 = (r6 > r22 ? 1 : (r6 == r22 ? 0 : -1))
            if (r4 != 0) goto L_0x10f5
            android.util.SparseArray<org.telegram.messenger.MessageObject> r4 = r8.dialogMessagesByIds
            int r6 = r5.getId()
            r4.put(r6, r5)
            goto L_0x10f5
        L_0x10f3:
            r22 = 0
        L_0x10f5:
            r4 = 1
            r3 = r4
            r4 = 0
            goto L_0x113d
        L_0x10f9:
            r22 = 0
            long r6 = r2.getDialogId()
            long r24 = r5.getDialogId()
            int r4 = (r6 > r24 ? 1 : (r6 == r24 ? 0 : -1))
            if (r4 != 0) goto L_0x1128
            org.telegram.tgnet.TLRPC$Message r4 = r2.messageOwner
            org.telegram.tgnet.TLRPC$MessageAction r4 = r4.action
            boolean r4 = r4 instanceof org.telegram.tgnet.TLRPC.TL_messageActionPinMessage
            if (r4 == 0) goto L_0x1128
            org.telegram.messenger.MessageObject r4 = r2.replyMessageObject
            if (r4 == 0) goto L_0x1128
            org.telegram.messenger.MessageObject r4 = r2.replyMessageObject
            int r4 = r4.getId()
            int r6 = r5.getId()
            if (r4 != r6) goto L_0x1128
            r2.replyMessageObject = r5
            r4 = 0
            r2.generatePinMessageText(r4, r4)
            r6 = 1
            r3 = r6
            goto L_0x113d
        L_0x1128:
            r4 = 0
            int r3 = r3 + 1
            r6 = r48
            r7 = r52
            r4 = r17
            goto L_0x10be
        L_0x1132:
            r17 = r4
            r4 = 0
            r22 = 0
            goto L_0x113b
        L_0x1138:
            r4 = 0
            r22 = 0
        L_0x113b:
            r3 = r16
        L_0x113d:
            org.telegram.messenger.MediaDataController r5 = r44.getMediaDataController()
            r17 = 0
            r18 = 0
            r6 = r13
            r13 = r5
            r24 = r14
            r14 = r1
            r15 = r24
            r13.loadReplyMessagesForMessages(r14, r15, r17, r18)
            org.telegram.messenger.NotificationCenter r5 = r44.getNotificationCenter()
            int r7 = org.telegram.messenger.NotificationCenter.replaceMessagesObjects
            r13 = 3
            java.lang.Object[] r14 = new java.lang.Object[r13]
            java.lang.Long r13 = java.lang.Long.valueOf(r24)
            r15 = 0
            r14[r15] = r13
            r13 = 1
            r14[r13] = r1
            r13 = 2
            r14[r13] = r20
            r5.postNotificationName(r7, r14)
            int r10 = r10 + 1
            r6 = r48
            r4 = r51
            r7 = r52
            r5 = r53
            r1 = r19
            r2 = r21
            goto L_0x1054
        L_0x1178:
            r19 = r1
            r21 = r2
            r16 = r3
            goto L_0x1183
        L_0x117f:
            r19 = r1
            r21 = r2
        L_0x1183:
            if (r3 == 0) goto L_0x1191
            org.telegram.messenger.NotificationCenter r1 = r44.getNotificationCenter()
            int r2 = org.telegram.messenger.NotificationCenter.dialogsNeedReload
            r4 = 0
            java.lang.Object[] r5 = new java.lang.Object[r4]
            r1.postNotificationName(r2, r5)
        L_0x1191:
            if (r55 == 0) goto L_0x1196
            int r1 = UPDATE_MASK_USER_PRINT
            r0 = r0 | r1
        L_0x1196:
            if (r56 == 0) goto L_0x119e
            int r1 = UPDATE_MASK_NAME
            r0 = r0 | r1
            int r1 = UPDATE_MASK_USER_PHONE
            r0 = r0 | r1
        L_0x119e:
            r1 = r57
            if (r1 == 0) goto L_0x11b9
            r2 = 0
            int r4 = r57.size()
        L_0x11a7:
            if (r2 >= r4) goto L_0x11b9
            java.lang.Object r5 = r1.get(r2)
            org.telegram.tgnet.TLRPC$ChatParticipants r5 = (org.telegram.tgnet.TLRPC.ChatParticipants) r5
            org.telegram.messenger.MessagesStorage r6 = r44.getMessagesStorage()
            r6.updateChatParticipants(r5)
            int r2 = r2 + 1
            goto L_0x11a7
        L_0x11b9:
            if (r58 != 0) goto L_0x11c2
            if (r59 != 0) goto L_0x11c2
            if (r60 == 0) goto L_0x11c0
            goto L_0x11c2
        L_0x11c0:
            r6 = 1
            goto L_0x11de
        L_0x11c2:
            org.telegram.messenger.NotificationCenter r2 = r44.getNotificationCenter()
            int r4 = org.telegram.messenger.NotificationCenter.didUpdateMessagesViews
            r5 = 4
            java.lang.Object[] r5 = new java.lang.Object[r5]
            r6 = 0
            r5[r6] = r58
            r6 = 1
            r5[r6] = r59
            r7 = 2
            r5[r7] = r60
            java.lang.Boolean r7 = java.lang.Boolean.valueOf(r6)
            r10 = 3
            r5[r10] = r7
            r2.postNotificationName(r4, r5)
        L_0x11de:
            if (r0 == 0) goto L_0x11f2
            org.telegram.messenger.NotificationCenter r2 = r44.getNotificationCenter()
            int r4 = org.telegram.messenger.NotificationCenter.updateInterfaces
            java.lang.Object[] r5 = new java.lang.Object[r6]
            java.lang.Integer r6 = java.lang.Integer.valueOf(r0)
            r7 = 0
            r5[r7] = r6
            r2.postNotificationName(r4, r5)
        L_0x11f2:
            r2 = r61
            if (r2 == 0) goto L_0x11fd
            org.telegram.messenger.ImageLoader r4 = org.telegram.messenger.ImageLoader.getInstance()
            r4.putThumbsToCache(r2)
        L_0x11fd:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.m351x452a0var_(int, java.util.ArrayList, androidx.collection.LongSparseArray, int, org.telegram.messenger.support.LongSparseIntArray, androidx.collection.LongSparseArray, androidx.collection.LongSparseArray, java.util.ArrayList, androidx.collection.LongSparseArray, androidx.collection.LongSparseArray, boolean, java.util.ArrayList, java.util.ArrayList, androidx.collection.LongSparseArray, androidx.collection.LongSparseArray, androidx.collection.LongSparseArray, java.util.ArrayList):void");
    }

    /* renamed from: lambda$processUpdateArray$320$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m344x60080c(TLRPC.User currentUser) {
        getContactsController().addContactToPhoneBook(currentUser, true);
    }

    /* renamed from: lambda$processUpdateArray$321$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m345xe5a176cd() {
        getNotificationsController().deleteNotificationChannelGlobal(0);
    }

    /* renamed from: lambda$processUpdateArray$322$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m346xcae2e58e() {
        getNotificationsController().deleteNotificationChannelGlobal(1);
    }

    /* renamed from: lambda$processUpdateArray$323$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m347xb024544f() {
        getNotificationsController().deleteNotificationChannelGlobal(2);
    }

    /* renamed from: lambda$processUpdateArray$324$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m348x9565CLASSNAME(TLRPC.TL_updateChannel update) {
        getChannelDifference(update.channel_id, 1, 0, (TLRPC.InputChannel) null);
    }

    /* renamed from: lambda$processUpdateArray$325$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m349x7aa731d1(TLRPC.Chat chat) {
        getNotificationCenter().postNotificationName(NotificationCenter.channelRightsUpdated, chat);
    }

    /* renamed from: lambda$processUpdateArray$326$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m350x5fe8a092(TLObject response, TLRPC.TL_error error) {
        if (response != null) {
            processUpdates((TLRPC.Updates) response, false);
        }
    }

    /* renamed from: lambda$processUpdateArray$329$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m353xfacecd5(LongSparseIntArray markAsReadMessagesInboxFinal, LongSparseIntArray markAsReadMessagesOutboxFinal, SparseIntArray markAsReadEncryptedFinal, LongSparseArray markContentAsReadMessagesFinal, LongSparseArray deletedMessagesFinal, LongSparseArray scheduledDeletedMessagesFinal, LongSparseIntArray clearHistoryMessagesFinal) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda38(this, markAsReadMessagesInboxFinal, markAsReadMessagesOutboxFinal, markAsReadEncryptedFinal, markContentAsReadMessagesFinal, deletedMessagesFinal, scheduledDeletedMessagesFinal, clearHistoryMessagesFinal));
    }

    /* renamed from: lambda$processUpdateArray$328$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m352x2a6b7e14(LongSparseIntArray markAsReadMessagesInboxFinal, LongSparseIntArray markAsReadMessagesOutboxFinal, SparseIntArray markAsReadEncryptedFinal, LongSparseArray markContentAsReadMessagesFinal, LongSparseArray deletedMessagesFinal, LongSparseArray scheduledDeletedMessagesFinal, LongSparseIntArray clearHistoryMessagesFinal) {
        int updateMask;
        int updateMask2;
        long j;
        int a;
        int size2;
        MessageObject message;
        MessageObject obj;
        MessageObject obj2;
        LongSparseIntArray longSparseIntArray = markAsReadMessagesInboxFinal;
        LongSparseIntArray longSparseIntArray2 = markAsReadMessagesOutboxFinal;
        SparseIntArray sparseIntArray = markAsReadEncryptedFinal;
        LongSparseArray longSparseArray = markContentAsReadMessagesFinal;
        LongSparseArray longSparseArray2 = deletedMessagesFinal;
        LongSparseArray longSparseArray3 = scheduledDeletedMessagesFinal;
        LongSparseIntArray longSparseIntArray3 = clearHistoryMessagesFinal;
        int updateMask3 = 0;
        if (!(longSparseIntArray == null && longSparseIntArray2 == null)) {
            getNotificationCenter().postNotificationName(NotificationCenter.messagesRead, longSparseIntArray, longSparseIntArray2);
            if (longSparseIntArray != null) {
                int updateMask4 = 0;
                getNotificationsController().processReadMessages(markAsReadMessagesInboxFinal, 0, 0, 0, false);
                SharedPreferences.Editor editor = this.notificationsPreferences.edit();
                int b = 0;
                int size = markAsReadMessagesInboxFinal.size();
                while (b < size) {
                    long key = longSparseIntArray.keyAt(b);
                    int messageId = longSparseIntArray.valueAt(b);
                    TLRPC.Dialog dialog = this.dialogs_dict.get(key);
                    if (dialog != null && dialog.top_message > 0 && dialog.top_message <= messageId && (obj2 = this.dialogMessage.get(dialog.id)) != null && !obj2.isOut()) {
                        obj2.setIsRead();
                        updateMask4 |= UPDATE_MASK_READ_DIALOG_MESSAGE;
                    }
                    if (key != getUserConfig().getClientUserId()) {
                        editor.remove("diditem" + key);
                        editor.remove("diditemo" + key);
                    }
                    b++;
                    LongSparseArray longSparseArray4 = scheduledDeletedMessagesFinal;
                    LongSparseIntArray longSparseIntArray4 = clearHistoryMessagesFinal;
                }
                editor.commit();
                updateMask3 = updateMask4;
            }
            if (longSparseIntArray2 != null) {
                int size3 = markAsReadMessagesOutboxFinal.size();
                for (int b2 = 0; b2 < size3; b2++) {
                    long key2 = longSparseIntArray2.keyAt(b2);
                    int messageId2 = longSparseIntArray2.valueAt(b2);
                    TLRPC.Dialog dialog2 = this.dialogs_dict.get(key2);
                    if (dialog2 != null && dialog2.top_message > 0 && dialog2.top_message <= messageId2 && (obj = this.dialogMessage.get(dialog2.id)) != null && obj.isOut()) {
                        obj.setIsRead();
                        updateMask3 |= UPDATE_MASK_READ_DIALOG_MESSAGE;
                    }
                }
            }
        }
        if (sparseIntArray != null) {
            int size4 = markAsReadEncryptedFinal.size();
            for (int a2 = 0; a2 < size4; a2++) {
                int key3 = sparseIntArray.keyAt(a2);
                int value = sparseIntArray.valueAt(a2);
                getNotificationCenter().postNotificationName(NotificationCenter.messagesReadEncrypted, Integer.valueOf(key3), Integer.valueOf(value));
                long dialogId = DialogObject.makeEncryptedDialogId((long) key3);
                if (!(this.dialogs_dict.get(dialogId) == null || (message = this.dialogMessage.get(dialogId)) == null || message.messageOwner.date > value)) {
                    message.setIsRead();
                    updateMask3 = UPDATE_MASK_READ_DIALOG_MESSAGE | updateMask3;
                }
            }
        }
        if (longSparseArray != null) {
            int size5 = markContentAsReadMessagesFinal.size();
            for (int a3 = 0; a3 < size5; a3++) {
                getNotificationCenter().postNotificationName(NotificationCenter.messagesReadContent, Long.valueOf(longSparseArray.keyAt(a3)), (ArrayList) longSparseArray.valueAt(a3));
            }
        }
        int i = 3;
        if (longSparseArray2 != null) {
            int a4 = 0;
            int size6 = deletedMessagesFinal.size();
            while (a4 < size6) {
                long dialogId2 = longSparseArray2.keyAt(a4);
                ArrayList<Integer> arrayList = (ArrayList) longSparseArray2.valueAt(a4);
                if (arrayList == null) {
                    a = a4;
                } else {
                    NotificationCenter notificationCenter = getNotificationCenter();
                    int i2 = NotificationCenter.messagesDeleted;
                    Object[] objArr = new Object[i];
                    objArr[0] = arrayList;
                    a = a4;
                    objArr[1] = Long.valueOf(-dialogId2);
                    objArr[2] = false;
                    notificationCenter.postNotificationName(i2, objArr);
                    if (dialogId2 == 0) {
                        int b3 = 0;
                        int size22 = arrayList.size();
                        while (b3 < size22) {
                            MessageObject obj3 = this.dialogMessagesByIds.get(arrayList.get(b3).intValue());
                            if (obj3 != null) {
                                if (BuildVars.LOGS_ENABLED) {
                                    StringBuilder sb = new StringBuilder();
                                    size2 = size22;
                                    sb.append("mark messages ");
                                    sb.append(obj3.getId());
                                    sb.append(" deleted");
                                    FileLog.d(sb.toString());
                                } else {
                                    size2 = size22;
                                }
                                obj3.deleted = true;
                            } else {
                                size2 = size22;
                            }
                            b3++;
                            size22 = size2;
                        }
                    } else {
                        MessageObject obj4 = this.dialogMessage.get(dialogId2);
                        if (obj4 != null) {
                            int b4 = 0;
                            int size23 = arrayList.size();
                            while (true) {
                                if (b4 >= size23) {
                                    break;
                                } else if (obj4.getId() == arrayList.get(b4).intValue()) {
                                    obj4.deleted = true;
                                    break;
                                } else {
                                    b4++;
                                }
                            }
                        }
                    }
                }
                a4 = a + 1;
                i = 3;
            }
            int i3 = a4;
            getNotificationsController().removeDeletedMessagesFromNotifications(longSparseArray2);
        }
        LongSparseArray longSparseArray5 = scheduledDeletedMessagesFinal;
        if (longSparseArray5 != null) {
            int a5 = 0;
            int size7 = scheduledDeletedMessagesFinal.size();
            while (a5 < size7) {
                long key4 = longSparseArray5.keyAt(a5);
                ArrayList<Integer> arrayList2 = (ArrayList) longSparseArray5.valueAt(a5);
                if (arrayList2 == null) {
                    updateMask2 = updateMask3;
                } else {
                    NotificationCenter notificationCenter2 = getNotificationCenter();
                    int i4 = NotificationCenter.messagesDeleted;
                    Object[] objArr2 = new Object[3];
                    objArr2[0] = arrayList2;
                    if (DialogObject.isChatDialog(key4)) {
                        updateMask2 = updateMask3;
                        if (ChatObject.isChannel(getChat(Long.valueOf(-key4)))) {
                            j = -key4;
                            objArr2[1] = Long.valueOf(j);
                            objArr2[2] = true;
                            notificationCenter2.postNotificationName(i4, objArr2);
                        }
                    } else {
                        updateMask2 = updateMask3;
                    }
                    j = 0;
                    objArr2[1] = Long.valueOf(j);
                    objArr2[2] = true;
                    notificationCenter2.postNotificationName(i4, objArr2);
                }
                a5++;
                longSparseArray5 = scheduledDeletedMessagesFinal;
                updateMask3 = updateMask2;
            }
            updateMask = updateMask3;
        } else {
            updateMask = updateMask3;
        }
        LongSparseIntArray longSparseIntArray5 = clearHistoryMessagesFinal;
        if (longSparseIntArray5 != null) {
            int a6 = 0;
            int size8 = clearHistoryMessagesFinal.size();
            while (true) {
                if (a6 >= size8) {
                    break;
                }
                long key5 = longSparseIntArray5.keyAt(a6);
                int id = longSparseIntArray5.valueAt(a6);
                long did = -key5;
                int size9 = size8;
                long j2 = key5;
                getNotificationCenter().postNotificationName(NotificationCenter.historyCleared, Long.valueOf(did), Integer.valueOf(id));
                MessageObject obj5 = this.dialogMessage.get(did);
                if (obj5 != null && obj5.getId() <= id) {
                    obj5.deleted = true;
                    break;
                } else {
                    a6++;
                    size8 = size9;
                }
            }
            getNotificationsController().removeDeletedHisoryFromNotifications(longSparseIntArray5);
        }
        if (updateMask != 0) {
            getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(updateMask));
        }
    }

    /* renamed from: lambda$processUpdateArray$330$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m354xCLASSNAMECLASSNAMEb(long key, ArrayList arrayList) {
        long j = key;
        long j2 = key;
        getMessagesStorage().updateDialogsWithDeletedMessages(j2, -j, arrayList, getMessagesStorage().markMessagesAsDeleted(j, arrayList, false, true, false), false);
    }

    /* renamed from: lambda$processUpdateArray$331$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m355xa88de02c(long key, int id) {
        long j = key;
        long j2 = key;
        getMessagesStorage().updateDialogsWithDeletedMessages(j2, -j, new ArrayList(), getMessagesStorage().markMessagesAsDeleted(j, id, false, true), false);
    }

    public void checkUnreadReactions(long dialogId, SparseBooleanArray unreadReactions) {
        getMessagesStorage().getStorageQueue().postRunnable(new MessagesController$$ExternalSyntheticLambda354(this, unreadReactions, dialogId));
    }

    /* renamed from: lambda$checkUnreadReactions$335$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m155xe06509a2(SparseBooleanArray unreadReactions, long dialogId) {
        int newUnreadCount;
        SparseBooleanArray sparseBooleanArray = unreadReactions;
        long j = dialogId;
        ArrayList<Integer> newUnreadMessages = new ArrayList<>();
        StringBuilder stringBuilder = new StringBuilder();
        for (int i = 0; i < unreadReactions.size(); i++) {
            int messageId = sparseBooleanArray.keyAt(i);
            if (stringBuilder.length() > 0) {
                stringBuilder.append(", ");
            }
            stringBuilder.append(messageId);
        }
        SparseBooleanArray reactionsMentionsMessageIds = new SparseBooleanArray();
        int i2 = 1;
        try {
            SQLiteCursor cursor = getMessagesStorage().getDatabase().queryFinalized(String.format(Locale.US, "SELECT message_id, state FROM reaction_mentions WHERE message_id IN (%s) AND dialog_id = %d", new Object[]{stringBuilder.toString(), Long.valueOf(dialogId)}), new Object[0]);
            while (cursor.next()) {
                reactionsMentionsMessageIds.put(cursor.intValue(0), cursor.intValue(1) == 1);
            }
            cursor.dispose();
        } catch (SQLiteException e) {
            e.printStackTrace();
        }
        int newUnreadCount2 = 0;
        int i3 = 0;
        boolean needReload = false;
        boolean changed = false;
        while (i3 < unreadReactions.size()) {
            int messageId2 = sparseBooleanArray.keyAt(i3);
            boolean hasUnreadReaction = sparseBooleanArray.valueAt(i3);
            if (reactionsMentionsMessageIds.indexOfKey(messageId2) < 0) {
                needReload = true;
                newUnreadCount = newUnreadCount2;
            } else if (reactionsMentionsMessageIds.get(messageId2) != hasUnreadReaction) {
                changed = true;
                newUnreadCount = newUnreadCount2 + (hasUnreadReaction ? 1 : -1);
            } else {
                newUnreadCount = newUnreadCount2;
            }
            if (hasUnreadReaction) {
                newUnreadMessages.add(Integer.valueOf(messageId2));
            }
            try {
                SQLitePreparedStatement state = getMessagesStorage().getDatabase().executeFast("REPLACE INTO reaction_mentions VALUES(?, ?, ?)");
                try {
                    state.requery();
                    state.bindInteger(i2, messageId2);
                    try {
                        state.bindInteger(2, hasUnreadReaction ? 1 : 0);
                        state.bindLong(3, j);
                        state.step();
                        state.dispose();
                    } catch (SQLiteException e2) {
                        e = e2;
                    }
                } catch (SQLiteException e3) {
                    e = e3;
                    SQLitePreparedStatement sQLitePreparedStatement = state;
                    e.printStackTrace();
                    i3++;
                    newUnreadCount2 = newUnreadCount;
                    i2 = 1;
                }
            } catch (SQLiteException e4) {
                e = e4;
                e.printStackTrace();
                i3++;
                newUnreadCount2 = newUnreadCount;
                i2 = 1;
            }
            i3++;
            newUnreadCount2 = newUnreadCount;
            i2 = 1;
        }
        if (needReload) {
            TLRPC.TL_messages_getPeerDialogs req = new TLRPC.TL_messages_getPeerDialogs();
            TLRPC.TL_inputDialogPeer inputDialogPeer = new TLRPC.TL_inputDialogPeer();
            inputDialogPeer.peer = getInputPeer(j);
            req.peers.add(inputDialogPeer);
            ConnectionsManager.getInstance(this.currentAccount).sendRequest(req, new MessagesController$$ExternalSyntheticLambda223(this, j, newUnreadMessages));
        } else if (changed) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda330(this, dialogId, newUnreadCount2, newUnreadMessages));
        }
    }

    /* renamed from: lambda$checkUnreadReactions$333$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m153x15e22CLASSNAME(long dialogId, ArrayList newUnreadMessages, TLObject response, TLRPC.TL_error error) {
        if (response != null) {
            TLRPC.TL_messages_peerDialogs dialogs = (TLRPC.TL_messages_peerDialogs) response;
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda329(this, dialogId, dialogs.dialogs.size() == 0 ? 0 : dialogs.dialogs.get(0).unread_reactions_count, newUnreadMessages));
        }
    }

    /* renamed from: lambda$checkUnreadReactions$332$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m152x30a0bd5f(long dialogId, int count, ArrayList newUnreadMessages) {
        TLRPC.Dialog dialog = this.dialogs_dict.get(dialogId);
        if (dialog == null) {
            getMessagesStorage().updateDialogUnreadReactions(dialogId, count, false);
            return;
        }
        dialog.unread_reactions_count = count;
        getMessagesStorage().updateUnreadReactionsCount(dialogId, count);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsUnreadReactionsCounterChanged, Long.valueOf(dialogId), Integer.valueOf(count), newUnreadMessages);
    }

    /* renamed from: lambda$checkUnreadReactions$334$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m154xfb239ae1(long dialogId, int finalNewUnreadCount, ArrayList newUnreadMessages) {
        TLRPC.Dialog dialog = this.dialogs_dict.get(dialogId);
        if (dialog == null) {
            getMessagesStorage().updateDialogUnreadReactions(dialogId, finalNewUnreadCount, true);
            return;
        }
        dialog.unread_reactions_count += finalNewUnreadCount;
        if (dialog.unread_reactions_count < 0) {
            dialog.unread_reactions_count = 0;
        }
        getMessagesStorage().updateUnreadReactionsCount(dialogId, dialog.unread_reactions_count);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsUnreadReactionsCounterChanged, Long.valueOf(dialogId), Integer.valueOf(dialog.unread_reactions_count), newUnreadMessages);
    }

    public boolean isDialogMuted(long dialogId) {
        return isDialogMuted(dialogId, (TLRPC.Chat) null);
    }

    public boolean isDialogNotificationsSoundEnabled(long dialogId) {
        SharedPreferences sharedPreferences = this.notificationsPreferences;
        return sharedPreferences.getBoolean("sound_enabled_" + dialogId, true);
    }

    public boolean isDialogMuted(long dialogId, TLRPC.Chat chat) {
        Boolean forceChannel;
        SharedPreferences sharedPreferences = this.notificationsPreferences;
        int mute_type = sharedPreferences.getInt("notify2_" + dialogId, -1);
        boolean z = false;
        if (mute_type == -1) {
            if (chat != null) {
                if (ChatObject.isChannel(chat) && !chat.megagroup) {
                    z = true;
                }
                forceChannel = Boolean.valueOf(z);
            } else {
                forceChannel = null;
            }
            return !getNotificationsController().isGlobalNotificationsEnabled(dialogId, forceChannel);
        } else if (mute_type == 2) {
            return true;
        } else {
            if (mute_type == 3) {
                SharedPreferences sharedPreferences2 = this.notificationsPreferences;
                if (sharedPreferences2.getInt("notifyuntil_" + dialogId, 0) >= getConnectionsManager().getCurrentTime()) {
                    return true;
                }
            }
            return false;
        }
    }

    public void markReactionsAsRead(long dialogId) {
        TLRPC.Dialog dialog = this.dialogs_dict.get(dialogId);
        if (dialog != null) {
            dialog.unread_reactions_count = 0;
        }
        getMessagesStorage().updateUnreadReactionsCount(dialogId, 0);
        TLRPC.TL_messages_readReactions req = new TLRPC.TL_messages_readReactions();
        req.peer = getInputPeer(dialogId);
        getConnectionsManager().sendRequest(req, MessagesController$$ExternalSyntheticLambda281.INSTANCE);
    }

    static /* synthetic */ void lambda$markReactionsAsRead$336(TLObject response, TLRPC.TL_error error) {
    }

    public ArrayList<MessageObject> getSponsoredMessages(long dialogId) {
        SponsoredMessagesInfo info = this.sponsoredMessages.get(dialogId);
        if (info != null && (info.loading || Math.abs(SystemClock.elapsedRealtime() - info.loadTime) <= 300000)) {
            return info.messages;
        }
        TLRPC.Chat chat = getChat(Long.valueOf(-dialogId));
        if (!ChatObject.isChannel(chat)) {
            return null;
        }
        SponsoredMessagesInfo info2 = new SponsoredMessagesInfo();
        boolean unused = info2.loading = true;
        this.sponsoredMessages.put(dialogId, info2);
        TLRPC.TL_channels_getSponsoredMessages req = new TLRPC.TL_channels_getSponsoredMessages();
        req.channel = getInputChannel(chat);
        getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda226(this, dialogId, info2));
        return null;
    }

    /* renamed from: lambda$getSponsoredMessages$339$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m240xfd594a42(long dialogId, SponsoredMessagesInfo infoFinal, TLObject response, TLRPC.TL_error error) {
        ArrayList<MessageObject> result;
        ArrayList<MessageObject> result2;
        if (response != null) {
            TLRPC.TL_messages_sponsoredMessages res = (TLRPC.TL_messages_sponsoredMessages) response;
            if (res.messages.isEmpty()) {
                result2 = null;
            } else {
                result2 = new ArrayList<>();
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda84(this, res));
                LongSparseArray<TLRPC.User> usersDict = new LongSparseArray<>();
                LongSparseArray<TLRPC.Chat> chatsDict = new LongSparseArray<>();
                for (int a = 0; a < res.users.size(); a++) {
                    TLRPC.User u = res.users.get(a);
                    usersDict.put(u.id, u);
                }
                for (int a2 = 0; a2 < res.chats.size(); a2++) {
                    TLRPC.Chat c = res.chats.get(a2);
                    chatsDict.put(c.id, c);
                }
                int messageId = -10000000;
                int a3 = 0;
                int N = res.messages.size();
                while (a3 < N) {
                    TLRPC.TL_sponsoredMessage sponsoredMessage = res.messages.get(a3);
                    TLRPC.TL_message message = new TLRPC.TL_message();
                    message.message = sponsoredMessage.message;
                    if (!sponsoredMessage.entities.isEmpty()) {
                        message.entities = sponsoredMessage.entities;
                        message.flags |= 128;
                    }
                    message.peer_id = getPeer(dialogId);
                    message.from_id = sponsoredMessage.from_id;
                    message.flags |= 256;
                    message.date = getConnectionsManager().getCurrentTime();
                    message.id = messageId;
                    TLRPC.TL_message tL_message = message;
                    MessageObject messageObject = new MessageObject(this.currentAccount, (TLRPC.Message) message, usersDict, chatsDict, true, true);
                    messageObject.sponsoredId = sponsoredMessage.random_id;
                    messageObject.botStartParam = sponsoredMessage.start_param;
                    messageObject.sponsoredChannelPost = sponsoredMessage.channel_post;
                    messageObject.sponsoredChatInvite = sponsoredMessage.chat_invite;
                    messageObject.sponsoredChatInviteHash = sponsoredMessage.chat_invite_hash;
                    result2.add(messageObject);
                    a3++;
                    messageId--;
                }
            }
            result = result2;
        } else {
            result = null;
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda20(this, result, dialogId, infoFinal));
    }

    /* renamed from: lambda$getSponsoredMessages$337$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m238x32d66cc0(TLRPC.TL_messages_sponsoredMessages res) {
        putUsers(res.users, false);
        putChats(res.chats, false);
    }

    /* renamed from: lambda$getSponsoredMessages$338$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m239x1817db81(ArrayList result, long dialogId, SponsoredMessagesInfo infoFinal) {
        if (result == null) {
            this.sponsoredMessages.remove(dialogId);
            return;
        }
        long unused = infoFinal.loadTime = SystemClock.elapsedRealtime();
        ArrayList unused2 = infoFinal.messages = result;
        getNotificationCenter().postNotificationName(NotificationCenter.didLoadSponsoredMessages, Long.valueOf(dialogId), result);
    }

    public TLRPC.TL_channels_sendAsPeers getSendAsPeers(long dialogId) {
        SendAsPeersInfo info = this.sendAsPeers.get(dialogId);
        if (info != null && (info.loading || Math.abs(SystemClock.elapsedRealtime() - info.loadTime) <= 300000)) {
            return info.sendAsPeers;
        }
        TLRPC.Chat chat = getChat(Long.valueOf(-dialogId));
        if (chat == null || !ChatObject.canSendAsPeers(chat)) {
            return null;
        }
        SendAsPeersInfo info2 = new SendAsPeersInfo();
        boolean unused = info2.loading = true;
        this.sendAsPeers.put(dialogId, info2);
        TLRPC.TL_channels_getSendAs req = new TLRPC.TL_channels_getSendAs();
        req.peer = getInputPeer(dialogId);
        getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda225(this, dialogId, info2));
        return null;
    }

    /* renamed from: lambda$getSendAsPeers$342$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m237x8802e60c(long dialogId, SendAsPeersInfo infoFinal, TLObject response, TLRPC.TL_error error) {
        TLRPC.TL_channels_sendAsPeers result;
        if (response != null) {
            TLRPC.TL_channels_sendAsPeers res = (TLRPC.TL_channels_sendAsPeers) response;
            if (res.peers.isEmpty()) {
                result = null;
            } else {
                result = res;
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda65(this, res));
                LongSparseArray<TLRPC.User> usersDict = new LongSparseArray<>();
                LongSparseArray<TLRPC.Chat> chatsDict = new LongSparseArray<>();
                for (int a = 0; a < res.users.size(); a++) {
                    TLRPC.User u = res.users.get(a);
                    usersDict.put(u.id, u);
                }
                for (int a2 = 0; a2 < res.chats.size(); a2++) {
                    TLRPC.Chat c = res.chats.get(a2);
                    chatsDict.put(c.id, c);
                }
            }
        } else {
            result = null;
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda67(this, result, dialogId, infoFinal));
    }

    /* renamed from: lambda$getSendAsPeers$340$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m235xbd80088a(TLRPC.TL_channels_sendAsPeers res) {
        putUsers(res.users, false);
        putChats(res.chats, false);
    }

    /* renamed from: lambda$getSendAsPeers$341$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m236xa2CLASSNAMEb(TLRPC.TL_channels_sendAsPeers result, long dialogId, SendAsPeersInfo infoFinal) {
        if (result == null) {
            this.sendAsPeers.remove(dialogId);
            return;
        }
        long unused = infoFinal.loadTime = SystemClock.elapsedRealtime();
        TLRPC.TL_channels_sendAsPeers unused2 = infoFinal.sendAsPeers = result;
        getNotificationCenter().postNotificationName(NotificationCenter.didLoadSendAsPeers, Long.valueOf(dialogId), result);
    }

    public CharSequence getPrintingString(long dialogId, int threadId, boolean isDialog) {
        SparseArray<CharSequence> threads;
        TLRPC.User user;
        if ((!isDialog || !DialogObject.isUserDialog(dialogId) || (user = getUser(Long.valueOf(dialogId))) == null || user.status == null || user.status.expires >= 0) && (threads = this.printingStrings.get(dialogId)) != null) {
            return threads.get(threadId);
        }
        return null;
    }

    public Integer getPrintingStringType(long dialogId, int threadId) {
        SparseArray<Integer> threads = this.printingStringsTypes.get(dialogId);
        if (threads == null) {
            return null;
        }
        return threads.get(threadId);
    }

    private boolean updatePrintingUsersWithNewMessages(long uid, ArrayList<MessageObject> messages) {
        if (uid > 0) {
            if (this.printingUsers.get(Long.valueOf(uid)) == null) {
                return false;
            }
            this.printingUsers.remove(Long.valueOf(uid));
            return true;
        } else if (uid >= 0) {
            return false;
        } else {
            ArrayList<Long> messagesUsers = new ArrayList<>();
            Iterator<MessageObject> it = messages.iterator();
            while (it.hasNext()) {
                MessageObject message = it.next();
                if (message.isFromUser() && !messagesUsers.contains(Long.valueOf(message.messageOwner.from_id.user_id))) {
                    messagesUsers.add(Long.valueOf(message.messageOwner.from_id.user_id));
                }
            }
            ConcurrentHashMap concurrentHashMap = this.printingUsers.get(Long.valueOf(uid));
            boolean changed = false;
            if (concurrentHashMap != null) {
                ArrayList<Integer> threadsToRemove = null;
                for (Map.Entry<Integer, ArrayList<PrintingUser>> entry : concurrentHashMap.entrySet()) {
                    Integer threadId = entry.getKey();
                    ArrayList<PrintingUser> arr = entry.getValue();
                    int a = 0;
                    while (a < arr.size()) {
                        if (messagesUsers.contains(Long.valueOf(arr.get(a).userId))) {
                            arr.remove(a);
                            a--;
                            if (arr.isEmpty()) {
                                if (threadsToRemove == null) {
                                    threadsToRemove = new ArrayList<>();
                                }
                                threadsToRemove.add(threadId);
                            }
                            changed = true;
                        }
                        a++;
                    }
                }
                if (threadsToRemove != null) {
                    int N = threadsToRemove.size();
                    for (int a2 = 0; a2 < N; a2++) {
                        concurrentHashMap.remove(threadsToRemove.get(a2));
                    }
                    if (concurrentHashMap.isEmpty() != 0) {
                        this.printingUsers.remove(Long.valueOf(uid));
                    }
                }
            }
            if (changed) {
                return true;
            }
            return false;
        }
    }

    /* access modifiers changed from: protected */
    /* JADX WARNING: Code restructure failed: missing block: B:35:0x00a2, code lost:
        if (r10.call.id != r15.messageOwner.action.call.id) goto L_0x00a9;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean updateInterfaceWithMessages(long r28, java.util.ArrayList<org.telegram.messenger.MessageObject> r30, boolean r31) {
        /*
            r27 = this;
            r6 = r27
            r7 = r28
            r9 = r30
            if (r9 == 0) goto L_0x0414
            boolean r0 = r30.isEmpty()
            if (r0 == 0) goto L_0x0011
            r0 = 0
            goto L_0x0415
        L_0x0011:
            boolean r11 = org.telegram.messenger.DialogObject.isEncryptedDialog(r28)
            r0 = 0
            r1 = 0
            r3 = 0
            r4 = 0
            r13 = 0
            if (r31 != 0) goto L_0x0153
            r5 = 0
        L_0x001f:
            int r15 = r30.size()
            if (r5 >= r15) goto L_0x014d
            java.lang.Object r15 = r9.get(r5)
            org.telegram.messenger.MessageObject r15 = (org.telegram.messenger.MessageObject) r15
            if (r0 == 0) goto L_0x005b
            if (r11 != 0) goto L_0x0039
            int r10 = r15.getId()
            int r12 = r0.getId()
            if (r10 > r12) goto L_0x005b
        L_0x0039:
            if (r11 != 0) goto L_0x0047
            int r10 = r15.getId()
            if (r10 >= 0) goto L_0x0051
            int r10 = r0.getId()
            if (r10 >= 0) goto L_0x0051
        L_0x0047:
            int r10 = r15.getId()
            int r12 = r0.getId()
            if (r10 < r12) goto L_0x005b
        L_0x0051:
            org.telegram.tgnet.TLRPC$Message r10 = r15.messageOwner
            int r10 = r10.date
            org.telegram.tgnet.TLRPC$Message r12 = r0.messageOwner
            int r12 = r12.date
            if (r10 <= r12) goto L_0x0078
        L_0x005b:
            r0 = r15
            org.telegram.tgnet.TLRPC$Message r10 = r15.messageOwner
            org.telegram.tgnet.TLRPC$Peer r10 = r10.peer_id
            r16 = r1
            r2 = r0
            long r0 = r10.channel_id
            int r10 = (r0 > r13 ? 1 : (r0 == r13 ? 0 : -1))
            if (r10 == 0) goto L_0x0075
            org.telegram.tgnet.TLRPC$Message r0 = r15.messageOwner
            org.telegram.tgnet.TLRPC$Peer r0 = r0.peer_id
            long r0 = r0.channel_id
            r25 = r0
            r0 = r2
            r1 = r25
            goto L_0x0078
        L_0x0075:
            r0 = r2
            r1 = r16
        L_0x0078:
            org.telegram.tgnet.TLRPC$Message r10 = r15.messageOwner
            org.telegram.tgnet.TLRPC$MessageAction r10 = r10.action
            boolean r10 = r10 instanceof org.telegram.tgnet.TLRPC.TL_messageActionGroupCall
            if (r10 == 0) goto L_0x00ba
            org.telegram.tgnet.TLRPC$Message r10 = r15.messageOwner
            org.telegram.tgnet.TLRPC$Peer r10 = r10.peer_id
            long r13 = r10.channel_id
            org.telegram.tgnet.TLRPC$ChatFull r10 = r6.getChatFull(r13)
            if (r10 == 0) goto L_0x00b5
            org.telegram.tgnet.TLRPC$TL_inputGroupCall r12 = r10.call
            if (r12 == 0) goto L_0x00a5
            org.telegram.tgnet.TLRPC$TL_inputGroupCall r12 = r10.call
            long r12 = r12.id
            org.telegram.tgnet.TLRPC$Message r14 = r15.messageOwner
            org.telegram.tgnet.TLRPC$MessageAction r14 = r14.action
            org.telegram.tgnet.TLRPC$TL_inputGroupCall r14 = r14.call
            r22 = r0
            r23 = r1
            long r0 = r14.id
            int r2 = (r12 > r0 ? 1 : (r12 == r0 ? 0 : -1))
            if (r2 == 0) goto L_0x00be
            goto L_0x00a9
        L_0x00a5:
            r22 = r0
            r23 = r1
        L_0x00a9:
            org.telegram.tgnet.TLRPC$Message r0 = r15.messageOwner
            org.telegram.tgnet.TLRPC$Peer r0 = r0.peer_id
            long r0 = r0.channel_id
            r2 = 1
            r12 = 0
            r6.loadFullChat(r0, r12, r2)
            goto L_0x00be
        L_0x00b5:
            r22 = r0
            r23 = r1
            goto L_0x00be
        L_0x00ba:
            r22 = r0
            r23 = r1
        L_0x00be:
            if (r4 != 0) goto L_0x00c7
            boolean r0 = r15.isOut()
            if (r0 != 0) goto L_0x00c7
            r4 = 1
        L_0x00c7:
            boolean r0 = r15.isOut()
            if (r0 == 0) goto L_0x0136
            boolean r0 = r15.isSending()
            if (r0 != 0) goto L_0x0136
            boolean r0 = r15.isForwarded()
            if (r0 != 0) goto L_0x0136
            boolean r0 = r15.isNewGif()
            if (r0 == 0) goto L_0x0108
            org.telegram.tgnet.TLRPC$Message r0 = r15.messageOwner
            org.telegram.tgnet.TLRPC$MessageMedia r0 = r0.media
            org.telegram.tgnet.TLRPC$Document r0 = r0.document
            boolean r0 = org.telegram.messenger.MessageObject.isDocumentHasAttachedStickers(r0)
            if (r0 == 0) goto L_0x00f2
            org.telegram.messenger.MessagesController r0 = r27.getMessagesController()
            boolean r0 = r0.saveGifsWithStickers
            goto L_0x00f3
        L_0x00f2:
            r0 = 1
        L_0x00f3:
            if (r0 == 0) goto L_0x0136
            org.telegram.messenger.MediaDataController r1 = r27.getMediaDataController()
            org.telegram.tgnet.TLRPC$Message r2 = r15.messageOwner
            org.telegram.tgnet.TLRPC$MessageMedia r2 = r2.media
            org.telegram.tgnet.TLRPC$Document r2 = r2.document
            org.telegram.tgnet.TLRPC$Message r10 = r15.messageOwner
            int r10 = r10.date
            r12 = 1
            r1.addRecentGif(r2, r10, r12)
            goto L_0x0136
        L_0x0108:
            boolean r0 = r15.isAnimatedEmoji()
            if (r0 != 0) goto L_0x0136
            boolean r0 = r15.isSticker()
            if (r0 != 0) goto L_0x011a
            boolean r0 = r15.isAnimatedSticker()
            if (r0 == 0) goto L_0x0136
        L_0x011a:
            org.telegram.messenger.MediaDataController r16 = r27.getMediaDataController()
            r17 = 0
            org.telegram.tgnet.TLRPC$Message r0 = r15.messageOwner
            org.telegram.tgnet.TLRPC$MessageMedia r0 = r0.media
            org.telegram.tgnet.TLRPC$Document r0 = r0.document
            org.telegram.tgnet.TLRPC$Message r1 = r15.messageOwner
            int r1 = r1.date
            r21 = 0
            r18 = r15
            r19 = r0
            r20 = r1
            r16.addRecentSticker(r17, r18, r19, r20, r21)
        L_0x0136:
            boolean r0 = r15.isOut()
            if (r0 == 0) goto L_0x0143
            boolean r0 = r15.isSent()
            if (r0 == 0) goto L_0x0143
            r3 = 1
        L_0x0143:
            int r5 = r5 + 1
            r0 = r22
            r1 = r23
            r13 = 0
            goto L_0x001f
        L_0x014d:
            r16 = r1
            r10 = r0
            r12 = r3
            r13 = r4
            goto L_0x0158
        L_0x0153:
            r10 = r0
            r16 = r1
            r12 = r3
            r13 = r4
        L_0x0158:
            org.telegram.messenger.MediaDataController r0 = r27.getMediaDataController()
            r5 = 0
            r1 = r30
            r2 = r28
            r4 = r31
            r0.loadReplyMessagesForMessages(r1, r2, r4, r5)
            org.telegram.messenger.NotificationCenter r0 = r27.getNotificationCenter()
            int r1 = org.telegram.messenger.NotificationCenter.didReceiveNewMessages
            r2 = 3
            java.lang.Object[] r2 = new java.lang.Object[r2]
            java.lang.Long r3 = java.lang.Long.valueOf(r28)
            r4 = 0
            r2[r4] = r3
            r3 = 1
            r2[r3] = r9
            r3 = 2
            java.lang.Boolean r4 = java.lang.Boolean.valueOf(r31)
            r2[r3] = r4
            r0.postNotificationName(r1, r2)
            if (r10 == 0) goto L_0x0410
            if (r31 == 0) goto L_0x018b
            r19 = r11
            goto L_0x0412
        L_0x018b:
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r0 = r6.dialogs_dict
            java.lang.Object r0 = r0.get(r7)
            org.telegram.tgnet.TLRPC$TL_dialog r0 = (org.telegram.tgnet.TLRPC.TL_dialog) r0
            org.telegram.tgnet.TLRPC$Message r1 = r10.messageOwner
            org.telegram.tgnet.TLRPC$MessageAction r1 = r1.action
            boolean r1 = r1 instanceof org.telegram.tgnet.TLRPC.TL_messageActionChatMigrateTo
            if (r1 == 0) goto L_0x0299
            if (r0 == 0) goto L_0x0276
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r6.allDialogs
            r1.remove(r0)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r6.dialogsServerOnly
            r1.remove(r0)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r6.dialogsCanAddUsers
            r1.remove(r0)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r6.dialogsMyGroups
            r1.remove(r0)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r6.dialogsMyChannels
            r1.remove(r0)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r6.dialogsChannelsOnly
            r1.remove(r0)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r6.dialogsGroupsOnly
            r1.remove(r0)
            r1 = 0
        L_0x01c1:
            org.telegram.messenger.MessagesController$DialogFilter[] r2 = r6.selectedDialogFilter
            int r3 = r2.length
            if (r1 >= r3) goto L_0x01d4
            r3 = r2[r1]
            if (r3 == 0) goto L_0x01d1
            r2 = r2[r1]
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r2.dialogs
            r2.remove(r0)
        L_0x01d1:
            int r1 = r1 + 1
            goto L_0x01c1
        L_0x01d4:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r6.dialogsUsersOnly
            r1.remove(r0)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r6.dialogsForBlock
            r1.remove(r0)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r6.dialogsForward
            r1.remove(r0)
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r1 = r6.dialogs_dict
            long r2 = r0.id
            r1.remove(r2)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r6.dialogs_read_inbox_max
            long r2 = r0.id
            java.lang.Long r2 = java.lang.Long.valueOf(r2)
            r1.remove(r2)
            j$.util.concurrent.ConcurrentHashMap<java.lang.Long, java.lang.Integer> r1 = r6.dialogs_read_outbox_max
            long r2 = r0.id
            java.lang.Long r2 = java.lang.Long.valueOf(r2)
            r1.remove(r2)
            android.util.SparseIntArray r1 = r6.nextDialogsCacheOffset
            int r2 = r0.folder_id
            r3 = 0
            int r1 = r1.get(r2, r3)
            if (r1 <= 0) goto L_0x0214
            android.util.SparseIntArray r2 = r6.nextDialogsCacheOffset
            int r3 = r0.folder_id
            int r4 = r1 + -1
            r2.put(r3, r4)
        L_0x0214:
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r2 = r6.dialogMessage
            long r3 = r0.id
            r2.remove(r3)
            android.util.SparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog>> r2 = r6.dialogsByFolder
            int r3 = r0.folder_id
            java.lang.Object r2 = r2.get(r3)
            java.util.ArrayList r2 = (java.util.ArrayList) r2
            if (r2 == 0) goto L_0x022a
            r2.remove(r0)
        L_0x022a:
            android.util.SparseArray<org.telegram.messenger.MessageObject> r3 = r6.dialogMessagesByIds
            int r4 = r0.top_message
            java.lang.Object r3 = r3.get(r4)
            org.telegram.messenger.MessageObject r3 = (org.telegram.messenger.MessageObject) r3
            if (r3 == 0) goto L_0x0249
            org.telegram.tgnet.TLRPC$Message r4 = r3.messageOwner
            org.telegram.tgnet.TLRPC$Peer r4 = r4.peer_id
            long r4 = r4.channel_id
            r14 = 0
            int r18 = (r4 > r14 ? 1 : (r4 == r14 ? 0 : -1))
            if (r18 != 0) goto L_0x0249
            android.util.SparseArray<org.telegram.messenger.MessageObject> r4 = r6.dialogMessagesByIds
            int r5 = r0.top_message
            r4.remove(r5)
        L_0x0249:
            if (r3 == 0) goto L_0x025e
            org.telegram.tgnet.TLRPC$Message r4 = r3.messageOwner
            long r4 = r4.random_id
            r14 = 0
            int r18 = (r4 > r14 ? 1 : (r4 == r14 ? 0 : -1))
            if (r18 == 0) goto L_0x025e
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r4 = r6.dialogMessagesByRandomIds
            org.telegram.tgnet.TLRPC$Message r5 = r3.messageOwner
            long r14 = r5.random_id
            r4.remove(r14)
        L_0x025e:
            r4 = 0
            r0.top_message = r4
            org.telegram.messenger.NotificationsController r5 = r27.getNotificationsController()
            long r14 = r0.id
            r5.removeNotificationsForDialog(r14)
            org.telegram.messenger.NotificationCenter r5 = r27.getNotificationCenter()
            int r14 = org.telegram.messenger.NotificationCenter.needReloadRecentDialogsSearch
            java.lang.Object[] r15 = new java.lang.Object[r4]
            r5.postNotificationName(r14, r15)
            goto L_0x0277
        L_0x0276:
            r4 = 0
        L_0x0277:
            boolean r1 = org.telegram.messenger.DialogObject.isChatDialog(r28)
            if (r1 == 0) goto L_0x0297
            long r1 = -r7
            org.telegram.messenger.ChatObject$Call r1 = r6.getGroupCall(r1, r4)
            if (r1 == 0) goto L_0x0297
            org.telegram.tgnet.TLRPC$Message r2 = r10.messageOwner
            org.telegram.tgnet.TLRPC$MessageAction r2 = r2.action
            long r2 = r2.channel_id
            java.lang.Long r2 = java.lang.Long.valueOf(r2)
            org.telegram.tgnet.TLRPC$Chat r2 = r6.getChat(r2)
            if (r2 == 0) goto L_0x0297
            r1.migrateToChat(r2)
        L_0x0297:
            r1 = 0
            return r1
        L_0x0299:
            r1 = 0
            if (r0 != 0) goto L_0x035a
            java.lang.Long r2 = java.lang.Long.valueOf(r16)
            org.telegram.tgnet.TLRPC$Chat r14 = r6.getChat(r2)
            r2 = 0
            int r4 = (r16 > r2 ? 1 : (r16 == r2 ? 0 : -1))
            if (r4 == 0) goto L_0x02ac
            if (r14 == 0) goto L_0x02b8
        L_0x02ac:
            if (r14 == 0) goto L_0x02ba
            boolean r2 = org.telegram.messenger.ChatObject.isNotInChat(r14)
            if (r2 != 0) goto L_0x02b8
            boolean r2 = r14.min
            if (r2 == 0) goto L_0x02ba
        L_0x02b8:
            r2 = 0
            return r2
        L_0x02ba:
            boolean r2 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r2 == 0) goto L_0x02ee
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            java.lang.String r3 = "not found dialog with id "
            r2.append(r3)
            r2.append(r7)
            java.lang.String r3 = " dictCount = "
            r2.append(r3)
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r3 = r6.dialogs_dict
            int r3 = r3.size()
            r2.append(r3)
            java.lang.String r3 = " allCount = "
            r2.append(r3)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r3 = r6.allDialogs
            int r3 = r3.size()
            r2.append(r3)
            java.lang.String r2 = r2.toString()
            org.telegram.messenger.FileLog.d(r2)
        L_0x02ee:
            org.telegram.tgnet.TLRPC$TL_dialog r2 = new org.telegram.tgnet.TLRPC$TL_dialog
            r2.<init>()
            r15 = r2
            r15.id = r7
            int r3 = r10.getId()
            r15.top_message = r3
            org.telegram.tgnet.TLRPC$Message r0 = r10.messageOwner
            int r0 = r0.date
            r15.last_message_date = r0
            boolean r0 = org.telegram.messenger.ChatObject.isChannel(r14)
            r15.flags = r0
            androidx.collection.LongSparseArray<org.telegram.tgnet.TLRPC$Dialog> r0 = r6.dialogs_dict
            r0.put(r7, r15)
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r0 = r6.allDialogs
            r0.add(r15)
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r0 = r6.dialogMessage
            r0.put(r7, r10)
            org.telegram.tgnet.TLRPC$Message r0 = r10.messageOwner
            org.telegram.tgnet.TLRPC$Peer r0 = r0.peer_id
            long r4 = r0.channel_id
            r18 = 0
            int r0 = (r4 > r18 ? 1 : (r4 == r18 ? 0 : -1))
            if (r0 != 0) goto L_0x033d
            android.util.SparseArray<org.telegram.messenger.MessageObject> r0 = r6.dialogMessagesByIds
            int r2 = r10.getId()
            r0.put(r2, r10)
            org.telegram.tgnet.TLRPC$Message r0 = r10.messageOwner
            long r4 = r0.random_id
            int r0 = (r4 > r18 ? 1 : (r4 == r18 ? 0 : -1))
            if (r0 == 0) goto L_0x033d
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r0 = r6.dialogMessagesByRandomIds
            org.telegram.tgnet.TLRPC$Message r2 = r10.messageOwner
            long r4 = r2.random_id
            r0.put(r4, r10)
        L_0x033d:
            r18 = 1
            r2 = r15
            org.telegram.messenger.MessagesStorage r4 = r27.getMessagesStorage()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda143 r5 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda143
            r0 = r5
            r1 = r27
            r9 = r4
            r19 = r11
            r11 = r5
            r4 = r28
            r0.<init>(r1, r2, r3, r4)
            r9.getDialogFolderId(r7, r11)
            r0 = r15
            r1 = r18
            goto L_0x0400
        L_0x035a:
            r19 = r11
            int r2 = r0.top_message
            if (r2 <= 0) goto L_0x036e
            int r2 = r10.getId()
            if (r2 <= 0) goto L_0x036e
            int r2 = r10.getId()
            int r3 = r0.top_message
            if (r2 > r3) goto L_0x0394
        L_0x036e:
            int r2 = r0.top_message
            if (r2 >= 0) goto L_0x0380
            int r2 = r10.getId()
            if (r2 >= 0) goto L_0x0380
            int r2 = r10.getId()
            int r3 = r0.top_message
            if (r2 < r3) goto L_0x0394
        L_0x0380:
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r2 = r6.dialogMessage
            int r2 = r2.indexOfKey(r7)
            if (r2 < 0) goto L_0x0394
            int r2 = r0.top_message
            if (r2 < 0) goto L_0x0394
            int r2 = r0.last_message_date
            org.telegram.tgnet.TLRPC$Message r3 = r10.messageOwner
            int r3 = r3.date
            if (r2 > r3) goto L_0x0400
        L_0x0394:
            android.util.SparseArray<org.telegram.messenger.MessageObject> r2 = r6.dialogMessagesByIds
            int r3 = r0.top_message
            java.lang.Object r2 = r2.get(r3)
            org.telegram.messenger.MessageObject r2 = (org.telegram.messenger.MessageObject) r2
            if (r2 == 0) goto L_0x03b3
            org.telegram.tgnet.TLRPC$Message r3 = r2.messageOwner
            org.telegram.tgnet.TLRPC$Peer r3 = r3.peer_id
            long r3 = r3.channel_id
            r14 = 0
            int r5 = (r3 > r14 ? 1 : (r3 == r14 ? 0 : -1))
            if (r5 != 0) goto L_0x03b3
            android.util.SparseArray<org.telegram.messenger.MessageObject> r3 = r6.dialogMessagesByIds
            int r4 = r0.top_message
            r3.remove(r4)
        L_0x03b3:
            if (r2 == 0) goto L_0x03c8
            org.telegram.tgnet.TLRPC$Message r3 = r2.messageOwner
            long r3 = r3.random_id
            r14 = 0
            int r5 = (r3 > r14 ? 1 : (r3 == r14 ? 0 : -1))
            if (r5 == 0) goto L_0x03c8
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r3 = r6.dialogMessagesByRandomIds
            org.telegram.tgnet.TLRPC$Message r4 = r2.messageOwner
            long r4 = r4.random_id
            r3.remove(r4)
        L_0x03c8:
            int r3 = r10.getId()
            r0.top_message = r3
            org.telegram.tgnet.TLRPC$Message r3 = r10.messageOwner
            int r3 = r3.date
            r0.last_message_date = r3
            r1 = 1
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r3 = r6.dialogMessage
            r3.put(r7, r10)
            org.telegram.tgnet.TLRPC$Message r3 = r10.messageOwner
            org.telegram.tgnet.TLRPC$Peer r3 = r3.peer_id
            long r3 = r3.channel_id
            r14 = 0
            int r5 = (r3 > r14 ? 1 : (r3 == r14 ? 0 : -1))
            if (r5 != 0) goto L_0x0400
            android.util.SparseArray<org.telegram.messenger.MessageObject> r3 = r6.dialogMessagesByIds
            int r4 = r10.getId()
            r3.put(r4, r10)
            org.telegram.tgnet.TLRPC$Message r3 = r10.messageOwner
            long r3 = r3.random_id
            int r5 = (r3 > r14 ? 1 : (r3 == r14 ? 0 : -1))
            if (r5 == 0) goto L_0x0400
            androidx.collection.LongSparseArray<org.telegram.messenger.MessageObject> r3 = r6.dialogMessagesByRandomIds
            org.telegram.tgnet.TLRPC$Message r4 = r10.messageOwner
            long r4 = r4.random_id
            r3.put(r4, r10)
        L_0x0400:
            if (r1 == 0) goto L_0x0406
            r2 = 0
            r6.sortDialogs(r2)
        L_0x0406:
            if (r12 == 0) goto L_0x040f
            org.telegram.messenger.MediaDataController r2 = r27.getMediaDataController()
            r2.increasePeerRaiting(r7)
        L_0x040f:
            return r1
        L_0x0410:
            r19 = r11
        L_0x0412:
            r0 = 0
            return r0
        L_0x0414:
            r0 = 0
        L_0x0415:
            return r0
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.updateInterfaceWithMessages(long, java.util.ArrayList, boolean):boolean");
    }

    /* renamed from: lambda$updateInterfaceWithMessages$343$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m427x14ecvar_(TLRPC.Dialog dialogFinal, int mid, long dialogId, int param) {
        if (param != -1) {
            if (param != 0) {
                dialogFinal.folder_id = param;
                sortDialogs((LongSparseArray<TLRPC.Chat>) null);
                getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, true);
            }
        } else if (mid > 0 && !DialogObject.isEncryptedDialog(dialogId)) {
            loadUnknownDialog(getInputPeer(dialogId), 0);
        }
    }

    public void addDialogAction(long did, boolean clean) {
        TLRPC.Dialog dialog = this.dialogs_dict.get(did);
        if (dialog != null) {
            if (clean) {
                this.clearingHistoryDialogs.put(did, dialog);
            } else {
                this.deletingDialogs.put(did, dialog);
                this.allDialogs.remove(dialog);
                sortDialogs((LongSparseArray<TLRPC.Chat>) null);
            }
            getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, true);
        }
    }

    public void removeDialogAction(long did, boolean clean, boolean apply) {
        TLRPC.Dialog dialog = this.dialogs_dict.get(did);
        if (dialog != null) {
            if (clean) {
                this.clearingHistoryDialogs.remove(did);
            } else {
                this.deletingDialogs.remove(did);
                if (!apply) {
                    this.allDialogs.add(dialog);
                    sortDialogs((LongSparseArray<TLRPC.Chat>) null);
                }
            }
            if (!apply) {
                getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload, true);
            }
        }
    }

    public boolean isClearingDialog(long did) {
        return this.clearingHistoryDialogs.get(did) != null;
    }

    public void sortDialogs(LongSparseArray<TLRPC.Chat> chatsDict) {
        TLRPC.User user;
        TLRPC.Chat chat;
        TLRPC.Chat chat2;
        TLRPC.EncryptedChat encryptedChat;
        LongSparseArray<TLRPC.Chat> longSparseArray = chatsDict;
        this.dialogsServerOnly.clear();
        this.dialogsCanAddUsers.clear();
        this.dialogsMyGroups.clear();
        this.dialogsMyChannels.clear();
        this.dialogsChannelsOnly.clear();
        this.dialogsGroupsOnly.clear();
        int a = 0;
        while (true) {
            DialogFilter[] dialogFilterArr = this.selectedDialogFilter;
            if (a >= dialogFilterArr.length) {
                break;
            }
            if (dialogFilterArr[a] != null) {
                dialogFilterArr[a].dialogs.clear();
            }
            a++;
        }
        this.dialogsUsersOnly.clear();
        this.dialogsForBlock.clear();
        this.dialogsForward.clear();
        for (int a2 = 0; a2 < this.dialogsByFolder.size(); a2++) {
            ArrayList<TLRPC.Dialog> arrayList = this.dialogsByFolder.valueAt(a2);
            if (arrayList != null) {
                arrayList.clear();
            }
        }
        this.unreadUnmutedDialogs = 0;
        boolean selfAdded = false;
        long selfId = getUserConfig().getClientUserId();
        DialogFilter[] dialogFilterArr2 = this.selectedDialogFilter;
        if (dialogFilterArr2[0] != null || dialogFilterArr2[1] != null) {
            int b = 0;
            while (true) {
                DialogFilter[] dialogFilterArr3 = this.selectedDialogFilter;
                if (b >= dialogFilterArr3.length) {
                    break;
                }
                DialogFilter dialogFilter = dialogFilterArr3[b];
                this.sortingDialogFilter = dialogFilter;
                if (dialogFilter != null) {
                    Collections.sort(this.allDialogs, this.dialogDateComparator);
                    ArrayList<TLRPC.Dialog> dialogsByFilter = this.sortingDialogFilter.dialogs;
                    int N = this.allDialogs.size();
                    for (int a3 = 0; a3 < N; a3++) {
                        TLRPC.Dialog d = this.allDialogs.get(a3);
                        if (d instanceof TLRPC.TL_dialog) {
                            long dialogId = d.id;
                            if (DialogObject.isEncryptedDialog(dialogId) && (encryptedChat = getEncryptedChat(Integer.valueOf(DialogObject.getEncryptedChatId(dialogId)))) != null) {
                                dialogId = encryptedChat.user_id;
                            }
                            if (this.sortingDialogFilter.includesDialog(getAccountInstance(), dialogId, d)) {
                                dialogsByFilter.add(d);
                            }
                        }
                    }
                }
                b++;
            }
        }
        Collections.sort(this.allDialogs, this.dialogComparator);
        this.isLeftPromoChannel = true;
        TLRPC.Dialog dialog = this.promoDialog;
        if (dialog != null && dialog.id < 0 && (chat2 = getChat(Long.valueOf(-this.promoDialog.id))) != null && !chat2.left) {
            this.isLeftPromoChannel = false;
        }
        int a4 = 0;
        int N2 = this.allDialogs.size();
        while (a4 < N2) {
            TLRPC.Dialog d2 = this.allDialogs.get(a4);
            if (d2 instanceof TLRPC.TL_dialog) {
                MessageObject messageObject = this.dialogMessage.get(d2.id);
                if (messageObject == null || messageObject.messageOwner.date >= this.dialogsLoadedTillDate) {
                    boolean canAddToForward = true;
                    if (!DialogObject.isEncryptedDialog(d2.id)) {
                        this.dialogsServerOnly.add(d2);
                        if (DialogObject.isChannel(d2)) {
                            TLRPC.Chat chat3 = getChat(Long.valueOf(-d2.id));
                            if (chat3 != null && (chat3.creator || ((chat3.megagroup && ((chat3.admin_rights != null && (chat3.admin_rights.post_messages || chat3.admin_rights.add_admins)) || chat3.default_banned_rights == null || !chat3.default_banned_rights.invite_users)) || (!chat3.megagroup && chat3.admin_rights != null && chat3.admin_rights.add_admins)))) {
                                if (!chat3.creator && ((!chat3.megagroup || chat3.admin_rights == null) && (chat3.megagroup || chat3.admin_rights == null))) {
                                    this.dialogsCanAddUsers.add(d2);
                                } else if (chat3.megagroup) {
                                    this.dialogsMyGroups.add(d2);
                                } else {
                                    this.dialogsMyChannels.add(d2);
                                }
                            }
                            if (chat3 == null || !chat3.megagroup) {
                                this.dialogsChannelsOnly.add(d2);
                                canAddToForward = ChatObject.hasAdminRights(chat3) && ChatObject.canPost(chat3);
                            } else {
                                this.dialogsGroupsOnly.add(d2);
                                canAddToForward = !chat3.gigagroup || ChatObject.hasAdminRights(chat3);
                            }
                        } else if (d2.id < 0) {
                            if (longSparseArray == null || (chat = longSparseArray.get(-d2.id)) == null || chat.migrated_to == null) {
                                TLRPC.Chat chat4 = getChat(Long.valueOf(-d2.id));
                                if (chat4 != null && ((chat4.admin_rights != null && (chat4.admin_rights.add_admins || chat4.admin_rights.invite_users)) || chat4.creator)) {
                                    if (chat4.creator) {
                                        this.dialogsMyGroups.add(d2);
                                    } else {
                                        this.dialogsCanAddUsers.add(d2);
                                    }
                                }
                                this.dialogsGroupsOnly.add(d2);
                            } else {
                                this.allDialogs.remove(a4);
                                a4--;
                                N2--;
                                a4++;
                            }
                        } else if (d2.id != selfId) {
                            this.dialogsUsersOnly.add(d2);
                            if (!UserObject.isReplyUser(d2.id)) {
                                this.dialogsForBlock.add(d2);
                            }
                        }
                    }
                    if (canAddToForward && d2.folder_id == 0) {
                        if (d2.id == selfId) {
                            this.dialogsForward.add(0, d2);
                            selfAdded = true;
                        } else {
                            this.dialogsForward.add(d2);
                        }
                    }
                } else {
                    a4++;
                }
            }
            if ((d2.unread_count != 0 || d2.unread_mark) && !isDialogMuted(d2.id)) {
                this.unreadUnmutedDialogs++;
            }
            if (this.promoDialog == null || d2.id != this.promoDialog.id || !this.isLeftPromoChannel) {
                addDialogToItsFolder(-1, d2);
                a4++;
            } else {
                this.allDialogs.remove(a4);
                a4--;
                N2--;
                a4++;
            }
        }
        TLRPC.Dialog dialog2 = this.promoDialog;
        if (dialog2 != null && this.isLeftPromoChannel) {
            this.allDialogs.add(0, dialog2);
            addDialogToItsFolder(-2, this.promoDialog);
        }
        if (!selfAdded && (user = getUserConfig().getCurrentUser()) != null) {
            TLRPC.Dialog dialog3 = new TLRPC.TL_dialog();
            dialog3.id = user.id;
            dialog3.notify_settings = new TLRPC.TL_peerNotifySettings();
            dialog3.peer = new TLRPC.TL_peerUser();
            dialog3.peer.user_id = user.id;
            this.dialogsForward.add(0, dialog3);
        }
        for (int a5 = 0; a5 < this.dialogsByFolder.size(); a5++) {
            int folderId = this.dialogsByFolder.keyAt(a5);
            if (this.dialogsByFolder.valueAt(a5).isEmpty()) {
                this.dialogsByFolder.remove(folderId);
            }
        }
    }

    private void addDialogToItsFolder(int index, TLRPC.Dialog dialog) {
        int folderId;
        if (dialog instanceof TLRPC.TL_dialogFolder) {
            folderId = 0;
        } else {
            folderId = dialog.folder_id;
        }
        ArrayList<TLRPC.Dialog> dialogs = this.dialogsByFolder.get(folderId);
        if (dialogs == null) {
            dialogs = new ArrayList<>();
            this.dialogsByFolder.put(folderId, dialogs);
        }
        if (index == -1) {
            dialogs.add(dialog);
        } else if (index != -2) {
            dialogs.add(index, dialog);
        } else if (dialogs.isEmpty() || !(dialogs.get(0) instanceof TLRPC.TL_dialogFolder)) {
            dialogs.add(0, dialog);
        } else {
            dialogs.add(1, dialog);
        }
    }

    public static String getRestrictionReason(ArrayList<TLRPC.TL_restrictionReason> reasons) {
        if (reasons.isEmpty()) {
            return null;
        }
        int N = reasons.size();
        for (int a = 0; a < N; a++) {
            TLRPC.TL_restrictionReason reason = reasons.get(a);
            if ("all".equals(reason.platform) || (!BuildVars.isStandaloneApp() && !BuildVars.isBetaApp() && "android".equals(reason.platform))) {
                return reason.text;
            }
        }
        return null;
    }

    private static void showCantOpenAlert(BaseFragment fragment, String reason) {
        if (fragment != null && fragment.getParentActivity() != null) {
            AlertDialog.Builder builder = new AlertDialog.Builder((Context) fragment.getParentActivity());
            builder.setTitle(LocaleController.getString("AppName", NUM));
            builder.setPositiveButton(LocaleController.getString("OK", NUM), (DialogInterface.OnClickListener) null);
            builder.setMessage(reason);
            fragment.showDialog(builder.create());
        }
    }

    public boolean checkCanOpenChat(Bundle bundle, BaseFragment fragment) {
        return checkCanOpenChat(bundle, fragment, (MessageObject) null);
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r13v5, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getMessages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r13v7, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getMessages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v9, resolved type: org.telegram.tgnet.TLRPC$TL_channels_getMessages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r13v12, resolved type: org.telegram.tgnet.TLRPC$TL_messages_getMessages} */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public boolean checkCanOpenChat(android.os.Bundle r22, org.telegram.ui.ActionBar.BaseFragment r23, org.telegram.messenger.MessageObject r24) {
        /*
            r21 = this;
            r0 = r21
            r1 = r22
            r2 = r23
            r3 = 1
            if (r1 == 0) goto L_0x0100
            if (r2 != 0) goto L_0x000d
            goto L_0x0100
        L_0x000d:
            r4 = 0
            r5 = 0
            java.lang.String r6 = "user_id"
            r7 = 0
            long r9 = r1.getLong(r6, r7)
            java.lang.String r6 = "chat_id"
            long r11 = r1.getLong(r6, r7)
            java.lang.String r6 = "message_id"
            r13 = 0
            int r6 = r1.getInt(r6, r13)
            int r14 = (r9 > r7 ? 1 : (r9 == r7 ? 0 : -1))
            if (r14 == 0) goto L_0x0031
            java.lang.Long r14 = java.lang.Long.valueOf(r9)
            org.telegram.tgnet.TLRPC$User r4 = r0.getUser(r14)
            goto L_0x003d
        L_0x0031:
            int r14 = (r11 > r7 ? 1 : (r11 == r7 ? 0 : -1))
            if (r14 == 0) goto L_0x003d
            java.lang.Long r14 = java.lang.Long.valueOf(r11)
            org.telegram.tgnet.TLRPC$Chat r5 = r0.getChat(r14)
        L_0x003d:
            if (r4 != 0) goto L_0x0042
            if (r5 != 0) goto L_0x0042
            return r3
        L_0x0042:
            if (r5 == 0) goto L_0x004b
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_restrictionReason> r14 = r5.restriction_reason
            java.lang.String r14 = getRestrictionReason(r14)
            goto L_0x0051
        L_0x004b:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$TL_restrictionReason> r14 = r4.restriction_reason
            java.lang.String r14 = getRestrictionReason(r14)
        L_0x0051:
            if (r14 == 0) goto L_0x0057
            showCantOpenAlert(r2, r14)
            return r13
        L_0x0057:
            if (r6 == 0) goto L_0x00fa
            if (r24 == 0) goto L_0x00fa
            if (r5 == 0) goto L_0x00fa
            r16 = r4
            long r3 = r5.access_hash
            int r17 = (r3 > r7 ? 1 : (r3 == r7 ? 0 : -1))
            if (r17 != 0) goto L_0x00f7
            long r3 = r24.getDialogId()
            boolean r17 = org.telegram.messenger.DialogObject.isEncryptedDialog(r3)
            if (r17 != 0) goto L_0x00f4
            org.telegram.ui.ActionBar.AlertDialog r15 = new org.telegram.ui.ActionBar.AlertDialog
            android.app.Activity r13 = r23.getParentActivity()
            r7 = 3
            r15.<init>(r13, r7)
            r7 = r15
            r18 = 0
            int r8 = (r3 > r18 ? 1 : (r3 == r18 ? 0 : -1))
            if (r8 >= 0) goto L_0x008c
            r13 = r5
            r8 = r6
            long r5 = -r3
            java.lang.Long r5 = java.lang.Long.valueOf(r5)
            org.telegram.tgnet.TLRPC$Chat r5 = r0.getChat(r5)
            goto L_0x008e
        L_0x008c:
            r13 = r5
            r8 = r6
        L_0x008e:
            int r6 = (r3 > r18 ? 1 : (r3 == r18 ? 0 : -1))
            if (r6 > 0) goto L_0x00be
            boolean r6 = org.telegram.messenger.ChatObject.isChannel(r5)
            if (r6 != 0) goto L_0x009a
            r13 = r5
            goto L_0x00bf
        L_0x009a:
            r13 = r5
            long r5 = -r3
            java.lang.Long r5 = java.lang.Long.valueOf(r5)
            org.telegram.tgnet.TLRPC$Chat r5 = r0.getChat(r5)
            org.telegram.tgnet.TLRPC$TL_channels_getMessages r6 = new org.telegram.tgnet.TLRPC$TL_channels_getMessages
            r6.<init>()
            org.telegram.tgnet.TLRPC$InputChannel r13 = getInputChannel((org.telegram.tgnet.TLRPC.Chat) r5)
            r6.channel = r13
            java.util.ArrayList<java.lang.Integer> r13 = r6.id
            int r15 = r24.getId()
            java.lang.Integer r15 = java.lang.Integer.valueOf(r15)
            r13.add(r15)
            r13 = r6
            goto L_0x00d7
        L_0x00be:
            r13 = r5
        L_0x00bf:
            org.telegram.tgnet.TLRPC$TL_messages_getMessages r5 = new org.telegram.tgnet.TLRPC$TL_messages_getMessages
            r5.<init>()
            java.util.ArrayList<java.lang.Integer> r6 = r5.id
            int r15 = r24.getId()
            java.lang.Integer r15 = java.lang.Integer.valueOf(r15)
            r6.add(r15)
            r20 = r13
            r13 = r5
            r5 = r20
        L_0x00d7:
            org.telegram.tgnet.ConnectionsManager r6 = r21.getConnectionsManager()
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda254 r15 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda254
            r15.<init>(r0, r7, r2, r1)
            int r6 = r6.sendRequest(r13, r15)
            org.telegram.messenger.MessagesController$$ExternalSyntheticLambda295 r15 = new org.telegram.messenger.MessagesController$$ExternalSyntheticLambda295
            r15.<init>(r0, r6, r2)
            r7.setOnCancelListener(r15)
            r2.setVisibleDialog(r7)
            r7.show()
            r15 = 0
            return r15
        L_0x00f4:
            r13 = r5
            r8 = r6
            goto L_0x00fe
        L_0x00f7:
            r13 = r5
            r8 = r6
            goto L_0x00fe
        L_0x00fa:
            r16 = r4
            r13 = r5
            r8 = r6
        L_0x00fe:
            r3 = 1
            return r3
        L_0x0100:
            return r3
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesController.checkCanOpenChat(android.os.Bundle, org.telegram.ui.ActionBar.BaseFragment, org.telegram.messenger.MessageObject):boolean");
    }

    /* renamed from: lambda$checkCanOpenChat$345$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m131x5abd1d78(AlertDialog progressDialog, BaseFragment fragment, Bundle bundle, TLObject response, TLRPC.TL_error error) {
        if (response != null) {
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda116(this, progressDialog, response, fragment, bundle));
        }
    }

    /* renamed from: lambda$checkCanOpenChat$344$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m130x757baeb7(AlertDialog progressDialog, TLObject response, BaseFragment fragment, Bundle bundle) {
        try {
            progressDialog.dismiss();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        TLRPC.messages_Messages res = (TLRPC.messages_Messages) response;
        putUsers(res.users, false);
        putChats(res.chats, false);
        getMessagesStorage().putUsersAndChats(res.users, res.chats, true, true);
        fragment.presentFragment(new ChatActivity(bundle), true);
    }

    /* renamed from: lambda$checkCanOpenChat$346$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m132x3ffe8CLASSNAME(int reqId, BaseFragment fragment, DialogInterface dialog) {
        getConnectionsManager().cancelRequest(reqId, true);
        fragment.setVisibleDialog((Dialog) null);
    }

    public static void openChatOrProfileWith(TLRPC.User user, TLRPC.Chat chat, BaseFragment fragment, int type, boolean closeLast) {
        String reason;
        if ((user != null || chat != null) && fragment != null) {
            if (chat != null) {
                reason = getRestrictionReason(chat.restriction_reason);
            } else {
                reason = getRestrictionReason(user.restriction_reason);
                if (type != 3 && user.bot) {
                    type = 1;
                    closeLast = true;
                }
            }
            if (reason != null) {
                showCantOpenAlert(fragment, reason);
                return;
            }
            Bundle args = new Bundle();
            if (chat != null) {
                args.putLong("chat_id", chat.id);
            } else {
                args.putLong("user_id", user.id);
            }
            if (type == 0) {
                fragment.presentFragment(new ProfileActivity(args));
            } else if (type == 2) {
                fragment.presentFragment(new ChatActivity(args), true, true);
            } else {
                fragment.presentFragment(new ChatActivity(args), closeLast);
            }
        }
    }

    public void openByUserName(String username, BaseFragment fragment, int type) {
        if (username != null && fragment != null) {
            TLObject object = getUserOrChat(username);
            TLRPC.User user = null;
            TLRPC.Chat chat = null;
            if (object instanceof TLRPC.User) {
                user = (TLRPC.User) object;
                if (user.min) {
                    user = null;
                }
            } else if (object instanceof TLRPC.Chat) {
                chat = (TLRPC.Chat) object;
                if (chat.min) {
                    chat = null;
                }
            }
            if (user != null) {
                openChatOrProfileWith(user, (TLRPC.Chat) null, fragment, type, false);
            } else if (chat != null) {
                openChatOrProfileWith((TLRPC.User) null, chat, fragment, 1, false);
            } else if (fragment.getParentActivity() != null) {
                AlertDialog[] progressDialog = {new AlertDialog(fragment.getParentActivity(), 3)};
                TLRPC.TL_contacts_resolveUsername req = new TLRPC.TL_contacts_resolveUsername();
                req.username = username;
                AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda126(this, progressDialog, getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda267(this, progressDialog, fragment, type)), fragment), 500);
            }
        }
    }

    /* renamed from: lambda$openByUserName$348$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m308x62d8CLASSNAME(AlertDialog[] progressDialog, BaseFragment fragment, int type, TLObject response, TLRPC.TL_error error) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda127(this, progressDialog, fragment, error, response, type));
    }

    /* renamed from: lambda$openByUserName$347$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m307x7d975147(AlertDialog[] progressDialog, BaseFragment fragment, TLRPC.TL_error error, TLObject response, int type) {
        try {
            progressDialog[0].dismiss();
        } catch (Exception e) {
        }
        progressDialog[0] = null;
        fragment.setVisibleDialog((Dialog) null);
        if (error == null) {
            TLRPC.TL_contacts_resolvedPeer res = (TLRPC.TL_contacts_resolvedPeer) response;
            putUsers(res.users, false);
            putChats(res.chats, false);
            getMessagesStorage().putUsersAndChats(res.users, res.chats, false, true);
            if (!res.chats.isEmpty()) {
                openChatOrProfileWith((TLRPC.User) null, res.chats.get(0), fragment, 1, false);
            } else if (!res.users.isEmpty()) {
                openChatOrProfileWith(res.users.get(0), (TLRPC.Chat) null, fragment, type, false);
            }
        } else if (fragment.getParentActivity() != null) {
            try {
                BulletinFactory.of(fragment).createErrorBulletin(LocaleController.getString("NoUsernameFound", NUM)).show();
            } catch (Exception e2) {
                FileLog.e((Throwable) e2);
            }
        }
    }

    /* renamed from: lambda$openByUserName$350$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m310xfbb9b35f(AlertDialog[] progressDialog, int reqId, BaseFragment fragment) {
        if (progressDialog[0] != null) {
            progressDialog[0].setOnCancelListener(new MessagesController$$ExternalSyntheticLambda222(this, reqId));
            fragment.showDialog(progressDialog[0]);
        }
    }

    /* renamed from: lambda$openByUserName$349$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m309x481a2ec9(int reqId, DialogInterface dialog) {
        getConnectionsManager().cancelRequest(reqId, true);
    }

    public void ensureMessagesLoaded(long dialogId, int messageId, MessagesLoadedCallback callback) {
        int messageId2;
        long chatId;
        long j = dialogId;
        SharedPreferences sharedPreferences = getNotificationsSettings(this.currentAccount);
        if (messageId == 0) {
            messageId2 = sharedPreferences.getInt("diditem" + j, 0);
        } else {
            messageId2 = messageId;
        }
        int finalMessageId = messageId2;
        int classGuid = ConnectionsManager.generateClassGuid();
        if (DialogObject.isChatDialog(dialogId)) {
            chatId = -j;
        } else {
            chatId = 0;
        }
        if (chatId != 0) {
            TLRPC.Chat currentChat = getMessagesController().getChat(Long.valueOf(chatId));
            if (currentChat == null) {
                MessagesStorage messagesStorage = getMessagesStorage();
                DispatchQueue storageQueue = messagesStorage.getStorageQueue();
                TLRPC.Chat chat = currentChat;
                MessagesController$$ExternalSyntheticLambda36 messagesController$$ExternalSyntheticLambda36 = r0;
                MessagesController$$ExternalSyntheticLambda36 messagesController$$ExternalSyntheticLambda362 = new MessagesController$$ExternalSyntheticLambda36(this, messagesStorage, chatId, dialogId, finalMessageId, callback);
                storageQueue.postRunnable(messagesController$$ExternalSyntheticLambda36);
                return;
            }
        }
        final int count = AndroidUtilities.isTablet() ? 30 : 20;
        final int i = classGuid;
        SharedPreferences sharedPreferences2 = sharedPreferences;
        final int i2 = finalMessageId;
        final long j2 = dialogId;
        final MessagesLoadedCallback messagesLoadedCallback = callback;
        AnonymousClass1 r8 = new NotificationCenter.NotificationCenterDelegate() {
            public void didReceivedNotification(int id, int account, Object... args) {
                int i = id;
                if (i == NotificationCenter.messagesDidLoadWithoutProcess && args[0].intValue() == i) {
                    int size = args[1].intValue();
                    boolean isCache = args[2].booleanValue();
                    boolean isEnd = args[3].booleanValue();
                    int lastMessageId = args[4].intValue();
                    int i2 = count;
                    if (size >= i2 / 2 || isEnd || !isCache) {
                        MessagesController.this.getNotificationCenter().removeObserver(this, NotificationCenter.messagesDidLoadWithoutProcess);
                        MessagesController.this.getNotificationCenter().removeObserver(this, NotificationCenter.loadingMessagesFailed);
                        MessagesLoadedCallback messagesLoadedCallback = messagesLoadedCallback;
                        if (messagesLoadedCallback != null) {
                            messagesLoadedCallback.onMessagesLoaded(isCache);
                            return;
                        }
                        return;
                    }
                    int i3 = i2;
                    if (i3 != 0) {
                        MessagesController.this.loadMessagesInternal(j2, 0, false, i2, i3, 0, false, 0, i, 3, lastMessageId, 0, 0, -1, 0, 0, 0, false, 0, true, false);
                    } else {
                        MessagesController.this.loadMessagesInternal(j2, 0, false, i2, i3, 0, false, 0, i, 2, lastMessageId, 0, 0, -1, 0, 0, 0, false, 0, true, false);
                    }
                } else if (i == NotificationCenter.loadingMessagesFailed && args[0].intValue() == i) {
                    MessagesController.this.getNotificationCenter().removeObserver(this, NotificationCenter.messagesDidLoadWithoutProcess);
                    MessagesController.this.getNotificationCenter().removeObserver(this, NotificationCenter.loadingMessagesFailed);
                    MessagesLoadedCallback messagesLoadedCallback2 = messagesLoadedCallback;
                    if (messagesLoadedCallback2 != null) {
                        messagesLoadedCallback2.onError();
                    }
                }
            }
        };
        getNotificationCenter().addObserver(r8, NotificationCenter.messagesDidLoadWithoutProcess);
        getNotificationCenter().addObserver(r8, NotificationCenter.loadingMessagesFailed);
        if (messageId2 != 0) {
            loadMessagesInternal(dialogId, 0, true, count, finalMessageId, 0, true, 0, classGuid, 3, 0, 0, 0, -1, 0, 0, 0, false, 0, true, false);
        } else {
            loadMessagesInternal(dialogId, 0, true, count, finalMessageId, 0, true, 0, classGuid, 2, 0, 0, 0, -1, 0, 0, 0, false, 0, true, false);
        }
    }

    /* renamed from: lambda$ensureMessagesLoaded$352$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m205x412da119(MessagesStorage messagesStorage, long chatId, long dialogId, int finalMessageId, MessagesLoadedCallback callback) {
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda56(this, messagesStorage.getChat(chatId), dialogId, finalMessageId, callback));
    }

    /* renamed from: lambda$ensureMessagesLoaded$351$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m204x5beCLASSNAME(TLRPC.Chat chat, long dialogId, int finalMessageId, MessagesLoadedCallback callback) {
        if (chat != null) {
            getMessagesController().putChat(chat, true);
            ensureMessagesLoaded(dialogId, finalMessageId, callback);
        } else if (callback != null) {
            callback.onError();
        }
    }

    public int getChatPendingRequestsOnClosed(long chatId) {
        SharedPreferences sharedPreferences = this.mainPreferences;
        return sharedPreferences.getInt("chatPendingRequests" + chatId, 0);
    }

    public void setChatPendingRequestsOnClose(long chatId, int count) {
        SharedPreferences.Editor edit = this.mainPreferences.edit();
        edit.putInt("chatPendingRequests" + chatId, count).apply();
    }

    public void markSponsoredAsRead(long dialog_id, MessageObject object) {
    }

    public void deleteMessagesRange(long dialogId, long channelId, int minDate, int maxDate, boolean forAll, Runnable callback) {
        TLRPC.TL_messages_deleteHistory req = new TLRPC.TL_messages_deleteHistory();
        req.peer = getInputPeer(dialogId);
        req.flags = 12;
        req.min_date = minDate;
        req.max_date = maxDate;
        req.revoke = forAll;
        getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda211(this, dialogId, minDate, maxDate, channelId, callback));
    }

    /* renamed from: lambda$deleteMessagesRange$356$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m186x9b6dab5a(long dialogId, int minDate, int maxDate, long channelId, Runnable callback, TLObject response, TLRPC.TL_error error) {
        if (error == null) {
            TLRPC.TL_messages_affectedHistory res = (TLRPC.TL_messages_affectedHistory) response;
            processNewDifferenceParams(-1, res.pts, -1, res.pts_count);
            getMessagesStorage().getStorageQueue().postRunnable(new MessagesController$$ExternalSyntheticLambda325(this, dialogId, minDate, maxDate, channelId, callback));
            Runnable runnable = callback;
            return;
        }
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda350(callback));
    }

    /* renamed from: lambda$deleteMessagesRange$354$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m185xd0eacdd8(long dialogId, int minDate, int maxDate, long channelId, Runnable callback) {
        long j = dialogId;
        ArrayList<Integer> dbMessages = getMessagesStorage().getCachedMessagesInRange(dialogId, minDate, maxDate);
        long j2 = dialogId;
        getMessagesStorage().markMessagesAsDeleted(j2, dbMessages, false, true, false);
        getMessagesStorage().updateDialogsWithDeletedMessages(j2, 0, dbMessages, (ArrayList<Long>) null, false);
        AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda19(this, dbMessages, channelId, callback));
    }

    /* renamed from: lambda$deleteMessagesRange$353$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m184xeba95var_(ArrayList dbMessages, long channelId, Runnable callback) {
        getNotificationCenter().postNotificationName(NotificationCenter.messagesDeleted, dbMessages, Long.valueOf(channelId), false);
        callback.run();
    }

    public void setChatReactions(long chatId, List<String> reactions) {
        TLRPC.TL_messages_setChatAvailableReactions req = new TLRPC.TL_messages_setChatAvailableReactions();
        req.peer = getInputPeer(-chatId);
        req.available_reactions.addAll(reactions);
        getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda224(this, chatId, reactions));
    }

    /* renamed from: lambda$setChatReactions$358$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m392xfvar_c3c0(long chatId, List reactions, TLObject response, TLRPC.TL_error error) {
        if (response != null) {
            processUpdates((TLRPC.Updates) response, false);
            TLRPC.ChatFull full = getChatFull(chatId);
            if (full != null) {
                if (full instanceof TLRPC.TL_chatFull) {
                    full.flags |= 262144;
                }
                if (full instanceof TLRPC.TL_channelFull) {
                    full.flags |= NUM;
                }
                full.available_reactions = new ArrayList<>(reactions);
                getMessagesStorage().updateChatInfo(full, false);
            }
            AndroidUtilities.runOnUIThread(new MessagesController$$ExternalSyntheticLambda321(this, chatId));
        }
    }

    /* renamed from: lambda$setChatReactions$357$org-telegram-messenger-MessagesController  reason: not valid java name */
    public /* synthetic */ void m391x19d254ff(long chatId) {
        getNotificationCenter().postNotificationName(NotificationCenter.chatAvailableReactionsUpdated, Long.valueOf(chatId));
    }

    public void checkIsInChat(TLRPC.Chat chat, TLRPC.User user, IsInChatCheckedCallback callback) {
        boolean z = false;
        if (chat == null || user == null) {
            if (callback != null) {
                callback.run(false, (TLRPC.TL_chatAdminRights) null, (String) null);
            }
        } else if (chat.megagroup || ChatObject.isChannel(chat)) {
            TLRPC.TL_channels_getParticipant req = new TLRPC.TL_channels_getParticipant();
            req.channel = getInputChannel(chat.id);
            req.participant = getInputPeer(user);
            getConnectionsManager().sendRequest(req, new MessagesController$$ExternalSyntheticLambda146(callback));
        } else {
            TLRPC.ChatFull chatFull = getChatFull(chat.id);
            if (chatFull != null) {
                TLRPC.ChatParticipant userParticipant = null;
                if (chatFull.participants != null && chatFull.participants.participants != null) {
                    int count = chatFull.participants.participants.size();
                    int i = 0;
                    while (true) {
                        if (i < count) {
                            TLRPC.ChatParticipant participant = chatFull.participants.participants.get(i);
                            if (participant != null && participant.user_id == user.id) {
                                userParticipant = participant;
                                break;
                            }
                            i++;
                        } else {
                            break;
                        }
                    }
                }
                if (callback != null) {
                    if (userParticipant != null) {
                        z = true;
                    }
                    callback.run(z, (chatFull.participants == null || chatFull.participants.admin_id != user.id) ? null : ChatRightsEditActivity.emptyAdminRights(true), (String) null);
                }
            } else if (callback != null) {
                callback.run(false, (TLRPC.TL_chatAdminRights) null, (String) null);
            }
        }
    }

    static /* synthetic */ void lambda$checkIsInChat$359(IsInChatCheckedCallback callback, TLObject res, TLRPC.TL_error err) {
        if (callback != null) {
            String str = null;
            TLRPC.ChannelParticipant participant = res instanceof TLRPC.TL_channels_channelParticipant ? ((TLRPC.TL_channels_channelParticipant) res).participant : null;
            boolean z = err == null && participant != null && !participant.left;
            TLRPC.TL_chatAdminRights tL_chatAdminRights = participant != null ? participant.admin_rights : null;
            if (participant != null) {
                str = participant.rank;
            }
            callback.run(z, tL_chatAdminRights, str);
        }
    }

    private void applySoundSettings(TLRPC.NotificationSound settings, SharedPreferences.Editor editor, long dialogId, int globalType, boolean serverUpdate) {
        String soundDocPref;
        String soundPathPref;
        String soundPref;
        if (settings != null) {
            if (dialogId != 0) {
                soundPref = "sound_" + dialogId;
                soundPathPref = "sound_path_" + dialogId;
                soundDocPref = "sound_document_id_" + dialogId;
            } else if (globalType == 0) {
                soundPref = "GroupSound";
                soundDocPref = "GroupSoundDocId";
                soundPathPref = "GroupSoundPath";
            } else if (globalType == 1) {
                soundPref = "GlobalSound";
                soundDocPref = "GlobalSoundDocId";
                soundPathPref = "GlobalSoundPath";
            } else {
                soundPref = "ChannelSound";
                soundDocPref = "ChannelSoundDocId";
                soundPathPref = "ChannelSoundPath";
            }
            if (settings instanceof TLRPC.TL_notificationSoundDefault) {
                editor.putString(soundPref, "Default");
                editor.putString(soundPathPref, "Default");
                editor.remove(soundDocPref);
            } else if (settings instanceof TLRPC.TL_notificationSoundNone) {
                editor.putString(soundPref, "NoSound");
                editor.putString(soundPathPref, "NoSound");
                editor.remove(soundDocPref);
            } else if (settings instanceof TLRPC.TL_notificationSoundLocal) {
                TLRPC.TL_notificationSoundLocal localSound = (TLRPC.TL_notificationSoundLocal) settings;
                editor.putString(soundPref, localSound.title);
                editor.putString(soundPathPref, localSound.data);
                editor.remove(soundDocPref);
            } else if (settings instanceof TLRPC.TL_notificationSoundRingtone) {
                TLRPC.TL_notificationSoundRingtone soundRingtone = (TLRPC.TL_notificationSoundRingtone) settings;
                editor.putLong(soundDocPref, soundRingtone.id);
                getMediaDataController().checkRingtones();
                if (serverUpdate && dialogId != 0) {
                    editor.putBoolean("custom_" + dialogId, true);
                }
                getMediaDataController().ringtoneDataStore.getDocument(soundRingtone.id);
            }
        }
    }
}
