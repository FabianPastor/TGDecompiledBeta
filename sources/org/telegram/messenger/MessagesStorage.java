package org.telegram.messenger;

import android.appwidget.AppWidgetManager;
import android.text.TextUtils;
import android.util.Pair;
import android.util.SparseArray;
import android.util.SparseIntArray;
import androidx.collection.LongSparseArray;
import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.atomic.AtomicLong;
import org.telegram.SQLite.SQLiteCursor;
import org.telegram.SQLite.SQLiteDatabase;
import org.telegram.SQLite.SQLiteException;
import org.telegram.SQLite.SQLitePreparedStatement;
import org.telegram.messenger.ContactsController;
import org.telegram.messenger.MessagesController;
import org.telegram.messenger.support.LongSparseIntArray;
import org.telegram.tgnet.NativeByteBuffer;
import org.telegram.tgnet.RequestDelegate;
import org.telegram.tgnet.TLObject;
import org.telegram.tgnet.TLRPC$ChannelParticipant;
import org.telegram.tgnet.TLRPC$Chat;
import org.telegram.tgnet.TLRPC$ChatFull;
import org.telegram.tgnet.TLRPC$ChatParticipant;
import org.telegram.tgnet.TLRPC$ChatParticipants;
import org.telegram.tgnet.TLRPC$Dialog;
import org.telegram.tgnet.TLRPC$Document;
import org.telegram.tgnet.TLRPC$EncryptedChat;
import org.telegram.tgnet.TLRPC$InputChannel;
import org.telegram.tgnet.TLRPC$InputDialogPeer;
import org.telegram.tgnet.TLRPC$InputMedia;
import org.telegram.tgnet.TLRPC$InputPeer;
import org.telegram.tgnet.TLRPC$Message;
import org.telegram.tgnet.TLRPC$MessageAction;
import org.telegram.tgnet.TLRPC$MessageEntity;
import org.telegram.tgnet.TLRPC$MessageFwdHeader;
import org.telegram.tgnet.TLRPC$MessageMedia;
import org.telegram.tgnet.TLRPC$MessageReplies;
import org.telegram.tgnet.TLRPC$Peer;
import org.telegram.tgnet.TLRPC$Photo;
import org.telegram.tgnet.TLRPC$PhotoSize;
import org.telegram.tgnet.TLRPC$Poll;
import org.telegram.tgnet.TLRPC$PollResults;
import org.telegram.tgnet.TLRPC$ReplyMarkup;
import org.telegram.tgnet.TLRPC$TL_channelFull;
import org.telegram.tgnet.TLRPC$TL_channels_deleteMessages;
import org.telegram.tgnet.TLRPC$TL_chatAdminRights;
import org.telegram.tgnet.TLRPC$TL_chatBannedRights;
import org.telegram.tgnet.TLRPC$TL_chatFull;
import org.telegram.tgnet.TLRPC$TL_chatParticipant;
import org.telegram.tgnet.TLRPC$TL_chatParticipantAdmin;
import org.telegram.tgnet.TLRPC$TL_contact;
import org.telegram.tgnet.TLRPC$TL_dialog;
import org.telegram.tgnet.TLRPC$TL_folderPeer;
import org.telegram.tgnet.TLRPC$TL_inputFolderPeer;
import org.telegram.tgnet.TLRPC$TL_inputMediaGame;
import org.telegram.tgnet.TLRPC$TL_inputMessageEntityMentionName;
import org.telegram.tgnet.TLRPC$TL_message;
import org.telegram.tgnet.TLRPC$TL_messageActionChatAddUser;
import org.telegram.tgnet.TLRPC$TL_messageActionGameScore;
import org.telegram.tgnet.TLRPC$TL_messageActionGeoProximityReached;
import org.telegram.tgnet.TLRPC$TL_messageActionPaymentSent;
import org.telegram.tgnet.TLRPC$TL_messageActionPinMessage;
import org.telegram.tgnet.TLRPC$TL_messageEntityMentionName;
import org.telegram.tgnet.TLRPC$TL_messageMediaDocument;
import org.telegram.tgnet.TLRPC$TL_messageMediaPhoto;
import org.telegram.tgnet.TLRPC$TL_messageMediaPoll;
import org.telegram.tgnet.TLRPC$TL_messageMediaUnsupported;
import org.telegram.tgnet.TLRPC$TL_messageMediaUnsupported_old;
import org.telegram.tgnet.TLRPC$TL_messageMediaWebPage;
import org.telegram.tgnet.TLRPC$TL_messageReactions;
import org.telegram.tgnet.TLRPC$TL_messageReplies;
import org.telegram.tgnet.TLRPC$TL_messageReplyHeader;
import org.telegram.tgnet.TLRPC$TL_message_secret;
import org.telegram.tgnet.TLRPC$TL_messages_botCallbackAnswer;
import org.telegram.tgnet.TLRPC$TL_messages_botResults;
import org.telegram.tgnet.TLRPC$TL_messages_deleteMessages;
import org.telegram.tgnet.TLRPC$TL_messages_deleteScheduledMessages;
import org.telegram.tgnet.TLRPC$TL_messages_dialogs;
import org.telegram.tgnet.TLRPC$TL_messages_messages;
import org.telegram.tgnet.TLRPC$TL_peerChannel;
import org.telegram.tgnet.TLRPC$TL_peerChat;
import org.telegram.tgnet.TLRPC$TL_peerNotifySettings;
import org.telegram.tgnet.TLRPC$TL_peerNotifySettingsEmpty_layer77;
import org.telegram.tgnet.TLRPC$TL_peerUser;
import org.telegram.tgnet.TLRPC$TL_photoEmpty;
import org.telegram.tgnet.TLRPC$TL_photos_photos;
import org.telegram.tgnet.TLRPC$TL_replyInlineMarkup;
import org.telegram.tgnet.TLRPC$TL_updates;
import org.telegram.tgnet.TLRPC$TL_updates_channelDifferenceTooLong;
import org.telegram.tgnet.TLRPC$TL_userStatusLastMonth;
import org.telegram.tgnet.TLRPC$TL_userStatusLastWeek;
import org.telegram.tgnet.TLRPC$TL_userStatusRecently;
import org.telegram.tgnet.TLRPC$User;
import org.telegram.tgnet.TLRPC$UserFull;
import org.telegram.tgnet.TLRPC$UserProfilePhoto;
import org.telegram.tgnet.TLRPC$UserStatus;
import org.telegram.tgnet.TLRPC$Vector;
import org.telegram.tgnet.TLRPC$WallPaper;
import org.telegram.tgnet.TLRPC$WebPage;
import org.telegram.tgnet.TLRPC$messages_Dialogs;
import org.telegram.tgnet.TLRPC$messages_Messages;
import org.telegram.tgnet.TLRPC$photos_Photos;
import org.telegram.ui.ActionBar.Theme;
import org.telegram.ui.Adapters.DialogsSearchAdapter;

public class MessagesStorage extends BaseController {
    private static volatile MessagesStorage[] Instance = new MessagesStorage[3];
    private static final int LAST_DB_VERSION = 92;
    private int archiveUnreadCount;
    private int[][] bots = {new int[2], new int[2]};
    private File cacheFile;
    private int[][] channels = {new int[2], new int[2]};
    private int[][] contacts = {new int[2], new int[2]};
    private SQLiteDatabase database;
    private boolean databaseMigrationInProgress;
    private ArrayList<MessagesController.DialogFilter> dialogFilters = new ArrayList<>();
    private SparseArray<MessagesController.DialogFilter> dialogFiltersMap = new SparseArray<>();
    private LongSparseArray<Integer> dialogsWithMentions = new LongSparseArray<>();
    private LongSparseArray<Integer> dialogsWithUnread = new LongSparseArray<>();
    public ArrayList<MessageObject> downloadingFiles = new ArrayList<>();
    private int[][] groups = {new int[2], new int[2]};
    public boolean hasUnviewedDownloads;
    private int lastDateValue = 0;
    private int lastPtsValue = 0;
    private int lastQtsValue = 0;
    private int lastSavedDate = 0;
    private int lastSavedPts = 0;
    private int lastSavedQts = 0;
    private int lastSavedSeq = 0;
    private int lastSecretVersion = 0;
    private int lastSeqValue = 0;
    private AtomicLong lastTaskId = new AtomicLong(System.currentTimeMillis());
    private int mainUnreadCount;
    private int[] mentionChannels = new int[2];
    private int[] mentionGroups = new int[2];
    private int[][] nonContacts = {new int[2], new int[2]};
    private CountDownLatch openSync = new CountDownLatch(1);
    private volatile int pendingArchiveUnreadCount;
    private volatile int pendingMainUnreadCount;
    public ArrayList<MessageObject> recentDownloadingFiles = new ArrayList<>();
    private int secretG = 0;
    private byte[] secretPBytes = null;
    private File shmCacheFile;
    public boolean showClearDatabaseAlert;
    private DispatchQueue storageQueue = new DispatchQueue("storageQueue");
    private SparseArray<ArrayList<Runnable>> tasks = new SparseArray<>();
    private LongSparseArray<Boolean> unknownDialogsIds = new LongSparseArray<>();
    private File walCacheFile;

    public interface BooleanCallback {
        void run(boolean z);
    }

    public interface IntCallback {
        void run(int i);
    }

    public interface LongCallback {
        void run(long j);
    }

    public interface StringCallback {
        void run(String str);
    }

    public static MessagesStorage getInstance(int i) {
        MessagesStorage messagesStorage = Instance[i];
        if (messagesStorage == null) {
            synchronized (MessagesStorage.class) {
                messagesStorage = Instance[i];
                if (messagesStorage == null) {
                    MessagesStorage[] messagesStorageArr = Instance;
                    MessagesStorage messagesStorage2 = new MessagesStorage(i);
                    messagesStorageArr[i] = messagesStorage2;
                    messagesStorage = messagesStorage2;
                }
            }
        }
        return messagesStorage;
    }

    private void ensureOpened() {
        try {
            this.openSync.await();
        } catch (Throwable unused) {
        }
    }

    public int getLastDateValue() {
        ensureOpened();
        return this.lastDateValue;
    }

    public void setLastDateValue(int i) {
        ensureOpened();
        this.lastDateValue = i;
    }

    public int getLastPtsValue() {
        ensureOpened();
        return this.lastPtsValue;
    }

    public int getMainUnreadCount() {
        return this.mainUnreadCount;
    }

    public int getArchiveUnreadCount() {
        return this.archiveUnreadCount;
    }

    public void setLastPtsValue(int i) {
        ensureOpened();
        this.lastPtsValue = i;
    }

    public int getLastQtsValue() {
        ensureOpened();
        return this.lastQtsValue;
    }

    public void setLastQtsValue(int i) {
        ensureOpened();
        this.lastQtsValue = i;
    }

    public int getLastSeqValue() {
        ensureOpened();
        return this.lastSeqValue;
    }

    public void setLastSeqValue(int i) {
        ensureOpened();
        this.lastSeqValue = i;
    }

    public int getLastSecretVersion() {
        ensureOpened();
        return this.lastSecretVersion;
    }

    public void setLastSecretVersion(int i) {
        ensureOpened();
        this.lastSecretVersion = i;
    }

    public byte[] getSecretPBytes() {
        ensureOpened();
        return this.secretPBytes;
    }

    public void setSecretPBytes(byte[] bArr) {
        ensureOpened();
        this.secretPBytes = bArr;
    }

    public int getSecretG() {
        ensureOpened();
        return this.secretG;
    }

    public void setSecretG(int i) {
        ensureOpened();
        this.secretG = i;
    }

    public MessagesStorage(int i) {
        super(i);
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda18(this));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$new$0() {
        openDatabase(1);
    }

    public SQLiteDatabase getDatabase() {
        return this.database;
    }

    public DispatchQueue getStorageQueue() {
        return this.storageQueue;
    }

    public void bindTaskToGuid(Runnable runnable, int i) {
        ArrayList arrayList = this.tasks.get(i);
        if (arrayList == null) {
            arrayList = new ArrayList();
            this.tasks.put(i, arrayList);
        }
        arrayList.add(runnable);
    }

    public void cancelTasksForGuid(int i) {
        ArrayList arrayList = this.tasks.get(i);
        if (arrayList != null) {
            int size = arrayList.size();
            for (int i2 = 0; i2 < size; i2++) {
                this.storageQueue.cancelRunnable((Runnable) arrayList.get(i2));
            }
            this.tasks.remove(i);
        }
    }

    public void completeTaskForGuid(Runnable runnable, int i) {
        ArrayList arrayList = this.tasks.get(i);
        if (arrayList != null) {
            arrayList.remove(runnable);
            if (arrayList.isEmpty()) {
                this.tasks.remove(i);
            }
        }
    }

    public long getDatabaseSize() {
        File file = this.cacheFile;
        long j = 0;
        if (file != null) {
            j = 0 + file.length();
        }
        File file2 = this.shmCacheFile;
        return file2 != null ? j + file2.length() : j;
    }

    public void openDatabase(int i) {
        int i2 = i;
        File filesDirFixed = ApplicationLoader.getFilesDirFixed();
        if (this.currentAccount != 0) {
            File file = new File(filesDirFixed, "account" + this.currentAccount + "/");
            file.mkdirs();
            filesDirFixed = file;
        }
        this.cacheFile = new File(filesDirFixed, "cache4.db");
        this.walCacheFile = new File(filesDirFixed, "cache4.db-wal");
        this.shmCacheFile = new File(filesDirFixed, "cache4.db-shm");
        boolean z = !this.cacheFile.exists();
        int i3 = 3;
        try {
            SQLiteDatabase sQLiteDatabase = new SQLiteDatabase(this.cacheFile.getPath());
            this.database = sQLiteDatabase;
            sQLiteDatabase.executeFast("PRAGMA secure_delete = ON").stepThis().dispose();
            this.database.executeFast("PRAGMA temp_store = MEMORY").stepThis().dispose();
            this.database.executeFast("PRAGMA journal_mode = WAL").stepThis().dispose();
            this.database.executeFast("PRAGMA journal_size_limit = 10485760").stepThis().dispose();
            if (z) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("create new database");
                }
                this.database.executeFast("CREATE TABLE messages_holes(uid INTEGER, start INTEGER, end INTEGER, PRIMARY KEY(uid, start));").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS uid_end_messages_holes ON messages_holes(uid, end);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE media_holes_v2(uid INTEGER, type INTEGER, start INTEGER, end INTEGER, PRIMARY KEY(uid, type, start));").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS uid_end_media_holes_v2 ON media_holes_v2(uid, type, end);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE scheduled_messages_v2(mid INTEGER, uid INTEGER, send_state INTEGER, date INTEGER, data BLOB, ttl INTEGER, replydata BLOB, reply_to_message_id INTEGER, PRIMARY KEY(mid, uid))").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS send_state_idx_scheduled_messages_v2 ON scheduled_messages_v2(mid, send_state, date);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS uid_date_idx_scheduled_messages_v2 ON scheduled_messages_v2(uid, date);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS reply_to_idx_scheduled_messages_v2 ON scheduled_messages_v2(mid, reply_to_message_id);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE messages_v2(mid INTEGER, uid INTEGER, read_state INTEGER, send_state INTEGER, date INTEGER, data BLOB, out INTEGER, ttl INTEGER, media INTEGER, replydata BLOB, imp INTEGER, mention INTEGER, forwards INTEGER, replies_data BLOB, thread_reply_id INTEGER, is_channel INTEGER, reply_to_message_id INTEGER, PRIMARY KEY(mid, uid))").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS uid_mid_read_out_idx_messages_v2 ON messages_v2(uid, mid, read_state, out);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS uid_date_mid_idx_messages_v2 ON messages_v2(uid, date, mid);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS mid_out_idx_messages_v2 ON messages_v2(mid, out);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS task_idx_messages_v2 ON messages_v2(uid, out, read_state, ttl, date, send_state);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS send_state_idx_messages_v2 ON messages_v2(mid, send_state, date);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS uid_mention_idx_messages_v2 ON messages_v2(uid, mention, read_state);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS is_channel_idx_messages_v2 ON messages_v2(mid, is_channel);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS reply_to_idx_messages_v2 ON messages_v2(mid, reply_to_message_id);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE download_queue(uid INTEGER, type INTEGER, date INTEGER, data BLOB, parent TEXT, PRIMARY KEY (uid, type));").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS type_date_idx_download_queue ON download_queue(type, date);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE user_contacts_v7(key TEXT PRIMARY KEY, uid INTEGER, fname TEXT, sname TEXT, imported INTEGER)").stepThis().dispose();
                this.database.executeFast("CREATE TABLE user_phones_v7(key TEXT, phone TEXT, sphone TEXT, deleted INTEGER, PRIMARY KEY (key, phone))").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS sphone_deleted_idx_user_phones ON user_phones_v7(sphone, deleted);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE dialogs(did INTEGER PRIMARY KEY, date INTEGER, unread_count INTEGER, last_mid INTEGER, inbox_max INTEGER, outbox_max INTEGER, last_mid_i INTEGER, unread_count_i INTEGER, pts INTEGER, date_i INTEGER, pinned INTEGER, flags INTEGER, folder_id INTEGER, data BLOB, unread_reactions INTEGER)").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS date_idx_dialogs ON dialogs(date);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS last_mid_idx_dialogs ON dialogs(last_mid);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS unread_count_idx_dialogs ON dialogs(unread_count);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS last_mid_i_idx_dialogs ON dialogs(last_mid_i);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS unread_count_i_idx_dialogs ON dialogs(unread_count_i);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS folder_id_idx_dialogs ON dialogs(folder_id);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS flags_idx_dialogs ON dialogs(flags);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE dialog_filter(id INTEGER PRIMARY KEY, ord INTEGER, unread_count INTEGER, flags INTEGER, title TEXT)").stepThis().dispose();
                this.database.executeFast("CREATE TABLE dialog_filter_ep(id INTEGER, peer INTEGER, PRIMARY KEY (id, peer))").stepThis().dispose();
                this.database.executeFast("CREATE TABLE dialog_filter_pin_v2(id INTEGER, peer INTEGER, pin INTEGER, PRIMARY KEY (id, peer))").stepThis().dispose();
                this.database.executeFast("CREATE TABLE randoms_v2(random_id INTEGER, mid INTEGER, uid INTEGER, PRIMARY KEY (random_id, mid, uid))").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS mid_idx_randoms_v2 ON randoms_v2(mid, uid);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE enc_tasks_v4(mid INTEGER, uid INTEGER, date INTEGER, media INTEGER, PRIMARY KEY(mid, uid, media))").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS date_idx_enc_tasks_v4 ON enc_tasks_v4(date);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE messages_seq(mid INTEGER PRIMARY KEY, seq_in INTEGER, seq_out INTEGER);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS seq_idx_messages_seq ON messages_seq(seq_in, seq_out);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE params(id INTEGER PRIMARY KEY, seq INTEGER, pts INTEGER, date INTEGER, qts INTEGER, lsv INTEGER, sg INTEGER, pbytes BLOB)").stepThis().dispose();
                this.database.executeFast("INSERT INTO params VALUES(1, 0, 0, 0, 0, 0, 0, NULL)").stepThis().dispose();
                this.database.executeFast("CREATE TABLE media_v4(mid INTEGER, uid INTEGER, date INTEGER, type INTEGER, data BLOB, PRIMARY KEY(mid, uid, type))").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS uid_mid_type_date_idx_media_v4 ON media_v4(uid, mid, type, date);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE bot_keyboard(uid INTEGER PRIMARY KEY, mid INTEGER, info BLOB)").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS bot_keyboard_idx_mid_v2 ON bot_keyboard(mid, uid);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE chat_settings_v2(uid INTEGER PRIMARY KEY, info BLOB, pinned INTEGER, online INTEGER, inviter INTEGER, links INTEGER)").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS chat_settings_pinned_idx ON chat_settings_v2(uid, pinned) WHERE pinned != 0;").stepThis().dispose();
                this.database.executeFast("CREATE TABLE user_settings(uid INTEGER PRIMARY KEY, info BLOB, pinned INTEGER)").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS user_settings_pinned_idx ON user_settings(uid, pinned) WHERE pinned != 0;").stepThis().dispose();
                this.database.executeFast("CREATE TABLE chat_pinned_v2(uid INTEGER, mid INTEGER, data BLOB, PRIMARY KEY (uid, mid));").stepThis().dispose();
                this.database.executeFast("CREATE TABLE chat_pinned_count(uid INTEGER PRIMARY KEY, count INTEGER, end INTEGER);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE chat_hints(did INTEGER, type INTEGER, rating REAL, date INTEGER, PRIMARY KEY(did, type))").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS chat_hints_rating_idx ON chat_hints(rating);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE botcache(id TEXT PRIMARY KEY, date INTEGER, data BLOB)").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS botcache_date_idx ON botcache(date);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE users_data(uid INTEGER PRIMARY KEY, about TEXT)").stepThis().dispose();
                this.database.executeFast("CREATE TABLE users(uid INTEGER PRIMARY KEY, name TEXT, status INTEGER, data BLOB)").stepThis().dispose();
                this.database.executeFast("CREATE TABLE chats(uid INTEGER PRIMARY KEY, name TEXT, data BLOB)").stepThis().dispose();
                this.database.executeFast("CREATE TABLE enc_chats(uid INTEGER PRIMARY KEY, user INTEGER, name TEXT, data BLOB, g BLOB, authkey BLOB, ttl INTEGER, layer INTEGER, seq_in INTEGER, seq_out INTEGER, use_count INTEGER, exchange_id INTEGER, key_date INTEGER, fprint INTEGER, fauthkey BLOB, khash BLOB, in_seq_no INTEGER, admin_id INTEGER, mtproto_seq INTEGER)").stepThis().dispose();
                this.database.executeFast("CREATE TABLE channel_users_v2(did INTEGER, uid INTEGER, date INTEGER, data BLOB, PRIMARY KEY(did, uid))").stepThis().dispose();
                this.database.executeFast("CREATE TABLE channel_admins_v3(did INTEGER, uid INTEGER, data BLOB, PRIMARY KEY(did, uid))").stepThis().dispose();
                this.database.executeFast("CREATE TABLE contacts(uid INTEGER PRIMARY KEY, mutual INTEGER)").stepThis().dispose();
                this.database.executeFast("CREATE TABLE user_photos(uid INTEGER, id INTEGER, data BLOB, PRIMARY KEY (uid, id))").stepThis().dispose();
                this.database.executeFast("CREATE TABLE dialog_settings(did INTEGER PRIMARY KEY, flags INTEGER);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE web_recent_v3(id TEXT, type INTEGER, image_url TEXT, thumb_url TEXT, local_url TEXT, width INTEGER, height INTEGER, size INTEGER, date INTEGER, document BLOB, PRIMARY KEY (id, type));").stepThis().dispose();
                this.database.executeFast("CREATE TABLE stickers_v2(id INTEGER PRIMARY KEY, data BLOB, date INTEGER, hash INTEGER);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE stickers_featured(id INTEGER PRIMARY KEY, data BLOB, unread BLOB, date INTEGER, hash INTEGER);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE stickers_dice(emoji TEXT PRIMARY KEY, data BLOB, date INTEGER);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE hashtag_recent_v2(id TEXT PRIMARY KEY, date INTEGER);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE webpage_pending_v2(id INTEGER, mid INTEGER, uid INTEGER, PRIMARY KEY (id, mid, uid));").stepThis().dispose();
                this.database.executeFast("CREATE TABLE sent_files_v2(uid TEXT, type INTEGER, data BLOB, parent TEXT, PRIMARY KEY (uid, type))").stepThis().dispose();
                this.database.executeFast("CREATE TABLE search_recent(did INTEGER PRIMARY KEY, date INTEGER);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE media_counts_v2(uid INTEGER, type INTEGER, count INTEGER, old INTEGER, PRIMARY KEY(uid, type))").stepThis().dispose();
                this.database.executeFast("CREATE TABLE keyvalue(id TEXT PRIMARY KEY, value TEXT)").stepThis().dispose();
                this.database.executeFast("CREATE TABLE bot_info_v2(uid INTEGER, dialogId INTEGER, info BLOB, PRIMARY KEY(uid, dialogId))").stepThis().dispose();
                this.database.executeFast("CREATE TABLE pending_tasks(id INTEGER PRIMARY KEY, data BLOB);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE requested_holes(uid INTEGER, seq_out_start INTEGER, seq_out_end INTEGER, PRIMARY KEY (uid, seq_out_start, seq_out_end));").stepThis().dispose();
                this.database.executeFast("CREATE TABLE sharing_locations(uid INTEGER PRIMARY KEY, mid INTEGER, date INTEGER, period INTEGER, message BLOB, proximity INTEGER);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE shortcut_widget(id INTEGER, did INTEGER, ord INTEGER, PRIMARY KEY (id, did));").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS shortcut_widget_did ON shortcut_widget(did);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE emoji_keywords_v2(lang TEXT, keyword TEXT, emoji TEXT, PRIMARY KEY(lang, keyword, emoji));").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS emoji_keywords_v2_keyword ON emoji_keywords_v2(keyword);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE emoji_keywords_info_v2(lang TEXT PRIMARY KEY, alias TEXT, version INTEGER, date INTEGER);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE wallpapers2(uid INTEGER PRIMARY KEY, data BLOB, num INTEGER)").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS wallpapers_num ON wallpapers2(num);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE unread_push_messages(uid INTEGER, mid INTEGER, random INTEGER, date INTEGER, data BLOB, fm TEXT, name TEXT, uname TEXT, flags INTEGER, PRIMARY KEY(uid, mid))").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS unread_push_messages_idx_date ON unread_push_messages(date);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS unread_push_messages_idx_random ON unread_push_messages(random);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE polls_v2(mid INTEGER, uid INTEGER, id INTEGER, PRIMARY KEY (mid, uid));").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS polls_id_v2 ON polls_v2(id);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE reactions(data BLOB, hash INTEGER, date INTEGER);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE reaction_mentions(message_id INTEGER, state INTEGER, dialog_id INTEGER, PRIMARY KEY(message_id, dialog_id))").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS reaction_mentions_did ON reaction_mentions(dialog_id);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE downloading_documents(data BLOB, hash INTEGER, id INTEGER, state INTEGER, date INTEGER, PRIMARY KEY(hash, id));").stepThis().dispose();
                this.database.executeFast("PRAGMA user_version = 92").stepThis().dispose();
                AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda21(this));
                loadDialogFilters();
                loadUnreadMessages();
                loadPendingTasks();
                try {
                    this.openSync.countDown();
                } catch (Throwable unused) {
                }
                AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda24(this));
                return;
            }
            int intValue = this.database.executeInt("PRAGMA user_version", new Object[0]).intValue();
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("current db version = " + intValue);
            }
            if (intValue != 0) {
                SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT seq, pts, date, qts, lsv, sg, pbytes FROM params WHERE id = 1", new Object[0]);
                if (queryFinalized.next()) {
                    this.lastSeqValue = queryFinalized.intValue(0);
                    this.lastPtsValue = queryFinalized.intValue(1);
                    this.lastDateValue = queryFinalized.intValue(2);
                    this.lastQtsValue = queryFinalized.intValue(3);
                    this.lastSecretVersion = queryFinalized.intValue(4);
                    this.secretG = queryFinalized.intValue(5);
                    if (queryFinalized.isNull(6)) {
                        this.secretPBytes = null;
                    } else {
                        byte[] byteArrayValue = queryFinalized.byteArrayValue(6);
                        this.secretPBytes = byteArrayValue;
                        if (byteArrayValue != null && byteArrayValue.length == 1) {
                            this.secretPBytes = null;
                        }
                    }
                }
                queryFinalized.dispose();
                if (intValue < 92) {
                    updateDbToLastVersion(intValue);
                }
                AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda21(this));
                loadDialogFilters();
                loadUnreadMessages();
                loadPendingTasks();
                this.openSync.countDown();
                AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda24(this));
                return;
            }
            throw new Exception("malformed");
        } catch (Exception e) {
            Exception exc = e;
            if (BuildVars.DEBUG_PRIVATE_VERSION) {
                throw exc;
            }
            FileLog.e((Throwable) exc);
            throw new RuntimeException("malformed");
        } catch (Exception e2) {
            Exception exc2 = e2;
            if (exc2.getMessage() != null) {
                if (exc2.getMessage().contains("malformed")) {
                    throw new RuntimeException("malformed");
                }
            }
            FileLog.e((Throwable) exc2);
            try {
                this.database.executeFast("CREATE TABLE IF NOT EXISTS params(id INTEGER PRIMARY KEY, seq INTEGER, pts INTEGER, date INTEGER, qts INTEGER, lsv INTEGER, sg INTEGER, pbytes BLOB)").stepThis().dispose();
                this.database.executeFast("INSERT INTO params VALUES(1, 0, 0, 0, 0, 0, 0, NULL)").stepThis().dispose();
            } catch (Exception e3) {
                FileLog.e((Throwable) e3);
            }
        } catch (Exception e4) {
            Exception exc3 = e4;
            FileLog.e((Throwable) exc3);
            if (BuildVars.DEBUG_PRIVATE_VERSION) {
                throw new RuntimeException(exc3);
            } else if (i2 < 3 && exc3.getMessage() != null && exc3.getMessage().contains("malformed")) {
                if (i2 == 2) {
                    cleanupInternal(true);
                    for (int i4 = 0; i4 < 2; i4++) {
                        getUserConfig().setDialogsLoadOffset(i4, 0, 0, 0, 0, 0, 0);
                        getUserConfig().setTotalDialogsCount(i4, 0);
                    }
                    getUserConfig().saveConfig(false);
                } else {
                    cleanupInternal(false);
                }
                if (i2 == 1) {
                    i3 = 2;
                }
                openDatabase(i3);
            }
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$openDatabase$1() {
        if (this.databaseMigrationInProgress) {
            this.databaseMigrationInProgress = false;
            NotificationCenter.getInstance(this.currentAccount).postNotificationName(NotificationCenter.onDatabaseMigration, Boolean.FALSE);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$openDatabase$2() {
        this.showClearDatabaseAlert = false;
        NotificationCenter.getInstance(this.currentAccount).postNotificationName(NotificationCenter.onDatabaseOpened, new Object[0]);
    }

    public boolean isDatabaseMigrationInProgress() {
        return this.databaseMigrationInProgress;
    }

    private void updateDbToLastVersion(int i) throws Exception {
        SQLiteCursor sQLiteCursor;
        SQLiteCursor sQLiteCursor2;
        int i2;
        int i3;
        NativeByteBuffer nativeByteBuffer;
        SQLiteCursor sQLiteCursor3;
        SQLiteCursor sQLiteCursor4;
        SQLiteCursor sQLiteCursor5;
        SQLiteCursor sQLiteCursor6;
        SQLiteCursor sQLiteCursor7;
        SQLiteCursor sQLiteCursor8;
        MessagesStorage messagesStorage = this;
        int i4 = i;
        AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda23(messagesStorage));
        FileLog.d("MessagesStorage start db migration from " + i4 + " to " + 92);
        int i5 = 4;
        if (i4 < 4) {
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS user_photos(uid INTEGER, id INTEGER, data BLOB, PRIMARY KEY (uid, id))").stepThis().dispose();
            messagesStorage.database.executeFast("DROP INDEX IF EXISTS read_state_out_idx_messages;").stepThis().dispose();
            messagesStorage.database.executeFast("DROP INDEX IF EXISTS ttl_idx_messages;").stepThis().dispose();
            messagesStorage.database.executeFast("DROP INDEX IF EXISTS date_idx_messages;").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS mid_out_idx_messages ON messages(mid, out);").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS task_idx_messages ON messages(uid, out, read_state, ttl, date, send_state);").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS uid_date_mid_idx_messages ON messages(uid, date, mid);").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS user_contacts_v6(uid INTEGER PRIMARY KEY, fname TEXT, sname TEXT)").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS user_phones_v6(uid INTEGER, phone TEXT, sphone TEXT, deleted INTEGER, PRIMARY KEY (uid, phone))").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS sphone_deleted_idx_user_phones ON user_phones_v6(sphone, deleted);").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS mid_idx_randoms ON randoms(mid);").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS sent_files_v2(uid TEXT, type INTEGER, data BLOB, PRIMARY KEY (uid, type))").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS download_queue(uid INTEGER, type INTEGER, date INTEGER, data BLOB, PRIMARY KEY (uid, type));").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS type_date_idx_download_queue ON download_queue(type, date);").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS dialog_settings(did INTEGER PRIMARY KEY, flags INTEGER);").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS unread_count_idx_dialogs ON dialogs(unread_count);").stepThis().dispose();
            messagesStorage.database.executeFast("UPDATE messages SET send_state = 2 WHERE mid < 0 AND send_state = 1").stepThis().dispose();
            fixNotificationSettings();
            messagesStorage.database.executeFast("PRAGMA user_version = 4").stepThis().dispose();
            i4 = 4;
        }
        int i6 = 6;
        int i7 = 2;
        int i8 = 1;
        int i9 = 0;
        if (i4 == 4) {
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS enc_tasks_v2(mid INTEGER PRIMARY KEY, date INTEGER)").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS date_idx_enc_tasks_v2 ON enc_tasks_v2(date);").stepThis().dispose();
            messagesStorage.database.beginTransaction();
            SQLiteCursor queryFinalized = messagesStorage.database.queryFinalized("SELECT date, data FROM enc_tasks WHERE 1", new Object[0]);
            SQLitePreparedStatement executeFast = messagesStorage.database.executeFast("REPLACE INTO enc_tasks_v2 VALUES(?, ?)");
            if (queryFinalized.next()) {
                int intValue = queryFinalized.intValue(0);
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(1);
                if (byteBufferValue != null) {
                    int limit = byteBufferValue.limit();
                    for (int i10 = 0; i10 < limit / 4; i10++) {
                        executeFast.requery();
                        executeFast.bindInteger(1, byteBufferValue.readInt32(false));
                        executeFast.bindInteger(2, intValue);
                        executeFast.step();
                    }
                    byteBufferValue.reuse();
                }
            }
            executeFast.dispose();
            queryFinalized.dispose();
            messagesStorage.database.commitTransaction();
            messagesStorage.database.executeFast("DROP INDEX IF EXISTS date_idx_enc_tasks;").stepThis().dispose();
            messagesStorage.database.executeFast("DROP TABLE IF EXISTS enc_tasks;").stepThis().dispose();
            messagesStorage.database.executeFast("ALTER TABLE messages ADD COLUMN media INTEGER default 0").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 6").stepThis().dispose();
            i4 = 6;
        }
        if (i4 == 6) {
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS messages_seq(mid INTEGER PRIMARY KEY, seq_in INTEGER, seq_out INTEGER);").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS seq_idx_messages_seq ON messages_seq(seq_in, seq_out);").stepThis().dispose();
            messagesStorage.database.executeFast("ALTER TABLE enc_chats ADD COLUMN layer INTEGER default 0").stepThis().dispose();
            messagesStorage.database.executeFast("ALTER TABLE enc_chats ADD COLUMN seq_in INTEGER default 0").stepThis().dispose();
            messagesStorage.database.executeFast("ALTER TABLE enc_chats ADD COLUMN seq_out INTEGER default 0").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 7").stepThis().dispose();
            i4 = 7;
        }
        if (i4 == 7 || i4 == 8 || i4 == 9) {
            messagesStorage.database.executeFast("ALTER TABLE enc_chats ADD COLUMN use_count INTEGER default 0").stepThis().dispose();
            messagesStorage.database.executeFast("ALTER TABLE enc_chats ADD COLUMN exchange_id INTEGER default 0").stepThis().dispose();
            messagesStorage.database.executeFast("ALTER TABLE enc_chats ADD COLUMN key_date INTEGER default 0").stepThis().dispose();
            messagesStorage.database.executeFast("ALTER TABLE enc_chats ADD COLUMN fprint INTEGER default 0").stepThis().dispose();
            messagesStorage.database.executeFast("ALTER TABLE enc_chats ADD COLUMN fauthkey BLOB default NULL").stepThis().dispose();
            messagesStorage.database.executeFast("ALTER TABLE enc_chats ADD COLUMN khash BLOB default NULL").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 10").stepThis().dispose();
            i4 = 10;
        }
        if (i4 == 10) {
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS web_recent_v3(id TEXT, type INTEGER, image_url TEXT, thumb_url TEXT, local_url TEXT, width INTEGER, height INTEGER, size INTEGER, date INTEGER, PRIMARY KEY (id, type));").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 11").stepThis().dispose();
            i4 = 11;
        }
        if (i4 == 11 || i4 == 12) {
            messagesStorage.database.executeFast("DROP INDEX IF EXISTS uid_mid_idx_media;").stepThis().dispose();
            messagesStorage.database.executeFast("DROP INDEX IF EXISTS mid_idx_media;").stepThis().dispose();
            messagesStorage.database.executeFast("DROP INDEX IF EXISTS uid_date_mid_idx_media;").stepThis().dispose();
            messagesStorage.database.executeFast("DROP TABLE IF EXISTS media;").stepThis().dispose();
            messagesStorage.database.executeFast("DROP TABLE IF EXISTS media_counts;").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS media_v2(mid INTEGER PRIMARY KEY, uid INTEGER, date INTEGER, type INTEGER, data BLOB)").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS media_counts_v2(uid INTEGER, type INTEGER, count INTEGER, PRIMARY KEY(uid, type))").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS uid_mid_type_date_idx_media ON media_v2(uid, mid, type, date);").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS keyvalue(id TEXT PRIMARY KEY, value TEXT)").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 13").stepThis().dispose();
            i4 = 13;
        }
        if (i4 == 13) {
            messagesStorage.database.executeFast("ALTER TABLE messages ADD COLUMN replydata BLOB default NULL").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 14").stepThis().dispose();
            i4 = 14;
        }
        if (i4 == 14) {
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS hashtag_recent_v2(id TEXT PRIMARY KEY, date INTEGER);").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 15").stepThis().dispose();
            i4 = 15;
        }
        if (i4 == 15) {
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS webpage_pending(id INTEGER, mid INTEGER, PRIMARY KEY (id, mid));").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 16").stepThis().dispose();
            i4 = 16;
        }
        if (i4 == 16) {
            messagesStorage.database.executeFast("ALTER TABLE dialogs ADD COLUMN inbox_max INTEGER default 0").stepThis().dispose();
            messagesStorage.database.executeFast("ALTER TABLE dialogs ADD COLUMN outbox_max INTEGER default 0").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 17").stepThis().dispose();
            i4 = 17;
        }
        if (i4 == 17) {
            messagesStorage.database.executeFast("PRAGMA user_version = 18").stepThis().dispose();
            i4 = 18;
        }
        if (i4 == 18) {
            messagesStorage.database.executeFast("DROP TABLE IF EXISTS stickers;").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS stickers_v2(id INTEGER PRIMARY KEY, data BLOB, date INTEGER, hash INTEGER);").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 19").stepThis().dispose();
            i4 = 19;
        }
        if (i4 == 19) {
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS bot_keyboard(uid INTEGER PRIMARY KEY, mid INTEGER, info BLOB)").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS bot_keyboard_idx_mid ON bot_keyboard(mid);").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 20").stepThis().dispose();
            i4 = 20;
        }
        if (i4 == 20) {
            messagesStorage.database.executeFast("CREATE TABLE search_recent(did INTEGER PRIMARY KEY, date INTEGER);").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 21").stepThis().dispose();
            i4 = 21;
        }
        if (i4 == 21) {
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS chat_settings_v2(uid INTEGER PRIMARY KEY, info BLOB)").stepThis().dispose();
            SQLiteCursor queryFinalized2 = messagesStorage.database.queryFinalized("SELECT uid, participants FROM chat_settings WHERE uid < 0", new Object[0]);
            SQLitePreparedStatement executeFast2 = messagesStorage.database.executeFast("REPLACE INTO chat_settings_v2 VALUES(?, ?)");
            while (queryFinalized2.next()) {
                long intValue2 = (long) queryFinalized2.intValue(0);
                NativeByteBuffer byteBufferValue2 = queryFinalized2.byteBufferValue(1);
                if (byteBufferValue2 != null) {
                    TLRPC$ChatParticipants TLdeserialize = TLRPC$ChatParticipants.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(false), false);
                    byteBufferValue2.reuse();
                    if (TLdeserialize != null) {
                        TLRPC$TL_chatFull tLRPC$TL_chatFull = new TLRPC$TL_chatFull();
                        tLRPC$TL_chatFull.id = intValue2;
                        tLRPC$TL_chatFull.chat_photo = new TLRPC$TL_photoEmpty();
                        tLRPC$TL_chatFull.notify_settings = new TLRPC$TL_peerNotifySettingsEmpty_layer77();
                        tLRPC$TL_chatFull.exported_invite = null;
                        tLRPC$TL_chatFull.participants = TLdeserialize;
                        NativeByteBuffer nativeByteBuffer2 = new NativeByteBuffer(tLRPC$TL_chatFull.getObjectSize());
                        tLRPC$TL_chatFull.serializeToStream(nativeByteBuffer2);
                        executeFast2.requery();
                        executeFast2.bindLong(1, intValue2);
                        executeFast2.bindByteBuffer(2, nativeByteBuffer2);
                        executeFast2.step();
                        nativeByteBuffer2.reuse();
                    }
                }
            }
            executeFast2.dispose();
            queryFinalized2.dispose();
            messagesStorage.database.executeFast("DROP TABLE IF EXISTS chat_settings;").stepThis().dispose();
            messagesStorage.database.executeFast("ALTER TABLE dialogs ADD COLUMN last_mid_i INTEGER default 0").stepThis().dispose();
            messagesStorage.database.executeFast("ALTER TABLE dialogs ADD COLUMN unread_count_i INTEGER default 0").stepThis().dispose();
            messagesStorage.database.executeFast("ALTER TABLE dialogs ADD COLUMN pts INTEGER default 0").stepThis().dispose();
            messagesStorage.database.executeFast("ALTER TABLE dialogs ADD COLUMN date_i INTEGER default 0").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS last_mid_i_idx_dialogs ON dialogs(last_mid_i);").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS unread_count_i_idx_dialogs ON dialogs(unread_count_i);").stepThis().dispose();
            messagesStorage.database.executeFast("ALTER TABLE messages ADD COLUMN imp INTEGER default 0").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS messages_holes(uid INTEGER, start INTEGER, end INTEGER, PRIMARY KEY(uid, start));").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS uid_end_messages_holes ON messages_holes(uid, end);").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 22").stepThis().dispose();
            i4 = 22;
        }
        if (i4 == 22) {
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS media_holes_v2(uid INTEGER, type INTEGER, start INTEGER, end INTEGER, PRIMARY KEY(uid, type, start));").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS uid_end_media_holes_v2 ON media_holes_v2(uid, type, end);").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 23").stepThis().dispose();
            i4 = 23;
        }
        if (i4 == 23 || i4 == 24) {
            messagesStorage.database.executeFast("DELETE FROM media_holes_v2 WHERE uid != 0 AND type >= 0 AND start IN (0, 1)").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 25").stepThis().dispose();
            i4 = 25;
        }
        if (i4 == 25 || i4 == 26) {
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS channel_users_v2(did INTEGER, uid INTEGER, date INTEGER, data BLOB, PRIMARY KEY(did, uid))").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 27").stepThis().dispose();
            i4 = 27;
        }
        if (i4 == 27) {
            messagesStorage.database.executeFast("ALTER TABLE web_recent_v3 ADD COLUMN document BLOB default NULL").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 28").stepThis().dispose();
            i4 = 28;
        }
        if (i4 == 28 || i4 == 29) {
            messagesStorage.database.executeFast("DELETE FROM sent_files_v2 WHERE 1").stepThis().dispose();
            messagesStorage.database.executeFast("DELETE FROM download_queue WHERE 1").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 30").stepThis().dispose();
            i4 = 30;
        }
        if (i4 == 30) {
            messagesStorage.database.executeFast("ALTER TABLE chat_settings_v2 ADD COLUMN pinned INTEGER default 0").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS chat_settings_pinned_idx ON chat_settings_v2(uid, pinned) WHERE pinned != 0;").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS users_data(uid INTEGER PRIMARY KEY, about TEXT)").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 31").stepThis().dispose();
            i4 = 31;
        }
        if (i4 == 31) {
            messagesStorage.database.executeFast("DROP TABLE IF EXISTS bot_recent;").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS chat_hints(did INTEGER, type INTEGER, rating REAL, date INTEGER, PRIMARY KEY(did, type))").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS chat_hints_rating_idx ON chat_hints(rating);").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 32").stepThis().dispose();
            i4 = 32;
        }
        if (i4 == 32) {
            messagesStorage.database.executeFast("DROP INDEX IF EXISTS uid_mid_idx_imp_messages;").stepThis().dispose();
            messagesStorage.database.executeFast("DROP INDEX IF EXISTS uid_date_mid_imp_idx_messages;").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 33").stepThis().dispose();
            i4 = 33;
        }
        if (i4 == 33) {
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS pending_tasks(id INTEGER PRIMARY KEY, data BLOB);").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 34").stepThis().dispose();
            i4 = 34;
        }
        if (i4 == 34) {
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS stickers_featured(id INTEGER PRIMARY KEY, data BLOB, unread BLOB, date INTEGER, hash INTEGER);").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 35").stepThis().dispose();
            i4 = 35;
        }
        if (i4 == 35) {
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS requested_holes(uid INTEGER, seq_out_start INTEGER, seq_out_end INTEGER, PRIMARY KEY (uid, seq_out_start, seq_out_end));").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 36").stepThis().dispose();
            i4 = 36;
        }
        if (i4 == 36) {
            messagesStorage.database.executeFast("ALTER TABLE enc_chats ADD COLUMN in_seq_no INTEGER default 0").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 37").stepThis().dispose();
            i4 = 37;
        }
        if (i4 == 37) {
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS botcache(id TEXT PRIMARY KEY, date INTEGER, data BLOB)").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS botcache_date_idx ON botcache(date);").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 38").stepThis().dispose();
            i4 = 38;
        }
        if (i4 == 38) {
            messagesStorage.database.executeFast("ALTER TABLE dialogs ADD COLUMN pinned INTEGER default 0").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 39").stepThis().dispose();
            i4 = 39;
        }
        if (i4 == 39) {
            messagesStorage.database.executeFast("ALTER TABLE enc_chats ADD COLUMN admin_id INTEGER default 0").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 40").stepThis().dispose();
            i4 = 40;
        }
        if (i4 == 40) {
            fixNotificationSettings();
            messagesStorage.database.executeFast("PRAGMA user_version = 41").stepThis().dispose();
            i4 = 41;
        }
        if (i4 == 41) {
            messagesStorage.database.executeFast("ALTER TABLE messages ADD COLUMN mention INTEGER default 0").stepThis().dispose();
            messagesStorage.database.executeFast("ALTER TABLE user_contacts_v6 ADD COLUMN imported INTEGER default 0").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS uid_mention_idx_messages ON messages(uid, mention, read_state);").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 42").stepThis().dispose();
            i4 = 42;
        }
        if (i4 == 42) {
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS sharing_locations(uid INTEGER PRIMARY KEY, mid INTEGER, date INTEGER, period INTEGER, message BLOB);").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 43").stepThis().dispose();
            i4 = 43;
        }
        if (i4 == 43) {
            messagesStorage.database.executeFast("PRAGMA user_version = 44").stepThis().dispose();
            i4 = 44;
        }
        if (i4 == 44) {
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS user_contacts_v7(key TEXT PRIMARY KEY, uid INTEGER, fname TEXT, sname TEXT, imported INTEGER)").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS user_phones_v7(key TEXT, phone TEXT, sphone TEXT, deleted INTEGER, PRIMARY KEY (key, phone))").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS sphone_deleted_idx_user_phones ON user_phones_v7(sphone, deleted);").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 45").stepThis().dispose();
            i4 = 45;
        }
        if (i4 == 45) {
            messagesStorage.database.executeFast("ALTER TABLE enc_chats ADD COLUMN mtproto_seq INTEGER default 0").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 46").stepThis().dispose();
            i4 = 46;
        }
        if (i4 == 46) {
            messagesStorage.database.executeFast("DELETE FROM botcache WHERE 1").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 47").stepThis().dispose();
            i4 = 47;
        }
        if (i4 == 47) {
            messagesStorage.database.executeFast("ALTER TABLE dialogs ADD COLUMN flags INTEGER default 0").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 48").stepThis().dispose();
            i4 = 48;
        }
        if (i4 == 48) {
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS unread_push_messages(uid INTEGER, mid INTEGER, random INTEGER, date INTEGER, data BLOB, fm TEXT, name TEXT, uname TEXT, flags INTEGER, PRIMARY KEY(uid, mid))").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS unread_push_messages_idx_date ON unread_push_messages(date);").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS unread_push_messages_idx_random ON unread_push_messages(random);").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 49").stepThis().dispose();
            i4 = 49;
        }
        if (i4 == 49) {
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS user_settings(uid INTEGER PRIMARY KEY, info BLOB, pinned INTEGER)").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS user_settings_pinned_idx ON user_settings(uid, pinned) WHERE pinned != 0;").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 50").stepThis().dispose();
            i4 = 50;
        }
        if (i4 == 50) {
            messagesStorage.database.executeFast("DELETE FROM sent_files_v2 WHERE 1").stepThis().dispose();
            messagesStorage.database.executeFast("ALTER TABLE sent_files_v2 ADD COLUMN parent TEXT").stepThis().dispose();
            messagesStorage.database.executeFast("DELETE FROM download_queue WHERE 1").stepThis().dispose();
            messagesStorage.database.executeFast("ALTER TABLE download_queue ADD COLUMN parent TEXT").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 51").stepThis().dispose();
            i4 = 51;
        }
        if (i4 == 51) {
            messagesStorage.database.executeFast("ALTER TABLE media_counts_v2 ADD COLUMN old INTEGER").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 52").stepThis().dispose();
            i4 = 52;
        }
        if (i4 == 52) {
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS polls_v2(mid INTEGER, uid INTEGER, id INTEGER, PRIMARY KEY (mid, uid));").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS polls_id ON polls_v2(id);").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 53").stepThis().dispose();
            i4 = 53;
        }
        if (i4 == 53) {
            messagesStorage.database.executeFast("ALTER TABLE chat_settings_v2 ADD COLUMN online INTEGER default 0").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 54").stepThis().dispose();
            i4 = 54;
        }
        if (i4 == 54) {
            messagesStorage.database.executeFast("DROP TABLE IF EXISTS wallpapers;").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 55").stepThis().dispose();
            i4 = 55;
        }
        if (i4 == 55) {
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS wallpapers2(uid INTEGER PRIMARY KEY, data BLOB, num INTEGER)").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS wallpapers_num ON wallpapers2(num);").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 56").stepThis().dispose();
            i4 = 56;
        }
        if (i4 == 56 || i4 == 57) {
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS emoji_keywords_v2(lang TEXT, keyword TEXT, emoji TEXT, PRIMARY KEY(lang, keyword, emoji));").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS emoji_keywords_info_v2(lang TEXT PRIMARY KEY, alias TEXT, version INTEGER);").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 58").stepThis().dispose();
            i4 = 58;
        }
        if (i4 == 58) {
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS emoji_keywords_v2_keyword ON emoji_keywords_v2(keyword);").stepThis().dispose();
            messagesStorage.database.executeFast("ALTER TABLE emoji_keywords_info_v2 ADD COLUMN date INTEGER default 0").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 59").stepThis().dispose();
            i4 = 59;
        }
        if (i4 == 59) {
            messagesStorage.database.executeFast("ALTER TABLE dialogs ADD COLUMN folder_id INTEGER default 0").stepThis().dispose();
            messagesStorage.database.executeFast("ALTER TABLE dialogs ADD COLUMN data BLOB default NULL").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS folder_id_idx_dialogs ON dialogs(folder_id);").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 60").stepThis().dispose();
            i4 = 60;
        }
        if (i4 == 60) {
            messagesStorage.database.executeFast("DROP TABLE IF EXISTS channel_admins;").stepThis().dispose();
            messagesStorage.database.executeFast("DROP TABLE IF EXISTS blocked_users;").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 61").stepThis().dispose();
            i4 = 61;
        }
        if (i4 == 61) {
            messagesStorage.database.executeFast("DROP INDEX IF EXISTS send_state_idx_messages;").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS send_state_idx_messages2 ON messages(mid, send_state, date);").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 62").stepThis().dispose();
            i4 = 62;
        }
        if (i4 == 62) {
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS scheduled_messages(mid INTEGER PRIMARY KEY, uid INTEGER, send_state INTEGER, date INTEGER, data BLOB, ttl INTEGER, replydata BLOB)").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS send_state_idx_scheduled_messages ON scheduled_messages(mid, send_state, date);").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS uid_date_idx_scheduled_messages ON scheduled_messages(uid, date);").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 63").stepThis().dispose();
            i4 = 63;
        }
        if (i4 == 63) {
            messagesStorage.database.executeFast("DELETE FROM download_queue WHERE 1").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 64").stepThis().dispose();
            i4 = 64;
        }
        if (i4 == 64) {
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS dialog_filter(id INTEGER PRIMARY KEY, ord INTEGER, unread_count INTEGER, flags INTEGER, title TEXT)").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS dialog_filter_ep(id INTEGER, peer INTEGER, PRIMARY KEY (id, peer))").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 65").stepThis().dispose();
            i4 = 65;
        }
        if (i4 == 65) {
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS flags_idx_dialogs ON dialogs(flags);").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 66").stepThis().dispose();
            i4 = 66;
        }
        if (i4 == 66) {
            messagesStorage.database.executeFast("CREATE TABLE dialog_filter_pin_v2(id INTEGER, peer INTEGER, pin INTEGER, PRIMARY KEY (id, peer))").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 67").stepThis().dispose();
            i4 = 67;
        }
        if (i4 == 67) {
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS stickers_dice(emoji TEXT PRIMARY KEY, data BLOB, date INTEGER);").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 68").stepThis().dispose();
            i4 = 68;
        }
        if (i4 == 68) {
            messagesStorage.executeNoException("ALTER TABLE messages ADD COLUMN forwards INTEGER default 0");
            messagesStorage.database.executeFast("PRAGMA user_version = 69").stepThis().dispose();
            i4 = 69;
        }
        if (i4 == 69) {
            messagesStorage.executeNoException("ALTER TABLE messages ADD COLUMN replies_data BLOB default NULL");
            messagesStorage.executeNoException("ALTER TABLE messages ADD COLUMN thread_reply_id INTEGER default 0");
            messagesStorage.database.executeFast("PRAGMA user_version = 70").stepThis().dispose();
            i4 = 70;
        }
        if (i4 == 70) {
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS chat_pinned_v2(uid INTEGER, mid INTEGER, data BLOB, PRIMARY KEY (uid, mid));").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 71").stepThis().dispose();
            i4 = 71;
        }
        if (i4 == 71) {
            messagesStorage.executeNoException("ALTER TABLE sharing_locations ADD COLUMN proximity INTEGER default 0");
            messagesStorage.database.executeFast("PRAGMA user_version = 72").stepThis().dispose();
            i4 = 72;
        }
        if (i4 == 72) {
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS chat_pinned_count(uid INTEGER PRIMARY KEY, count INTEGER, end INTEGER);").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 73").stepThis().dispose();
            i4 = 73;
        }
        if (i4 == 73) {
            messagesStorage.executeNoException("ALTER TABLE chat_settings_v2 ADD COLUMN inviter INTEGER default 0");
            messagesStorage.database.executeFast("PRAGMA user_version = 74").stepThis().dispose();
            i4 = 74;
        }
        if (i4 == 74) {
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS shortcut_widget(id INTEGER, did INTEGER, ord INTEGER, PRIMARY KEY (id, did));").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS shortcut_widget_did ON shortcut_widget(did);").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 75").stepThis().dispose();
            i4 = 75;
        }
        if (i4 == 75) {
            messagesStorage.executeNoException("ALTER TABLE chat_settings_v2 ADD COLUMN links INTEGER default 0");
            messagesStorage.database.executeFast("PRAGMA user_version = 76").stepThis().dispose();
            i4 = 76;
        }
        if (i4 == 76) {
            messagesStorage.executeNoException("ALTER TABLE enc_tasks_v2 ADD COLUMN media INTEGER default -1");
            messagesStorage.database.executeFast("PRAGMA user_version = 77").stepThis().dispose();
            i4 = 77;
        }
        if (i4 == 77) {
            messagesStorage.database.executeFast("DROP TABLE IF EXISTS channel_admins_v2;").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS channel_admins_v3(did INTEGER, uid INTEGER, data BLOB, PRIMARY KEY(did, uid))").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 78").stepThis().dispose();
            i4 = 78;
        }
        if (i4 == 78) {
            messagesStorage.database.executeFast("DROP TABLE IF EXISTS bot_info;").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS bot_info_v2(uid INTEGER, dialogId INTEGER, info BLOB, PRIMARY KEY(uid, dialogId))").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 79").stepThis().dispose();
            i4 = 79;
        }
        int i11 = 3;
        if (i4 == 79) {
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS enc_tasks_v3(mid INTEGER, date INTEGER, media INTEGER, PRIMARY KEY(mid, media))").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS date_idx_enc_tasks_v3 ON enc_tasks_v3(date);").stepThis().dispose();
            messagesStorage.database.beginTransaction();
            SQLiteCursor queryFinalized3 = messagesStorage.database.queryFinalized("SELECT mid, date, media FROM enc_tasks_v2 WHERE 1", new Object[0]);
            SQLitePreparedStatement executeFast3 = messagesStorage.database.executeFast("REPLACE INTO enc_tasks_v3 VALUES(?, ?, ?)");
            if (queryFinalized3.next()) {
                long longValue = queryFinalized3.longValue(0);
                int intValue3 = queryFinalized3.intValue(1);
                int intValue4 = queryFinalized3.intValue(2);
                executeFast3.requery();
                executeFast3.bindLong(1, longValue);
                executeFast3.bindInteger(2, intValue3);
                executeFast3.bindInteger(3, intValue4);
                executeFast3.step();
            }
            executeFast3.dispose();
            queryFinalized3.dispose();
            messagesStorage.database.commitTransaction();
            messagesStorage.database.executeFast("DROP INDEX IF EXISTS date_idx_enc_tasks_v2;").stepThis().dispose();
            messagesStorage.database.executeFast("DROP TABLE IF EXISTS enc_tasks_v2;").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 80").stepThis().dispose();
            i4 = 80;
        }
        int i12 = 5;
        if (i4 == 80) {
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS scheduled_messages_v2(mid INTEGER, uid INTEGER, send_state INTEGER, date INTEGER, data BLOB, ttl INTEGER, replydata BLOB, PRIMARY KEY(mid, uid))").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS send_state_idx_scheduled_messages_v2 ON scheduled_messages_v2(mid, send_state, date);").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS uid_date_idx_scheduled_messages_v2 ON scheduled_messages_v2(uid, date);").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS bot_keyboard_idx_mid_v2 ON bot_keyboard(mid, uid);").stepThis().dispose();
            messagesStorage.database.executeFast("DROP INDEX IF EXISTS bot_keyboard_idx_mid;").stepThis().dispose();
            messagesStorage.database.beginTransaction();
            try {
                sQLiteCursor8 = messagesStorage.database.queryFinalized("SELECT mid, uid, send_state, date, data, ttl, replydata FROM scheduled_messages_v2 WHERE 1", new Object[0]);
            } catch (Exception e) {
                FileLog.e((Throwable) e);
                sQLiteCursor8 = null;
            }
            if (sQLiteCursor8 != null) {
                SQLitePreparedStatement executeFast4 = messagesStorage.database.executeFast("REPLACE INTO scheduled_messages_v2 VALUES(?, ?, ?, ?, ?, ?, ?)");
                while (sQLiteCursor8.next()) {
                    NativeByteBuffer byteBufferValue3 = sQLiteCursor8.byteBufferValue(4);
                    if (byteBufferValue3 != null) {
                        int intValue5 = sQLiteCursor8.intValue(i9);
                        long longValue2 = sQLiteCursor8.longValue(1);
                        int intValue6 = sQLiteCursor8.intValue(2);
                        int intValue7 = sQLiteCursor8.intValue(3);
                        int intValue8 = sQLiteCursor8.intValue(i12);
                        NativeByteBuffer byteBufferValue4 = sQLiteCursor8.byteBufferValue(6);
                        executeFast4.requery();
                        executeFast4.bindInteger(1, intValue5);
                        executeFast4.bindLong(2, longValue2);
                        executeFast4.bindInteger(3, intValue6);
                        executeFast4.bindByteBuffer(4, byteBufferValue3);
                        executeFast4.bindInteger(5, intValue7);
                        executeFast4.bindInteger(6, intValue8);
                        if (byteBufferValue4 != null) {
                            executeFast4.bindByteBuffer(7, byteBufferValue4);
                        } else {
                            executeFast4.bindNull(7);
                        }
                        executeFast4.step();
                        if (byteBufferValue4 != null) {
                            byteBufferValue4.reuse();
                        }
                        byteBufferValue3.reuse();
                        i9 = 0;
                        i12 = 5;
                    }
                }
                sQLiteCursor8.dispose();
                executeFast4.dispose();
            }
            messagesStorage.database.executeFast("DROP INDEX IF EXISTS send_state_idx_scheduled_messages;").stepThis().dispose();
            messagesStorage.database.executeFast("DROP INDEX IF EXISTS uid_date_idx_scheduled_messages;").stepThis().dispose();
            messagesStorage.database.executeFast("DROP TABLE IF EXISTS scheduled_messages;").stepThis().dispose();
            messagesStorage.database.commitTransaction();
            messagesStorage.database.executeFast("PRAGMA user_version = 81").stepThis().dispose();
            i4 = 81;
        }
        if (i4 == 81) {
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS media_v3(mid INTEGER, uid INTEGER, date INTEGER, type INTEGER, data BLOB, PRIMARY KEY(mid, uid))").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS uid_mid_type_date_idx_media_v3 ON media_v3(uid, mid, type, date);").stepThis().dispose();
            messagesStorage.database.beginTransaction();
            try {
                sQLiteCursor7 = messagesStorage.database.queryFinalized("SELECT mid, uid, date, type, data FROM media_v2 WHERE 1", new Object[0]);
            } catch (Exception e2) {
                FileLog.e((Throwable) e2);
                sQLiteCursor7 = null;
            }
            if (sQLiteCursor7 != null) {
                SQLitePreparedStatement executeFast5 = messagesStorage.database.executeFast("REPLACE INTO media_v3 VALUES(?, ?, ?, ?, ?)");
                while (sQLiteCursor7.next()) {
                    NativeByteBuffer byteBufferValue5 = sQLiteCursor7.byteBufferValue(4);
                    if (byteBufferValue5 != null) {
                        int intValue9 = sQLiteCursor7.intValue(0);
                        long longValue3 = sQLiteCursor7.longValue(1);
                        if (((int) longValue3) == 0) {
                            longValue3 = DialogObject.makeEncryptedDialogId((long) ((int) (longValue3 >> 32)));
                        }
                        int intValue10 = sQLiteCursor7.intValue(2);
                        int intValue11 = sQLiteCursor7.intValue(3);
                        executeFast5.requery();
                        executeFast5.bindInteger(1, intValue9);
                        executeFast5.bindLong(2, longValue3);
                        executeFast5.bindInteger(3, intValue10);
                        executeFast5.bindInteger(4, intValue11);
                        executeFast5.bindByteBuffer(5, byteBufferValue5);
                        executeFast5.step();
                        byteBufferValue5.reuse();
                    }
                }
                sQLiteCursor7.dispose();
                executeFast5.dispose();
            }
            messagesStorage.database.executeFast("DROP INDEX IF EXISTS uid_mid_type_date_idx_media;").stepThis().dispose();
            messagesStorage.database.executeFast("DROP TABLE IF EXISTS media_v2;").stepThis().dispose();
            messagesStorage.database.commitTransaction();
            messagesStorage.database.executeFast("PRAGMA user_version = 82").stepThis().dispose();
            i4 = 82;
        }
        if (i4 == 82) {
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS randoms_v2(random_id INTEGER, mid INTEGER, uid INTEGER, PRIMARY KEY (random_id, mid, uid))").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS mid_idx_randoms_v2 ON randoms_v2(mid, uid);").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS enc_tasks_v4(mid INTEGER, uid INTEGER, date INTEGER, media INTEGER, PRIMARY KEY(mid, uid, media))").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS date_idx_enc_tasks_v4 ON enc_tasks_v4(date);").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS polls_v2(mid INTEGER, uid INTEGER, id INTEGER, PRIMARY KEY (mid, uid));").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS polls_id_v2 ON polls_v2(id);").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS webpage_pending_v2(id INTEGER, mid INTEGER, uid INTEGER, PRIMARY KEY (id, mid, uid));").stepThis().dispose();
            messagesStorage.database.beginTransaction();
            try {
                sQLiteCursor3 = messagesStorage.database.queryFinalized("SELECT r.random_id, r.mid, m.uid FROM randoms as r INNER JOIN messages as m ON r.mid = m.mid WHERE 1", new Object[0]);
            } catch (Exception e3) {
                FileLog.e((Throwable) e3);
                sQLiteCursor3 = null;
            }
            if (sQLiteCursor3 != null) {
                SQLitePreparedStatement executeFast6 = messagesStorage.database.executeFast("REPLACE INTO randoms_v2 VALUES(?, ?, ?)");
                while (sQLiteCursor3.next()) {
                    long longValue4 = sQLiteCursor3.longValue(0);
                    int intValue12 = sQLiteCursor3.intValue(1);
                    long longValue5 = sQLiteCursor3.longValue(2);
                    if (((int) longValue5) == 0) {
                        longValue5 = DialogObject.makeEncryptedDialogId((long) ((int) (longValue5 >> 32)));
                    }
                    executeFast6.requery();
                    executeFast6.bindLong(1, longValue4);
                    executeFast6.bindInteger(2, intValue12);
                    executeFast6.bindLong(3, longValue5);
                    executeFast6.step();
                }
                sQLiteCursor3.dispose();
                executeFast6.dispose();
            }
            try {
                sQLiteCursor4 = messagesStorage.database.queryFinalized("SELECT p.mid, m.uid, p.id FROM polls as p INNER JOIN messages as m ON p.mid = m.mid WHERE 1", new Object[0]);
            } catch (Exception e4) {
                FileLog.e((Throwable) e4);
                sQLiteCursor4 = null;
            }
            if (sQLiteCursor4 != null) {
                SQLitePreparedStatement executeFast7 = messagesStorage.database.executeFast("REPLACE INTO polls_v2 VALUES(?, ?, ?)");
                while (sQLiteCursor4.next()) {
                    int intValue13 = sQLiteCursor4.intValue(0);
                    long longValue6 = sQLiteCursor4.longValue(1);
                    long longValue7 = sQLiteCursor4.longValue(2);
                    if (((int) longValue6) == 0) {
                        longValue6 = DialogObject.makeEncryptedDialogId((long) ((int) (longValue6 >> 32)));
                    }
                    executeFast7.requery();
                    executeFast7.bindInteger(1, intValue13);
                    executeFast7.bindLong(2, longValue6);
                    executeFast7.bindLong(3, longValue7);
                    executeFast7.step();
                }
                sQLiteCursor4.dispose();
                executeFast7.dispose();
            }
            try {
                sQLiteCursor5 = messagesStorage.database.queryFinalized("SELECT wp.id, wp.mid, m.uid FROM webpage_pending as wp INNER JOIN messages as m ON wp.mid = m.mid WHERE 1", new Object[0]);
            } catch (Exception e5) {
                FileLog.e((Throwable) e5);
                sQLiteCursor5 = null;
            }
            if (sQLiteCursor5 != null) {
                SQLitePreparedStatement executeFast8 = messagesStorage.database.executeFast("REPLACE INTO webpage_pending_v2 VALUES(?, ?, ?)");
                while (sQLiteCursor5.next()) {
                    long longValue8 = sQLiteCursor5.longValue(0);
                    int intValue14 = sQLiteCursor5.intValue(1);
                    long longValue9 = sQLiteCursor5.longValue(2);
                    if (((int) longValue9) == 0) {
                        longValue9 = DialogObject.makeEncryptedDialogId((long) ((int) (longValue9 >> 32)));
                    }
                    executeFast8.requery();
                    executeFast8.bindLong(1, longValue8);
                    executeFast8.bindInteger(2, intValue14);
                    executeFast8.bindLong(3, longValue9);
                    executeFast8.step();
                }
                sQLiteCursor5.dispose();
                executeFast8.dispose();
            }
            try {
                sQLiteCursor6 = messagesStorage.database.queryFinalized("SELECT et.mid, m.uid, et.date, et.media FROM enc_tasks_v3 as et INNER JOIN messages as m ON et.mid = m.mid WHERE 1", new Object[0]);
            } catch (Exception e6) {
                FileLog.e((Throwable) e6);
                sQLiteCursor6 = null;
            }
            if (sQLiteCursor6 != null) {
                SQLitePreparedStatement executeFast9 = messagesStorage.database.executeFast("REPLACE INTO enc_tasks_v4 VALUES(?, ?, ?, ?)");
                while (sQLiteCursor6.next()) {
                    int intValue15 = sQLiteCursor6.intValue(0);
                    long longValue10 = sQLiteCursor6.longValue(1);
                    int intValue16 = sQLiteCursor6.intValue(2);
                    int intValue17 = sQLiteCursor6.intValue(3);
                    if (((int) longValue10) == 0) {
                        longValue10 = DialogObject.makeEncryptedDialogId((long) ((int) (longValue10 >> 32)));
                    }
                    executeFast9.requery();
                    executeFast9.bindInteger(1, intValue15);
                    executeFast9.bindLong(2, longValue10);
                    executeFast9.bindInteger(3, intValue16);
                    executeFast9.bindInteger(4, intValue17);
                    executeFast9.step();
                }
                sQLiteCursor6.dispose();
                executeFast9.dispose();
            }
            messagesStorage.database.executeFast("DROP INDEX IF EXISTS mid_idx_randoms;").stepThis().dispose();
            messagesStorage.database.executeFast("DROP TABLE IF EXISTS randoms;").stepThis().dispose();
            messagesStorage.database.executeFast("DROP INDEX IF EXISTS date_idx_enc_tasks_v3;").stepThis().dispose();
            messagesStorage.database.executeFast("DROP TABLE IF EXISTS enc_tasks_v3;").stepThis().dispose();
            messagesStorage.database.executeFast("DROP INDEX IF EXISTS polls_id;").stepThis().dispose();
            messagesStorage.database.executeFast("DROP TABLE IF EXISTS polls;").stepThis().dispose();
            messagesStorage.database.executeFast("DROP TABLE IF EXISTS webpage_pending;").stepThis().dispose();
            messagesStorage.database.commitTransaction();
            messagesStorage.database.executeFast("PRAGMA user_version = 83").stepThis().dispose();
            i4 = 83;
        }
        if (i4 == 83) {
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS messages_v2(mid INTEGER, uid INTEGER, read_state INTEGER, send_state INTEGER, date INTEGER, data BLOB, out INTEGER, ttl INTEGER, media INTEGER, replydata BLOB, imp INTEGER, mention INTEGER, forwards INTEGER, replies_data BLOB, thread_reply_id INTEGER, is_channel INTEGER, PRIMARY KEY(mid, uid))").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS uid_mid_read_out_idx_messages_v2 ON messages_v2(uid, mid, read_state, out);").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS uid_date_mid_idx_messages_v2 ON messages_v2(uid, date, mid);").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS mid_out_idx_messages_v2 ON messages_v2(mid, out);").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS task_idx_messages_v2 ON messages_v2(uid, out, read_state, ttl, date, send_state);").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS send_state_idx_messages_v2 ON messages_v2(mid, send_state, date);").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS uid_mention_idx_messages_v2 ON messages_v2(uid, mention, read_state);").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS is_channel_idx_messages_v2 ON messages_v2(mid, is_channel);").stepThis().dispose();
            messagesStorage.database.beginTransaction();
            try {
                sQLiteCursor2 = messagesStorage.database.queryFinalized("SELECT mid, uid, read_state, send_state, date, data, out, ttl, media, replydata, imp, mention, forwards, replies_data, thread_reply_id FROM messages WHERE 1", new Object[0]);
            } catch (Exception e7) {
                FileLog.e((Throwable) e7);
                sQLiteCursor2 = null;
            }
            if (sQLiteCursor2 != null) {
                SQLitePreparedStatement executeFast10 = messagesStorage.database.executeFast("REPLACE INTO messages_v2 VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                while (sQLiteCursor2.next()) {
                    NativeByteBuffer byteBufferValue6 = sQLiteCursor2.byteBufferValue(5);
                    if (byteBufferValue6 != null) {
                        long intValue18 = (long) sQLiteCursor2.intValue(0);
                        long longValue11 = sQLiteCursor2.longValue(i8);
                        if (((int) longValue11) == 0) {
                            longValue11 = DialogObject.makeEncryptedDialogId((long) ((int) (longValue11 >> 32)));
                        }
                        int intValue19 = sQLiteCursor2.intValue(i7);
                        int intValue20 = sQLiteCursor2.intValue(i11);
                        int intValue21 = sQLiteCursor2.intValue(i5);
                        int intValue22 = sQLiteCursor2.intValue(i6);
                        int intValue23 = sQLiteCursor2.intValue(7);
                        int intValue24 = sQLiteCursor2.intValue(8);
                        NativeByteBuffer byteBufferValue7 = sQLiteCursor2.byteBufferValue(9);
                        int intValue25 = sQLiteCursor2.intValue(10);
                        int intValue26 = sQLiteCursor2.intValue(11);
                        int intValue27 = sQLiteCursor2.intValue(12);
                        NativeByteBuffer byteBufferValue8 = sQLiteCursor2.byteBufferValue(13);
                        SQLiteCursor sQLiteCursor9 = sQLiteCursor2;
                        int intValue28 = sQLiteCursor2.intValue(14);
                        int i13 = (int) (longValue11 >> 32);
                        if (intValue23 < 0) {
                            TLRPC$Message TLdeserialize2 = TLRPC$Message.TLdeserialize(byteBufferValue6, byteBufferValue6.readInt32(false), false);
                            if (TLdeserialize2 != null) {
                                i3 = intValue24;
                                TLdeserialize2.readAttachPath(byteBufferValue6, getUserConfig().clientUserId);
                                if (TLdeserialize2.params == null) {
                                    HashMap<String, String> hashMap = new HashMap<>();
                                    TLdeserialize2.params = hashMap;
                                    StringBuilder sb = new StringBuilder();
                                    i2 = i13;
                                    sb.append("");
                                    sb.append(intValue23);
                                    hashMap.put("fwd_peer", sb.toString());
                                } else {
                                    i2 = i13;
                                }
                                byteBufferValue6.reuse();
                                NativeByteBuffer nativeByteBuffer3 = new NativeByteBuffer(TLdeserialize2.getObjectSize());
                                TLdeserialize2.serializeToStream(nativeByteBuffer3);
                                byteBufferValue6 = nativeByteBuffer3;
                            } else {
                                i2 = i13;
                                i3 = intValue24;
                            }
                            intValue23 = 0;
                        } else {
                            i2 = i13;
                            i3 = intValue24;
                        }
                        executeFast10.requery();
                        executeFast10.bindInteger(1, (int) intValue18);
                        executeFast10.bindLong(2, longValue11);
                        executeFast10.bindInteger(3, intValue19);
                        executeFast10.bindInteger(4, intValue20);
                        executeFast10.bindInteger(5, intValue21);
                        executeFast10.bindByteBuffer(6, byteBufferValue6);
                        executeFast10.bindInteger(7, intValue22);
                        executeFast10.bindInteger(8, intValue23);
                        executeFast10.bindInteger(9, i3);
                        if (byteBufferValue7 != null) {
                            executeFast10.bindByteBuffer(10, byteBufferValue7);
                        } else {
                            executeFast10.bindNull(10);
                        }
                        executeFast10.bindInteger(11, intValue25);
                        executeFast10.bindInteger(12, intValue26);
                        executeFast10.bindInteger(13, intValue27);
                        if (byteBufferValue8 != null) {
                            nativeByteBuffer = byteBufferValue8;
                            executeFast10.bindByteBuffer(14, nativeByteBuffer);
                        } else {
                            nativeByteBuffer = byteBufferValue8;
                            executeFast10.bindNull(14);
                        }
                        executeFast10.bindInteger(15, intValue28);
                        executeFast10.bindInteger(16, i2 > 0 ? 1 : 0);
                        executeFast10.step();
                        if (byteBufferValue7 != null) {
                            byteBufferValue7.reuse();
                        }
                        if (nativeByteBuffer != null) {
                            nativeByteBuffer.reuse();
                        }
                        byteBufferValue6.reuse();
                        sQLiteCursor2 = sQLiteCursor9;
                        i5 = 4;
                        i6 = 6;
                        i7 = 2;
                        i8 = 1;
                        i11 = 3;
                    }
                }
                sQLiteCursor2.dispose();
                executeFast10.dispose();
            }
            messagesStorage = this;
            int i14 = 0;
            SQLiteCursor queryFinalized4 = messagesStorage.database.queryFinalized("SELECT did, last_mid, last_mid_i FROM dialogs WHERE 1", new Object[0]);
            SQLitePreparedStatement executeFast11 = messagesStorage.database.executeFast("UPDATE dialogs SET last_mid = ?, last_mid_i = ? WHERE did = ?");
            ArrayList arrayList = null;
            ArrayList arrayList2 = null;
            while (queryFinalized4.next()) {
                long longValue12 = queryFinalized4.longValue(i14);
                int i15 = (int) longValue12;
                int i16 = (int) (longValue12 >> 32);
                if (i15 == 0) {
                    if (arrayList == null) {
                        arrayList = new ArrayList();
                    }
                    arrayList.add(Integer.valueOf(i16));
                } else if (i16 == 2) {
                    if (arrayList2 == null) {
                        arrayList2 = new ArrayList();
                    }
                    arrayList2.add(Integer.valueOf(i15));
                }
                executeFast11.requery();
                executeFast11.bindInteger(1, queryFinalized4.intValue(1));
                executeFast11.bindInteger(2, queryFinalized4.intValue(2));
                executeFast11.bindLong(3, longValue12);
                executeFast11.step();
                i14 = 0;
            }
            executeFast11.dispose();
            queryFinalized4.dispose();
            int i17 = 0;
            SQLiteCursor queryFinalized5 = messagesStorage.database.queryFinalized("SELECT uid, mid FROM unread_push_messages WHERE 1", new Object[0]);
            SQLitePreparedStatement executeFast12 = messagesStorage.database.executeFast("UPDATE unread_push_messages SET mid = ? WHERE uid = ? AND mid = ?");
            while (queryFinalized5.next()) {
                long longValue13 = queryFinalized5.longValue(i17);
                int intValue29 = queryFinalized5.intValue(1);
                executeFast12.requery();
                executeFast12.bindInteger(1, intValue29);
                executeFast12.bindLong(2, longValue13);
                executeFast12.bindInteger(3, intValue29);
                executeFast12.step();
                i17 = 0;
            }
            executeFast12.dispose();
            queryFinalized5.dispose();
            if (arrayList != null) {
                SQLitePreparedStatement executeFast13 = messagesStorage.database.executeFast("UPDATE dialogs SET did = ? WHERE did = ?");
                SQLitePreparedStatement executeFast14 = messagesStorage.database.executeFast("UPDATE dialog_filter_pin_v2 SET peer = ? WHERE peer = ?");
                SQLitePreparedStatement executeFast15 = messagesStorage.database.executeFast("UPDATE dialog_filter_ep SET peer = ? WHERE peer = ?");
                int size = arrayList.size();
                for (int i18 = 0; i18 < size; i18++) {
                    long intValue30 = (long) ((Integer) arrayList.get(i18)).intValue();
                    long makeEncryptedDialogId = DialogObject.makeEncryptedDialogId(intValue30);
                    long j = intValue30 << 32;
                    executeFast13.requery();
                    executeFast13.bindLong(1, makeEncryptedDialogId);
                    executeFast13.bindLong(2, j);
                    executeFast13.step();
                    executeFast14.requery();
                    executeFast14.bindLong(1, makeEncryptedDialogId);
                    executeFast14.bindLong(2, j);
                    executeFast14.step();
                    executeFast15.requery();
                    executeFast15.bindLong(1, makeEncryptedDialogId);
                    executeFast15.bindLong(2, j);
                    executeFast15.step();
                }
                executeFast13.dispose();
                executeFast14.dispose();
                executeFast15.dispose();
            }
            if (arrayList2 != null) {
                SQLitePreparedStatement executeFast16 = messagesStorage.database.executeFast("UPDATE dialogs SET did = ? WHERE did = ?");
                int size2 = arrayList2.size();
                for (int i19 = 0; i19 < size2; i19++) {
                    int intValue31 = ((Integer) arrayList2.get(i19)).intValue();
                    long makeFolderDialogId = DialogObject.makeFolderDialogId(intValue31);
                    executeFast16.requery();
                    executeFast16.bindLong(1, makeFolderDialogId);
                    executeFast16.bindLong(2, 8589934592L | ((long) intValue31));
                    executeFast16.step();
                }
                executeFast16.dispose();
            }
            messagesStorage.database.executeFast("DROP INDEX IF EXISTS uid_mid_read_out_idx_messages;").stepThis().dispose();
            messagesStorage.database.executeFast("DROP INDEX IF EXISTS uid_date_mid_idx_messages;").stepThis().dispose();
            messagesStorage.database.executeFast("DROP INDEX IF EXISTS mid_out_idx_messages;").stepThis().dispose();
            messagesStorage.database.executeFast("DROP INDEX IF EXISTS task_idx_messages;").stepThis().dispose();
            messagesStorage.database.executeFast("DROP INDEX IF EXISTS send_state_idx_messages2;").stepThis().dispose();
            messagesStorage.database.executeFast("DROP INDEX IF EXISTS uid_mention_idx_messages;").stepThis().dispose();
            messagesStorage.database.executeFast("DROP TABLE IF EXISTS messages;").stepThis().dispose();
            messagesStorage.database.commitTransaction();
            messagesStorage.database.executeFast("PRAGMA user_version = 84").stepThis().dispose();
            i4 = 84;
        }
        if (i4 == 84) {
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS media_v4(mid INTEGER, uid INTEGER, date INTEGER, type INTEGER, data BLOB, PRIMARY KEY(mid, uid, type))").stepThis().dispose();
            messagesStorage.database.beginTransaction();
            try {
                sQLiteCursor = messagesStorage.database.queryFinalized("SELECT mid, uid, date, type, data FROM media_v3 WHERE 1", new Object[0]);
            } catch (Exception e8) {
                FileLog.e((Throwable) e8);
                sQLiteCursor = null;
            }
            if (sQLiteCursor != null) {
                SQLitePreparedStatement executeFast17 = messagesStorage.database.executeFast("REPLACE INTO media_v4 VALUES(?, ?, ?, ?, ?)");
                while (sQLiteCursor.next()) {
                    NativeByteBuffer byteBufferValue9 = sQLiteCursor.byteBufferValue(4);
                    if (byteBufferValue9 != null) {
                        int intValue32 = sQLiteCursor.intValue(0);
                        long longValue14 = sQLiteCursor.longValue(1);
                        if (((int) longValue14) == 0) {
                            longValue14 = DialogObject.makeEncryptedDialogId((long) ((int) (longValue14 >> 32)));
                        }
                        int intValue33 = sQLiteCursor.intValue(2);
                        int intValue34 = sQLiteCursor.intValue(3);
                        executeFast17.requery();
                        executeFast17.bindInteger(1, intValue32);
                        executeFast17.bindLong(2, longValue14);
                        executeFast17.bindInteger(3, intValue33);
                        executeFast17.bindInteger(4, intValue34);
                        executeFast17.bindByteBuffer(5, byteBufferValue9);
                        executeFast17.step();
                        byteBufferValue9.reuse();
                    }
                }
                sQLiteCursor.dispose();
                executeFast17.dispose();
            }
            messagesStorage.database.commitTransaction();
            messagesStorage.database.executeFast("DROP TABLE IF EXISTS media_v3;").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 85").stepThis().dispose();
            i4 = 85;
        }
        if (i4 == 85) {
            messagesStorage.executeNoException("ALTER TABLE messages_v2 ADD COLUMN reply_to_message_id INTEGER default 0");
            messagesStorage.executeNoException("ALTER TABLE scheduled_messages_v2 ADD COLUMN reply_to_message_id INTEGER default 0");
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS reply_to_idx_messages_v2 ON messages_v2(mid, reply_to_message_id);").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS reply_to_idx_scheduled_messages_v2 ON scheduled_messages_v2(mid, reply_to_message_id);").stepThis().dispose();
            messagesStorage.executeNoException("UPDATE messages_v2 SET replydata = NULL");
            messagesStorage.executeNoException("UPDATE scheduled_messages_v2 SET replydata = NULL");
            messagesStorage.database.executeFast("PRAGMA user_version = 86").stepThis().dispose();
            i4 = 86;
        }
        if (i4 == 86) {
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS reactions(data BLOB, hash INTEGER, date INTEGER);").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 87").stepThis().dispose();
            i4 = 87;
        }
        if (i4 == 87) {
            messagesStorage.database.executeFast("ALTER TABLE dialogs ADD COLUMN unread_reactions INTEGER default 0").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE TABLE reaction_mentions(message_id INTEGER PRIMARY KEY, state INTEGER);").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 88").stepThis().dispose();
            i4 = 88;
        }
        if (i4 == 88 || i4 == 89) {
            messagesStorage.database.executeFast("DROP TABLE IF EXISTS reaction_mentions;").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE TABLE IF NOT EXISTS reaction_mentions(message_id INTEGER, state INTEGER, dialog_id INTEGER, PRIMARY KEY(dialog_id, message_id));").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS reaction_mentions_did ON reaction_mentions(dialog_id);").stepThis().dispose();
            messagesStorage.database.executeFast("DROP INDEX IF EXISTS uid_mid_type_date_idx_media_v3").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE INDEX IF NOT EXISTS uid_mid_type_date_idx_media_v4 ON media_v4(uid, mid, type, date);").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 90").stepThis().dispose();
            i4 = 90;
        }
        if (i4 == 90 || i4 == 91) {
            messagesStorage.database.executeFast("DROP TABLE IF EXISTS downloading_documents;").stepThis().dispose();
            messagesStorage.database.executeFast("CREATE TABLE downloading_documents(data BLOB, hash INTEGER, id INTEGER, state INTEGER, date INTEGER, PRIMARY KEY(hash, id));").stepThis().dispose();
            messagesStorage.database.executeFast("PRAGMA user_version = 92").stepThis().dispose();
        }
        FileLog.d("MessagesStorage db migration finished");
        AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda9(messagesStorage));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateDbToLastVersion$3() {
        this.databaseMigrationInProgress = true;
        NotificationCenter.getInstance(this.currentAccount).postNotificationName(NotificationCenter.onDatabaseMigration, Boolean.TRUE);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateDbToLastVersion$4() {
        this.databaseMigrationInProgress = false;
        NotificationCenter.getInstance(this.currentAccount).postNotificationName(NotificationCenter.onDatabaseMigration, Boolean.FALSE);
    }

    private void executeNoException(String str) {
        try {
            this.database.executeFast(str).stepThis().dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    private void cleanupInternal(boolean z) {
        this.lastDateValue = 0;
        this.lastSeqValue = 0;
        this.lastPtsValue = 0;
        this.lastQtsValue = 0;
        this.lastSecretVersion = 0;
        this.mainUnreadCount = 0;
        this.archiveUnreadCount = 0;
        this.pendingMainUnreadCount = 0;
        this.pendingArchiveUnreadCount = 0;
        this.dialogFilters.clear();
        this.dialogFiltersMap.clear();
        this.unknownDialogsIds.clear();
        this.lastSavedSeq = 0;
        this.lastSavedPts = 0;
        this.lastSavedDate = 0;
        this.lastSavedQts = 0;
        this.secretPBytes = null;
        this.secretG = 0;
        SQLiteDatabase sQLiteDatabase = this.database;
        if (sQLiteDatabase != null) {
            sQLiteDatabase.close();
            this.database = null;
        }
        if (z) {
            File file = this.cacheFile;
            if (file != null) {
                file.delete();
                this.cacheFile = null;
            }
            File file2 = this.walCacheFile;
            if (file2 != null) {
                file2.delete();
                this.walCacheFile = null;
            }
            File file3 = this.shmCacheFile;
            if (file3 != null) {
                file3.delete();
                this.shmCacheFile = null;
            }
        }
    }

    public void cleanup(boolean z) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda188(this, z));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$cleanup$6(boolean z) {
        cleanupInternal(true);
        openDatabase(1);
        if (z) {
            Utilities.stageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda22(this));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$cleanup$5() {
        getMessagesController().getDifference();
    }

    public void saveSecretParams(int i, int i2, byte[] bArr) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda40(this, i, i2, bArr));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$saveSecretParams$7(int i, int i2, byte[] bArr) {
        try {
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE params SET lsv = ?, sg = ?, pbytes = ? WHERE id = 1");
            int i3 = 1;
            executeFast.bindInteger(1, i);
            executeFast.bindInteger(2, i2);
            if (bArr != null) {
                i3 = bArr.length;
            }
            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(i3);
            if (bArr != null) {
                nativeByteBuffer.writeBytes(bArr);
            }
            executeFast.bindByteBuffer(3, nativeByteBuffer);
            executeFast.step();
            executeFast.dispose();
            nativeByteBuffer.reuse();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    private void fixNotificationSettings() {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda7(this));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$fixNotificationSettings$8() {
        try {
            LongSparseArray longSparseArray = new LongSparseArray();
            Map<String, ?> all = MessagesController.getNotificationsSettings(this.currentAccount).getAll();
            for (Map.Entry next : all.entrySet()) {
                String str = (String) next.getKey();
                if (str.startsWith("notify2_")) {
                    Integer num = (Integer) next.getValue();
                    if (num.intValue() == 2 || num.intValue() == 3) {
                        String replace = str.replace("notify2_", "");
                        long j = 1;
                        if (num.intValue() != 2) {
                            Integer num2 = (Integer) all.get("notifyuntil_" + replace);
                            if (num2 != null) {
                                j = 1 | (((long) num2.intValue()) << 32);
                            }
                        }
                        longSparseArray.put(Long.parseLong(replace), Long.valueOf(j));
                    }
                }
            }
            try {
                this.database.beginTransaction();
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO dialog_settings VALUES(?, ?)");
                for (int i = 0; i < longSparseArray.size(); i++) {
                    executeFast.requery();
                    executeFast.bindLong(1, longSparseArray.keyAt(i));
                    executeFast.bindLong(2, ((Long) longSparseArray.valueAt(i)).longValue());
                    executeFast.step();
                }
                executeFast.dispose();
                this.database.commitTransaction();
            } catch (Exception e) {
                FileLog.e((Throwable) e);
            }
        } catch (Exception e2) {
            e2.printStackTrace();
        } catch (Throwable th) {
            FileLog.e(th);
        }
    }

    public long createPendingTask(NativeByteBuffer nativeByteBuffer) {
        if (nativeByteBuffer == null) {
            return 0;
        }
        long andAdd = this.lastTaskId.getAndAdd(1);
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda105(this, andAdd, nativeByteBuffer));
        return andAdd;
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$createPendingTask$9(long j, NativeByteBuffer nativeByteBuffer) {
        try {
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO pending_tasks VALUES(?, ?)");
            executeFast.bindLong(1, j);
            executeFast.bindByteBuffer(2, nativeByteBuffer);
            executeFast.step();
            executeFast.dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        } catch (Throwable th) {
            nativeByteBuffer.reuse();
            throw th;
        }
        nativeByteBuffer.reuse();
    }

    public void removePendingTask(long j) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda63(this, j));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$removePendingTask$10(long j) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM pending_tasks WHERE id = " + j).stepThis().dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    private void loadPendingTasks() {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda10(this));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$30() {
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT id, data FROM pending_tasks WHERE 1", new Object[0]);
            while (queryFinalized.next()) {
                long longValue = queryFinalized.longValue(0);
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(1);
                if (byteBufferValue != null) {
                    int readInt32 = byteBufferValue.readInt32(false);
                    if (readInt32 != 100) {
                        switch (readInt32) {
                            case 0:
                                TLRPC$Chat TLdeserialize = TLRPC$Chat.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                if (TLdeserialize != null) {
                                    Utilities.stageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda162(this, TLdeserialize, longValue));
                                    break;
                                }
                                break;
                            case 1:
                                Utilities.stageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda72(this, (long) byteBufferValue.readInt32(false), byteBufferValue.readInt32(false), longValue));
                                break;
                            case 2:
                            case 5:
                            case 8:
                            case 10:
                            case 14:
                                TLRPC$TL_dialog tLRPC$TL_dialog = new TLRPC$TL_dialog();
                                tLRPC$TL_dialog.id = byteBufferValue.readInt64(false);
                                tLRPC$TL_dialog.top_message = byteBufferValue.readInt32(false);
                                tLRPC$TL_dialog.read_inbox_max_id = byteBufferValue.readInt32(false);
                                tLRPC$TL_dialog.read_outbox_max_id = byteBufferValue.readInt32(false);
                                tLRPC$TL_dialog.unread_count = byteBufferValue.readInt32(false);
                                tLRPC$TL_dialog.last_message_date = byteBufferValue.readInt32(false);
                                tLRPC$TL_dialog.pts = byteBufferValue.readInt32(false);
                                tLRPC$TL_dialog.flags = byteBufferValue.readInt32(false);
                                if (readInt32 >= 5) {
                                    tLRPC$TL_dialog.pinned = byteBufferValue.readBool(false);
                                    tLRPC$TL_dialog.pinnedNum = byteBufferValue.readInt32(false);
                                }
                                if (readInt32 >= 8) {
                                    tLRPC$TL_dialog.unread_mentions_count = byteBufferValue.readInt32(false);
                                }
                                if (readInt32 >= 10) {
                                    tLRPC$TL_dialog.unread_mark = byteBufferValue.readBool(false);
                                }
                                if (readInt32 >= 14) {
                                    tLRPC$TL_dialog.folder_id = byteBufferValue.readInt32(false);
                                }
                                AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda167(this, tLRPC$TL_dialog, TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false), longValue));
                                break;
                            case 3:
                                getSendMessagesHelper().sendGame(TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false), (TLRPC$TL_inputMediaGame) TLRPC$InputMedia.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false), byteBufferValue.readInt64(false), longValue);
                                break;
                            case 4:
                                AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda112(this, byteBufferValue.readInt64(false), byteBufferValue.readBool(false), TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false), longValue));
                                break;
                            case 6:
                                Utilities.stageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda74(this, (long) byteBufferValue.readInt32(false), byteBufferValue.readInt32(false), longValue, TLRPC$InputChannel.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false)));
                                break;
                            case 7:
                                long readInt322 = (long) byteBufferValue.readInt32(false);
                                int readInt323 = byteBufferValue.readInt32(false);
                                TLObject TLdeserialize2 = TLRPC$TL_messages_deleteMessages.TLdeserialize(byteBufferValue, readInt323, false);
                                TLObject TLdeserialize3 = TLdeserialize2 == null ? TLRPC$TL_channels_deleteMessages.TLdeserialize(byteBufferValue, readInt323, false) : TLdeserialize2;
                                if (TLdeserialize3 != null) {
                                    AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda91(this, readInt322, longValue, TLdeserialize3));
                                    break;
                                } else {
                                    removePendingTask(longValue);
                                    break;
                                }
                            case 9:
                                AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda106(this, byteBufferValue.readInt64(false), TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false), longValue));
                                break;
                            case 11:
                                int readInt324 = byteBufferValue.readInt32(false);
                                long readInt325 = (long) byteBufferValue.readInt32(false);
                                AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda76(this, readInt325, readInt324, readInt325 != 0 ? TLRPC$InputChannel.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false) : null, byteBufferValue.readInt32(false), longValue));
                                break;
                            case 12:
                            case 19:
                            case 20:
                                removePendingTask(longValue);
                                break;
                            case 13:
                                AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda111(this, byteBufferValue.readInt64(false), byteBufferValue.readBool(false), byteBufferValue.readInt32(false), byteBufferValue.readInt32(false), byteBufferValue.readBool(false), TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false), longValue));
                                break;
                            case 15:
                                Utilities.stageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda174(this, TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false), longValue));
                                break;
                            case 16:
                                int readInt326 = byteBufferValue.readInt32(false);
                                int readInt327 = byteBufferValue.readInt32(false);
                                ArrayList arrayList = new ArrayList();
                                for (int i = 0; i < readInt327; i++) {
                                    arrayList.add(TLRPC$InputDialogPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false));
                                }
                                AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda59(this, readInt326, arrayList, longValue));
                                break;
                            case 17:
                                int readInt328 = byteBufferValue.readInt32(false);
                                int readInt329 = byteBufferValue.readInt32(false);
                                ArrayList arrayList2 = new ArrayList();
                                for (int i2 = 0; i2 < readInt329; i2++) {
                                    arrayList2.add(TLRPC$TL_inputFolderPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false));
                                }
                                AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda58(this, readInt328, arrayList2, longValue));
                                break;
                            case 18:
                                long readInt64 = byteBufferValue.readInt64(false);
                                byteBufferValue.readInt32(false);
                                TLRPC$TL_messages_deleteScheduledMessages TLdeserialize4 = TLRPC$TL_messages_deleteScheduledMessages.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                if (TLdeserialize4 != null) {
                                    AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda89(this, readInt64, longValue, TLdeserialize4));
                                    break;
                                } else {
                                    removePendingTask(longValue);
                                    break;
                                }
                            case 21:
                                Theme.OverrideWallpaperInfo overrideWallpaperInfo = new Theme.OverrideWallpaperInfo();
                                byteBufferValue.readInt64(false);
                                overrideWallpaperInfo.isBlurred = byteBufferValue.readBool(false);
                                overrideWallpaperInfo.isMotion = byteBufferValue.readBool(false);
                                overrideWallpaperInfo.color = byteBufferValue.readInt32(false);
                                overrideWallpaperInfo.gradientColor1 = byteBufferValue.readInt32(false);
                                overrideWallpaperInfo.rotation = byteBufferValue.readInt32(false);
                                overrideWallpaperInfo.intensity = (float) byteBufferValue.readDouble(false);
                                boolean readBool = byteBufferValue.readBool(false);
                                overrideWallpaperInfo.slug = byteBufferValue.readString(false);
                                overrideWallpaperInfo.originalFileName = byteBufferValue.readString(false);
                                AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda186(this, overrideWallpaperInfo, readBool, longValue));
                                break;
                            case 22:
                                AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda175(this, TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false), longValue));
                                break;
                            case 23:
                                long readInt642 = byteBufferValue.readInt64(false);
                                AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda77(this, readInt642, byteBufferValue.readInt32(false), (DialogObject.isEncryptedDialog(readInt642) || !DialogObject.isChatDialog(readInt642) || !byteBufferValue.hasRemaining()) ? null : TLRPC$InputChannel.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false), byteBufferValue.readInt32(false), longValue));
                                break;
                            case 24:
                                long readInt643 = byteBufferValue.readInt64(false);
                                int readInt3210 = byteBufferValue.readInt32(false);
                                TLObject TLdeserialize5 = TLRPC$TL_messages_deleteMessages.TLdeserialize(byteBufferValue, readInt3210, false);
                                TLObject TLdeserialize6 = TLdeserialize5 == null ? TLRPC$TL_channels_deleteMessages.TLdeserialize(byteBufferValue, readInt3210, false) : TLdeserialize5;
                                if (TLdeserialize6 != null) {
                                    AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda90(this, readInt643, longValue, TLdeserialize6));
                                    break;
                                } else {
                                    removePendingTask(longValue);
                                    break;
                                }
                            case 25:
                                Utilities.stageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda75(this, byteBufferValue.readInt64(false), byteBufferValue.readInt32(false), longValue, TLRPC$InputChannel.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false)));
                                break;
                        }
                    } else {
                        AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda61(this, byteBufferValue.readInt32(false), byteBufferValue.readBool(false), longValue));
                    }
                    byteBufferValue.reuse();
                }
            }
            queryFinalized.dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$11(TLRPC$Chat tLRPC$Chat, long j) {
        getMessagesController().loadUnknownChannel(tLRPC$Chat, j);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$12(long j, int i, long j2) {
        getMessagesController().getChannelDifference(j, i, j2, (TLRPC$InputChannel) null);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$13(TLRPC$Dialog tLRPC$Dialog, TLRPC$InputPeer tLRPC$InputPeer, long j) {
        getMessagesController().checkLastDialogMessage(tLRPC$Dialog, tLRPC$InputPeer, j);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$14(long j, boolean z, TLRPC$InputPeer tLRPC$InputPeer, long j2) {
        getMessagesController().pinDialog(j, z, tLRPC$InputPeer, j2);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$15(long j, int i, long j2, TLRPC$InputChannel tLRPC$InputChannel) {
        getMessagesController().getChannelDifference(j, i, j2, tLRPC$InputChannel);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$16(long j, int i, long j2, TLRPC$InputChannel tLRPC$InputChannel) {
        getMessagesController().getChannelDifference(j, i, j2, tLRPC$InputChannel);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$17(long j, long j2, TLObject tLObject) {
        getMessagesController().deleteMessages((ArrayList<Integer>) null, (ArrayList<Long>) null, (TLRPC$EncryptedChat) null, -j, true, false, false, j2, tLObject);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$18(long j, long j2, TLObject tLObject) {
        getMessagesController().deleteMessages((ArrayList<Integer>) null, (ArrayList<Long>) null, (TLRPC$EncryptedChat) null, j, true, false, false, j2, tLObject);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$19(long j, TLRPC$InputPeer tLRPC$InputPeer, long j2) {
        getMessagesController().markDialogAsUnread(j, tLRPC$InputPeer, j2);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$20(long j, int i, TLRPC$InputChannel tLRPC$InputChannel, int i2, long j2) {
        getMessagesController().markMessageAsRead2(-j, i, tLRPC$InputChannel, i2, j2);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$21(long j, int i, TLRPC$InputChannel tLRPC$InputChannel, int i2, long j2) {
        getMessagesController().markMessageAsRead2(j, i, tLRPC$InputChannel, i2, j2);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$22(Theme.OverrideWallpaperInfo overrideWallpaperInfo, boolean z, long j) {
        getMessagesController().saveWallpaperToServer((File) null, overrideWallpaperInfo, z, j);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$23(long j, boolean z, int i, int i2, boolean z2, TLRPC$InputPeer tLRPC$InputPeer, long j2) {
        getMessagesController().deleteDialog(j, z ? 1 : 0, i, i2, z2, tLRPC$InputPeer, j2);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$24(TLRPC$InputPeer tLRPC$InputPeer, long j) {
        getMessagesController().loadUnknownDialog(tLRPC$InputPeer, j);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$25(int i, ArrayList arrayList, long j) {
        getMessagesController().reorderPinnedDialogs(i, arrayList, j);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$26(int i, ArrayList arrayList, long j) {
        getMessagesController().addDialogToFolder((ArrayList<Long>) null, i, -1, arrayList, j);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$27(long j, long j2, TLObject tLObject) {
        getMessagesController().deleteMessages((ArrayList<Integer>) null, (ArrayList<Long>) null, (TLRPC$EncryptedChat) null, j, true, true, false, j2, tLObject);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$28(TLRPC$InputPeer tLRPC$InputPeer, long j) {
        getMessagesController().reloadMentionsCountForChannel(tLRPC$InputPeer, j);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadPendingTasks$29(int i, boolean z, long j) {
        getSecretChatHelper().declineSecretChat(i, z, j);
    }

    public void saveChannelPts(long j, int i) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda43(this, i, j));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$saveChannelPts$31(int i, long j) {
        try {
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE dialogs SET pts = ? WHERE did = ?");
            executeFast.bindInteger(1, i);
            executeFast.bindLong(2, -j);
            executeFast.step();
            executeFast.dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: saveDiffParamsInternal */
    public void lambda$saveDiffParams$32(int i, int i2, int i3, int i4) {
        try {
            if (this.lastSavedSeq != i || this.lastSavedPts != i2 || this.lastSavedDate != i3 || this.lastQtsValue != i4) {
                SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE params SET seq = ?, pts = ?, date = ?, qts = ? WHERE id = 1");
                executeFast.bindInteger(1, i);
                executeFast.bindInteger(2, i2);
                executeFast.bindInteger(3, i3);
                executeFast.bindInteger(4, i4);
                executeFast.step();
                executeFast.dispose();
                this.lastSavedSeq = i;
                this.lastSavedPts = i2;
                this.lastSavedDate = i3;
                this.lastSavedQts = i4;
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void saveDiffParams(int i, int i2, int i3, int i4) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda37(this, i, i2, i3, i4));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMutedDialogsFiltersCounters$33() {
        resetAllUnreadCounters(true);
    }

    public void updateMutedDialogsFiltersCounters() {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda26(this));
    }

    public void setDialogFlags(long j, long j2) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda84(this, j, j2));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$setDialogFlags$34(long j, long j2) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT flags FROM dialog_settings WHERE did = " + j, new Object[0]);
            int intValue = queryFinalized.next() ? queryFinalized.intValue(0) : 0;
            queryFinalized.dispose();
            if (j2 != ((long) intValue)) {
                this.database.executeFast(String.format(Locale.US, "REPLACE INTO dialog_settings VALUES(%d, %d)", new Object[]{Long.valueOf(j), Long.valueOf(j2)})).stepThis().dispose();
                resetAllUnreadCounters(true);
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void putPushMessage(MessageObject messageObject) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda153(this, messageObject));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$putPushMessage$35(MessageObject messageObject) {
        try {
            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(messageObject.messageOwner.getObjectSize());
            messageObject.messageOwner.serializeToStream(nativeByteBuffer);
            int i = 0;
            if (messageObject.localType == 2) {
                i = 1;
            }
            if (messageObject.localChannel) {
                i |= 2;
            }
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO unread_push_messages VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)");
            executeFast.requery();
            executeFast.bindLong(1, messageObject.getDialogId());
            executeFast.bindInteger(2, messageObject.getId());
            executeFast.bindLong(3, messageObject.messageOwner.random_id);
            executeFast.bindInteger(4, messageObject.messageOwner.date);
            executeFast.bindByteBuffer(5, nativeByteBuffer);
            CharSequence charSequence = messageObject.messageText;
            if (charSequence == null) {
                executeFast.bindNull(6);
            } else {
                executeFast.bindString(6, charSequence.toString());
            }
            String str = messageObject.localName;
            if (str == null) {
                executeFast.bindNull(7);
            } else {
                executeFast.bindString(7, str);
            }
            String str2 = messageObject.localUserName;
            if (str2 == null) {
                executeFast.bindNull(8);
            } else {
                executeFast.bindString(8, str2);
            }
            executeFast.bindInteger(9, i);
            executeFast.step();
            nativeByteBuffer.reuse();
            executeFast.dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void clearLocalDatabase() {
        getInstance(this.currentAccount).getStorageQueue().postRunnable(new MessagesStorage$$ExternalSyntheticLambda6(this));
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Removed duplicated region for block: B:49:0x0204 A[Catch:{ Exception -> 0x0255, all -> 0x0253 }] */
    /* JADX WARNING: Removed duplicated region for block: B:50:0x020e A[Catch:{ Exception -> 0x0255, all -> 0x0253 }] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$clearLocalDatabase$37() {
        /*
            r19 = this;
            r1 = r19
            java.lang.String r2 = " AND mid != "
            int r0 = r1.currentAccount     // Catch:{ Exception -> 0x0255 }
            org.telegram.messenger.MessagesStorage r0 = getInstance(r0)     // Catch:{ Exception -> 0x0255 }
            org.telegram.SQLite.SQLiteDatabase r3 = r0.getDatabase()     // Catch:{ Exception -> 0x0255 }
            java.util.ArrayList r4 = new java.util.ArrayList     // Catch:{ Exception -> 0x0255 }
            r4.<init>()     // Catch:{ Exception -> 0x0255 }
            java.lang.String r0 = "DELETE FROM reaction_mentions"
            org.telegram.SQLite.SQLitePreparedStatement r0 = r3.executeFast(r0)     // Catch:{ Exception -> 0x0255 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0255 }
            r0.dispose()     // Catch:{ Exception -> 0x0255 }
            java.lang.String r0 = "DELETE FROM downloading_documents"
            org.telegram.SQLite.SQLitePreparedStatement r0 = r3.executeFast(r0)     // Catch:{ Exception -> 0x0255 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0255 }
            r0.dispose()     // Catch:{ Exception -> 0x0255 }
            java.lang.String r0 = "SELECT did FROM dialogs WHERE 1"
            r5 = 0
            java.lang.Object[] r6 = new java.lang.Object[r5]     // Catch:{ Exception -> 0x0255 }
            org.telegram.SQLite.SQLiteCursor r0 = r3.queryFinalized(r0, r6)     // Catch:{ Exception -> 0x0255 }
        L_0x0036:
            boolean r6 = r0.next()     // Catch:{ Exception -> 0x0255 }
            if (r6 == 0) goto L_0x004e
            long r6 = r0.longValue(r5)     // Catch:{ Exception -> 0x0255 }
            boolean r8 = org.telegram.messenger.DialogObject.isEncryptedDialog(r6)     // Catch:{ Exception -> 0x0255 }
            if (r8 != 0) goto L_0x0036
            java.lang.Long r6 = java.lang.Long.valueOf(r6)     // Catch:{ Exception -> 0x0255 }
            r4.add(r6)     // Catch:{ Exception -> 0x0255 }
            goto L_0x0036
        L_0x004e:
            r0.dispose()     // Catch:{ Exception -> 0x0255 }
            java.lang.String r0 = "REPLACE INTO messages_holes VALUES(?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r6 = r3.executeFast(r0)     // Catch:{ Exception -> 0x0255 }
            java.lang.String r0 = "REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r7 = r3.executeFast(r0)     // Catch:{ Exception -> 0x0255 }
            r3.beginTransaction()     // Catch:{ Exception -> 0x0255 }
            r8 = 0
        L_0x0061:
            int r0 = r4.size()     // Catch:{ Exception -> 0x0255 }
            if (r8 >= r0) goto L_0x021d
            java.lang.Object r0 = r4.get(r8)     // Catch:{ Exception -> 0x0255 }
            r9 = r0
            java.lang.Long r9 = (java.lang.Long) r9     // Catch:{ Exception -> 0x0255 }
            java.lang.StringBuilder r0 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0255 }
            r0.<init>()     // Catch:{ Exception -> 0x0255 }
            java.lang.String r10 = "SELECT COUNT(mid) FROM messages_v2 WHERE uid = "
            r0.append(r10)     // Catch:{ Exception -> 0x0255 }
            r0.append(r9)     // Catch:{ Exception -> 0x0255 }
            java.lang.String r0 = r0.toString()     // Catch:{ Exception -> 0x0255 }
            java.lang.Object[] r10 = new java.lang.Object[r5]     // Catch:{ Exception -> 0x0255 }
            org.telegram.SQLite.SQLiteCursor r0 = r3.queryFinalized(r0, r10)     // Catch:{ Exception -> 0x0255 }
            boolean r10 = r0.next()     // Catch:{ Exception -> 0x0255 }
            if (r10 == 0) goto L_0x0090
            int r10 = r0.intValue(r5)     // Catch:{ Exception -> 0x0255 }
            goto L_0x0091
        L_0x0090:
            r10 = 0
        L_0x0091:
            r0.dispose()     // Catch:{ Exception -> 0x0255 }
            r0 = 2
            if (r10 > r0) goto L_0x009b
            r16 = r4
            goto L_0x0216
        L_0x009b:
            java.lang.StringBuilder r0 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0255 }
            r0.<init>()     // Catch:{ Exception -> 0x0255 }
            java.lang.String r10 = "SELECT last_mid_i, last_mid FROM dialogs WHERE did = "
            r0.append(r10)     // Catch:{ Exception -> 0x0255 }
            r0.append(r9)     // Catch:{ Exception -> 0x0255 }
            java.lang.String r0 = r0.toString()     // Catch:{ Exception -> 0x0255 }
            java.lang.Object[] r10 = new java.lang.Object[r5]     // Catch:{ Exception -> 0x0255 }
            org.telegram.SQLite.SQLiteCursor r10 = r3.queryFinalized(r0, r10)     // Catch:{ Exception -> 0x0255 }
            boolean r0 = r10.next()     // Catch:{ Exception -> 0x0255 }
            if (r0 == 0) goto L_0x0211
            long r11 = r10.longValue(r5)     // Catch:{ Exception -> 0x0255 }
            r0 = 1
            long r13 = r10.longValue(r0)     // Catch:{ Exception -> 0x0255 }
            java.lang.StringBuilder r0 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0255 }
            r0.<init>()     // Catch:{ Exception -> 0x0255 }
            java.lang.String r15 = "SELECT data FROM messages_v2 WHERE uid = "
            r0.append(r15)     // Catch:{ Exception -> 0x0255 }
            r0.append(r9)     // Catch:{ Exception -> 0x0255 }
            java.lang.String r15 = " AND mid IN ("
            r0.append(r15)     // Catch:{ Exception -> 0x0255 }
            r0.append(r11)     // Catch:{ Exception -> 0x0255 }
            java.lang.String r15 = ","
            r0.append(r15)     // Catch:{ Exception -> 0x0255 }
            r0.append(r13)     // Catch:{ Exception -> 0x0255 }
            java.lang.String r15 = ")"
            r0.append(r15)     // Catch:{ Exception -> 0x0255 }
            java.lang.String r0 = r0.toString()     // Catch:{ Exception -> 0x0255 }
            java.lang.Object[] r15 = new java.lang.Object[r5]     // Catch:{ Exception -> 0x0255 }
            org.telegram.SQLite.SQLiteCursor r15 = r3.queryFinalized(r0, r15)     // Catch:{ Exception -> 0x0255 }
            r17 = -1
        L_0x00ef:
            boolean r0 = r15.next()     // Catch:{ Exception -> 0x0132 }
            if (r0 == 0) goto L_0x012d
            r5 = 0
            org.telegram.tgnet.NativeByteBuffer r0 = r15.byteBufferValue(r5)     // Catch:{ Exception -> 0x0132 }
            if (r0 == 0) goto L_0x0124
            r16 = r4
            int r4 = r0.readInt32(r5)     // Catch:{ Exception -> 0x0122 }
            org.telegram.tgnet.TLRPC$Message r4 = org.telegram.tgnet.TLRPC$Message.TLdeserialize(r0, r4, r5)     // Catch:{ Exception -> 0x0122 }
            if (r4 == 0) goto L_0x011a
            int r5 = r4.id     // Catch:{ Exception -> 0x0122 }
            r17 = r5
            int r5 = r1.currentAccount     // Catch:{ Exception -> 0x0122 }
            org.telegram.messenger.UserConfig r5 = org.telegram.messenger.UserConfig.getInstance(r5)     // Catch:{ Exception -> 0x0122 }
            r18 = r6
            long r5 = r5.clientUserId     // Catch:{ Exception -> 0x0120 }
            r4.readAttachPath(r0, r5)     // Catch:{ Exception -> 0x0120 }
            goto L_0x011c
        L_0x011a:
            r18 = r6
        L_0x011c:
            r0.reuse()     // Catch:{ Exception -> 0x0120 }
            goto L_0x0128
        L_0x0120:
            r0 = move-exception
            goto L_0x0137
        L_0x0122:
            r0 = move-exception
            goto L_0x0135
        L_0x0124:
            r16 = r4
            r18 = r6
        L_0x0128:
            r4 = r16
            r6 = r18
            goto L_0x00ef
        L_0x012d:
            r16 = r4
            r18 = r6
            goto L_0x013a
        L_0x0132:
            r0 = move-exception
            r16 = r4
        L_0x0135:
            r18 = r6
        L_0x0137:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ Exception -> 0x0255 }
        L_0x013a:
            r0 = r17
            r15.dispose()     // Catch:{ Exception -> 0x0255 }
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0255 }
            r4.<init>()     // Catch:{ Exception -> 0x0255 }
            java.lang.String r5 = "DELETE FROM messages_v2 WHERE uid = "
            r4.append(r5)     // Catch:{ Exception -> 0x0255 }
            r4.append(r9)     // Catch:{ Exception -> 0x0255 }
            r4.append(r2)     // Catch:{ Exception -> 0x0255 }
            r4.append(r11)     // Catch:{ Exception -> 0x0255 }
            r4.append(r2)     // Catch:{ Exception -> 0x0255 }
            r4.append(r13)     // Catch:{ Exception -> 0x0255 }
            java.lang.String r4 = r4.toString()     // Catch:{ Exception -> 0x0255 }
            org.telegram.SQLite.SQLitePreparedStatement r4 = r3.executeFast(r4)     // Catch:{ Exception -> 0x0255 }
            org.telegram.SQLite.SQLitePreparedStatement r4 = r4.stepThis()     // Catch:{ Exception -> 0x0255 }
            r4.dispose()     // Catch:{ Exception -> 0x0255 }
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0255 }
            r4.<init>()     // Catch:{ Exception -> 0x0255 }
            java.lang.String r5 = "DELETE FROM messages_holes WHERE uid = "
            r4.append(r5)     // Catch:{ Exception -> 0x0255 }
            r4.append(r9)     // Catch:{ Exception -> 0x0255 }
            java.lang.String r4 = r4.toString()     // Catch:{ Exception -> 0x0255 }
            org.telegram.SQLite.SQLitePreparedStatement r4 = r3.executeFast(r4)     // Catch:{ Exception -> 0x0255 }
            org.telegram.SQLite.SQLitePreparedStatement r4 = r4.stepThis()     // Catch:{ Exception -> 0x0255 }
            r4.dispose()     // Catch:{ Exception -> 0x0255 }
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0255 }
            r4.<init>()     // Catch:{ Exception -> 0x0255 }
            java.lang.String r5 = "DELETE FROM bot_keyboard WHERE uid = "
            r4.append(r5)     // Catch:{ Exception -> 0x0255 }
            r4.append(r9)     // Catch:{ Exception -> 0x0255 }
            java.lang.String r4 = r4.toString()     // Catch:{ Exception -> 0x0255 }
            org.telegram.SQLite.SQLitePreparedStatement r4 = r3.executeFast(r4)     // Catch:{ Exception -> 0x0255 }
            org.telegram.SQLite.SQLitePreparedStatement r4 = r4.stepThis()     // Catch:{ Exception -> 0x0255 }
            r4.dispose()     // Catch:{ Exception -> 0x0255 }
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0255 }
            r4.<init>()     // Catch:{ Exception -> 0x0255 }
            java.lang.String r5 = "DELETE FROM media_counts_v2 WHERE uid = "
            r4.append(r5)     // Catch:{ Exception -> 0x0255 }
            r4.append(r9)     // Catch:{ Exception -> 0x0255 }
            java.lang.String r4 = r4.toString()     // Catch:{ Exception -> 0x0255 }
            org.telegram.SQLite.SQLitePreparedStatement r4 = r3.executeFast(r4)     // Catch:{ Exception -> 0x0255 }
            org.telegram.SQLite.SQLitePreparedStatement r4 = r4.stepThis()     // Catch:{ Exception -> 0x0255 }
            r4.dispose()     // Catch:{ Exception -> 0x0255 }
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0255 }
            r4.<init>()     // Catch:{ Exception -> 0x0255 }
            java.lang.String r5 = "DELETE FROM media_v4 WHERE uid = "
            r4.append(r5)     // Catch:{ Exception -> 0x0255 }
            r4.append(r9)     // Catch:{ Exception -> 0x0255 }
            java.lang.String r4 = r4.toString()     // Catch:{ Exception -> 0x0255 }
            org.telegram.SQLite.SQLitePreparedStatement r4 = r3.executeFast(r4)     // Catch:{ Exception -> 0x0255 }
            org.telegram.SQLite.SQLitePreparedStatement r4 = r4.stepThis()     // Catch:{ Exception -> 0x0255 }
            r4.dispose()     // Catch:{ Exception -> 0x0255 }
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0255 }
            r4.<init>()     // Catch:{ Exception -> 0x0255 }
            java.lang.String r5 = "DELETE FROM media_holes_v2 WHERE uid = "
            r4.append(r5)     // Catch:{ Exception -> 0x0255 }
            r4.append(r9)     // Catch:{ Exception -> 0x0255 }
            java.lang.String r4 = r4.toString()     // Catch:{ Exception -> 0x0255 }
            org.telegram.SQLite.SQLitePreparedStatement r4 = r3.executeFast(r4)     // Catch:{ Exception -> 0x0255 }
            org.telegram.SQLite.SQLitePreparedStatement r4 = r4.stepThis()     // Catch:{ Exception -> 0x0255 }
            r4.dispose()     // Catch:{ Exception -> 0x0255 }
            int r4 = r1.currentAccount     // Catch:{ Exception -> 0x0255 }
            org.telegram.messenger.MediaDataController r4 = org.telegram.messenger.MediaDataController.getInstance(r4)     // Catch:{ Exception -> 0x0255 }
            long r5 = r9.longValue()     // Catch:{ Exception -> 0x0255 }
            r11 = 0
            r4.clearBotKeyboard(r5, r11)     // Catch:{ Exception -> 0x0255 }
            r4 = -1
            if (r0 == r4) goto L_0x020e
            long r4 = r9.longValue()     // Catch:{ Exception -> 0x0255 }
            r6 = r18
            createFirstHoles(r4, r6, r7, r0)     // Catch:{ Exception -> 0x0255 }
            goto L_0x0213
        L_0x020e:
            r6 = r18
            goto L_0x0213
        L_0x0211:
            r16 = r4
        L_0x0213:
            r10.dispose()     // Catch:{ Exception -> 0x0255 }
        L_0x0216:
            int r8 = r8 + 1
            r4 = r16
            r5 = 0
            goto L_0x0061
        L_0x021d:
            r6.dispose()     // Catch:{ Exception -> 0x0255 }
            r7.dispose()     // Catch:{ Exception -> 0x0255 }
            r3.commitTransaction()     // Catch:{ Exception -> 0x0255 }
            java.lang.String r0 = "PRAGMA journal_size_limit = 0"
            org.telegram.SQLite.SQLitePreparedStatement r0 = r3.executeFast(r0)     // Catch:{ Exception -> 0x0255 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0255 }
            r0.dispose()     // Catch:{ Exception -> 0x0255 }
            java.lang.String r0 = "VACUUM"
            org.telegram.SQLite.SQLitePreparedStatement r0 = r3.executeFast(r0)     // Catch:{ Exception -> 0x0255 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0255 }
            r0.dispose()     // Catch:{ Exception -> 0x0255 }
            java.lang.String r0 = "PRAGMA journal_size_limit = -1"
            org.telegram.SQLite.SQLitePreparedStatement r0 = r3.executeFast(r0)     // Catch:{ Exception -> 0x0255 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0255 }
            r0.dispose()     // Catch:{ Exception -> 0x0255 }
            org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda12 r0 = new org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda12
            r0.<init>(r1)
            goto L_0x025e
        L_0x0253:
            r0 = move-exception
            goto L_0x0262
        L_0x0255:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ all -> 0x0253 }
            org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda12 r0 = new org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda12
            r0.<init>(r1)
        L_0x025e:
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r0)
            return
        L_0x0262:
            org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda12 r2 = new org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda12
            r2.<init>(r1)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r2)
            goto L_0x026c
        L_0x026b:
            throw r0
        L_0x026c:
            goto L_0x026b
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$clearLocalDatabase$37():void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$clearLocalDatabase$36() {
        NotificationCenter.getInstance(this.currentAccount).postNotificationName(NotificationCenter.didClearDatabase, new Object[0]);
    }

    public void startDownloadFile(TLRPC$Document tLRPC$Document, MessageObject messageObject) {
        AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda152(this, messageObject));
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda155(this, messageObject));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$startDownloadFile$38(MessageObject messageObject) {
        boolean z;
        int i = 0;
        while (true) {
            if (i >= this.recentDownloadingFiles.size()) {
                break;
            } else if (this.recentDownloadingFiles.get(i).getDocument().id == messageObject.getDocument().id) {
                this.recentDownloadingFiles.remove(i);
                break;
            } else {
                i++;
            }
        }
        int i2 = 0;
        while (true) {
            if (i2 >= this.downloadingFiles.size()) {
                z = false;
                break;
            } else if (this.downloadingFiles.get(i2).getDocument().id == messageObject.getDocument().id) {
                z = true;
                break;
            } else {
                i2++;
            }
        }
        if (!z) {
            this.downloadingFiles.add(messageObject);
            this.hasUnviewedDownloads = true;
        }
        getNotificationCenter().postNotificationName(NotificationCenter.onDownloadingFilesChanged, new Object[0]);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$startDownloadFile$39(MessageObject messageObject) {
        try {
            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(messageObject.messageOwner.getObjectSize());
            messageObject.messageOwner.serializeToStream(nativeByteBuffer);
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO downloading_documents VALUES(?, ?, ?, ?, ?)");
            executeFast.bindByteBuffer(1, nativeByteBuffer);
            executeFast.bindInteger(2, messageObject.getDocument().dc_id);
            executeFast.bindLong(3, messageObject.getDocument().id);
            executeFast.bindLong(4, System.currentTimeMillis());
            executeFast.bindInteger(4, 0);
            executeFast.step();
            executeFast.dispose();
            nativeByteBuffer.reuse();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void onDownloadComplete(MessageObject messageObject) {
        AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda151(this, messageObject));
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda154(this, messageObject));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$onDownloadComplete$40(MessageObject messageObject) {
        boolean z;
        boolean z2;
        int i = 0;
        while (true) {
            z = true;
            if (i >= this.downloadingFiles.size()) {
                z2 = false;
                break;
            } else if (this.downloadingFiles.get(i).getDocument().id == messageObject.getDocument().id) {
                this.downloadingFiles.remove(i);
                z2 = true;
                break;
            } else {
                i++;
            }
        }
        if (z2) {
            int i2 = 0;
            while (true) {
                if (i2 >= this.recentDownloadingFiles.size()) {
                    z = false;
                    break;
                } else if (this.recentDownloadingFiles.get(i2).getDocument().id == messageObject.getDocument().id) {
                    break;
                } else {
                    i2++;
                }
            }
            if (!z) {
                this.recentDownloadingFiles.add(0, messageObject);
            }
            getNotificationCenter().postNotificationName(NotificationCenter.onDownloadingFilesChanged, new Object[0]);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$onDownloadComplete$41(MessageObject messageObject) {
        try {
            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(messageObject.messageOwner.getObjectSize());
            messageObject.messageOwner.serializeToStream(nativeByteBuffer);
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE downloading_documents SET state = 1, date = ? WHERE hash = ? AND id = ?");
            executeFast.bindLong(1, System.currentTimeMillis());
            executeFast.bindInteger(2, messageObject.getDocument().dc_id);
            executeFast.bindLong(3, messageObject.getDocument().id);
            executeFast.step();
            executeFast.dispose();
            nativeByteBuffer.reuse();
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT COUNT(*) FROM downloading_documents WHERE state = 1", new Object[0]);
            int intValue = queryFinalized.next() ? queryFinalized.intValue(0) : 0;
            queryFinalized.dispose();
            if (intValue > 100) {
                SQLiteDatabase sQLiteDatabase = this.database;
                SQLiteCursor queryFinalized2 = sQLiteDatabase.queryFinalized("SELECT hash, id FROM downloading_documents WHERE state = 1 ORDER BY date ASC LIMIT " + (100 - intValue), new Object[0]);
                ArrayList arrayList = new ArrayList();
                while (queryFinalized2.next()) {
                    DownloadingDocumentEntry downloadingDocumentEntry = new DownloadingDocumentEntry();
                    downloadingDocumentEntry.hash = queryFinalized2.intValue(0);
                    downloadingDocumentEntry.id = queryFinalized2.longValue(1);
                    arrayList.add(downloadingDocumentEntry);
                }
                queryFinalized2.dispose();
                SQLitePreparedStatement executeFast2 = this.database.executeFast("DELETE FROM downloading_documents WHERE hash = ? AND id = ?");
                for (int i = 0; i < arrayList.size(); i++) {
                    executeFast2.bindInteger(1, ((DownloadingDocumentEntry) arrayList.get(i)).hash);
                    executeFast2.bindLong(2, ((DownloadingDocumentEntry) arrayList.get(i)).id);
                    executeFast2.step();
                }
                executeFast2.dispose();
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    private class DownloadingDocumentEntry {
        int hash;
        long id;

        private DownloadingDocumentEntry() {
        }
    }

    public void loadDownloadingFiles() {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda19(this));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadDownloadingFiles$43() {
        ArrayList arrayList = new ArrayList();
        ArrayList arrayList2 = new ArrayList();
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT data, state FROM downloading_documents ORDER BY date DESC", new Object[0]);
            while (queryFinalized.next()) {
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                int intValue = queryFinalized.intValue(1);
                if (byteBufferValue != null) {
                    TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    if (TLdeserialize != null) {
                        TLdeserialize.readAttachPath(byteBufferValue, UserConfig.getInstance(this.currentAccount).clientUserId);
                        MessageObject messageObject = new MessageObject(this.currentAccount, TLdeserialize, false, true);
                        if (intValue == 0) {
                            arrayList.add(messageObject);
                        } else if (messageObject.mediaExists) {
                            arrayList2.add(messageObject);
                        }
                    }
                    byteBufferValue.reuse();
                }
            }
            queryFinalized.dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda143(this, arrayList, arrayList2));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadDownloadingFiles$42(ArrayList arrayList, ArrayList arrayList2) {
        this.downloadingFiles.clear();
        this.downloadingFiles.addAll(arrayList);
        this.recentDownloadingFiles.clear();
        this.recentDownloadingFiles.addAll(arrayList2);
    }

    public void clearRecentDownloadedFiles() {
        this.recentDownloadingFiles.clear();
        getNotificationCenter().postNotificationName(NotificationCenter.onDownloadingFilesChanged, new Object[0]);
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda25(this));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$clearRecentDownloadedFiles$44() {
        try {
            this.database.executeFast("DELETE FROM downloading_documents WHERE state = 1").stepThis().dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void deleteRecentFiles(ArrayList<MessageObject> arrayList) {
        for (int i = 0; i < arrayList.size(); i++) {
            int i2 = 0;
            while (true) {
                if (i2 >= this.recentDownloadingFiles.size()) {
                    break;
                } else if (arrayList.get(i).getId() == this.recentDownloadingFiles.get(i2).getId()) {
                    this.recentDownloadingFiles.remove(i2);
                    break;
                } else {
                    i2++;
                }
            }
            FileLoader.getInstance(this.currentAccount).cancelLoadFile(arrayList.get(i).getDocument(), true);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.onDownloadingFilesChanged, new Object[0]);
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda136(this, arrayList));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteRecentFiles$45(ArrayList arrayList) {
        try {
            SQLitePreparedStatement executeFast = this.database.executeFast("DELETE FROM downloading_documents WHERE hash = ? AND id = ?");
            for (int i = 0; i < arrayList.size(); i++) {
                executeFast.bindInteger(1, ((MessageObject) arrayList.get(i)).getDocument().dc_id);
                executeFast.bindLong(2, ((MessageObject) arrayList.get(i)).getDocument().id);
                executeFast.step();
                try {
                    FileLoader.getPathToMessage(((MessageObject) arrayList.get(i)).messageOwner).delete();
                } catch (Exception e) {
                    FileLog.e((Throwable) e);
                }
            }
            executeFast.dispose();
        } catch (Exception e2) {
            FileLog.e((Throwable) e2);
        }
    }

    private static class ReadDialog {
        public int date;
        public int lastMid;
        public int unreadCount;

        private ReadDialog() {
        }
    }

    public void readAllDialogs(int i) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda28(this, i));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$readAllDialogs$47(int i) {
        SQLiteCursor sQLiteCursor;
        try {
            ArrayList arrayList = new ArrayList();
            ArrayList arrayList2 = new ArrayList();
            ArrayList arrayList3 = new ArrayList();
            LongSparseArray longSparseArray = new LongSparseArray();
            if (i >= 0) {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT did, last_mid, unread_count, date FROM dialogs WHERE unread_count > 0 AND folder_id = %1$d", new Object[]{Integer.valueOf(i)}), new Object[0]);
            } else {
                sQLiteCursor = this.database.queryFinalized("SELECT did, last_mid, unread_count, date FROM dialogs WHERE unread_count > 0", new Object[0]);
            }
            while (sQLiteCursor.next()) {
                long longValue = sQLiteCursor.longValue(0);
                if (!DialogObject.isFolderDialogId(longValue)) {
                    ReadDialog readDialog = new ReadDialog();
                    readDialog.lastMid = sQLiteCursor.intValue(1);
                    readDialog.unreadCount = sQLiteCursor.intValue(2);
                    readDialog.date = sQLiteCursor.intValue(3);
                    longSparseArray.put(longValue, readDialog);
                    if (DialogObject.isEncryptedDialog(longValue)) {
                        int encryptedChatId = DialogObject.getEncryptedChatId(longValue);
                        if (!arrayList3.contains(Integer.valueOf(encryptedChatId))) {
                            arrayList3.add(Integer.valueOf(encryptedChatId));
                        }
                    } else if (DialogObject.isChatDialog(longValue)) {
                        long j = -longValue;
                        if (!arrayList2.contains(Long.valueOf(j))) {
                            arrayList2.add(Long.valueOf(j));
                        }
                    } else if (!arrayList.contains(Long.valueOf(longValue))) {
                        arrayList.add(Long.valueOf(longValue));
                    }
                }
            }
            sQLiteCursor.dispose();
            ArrayList arrayList4 = new ArrayList();
            ArrayList arrayList5 = new ArrayList();
            ArrayList arrayList6 = new ArrayList();
            if (!arrayList3.isEmpty()) {
                getEncryptedChatsInternal(TextUtils.join(",", arrayList3), arrayList6, arrayList);
            }
            if (!arrayList.isEmpty()) {
                getUsersInternal(TextUtils.join(",", arrayList), arrayList4);
            }
            if (!arrayList2.isEmpty()) {
                getChatsInternal(TextUtils.join(",", arrayList2), arrayList5);
            }
            AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda146(this, arrayList4, arrayList5, arrayList6, longSparseArray));
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$readAllDialogs$46(ArrayList arrayList, ArrayList arrayList2, ArrayList arrayList3, LongSparseArray longSparseArray) {
        getMessagesController().putUsers(arrayList, true);
        getMessagesController().putChats(arrayList2, true);
        getMessagesController().putEncryptedChats(arrayList3, true);
        for (int i = 0; i < longSparseArray.size(); i++) {
            long keyAt = longSparseArray.keyAt(i);
            ReadDialog readDialog = (ReadDialog) longSparseArray.valueAt(i);
            MessagesController messagesController = getMessagesController();
            int i2 = readDialog.lastMid;
            messagesController.markDialogAsRead(keyAt, i2, i2, readDialog.date, false, 0, readDialog.unreadCount, true, 0);
        }
    }

    private TLRPC$messages_Dialogs loadDialogsByIds(String str, ArrayList<Long> arrayList, ArrayList<Long> arrayList2, ArrayList<Integer> arrayList3) throws Exception {
        int i;
        TLRPC$Message tLRPC$Message;
        NativeByteBuffer byteBufferValue;
        ArrayList<Long> arrayList4 = arrayList;
        ArrayList<Long> arrayList5 = arrayList2;
        ArrayList<Integer> arrayList6 = arrayList3;
        TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
        LongSparseArray longSparseArray = new LongSparseArray();
        boolean z = false;
        SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, s.flags, m.date, d.pts, d.inbox_max, d.outbox_max, m.replydata, d.pinned, d.unread_count_i, d.flags, d.folder_id, d.data, d.unread_reactions FROM dialogs as d LEFT JOIN messages_v2 as m ON d.last_mid = m.mid AND d.did = m.uid LEFT JOIN dialog_settings as s ON d.did = s.did WHERE d.did IN (%s) ORDER BY d.pinned DESC, d.date DESC", new Object[]{str}), new Object[0]);
        while (true) {
            i = 2;
            if (!queryFinalized.next()) {
                break;
            }
            long longValue = queryFinalized.longValue(z ? 1 : 0);
            TLRPC$TL_dialog tLRPC$TL_dialog = new TLRPC$TL_dialog();
            tLRPC$TL_dialog.id = longValue;
            tLRPC$TL_dialog.top_message = queryFinalized.intValue(1);
            tLRPC$TL_dialog.unread_count = queryFinalized.intValue(2);
            tLRPC$TL_dialog.last_message_date = queryFinalized.intValue(3);
            int intValue = queryFinalized.intValue(10);
            tLRPC$TL_dialog.pts = intValue;
            tLRPC$TL_dialog.flags = (intValue == 0 || DialogObject.isUserDialog(tLRPC$TL_dialog.id)) ? 0 : 1;
            tLRPC$TL_dialog.read_inbox_max_id = queryFinalized.intValue(11);
            tLRPC$TL_dialog.read_outbox_max_id = queryFinalized.intValue(12);
            int intValue2 = queryFinalized.intValue(14);
            tLRPC$TL_dialog.pinnedNum = intValue2;
            tLRPC$TL_dialog.pinned = intValue2 != 0;
            tLRPC$TL_dialog.unread_mentions_count = queryFinalized.intValue(15);
            tLRPC$TL_dialog.unread_mark = (queryFinalized.intValue(16) & 1) != 0;
            long longValue2 = queryFinalized.longValue(8);
            TLRPC$TL_peerNotifySettings tLRPC$TL_peerNotifySettings = new TLRPC$TL_peerNotifySettings();
            tLRPC$TL_dialog.notify_settings = tLRPC$TL_peerNotifySettings;
            if ((((int) longValue2) & 1) != 0) {
                int i2 = (int) (longValue2 >> 32);
                tLRPC$TL_peerNotifySettings.mute_until = i2;
                if (i2 == 0) {
                    tLRPC$TL_peerNotifySettings.mute_until = Integer.MAX_VALUE;
                }
            }
            tLRPC$TL_dialog.folder_id = queryFinalized.intValue(17);
            tLRPC$TL_dialog.unread_reactions_count = queryFinalized.intValue(19);
            tLRPC$TL_messages_dialogs.dialogs.add(tLRPC$TL_dialog);
            NativeByteBuffer byteBufferValue2 = queryFinalized.byteBufferValue(4);
            if (byteBufferValue2 != null) {
                TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(z), z);
                if (TLdeserialize != null) {
                    TLdeserialize.readAttachPath(byteBufferValue2, getUserConfig().clientUserId);
                    byteBufferValue2.reuse();
                    MessageObject.setUnreadFlags(TLdeserialize, queryFinalized.intValue(5));
                    TLdeserialize.id = queryFinalized.intValue(6);
                    int intValue3 = queryFinalized.intValue(9);
                    if (intValue3 != 0) {
                        tLRPC$TL_dialog.last_message_date = intValue3;
                    }
                    TLdeserialize.send_state = queryFinalized.intValue(7);
                    TLdeserialize.dialog_id = tLRPC$TL_dialog.id;
                    tLRPC$TL_messages_dialogs.messages.add(TLdeserialize);
                    addUsersAndChatsFromMessage(TLdeserialize, arrayList4, arrayList5);
                    try {
                        TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader = TLdeserialize.reply_to;
                        if (!(tLRPC$TL_messageReplyHeader == null || tLRPC$TL_messageReplyHeader.reply_to_msg_id == 0)) {
                            TLRPC$MessageAction tLRPC$MessageAction = TLdeserialize.action;
                            if ((tLRPC$MessageAction instanceof TLRPC$TL_messageActionPinMessage) || (tLRPC$MessageAction instanceof TLRPC$TL_messageActionPaymentSent) || (tLRPC$MessageAction instanceof TLRPC$TL_messageActionGameScore)) {
                                if (queryFinalized.isNull(13) || (byteBufferValue = queryFinalized.byteBufferValue(13)) == null) {
                                    tLRPC$Message = TLdeserialize;
                                } else {
                                    TLRPC$Message TLdeserialize2 = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(z), z);
                                    TLdeserialize.replyMessage = TLdeserialize2;
                                    TLdeserialize2.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                    byteBufferValue.reuse();
                                    tLRPC$Message = TLdeserialize;
                                    TLRPC$Message tLRPC$Message2 = tLRPC$Message.replyMessage;
                                    if (tLRPC$Message2 != null) {
                                        addUsersAndChatsFromMessage(tLRPC$Message2, arrayList4, arrayList5);
                                    }
                                }
                                if (tLRPC$Message.replyMessage == null) {
                                    longSparseArray.put(tLRPC$TL_dialog.id, tLRPC$Message);
                                }
                            }
                        }
                    } catch (Exception e) {
                        FileLog.e((Throwable) e);
                    }
                } else {
                    byteBufferValue2.reuse();
                }
            }
            if (DialogObject.isEncryptedDialog(longValue)) {
                int encryptedChatId = DialogObject.getEncryptedChatId(longValue);
                if (!arrayList6.contains(Integer.valueOf(encryptedChatId))) {
                    arrayList6.add(Integer.valueOf(encryptedChatId));
                }
            } else if (!DialogObject.isUserDialog(longValue)) {
                long j = -longValue;
                if (!arrayList5.contains(Long.valueOf(j))) {
                    arrayList5.add(Long.valueOf(j));
                }
            } else if (!arrayList4.contains(Long.valueOf(longValue))) {
                arrayList4.add(Long.valueOf(longValue));
            }
            z = false;
        }
        queryFinalized.dispose();
        if (!longSparseArray.isEmpty()) {
            int size = longSparseArray.size();
            int i3 = 0;
            while (i3 < size) {
                long keyAt = longSparseArray.keyAt(i3);
                TLRPC$Message tLRPC$Message3 = (TLRPC$Message) longSparseArray.valueAt(i3);
                SQLiteDatabase sQLiteDatabase = this.database;
                Locale locale = Locale.US;
                Object[] objArr = new Object[i];
                objArr[0] = Integer.valueOf(tLRPC$Message3.id);
                objArr[1] = Long.valueOf(keyAt);
                SQLiteCursor queryFinalized2 = sQLiteDatabase.queryFinalized(String.format(locale, "SELECT data, mid, date, uid FROM messages_v2 WHERE mid = %d and uid = %d", objArr), new Object[0]);
                while (queryFinalized2.next()) {
                    NativeByteBuffer byteBufferValue3 = queryFinalized2.byteBufferValue(0);
                    if (byteBufferValue3 != null) {
                        TLRPC$Message TLdeserialize3 = TLRPC$Message.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(false), false);
                        TLdeserialize3.readAttachPath(byteBufferValue3, getUserConfig().clientUserId);
                        byteBufferValue3.reuse();
                        TLdeserialize3.id = queryFinalized2.intValue(1);
                        TLdeserialize3.date = queryFinalized2.intValue(2);
                        TLdeserialize3.dialog_id = queryFinalized2.longValue(3);
                        addUsersAndChatsFromMessage(TLdeserialize3, arrayList4, arrayList5);
                        tLRPC$Message3.replyMessage = TLdeserialize3;
                        TLdeserialize3.dialog_id = tLRPC$Message3.dialog_id;
                    }
                }
                queryFinalized2.dispose();
                i3++;
                i = 2;
            }
        }
        return tLRPC$TL_messages_dialogs;
    }

    private void loadDialogFilters() {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda13(this));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadDialogFilters$49() {
        TLRPC$messages_Dialogs tLRPC$messages_Dialogs;
        SQLiteCursor sQLiteCursor;
        try {
            ArrayList arrayList = new ArrayList();
            ArrayList arrayList2 = new ArrayList();
            ArrayList arrayList3 = new ArrayList();
            ArrayList arrayList4 = new ArrayList();
            SparseArray sparseArray = new SparseArray();
            arrayList.add(Long.valueOf(getUserConfig().getClientUserId()));
            int i = 0;
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT id, ord, unread_count, flags, title FROM dialog_filter WHERE 1", new Object[0]);
            boolean z = false;
            while (queryFinalized.next()) {
                MessagesController.DialogFilter dialogFilter = new MessagesController.DialogFilter();
                dialogFilter.id = queryFinalized.intValue(i);
                dialogFilter.order = queryFinalized.intValue(1);
                dialogFilter.unreadCount = -1;
                dialogFilter.pendingUnreadCount = -1;
                dialogFilter.flags = queryFinalized.intValue(3);
                dialogFilter.name = queryFinalized.stringValue(4);
                this.dialogFilters.add(dialogFilter);
                this.dialogFiltersMap.put(dialogFilter.id, dialogFilter);
                sparseArray.put(dialogFilter.id, dialogFilter);
                if (dialogFilter.pendingUnreadCount < 0) {
                    z = true;
                }
                int i2 = 0;
                while (i2 < 2) {
                    if (i2 == 0) {
                        SQLiteDatabase sQLiteDatabase = this.database;
                        sQLiteCursor = sQLiteDatabase.queryFinalized("SELECT peer, pin FROM dialog_filter_pin_v2 WHERE id = " + dialogFilter.id, new Object[i]);
                    } else {
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        sQLiteCursor = sQLiteDatabase2.queryFinalized("SELECT peer FROM dialog_filter_ep WHERE id = " + dialogFilter.id, new Object[i]);
                    }
                    while (sQLiteCursor.next()) {
                        long longValue = sQLiteCursor.longValue(i);
                        if (i2 == 0) {
                            if (!DialogObject.isEncryptedDialog(longValue)) {
                                dialogFilter.alwaysShow.add(Long.valueOf(longValue));
                            }
                            int intValue = sQLiteCursor.intValue(1);
                            if (intValue != Integer.MIN_VALUE) {
                                dialogFilter.pinnedDialogs.put(longValue, intValue);
                                if (!arrayList4.contains(Long.valueOf(longValue))) {
                                    arrayList4.add(Long.valueOf(longValue));
                                }
                            }
                        } else if (!DialogObject.isEncryptedDialog(longValue)) {
                            dialogFilter.neverShow.add(Long.valueOf(longValue));
                        }
                        if (DialogObject.isChatDialog(longValue)) {
                            long j = -longValue;
                            if (!arrayList2.contains(Long.valueOf(j))) {
                                arrayList2.add(Long.valueOf(j));
                            }
                        } else if (!DialogObject.isUserDialog(longValue)) {
                            int encryptedChatId = DialogObject.getEncryptedChatId(longValue);
                            if (!arrayList3.contains(Integer.valueOf(encryptedChatId))) {
                                arrayList3.add(Integer.valueOf(encryptedChatId));
                            }
                        } else if (!arrayList.contains(Long.valueOf(longValue))) {
                            arrayList.add(Long.valueOf(longValue));
                        }
                        i = 0;
                    }
                    sQLiteCursor.dispose();
                    i2++;
                    i = 0;
                }
            }
            queryFinalized.dispose();
            Collections.sort(this.dialogFilters, MessagesStorage$$ExternalSyntheticLambda202.INSTANCE);
            if (z) {
                calcUnreadCounters(true);
            }
            if (!arrayList4.isEmpty()) {
                tLRPC$messages_Dialogs = loadDialogsByIds(TextUtils.join(",", arrayList4), arrayList, arrayList2, arrayList3);
            } else {
                tLRPC$messages_Dialogs = new TLRPC$TL_messages_dialogs();
            }
            TLRPC$messages_Dialogs tLRPC$messages_Dialogs2 = tLRPC$messages_Dialogs;
            ArrayList arrayList5 = new ArrayList();
            ArrayList arrayList6 = new ArrayList();
            ArrayList arrayList7 = new ArrayList();
            if (!arrayList3.isEmpty()) {
                getEncryptedChatsInternal(TextUtils.join(",", arrayList3), arrayList7, arrayList);
            }
            if (!arrayList.isEmpty()) {
                getUsersInternal(TextUtils.join(",", arrayList), arrayList5);
            }
            if (!arrayList2.isEmpty()) {
                getChatsInternal(TextUtils.join(",", arrayList2), arrayList6);
            }
            getMessagesController().processLoadedDialogFilters(new ArrayList(this.dialogFilters), tLRPC$messages_Dialogs2, (TLRPC$messages_Dialogs) null, arrayList5, arrayList6, arrayList7, 0);
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    /* access modifiers changed from: private */
    public static /* synthetic */ int lambda$loadDialogFilters$48(MessagesController.DialogFilter dialogFilter, MessagesController.DialogFilter dialogFilter2) {
        int i = dialogFilter.order;
        int i2 = dialogFilter2.order;
        if (i > i2) {
            return 1;
        }
        return i < i2 ? -1 : 0;
    }

    /* JADX WARNING: Code restructure failed: missing block: B:226:0x04b4, code lost:
        if (r14.indexOfKey(r3.id) >= 0) goto L_0x04b6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:276:0x0573, code lost:
        if (r17 == 0) goto L_0x0575;
     */
    /* JADX WARNING: Removed duplicated region for block: B:115:0x0304 A[Catch:{ Exception -> 0x063c }] */
    /* JADX WARNING: Removed duplicated region for block: B:193:0x0445 A[Catch:{ Exception -> 0x063c }] */
    /* JADX WARNING: Removed duplicated region for block: B:330:0x061d A[Catch:{ Exception -> 0x063c }] */
    /* JADX WARNING: Removed duplicated region for block: B:85:0x025c A[Catch:{ Exception -> 0x063c }] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void calcUnreadCounters(boolean r25) {
        /*
            r24 = this;
            r1 = r24
            r0 = 0
            r2 = 0
        L_0x0004:
            r3 = 2
            if (r2 >= r3) goto L_0x002e
            r4 = 0
        L_0x0008:
            if (r4 >= r3) goto L_0x002b
            int[][] r5 = r1.contacts     // Catch:{ Exception -> 0x063c }
            r5 = r5[r2]     // Catch:{ Exception -> 0x063c }
            int[][] r6 = r1.nonContacts     // Catch:{ Exception -> 0x063c }
            r6 = r6[r2]     // Catch:{ Exception -> 0x063c }
            int[][] r7 = r1.bots     // Catch:{ Exception -> 0x063c }
            r7 = r7[r2]     // Catch:{ Exception -> 0x063c }
            int[][] r8 = r1.channels     // Catch:{ Exception -> 0x063c }
            r8 = r8[r2]     // Catch:{ Exception -> 0x063c }
            int[][] r9 = r1.groups     // Catch:{ Exception -> 0x063c }
            r9 = r9[r2]     // Catch:{ Exception -> 0x063c }
            r9[r4] = r0     // Catch:{ Exception -> 0x063c }
            r8[r4] = r0     // Catch:{ Exception -> 0x063c }
            r7[r4] = r0     // Catch:{ Exception -> 0x063c }
            r6[r4] = r0     // Catch:{ Exception -> 0x063c }
            r5[r4] = r0     // Catch:{ Exception -> 0x063c }
            int r4 = r4 + 1
            goto L_0x0008
        L_0x002b:
            int r2 = r2 + 1
            goto L_0x0004
        L_0x002e:
            androidx.collection.LongSparseArray<java.lang.Integer> r2 = r1.dialogsWithMentions     // Catch:{ Exception -> 0x063c }
            r2.clear()     // Catch:{ Exception -> 0x063c }
            androidx.collection.LongSparseArray<java.lang.Integer> r2 = r1.dialogsWithUnread     // Catch:{ Exception -> 0x063c }
            r2.clear()     // Catch:{ Exception -> 0x063c }
            java.util.ArrayList r2 = new java.util.ArrayList     // Catch:{ Exception -> 0x063c }
            r2.<init>()     // Catch:{ Exception -> 0x063c }
            java.util.ArrayList r4 = new java.util.ArrayList     // Catch:{ Exception -> 0x063c }
            r4.<init>()     // Catch:{ Exception -> 0x063c }
            java.util.ArrayList r5 = new java.util.ArrayList     // Catch:{ Exception -> 0x063c }
            r5.<init>()     // Catch:{ Exception -> 0x063c }
            java.util.ArrayList r6 = new java.util.ArrayList     // Catch:{ Exception -> 0x063c }
            r6.<init>()     // Catch:{ Exception -> 0x063c }
            java.util.ArrayList r7 = new java.util.ArrayList     // Catch:{ Exception -> 0x063c }
            r7.<init>()     // Catch:{ Exception -> 0x063c }
            java.util.ArrayList r8 = new java.util.ArrayList     // Catch:{ Exception -> 0x063c }
            r8.<init>()     // Catch:{ Exception -> 0x063c }
            org.telegram.messenger.support.LongSparseIntArray r9 = new org.telegram.messenger.support.LongSparseIntArray     // Catch:{ Exception -> 0x063c }
            r9.<init>()     // Catch:{ Exception -> 0x063c }
            org.telegram.SQLite.SQLiteDatabase r10 = r1.database     // Catch:{ Exception -> 0x063c }
            java.lang.String r11 = "SELECT did, folder_id, unread_count, unread_count_i FROM dialogs WHERE unread_count > 0 OR flags > 0 UNION ALL SELECT did, folder_id, unread_count, unread_count_i FROM dialogs WHERE unread_count_i > 0"
            java.lang.Object[] r12 = new java.lang.Object[r0]     // Catch:{ Exception -> 0x063c }
            org.telegram.SQLite.SQLiteCursor r10 = r10.queryFinalized(r11, r12)     // Catch:{ Exception -> 0x063c }
        L_0x0065:
            boolean r11 = r10.next()     // Catch:{ Exception -> 0x063c }
            r12 = 1
            if (r11 == 0) goto L_0x00de
            int r11 = r10.intValue(r12)     // Catch:{ Exception -> 0x063c }
            long r12 = r10.longValue(r0)     // Catch:{ Exception -> 0x063c }
            int r14 = r10.intValue(r3)     // Catch:{ Exception -> 0x063c }
            r15 = 3
            int r15 = r10.intValue(r15)     // Catch:{ Exception -> 0x063c }
            if (r14 <= 0) goto L_0x0088
            androidx.collection.LongSparseArray<java.lang.Integer> r3 = r1.dialogsWithUnread     // Catch:{ Exception -> 0x063c }
            java.lang.Integer r14 = java.lang.Integer.valueOf(r14)     // Catch:{ Exception -> 0x063c }
            r3.put(r12, r14)     // Catch:{ Exception -> 0x063c }
        L_0x0088:
            if (r15 <= 0) goto L_0x0093
            androidx.collection.LongSparseArray<java.lang.Integer> r3 = r1.dialogsWithMentions     // Catch:{ Exception -> 0x063c }
            java.lang.Integer r14 = java.lang.Integer.valueOf(r15)     // Catch:{ Exception -> 0x063c }
            r3.put(r12, r14)     // Catch:{ Exception -> 0x063c }
        L_0x0093:
            r9.put(r12, r11)     // Catch:{ Exception -> 0x063c }
            boolean r3 = org.telegram.messenger.DialogObject.isEncryptedDialog(r12)     // Catch:{ Exception -> 0x063c }
            if (r3 == 0) goto L_0x00b2
            int r3 = org.telegram.messenger.DialogObject.getEncryptedChatId(r12)     // Catch:{ Exception -> 0x063c }
            java.lang.Integer r11 = java.lang.Integer.valueOf(r3)     // Catch:{ Exception -> 0x063c }
            boolean r11 = r8.contains(r11)     // Catch:{ Exception -> 0x063c }
            if (r11 != 0) goto L_0x00dc
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)     // Catch:{ Exception -> 0x063c }
            r8.add(r3)     // Catch:{ Exception -> 0x063c }
            goto L_0x00dc
        L_0x00b2:
            boolean r3 = org.telegram.messenger.DialogObject.isUserDialog(r12)     // Catch:{ Exception -> 0x063c }
            if (r3 == 0) goto L_0x00ca
            java.lang.Long r3 = java.lang.Long.valueOf(r12)     // Catch:{ Exception -> 0x063c }
            boolean r3 = r6.contains(r3)     // Catch:{ Exception -> 0x063c }
            if (r3 != 0) goto L_0x00dc
            java.lang.Long r3 = java.lang.Long.valueOf(r12)     // Catch:{ Exception -> 0x063c }
            r6.add(r3)     // Catch:{ Exception -> 0x063c }
            goto L_0x00dc
        L_0x00ca:
            long r11 = -r12
            java.lang.Long r3 = java.lang.Long.valueOf(r11)     // Catch:{ Exception -> 0x063c }
            boolean r3 = r7.contains(r3)     // Catch:{ Exception -> 0x063c }
            if (r3 != 0) goto L_0x00dc
            java.lang.Long r3 = java.lang.Long.valueOf(r11)     // Catch:{ Exception -> 0x063c }
            r7.add(r3)     // Catch:{ Exception -> 0x063c }
        L_0x00dc:
            r3 = 2
            goto L_0x0065
        L_0x00de:
            r10.dispose()     // Catch:{ Exception -> 0x063c }
            androidx.collection.LongSparseArray r3 = new androidx.collection.LongSparseArray     // Catch:{ Exception -> 0x063c }
            r3.<init>()     // Catch:{ Exception -> 0x063c }
            androidx.collection.LongSparseArray r10 = new androidx.collection.LongSparseArray     // Catch:{ Exception -> 0x063c }
            r10.<init>()     // Catch:{ Exception -> 0x063c }
            androidx.collection.LongSparseArray r11 = new androidx.collection.LongSparseArray     // Catch:{ Exception -> 0x063c }
            r11.<init>()     // Catch:{ Exception -> 0x063c }
            org.telegram.messenger.support.LongSparseIntArray r13 = new org.telegram.messenger.support.LongSparseIntArray     // Catch:{ Exception -> 0x063c }
            r13.<init>()     // Catch:{ Exception -> 0x063c }
            androidx.collection.LongSparseArray r14 = new androidx.collection.LongSparseArray     // Catch:{ Exception -> 0x063c }
            r14.<init>()     // Catch:{ Exception -> 0x063c }
            androidx.collection.LongSparseArray r15 = new androidx.collection.LongSparseArray     // Catch:{ Exception -> 0x063c }
            r15.<init>()     // Catch:{ Exception -> 0x063c }
            boolean r16 = r6.isEmpty()     // Catch:{ Exception -> 0x063c }
            java.lang.String r0 = ","
            if (r16 != 0) goto L_0x0196
            java.lang.String r6 = android.text.TextUtils.join(r0, r6)     // Catch:{ Exception -> 0x063c }
            r1.getUsersInternal(r6, r2)     // Catch:{ Exception -> 0x063c }
            int r6 = r2.size()     // Catch:{ Exception -> 0x063c }
            r12 = 0
        L_0x0113:
            if (r12 >= r6) goto L_0x0196
            java.lang.Object r18 = r2.get(r12)     // Catch:{ Exception -> 0x063c }
            r19 = r2
            r2 = r18
            org.telegram.tgnet.TLRPC$User r2 = (org.telegram.tgnet.TLRPC$User) r2     // Catch:{ Exception -> 0x063c }
            r18 = r6
            org.telegram.messenger.MessagesController r6 = r24.getMessagesController()     // Catch:{ Exception -> 0x063c }
            r20 = r10
            r21 = r11
            long r10 = r2.id     // Catch:{ Exception -> 0x063c }
            boolean r6 = r6.isDialogMuted(r10)     // Catch:{ Exception -> 0x063c }
            long r10 = r2.id     // Catch:{ Exception -> 0x063c }
            int r10 = r9.get(r10)     // Catch:{ Exception -> 0x063c }
            if (r6 == 0) goto L_0x0144
            r11 = r4
            r22 = r5
            long r4 = r2.id     // Catch:{ Exception -> 0x063c }
            r23 = r7
            java.lang.Boolean r7 = java.lang.Boolean.TRUE     // Catch:{ Exception -> 0x063c }
            r14.put(r4, r7)     // Catch:{ Exception -> 0x063c }
            goto L_0x0149
        L_0x0144:
            r11 = r4
            r22 = r5
            r23 = r7
        L_0x0149:
            r4 = 1
            if (r10 != r4) goto L_0x0153
            long r4 = r2.id     // Catch:{ Exception -> 0x063c }
            java.lang.Boolean r7 = java.lang.Boolean.TRUE     // Catch:{ Exception -> 0x063c }
            r15.put(r4, r7)     // Catch:{ Exception -> 0x063c }
        L_0x0153:
            boolean r4 = r2.bot     // Catch:{ Exception -> 0x063c }
            if (r4 == 0) goto L_0x0162
            int[][] r4 = r1.bots     // Catch:{ Exception -> 0x063c }
            r4 = r4[r10]     // Catch:{ Exception -> 0x063c }
            r5 = r4[r6]     // Catch:{ Exception -> 0x063c }
            r7 = 1
            int r5 = r5 + r7
            r4[r6] = r5     // Catch:{ Exception -> 0x063c }
            goto L_0x0180
        L_0x0162:
            boolean r4 = r2.self     // Catch:{ Exception -> 0x063c }
            if (r4 != 0) goto L_0x0176
            boolean r4 = r2.contact     // Catch:{ Exception -> 0x063c }
            if (r4 == 0) goto L_0x016b
            goto L_0x0176
        L_0x016b:
            int[][] r4 = r1.nonContacts     // Catch:{ Exception -> 0x063c }
            r4 = r4[r10]     // Catch:{ Exception -> 0x063c }
            r5 = r4[r6]     // Catch:{ Exception -> 0x063c }
            r7 = 1
            int r5 = r5 + r7
            r4[r6] = r5     // Catch:{ Exception -> 0x063c }
            goto L_0x0180
        L_0x0176:
            int[][] r4 = r1.contacts     // Catch:{ Exception -> 0x063c }
            r4 = r4[r10]     // Catch:{ Exception -> 0x063c }
            r5 = r4[r6]     // Catch:{ Exception -> 0x063c }
            r7 = 1
            int r5 = r5 + r7
            r4[r6] = r5     // Catch:{ Exception -> 0x063c }
        L_0x0180:
            long r4 = r2.id     // Catch:{ Exception -> 0x063c }
            r3.put(r4, r2)     // Catch:{ Exception -> 0x063c }
            int r12 = r12 + 1
            r4 = r11
            r6 = r18
            r2 = r19
            r10 = r20
            r11 = r21
            r5 = r22
            r7 = r23
            goto L_0x0113
        L_0x0196:
            r22 = r5
            r23 = r7
            r20 = r10
            r21 = r11
            r11 = r4
            boolean r2 = r8.isEmpty()     // Catch:{ Exception -> 0x063c }
            if (r2 != 0) goto L_0x0254
            java.util.ArrayList r2 = new java.util.ArrayList     // Catch:{ Exception -> 0x063c }
            r2.<init>()     // Catch:{ Exception -> 0x063c }
            java.util.ArrayList r4 = new java.util.ArrayList     // Catch:{ Exception -> 0x063c }
            r4.<init>()     // Catch:{ Exception -> 0x063c }
            java.lang.String r5 = android.text.TextUtils.join(r0, r8)     // Catch:{ Exception -> 0x063c }
            r1.getEncryptedChatsInternal(r5, r4, r2)     // Catch:{ Exception -> 0x063c }
            boolean r5 = r2.isEmpty()     // Catch:{ Exception -> 0x063c }
            if (r5 != 0) goto L_0x0254
            java.lang.String r2 = android.text.TextUtils.join(r0, r2)     // Catch:{ Exception -> 0x063c }
            r1.getUsersInternal(r2, r11)     // Catch:{ Exception -> 0x063c }
            int r2 = r11.size()     // Catch:{ Exception -> 0x063c }
            r5 = 0
        L_0x01c8:
            if (r5 >= r2) goto L_0x01dc
            java.lang.Object r6 = r11.get(r5)     // Catch:{ Exception -> 0x063c }
            org.telegram.tgnet.TLRPC$User r6 = (org.telegram.tgnet.TLRPC$User) r6     // Catch:{ Exception -> 0x063c }
            long r7 = r6.id     // Catch:{ Exception -> 0x063c }
            r10 = r21
            r10.put(r7, r6)     // Catch:{ Exception -> 0x063c }
            int r5 = r5 + 1
            r21 = r10
            goto L_0x01c8
        L_0x01dc:
            r10 = r21
            int r2 = r4.size()     // Catch:{ Exception -> 0x063c }
            r5 = 0
        L_0x01e3:
            if (r5 >= r2) goto L_0x0256
            java.lang.Object r6 = r4.get(r5)     // Catch:{ Exception -> 0x063c }
            org.telegram.tgnet.TLRPC$EncryptedChat r6 = (org.telegram.tgnet.TLRPC$EncryptedChat) r6     // Catch:{ Exception -> 0x063c }
            long r7 = r6.user_id     // Catch:{ Exception -> 0x063c }
            java.lang.Object r7 = r10.get(r7)     // Catch:{ Exception -> 0x063c }
            org.telegram.tgnet.TLRPC$User r7 = (org.telegram.tgnet.TLRPC$User) r7     // Catch:{ Exception -> 0x063c }
            if (r7 != 0) goto L_0x01f8
            r18 = r2
            goto L_0x024f
        L_0x01f8:
            int r6 = r6.id     // Catch:{ Exception -> 0x063c }
            long r11 = (long) r6     // Catch:{ Exception -> 0x063c }
            long r11 = org.telegram.messenger.DialogObject.makeEncryptedDialogId(r11)     // Catch:{ Exception -> 0x063c }
            org.telegram.messenger.MessagesController r6 = r24.getMessagesController()     // Catch:{ Exception -> 0x063c }
            boolean r6 = r6.isDialogMuted(r11)     // Catch:{ Exception -> 0x063c }
            int r8 = r9.get(r11)     // Catch:{ Exception -> 0x063c }
            if (r6 == 0) goto L_0x0217
            long r11 = r7.id     // Catch:{ Exception -> 0x063c }
            r18 = r2
            java.lang.Boolean r2 = java.lang.Boolean.TRUE     // Catch:{ Exception -> 0x063c }
            r14.put(r11, r2)     // Catch:{ Exception -> 0x063c }
            goto L_0x0219
        L_0x0217:
            r18 = r2
        L_0x0219:
            r2 = 1
            if (r8 != r2) goto L_0x0223
            long r11 = r7.id     // Catch:{ Exception -> 0x063c }
            java.lang.Boolean r2 = java.lang.Boolean.TRUE     // Catch:{ Exception -> 0x063c }
            r15.put(r11, r2)     // Catch:{ Exception -> 0x063c }
        L_0x0223:
            boolean r2 = r7.self     // Catch:{ Exception -> 0x063c }
            if (r2 != 0) goto L_0x0237
            boolean r2 = r7.contact     // Catch:{ Exception -> 0x063c }
            if (r2 == 0) goto L_0x022c
            goto L_0x0237
        L_0x022c:
            int[][] r2 = r1.nonContacts     // Catch:{ Exception -> 0x063c }
            r2 = r2[r8]     // Catch:{ Exception -> 0x063c }
            r8 = r2[r6]     // Catch:{ Exception -> 0x063c }
            r11 = 1
            int r8 = r8 + r11
            r2[r6] = r8     // Catch:{ Exception -> 0x063c }
            goto L_0x0241
        L_0x0237:
            int[][] r2 = r1.contacts     // Catch:{ Exception -> 0x063c }
            r2 = r2[r8]     // Catch:{ Exception -> 0x063c }
            r8 = r2[r6]     // Catch:{ Exception -> 0x063c }
            r11 = 1
            int r8 = r8 + r11
            r2[r6] = r8     // Catch:{ Exception -> 0x063c }
        L_0x0241:
            long r11 = r7.id     // Catch:{ Exception -> 0x063c }
            r2 = 0
            int r6 = r13.get(r11, r2)     // Catch:{ Exception -> 0x063c }
            long r7 = r7.id     // Catch:{ Exception -> 0x063c }
            r2 = 1
            int r6 = r6 + r2
            r13.put(r7, r6)     // Catch:{ Exception -> 0x063c }
        L_0x024f:
            int r5 = r5 + 1
            r2 = r18
            goto L_0x01e3
        L_0x0254:
            r10 = r21
        L_0x0256:
            boolean r2 = r23.isEmpty()     // Catch:{ Exception -> 0x063c }
            if (r2 != 0) goto L_0x02f7
            r2 = r23
            java.lang.String r0 = android.text.TextUtils.join(r0, r2)     // Catch:{ Exception -> 0x063c }
            r2 = r22
            r1.getChatsInternal(r0, r2)     // Catch:{ Exception -> 0x063c }
            int r0 = r2.size()     // Catch:{ Exception -> 0x063c }
            r4 = 0
        L_0x026c:
            if (r4 >= r0) goto L_0x02f7
            java.lang.Object r5 = r2.get(r4)     // Catch:{ Exception -> 0x063c }
            org.telegram.tgnet.TLRPC$Chat r5 = (org.telegram.tgnet.TLRPC$Chat) r5     // Catch:{ Exception -> 0x063c }
            org.telegram.tgnet.TLRPC$InputChannel r6 = r5.migrated_to     // Catch:{ Exception -> 0x063c }
            boolean r6 = r6 instanceof org.telegram.tgnet.TLRPC$TL_inputChannel     // Catch:{ Exception -> 0x063c }
            if (r6 != 0) goto L_0x02df
            boolean r6 = org.telegram.messenger.ChatObject.isNotInChat(r5)     // Catch:{ Exception -> 0x063c }
            if (r6 == 0) goto L_0x0281
            goto L_0x02df
        L_0x0281:
            org.telegram.messenger.MessagesController r6 = r24.getMessagesController()     // Catch:{ Exception -> 0x063c }
            long r7 = r5.id     // Catch:{ Exception -> 0x063c }
            long r7 = -r7
            boolean r6 = r6.isDialogMuted(r7, r5)     // Catch:{ Exception -> 0x063c }
            long r7 = r5.id     // Catch:{ Exception -> 0x063c }
            long r7 = -r7
            int r7 = r9.get(r7)     // Catch:{ Exception -> 0x063c }
            if (r6 == 0) goto L_0x02a2
            androidx.collection.LongSparseArray<java.lang.Integer> r8 = r1.dialogsWithMentions     // Catch:{ Exception -> 0x063c }
            long r11 = r5.id     // Catch:{ Exception -> 0x063c }
            long r11 = -r11
            int r8 = r8.indexOfKey(r11)     // Catch:{ Exception -> 0x063c }
            if (r8 >= 0) goto L_0x02a2
            r8 = 1
            goto L_0x02a3
        L_0x02a2:
            r8 = 0
        L_0x02a3:
            if (r6 == 0) goto L_0x02ad
            long r11 = r5.id     // Catch:{ Exception -> 0x063c }
            long r11 = -r11
            java.lang.Boolean r6 = java.lang.Boolean.TRUE     // Catch:{ Exception -> 0x063c }
            r14.put(r11, r6)     // Catch:{ Exception -> 0x063c }
        L_0x02ad:
            r6 = 1
            if (r7 != r6) goto L_0x02b8
            long r11 = r5.id     // Catch:{ Exception -> 0x063c }
            long r11 = -r11
            java.lang.Boolean r6 = java.lang.Boolean.TRUE     // Catch:{ Exception -> 0x063c }
            r15.put(r11, r6)     // Catch:{ Exception -> 0x063c }
        L_0x02b8:
            boolean r6 = org.telegram.messenger.ChatObject.isChannel(r5)     // Catch:{ Exception -> 0x063c }
            if (r6 == 0) goto L_0x02cd
            boolean r6 = r5.megagroup     // Catch:{ Exception -> 0x063c }
            if (r6 != 0) goto L_0x02cd
            int[][] r6 = r1.channels     // Catch:{ Exception -> 0x063c }
            r6 = r6[r7]     // Catch:{ Exception -> 0x063c }
            r7 = r6[r8]     // Catch:{ Exception -> 0x063c }
            r11 = 1
            int r7 = r7 + r11
            r6[r8] = r7     // Catch:{ Exception -> 0x063c }
            goto L_0x02d7
        L_0x02cd:
            int[][] r6 = r1.groups     // Catch:{ Exception -> 0x063c }
            r6 = r6[r7]     // Catch:{ Exception -> 0x063c }
            r7 = r6[r8]     // Catch:{ Exception -> 0x063c }
            r11 = 1
            int r7 = r7 + r11
            r6[r8] = r7     // Catch:{ Exception -> 0x063c }
        L_0x02d7:
            long r6 = r5.id     // Catch:{ Exception -> 0x063c }
            r8 = r20
            r8.put(r6, r5)     // Catch:{ Exception -> 0x063c }
            goto L_0x02f1
        L_0x02df:
            r8 = r20
            androidx.collection.LongSparseArray<java.lang.Integer> r6 = r1.dialogsWithUnread     // Catch:{ Exception -> 0x063c }
            long r11 = r5.id     // Catch:{ Exception -> 0x063c }
            long r11 = -r11
            r6.remove(r11)     // Catch:{ Exception -> 0x063c }
            androidx.collection.LongSparseArray<java.lang.Integer> r6 = r1.dialogsWithMentions     // Catch:{ Exception -> 0x063c }
            long r11 = r5.id     // Catch:{ Exception -> 0x063c }
            long r11 = -r11
            r6.remove(r11)     // Catch:{ Exception -> 0x063c }
        L_0x02f1:
            int r4 = r4 + 1
            r20 = r8
            goto L_0x026c
        L_0x02f7:
            r8 = r20
            java.util.ArrayList<org.telegram.messenger.MessagesController$DialogFilter> r0 = r1.dialogFilters     // Catch:{ Exception -> 0x063c }
            int r0 = r0.size()     // Catch:{ Exception -> 0x063c }
            r2 = 0
        L_0x0300:
            int r4 = r0 + 2
            if (r2 >= r4) goto L_0x0640
            if (r2 >= r0) goto L_0x031b
            java.util.ArrayList<org.telegram.messenger.MessagesController$DialogFilter> r4 = r1.dialogFilters     // Catch:{ Exception -> 0x063c }
            java.lang.Object r4 = r4.get(r2)     // Catch:{ Exception -> 0x063c }
            org.telegram.messenger.MessagesController$DialogFilter r4 = (org.telegram.messenger.MessagesController.DialogFilter) r4     // Catch:{ Exception -> 0x063c }
            int r5 = r4.pendingUnreadCount     // Catch:{ Exception -> 0x063c }
            if (r5 < 0) goto L_0x0318
            r18 = r3
            r21 = r10
            goto L_0x0634
        L_0x0318:
            int r5 = r4.flags     // Catch:{ Exception -> 0x063c }
            goto L_0x0332
        L_0x031b:
            r4 = 0
            int r5 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ALL_CHATS     // Catch:{ Exception -> 0x063c }
            if (r2 != r0) goto L_0x032f
            org.telegram.messenger.NotificationsController r6 = r24.getNotificationsController()     // Catch:{ Exception -> 0x063c }
            boolean r6 = r6.showBadgeMuted     // Catch:{ Exception -> 0x063c }
            if (r6 != 0) goto L_0x032b
            int r6 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED     // Catch:{ Exception -> 0x063c }
            r5 = r5 | r6
        L_0x032b:
            int r6 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED     // Catch:{ Exception -> 0x063c }
        L_0x032d:
            r5 = r5 | r6
            goto L_0x0332
        L_0x032f:
            int r6 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED     // Catch:{ Exception -> 0x063c }
            goto L_0x032d
        L_0x0332:
            int r6 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CONTACTS     // Catch:{ Exception -> 0x063c }
            r6 = r6 & r5
            if (r6 == 0) goto L_0x036c
            int r6 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED     // Catch:{ Exception -> 0x063c }
            r6 = r6 & r5
            if (r6 != 0) goto L_0x0352
            int[][] r6 = r1.contacts     // Catch:{ Exception -> 0x063c }
            r7 = 0
            r9 = r6[r7]     // Catch:{ Exception -> 0x063c }
            r9 = r9[r7]     // Catch:{ Exception -> 0x063c }
            int r9 = r9 + r7
            int r11 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED     // Catch:{ Exception -> 0x063c }
            r11 = r11 & r5
            if (r11 != 0) goto L_0x0350
            r6 = r6[r7]     // Catch:{ Exception -> 0x063c }
            r7 = 1
            r6 = r6[r7]     // Catch:{ Exception -> 0x063c }
            int r6 = r6 + r9
            goto L_0x0353
        L_0x0350:
            r6 = r9
            goto L_0x0353
        L_0x0352:
            r6 = 0
        L_0x0353:
            int r7 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED     // Catch:{ Exception -> 0x063c }
            r7 = r7 & r5
            if (r7 != 0) goto L_0x036d
            int[][] r7 = r1.contacts     // Catch:{ Exception -> 0x063c }
            r9 = 1
            r11 = r7[r9]     // Catch:{ Exception -> 0x063c }
            r12 = 0
            r11 = r11[r12]     // Catch:{ Exception -> 0x063c }
            int r6 = r6 + r11
            int r11 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED     // Catch:{ Exception -> 0x063c }
            r11 = r11 & r5
            if (r11 != 0) goto L_0x036d
            r7 = r7[r9]     // Catch:{ Exception -> 0x063c }
            r7 = r7[r9]     // Catch:{ Exception -> 0x063c }
            int r6 = r6 + r7
            goto L_0x036d
        L_0x036c:
            r6 = 0
        L_0x036d:
            int r7 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS     // Catch:{ Exception -> 0x063c }
            r7 = r7 & r5
            if (r7 == 0) goto L_0x03a2
            int r7 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED     // Catch:{ Exception -> 0x063c }
            r7 = r7 & r5
            if (r7 != 0) goto L_0x038a
            int[][] r7 = r1.nonContacts     // Catch:{ Exception -> 0x063c }
            r9 = 0
            r11 = r7[r9]     // Catch:{ Exception -> 0x063c }
            r11 = r11[r9]     // Catch:{ Exception -> 0x063c }
            int r6 = r6 + r11
            int r11 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED     // Catch:{ Exception -> 0x063c }
            r11 = r11 & r5
            if (r11 != 0) goto L_0x038a
            r7 = r7[r9]     // Catch:{ Exception -> 0x063c }
            r9 = 1
            r7 = r7[r9]     // Catch:{ Exception -> 0x063c }
            int r6 = r6 + r7
        L_0x038a:
            int r7 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED     // Catch:{ Exception -> 0x063c }
            r7 = r7 & r5
            if (r7 != 0) goto L_0x03a2
            int[][] r7 = r1.nonContacts     // Catch:{ Exception -> 0x063c }
            r9 = 1
            r11 = r7[r9]     // Catch:{ Exception -> 0x063c }
            r12 = 0
            r11 = r11[r12]     // Catch:{ Exception -> 0x063c }
            int r6 = r6 + r11
            int r11 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED     // Catch:{ Exception -> 0x063c }
            r11 = r11 & r5
            if (r11 != 0) goto L_0x03a2
            r7 = r7[r9]     // Catch:{ Exception -> 0x063c }
            r7 = r7[r9]     // Catch:{ Exception -> 0x063c }
            int r6 = r6 + r7
        L_0x03a2:
            int r7 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_GROUPS     // Catch:{ Exception -> 0x063c }
            r7 = r7 & r5
            if (r7 == 0) goto L_0x03d7
            int r7 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED     // Catch:{ Exception -> 0x063c }
            r7 = r7 & r5
            if (r7 != 0) goto L_0x03bf
            int[][] r7 = r1.groups     // Catch:{ Exception -> 0x063c }
            r9 = 0
            r11 = r7[r9]     // Catch:{ Exception -> 0x063c }
            r11 = r11[r9]     // Catch:{ Exception -> 0x063c }
            int r6 = r6 + r11
            int r11 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED     // Catch:{ Exception -> 0x063c }
            r11 = r11 & r5
            if (r11 != 0) goto L_0x03bf
            r7 = r7[r9]     // Catch:{ Exception -> 0x063c }
            r9 = 1
            r7 = r7[r9]     // Catch:{ Exception -> 0x063c }
            int r6 = r6 + r7
        L_0x03bf:
            int r7 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED     // Catch:{ Exception -> 0x063c }
            r7 = r7 & r5
            if (r7 != 0) goto L_0x03d7
            int[][] r7 = r1.groups     // Catch:{ Exception -> 0x063c }
            r9 = 1
            r11 = r7[r9]     // Catch:{ Exception -> 0x063c }
            r12 = 0
            r11 = r11[r12]     // Catch:{ Exception -> 0x063c }
            int r6 = r6 + r11
            int r11 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED     // Catch:{ Exception -> 0x063c }
            r11 = r11 & r5
            if (r11 != 0) goto L_0x03d7
            r7 = r7[r9]     // Catch:{ Exception -> 0x063c }
            r7 = r7[r9]     // Catch:{ Exception -> 0x063c }
            int r6 = r6 + r7
        L_0x03d7:
            int r7 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CHANNELS     // Catch:{ Exception -> 0x063c }
            r7 = r7 & r5
            if (r7 == 0) goto L_0x040c
            int r7 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED     // Catch:{ Exception -> 0x063c }
            r7 = r7 & r5
            if (r7 != 0) goto L_0x03f4
            int[][] r7 = r1.channels     // Catch:{ Exception -> 0x063c }
            r9 = 0
            r11 = r7[r9]     // Catch:{ Exception -> 0x063c }
            r11 = r11[r9]     // Catch:{ Exception -> 0x063c }
            int r6 = r6 + r11
            int r11 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED     // Catch:{ Exception -> 0x063c }
            r11 = r11 & r5
            if (r11 != 0) goto L_0x03f4
            r7 = r7[r9]     // Catch:{ Exception -> 0x063c }
            r9 = 1
            r7 = r7[r9]     // Catch:{ Exception -> 0x063c }
            int r6 = r6 + r7
        L_0x03f4:
            int r7 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED     // Catch:{ Exception -> 0x063c }
            r7 = r7 & r5
            if (r7 != 0) goto L_0x040c
            int[][] r7 = r1.channels     // Catch:{ Exception -> 0x063c }
            r9 = 1
            r11 = r7[r9]     // Catch:{ Exception -> 0x063c }
            r12 = 0
            r11 = r11[r12]     // Catch:{ Exception -> 0x063c }
            int r6 = r6 + r11
            int r11 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED     // Catch:{ Exception -> 0x063c }
            r11 = r11 & r5
            if (r11 != 0) goto L_0x040c
            r7 = r7[r9]     // Catch:{ Exception -> 0x063c }
            r7 = r7[r9]     // Catch:{ Exception -> 0x063c }
            int r6 = r6 + r7
        L_0x040c:
            int r7 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_BOTS     // Catch:{ Exception -> 0x063c }
            r7 = r7 & r5
            if (r7 == 0) goto L_0x0442
            int r7 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED     // Catch:{ Exception -> 0x063c }
            r7 = r7 & r5
            if (r7 != 0) goto L_0x0429
            int[][] r7 = r1.bots     // Catch:{ Exception -> 0x063c }
            r9 = 0
            r11 = r7[r9]     // Catch:{ Exception -> 0x063c }
            r11 = r11[r9]     // Catch:{ Exception -> 0x063c }
            int r6 = r6 + r11
            int r11 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED     // Catch:{ Exception -> 0x063c }
            r11 = r11 & r5
            if (r11 != 0) goto L_0x0429
            r7 = r7[r9]     // Catch:{ Exception -> 0x063c }
            r9 = 1
            r7 = r7[r9]     // Catch:{ Exception -> 0x063c }
            int r6 = r6 + r7
        L_0x0429:
            int r7 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED     // Catch:{ Exception -> 0x063c }
            r7 = r7 & r5
            if (r7 != 0) goto L_0x0442
            int[][] r7 = r1.bots     // Catch:{ Exception -> 0x063c }
            r9 = 1
            r11 = r7[r9]     // Catch:{ Exception -> 0x063c }
            r12 = 0
            r11 = r11[r12]     // Catch:{ Exception -> 0x063c }
            int r6 = r6 + r11
            int r11 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED     // Catch:{ Exception -> 0x063c }
            r11 = r11 & r5
            if (r11 != 0) goto L_0x0443
            r7 = r7[r9]     // Catch:{ Exception -> 0x063c }
            r7 = r7[r9]     // Catch:{ Exception -> 0x063c }
            int r6 = r6 + r7
            goto L_0x0443
        L_0x0442:
            r9 = 1
        L_0x0443:
            if (r4 == 0) goto L_0x061d
            java.util.ArrayList<java.lang.Long> r7 = r4.alwaysShow     // Catch:{ Exception -> 0x063c }
            int r7 = r7.size()     // Catch:{ Exception -> 0x063c }
            r11 = r6
            r6 = 0
        L_0x044d:
            if (r6 >= r7) goto L_0x0533
            java.util.ArrayList<java.lang.Long> r12 = r4.alwaysShow     // Catch:{ Exception -> 0x063c }
            java.lang.Object r12 = r12.get(r6)     // Catch:{ Exception -> 0x063c }
            java.lang.Long r12 = (java.lang.Long) r12     // Catch:{ Exception -> 0x063c }
            r21 = r10
            long r9 = r12.longValue()     // Catch:{ Exception -> 0x063c }
            boolean r12 = org.telegram.messenger.DialogObject.isUserDialog(r9)     // Catch:{ Exception -> 0x063c }
            if (r12 == 0) goto L_0x04db
            r18 = r3
            r12 = r11
            r3 = 2
            r11 = 0
        L_0x0468:
            if (r11 >= r3) goto L_0x04d5
            if (r11 != 0) goto L_0x046f
            r3 = r18
            goto L_0x0471
        L_0x046f:
            r3 = r21
        L_0x0471:
            java.lang.Object r3 = r3.get(r9)     // Catch:{ Exception -> 0x063c }
            org.telegram.tgnet.TLRPC$User r3 = (org.telegram.tgnet.TLRPC$User) r3     // Catch:{ Exception -> 0x063c }
            if (r3 == 0) goto L_0x04c9
            if (r11 != 0) goto L_0x0480
            r19 = r7
            r20 = 1
            goto L_0x048a
        L_0x0480:
            r19 = r7
            r7 = 0
            int r20 = r13.get(r9, r7)     // Catch:{ Exception -> 0x063c }
            if (r20 != 0) goto L_0x048a
            goto L_0x04a4
        L_0x048a:
            boolean r7 = r3.bot     // Catch:{ Exception -> 0x063c }
            if (r7 == 0) goto L_0x0491
            int r7 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_BOTS     // Catch:{ Exception -> 0x063c }
            goto L_0x049f
        L_0x0491:
            boolean r7 = r3.self     // Catch:{ Exception -> 0x063c }
            if (r7 != 0) goto L_0x049d
            boolean r7 = r3.contact     // Catch:{ Exception -> 0x063c }
            if (r7 == 0) goto L_0x049a
            goto L_0x049d
        L_0x049a:
            int r7 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS     // Catch:{ Exception -> 0x063c }
            goto L_0x049f
        L_0x049d:
            int r7 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CONTACTS     // Catch:{ Exception -> 0x063c }
        L_0x049f:
            r7 = r7 & r5
            if (r7 != 0) goto L_0x04a7
            int r12 = r12 + r20
        L_0x04a4:
            r22 = r6
            goto L_0x04cd
        L_0x04a7:
            int r7 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED     // Catch:{ Exception -> 0x063c }
            r7 = r7 & r5
            if (r7 == 0) goto L_0x04b9
            r22 = r6
            long r6 = r3.id     // Catch:{ Exception -> 0x063c }
            int r6 = r14.indexOfKey(r6)     // Catch:{ Exception -> 0x063c }
            if (r6 < 0) goto L_0x04bb
        L_0x04b6:
            int r12 = r12 + r20
            goto L_0x04cd
        L_0x04b9:
            r22 = r6
        L_0x04bb:
            int r6 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED     // Catch:{ Exception -> 0x063c }
            r6 = r6 & r5
            if (r6 == 0) goto L_0x04cd
            long r6 = r3.id     // Catch:{ Exception -> 0x063c }
            int r3 = r15.indexOfKey(r6)     // Catch:{ Exception -> 0x063c }
            if (r3 < 0) goto L_0x04cd
            goto L_0x04b6
        L_0x04c9:
            r22 = r6
            r19 = r7
        L_0x04cd:
            int r11 = r11 + 1
            r7 = r19
            r6 = r22
            r3 = 2
            goto L_0x0468
        L_0x04d5:
            r22 = r6
            r19 = r7
            r11 = r12
            goto L_0x0528
        L_0x04db:
            r18 = r3
            r22 = r6
            r19 = r7
            long r6 = -r9
            java.lang.Object r3 = r8.get(r6)     // Catch:{ Exception -> 0x063c }
            org.telegram.tgnet.TLRPC$Chat r3 = (org.telegram.tgnet.TLRPC$Chat) r3     // Catch:{ Exception -> 0x063c }
            if (r3 == 0) goto L_0x0528
            boolean r6 = org.telegram.messenger.ChatObject.isChannel(r3)     // Catch:{ Exception -> 0x063c }
            if (r6 == 0) goto L_0x04f7
            boolean r6 = r3.megagroup     // Catch:{ Exception -> 0x063c }
            if (r6 != 0) goto L_0x04f7
            int r6 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CHANNELS     // Catch:{ Exception -> 0x063c }
            goto L_0x04f9
        L_0x04f7:
            int r6 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_GROUPS     // Catch:{ Exception -> 0x063c }
        L_0x04f9:
            r6 = r6 & r5
            if (r6 != 0) goto L_0x04ff
        L_0x04fc:
            int r11 = r11 + 1
            goto L_0x0528
        L_0x04ff:
            int r6 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED     // Catch:{ Exception -> 0x063c }
            r6 = r6 & r5
            if (r6 == 0) goto L_0x0519
            long r6 = r3.id     // Catch:{ Exception -> 0x063c }
            long r6 = -r6
            int r6 = r14.indexOfKey(r6)     // Catch:{ Exception -> 0x063c }
            if (r6 < 0) goto L_0x0519
            androidx.collection.LongSparseArray<java.lang.Integer> r6 = r1.dialogsWithMentions     // Catch:{ Exception -> 0x063c }
            long r9 = r3.id     // Catch:{ Exception -> 0x063c }
            long r9 = -r9
            int r6 = r6.indexOfKey(r9)     // Catch:{ Exception -> 0x063c }
            if (r6 >= 0) goto L_0x0519
            goto L_0x04fc
        L_0x0519:
            int r6 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED     // Catch:{ Exception -> 0x063c }
            r6 = r6 & r5
            if (r6 == 0) goto L_0x0528
            long r6 = r3.id     // Catch:{ Exception -> 0x063c }
            long r6 = -r6
            int r3 = r15.indexOfKey(r6)     // Catch:{ Exception -> 0x063c }
            if (r3 < 0) goto L_0x0528
            goto L_0x04fc
        L_0x0528:
            int r6 = r22 + 1
            r3 = r18
            r7 = r19
            r10 = r21
            r9 = 1
            goto L_0x044d
        L_0x0533:
            r18 = r3
            r21 = r10
            java.util.ArrayList<java.lang.Long> r3 = r4.neverShow     // Catch:{ Exception -> 0x063c }
            int r3 = r3.size()     // Catch:{ Exception -> 0x063c }
            r6 = 0
        L_0x053e:
            if (r6 >= r3) goto L_0x0612
            java.util.ArrayList<java.lang.Long> r7 = r4.neverShow     // Catch:{ Exception -> 0x063c }
            java.lang.Object r7 = r7.get(r6)     // Catch:{ Exception -> 0x063c }
            java.lang.Long r7 = (java.lang.Long) r7     // Catch:{ Exception -> 0x063c }
            long r9 = r7.longValue()     // Catch:{ Exception -> 0x063c }
            boolean r7 = org.telegram.messenger.DialogObject.isUserDialog(r9)     // Catch:{ Exception -> 0x063c }
            if (r7 == 0) goto L_0x05c2
            r7 = 0
        L_0x0553:
            r12 = 2
            if (r7 >= r12) goto L_0x05bd
            if (r7 != 0) goto L_0x055b
            r12 = r18
            goto L_0x055d
        L_0x055b:
            r12 = r21
        L_0x055d:
            java.lang.Object r12 = r12.get(r9)     // Catch:{ Exception -> 0x063c }
            org.telegram.tgnet.TLRPC$User r12 = (org.telegram.tgnet.TLRPC$User) r12     // Catch:{ Exception -> 0x063c }
            if (r12 == 0) goto L_0x05b2
            if (r7 != 0) goto L_0x056c
            r19 = r3
            r17 = 1
            goto L_0x0578
        L_0x056c:
            r19 = r3
            r3 = 0
            int r17 = r13.get(r9, r3)     // Catch:{ Exception -> 0x063c }
            if (r17 != 0) goto L_0x0578
        L_0x0575:
            r22 = r2
            goto L_0x05b6
        L_0x0578:
            boolean r3 = r12.bot     // Catch:{ Exception -> 0x063c }
            if (r3 == 0) goto L_0x057f
            int r3 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_BOTS     // Catch:{ Exception -> 0x063c }
            goto L_0x058d
        L_0x057f:
            boolean r3 = r12.self     // Catch:{ Exception -> 0x063c }
            if (r3 != 0) goto L_0x058b
            boolean r3 = r12.contact     // Catch:{ Exception -> 0x063c }
            if (r3 == 0) goto L_0x0588
            goto L_0x058b
        L_0x0588:
            int r3 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS     // Catch:{ Exception -> 0x063c }
            goto L_0x058d
        L_0x058b:
            int r3 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CONTACTS     // Catch:{ Exception -> 0x063c }
        L_0x058d:
            r3 = r3 & r5
            if (r3 == 0) goto L_0x0575
            int r3 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED     // Catch:{ Exception -> 0x063c }
            r3 = r3 & r5
            if (r3 == 0) goto L_0x05a0
            r22 = r2
            long r2 = r12.id     // Catch:{ Exception -> 0x063c }
            int r2 = r15.indexOfKey(r2)     // Catch:{ Exception -> 0x063c }
            if (r2 >= 0) goto L_0x05b6
            goto L_0x05a2
        L_0x05a0:
            r22 = r2
        L_0x05a2:
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED     // Catch:{ Exception -> 0x063c }
            r2 = r2 & r5
            if (r2 == 0) goto L_0x05af
            long r2 = r12.id     // Catch:{ Exception -> 0x063c }
            int r2 = r14.indexOfKey(r2)     // Catch:{ Exception -> 0x063c }
            if (r2 >= 0) goto L_0x05b6
        L_0x05af:
            int r11 = r11 - r17
            goto L_0x05b6
        L_0x05b2:
            r22 = r2
            r19 = r3
        L_0x05b6:
            int r7 = r7 + 1
            r3 = r19
            r2 = r22
            goto L_0x0553
        L_0x05bd:
            r22 = r2
            r19 = r3
            goto L_0x060a
        L_0x05c2:
            r22 = r2
            r19 = r3
            long r2 = -r9
            java.lang.Object r2 = r8.get(r2)     // Catch:{ Exception -> 0x063c }
            org.telegram.tgnet.TLRPC$Chat r2 = (org.telegram.tgnet.TLRPC$Chat) r2     // Catch:{ Exception -> 0x063c }
            if (r2 == 0) goto L_0x060a
            boolean r3 = org.telegram.messenger.ChatObject.isChannel(r2)     // Catch:{ Exception -> 0x063c }
            if (r3 == 0) goto L_0x05dc
            boolean r3 = r2.megagroup     // Catch:{ Exception -> 0x063c }
            if (r3 != 0) goto L_0x05dc
            int r3 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CHANNELS     // Catch:{ Exception -> 0x063c }
            goto L_0x05de
        L_0x05dc:
            int r3 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_GROUPS     // Catch:{ Exception -> 0x063c }
        L_0x05de:
            r3 = r3 & r5
            if (r3 == 0) goto L_0x060a
            int r3 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED     // Catch:{ Exception -> 0x063c }
            r3 = r3 & r5
            if (r3 == 0) goto L_0x05ef
            long r9 = r2.id     // Catch:{ Exception -> 0x063c }
            long r9 = -r9
            int r3 = r15.indexOfKey(r9)     // Catch:{ Exception -> 0x063c }
            if (r3 >= 0) goto L_0x060a
        L_0x05ef:
            int r3 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED     // Catch:{ Exception -> 0x063c }
            r3 = r3 & r5
            if (r3 == 0) goto L_0x0608
            long r9 = r2.id     // Catch:{ Exception -> 0x063c }
            long r9 = -r9
            int r3 = r14.indexOfKey(r9)     // Catch:{ Exception -> 0x063c }
            if (r3 < 0) goto L_0x0608
            androidx.collection.LongSparseArray<java.lang.Integer> r3 = r1.dialogsWithMentions     // Catch:{ Exception -> 0x063c }
            long r9 = r2.id     // Catch:{ Exception -> 0x063c }
            long r9 = -r9
            int r2 = r3.indexOfKey(r9)     // Catch:{ Exception -> 0x063c }
            if (r2 < 0) goto L_0x060a
        L_0x0608:
            int r11 = r11 + -1
        L_0x060a:
            int r6 = r6 + 1
            r3 = r19
            r2 = r22
            goto L_0x053e
        L_0x0612:
            r22 = r2
            r4.pendingUnreadCount = r11     // Catch:{ Exception -> 0x063c }
            if (r25 == 0) goto L_0x061a
            r4.unreadCount = r11     // Catch:{ Exception -> 0x063c }
        L_0x061a:
            r2 = r22
            goto L_0x0634
        L_0x061d:
            r18 = r3
            r21 = r10
            if (r2 != r0) goto L_0x062a
            r1.pendingMainUnreadCount = r6     // Catch:{ Exception -> 0x063c }
            if (r25 == 0) goto L_0x0634
            r1.mainUnreadCount = r6     // Catch:{ Exception -> 0x063c }
            goto L_0x0634
        L_0x062a:
            int r3 = r0 + 1
            if (r2 != r3) goto L_0x0634
            r1.pendingArchiveUnreadCount = r6     // Catch:{ Exception -> 0x063c }
            if (r25 == 0) goto L_0x0634
            r1.archiveUnreadCount = r6     // Catch:{ Exception -> 0x063c }
        L_0x0634:
            int r2 = r2 + 1
            r3 = r18
            r10 = r21
            goto L_0x0300
        L_0x063c:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
        L_0x0640:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.calcUnreadCounters(boolean):void");
    }

    private void saveDialogFilterInternal(MessagesController.DialogFilter dialogFilter, boolean z, boolean z2) {
        try {
            if (!this.dialogFilters.contains(dialogFilter)) {
                if (z) {
                    this.dialogFilters.add(0, dialogFilter);
                } else {
                    this.dialogFilters.add(dialogFilter);
                }
                this.dialogFiltersMap.put(dialogFilter.id, dialogFilter);
            }
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO dialog_filter VALUES(?, ?, ?, ?, ?)");
            executeFast.bindInteger(1, dialogFilter.id);
            executeFast.bindInteger(2, dialogFilter.order);
            executeFast.bindInteger(3, dialogFilter.unreadCount);
            executeFast.bindInteger(4, dialogFilter.flags);
            executeFast.bindString(5, dialogFilter.name);
            executeFast.step();
            executeFast.dispose();
            if (z2) {
                SQLiteDatabase sQLiteDatabase = this.database;
                sQLiteDatabase.executeFast("DELETE FROM dialog_filter_ep WHERE id = " + dialogFilter.id).stepThis().dispose();
                SQLiteDatabase sQLiteDatabase2 = this.database;
                sQLiteDatabase2.executeFast("DELETE FROM dialog_filter_pin_v2 WHERE id = " + dialogFilter.id).stepThis().dispose();
                this.database.beginTransaction();
                SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO dialog_filter_pin_v2 VALUES(?, ?, ?)");
                int size = dialogFilter.alwaysShow.size();
                for (int i = 0; i < size; i++) {
                    long longValue = dialogFilter.alwaysShow.get(i).longValue();
                    executeFast2.requery();
                    executeFast2.bindInteger(1, dialogFilter.id);
                    executeFast2.bindLong(2, longValue);
                    executeFast2.bindInteger(3, dialogFilter.pinnedDialogs.get(longValue, Integer.MIN_VALUE));
                    executeFast2.step();
                }
                int size2 = dialogFilter.pinnedDialogs.size();
                for (int i2 = 0; i2 < size2; i2++) {
                    long keyAt = dialogFilter.pinnedDialogs.keyAt(i2);
                    if (DialogObject.isEncryptedDialog(keyAt)) {
                        executeFast2.requery();
                        executeFast2.bindInteger(1, dialogFilter.id);
                        executeFast2.bindLong(2, keyAt);
                        executeFast2.bindInteger(3, dialogFilter.pinnedDialogs.valueAt(i2));
                        executeFast2.step();
                    }
                }
                executeFast2.dispose();
                SQLitePreparedStatement executeFast3 = this.database.executeFast("REPLACE INTO dialog_filter_ep VALUES(?, ?)");
                int size3 = dialogFilter.neverShow.size();
                for (int i3 = 0; i3 < size3; i3++) {
                    executeFast3.requery();
                    executeFast3.bindInteger(1, dialogFilter.id);
                    executeFast3.bindLong(2, dialogFilter.neverShow.get(i3).longValue());
                    executeFast3.step();
                }
                executeFast3.dispose();
                this.database.commitTransaction();
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void checkLoadedRemoteFilters(TLRPC$Vector tLRPC$Vector) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda181(this, tLRPC$Vector));
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Removed duplicated region for block: B:174:0x0382 A[Catch:{ Exception -> 0x05fc }] */
    /* JADX WARNING: Removed duplicated region for block: B:175:0x0391 A[Catch:{ Exception -> 0x05fc }] */
    /* JADX WARNING: Removed duplicated region for block: B:178:0x039b A[Catch:{ Exception -> 0x05fc }] */
    /* JADX WARNING: Removed duplicated region for block: B:179:0x03a7 A[Catch:{ Exception -> 0x05fc }] */
    /* JADX WARNING: Removed duplicated region for block: B:181:0x03ad A[Catch:{ Exception -> 0x05fc }] */
    /* JADX WARNING: Removed duplicated region for block: B:182:0x03b3 A[Catch:{ Exception -> 0x05fc }] */
    /* JADX WARNING: Removed duplicated region for block: B:184:0x03b7 A[Catch:{ Exception -> 0x05fc }] */
    /* JADX WARNING: Removed duplicated region for block: B:185:0x03c3 A[Catch:{ Exception -> 0x05fc }] */
    /* JADX WARNING: Removed duplicated region for block: B:90:0x0192 A[Catch:{ Exception -> 0x05fc }] */
    /* JADX WARNING: Removed duplicated region for block: B:98:0x01b6 A[Catch:{ Exception -> 0x05fc }] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$checkLoadedRemoteFilters$51(org.telegram.tgnet.TLRPC$Vector r39) {
        /*
            r38 = this;
            r12 = r38
            r0 = r39
            android.util.SparseArray r7 = new android.util.SparseArray     // Catch:{ Exception -> 0x0600 }
            r7.<init>()     // Catch:{ Exception -> 0x0600 }
            java.util.ArrayList<org.telegram.messenger.MessagesController$DialogFilter> r1 = r12.dialogFilters     // Catch:{ Exception -> 0x0600 }
            int r1 = r1.size()     // Catch:{ Exception -> 0x0600 }
            r3 = 0
        L_0x0010:
            if (r3 >= r1) goto L_0x0022
            java.util.ArrayList<org.telegram.messenger.MessagesController$DialogFilter> r4 = r12.dialogFilters     // Catch:{ Exception -> 0x0600 }
            java.lang.Object r4 = r4.get(r3)     // Catch:{ Exception -> 0x0600 }
            org.telegram.messenger.MessagesController$DialogFilter r4 = (org.telegram.messenger.MessagesController.DialogFilter) r4     // Catch:{ Exception -> 0x0600 }
            int r5 = r4.id     // Catch:{ Exception -> 0x0600 }
            r7.put(r5, r4)     // Catch:{ Exception -> 0x0600 }
            int r3 = r3 + 1
            goto L_0x0010
        L_0x0022:
            java.util.ArrayList r8 = new java.util.ArrayList     // Catch:{ Exception -> 0x0600 }
            r8.<init>()     // Catch:{ Exception -> 0x0600 }
            java.util.ArrayList r1 = new java.util.ArrayList     // Catch:{ Exception -> 0x0600 }
            r1.<init>()     // Catch:{ Exception -> 0x0600 }
            java.util.HashMap r15 = new java.util.HashMap     // Catch:{ Exception -> 0x0600 }
            r15.<init>()     // Catch:{ Exception -> 0x0600 }
            java.util.ArrayList r3 = new java.util.ArrayList     // Catch:{ Exception -> 0x0600 }
            r3.<init>()     // Catch:{ Exception -> 0x0600 }
            java.util.HashMap r4 = new java.util.HashMap     // Catch:{ Exception -> 0x0600 }
            r4.<init>()     // Catch:{ Exception -> 0x0600 }
            java.util.ArrayList r5 = new java.util.ArrayList     // Catch:{ Exception -> 0x0600 }
            r5.<init>()     // Catch:{ Exception -> 0x0600 }
            java.util.HashMap r14 = new java.util.HashMap     // Catch:{ Exception -> 0x0600 }
            r14.<init>()     // Catch:{ Exception -> 0x0600 }
            java.util.ArrayList r6 = new java.util.ArrayList     // Catch:{ Exception -> 0x0600 }
            r6.<init>()     // Catch:{ Exception -> 0x0600 }
            java.util.HashMap r10 = new java.util.HashMap     // Catch:{ Exception -> 0x0600 }
            r10.<init>()     // Catch:{ Exception -> 0x0600 }
            java.util.HashMap r9 = new java.util.HashMap     // Catch:{ Exception -> 0x0600 }
            r9.<init>()     // Catch:{ Exception -> 0x0600 }
            java.util.HashSet r11 = new java.util.HashSet     // Catch:{ Exception -> 0x0600 }
            r11.<init>()     // Catch:{ Exception -> 0x0600 }
            java.util.ArrayList<java.lang.Object> r13 = r0.objects     // Catch:{ Exception -> 0x0600 }
            int r13 = r13.size()     // Catch:{ Exception -> 0x0600 }
            r2 = 0
        L_0x0060:
            if (r2 >= r13) goto L_0x0519
            r17 = r13
            java.util.ArrayList<java.lang.Object> r13 = r0.objects     // Catch:{ Exception -> 0x05fc }
            java.lang.Object r13 = r13.get(r2)     // Catch:{ Exception -> 0x05fc }
            org.telegram.tgnet.TLRPC$TL_dialogFilter r13 = (org.telegram.tgnet.TLRPC$TL_dialogFilter) r13     // Catch:{ Exception -> 0x05fc }
            int r0 = r13.id     // Catch:{ Exception -> 0x05fc }
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)     // Catch:{ Exception -> 0x05fc }
            r8.add(r0)     // Catch:{ Exception -> 0x05fc }
            boolean r0 = r13.contacts     // Catch:{ Exception -> 0x05fc }
            if (r0 == 0) goto L_0x0082
            int r0 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CONTACTS     // Catch:{ Exception -> 0x0600 }
            r16 = 0
            r0 = r0 | 0
            r23 = r8
            goto L_0x0087
        L_0x0082:
            r16 = 0
            r23 = r8
            r0 = 0
        L_0x0087:
            boolean r8 = r13.non_contacts     // Catch:{ Exception -> 0x05fc }
            if (r8 == 0) goto L_0x008e
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS     // Catch:{ Exception -> 0x0600 }
            r0 = r0 | r8
        L_0x008e:
            boolean r8 = r13.groups     // Catch:{ Exception -> 0x05fc }
            if (r8 == 0) goto L_0x0095
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_GROUPS     // Catch:{ Exception -> 0x0600 }
            r0 = r0 | r8
        L_0x0095:
            boolean r8 = r13.broadcasts     // Catch:{ Exception -> 0x05fc }
            if (r8 == 0) goto L_0x009c
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CHANNELS     // Catch:{ Exception -> 0x0600 }
            r0 = r0 | r8
        L_0x009c:
            boolean r8 = r13.bots     // Catch:{ Exception -> 0x05fc }
            if (r8 == 0) goto L_0x00a3
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_BOTS     // Catch:{ Exception -> 0x0600 }
            r0 = r0 | r8
        L_0x00a3:
            boolean r8 = r13.exclude_muted     // Catch:{ Exception -> 0x05fc }
            if (r8 == 0) goto L_0x00aa
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED     // Catch:{ Exception -> 0x0600 }
            r0 = r0 | r8
        L_0x00aa:
            boolean r8 = r13.exclude_read     // Catch:{ Exception -> 0x05fc }
            if (r8 == 0) goto L_0x00b1
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_READ     // Catch:{ Exception -> 0x0600 }
            r0 = r0 | r8
        L_0x00b1:
            boolean r8 = r13.exclude_archived     // Catch:{ Exception -> 0x05fc }
            if (r8 == 0) goto L_0x00b8
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED     // Catch:{ Exception -> 0x0600 }
            r0 = r0 | r8
        L_0x00b8:
            android.util.SparseArray<org.telegram.messenger.MessagesController$DialogFilter> r8 = r12.dialogFiltersMap     // Catch:{ Exception -> 0x05fc }
            int r12 = r13.id     // Catch:{ Exception -> 0x05fc }
            java.lang.Object r8 = r8.get(r12)     // Catch:{ Exception -> 0x05fc }
            org.telegram.messenger.MessagesController$DialogFilter r8 = (org.telegram.messenger.MessagesController.DialogFilter) r8     // Catch:{ Exception -> 0x05fc }
            r18 = 0
            r20 = 1
            if (r8 == 0) goto L_0x03cd
            int r12 = r13.id     // Catch:{ Exception -> 0x05fc }
            r7.remove(r12)     // Catch:{ Exception -> 0x05fc }
            java.lang.String r12 = r8.name     // Catch:{ Exception -> 0x05fc }
            r22 = r7
            java.lang.String r7 = r13.title     // Catch:{ Exception -> 0x05fc }
            boolean r7 = android.text.TextUtils.equals(r12, r7)     // Catch:{ Exception -> 0x05fc }
            if (r7 != 0) goto L_0x00df
            java.lang.String r7 = r13.title     // Catch:{ Exception -> 0x05fc }
            r8.name = r7     // Catch:{ Exception -> 0x05fc }
            r7 = 1
            goto L_0x00e0
        L_0x00df:
            r7 = 0
        L_0x00e0:
            int r12 = r8.flags     // Catch:{ Exception -> 0x05fc }
            if (r12 == r0) goto L_0x00e9
            r8.flags = r0     // Catch:{ Exception -> 0x05fc }
            r0 = 1
            r7 = 1
            goto L_0x00ea
        L_0x00e9:
            r0 = 0
        L_0x00ea:
            java.util.HashSet r12 = new java.util.HashSet     // Catch:{ Exception -> 0x05fc }
            r24 = r0
            java.util.ArrayList<java.lang.Long> r0 = r8.alwaysShow     // Catch:{ Exception -> 0x05fc }
            r12.<init>(r0)     // Catch:{ Exception -> 0x05fc }
            java.util.ArrayList<java.lang.Long> r0 = r8.neverShow     // Catch:{ Exception -> 0x05fc }
            r12.addAll(r0)     // Catch:{ Exception -> 0x05fc }
            java.util.HashSet r0 = new java.util.HashSet     // Catch:{ Exception -> 0x05fc }
            r0.<init>()     // Catch:{ Exception -> 0x05fc }
            r25 = 0
            r26 = r7
            org.telegram.messenger.support.LongSparseIntArray r7 = r8.pinnedDialogs     // Catch:{ Exception -> 0x05fc }
            int r7 = r7.size()     // Catch:{ Exception -> 0x05fc }
            if (r7 == 0) goto L_0x0181
            java.util.ArrayList r7 = new java.util.ArrayList     // Catch:{ Exception -> 0x05fc }
            r7.<init>()     // Catch:{ Exception -> 0x05fc }
            r27 = r2
            org.telegram.messenger.support.LongSparseIntArray r2 = r8.pinnedDialogs     // Catch:{ Exception -> 0x05fc }
            int r2 = r2.size()     // Catch:{ Exception -> 0x05fc }
            r28 = r11
            r11 = 0
            r29 = 0
        L_0x011b:
            if (r11 >= r2) goto L_0x0139
            r30 = r2
            org.telegram.messenger.support.LongSparseIntArray r2 = r8.pinnedDialogs     // Catch:{ Exception -> 0x05fc }
            long r31 = r2.keyAt(r11)     // Catch:{ Exception -> 0x05fc }
            boolean r2 = org.telegram.messenger.DialogObject.isEncryptedDialog(r31)     // Catch:{ Exception -> 0x05fc }
            if (r2 == 0) goto L_0x012d
            r29 = 1
        L_0x012d:
            java.lang.Long r2 = java.lang.Long.valueOf(r31)     // Catch:{ Exception -> 0x05fc }
            r7.add(r2)     // Catch:{ Exception -> 0x05fc }
            int r11 = r11 + 1
            r2 = r30
            goto L_0x011b
        L_0x0139:
            if (r29 == 0) goto L_0x017e
            java.util.LinkedHashMap r2 = new java.util.LinkedHashMap     // Catch:{ Exception -> 0x05fc }
            r2.<init>()     // Catch:{ Exception -> 0x05fc }
            org.telegram.messenger.support.LongSparseIntArray r11 = r8.pinnedDialogs     // Catch:{ Exception -> 0x05fc }
            r29 = r6
            org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda200 r6 = new org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda200     // Catch:{ Exception -> 0x05fc }
            r6.<init>(r11)     // Catch:{ Exception -> 0x05fc }
            java.util.Collections.sort(r7, r6)     // Catch:{ Exception -> 0x05fc }
            int r6 = r7.size()     // Catch:{ Exception -> 0x05fc }
            r11 = 0
        L_0x0151:
            if (r11 >= r6) goto L_0x0189
            java.lang.Object r25 = r7.get(r11)     // Catch:{ Exception -> 0x05fc }
            java.lang.Long r25 = (java.lang.Long) r25     // Catch:{ Exception -> 0x05fc }
            long r30 = r25.longValue()     // Catch:{ Exception -> 0x05fc }
            boolean r25 = org.telegram.messenger.DialogObject.isEncryptedDialog(r30)     // Catch:{ Exception -> 0x05fc }
            if (r25 != 0) goto L_0x0168
            r25 = r6
            r32 = r7
            goto L_0x0177
        L_0x0168:
            r25 = r6
            java.lang.Integer r6 = java.lang.Integer.valueOf(r11)     // Catch:{ Exception -> 0x05fc }
            r32 = r7
            java.lang.Long r7 = java.lang.Long.valueOf(r30)     // Catch:{ Exception -> 0x05fc }
            r2.put(r6, r7)     // Catch:{ Exception -> 0x05fc }
        L_0x0177:
            int r11 = r11 + 1
            r6 = r25
            r7 = r32
            goto L_0x0151
        L_0x017e:
            r29 = r6
            goto L_0x0187
        L_0x0181:
            r27 = r2
            r29 = r6
            r28 = r11
        L_0x0187:
            r2 = r25
        L_0x0189:
            org.telegram.messenger.support.LongSparseIntArray r6 = r8.pinnedDialogs     // Catch:{ Exception -> 0x05fc }
            int r6 = r6.size()     // Catch:{ Exception -> 0x05fc }
            r7 = 0
        L_0x0190:
            if (r7 >= r6) goto L_0x01b0
            org.telegram.messenger.support.LongSparseIntArray r11 = r8.pinnedDialogs     // Catch:{ Exception -> 0x05fc }
            long r30 = r11.keyAt(r7)     // Catch:{ Exception -> 0x05fc }
            boolean r11 = org.telegram.messenger.DialogObject.isEncryptedDialog(r30)     // Catch:{ Exception -> 0x05fc }
            if (r11 == 0) goto L_0x019f
            goto L_0x01ad
        L_0x019f:
            java.lang.Long r11 = java.lang.Long.valueOf(r30)     // Catch:{ Exception -> 0x05fc }
            r0.add(r11)     // Catch:{ Exception -> 0x05fc }
            java.lang.Long r11 = java.lang.Long.valueOf(r30)     // Catch:{ Exception -> 0x05fc }
            r12.remove(r11)     // Catch:{ Exception -> 0x05fc }
        L_0x01ad:
            int r7 = r7 + 1
            goto L_0x0190
        L_0x01b0:
            r7 = r26
            r6 = 0
        L_0x01b3:
            r11 = 2
            if (r6 >= r11) goto L_0x0373
            if (r6 != 0) goto L_0x01bb
            java.util.ArrayList<org.telegram.tgnet.TLRPC$InputPeer> r11 = r13.include_peers     // Catch:{ Exception -> 0x05fc }
            goto L_0x01bd
        L_0x01bb:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$InputPeer> r11 = r13.exclude_peers     // Catch:{ Exception -> 0x05fc }
        L_0x01bd:
            r25 = r7
            if (r6 != 0) goto L_0x01c4
            java.util.ArrayList<java.lang.Long> r7 = r8.alwaysShow     // Catch:{ Exception -> 0x05fc }
            goto L_0x01c6
        L_0x01c4:
            java.util.ArrayList<java.lang.Long> r7 = r8.neverShow     // Catch:{ Exception -> 0x05fc }
        L_0x01c6:
            if (r6 != 0) goto L_0x02b8
            r26 = r9
            org.telegram.messenger.support.LongSparseIntArray r9 = r8.pinnedDialogs     // Catch:{ Exception -> 0x05fc }
            r9.clear()     // Catch:{ Exception -> 0x05fc }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$InputPeer> r9 = r13.pinned_peers     // Catch:{ Exception -> 0x05fc }
            int r9 = r9.size()     // Catch:{ Exception -> 0x05fc }
            r30 = r10
            r10 = 0
        L_0x01d8:
            if (r10 >= r9) goto L_0x027f
            r31 = r9
            java.util.ArrayList<org.telegram.tgnet.TLRPC$InputPeer> r9 = r13.pinned_peers     // Catch:{ Exception -> 0x05fc }
            java.lang.Object r9 = r9.get(r10)     // Catch:{ Exception -> 0x05fc }
            org.telegram.tgnet.TLRPC$InputPeer r9 = (org.telegram.tgnet.TLRPC$InputPeer) r9     // Catch:{ Exception -> 0x05fc }
            r32 = r3
            r33 = r4
            long r3 = r9.user_id     // Catch:{ Exception -> 0x05fc }
            int r34 = (r3 > r18 ? 1 : (r3 == r18 ? 0 : -1))
            if (r34 == 0) goto L_0x01f3
            java.lang.Long r3 = java.lang.Long.valueOf(r3)     // Catch:{ Exception -> 0x05fc }
            goto L_0x0201
        L_0x01f3:
            long r3 = r9.chat_id     // Catch:{ Exception -> 0x05fc }
            int r34 = (r3 > r18 ? 1 : (r3 == r18 ? 0 : -1))
            if (r34 == 0) goto L_0x01fa
            goto L_0x01fc
        L_0x01fa:
            long r3 = r9.channel_id     // Catch:{ Exception -> 0x05fc }
        L_0x01fc:
            long r3 = -r3
            java.lang.Long r3 = java.lang.Long.valueOf(r3)     // Catch:{ Exception -> 0x05fc }
        L_0x0201:
            java.util.ArrayList<java.lang.Long> r4 = r8.alwaysShow     // Catch:{ Exception -> 0x05fc }
            boolean r4 = r4.contains(r3)     // Catch:{ Exception -> 0x05fc }
            if (r4 != 0) goto L_0x020e
            java.util.ArrayList<java.lang.Long> r4 = r8.alwaysShow     // Catch:{ Exception -> 0x05fc }
            r4.add(r3)     // Catch:{ Exception -> 0x05fc }
        L_0x020e:
            org.telegram.messenger.support.LongSparseIntArray r4 = r8.pinnedDialogs     // Catch:{ Exception -> 0x05fc }
            int r4 = r4.size()     // Catch:{ Exception -> 0x05fc }
            if (r2 == 0) goto L_0x0243
            r34 = r13
        L_0x0218:
            java.lang.Integer r13 = java.lang.Integer.valueOf(r4)     // Catch:{ Exception -> 0x05fc }
            java.lang.Object r13 = r2.remove(r13)     // Catch:{ Exception -> 0x05fc }
            java.lang.Long r13 = (java.lang.Long) r13     // Catch:{ Exception -> 0x05fc }
            if (r13 == 0) goto L_0x023c
            r35 = r6
            org.telegram.messenger.support.LongSparseIntArray r6 = r8.pinnedDialogs     // Catch:{ Exception -> 0x05fc }
            r36 = r1
            r37 = r2
            long r1 = r13.longValue()     // Catch:{ Exception -> 0x05fc }
            r6.put(r1, r4)     // Catch:{ Exception -> 0x05fc }
            int r4 = r4 + 1
            r6 = r35
            r1 = r36
            r2 = r37
            goto L_0x0218
        L_0x023c:
            r36 = r1
            r37 = r2
            r35 = r6
            goto L_0x024b
        L_0x0243:
            r36 = r1
            r37 = r2
            r35 = r6
            r34 = r13
        L_0x024b:
            org.telegram.messenger.support.LongSparseIntArray r1 = r8.pinnedDialogs     // Catch:{ Exception -> 0x05fc }
            r2 = r7
            long r6 = r3.longValue()     // Catch:{ Exception -> 0x05fc }
            r1.put(r6, r4)     // Catch:{ Exception -> 0x05fc }
            r12.remove(r3)     // Catch:{ Exception -> 0x05fc }
            boolean r1 = r0.remove(r3)     // Catch:{ Exception -> 0x05fc }
            if (r1 != 0) goto L_0x026c
            boolean r1 = r14.containsKey(r3)     // Catch:{ Exception -> 0x05fc }
            if (r1 != 0) goto L_0x026a
            r5.add(r3)     // Catch:{ Exception -> 0x05fc }
            r14.put(r3, r9)     // Catch:{ Exception -> 0x05fc }
        L_0x026a:
            r25 = 1
        L_0x026c:
            int r10 = r10 + 1
            r7 = r2
            r9 = r31
            r3 = r32
            r4 = r33
            r13 = r34
            r6 = r35
            r1 = r36
            r2 = r37
            goto L_0x01d8
        L_0x027f:
            r36 = r1
            r37 = r2
            r32 = r3
            r33 = r4
            r35 = r6
            r2 = r7
            r34 = r13
            if (r37 == 0) goto L_0x02c9
            java.util.Set r1 = r37.entrySet()     // Catch:{ Exception -> 0x05fc }
            java.util.Iterator r1 = r1.iterator()     // Catch:{ Exception -> 0x05fc }
        L_0x0296:
            boolean r3 = r1.hasNext()     // Catch:{ Exception -> 0x05fc }
            if (r3 == 0) goto L_0x02c9
            java.lang.Object r3 = r1.next()     // Catch:{ Exception -> 0x05fc }
            java.util.Map$Entry r3 = (java.util.Map.Entry) r3     // Catch:{ Exception -> 0x05fc }
            org.telegram.messenger.support.LongSparseIntArray r4 = r8.pinnedDialogs     // Catch:{ Exception -> 0x05fc }
            java.lang.Object r3 = r3.getValue()     // Catch:{ Exception -> 0x05fc }
            java.lang.Long r3 = (java.lang.Long) r3     // Catch:{ Exception -> 0x05fc }
            long r6 = r3.longValue()     // Catch:{ Exception -> 0x05fc }
            org.telegram.messenger.support.LongSparseIntArray r3 = r8.pinnedDialogs     // Catch:{ Exception -> 0x05fc }
            int r3 = r3.size()     // Catch:{ Exception -> 0x05fc }
            r4.put(r6, r3)     // Catch:{ Exception -> 0x05fc }
            goto L_0x0296
        L_0x02b8:
            r36 = r1
            r37 = r2
            r32 = r3
            r33 = r4
            r35 = r6
            r2 = r7
            r26 = r9
            r30 = r10
            r34 = r13
        L_0x02c9:
            r7 = r25
            int r1 = r11.size()     // Catch:{ Exception -> 0x05fc }
            r3 = 0
        L_0x02d0:
            if (r3 >= r1) goto L_0x035d
            java.lang.Object r4 = r11.get(r3)     // Catch:{ Exception -> 0x05fc }
            org.telegram.tgnet.TLRPC$InputPeer r4 = (org.telegram.tgnet.TLRPC$InputPeer) r4     // Catch:{ Exception -> 0x05fc }
            long r9 = r4.user_id     // Catch:{ Exception -> 0x05fc }
            int r6 = (r9 > r18 ? 1 : (r9 == r18 ? 0 : -1))
            if (r6 == 0) goto L_0x0310
            java.lang.Long r6 = java.lang.Long.valueOf(r9)     // Catch:{ Exception -> 0x05fc }
            boolean r9 = r12.remove(r6)     // Catch:{ Exception -> 0x05fc }
            if (r9 != 0) goto L_0x0307
            boolean r7 = r2.contains(r6)     // Catch:{ Exception -> 0x05fc }
            if (r7 != 0) goto L_0x02f1
            r2.add(r6)     // Catch:{ Exception -> 0x05fc }
        L_0x02f1:
            boolean r7 = r15.containsKey(r6)     // Catch:{ Exception -> 0x05fc }
            if (r7 != 0) goto L_0x0303
            r9 = r36
            r9.add(r6)     // Catch:{ Exception -> 0x05fc }
            r15.put(r6, r4)     // Catch:{ Exception -> 0x05fc }
            r7 = 1
            r24 = 1
            goto L_0x0309
        L_0x0303:
            r9 = r36
            r7 = 1
            goto L_0x0309
        L_0x0307:
            r9 = r36
        L_0x0309:
            r13 = r7
            r7 = r11
        L_0x030b:
            r11 = r32
            r10 = r33
            goto L_0x0351
        L_0x0310:
            r10 = r7
            r9 = r36
            long r6 = r4.chat_id     // Catch:{ Exception -> 0x05fc }
            int r13 = (r6 > r18 ? 1 : (r6 == r18 ? 0 : -1))
            if (r13 == 0) goto L_0x031a
            goto L_0x031c
        L_0x031a:
            long r6 = r4.channel_id     // Catch:{ Exception -> 0x05fc }
        L_0x031c:
            java.lang.Long r6 = java.lang.Long.valueOf(r6)     // Catch:{ Exception -> 0x05fc }
            r13 = r10
            r7 = r11
            long r10 = r6.longValue()     // Catch:{ Exception -> 0x05fc }
            long r10 = -r10
            java.lang.Long r10 = java.lang.Long.valueOf(r10)     // Catch:{ Exception -> 0x05fc }
            boolean r11 = r12.remove(r10)     // Catch:{ Exception -> 0x05fc }
            if (r11 != 0) goto L_0x030b
            boolean r11 = r2.contains(r10)     // Catch:{ Exception -> 0x05fc }
            if (r11 != 0) goto L_0x033a
            r2.add(r10)     // Catch:{ Exception -> 0x05fc }
        L_0x033a:
            r10 = r33
            boolean r11 = r10.containsKey(r6)     // Catch:{ Exception -> 0x05fc }
            if (r11 != 0) goto L_0x034e
            r11 = r32
            r11.add(r6)     // Catch:{ Exception -> 0x05fc }
            r10.put(r6, r4)     // Catch:{ Exception -> 0x05fc }
            r13 = 1
            r24 = 1
            goto L_0x0351
        L_0x034e:
            r11 = r32
            r13 = 1
        L_0x0351:
            int r3 = r3 + 1
            r36 = r9
            r33 = r10
            r32 = r11
            r11 = r7
            r7 = r13
            goto L_0x02d0
        L_0x035d:
            r13 = r7
            r11 = r32
            r10 = r33
            r9 = r36
            int r6 = r35 + 1
            r1 = r9
            r4 = r10
            r3 = r11
            r9 = r26
            r10 = r30
            r13 = r34
            r2 = r37
            goto L_0x01b3
        L_0x0373:
            r11 = r3
            r25 = r7
            r26 = r9
            r30 = r10
            r9 = r1
            r10 = r4
            boolean r1 = r12.isEmpty()     // Catch:{ Exception -> 0x05fc }
            if (r1 != 0) goto L_0x0391
            int r1 = r8.id     // Catch:{ Exception -> 0x05fc }
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)     // Catch:{ Exception -> 0x05fc }
            r13 = r30
            r13.put(r1, r12)     // Catch:{ Exception -> 0x05fc }
            r7 = 1
            r24 = 1
            goto L_0x0395
        L_0x0391:
            r13 = r30
            r7 = r25
        L_0x0395:
            boolean r1 = r0.isEmpty()     // Catch:{ Exception -> 0x05fc }
            if (r1 != 0) goto L_0x03a7
            int r1 = r8.id     // Catch:{ Exception -> 0x05fc }
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)     // Catch:{ Exception -> 0x05fc }
            r12 = r26
            r12.put(r1, r0)     // Catch:{ Exception -> 0x05fc }
            goto L_0x03ab
        L_0x03a7:
            r12 = r26
            r20 = r7
        L_0x03ab:
            if (r20 == 0) goto L_0x03b3
            r6 = r29
            r6.add(r8)     // Catch:{ Exception -> 0x05fc }
            goto L_0x03b5
        L_0x03b3:
            r6 = r29
        L_0x03b5:
            if (r24 == 0) goto L_0x03c3
            int r0 = r8.id     // Catch:{ Exception -> 0x05fc }
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)     // Catch:{ Exception -> 0x05fc }
            r8 = r28
            r8.add(r0)     // Catch:{ Exception -> 0x05fc }
            goto L_0x03c5
        L_0x03c3:
            r8 = r28
        L_0x03c5:
            r2 = r10
            r3 = r11
            r26 = r12
            r30 = r13
            goto L_0x0503
        L_0x03cd:
            r27 = r2
            r22 = r7
            r12 = r9
            r8 = r11
            r34 = r13
            r9 = r1
            r11 = r3
            r13 = r10
            r10 = r4
            org.telegram.messenger.MessagesController$DialogFilter r1 = new org.telegram.messenger.MessagesController$DialogFilter     // Catch:{ Exception -> 0x05fc }
            r1.<init>()     // Catch:{ Exception -> 0x05fc }
            r2 = r34
            int r3 = r2.id     // Catch:{ Exception -> 0x05fc }
            r1.id = r3     // Catch:{ Exception -> 0x05fc }
            r1.flags = r0     // Catch:{ Exception -> 0x05fc }
            java.lang.String r0 = r2.title     // Catch:{ Exception -> 0x05fc }
            r1.name = r0     // Catch:{ Exception -> 0x05fc }
            r0 = -1
            r1.pendingUnreadCount = r0     // Catch:{ Exception -> 0x05fc }
            r0 = 0
        L_0x03ee:
            r3 = 2
            if (r0 >= r3) goto L_0x04fa
            if (r0 != 0) goto L_0x045f
            java.util.ArrayList<org.telegram.tgnet.TLRPC$InputPeer> r4 = r2.pinned_peers     // Catch:{ Exception -> 0x05fc }
            int r4 = r4.size()     // Catch:{ Exception -> 0x05fc }
            r7 = 0
        L_0x03fa:
            if (r7 >= r4) goto L_0x045f
            java.util.ArrayList<org.telegram.tgnet.TLRPC$InputPeer> r3 = r2.pinned_peers     // Catch:{ Exception -> 0x05fc }
            java.lang.Object r3 = r3.get(r7)     // Catch:{ Exception -> 0x05fc }
            org.telegram.tgnet.TLRPC$InputPeer r3 = (org.telegram.tgnet.TLRPC$InputPeer) r3     // Catch:{ Exception -> 0x05fc }
            r26 = r12
            r30 = r13
            long r12 = r3.user_id     // Catch:{ Exception -> 0x05fc }
            int r24 = (r12 > r18 ? 1 : (r12 == r18 ? 0 : -1))
            if (r24 == 0) goto L_0x0413
            java.lang.Long r12 = java.lang.Long.valueOf(r12)     // Catch:{ Exception -> 0x05fc }
            goto L_0x0421
        L_0x0413:
            long r12 = r3.chat_id     // Catch:{ Exception -> 0x05fc }
            int r24 = (r12 > r18 ? 1 : (r12 == r18 ? 0 : -1))
            if (r24 == 0) goto L_0x041a
            goto L_0x041c
        L_0x041a:
            long r12 = r3.channel_id     // Catch:{ Exception -> 0x05fc }
        L_0x041c:
            long r12 = -r12
            java.lang.Long r12 = java.lang.Long.valueOf(r12)     // Catch:{ Exception -> 0x05fc }
        L_0x0421:
            java.util.ArrayList<java.lang.Long> r13 = r1.alwaysShow     // Catch:{ Exception -> 0x05fc }
            boolean r13 = r13.contains(r12)     // Catch:{ Exception -> 0x05fc }
            if (r13 != 0) goto L_0x042e
            java.util.ArrayList<java.lang.Long> r13 = r1.alwaysShow     // Catch:{ Exception -> 0x05fc }
            r13.add(r12)     // Catch:{ Exception -> 0x05fc }
        L_0x042e:
            org.telegram.messenger.support.LongSparseIntArray r13 = r1.pinnedDialogs     // Catch:{ Exception -> 0x05fc }
            r33 = r10
            r32 = r11
            long r10 = r12.longValue()     // Catch:{ Exception -> 0x05fc }
            r24 = r4
            org.telegram.messenger.support.LongSparseIntArray r4 = r1.pinnedDialogs     // Catch:{ Exception -> 0x05fc }
            int r4 = r4.size()     // Catch:{ Exception -> 0x05fc }
            int r4 = r4 + 1
            r13.put(r10, r4)     // Catch:{ Exception -> 0x05fc }
            boolean r4 = r14.containsKey(r12)     // Catch:{ Exception -> 0x05fc }
            if (r4 != 0) goto L_0x0451
            r5.add(r12)     // Catch:{ Exception -> 0x05fc }
            r14.put(r12, r3)     // Catch:{ Exception -> 0x05fc }
        L_0x0451:
            int r7 = r7 + 1
            r4 = r24
            r12 = r26
            r13 = r30
            r11 = r32
            r10 = r33
            r3 = 2
            goto L_0x03fa
        L_0x045f:
            r33 = r10
            r32 = r11
            r26 = r12
            r30 = r13
            if (r0 != 0) goto L_0x046c
            java.util.ArrayList<org.telegram.tgnet.TLRPC$InputPeer> r3 = r2.include_peers     // Catch:{ Exception -> 0x05fc }
            goto L_0x046e
        L_0x046c:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$InputPeer> r3 = r2.exclude_peers     // Catch:{ Exception -> 0x05fc }
        L_0x046e:
            if (r0 != 0) goto L_0x0473
            java.util.ArrayList<java.lang.Long> r4 = r1.alwaysShow     // Catch:{ Exception -> 0x05fc }
            goto L_0x0475
        L_0x0473:
            java.util.ArrayList<java.lang.Long> r4 = r1.neverShow     // Catch:{ Exception -> 0x05fc }
        L_0x0475:
            int r7 = r3.size()     // Catch:{ Exception -> 0x05fc }
            r10 = 0
        L_0x047a:
            if (r10 >= r7) goto L_0x04e8
            java.lang.Object r11 = r3.get(r10)     // Catch:{ Exception -> 0x05fc }
            org.telegram.tgnet.TLRPC$InputPeer r11 = (org.telegram.tgnet.TLRPC$InputPeer) r11     // Catch:{ Exception -> 0x05fc }
            long r12 = r11.user_id     // Catch:{ Exception -> 0x05fc }
            int r24 = (r12 > r18 ? 1 : (r12 == r18 ? 0 : -1))
            if (r24 == 0) goto L_0x04a9
            java.lang.Long r12 = java.lang.Long.valueOf(r12)     // Catch:{ Exception -> 0x05fc }
            boolean r13 = r4.contains(r12)     // Catch:{ Exception -> 0x05fc }
            if (r13 != 0) goto L_0x0495
            r4.add(r12)     // Catch:{ Exception -> 0x05fc }
        L_0x0495:
            boolean r13 = r15.containsKey(r12)     // Catch:{ Exception -> 0x05fc }
            if (r13 != 0) goto L_0x04a1
            r9.add(r12)     // Catch:{ Exception -> 0x05fc }
            r15.put(r12, r11)     // Catch:{ Exception -> 0x05fc }
        L_0x04a1:
            r34 = r2
            r13 = r3
            r3 = r32
            r2 = r33
            goto L_0x04de
        L_0x04a9:
            long r12 = r11.chat_id     // Catch:{ Exception -> 0x05fc }
            int r24 = (r12 > r18 ? 1 : (r12 == r18 ? 0 : -1))
            if (r24 == 0) goto L_0x04b0
            goto L_0x04b2
        L_0x04b0:
            long r12 = r11.channel_id     // Catch:{ Exception -> 0x05fc }
        L_0x04b2:
            java.lang.Long r12 = java.lang.Long.valueOf(r12)     // Catch:{ Exception -> 0x05fc }
            r34 = r2
            r13 = r3
            long r2 = r12.longValue()     // Catch:{ Exception -> 0x05fc }
            long r2 = -r2
            java.lang.Long r2 = java.lang.Long.valueOf(r2)     // Catch:{ Exception -> 0x05fc }
            boolean r3 = r4.contains(r2)     // Catch:{ Exception -> 0x05fc }
            if (r3 != 0) goto L_0x04cb
            r4.add(r2)     // Catch:{ Exception -> 0x05fc }
        L_0x04cb:
            r2 = r33
            boolean r3 = r2.containsKey(r12)     // Catch:{ Exception -> 0x05fc }
            if (r3 != 0) goto L_0x04dc
            r3 = r32
            r3.add(r12)     // Catch:{ Exception -> 0x05fc }
            r2.put(r12, r11)     // Catch:{ Exception -> 0x05fc }
            goto L_0x04de
        L_0x04dc:
            r3 = r32
        L_0x04de:
            int r10 = r10 + 1
            r33 = r2
            r32 = r3
            r3 = r13
            r2 = r34
            goto L_0x047a
        L_0x04e8:
            r34 = r2
            r3 = r32
            r2 = r33
            int r0 = r0 + 1
            r10 = r2
            r11 = r3
            r12 = r26
            r13 = r30
            r2 = r34
            goto L_0x03ee
        L_0x04fa:
            r2 = r10
            r3 = r11
            r26 = r12
            r30 = r13
            r6.add(r1)     // Catch:{ Exception -> 0x05fc }
        L_0x0503:
            int r0 = r27 + 1
            r12 = r38
            r4 = r2
            r11 = r8
            r1 = r9
            r13 = r17
            r7 = r22
            r8 = r23
            r9 = r26
            r10 = r30
            r2 = r0
            r0 = r39
            goto L_0x0060
        L_0x0519:
            r2 = r4
            r22 = r7
            r23 = r8
            r26 = r9
            r30 = r10
            r8 = r11
            r16 = 0
            r9 = r1
            boolean r0 = r5.isEmpty()     // Catch:{ Exception -> 0x05fc }
            java.lang.String r1 = ","
            if (r0 != 0) goto L_0x055a
            java.lang.String r0 = android.text.TextUtils.join(r1, r5)     // Catch:{ Exception -> 0x05fc }
            java.util.ArrayList r4 = new java.util.ArrayList     // Catch:{ Exception -> 0x05fc }
            r4.<init>()     // Catch:{ Exception -> 0x05fc }
            r12 = r38
            org.telegram.tgnet.TLRPC$messages_Dialogs r0 = r12.loadDialogsByIds(r0, r9, r3, r4)     // Catch:{ Exception -> 0x0600 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r4 = r0.dialogs     // Catch:{ Exception -> 0x0600 }
            int r4 = r4.size()     // Catch:{ Exception -> 0x0600 }
            r5 = 0
        L_0x0544:
            if (r5 >= r4) goto L_0x0561
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r7 = r0.dialogs     // Catch:{ Exception -> 0x0600 }
            java.lang.Object r7 = r7.get(r5)     // Catch:{ Exception -> 0x0600 }
            org.telegram.tgnet.TLRPC$Dialog r7 = (org.telegram.tgnet.TLRPC$Dialog) r7     // Catch:{ Exception -> 0x0600 }
            long r10 = r7.id     // Catch:{ Exception -> 0x0600 }
            java.lang.Long r7 = java.lang.Long.valueOf(r10)     // Catch:{ Exception -> 0x0600 }
            r14.remove(r7)     // Catch:{ Exception -> 0x0600 }
            int r5 = r5 + 1
            goto L_0x0544
        L_0x055a:
            r12 = r38
            org.telegram.tgnet.TLRPC$TL_messages_dialogs r0 = new org.telegram.tgnet.TLRPC$TL_messages_dialogs     // Catch:{ Exception -> 0x0600 }
            r0.<init>()     // Catch:{ Exception -> 0x0600 }
        L_0x0561:
            r17 = r0
            java.util.ArrayList r0 = new java.util.ArrayList     // Catch:{ Exception -> 0x0600 }
            r0.<init>()     // Catch:{ Exception -> 0x0600 }
            boolean r4 = r9.isEmpty()     // Catch:{ Exception -> 0x0600 }
            if (r4 != 0) goto L_0x058e
            java.lang.String r4 = android.text.TextUtils.join(r1, r9)     // Catch:{ Exception -> 0x0600 }
            r12.getUsersInternal(r4, r0)     // Catch:{ Exception -> 0x0600 }
            int r4 = r0.size()     // Catch:{ Exception -> 0x0600 }
            r5 = 0
        L_0x057a:
            if (r5 >= r4) goto L_0x058e
            java.lang.Object r7 = r0.get(r5)     // Catch:{ Exception -> 0x0600 }
            org.telegram.tgnet.TLRPC$User r7 = (org.telegram.tgnet.TLRPC$User) r7     // Catch:{ Exception -> 0x0600 }
            long r9 = r7.id     // Catch:{ Exception -> 0x0600 }
            java.lang.Long r7 = java.lang.Long.valueOf(r9)     // Catch:{ Exception -> 0x0600 }
            r15.remove(r7)     // Catch:{ Exception -> 0x0600 }
            int r5 = r5 + 1
            goto L_0x057a
        L_0x058e:
            java.util.ArrayList r5 = new java.util.ArrayList     // Catch:{ Exception -> 0x0600 }
            r5.<init>()     // Catch:{ Exception -> 0x0600 }
            boolean r4 = r3.isEmpty()     // Catch:{ Exception -> 0x0600 }
            if (r4 != 0) goto L_0x05b9
            java.lang.String r1 = android.text.TextUtils.join(r1, r3)     // Catch:{ Exception -> 0x0600 }
            r12.getChatsInternal(r1, r5)     // Catch:{ Exception -> 0x0600 }
            int r1 = r5.size()     // Catch:{ Exception -> 0x0600 }
            r3 = 0
        L_0x05a5:
            if (r3 >= r1) goto L_0x05b9
            java.lang.Object r4 = r5.get(r3)     // Catch:{ Exception -> 0x0600 }
            org.telegram.tgnet.TLRPC$Chat r4 = (org.telegram.tgnet.TLRPC$Chat) r4     // Catch:{ Exception -> 0x0600 }
            long r9 = r4.id     // Catch:{ Exception -> 0x0600 }
            java.lang.Long r4 = java.lang.Long.valueOf(r9)     // Catch:{ Exception -> 0x0600 }
            r2.remove(r4)     // Catch:{ Exception -> 0x0600 }
            int r3 = r3 + 1
            goto L_0x05a5
        L_0x05b9:
            boolean r1 = r15.isEmpty()     // Catch:{ Exception -> 0x0600 }
            if (r1 == 0) goto L_0x05de
            boolean r1 = r2.isEmpty()     // Catch:{ Exception -> 0x0600 }
            if (r1 == 0) goto L_0x05de
            boolean r1 = r14.isEmpty()     // Catch:{ Exception -> 0x0600 }
            if (r1 == 0) goto L_0x05de
            r3 = 0
            r1 = r38
            r2 = r17
            r4 = r0
            r7 = r22
            r11 = r8
            r8 = r23
            r9 = r26
            r10 = r30
            r1.lambda$processLoadedFilterPeers$53(r2, r3, r4, r5, r6, r7, r8, r9, r10, r11)     // Catch:{ Exception -> 0x0600 }
            goto L_0x0604
        L_0x05de:
            r11 = r8
            org.telegram.messenger.MessagesController r13 = r38.getMessagesController()     // Catch:{ Exception -> 0x0600 }
            org.telegram.tgnet.TLRPC$TL_messages_dialogs r18 = new org.telegram.tgnet.TLRPC$TL_messages_dialogs     // Catch:{ Exception -> 0x0600 }
            r18.<init>()     // Catch:{ Exception -> 0x0600 }
            r1 = r30
            r16 = r2
            r19 = r0
            r20 = r5
            r21 = r6
            r24 = r26
            r25 = r1
            r26 = r11
            r13.loadFilterPeers(r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26)     // Catch:{ Exception -> 0x0600 }
            goto L_0x0604
        L_0x05fc:
            r0 = move-exception
            r12 = r38
            goto L_0x0601
        L_0x0600:
            r0 = move-exception
        L_0x0601:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
        L_0x0604:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$checkLoadedRemoteFilters$51(org.telegram.tgnet.TLRPC$Vector):void");
    }

    /* access modifiers changed from: private */
    public static /* synthetic */ int lambda$checkLoadedRemoteFilters$50(LongSparseIntArray longSparseIntArray, Long l, Long l2) {
        int i = longSparseIntArray.get(l.longValue());
        int i2 = longSparseIntArray.get(l2.longValue());
        if (i > i2) {
            return 1;
        }
        return i < i2 ? -1 : 0;
    }

    /* access modifiers changed from: private */
    /* renamed from: processLoadedFilterPeersInternal */
    public void lambda$processLoadedFilterPeers$53(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, ArrayList<TLRPC$User> arrayList, ArrayList<TLRPC$Chat> arrayList2, ArrayList<MessagesController.DialogFilter> arrayList3, SparseArray<MessagesController.DialogFilter> sparseArray, ArrayList<Integer> arrayList4, HashMap<Integer, HashSet<Long>> hashMap, HashMap<Integer, HashSet<Long>> hashMap2, HashSet<Integer> hashSet) {
        ArrayList<TLRPC$User> arrayList5 = arrayList;
        putUsersAndChats(arrayList, arrayList2, true, false);
        int size = sparseArray.size();
        int i = 0;
        boolean z = false;
        while (i < size) {
            lambda$deleteDialogFilter$54(sparseArray.valueAt(i));
            i++;
            z = true;
        }
        Iterator<Integer> it = hashSet.iterator();
        while (it.hasNext()) {
            MessagesController.DialogFilter dialogFilter = this.dialogFiltersMap.get(it.next().intValue());
            if (dialogFilter != null) {
                dialogFilter.pendingUnreadCount = -1;
            }
        }
        for (Map.Entry next : hashMap2.entrySet()) {
            MessagesController.DialogFilter dialogFilter2 = this.dialogFiltersMap.get(((Integer) next.getKey()).intValue());
            if (dialogFilter2 != null) {
                HashSet hashSet2 = (HashSet) next.getValue();
                dialogFilter2.alwaysShow.removeAll(hashSet2);
                dialogFilter2.neverShow.removeAll(hashSet2);
                z = true;
            }
        }
        for (Map.Entry next2 : hashMap.entrySet()) {
            MessagesController.DialogFilter dialogFilter3 = this.dialogFiltersMap.get(((Integer) next2.getKey()).intValue());
            if (dialogFilter3 != null) {
                Iterator it2 = ((HashSet) next2.getValue()).iterator();
                while (it2.hasNext()) {
                    dialogFilter3.pinnedDialogs.delete(((Long) it2.next()).longValue());
                }
                z = true;
            }
        }
        int size2 = arrayList3.size();
        int i2 = 0;
        while (i2 < size2) {
            saveDialogFilterInternal(arrayList3.get(i2), false, true);
            i2++;
            z = true;
        }
        int size3 = this.dialogFilters.size();
        boolean z2 = false;
        for (int i3 = 0; i3 < size3; i3++) {
            MessagesController.DialogFilter dialogFilter4 = this.dialogFilters.get(i3);
            int indexOf = arrayList4.indexOf(Integer.valueOf(dialogFilter4.id));
            if (dialogFilter4.order != indexOf) {
                dialogFilter4.order = indexOf;
                z2 = true;
                z = true;
            }
        }
        if (z2) {
            Collections.sort(this.dialogFilters, MessagesStorage$$ExternalSyntheticLambda203.INSTANCE);
            saveDialogFiltersOrderInternal();
        }
        int i4 = z ? 1 : 2;
        calcUnreadCounters(true);
        getMessagesController().processLoadedDialogFilters(new ArrayList(this.dialogFilters), tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, (ArrayList<TLRPC$EncryptedChat>) null, i4);
    }

    /* access modifiers changed from: private */
    public static /* synthetic */ int lambda$processLoadedFilterPeersInternal$52(MessagesController.DialogFilter dialogFilter, MessagesController.DialogFilter dialogFilter2) {
        int i = dialogFilter.order;
        int i2 = dialogFilter2.order;
        if (i > i2) {
            return 1;
        }
        return i < i2 ? -1 : 0;
    }

    /* access modifiers changed from: protected */
    public void processLoadedFilterPeers(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, ArrayList<TLRPC$User> arrayList, ArrayList<TLRPC$Chat> arrayList2, ArrayList<MessagesController.DialogFilter> arrayList3, SparseArray<MessagesController.DialogFilter> sparseArray, ArrayList<Integer> arrayList4, HashMap<Integer, HashSet<Long>> hashMap, HashMap<Integer, HashSet<Long>> hashMap2, HashSet<Integer> hashSet) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda184(this, tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap, hashMap2, hashSet));
    }

    /* access modifiers changed from: private */
    /* renamed from: deleteDialogFilterInternal */
    public void lambda$deleteDialogFilter$54(MessagesController.DialogFilter dialogFilter) {
        try {
            this.dialogFilters.remove(dialogFilter);
            this.dialogFiltersMap.remove(dialogFilter.id);
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM dialog_filter WHERE id = " + dialogFilter.id).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase2 = this.database;
            sQLiteDatabase2.executeFast("DELETE FROM dialog_filter_ep WHERE id = " + dialogFilter.id).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase3 = this.database;
            sQLiteDatabase3.executeFast("DELETE FROM dialog_filter_pin_v2 WHERE id = " + dialogFilter.id).stepThis().dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void deleteDialogFilter(MessagesController.DialogFilter dialogFilter) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda157(this, dialogFilter));
    }

    public void saveDialogFilter(MessagesController.DialogFilter dialogFilter, boolean z, boolean z2) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda158(this, dialogFilter, z, z2));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$saveDialogFilter$56(MessagesController.DialogFilter dialogFilter, boolean z, boolean z2) {
        saveDialogFilterInternal(dialogFilter, z, z2);
        calcUnreadCounters(false);
        AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda16(this));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$saveDialogFilter$55() {
        ArrayList<MessagesController.DialogFilter> arrayList = getMessagesController().dialogFilters;
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            arrayList.get(i).unreadCount = arrayList.get(i).pendingUnreadCount;
        }
        this.mainUnreadCount = this.pendingMainUnreadCount;
        this.archiveUnreadCount = this.pendingArchiveUnreadCount;
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(MessagesController.UPDATE_MASK_READ_DIALOG_MESSAGE));
    }

    public void saveDialogFiltersOrderInternal() {
        try {
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE dialog_filter SET ord = ?, flags = ? WHERE id = ?");
            int size = this.dialogFilters.size();
            for (int i = 0; i < size; i++) {
                MessagesController.DialogFilter dialogFilter = this.dialogFilters.get(i);
                executeFast.requery();
                executeFast.bindInteger(1, dialogFilter.order);
                executeFast.bindInteger(2, dialogFilter.flags);
                executeFast.bindInteger(3, dialogFilter.id);
                executeFast.step();
            }
            executeFast.dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void saveDialogFiltersOrder() {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda5(this));
    }

    protected static void addReplyMessages(TLRPC$Message tLRPC$Message, LongSparseArray<SparseArray<ArrayList<TLRPC$Message>>> longSparseArray, LongSparseArray<ArrayList<Integer>> longSparseArray2) {
        int i = tLRPC$Message.reply_to.reply_to_msg_id;
        long replyToDialogId = MessageObject.getReplyToDialogId(tLRPC$Message);
        SparseArray sparseArray = longSparseArray.get(replyToDialogId);
        ArrayList arrayList = longSparseArray2.get(replyToDialogId);
        if (sparseArray == null) {
            sparseArray = new SparseArray();
            longSparseArray.put(replyToDialogId, sparseArray);
        }
        if (arrayList == null) {
            arrayList = new ArrayList();
            longSparseArray2.put(replyToDialogId, arrayList);
        }
        ArrayList arrayList2 = (ArrayList) sparseArray.get(tLRPC$Message.reply_to.reply_to_msg_id);
        if (arrayList2 == null) {
            arrayList2 = new ArrayList();
            sparseArray.put(tLRPC$Message.reply_to.reply_to_msg_id, arrayList2);
            if (!arrayList.contains(Integer.valueOf(tLRPC$Message.reply_to.reply_to_msg_id))) {
                arrayList.add(Integer.valueOf(tLRPC$Message.reply_to.reply_to_msg_id));
            }
        }
        arrayList2.add(tLRPC$Message);
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v3, resolved type: boolean} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v4, resolved type: boolean} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v7, resolved type: boolean} */
    /* access modifiers changed from: protected */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void loadReplyMessages(androidx.collection.LongSparseArray<android.util.SparseArray<java.util.ArrayList<org.telegram.tgnet.TLRPC$Message>>> r18, androidx.collection.LongSparseArray<java.util.ArrayList<java.lang.Integer>> r19, java.util.ArrayList<java.lang.Long> r20, java.util.ArrayList<java.lang.Long> r21) throws org.telegram.SQLite.SQLiteException {
        /*
            r17 = this;
            r0 = r18
            boolean r1 = r18.isEmpty()
            if (r1 == 0) goto L_0x0009
            return
        L_0x0009:
            int r1 = r18.size()
            r2 = 0
            r3 = 0
        L_0x000f:
            if (r3 >= r1) goto L_0x00bf
            long r4 = r0.keyAt(r3)
            java.lang.Object r6 = r0.valueAt(r3)
            android.util.SparseArray r6 = (android.util.SparseArray) r6
            r7 = r19
            java.lang.Object r8 = r7.get(r4)
            java.util.ArrayList r8 = (java.util.ArrayList) r8
            if (r8 != 0) goto L_0x002d
            r9 = r17
            r8 = r20
            r11 = r21
            goto L_0x00ba
        L_0x002d:
            r9 = r17
            org.telegram.SQLite.SQLiteDatabase r10 = r9.database
            java.util.Locale r11 = java.util.Locale.US
            r12 = 2
            java.lang.Object[] r13 = new java.lang.Object[r12]
            java.lang.String r14 = ","
            java.lang.String r8 = android.text.TextUtils.join(r14, r8)
            r13[r2] = r8
            java.lang.Long r4 = java.lang.Long.valueOf(r4)
            r5 = 1
            r13[r5] = r4
            java.lang.String r4 = "SELECT data, mid, date, uid FROM messages_v2 WHERE mid IN(%s) AND uid = %d"
            java.lang.String r4 = java.lang.String.format(r11, r4, r13)
            java.lang.Object[] r8 = new java.lang.Object[r2]
            org.telegram.SQLite.SQLiteCursor r4 = r10.queryFinalized(r4, r8)
        L_0x0051:
            boolean r8 = r4.next()
            if (r8 == 0) goto L_0x00b3
            org.telegram.tgnet.NativeByteBuffer r8 = r4.byteBufferValue(r2)
            if (r8 == 0) goto L_0x00ad
            int r10 = r8.readInt32(r2)
            org.telegram.tgnet.TLRPC$Message r10 = org.telegram.tgnet.TLRPC$Message.TLdeserialize(r8, r10, r2)
            org.telegram.messenger.UserConfig r11 = r17.getUserConfig()
            long r13 = r11.clientUserId
            r10.readAttachPath(r8, r13)
            r8.reuse()
            int r8 = r4.intValue(r5)
            r10.id = r8
            int r8 = r4.intValue(r12)
            r10.date = r8
            r8 = 3
            long r13 = r4.longValue(r8)
            r10.dialog_id = r13
            r8 = r20
            r11 = r21
            addUsersAndChatsFromMessage(r10, r8, r11)
            int r13 = r10.id
            java.lang.Object r13 = r6.get(r13)
            java.util.ArrayList r13 = (java.util.ArrayList) r13
            if (r13 == 0) goto L_0x00b1
            int r14 = r13.size()
            r15 = 0
        L_0x009a:
            if (r15 >= r14) goto L_0x00b1
            java.lang.Object r16 = r13.get(r15)
            r2 = r16
            org.telegram.tgnet.TLRPC$Message r2 = (org.telegram.tgnet.TLRPC$Message) r2
            r2.replyMessage = r10
            org.telegram.messenger.MessageObject.getDialogId(r10)
            int r15 = r15 + 1
            r2 = 0
            goto L_0x009a
        L_0x00ad:
            r8 = r20
            r11 = r21
        L_0x00b1:
            r2 = 0
            goto L_0x0051
        L_0x00b3:
            r8 = r20
            r11 = r21
            r4.dispose()
        L_0x00ba:
            int r3 = r3 + 1
            r2 = 0
            goto L_0x000f
        L_0x00bf:
            r9 = r17
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.loadReplyMessages(androidx.collection.LongSparseArray, androidx.collection.LongSparseArray, java.util.ArrayList, java.util.ArrayList):void");
    }

    public void loadUnreadMessages() {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda11(this));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadUnreadMessages$58() {
        String str;
        ArrayList arrayList;
        ArrayList arrayList2;
        ArrayList arrayList3;
        LongSparseArray longSparseArray;
        LongSparseArray longSparseArray2;
        ArrayList arrayList4;
        ArrayList arrayList5;
        String str2;
        ArrayList arrayList6;
        int i;
        NativeByteBuffer byteBufferValue;
        try {
            ArrayList arrayList7 = new ArrayList();
            ArrayList arrayList8 = new ArrayList();
            ArrayList arrayList9 = new ArrayList();
            LongSparseArray longSparseArray3 = new LongSparseArray();
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT d.did, d.unread_count, s.flags FROM dialogs as d LEFT JOIN dialog_settings as s ON d.did = s.did WHERE d.unread_count > 0", new Object[0]);
            StringBuilder sb = new StringBuilder();
            int currentTime = getConnectionsManager().getCurrentTime();
            while (true) {
                str = ",";
                if (!queryFinalized.next()) {
                    break;
                }
                long longValue = queryFinalized.longValue(2);
                boolean z = (longValue & 1) != 0;
                int i2 = (int) (longValue >> 32);
                if (queryFinalized.isNull(2) || !z || (i2 != 0 && i2 < currentTime)) {
                    long longValue2 = queryFinalized.longValue(0);
                    if (!DialogObject.isFolderDialogId(longValue2)) {
                        longSparseArray3.put(longValue2, Integer.valueOf(queryFinalized.intValue(1)));
                        if (sb.length() != 0) {
                            sb.append(str);
                        }
                        sb.append(longValue2);
                        if (DialogObject.isEncryptedDialog(longValue2)) {
                            int encryptedChatId = DialogObject.getEncryptedChatId(longValue2);
                            if (!arrayList9.contains(Integer.valueOf(encryptedChatId))) {
                                arrayList9.add(Integer.valueOf(encryptedChatId));
                            }
                        } else if (!DialogObject.isUserDialog(longValue2)) {
                            long j = -longValue2;
                            if (!arrayList8.contains(Long.valueOf(j))) {
                                arrayList8.add(Long.valueOf(j));
                            }
                        } else if (!arrayList7.contains(Long.valueOf(longValue2))) {
                            arrayList7.add(Long.valueOf(longValue2));
                        }
                    }
                }
            }
            queryFinalized.dispose();
            LongSparseArray longSparseArray4 = new LongSparseArray();
            LongSparseArray longSparseArray5 = new LongSparseArray();
            ArrayList arrayList10 = new ArrayList();
            ArrayList arrayList11 = new ArrayList();
            ArrayList arrayList12 = new ArrayList();
            ArrayList arrayList13 = new ArrayList();
            ArrayList arrayList14 = new ArrayList();
            if (sb.length() > 0) {
                SQLiteDatabase sQLiteDatabase = this.database;
                StringBuilder sb2 = new StringBuilder();
                LongSparseArray longSparseArray6 = longSparseArray3;
                sb2.append("SELECT read_state, data, send_state, mid, date, uid, replydata FROM messages_v2 WHERE uid IN (");
                sb2.append(sb.toString());
                sb2.append(") AND out = 0 AND read_state IN(0,2) ORDER BY date DESC LIMIT 50");
                SQLiteCursor queryFinalized2 = sQLiteDatabase.queryFinalized(sb2.toString(), new Object[0]);
                int i3 = 0;
                while (queryFinalized2.next()) {
                    NativeByteBuffer byteBufferValue2 = queryFinalized2.byteBufferValue(1);
                    if (byteBufferValue2 != null) {
                        arrayList6 = arrayList13;
                        TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(false), false);
                        arrayList5 = arrayList12;
                        str2 = str;
                        TLdeserialize.readAttachPath(byteBufferValue2, getUserConfig().clientUserId);
                        byteBufferValue2.reuse();
                        MessageObject.setUnreadFlags(TLdeserialize, queryFinalized2.intValue(0));
                        TLdeserialize.id = queryFinalized2.intValue(3);
                        TLdeserialize.date = queryFinalized2.intValue(4);
                        TLdeserialize.dialog_id = queryFinalized2.longValue(5);
                        arrayList10.add(TLdeserialize);
                        int max = Math.max(i3, TLdeserialize.date);
                        addUsersAndChatsFromMessage(TLdeserialize, arrayList7, arrayList8);
                        TLdeserialize.send_state = queryFinalized2.intValue(2);
                        if ((TLdeserialize.peer_id.channel_id == 0 && !MessageObject.isUnread(TLdeserialize) && !DialogObject.isEncryptedDialog(TLdeserialize.dialog_id)) || TLdeserialize.id > 0) {
                            TLdeserialize.send_state = 0;
                        }
                        if (DialogObject.isEncryptedDialog(TLdeserialize.dialog_id) && !queryFinalized2.isNull(5)) {
                            TLdeserialize.random_id = queryFinalized2.longValue(5);
                        }
                        try {
                            TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader = TLdeserialize.reply_to;
                            if (!(tLRPC$TL_messageReplyHeader == null || tLRPC$TL_messageReplyHeader.reply_to_msg_id == 0)) {
                                TLRPC$MessageAction tLRPC$MessageAction = TLdeserialize.action;
                                if ((tLRPC$MessageAction instanceof TLRPC$TL_messageActionPinMessage) || (tLRPC$MessageAction instanceof TLRPC$TL_messageActionPaymentSent) || (tLRPC$MessageAction instanceof TLRPC$TL_messageActionGameScore)) {
                                    if (queryFinalized2.isNull(6) || (byteBufferValue = queryFinalized2.byteBufferValue(6)) == null) {
                                        i = max;
                                    } else {
                                        TLRPC$Message TLdeserialize2 = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                        TLdeserialize.replyMessage = TLdeserialize2;
                                        i = max;
                                        try {
                                            TLdeserialize2.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                            byteBufferValue.reuse();
                                            TLRPC$Message tLRPC$Message = TLdeserialize.replyMessage;
                                            if (tLRPC$Message != null) {
                                                addUsersAndChatsFromMessage(tLRPC$Message, arrayList7, arrayList8);
                                            }
                                        } catch (Exception e) {
                                            e = e;
                                            FileLog.e((Throwable) e);
                                            i3 = i;
                                            arrayList13 = arrayList6;
                                            str = str2;
                                            arrayList12 = arrayList5;
                                        }
                                    }
                                    if (TLdeserialize.replyMessage == null) {
                                        addReplyMessages(TLdeserialize, longSparseArray4, longSparseArray5);
                                    }
                                    i3 = i;
                                }
                            }
                            i = max;
                        } catch (Exception e2) {
                            e = e2;
                            i = max;
                            FileLog.e((Throwable) e);
                            i3 = i;
                            arrayList13 = arrayList6;
                            str = str2;
                            arrayList12 = arrayList5;
                        }
                        i3 = i;
                    } else {
                        arrayList5 = arrayList12;
                        str2 = str;
                        arrayList6 = arrayList13;
                    }
                    arrayList13 = arrayList6;
                    str = str2;
                    arrayList12 = arrayList5;
                }
                ArrayList arrayList15 = arrayList12;
                String str3 = str;
                ArrayList arrayList16 = arrayList13;
                queryFinalized2.dispose();
                this.database.executeFast("DELETE FROM unread_push_messages WHERE date <= " + i3).stepThis().dispose();
                boolean z2 = false;
                SQLiteCursor queryFinalized3 = this.database.queryFinalized("SELECT data, mid, date, uid, random, fm, name, uname, flags FROM unread_push_messages WHERE 1 ORDER BY date DESC LIMIT 50", new Object[0]);
                while (queryFinalized3.next()) {
                    NativeByteBuffer byteBufferValue3 = queryFinalized3.byteBufferValue(z2 ? 1 : 0);
                    if (byteBufferValue3 != null) {
                        TLRPC$Message TLdeserialize3 = TLRPC$Message.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(z2), z2);
                        byteBufferValue3.reuse();
                        TLdeserialize3.id = queryFinalized3.intValue(1);
                        TLdeserialize3.date = queryFinalized3.intValue(2);
                        TLdeserialize3.dialog_id = queryFinalized3.longValue(3);
                        TLdeserialize3.random_id = queryFinalized3.longValue(4);
                        String stringValue = queryFinalized3.isNull(5) ? null : queryFinalized3.stringValue(5);
                        String stringValue2 = queryFinalized3.isNull(6) ? null : queryFinalized3.stringValue(6);
                        String stringValue3 = queryFinalized3.isNull(7) ? null : queryFinalized3.stringValue(7);
                        int intValue = queryFinalized3.intValue(8);
                        if (MessageObject.getFromChatId(TLdeserialize3) != 0 || !DialogObject.isUserDialog(TLdeserialize3.dialog_id)) {
                            arrayList4 = arrayList14;
                        } else {
                            TLRPC$TL_peerUser tLRPC$TL_peerUser = new TLRPC$TL_peerUser();
                            TLdeserialize3.from_id = tLRPC$TL_peerUser;
                            arrayList4 = arrayList14;
                            tLRPC$TL_peerUser.user_id = TLdeserialize3.dialog_id;
                        }
                        if (DialogObject.isUserDialog(TLdeserialize3.dialog_id)) {
                            if (!arrayList7.contains(Long.valueOf(TLdeserialize3.dialog_id))) {
                                arrayList7.add(Long.valueOf(TLdeserialize3.dialog_id));
                            }
                        } else if (DialogObject.isChatDialog(TLdeserialize3.dialog_id) && !arrayList8.contains(Long.valueOf(-TLdeserialize3.dialog_id))) {
                            arrayList8.add(Long.valueOf(-TLdeserialize3.dialog_id));
                        }
                        arrayList11.add(new MessageObject(this.currentAccount, TLdeserialize3, stringValue, stringValue2, stringValue3, (intValue & 1) != 0, (intValue & 2) != 0, (TLdeserialize3.flags & Integer.MIN_VALUE) != 0, false));
                        addUsersAndChatsFromMessage(TLdeserialize3, arrayList7, arrayList8);
                    } else {
                        arrayList4 = arrayList14;
                    }
                    arrayList14 = arrayList4;
                    z2 = false;
                }
                arrayList = arrayList14;
                queryFinalized3.dispose();
                loadReplyMessages(longSparseArray4, longSparseArray5, arrayList7, arrayList8);
                String str4 = str3;
                if (!arrayList9.isEmpty()) {
                    getEncryptedChatsInternal(TextUtils.join(str4, arrayList9), arrayList, arrayList7);
                }
                if (!arrayList7.isEmpty()) {
                    arrayList3 = arrayList15;
                    getUsersInternal(TextUtils.join(str4, arrayList7), arrayList3);
                } else {
                    arrayList3 = arrayList15;
                }
                if (!arrayList8.isEmpty()) {
                    arrayList2 = arrayList16;
                    getChatsInternal(TextUtils.join(str4, arrayList8), arrayList2);
                    int i4 = 0;
                    while (i4 < arrayList2.size()) {
                        TLRPC$Chat tLRPC$Chat = (TLRPC$Chat) arrayList2.get(i4);
                        if (tLRPC$Chat == null || (!ChatObject.isNotInChat(tLRPC$Chat) && !tLRPC$Chat.min && tLRPC$Chat.migrated_to == null)) {
                            longSparseArray2 = longSparseArray6;
                        } else {
                            long j2 = -tLRPC$Chat.id;
                            this.database.executeFast("UPDATE dialogs SET unread_count = 0 WHERE did = " + j2).stepThis().dispose();
                            this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET read_state = 3 WHERE uid = %d AND mid > 0 AND read_state IN(0,2) AND out = 0", new Object[]{Long.valueOf(j2)})).stepThis().dispose();
                            arrayList2.remove(i4);
                            i4 += -1;
                            longSparseArray2 = longSparseArray6;
                            longSparseArray2.remove(j2);
                            int i5 = 0;
                            while (i5 < arrayList10.size()) {
                                if (((TLRPC$Message) arrayList10.get(i5)).dialog_id == j2) {
                                    arrayList10.remove(i5);
                                    i5--;
                                }
                                i5++;
                            }
                        }
                        i4++;
                        longSparseArray6 = longSparseArray2;
                    }
                    longSparseArray = longSparseArray6;
                } else {
                    longSparseArray = longSparseArray6;
                    arrayList2 = arrayList16;
                }
            } else {
                longSparseArray = longSparseArray3;
                arrayList3 = arrayList12;
                arrayList2 = arrayList13;
                arrayList = arrayList14;
            }
            Collections.reverse(arrayList10);
            AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda121(this, longSparseArray, arrayList10, arrayList11, arrayList3, arrayList2, arrayList));
        } catch (Exception e3) {
            FileLog.e((Throwable) e3);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadUnreadMessages$57(LongSparseArray longSparseArray, ArrayList arrayList, ArrayList arrayList2, ArrayList arrayList3, ArrayList arrayList4, ArrayList arrayList5) {
        getNotificationsController().processLoadedUnreadMessages(longSparseArray, arrayList, arrayList2, arrayList3, arrayList4, arrayList5);
    }

    public void putWallpapers(ArrayList<TLRPC$WallPaper> arrayList, int i) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda53(this, i, arrayList));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$putWallpapers$59(int i, ArrayList arrayList) {
        SQLitePreparedStatement sQLitePreparedStatement;
        if (i == 1) {
            try {
                this.database.executeFast("DELETE FROM wallpapers2 WHERE num >= -1").stepThis().dispose();
            } catch (Exception e) {
                FileLog.e((Throwable) e);
                return;
            }
        }
        this.database.beginTransaction();
        if (i != 0) {
            sQLitePreparedStatement = this.database.executeFast("REPLACE INTO wallpapers2 VALUES(?, ?, ?)");
        } else {
            sQLitePreparedStatement = this.database.executeFast("UPDATE wallpapers2 SET data = ? WHERE uid = ?");
        }
        int size = arrayList.size();
        for (int i2 = 0; i2 < size; i2++) {
            TLRPC$WallPaper tLRPC$WallPaper = (TLRPC$WallPaper) arrayList.get(i2);
            sQLitePreparedStatement.requery();
            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$WallPaper.getObjectSize());
            tLRPC$WallPaper.serializeToStream(nativeByteBuffer);
            if (i != 0) {
                sQLitePreparedStatement.bindLong(1, tLRPC$WallPaper.id);
                sQLitePreparedStatement.bindByteBuffer(2, nativeByteBuffer);
                if (i < 0) {
                    sQLitePreparedStatement.bindInteger(3, i);
                } else {
                    sQLitePreparedStatement.bindInteger(3, i == 2 ? -1 : i2);
                }
            } else {
                sQLitePreparedStatement.bindByteBuffer(1, nativeByteBuffer);
                sQLitePreparedStatement.bindLong(2, tLRPC$WallPaper.id);
            }
            sQLitePreparedStatement.step();
            nativeByteBuffer.reuse();
        }
        sQLitePreparedStatement.dispose();
        this.database.commitTransaction();
    }

    public void deleteWallpaper(long j) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda65(this, j));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteWallpaper$60(long j) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM wallpapers2 WHERE uid = " + j).stepThis().dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void getWallpapers() {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda14(this));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getWallpapers$62() {
        SQLiteCursor sQLiteCursor = null;
        try {
            sQLiteCursor = this.database.queryFinalized("SELECT data FROM wallpapers2 WHERE 1 ORDER BY num ASC", new Object[0]);
            ArrayList arrayList = new ArrayList();
            while (sQLiteCursor.next()) {
                NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(0);
                if (byteBufferValue != null) {
                    TLRPC$WallPaper TLdeserialize = TLRPC$WallPaper.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    byteBufferValue.reuse();
                    if (TLdeserialize != null) {
                        arrayList.add(TLdeserialize);
                    }
                }
            }
            AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda0(arrayList));
        } catch (Exception e) {
            FileLog.e((Throwable) e);
            if (sQLiteCursor == null) {
                return;
            }
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
        sQLiteCursor.dispose();
    }

    public void addRecentLocalFile(String str, String str2, TLRPC$Document tLRPC$Document) {
        if (str != null && str.length() != 0) {
            if ((str2 != null && str2.length() != 0) || tLRPC$Document != null) {
                this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda168(this, tLRPC$Document, str, str2));
            }
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$addRecentLocalFile$63(TLRPC$Document tLRPC$Document, String str, String str2) {
        if (tLRPC$Document != null) {
            try {
                SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE web_recent_v3 SET document = ? WHERE image_url = ?");
                executeFast.requery();
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$Document.getObjectSize());
                tLRPC$Document.serializeToStream(nativeByteBuffer);
                executeFast.bindByteBuffer(1, nativeByteBuffer);
                executeFast.bindString(2, str);
                executeFast.step();
                executeFast.dispose();
                nativeByteBuffer.reuse();
            } catch (Exception e) {
                FileLog.e((Throwable) e);
            }
        } else {
            SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE web_recent_v3 SET local_url = ? WHERE image_url = ?");
            executeFast2.requery();
            executeFast2.bindString(1, str2);
            executeFast2.bindString(2, str);
            executeFast2.step();
            executeFast2.dispose();
        }
    }

    public void deleteUserChatHistory(long j, long j2) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda85(this, j, j2));
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Removed duplicated region for block: B:34:0x00bc A[Catch:{ Exception -> 0x00e1 }] */
    /* JADX WARNING: Removed duplicated region for block: B:35:0x00be A[Catch:{ Exception -> 0x00e1 }] */
    /* JADX WARNING: Removed duplicated region for block: B:38:0x00d8 A[Catch:{ Exception -> 0x00e1 }] */
    /* JADX WARNING: Removed duplicated region for block: B:45:? A[RETURN, SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$deleteUserChatHistory$66(long r18, long r20) {
        /*
            r17 = this;
            r8 = r17
            r9 = r18
            java.util.ArrayList r11 = new java.util.ArrayList     // Catch:{ Exception -> 0x00e1 }
            r11.<init>()     // Catch:{ Exception -> 0x00e1 }
            org.telegram.SQLite.SQLiteDatabase r0 = r8.database     // Catch:{ Exception -> 0x00e1 }
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x00e1 }
            r1.<init>()     // Catch:{ Exception -> 0x00e1 }
            java.lang.String r2 = "SELECT data FROM messages_v2 WHERE uid = "
            r1.append(r2)     // Catch:{ Exception -> 0x00e1 }
            r1.append(r9)     // Catch:{ Exception -> 0x00e1 }
            java.lang.String r1 = r1.toString()     // Catch:{ Exception -> 0x00e1 }
            r12 = 0
            java.lang.Object[] r2 = new java.lang.Object[r12]     // Catch:{ Exception -> 0x00e1 }
            org.telegram.SQLite.SQLiteCursor r7 = r0.queryFinalized(r1, r2)     // Catch:{ Exception -> 0x00e1 }
            java.util.ArrayList r13 = new java.util.ArrayList     // Catch:{ Exception -> 0x00e1 }
            r13.<init>()     // Catch:{ Exception -> 0x00e1 }
            java.util.ArrayList r14 = new java.util.ArrayList     // Catch:{ Exception -> 0x00e1 }
            r14.<init>()     // Catch:{ Exception -> 0x00e1 }
            java.util.ArrayList r15 = new java.util.ArrayList     // Catch:{ Exception -> 0x00e1 }
            r15.<init>()     // Catch:{ Exception -> 0x00e1 }
        L_0x0032:
            r6 = 1
            boolean r0 = r7.next()     // Catch:{ Exception -> 0x0092 }
            if (r0 == 0) goto L_0x0090
            org.telegram.tgnet.NativeByteBuffer r0 = r7.byteBufferValue(r12)     // Catch:{ Exception -> 0x0092 }
            if (r0 == 0) goto L_0x008e
            int r1 = r0.readInt32(r12)     // Catch:{ Exception -> 0x0092 }
            org.telegram.tgnet.TLRPC$Message r2 = org.telegram.tgnet.TLRPC$Message.TLdeserialize(r0, r1, r12)     // Catch:{ Exception -> 0x0092 }
            if (r2 == 0) goto L_0x0087
            org.telegram.messenger.UserConfig r1 = r17.getUserConfig()     // Catch:{ Exception -> 0x0092 }
            long r3 = r1.clientUserId     // Catch:{ Exception -> 0x0092 }
            r2.readAttachPath(r0, r3)     // Catch:{ Exception -> 0x0092 }
            boolean r1 = org.telegram.messenger.UserObject.isReplyUser((long) r18)     // Catch:{ Exception -> 0x0092 }
            if (r1 == 0) goto L_0x0064
            org.telegram.tgnet.TLRPC$MessageFwdHeader r1 = r2.fwd_from     // Catch:{ Exception -> 0x0092 }
            org.telegram.tgnet.TLRPC$Peer r1 = r1.from_id     // Catch:{ Exception -> 0x0092 }
            long r3 = org.telegram.messenger.MessageObject.getPeerId(r1)     // Catch:{ Exception -> 0x0092 }
            int r1 = (r3 > r20 ? 1 : (r3 == r20 ? 0 : -1))
            if (r1 == 0) goto L_0x0070
        L_0x0064:
            long r3 = org.telegram.messenger.MessageObject.getFromChatId(r2)     // Catch:{ Exception -> 0x0092 }
            int r1 = (r3 > r20 ? 1 : (r3 == r20 ? 0 : -1))
            if (r1 != 0) goto L_0x0087
            int r1 = r2.id     // Catch:{ Exception -> 0x0092 }
            if (r1 == r6) goto L_0x0087
        L_0x0070:
            int r1 = r2.id     // Catch:{ Exception -> 0x0092 }
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)     // Catch:{ Exception -> 0x0092 }
            r11.add(r1)     // Catch:{ Exception -> 0x0092 }
            r16 = 0
            r1 = r17
            r3 = r13
            r4 = r15
            r5 = r14
            r12 = 1
            r6 = r16
            r1.addFilesToDelete(r2, r3, r4, r5, r6)     // Catch:{ Exception -> 0x008c }
            goto L_0x0088
        L_0x0087:
            r12 = 1
        L_0x0088:
            r0.reuse()     // Catch:{ Exception -> 0x008c }
            goto L_0x008e
        L_0x008c:
            r0 = move-exception
            goto L_0x0094
        L_0x008e:
            r12 = 0
            goto L_0x0032
        L_0x0090:
            r12 = 1
            goto L_0x0097
        L_0x0092:
            r0 = move-exception
            r12 = 1
        L_0x0094:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ Exception -> 0x00e1 }
        L_0x0097:
            r7.dispose()     // Catch:{ Exception -> 0x00e1 }
            r8.deleteFromDownloadQueue(r15, r12)     // Catch:{ Exception -> 0x00e1 }
            org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda142 r0 = new org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda142     // Catch:{ Exception -> 0x00e1 }
            r1 = r0
            r2 = r17
            r3 = r14
            r4 = r18
            r6 = r11
            r1.<init>(r2, r3, r4, r6)     // Catch:{ Exception -> 0x00e1 }
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r0)     // Catch:{ Exception -> 0x00e1 }
            r5 = 0
            r6 = 0
            r1 = r17
            r2 = r18
            r4 = r11
            r1.lambda$markMessagesAsDeleted$175(r2, r4, r5, r6)     // Catch:{ Exception -> 0x00e1 }
            boolean r0 = org.telegram.messenger.DialogObject.isChatDialog(r18)     // Catch:{ Exception -> 0x00e1 }
            if (r0 == 0) goto L_0x00be
            long r0 = -r9
            goto L_0x00c0
        L_0x00be:
            r0 = 0
        L_0x00c0:
            r4 = r0
            r7 = 0
            r1 = r17
            r2 = r18
            r6 = r11
            r1.lambda$updateDialogsWithDeletedMessages$174(r2, r4, r6, r7)     // Catch:{ Exception -> 0x00e1 }
            org.telegram.messenger.FileLoader r0 = r17.getFileLoader()     // Catch:{ Exception -> 0x00e1 }
            r1 = 0
            r0.deleteFiles(r13, r1)     // Catch:{ Exception -> 0x00e1 }
            boolean r0 = r11.isEmpty()     // Catch:{ Exception -> 0x00e1 }
            if (r0 != 0) goto L_0x00e5
            org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda140 r0 = new org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda140     // Catch:{ Exception -> 0x00e1 }
            r0.<init>(r8, r11, r9)     // Catch:{ Exception -> 0x00e1 }
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r0)     // Catch:{ Exception -> 0x00e1 }
            goto L_0x00e5
        L_0x00e1:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
        L_0x00e5:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$deleteUserChatHistory$66(long, long):void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteUserChatHistory$64(ArrayList arrayList, long j, ArrayList arrayList2) {
        getFileLoader().cancelLoadFiles(arrayList);
        getMessagesController().markDialogMessageAsDeleted(j, arrayList2);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteUserChatHistory$65(ArrayList arrayList, long j) {
        NotificationCenter notificationCenter = getNotificationCenter();
        int i = NotificationCenter.messagesDeleted;
        Object[] objArr = new Object[3];
        objArr[0] = arrayList;
        objArr[1] = Long.valueOf(DialogObject.isChatDialog(j) ? -j : 0);
        objArr[2] = Boolean.FALSE;
        notificationCenter.postNotificationName(i, objArr);
    }

    private boolean addFilesToDelete(TLRPC$Message tLRPC$Message, ArrayList<File> arrayList, ArrayList<Pair<Long, Integer>> arrayList2, ArrayList<String> arrayList3, boolean z) {
        int i;
        long j;
        int i2 = 0;
        if (tLRPC$Message == null) {
            return false;
        }
        TLRPC$Document document = MessageObject.getDocument(tLRPC$Message);
        TLRPC$Photo photo = MessageObject.getPhoto(tLRPC$Message);
        if (!MessageObject.isVoiceMessage(tLRPC$Message)) {
            if (MessageObject.isStickerMessage(tLRPC$Message) || MessageObject.isAnimatedStickerMessage(tLRPC$Message)) {
                if (document == null) {
                    return false;
                }
                j = document.id;
            } else if (MessageObject.isVideoMessage(tLRPC$Message) || MessageObject.isRoundVideoMessage(tLRPC$Message) || MessageObject.isGifMessage(tLRPC$Message)) {
                if (document == null) {
                    return false;
                }
                j = document.id;
                i = 4;
            } else if (document != null) {
                j = document.id;
                i = 8;
            } else if (photo == null || FileLoader.getClosestPhotoSizeWithSize(photo.sizes, AndroidUtilities.getPhotoSize()) == null) {
                j = 0;
                i = 0;
            } else {
                j = photo.id;
            }
            i = 1;
        } else if (document == null) {
            return false;
        } else {
            j = document.id;
            i = 2;
        }
        if (j != 0) {
            arrayList2.add(new Pair(Long.valueOf(j), Integer.valueOf(i)));
        }
        if (photo != null) {
            int size = photo.sizes.size();
            while (i2 < size) {
                TLRPC$PhotoSize tLRPC$PhotoSize = photo.sizes.get(i2);
                String attachFileName = FileLoader.getAttachFileName(tLRPC$PhotoSize);
                if (!TextUtils.isEmpty(attachFileName)) {
                    arrayList3.add(attachFileName);
                }
                File pathToAttach = FileLoader.getPathToAttach(tLRPC$PhotoSize, z);
                if (pathToAttach.toString().length() > 0) {
                    arrayList.add(pathToAttach);
                }
                i2++;
            }
            return true;
        } else if (document == null) {
            return false;
        } else {
            String attachFileName2 = FileLoader.getAttachFileName(document);
            if (!TextUtils.isEmpty(attachFileName2)) {
                arrayList3.add(attachFileName2);
            }
            File pathToAttach2 = FileLoader.getPathToAttach(document, z);
            if (pathToAttach2.toString().length() > 0) {
                arrayList.add(pathToAttach2);
            }
            int size2 = document.thumbs.size();
            while (i2 < size2) {
                File pathToAttach3 = FileLoader.getPathToAttach(document.thumbs.get(i2));
                if (pathToAttach3.toString().length() > 0) {
                    arrayList.add(pathToAttach3);
                }
                i2++;
            }
            return true;
        }
    }

    public void deleteDialog(long j, int i) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda44(this, i, j));
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Removed duplicated region for block: B:39:0x00f0  */
    /* JADX WARNING: Removed duplicated region for block: B:76:0x0286 A[Catch:{ Exception -> 0x0471 }] */
    /* JADX WARNING: Removed duplicated region for block: B:82:0x02a5 A[Catch:{ Exception -> 0x0471 }] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$deleteDialog$69(int r25, long r26) {
        /*
            r24 = this;
            r7 = r24
            r8 = r25
            r9 = r26
            java.lang.String r11 = " AND mid != "
            r12 = 3
            r14 = 0
            if (r8 != r12) goto L_0x0037
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x0471 }
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0471 }
            r1.<init>()     // Catch:{ Exception -> 0x0471 }
            java.lang.String r2 = "SELECT last_mid FROM dialogs WHERE did = "
            r1.append(r2)     // Catch:{ Exception -> 0x0471 }
            r1.append(r9)     // Catch:{ Exception -> 0x0471 }
            java.lang.String r1 = r1.toString()     // Catch:{ Exception -> 0x0471 }
            java.lang.Object[] r2 = new java.lang.Object[r14]     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLiteCursor r0 = r0.queryFinalized(r1, r2)     // Catch:{ Exception -> 0x0471 }
            boolean r1 = r0.next()     // Catch:{ Exception -> 0x0471 }
            if (r1 == 0) goto L_0x0030
            int r1 = r0.intValue(r14)     // Catch:{ Exception -> 0x0471 }
            goto L_0x0031
        L_0x0030:
            r1 = -1
        L_0x0031:
            r0.dispose()     // Catch:{ Exception -> 0x0471 }
            if (r1 == 0) goto L_0x0037
            return
        L_0x0037:
            boolean r0 = org.telegram.messenger.DialogObject.isEncryptedDialog(r26)     // Catch:{ Exception -> 0x0471 }
            r15 = 1
            java.lang.String r6 = "SELECT data FROM messages_v2 WHERE uid = "
            r5 = 2
            if (r0 != 0) goto L_0x0048
            if (r8 != r5) goto L_0x0044
            goto L_0x0048
        L_0x0044:
            r20 = r6
            goto L_0x00dd
        L_0x0048:
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x0471 }
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0471 }
            r1.<init>()     // Catch:{ Exception -> 0x0471 }
            r1.append(r6)     // Catch:{ Exception -> 0x0471 }
            r1.append(r9)     // Catch:{ Exception -> 0x0471 }
            java.lang.String r1 = r1.toString()     // Catch:{ Exception -> 0x0471 }
            java.lang.Object[] r2 = new java.lang.Object[r14]     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLiteCursor r4 = r0.queryFinalized(r1, r2)     // Catch:{ Exception -> 0x0471 }
            java.util.ArrayList r3 = new java.util.ArrayList     // Catch:{ Exception -> 0x0471 }
            r3.<init>()     // Catch:{ Exception -> 0x0471 }
            java.util.ArrayList r2 = new java.util.ArrayList     // Catch:{ Exception -> 0x0471 }
            r2.<init>()     // Catch:{ Exception -> 0x0471 }
            java.util.ArrayList r1 = new java.util.ArrayList     // Catch:{ Exception -> 0x0471 }
            r1.<init>()     // Catch:{ Exception -> 0x0471 }
        L_0x006e:
            boolean r0 = r4.next()     // Catch:{ Exception -> 0x00bd }
            if (r0 == 0) goto L_0x00b5
            org.telegram.tgnet.NativeByteBuffer r0 = r4.byteBufferValue(r14)     // Catch:{ Exception -> 0x00bd }
            if (r0 == 0) goto L_0x00a3
            int r5 = r0.readInt32(r14)     // Catch:{ Exception -> 0x00bd }
            org.telegram.tgnet.TLRPC$Message r5 = org.telegram.tgnet.TLRPC$Message.TLdeserialize(r0, r5, r14)     // Catch:{ Exception -> 0x00bd }
            org.telegram.messenger.UserConfig r13 = r24.getUserConfig()     // Catch:{ Exception -> 0x00bd }
            long r12 = r13.clientUserId     // Catch:{ Exception -> 0x00bd }
            r5.readAttachPath(r0, r12)     // Catch:{ Exception -> 0x00bd }
            r0.reuse()     // Catch:{ Exception -> 0x00bd }
            r0 = 0
            r12 = r1
            r1 = r24
            r13 = r2
            r2 = r5
            r5 = r3
            r18 = r4
            r4 = r12
            r14 = r5
            r5 = r13
            r20 = r6
            r6 = r0
            r1.addFilesToDelete(r2, r3, r4, r5, r6)     // Catch:{ Exception -> 0x00a1 }
            goto L_0x00aa
        L_0x00a1:
            r0 = move-exception
            goto L_0x00c5
        L_0x00a3:
            r12 = r1
            r13 = r2
            r14 = r3
            r18 = r4
            r20 = r6
        L_0x00aa:
            r1 = r12
            r2 = r13
            r3 = r14
            r4 = r18
            r6 = r20
            r5 = 2
            r12 = 3
            r14 = 0
            goto L_0x006e
        L_0x00b5:
            r12 = r1
            r13 = r2
            r14 = r3
            r18 = r4
            r20 = r6
            goto L_0x00c8
        L_0x00bd:
            r0 = move-exception
            r12 = r1
            r13 = r2
            r14 = r3
            r18 = r4
            r20 = r6
        L_0x00c5:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ Exception -> 0x0471 }
        L_0x00c8:
            r18.dispose()     // Catch:{ Exception -> 0x0471 }
            r7.deleteFromDownloadQueue(r12, r15)     // Catch:{ Exception -> 0x0471 }
            org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda126 r0 = new org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda126     // Catch:{ Exception -> 0x0471 }
            r0.<init>(r7, r13)     // Catch:{ Exception -> 0x0471 }
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r0)     // Catch:{ Exception -> 0x0471 }
            org.telegram.messenger.FileLoader r0 = r24.getFileLoader()     // Catch:{ Exception -> 0x0471 }
            r0.deleteFiles(r14, r8)     // Catch:{ Exception -> 0x0471 }
        L_0x00dd:
            java.lang.String r2 = "DELETE FROM media_holes_v2 WHERE uid = "
            java.lang.String r3 = "DELETE FROM messages_holes WHERE uid = "
            java.lang.String r4 = "DELETE FROM media_v4 WHERE uid = "
            java.lang.String r5 = "DELETE FROM media_counts_v2 WHERE uid = "
            java.lang.String r6 = "DELETE FROM bot_keyboard WHERE uid = "
            java.lang.String r12 = "DELETE FROM messages_v2 WHERE uid = "
            if (r8 == 0) goto L_0x02a5
            r13 = 3
            if (r8 != r13) goto L_0x00f0
            goto L_0x02a5
        L_0x00f0:
            r13 = 2
            if (r8 != r13) goto L_0x0299
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x0471 }
            java.lang.StringBuilder r8 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0471 }
            r8.<init>()     // Catch:{ Exception -> 0x0471 }
            java.lang.String r13 = "SELECT last_mid_i, last_mid FROM dialogs WHERE did = "
            r8.append(r13)     // Catch:{ Exception -> 0x0471 }
            r8.append(r9)     // Catch:{ Exception -> 0x0471 }
            java.lang.String r8 = r8.toString()     // Catch:{ Exception -> 0x0471 }
            r13 = 0
            java.lang.Object[] r14 = new java.lang.Object[r13]     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLiteCursor r8 = r0.queryFinalized(r8, r14)     // Catch:{ Exception -> 0x0471 }
            boolean r0 = r8.next()     // Catch:{ Exception -> 0x0471 }
            if (r0 == 0) goto L_0x0293
            r16 = r2
            long r1 = r8.longValue(r13)     // Catch:{ Exception -> 0x0471 }
            long r14 = r8.longValue(r15)     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x0471 }
            java.lang.StringBuilder r13 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0471 }
            r13.<init>()     // Catch:{ Exception -> 0x0471 }
            r17 = r8
            r8 = r20
            r13.append(r8)     // Catch:{ Exception -> 0x0471 }
            r13.append(r9)     // Catch:{ Exception -> 0x0471 }
            java.lang.String r8 = " AND mid IN ("
            r13.append(r8)     // Catch:{ Exception -> 0x0471 }
            r13.append(r1)     // Catch:{ Exception -> 0x0471 }
            java.lang.String r8 = ","
            r13.append(r8)     // Catch:{ Exception -> 0x0471 }
            r13.append(r14)     // Catch:{ Exception -> 0x0471 }
            java.lang.String r8 = ")"
            r13.append(r8)     // Catch:{ Exception -> 0x0471 }
            java.lang.String r8 = r13.toString()     // Catch:{ Exception -> 0x0471 }
            r18 = r4
            r13 = 0
            java.lang.Object[] r4 = new java.lang.Object[r13]     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLiteCursor r4 = r0.queryFinalized(r8, r4)     // Catch:{ Exception -> 0x0471 }
            r8 = -1
        L_0x0151:
            boolean r0 = r4.next()     // Catch:{ Exception -> 0x01a0 }
            if (r0 == 0) goto L_0x0199
            org.telegram.tgnet.NativeByteBuffer r0 = r4.byteBufferValue(r13)     // Catch:{ Exception -> 0x01a0 }
            if (r0 == 0) goto L_0x018b
            r19 = r8
            int r8 = r0.readInt32(r13)     // Catch:{ Exception -> 0x0185 }
            org.telegram.tgnet.TLRPC$Message r8 = org.telegram.tgnet.TLRPC$Message.TLdeserialize(r0, r8, r13)     // Catch:{ Exception -> 0x0185 }
            if (r8 == 0) goto L_0x0177
            org.telegram.messenger.UserConfig r13 = r24.getUserConfig()     // Catch:{ Exception -> 0x0185 }
            r20 = r5
            r21 = r6
            long r5 = r13.clientUserId     // Catch:{ Exception -> 0x0183 }
            r8.readAttachPath(r0, r5)     // Catch:{ Exception -> 0x0183 }
            goto L_0x017b
        L_0x0177:
            r20 = r5
            r21 = r6
        L_0x017b:
            r0.reuse()     // Catch:{ Exception -> 0x0183 }
            if (r8 == 0) goto L_0x0191
            int r8 = r8.id     // Catch:{ Exception -> 0x0183 }
            goto L_0x0193
        L_0x0183:
            r0 = move-exception
            goto L_0x01a7
        L_0x0185:
            r0 = move-exception
            r20 = r5
            r21 = r6
            goto L_0x01a7
        L_0x018b:
            r20 = r5
            r21 = r6
            r19 = r8
        L_0x0191:
            r8 = r19
        L_0x0193:
            r5 = r20
            r6 = r21
            r13 = 0
            goto L_0x0151
        L_0x0199:
            r20 = r5
            r21 = r6
            r19 = r8
            goto L_0x01aa
        L_0x01a0:
            r0 = move-exception
            r20 = r5
            r21 = r6
            r19 = r8
        L_0x01a7:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ Exception -> 0x0471 }
        L_0x01aa:
            r4.dispose()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x0471 }
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0471 }
            r4.<init>()     // Catch:{ Exception -> 0x0471 }
            r4.append(r12)     // Catch:{ Exception -> 0x0471 }
            r4.append(r9)     // Catch:{ Exception -> 0x0471 }
            r4.append(r11)     // Catch:{ Exception -> 0x0471 }
            r4.append(r1)     // Catch:{ Exception -> 0x0471 }
            r4.append(r11)     // Catch:{ Exception -> 0x0471 }
            r4.append(r14)     // Catch:{ Exception -> 0x0471 }
            java.lang.String r1 = r4.toString()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r1)     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0471 }
            r0.dispose()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x0471 }
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0471 }
            r1.<init>()     // Catch:{ Exception -> 0x0471 }
            r1.append(r3)     // Catch:{ Exception -> 0x0471 }
            r1.append(r9)     // Catch:{ Exception -> 0x0471 }
            java.lang.String r1 = r1.toString()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r1)     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0471 }
            r0.dispose()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x0471 }
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0471 }
            r1.<init>()     // Catch:{ Exception -> 0x0471 }
            r2 = r21
            r1.append(r2)     // Catch:{ Exception -> 0x0471 }
            r1.append(r9)     // Catch:{ Exception -> 0x0471 }
            java.lang.String r1 = r1.toString()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r1)     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0471 }
            r0.dispose()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x0471 }
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0471 }
            r1.<init>()     // Catch:{ Exception -> 0x0471 }
            r4 = r20
            r1.append(r4)     // Catch:{ Exception -> 0x0471 }
            r1.append(r9)     // Catch:{ Exception -> 0x0471 }
            java.lang.String r1 = r1.toString()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r1)     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0471 }
            r0.dispose()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x0471 }
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0471 }
            r1.<init>()     // Catch:{ Exception -> 0x0471 }
            r5 = r18
            r1.append(r5)     // Catch:{ Exception -> 0x0471 }
            r1.append(r9)     // Catch:{ Exception -> 0x0471 }
            java.lang.String r1 = r1.toString()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r1)     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0471 }
            r0.dispose()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x0471 }
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0471 }
            r1.<init>()     // Catch:{ Exception -> 0x0471 }
            r6 = r16
            r1.append(r6)     // Catch:{ Exception -> 0x0471 }
            r1.append(r9)     // Catch:{ Exception -> 0x0471 }
            java.lang.String r1 = r1.toString()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r1)     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0471 }
            r0.dispose()     // Catch:{ Exception -> 0x0471 }
            org.telegram.messenger.MediaDataController r0 = r24.getMediaDataController()     // Catch:{ Exception -> 0x0471 }
            r1 = 0
            r0.clearBotKeyboard(r9, r1)     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x0471 }
            java.lang.String r1 = "REPLACE INTO messages_holes VALUES(?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r1)     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLiteDatabase r1 = r7.database     // Catch:{ Exception -> 0x0471 }
            java.lang.String r2 = "REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r1 = r1.executeFast(r2)     // Catch:{ Exception -> 0x0471 }
            r8 = r19
            r2 = -1
            if (r8 == r2) goto L_0x0289
            createFirstHoles(r9, r0, r1, r8)     // Catch:{ Exception -> 0x0471 }
        L_0x0289:
            r0.dispose()     // Catch:{ Exception -> 0x0471 }
            r1.dispose()     // Catch:{ Exception -> 0x0471 }
            r7.updateWidgets((long) r9)     // Catch:{ Exception -> 0x0471 }
            goto L_0x0295
        L_0x0293:
            r17 = r8
        L_0x0295:
            r17.dispose()     // Catch:{ Exception -> 0x0471 }
            return
        L_0x0299:
            r22 = r6
            r6 = r2
            r2 = r22
            r23 = r5
            r5 = r4
            r4 = r23
            goto L_0x0393
        L_0x02a5:
            r22 = r6
            r6 = r2
            r2 = r22
            r23 = r5
            r5 = r4
            r4 = r23
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x0471 }
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0471 }
            r1.<init>()     // Catch:{ Exception -> 0x0471 }
            java.lang.String r8 = "DELETE FROM dialogs WHERE did = "
            r1.append(r8)     // Catch:{ Exception -> 0x0471 }
            r1.append(r9)     // Catch:{ Exception -> 0x0471 }
            java.lang.String r1 = r1.toString()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r1)     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0471 }
            r0.dispose()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x0471 }
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0471 }
            r1.<init>()     // Catch:{ Exception -> 0x0471 }
            java.lang.String r8 = "DELETE FROM chat_pinned_v2 WHERE uid = "
            r1.append(r8)     // Catch:{ Exception -> 0x0471 }
            r1.append(r9)     // Catch:{ Exception -> 0x0471 }
            java.lang.String r1 = r1.toString()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r1)     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0471 }
            r0.dispose()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x0471 }
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0471 }
            r1.<init>()     // Catch:{ Exception -> 0x0471 }
            java.lang.String r8 = "DELETE FROM chat_pinned_count WHERE uid = "
            r1.append(r8)     // Catch:{ Exception -> 0x0471 }
            r1.append(r9)     // Catch:{ Exception -> 0x0471 }
            java.lang.String r1 = r1.toString()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r1)     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0471 }
            r0.dispose()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x0471 }
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0471 }
            r1.<init>()     // Catch:{ Exception -> 0x0471 }
            java.lang.String r8 = "DELETE FROM channel_users_v2 WHERE did = "
            r1.append(r8)     // Catch:{ Exception -> 0x0471 }
            r1.append(r9)     // Catch:{ Exception -> 0x0471 }
            java.lang.String r1 = r1.toString()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r1)     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0471 }
            r0.dispose()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x0471 }
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0471 }
            r1.<init>()     // Catch:{ Exception -> 0x0471 }
            java.lang.String r8 = "DELETE FROM search_recent WHERE did = "
            r1.append(r8)     // Catch:{ Exception -> 0x0471 }
            r1.append(r9)     // Catch:{ Exception -> 0x0471 }
            java.lang.String r1 = r1.toString()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r1)     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0471 }
            r0.dispose()     // Catch:{ Exception -> 0x0471 }
            boolean r0 = org.telegram.messenger.DialogObject.isEncryptedDialog(r26)     // Catch:{ Exception -> 0x0471 }
            if (r0 != 0) goto L_0x0371
            boolean r0 = org.telegram.messenger.DialogObject.isChatDialog(r26)     // Catch:{ Exception -> 0x0471 }
            if (r0 == 0) goto L_0x0393
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x0471 }
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0471 }
            r1.<init>()     // Catch:{ Exception -> 0x0471 }
            java.lang.String r8 = "DELETE FROM chat_settings_v2 WHERE uid = "
            r1.append(r8)     // Catch:{ Exception -> 0x0471 }
            long r14 = -r9
            r1.append(r14)     // Catch:{ Exception -> 0x0471 }
            java.lang.String r1 = r1.toString()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r1)     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0471 }
            r0.dispose()     // Catch:{ Exception -> 0x0471 }
            goto L_0x0393
        L_0x0371:
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x0471 }
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0471 }
            r1.<init>()     // Catch:{ Exception -> 0x0471 }
            java.lang.String r8 = "DELETE FROM enc_chats WHERE uid = "
            r1.append(r8)     // Catch:{ Exception -> 0x0471 }
            int r8 = org.telegram.messenger.DialogObject.getEncryptedChatId(r26)     // Catch:{ Exception -> 0x0471 }
            r1.append(r8)     // Catch:{ Exception -> 0x0471 }
            java.lang.String r1 = r1.toString()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r1)     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0471 }
            r0.dispose()     // Catch:{ Exception -> 0x0471 }
        L_0x0393:
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x0471 }
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0471 }
            r1.<init>()     // Catch:{ Exception -> 0x0471 }
            java.lang.String r8 = "UPDATE dialogs SET unread_count = 0, unread_count_i = 0 WHERE did = "
            r1.append(r8)     // Catch:{ Exception -> 0x0471 }
            r1.append(r9)     // Catch:{ Exception -> 0x0471 }
            java.lang.String r1 = r1.toString()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r1)     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0471 }
            r0.dispose()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x0471 }
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0471 }
            r1.<init>()     // Catch:{ Exception -> 0x0471 }
            r1.append(r12)     // Catch:{ Exception -> 0x0471 }
            r1.append(r9)     // Catch:{ Exception -> 0x0471 }
            java.lang.String r1 = r1.toString()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r1)     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0471 }
            r0.dispose()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x0471 }
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0471 }
            r1.<init>()     // Catch:{ Exception -> 0x0471 }
            r1.append(r2)     // Catch:{ Exception -> 0x0471 }
            r1.append(r9)     // Catch:{ Exception -> 0x0471 }
            java.lang.String r1 = r1.toString()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r1)     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0471 }
            r0.dispose()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x0471 }
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0471 }
            r1.<init>()     // Catch:{ Exception -> 0x0471 }
            r1.append(r4)     // Catch:{ Exception -> 0x0471 }
            r1.append(r9)     // Catch:{ Exception -> 0x0471 }
            java.lang.String r1 = r1.toString()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r1)     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0471 }
            r0.dispose()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x0471 }
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0471 }
            r1.<init>()     // Catch:{ Exception -> 0x0471 }
            r1.append(r5)     // Catch:{ Exception -> 0x0471 }
            r1.append(r9)     // Catch:{ Exception -> 0x0471 }
            java.lang.String r1 = r1.toString()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r1)     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0471 }
            r0.dispose()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x0471 }
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0471 }
            r1.<init>()     // Catch:{ Exception -> 0x0471 }
            r1.append(r3)     // Catch:{ Exception -> 0x0471 }
            r1.append(r9)     // Catch:{ Exception -> 0x0471 }
            java.lang.String r1 = r1.toString()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r1)     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0471 }
            r0.dispose()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x0471 }
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0471 }
            r1.<init>()     // Catch:{ Exception -> 0x0471 }
            r1.append(r6)     // Catch:{ Exception -> 0x0471 }
            r1.append(r9)     // Catch:{ Exception -> 0x0471 }
            java.lang.String r1 = r1.toString()     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r1)     // Catch:{ Exception -> 0x0471 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0471 }
            r0.dispose()     // Catch:{ Exception -> 0x0471 }
            org.telegram.messenger.MediaDataController r0 = r24.getMediaDataController()     // Catch:{ Exception -> 0x0471 }
            r1 = 0
            r0.clearBotKeyboard(r9, r1)     // Catch:{ Exception -> 0x0471 }
            org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda20 r0 = new org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda20     // Catch:{ Exception -> 0x0471 }
            r0.<init>(r7)     // Catch:{ Exception -> 0x0471 }
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r0)     // Catch:{ Exception -> 0x0471 }
            r1 = 0
            r7.resetAllUnreadCounters(r1)     // Catch:{ Exception -> 0x0471 }
            r7.updateWidgets((long) r9)     // Catch:{ Exception -> 0x0471 }
            goto L_0x0475
        L_0x0471:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
        L_0x0475:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$deleteDialog$69(int, long):void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteDialog$67(ArrayList arrayList) {
        getFileLoader().cancelLoadFiles(arrayList);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteDialog$68() {
        getNotificationCenter().postNotificationName(NotificationCenter.needReloadRecentDialogsSearch, new Object[0]);
    }

    public void onDeleteQueryComplete(long j) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda67(this, j));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$onDeleteQueryComplete$70(long j) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + j).stepThis().dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void getDialogPhotos(long j, int i, int i2, int i3) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda48(this, i2, j, i, i3));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getDialogPhotos$72(int i, long j, int i2, int i3) {
        SQLiteCursor sQLiteCursor;
        if (i != 0) {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM user_photos WHERE uid = %d AND id < %d ORDER BY rowid ASC LIMIT %d", new Object[]{Long.valueOf(j), Integer.valueOf(i), Integer.valueOf(i2)}), new Object[0]);
            } catch (Exception e) {
                FileLog.e((Throwable) e);
                return;
            }
        } else {
            sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM user_photos WHERE uid = %d ORDER BY rowid ASC LIMIT %d", new Object[]{Long.valueOf(j), Integer.valueOf(i2)}), new Object[0]);
        }
        TLRPC$TL_photos_photos tLRPC$TL_photos_photos = new TLRPC$TL_photos_photos();
        ArrayList arrayList = new ArrayList();
        while (sQLiteCursor.next()) {
            NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(0);
            if (byteBufferValue != null) {
                TLRPC$Photo TLdeserialize = TLRPC$Photo.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                if (byteBufferValue.remaining() > 0) {
                    arrayList.add(TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false));
                } else {
                    arrayList.add((Object) null);
                }
                byteBufferValue.reuse();
                tLRPC$TL_photos_photos.photos.add(TLdeserialize);
            }
        }
        sQLiteCursor.dispose();
        Utilities.stageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda185(this, tLRPC$TL_photos_photos, arrayList, j, i2, i, i3));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getDialogPhotos$71(TLRPC$photos_Photos tLRPC$photos_Photos, ArrayList arrayList, long j, int i, int i2, int i3) {
        getMessagesController().processLoadedUserPhotos(tLRPC$photos_Photos, arrayList, j, i, i2, true, i3);
    }

    public void clearUserPhotos(long j) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda64(this, j));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$clearUserPhotos$73(long j) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM user_photos WHERE uid = " + j).stepThis().dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void clearUserPhoto(long j, long j2) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda83(this, j, j2));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$clearUserPhoto$74(long j, long j2) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM user_photos WHERE uid = " + j + " AND id = " + j2).stepThis().dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void resetDialogs(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, int i, int i2, int i3, int i4, int i5, LongSparseArray<TLRPC$Dialog> longSparseArray, LongSparseArray<MessageObject> longSparseArray2, TLRPC$Message tLRPC$Message, int i6) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda183(this, tLRPC$messages_Dialogs, i6, i2, i3, i4, i5, tLRPC$Message, i, longSparseArray, longSparseArray2));
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Removed duplicated region for block: B:77:0x02cb A[Catch:{ Exception -> 0x0312 }, LOOP:7: B:75:0x02c8->B:77:0x02cb, LOOP_END] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$resetDialogs$76(org.telegram.tgnet.TLRPC$messages_Dialogs r31, int r32, int r33, int r34, int r35, int r36, org.telegram.tgnet.TLRPC$Message r37, int r38, androidx.collection.LongSparseArray r39, androidx.collection.LongSparseArray r40) {
        /*
            r30 = this;
            r1 = r30
            r0 = r31
            r11 = r37
            java.util.ArrayList r2 = new java.util.ArrayList     // Catch:{ Exception -> 0x0312 }
            r2.<init>()     // Catch:{ Exception -> 0x0312 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r3 = r0.dialogs     // Catch:{ Exception -> 0x0312 }
            int r3 = r3.size()     // Catch:{ Exception -> 0x0312 }
            int r3 = r3 - r32
            org.telegram.messenger.support.LongSparseIntArray r4 = new org.telegram.messenger.support.LongSparseIntArray     // Catch:{ Exception -> 0x0312 }
            r4.<init>()     // Catch:{ Exception -> 0x0312 }
            java.util.ArrayList r5 = new java.util.ArrayList     // Catch:{ Exception -> 0x0312 }
            r5.<init>()     // Catch:{ Exception -> 0x0312 }
            java.util.ArrayList r6 = new java.util.ArrayList     // Catch:{ Exception -> 0x0312 }
            r6.<init>()     // Catch:{ Exception -> 0x0312 }
            r7 = r32
        L_0x0024:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r8 = r0.dialogs     // Catch:{ Exception -> 0x0312 }
            int r8 = r8.size()     // Catch:{ Exception -> 0x0312 }
            if (r7 >= r8) goto L_0x0040
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r8 = r0.dialogs     // Catch:{ Exception -> 0x0312 }
            java.lang.Object r8 = r8.get(r7)     // Catch:{ Exception -> 0x0312 }
            org.telegram.tgnet.TLRPC$Dialog r8 = (org.telegram.tgnet.TLRPC$Dialog) r8     // Catch:{ Exception -> 0x0312 }
            long r8 = r8.id     // Catch:{ Exception -> 0x0312 }
            java.lang.Long r8 = java.lang.Long.valueOf(r8)     // Catch:{ Exception -> 0x0312 }
            r6.add(r8)     // Catch:{ Exception -> 0x0312 }
            int r7 = r7 + 1
            goto L_0x0024
        L_0x0040:
            org.telegram.SQLite.SQLiteDatabase r7 = r1.database     // Catch:{ Exception -> 0x0312 }
            java.lang.String r8 = "SELECT did, pinned FROM dialogs WHERE 1"
            r9 = 0
            java.lang.Object[] r10 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x0312 }
            org.telegram.SQLite.SQLiteCursor r7 = r7.queryFinalized(r8, r10)     // Catch:{ Exception -> 0x0312 }
            r8 = 0
        L_0x004c:
            boolean r10 = r7.next()     // Catch:{ Exception -> 0x0312 }
            if (r10 == 0) goto L_0x0079
            long r12 = r7.longValue(r9)     // Catch:{ Exception -> 0x0312 }
            r10 = 1
            int r10 = r7.intValue(r10)     // Catch:{ Exception -> 0x0312 }
            boolean r14 = org.telegram.messenger.DialogObject.isEncryptedDialog(r12)     // Catch:{ Exception -> 0x0312 }
            if (r14 != 0) goto L_0x004c
            java.lang.Long r14 = java.lang.Long.valueOf(r12)     // Catch:{ Exception -> 0x0312 }
            r2.add(r14)     // Catch:{ Exception -> 0x0312 }
            if (r10 <= 0) goto L_0x004c
            int r8 = java.lang.Math.max(r10, r8)     // Catch:{ Exception -> 0x0312 }
            r4.put(r12, r10)     // Catch:{ Exception -> 0x0312 }
            java.lang.Long r10 = java.lang.Long.valueOf(r12)     // Catch:{ Exception -> 0x0312 }
            r5.add(r10)     // Catch:{ Exception -> 0x0312 }
            goto L_0x004c
        L_0x0079:
            org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda201 r10 = new org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda201     // Catch:{ Exception -> 0x0312 }
            r10.<init>(r4)     // Catch:{ Exception -> 0x0312 }
            java.util.Collections.sort(r5, r10)     // Catch:{ Exception -> 0x0312 }
        L_0x0081:
            int r10 = r5.size()     // Catch:{ Exception -> 0x0312 }
            r12 = 0
            if (r10 >= r3) goto L_0x0091
            java.lang.Long r10 = java.lang.Long.valueOf(r12)     // Catch:{ Exception -> 0x0312 }
            r5.add(r9, r10)     // Catch:{ Exception -> 0x0312 }
            goto L_0x0081
        L_0x0091:
            r7.dispose()     // Catch:{ Exception -> 0x0312 }
            java.lang.StringBuilder r7 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0312 }
            r7.<init>()     // Catch:{ Exception -> 0x0312 }
            java.lang.String r10 = "("
            r7.append(r10)     // Catch:{ Exception -> 0x0312 }
            java.lang.String r10 = ","
            java.lang.String r2 = android.text.TextUtils.join(r10, r2)     // Catch:{ Exception -> 0x0312 }
            r7.append(r2)     // Catch:{ Exception -> 0x0312 }
            java.lang.String r2 = ")"
            r7.append(r2)     // Catch:{ Exception -> 0x0312 }
            java.lang.String r2 = r7.toString()     // Catch:{ Exception -> 0x0312 }
            org.telegram.SQLite.SQLiteDatabase r7 = r1.database     // Catch:{ Exception -> 0x0312 }
            r7.beginTransaction()     // Catch:{ Exception -> 0x0312 }
            org.telegram.SQLite.SQLiteDatabase r7 = r1.database     // Catch:{ Exception -> 0x0312 }
            java.lang.StringBuilder r10 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0312 }
            r10.<init>()     // Catch:{ Exception -> 0x0312 }
            java.lang.String r14 = "DELETE FROM chat_pinned_count WHERE uid IN "
            r10.append(r14)     // Catch:{ Exception -> 0x0312 }
            r10.append(r2)     // Catch:{ Exception -> 0x0312 }
            java.lang.String r10 = r10.toString()     // Catch:{ Exception -> 0x0312 }
            org.telegram.SQLite.SQLitePreparedStatement r7 = r7.executeFast(r10)     // Catch:{ Exception -> 0x0312 }
            org.telegram.SQLite.SQLitePreparedStatement r7 = r7.stepThis()     // Catch:{ Exception -> 0x0312 }
            r7.dispose()     // Catch:{ Exception -> 0x0312 }
            org.telegram.SQLite.SQLiteDatabase r7 = r1.database     // Catch:{ Exception -> 0x0312 }
            java.lang.StringBuilder r10 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0312 }
            r10.<init>()     // Catch:{ Exception -> 0x0312 }
            java.lang.String r14 = "DELETE FROM chat_pinned_v2 WHERE uid IN "
            r10.append(r14)     // Catch:{ Exception -> 0x0312 }
            r10.append(r2)     // Catch:{ Exception -> 0x0312 }
            java.lang.String r10 = r10.toString()     // Catch:{ Exception -> 0x0312 }
            org.telegram.SQLite.SQLitePreparedStatement r7 = r7.executeFast(r10)     // Catch:{ Exception -> 0x0312 }
            org.telegram.SQLite.SQLitePreparedStatement r7 = r7.stepThis()     // Catch:{ Exception -> 0x0312 }
            r7.dispose()     // Catch:{ Exception -> 0x0312 }
            org.telegram.SQLite.SQLiteDatabase r7 = r1.database     // Catch:{ Exception -> 0x0312 }
            java.lang.StringBuilder r10 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0312 }
            r10.<init>()     // Catch:{ Exception -> 0x0312 }
            java.lang.String r14 = "DELETE FROM dialogs WHERE did IN "
            r10.append(r14)     // Catch:{ Exception -> 0x0312 }
            r10.append(r2)     // Catch:{ Exception -> 0x0312 }
            java.lang.String r10 = r10.toString()     // Catch:{ Exception -> 0x0312 }
            org.telegram.SQLite.SQLitePreparedStatement r7 = r7.executeFast(r10)     // Catch:{ Exception -> 0x0312 }
            org.telegram.SQLite.SQLitePreparedStatement r7 = r7.stepThis()     // Catch:{ Exception -> 0x0312 }
            r7.dispose()     // Catch:{ Exception -> 0x0312 }
            org.telegram.SQLite.SQLiteDatabase r7 = r1.database     // Catch:{ Exception -> 0x0312 }
            java.lang.StringBuilder r10 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0312 }
            r10.<init>()     // Catch:{ Exception -> 0x0312 }
            java.lang.String r14 = "DELETE FROM messages_v2 WHERE uid IN "
            r10.append(r14)     // Catch:{ Exception -> 0x0312 }
            r10.append(r2)     // Catch:{ Exception -> 0x0312 }
            java.lang.String r10 = r10.toString()     // Catch:{ Exception -> 0x0312 }
            org.telegram.SQLite.SQLitePreparedStatement r7 = r7.executeFast(r10)     // Catch:{ Exception -> 0x0312 }
            org.telegram.SQLite.SQLitePreparedStatement r7 = r7.stepThis()     // Catch:{ Exception -> 0x0312 }
            r7.dispose()     // Catch:{ Exception -> 0x0312 }
            org.telegram.SQLite.SQLiteDatabase r7 = r1.database     // Catch:{ Exception -> 0x0312 }
            java.lang.String r10 = "DELETE FROM polls_v2 WHERE 1"
            org.telegram.SQLite.SQLitePreparedStatement r7 = r7.executeFast(r10)     // Catch:{ Exception -> 0x0312 }
            org.telegram.SQLite.SQLitePreparedStatement r7 = r7.stepThis()     // Catch:{ Exception -> 0x0312 }
            r7.dispose()     // Catch:{ Exception -> 0x0312 }
            org.telegram.SQLite.SQLiteDatabase r7 = r1.database     // Catch:{ Exception -> 0x0312 }
            java.lang.StringBuilder r10 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0312 }
            r10.<init>()     // Catch:{ Exception -> 0x0312 }
            java.lang.String r14 = "DELETE FROM bot_keyboard WHERE uid IN "
            r10.append(r14)     // Catch:{ Exception -> 0x0312 }
            r10.append(r2)     // Catch:{ Exception -> 0x0312 }
            java.lang.String r10 = r10.toString()     // Catch:{ Exception -> 0x0312 }
            org.telegram.SQLite.SQLitePreparedStatement r7 = r7.executeFast(r10)     // Catch:{ Exception -> 0x0312 }
            org.telegram.SQLite.SQLitePreparedStatement r7 = r7.stepThis()     // Catch:{ Exception -> 0x0312 }
            r7.dispose()     // Catch:{ Exception -> 0x0312 }
            org.telegram.SQLite.SQLiteDatabase r7 = r1.database     // Catch:{ Exception -> 0x0312 }
            java.lang.StringBuilder r10 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0312 }
            r10.<init>()     // Catch:{ Exception -> 0x0312 }
            java.lang.String r14 = "DELETE FROM media_v4 WHERE uid IN "
            r10.append(r14)     // Catch:{ Exception -> 0x0312 }
            r10.append(r2)     // Catch:{ Exception -> 0x0312 }
            java.lang.String r10 = r10.toString()     // Catch:{ Exception -> 0x0312 }
            org.telegram.SQLite.SQLitePreparedStatement r7 = r7.executeFast(r10)     // Catch:{ Exception -> 0x0312 }
            org.telegram.SQLite.SQLitePreparedStatement r7 = r7.stepThis()     // Catch:{ Exception -> 0x0312 }
            r7.dispose()     // Catch:{ Exception -> 0x0312 }
            org.telegram.SQLite.SQLiteDatabase r7 = r1.database     // Catch:{ Exception -> 0x0312 }
            java.lang.StringBuilder r10 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0312 }
            r10.<init>()     // Catch:{ Exception -> 0x0312 }
            java.lang.String r14 = "DELETE FROM messages_holes WHERE uid IN "
            r10.append(r14)     // Catch:{ Exception -> 0x0312 }
            r10.append(r2)     // Catch:{ Exception -> 0x0312 }
            java.lang.String r10 = r10.toString()     // Catch:{ Exception -> 0x0312 }
            org.telegram.SQLite.SQLitePreparedStatement r7 = r7.executeFast(r10)     // Catch:{ Exception -> 0x0312 }
            org.telegram.SQLite.SQLitePreparedStatement r7 = r7.stepThis()     // Catch:{ Exception -> 0x0312 }
            r7.dispose()     // Catch:{ Exception -> 0x0312 }
            org.telegram.SQLite.SQLiteDatabase r7 = r1.database     // Catch:{ Exception -> 0x0312 }
            java.lang.StringBuilder r10 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0312 }
            r10.<init>()     // Catch:{ Exception -> 0x0312 }
            java.lang.String r14 = "DELETE FROM media_holes_v2 WHERE uid IN "
            r10.append(r14)     // Catch:{ Exception -> 0x0312 }
            r10.append(r2)     // Catch:{ Exception -> 0x0312 }
            java.lang.String r2 = r10.toString()     // Catch:{ Exception -> 0x0312 }
            org.telegram.SQLite.SQLitePreparedStatement r2 = r7.executeFast(r2)     // Catch:{ Exception -> 0x0312 }
            org.telegram.SQLite.SQLitePreparedStatement r2 = r2.stepThis()     // Catch:{ Exception -> 0x0312 }
            r2.dispose()     // Catch:{ Exception -> 0x0312 }
            org.telegram.SQLite.SQLiteDatabase r2 = r1.database     // Catch:{ Exception -> 0x0312 }
            r2.commitTransaction()     // Catch:{ Exception -> 0x0312 }
            r2 = 0
        L_0x01ba:
            if (r2 >= r3) goto L_0x0215
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r7 = r0.dialogs     // Catch:{ Exception -> 0x0312 }
            int r10 = r32 + r2
            java.lang.Object r7 = r7.get(r10)     // Catch:{ Exception -> 0x0312 }
            org.telegram.tgnet.TLRPC$Dialog r7 = (org.telegram.tgnet.TLRPC$Dialog) r7     // Catch:{ Exception -> 0x0312 }
            boolean r10 = r7 instanceof org.telegram.tgnet.TLRPC$TL_dialog     // Catch:{ Exception -> 0x0312 }
            if (r10 == 0) goto L_0x01cf
            boolean r10 = r7.pinned     // Catch:{ Exception -> 0x0312 }
            if (r10 != 0) goto L_0x01cf
            goto L_0x0210
        L_0x01cf:
            long r14 = r7.id     // Catch:{ Exception -> 0x0312 }
            java.lang.Long r10 = java.lang.Long.valueOf(r14)     // Catch:{ Exception -> 0x0312 }
            int r10 = r5.indexOf(r10)     // Catch:{ Exception -> 0x0312 }
            long r14 = r7.id     // Catch:{ Exception -> 0x0312 }
            java.lang.Long r14 = java.lang.Long.valueOf(r14)     // Catch:{ Exception -> 0x0312 }
            int r14 = r6.indexOf(r14)     // Catch:{ Exception -> 0x0312 }
            r15 = -1
            if (r10 == r15) goto L_0x0207
            if (r14 == r15) goto L_0x0207
            if (r10 != r14) goto L_0x01f5
            long r12 = r7.id     // Catch:{ Exception -> 0x0312 }
            int r10 = r4.get(r12, r15)     // Catch:{ Exception -> 0x0312 }
            if (r10 == r15) goto L_0x0207
            r7.pinnedNum = r10     // Catch:{ Exception -> 0x0312 }
            goto L_0x0207
        L_0x01f5:
            java.lang.Object r10 = r5.get(r14)     // Catch:{ Exception -> 0x0312 }
            java.lang.Long r10 = (java.lang.Long) r10     // Catch:{ Exception -> 0x0312 }
            long r12 = r10.longValue()     // Catch:{ Exception -> 0x0312 }
            int r10 = r4.get(r12, r15)     // Catch:{ Exception -> 0x0312 }
            if (r10 == r15) goto L_0x0207
            r7.pinnedNum = r10     // Catch:{ Exception -> 0x0312 }
        L_0x0207:
            int r10 = r7.pinnedNum     // Catch:{ Exception -> 0x0312 }
            if (r10 != 0) goto L_0x0210
            int r10 = r3 - r2
            int r10 = r10 + r8
            r7.pinnedNum = r10     // Catch:{ Exception -> 0x0312 }
        L_0x0210:
            int r2 = r2 + 1
            r12 = 0
            goto L_0x01ba
        L_0x0215:
            r1.putDialogsInternal(r0, r9)     // Catch:{ Exception -> 0x0312 }
            r5 = r33
            r6 = r34
            r7 = r35
            r8 = r36
            r1.lambda$saveDiffParams$32(r5, r6, r7, r8)     // Catch:{ Exception -> 0x0312 }
            org.telegram.messenger.UserConfig r2 = r30.getUserConfig()     // Catch:{ Exception -> 0x0312 }
            int r2 = r2.getTotalDialogsCount(r9)     // Catch:{ Exception -> 0x0312 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r3 = r0.dialogs     // Catch:{ Exception -> 0x0312 }
            int r3 = r3.size()     // Catch:{ Exception -> 0x0312 }
            int r2 = r2 + r3
            int r3 = r11.id     // Catch:{ Exception -> 0x0312 }
            int r4 = r11.date     // Catch:{ Exception -> 0x0312 }
            org.telegram.tgnet.TLRPC$Peer r10 = r11.peer_id     // Catch:{ Exception -> 0x0312 }
            long r12 = r10.channel_id     // Catch:{ Exception -> 0x0312 }
            r14 = 0
            int r18 = (r12 > r14 ? 1 : (r12 == r14 ? 0 : -1))
            if (r18 == 0) goto L_0x0265
            r10 = 0
        L_0x0241:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r14 = r0.chats     // Catch:{ Exception -> 0x0312 }
            int r14 = r14.size()     // Catch:{ Exception -> 0x0312 }
            if (r10 >= r14) goto L_0x0260
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r14 = r0.chats     // Catch:{ Exception -> 0x0312 }
            java.lang.Object r14 = r14.get(r10)     // Catch:{ Exception -> 0x0312 }
            org.telegram.tgnet.TLRPC$Chat r14 = (org.telegram.tgnet.TLRPC$Chat) r14     // Catch:{ Exception -> 0x0312 }
            r18 = r10
            long r9 = r14.id     // Catch:{ Exception -> 0x0312 }
            int r19 = (r9 > r12 ? 1 : (r9 == r12 ? 0 : -1))
            if (r19 != 0) goto L_0x025c
            long r9 = r14.access_hash     // Catch:{ Exception -> 0x0312 }
            goto L_0x0262
        L_0x025c:
            int r10 = r18 + 1
            r9 = 0
            goto L_0x0241
        L_0x0260:
            r9 = 0
        L_0x0262:
            r5 = 0
            goto L_0x02c5
        L_0x0265:
            long r12 = r10.chat_id     // Catch:{ Exception -> 0x0312 }
            r16 = 0
            int r9 = (r12 > r16 ? 1 : (r12 == r16 ? 0 : -1))
            if (r9 == 0) goto L_0x0298
            r9 = 0
        L_0x026e:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r10 = r0.chats     // Catch:{ Exception -> 0x0312 }
            int r10 = r10.size()     // Catch:{ Exception -> 0x0312 }
            if (r9 >= r10) goto L_0x028e
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r10 = r0.chats     // Catch:{ Exception -> 0x0312 }
            java.lang.Object r10 = r10.get(r9)     // Catch:{ Exception -> 0x0312 }
            org.telegram.tgnet.TLRPC$Chat r10 = (org.telegram.tgnet.TLRPC$Chat) r10     // Catch:{ Exception -> 0x0312 }
            long r5 = r10.id     // Catch:{ Exception -> 0x0312 }
            int r14 = (r5 > r12 ? 1 : (r5 == r12 ? 0 : -1))
            if (r14 != 0) goto L_0x0287
            long r5 = r10.access_hash     // Catch:{ Exception -> 0x0312 }
            goto L_0x0290
        L_0x0287:
            int r9 = r9 + 1
            r5 = r33
            r6 = r34
            goto L_0x026e
        L_0x028e:
            r5 = 0
        L_0x0290:
            r9 = r5
            r16 = r12
            r5 = 0
            r12 = 0
            goto L_0x02c7
        L_0x0298:
            long r5 = r10.user_id     // Catch:{ Exception -> 0x0312 }
            r9 = 0
            int r12 = (r5 > r9 ? 1 : (r5 == r9 ? 0 : -1))
            if (r12 == 0) goto L_0x02bf
            r12 = 0
        L_0x02a1:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r13 = r0.users     // Catch:{ Exception -> 0x0312 }
            int r13 = r13.size()     // Catch:{ Exception -> 0x0312 }
            if (r12 >= r13) goto L_0x02c1
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r13 = r0.users     // Catch:{ Exception -> 0x0312 }
            java.lang.Object r13 = r13.get(r12)     // Catch:{ Exception -> 0x0312 }
            org.telegram.tgnet.TLRPC$User r13 = (org.telegram.tgnet.TLRPC$User) r13     // Catch:{ Exception -> 0x0312 }
            long r9 = r13.id     // Catch:{ Exception -> 0x0312 }
            int r14 = (r9 > r5 ? 1 : (r9 == r5 ? 0 : -1))
            if (r14 != 0) goto L_0x02ba
            long r9 = r13.access_hash     // Catch:{ Exception -> 0x0312 }
            goto L_0x02c3
        L_0x02ba:
            int r12 = r12 + 1
            r9 = 0
            goto L_0x02a1
        L_0x02bf:
            r5 = 0
        L_0x02c1:
            r9 = 0
        L_0x02c3:
            r12 = 0
        L_0x02c5:
            r16 = 0
        L_0x02c7:
            r14 = 0
        L_0x02c8:
            r15 = 2
            if (r14 >= r15) goto L_0x02ea
            org.telegram.messenger.UserConfig r18 = r30.getUserConfig()     // Catch:{ Exception -> 0x0312 }
            r19 = r14
            r20 = r3
            r21 = r4
            r22 = r5
            r24 = r16
            r26 = r12
            r28 = r9
            r18.setDialogsLoadOffset(r19, r20, r21, r22, r24, r26, r28)     // Catch:{ Exception -> 0x0312 }
            org.telegram.messenger.UserConfig r15 = r30.getUserConfig()     // Catch:{ Exception -> 0x0312 }
            r15.setTotalDialogsCount(r14, r2)     // Catch:{ Exception -> 0x0312 }
            int r14 = r14 + 1
            goto L_0x02c8
        L_0x02ea:
            org.telegram.messenger.UserConfig r2 = r30.getUserConfig()     // Catch:{ Exception -> 0x0312 }
            r3 = 0
            r2.draftsLoaded = r3     // Catch:{ Exception -> 0x0312 }
            org.telegram.messenger.UserConfig r2 = r30.getUserConfig()     // Catch:{ Exception -> 0x0312 }
            r2.saveConfig(r3)     // Catch:{ Exception -> 0x0312 }
            org.telegram.messenger.MessagesController r2 = r30.getMessagesController()     // Catch:{ Exception -> 0x0312 }
            r3 = r31
            r4 = r38
            r5 = r33
            r6 = r34
            r7 = r35
            r8 = r36
            r9 = r39
            r10 = r40
            r11 = r37
            r2.completeDialogsReset(r3, r4, r5, r6, r7, r8, r9, r10, r11)     // Catch:{ Exception -> 0x0312 }
            goto L_0x0316
        L_0x0312:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
        L_0x0316:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$resetDialogs$76(org.telegram.tgnet.TLRPC$messages_Dialogs, int, int, int, int, int, org.telegram.tgnet.TLRPC$Message, int, androidx.collection.LongSparseArray, androidx.collection.LongSparseArray):void");
    }

    /* access modifiers changed from: private */
    public static /* synthetic */ int lambda$resetDialogs$75(LongSparseIntArray longSparseIntArray, Long l, Long l2) {
        int i = longSparseIntArray.get(l.longValue());
        int i2 = longSparseIntArray.get(l2.longValue());
        if (i < i2) {
            return 1;
        }
        return i > i2 ? -1 : 0;
    }

    public void putDialogPhotos(long j, TLRPC$photos_Photos tLRPC$photos_Photos, ArrayList<TLRPC$Message> arrayList) {
        if (tLRPC$photos_Photos != null) {
            this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda109(this, j, tLRPC$photos_Photos, arrayList));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$putDialogPhotos$77(long j, TLRPC$photos_Photos tLRPC$photos_Photos, ArrayList arrayList) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM user_photos WHERE uid = " + j).stepThis().dispose();
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO user_photos VALUES(?, ?, ?)");
            int size = tLRPC$photos_Photos.photos.size();
            for (int i = 0; i < size; i++) {
                TLRPC$Photo tLRPC$Photo = tLRPC$photos_Photos.photos.get(i);
                if (!(tLRPC$Photo instanceof TLRPC$TL_photoEmpty)) {
                    executeFast.requery();
                    int objectSize = tLRPC$Photo.getObjectSize();
                    if (arrayList != null) {
                        objectSize += ((TLRPC$Message) arrayList.get(i)).getObjectSize();
                    }
                    NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(objectSize);
                    tLRPC$Photo.serializeToStream(nativeByteBuffer);
                    if (arrayList != null) {
                        ((TLRPC$Message) arrayList.get(i)).serializeToStream(nativeByteBuffer);
                    }
                    executeFast.bindLong(1, j);
                    executeFast.bindLong(2, tLRPC$Photo.id);
                    executeFast.bindByteBuffer(3, nativeByteBuffer);
                    executeFast.step();
                    nativeByteBuffer.reuse();
                }
            }
            executeFast.dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void emptyMessagesMedia(long j, ArrayList<Integer> arrayList) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda141(this, arrayList, j));
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Removed duplicated region for block: B:34:0x011c A[Catch:{ Exception -> 0x01b4 }] */
    /* JADX WARNING: Removed duplicated region for block: B:35:0x0122 A[Catch:{ Exception -> 0x01b4 }] */
    /* JADX WARNING: Removed duplicated region for block: B:38:0x012d A[Catch:{ Exception -> 0x01b4 }] */
    /* JADX WARNING: Removed duplicated region for block: B:39:0x012f A[Catch:{ Exception -> 0x01b4 }] */
    /* JADX WARNING: Removed duplicated region for block: B:44:0x013f A[Catch:{ Exception -> 0x01b4 }] */
    /* JADX WARNING: Removed duplicated region for block: B:45:0x0141 A[Catch:{ Exception -> 0x01b4 }] */
    /* JADX WARNING: Removed duplicated region for block: B:48:0x0153 A[Catch:{ Exception -> 0x01b4 }] */
    /* JADX WARNING: Removed duplicated region for block: B:49:0x0167 A[Catch:{ Exception -> 0x01b4 }] */
    /* JADX WARNING: Removed duplicated region for block: B:52:0x0170 A[Catch:{ Exception -> 0x01b4 }] */
    /* JADX WARNING: Removed duplicated region for block: B:57:0x017b A[Catch:{ Exception -> 0x01b4 }] */
    /* JADX WARNING: Removed duplicated region for block: B:60:0x0190 A[Catch:{ Exception -> 0x01b4 }] */
    /* JADX WARNING: Removed duplicated region for block: B:73:0x0193 A[SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$emptyMessagesMedia$80(java.util.ArrayList r18, long r19) {
        /*
            r17 = this;
            r7 = r17
            java.util.ArrayList r0 = new java.util.ArrayList     // Catch:{ Exception -> 0x01b4 }
            r0.<init>()     // Catch:{ Exception -> 0x01b4 }
            java.util.ArrayList r8 = new java.util.ArrayList     // Catch:{ Exception -> 0x01b4 }
            r8.<init>()     // Catch:{ Exception -> 0x01b4 }
            java.util.ArrayList r9 = new java.util.ArrayList     // Catch:{ Exception -> 0x01b4 }
            r9.<init>()     // Catch:{ Exception -> 0x01b4 }
            java.util.ArrayList r10 = new java.util.ArrayList     // Catch:{ Exception -> 0x01b4 }
            r10.<init>()     // Catch:{ Exception -> 0x01b4 }
            org.telegram.SQLite.SQLiteDatabase r1 = r7.database     // Catch:{ Exception -> 0x01b4 }
            java.util.Locale r2 = java.util.Locale.US     // Catch:{ Exception -> 0x01b4 }
            java.lang.String r3 = "SELECT data, mid, date, uid FROM messages_v2 WHERE mid IN (%s) AND uid = %d"
            r11 = 2
            java.lang.Object[] r4 = new java.lang.Object[r11]     // Catch:{ Exception -> 0x01b4 }
            java.lang.String r5 = ","
            r6 = r18
            java.lang.String r5 = android.text.TextUtils.join(r5, r6)     // Catch:{ Exception -> 0x01b4 }
            r12 = 0
            r4[r12] = r5     // Catch:{ Exception -> 0x01b4 }
            java.lang.Long r5 = java.lang.Long.valueOf(r19)     // Catch:{ Exception -> 0x01b4 }
            r13 = 1
            r4[r13] = r5     // Catch:{ Exception -> 0x01b4 }
            java.lang.String r2 = java.lang.String.format(r2, r3, r4)     // Catch:{ Exception -> 0x01b4 }
            java.lang.Object[] r3 = new java.lang.Object[r12]     // Catch:{ Exception -> 0x01b4 }
            org.telegram.SQLite.SQLiteCursor r14 = r1.queryFinalized(r2, r3)     // Catch:{ Exception -> 0x01b4 }
        L_0x003b:
            boolean r1 = r14.next()     // Catch:{ Exception -> 0x01b4 }
            r15 = 3
            if (r1 == 0) goto L_0x00aa
            org.telegram.tgnet.NativeByteBuffer r1 = r14.byteBufferValue(r12)     // Catch:{ Exception -> 0x01b4 }
            if (r1 == 0) goto L_0x00a8
            int r2 = r1.readInt32(r12)     // Catch:{ Exception -> 0x01b4 }
            org.telegram.tgnet.TLRPC$Message r6 = org.telegram.tgnet.TLRPC$Message.TLdeserialize(r1, r2, r12)     // Catch:{ Exception -> 0x01b4 }
            org.telegram.messenger.UserConfig r2 = r17.getUserConfig()     // Catch:{ Exception -> 0x01b4 }
            long r2 = r2.clientUserId     // Catch:{ Exception -> 0x01b4 }
            r6.readAttachPath(r1, r2)     // Catch:{ Exception -> 0x01b4 }
            r1.reuse()     // Catch:{ Exception -> 0x01b4 }
            org.telegram.tgnet.TLRPC$MessageMedia r1 = r6.media     // Catch:{ Exception -> 0x01b4 }
            if (r1 == 0) goto L_0x00a8
            r16 = 1
            r1 = r17
            r2 = r6
            r3 = r0
            r4 = r9
            r5 = r8
            r12 = r6
            r6 = r16
            boolean r1 = r1.addFilesToDelete(r2, r3, r4, r5, r6)     // Catch:{ Exception -> 0x01b4 }
            if (r1 != 0) goto L_0x0072
            goto L_0x00a8
        L_0x0072:
            org.telegram.tgnet.TLRPC$MessageMedia r1 = r12.media     // Catch:{ Exception -> 0x01b4 }
            org.telegram.tgnet.TLRPC$Document r2 = r1.document     // Catch:{ Exception -> 0x01b4 }
            if (r2 == 0) goto L_0x0080
            org.telegram.tgnet.TLRPC$TL_documentEmpty r2 = new org.telegram.tgnet.TLRPC$TL_documentEmpty     // Catch:{ Exception -> 0x01b4 }
            r2.<init>()     // Catch:{ Exception -> 0x01b4 }
            r1.document = r2     // Catch:{ Exception -> 0x01b4 }
            goto L_0x008b
        L_0x0080:
            org.telegram.tgnet.TLRPC$Photo r2 = r1.photo     // Catch:{ Exception -> 0x01b4 }
            if (r2 == 0) goto L_0x008b
            org.telegram.tgnet.TLRPC$TL_photoEmpty r2 = new org.telegram.tgnet.TLRPC$TL_photoEmpty     // Catch:{ Exception -> 0x01b4 }
            r2.<init>()     // Catch:{ Exception -> 0x01b4 }
            r1.photo = r2     // Catch:{ Exception -> 0x01b4 }
        L_0x008b:
            org.telegram.tgnet.TLRPC$MessageMedia r1 = r12.media     // Catch:{ Exception -> 0x01b4 }
            int r2 = r1.flags     // Catch:{ Exception -> 0x01b4 }
            r2 = r2 & -2
            r1.flags = r2     // Catch:{ Exception -> 0x01b4 }
            int r1 = r14.intValue(r13)     // Catch:{ Exception -> 0x01b4 }
            r12.id = r1     // Catch:{ Exception -> 0x01b4 }
            int r1 = r14.intValue(r11)     // Catch:{ Exception -> 0x01b4 }
            r12.date = r1     // Catch:{ Exception -> 0x01b4 }
            long r1 = r14.longValue(r15)     // Catch:{ Exception -> 0x01b4 }
            r12.dialog_id = r1     // Catch:{ Exception -> 0x01b4 }
            r10.add(r12)     // Catch:{ Exception -> 0x01b4 }
        L_0x00a8:
            r12 = 0
            goto L_0x003b
        L_0x00aa:
            r14.dispose()     // Catch:{ Exception -> 0x01b4 }
            r7.deleteFromDownloadQueue(r9, r13)     // Catch:{ Exception -> 0x01b4 }
            boolean r1 = r10.isEmpty()     // Catch:{ Exception -> 0x01b4 }
            if (r1 != 0) goto L_0x01a3
            org.telegram.SQLite.SQLiteDatabase r1 = r7.database     // Catch:{ Exception -> 0x01b4 }
            java.lang.String r2 = "REPLACE INTO messages_v2 VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, NULL, ?, ?, ?, ?, ?, ?, 0)"
            org.telegram.SQLite.SQLitePreparedStatement r1 = r1.executeFast(r2)     // Catch:{ Exception -> 0x01b4 }
            r2 = 0
        L_0x00bf:
            int r3 = r10.size()     // Catch:{ Exception -> 0x01b4 }
            if (r2 >= r3) goto L_0x0198
            java.lang.Object r3 = r10.get(r2)     // Catch:{ Exception -> 0x01b4 }
            org.telegram.tgnet.TLRPC$Message r3 = (org.telegram.tgnet.TLRPC$Message) r3     // Catch:{ Exception -> 0x01b4 }
            org.telegram.tgnet.NativeByteBuffer r4 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x01b4 }
            int r5 = r3.getObjectSize()     // Catch:{ Exception -> 0x01b4 }
            r4.<init>((int) r5)     // Catch:{ Exception -> 0x01b4 }
            r3.serializeToStream(r4)     // Catch:{ Exception -> 0x01b4 }
            r1.requery()     // Catch:{ Exception -> 0x01b4 }
            int r5 = r3.id     // Catch:{ Exception -> 0x01b4 }
            r1.bindInteger(r13, r5)     // Catch:{ Exception -> 0x01b4 }
            long r5 = r3.dialog_id     // Catch:{ Exception -> 0x01b4 }
            r1.bindLong(r11, r5)     // Catch:{ Exception -> 0x01b4 }
            int r5 = org.telegram.messenger.MessageObject.getUnreadFlags(r3)     // Catch:{ Exception -> 0x01b4 }
            r1.bindInteger(r15, r5)     // Catch:{ Exception -> 0x01b4 }
            r5 = 4
            int r6 = r3.send_state     // Catch:{ Exception -> 0x01b4 }
            r1.bindInteger(r5, r6)     // Catch:{ Exception -> 0x01b4 }
            r5 = 5
            int r6 = r3.date     // Catch:{ Exception -> 0x01b4 }
            r1.bindInteger(r5, r6)     // Catch:{ Exception -> 0x01b4 }
            r5 = 6
            r1.bindByteBuffer((int) r5, (org.telegram.tgnet.NativeByteBuffer) r4)     // Catch:{ Exception -> 0x01b4 }
            r5 = 7
            boolean r6 = org.telegram.messenger.MessageObject.isOut(r3)     // Catch:{ Exception -> 0x01b4 }
            if (r6 != 0) goto L_0x0109
            boolean r6 = r3.from_scheduled     // Catch:{ Exception -> 0x01b4 }
            if (r6 == 0) goto L_0x0107
            goto L_0x0109
        L_0x0107:
            r6 = 0
            goto L_0x010a
        L_0x0109:
            r6 = 1
        L_0x010a:
            r1.bindInteger(r5, r6)     // Catch:{ Exception -> 0x01b4 }
            r5 = 8
            int r6 = r3.ttl     // Catch:{ Exception -> 0x01b4 }
            r1.bindInteger(r5, r6)     // Catch:{ Exception -> 0x01b4 }
            int r5 = r3.flags     // Catch:{ Exception -> 0x01b4 }
            r5 = r5 & 1024(0x400, float:1.435E-42)
            r6 = 9
            if (r5 == 0) goto L_0x0122
            int r5 = r3.views     // Catch:{ Exception -> 0x01b4 }
            r1.bindInteger(r6, r5)     // Catch:{ Exception -> 0x01b4 }
            goto L_0x0129
        L_0x0122:
            int r5 = r7.getMessageMediaType(r3)     // Catch:{ Exception -> 0x01b4 }
            r1.bindInteger(r6, r5)     // Catch:{ Exception -> 0x01b4 }
        L_0x0129:
            int r5 = r3.stickerVerified     // Catch:{ Exception -> 0x01b4 }
            if (r5 != 0) goto L_0x012f
            r5 = 1
            goto L_0x0134
        L_0x012f:
            if (r5 != r11) goto L_0x0133
            r5 = 2
            goto L_0x0134
        L_0x0133:
            r5 = 0
        L_0x0134:
            r6 = 10
            r1.bindInteger(r6, r5)     // Catch:{ Exception -> 0x01b4 }
            r5 = 11
            boolean r6 = r3.mentioned     // Catch:{ Exception -> 0x01b4 }
            if (r6 == 0) goto L_0x0141
            r6 = 1
            goto L_0x0142
        L_0x0141:
            r6 = 0
        L_0x0142:
            r1.bindInteger(r5, r6)     // Catch:{ Exception -> 0x01b4 }
            r5 = 12
            int r6 = r3.forwards     // Catch:{ Exception -> 0x01b4 }
            r1.bindInteger(r5, r6)     // Catch:{ Exception -> 0x01b4 }
            r5 = 0
            org.telegram.tgnet.TLRPC$MessageReplies r6 = r3.replies     // Catch:{ Exception -> 0x01b4 }
            r9 = 13
            if (r6 == 0) goto L_0x0167
            org.telegram.tgnet.NativeByteBuffer r5 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x01b4 }
            org.telegram.tgnet.TLRPC$MessageReplies r6 = r3.replies     // Catch:{ Exception -> 0x01b4 }
            int r6 = r6.getObjectSize()     // Catch:{ Exception -> 0x01b4 }
            r5.<init>((int) r6)     // Catch:{ Exception -> 0x01b4 }
            org.telegram.tgnet.TLRPC$MessageReplies r6 = r3.replies     // Catch:{ Exception -> 0x01b4 }
            r6.serializeToStream(r5)     // Catch:{ Exception -> 0x01b4 }
            r1.bindByteBuffer((int) r9, (org.telegram.tgnet.NativeByteBuffer) r5)     // Catch:{ Exception -> 0x01b4 }
            goto L_0x016a
        L_0x0167:
            r1.bindNull(r9)     // Catch:{ Exception -> 0x01b4 }
        L_0x016a:
            org.telegram.tgnet.TLRPC$TL_messageReplyHeader r6 = r3.reply_to     // Catch:{ Exception -> 0x01b4 }
            r9 = 14
            if (r6 == 0) goto L_0x017b
            int r12 = r6.reply_to_top_id     // Catch:{ Exception -> 0x01b4 }
            if (r12 == 0) goto L_0x0175
            goto L_0x0177
        L_0x0175:
            int r12 = r6.reply_to_msg_id     // Catch:{ Exception -> 0x01b4 }
        L_0x0177:
            r1.bindInteger(r9, r12)     // Catch:{ Exception -> 0x01b4 }
            goto L_0x017f
        L_0x017b:
            r6 = 0
            r1.bindInteger(r9, r6)     // Catch:{ Exception -> 0x01b4 }
        L_0x017f:
            r6 = 15
            long r11 = org.telegram.messenger.MessageObject.getChannelId(r3)     // Catch:{ Exception -> 0x01b4 }
            r1.bindLong(r6, r11)     // Catch:{ Exception -> 0x01b4 }
            r1.step()     // Catch:{ Exception -> 0x01b4 }
            r4.reuse()     // Catch:{ Exception -> 0x01b4 }
            if (r5 == 0) goto L_0x0193
            r5.reuse()     // Catch:{ Exception -> 0x01b4 }
        L_0x0193:
            int r2 = r2 + 1
            r11 = 2
            goto L_0x00bf
        L_0x0198:
            r1.dispose()     // Catch:{ Exception -> 0x01b4 }
            org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda134 r1 = new org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda134     // Catch:{ Exception -> 0x01b4 }
            r1.<init>(r7, r10)     // Catch:{ Exception -> 0x01b4 }
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r1)     // Catch:{ Exception -> 0x01b4 }
        L_0x01a3:
            org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda138 r1 = new org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda138     // Catch:{ Exception -> 0x01b4 }
            r1.<init>(r7, r8)     // Catch:{ Exception -> 0x01b4 }
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r1)     // Catch:{ Exception -> 0x01b4 }
            org.telegram.messenger.FileLoader r1 = r17.getFileLoader()     // Catch:{ Exception -> 0x01b4 }
            r2 = 0
            r1.deleteFiles(r0, r2)     // Catch:{ Exception -> 0x01b4 }
            goto L_0x01b8
        L_0x01b4:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
        L_0x01b8:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$emptyMessagesMedia$80(java.util.ArrayList, long):void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$emptyMessagesMedia$78(ArrayList arrayList) {
        for (int i = 0; i < arrayList.size(); i++) {
            getNotificationCenter().postNotificationName(NotificationCenter.updateMessageMedia, arrayList.get(i));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$emptyMessagesMedia$79(ArrayList arrayList) {
        getFileLoader().cancelLoadFiles(arrayList);
    }

    public void updateMessagePollResults(long j, TLRPC$Poll tLRPC$Poll, TLRPC$PollResults tLRPC$PollResults) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda107(this, j, tLRPC$Poll, tLRPC$PollResults));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessagePollResults$81(long j, TLRPC$Poll tLRPC$Poll, TLRPC$PollResults tLRPC$PollResults) {
        int i;
        ArrayList arrayList;
        TLRPC$Poll tLRPC$Poll2 = tLRPC$Poll;
        TLRPC$PollResults tLRPC$PollResults2 = tLRPC$PollResults;
        LongSparseArray longSparseArray = null;
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, mid FROM polls_v2 WHERE id = %d", new Object[]{Long.valueOf(j)}), new Object[0]);
            while (queryFinalized.next()) {
                long longValue = queryFinalized.longValue(0);
                if (longSparseArray == null) {
                    longSparseArray = new LongSparseArray();
                }
                ArrayList arrayList2 = (ArrayList) longSparseArray.get(longValue);
                if (arrayList2 == null) {
                    arrayList2 = new ArrayList();
                    longSparseArray.put(longValue, arrayList2);
                }
                arrayList2.add(Integer.valueOf(queryFinalized.intValue(1)));
            }
            queryFinalized.dispose();
            if (longSparseArray != null) {
                this.database.beginTransaction();
                SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages_v2 SET data = ? WHERE mid = ? AND uid = ?");
                int size = longSparseArray.size();
                for (int i2 = 0; i2 < size; i2++) {
                    long keyAt = longSparseArray.keyAt(i2);
                    ArrayList arrayList3 = (ArrayList) longSparseArray.valueAt(i2);
                    int i3 = 0;
                    for (int size2 = arrayList3.size(); i3 < size2; size2 = i) {
                        Integer num = (Integer) arrayList3.get(i3);
                        SQLiteDatabase sQLiteDatabase = this.database;
                        Locale locale = Locale.US;
                        LongSparseArray longSparseArray2 = longSparseArray;
                        int i4 = size;
                        SQLiteCursor queryFinalized2 = sQLiteDatabase.queryFinalized(String.format(locale, "SELECT data FROM messages_v2 WHERE mid = %d AND uid = %d", new Object[]{num, Long.valueOf(keyAt)}), new Object[0]);
                        if (queryFinalized2.next()) {
                            NativeByteBuffer byteBufferValue = queryFinalized2.byteBufferValue(0);
                            if (byteBufferValue != null) {
                                TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                arrayList = arrayList3;
                                i = size2;
                                TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                byteBufferValue.reuse();
                                TLRPC$MessageMedia tLRPC$MessageMedia = TLdeserialize.media;
                                if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPoll) {
                                    TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll = (TLRPC$TL_messageMediaPoll) tLRPC$MessageMedia;
                                    if (tLRPC$Poll2 != null) {
                                        tLRPC$TL_messageMediaPoll.poll = tLRPC$Poll2;
                                    }
                                    if (tLRPC$PollResults2 != null) {
                                        MessageObject.updatePollResults(tLRPC$TL_messageMediaPoll, tLRPC$PollResults2);
                                    }
                                    NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(TLdeserialize.getObjectSize());
                                    TLdeserialize.serializeToStream(nativeByteBuffer);
                                    executeFast.requery();
                                    executeFast.bindByteBuffer(1, nativeByteBuffer);
                                    executeFast.bindInteger(2, num.intValue());
                                    executeFast.bindLong(3, keyAt);
                                    executeFast.step();
                                    nativeByteBuffer.reuse();
                                }
                            } else {
                                arrayList = arrayList3;
                                i = size2;
                            }
                        } else {
                            arrayList = arrayList3;
                            i = size2;
                            this.database.executeFast(String.format(locale, "DELETE FROM polls_v2 WHERE mid = %d AND uid = %d", new Object[]{num, Long.valueOf(keyAt)})).stepThis().dispose();
                        }
                        queryFinalized2.dispose();
                        i3++;
                        longSparseArray = longSparseArray2;
                        arrayList3 = arrayList;
                        size = i4;
                    }
                    LongSparseArray longSparseArray3 = longSparseArray;
                    int i5 = size;
                }
                executeFast.dispose();
                this.database.commitTransaction();
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void updateMessageReactions(long j, int i, TLRPC$TL_messageReactions tLRPC$TL_messageReactions) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda51(this, i, j, tLRPC$TL_messageReactions));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessageReactions$82(int i, long j, TLRPC$TL_messageReactions tLRPC$TL_messageReactions) {
        NativeByteBuffer byteBufferValue;
        try {
            this.database.beginTransaction();
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM messages_v2 WHERE mid = %d AND uid = %d", new Object[]{Integer.valueOf(i), Long.valueOf(j)}), new Object[0]);
            if (queryFinalized.next() && (byteBufferValue = queryFinalized.byteBufferValue(0)) != null) {
                TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                if (TLdeserialize != null) {
                    TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                    byteBufferValue.reuse();
                    MessageObject.updateReactions(TLdeserialize, tLRPC$TL_messageReactions);
                    SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages_v2 SET data = ? WHERE mid = ? AND uid = ?");
                    NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(TLdeserialize.getObjectSize());
                    TLdeserialize.serializeToStream(nativeByteBuffer);
                    executeFast.requery();
                    executeFast.bindByteBuffer(1, nativeByteBuffer);
                    executeFast.bindInteger(2, i);
                    executeFast.bindLong(3, j);
                    executeFast.step();
                    nativeByteBuffer.reuse();
                    executeFast.dispose();
                } else {
                    byteBufferValue.reuse();
                }
            }
            queryFinalized.dispose();
            this.database.commitTransaction();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void getNewTask(LongSparseArray<ArrayList<Integer>> longSparseArray, LongSparseArray<ArrayList<Integer>> longSparseArray2) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda119(this, longSparseArray, longSparseArray2));
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Code restructure failed: missing block: B:17:0x00a1, code lost:
        if (r4 > 0) goto L_0x00a3;
     */
    /* JADX WARNING: Removed duplicated region for block: B:23:0x00ac A[Catch:{ Exception -> 0x003e }] */
    /* JADX WARNING: Removed duplicated region for block: B:26:0x00b5 A[Catch:{ Exception -> 0x003e }] */
    /* JADX WARNING: Removed duplicated region for block: B:31:0x00c6 A[Catch:{ Exception -> 0x003e }] */
    /* JADX WARNING: Removed duplicated region for block: B:39:0x00ce A[SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$getNewTask$83(androidx.collection.LongSparseArray r13, androidx.collection.LongSparseArray r14) {
        /*
            r12 = this;
            java.lang.String r0 = ","
            r1 = 2
            r2 = 1
            r3 = 0
            if (r13 == 0) goto L_0x0041
            int r4 = r13.size()     // Catch:{ Exception -> 0x003e }
            r5 = 0
        L_0x000c:
            if (r5 >= r4) goto L_0x0041
            org.telegram.SQLite.SQLiteDatabase r6 = r12.database     // Catch:{ Exception -> 0x003e }
            java.util.Locale r7 = java.util.Locale.US     // Catch:{ Exception -> 0x003e }
            java.lang.String r8 = "DELETE FROM enc_tasks_v4 WHERE mid IN(%s) AND uid = %d AND media = 0"
            java.lang.Object[] r9 = new java.lang.Object[r1]     // Catch:{ Exception -> 0x003e }
            java.lang.Object r10 = r13.valueAt(r5)     // Catch:{ Exception -> 0x003e }
            java.lang.Iterable r10 = (java.lang.Iterable) r10     // Catch:{ Exception -> 0x003e }
            java.lang.String r10 = android.text.TextUtils.join(r0, r10)     // Catch:{ Exception -> 0x003e }
            r9[r3] = r10     // Catch:{ Exception -> 0x003e }
            long r10 = r13.keyAt(r5)     // Catch:{ Exception -> 0x003e }
            java.lang.Long r10 = java.lang.Long.valueOf(r10)     // Catch:{ Exception -> 0x003e }
            r9[r2] = r10     // Catch:{ Exception -> 0x003e }
            java.lang.String r7 = java.lang.String.format(r7, r8, r9)     // Catch:{ Exception -> 0x003e }
            org.telegram.SQLite.SQLitePreparedStatement r6 = r6.executeFast(r7)     // Catch:{ Exception -> 0x003e }
            org.telegram.SQLite.SQLitePreparedStatement r6 = r6.stepThis()     // Catch:{ Exception -> 0x003e }
            r6.dispose()     // Catch:{ Exception -> 0x003e }
            int r5 = r5 + 1
            goto L_0x000c
        L_0x003e:
            r13 = move-exception
            goto L_0x00e3
        L_0x0041:
            if (r14 == 0) goto L_0x007a
            int r13 = r14.size()     // Catch:{ Exception -> 0x003e }
            r4 = 0
        L_0x0048:
            if (r4 >= r13) goto L_0x007a
            org.telegram.SQLite.SQLiteDatabase r5 = r12.database     // Catch:{ Exception -> 0x003e }
            java.util.Locale r6 = java.util.Locale.US     // Catch:{ Exception -> 0x003e }
            java.lang.String r7 = "DELETE FROM enc_tasks_v4 WHERE mid IN(%s) AND uid = %d AND media = 1"
            java.lang.Object[] r8 = new java.lang.Object[r1]     // Catch:{ Exception -> 0x003e }
            java.lang.Object r9 = r14.valueAt(r4)     // Catch:{ Exception -> 0x003e }
            java.lang.Iterable r9 = (java.lang.Iterable) r9     // Catch:{ Exception -> 0x003e }
            java.lang.String r9 = android.text.TextUtils.join(r0, r9)     // Catch:{ Exception -> 0x003e }
            r8[r3] = r9     // Catch:{ Exception -> 0x003e }
            long r9 = r14.keyAt(r4)     // Catch:{ Exception -> 0x003e }
            java.lang.Long r9 = java.lang.Long.valueOf(r9)     // Catch:{ Exception -> 0x003e }
            r8[r2] = r9     // Catch:{ Exception -> 0x003e }
            java.lang.String r6 = java.lang.String.format(r6, r7, r8)     // Catch:{ Exception -> 0x003e }
            org.telegram.SQLite.SQLitePreparedStatement r5 = r5.executeFast(r6)     // Catch:{ Exception -> 0x003e }
            org.telegram.SQLite.SQLitePreparedStatement r5 = r5.stepThis()     // Catch:{ Exception -> 0x003e }
            r5.dispose()     // Catch:{ Exception -> 0x003e }
            int r4 = r4 + 1
            goto L_0x0048
        L_0x007a:
            org.telegram.SQLite.SQLiteDatabase r13 = r12.database     // Catch:{ Exception -> 0x003e }
            java.lang.String r14 = "SELECT mid, date, media, uid FROM enc_tasks_v4 WHERE date = (SELECT min(date) FROM enc_tasks_v4)"
            java.lang.Object[] r0 = new java.lang.Object[r3]     // Catch:{ Exception -> 0x003e }
            org.telegram.SQLite.SQLiteCursor r13 = r13.queryFinalized(r14, r0)     // Catch:{ Exception -> 0x003e }
            r14 = 0
            r0 = r14
            r4 = 0
        L_0x0087:
            boolean r5 = r13.next()     // Catch:{ Exception -> 0x003e }
            if (r5 == 0) goto L_0x00d8
            int r4 = r13.intValue(r3)     // Catch:{ Exception -> 0x003e }
            int r5 = r13.intValue(r2)     // Catch:{ Exception -> 0x003e }
            int r6 = r13.intValue(r1)     // Catch:{ Exception -> 0x003e }
            r7 = 3
            long r7 = r13.longValue(r7)     // Catch:{ Exception -> 0x003e }
            r9 = -1
            if (r6 != r9) goto L_0x00a7
            if (r4 <= 0) goto L_0x00a5
        L_0x00a3:
            r6 = 1
            goto L_0x00aa
        L_0x00a5:
            r6 = 0
            goto L_0x00aa
        L_0x00a7:
            if (r6 == 0) goto L_0x00a5
            goto L_0x00a3
        L_0x00aa:
            if (r6 == 0) goto L_0x00b5
            if (r0 != 0) goto L_0x00b3
            androidx.collection.LongSparseArray r0 = new androidx.collection.LongSparseArray     // Catch:{ Exception -> 0x003e }
            r0.<init>()     // Catch:{ Exception -> 0x003e }
        L_0x00b3:
            r6 = r0
            goto L_0x00be
        L_0x00b5:
            if (r14 != 0) goto L_0x00bc
            androidx.collection.LongSparseArray r14 = new androidx.collection.LongSparseArray     // Catch:{ Exception -> 0x003e }
            r14.<init>()     // Catch:{ Exception -> 0x003e }
        L_0x00bc:
            r6 = r0
            r0 = r14
        L_0x00be:
            java.lang.Object r9 = r0.get(r7)     // Catch:{ Exception -> 0x003e }
            java.util.ArrayList r9 = (java.util.ArrayList) r9     // Catch:{ Exception -> 0x003e }
            if (r9 != 0) goto L_0x00ce
            java.util.ArrayList r9 = new java.util.ArrayList     // Catch:{ Exception -> 0x003e }
            r9.<init>()     // Catch:{ Exception -> 0x003e }
            r0.put(r7, r9)     // Catch:{ Exception -> 0x003e }
        L_0x00ce:
            java.lang.Integer r0 = java.lang.Integer.valueOf(r4)     // Catch:{ Exception -> 0x003e }
            r9.add(r0)     // Catch:{ Exception -> 0x003e }
            r4 = r5
            r0 = r6
            goto L_0x0087
        L_0x00d8:
            r13.dispose()     // Catch:{ Exception -> 0x003e }
            org.telegram.messenger.MessagesController r13 = r12.getMessagesController()     // Catch:{ Exception -> 0x003e }
            r13.processLoadedDeleteTask(r4, r14, r0)     // Catch:{ Exception -> 0x003e }
            goto L_0x00e6
        L_0x00e3:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r13)
        L_0x00e6:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$getNewTask$83(androidx.collection.LongSparseArray, androidx.collection.LongSparseArray):void");
    }

    public void markMentionMessageAsRead(long j, int i, long j2) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda50(this, i, j, j2));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$markMentionMessageAsRead$84(int i, long j, long j2) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            Locale locale = Locale.US;
            sQLiteDatabase.executeFast(String.format(locale, "UPDATE messages_v2 SET read_state = read_state | 2 WHERE mid = %d AND uid = %d", new Object[]{Integer.valueOf(i), Long.valueOf(j)})).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase2 = this.database;
            SQLiteCursor queryFinalized = sQLiteDatabase2.queryFinalized("SELECT unread_count_i FROM dialogs WHERE did = " + j2, new Object[0]);
            int max = queryFinalized.next() ? Math.max(0, queryFinalized.intValue(0) - 1) : 0;
            queryFinalized.dispose();
            this.database.executeFast(String.format(locale, "UPDATE dialogs SET unread_count_i = %d WHERE did = %d", new Object[]{Integer.valueOf(max), Long.valueOf(j2)})).stepThis().dispose();
            LongSparseIntArray longSparseIntArray = new LongSparseIntArray(1);
            longSparseIntArray.put(j2, max);
            if (max == 0) {
                updateFiltersReadCounter((LongSparseIntArray) null, longSparseIntArray, true);
            }
            getMessagesController().processDialogsUpdateRead((LongSparseIntArray) null, longSparseIntArray);
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void markMessageAsMention(long j, int i) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda47(this, i, j));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessageAsMention$85(int i, long j) {
        try {
            this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET mention = 1, read_state = read_state & ~2 WHERE mid = %d AND uid = %d", new Object[]{Integer.valueOf(i), Long.valueOf(j)})).stepThis().dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void resetMentionsCount(long j, int i) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda68(this, j, i));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$resetMentionsCount$86(long j, int i) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT unread_count_i FROM dialogs WHERE did = " + j, new Object[0]);
            int intValue = queryFinalized.next() ? queryFinalized.intValue(0) : 0;
            queryFinalized.dispose();
            if (intValue != 0 || i != 0) {
                if (i == 0) {
                    this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET read_state = read_state | 2 WHERE uid = %d AND mention = 1 AND read_state IN(0, 1)", new Object[]{Long.valueOf(j)})).stepThis().dispose();
                }
                this.database.executeFast(String.format(Locale.US, "UPDATE dialogs SET unread_count_i = %d WHERE did = %d", new Object[]{Integer.valueOf(i), Long.valueOf(j)})).stepThis().dispose();
                LongSparseIntArray longSparseIntArray = new LongSparseIntArray(1);
                longSparseIntArray.put(j, i);
                getMessagesController().processDialogsUpdateRead((LongSparseIntArray) null, longSparseIntArray);
                if (i == 0) {
                    updateFiltersReadCounter((LongSparseIntArray) null, longSparseIntArray, true);
                }
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void createTaskForMid(long j, int i, int i2, int i3, int i4, boolean z) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda38(this, i2, i3, i4, i, z, j));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$createTaskForMid$88(int i, int i2, int i3, int i4, boolean z, long j) {
        try {
            int max = Math.max(i, i2) + i3;
            SparseArray sparseArray = new SparseArray();
            ArrayList arrayList = new ArrayList();
            arrayList.add(Integer.valueOf(i4));
            sparseArray.put(max, arrayList);
            AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda191(this, z, j, arrayList));
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO enc_tasks_v4 VALUES(?, ?, ?, ?)");
            for (int i5 = 0; i5 < sparseArray.size(); i5++) {
                int keyAt = sparseArray.keyAt(i5);
                ArrayList arrayList2 = (ArrayList) sparseArray.get(keyAt);
                for (int i6 = 0; i6 < arrayList2.size(); i6++) {
                    executeFast.requery();
                    executeFast.bindInteger(1, ((Integer) arrayList2.get(i6)).intValue());
                    executeFast.bindLong(2, j);
                    executeFast.bindInteger(3, keyAt);
                    executeFast.bindInteger(4, 1);
                    executeFast.step();
                }
            }
            executeFast.dispose();
            this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET ttl = 0 WHERE mid = %d AND uid = %d", new Object[]{Integer.valueOf(i4), Long.valueOf(j)})).stepThis().dispose();
            getMessagesController().didAddedNewTask(max, j, sparseArray);
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$createTaskForMid$87(boolean z, long j, ArrayList arrayList) {
        if (!z) {
            markMessagesContentAsRead(j, arrayList, 0);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.messagesReadContent, Long.valueOf(j), arrayList);
    }

    public void createTaskForSecretChat(int i, int i2, int i3, int i4, ArrayList<Long> arrayList) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda56(this, i, arrayList, i4, i2, i3));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$createTaskForSecretChat$90(int i, ArrayList arrayList, int i2, int i3, int i4) {
        SQLiteCursor sQLiteCursor;
        ArrayList arrayList2 = arrayList;
        try {
            long makeEncryptedDialogId = DialogObject.makeEncryptedDialogId((long) i);
            SparseArray sparseArray = new SparseArray();
            ArrayList arrayList3 = new ArrayList();
            StringBuilder sb = new StringBuilder();
            if (arrayList2 == null) {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT mid, ttl FROM messages_v2 WHERE uid = %d AND out = %d AND read_state > 0 AND ttl > 0 AND date <= %d AND send_state = 0 AND media != 1", new Object[]{Long.valueOf(makeEncryptedDialogId), Integer.valueOf(i2), Integer.valueOf(i3)}), new Object[0]);
            } else {
                String join = TextUtils.join(",", arrayList2);
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT m.mid, m.ttl FROM messages_v2 as m INNER JOIN randoms_v2 as r ON m.mid = r.mid AND m.uid = r.uid WHERE r.random_id IN (%s)", new Object[]{join}), new Object[0]);
            }
            int i5 = Integer.MAX_VALUE;
            while (sQLiteCursor.next()) {
                int intValue = sQLiteCursor.intValue(1);
                int intValue2 = sQLiteCursor.intValue(0);
                if (arrayList2 != null) {
                    arrayList3.add(Integer.valueOf(intValue2));
                }
                if (intValue > 0) {
                    int max = Math.max(i3, i4) + intValue;
                    i5 = Math.min(i5, max);
                    ArrayList arrayList4 = (ArrayList) sparseArray.get(max);
                    if (arrayList4 == null) {
                        arrayList4 = new ArrayList();
                        sparseArray.put(max, arrayList4);
                    }
                    if (sb.length() != 0) {
                        sb.append(",");
                    }
                    sb.append(intValue2);
                    arrayList4.add(Integer.valueOf(intValue2));
                }
            }
            sQLiteCursor.dispose();
            if (arrayList2 != null) {
                AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda95(this, makeEncryptedDialogId, arrayList3));
            }
            if (sparseArray.size() != 0) {
                this.database.beginTransaction();
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO enc_tasks_v4 VALUES(?, ?, ?, ?)");
                for (int i6 = 0; i6 < sparseArray.size(); i6++) {
                    int keyAt = sparseArray.keyAt(i6);
                    ArrayList arrayList5 = (ArrayList) sparseArray.get(keyAt);
                    for (int i7 = 0; i7 < arrayList5.size(); i7++) {
                        executeFast.requery();
                        executeFast.bindInteger(1, ((Integer) arrayList5.get(i7)).intValue());
                        executeFast.bindLong(2, makeEncryptedDialogId);
                        executeFast.bindInteger(3, keyAt);
                        executeFast.bindInteger(4, 0);
                        executeFast.step();
                    }
                }
                executeFast.dispose();
                this.database.commitTransaction();
                this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET ttl = 0 WHERE mid IN(%s) AND uid = %d", new Object[]{sb.toString(), Long.valueOf(makeEncryptedDialogId)})).stepThis().dispose();
                getMessagesController().didAddedNewTask(i5, makeEncryptedDialogId, sparseArray);
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$createTaskForSecretChat$89(long j, ArrayList arrayList) {
        markMessagesContentAsRead(j, arrayList, 0);
        getNotificationCenter().postNotificationName(NotificationCenter.messagesReadContent, Long.valueOf(j), arrayList);
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r7v1, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v3, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v6, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v7, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v8, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v9, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v10, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v15, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v16, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v17, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v18, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v21, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v56, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v23, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v60, resolved type: int[]} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v61, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v62, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v26, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v12, resolved type: int[]} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v13, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v72, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v28, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v31, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v32, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v33, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v34, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v90, resolved type: int[][]} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v73, resolved type: int[]} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v74, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v35, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v91, resolved type: int[]} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v92, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v36, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v37, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v16, resolved type: int[]} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v17, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v38, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v39, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v40, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v43, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v44, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v45, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v46, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v47, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v48, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v50, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v51, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v52, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v53, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v89, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v55, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v56, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v27, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v35, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v37, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v38, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v58, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v16, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v61, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v62, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v63, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v30, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v35, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v37, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v38, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v65, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v68, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v71, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v76, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v23, resolved type: int[]} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v24, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v79, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v82, resolved type: java.lang.Object[]} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v81, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v4, resolved type: int[]} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r19v10, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v82, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v83, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v84, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v30, resolved type: int[]} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v31, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v92, resolved type: java.lang.Object[]} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v87, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v5, resolved type: int[]} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r19v11, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v88, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v89, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v90, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v92, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v93, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v95, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v104, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v100, resolved type: int} */
    /* JADX WARNING: Code restructure failed: missing block: B:155:0x03bf, code lost:
        if (r9.indexOfKey(-r4.id) >= 0) goto L_0x03c1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:316:0x0670, code lost:
        if (r1.dialogsWithMentions.indexOfKey(-r0.id) < 0) goto L_0x0683;
     */
    /* JADX WARNING: Multi-variable type inference failed */
    /* JADX WARNING: Removed duplicated region for block: B:194:0x047f  */
    /* JADX WARNING: Removed duplicated region for block: B:208:0x04ba  */
    /* JADX WARNING: Removed duplicated region for block: B:256:0x057f  */
    /* JADX WARNING: Removed duplicated region for block: B:409:0x07e3  */
    /* JADX WARNING: Removed duplicated region for block: B:423:0x0819  */
    /* JADX WARNING: Removed duplicated region for block: B:471:0x08cf  */
    /* JADX WARNING: Removed duplicated region for block: B:579:0x0a9e  */
    /* JADX WARNING: Removed duplicated region for block: B:580:0x0aa5  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void updateFiltersReadCounter(org.telegram.messenger.support.LongSparseIntArray r26, org.telegram.messenger.support.LongSparseIntArray r27, boolean r28) throws java.lang.Exception {
        /*
            r25 = this;
            r0 = r25
            r1 = r27
            if (r26 == 0) goto L_0x000c
            int r2 = r26.size()
            if (r2 != 0) goto L_0x0016
        L_0x000c:
            if (r1 == 0) goto L_0x0acb
            int r2 = r27.size()
            if (r2 != 0) goto L_0x0016
            goto L_0x0acb
        L_0x0016:
            r2 = 0
            r3 = 0
        L_0x0018:
            r4 = 2
            if (r3 >= r4) goto L_0x004a
            r5 = 0
        L_0x001c:
            if (r5 >= r4) goto L_0x003f
            int[][] r6 = r0.contacts
            r6 = r6[r3]
            int[][] r7 = r0.nonContacts
            r7 = r7[r3]
            int[][] r8 = r0.bots
            r8 = r8[r3]
            int[][] r9 = r0.channels
            r9 = r9[r3]
            int[][] r10 = r0.groups
            r10 = r10[r3]
            r10[r5] = r2
            r9[r5] = r2
            r8[r5] = r2
            r7[r5] = r2
            r6[r5] = r2
            int r5 = r5 + 1
            goto L_0x001c
        L_0x003f:
            int[] r4 = r0.mentionChannels
            int[] r5 = r0.mentionGroups
            r5[r3] = r2
            r4[r3] = r2
            int r3 = r3 + 1
            goto L_0x0018
        L_0x004a:
            java.util.ArrayList r3 = new java.util.ArrayList
            r3.<init>()
            java.util.ArrayList r5 = new java.util.ArrayList
            r5.<init>()
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            java.util.ArrayList r7 = new java.util.ArrayList
            r7.<init>()
            java.util.ArrayList r8 = new java.util.ArrayList
            r8.<init>()
            java.util.ArrayList r9 = new java.util.ArrayList
            r9.<init>()
            androidx.collection.LongSparseArray r10 = new androidx.collection.LongSparseArray
            r10.<init>()
            androidx.collection.LongSparseArray r11 = new androidx.collection.LongSparseArray
            r11.<init>()
            r12 = 0
        L_0x0073:
            if (r12 >= r4) goto L_0x017d
            if (r12 != 0) goto L_0x007a
            r13 = r26
            goto L_0x007b
        L_0x007a:
            r13 = r1
        L_0x007b:
            if (r13 != 0) goto L_0x0083
        L_0x007d:
            r17 = r5
            r20 = r11
            goto L_0x0173
        L_0x0083:
            r14 = 0
        L_0x0084:
            int r15 = r13.size()
            if (r14 >= r15) goto L_0x007d
            int r15 = r13.valueAt(r14)
            java.lang.Integer r15 = java.lang.Integer.valueOf(r15)
            if (r28 == 0) goto L_0x00a3
            int r16 = r15.intValue()
            if (r16 != 0) goto L_0x009b
            goto L_0x00a3
        L_0x009b:
            r17 = r5
            r20 = r11
            r19 = r13
            goto L_0x0167
        L_0x00a3:
            if (r28 != 0) goto L_0x00ac
            int r16 = r15.intValue()
            if (r16 != 0) goto L_0x00ac
            goto L_0x009b
        L_0x00ac:
            r17 = r5
            long r4 = r13.keyAt(r14)
            if (r28 == 0) goto L_0x00c2
            if (r12 != 0) goto L_0x00bc
            androidx.collection.LongSparseArray<java.lang.Integer> r15 = r0.dialogsWithUnread
            r15.remove(r4)
            goto L_0x00e2
        L_0x00bc:
            androidx.collection.LongSparseArray<java.lang.Integer> r15 = r0.dialogsWithMentions
            r15.remove(r4)
            goto L_0x00e2
        L_0x00c2:
            androidx.collection.LongSparseArray<java.lang.Integer> r2 = r0.dialogsWithMentions
            int r2 = r2.indexOfKey(r4)
            if (r2 >= 0) goto L_0x00d5
            androidx.collection.LongSparseArray<java.lang.Integer> r2 = r0.dialogsWithUnread
            int r2 = r2.indexOfKey(r4)
            if (r2 >= 0) goto L_0x00d5
            r11.put(r4, r15)
        L_0x00d5:
            if (r12 != 0) goto L_0x00dd
            androidx.collection.LongSparseArray<java.lang.Integer> r2 = r0.dialogsWithUnread
            r2.put(r4, r15)
            goto L_0x00e2
        L_0x00dd:
            androidx.collection.LongSparseArray<java.lang.Integer> r2 = r0.dialogsWithMentions
            r2.put(r4, r15)
        L_0x00e2:
            int r2 = r10.indexOfKey(r4)
            if (r2 >= 0) goto L_0x011d
            org.telegram.SQLite.SQLiteDatabase r2 = r0.database
            java.lang.StringBuilder r15 = new java.lang.StringBuilder
            r15.<init>()
            r19 = r13
            java.lang.String r13 = "SELECT folder_id FROM dialogs WHERE did = "
            r15.append(r13)
            r15.append(r4)
            java.lang.String r13 = r15.toString()
            r20 = r11
            r15 = 0
            java.lang.Object[] r11 = new java.lang.Object[r15]
            org.telegram.SQLite.SQLiteCursor r2 = r2.queryFinalized(r13, r11)
            boolean r11 = r2.next()
            if (r11 == 0) goto L_0x0111
            int r11 = r2.intValue(r15)
            goto L_0x0112
        L_0x0111:
            r11 = 0
        L_0x0112:
            r2.dispose()
            java.lang.Integer r2 = java.lang.Integer.valueOf(r11)
            r10.put(r4, r2)
            goto L_0x0121
        L_0x011d:
            r20 = r11
            r19 = r13
        L_0x0121:
            boolean r2 = org.telegram.messenger.DialogObject.isEncryptedDialog(r4)
            if (r2 == 0) goto L_0x013d
            int r2 = org.telegram.messenger.DialogObject.getEncryptedChatId(r4)
            java.lang.Integer r4 = java.lang.Integer.valueOf(r2)
            boolean r4 = r9.contains(r4)
            if (r4 != 0) goto L_0x0167
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)
            r9.add(r2)
            goto L_0x0167
        L_0x013d:
            boolean r2 = org.telegram.messenger.DialogObject.isUserDialog(r4)
            if (r2 == 0) goto L_0x0155
            java.lang.Long r2 = java.lang.Long.valueOf(r4)
            boolean r2 = r7.contains(r2)
            if (r2 != 0) goto L_0x0167
            java.lang.Long r2 = java.lang.Long.valueOf(r4)
            r7.add(r2)
            goto L_0x0167
        L_0x0155:
            long r4 = -r4
            java.lang.Long r2 = java.lang.Long.valueOf(r4)
            boolean r2 = r8.contains(r2)
            if (r2 != 0) goto L_0x0167
            java.lang.Long r2 = java.lang.Long.valueOf(r4)
            r8.add(r2)
        L_0x0167:
            int r14 = r14 + 1
            r5 = r17
            r13 = r19
            r11 = r20
            r2 = 0
            r4 = 2
            goto L_0x0084
        L_0x0173:
            int r12 = r12 + 1
            r5 = r17
            r11 = r20
            r2 = 0
            r4 = 2
            goto L_0x0073
        L_0x017d:
            r17 = r5
            r20 = r11
            androidx.collection.LongSparseArray r2 = new androidx.collection.LongSparseArray
            r2.<init>()
            androidx.collection.LongSparseArray r4 = new androidx.collection.LongSparseArray
            r4.<init>()
            androidx.collection.LongSparseArray r5 = new androidx.collection.LongSparseArray
            r5.<init>()
            androidx.collection.LongSparseArray r11 = new androidx.collection.LongSparseArray
            r11.<init>()
            androidx.collection.LongSparseArray r12 = new androidx.collection.LongSparseArray
            r12.<init>()
            androidx.collection.LongSparseArray r13 = new androidx.collection.LongSparseArray
            r13.<init>()
            boolean r14 = r7.isEmpty()
            java.lang.String r15 = ","
            r26 = r4
            if (r14 != 0) goto L_0x022e
            java.lang.String r7 = android.text.TextUtils.join(r15, r7)
            r0.getUsersInternal(r7, r3)
            int r7 = r3.size()
            r14 = 0
        L_0x01b5:
            if (r14 >= r7) goto L_0x022e
            java.lang.Object r19 = r3.get(r14)
            r4 = r19
            org.telegram.tgnet.TLRPC$User r4 = (org.telegram.tgnet.TLRPC$User) r4
            r19 = r3
            org.telegram.messenger.MessagesController r3 = r25.getMessagesController()
            r21 = r6
            r22 = r7
            long r6 = r4.id
            boolean r3 = r3.isDialogMuted(r6)
            long r6 = r4.id
            java.lang.Object r6 = r10.get(r6)
            java.lang.Integer r6 = (java.lang.Integer) r6
            int r6 = r6.intValue()
            r23 = r8
            if (r3 == 0) goto L_0x01e6
            long r7 = r4.id
            java.lang.Boolean r1 = java.lang.Boolean.TRUE
            r12.put(r7, r1)
        L_0x01e6:
            r1 = 1
            if (r6 != r1) goto L_0x01f0
            long r7 = r4.id
            java.lang.Boolean r1 = java.lang.Boolean.TRUE
            r13.put(r7, r1)
        L_0x01f0:
            boolean r1 = r4.bot
            if (r1 == 0) goto L_0x01ff
            int[][] r1 = r0.bots
            r1 = r1[r6]
            r6 = r1[r3]
            r7 = 1
            int r6 = r6 + r7
            r1[r3] = r6
            goto L_0x021c
        L_0x01ff:
            r7 = 1
            boolean r1 = r4.self
            if (r1 != 0) goto L_0x0213
            boolean r1 = r4.contact
            if (r1 == 0) goto L_0x0209
            goto L_0x0213
        L_0x0209:
            int[][] r1 = r0.nonContacts
            r1 = r1[r6]
            r6 = r1[r3]
            int r6 = r6 + r7
            r1[r3] = r6
            goto L_0x021c
        L_0x0213:
            int[][] r1 = r0.contacts
            r1 = r1[r6]
            r6 = r1[r3]
            int r6 = r6 + r7
            r1[r3] = r6
        L_0x021c:
            long r6 = r4.id
            r2.put(r6, r4)
            int r14 = r14 + 1
            r1 = r27
            r3 = r19
            r6 = r21
            r7 = r22
            r8 = r23
            goto L_0x01b5
        L_0x022e:
            r21 = r6
            r23 = r8
            boolean r1 = r9.isEmpty()
            if (r1 != 0) goto L_0x02fd
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            java.util.ArrayList r3 = new java.util.ArrayList
            r3.<init>()
            java.lang.String r4 = android.text.TextUtils.join(r15, r9)
            r0.getEncryptedChatsInternal(r4, r3, r1)
            boolean r4 = r1.isEmpty()
            if (r4 != 0) goto L_0x02fd
            java.lang.String r1 = android.text.TextUtils.join(r15, r1)
            r4 = r17
            r0.getUsersInternal(r1, r4)
            int r1 = r4.size()
            r6 = 0
        L_0x025d:
            if (r6 >= r1) goto L_0x026d
            java.lang.Object r7 = r4.get(r6)
            org.telegram.tgnet.TLRPC$User r7 = (org.telegram.tgnet.TLRPC$User) r7
            long r8 = r7.id
            r5.put(r8, r7)
            int r6 = r6 + 1
            goto L_0x025d
        L_0x026d:
            int r1 = r3.size()
            r4 = 0
        L_0x0272:
            if (r4 >= r1) goto L_0x02fd
            java.lang.Object r6 = r3.get(r4)
            org.telegram.tgnet.TLRPC$EncryptedChat r6 = (org.telegram.tgnet.TLRPC$EncryptedChat) r6
            long r7 = r6.user_id
            java.lang.Object r7 = r5.get(r7)
            org.telegram.tgnet.TLRPC$User r7 = (org.telegram.tgnet.TLRPC$User) r7
            if (r7 != 0) goto L_0x0289
            r14 = r1
            r9 = r2
            r17 = r3
            goto L_0x02f5
        L_0x0289:
            int r6 = r6.id
            long r8 = (long) r6
            long r8 = org.telegram.messenger.DialogObject.makeEncryptedDialogId(r8)
            org.telegram.messenger.MessagesController r6 = r25.getMessagesController()
            boolean r6 = r6.isDialogMuted(r8)
            java.lang.Object r8 = r10.get(r8)
            java.lang.Integer r8 = (java.lang.Integer) r8
            int r8 = r8.intValue()
            r14 = r1
            r9 = r2
            if (r6 == 0) goto L_0x02b0
            long r1 = r7.id
            r17 = r3
            java.lang.Boolean r3 = java.lang.Boolean.TRUE
            r12.put(r1, r3)
            goto L_0x02b2
        L_0x02b0:
            r17 = r3
        L_0x02b2:
            r1 = 1
            if (r8 != r1) goto L_0x02bc
            long r1 = r7.id
            java.lang.Boolean r3 = java.lang.Boolean.TRUE
            r13.put(r1, r3)
        L_0x02bc:
            boolean r1 = r7.self
            if (r1 != 0) goto L_0x02d0
            boolean r1 = r7.contact
            if (r1 == 0) goto L_0x02c5
            goto L_0x02d0
        L_0x02c5:
            int[][] r1 = r0.nonContacts
            r1 = r1[r8]
            r2 = r1[r6]
            r3 = 1
            int r2 = r2 + r3
            r1[r6] = r2
            goto L_0x02da
        L_0x02d0:
            r3 = 1
            int[][] r1 = r0.contacts
            r1 = r1[r8]
            r2 = r1[r6]
            int r2 = r2 + r3
            r1[r6] = r2
        L_0x02da:
            long r1 = r7.id
            r6 = 0
            java.lang.Integer r8 = java.lang.Integer.valueOf(r6)
            java.lang.Object r1 = r11.get(r1, r8)
            java.lang.Integer r1 = (java.lang.Integer) r1
            int r1 = r1.intValue()
            long r6 = r7.id
            int r1 = r1 + r3
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            r11.put(r6, r1)
        L_0x02f5:
            int r4 = r4 + 1
            r2 = r9
            r1 = r14
            r3 = r17
            goto L_0x0272
        L_0x02fd:
            r9 = r2
            boolean r1 = r23.isEmpty()
            if (r1 != 0) goto L_0x0405
            r1 = r23
            java.lang.String r1 = android.text.TextUtils.join(r15, r1)
            r2 = r21
            r0.getChatsInternal(r1, r2)
            int r1 = r2.size()
            r3 = 0
        L_0x0314:
            if (r3 >= r1) goto L_0x0405
            java.lang.Object r4 = r2.get(r3)
            org.telegram.tgnet.TLRPC$Chat r4 = (org.telegram.tgnet.TLRPC$Chat) r4
            org.telegram.tgnet.TLRPC$InputChannel r6 = r4.migrated_to
            boolean r6 = r6 instanceof org.telegram.tgnet.TLRPC$TL_inputChannel
            if (r6 != 0) goto L_0x03eb
            boolean r6 = org.telegram.messenger.ChatObject.isNotInChat(r4)
            if (r6 == 0) goto L_0x032a
            goto L_0x03eb
        L_0x032a:
            org.telegram.messenger.MessagesController r6 = r25.getMessagesController()
            long r7 = r4.id
            long r7 = -r7
            boolean r6 = r6.isDialogMuted(r7, r4)
            androidx.collection.LongSparseArray<java.lang.Integer> r7 = r0.dialogsWithUnread
            long r14 = r4.id
            long r14 = -r14
            int r7 = r7.indexOfKey(r14)
            if (r7 < 0) goto L_0x0342
            r7 = 1
            goto L_0x0343
        L_0x0342:
            r7 = 0
        L_0x0343:
            androidx.collection.LongSparseArray<java.lang.Integer> r8 = r0.dialogsWithMentions
            long r14 = r4.id
            long r14 = -r14
            int r8 = r8.indexOfKey(r14)
            if (r8 < 0) goto L_0x0350
            r8 = 1
            goto L_0x0351
        L_0x0350:
            r8 = 0
        L_0x0351:
            long r14 = r4.id
            long r14 = -r14
            java.lang.Object r14 = r10.get(r14)
            java.lang.Integer r14 = (java.lang.Integer) r14
            int r14 = r14.intValue()
            r15 = r1
            r21 = r2
            if (r6 == 0) goto L_0x036e
            long r1 = r4.id
            long r1 = -r1
            r17 = r10
            java.lang.Boolean r10 = java.lang.Boolean.TRUE
            r12.put(r1, r10)
            goto L_0x0370
        L_0x036e:
            r17 = r10
        L_0x0370:
            r1 = 1
            if (r14 != r1) goto L_0x037b
            long r1 = r4.id
            long r1 = -r1
            java.lang.Boolean r10 = java.lang.Boolean.TRUE
            r13.put(r1, r10)
        L_0x037b:
            r1 = r27
            r2 = r9
            if (r6 == 0) goto L_0x03aa
            if (r1 == 0) goto L_0x03aa
            long r9 = r4.id
            long r9 = -r9
            int r9 = r1.indexOfKey(r9)
            if (r9 < 0) goto L_0x03aa
            boolean r9 = org.telegram.messenger.ChatObject.isChannel(r4)
            if (r9 == 0) goto L_0x03a0
            boolean r9 = r4.megagroup
            if (r9 != 0) goto L_0x03a0
            int[] r9 = r0.mentionChannels
            r10 = r9[r14]
            r19 = 1
            int r10 = r10 + 1
            r9[r14] = r10
            goto L_0x03aa
        L_0x03a0:
            r19 = 1
            int[] r9 = r0.mentionGroups
            r10 = r9[r14]
            int r10 = r10 + 1
            r9[r14] = r10
        L_0x03aa:
            if (r28 == 0) goto L_0x03b4
            if (r7 != 0) goto L_0x03b4
            if (r8 == 0) goto L_0x03b1
            goto L_0x03b4
        L_0x03b1:
            r9 = r20
            goto L_0x03c1
        L_0x03b4:
            if (r28 != 0) goto L_0x03e1
            long r7 = r4.id
            long r7 = -r7
            r9 = r20
            int r7 = r9.indexOfKey(r7)
            if (r7 < 0) goto L_0x03e3
        L_0x03c1:
            boolean r7 = org.telegram.messenger.ChatObject.isChannel(r4)
            if (r7 == 0) goto L_0x03d6
            boolean r7 = r4.megagroup
            if (r7 != 0) goto L_0x03d6
            int[][] r7 = r0.channels
            r7 = r7[r14]
            r8 = r7[r6]
            r10 = 1
            int r8 = r8 + r10
            r7[r6] = r8
            goto L_0x03e3
        L_0x03d6:
            r10 = 1
            int[][] r7 = r0.groups
            r7 = r7[r14]
            r8 = r7[r6]
            int r8 = r8 + r10
            r7[r6] = r8
            goto L_0x03e3
        L_0x03e1:
            r9 = r20
        L_0x03e3:
            long r6 = r4.id
            r8 = r26
            r8.put(r6, r4)
            goto L_0x03f7
        L_0x03eb:
            r8 = r26
            r15 = r1
            r21 = r2
            r2 = r9
            r17 = r10
            r9 = r20
            r1 = r27
        L_0x03f7:
            int r3 = r3 + 1
            r26 = r8
            r20 = r9
            r1 = r15
            r10 = r17
            r9 = r2
            r2 = r21
            goto L_0x0314
        L_0x0405:
            r8 = r26
            r1 = r27
            r2 = r9
            r9 = r20
            java.util.ArrayList<org.telegram.messenger.MessagesController$DialogFilter> r3 = r0.dialogFilters
            int r3 = r3.size()
            r15 = 0
        L_0x0413:
            int r4 = r3 + 2
            if (r15 >= r4) goto L_0x0ac1
            if (r15 >= r3) goto L_0x0435
            java.util.ArrayList<org.telegram.messenger.MessagesController$DialogFilter> r4 = r0.dialogFilters
            java.lang.Object r4 = r4.get(r15)
            org.telegram.messenger.MessagesController$DialogFilter r4 = (org.telegram.messenger.MessagesController.DialogFilter) r4
            int r6 = r4.pendingUnreadCount
            if (r6 >= 0) goto L_0x0430
            r1 = r0
            r0 = r3
            r10 = r5
            r6 = r9
            r26 = r13
            r7 = 0
            r9 = r2
            r2 = r15
            goto L_0x0ab4
        L_0x0430:
            int r6 = r4.pendingUnreadCount
            int r7 = r4.flags
            goto L_0x0454
        L_0x0435:
            r4 = 0
            int r6 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ALL_CHATS
            if (r15 != r3) goto L_0x044a
            int r7 = r0.pendingMainUnreadCount
            int r10 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED
            r6 = r6 | r10
            org.telegram.messenger.NotificationsController r10 = r25.getNotificationsController()
            boolean r10 = r10.showBadgeMuted
            if (r10 != 0) goto L_0x044f
            int r10 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            goto L_0x044e
        L_0x044a:
            int r7 = r0.pendingArchiveUnreadCount
            int r10 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED
        L_0x044e:
            r6 = r6 | r10
        L_0x044f:
            r24 = r7
            r7 = r6
            r6 = r24
        L_0x0454:
            if (r28 == 0) goto L_0x07b2
            int r10 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CONTACTS
            r10 = r10 & r7
            if (r10 == 0) goto L_0x0491
            int r10 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED
            r10 = r10 & r7
            if (r10 != 0) goto L_0x0477
            int[][] r10 = r0.contacts
            r14 = 0
            r17 = r10[r14]
            r17 = r17[r14]
            int r6 = r6 - r17
            int r17 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r17 = r7 & r17
            if (r17 != 0) goto L_0x0478
            r10 = r10[r14]
            r17 = 1
            r10 = r10[r17]
            int r6 = r6 - r10
            goto L_0x047a
        L_0x0477:
            r14 = 0
        L_0x0478:
            r17 = 1
        L_0x047a:
            int r10 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED
            r10 = r10 & r7
            if (r10 != 0) goto L_0x0491
            int[][] r10 = r0.contacts
            r18 = r10[r17]
            r19 = r18[r14]
            int r6 = r6 - r19
            int r14 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r14 = r14 & r7
            if (r14 != 0) goto L_0x0491
            r10 = r10[r17]
            r10 = r10[r17]
            int r6 = r6 - r10
        L_0x0491:
            int r10 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS
            r10 = r10 & r7
            if (r10 == 0) goto L_0x04cc
            int r10 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED
            r10 = r10 & r7
            if (r10 != 0) goto L_0x04b2
            int[][] r10 = r0.nonContacts
            r14 = 0
            r17 = r10[r14]
            r17 = r17[r14]
            int r6 = r6 - r17
            int r17 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r17 = r7 & r17
            if (r17 != 0) goto L_0x04b3
            r10 = r10[r14]
            r17 = 1
            r10 = r10[r17]
            int r6 = r6 - r10
            goto L_0x04b5
        L_0x04b2:
            r14 = 0
        L_0x04b3:
            r17 = 1
        L_0x04b5:
            int r10 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED
            r10 = r10 & r7
            if (r10 != 0) goto L_0x04cc
            int[][] r10 = r0.nonContacts
            r18 = r10[r17]
            r19 = r18[r14]
            int r6 = r6 - r19
            int r14 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r14 = r14 & r7
            if (r14 != 0) goto L_0x04cc
            r10 = r10[r17]
            r10 = r10[r17]
            int r6 = r6 - r10
        L_0x04cc:
            int r10 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_GROUPS
            r10 = r10 & r7
            if (r10 == 0) goto L_0x0511
            int r10 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED
            r10 = r10 & r7
            if (r10 != 0) goto L_0x04f2
            int[][] r10 = r0.groups
            r14 = 0
            r17 = r10[r14]
            r17 = r17[r14]
            int r6 = r6 - r17
            int r17 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r17 = r7 & r17
            if (r17 != 0) goto L_0x04ec
            r10 = r10[r14]
            r17 = 1
            r10 = r10[r17]
            goto L_0x04f0
        L_0x04ec:
            int[] r10 = r0.mentionGroups
            r10 = r10[r14]
        L_0x04f0:
            int r6 = r6 - r10
            goto L_0x04f3
        L_0x04f2:
            r14 = 0
        L_0x04f3:
            int r10 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED
            r10 = r10 & r7
            if (r10 != 0) goto L_0x0511
            int[][] r10 = r0.groups
            r17 = 1
            r18 = r10[r17]
            r19 = r18[r14]
            int r6 = r6 - r19
            int r14 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r14 = r14 & r7
            if (r14 != 0) goto L_0x050c
            r10 = r10[r17]
            r10 = r10[r17]
            goto L_0x0510
        L_0x050c:
            int[] r10 = r0.mentionGroups
            r10 = r10[r17]
        L_0x0510:
            int r6 = r6 - r10
        L_0x0511:
            int r10 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CHANNELS
            r10 = r10 & r7
            if (r10 == 0) goto L_0x0556
            int r10 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED
            r10 = r10 & r7
            if (r10 != 0) goto L_0x0537
            int[][] r10 = r0.channels
            r14 = 0
            r17 = r10[r14]
            r17 = r17[r14]
            int r6 = r6 - r17
            int r17 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r17 = r7 & r17
            if (r17 != 0) goto L_0x0531
            r10 = r10[r14]
            r17 = 1
            r10 = r10[r17]
            goto L_0x0535
        L_0x0531:
            int[] r10 = r0.mentionChannels
            r10 = r10[r14]
        L_0x0535:
            int r6 = r6 - r10
            goto L_0x0538
        L_0x0537:
            r14 = 0
        L_0x0538:
            int r10 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED
            r10 = r10 & r7
            if (r10 != 0) goto L_0x0556
            int[][] r10 = r0.channels
            r17 = 1
            r18 = r10[r17]
            r19 = r18[r14]
            int r6 = r6 - r19
            int r14 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r14 = r14 & r7
            if (r14 != 0) goto L_0x0551
            r10 = r10[r17]
            r10 = r10[r17]
            goto L_0x0555
        L_0x0551:
            int[] r10 = r0.mentionChannels
            r10 = r10[r17]
        L_0x0555:
            int r6 = r6 - r10
        L_0x0556:
            int r10 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_BOTS
            r10 = r10 & r7
            if (r10 == 0) goto L_0x0591
            int r10 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED
            r10 = r10 & r7
            if (r10 != 0) goto L_0x0577
            int[][] r10 = r0.bots
            r14 = 0
            r17 = r10[r14]
            r17 = r17[r14]
            int r6 = r6 - r17
            int r17 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r17 = r7 & r17
            if (r17 != 0) goto L_0x0578
            r10 = r10[r14]
            r17 = 1
            r10 = r10[r17]
            int r6 = r6 - r10
            goto L_0x057a
        L_0x0577:
            r14 = 0
        L_0x0578:
            r17 = 1
        L_0x057a:
            int r10 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED
            r10 = r10 & r7
            if (r10 != 0) goto L_0x0591
            int[][] r10 = r0.bots
            r18 = r10[r17]
            r19 = r18[r14]
            int r6 = r6 - r19
            int r14 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r14 = r14 & r7
            if (r14 != 0) goto L_0x0591
            r10 = r10[r17]
            r10 = r10[r17]
            int r6 = r6 - r10
        L_0x0591:
            if (r4 == 0) goto L_0x0795
            java.util.ArrayList<java.lang.Long> r10 = r4.alwaysShow
            int r10 = r10.size()
            r14 = 0
        L_0x059a:
            if (r14 >= r10) goto L_0x0698
            r26 = r10
            java.util.ArrayList<java.lang.Long> r10 = r4.alwaysShow
            java.lang.Object r10 = r10.get(r14)
            java.lang.Long r10 = (java.lang.Long) r10
            r17 = r2
            r19 = r3
            long r2 = r10.longValue()
            boolean r10 = org.telegram.messenger.DialogObject.isUserDialog(r2)
            if (r10 == 0) goto L_0x0633
            r20 = r15
            r10 = 0
        L_0x05b7:
            r15 = 2
            if (r10 >= r15) goto L_0x062c
            if (r10 != 0) goto L_0x05bf
            r15 = r17
            goto L_0x05c0
        L_0x05bf:
            r15 = r5
        L_0x05c0:
            java.lang.Object r15 = r15.get(r2)
            org.telegram.tgnet.TLRPC$User r15 = (org.telegram.tgnet.TLRPC$User) r15
            if (r15 == 0) goto L_0x061d
            if (r10 != 0) goto L_0x05d0
            r21 = r5
            r22 = r9
            r5 = 1
            goto L_0x05e7
        L_0x05d0:
            r21 = r5
            r18 = 0
            java.lang.Integer r5 = java.lang.Integer.valueOf(r18)
            java.lang.Object r5 = r11.get(r2, r5)
            java.lang.Integer r5 = (java.lang.Integer) r5
            int r5 = r5.intValue()
            r22 = r9
            if (r5 != 0) goto L_0x05e7
            goto L_0x0621
        L_0x05e7:
            boolean r9 = r15.bot
            if (r9 == 0) goto L_0x05ee
            int r9 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_BOTS
            goto L_0x05fc
        L_0x05ee:
            boolean r9 = r15.self
            if (r9 != 0) goto L_0x05fa
            boolean r9 = r15.contact
            if (r9 == 0) goto L_0x05f7
            goto L_0x05fa
        L_0x05f7:
            int r9 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS
            goto L_0x05fc
        L_0x05fa:
            int r9 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CONTACTS
        L_0x05fc:
            r9 = r9 & r7
            if (r9 != 0) goto L_0x0601
        L_0x05ff:
            int r6 = r6 - r5
            goto L_0x0621
        L_0x0601:
            int r9 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r9 = r9 & r7
            if (r9 == 0) goto L_0x060f
            long r0 = r15.id
            int r0 = r12.indexOfKey(r0)
            if (r0 < 0) goto L_0x060f
            goto L_0x05ff
        L_0x060f:
            int r0 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED
            r0 = r0 & r7
            if (r0 == 0) goto L_0x0621
            long r0 = r15.id
            int r0 = r13.indexOfKey(r0)
            if (r0 < 0) goto L_0x0621
            goto L_0x05ff
        L_0x061d:
            r21 = r5
            r22 = r9
        L_0x0621:
            int r10 = r10 + 1
            r0 = r25
            r1 = r27
            r5 = r21
            r9 = r22
            goto L_0x05b7
        L_0x062c:
            r21 = r5
            r22 = r9
        L_0x0630:
            r1 = r25
            goto L_0x0685
        L_0x0633:
            r21 = r5
            r22 = r9
            r20 = r15
            long r0 = -r2
            java.lang.Object r0 = r8.get(r0)
            org.telegram.tgnet.TLRPC$Chat r0 = (org.telegram.tgnet.TLRPC$Chat) r0
            if (r0 == 0) goto L_0x0630
            boolean r1 = org.telegram.messenger.ChatObject.isChannel(r0)
            if (r1 == 0) goto L_0x064f
            boolean r1 = r0.megagroup
            if (r1 != 0) goto L_0x064f
            int r1 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CHANNELS
            goto L_0x0651
        L_0x064f:
            int r1 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_GROUPS
        L_0x0651:
            r1 = r1 & r7
            if (r1 != 0) goto L_0x0657
            int r6 = r6 + -1
            goto L_0x0630
        L_0x0657:
            int r1 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r1 = r1 & r7
            if (r1 == 0) goto L_0x0673
            long r1 = r0.id
            long r1 = -r1
            int r1 = r12.indexOfKey(r1)
            if (r1 < 0) goto L_0x0673
            r1 = r25
            androidx.collection.LongSparseArray<java.lang.Integer> r2 = r1.dialogsWithMentions
            long r9 = r0.id
            long r9 = -r9
            int r2 = r2.indexOfKey(r9)
            if (r2 >= 0) goto L_0x0675
            goto L_0x0683
        L_0x0673:
            r1 = r25
        L_0x0675:
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED
            r2 = r2 & r7
            if (r2 == 0) goto L_0x0685
            long r2 = r0.id
            long r2 = -r2
            int r0 = r13.indexOfKey(r2)
            if (r0 < 0) goto L_0x0685
        L_0x0683:
            int r6 = r6 + -1
        L_0x0685:
            int r14 = r14 + 1
            r10 = r26
            r0 = r1
            r2 = r17
            r3 = r19
            r15 = r20
            r5 = r21
            r9 = r22
            r1 = r27
            goto L_0x059a
        L_0x0698:
            r1 = r0
            r17 = r2
            r19 = r3
            r21 = r5
            r22 = r9
            r20 = r15
            java.util.ArrayList<java.lang.Long> r0 = r4.neverShow
            int r0 = r0.size()
            r2 = 0
        L_0x06aa:
            if (r2 >= r0) goto L_0x0793
            java.util.ArrayList<java.lang.Long> r3 = r4.neverShow
            java.lang.Object r3 = r3.get(r2)
            java.lang.Long r3 = (java.lang.Long) r3
            long r9 = r3.longValue()
            r3 = r27
            if (r3 == 0) goto L_0x06ca
            int r5 = r3.indexOfKey(r9)
            if (r5 < 0) goto L_0x06ca
            int r5 = r12.indexOfKey(r9)
            if (r5 >= 0) goto L_0x06ca
            goto L_0x0741
        L_0x06ca:
            boolean r5 = org.telegram.messenger.DialogObject.isUserDialog(r9)
            if (r5 == 0) goto L_0x0745
            r5 = 0
            r14 = 2
        L_0x06d2:
            if (r5 >= r14) goto L_0x0741
            if (r5 != 0) goto L_0x06d9
            r15 = r17
            goto L_0x06db
        L_0x06d9:
            r15 = r21
        L_0x06db:
            java.lang.Object r15 = r15.get(r9)
            org.telegram.tgnet.TLRPC$User r15 = (org.telegram.tgnet.TLRPC$User) r15
            if (r15 == 0) goto L_0x0735
            if (r5 != 0) goto L_0x06e9
            r26 = r0
            r14 = 1
            goto L_0x06fe
        L_0x06e9:
            r16 = 0
            java.lang.Integer r14 = java.lang.Integer.valueOf(r16)
            java.lang.Object r14 = r11.get(r9, r14)
            java.lang.Integer r14 = (java.lang.Integer) r14
            int r14 = r14.intValue()
            if (r14 != 0) goto L_0x06fc
            goto L_0x0735
        L_0x06fc:
            r26 = r0
        L_0x06fe:
            boolean r0 = r15.bot
            if (r0 == 0) goto L_0x0705
            int r0 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_BOTS
            goto L_0x0713
        L_0x0705:
            boolean r0 = r15.self
            if (r0 != 0) goto L_0x0711
            boolean r0 = r15.contact
            if (r0 == 0) goto L_0x070e
            goto L_0x0711
        L_0x070e:
            int r0 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS
            goto L_0x0713
        L_0x0711:
            int r0 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CONTACTS
        L_0x0713:
            r0 = r0 & r7
            if (r0 == 0) goto L_0x0737
            int r0 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED
            r0 = r0 & r7
            if (r0 == 0) goto L_0x0725
            r0 = r4
            long r3 = r15.id
            int r3 = r13.indexOfKey(r3)
            if (r3 >= 0) goto L_0x0738
            goto L_0x0726
        L_0x0725:
            r0 = r4
        L_0x0726:
            int r3 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r3 = r3 & r7
            if (r3 == 0) goto L_0x0733
            long r3 = r15.id
            int r3 = r12.indexOfKey(r3)
            if (r3 >= 0) goto L_0x0738
        L_0x0733:
            int r6 = r6 + r14
            goto L_0x0738
        L_0x0735:
            r26 = r0
        L_0x0737:
            r0 = r4
        L_0x0738:
            int r5 = r5 + 1
            r3 = r27
            r4 = r0
            r14 = 2
            r0 = r26
            goto L_0x06d2
        L_0x0741:
            r26 = r0
            r0 = r4
            goto L_0x078c
        L_0x0745:
            r26 = r0
            r0 = r4
            long r3 = -r9
            java.lang.Object r3 = r8.get(r3)
            org.telegram.tgnet.TLRPC$Chat r3 = (org.telegram.tgnet.TLRPC$Chat) r3
            if (r3 == 0) goto L_0x078c
            boolean r4 = org.telegram.messenger.ChatObject.isChannel(r3)
            if (r4 == 0) goto L_0x075e
            boolean r4 = r3.megagroup
            if (r4 != 0) goto L_0x075e
            int r4 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CHANNELS
            goto L_0x0760
        L_0x075e:
            int r4 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_GROUPS
        L_0x0760:
            r4 = r4 & r7
            if (r4 == 0) goto L_0x078c
            int r4 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED
            r4 = r4 & r7
            if (r4 == 0) goto L_0x0771
            long r4 = r3.id
            long r4 = -r4
            int r4 = r13.indexOfKey(r4)
            if (r4 >= 0) goto L_0x078c
        L_0x0771:
            int r4 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r4 = r4 & r7
            if (r4 == 0) goto L_0x078a
            long r4 = r3.id
            long r4 = -r4
            int r4 = r12.indexOfKey(r4)
            if (r4 < 0) goto L_0x078a
            androidx.collection.LongSparseArray<java.lang.Integer> r4 = r1.dialogsWithMentions
            long r9 = r3.id
            long r9 = -r9
            int r3 = r4.indexOfKey(r9)
            if (r3 < 0) goto L_0x078c
        L_0x078a:
            int r6 = r6 + 1
        L_0x078c:
            int r2 = r2 + 1
            r4 = r0
            r0 = r26
            goto L_0x06aa
        L_0x0793:
            r0 = r4
            goto L_0x07a1
        L_0x0795:
            r1 = r0
            r17 = r2
            r19 = r3
            r0 = r4
            r21 = r5
            r22 = r9
            r20 = r15
        L_0x07a1:
            if (r6 >= 0) goto L_0x07af
            r26 = r13
            r9 = r17
            r10 = r21
            r6 = r22
            r7 = 0
            r15 = 0
            goto L_0x0a9c
        L_0x07af:
            r15 = r6
            goto L_0x0a93
        L_0x07b2:
            r1 = r0
            r17 = r2
            r19 = r3
            r0 = r4
            r21 = r5
            r22 = r9
            r20 = r15
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CONTACTS
            r2 = r2 & r7
            if (r2 == 0) goto L_0x07f4
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED
            r2 = r2 & r7
            if (r2 != 0) goto L_0x07dc
            int[][] r2 = r1.contacts
            r3 = 0
            r4 = r2[r3]
            r4 = r4[r3]
            int r6 = r6 + r4
            int r4 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r4 = r4 & r7
            if (r4 != 0) goto L_0x07dd
            r2 = r2[r3]
            r4 = 1
            r2 = r2[r4]
            int r6 = r6 + r2
            goto L_0x07de
        L_0x07dc:
            r3 = 0
        L_0x07dd:
            r4 = 1
        L_0x07de:
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED
            r2 = r2 & r7
            if (r2 != 0) goto L_0x07f4
            int[][] r2 = r1.contacts
            r5 = r2[r4]
            r5 = r5[r3]
            int r6 = r6 + r5
            int r3 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r3 = r3 & r7
            if (r3 != 0) goto L_0x07f4
            r2 = r2[r4]
            r2 = r2[r4]
            int r6 = r6 + r2
        L_0x07f4:
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS
            r2 = r2 & r7
            if (r2 == 0) goto L_0x082a
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED
            r2 = r2 & r7
            if (r2 != 0) goto L_0x0812
            int[][] r2 = r1.nonContacts
            r3 = 0
            r4 = r2[r3]
            r4 = r4[r3]
            int r6 = r6 + r4
            int r4 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r4 = r4 & r7
            if (r4 != 0) goto L_0x0813
            r2 = r2[r3]
            r4 = 1
            r2 = r2[r4]
            int r6 = r6 + r2
            goto L_0x0814
        L_0x0812:
            r3 = 0
        L_0x0813:
            r4 = 1
        L_0x0814:
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED
            r2 = r2 & r7
            if (r2 != 0) goto L_0x082a
            int[][] r2 = r1.nonContacts
            r5 = r2[r4]
            r5 = r5[r3]
            int r6 = r6 + r5
            int r3 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r3 = r3 & r7
            if (r3 != 0) goto L_0x082a
            r2 = r2[r4]
            r2 = r2[r4]
            int r6 = r6 + r2
        L_0x082a:
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_GROUPS
            r2 = r2 & r7
            if (r2 == 0) goto L_0x086a
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED
            r2 = r2 & r7
            if (r2 != 0) goto L_0x084d
            int[][] r2 = r1.groups
            r3 = 0
            r4 = r2[r3]
            r4 = r4[r3]
            int r6 = r6 + r4
            int r4 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r4 = r4 & r7
            if (r4 != 0) goto L_0x0847
            r2 = r2[r3]
            r4 = 1
            r2 = r2[r4]
            goto L_0x084b
        L_0x0847:
            int[] r2 = r1.mentionGroups
            r2 = r2[r3]
        L_0x084b:
            int r6 = r6 + r2
            goto L_0x084e
        L_0x084d:
            r3 = 0
        L_0x084e:
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED
            r2 = r2 & r7
            if (r2 != 0) goto L_0x086a
            int[][] r2 = r1.groups
            r4 = 1
            r5 = r2[r4]
            r5 = r5[r3]
            int r6 = r6 + r5
            int r3 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r3 = r3 & r7
            if (r3 != 0) goto L_0x0865
            r2 = r2[r4]
            r2 = r2[r4]
            goto L_0x0869
        L_0x0865:
            int[] r2 = r1.mentionGroups
            r2 = r2[r4]
        L_0x0869:
            int r6 = r6 + r2
        L_0x086a:
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CHANNELS
            r2 = r2 & r7
            if (r2 == 0) goto L_0x08aa
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED
            r2 = r2 & r7
            if (r2 != 0) goto L_0x088d
            int[][] r2 = r1.channels
            r3 = 0
            r4 = r2[r3]
            r4 = r4[r3]
            int r6 = r6 + r4
            int r4 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r4 = r4 & r7
            if (r4 != 0) goto L_0x0887
            r2 = r2[r3]
            r4 = 1
            r2 = r2[r4]
            goto L_0x088b
        L_0x0887:
            int[] r2 = r1.mentionChannels
            r2 = r2[r3]
        L_0x088b:
            int r6 = r6 + r2
            goto L_0x088e
        L_0x088d:
            r3 = 0
        L_0x088e:
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED
            r2 = r2 & r7
            if (r2 != 0) goto L_0x08aa
            int[][] r2 = r1.channels
            r4 = 1
            r5 = r2[r4]
            r5 = r5[r3]
            int r6 = r6 + r5
            int r3 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r3 = r3 & r7
            if (r3 != 0) goto L_0x08a5
            r2 = r2[r4]
            r2 = r2[r4]
            goto L_0x08a9
        L_0x08a5:
            int[] r2 = r1.mentionChannels
            r2 = r2[r4]
        L_0x08a9:
            int r6 = r6 + r2
        L_0x08aa:
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_BOTS
            r2 = r2 & r7
            if (r2 == 0) goto L_0x08e1
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED
            r2 = r2 & r7
            if (r2 != 0) goto L_0x08c8
            int[][] r2 = r1.bots
            r3 = 0
            r4 = r2[r3]
            r4 = r4[r3]
            int r6 = r6 + r4
            int r4 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r4 = r4 & r7
            if (r4 != 0) goto L_0x08c9
            r2 = r2[r3]
            r4 = 1
            r2 = r2[r4]
            int r6 = r6 + r2
            goto L_0x08ca
        L_0x08c8:
            r3 = 0
        L_0x08c9:
            r4 = 1
        L_0x08ca:
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED
            r2 = r2 & r7
            if (r2 != 0) goto L_0x08e2
            int[][] r2 = r1.bots
            r5 = r2[r4]
            r5 = r5[r3]
            int r6 = r6 + r5
            int r3 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r3 = r3 & r7
            if (r3 != 0) goto L_0x08e2
            r2 = r2[r4]
            r2 = r2[r4]
            int r6 = r6 + r2
            goto L_0x08e2
        L_0x08e1:
            r4 = 1
        L_0x08e2:
            r15 = r6
            if (r0 == 0) goto L_0x0a93
            java.util.ArrayList<java.lang.Long> r2 = r0.alwaysShow
            boolean r2 = r2.isEmpty()
            if (r2 != 0) goto L_0x0a38
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r2 = r2 & r7
            if (r2 == 0) goto L_0x0934
            int r2 = r27.size()
            r3 = 0
        L_0x08f7:
            if (r3 >= r2) goto L_0x0934
            r5 = r27
            long r9 = r5.keyAt(r3)
            long r4 = -r9
            java.lang.Object r4 = r8.get(r4)
            org.telegram.tgnet.TLRPC$Chat r4 = (org.telegram.tgnet.TLRPC$Chat) r4
            boolean r5 = org.telegram.messenger.ChatObject.isChannel(r4)
            if (r5 == 0) goto L_0x0916
            boolean r4 = r4.megagroup
            if (r4 != 0) goto L_0x0916
            int r4 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CHANNELS
            r4 = r4 & r7
            if (r4 != 0) goto L_0x091c
            goto L_0x0930
        L_0x0916:
            int r4 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_GROUPS
            r4 = r4 & r7
            if (r4 != 0) goto L_0x091c
            goto L_0x0930
        L_0x091c:
            int r4 = r12.indexOfKey(r9)
            if (r4 < 0) goto L_0x0930
            java.util.ArrayList<java.lang.Long> r4 = r0.alwaysShow
            java.lang.Long r5 = java.lang.Long.valueOf(r9)
            boolean r4 = r4.contains(r5)
            if (r4 == 0) goto L_0x0930
            int r15 = r15 + -1
        L_0x0930:
            int r3 = r3 + 1
            r4 = 1
            goto L_0x08f7
        L_0x0934:
            java.util.ArrayList<java.lang.Long> r2 = r0.alwaysShow
            int r2 = r2.size()
            r3 = r15
            r15 = 0
        L_0x093c:
            if (r15 >= r2) goto L_0x0a2e
            java.util.ArrayList<java.lang.Long> r4 = r0.alwaysShow
            java.lang.Object r4 = r4.get(r15)
            java.lang.Long r4 = (java.lang.Long) r4
            long r4 = r4.longValue()
            r6 = r22
            int r9 = r6.indexOfKey(r4)
            if (r9 >= 0) goto L_0x095c
            r16 = r2
            r26 = r13
            r9 = r17
            r10 = r21
            goto L_0x0a20
        L_0x095c:
            boolean r9 = org.telegram.messenger.DialogObject.isUserDialog(r4)
            if (r9 == 0) goto L_0x09e8
            r9 = r17
            java.lang.Object r10 = r9.get(r4)
            org.telegram.tgnet.TLRPC$User r10 = (org.telegram.tgnet.TLRPC$User) r10
            if (r10 == 0) goto L_0x099d
            int r14 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r14 = r14 & r7
            r26 = r13
            if (r14 == 0) goto L_0x097e
            long r13 = r10.id
            int r13 = r12.indexOfKey(r13)
            if (r13 < 0) goto L_0x097e
        L_0x097b:
            int r3 = r3 + 1
            goto L_0x099f
        L_0x097e:
            boolean r13 = r10.bot
            if (r13 == 0) goto L_0x0988
            int r10 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_BOTS
            r10 = r10 & r7
            if (r10 != 0) goto L_0x099f
            goto L_0x097b
        L_0x0988:
            boolean r13 = r10.self
            if (r13 != 0) goto L_0x0997
            boolean r10 = r10.contact
            if (r10 == 0) goto L_0x0991
            goto L_0x0997
        L_0x0991:
            int r10 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS
            r10 = r10 & r7
            if (r10 != 0) goto L_0x099f
            goto L_0x097b
        L_0x0997:
            int r10 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CONTACTS
            r10 = r10 & r7
            if (r10 != 0) goto L_0x099f
            goto L_0x097b
        L_0x099d:
            r26 = r13
        L_0x099f:
            r10 = r21
            java.lang.Object r13 = r10.get(r4)
            org.telegram.tgnet.TLRPC$User r13 = (org.telegram.tgnet.TLRPC$User) r13
            r16 = r2
            if (r13 == 0) goto L_0x0a20
            r14 = 0
            java.lang.Integer r2 = java.lang.Integer.valueOf(r14)
            java.lang.Object r2 = r11.get(r4, r2)
            java.lang.Integer r2 = (java.lang.Integer) r2
            int r2 = r2.intValue()
            int r4 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r4 = r4 & r7
            if (r4 == 0) goto L_0x09c9
            long r4 = r13.id
            int r4 = r12.indexOfKey(r4)
            if (r4 < 0) goto L_0x09c9
        L_0x09c7:
            int r3 = r3 + r2
            goto L_0x0a20
        L_0x09c9:
            boolean r4 = r13.bot
            if (r4 == 0) goto L_0x09d3
            int r4 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_BOTS
            r4 = r4 & r7
            if (r4 != 0) goto L_0x0a20
            goto L_0x09c7
        L_0x09d3:
            boolean r4 = r13.self
            if (r4 != 0) goto L_0x09e2
            boolean r4 = r13.contact
            if (r4 == 0) goto L_0x09dc
            goto L_0x09e2
        L_0x09dc:
            int r4 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS
            r4 = r4 & r7
            if (r4 != 0) goto L_0x0a20
            goto L_0x09c7
        L_0x09e2:
            int r4 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CONTACTS
            r4 = r4 & r7
            if (r4 != 0) goto L_0x0a20
            goto L_0x09c7
        L_0x09e8:
            r16 = r2
            r26 = r13
            r9 = r17
            r10 = r21
            long r4 = -r4
            java.lang.Object r2 = r8.get(r4)
            org.telegram.tgnet.TLRPC$Chat r2 = (org.telegram.tgnet.TLRPC$Chat) r2
            if (r2 == 0) goto L_0x0a20
            int r4 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r4 = r4 & r7
            if (r4 == 0) goto L_0x0a0a
            long r4 = r2.id
            long r4 = -r4
            int r4 = r12.indexOfKey(r4)
            if (r4 < 0) goto L_0x0a0a
        L_0x0a07:
            int r3 = r3 + 1
            goto L_0x0a20
        L_0x0a0a:
            boolean r4 = org.telegram.messenger.ChatObject.isChannel(r2)
            if (r4 == 0) goto L_0x0a1a
            boolean r2 = r2.megagroup
            if (r2 != 0) goto L_0x0a1a
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CHANNELS
            r2 = r2 & r7
            if (r2 != 0) goto L_0x0a20
            goto L_0x0a07
        L_0x0a1a:
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_GROUPS
            r2 = r2 & r7
            if (r2 != 0) goto L_0x0a20
            goto L_0x0a07
        L_0x0a20:
            int r15 = r15 + 1
            r13 = r26
            r22 = r6
            r17 = r9
            r21 = r10
            r2 = r16
            goto L_0x093c
        L_0x0a2e:
            r26 = r13
            r9 = r17
            r10 = r21
            r6 = r22
            r15 = r3
            goto L_0x0a40
        L_0x0a38:
            r26 = r13
            r9 = r17
            r10 = r21
            r6 = r22
        L_0x0a40:
            java.util.ArrayList<java.lang.Long> r2 = r0.neverShow
            int r2 = r2.size()
            r3 = r15
            r15 = 0
        L_0x0a48:
            if (r15 >= r2) goto L_0x0a90
            java.util.ArrayList<java.lang.Long> r4 = r0.neverShow
            java.lang.Object r4 = r4.get(r15)
            java.lang.Long r4 = (java.lang.Long) r4
            long r4 = r4.longValue()
            boolean r7 = org.telegram.messenger.DialogObject.isUserDialog(r4)
            if (r7 == 0) goto L_0x0a81
            java.lang.Object r7 = r9.get(r4)
            org.telegram.tgnet.TLRPC$User r7 = (org.telegram.tgnet.TLRPC$User) r7
            if (r7 == 0) goto L_0x0a66
            int r3 = r3 + -1
        L_0x0a66:
            java.lang.Object r7 = r10.get(r4)
            org.telegram.tgnet.TLRPC$User r7 = (org.telegram.tgnet.TLRPC$User) r7
            if (r7 == 0) goto L_0x0a7f
            r7 = 0
            java.lang.Integer r13 = java.lang.Integer.valueOf(r7)
            java.lang.Object r4 = r11.get(r4, r13)
            java.lang.Integer r4 = (java.lang.Integer) r4
            int r4 = r4.intValue()
            int r3 = r3 - r4
            goto L_0x0a8d
        L_0x0a7f:
            r7 = 0
            goto L_0x0a8d
        L_0x0a81:
            r7 = 0
            long r4 = -r4
            java.lang.Object r4 = r8.get(r4)
            org.telegram.tgnet.TLRPC$Chat r4 = (org.telegram.tgnet.TLRPC$Chat) r4
            if (r4 == 0) goto L_0x0a8d
            int r3 = r3 + -1
        L_0x0a8d:
            int r15 = r15 + 1
            goto L_0x0a48
        L_0x0a90:
            r7 = 0
            r15 = r3
            goto L_0x0a9c
        L_0x0a93:
            r26 = r13
            r9 = r17
            r10 = r21
            r6 = r22
            r7 = 0
        L_0x0a9c:
            if (r0 == 0) goto L_0x0aa5
            r0.pendingUnreadCount = r15
            r0 = r19
            r2 = r20
            goto L_0x0ab4
        L_0x0aa5:
            r0 = r19
            r2 = r20
            if (r2 != r0) goto L_0x0aae
            r1.pendingMainUnreadCount = r15
            goto L_0x0ab4
        L_0x0aae:
            int r3 = r0 + 1
            if (r2 != r3) goto L_0x0ab4
            r1.pendingArchiveUnreadCount = r15
        L_0x0ab4:
            int r15 = r2 + 1
            r13 = r26
            r3 = r0
            r0 = r1
            r2 = r9
            r5 = r10
            r1 = r27
            r9 = r6
            goto L_0x0413
        L_0x0ac1:
            r1 = r0
            org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda27 r0 = new org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda27
            r0.<init>(r1)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r0)
            return
        L_0x0acb:
            r1 = r0
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.updateFiltersReadCounter(org.telegram.messenger.support.LongSparseIntArray, org.telegram.messenger.support.LongSparseIntArray, boolean):void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateFiltersReadCounter$91() {
        ArrayList<MessagesController.DialogFilter> arrayList = getMessagesController().dialogFilters;
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            arrayList.get(i).unreadCount = arrayList.get(i).pendingUnreadCount;
        }
        this.mainUnreadCount = this.pendingMainUnreadCount;
        this.archiveUnreadCount = this.pendingArchiveUnreadCount;
    }

    /* JADX WARNING: Removed duplicated region for block: B:100:0x02b7 A[Catch:{ Exception -> 0x02bf }] */
    /* JADX WARNING: Removed duplicated region for block: B:125:? A[RETURN, SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void updateDialogsWithReadMessagesInternal(java.util.ArrayList<java.lang.Integer> r22, org.telegram.messenger.support.LongSparseIntArray r23, org.telegram.messenger.support.LongSparseIntArray r24, androidx.collection.LongSparseArray<java.util.ArrayList<java.lang.Integer>> r25) {
        /*
            r21 = this;
            r1 = r21
            r0 = r23
            r2 = r24
            org.telegram.messenger.support.LongSparseIntArray r3 = new org.telegram.messenger.support.LongSparseIntArray     // Catch:{ Exception -> 0x02bf }
            r3.<init>()     // Catch:{ Exception -> 0x02bf }
            org.telegram.messenger.support.LongSparseIntArray r4 = new org.telegram.messenger.support.LongSparseIntArray     // Catch:{ Exception -> 0x02bf }
            r4.<init>()     // Catch:{ Exception -> 0x02bf }
            java.util.ArrayList r5 = new java.util.ArrayList     // Catch:{ Exception -> 0x02bf }
            r5.<init>()     // Catch:{ Exception -> 0x02bf }
            boolean r6 = isEmpty((java.util.List<?>) r22)     // Catch:{ Exception -> 0x02bf }
            java.lang.String r7 = ","
            r8 = 2
            r9 = 1
            r10 = 0
            if (r6 != 0) goto L_0x0067
            r0 = r22
            java.lang.String r0 = android.text.TextUtils.join(r7, r0)     // Catch:{ Exception -> 0x02bf }
            org.telegram.SQLite.SQLiteDatabase r2 = r1.database     // Catch:{ Exception -> 0x02bf }
            java.util.Locale r6 = java.util.Locale.US     // Catch:{ Exception -> 0x02bf }
            java.lang.String r7 = "SELECT uid, read_state, out FROM messages_v2 WHERE mid IN(%s) AND is_channel = 0"
            java.lang.Object[] r11 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x02bf }
            r11[r10] = r0     // Catch:{ Exception -> 0x02bf }
            java.lang.String r0 = java.lang.String.format(r6, r7, r11)     // Catch:{ Exception -> 0x02bf }
            java.lang.Object[] r6 = new java.lang.Object[r10]     // Catch:{ Exception -> 0x02bf }
            org.telegram.SQLite.SQLiteCursor r0 = r2.queryFinalized(r0, r6)     // Catch:{ Exception -> 0x02bf }
        L_0x003a:
            boolean r2 = r0.next()     // Catch:{ Exception -> 0x02bf }
            if (r2 == 0) goto L_0x0062
            int r2 = r0.intValue(r8)     // Catch:{ Exception -> 0x02bf }
            if (r2 == 0) goto L_0x0047
            goto L_0x003a
        L_0x0047:
            int r2 = r0.intValue(r9)     // Catch:{ Exception -> 0x02bf }
            if (r2 == 0) goto L_0x004e
            goto L_0x003a
        L_0x004e:
            long r6 = r0.longValue(r10)     // Catch:{ Exception -> 0x02bf }
            int r2 = r3.get(r6)     // Catch:{ Exception -> 0x02bf }
            if (r2 != 0) goto L_0x005c
            r3.put(r6, r9)     // Catch:{ Exception -> 0x02bf }
            goto L_0x003a
        L_0x005c:
            int r2 = r2 + 1
            r3.put(r6, r2)     // Catch:{ Exception -> 0x02bf }
            goto L_0x003a
        L_0x0062:
            r0.dispose()     // Catch:{ Exception -> 0x02bf }
            goto L_0x01e5
        L_0x0067:
            boolean r6 = isEmpty((org.telegram.messenger.support.LongSparseIntArray) r23)     // Catch:{ Exception -> 0x02bf }
            if (r6 != 0) goto L_0x00d0
            r6 = 0
        L_0x006e:
            int r12 = r23.size()     // Catch:{ Exception -> 0x02bf }
            if (r6 >= r12) goto L_0x00d0
            long r12 = r0.keyAt(r6)     // Catch:{ Exception -> 0x02bf }
            int r14 = r0.get(r12)     // Catch:{ Exception -> 0x02bf }
            org.telegram.SQLite.SQLiteDatabase r15 = r1.database     // Catch:{ Exception -> 0x02bf }
            java.util.Locale r11 = java.util.Locale.US     // Catch:{ Exception -> 0x02bf }
            java.lang.String r9 = "SELECT COUNT(mid) FROM messages_v2 WHERE uid = %d AND mid > %d AND read_state IN(0,2) AND out = 0"
            java.lang.Object[] r10 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x02bf }
            java.lang.Long r18 = java.lang.Long.valueOf(r12)     // Catch:{ Exception -> 0x02bf }
            r8 = 0
            r10[r8] = r18     // Catch:{ Exception -> 0x02bf }
            java.lang.Integer r17 = java.lang.Integer.valueOf(r14)     // Catch:{ Exception -> 0x02bf }
            r16 = 1
            r10[r16] = r17     // Catch:{ Exception -> 0x02bf }
            java.lang.String r9 = java.lang.String.format(r11, r9, r10)     // Catch:{ Exception -> 0x02bf }
            java.lang.Object[] r10 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x02bf }
            org.telegram.SQLite.SQLiteCursor r9 = r15.queryFinalized(r9, r10)     // Catch:{ Exception -> 0x02bf }
            boolean r10 = r9.next()     // Catch:{ Exception -> 0x02bf }
            if (r10 == 0) goto L_0x00aa
            int r10 = r9.intValue(r8)     // Catch:{ Exception -> 0x02bf }
            r3.put(r12, r10)     // Catch:{ Exception -> 0x02bf }
        L_0x00aa:
            r9.dispose()     // Catch:{ Exception -> 0x02bf }
            org.telegram.SQLite.SQLiteDatabase r8 = r1.database     // Catch:{ Exception -> 0x02bf }
            java.lang.String r9 = "UPDATE dialogs SET inbox_max = max((SELECT inbox_max FROM dialogs WHERE did = ?), ?) WHERE did = ?"
            org.telegram.SQLite.SQLitePreparedStatement r8 = r8.executeFast(r9)     // Catch:{ Exception -> 0x02bf }
            r8.requery()     // Catch:{ Exception -> 0x02bf }
            r9 = 1
            r8.bindLong(r9, r12)     // Catch:{ Exception -> 0x02bf }
            r9 = 2
            r8.bindInteger(r9, r14)     // Catch:{ Exception -> 0x02bf }
            r9 = 3
            r8.bindLong(r9, r12)     // Catch:{ Exception -> 0x02bf }
            r8.step()     // Catch:{ Exception -> 0x02bf }
            r8.dispose()     // Catch:{ Exception -> 0x02bf }
            int r6 = r6 + 1
            r8 = 2
            r9 = 1
            r10 = 0
            goto L_0x006e
        L_0x00d0:
            boolean r0 = isEmpty((androidx.collection.LongSparseArray<?>) r25)     // Catch:{ Exception -> 0x02bf }
            if (r0 != 0) goto L_0x01b0
            int r0 = r25.size()     // Catch:{ Exception -> 0x02bf }
            r8 = 0
        L_0x00db:
            if (r8 >= r0) goto L_0x01b0
            r6 = r25
            java.lang.Object r9 = r6.valueAt(r8)     // Catch:{ Exception -> 0x02bf }
            java.util.ArrayList r9 = (java.util.ArrayList) r9     // Catch:{ Exception -> 0x02bf }
            java.util.ArrayList r10 = new java.util.ArrayList     // Catch:{ Exception -> 0x02bf }
            r10.<init>(r9)     // Catch:{ Exception -> 0x02bf }
            java.lang.String r9 = android.text.TextUtils.join(r7, r9)     // Catch:{ Exception -> 0x02bf }
            org.telegram.SQLite.SQLiteDatabase r11 = r1.database     // Catch:{ Exception -> 0x02bf }
            java.util.Locale r12 = java.util.Locale.US     // Catch:{ Exception -> 0x02bf }
            java.lang.String r13 = "SELECT uid, read_state, out, mention, mid, is_channel FROM messages_v2 WHERE mid IN(%s)"
            r14 = 1
            java.lang.Object[] r15 = new java.lang.Object[r14]     // Catch:{ Exception -> 0x02bf }
            r14 = 0
            r15[r14] = r9     // Catch:{ Exception -> 0x02bf }
            java.lang.String r9 = java.lang.String.format(r12, r13, r15)     // Catch:{ Exception -> 0x02bf }
            java.lang.Object[] r12 = new java.lang.Object[r14]     // Catch:{ Exception -> 0x02bf }
            org.telegram.SQLite.SQLiteCursor r9 = r11.queryFinalized(r9, r12)     // Catch:{ Exception -> 0x02bf }
            r19 = 0
        L_0x0106:
            boolean r13 = r9.next()     // Catch:{ Exception -> 0x02bf }
            if (r13 == 0) goto L_0x0188
            long r11 = r9.longValue(r14)     // Catch:{ Exception -> 0x02bf }
            r13 = 4
            int r13 = r9.intValue(r13)     // Catch:{ Exception -> 0x02bf }
            java.lang.Integer r13 = java.lang.Integer.valueOf(r13)     // Catch:{ Exception -> 0x02bf }
            r10.remove(r13)     // Catch:{ Exception -> 0x02bf }
            r13 = 1
            int r14 = r9.intValue(r13)     // Catch:{ Exception -> 0x02bf }
            r15 = 2
            if (r14 >= r15) goto L_0x017c
            int r14 = r9.intValue(r15)     // Catch:{ Exception -> 0x02bf }
            if (r14 != 0) goto L_0x017c
            r14 = 3
            int r15 = r9.intValue(r14)     // Catch:{ Exception -> 0x02bf }
            if (r15 != r13) goto L_0x017c
            r13 = -1
            int r13 = r4.get(r11, r13)     // Catch:{ Exception -> 0x02bf }
            if (r13 >= 0) goto L_0x016f
            org.telegram.SQLite.SQLiteDatabase r13 = r1.database     // Catch:{ Exception -> 0x02bf }
            java.lang.StringBuilder r14 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x02bf }
            r14.<init>()     // Catch:{ Exception -> 0x02bf }
            java.lang.String r15 = "SELECT unread_count_i FROM dialogs WHERE did = "
            r14.append(r15)     // Catch:{ Exception -> 0x02bf }
            r14.append(r11)     // Catch:{ Exception -> 0x02bf }
            java.lang.String r14 = r14.toString()     // Catch:{ Exception -> 0x02bf }
            r23 = r0
            r15 = 0
            java.lang.Object[] r0 = new java.lang.Object[r15]     // Catch:{ Exception -> 0x02bf }
            org.telegram.SQLite.SQLiteCursor r0 = r13.queryFinalized(r14, r0)     // Catch:{ Exception -> 0x02bf }
            boolean r13 = r0.next()     // Catch:{ Exception -> 0x02bf }
            if (r13 == 0) goto L_0x015f
            int r17 = r0.intValue(r15)     // Catch:{ Exception -> 0x02bf }
            goto L_0x0161
        L_0x015f:
            r17 = 0
        L_0x0161:
            r0.dispose()     // Catch:{ Exception -> 0x02bf }
            r0 = 1
            int r13 = r17 + -1
            int r0 = java.lang.Math.max(r15, r13)     // Catch:{ Exception -> 0x02bf }
            r4.put(r11, r0)     // Catch:{ Exception -> 0x02bf }
            goto L_0x017e
        L_0x016f:
            r23 = r0
            int r13 = r13 + -1
            r0 = 0
            int r13 = java.lang.Math.max(r0, r13)     // Catch:{ Exception -> 0x02bf }
            r4.put(r11, r13)     // Catch:{ Exception -> 0x02bf }
            goto L_0x017e
        L_0x017c:
            r23 = r0
        L_0x017e:
            r0 = 5
            long r19 = r9.longValue(r0)     // Catch:{ Exception -> 0x02bf }
            r0 = r23
            r14 = 0
            goto L_0x0106
        L_0x0188:
            r23 = r0
            r9.dispose()     // Catch:{ Exception -> 0x02bf }
            boolean r0 = r10.isEmpty()     // Catch:{ Exception -> 0x02bf }
            if (r0 != 0) goto L_0x01aa
            r9 = 0
            int r0 = (r19 > r9 ? 1 : (r19 == r9 ? 0 : -1))
            if (r0 == 0) goto L_0x01aa
            java.lang.Long r0 = java.lang.Long.valueOf(r19)     // Catch:{ Exception -> 0x02bf }
            boolean r0 = r5.contains(r0)     // Catch:{ Exception -> 0x02bf }
            if (r0 != 0) goto L_0x01aa
            java.lang.Long r0 = java.lang.Long.valueOf(r19)     // Catch:{ Exception -> 0x02bf }
            r5.add(r0)     // Catch:{ Exception -> 0x02bf }
        L_0x01aa:
            int r8 = r8 + 1
            r0 = r23
            goto L_0x00db
        L_0x01b0:
            boolean r0 = isEmpty((org.telegram.messenger.support.LongSparseIntArray) r24)     // Catch:{ Exception -> 0x02bf }
            if (r0 != 0) goto L_0x01e5
            r8 = 0
        L_0x01b7:
            int r0 = r24.size()     // Catch:{ Exception -> 0x02bf }
            if (r8 >= r0) goto L_0x01e5
            long r6 = r2.keyAt(r8)     // Catch:{ Exception -> 0x02bf }
            int r0 = r2.get(r6)     // Catch:{ Exception -> 0x02bf }
            org.telegram.SQLite.SQLiteDatabase r9 = r1.database     // Catch:{ Exception -> 0x02bf }
            java.lang.String r10 = "UPDATE dialogs SET outbox_max = max((SELECT outbox_max FROM dialogs WHERE did = ?), ?) WHERE did = ?"
            org.telegram.SQLite.SQLitePreparedStatement r9 = r9.executeFast(r10)     // Catch:{ Exception -> 0x02bf }
            r9.requery()     // Catch:{ Exception -> 0x02bf }
            r10 = 1
            r9.bindLong(r10, r6)     // Catch:{ Exception -> 0x02bf }
            r10 = 2
            r9.bindInteger(r10, r0)     // Catch:{ Exception -> 0x02bf }
            r0 = 3
            r9.bindLong(r0, r6)     // Catch:{ Exception -> 0x02bf }
            r9.step()     // Catch:{ Exception -> 0x02bf }
            r9.dispose()     // Catch:{ Exception -> 0x02bf }
            int r8 = r8 + 1
            goto L_0x01b7
        L_0x01e5:
            int r0 = r3.size()     // Catch:{ Exception -> 0x02bf }
            if (r0 > 0) goto L_0x01f5
            int r0 = r4.size()     // Catch:{ Exception -> 0x02bf }
            if (r0 <= 0) goto L_0x01f2
            goto L_0x01f5
        L_0x01f2:
            r0 = 1
            goto L_0x02a7
        L_0x01f5:
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x02bf }
            r0.beginTransaction()     // Catch:{ Exception -> 0x02bf }
            int r0 = r3.size()     // Catch:{ Exception -> 0x02bf }
            if (r0 <= 0) goto L_0x026e
            java.util.ArrayList r0 = new java.util.ArrayList     // Catch:{ Exception -> 0x02bf }
            r0.<init>()     // Catch:{ Exception -> 0x02bf }
            org.telegram.SQLite.SQLiteDatabase r2 = r1.database     // Catch:{ Exception -> 0x02bf }
            java.lang.String r6 = "UPDATE dialogs SET unread_count = ? WHERE did = ?"
            org.telegram.SQLite.SQLitePreparedStatement r2 = r2.executeFast(r6)     // Catch:{ Exception -> 0x02bf }
            r8 = 0
        L_0x020e:
            int r6 = r3.size()     // Catch:{ Exception -> 0x02bf }
            if (r8 >= r6) goto L_0x0266
            long r6 = r3.keyAt(r8)     // Catch:{ Exception -> 0x02bf }
            int r9 = r3.valueAt(r8)     // Catch:{ Exception -> 0x02bf }
            org.telegram.SQLite.SQLiteDatabase r10 = r1.database     // Catch:{ Exception -> 0x02bf }
            java.lang.StringBuilder r11 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x02bf }
            r11.<init>()     // Catch:{ Exception -> 0x02bf }
            java.lang.String r12 = "SELECT unread_count FROM dialogs WHERE did = "
            r11.append(r12)     // Catch:{ Exception -> 0x02bf }
            r11.append(r6)     // Catch:{ Exception -> 0x02bf }
            java.lang.String r11 = r11.toString()     // Catch:{ Exception -> 0x02bf }
            r12 = 0
            java.lang.Object[] r13 = new java.lang.Object[r12]     // Catch:{ Exception -> 0x02bf }
            org.telegram.SQLite.SQLiteCursor r10 = r10.queryFinalized(r11, r13)     // Catch:{ Exception -> 0x02bf }
            boolean r11 = r10.next()     // Catch:{ Exception -> 0x02bf }
            if (r11 == 0) goto L_0x0241
            int r11 = r10.intValue(r12)     // Catch:{ Exception -> 0x02bf }
            goto L_0x0242
        L_0x0241:
            r11 = 0
        L_0x0242:
            r10.dispose()     // Catch:{ Exception -> 0x02bf }
            if (r11 != r9) goto L_0x024e
            r3.removeAt(r8)     // Catch:{ Exception -> 0x02bf }
            int r8 = r8 + -1
        L_0x024c:
            r6 = 1
            goto L_0x0264
        L_0x024e:
            r2.requery()     // Catch:{ Exception -> 0x02bf }
            r10 = 1
            r2.bindInteger(r10, r9)     // Catch:{ Exception -> 0x02bf }
            r9 = 2
            r2.bindLong(r9, r6)     // Catch:{ Exception -> 0x02bf }
            r2.step()     // Catch:{ Exception -> 0x02bf }
            java.lang.Long r6 = java.lang.Long.valueOf(r6)     // Catch:{ Exception -> 0x02bf }
            r0.add(r6)     // Catch:{ Exception -> 0x02bf }
            goto L_0x024c
        L_0x0264:
            int r8 = r8 + r6
            goto L_0x020e
        L_0x0266:
            r12 = 0
            r2.dispose()     // Catch:{ Exception -> 0x02bf }
            r1.updateWidgets((java.util.ArrayList<java.lang.Long>) r0)     // Catch:{ Exception -> 0x02bf }
            goto L_0x026f
        L_0x026e:
            r12 = 0
        L_0x026f:
            int r0 = r4.size()     // Catch:{ Exception -> 0x02bf }
            if (r0 <= 0) goto L_0x02a0
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x02bf }
            java.lang.String r2 = "UPDATE dialogs SET unread_count_i = ? WHERE did = ?"
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r2)     // Catch:{ Exception -> 0x02bf }
            r10 = 0
        L_0x027e:
            int r2 = r4.size()     // Catch:{ Exception -> 0x02bf }
            if (r10 >= r2) goto L_0x029d
            r0.requery()     // Catch:{ Exception -> 0x02bf }
            int r2 = r4.valueAt(r10)     // Catch:{ Exception -> 0x02bf }
            r6 = 1
            r0.bindInteger(r6, r2)     // Catch:{ Exception -> 0x02bf }
            long r6 = r4.keyAt(r10)     // Catch:{ Exception -> 0x02bf }
            r2 = 2
            r0.bindLong(r2, r6)     // Catch:{ Exception -> 0x02bf }
            r0.step()     // Catch:{ Exception -> 0x02bf }
            int r10 = r10 + 1
            goto L_0x027e
        L_0x029d:
            r0.dispose()     // Catch:{ Exception -> 0x02bf }
        L_0x02a0:
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x02bf }
            r0.commitTransaction()     // Catch:{ Exception -> 0x02bf }
            goto L_0x01f2
        L_0x02a7:
            r1.updateFiltersReadCounter(r3, r4, r0)     // Catch:{ Exception -> 0x02bf }
            org.telegram.messenger.MessagesController r0 = r21.getMessagesController()     // Catch:{ Exception -> 0x02bf }
            r0.processDialogsUpdateRead(r3, r4)     // Catch:{ Exception -> 0x02bf }
            boolean r0 = r5.isEmpty()     // Catch:{ Exception -> 0x02bf }
            if (r0 != 0) goto L_0x02c3
            org.telegram.messenger.MessagesController r0 = r21.getMessagesController()     // Catch:{ Exception -> 0x02bf }
            r0.reloadMentionsCountForChannels(r5)     // Catch:{ Exception -> 0x02bf }
            goto L_0x02c3
        L_0x02bf:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
        L_0x02c3:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.updateDialogsWithReadMessagesInternal(java.util.ArrayList, org.telegram.messenger.support.LongSparseIntArray, org.telegram.messenger.support.LongSparseIntArray, androidx.collection.LongSparseArray):void");
    }

    private static boolean isEmpty(SparseArray<?> sparseArray) {
        return sparseArray == null || sparseArray.size() == 0;
    }

    private static boolean isEmpty(LongSparseIntArray longSparseIntArray) {
        return longSparseIntArray == null || longSparseIntArray.size() == 0;
    }

    private static boolean isEmpty(List<?> list) {
        return list == null || list.isEmpty();
    }

    private static boolean isEmpty(SparseIntArray sparseIntArray) {
        return sparseIntArray == null || sparseIntArray.size() == 0;
    }

    private static boolean isEmpty(LongSparseArray<?> longSparseArray) {
        return longSparseArray == null || longSparseArray.size() == 0;
    }

    public void updateDialogsWithReadMessages(LongSparseIntArray longSparseIntArray, LongSparseIntArray longSparseIntArray2, LongSparseArray<ArrayList<Integer>> longSparseArray, boolean z) {
        if (isEmpty(longSparseIntArray) && isEmpty(longSparseIntArray2) && isEmpty((LongSparseArray<?>) longSparseArray)) {
            return;
        }
        if (z) {
            this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda160(this, longSparseIntArray, longSparseIntArray2, longSparseArray));
        } else {
            updateDialogsWithReadMessagesInternal((ArrayList<Integer>) null, longSparseIntArray, longSparseIntArray2, longSparseArray);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateDialogsWithReadMessages$92(LongSparseIntArray longSparseIntArray, LongSparseIntArray longSparseIntArray2, LongSparseArray longSparseArray) {
        updateDialogsWithReadMessagesInternal((ArrayList<Integer>) null, longSparseIntArray, longSparseIntArray2, longSparseArray);
    }

    public void updateChatParticipants(TLRPC$ChatParticipants tLRPC$ChatParticipants) {
        if (tLRPC$ChatParticipants != null) {
            this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda166(this, tLRPC$ChatParticipants));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChatParticipants$94(TLRPC$ChatParticipants tLRPC$ChatParticipants) {
        NativeByteBuffer byteBufferValue;
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT info, pinned, online, inviter FROM chat_settings_v2 WHERE uid = " + tLRPC$ChatParticipants.chat_id, new Object[0]);
            TLRPC$ChatFull tLRPC$ChatFull = null;
            new ArrayList();
            if (queryFinalized.next() && (byteBufferValue = queryFinalized.byteBufferValue(0)) != null) {
                tLRPC$ChatFull = TLRPC$ChatFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                byteBufferValue.reuse();
                tLRPC$ChatFull.pinned_msg_id = queryFinalized.intValue(1);
                tLRPC$ChatFull.online_count = queryFinalized.intValue(2);
                tLRPC$ChatFull.inviterId = queryFinalized.longValue(3);
            }
            queryFinalized.dispose();
            if (tLRPC$ChatFull instanceof TLRPC$TL_chatFull) {
                tLRPC$ChatFull.participants = tLRPC$ChatParticipants;
                AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda164(this, tLRPC$ChatFull));
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO chat_settings_v2 VALUES(?, ?, ?, ?, ?, ?)");
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$ChatFull.getObjectSize());
                tLRPC$ChatFull.serializeToStream(nativeByteBuffer);
                executeFast.bindLong(1, tLRPC$ChatFull.id);
                executeFast.bindByteBuffer(2, nativeByteBuffer);
                executeFast.bindInteger(3, tLRPC$ChatFull.pinned_msg_id);
                executeFast.bindInteger(4, tLRPC$ChatFull.online_count);
                executeFast.bindLong(5, tLRPC$ChatFull.inviterId);
                executeFast.bindInteger(6, tLRPC$ChatFull.invitesCount);
                executeFast.step();
                executeFast.dispose();
                nativeByteBuffer.reuse();
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChatParticipants$93(TLRPC$ChatFull tLRPC$ChatFull) {
        NotificationCenter notificationCenter = getNotificationCenter();
        int i = NotificationCenter.chatInfoDidLoad;
        Boolean bool = Boolean.FALSE;
        notificationCenter.postNotificationName(i, tLRPC$ChatFull, 0, bool, bool);
    }

    public void loadChannelAdmins(long j) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda66(this, j));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadChannelAdmins$95(long j) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT uid, data FROM channel_admins_v3 WHERE did = " + j, new Object[0]);
            LongSparseArray longSparseArray = new LongSparseArray();
            while (queryFinalized.next()) {
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(1);
                if (byteBufferValue != null) {
                    TLRPC$ChannelParticipant TLdeserialize = TLRPC$ChannelParticipant.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    byteBufferValue.reuse();
                    if (TLdeserialize != null) {
                        longSparseArray.put(queryFinalized.longValue(0), TLdeserialize);
                    }
                }
            }
            queryFinalized.dispose();
            getMessagesController().processLoadedChannelAdmins(longSparseArray, j, true);
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void putChannelAdmins(long j, LongSparseArray<TLRPC$ChannelParticipant> longSparseArray) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda92(this, j, longSparseArray));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$putChannelAdmins$96(long j, LongSparseArray longSparseArray) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM channel_admins_v3 WHERE did = " + j).stepThis().dispose();
            this.database.beginTransaction();
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO channel_admins_v3 VALUES(?, ?, ?)");
            long currentTimeMillis = System.currentTimeMillis() / 1000;
            for (int i = 0; i < longSparseArray.size(); i++) {
                executeFast.requery();
                executeFast.bindLong(1, j);
                executeFast.bindLong(2, longSparseArray.keyAt(i));
                TLRPC$ChannelParticipant tLRPC$ChannelParticipant = (TLRPC$ChannelParticipant) longSparseArray.valueAt(i);
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$ChannelParticipant.getObjectSize());
                tLRPC$ChannelParticipant.serializeToStream(nativeByteBuffer);
                executeFast.bindByteBuffer(3, nativeByteBuffer);
                executeFast.step();
                nativeByteBuffer.reuse();
            }
            executeFast.dispose();
            this.database.commitTransaction();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void updateChannelUsers(long j, ArrayList<TLRPC$ChannelParticipant> arrayList) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda94(this, j, arrayList));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChannelUsers$97(long j, ArrayList arrayList) {
        long j2 = -j;
        try {
            this.database.executeFast("DELETE FROM channel_users_v2 WHERE did = " + j2).stepThis().dispose();
            this.database.beginTransaction();
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO channel_users_v2 VALUES(?, ?, ?, ?)");
            int currentTimeMillis = (int) (System.currentTimeMillis() / 1000);
            for (int i = 0; i < arrayList.size(); i++) {
                TLRPC$ChannelParticipant tLRPC$ChannelParticipant = (TLRPC$ChannelParticipant) arrayList.get(i);
                executeFast.requery();
                executeFast.bindLong(1, j2);
                executeFast.bindLong(2, MessageObject.getPeerId(tLRPC$ChannelParticipant.peer));
                executeFast.bindInteger(3, currentTimeMillis);
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$ChannelParticipant.getObjectSize());
                tLRPC$ChannelParticipant.serializeToStream(nativeByteBuffer);
                executeFast.bindByteBuffer(4, nativeByteBuffer);
                executeFast.step();
                nativeByteBuffer.reuse();
                currentTimeMillis--;
            }
            executeFast.dispose();
            this.database.commitTransaction();
            loadChatInfo(j, true, (CountDownLatch) null, false, true);
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void saveBotCache(String str, TLObject tLObject) {
        if (tLObject != null && !TextUtils.isEmpty(str)) {
            this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda161(this, tLObject, str));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$saveBotCache$98(TLObject tLObject, String str) {
        int i;
        try {
            int currentTime = getConnectionsManager().getCurrentTime();
            if (tLObject instanceof TLRPC$TL_messages_botCallbackAnswer) {
                i = ((TLRPC$TL_messages_botCallbackAnswer) tLObject).cache_time;
            } else {
                if (tLObject instanceof TLRPC$TL_messages_botResults) {
                    i = ((TLRPC$TL_messages_botResults) tLObject).cache_time;
                }
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO botcache VALUES(?, ?, ?)");
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLObject.getObjectSize());
                tLObject.serializeToStream(nativeByteBuffer);
                executeFast.bindString(1, str);
                executeFast.bindInteger(2, currentTime);
                executeFast.bindByteBuffer(3, nativeByteBuffer);
                executeFast.step();
                executeFast.dispose();
                nativeByteBuffer.reuse();
            }
            currentTime += i;
            SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO botcache VALUES(?, ?, ?)");
            NativeByteBuffer nativeByteBuffer2 = new NativeByteBuffer(tLObject.getObjectSize());
            tLObject.serializeToStream(nativeByteBuffer2);
            executeFast2.bindString(1, str);
            executeFast2.bindInteger(2, currentTime);
            executeFast2.bindByteBuffer(3, nativeByteBuffer2);
            executeFast2.step();
            executeFast2.dispose();
            nativeByteBuffer2.reuse();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void getBotCache(String str, RequestDelegate requestDelegate) {
        if (str != null && requestDelegate != null) {
            this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda52(this, getConnectionsManager().getCurrentTime(), str, requestDelegate));
        }
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Code restructure failed: missing block: B:21:0x005d, code lost:
        r5 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:22:0x005e, code lost:
        r1 = null;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:23:0x0060, code lost:
        r5 = e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:24:0x0061, code lost:
        r1 = null;
     */
    /* JADX WARNING: Failed to process nested try/catch */
    /* JADX WARNING: Removed duplicated region for block: B:21:0x005d A[ExcHandler: all (th java.lang.Throwable), Splitter:B:1:0x0001] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$getBotCache$99(int r5, java.lang.String r6, org.telegram.tgnet.RequestDelegate r7) {
        /*
            r4 = this;
            r0 = 0
            org.telegram.SQLite.SQLiteDatabase r1 = r4.database     // Catch:{ Exception -> 0x0060, all -> 0x005d }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0060, all -> 0x005d }
            r2.<init>()     // Catch:{ Exception -> 0x0060, all -> 0x005d }
            java.lang.String r3 = "DELETE FROM botcache WHERE date < "
            r2.append(r3)     // Catch:{ Exception -> 0x0060, all -> 0x005d }
            r2.append(r5)     // Catch:{ Exception -> 0x0060, all -> 0x005d }
            java.lang.String r5 = r2.toString()     // Catch:{ Exception -> 0x0060, all -> 0x005d }
            org.telegram.SQLite.SQLitePreparedStatement r5 = r1.executeFast(r5)     // Catch:{ Exception -> 0x0060, all -> 0x005d }
            org.telegram.SQLite.SQLitePreparedStatement r5 = r5.stepThis()     // Catch:{ Exception -> 0x0060, all -> 0x005d }
            r5.dispose()     // Catch:{ Exception -> 0x0060, all -> 0x005d }
            org.telegram.SQLite.SQLiteDatabase r5 = r4.database     // Catch:{ Exception -> 0x0060, all -> 0x005d }
            java.lang.String r1 = "SELECT data FROM botcache WHERE id = ?"
            r2 = 1
            java.lang.Object[] r2 = new java.lang.Object[r2]     // Catch:{ Exception -> 0x0060, all -> 0x005d }
            r3 = 0
            r2[r3] = r6     // Catch:{ Exception -> 0x0060, all -> 0x005d }
            org.telegram.SQLite.SQLiteCursor r5 = r5.queryFinalized(r1, r2)     // Catch:{ Exception -> 0x0060, all -> 0x005d }
            boolean r6 = r5.next()     // Catch:{ Exception -> 0x0060, all -> 0x005d }
            if (r6 == 0) goto L_0x0056
            org.telegram.tgnet.NativeByteBuffer r6 = r5.byteBufferValue(r3)     // Catch:{ Exception -> 0x0050, all -> 0x005d }
            if (r6 == 0) goto L_0x0056
            int r1 = r6.readInt32(r3)     // Catch:{ Exception -> 0x0050, all -> 0x005d }
            int r2 = org.telegram.tgnet.TLRPC$TL_messages_botCallbackAnswer.constructor     // Catch:{ Exception -> 0x0050, all -> 0x005d }
            if (r1 != r2) goto L_0x0046
            org.telegram.tgnet.TLRPC$TL_messages_botCallbackAnswer r1 = org.telegram.tgnet.TLRPC$TL_messages_botCallbackAnswer.TLdeserialize(r6, r1, r3)     // Catch:{ Exception -> 0x0050, all -> 0x005d }
            goto L_0x004a
        L_0x0046:
            org.telegram.tgnet.TLRPC$messages_BotResults r1 = org.telegram.tgnet.TLRPC$messages_BotResults.TLdeserialize(r6, r1, r3)     // Catch:{ Exception -> 0x0050, all -> 0x005d }
        L_0x004a:
            r6.reuse()     // Catch:{ Exception -> 0x004e }
            goto L_0x0057
        L_0x004e:
            r6 = move-exception
            goto L_0x0052
        L_0x0050:
            r6 = move-exception
            r1 = r0
        L_0x0052:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r6)     // Catch:{ Exception -> 0x005b }
            goto L_0x0057
        L_0x0056:
            r1 = r0
        L_0x0057:
            r5.dispose()     // Catch:{ Exception -> 0x005b }
            goto L_0x0065
        L_0x005b:
            r5 = move-exception
            goto L_0x0062
        L_0x005d:
            r5 = move-exception
            r1 = r0
            goto L_0x006a
        L_0x0060:
            r5 = move-exception
            r1 = r0
        L_0x0062:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r5)     // Catch:{ all -> 0x0069 }
        L_0x0065:
            r7.run(r1, r0)
            return
        L_0x0069:
            r5 = move-exception
        L_0x006a:
            r7.run(r1, r0)
            throw r5
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$getBotCache$99(int, java.lang.String, org.telegram.tgnet.RequestDelegate):void");
    }

    public void loadUserInfo(TLRPC$User tLRPC$User, boolean z, int i, int i2) {
        if (tLRPC$User != null) {
            this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda180(this, tLRPC$User, z, i));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadUserInfo$100(TLRPC$User tLRPC$User, boolean z, int i) {
        boolean z2;
        int i2;
        TLRPC$UserFull tLRPC$UserFull;
        int i3;
        boolean z3;
        boolean z4;
        TLRPC$User tLRPC$User2;
        MessagesController messagesController;
        int i4;
        TLRPC$UserFull tLRPC$UserFull2;
        TLRPC$UserFull tLRPC$UserFull3;
        boolean z5;
        int i5;
        ArrayList<MessageObject> loadPinnedMessages;
        NativeByteBuffer byteBufferValue;
        TLRPC$User tLRPC$User3 = tLRPC$User;
        HashMap hashMap = new HashMap();
        ArrayList arrayList = new ArrayList();
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT info, pinned FROM user_settings WHERE uid = " + tLRPC$User3.id, new Object[0]);
            boolean z6 = true;
            if (!queryFinalized.next() || (byteBufferValue = queryFinalized.byteBufferValue(0)) == null) {
                tLRPC$UserFull3 = null;
            } else {
                tLRPC$UserFull3 = TLRPC$UserFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                try {
                    tLRPC$UserFull3.pinned_msg_id = queryFinalized.intValue(1);
                    byteBufferValue.reuse();
                } catch (Exception e) {
                    e = e;
                    tLRPC$UserFull2 = tLRPC$UserFull3;
                    i4 = 0;
                    z2 = false;
                    try {
                        FileLog.e((Throwable) e);
                        messagesController = getMessagesController();
                        z4 = true;
                        tLRPC$User2 = tLRPC$User;
                        z3 = z;
                        i3 = i;
                        messagesController.processUserInfo(tLRPC$User2, tLRPC$UserFull, z4, z3, i3, arrayList, hashMap, i2, z2);
                    } catch (Throwable th) {
                        th = th;
                        getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull, true, z, i, arrayList, hashMap, i2, z2);
                        throw th;
                    }
                } catch (Throwable th2) {
                    th = th2;
                    tLRPC$UserFull = tLRPC$UserFull3;
                    i2 = 0;
                    z2 = false;
                    getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull, true, z, i, arrayList, hashMap, i2, z2);
                    throw th;
                }
            }
            queryFinalized.dispose();
            SQLiteCursor queryFinalized2 = getMessagesStorage().getDatabase().queryFinalized(String.format(Locale.US, "SELECT mid FROM chat_pinned_v2 WHERE uid = %d ORDER BY mid DESC", new Object[]{Long.valueOf(tLRPC$User3.id)}), new Object[0]);
            while (queryFinalized2.next()) {
                int intValue = queryFinalized2.intValue(0);
                arrayList.add(Integer.valueOf(intValue));
                hashMap.put(Integer.valueOf(intValue), (Object) null);
            }
            queryFinalized2.dispose();
            SQLiteCursor queryFinalized3 = this.database.queryFinalized("SELECT count, end FROM chat_pinned_count WHERE uid = " + tLRPC$User3.id, new Object[0]);
            if (queryFinalized3.next()) {
                int intValue2 = queryFinalized3.intValue(0);
                try {
                    if (queryFinalized3.intValue(1) == 0) {
                        z6 = false;
                    }
                    i5 = intValue2;
                    z5 = z6;
                } catch (Exception e2) {
                    e = e2;
                    i4 = intValue2;
                    tLRPC$UserFull2 = tLRPC$UserFull3;
                    z2 = false;
                    FileLog.e((Throwable) e);
                    messagesController = getMessagesController();
                    z4 = true;
                    tLRPC$User2 = tLRPC$User;
                    z3 = z;
                    i3 = i;
                    messagesController.processUserInfo(tLRPC$User2, tLRPC$UserFull, z4, z3, i3, arrayList, hashMap, i2, z2);
                } catch (Throwable th3) {
                    th = th3;
                    i2 = intValue2;
                    tLRPC$UserFull = tLRPC$UserFull3;
                    z2 = false;
                    getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull, true, z, i, arrayList, hashMap, i2, z2);
                    throw th;
                }
            } else {
                i5 = 0;
                z5 = false;
            }
            try {
                queryFinalized3.dispose();
                if (!(tLRPC$UserFull3 == null || tLRPC$UserFull3.pinned_msg_id == 0 || (!arrayList.isEmpty() && tLRPC$UserFull3.pinned_msg_id <= ((Integer) arrayList.get(0)).intValue()))) {
                    arrayList.clear();
                    arrayList.add(Integer.valueOf(tLRPC$UserFull3.pinned_msg_id));
                    hashMap.put(Integer.valueOf(tLRPC$UserFull3.pinned_msg_id), (Object) null);
                }
                if (!arrayList.isEmpty() && (loadPinnedMessages = getMediaDataController().loadPinnedMessages(tLRPC$User3.id, 0, arrayList, false)) != null) {
                    int size = loadPinnedMessages.size();
                    for (int i6 = 0; i6 < size; i6++) {
                        MessageObject messageObject = loadPinnedMessages.get(i6);
                        hashMap.put(Integer.valueOf(messageObject.getId()), messageObject);
                    }
                }
                messagesController = getMessagesController();
                z4 = true;
                tLRPC$User2 = tLRPC$User;
                tLRPC$UserFull = tLRPC$UserFull3;
                z3 = z;
                i3 = i;
                i2 = i5;
                z2 = z5;
            } catch (Exception e3) {
                e = e3;
                tLRPC$UserFull2 = tLRPC$UserFull3;
                i4 = i5;
                z2 = z5;
                FileLog.e((Throwable) e);
                messagesController = getMessagesController();
                z4 = true;
                tLRPC$User2 = tLRPC$User;
                z3 = z;
                i3 = i;
                messagesController.processUserInfo(tLRPC$User2, tLRPC$UserFull, z4, z3, i3, arrayList, hashMap, i2, z2);
            } catch (Throwable th4) {
                th = th4;
                tLRPC$UserFull = tLRPC$UserFull3;
                i2 = i5;
                z2 = z5;
                getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull, true, z, i, arrayList, hashMap, i2, z2);
                throw th;
            }
        } catch (Exception e4) {
            e = e4;
            tLRPC$UserFull2 = null;
            i4 = 0;
            z2 = false;
            FileLog.e((Throwable) e);
            messagesController = getMessagesController();
            z4 = true;
            tLRPC$User2 = tLRPC$User;
            z3 = z;
            i3 = i;
            messagesController.processUserInfo(tLRPC$User2, tLRPC$UserFull, z4, z3, i3, arrayList, hashMap, i2, z2);
        } catch (Throwable th5) {
            th = th5;
            tLRPC$UserFull = null;
            i2 = 0;
            z2 = false;
            getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull, true, z, i, arrayList, hashMap, i2, z2);
            throw th;
        }
        messagesController.processUserInfo(tLRPC$User2, tLRPC$UserFull, z4, z3, i3, arrayList, hashMap, i2, z2);
    }

    public void updateUserInfo(TLRPC$UserFull tLRPC$UserFull, boolean z) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda196(this, z, tLRPC$UserFull));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateUserInfo$101(boolean z, TLRPC$UserFull tLRPC$UserFull) {
        if (z) {
            try {
                SQLiteDatabase sQLiteDatabase = this.database;
                SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT uid FROM user_settings WHERE uid = " + tLRPC$UserFull.user.id, new Object[0]);
                boolean next = queryFinalized.next();
                queryFinalized.dispose();
                if (!next) {
                    return;
                }
            } catch (Exception e) {
                FileLog.e((Throwable) e);
                return;
            }
        }
        SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO user_settings VALUES(?, ?, ?)");
        NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$UserFull.getObjectSize());
        tLRPC$UserFull.serializeToStream(nativeByteBuffer);
        executeFast.bindLong(1, tLRPC$UserFull.user.id);
        executeFast.bindByteBuffer(2, nativeByteBuffer);
        executeFast.bindInteger(3, tLRPC$UserFull.pinned_msg_id);
        executeFast.step();
        executeFast.dispose();
        nativeByteBuffer.reuse();
        if ((tLRPC$UserFull.flags & 2048) != 0) {
            SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE dialogs SET folder_id = ? WHERE did = ?");
            executeFast2.bindInteger(1, tLRPC$UserFull.folder_id);
            executeFast2.bindLong(2, tLRPC$UserFull.user.id);
            executeFast2.step();
            executeFast2.dispose();
            this.unknownDialogsIds.remove(tLRPC$UserFull.user.id);
        }
    }

    public void saveChatInviter(long j, long j2) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda82(this, j2, j));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$saveChatInviter$102(long j, long j2) {
        try {
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE chat_settings_v2 SET inviter = ? WHERE uid = ?");
            executeFast.requery();
            executeFast.bindLong(1, j);
            executeFast.bindLong(2, j2);
            executeFast.step();
            executeFast.dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void saveChatLinksCount(long j, int i) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda45(this, i, j));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$saveChatLinksCount$103(int i, long j) {
        try {
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE chat_settings_v2 SET links = ? WHERE uid = ?");
            executeFast.requery();
            executeFast.bindInteger(1, i);
            executeFast.bindLong(2, j);
            executeFast.step();
            executeFast.dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void updateChatInfo(TLRPC$ChatFull tLRPC$ChatFull, boolean z) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda165(this, tLRPC$ChatFull, z));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChatInfo$104(TLRPC$ChatFull tLRPC$ChatFull, boolean z) {
        int i;
        int i2;
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT online, inviter, links FROM chat_settings_v2 WHERE uid = " + tLRPC$ChatFull.id, new Object[0]);
            if (queryFinalized.next()) {
                i2 = queryFinalized.intValue(0);
                tLRPC$ChatFull.inviterId = queryFinalized.longValue(1);
                i = queryFinalized.intValue(2);
            } else {
                i2 = -1;
                i = 0;
            }
            queryFinalized.dispose();
            if (!z || i2 != -1) {
                if (i2 >= 0 && (tLRPC$ChatFull.flags & 8192) == 0) {
                    tLRPC$ChatFull.online_count = i2;
                }
                if (i >= 0) {
                    tLRPC$ChatFull.invitesCount = i;
                }
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO chat_settings_v2 VALUES(?, ?, ?, ?, ?, ?)");
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$ChatFull.getObjectSize());
                tLRPC$ChatFull.serializeToStream(nativeByteBuffer);
                executeFast.bindLong(1, tLRPC$ChatFull.id);
                executeFast.bindByteBuffer(2, nativeByteBuffer);
                executeFast.bindInteger(3, tLRPC$ChatFull.pinned_msg_id);
                executeFast.bindInteger(4, tLRPC$ChatFull.online_count);
                executeFast.bindLong(5, tLRPC$ChatFull.inviterId);
                executeFast.bindInteger(6, tLRPC$ChatFull.invitesCount);
                executeFast.step();
                executeFast.dispose();
                nativeByteBuffer.reuse();
                if (tLRPC$ChatFull instanceof TLRPC$TL_channelFull) {
                    SQLiteDatabase sQLiteDatabase2 = this.database;
                    SQLiteCursor queryFinalized2 = sQLiteDatabase2.queryFinalized("SELECT inbox_max, outbox_max FROM dialogs WHERE did = " + (-tLRPC$ChatFull.id), new Object[0]);
                    if (queryFinalized2.next() && queryFinalized2.intValue(0) < tLRPC$ChatFull.read_inbox_max_id) {
                        int intValue = queryFinalized2.intValue(1);
                        SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE dialogs SET unread_count = ?, inbox_max = ?, outbox_max = ? WHERE did = ?");
                        executeFast2.bindInteger(1, tLRPC$ChatFull.unread_count);
                        executeFast2.bindInteger(2, tLRPC$ChatFull.read_inbox_max_id);
                        executeFast2.bindInteger(3, Math.max(intValue, tLRPC$ChatFull.read_outbox_max_id));
                        executeFast2.bindLong(4, -tLRPC$ChatFull.id);
                        executeFast2.step();
                        executeFast2.dispose();
                    }
                    queryFinalized2.dispose();
                }
                if ((tLRPC$ChatFull.flags & 2048) != 0) {
                    SQLitePreparedStatement executeFast3 = this.database.executeFast("UPDATE dialogs SET folder_id = ? WHERE did = ?");
                    executeFast3.bindInteger(1, tLRPC$ChatFull.folder_id);
                    executeFast3.bindLong(2, -tLRPC$ChatFull.id);
                    executeFast3.step();
                    executeFast3.dispose();
                    this.unknownDialogsIds.remove(-tLRPC$ChatFull.id);
                }
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void updateChatOnlineCount(long j, int i) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda46(this, i, j));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChatOnlineCount$105(int i, long j) {
        try {
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE chat_settings_v2 SET online = ? WHERE uid = ?");
            executeFast.requery();
            executeFast.bindInteger(1, i);
            executeFast.bindLong(2, j);
            executeFast.step();
            executeFast.dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void updatePinnedMessages(long j, ArrayList<Integer> arrayList, boolean z, int i, int i2, boolean z2, HashMap<Integer, MessageObject> hashMap) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda195(this, z, hashMap, i2, j, arrayList, i, z2));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updatePinnedMessages$108(boolean z, HashMap hashMap, int i, long j, ArrayList arrayList, int i2, boolean z2) {
        int i3;
        boolean z3;
        int i4;
        int i5;
        boolean z4;
        int i6;
        boolean z5;
        int i7;
        int max;
        HashMap hashMap2 = hashMap;
        long j2 = j;
        ArrayList arrayList2 = arrayList;
        int i8 = 2;
        int i9 = 1;
        if (z) {
            try {
                this.database.beginTransaction();
                if (hashMap2 != null) {
                    if (i == 0) {
                        SQLiteDatabase sQLiteDatabase = this.database;
                        sQLiteDatabase.executeFast("DELETE FROM chat_pinned_v2 WHERE uid = " + j2).stepThis().dispose();
                    }
                    i6 = 0;
                } else {
                    SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(mid) FROM chat_pinned_v2 WHERE uid = %d AND mid IN (%s)", new Object[]{Long.valueOf(j), TextUtils.join(",", arrayList2)}), new Object[0]);
                    i6 = queryFinalized.next() ? queryFinalized.intValue(0) : 0;
                    queryFinalized.dispose();
                }
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO chat_pinned_v2 VALUES(?, ?, ?)");
                int size = arrayList.size();
                int i10 = 0;
                while (i10 < size) {
                    Integer num = (Integer) arrayList2.get(i10);
                    executeFast.requery();
                    executeFast.bindLong(1, j2);
                    executeFast.bindInteger(i8, num.intValue());
                    NativeByteBuffer nativeByteBuffer = null;
                    MessageObject messageObject = hashMap2 != null ? (MessageObject) hashMap2.get(num) : null;
                    if (messageObject != null) {
                        nativeByteBuffer = new NativeByteBuffer(messageObject.messageOwner.getObjectSize());
                        messageObject.messageOwner.serializeToStream(nativeByteBuffer);
                        executeFast.bindByteBuffer(3, nativeByteBuffer);
                    } else {
                        executeFast.bindNull(3);
                    }
                    executeFast.step();
                    if (nativeByteBuffer != null) {
                        nativeByteBuffer.reuse();
                    }
                    i10++;
                    i8 = 2;
                }
                executeFast.dispose();
                this.database.commitTransaction();
                SQLiteDatabase sQLiteDatabase2 = this.database;
                Locale locale = Locale.US;
                SQLiteCursor queryFinalized2 = sQLiteDatabase2.queryFinalized(String.format(locale, "SELECT COUNT(mid) FROM chat_pinned_v2 WHERE uid = %d", new Object[]{Long.valueOf(j)}), new Object[0]);
                int intValue = queryFinalized2.next() ? queryFinalized2.intValue(0) : 0;
                queryFinalized2.dispose();
                if (hashMap2 != null) {
                    max = Math.max(i2, intValue);
                    z5 = z2;
                } else {
                    SQLiteCursor queryFinalized3 = this.database.queryFinalized(String.format(locale, "SELECT count, end FROM chat_pinned_count WHERE uid = %d", new Object[]{Long.valueOf(j)}), new Object[0]);
                    if (queryFinalized3.next()) {
                        i7 = queryFinalized3.intValue(0);
                        if (queryFinalized3.intValue(1) != 0) {
                            z5 = true;
                            queryFinalized3.dispose();
                            max = Math.max(i7 + (arrayList.size() - i6), intValue);
                        }
                    } else {
                        i7 = 0;
                    }
                    z5 = false;
                    queryFinalized3.dispose();
                    max = Math.max(i7 + (arrayList.size() - i6), intValue);
                }
                int i11 = max;
                SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO chat_pinned_count VALUES(?, ?, ?)");
                executeFast2.requery();
                executeFast2.bindLong(1, j2);
                executeFast2.bindInteger(2, i11);
                if (!z5) {
                    i9 = 0;
                }
                executeFast2.bindInteger(3, i9);
                executeFast2.step();
                executeFast2.dispose();
                AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda98(this, j, arrayList, hashMap, i, i11, z5));
            } catch (Exception e) {
                FileLog.e((Throwable) e);
            }
        } else {
            if (arrayList2 == null) {
                SQLiteDatabase sQLiteDatabase3 = this.database;
                sQLiteDatabase3.executeFast("DELETE FROM chat_pinned_v2 WHERE uid = " + j2).stepThis().dispose();
                if (DialogObject.isChatDialog(j)) {
                    this.database.executeFast(String.format(Locale.US, "UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d", new Object[]{Long.valueOf(-j2)})).stepThis().dispose();
                } else {
                    this.database.executeFast(String.format(Locale.US, "UPDATE user_settings SET pinned = 0 WHERE uid = %d", new Object[]{Long.valueOf(j)})).stepThis().dispose();
                }
                i4 = 0;
                z3 = true;
                i3 = 0;
            } else {
                String join = TextUtils.join(",", arrayList2);
                if (DialogObject.isChatDialog(j)) {
                    this.database.executeFast(String.format(Locale.US, "UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)", new Object[]{Long.valueOf(-j2), join})).stepThis().dispose();
                } else {
                    this.database.executeFast(String.format(Locale.US, "UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)", new Object[]{Long.valueOf(j), join})).stepThis().dispose();
                }
                SQLiteDatabase sQLiteDatabase4 = this.database;
                Locale locale2 = Locale.US;
                sQLiteDatabase4.executeFast(String.format(locale2, "DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)", new Object[]{Long.valueOf(j), join})).stepThis().dispose();
                SQLiteCursor queryFinalized4 = this.database.queryFinalized("SELECT changes()", new Object[0]);
                int intValue2 = queryFinalized4.next() ? queryFinalized4.intValue(0) : 0;
                queryFinalized4.dispose();
                SQLiteCursor queryFinalized5 = this.database.queryFinalized(String.format(locale2, "SELECT COUNT(mid) FROM chat_pinned_v2 WHERE uid = %d", new Object[]{Long.valueOf(j)}), new Object[0]);
                int intValue3 = queryFinalized5.next() ? queryFinalized5.intValue(0) : 0;
                queryFinalized5.dispose();
                i3 = 0;
                SQLiteCursor queryFinalized6 = this.database.queryFinalized(String.format(locale2, "SELECT count, end FROM chat_pinned_count WHERE uid = %d", new Object[]{Long.valueOf(j)}), new Object[0]);
                if (queryFinalized6.next()) {
                    i5 = Math.max(0, queryFinalized6.intValue(0) - intValue2);
                    z4 = queryFinalized6.intValue(1) != 0;
                } else {
                    z4 = false;
                    i5 = 0;
                }
                queryFinalized6.dispose();
                i4 = Math.max(intValue3, i5);
                z3 = z4;
            }
            SQLitePreparedStatement executeFast3 = this.database.executeFast("REPLACE INTO chat_pinned_count VALUES(?, ?, ?)");
            executeFast3.requery();
            executeFast3.bindLong(1, j2);
            executeFast3.bindInteger(2, i4);
            if (z3) {
                i3 = 1;
            }
            executeFast3.bindInteger(3, i3);
            executeFast3.step();
            executeFast3.dispose();
            AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda97(this, j, arrayList, hashMap, i, i4, z3));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updatePinnedMessages$106(long j, ArrayList arrayList, HashMap hashMap, int i, int i2, boolean z) {
        getNotificationCenter().postNotificationName(NotificationCenter.didLoadPinnedMessages, Long.valueOf(j), arrayList, Boolean.TRUE, null, hashMap, Integer.valueOf(i), Integer.valueOf(i2), Boolean.valueOf(z));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updatePinnedMessages$107(long j, ArrayList arrayList, HashMap hashMap, int i, int i2, boolean z) {
        getNotificationCenter().postNotificationName(NotificationCenter.didLoadPinnedMessages, Long.valueOf(j), arrayList, Boolean.FALSE, null, hashMap, Integer.valueOf(i), Integer.valueOf(i2), Boolean.valueOf(z));
    }

    public void updateChatInfo(long j, long j2, int i, long j3, int i2) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda73(this, j, i, j2, j3, i2));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChatInfo$110(long j, int i, long j2, long j3, int i2) {
        TLRPC$ChatParticipant tLRPC$ChatParticipant;
        NativeByteBuffer byteBufferValue;
        long j4 = j;
        int i3 = i;
        long j5 = j2;
        long j6 = j3;
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT info, pinned, online, inviter FROM chat_settings_v2 WHERE uid = " + j4, new Object[0]);
            TLRPC$ChatFull tLRPC$ChatFull = null;
            new ArrayList();
            if (queryFinalized.next() && (byteBufferValue = queryFinalized.byteBufferValue(0)) != null) {
                tLRPC$ChatFull = TLRPC$ChatFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                byteBufferValue.reuse();
                tLRPC$ChatFull.pinned_msg_id = queryFinalized.intValue(1);
                tLRPC$ChatFull.online_count = queryFinalized.intValue(2);
                tLRPC$ChatFull.inviterId = queryFinalized.longValue(3);
            }
            queryFinalized.dispose();
            if (tLRPC$ChatFull instanceof TLRPC$TL_chatFull) {
                if (i3 == 1) {
                    int i4 = 0;
                    while (true) {
                        if (i4 >= tLRPC$ChatFull.participants.participants.size()) {
                            break;
                        } else if (tLRPC$ChatFull.participants.participants.get(i4).user_id == j5) {
                            tLRPC$ChatFull.participants.participants.remove(i4);
                            break;
                        } else {
                            i4++;
                        }
                    }
                } else if (i3 == 0) {
                    Iterator<TLRPC$ChatParticipant> it = tLRPC$ChatFull.participants.participants.iterator();
                    while (it.hasNext()) {
                        if (it.next().user_id == j5) {
                            return;
                        }
                    }
                    TLRPC$TL_chatParticipant tLRPC$TL_chatParticipant = new TLRPC$TL_chatParticipant();
                    tLRPC$TL_chatParticipant.user_id = j5;
                    tLRPC$TL_chatParticipant.inviter_id = j6;
                    tLRPC$TL_chatParticipant.date = getConnectionsManager().getCurrentTime();
                    tLRPC$ChatFull.participants.participants.add(tLRPC$TL_chatParticipant);
                } else if (i3 == 2) {
                    int i5 = 0;
                    while (true) {
                        if (i5 >= tLRPC$ChatFull.participants.participants.size()) {
                            break;
                        }
                        TLRPC$ChatParticipant tLRPC$ChatParticipant2 = tLRPC$ChatFull.participants.participants.get(i5);
                        if (tLRPC$ChatParticipant2.user_id == j5) {
                            if (j6 == 1) {
                                tLRPC$ChatParticipant = new TLRPC$TL_chatParticipantAdmin();
                            } else {
                                tLRPC$ChatParticipant = new TLRPC$TL_chatParticipant();
                            }
                            tLRPC$ChatParticipant.user_id = tLRPC$ChatParticipant2.user_id;
                            tLRPC$ChatParticipant.date = tLRPC$ChatParticipant2.date;
                            tLRPC$ChatParticipant.inviter_id = tLRPC$ChatParticipant2.inviter_id;
                            tLRPC$ChatFull.participants.participants.set(i5, tLRPC$ChatParticipant);
                        } else {
                            i5++;
                        }
                    }
                }
                tLRPC$ChatFull.participants.version = i2;
                AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda163(this, tLRPC$ChatFull));
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO chat_settings_v2 VALUES(?, ?, ?, ?, ?, ?)");
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$ChatFull.getObjectSize());
                tLRPC$ChatFull.serializeToStream(nativeByteBuffer);
                executeFast.bindLong(1, j4);
                executeFast.bindByteBuffer(2, nativeByteBuffer);
                executeFast.bindInteger(3, tLRPC$ChatFull.pinned_msg_id);
                executeFast.bindInteger(4, tLRPC$ChatFull.online_count);
                executeFast.bindLong(5, tLRPC$ChatFull.inviterId);
                executeFast.bindInteger(6, tLRPC$ChatFull.invitesCount);
                executeFast.step();
                executeFast.dispose();
                nativeByteBuffer.reuse();
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChatInfo$109(TLRPC$ChatFull tLRPC$ChatFull) {
        NotificationCenter notificationCenter = getNotificationCenter();
        int i = NotificationCenter.chatInfoDidLoad;
        Boolean bool = Boolean.FALSE;
        notificationCenter.postNotificationName(i, tLRPC$ChatFull, 0, bool, bool);
    }

    public boolean isMigratedChat(long j) {
        CountDownLatch countDownLatch = new CountDownLatch(1);
        boolean[] zArr = new boolean[1];
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda116(this, j, zArr, countDownLatch));
        try {
            countDownLatch.await();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        return zArr[0];
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$isMigratedChat$111(long j, boolean[] zArr, CountDownLatch countDownLatch) {
        NativeByteBuffer byteBufferValue;
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT info FROM chat_settings_v2 WHERE uid = " + j, new Object[0]);
            TLRPC$ChatFull tLRPC$ChatFull = null;
            new ArrayList();
            if (queryFinalized.next() && (byteBufferValue = queryFinalized.byteBufferValue(0)) != null) {
                tLRPC$ChatFull = TLRPC$ChatFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                byteBufferValue.reuse();
            }
            queryFinalized.dispose();
            zArr[0] = (tLRPC$ChatFull instanceof TLRPC$TL_channelFull) && tLRPC$ChatFull.migrated_from_chat_id != 0;
            countDownLatch.countDown();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        } catch (Throwable th) {
            countDownLatch.countDown();
            throw th;
        }
        countDownLatch.countDown();
    }

    public boolean hasInviteMeMessage(long j) {
        CountDownLatch countDownLatch = new CountDownLatch(1);
        boolean[] zArr = new boolean[1];
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda114(this, j, zArr, countDownLatch));
        try {
            countDownLatch.await();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        return zArr[0];
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$hasInviteMeMessage$112(long j, boolean[] zArr, CountDownLatch countDownLatch) {
        try {
            long clientUserId = getUserConfig().getClientUserId();
            SQLiteDatabase sQLiteDatabase = this.database;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT data FROM messages_v2 WHERE uid = " + (-j) + " AND out = 0 ORDER BY mid DESC LIMIT 100", new Object[0]);
            while (true) {
                if (!queryFinalized.next()) {
                    break;
                }
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                if (byteBufferValue != null) {
                    TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    byteBufferValue.reuse();
                    TLRPC$MessageAction tLRPC$MessageAction = TLdeserialize.action;
                    if ((tLRPC$MessageAction instanceof TLRPC$TL_messageActionChatAddUser) && tLRPC$MessageAction.users.contains(Long.valueOf(clientUserId))) {
                        zArr[0] = true;
                        break;
                    }
                }
            }
            queryFinalized.dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        } catch (Throwable th) {
            countDownLatch.countDown();
            throw th;
        }
        countDownLatch.countDown();
    }

    /* JADX WARNING: Code restructure failed: missing block: B:136:0x029e, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:137:0x029f, code lost:
        r5 = r7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:156:0x02f1, code lost:
        r0 = e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:157:0x02f2, code lost:
        r14 = r7;
        r12 = r19;
        r13 = r20;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:158:0x02f8, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:159:0x02f9, code lost:
        r14 = r7;
        r10 = r19;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:160:0x02fd, code lost:
        r0 = e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:161:0x02fe, code lost:
        r14 = r7;
        r10 = r19;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:165:0x0306, code lost:
        r0 = e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:36:0x00b8, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:60:0x012c, code lost:
        r0 = e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:69:0x0167, code lost:
        r0 = e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:70:0x0168, code lost:
        r19 = r10;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:72:?, code lost:
        org.telegram.messenger.FileLog.e((java.lang.Throwable) r0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:91:0x01d5, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:92:0x01d6, code lost:
        r5 = r7;
        r10 = r19;
     */
    /* JADX WARNING: Exception block dominator not found, dom blocks: [B:25:0x007e, B:45:0x00ed] */
    /* JADX WARNING: Failed to process nested try/catch */
    /* JADX WARNING: Removed duplicated region for block: B:111:0x0249 A[SYNTHETIC, Splitter:B:111:0x0249] */
    /* JADX WARNING: Removed duplicated region for block: B:124:0x0266  */
    /* JADX WARNING: Removed duplicated region for block: B:128:0x026f A[SYNTHETIC, Splitter:B:128:0x026f] */
    /* JADX WARNING: Removed duplicated region for block: B:141:0x02a7 A[SYNTHETIC, Splitter:B:141:0x02a7] */
    /* JADX WARNING: Removed duplicated region for block: B:156:0x02f1 A[ExcHandler: Exception (e java.lang.Exception), Splitter:B:125:0x026a] */
    /* JADX WARNING: Removed duplicated region for block: B:160:0x02fd A[ExcHandler: Exception (e java.lang.Exception), PHI: r19 
      PHI: (r19v0 java.util.ArrayList) = (r19v1 java.util.ArrayList), (r19v11 java.util.ArrayList) binds: [B:93:0x01db, B:71:0x016a] A[DONT_GENERATE, DONT_INLINE], Splitter:B:71:0x016a] */
    /* JADX WARNING: Removed duplicated region for block: B:165:0x0306 A[ExcHandler: Exception (e java.lang.Exception), PHI: r10 
      PHI: (r10v9 java.util.ArrayList) = (r10v0 java.util.ArrayList), (r10v0 java.util.ArrayList), (r10v16 java.util.ArrayList), (r10v16 java.util.ArrayList), (r10v19 java.util.ArrayList), (r10v19 java.util.ArrayList), (r10v0 java.util.ArrayList), (r10v0 java.util.ArrayList), (r10v0 java.util.ArrayList), (r10v0 java.util.ArrayList) binds: [B:21:0x0075, B:22:?, B:108:0x0227, B:111:0x0249, B:100:0x020d, B:101:?, B:38:0x00bc, B:39:?, B:41:0x00c0, B:25:0x007e] A[DONT_GENERATE, DONT_INLINE], Splitter:B:21:0x0075] */
    /* JADX WARNING: Removed duplicated region for block: B:25:0x007e A[SYNTHETIC, Splitter:B:25:0x007e] */
    /* JADX WARNING: Removed duplicated region for block: B:36:0x00b8 A[ExcHandler: all (th java.lang.Throwable), PHI: r10 
      PHI: (r10v24 java.util.ArrayList) = (r10v16 java.util.ArrayList), (r10v19 java.util.ArrayList), (r10v19 java.util.ArrayList), (r10v0 java.util.ArrayList), (r10v20 java.util.ArrayList), (r10v0 java.util.ArrayList) binds: [B:111:0x0249, B:100:0x020d, B:101:?, B:41:0x00c0, B:45:0x00ed, B:25:0x007e] A[DONT_GENERATE, DONT_INLINE], Splitter:B:25:0x007e] */
    /* JADX WARNING: Removed duplicated region for block: B:38:0x00bc A[SYNTHETIC, Splitter:B:38:0x00bc] */
    /* JADX WARNING: Removed duplicated region for block: B:91:0x01d5 A[ExcHandler: all (th java.lang.Throwable), PHI: r19 
      PHI: (r19v9 java.util.ArrayList) = (r19v11 java.util.ArrayList), (r19v15 java.util.ArrayList) binds: [B:71:0x016a, B:56:0x0117] A[DONT_GENERATE, DONT_INLINE], Splitter:B:56:0x0117] */
    /* JADX WARNING: Removed duplicated region for block: B:97:0x0203 A[SYNTHETIC, Splitter:B:97:0x0203] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private org.telegram.tgnet.TLRPC$ChatFull loadChatInfoInternal(long r22, boolean r24, boolean r25, boolean r26, int r27) {
        /*
            r21 = this;
            r1 = r21
            r3 = r22
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            java.util.HashMap r11 = new java.util.HashMap
            r11.<init>()
            java.util.ArrayList r10 = new java.util.ArrayList
            r10.<init>()
            r5 = 0
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x030f, all -> 0x0309 }
            java.lang.StringBuilder r7 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x030f, all -> 0x0309 }
            r7.<init>()     // Catch:{ Exception -> 0x030f, all -> 0x0309 }
            java.lang.String r8 = "SELECT info, pinned, online, inviter, links FROM chat_settings_v2 WHERE uid = "
            r7.append(r8)     // Catch:{ Exception -> 0x030f, all -> 0x0309 }
            r7.append(r3)     // Catch:{ Exception -> 0x030f, all -> 0x0309 }
            java.lang.String r7 = r7.toString()     // Catch:{ Exception -> 0x030f, all -> 0x0309 }
            java.lang.Object[] r8 = new java.lang.Object[r5]     // Catch:{ Exception -> 0x030f, all -> 0x0309 }
            org.telegram.SQLite.SQLiteCursor r0 = r0.queryFinalized(r7, r8)     // Catch:{ Exception -> 0x030f, all -> 0x0309 }
            boolean r7 = r0.next()     // Catch:{ Exception -> 0x030f, all -> 0x0309 }
            r8 = 3
            r9 = 2
            r12 = 1
            if (r7 == 0) goto L_0x0074
            org.telegram.tgnet.NativeByteBuffer r7 = r0.byteBufferValue(r5)     // Catch:{ Exception -> 0x006e, all -> 0x006a }
            if (r7 == 0) goto L_0x0074
            int r13 = r7.readInt32(r5)     // Catch:{ Exception -> 0x006e, all -> 0x006a }
            org.telegram.tgnet.TLRPC$ChatFull r13 = org.telegram.tgnet.TLRPC$ChatFull.TLdeserialize(r7, r13, r5)     // Catch:{ Exception -> 0x006e, all -> 0x006a }
            r7.reuse()     // Catch:{ Exception -> 0x0066, all -> 0x0062 }
            int r7 = r0.intValue(r12)     // Catch:{ Exception -> 0x0066, all -> 0x0062 }
            r13.pinned_msg_id = r7     // Catch:{ Exception -> 0x0066, all -> 0x0062 }
            int r7 = r0.intValue(r9)     // Catch:{ Exception -> 0x0066, all -> 0x0062 }
            r13.online_count = r7     // Catch:{ Exception -> 0x0066, all -> 0x0062 }
            long r14 = r0.longValue(r8)     // Catch:{ Exception -> 0x0066, all -> 0x0062 }
            r13.inviterId = r14     // Catch:{ Exception -> 0x0066, all -> 0x0062 }
            r7 = 4
            int r7 = r0.intValue(r7)     // Catch:{ Exception -> 0x0066, all -> 0x0062 }
            r13.invitesCount = r7     // Catch:{ Exception -> 0x0066, all -> 0x0062 }
            r7 = r13
            goto L_0x0075
        L_0x0062:
            r0 = move-exception
            r5 = r13
            goto L_0x030c
        L_0x0066:
            r0 = move-exception
            r14 = r13
            goto L_0x0312
        L_0x006a:
            r0 = move-exception
            r5 = 0
            goto L_0x030c
        L_0x006e:
            r0 = move-exception
            r12 = 0
            r13 = 0
            r14 = 0
            goto L_0x0314
        L_0x0074:
            r7 = 0
        L_0x0075:
            r0.dispose()     // Catch:{ Exception -> 0x0306, all -> 0x0302 }
            boolean r0 = r7 instanceof org.telegram.tgnet.TLRPC$TL_chatFull     // Catch:{ Exception -> 0x0306, all -> 0x0302 }
            java.lang.String r13 = ","
            if (r0 == 0) goto L_0x00bc
            java.lang.StringBuilder r0 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0306, all -> 0x00b8 }
            r0.<init>()     // Catch:{ Exception -> 0x0306, all -> 0x00b8 }
            r8 = 0
        L_0x0084:
            org.telegram.tgnet.TLRPC$ChatParticipants r9 = r7.participants     // Catch:{ Exception -> 0x0306, all -> 0x00b8 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$ChatParticipant> r9 = r9.participants     // Catch:{ Exception -> 0x0306, all -> 0x00b8 }
            int r9 = r9.size()     // Catch:{ Exception -> 0x0306, all -> 0x00b8 }
            if (r8 >= r9) goto L_0x00a9
            org.telegram.tgnet.TLRPC$ChatParticipants r9 = r7.participants     // Catch:{ Exception -> 0x0306, all -> 0x00b8 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$ChatParticipant> r9 = r9.participants     // Catch:{ Exception -> 0x0306, all -> 0x00b8 }
            java.lang.Object r9 = r9.get(r8)     // Catch:{ Exception -> 0x0306, all -> 0x00b8 }
            org.telegram.tgnet.TLRPC$ChatParticipant r9 = (org.telegram.tgnet.TLRPC$ChatParticipant) r9     // Catch:{ Exception -> 0x0306, all -> 0x00b8 }
            int r14 = r0.length()     // Catch:{ Exception -> 0x0306, all -> 0x00b8 }
            if (r14 == 0) goto L_0x00a1
            r0.append(r13)     // Catch:{ Exception -> 0x0306, all -> 0x00b8 }
        L_0x00a1:
            long r14 = r9.user_id     // Catch:{ Exception -> 0x0306, all -> 0x00b8 }
            r0.append(r14)     // Catch:{ Exception -> 0x0306, all -> 0x00b8 }
            int r8 = r8 + 1
            goto L_0x0084
        L_0x00a9:
            int r8 = r0.length()     // Catch:{ Exception -> 0x0306, all -> 0x00b8 }
            if (r8 == 0) goto L_0x01b2
            java.lang.String r0 = r0.toString()     // Catch:{ Exception -> 0x0306, all -> 0x00b8 }
            r1.getUsersInternal(r0, r6)     // Catch:{ Exception -> 0x0306, all -> 0x00b8 }
            goto L_0x01b2
        L_0x00b8:
            r0 = move-exception
        L_0x00b9:
            r5 = r7
            goto L_0x030c
        L_0x00bc:
            boolean r0 = r7 instanceof org.telegram.tgnet.TLRPC$TL_channelFull     // Catch:{ Exception -> 0x0306, all -> 0x0302 }
            if (r0 == 0) goto L_0x01b2
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0306, all -> 0x00b8 }
            java.lang.StringBuilder r14 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0306, all -> 0x00b8 }
            r14.<init>()     // Catch:{ Exception -> 0x0306, all -> 0x00b8 }
            java.lang.String r15 = "SELECT us.data, us.status, cu.data, cu.date FROM channel_users_v2 as cu LEFT JOIN users as us ON us.uid = cu.uid WHERE cu.did = "
            r14.append(r15)     // Catch:{ Exception -> 0x0306, all -> 0x00b8 }
            r15 = r13
            long r12 = -r3
            r14.append(r12)     // Catch:{ Exception -> 0x0306, all -> 0x00b8 }
            java.lang.String r12 = " ORDER BY cu.date DESC"
            r14.append(r12)     // Catch:{ Exception -> 0x0306, all -> 0x00b8 }
            java.lang.String r12 = r14.toString()     // Catch:{ Exception -> 0x0306, all -> 0x00b8 }
            java.lang.Object[] r13 = new java.lang.Object[r5]     // Catch:{ Exception -> 0x0306, all -> 0x00b8 }
            org.telegram.SQLite.SQLiteCursor r12 = r0.queryFinalized(r12, r13)     // Catch:{ Exception -> 0x0306, all -> 0x00b8 }
            org.telegram.tgnet.TLRPC$TL_chatParticipants r0 = new org.telegram.tgnet.TLRPC$TL_chatParticipants     // Catch:{ Exception -> 0x0306, all -> 0x00b8 }
            r0.<init>()     // Catch:{ Exception -> 0x0306, all -> 0x00b8 }
            r7.participants = r0     // Catch:{ Exception -> 0x0306, all -> 0x00b8 }
        L_0x00e7:
            boolean r0 = r12.next()     // Catch:{ Exception -> 0x0306, all -> 0x00b8 }
            if (r0 == 0) goto L_0x0174
            org.telegram.tgnet.NativeByteBuffer r0 = r12.byteBufferValue(r5)     // Catch:{ Exception -> 0x0167, all -> 0x00b8 }
            if (r0 == 0) goto L_0x00ff
            int r13 = r0.readInt32(r5)     // Catch:{ Exception -> 0x0167, all -> 0x00b8 }
            org.telegram.tgnet.TLRPC$User r13 = org.telegram.tgnet.TLRPC$User.TLdeserialize(r0, r13, r5)     // Catch:{ Exception -> 0x0167, all -> 0x00b8 }
            r0.reuse()     // Catch:{ Exception -> 0x0167, all -> 0x00b8 }
            goto L_0x0100
        L_0x00ff:
            r13 = 0
        L_0x0100:
            org.telegram.tgnet.NativeByteBuffer r0 = r12.byteBufferValue(r9)     // Catch:{ Exception -> 0x0167, all -> 0x00b8 }
            if (r0 == 0) goto L_0x0112
            int r14 = r0.readInt32(r5)     // Catch:{ Exception -> 0x0167, all -> 0x00b8 }
            org.telegram.tgnet.TLRPC$ChannelParticipant r14 = org.telegram.tgnet.TLRPC$ChannelParticipant.TLdeserialize(r0, r14, r5)     // Catch:{ Exception -> 0x0167, all -> 0x00b8 }
            r0.reuse()     // Catch:{ Exception -> 0x0167, all -> 0x00b8 }
            goto L_0x0113
        L_0x0112:
            r14 = 0
        L_0x0113:
            if (r14 == 0) goto L_0x012e
            r19 = r10
            long r9 = r14.user_id     // Catch:{ Exception -> 0x012c, all -> 0x01d5 }
            org.telegram.messenger.UserConfig r0 = r21.getUserConfig()     // Catch:{ Exception -> 0x012c, all -> 0x01d5 }
            long r2 = r0.clientUserId     // Catch:{ Exception -> 0x012c, all -> 0x01d5 }
            int r0 = (r9 > r2 ? 1 : (r9 == r2 ? 0 : -1))
            if (r0 != 0) goto L_0x0130
            org.telegram.messenger.UserConfig r0 = r21.getUserConfig()     // Catch:{ Exception -> 0x012c, all -> 0x01d5 }
            org.telegram.tgnet.TLRPC$User r13 = r0.getCurrentUser()     // Catch:{ Exception -> 0x012c, all -> 0x01d5 }
            goto L_0x0130
        L_0x012c:
            r0 = move-exception
            goto L_0x016a
        L_0x012e:
            r19 = r10
        L_0x0130:
            if (r13 == 0) goto L_0x016d
            if (r14 == 0) goto L_0x016d
            org.telegram.tgnet.TLRPC$UserStatus r0 = r13.status     // Catch:{ Exception -> 0x012c, all -> 0x01d5 }
            if (r0 == 0) goto L_0x013f
            r2 = 1
            int r3 = r12.intValue(r2)     // Catch:{ Exception -> 0x012c, all -> 0x01d5 }
            r0.expires = r3     // Catch:{ Exception -> 0x012c, all -> 0x01d5 }
        L_0x013f:
            r6.add(r13)     // Catch:{ Exception -> 0x012c, all -> 0x01d5 }
            int r0 = r12.intValue(r8)     // Catch:{ Exception -> 0x012c, all -> 0x01d5 }
            r14.date = r0     // Catch:{ Exception -> 0x012c, all -> 0x01d5 }
            org.telegram.tgnet.TLRPC$TL_chatChannelParticipant r0 = new org.telegram.tgnet.TLRPC$TL_chatChannelParticipant     // Catch:{ Exception -> 0x012c, all -> 0x01d5 }
            r0.<init>()     // Catch:{ Exception -> 0x012c, all -> 0x01d5 }
            org.telegram.tgnet.TLRPC$Peer r2 = r14.peer     // Catch:{ Exception -> 0x012c, all -> 0x01d5 }
            long r2 = org.telegram.messenger.MessageObject.getPeerId(r2)     // Catch:{ Exception -> 0x012c, all -> 0x01d5 }
            r0.user_id = r2     // Catch:{ Exception -> 0x012c, all -> 0x01d5 }
            int r2 = r14.date     // Catch:{ Exception -> 0x012c, all -> 0x01d5 }
            r0.date = r2     // Catch:{ Exception -> 0x012c, all -> 0x01d5 }
            long r2 = r14.inviter_id     // Catch:{ Exception -> 0x012c, all -> 0x01d5 }
            r0.inviter_id = r2     // Catch:{ Exception -> 0x012c, all -> 0x01d5 }
            r0.channelParticipant = r14     // Catch:{ Exception -> 0x012c, all -> 0x01d5 }
            org.telegram.tgnet.TLRPC$ChatParticipants r2 = r7.participants     // Catch:{ Exception -> 0x012c, all -> 0x01d5 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$ChatParticipant> r2 = r2.participants     // Catch:{ Exception -> 0x012c, all -> 0x01d5 }
            r2.add(r0)     // Catch:{ Exception -> 0x012c, all -> 0x01d5 }
            goto L_0x016d
        L_0x0167:
            r0 = move-exception
            r19 = r10
        L_0x016a:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ Exception -> 0x02fd, all -> 0x01d5 }
        L_0x016d:
            r3 = r22
            r10 = r19
            r9 = 2
            goto L_0x00e7
        L_0x0174:
            r19 = r10
            r12.dispose()     // Catch:{ Exception -> 0x02fd, all -> 0x01d5 }
            java.lang.StringBuilder r0 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x02fd, all -> 0x01d5 }
            r0.<init>()     // Catch:{ Exception -> 0x02fd, all -> 0x01d5 }
            r2 = 0
        L_0x017f:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$BotInfo> r3 = r7.bot_info     // Catch:{ Exception -> 0x02fd, all -> 0x01d5 }
            int r3 = r3.size()     // Catch:{ Exception -> 0x02fd, all -> 0x01d5 }
            if (r2 >= r3) goto L_0x01a4
            java.util.ArrayList<org.telegram.tgnet.TLRPC$BotInfo> r3 = r7.bot_info     // Catch:{ Exception -> 0x02fd, all -> 0x01d5 }
            java.lang.Object r3 = r3.get(r2)     // Catch:{ Exception -> 0x02fd, all -> 0x01d5 }
            org.telegram.tgnet.TLRPC$BotInfo r3 = (org.telegram.tgnet.TLRPC$BotInfo) r3     // Catch:{ Exception -> 0x02fd, all -> 0x01d5 }
            int r8 = r0.length()     // Catch:{ Exception -> 0x02fd, all -> 0x01d5 }
            if (r8 == 0) goto L_0x019a
            r8 = r15
            r0.append(r8)     // Catch:{ Exception -> 0x02fd, all -> 0x01d5 }
            goto L_0x019b
        L_0x019a:
            r8 = r15
        L_0x019b:
            long r9 = r3.user_id     // Catch:{ Exception -> 0x02fd, all -> 0x01d5 }
            r0.append(r9)     // Catch:{ Exception -> 0x02fd, all -> 0x01d5 }
            int r2 = r2 + 1
            r15 = r8
            goto L_0x017f
        L_0x01a4:
            int r2 = r0.length()     // Catch:{ Exception -> 0x02fd, all -> 0x01d5 }
            if (r2 == 0) goto L_0x01b4
            java.lang.String r0 = r0.toString()     // Catch:{ Exception -> 0x02fd, all -> 0x01d5 }
            r1.getUsersInternal(r0, r6)     // Catch:{ Exception -> 0x02fd, all -> 0x01d5 }
            goto L_0x01b4
        L_0x01b2:
            r19 = r10
        L_0x01b4:
            r2 = 0
            if (r7 == 0) goto L_0x01db
            long r8 = r7.inviterId     // Catch:{ Exception -> 0x02fd, all -> 0x01d5 }
            int r0 = (r8 > r2 ? 1 : (r8 == r2 ? 0 : -1))
            if (r0 == 0) goto L_0x01db
            java.lang.StringBuilder r0 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x02fd, all -> 0x01d5 }
            r0.<init>()     // Catch:{ Exception -> 0x02fd, all -> 0x01d5 }
            java.lang.String r8 = ""
            r0.append(r8)     // Catch:{ Exception -> 0x02fd, all -> 0x01d5 }
            long r8 = r7.inviterId     // Catch:{ Exception -> 0x02fd, all -> 0x01d5 }
            r0.append(r8)     // Catch:{ Exception -> 0x02fd, all -> 0x01d5 }
            java.lang.String r0 = r0.toString()     // Catch:{ Exception -> 0x02fd, all -> 0x01d5 }
            r1.getUsersInternal(r0, r6)     // Catch:{ Exception -> 0x02fd, all -> 0x01d5 }
            goto L_0x01db
        L_0x01d5:
            r0 = move-exception
            r5 = r7
            r10 = r19
            goto L_0x030c
        L_0x01db:
            org.telegram.messenger.MessagesStorage r0 = r21.getMessagesStorage()     // Catch:{ Exception -> 0x02fd, all -> 0x02f8 }
            org.telegram.SQLite.SQLiteDatabase r0 = r0.getDatabase()     // Catch:{ Exception -> 0x02fd, all -> 0x02f8 }
            java.util.Locale r8 = java.util.Locale.US     // Catch:{ Exception -> 0x02fd, all -> 0x02f8 }
            java.lang.String r9 = "SELECT mid FROM chat_pinned_v2 WHERE uid = %d ORDER BY mid DESC"
            r10 = 1
            java.lang.Object[] r12 = new java.lang.Object[r10]     // Catch:{ Exception -> 0x02fd, all -> 0x02f8 }
            r13 = r22
            long r2 = -r13
            java.lang.Long r10 = java.lang.Long.valueOf(r2)     // Catch:{ Exception -> 0x02fd, all -> 0x02f8 }
            r12[r5] = r10     // Catch:{ Exception -> 0x02fd, all -> 0x02f8 }
            java.lang.String r8 = java.lang.String.format(r8, r9, r12)     // Catch:{ Exception -> 0x02fd, all -> 0x02f8 }
            java.lang.Object[] r9 = new java.lang.Object[r5]     // Catch:{ Exception -> 0x02fd, all -> 0x02f8 }
            org.telegram.SQLite.SQLiteCursor r0 = r0.queryFinalized(r8, r9)     // Catch:{ Exception -> 0x02fd, all -> 0x02f8 }
        L_0x01fd:
            boolean r8 = r0.next()     // Catch:{ Exception -> 0x02fd, all -> 0x02f8 }
            if (r8 == 0) goto L_0x0225
            int r8 = r0.intValue(r5)     // Catch:{ Exception -> 0x0220, all -> 0x021b }
            java.lang.Integer r9 = java.lang.Integer.valueOf(r8)     // Catch:{ Exception -> 0x0220, all -> 0x021b }
            r10 = r19
            r10.add(r9)     // Catch:{ Exception -> 0x0306, all -> 0x00b8 }
            java.lang.Integer r8 = java.lang.Integer.valueOf(r8)     // Catch:{ Exception -> 0x0306, all -> 0x00b8 }
            r4 = 0
            r11.put(r8, r4)     // Catch:{ Exception -> 0x0306, all -> 0x00b8 }
            r19 = r10
            goto L_0x01fd
        L_0x021b:
            r0 = move-exception
            r10 = r19
            goto L_0x00b9
        L_0x0220:
            r0 = move-exception
            r10 = r19
            goto L_0x0307
        L_0x0225:
            r10 = r19
            r0.dispose()     // Catch:{ Exception -> 0x0306, all -> 0x0302 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0306, all -> 0x0302 }
            java.lang.StringBuilder r8 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0306, all -> 0x0302 }
            r8.<init>()     // Catch:{ Exception -> 0x0306, all -> 0x0302 }
            java.lang.String r9 = "SELECT count, end FROM chat_pinned_count WHERE uid = "
            r8.append(r9)     // Catch:{ Exception -> 0x0306, all -> 0x0302 }
            r8.append(r2)     // Catch:{ Exception -> 0x0306, all -> 0x0302 }
            java.lang.String r8 = r8.toString()     // Catch:{ Exception -> 0x0306, all -> 0x0302 }
            java.lang.Object[] r9 = new java.lang.Object[r5]     // Catch:{ Exception -> 0x0306, all -> 0x0302 }
            org.telegram.SQLite.SQLiteCursor r0 = r0.queryFinalized(r8, r9)     // Catch:{ Exception -> 0x0306, all -> 0x0302 }
            boolean r8 = r0.next()     // Catch:{ Exception -> 0x0306, all -> 0x0302 }
            if (r8 == 0) goto L_0x0266
            int r8 = r0.intValue(r5)     // Catch:{ Exception -> 0x0306, all -> 0x00b8 }
            r9 = 1
            int r12 = r0.intValue(r9)     // Catch:{ Exception -> 0x0261, all -> 0x025c }
            if (r12 == 0) goto L_0x0256
            r12 = 1
            goto L_0x0257
        L_0x0256:
            r12 = 0
        L_0x0257:
            r19 = r8
            r20 = r12
            goto L_0x026a
        L_0x025c:
            r0 = move-exception
            r5 = r7
            r12 = r8
            goto L_0x030d
        L_0x0261:
            r0 = move-exception
            r14 = r7
            r12 = r8
            goto L_0x0313
        L_0x0266:
            r19 = 0
            r20 = 0
        L_0x026a:
            r0.dispose()     // Catch:{ Exception -> 0x02f1, all -> 0x02e9 }
            if (r7 == 0) goto L_0x02a1
            int r0 = r7.pinned_msg_id     // Catch:{ Exception -> 0x02f1, all -> 0x029e }
            if (r0 == 0) goto L_0x02a1
            boolean r0 = r10.isEmpty()     // Catch:{ Exception -> 0x02f1, all -> 0x029e }
            if (r0 != 0) goto L_0x0287
            int r0 = r7.pinned_msg_id     // Catch:{ Exception -> 0x02f1, all -> 0x029e }
            java.lang.Object r8 = r10.get(r5)     // Catch:{ Exception -> 0x02f1, all -> 0x029e }
            java.lang.Integer r8 = (java.lang.Integer) r8     // Catch:{ Exception -> 0x02f1, all -> 0x029e }
            int r8 = r8.intValue()     // Catch:{ Exception -> 0x02f1, all -> 0x029e }
            if (r0 <= r8) goto L_0x02a1
        L_0x0287:
            r10.clear()     // Catch:{ Exception -> 0x02f1, all -> 0x029e }
            int r0 = r7.pinned_msg_id     // Catch:{ Exception -> 0x02f1, all -> 0x029e }
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)     // Catch:{ Exception -> 0x02f1, all -> 0x029e }
            r10.add(r0)     // Catch:{ Exception -> 0x02f1, all -> 0x029e }
            int r0 = r7.pinned_msg_id     // Catch:{ Exception -> 0x02f1, all -> 0x029e }
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)     // Catch:{ Exception -> 0x02f1, all -> 0x029e }
            r4 = 0
            r11.put(r0, r4)     // Catch:{ Exception -> 0x02f1, all -> 0x029e }
            goto L_0x02a1
        L_0x029e:
            r0 = move-exception
            r5 = r7
            goto L_0x02ec
        L_0x02a1:
            boolean r0 = r10.isEmpty()     // Catch:{ Exception -> 0x02f1, all -> 0x02e9 }
            if (r0 != 0) goto L_0x02d6
            org.telegram.messenger.MediaDataController r12 = r21.getMediaDataController()     // Catch:{ Exception -> 0x02f1, all -> 0x029e }
            if (r24 == 0) goto L_0x02af
            r15 = r13
            goto L_0x02b1
        L_0x02af:
            r15 = 0
        L_0x02b1:
            r18 = 0
            r13 = r2
            r17 = r10
            java.util.ArrayList r0 = r12.loadPinnedMessages(r13, r15, r17, r18)     // Catch:{ Exception -> 0x02f1, all -> 0x029e }
            if (r0 == 0) goto L_0x02d6
            int r2 = r0.size()     // Catch:{ Exception -> 0x02f1, all -> 0x029e }
        L_0x02c0:
            if (r5 >= r2) goto L_0x02d6
            java.lang.Object r3 = r0.get(r5)     // Catch:{ Exception -> 0x02f1, all -> 0x029e }
            org.telegram.messenger.MessageObject r3 = (org.telegram.messenger.MessageObject) r3     // Catch:{ Exception -> 0x02f1, all -> 0x029e }
            int r4 = r3.getId()     // Catch:{ Exception -> 0x02f1, all -> 0x029e }
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)     // Catch:{ Exception -> 0x02f1, all -> 0x029e }
            r11.put(r4, r3)     // Catch:{ Exception -> 0x02f1, all -> 0x029e }
            int r5 = r5 + 1
            goto L_0x02c0
        L_0x02d6:
            org.telegram.messenger.MessagesController r2 = r21.getMessagesController()
            r0 = 1
            r3 = r22
            r5 = r7
            r14 = r7
            r7 = r0
            r8 = r25
            r9 = r26
            r12 = r19
            r13 = r20
            goto L_0x0323
        L_0x02e9:
            r0 = move-exception
            r14 = r7
            r5 = r14
        L_0x02ec:
            r12 = r19
            r13 = r20
            goto L_0x032a
        L_0x02f1:
            r0 = move-exception
            r14 = r7
            r12 = r19
            r13 = r20
            goto L_0x0314
        L_0x02f8:
            r0 = move-exception
            r14 = r7
            r10 = r19
            goto L_0x0304
        L_0x02fd:
            r0 = move-exception
            r14 = r7
            r10 = r19
            goto L_0x0312
        L_0x0302:
            r0 = move-exception
            r14 = r7
        L_0x0304:
            r5 = r14
            goto L_0x030c
        L_0x0306:
            r0 = move-exception
        L_0x0307:
            r14 = r7
            goto L_0x0312
        L_0x0309:
            r0 = move-exception
            r4 = 0
            r5 = r4
        L_0x030c:
            r12 = 0
        L_0x030d:
            r13 = 0
            goto L_0x032a
        L_0x030f:
            r0 = move-exception
            r4 = 0
            r14 = r4
        L_0x0312:
            r12 = 0
        L_0x0313:
            r13 = 0
        L_0x0314:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ all -> 0x0328 }
            org.telegram.messenger.MessagesController r2 = r21.getMessagesController()
            r7 = 1
            r3 = r22
            r5 = r14
            r8 = r25
            r9 = r26
        L_0x0323:
            r2.processChatInfo(r3, r5, r6, r7, r8, r9, r10, r11, r12, r13)
            r7 = r14
            return r7
        L_0x0328:
            r0 = move-exception
            r5 = r14
        L_0x032a:
            org.telegram.messenger.MessagesController r2 = r21.getMessagesController()
            r7 = 1
            r3 = r22
            r8 = r25
            r9 = r26
            r2.processChatInfo(r3, r5, r6, r7, r8, r9, r10, r11, r12, r13)
            goto L_0x033a
        L_0x0339:
            throw r0
        L_0x033a:
            goto L_0x0339
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.loadChatInfoInternal(long, boolean, boolean, boolean, int):org.telegram.tgnet.TLRPC$ChatFull");
    }

    public TLRPC$ChatFull loadChatInfo(long j, boolean z, CountDownLatch countDownLatch, boolean z2, boolean z3) {
        return loadChatInfo(j, z, countDownLatch, z2, z3, 0);
    }

    public TLRPC$ChatFull loadChatInfo(long j, boolean z, CountDownLatch countDownLatch, boolean z2, boolean z3, int i) {
        TLRPC$ChatFull[] tLRPC$ChatFullArr = new TLRPC$ChatFull[1];
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda198(this, tLRPC$ChatFullArr, j, z, z2, z3, i, countDownLatch));
        if (countDownLatch != null) {
            try {
                countDownLatch.await();
            } catch (Throwable unused) {
            }
        }
        return tLRPC$ChatFullArr[0];
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$loadChatInfo$113(TLRPC$ChatFull[] tLRPC$ChatFullArr, long j, boolean z, boolean z2, boolean z3, int i, CountDownLatch countDownLatch) {
        tLRPC$ChatFullArr[0] = loadChatInfoInternal(j, z, z2, z3, i);
        if (countDownLatch != null) {
            countDownLatch.countDown();
        }
    }

    public void processPendingRead(long j, int i, int i2, int i3) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda71(this, j, i, i3, this.lastSavedDate, i2));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$processPendingRead$114(long j, int i, int i2, int i3, int i4) {
        int i5;
        int i6;
        int i7;
        long j2 = j;
        int i8 = i4;
        long j3 = 0;
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            int i9 = 0;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT unread_count, inbox_max, last_mid FROM dialogs WHERE did = " + j2, new Object[0]);
            if (queryFinalized.next()) {
                i7 = queryFinalized.intValue(0);
                i6 = i7;
                i5 = queryFinalized.intValue(1);
                j3 = queryFinalized.longValue(2);
            } else {
                i7 = 0;
                i6 = 0;
                i5 = 0;
            }
            queryFinalized.dispose();
            this.database.beginTransaction();
            if (!DialogObject.isEncryptedDialog(j)) {
                i8 = Math.max(i5, i);
                SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages_v2 SET read_state = read_state | 1 WHERE uid = ? AND mid <= ? AND read_state IN(0,2) AND out = 0");
                executeFast.requery();
                executeFast.bindLong(1, j2);
                executeFast.bindInteger(2, i8);
                executeFast.step();
                executeFast.dispose();
                if (((long) i8) < j3) {
                    SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT changes()", new Object[0]);
                    int intValue = queryFinalized2.next() ? queryFinalized2.intValue(0) + i2 : 0;
                    queryFinalized2.dispose();
                    i9 = Math.max(0, i7 - intValue);
                }
                SQLitePreparedStatement executeFast2 = this.database.executeFast("DELETE FROM unread_push_messages WHERE uid = ? AND mid <= ?");
                executeFast2.requery();
                executeFast2.bindLong(1, j2);
                executeFast2.bindInteger(2, i8);
                executeFast2.step();
                executeFast2.dispose();
                SQLitePreparedStatement executeFast3 = this.database.executeFast("DELETE FROM unread_push_messages WHERE uid = ? AND date <= ?");
                executeFast3.requery();
                executeFast3.bindLong(1, j2);
                executeFast3.bindInteger(2, i3);
                executeFast3.step();
                executeFast3.dispose();
            } else {
                SQLitePreparedStatement executeFast4 = this.database.executeFast("UPDATE messages_v2 SET read_state = read_state | 1 WHERE uid = ? AND mid >= ? AND read_state IN(0,2) AND out = 0");
                executeFast4.requery();
                executeFast4.bindLong(1, j2);
                executeFast4.bindInteger(2, i8);
                executeFast4.step();
                executeFast4.dispose();
                if (((long) i8) > j3) {
                    SQLiteCursor queryFinalized3 = this.database.queryFinalized("SELECT changes()", new Object[0]);
                    int intValue2 = queryFinalized3.next() ? queryFinalized3.intValue(0) + i2 : 0;
                    queryFinalized3.dispose();
                    i9 = Math.max(0, i7 - intValue2);
                }
            }
            SQLitePreparedStatement executeFast5 = this.database.executeFast("UPDATE dialogs SET unread_count = ?, inbox_max = ? WHERE did = ?");
            executeFast5.requery();
            executeFast5.bindInteger(1, i9);
            executeFast5.bindInteger(2, i8);
            executeFast5.bindLong(3, j2);
            executeFast5.step();
            executeFast5.dispose();
            this.database.commitTransaction();
            if (i6 != 0 && i9 == 0) {
                LongSparseIntArray longSparseIntArray = new LongSparseIntArray();
                longSparseIntArray.put(j2, i9);
                updateFiltersReadCounter(longSparseIntArray, (LongSparseIntArray) null, true);
            }
            updateWidgets(j);
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void putContacts(ArrayList<TLRPC$TL_contact> arrayList, boolean z) {
        if (!arrayList.isEmpty() || z) {
            this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda194(this, z, new ArrayList(arrayList)));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$putContacts$115(boolean z, ArrayList arrayList) {
        if (z) {
            try {
                this.database.executeFast("DELETE FROM contacts WHERE 1").stepThis().dispose();
            } catch (Exception e) {
                FileLog.e((Throwable) e);
                return;
            }
        }
        this.database.beginTransaction();
        SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO contacts VALUES(?, ?)");
        for (int i = 0; i < arrayList.size(); i++) {
            TLRPC$TL_contact tLRPC$TL_contact = (TLRPC$TL_contact) arrayList.get(i);
            executeFast.requery();
            int i2 = 1;
            executeFast.bindLong(1, tLRPC$TL_contact.user_id);
            if (!tLRPC$TL_contact.mutual) {
                i2 = 0;
            }
            executeFast.bindInteger(2, i2);
            executeFast.step();
        }
        executeFast.dispose();
        this.database.commitTransaction();
    }

    public void deleteContacts(ArrayList<Long> arrayList) {
        if (arrayList != null && !arrayList.isEmpty()) {
            this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda129(this, arrayList));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteContacts$116(ArrayList arrayList) {
        try {
            String join = TextUtils.join(",", arrayList);
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM contacts WHERE uid IN(" + join + ")").stepThis().dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void applyPhoneBookUpdates(String str, String str2) {
        if (!TextUtils.isEmpty(str)) {
            this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda124(this, str, str2));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$applyPhoneBookUpdates$117(String str, String str2) {
        try {
            if (str.length() != 0) {
                this.database.executeFast(String.format(Locale.US, "UPDATE user_phones_v7 SET deleted = 0 WHERE sphone IN(%s)", new Object[]{str})).stepThis().dispose();
            }
            if (str2.length() != 0) {
                this.database.executeFast(String.format(Locale.US, "UPDATE user_phones_v7 SET deleted = 1 WHERE sphone IN(%s)", new Object[]{str2})).stepThis().dispose();
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void putCachedPhoneBook(HashMap<String, ContactsController.Contact> hashMap, boolean z, boolean z2) {
        if (hashMap == null) {
            return;
        }
        if (!hashMap.isEmpty() || z || z2) {
            this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda150(this, hashMap, z));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$putCachedPhoneBook$118(HashMap hashMap, boolean z) {
        try {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d(this.currentAccount + " save contacts to db " + hashMap.size());
            }
            this.database.executeFast("DELETE FROM user_contacts_v7 WHERE 1").stepThis().dispose();
            this.database.executeFast("DELETE FROM user_phones_v7 WHERE 1").stepThis().dispose();
            this.database.beginTransaction();
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO user_contacts_v7 VALUES(?, ?, ?, ?, ?)");
            SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO user_phones_v7 VALUES(?, ?, ?, ?)");
            Iterator it = hashMap.entrySet().iterator();
            while (true) {
                if (!it.hasNext()) {
                    break;
                }
                ContactsController.Contact contact = (ContactsController.Contact) ((Map.Entry) it.next()).getValue();
                if (!contact.phones.isEmpty()) {
                    if (!contact.shortPhones.isEmpty()) {
                        executeFast.requery();
                        executeFast.bindString(1, contact.key);
                        executeFast.bindInteger(2, contact.contact_id);
                        executeFast.bindString(3, contact.first_name);
                        executeFast.bindString(4, contact.last_name);
                        executeFast.bindInteger(5, contact.imported);
                        executeFast.step();
                        for (int i = 0; i < contact.phones.size(); i++) {
                            executeFast2.requery();
                            executeFast2.bindString(1, contact.key);
                            executeFast2.bindString(2, contact.phones.get(i));
                            executeFast2.bindString(3, contact.shortPhones.get(i));
                            executeFast2.bindInteger(4, contact.phoneDeleted.get(i).intValue());
                            executeFast2.step();
                        }
                    }
                }
            }
            executeFast.dispose();
            executeFast2.dispose();
            this.database.commitTransaction();
            if (z) {
                this.database.executeFast("DROP TABLE IF EXISTS user_contacts_v6;").stepThis().dispose();
                this.database.executeFast("DROP TABLE IF EXISTS user_phones_v6;").stepThis().dispose();
                getCachedPhoneBook(false);
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void getCachedPhoneBook(boolean z) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda187(this, z));
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Code restructure failed: missing block: B:78:0x013a, code lost:
        if (r10 == null) goto L_0x013d;
     */
    /* JADX WARNING: Removed duplicated region for block: B:55:0x00e6  */
    /* JADX WARNING: Removed duplicated region for block: B:59:0x00f9 A[Catch:{ all -> 0x0132 }] */
    /* JADX WARNING: Removed duplicated region for block: B:71:0x012a  */
    /* JADX WARNING: Removed duplicated region for block: B:81:0x0144 A[SYNTHETIC, Splitter:B:81:0x0144] */
    /* JADX WARNING: Removed duplicated region for block: B:83:0x015e A[Catch:{ Exception -> 0x01f0, all -> 0x01ee }] */
    /* JADX WARNING: Removed duplicated region for block: B:87:0x016f A[Catch:{ Exception -> 0x01f0, all -> 0x01ee }] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$getCachedPhoneBook$119(boolean r25) {
        /*
            r24 = this;
            r1 = r24
            java.lang.String r2 = ""
            r3 = 6
            r4 = 3
            r5 = 2
            r6 = 5
            r7 = 4
            r9 = 1
            r11 = 8
            r12 = 5000(0x1388, float:7.006E-42)
            r13 = 0
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ all -> 0x00df }
            java.lang.String r14 = "SELECT name FROM sqlite_master WHERE type='table' AND name='user_contacts_v6'"
            java.lang.Object[] r15 = new java.lang.Object[r13]     // Catch:{ all -> 0x00df }
            org.telegram.SQLite.SQLiteCursor r14 = r0.queryFinalized(r14, r15)     // Catch:{ all -> 0x00df }
            boolean r0 = r14.next()     // Catch:{ all -> 0x00dc }
            r14.dispose()     // Catch:{ all -> 0x00dc }
            if (r0 == 0) goto L_0x00da
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ all -> 0x00df }
            java.lang.String r14 = "SELECT COUNT(uid) FROM user_contacts_v6 WHERE 1"
            java.lang.Object[] r15 = new java.lang.Object[r13]     // Catch:{ all -> 0x00df }
            org.telegram.SQLite.SQLiteCursor r14 = r0.queryFinalized(r14, r15)     // Catch:{ all -> 0x00df }
            boolean r0 = r14.next()     // Catch:{ all -> 0x00dc }
            if (r0 == 0) goto L_0x003b
            int r0 = r14.intValue(r13)     // Catch:{ all -> 0x00dc }
            int r0 = java.lang.Math.min(r12, r0)     // Catch:{ all -> 0x00dc }
            goto L_0x003d
        L_0x003b:
            r0 = 16
        L_0x003d:
            r14.dispose()     // Catch:{ all -> 0x00dc }
            android.util.SparseArray r15 = new android.util.SparseArray     // Catch:{ all -> 0x00dc }
            r15.<init>(r0)     // Catch:{ all -> 0x00dc }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ all -> 0x00dc }
            java.lang.String r8 = "SELECT us.uid, us.fname, us.sname, up.phone, up.sphone, up.deleted, us.imported FROM user_contacts_v6 as us LEFT JOIN user_phones_v6 as up ON us.uid = up.uid WHERE 1"
            java.lang.Object[] r10 = new java.lang.Object[r13]     // Catch:{ all -> 0x00dc }
            org.telegram.SQLite.SQLiteCursor r8 = r0.queryFinalized(r8, r10)     // Catch:{ all -> 0x00dc }
        L_0x004f:
            boolean r0 = r8.next()     // Catch:{ all -> 0x00d7 }
            if (r0 == 0) goto L_0x00cc
            int r0 = r8.intValue(r13)     // Catch:{ all -> 0x00d7 }
            java.lang.Object r10 = r15.get(r0)     // Catch:{ all -> 0x00d7 }
            org.telegram.messenger.ContactsController$Contact r10 = (org.telegram.messenger.ContactsController.Contact) r10     // Catch:{ all -> 0x00d7 }
            if (r10 != 0) goto L_0x0089
            org.telegram.messenger.ContactsController$Contact r10 = new org.telegram.messenger.ContactsController$Contact     // Catch:{ all -> 0x00d7 }
            r10.<init>()     // Catch:{ all -> 0x00d7 }
            java.lang.String r14 = r8.stringValue(r9)     // Catch:{ all -> 0x00d7 }
            r10.first_name = r14     // Catch:{ all -> 0x00d7 }
            java.lang.String r14 = r8.stringValue(r5)     // Catch:{ all -> 0x00d7 }
            r10.last_name = r14     // Catch:{ all -> 0x00d7 }
            int r14 = r8.intValue(r3)     // Catch:{ all -> 0x00d7 }
            r10.imported = r14     // Catch:{ all -> 0x00d7 }
            java.lang.String r14 = r10.first_name     // Catch:{ all -> 0x00d7 }
            if (r14 != 0) goto L_0x007e
            r10.first_name = r2     // Catch:{ all -> 0x00d7 }
        L_0x007e:
            java.lang.String r14 = r10.last_name     // Catch:{ all -> 0x00d7 }
            if (r14 != 0) goto L_0x0084
            r10.last_name = r2     // Catch:{ all -> 0x00d7 }
        L_0x0084:
            r10.contact_id = r0     // Catch:{ all -> 0x00d7 }
            r15.put(r0, r10)     // Catch:{ all -> 0x00d7 }
        L_0x0089:
            java.lang.String r0 = r8.stringValue(r4)     // Catch:{ all -> 0x00d7 }
            if (r0 != 0) goto L_0x0090
            goto L_0x004f
        L_0x0090:
            java.util.ArrayList<java.lang.String> r14 = r10.phones     // Catch:{ all -> 0x00d7 }
            r14.add(r0)     // Catch:{ all -> 0x00d7 }
            java.lang.String r14 = r8.stringValue(r7)     // Catch:{ all -> 0x00d7 }
            if (r14 != 0) goto L_0x009c
            goto L_0x004f
        L_0x009c:
            int r3 = r14.length()     // Catch:{ all -> 0x00d7 }
            if (r3 != r11) goto L_0x00ac
            int r3 = r0.length()     // Catch:{ all -> 0x00d7 }
            if (r3 == r11) goto L_0x00ac
            java.lang.String r14 = org.telegram.PhoneFormat.PhoneFormat.stripExceptNumbers(r0)     // Catch:{ all -> 0x00d7 }
        L_0x00ac:
            java.util.ArrayList<java.lang.String> r0 = r10.shortPhones     // Catch:{ all -> 0x00d7 }
            r0.add(r14)     // Catch:{ all -> 0x00d7 }
            java.util.ArrayList<java.lang.Integer> r0 = r10.phoneDeleted     // Catch:{ all -> 0x00d7 }
            int r3 = r8.intValue(r6)     // Catch:{ all -> 0x00d7 }
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)     // Catch:{ all -> 0x00d7 }
            r0.add(r3)     // Catch:{ all -> 0x00d7 }
            java.util.ArrayList<java.lang.String> r0 = r10.phoneTypes     // Catch:{ all -> 0x00d7 }
            r0.add(r2)     // Catch:{ all -> 0x00d7 }
            int r0 = r15.size()     // Catch:{ all -> 0x00d7 }
            if (r0 != r12) goto L_0x00ca
            goto L_0x00cc
        L_0x00ca:
            r3 = 6
            goto L_0x004f
        L_0x00cc:
            r8.dispose()     // Catch:{ all -> 0x00d7 }
            org.telegram.messenger.ContactsController r0 = r24.getContactsController()     // Catch:{ all -> 0x00df }
            r0.migratePhoneBookToV7(r15)     // Catch:{ all -> 0x00df }
            return
        L_0x00d7:
            r0 = move-exception
            r10 = r8
            goto L_0x00e1
        L_0x00da:
            r10 = 0
            goto L_0x00e9
        L_0x00dc:
            r0 = move-exception
            r10 = r14
            goto L_0x00e1
        L_0x00df:
            r0 = move-exception
            r10 = 0
        L_0x00e1:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ all -> 0x0220 }
            if (r10 == 0) goto L_0x00e9
            r10.dispose()
        L_0x00e9:
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ all -> 0x0132 }
            java.lang.String r3 = "SELECT COUNT(key) FROM user_contacts_v7 WHERE 1"
            java.lang.Object[] r8 = new java.lang.Object[r13]     // Catch:{ all -> 0x0132 }
            org.telegram.SQLite.SQLiteCursor r10 = r0.queryFinalized(r3, r8)     // Catch:{ all -> 0x0132 }
            boolean r0 = r10.next()     // Catch:{ all -> 0x0132 }
            if (r0 == 0) goto L_0x012a
            int r3 = r10.intValue(r13)     // Catch:{ all -> 0x0132 }
            int r8 = java.lang.Math.min(r12, r3)     // Catch:{ all -> 0x0128 }
            if (r3 <= r12) goto L_0x0107
            int r0 = r3 + -5000
            r14 = r0
            goto L_0x0108
        L_0x0107:
            r14 = 0
        L_0x0108:
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED     // Catch:{ all -> 0x0126 }
            if (r0 == 0) goto L_0x012e
            java.lang.StringBuilder r0 = new java.lang.StringBuilder     // Catch:{ all -> 0x0126 }
            r0.<init>()     // Catch:{ all -> 0x0126 }
            int r15 = r1.currentAccount     // Catch:{ all -> 0x0126 }
            r0.append(r15)     // Catch:{ all -> 0x0126 }
            java.lang.String r15 = " current cached contacts count = "
            r0.append(r15)     // Catch:{ all -> 0x0126 }
            r0.append(r3)     // Catch:{ all -> 0x0126 }
            java.lang.String r0 = r0.toString()     // Catch:{ all -> 0x0126 }
            org.telegram.messenger.FileLog.d(r0)     // Catch:{ all -> 0x0126 }
            goto L_0x012e
        L_0x0126:
            r0 = move-exception
            goto L_0x0137
        L_0x0128:
            r0 = move-exception
            goto L_0x0134
        L_0x012a:
            r3 = 0
            r8 = 16
            r14 = 0
        L_0x012e:
            r10.dispose()
            goto L_0x013d
        L_0x0132:
            r0 = move-exception
            r3 = 0
        L_0x0134:
            r8 = 16
            r14 = 0
        L_0x0137:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ all -> 0x0218 }
            if (r10 == 0) goto L_0x013d
            goto L_0x012e
        L_0x013d:
            java.util.HashMap r15 = new java.util.HashMap
            r15.<init>(r8)
            if (r14 == 0) goto L_0x015e
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x01f0 }
            java.lang.StringBuilder r8 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x01f0 }
            r8.<init>()     // Catch:{ Exception -> 0x01f0 }
            java.lang.String r14 = "SELECT us.key, us.uid, us.fname, us.sname, up.phone, up.sphone, up.deleted, us.imported FROM user_contacts_v7 as us LEFT JOIN user_phones_v7 as up ON us.key = up.key WHERE 1 LIMIT 0,"
            r8.append(r14)     // Catch:{ Exception -> 0x01f0 }
            r8.append(r3)     // Catch:{ Exception -> 0x01f0 }
            java.lang.String r3 = r8.toString()     // Catch:{ Exception -> 0x01f0 }
            java.lang.Object[] r8 = new java.lang.Object[r13]     // Catch:{ Exception -> 0x01f0 }
            org.telegram.SQLite.SQLiteCursor r0 = r0.queryFinalized(r3, r8)     // Catch:{ Exception -> 0x01f0 }
            goto L_0x0168
        L_0x015e:
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x01f0 }
            java.lang.String r3 = "SELECT us.key, us.uid, us.fname, us.sname, up.phone, up.sphone, up.deleted, us.imported FROM user_contacts_v7 as us LEFT JOIN user_phones_v7 as up ON us.key = up.key WHERE 1"
            java.lang.Object[] r8 = new java.lang.Object[r13]     // Catch:{ Exception -> 0x01f0 }
            org.telegram.SQLite.SQLiteCursor r0 = r0.queryFinalized(r3, r8)     // Catch:{ Exception -> 0x01f0 }
        L_0x0168:
            r10 = r0
        L_0x0169:
            boolean r0 = r10.next()     // Catch:{ Exception -> 0x01f0 }
            if (r0 == 0) goto L_0x01ea
            java.lang.String r0 = r10.stringValue(r13)     // Catch:{ Exception -> 0x01f0 }
            java.lang.Object r3 = r15.get(r0)     // Catch:{ Exception -> 0x01f0 }
            org.telegram.messenger.ContactsController$Contact r3 = (org.telegram.messenger.ContactsController.Contact) r3     // Catch:{ Exception -> 0x01f0 }
            if (r3 != 0) goto L_0x01a8
            org.telegram.messenger.ContactsController$Contact r3 = new org.telegram.messenger.ContactsController$Contact     // Catch:{ Exception -> 0x01f0 }
            r3.<init>()     // Catch:{ Exception -> 0x01f0 }
            int r8 = r10.intValue(r9)     // Catch:{ Exception -> 0x01f0 }
            r3.contact_id = r8     // Catch:{ Exception -> 0x01f0 }
            java.lang.String r8 = r10.stringValue(r5)     // Catch:{ Exception -> 0x01f0 }
            r3.first_name = r8     // Catch:{ Exception -> 0x01f0 }
            java.lang.String r8 = r10.stringValue(r4)     // Catch:{ Exception -> 0x01f0 }
            r3.last_name = r8     // Catch:{ Exception -> 0x01f0 }
            r8 = 7
            int r8 = r10.intValue(r8)     // Catch:{ Exception -> 0x01f0 }
            r3.imported = r8     // Catch:{ Exception -> 0x01f0 }
            java.lang.String r8 = r3.first_name     // Catch:{ Exception -> 0x01f0 }
            if (r8 != 0) goto L_0x019f
            r3.first_name = r2     // Catch:{ Exception -> 0x01f0 }
        L_0x019f:
            java.lang.String r8 = r3.last_name     // Catch:{ Exception -> 0x01f0 }
            if (r8 != 0) goto L_0x01a5
            r3.last_name = r2     // Catch:{ Exception -> 0x01f0 }
        L_0x01a5:
            r15.put(r0, r3)     // Catch:{ Exception -> 0x01f0 }
        L_0x01a8:
            java.lang.String r0 = r10.stringValue(r7)     // Catch:{ Exception -> 0x01f0 }
            if (r0 != 0) goto L_0x01b0
        L_0x01ae:
            r8 = 6
            goto L_0x0169
        L_0x01b0:
            java.util.ArrayList<java.lang.String> r8 = r3.phones     // Catch:{ Exception -> 0x01f0 }
            r8.add(r0)     // Catch:{ Exception -> 0x01f0 }
            java.lang.String r8 = r10.stringValue(r6)     // Catch:{ Exception -> 0x01f0 }
            if (r8 != 0) goto L_0x01bc
            goto L_0x01ae
        L_0x01bc:
            int r14 = r8.length()     // Catch:{ Exception -> 0x01f0 }
            if (r14 != r11) goto L_0x01cc
            int r14 = r0.length()     // Catch:{ Exception -> 0x01f0 }
            if (r14 == r11) goto L_0x01cc
            java.lang.String r8 = org.telegram.PhoneFormat.PhoneFormat.stripExceptNumbers(r0)     // Catch:{ Exception -> 0x01f0 }
        L_0x01cc:
            java.util.ArrayList<java.lang.String> r0 = r3.shortPhones     // Catch:{ Exception -> 0x01f0 }
            r0.add(r8)     // Catch:{ Exception -> 0x01f0 }
            java.util.ArrayList<java.lang.Integer> r0 = r3.phoneDeleted     // Catch:{ Exception -> 0x01f0 }
            r8 = 6
            int r14 = r10.intValue(r8)     // Catch:{ Exception -> 0x01f0 }
            java.lang.Integer r14 = java.lang.Integer.valueOf(r14)     // Catch:{ Exception -> 0x01f0 }
            r0.add(r14)     // Catch:{ Exception -> 0x01f0 }
            java.util.ArrayList<java.lang.String> r0 = r3.phoneTypes     // Catch:{ Exception -> 0x01f0 }
            r0.add(r2)     // Catch:{ Exception -> 0x01f0 }
            int r0 = r15.size()     // Catch:{ Exception -> 0x01f0 }
            if (r0 != r12) goto L_0x0169
        L_0x01ea:
            r10.dispose()     // Catch:{ Exception -> 0x01f0 }
            goto L_0x01fc
        L_0x01ee:
            r0 = move-exception
            goto L_0x0212
        L_0x01f0:
            r0 = move-exception
            r15.clear()     // Catch:{ all -> 0x01ee }
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ all -> 0x01ee }
            if (r10 == 0) goto L_0x01fc
            r10.dispose()
        L_0x01fc:
            org.telegram.messenger.ContactsController r16 = r24.getContactsController()
            r18 = 1
            r19 = 1
            r20 = 0
            r21 = 0
            r22 = r25 ^ 1
            r23 = 0
            r17 = r15
            r16.performSyncPhoneBook(r17, r18, r19, r20, r21, r22, r23)
            return
        L_0x0212:
            if (r10 == 0) goto L_0x0217
            r10.dispose()
        L_0x0217:
            throw r0
        L_0x0218:
            r0 = move-exception
            r2 = r0
            if (r10 == 0) goto L_0x021f
            r10.dispose()
        L_0x021f:
            throw r2
        L_0x0220:
            r0 = move-exception
            r2 = r0
            if (r10 == 0) goto L_0x0227
            r10.dispose()
        L_0x0227:
            goto L_0x0229
        L_0x0228:
            throw r2
        L_0x0229:
            goto L_0x0228
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$getCachedPhoneBook$119(boolean):void");
    }

    public void getContacts() {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda15(this));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getContacts$120() {
        ArrayList arrayList = new ArrayList();
        ArrayList arrayList2 = new ArrayList();
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT * FROM contacts WHERE 1", new Object[0]);
            StringBuilder sb = new StringBuilder();
            while (queryFinalized.next()) {
                TLRPC$TL_contact tLRPC$TL_contact = new TLRPC$TL_contact();
                tLRPC$TL_contact.user_id = (long) queryFinalized.intValue(0);
                tLRPC$TL_contact.mutual = queryFinalized.intValue(1) == 1;
                if (sb.length() != 0) {
                    sb.append(",");
                }
                arrayList.add(tLRPC$TL_contact);
                sb.append(tLRPC$TL_contact.user_id);
            }
            queryFinalized.dispose();
            if (sb.length() != 0) {
                getUsersInternal(sb.toString(), arrayList2);
            }
        } catch (Exception e) {
            arrayList.clear();
            arrayList2.clear();
            FileLog.e((Throwable) e);
        }
        getContactsController().processLoadedContacts(arrayList, arrayList2, 1);
    }

    public void getUnsentMessages(int i) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda30(this, i));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getUnsentMessages$121(int i) {
        int i2;
        try {
            SparseArray sparseArray = new SparseArray();
            ArrayList arrayList = new ArrayList();
            ArrayList arrayList2 = new ArrayList();
            ArrayList arrayList3 = new ArrayList();
            ArrayList arrayList4 = new ArrayList();
            ArrayList arrayList5 = new ArrayList();
            ArrayList arrayList6 = new ArrayList();
            ArrayList arrayList7 = new ArrayList();
            ArrayList arrayList8 = new ArrayList();
            SQLiteDatabase sQLiteDatabase = this.database;
            boolean z = false;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.uid, s.seq_in, s.seq_out, m.ttl FROM messages_v2 as m LEFT JOIN randoms_v2 as r ON r.mid = m.mid AND r.uid = m.uid LEFT JOIN messages_seq as s ON m.mid = s.mid WHERE (m.mid < 0 AND m.send_state = 1) OR (m.mid > 0 AND m.send_state = 3) ORDER BY m.mid DESC LIMIT " + i, new Object[0]);
            while (true) {
                i2 = 1;
                if (!queryFinalized.next()) {
                    break;
                }
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(1);
                if (byteBufferValue != null) {
                    TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(z), z);
                    TLdeserialize.send_state = queryFinalized.intValue(2);
                    TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                    byteBufferValue.reuse();
                    if (sparseArray.indexOfKey(TLdeserialize.id) < 0) {
                        MessageObject.setUnreadFlags(TLdeserialize, queryFinalized.intValue(0));
                        TLdeserialize.id = queryFinalized.intValue(3);
                        TLdeserialize.date = queryFinalized.intValue(4);
                        if (!queryFinalized.isNull(5)) {
                            TLdeserialize.random_id = queryFinalized.longValue(5);
                        }
                        TLdeserialize.dialog_id = queryFinalized.longValue(6);
                        TLdeserialize.seq_in = queryFinalized.intValue(7);
                        TLdeserialize.seq_out = queryFinalized.intValue(8);
                        TLdeserialize.ttl = queryFinalized.intValue(9);
                        arrayList.add(TLdeserialize);
                        sparseArray.put(TLdeserialize.id, TLdeserialize);
                        if (DialogObject.isEncryptedDialog(TLdeserialize.dialog_id)) {
                            int encryptedChatId = DialogObject.getEncryptedChatId(TLdeserialize.dialog_id);
                            if (!arrayList8.contains(Integer.valueOf(encryptedChatId))) {
                                arrayList8.add(Integer.valueOf(encryptedChatId));
                            }
                        } else if (DialogObject.isUserDialog(TLdeserialize.dialog_id)) {
                            if (!arrayList6.contains(Long.valueOf(TLdeserialize.dialog_id))) {
                                arrayList6.add(Long.valueOf(TLdeserialize.dialog_id));
                            }
                        } else if (!arrayList7.contains(Long.valueOf(-TLdeserialize.dialog_id))) {
                            arrayList7.add(Long.valueOf(-TLdeserialize.dialog_id));
                        }
                        addUsersAndChatsFromMessage(TLdeserialize, arrayList6, arrayList7);
                        if (TLdeserialize.send_state != 3 && ((TLdeserialize.peer_id.channel_id == 0 && !MessageObject.isUnread(TLdeserialize) && !DialogObject.isEncryptedDialog(TLdeserialize.dialog_id)) || TLdeserialize.id > 0)) {
                            TLdeserialize.send_state = 0;
                        }
                    }
                }
                z = false;
            }
            queryFinalized.dispose();
            boolean z2 = false;
            SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT m.data, m.send_state, m.mid, m.date, r.random_id, m.uid, m.ttl FROM scheduled_messages_v2 as m LEFT JOIN randoms_v2 as r ON r.mid = m.mid AND r.uid = m.uid WHERE (m.mid < 0 AND m.send_state = 1) OR (m.mid > 0 AND m.send_state = 3) ORDER BY date ASC", new Object[0]);
            while (queryFinalized2.next()) {
                NativeByteBuffer byteBufferValue2 = queryFinalized2.byteBufferValue(z2 ? 1 : 0);
                if (byteBufferValue2 != null) {
                    TLRPC$Message TLdeserialize2 = TLRPC$Message.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(z2), z2);
                    TLdeserialize2.send_state = queryFinalized2.intValue(i2);
                    TLdeserialize2.readAttachPath(byteBufferValue2, getUserConfig().clientUserId);
                    byteBufferValue2.reuse();
                    if (sparseArray.indexOfKey(TLdeserialize2.id) < 0) {
                        TLdeserialize2.id = queryFinalized2.intValue(2);
                        TLdeserialize2.date = queryFinalized2.intValue(3);
                        if (!queryFinalized2.isNull(4)) {
                            TLdeserialize2.random_id = queryFinalized2.longValue(4);
                        }
                        TLdeserialize2.dialog_id = queryFinalized2.longValue(5);
                        TLdeserialize2.ttl = queryFinalized2.intValue(6);
                        arrayList2.add(TLdeserialize2);
                        sparseArray.put(TLdeserialize2.id, TLdeserialize2);
                        if (DialogObject.isEncryptedDialog(TLdeserialize2.dialog_id)) {
                            int encryptedChatId2 = DialogObject.getEncryptedChatId(TLdeserialize2.dialog_id);
                            if (!arrayList8.contains(Integer.valueOf(encryptedChatId2))) {
                                arrayList8.add(Integer.valueOf(encryptedChatId2));
                            }
                        } else if (DialogObject.isUserDialog(TLdeserialize2.dialog_id)) {
                            if (!arrayList6.contains(Long.valueOf(TLdeserialize2.dialog_id))) {
                                arrayList6.add(Long.valueOf(TLdeserialize2.dialog_id));
                            }
                        } else if (!arrayList7.contains(Long.valueOf(-TLdeserialize2.dialog_id))) {
                            arrayList7.add(Long.valueOf(-TLdeserialize2.dialog_id));
                        }
                        addUsersAndChatsFromMessage(TLdeserialize2, arrayList6, arrayList7);
                        if (TLdeserialize2.send_state != 3) {
                            if ((TLdeserialize2.peer_id.channel_id != 0 || MessageObject.isUnread(TLdeserialize2) || DialogObject.isEncryptedDialog(TLdeserialize2.dialog_id)) && TLdeserialize2.id <= 0) {
                                z2 = false;
                                i2 = 1;
                            } else {
                                TLdeserialize2.send_state = 0;
                                z2 = false;
                                i2 = 1;
                            }
                        }
                    }
                }
                z2 = false;
                i2 = 1;
            }
            queryFinalized2.dispose();
            if (!arrayList8.isEmpty()) {
                getEncryptedChatsInternal(TextUtils.join(",", arrayList8), arrayList5, arrayList6);
            }
            if (!arrayList6.isEmpty()) {
                getUsersInternal(TextUtils.join(",", arrayList6), arrayList3);
            }
            if (!arrayList7.isEmpty()) {
                StringBuilder sb = new StringBuilder();
                for (int i3 = 0; i3 < arrayList7.size(); i3++) {
                    Long l = (Long) arrayList7.get(i3);
                    if (sb.length() != 0) {
                        sb.append(",");
                    }
                    sb.append(l);
                }
                getChatsInternal(sb.toString(), arrayList4);
            }
            getSendMessagesHelper().processUnsentMessages(arrayList, arrayList2, arrayList3, arrayList4, arrayList5);
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public boolean checkMessageByRandomId(long j) {
        boolean[] zArr = new boolean[1];
        CountDownLatch countDownLatch = new CountDownLatch(1);
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda115(this, j, zArr, countDownLatch));
        try {
            countDownLatch.await();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        return zArr[0];
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Code restructure failed: missing block: B:9:0x002a, code lost:
        if (r0 == null) goto L_0x002f;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$checkMessageByRandomId$122(long r7, boolean[] r9, java.util.concurrent.CountDownLatch r10) {
        /*
            r6 = this;
            r0 = 0
            org.telegram.SQLite.SQLiteDatabase r1 = r6.database     // Catch:{ Exception -> 0x0026 }
            java.util.Locale r2 = java.util.Locale.US     // Catch:{ Exception -> 0x0026 }
            java.lang.String r3 = "SELECT random_id FROM randoms_v2 WHERE random_id = %d"
            r4 = 1
            java.lang.Object[] r5 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x0026 }
            java.lang.Long r7 = java.lang.Long.valueOf(r7)     // Catch:{ Exception -> 0x0026 }
            r8 = 0
            r5[r8] = r7     // Catch:{ Exception -> 0x0026 }
            java.lang.String r7 = java.lang.String.format(r2, r3, r5)     // Catch:{ Exception -> 0x0026 }
            java.lang.Object[] r2 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x0026 }
            org.telegram.SQLite.SQLiteCursor r0 = r1.queryFinalized(r7, r2)     // Catch:{ Exception -> 0x0026 }
            boolean r7 = r0.next()     // Catch:{ Exception -> 0x0026 }
            if (r7 == 0) goto L_0x002c
            r9[r8] = r4     // Catch:{ Exception -> 0x0026 }
            goto L_0x002c
        L_0x0024:
            r7 = move-exception
            goto L_0x0033
        L_0x0026:
            r7 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r7)     // Catch:{ all -> 0x0024 }
            if (r0 == 0) goto L_0x002f
        L_0x002c:
            r0.dispose()
        L_0x002f:
            r10.countDown()
            return
        L_0x0033:
            if (r0 == 0) goto L_0x0038
            r0.dispose()
        L_0x0038:
            throw r7
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$checkMessageByRandomId$122(long, boolean[], java.util.concurrent.CountDownLatch):void");
    }

    public boolean checkMessageId(long j, int i) {
        boolean[] zArr = new boolean[1];
        CountDownLatch countDownLatch = new CountDownLatch(1);
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda81(this, j, i, zArr, countDownLatch));
        try {
            countDownLatch.await();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        return zArr[0];
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Code restructure failed: missing block: B:9:0x0031, code lost:
        if (r0 == null) goto L_0x0036;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$checkMessageId$123(long r6, int r8, boolean[] r9, java.util.concurrent.CountDownLatch r10) {
        /*
            r5 = this;
            r0 = 0
            org.telegram.SQLite.SQLiteDatabase r1 = r5.database     // Catch:{ Exception -> 0x002d }
            java.util.Locale r2 = java.util.Locale.US     // Catch:{ Exception -> 0x002d }
            java.lang.String r3 = "SELECT mid FROM messages_v2 WHERE uid = %d AND mid = %d"
            r4 = 2
            java.lang.Object[] r4 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x002d }
            java.lang.Long r6 = java.lang.Long.valueOf(r6)     // Catch:{ Exception -> 0x002d }
            r7 = 0
            r4[r7] = r6     // Catch:{ Exception -> 0x002d }
            java.lang.Integer r6 = java.lang.Integer.valueOf(r8)     // Catch:{ Exception -> 0x002d }
            r8 = 1
            r4[r8] = r6     // Catch:{ Exception -> 0x002d }
            java.lang.String r6 = java.lang.String.format(r2, r3, r4)     // Catch:{ Exception -> 0x002d }
            java.lang.Object[] r2 = new java.lang.Object[r7]     // Catch:{ Exception -> 0x002d }
            org.telegram.SQLite.SQLiteCursor r0 = r1.queryFinalized(r6, r2)     // Catch:{ Exception -> 0x002d }
            boolean r6 = r0.next()     // Catch:{ Exception -> 0x002d }
            if (r6 == 0) goto L_0x0033
            r9[r7] = r8     // Catch:{ Exception -> 0x002d }
            goto L_0x0033
        L_0x002b:
            r6 = move-exception
            goto L_0x003a
        L_0x002d:
            r6 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r6)     // Catch:{ all -> 0x002b }
            if (r0 == 0) goto L_0x0036
        L_0x0033:
            r0.dispose()
        L_0x0036:
            r10.countDown()
            return
        L_0x003a:
            if (r0 == 0) goto L_0x003f
            r0.dispose()
        L_0x003f:
            throw r6
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$checkMessageId$123(long, int, boolean[], java.util.concurrent.CountDownLatch):void");
    }

    public void getUnreadMention(long j, IntCallback intCallback) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda101(this, j, intCallback));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getUnreadMention$125(long j, IntCallback intCallback) {
        try {
            int i = 0;
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT MIN(mid) FROM messages_v2 WHERE uid = %d AND mention = 1 AND read_state IN(0, 1)", new Object[]{Long.valueOf(j)}), new Object[0]);
            if (queryFinalized.next()) {
                i = queryFinalized.intValue(0);
            }
            queryFinalized.dispose();
            AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda3(intCallback, i));
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void getMessagesCount(long j, IntCallback intCallback) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda104(this, j, intCallback));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getMessagesCount$127(long j, IntCallback intCallback) {
        try {
            int i = 0;
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(mid) FROM messages_v2 WHERE uid = %d", new Object[]{Long.valueOf(j)}), new Object[0]);
            if (queryFinalized.next()) {
                i = queryFinalized.intValue(0);
            }
            queryFinalized.dispose();
            AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda1(intCallback, i));
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v1, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v0, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r13v0, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r12v0, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v1, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v1, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v1, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v5, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v6, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v2, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v2, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v2, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v6, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v8, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v3, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v3, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v3, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v7, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v9, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v8, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v10, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v4, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v4, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v4, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v9, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v11, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v10, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v11, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v13, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v2, resolved type: java.lang.String} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r54v1, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v5, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v5, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v14, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v12, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v6, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r54v2, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v6, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v7, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v15, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v13, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v6, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r54v3, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r52v1, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v7, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v8, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v8, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v13, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r54v4, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v17, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v15, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r54v5, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v18, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v16, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r52v3, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r51v2, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v19, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v17, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r54v7, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r52v4, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r51v5, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v23, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r54v10, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r52v7, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v10, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r52v9, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r52v10, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r54v13, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r54v14, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r52v11, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v27, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v23, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r54v15, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r52v12, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r52v13, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r52v14, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r54v18, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v8, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v9, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v28, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v24, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v7, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v29, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r54v19, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r52v15, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v9, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v10, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r7v10, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v27, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v32, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v30, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v26, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r12v20, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r54v20, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r52v16, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v11, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r12v21, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v33, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v28, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v32, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r52v17, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v12, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r54v21, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r54v22, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r52v18, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v13, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v10, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v30, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v34, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r54v23, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r52v19, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v14, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r12v23, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r7v13, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v34, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v46, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v35, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v31, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r54v24, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v15, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v36, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v32, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v16, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r54v25, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v17, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r54v27, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r52v22, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v18, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r12v24, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r7v14, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v35, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v49, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v38, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v34, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v12, resolved type: org.telegram.tgnet.NativeByteBuffer} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r54v28, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r52v23, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v19, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r12v25, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v40, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r52v24, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v20, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r54v29, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v21, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r54v30, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r52v26, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r54v31, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v22, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v42, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v23, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r54v33, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v24, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v26, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v46, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v42, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v8, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v28, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v15, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r12v27, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v15, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r12v29, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r12v40, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v80, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v86, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v30, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r7v27, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v11, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v10, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r7v28, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v87, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v49, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v31, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v12, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v11, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v50, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v13, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v51, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v12, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v52, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v14, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v55, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v13, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v15, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v71, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v79, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v14, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v58, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v59, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v18, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v19, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v32, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r7v29, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v82, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v74, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v88, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v60, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v33, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r7v30, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v86, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v34, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r7v31, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v87, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v61, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v90, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v15, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v20, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v62, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v77, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v95, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v64, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v89, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r7v32, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v35, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v90, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v93, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v67, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v16, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v36, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r7v33, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r7v34, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v37, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v95, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v96, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v87, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v23, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r7v35, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v38, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v77, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v39, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v78, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v25, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v17, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v40, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v41, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v42, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v51, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v79, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v26, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v18, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v43, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r7v37, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v28, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v44, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v19, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v80, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v81, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v29, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v20, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v45, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r7v40, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v82, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v46, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v31, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v22, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v47, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r7v41, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r7v42, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v32, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v48, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v99, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v84, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v23, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v33, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v49, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v100, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v85, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v34, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v35, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v101, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v86, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v50, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v35, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v36, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v54, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v99, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v102, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v87, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v88, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v51, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v89, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v90, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v35, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v60, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r41v2, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v52, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v92, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v24, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r41v3, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v93, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r41v4, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v94, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r41v5, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r8v90, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v107, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v96, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v61, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r52v27, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r51v17, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v36, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v62, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v42, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r7v44, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v98, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v43, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v44, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v45, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v47, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v101, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v53, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v107, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v50, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r52v28, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v120, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v82, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v85, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v86, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r41v6, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v109, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r8v110, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r41v7, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v110, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r41v8, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r41v9, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v122, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r41v10, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v123, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r41v11, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v115, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r41v12, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r8v116, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v116, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r8v117, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v120, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r8v118, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v121, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v122, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v136, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v29, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v124, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v30, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v137, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v31, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v138, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v139, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v32, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r54v34, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r7v45, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v157, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v128, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v129, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r7v46, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v158, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v102, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v144, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v33, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r54v37, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v131, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v159, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r7v47, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v172, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v36, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v67, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v152, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v150, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v103, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v173, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v104, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v174, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v153, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v151, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v68, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v37, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v38, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v69, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v105, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v175, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v39, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v70, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v157, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v106, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v176, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v107, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v154, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v177, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v155, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v71, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v40, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v108, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v109, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v178, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v158, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v72, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v41, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v42, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v74, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v161, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v110, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v181, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v54, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v35, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v111, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v162, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v113, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v184, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v163, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v164, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v43, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v165, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v118, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v166, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v190, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v44, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v167, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v45, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v168, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v46, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v55, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v36, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v195, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v125, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v56, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v37, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v196, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v47, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v197, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v57, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v38, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v75, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v198, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v51, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v127, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v181, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v201, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v58, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v40, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v76, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v183, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v202, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v54, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v59, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v41, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v169, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v77, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v55, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v171, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v78, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v130, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v203, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v60, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v42, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v57, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v79, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v58, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v80, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v131, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v204, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v59, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v61, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v43, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v132, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v205, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v60, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v62, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v44, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v133, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v206, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v172, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v134, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v207, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v61, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v45, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v63, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v81, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v173, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v135, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v208, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v62, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v64, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v46, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v84, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v176, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v136, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v211, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v47, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v64, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v66, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v212, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v137, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v65, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v177, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v178, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v181, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v86, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v138, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v213, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v67, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v48, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v69, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v69, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v70, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v49, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v139, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v214, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v140, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v215, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r17v50, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v71, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v70, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v141, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v216, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r21v72, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r31v71, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v96, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v97, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v98, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v99, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v100, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v101, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v103, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX WARNING: type inference failed for: r23v7 */
    /* JADX WARNING: type inference failed for: r23v46 */
    /* JADX WARNING: type inference failed for: r23v51 */
    /*  JADX ERROR: JadxRuntimeException in pass: IfRegionVisitor
        jadx.core.utils.exceptions.JadxRuntimeException: Don't wrap MOVE or CONST insns: 0x12ac: MOVE  (r4v32 int) = (r29v1 int)
        	at jadx.core.dex.instructions.args.InsnArg.wrapArg(InsnArg.java:164)
        	at jadx.core.dex.visitors.shrink.CodeShrinkVisitor.assignInline(CodeShrinkVisitor.java:133)
        	at jadx.core.dex.visitors.shrink.CodeShrinkVisitor.checkInline(CodeShrinkVisitor.java:118)
        	at jadx.core.dex.visitors.shrink.CodeShrinkVisitor.shrinkBlock(CodeShrinkVisitor.java:65)
        	at jadx.core.dex.visitors.shrink.CodeShrinkVisitor.shrinkMethod(CodeShrinkVisitor.java:43)
        	at jadx.core.dex.visitors.regions.TernaryMod.makeTernaryInsn(TernaryMod.java:122)
        	at jadx.core.dex.visitors.regions.TernaryMod.visitRegion(TernaryMod.java:34)
        	at jadx.core.dex.visitors.regions.DepthRegionTraversal.traverseIterativeStepInternal(DepthRegionTraversal.java:73)
        	at jadx.core.dex.visitors.regions.DepthRegionTraversal.traverseIterativeStepInternal(DepthRegionTraversal.java:78)
        	at jadx.core.dex.visitors.regions.DepthRegionTraversal.traverseIterative(DepthRegionTraversal.java:27)
        	at jadx.core.dex.visitors.regions.IfRegionVisitor.visit(IfRegionVisitor.java:31)
        */
    /* JADX WARNING: Multi-variable type inference failed */
    /* JADX WARNING: Removed duplicated region for block: B:304:0x0856 A[SYNTHETIC, Splitter:B:304:0x0856] */
    /* JADX WARNING: Removed duplicated region for block: B:306:0x085b  */
    /* JADX WARNING: Removed duplicated region for block: B:359:0x0961  */
    /* JADX WARNING: Removed duplicated region for block: B:360:0x0963  */
    /* JADX WARNING: Removed duplicated region for block: B:362:0x0966 A[SYNTHETIC, Splitter:B:362:0x0966] */
    /* JADX WARNING: Removed duplicated region for block: B:375:0x09aa  */
    /* JADX WARNING: Removed duplicated region for block: B:377:0x09b0 A[SYNTHETIC, Splitter:B:377:0x09b0] */
    /* JADX WARNING: Removed duplicated region for block: B:398:0x0ae4  */
    /* JADX WARNING: Removed duplicated region for block: B:674:0x1170 A[Catch:{ Exception -> 0x1249 }] */
    /* JADX WARNING: Removed duplicated region for block: B:677:0x117e A[Catch:{ Exception -> 0x1249 }] */
    /* JADX WARNING: Removed duplicated region for block: B:680:0x1185 A[SYNTHETIC, Splitter:B:680:0x1185] */
    /* JADX WARNING: Removed duplicated region for block: B:694:0x11c9 A[Catch:{ Exception -> 0x1249 }] */
    /* JADX WARNING: Removed duplicated region for block: B:843:0x150b  */
    /* JADX WARNING: Removed duplicated region for block: B:845:0x152f  */
    public java.lang.Runnable getMessagesInternal(long r47, long r49, int r51, int r52, int r53, int r54, int r55, int r56, boolean r57, int r58, int r59, boolean r60) {
        /*
            r46 = this;
            r15 = r46
            r5 = r47
            r1 = r51
            r14 = r56
            org.telegram.tgnet.TLRPC$TL_messages_messages r3 = new org.telegram.tgnet.TLRPC$TL_messages_messages
            r3.<init>()
            org.telegram.messenger.UserConfig r2 = r46.getUserConfig()
            long r7 = r2.clientUserId
            r9 = 777000(0xbdb28, double:3.83889E-318)
            int r11 = (r5 > r9 ? 1 : (r5 == r9 ? 0 : -1))
            if (r11 != 0) goto L_0x001d
            r9 = 10
            goto L_0x001e
        L_0x001d:
            r9 = 1
        L_0x001e:
            long r10 = android.os.SystemClock.elapsedRealtime()
            java.util.ArrayList r13 = new java.util.ArrayList     // Catch:{ Exception -> 0x14cd }
            r13.<init>()     // Catch:{ Exception -> 0x14cd }
            java.util.ArrayList r2 = new java.util.ArrayList     // Catch:{ Exception -> 0x14cd }
            r2.<init>()     // Catch:{ Exception -> 0x14cd }
            androidx.collection.LongSparseArray r12 = new androidx.collection.LongSparseArray     // Catch:{ Exception -> 0x14cd }
            r12.<init>()     // Catch:{ Exception -> 0x14cd }
            androidx.collection.LongSparseArray r4 = new androidx.collection.LongSparseArray     // Catch:{ Exception -> 0x14cd }
            r4.<init>()     // Catch:{ Exception -> 0x14cd }
            r19 = r10
            androidx.collection.LongSparseArray r10 = new androidx.collection.LongSparseArray     // Catch:{ Exception -> 0x14c9 }
            r10.<init>()     // Catch:{ Exception -> 0x14c9 }
            java.util.ArrayList r11 = new java.util.ArrayList     // Catch:{ Exception -> 0x14c9 }
            r11.<init>()     // Catch:{ Exception -> 0x14c9 }
            r21 = r9
            java.lang.String r9 = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention, m.imp, m.forwards, m.replies_data FROM messages_v2 as m LEFT JOIN randoms_v2 as r ON r.mid = m.mid AND r.uid = m.uid"
            r23 = r9
            r22 = r10
            if (r57 == 0) goto L_0x01a4
            org.telegram.SQLite.SQLiteDatabase r10 = r15.database     // Catch:{ Exception -> 0x0188 }
            java.util.Locale r9 = java.util.Locale.US     // Catch:{ Exception -> 0x0188 }
            java.lang.String r1 = "SELECT m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.ttl FROM scheduled_messages_v2 as m LEFT JOIN randoms_v2 as r ON r.mid = m.mid AND r.uid = m.uid WHERE m.uid = %d ORDER BY m.date DESC"
            r15 = 1
            java.lang.Object[] r14 = new java.lang.Object[r15]     // Catch:{ Exception -> 0x0188 }
            java.lang.Long r15 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0188 }
            r27 = r11
            r11 = 0
            r14[r11] = r15     // Catch:{ Exception -> 0x0188 }
            java.lang.String r1 = java.lang.String.format(r9, r1, r14)     // Catch:{ Exception -> 0x0188 }
            java.lang.Object[] r9 = new java.lang.Object[r11]     // Catch:{ Exception -> 0x0188 }
            org.telegram.SQLite.SQLiteCursor r1 = r10.queryFinalized(r1, r9)     // Catch:{ Exception -> 0x0188 }
        L_0x0068:
            boolean r9 = r1.next()     // Catch:{ Exception -> 0x0188 }
            if (r9 == 0) goto L_0x015c
            org.telegram.tgnet.NativeByteBuffer r9 = r1.byteBufferValue(r11)     // Catch:{ Exception -> 0x0188 }
            if (r9 == 0) goto L_0x0149
            int r10 = r9.readInt32(r11)     // Catch:{ Exception -> 0x0188 }
            org.telegram.tgnet.TLRPC$Message r10 = org.telegram.tgnet.TLRPC$Message.TLdeserialize(r9, r10, r11)     // Catch:{ Exception -> 0x0188 }
            r11 = 1
            int r14 = r1.intValue(r11)     // Catch:{ Exception -> 0x0188 }
            r10.send_state = r14     // Catch:{ Exception -> 0x0188 }
            r11 = 2
            int r14 = r1.intValue(r11)     // Catch:{ Exception -> 0x0188 }
            r10.id = r14     // Catch:{ Exception -> 0x0188 }
            if (r14 <= 0) goto L_0x0096
            int r11 = r10.send_state     // Catch:{ Exception -> 0x0188 }
            if (r11 == 0) goto L_0x0096
            r14 = 3
            if (r11 == r14) goto L_0x0096
            r11 = 0
            r10.send_state = r11     // Catch:{ Exception -> 0x0188 }
        L_0x0096:
            int r11 = (r5 > r7 ? 1 : (r5 == r7 ? 0 : -1))
            if (r11 != 0) goto L_0x00a1
            r11 = 1
            r10.out = r11     // Catch:{ Exception -> 0x0188 }
            r14 = 0
            r10.unread = r14     // Catch:{ Exception -> 0x0188 }
            goto L_0x00a4
        L_0x00a1:
            r11 = 1
            r10.unread = r11     // Catch:{ Exception -> 0x0188 }
        L_0x00a4:
            r10.readAttachPath(r9, r7)     // Catch:{ Exception -> 0x0188 }
            r9.reuse()     // Catch:{ Exception -> 0x0188 }
            r9 = 3
            int r11 = r1.intValue(r9)     // Catch:{ Exception -> 0x0188 }
            r10.date = r11     // Catch:{ Exception -> 0x0188 }
            r10.dialog_id = r5     // Catch:{ Exception -> 0x0188 }
            int r9 = r10.ttl     // Catch:{ Exception -> 0x0188 }
            if (r9 != 0) goto L_0x00be
            r9 = 6
            int r11 = r1.intValue(r9)     // Catch:{ Exception -> 0x0188 }
            r10.ttl = r11     // Catch:{ Exception -> 0x0188 }
        L_0x00be:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r9 = r3.messages     // Catch:{ Exception -> 0x0188 }
            r9.add(r10)     // Catch:{ Exception -> 0x0188 }
            addUsersAndChatsFromMessage(r10, r13, r2)     // Catch:{ Exception -> 0x0188 }
            org.telegram.tgnet.TLRPC$TL_messageReplyHeader r9 = r10.reply_to     // Catch:{ Exception -> 0x0188 }
            if (r9 == 0) goto L_0x0149
            int r11 = r9.reply_to_msg_id     // Catch:{ Exception -> 0x0188 }
            if (r11 != 0) goto L_0x00d6
            long r14 = r9.reply_to_random_id     // Catch:{ Exception -> 0x0188 }
            r23 = 0
            int r9 = (r14 > r23 ? 1 : (r14 == r23 ? 0 : -1))
            if (r9 == 0) goto L_0x0149
        L_0x00d6:
            r9 = 5
            boolean r11 = r1.isNull(r9)     // Catch:{ Exception -> 0x0188 }
            if (r11 != 0) goto L_0x00fb
            org.telegram.tgnet.NativeByteBuffer r11 = r1.byteBufferValue(r9)     // Catch:{ Exception -> 0x0188 }
            if (r11 == 0) goto L_0x00fb
            r9 = 0
            int r14 = r11.readInt32(r9)     // Catch:{ Exception -> 0x0188 }
            org.telegram.tgnet.TLRPC$Message r14 = org.telegram.tgnet.TLRPC$Message.TLdeserialize(r11, r14, r9)     // Catch:{ Exception -> 0x0188 }
            r10.replyMessage = r14     // Catch:{ Exception -> 0x0188 }
            r14.readAttachPath(r11, r7)     // Catch:{ Exception -> 0x0188 }
            r11.reuse()     // Catch:{ Exception -> 0x0188 }
            org.telegram.tgnet.TLRPC$Message r9 = r10.replyMessage     // Catch:{ Exception -> 0x0188 }
            if (r9 == 0) goto L_0x00fb
            addUsersAndChatsFromMessage(r9, r13, r2)     // Catch:{ Exception -> 0x0188 }
        L_0x00fb:
            org.telegram.tgnet.TLRPC$Message r9 = r10.replyMessage     // Catch:{ Exception -> 0x0188 }
            if (r9 != 0) goto L_0x0149
            org.telegram.tgnet.TLRPC$TL_messageReplyHeader r9 = r10.reply_to     // Catch:{ Exception -> 0x0188 }
            int r11 = r9.reply_to_msg_id     // Catch:{ Exception -> 0x0188 }
            if (r11 == 0) goto L_0x0109
            addReplyMessages(r10, r12, r4)     // Catch:{ Exception -> 0x0188 }
            goto L_0x0149
        L_0x0109:
            long r14 = r9.reply_to_random_id     // Catch:{ Exception -> 0x0188 }
            r9 = r22
            java.lang.Object r11 = r9.get(r14)     // Catch:{ Exception -> 0x0188 }
            java.util.ArrayList r11 = (java.util.ArrayList) r11     // Catch:{ Exception -> 0x0188 }
            if (r11 != 0) goto L_0x0121
            java.util.ArrayList r11 = new java.util.ArrayList     // Catch:{ Exception -> 0x0188 }
            r11.<init>()     // Catch:{ Exception -> 0x0188 }
            org.telegram.tgnet.TLRPC$TL_messageReplyHeader r14 = r10.reply_to     // Catch:{ Exception -> 0x0188 }
            long r14 = r14.reply_to_random_id     // Catch:{ Exception -> 0x0188 }
            r9.put(r14, r11)     // Catch:{ Exception -> 0x0188 }
        L_0x0121:
            org.telegram.tgnet.TLRPC$TL_messageReplyHeader r14 = r10.reply_to     // Catch:{ Exception -> 0x0188 }
            long r14 = r14.reply_to_random_id     // Catch:{ Exception -> 0x0188 }
            java.lang.Long r14 = java.lang.Long.valueOf(r14)     // Catch:{ Exception -> 0x0188 }
            r15 = r27
            boolean r14 = r15.contains(r14)     // Catch:{ Exception -> 0x0188 }
            if (r14 != 0) goto L_0x0141
            org.telegram.tgnet.TLRPC$TL_messageReplyHeader r14 = r10.reply_to     // Catch:{ Exception -> 0x0188 }
            r27 = r12
            r22 = r13
            long r12 = r14.reply_to_random_id     // Catch:{ Exception -> 0x0188 }
            java.lang.Long r12 = java.lang.Long.valueOf(r12)     // Catch:{ Exception -> 0x0188 }
            r15.add(r12)     // Catch:{ Exception -> 0x0188 }
            goto L_0x0145
        L_0x0141:
            r27 = r12
            r22 = r13
        L_0x0145:
            r11.add(r10)     // Catch:{ Exception -> 0x0188 }
            goto L_0x0151
        L_0x0149:
            r9 = r22
            r15 = r27
            r27 = r12
            r22 = r13
        L_0x0151:
            r13 = r22
            r12 = r27
            r11 = 0
            r22 = r9
            r27 = r15
            goto L_0x0068
        L_0x015c:
            r9 = r22
            r15 = r27
            r27 = r12
            r22 = r13
            r1.dispose()     // Catch:{ Exception -> 0x0188 }
            r11 = r46
            r10 = r56
            r36 = r2
            r2 = r4
            r38 = r7
            r13 = r15
            r1 = r22
            r5 = 0
            r6 = 0
            r21 = 0
            r23 = 0
            r31 = 0
            r33 = 0
            r34 = 0
            r40 = 1
            r4 = r52
            r15 = r3
            r3 = r51
            goto L_0x1305
        L_0x0188:
            r0 = move-exception
            r11 = r46
            r2 = r51
            r1 = r52
            r10 = r56
            r8 = r5
            r4 = 1
        L_0x0193:
            r12 = 0
            r17 = 0
            r21 = 0
            r31 = 0
            r32 = 0
            r33 = 0
            r34 = 0
        L_0x01a0:
            r6 = r3
            r3 = r0
            goto L_0x14e6
        L_0x01a4:
            r15 = r11
            r27 = r12
            r9 = r22
            r22 = r13
            boolean r1 = org.telegram.messenger.DialogObject.isEncryptedDialog(r47)     // Catch:{ Exception -> 0x14c0 }
            java.lang.String r12 = "SELECT * FROM ("
            java.lang.String r13 = ""
            if (r1 != 0) goto L_0x0bc8
            java.lang.String r1 = "SELECT inbox_max, unread_count, date, unread_count_i FROM dialogs WHERE did = "
            r10 = r56
            r11 = 3
            if (r10 != r11) goto L_0x0272
            if (r54 != 0) goto L_0x0272
            r11 = r46
            org.telegram.SQLite.SQLiteDatabase r14 = r11.database     // Catch:{ Exception -> 0x0269 }
            r29 = r15
            java.lang.StringBuilder r15 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0269 }
            r15.<init>()     // Catch:{ Exception -> 0x0269 }
            r15.append(r1)     // Catch:{ Exception -> 0x0269 }
            r15.append(r5)     // Catch:{ Exception -> 0x0269 }
            java.lang.String r1 = r15.toString()     // Catch:{ Exception -> 0x0269 }
            r30 = r9
            r15 = 0
            java.lang.Object[] r9 = new java.lang.Object[r15]     // Catch:{ Exception -> 0x0269 }
            org.telegram.SQLite.SQLiteCursor r1 = r14.queryFinalized(r1, r9)     // Catch:{ Exception -> 0x0269 }
            boolean r9 = r1.next()     // Catch:{ Exception -> 0x0269 }
            if (r9 == 0) goto L_0x0232
            int r9 = r1.intValue(r15)     // Catch:{ Exception -> 0x0269 }
            r14 = 1
            int r9 = java.lang.Math.max(r14, r9)     // Catch:{ Exception -> 0x0269 }
            int r9 = r9 + r14
            int r15 = r1.intValue(r14)     // Catch:{ Exception -> 0x021e }
            r14 = 2
            int r21 = r1.intValue(r14)     // Catch:{ Exception -> 0x0210 }
            r14 = 3
            int r31 = r1.intValue(r14)     // Catch:{ Exception -> 0x01fb }
            goto L_0x0238
        L_0x01fb:
            r0 = move-exception
            r2 = r51
            r1 = r52
            r31 = r9
            r33 = r21
            r4 = 0
            r12 = 0
            r17 = 0
            r32 = 0
            r34 = 0
            r8 = r5
            r21 = r15
            goto L_0x01a0
        L_0x0210:
            r0 = move-exception
            r2 = r51
            r1 = r52
            r31 = r9
            r21 = r15
            r4 = 0
            r12 = 0
            r17 = 0
            goto L_0x022b
        L_0x021e:
            r0 = move-exception
            r2 = r51
            r1 = r52
            r31 = r9
            r4 = 0
            r12 = 0
            r17 = 0
            r21 = 0
        L_0x022b:
            r32 = 0
            r33 = 0
            r34 = 0
            goto L_0x0266
        L_0x0232:
            r9 = 0
            r15 = 0
            r21 = 0
            r31 = 0
        L_0x0238:
            r1.dispose()     // Catch:{ Exception -> 0x0253 }
            r1 = r52
            r36 = r2
            r37 = r3
            r35 = r4
            r38 = r7
            r33 = r21
            r32 = r31
            r3 = 0
            r34 = 0
            r2 = r51
            r31 = r9
            r9 = r1
            goto L_0x04d7
        L_0x0253:
            r0 = move-exception
            r2 = r51
            r1 = r52
            r33 = r21
            r32 = r31
            r4 = 0
            r12 = 0
            r17 = 0
            r34 = 0
            r31 = r9
            r21 = r15
        L_0x0266:
            r8 = r5
            goto L_0x01a0
        L_0x0269:
            r0 = move-exception
            r2 = r51
            r1 = r52
            r8 = r5
            r4 = 0
            goto L_0x0193
        L_0x0272:
            r11 = r46
            r30 = r9
            r29 = r15
            r9 = 1
            if (r10 == r9) goto L_0x04c0
            r9 = 3
            if (r10 == r9) goto L_0x04c0
            r9 = 4
            if (r10 == r9) goto L_0x04c0
            if (r54 != 0) goto L_0x04c0
            r9 = 2
            if (r10 != r9) goto L_0x0487
            org.telegram.SQLite.SQLiteDatabase r9 = r11.database     // Catch:{ Exception -> 0x0269 }
            java.lang.StringBuilder r14 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0269 }
            r14.<init>()     // Catch:{ Exception -> 0x0269 }
            r14.append(r1)     // Catch:{ Exception -> 0x0269 }
            r14.append(r5)     // Catch:{ Exception -> 0x0269 }
            java.lang.String r1 = r14.toString()     // Catch:{ Exception -> 0x0269 }
            r14 = 0
            java.lang.Object[] r15 = new java.lang.Object[r14]     // Catch:{ Exception -> 0x0269 }
            org.telegram.SQLite.SQLiteCursor r1 = r9.queryFinalized(r1, r15)     // Catch:{ Exception -> 0x0269 }
            boolean r9 = r1.next()     // Catch:{ Exception -> 0x0269 }
            if (r9 == 0) goto L_0x02dc
            int r9 = r1.intValue(r14)     // Catch:{ Exception -> 0x0269 }
            r14 = 1
            int r9 = java.lang.Math.max(r14, r9)     // Catch:{ Exception -> 0x0269 }
            int r15 = r1.intValue(r14)     // Catch:{ Exception -> 0x021e }
            r14 = 2
            int r31 = r1.intValue(r14)     // Catch:{ Exception -> 0x0210 }
            r14 = 3
            int r32 = r1.intValue(r14)     // Catch:{ Exception -> 0x02c8 }
            int r14 = (r5 > r7 ? 1 : (r5 == r7 ? 0 : -1))
            r33 = r31
            if (r14 != 0) goto L_0x02c4
            r14 = 1
            r15 = 0
            goto L_0x02c5
        L_0x02c4:
            r14 = 1
        L_0x02c5:
            r31 = r9
            goto L_0x02e6
        L_0x02c8:
            r0 = move-exception
            r2 = r51
            r1 = r52
            r21 = r15
            r33 = r31
            r4 = 0
            r12 = 0
            r17 = 0
            r32 = 0
            r34 = 0
            r31 = r9
            goto L_0x0266
        L_0x02dc:
            r9 = r52
            r14 = 0
            r15 = 0
            r31 = 0
            r32 = 0
            r33 = 0
        L_0x02e6:
            r1.dispose()     // Catch:{ Exception -> 0x0477 }
            if (r14 != 0) goto L_0x03a3
            org.telegram.SQLite.SQLiteDatabase r1 = r11.database     // Catch:{ Exception -> 0x0477 }
            r34 = r14
            java.util.Locale r14 = java.util.Locale.US     // Catch:{ Exception -> 0x03a0 }
            r35 = r4
            java.lang.String r4 = "SELECT min(mid), max(date) FROM messages_v2 WHERE uid = %d AND out = 0 AND read_state IN(0,2) AND mid > 0"
            r36 = r2
            r37 = r3
            r2 = 1
            java.lang.Object[] r3 = new java.lang.Object[r2]     // Catch:{ Exception -> 0x0473 }
            java.lang.Long r2 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0473 }
            r38 = r7
            r7 = 0
            r3[r7] = r2     // Catch:{ Exception -> 0x0473 }
            java.lang.String r2 = java.lang.String.format(r14, r4, r3)     // Catch:{ Exception -> 0x0473 }
            java.lang.Object[] r3 = new java.lang.Object[r7]     // Catch:{ Exception -> 0x0473 }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r2, r3)     // Catch:{ Exception -> 0x0473 }
            boolean r2 = r1.next()     // Catch:{ Exception -> 0x0473 }
            if (r2 == 0) goto L_0x0330
            int r2 = r1.intValue(r7)     // Catch:{ Exception -> 0x0473 }
            r3 = 1
            int r4 = r1.intValue(r3)     // Catch:{ Exception -> 0x031f }
            goto L_0x0334
        L_0x031f:
            r0 = move-exception
            r1 = r52
            r3 = r0
            r31 = r2
            r8 = r5
            r21 = r15
            r6 = r37
            r4 = 0
            r12 = 0
            r17 = 0
            goto L_0x039c
        L_0x0330:
            r2 = r31
            r4 = r33
        L_0x0334:
            r1.dispose()     // Catch:{ Exception -> 0x0389 }
            if (r2 == 0) goto L_0x037e
            org.telegram.SQLite.SQLiteDatabase r1 = r11.database     // Catch:{ Exception -> 0x0389 }
            java.lang.String r3 = "SELECT COUNT(*) FROM messages_v2 WHERE uid = %d AND mid >= %d AND out = 0 AND read_state IN(0,2)"
            r7 = 2
            java.lang.Object[] r8 = new java.lang.Object[r7]     // Catch:{ Exception -> 0x0389 }
            java.lang.Long r7 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0389 }
            r31 = r4
            r4 = 0
            r8[r4] = r7     // Catch:{ Exception -> 0x037c }
            java.lang.Integer r7 = java.lang.Integer.valueOf(r2)     // Catch:{ Exception -> 0x037c }
            r17 = 1
            r8[r17] = r7     // Catch:{ Exception -> 0x037c }
            java.lang.String r3 = java.lang.String.format(r14, r3, r8)     // Catch:{ Exception -> 0x037c }
            java.lang.Object[] r7 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x037c }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r3, r7)     // Catch:{ Exception -> 0x037c }
            boolean r3 = r1.next()     // Catch:{ Exception -> 0x037c }
            if (r3 == 0) goto L_0x0366
            int r3 = r1.intValue(r4)     // Catch:{ Exception -> 0x037c }
            goto L_0x0367
        L_0x0366:
            r3 = r15
        L_0x0367:
            r1.dispose()     // Catch:{ Exception -> 0x036c }
            r15 = r3
            goto L_0x0380
        L_0x036c:
            r0 = move-exception
            r1 = r52
            r21 = r3
            r8 = r5
            r33 = r31
            r6 = r37
            r4 = 0
            r12 = 0
            r17 = 0
            r3 = r0
            goto L_0x039a
        L_0x037c:
            r0 = move-exception
            goto L_0x038c
        L_0x037e:
            r31 = r4
        L_0x0380:
            r1 = r9
            r33 = r31
            r31 = r2
            r2 = r51
            goto L_0x049d
        L_0x0389:
            r0 = move-exception
            r31 = r4
        L_0x038c:
            r1 = r52
            r3 = r0
            r8 = r5
            r21 = r15
            r33 = r31
            r6 = r37
            r4 = 0
            r12 = 0
            r17 = 0
        L_0x039a:
            r31 = r2
        L_0x039c:
            r2 = r51
            goto L_0x14e6
        L_0x03a0:
            r0 = move-exception
            goto L_0x047a
        L_0x03a3:
            r36 = r2
            r37 = r3
            r35 = r4
            r38 = r7
            r34 = r14
            if (r9 != 0) goto L_0x040b
            org.telegram.SQLite.SQLiteDatabase r1 = r11.database     // Catch:{ Exception -> 0x0473 }
            java.util.Locale r2 = java.util.Locale.US     // Catch:{ Exception -> 0x0473 }
            java.lang.String r3 = "SELECT COUNT(*) FROM messages_v2 WHERE uid = %d AND mid > 0 AND out = 0 AND read_state IN(0,2)"
            r4 = 1
            java.lang.Object[] r7 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x0473 }
            java.lang.Long r4 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0473 }
            r8 = 0
            r7[r8] = r4     // Catch:{ Exception -> 0x0473 }
            java.lang.String r3 = java.lang.String.format(r2, r3, r7)     // Catch:{ Exception -> 0x0473 }
            java.lang.Object[] r4 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x0473 }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r3, r4)     // Catch:{ Exception -> 0x0473 }
            boolean r3 = r1.next()     // Catch:{ Exception -> 0x0473 }
            if (r3 == 0) goto L_0x03d4
            int r3 = r1.intValue(r8)     // Catch:{ Exception -> 0x0473 }
            goto L_0x03d5
        L_0x03d4:
            r3 = 0
        L_0x03d5:
            r1.dispose()     // Catch:{ Exception -> 0x0473 }
            if (r3 != r15) goto L_0x0401
            org.telegram.SQLite.SQLiteDatabase r1 = r11.database     // Catch:{ Exception -> 0x0473 }
            java.lang.String r3 = "SELECT min(mid) FROM messages_v2 WHERE uid = %d AND out = 0 AND read_state IN(0,2) AND mid > 0"
            r4 = 1
            java.lang.Object[] r7 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x0473 }
            java.lang.Long r4 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0473 }
            r8 = 0
            r7[r8] = r4     // Catch:{ Exception -> 0x0473 }
            java.lang.String r2 = java.lang.String.format(r2, r3, r7)     // Catch:{ Exception -> 0x0473 }
            java.lang.Object[] r3 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x0473 }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r2, r3)     // Catch:{ Exception -> 0x0473 }
            boolean r2 = r1.next()     // Catch:{ Exception -> 0x0473 }
            if (r2 == 0) goto L_0x03fe
            int r31 = r1.intValue(r8)     // Catch:{ Exception -> 0x0473 }
            r9 = r31
        L_0x03fe:
            r1.dispose()     // Catch:{ Exception -> 0x0473 }
        L_0x0401:
            r1 = r9
            r2 = r51
            r45 = r9
            r9 = r1
            r1 = r45
            goto L_0x049d
        L_0x040b:
            org.telegram.SQLite.SQLiteDatabase r1 = r11.database     // Catch:{ Exception -> 0x0473 }
            java.util.Locale r2 = java.util.Locale.US     // Catch:{ Exception -> 0x0473 }
            java.lang.String r3 = "SELECT start, end FROM messages_holes WHERE uid = %d AND start < %d AND end > %d"
            r4 = 3
            java.lang.Object[] r7 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x0473 }
            java.lang.Long r4 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0473 }
            r8 = 0
            r7[r8] = r4     // Catch:{ Exception -> 0x0473 }
            java.lang.Integer r4 = java.lang.Integer.valueOf(r9)     // Catch:{ Exception -> 0x0473 }
            r8 = 1
            r7[r8] = r4     // Catch:{ Exception -> 0x0473 }
            java.lang.Integer r4 = java.lang.Integer.valueOf(r9)     // Catch:{ Exception -> 0x0473 }
            r8 = 2
            r7[r8] = r4     // Catch:{ Exception -> 0x0473 }
            java.lang.String r3 = java.lang.String.format(r2, r3, r7)     // Catch:{ Exception -> 0x0473 }
            r4 = 0
            java.lang.Object[] r7 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x0473 }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r3, r7)     // Catch:{ Exception -> 0x0473 }
            boolean r3 = r1.next()     // Catch:{ Exception -> 0x0473 }
            if (r3 != 0) goto L_0x043c
            r3 = 1
            goto L_0x043d
        L_0x043c:
            r3 = 0
        L_0x043d:
            r1.dispose()     // Catch:{ Exception -> 0x0473 }
            if (r3 == 0) goto L_0x046f
            org.telegram.SQLite.SQLiteDatabase r1 = r11.database     // Catch:{ Exception -> 0x0473 }
            java.lang.String r3 = "SELECT min(mid) FROM messages_v2 WHERE uid = %d AND out = 0 AND read_state IN(0,2) AND mid > %d"
            r4 = 2
            java.lang.Object[] r7 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x0473 }
            java.lang.Long r4 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0473 }
            r8 = 0
            r7[r8] = r4     // Catch:{ Exception -> 0x0473 }
            java.lang.Integer r4 = java.lang.Integer.valueOf(r9)     // Catch:{ Exception -> 0x0473 }
            r14 = 1
            r7[r14] = r4     // Catch:{ Exception -> 0x0473 }
            java.lang.String r2 = java.lang.String.format(r2, r3, r7)     // Catch:{ Exception -> 0x0473 }
            java.lang.Object[] r3 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x0473 }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r2, r3)     // Catch:{ Exception -> 0x0473 }
            boolean r2 = r1.next()     // Catch:{ Exception -> 0x0473 }
            if (r2 == 0) goto L_0x046c
            int r2 = r1.intValue(r8)     // Catch:{ Exception -> 0x0473 }
            r9 = r2
        L_0x046c:
            r1.dispose()     // Catch:{ Exception -> 0x0473 }
        L_0x046f:
            r2 = r51
            r1 = r9
            goto L_0x049d
        L_0x0473:
            r0 = move-exception
            r2 = r51
            goto L_0x04ba
        L_0x0477:
            r0 = move-exception
            r34 = r14
        L_0x047a:
            r2 = r51
            r1 = r52
            r8 = r5
            r21 = r15
            r4 = 0
            r12 = 0
            r17 = 0
            goto L_0x01a0
        L_0x0487:
            r36 = r2
            r37 = r3
            r35 = r4
            r38 = r7
            r2 = r51
            r1 = r52
            r9 = r1
            r15 = 0
            r31 = 0
            r32 = 0
            r33 = 0
            r34 = 0
        L_0x049d:
            r4 = r21
            if (r2 > r15) goto L_0x04a9
            if (r15 >= r4) goto L_0x04a4
            goto L_0x04a9
        L_0x04a4:
            int r3 = r15 - r2
            int r2 = r2 + 10
            goto L_0x04d7
        L_0x04a9:
            int r3 = r15 + 10
            int r2 = java.lang.Math.max(r2, r3)     // Catch:{ Exception -> 0x04b9 }
            if (r15 >= r4) goto L_0x04b7
            r1 = 0
            r3 = 0
            r15 = 0
            r31 = 0
            goto L_0x04d5
        L_0x04b7:
            r3 = 0
            goto L_0x04d7
        L_0x04b9:
            r0 = move-exception
        L_0x04ba:
            r1 = r52
            r3 = r0
            r8 = r5
            goto L_0x0bbe
        L_0x04c0:
            r36 = r2
            r37 = r3
            r35 = r4
            r38 = r7
            r2 = r51
            r1 = r52
            r9 = r1
            r3 = 0
            r15 = 0
            r31 = 0
            r32 = 0
            r33 = 0
        L_0x04d5:
            r34 = 0
        L_0x04d7:
            org.telegram.SQLite.SQLiteDatabase r4 = r11.database     // Catch:{ Exception -> 0x0bb8 }
            java.util.Locale r7 = java.util.Locale.US     // Catch:{ Exception -> 0x0bb8 }
            java.lang.String r8 = "SELECT start FROM messages_holes WHERE uid = %d AND start IN (0, 1)"
            r51 = r9
            r14 = 1
            java.lang.Object[] r9 = new java.lang.Object[r14]     // Catch:{ Exception -> 0x0bb8 }
            java.lang.Long r14 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0bb8 }
            r21 = r15
            r15 = 0
            r9[r15] = r14     // Catch:{ Exception -> 0x0baf }
            java.lang.String r8 = java.lang.String.format(r7, r8, r9)     // Catch:{ Exception -> 0x0baf }
            java.lang.Object[] r9 = new java.lang.Object[r15]     // Catch:{ Exception -> 0x0baf }
            org.telegram.SQLite.SQLiteCursor r4 = r4.queryFinalized(r8, r9)     // Catch:{ Exception -> 0x0baf }
            boolean r8 = r4.next()     // Catch:{ Exception -> 0x0baf }
            if (r8 == 0) goto L_0x050b
            int r8 = r4.intValue(r15)     // Catch:{ Exception -> 0x0504 }
            r9 = 1
            if (r8 != r9) goto L_0x0550
            r8 = 1
            goto L_0x0551
        L_0x0504:
            r0 = move-exception
            r1 = r52
            r3 = r0
            r8 = r5
            goto L_0x0bc0
        L_0x050b:
            r4.dispose()     // Catch:{ Exception -> 0x0baf }
            org.telegram.SQLite.SQLiteDatabase r4 = r11.database     // Catch:{ Exception -> 0x0baf }
            java.lang.String r8 = "SELECT min(mid) FROM messages_v2 WHERE uid = %d AND mid > 0"
            r9 = 1
            java.lang.Object[] r14 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x0baf }
            java.lang.Long r9 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0baf }
            r15 = 0
            r14[r15] = r9     // Catch:{ Exception -> 0x0baf }
            java.lang.String r8 = java.lang.String.format(r7, r8, r14)     // Catch:{ Exception -> 0x0baf }
            java.lang.Object[] r9 = new java.lang.Object[r15]     // Catch:{ Exception -> 0x0baf }
            org.telegram.SQLite.SQLiteCursor r4 = r4.queryFinalized(r8, r9)     // Catch:{ Exception -> 0x0baf }
            boolean r8 = r4.next()     // Catch:{ Exception -> 0x0baf }
            if (r8 == 0) goto L_0x0550
            int r8 = r4.intValue(r15)     // Catch:{ Exception -> 0x0504 }
            if (r8 == 0) goto L_0x0550
            org.telegram.SQLite.SQLiteDatabase r9 = r11.database     // Catch:{ Exception -> 0x0504 }
            java.lang.String r14 = "REPLACE INTO messages_holes VALUES(?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r9 = r9.executeFast(r14)     // Catch:{ Exception -> 0x0504 }
            r9.requery()     // Catch:{ Exception -> 0x0504 }
            r14 = 1
            r9.bindLong(r14, r5)     // Catch:{ Exception -> 0x0504 }
            r14 = 2
            r15 = 0
            r9.bindInteger(r14, r15)     // Catch:{ Exception -> 0x0504 }
            r14 = 3
            r9.bindInteger(r14, r8)     // Catch:{ Exception -> 0x0504 }
            r9.step()     // Catch:{ Exception -> 0x0504 }
            r9.dispose()     // Catch:{ Exception -> 0x0504 }
        L_0x0550:
            r8 = 0
        L_0x0551:
            r4.dispose()     // Catch:{ Exception -> 0x0ba0 }
            java.lang.String r4 = "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1"
            java.lang.String r9 = "SELECT max(mid) FROM messages_v2 WHERE uid = %d AND mid > 0"
            r14 = 3
            if (r10 == r14) goto L_0x0836
            r14 = 4
            if (r10 == r14) goto L_0x0836
            if (r34 == 0) goto L_0x0565
            r14 = 2
            if (r10 != r14) goto L_0x0565
            goto L_0x0836
        L_0x0565:
            r12 = 1
            if (r10 != r12) goto L_0x0643
            org.telegram.SQLite.SQLiteDatabase r3 = r11.database     // Catch:{ Exception -> 0x0636 }
            java.lang.String r4 = "SELECT start, end FROM messages_holes WHERE uid = %d AND (start >= %d AND start != 1 AND end != 1 OR start < %d AND end > %d) ORDER BY start ASC LIMIT 1"
            r9 = 4
            java.lang.Object[] r12 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x0636 }
            java.lang.Long r9 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0636 }
            r14 = 0
            r12[r14] = r9     // Catch:{ Exception -> 0x0636 }
            java.lang.Integer r9 = java.lang.Integer.valueOf(r52)     // Catch:{ Exception -> 0x0636 }
            r14 = 1
            r12[r14] = r9     // Catch:{ Exception -> 0x0636 }
            java.lang.Integer r9 = java.lang.Integer.valueOf(r52)     // Catch:{ Exception -> 0x0636 }
            r14 = 2
            r12[r14] = r9     // Catch:{ Exception -> 0x0636 }
            java.lang.Integer r9 = java.lang.Integer.valueOf(r52)     // Catch:{ Exception -> 0x0636 }
            r14 = 3
            r12[r14] = r9     // Catch:{ Exception -> 0x0636 }
            java.lang.String r4 = java.lang.String.format(r7, r4, r12)     // Catch:{ Exception -> 0x0636 }
            r9 = 0
            java.lang.Object[] r12 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x0636 }
            org.telegram.SQLite.SQLiteCursor r3 = r3.queryFinalized(r4, r12)     // Catch:{ Exception -> 0x0636 }
            boolean r4 = r3.next()     // Catch:{ Exception -> 0x0636 }
            if (r4 == 0) goto L_0x05a1
            int r4 = r3.intValue(r9)     // Catch:{ Exception -> 0x0636 }
            goto L_0x05a2
        L_0x05a1:
            r4 = 0
        L_0x05a2:
            r3.dispose()     // Catch:{ Exception -> 0x0636 }
            if (r4 == 0) goto L_0x05f2
            org.telegram.SQLite.SQLiteDatabase r3 = r11.database     // Catch:{ Exception -> 0x0636 }
            java.lang.StringBuilder r9 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0636 }
            r9.<init>()     // Catch:{ Exception -> 0x0636 }
            r9.append(r13)     // Catch:{ Exception -> 0x0636 }
            r14 = r23
            r9.append(r14)     // Catch:{ Exception -> 0x0636 }
            java.lang.String r12 = " WHERE m.uid = %d AND m.date >= %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d"
            r9.append(r12)     // Catch:{ Exception -> 0x0636 }
            java.lang.String r9 = r9.toString()     // Catch:{ Exception -> 0x0636 }
            r12 = 5
            java.lang.Object[] r13 = new java.lang.Object[r12]     // Catch:{ Exception -> 0x0636 }
            java.lang.Long r12 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0636 }
            r14 = 0
            r13[r14] = r12     // Catch:{ Exception -> 0x0636 }
            java.lang.Integer r12 = java.lang.Integer.valueOf(r54)     // Catch:{ Exception -> 0x0636 }
            r14 = 1
            r13[r14] = r12     // Catch:{ Exception -> 0x0636 }
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)     // Catch:{ Exception -> 0x0636 }
            r12 = 2
            r13[r12] = r1     // Catch:{ Exception -> 0x0636 }
            java.lang.Integer r1 = java.lang.Integer.valueOf(r4)     // Catch:{ Exception -> 0x0636 }
            r4 = 3
            r13[r4] = r1     // Catch:{ Exception -> 0x0636 }
            java.lang.Integer r1 = java.lang.Integer.valueOf(r2)     // Catch:{ Exception -> 0x0636 }
            r4 = 4
            r13[r4] = r1     // Catch:{ Exception -> 0x0636 }
            java.lang.String r1 = java.lang.String.format(r7, r9, r13)     // Catch:{ Exception -> 0x0636 }
            r4 = 0
            java.lang.Object[] r7 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x0636 }
            org.telegram.SQLite.SQLiteCursor r1 = r3.queryFinalized(r1, r7)     // Catch:{ Exception -> 0x0636 }
            goto L_0x0742
        L_0x05f2:
            r14 = r23
            org.telegram.SQLite.SQLiteDatabase r3 = r11.database     // Catch:{ Exception -> 0x0636 }
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0636 }
            r4.<init>()     // Catch:{ Exception -> 0x0636 }
            r4.append(r13)     // Catch:{ Exception -> 0x0636 }
            r4.append(r14)     // Catch:{ Exception -> 0x0636 }
            java.lang.String r9 = " WHERE m.uid = %d AND m.date >= %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d"
            r4.append(r9)     // Catch:{ Exception -> 0x0636 }
            java.lang.String r4 = r4.toString()     // Catch:{ Exception -> 0x0636 }
            r9 = 4
            java.lang.Object[] r12 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x0636 }
            java.lang.Long r9 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0636 }
            r13 = 0
            r12[r13] = r9     // Catch:{ Exception -> 0x0636 }
            java.lang.Integer r9 = java.lang.Integer.valueOf(r54)     // Catch:{ Exception -> 0x0636 }
            r13 = 1
            r12[r13] = r9     // Catch:{ Exception -> 0x0636 }
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)     // Catch:{ Exception -> 0x0636 }
            r9 = 2
            r12[r9] = r1     // Catch:{ Exception -> 0x0636 }
            java.lang.Integer r1 = java.lang.Integer.valueOf(r2)     // Catch:{ Exception -> 0x0636 }
            r9 = 3
            r12[r9] = r1     // Catch:{ Exception -> 0x0636 }
            java.lang.String r1 = java.lang.String.format(r7, r4, r12)     // Catch:{ Exception -> 0x0636 }
            r4 = 0
            java.lang.Object[] r7 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x0636 }
            org.telegram.SQLite.SQLiteCursor r1 = r3.queryFinalized(r1, r7)     // Catch:{ Exception -> 0x0636 }
            goto L_0x0742
        L_0x0636:
            r0 = move-exception
            r1 = r52
            r3 = r0
            r4 = r8
            r12 = 0
            r17 = 0
        L_0x063e:
            r8 = r5
            r6 = r37
            goto L_0x14e6
        L_0x0643:
            r14 = r23
            if (r54 == 0) goto L_0x0751
            if (r1 == 0) goto L_0x0702
            org.telegram.SQLite.SQLiteDatabase r3 = r11.database     // Catch:{ Exception -> 0x0636 }
            r9 = 2
            java.lang.Object[] r12 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x0636 }
            java.lang.Long r9 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0636 }
            r15 = 0
            r12[r15] = r9     // Catch:{ Exception -> 0x0636 }
            java.lang.Integer r9 = java.lang.Integer.valueOf(r52)     // Catch:{ Exception -> 0x0636 }
            r17 = 1
            r12[r17] = r9     // Catch:{ Exception -> 0x0636 }
            java.lang.String r4 = java.lang.String.format(r7, r4, r12)     // Catch:{ Exception -> 0x0636 }
            java.lang.Object[] r9 = new java.lang.Object[r15]     // Catch:{ Exception -> 0x0636 }
            org.telegram.SQLite.SQLiteCursor r3 = r3.queryFinalized(r4, r9)     // Catch:{ Exception -> 0x0636 }
            boolean r4 = r3.next()     // Catch:{ Exception -> 0x0636 }
            if (r4 == 0) goto L_0x0672
            int r4 = r3.intValue(r15)     // Catch:{ Exception -> 0x0636 }
            goto L_0x0673
        L_0x0672:
            r4 = 0
        L_0x0673:
            r3.dispose()     // Catch:{ Exception -> 0x0636 }
            if (r4 == 0) goto L_0x06c1
            org.telegram.SQLite.SQLiteDatabase r3 = r11.database     // Catch:{ Exception -> 0x0636 }
            java.lang.StringBuilder r9 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0636 }
            r9.<init>()     // Catch:{ Exception -> 0x0636 }
            r9.append(r13)     // Catch:{ Exception -> 0x0636 }
            r9.append(r14)     // Catch:{ Exception -> 0x0636 }
            java.lang.String r12 = " WHERE m.uid = %d AND m.date <= %d AND m.mid < %d AND (m.mid >= %d OR m.mid < 0) ORDER BY m.date DESC, m.mid DESC LIMIT %d"
            r9.append(r12)     // Catch:{ Exception -> 0x0636 }
            java.lang.String r9 = r9.toString()     // Catch:{ Exception -> 0x0636 }
            r12 = 5
            java.lang.Object[] r13 = new java.lang.Object[r12]     // Catch:{ Exception -> 0x0636 }
            java.lang.Long r12 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0636 }
            r14 = 0
            r13[r14] = r12     // Catch:{ Exception -> 0x0636 }
            java.lang.Integer r12 = java.lang.Integer.valueOf(r54)     // Catch:{ Exception -> 0x0636 }
            r14 = 1
            r13[r14] = r12     // Catch:{ Exception -> 0x0636 }
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)     // Catch:{ Exception -> 0x0636 }
            r12 = 2
            r13[r12] = r1     // Catch:{ Exception -> 0x0636 }
            java.lang.Integer r1 = java.lang.Integer.valueOf(r4)     // Catch:{ Exception -> 0x0636 }
            r4 = 3
            r13[r4] = r1     // Catch:{ Exception -> 0x0636 }
            java.lang.Integer r1 = java.lang.Integer.valueOf(r2)     // Catch:{ Exception -> 0x0636 }
            r4 = 4
            r13[r4] = r1     // Catch:{ Exception -> 0x0636 }
            java.lang.String r1 = java.lang.String.format(r7, r9, r13)     // Catch:{ Exception -> 0x0636 }
            r4 = 0
            java.lang.Object[] r7 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x0636 }
            org.telegram.SQLite.SQLiteCursor r1 = r3.queryFinalized(r1, r7)     // Catch:{ Exception -> 0x0636 }
            goto L_0x0742
        L_0x06c1:
            org.telegram.SQLite.SQLiteDatabase r3 = r11.database     // Catch:{ Exception -> 0x0636 }
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0636 }
            r4.<init>()     // Catch:{ Exception -> 0x0636 }
            r4.append(r13)     // Catch:{ Exception -> 0x0636 }
            r4.append(r14)     // Catch:{ Exception -> 0x0636 }
            java.lang.String r9 = " WHERE m.uid = %d AND m.date <= %d AND m.mid < %d ORDER BY m.date DESC, m.mid DESC LIMIT %d"
            r4.append(r9)     // Catch:{ Exception -> 0x0636 }
            java.lang.String r4 = r4.toString()     // Catch:{ Exception -> 0x0636 }
            r9 = 4
            java.lang.Object[] r12 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x0636 }
            java.lang.Long r9 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0636 }
            r13 = 0
            r12[r13] = r9     // Catch:{ Exception -> 0x0636 }
            java.lang.Integer r9 = java.lang.Integer.valueOf(r54)     // Catch:{ Exception -> 0x0636 }
            r13 = 1
            r12[r13] = r9     // Catch:{ Exception -> 0x0636 }
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)     // Catch:{ Exception -> 0x0636 }
            r9 = 2
            r12[r9] = r1     // Catch:{ Exception -> 0x0636 }
            java.lang.Integer r1 = java.lang.Integer.valueOf(r2)     // Catch:{ Exception -> 0x0636 }
            r9 = 3
            r12[r9] = r1     // Catch:{ Exception -> 0x0636 }
            java.lang.String r1 = java.lang.String.format(r7, r4, r12)     // Catch:{ Exception -> 0x0636 }
            r4 = 0
            java.lang.Object[] r7 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x0636 }
            org.telegram.SQLite.SQLiteCursor r1 = r3.queryFinalized(r1, r7)     // Catch:{ Exception -> 0x0636 }
            goto L_0x0742
        L_0x0702:
            org.telegram.SQLite.SQLiteDatabase r1 = r11.database     // Catch:{ Exception -> 0x0636 }
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0636 }
            r4.<init>()     // Catch:{ Exception -> 0x0636 }
            r4.append(r13)     // Catch:{ Exception -> 0x0636 }
            r4.append(r14)     // Catch:{ Exception -> 0x0636 }
            java.lang.String r9 = " WHERE m.uid = %d AND m.date <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d,%d"
            r4.append(r9)     // Catch:{ Exception -> 0x0636 }
            java.lang.String r4 = r4.toString()     // Catch:{ Exception -> 0x0636 }
            r9 = 4
            java.lang.Object[] r12 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x0636 }
            java.lang.Long r9 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0636 }
            r13 = 0
            r12[r13] = r9     // Catch:{ Exception -> 0x0636 }
            java.lang.Integer r9 = java.lang.Integer.valueOf(r54)     // Catch:{ Exception -> 0x0636 }
            r13 = 1
            r12[r13] = r9     // Catch:{ Exception -> 0x0636 }
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)     // Catch:{ Exception -> 0x0636 }
            r9 = 2
            r12[r9] = r3     // Catch:{ Exception -> 0x0636 }
            java.lang.Integer r3 = java.lang.Integer.valueOf(r2)     // Catch:{ Exception -> 0x0636 }
            r9 = 3
            r12[r9] = r3     // Catch:{ Exception -> 0x0636 }
            java.lang.String r3 = java.lang.String.format(r7, r4, r12)     // Catch:{ Exception -> 0x0636 }
            r4 = 0
            java.lang.Object[] r7 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x0636 }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r3, r7)     // Catch:{ Exception -> 0x0636 }
        L_0x0742:
            r3 = r51
            r4 = r1
            r40 = r8
            r7 = r21
            r5 = r32
            r6 = 0
        L_0x074c:
            r8 = 0
            r1 = r52
            goto L_0x0var_
        L_0x0751:
            org.telegram.SQLite.SQLiteDatabase r1 = r11.database     // Catch:{ Exception -> 0x0636 }
            r4 = 1
            java.lang.Object[] r12 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x0636 }
            java.lang.Long r4 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0636 }
            r15 = 0
            r12[r15] = r4     // Catch:{ Exception -> 0x0636 }
            java.lang.String r4 = java.lang.String.format(r7, r9, r12)     // Catch:{ Exception -> 0x0636 }
            java.lang.Object[] r9 = new java.lang.Object[r15]     // Catch:{ Exception -> 0x0636 }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r4, r9)     // Catch:{ Exception -> 0x0636 }
            boolean r4 = r1.next()     // Catch:{ Exception -> 0x0636 }
            if (r4 == 0) goto L_0x0772
            int r4 = r1.intValue(r15)     // Catch:{ Exception -> 0x0636 }
            goto L_0x0773
        L_0x0772:
            r4 = 0
        L_0x0773:
            r1.dispose()     // Catch:{ Exception -> 0x082a }
            org.telegram.SQLite.SQLiteDatabase r1 = r11.database     // Catch:{ Exception -> 0x082a }
            java.lang.String r9 = "SELECT max(end) FROM messages_holes WHERE uid = %d"
            r12 = 1
            java.lang.Object[] r15 = new java.lang.Object[r12]     // Catch:{ Exception -> 0x082a }
            java.lang.Long r12 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x082a }
            r54 = r4
            r4 = 0
            r15[r4] = r12     // Catch:{ Exception -> 0x0828 }
            java.lang.String r9 = java.lang.String.format(r7, r9, r15)     // Catch:{ Exception -> 0x0828 }
            java.lang.Object[] r12 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x0828 }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r9, r12)     // Catch:{ Exception -> 0x0828 }
            boolean r9 = r1.next()     // Catch:{ Exception -> 0x0828 }
            if (r9 == 0) goto L_0x079b
            int r9 = r1.intValue(r4)     // Catch:{ Exception -> 0x0828 }
            goto L_0x079c
        L_0x079b:
            r9 = 0
        L_0x079c:
            r1.dispose()     // Catch:{ Exception -> 0x0828 }
            if (r9 == 0) goto L_0x07e2
            org.telegram.SQLite.SQLiteDatabase r1 = r11.database     // Catch:{ Exception -> 0x0828 }
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0828 }
            r4.<init>()     // Catch:{ Exception -> 0x0828 }
            r4.append(r13)     // Catch:{ Exception -> 0x0828 }
            r4.append(r14)     // Catch:{ Exception -> 0x0828 }
            java.lang.String r12 = " WHERE m.uid = %d AND (m.mid >= %d OR m.mid < 0) ORDER BY m.date DESC, m.mid DESC LIMIT %d,%d"
            r4.append(r12)     // Catch:{ Exception -> 0x0828 }
            java.lang.String r4 = r4.toString()     // Catch:{ Exception -> 0x0828 }
            r12 = 4
            java.lang.Object[] r13 = new java.lang.Object[r12]     // Catch:{ Exception -> 0x0828 }
            java.lang.Long r12 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0828 }
            r14 = 0
            r13[r14] = r12     // Catch:{ Exception -> 0x0828 }
            java.lang.Integer r9 = java.lang.Integer.valueOf(r9)     // Catch:{ Exception -> 0x0828 }
            r12 = 1
            r13[r12] = r9     // Catch:{ Exception -> 0x0828 }
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)     // Catch:{ Exception -> 0x0828 }
            r9 = 2
            r13[r9] = r3     // Catch:{ Exception -> 0x0828 }
            java.lang.Integer r3 = java.lang.Integer.valueOf(r2)     // Catch:{ Exception -> 0x0828 }
            r9 = 3
            r13[r9] = r3     // Catch:{ Exception -> 0x0828 }
            java.lang.String r3 = java.lang.String.format(r7, r4, r13)     // Catch:{ Exception -> 0x0828 }
            r4 = 0
            java.lang.Object[] r7 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x0828 }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r3, r7)     // Catch:{ Exception -> 0x0828 }
            goto L_0x081b
        L_0x07e2:
            org.telegram.SQLite.SQLiteDatabase r1 = r11.database     // Catch:{ Exception -> 0x0828 }
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0828 }
            r4.<init>()     // Catch:{ Exception -> 0x0828 }
            r4.append(r13)     // Catch:{ Exception -> 0x0828 }
            r4.append(r14)     // Catch:{ Exception -> 0x0828 }
            java.lang.String r9 = " WHERE m.uid = %d ORDER BY m.date DESC, m.mid DESC LIMIT %d,%d"
            r4.append(r9)     // Catch:{ Exception -> 0x0828 }
            java.lang.String r4 = r4.toString()     // Catch:{ Exception -> 0x0828 }
            r9 = 3
            java.lang.Object[] r12 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x0828 }
            java.lang.Long r9 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0828 }
            r13 = 0
            r12[r13] = r9     // Catch:{ Exception -> 0x0828 }
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)     // Catch:{ Exception -> 0x0828 }
            r9 = 1
            r12[r9] = r3     // Catch:{ Exception -> 0x0828 }
            java.lang.Integer r3 = java.lang.Integer.valueOf(r2)     // Catch:{ Exception -> 0x0828 }
            r9 = 2
            r12[r9] = r3     // Catch:{ Exception -> 0x0828 }
            java.lang.String r3 = java.lang.String.format(r7, r4, r12)     // Catch:{ Exception -> 0x0828 }
            r4 = 0
            java.lang.Object[] r7 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x0828 }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r3, r7)     // Catch:{ Exception -> 0x0828 }
        L_0x081b:
            r3 = r51
            r6 = r54
            r4 = r1
            r40 = r8
            r7 = r21
            r5 = r32
            goto L_0x074c
        L_0x0828:
            r0 = move-exception
            goto L_0x082d
        L_0x082a:
            r0 = move-exception
            r54 = r4
        L_0x082d:
            r1 = r52
            r17 = r54
            r3 = r0
            r4 = r8
        L_0x0833:
            r12 = 0
            goto L_0x063e
        L_0x0836:
            r14 = r23
            org.telegram.SQLite.SQLiteDatabase r3 = r11.database     // Catch:{ Exception -> 0x0ba0 }
            r13 = 1
            java.lang.Object[] r15 = new java.lang.Object[r13]     // Catch:{ Exception -> 0x0ba0 }
            java.lang.Long r13 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0ba0 }
            r23 = r1
            r1 = 0
            r15[r1] = r13     // Catch:{ Exception -> 0x0ba0 }
            java.lang.String r9 = java.lang.String.format(r7, r9, r15)     // Catch:{ Exception -> 0x0ba0 }
            java.lang.Object[] r13 = new java.lang.Object[r1]     // Catch:{ Exception -> 0x0ba0 }
            org.telegram.SQLite.SQLiteCursor r3 = r3.queryFinalized(r9, r13)     // Catch:{ Exception -> 0x0ba0 }
            boolean r9 = r3.next()     // Catch:{ Exception -> 0x0ba0 }
            if (r9 == 0) goto L_0x085b
            int r9 = r3.intValue(r1)     // Catch:{ Exception -> 0x0636 }
            goto L_0x085c
        L_0x085b:
            r9 = 0
        L_0x085c:
            r3.dispose()     // Catch:{ Exception -> 0x0b8b }
            r1 = 4
            if (r10 != r1) goto L_0x0955
            if (r53 == 0) goto L_0x0955
            org.telegram.SQLite.SQLiteDatabase r1 = r11.database     // Catch:{ Exception -> 0x094a }
            java.lang.String r3 = "SELECT max(mid) FROM messages_v2 WHERE uid = %d AND date <= %d AND mid > 0"
            r13 = 2
            java.lang.Object[] r15 = new java.lang.Object[r13]     // Catch:{ Exception -> 0x094a }
            java.lang.Long r13 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x094a }
            r40 = r8
            r8 = 0
            r15[r8] = r13     // Catch:{ Exception -> 0x0948 }
            java.lang.Integer r13 = java.lang.Integer.valueOf(r53)     // Catch:{ Exception -> 0x0948 }
            r17 = 1
            r15[r17] = r13     // Catch:{ Exception -> 0x0948 }
            java.lang.String r3 = java.lang.String.format(r7, r3, r15)     // Catch:{ Exception -> 0x0948 }
            java.lang.Object[] r13 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x0948 }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r3, r13)     // Catch:{ Exception -> 0x0948 }
            boolean r3 = r1.next()     // Catch:{ Exception -> 0x0948 }
            if (r3 == 0) goto L_0x089a
            int r3 = r1.intValue(r8)     // Catch:{ Exception -> 0x0891 }
            goto L_0x089b
        L_0x0891:
            r0 = move-exception
            r1 = r52
            r3 = r0
            r17 = r9
            r4 = r40
            goto L_0x0833
        L_0x089a:
            r3 = -1
        L_0x089b:
            r1.dispose()     // Catch:{ Exception -> 0x0948 }
            org.telegram.SQLite.SQLiteDatabase r1 = r11.database     // Catch:{ Exception -> 0x0948 }
            java.lang.String r8 = "SELECT min(mid) FROM messages_v2 WHERE uid = %d AND date >= %d AND mid > 0"
            r15 = 2
            java.lang.Object[] r13 = new java.lang.Object[r15]     // Catch:{ Exception -> 0x0948 }
            java.lang.Long r15 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0948 }
            r41 = r9
            r9 = 0
            r13[r9] = r15     // Catch:{ Exception -> 0x0946 }
            java.lang.Integer r15 = java.lang.Integer.valueOf(r53)     // Catch:{ Exception -> 0x0946 }
            r17 = 1
            r13[r17] = r15     // Catch:{ Exception -> 0x0946 }
            java.lang.String r8 = java.lang.String.format(r7, r8, r13)     // Catch:{ Exception -> 0x0946 }
            java.lang.Object[] r13 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x0946 }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r8, r13)     // Catch:{ Exception -> 0x0946 }
            boolean r8 = r1.next()     // Catch:{ Exception -> 0x0946 }
            if (r8 == 0) goto L_0x08cb
            int r8 = r1.intValue(r9)     // Catch:{ Exception -> 0x0946 }
            goto L_0x08cc
        L_0x08cb:
            r8 = -1
        L_0x08cc:
            r1.dispose()     // Catch:{ Exception -> 0x0946 }
            r1 = -1
            if (r3 == r1) goto L_0x0959
            if (r8 == r1) goto L_0x0959
            if (r3 != r8) goto L_0x08d8
            goto L_0x095b
        L_0x08d8:
            org.telegram.SQLite.SQLiteDatabase r1 = r11.database     // Catch:{ Exception -> 0x0946 }
            java.lang.String r9 = "SELECT start FROM messages_holes WHERE uid = %d AND start <= %d AND end > %d"
            r13 = 3
            java.lang.Object[] r15 = new java.lang.Object[r13]     // Catch:{ Exception -> 0x0946 }
            java.lang.Long r13 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0946 }
            r17 = 0
            r15[r17] = r13     // Catch:{ Exception -> 0x0946 }
            java.lang.Integer r13 = java.lang.Integer.valueOf(r3)     // Catch:{ Exception -> 0x0946 }
            r18 = 1
            r15[r18] = r13     // Catch:{ Exception -> 0x0946 }
            java.lang.Integer r13 = java.lang.Integer.valueOf(r3)     // Catch:{ Exception -> 0x0946 }
            r26 = 2
            r15[r26] = r13     // Catch:{ Exception -> 0x0946 }
            java.lang.String r9 = java.lang.String.format(r7, r9, r15)     // Catch:{ Exception -> 0x0946 }
            r13 = 0
            java.lang.Object[] r15 = new java.lang.Object[r13]     // Catch:{ Exception -> 0x0946 }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r9, r15)     // Catch:{ Exception -> 0x0946 }
            boolean r9 = r1.next()     // Catch:{ Exception -> 0x0946 }
            if (r9 == 0) goto L_0x0909
            r3 = -1
        L_0x0909:
            r1.dispose()     // Catch:{ Exception -> 0x0946 }
            r1 = -1
            if (r3 == r1) goto L_0x0959
            org.telegram.SQLite.SQLiteDatabase r1 = r11.database     // Catch:{ Exception -> 0x0946 }
            java.lang.String r3 = "SELECT start FROM messages_holes WHERE uid = %d AND start <= %d AND end > %d"
            r9 = 3
            java.lang.Object[] r13 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x0946 }
            java.lang.Long r9 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0946 }
            r15 = 0
            r13[r15] = r9     // Catch:{ Exception -> 0x0946 }
            java.lang.Integer r9 = java.lang.Integer.valueOf(r8)     // Catch:{ Exception -> 0x0946 }
            r15 = 1
            r13[r15] = r9     // Catch:{ Exception -> 0x0946 }
            java.lang.Integer r9 = java.lang.Integer.valueOf(r8)     // Catch:{ Exception -> 0x0946 }
            r15 = 2
            r13[r15] = r9     // Catch:{ Exception -> 0x0946 }
            java.lang.String r3 = java.lang.String.format(r7, r3, r13)     // Catch:{ Exception -> 0x0946 }
            r9 = 0
            java.lang.Object[] r13 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x0946 }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r3, r13)     // Catch:{ Exception -> 0x0946 }
            boolean r3 = r1.next()     // Catch:{ Exception -> 0x0946 }
            if (r3 == 0) goto L_0x093d
            r8 = -1
        L_0x093d:
            r1.dispose()     // Catch:{ Exception -> 0x0946 }
            r1 = -1
            if (r8 == r1) goto L_0x0959
            r1 = r8
            r3 = r1
            goto L_0x095f
        L_0x0946:
            r0 = move-exception
            goto L_0x094f
        L_0x0948:
            r0 = move-exception
            goto L_0x094d
        L_0x094a:
            r0 = move-exception
            r40 = r8
        L_0x094d:
            r41 = r9
        L_0x094f:
            r1 = r52
        L_0x0951:
            r3 = r0
            r8 = r5
            goto L_0x0b97
        L_0x0955:
            r40 = r8
            r41 = r9
        L_0x0959:
            r3 = r51
        L_0x095b:
            r8 = r52
            r1 = r23
        L_0x095f:
            if (r3 == 0) goto L_0x0963
            r9 = 1
            goto L_0x0964
        L_0x0963:
            r9 = 0
        L_0x0964:
            if (r9 == 0) goto L_0x09aa
            org.telegram.SQLite.SQLiteDatabase r13 = r11.database     // Catch:{ Exception -> 0x09a4 }
            java.lang.String r15 = "SELECT start FROM messages_holes WHERE uid = %d AND start < %d AND end > %d"
            r51 = r8
            r52 = r9
            r8 = 3
            java.lang.Object[] r9 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x09a2 }
            java.lang.Long r8 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x09a2 }
            r17 = 0
            r9[r17] = r8     // Catch:{ Exception -> 0x09a2 }
            java.lang.Integer r8 = java.lang.Integer.valueOf(r3)     // Catch:{ Exception -> 0x09a2 }
            r18 = 1
            r9[r18] = r8     // Catch:{ Exception -> 0x09a2 }
            java.lang.Integer r8 = java.lang.Integer.valueOf(r3)     // Catch:{ Exception -> 0x09a2 }
            r23 = 2
            r9[r23] = r8     // Catch:{ Exception -> 0x09a2 }
            java.lang.String r8 = java.lang.String.format(r7, r15, r9)     // Catch:{ Exception -> 0x09a2 }
            r9 = 0
            java.lang.Object[] r15 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x09a2 }
            org.telegram.SQLite.SQLiteCursor r8 = r13.queryFinalized(r8, r15)     // Catch:{ Exception -> 0x09a2 }
            boolean r9 = r8.next()     // Catch:{ Exception -> 0x09a2 }
            if (r9 == 0) goto L_0x099c
            r9 = 0
            goto L_0x099e
        L_0x099c:
            r9 = r52
        L_0x099e:
            r8.dispose()     // Catch:{ Exception -> 0x09a2 }
            goto L_0x09ae
        L_0x09a2:
            r0 = move-exception
            goto L_0x09a7
        L_0x09a4:
            r0 = move-exception
            r51 = r8
        L_0x09a7:
            r1 = r51
            goto L_0x0951
        L_0x09aa:
            r51 = r8
            r52 = r9
        L_0x09ae:
            if (r9 == 0) goto L_0x0ae4
            org.telegram.SQLite.SQLiteDatabase r8 = r11.database     // Catch:{ Exception -> 0x0add }
            java.lang.String r9 = "SELECT start FROM messages_holes WHERE uid = %d AND start >= %d ORDER BY start ASC LIMIT 1"
            r13 = 2
            java.lang.Object[] r15 = new java.lang.Object[r13]     // Catch:{ Exception -> 0x0add }
            java.lang.Long r13 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0add }
            r5 = 0
            r15[r5] = r13     // Catch:{ Exception -> 0x0add }
            java.lang.Integer r6 = java.lang.Integer.valueOf(r3)     // Catch:{ Exception -> 0x0add }
            r13 = 1
            r15[r13] = r6     // Catch:{ Exception -> 0x0add }
            java.lang.String r6 = java.lang.String.format(r7, r9, r15)     // Catch:{ Exception -> 0x0add }
            java.lang.Object[] r9 = new java.lang.Object[r5]     // Catch:{ Exception -> 0x0add }
            org.telegram.SQLite.SQLiteCursor r6 = r8.queryFinalized(r6, r9)     // Catch:{ Exception -> 0x0add }
            boolean r8 = r6.next()     // Catch:{ Exception -> 0x0add }
            if (r8 == 0) goto L_0x09da
            int r8 = r6.intValue(r5)     // Catch:{ Exception -> 0x0add }
            goto L_0x09db
        L_0x09da:
            r8 = 0
        L_0x09db:
            r6.dispose()     // Catch:{ Exception -> 0x0add }
            org.telegram.SQLite.SQLiteDatabase r5 = r11.database     // Catch:{ Exception -> 0x0add }
            r6 = 2
            java.lang.Object[] r9 = new java.lang.Object[r6]     // Catch:{ Exception -> 0x0add }
            java.lang.Long r6 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0add }
            r13 = 0
            r9[r13] = r6     // Catch:{ Exception -> 0x0add }
            java.lang.Integer r6 = java.lang.Integer.valueOf(r3)     // Catch:{ Exception -> 0x0add }
            r15 = 1
            r9[r15] = r6     // Catch:{ Exception -> 0x0add }
            java.lang.String r4 = java.lang.String.format(r7, r4, r9)     // Catch:{ Exception -> 0x0add }
            java.lang.Object[] r6 = new java.lang.Object[r13]     // Catch:{ Exception -> 0x0add }
            org.telegram.SQLite.SQLiteCursor r4 = r5.queryFinalized(r4, r6)     // Catch:{ Exception -> 0x0add }
            boolean r5 = r4.next()     // Catch:{ Exception -> 0x0add }
            if (r5 == 0) goto L_0x0a06
            int r5 = r4.intValue(r13)     // Catch:{ Exception -> 0x0add }
            goto L_0x0a07
        L_0x0a06:
            r5 = 1
        L_0x0a07:
            r4.dispose()     // Catch:{ Exception -> 0x0add }
            if (r8 != 0) goto L_0x0a6b
            r4 = 1
            if (r5 == r4) goto L_0x0a10
            goto L_0x0a6b
        L_0x0a10:
            org.telegram.SQLite.SQLiteDatabase r4 = r11.database     // Catch:{ Exception -> 0x0add }
            java.lang.StringBuilder r5 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0add }
            r5.<init>()     // Catch:{ Exception -> 0x0add }
            r5.append(r12)     // Catch:{ Exception -> 0x0add }
            r5.append(r14)     // Catch:{ Exception -> 0x0add }
            java.lang.String r6 = " WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM ("
            r5.append(r6)     // Catch:{ Exception -> 0x0add }
            r5.append(r14)     // Catch:{ Exception -> 0x0add }
            java.lang.String r6 = " WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)"
            r5.append(r6)     // Catch:{ Exception -> 0x0add }
            java.lang.String r5 = r5.toString()     // Catch:{ Exception -> 0x0add }
            r6 = 6
            java.lang.Object[] r8 = new java.lang.Object[r6]     // Catch:{ Exception -> 0x0add }
            java.lang.Long r6 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0add }
            r9 = 0
            r8[r9] = r6     // Catch:{ Exception -> 0x0add }
            java.lang.Integer r6 = java.lang.Integer.valueOf(r1)     // Catch:{ Exception -> 0x0add }
            r9 = 1
            r8[r9] = r6     // Catch:{ Exception -> 0x0add }
            int r6 = r2 / 2
            java.lang.Integer r6 = java.lang.Integer.valueOf(r6)     // Catch:{ Exception -> 0x0add }
            r9 = 2
            r8[r9] = r6     // Catch:{ Exception -> 0x0add }
            java.lang.Long r6 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0add }
            r9 = 3
            r8[r9] = r6     // Catch:{ Exception -> 0x0add }
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)     // Catch:{ Exception -> 0x0add }
            r6 = 4
            r8[r6] = r1     // Catch:{ Exception -> 0x0add }
            int r1 = r2 / 2
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)     // Catch:{ Exception -> 0x0add }
            r6 = 5
            r8[r6] = r1     // Catch:{ Exception -> 0x0add }
            java.lang.String r1 = java.lang.String.format(r7, r5, r8)     // Catch:{ Exception -> 0x0add }
            r5 = 0
            java.lang.Object[] r6 = new java.lang.Object[r5]     // Catch:{ Exception -> 0x0add }
            org.telegram.SQLite.SQLiteCursor r1 = r4.queryFinalized(r1, r6)     // Catch:{ Exception -> 0x0add }
            goto L_0x0ad9
        L_0x0a6b:
            if (r8 != 0) goto L_0x0a70
            r8 = 1000000000(0x3b9aca00, float:0.NUM)
        L_0x0a70:
            org.telegram.SQLite.SQLiteDatabase r4 = r11.database     // Catch:{ Exception -> 0x0add }
            java.lang.StringBuilder r6 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0add }
            r6.<init>()     // Catch:{ Exception -> 0x0add }
            r6.append(r12)     // Catch:{ Exception -> 0x0add }
            r6.append(r14)     // Catch:{ Exception -> 0x0add }
            java.lang.String r9 = " WHERE m.uid = %d AND m.mid <= %d AND (m.mid >= %d OR m.mid < 0) ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM ("
            r6.append(r9)     // Catch:{ Exception -> 0x0add }
            r6.append(r14)     // Catch:{ Exception -> 0x0add }
            java.lang.String r9 = " WHERE m.uid = %d AND m.mid > %d AND (m.mid <= %d OR m.mid < 0) ORDER BY m.date ASC, m.mid ASC LIMIT %d)"
            r6.append(r9)     // Catch:{ Exception -> 0x0add }
            java.lang.String r6 = r6.toString()     // Catch:{ Exception -> 0x0add }
            r9 = 8
            java.lang.Object[] r9 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x0add }
            java.lang.Long r12 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0add }
            r13 = 0
            r9[r13] = r12     // Catch:{ Exception -> 0x0add }
            java.lang.Integer r12 = java.lang.Integer.valueOf(r1)     // Catch:{ Exception -> 0x0add }
            r13 = 1
            r9[r13] = r12     // Catch:{ Exception -> 0x0add }
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)     // Catch:{ Exception -> 0x0add }
            r12 = 2
            r9[r12] = r5     // Catch:{ Exception -> 0x0add }
            int r5 = r2 / 2
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)     // Catch:{ Exception -> 0x0add }
            r12 = 3
            r9[r12] = r5     // Catch:{ Exception -> 0x0add }
            java.lang.Long r5 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0add }
            r12 = 4
            r9[r12] = r5     // Catch:{ Exception -> 0x0add }
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)     // Catch:{ Exception -> 0x0add }
            r5 = 5
            r9[r5] = r1     // Catch:{ Exception -> 0x0add }
            java.lang.Integer r1 = java.lang.Integer.valueOf(r8)     // Catch:{ Exception -> 0x0add }
            r5 = 6
            r9[r5] = r1     // Catch:{ Exception -> 0x0add }
            int r1 = r2 / 2
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)     // Catch:{ Exception -> 0x0add }
            r5 = 7
            r9[r5] = r1     // Catch:{ Exception -> 0x0add }
            java.lang.String r1 = java.lang.String.format(r7, r6, r9)     // Catch:{ Exception -> 0x0add }
            r5 = 0
            java.lang.Object[] r6 = new java.lang.Object[r5]     // Catch:{ Exception -> 0x0add }
            org.telegram.SQLite.SQLiteCursor r1 = r4.queryFinalized(r1, r6)     // Catch:{ Exception -> 0x0add }
        L_0x0ad9:
            r15 = r21
            goto L_0x0b7f
        L_0x0add:
            r0 = move-exception
        L_0x0ade:
            r8 = r47
            r1 = r51
            goto L_0x0b96
        L_0x0ae4:
            r4 = 2
            if (r10 != r4) goto L_0x0b7c
            org.telegram.SQLite.SQLiteDatabase r4 = r11.database     // Catch:{ Exception -> 0x0b77 }
            java.lang.String r5 = "SELECT COUNT(*) FROM messages_v2 WHERE uid = %d AND mid != 0 AND out = 0 AND read_state IN(0,2)"
            r6 = 1
            java.lang.Object[] r8 = new java.lang.Object[r6]     // Catch:{ Exception -> 0x0b77 }
            java.lang.Long r6 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0b77 }
            r9 = 0
            r8[r9] = r6     // Catch:{ Exception -> 0x0b77 }
            java.lang.String r5 = java.lang.String.format(r7, r5, r8)     // Catch:{ Exception -> 0x0b77 }
            java.lang.Object[] r6 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x0b77 }
            org.telegram.SQLite.SQLiteCursor r4 = r4.queryFinalized(r5, r6)     // Catch:{ Exception -> 0x0b77 }
            boolean r5 = r4.next()     // Catch:{ Exception -> 0x0b77 }
            if (r5 == 0) goto L_0x0b0a
            int r5 = r4.intValue(r9)     // Catch:{ Exception -> 0x0add }
            goto L_0x0b0b
        L_0x0b0a:
            r5 = 0
        L_0x0b0b:
            r4.dispose()     // Catch:{ Exception -> 0x0b77 }
            r15 = r21
            if (r5 != r15) goto L_0x0b7e
            org.telegram.SQLite.SQLiteDatabase r4 = r11.database     // Catch:{ Exception -> 0x0b6e }
            java.lang.StringBuilder r5 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0b6e }
            r5.<init>()     // Catch:{ Exception -> 0x0b6e }
            r5.append(r12)     // Catch:{ Exception -> 0x0b6e }
            r5.append(r14)     // Catch:{ Exception -> 0x0b6e }
            java.lang.String r6 = " WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM ("
            r5.append(r6)     // Catch:{ Exception -> 0x0b6e }
            r5.append(r14)     // Catch:{ Exception -> 0x0b6e }
            java.lang.String r6 = " WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)"
            r5.append(r6)     // Catch:{ Exception -> 0x0b6e }
            java.lang.String r5 = r5.toString()     // Catch:{ Exception -> 0x0b6e }
            r6 = 6
            java.lang.Object[] r8 = new java.lang.Object[r6]     // Catch:{ Exception -> 0x0b6e }
            java.lang.Long r6 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0b6e }
            r9 = 0
            r8[r9] = r6     // Catch:{ Exception -> 0x0b6e }
            java.lang.Integer r6 = java.lang.Integer.valueOf(r1)     // Catch:{ Exception -> 0x0b6e }
            r9 = 1
            r8[r9] = r6     // Catch:{ Exception -> 0x0b6e }
            int r6 = r2 / 2
            java.lang.Integer r6 = java.lang.Integer.valueOf(r6)     // Catch:{ Exception -> 0x0b6e }
            r9 = 2
            r8[r9] = r6     // Catch:{ Exception -> 0x0b6e }
            java.lang.Long r6 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0b6e }
            r9 = 3
            r8[r9] = r6     // Catch:{ Exception -> 0x0b6e }
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)     // Catch:{ Exception -> 0x0b6e }
            r6 = 4
            r8[r6] = r1     // Catch:{ Exception -> 0x0b6e }
            int r1 = r2 / 2
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)     // Catch:{ Exception -> 0x0b6e }
            r6 = 5
            r8[r6] = r1     // Catch:{ Exception -> 0x0b6e }
            java.lang.String r1 = java.lang.String.format(r7, r5, r8)     // Catch:{ Exception -> 0x0b6e }
            r5 = 0
            java.lang.Object[] r6 = new java.lang.Object[r5]     // Catch:{ Exception -> 0x0b6e }
            org.telegram.SQLite.SQLiteCursor r1 = r4.queryFinalized(r1, r6)     // Catch:{ Exception -> 0x0b6e }
            r4 = 1
            goto L_0x0b80
        L_0x0b6e:
            r0 = move-exception
            r8 = r47
            r1 = r51
            r3 = r0
            r21 = r15
            goto L_0x0b97
        L_0x0b77:
            r0 = move-exception
            r15 = r21
            goto L_0x0ade
        L_0x0b7c:
            r15 = r21
        L_0x0b7e:
            r1 = 0
        L_0x0b7f:
            r4 = 0
        L_0x0b80:
            r8 = r4
            r7 = r15
            r5 = r32
            r6 = r41
            r4 = r1
            r1 = r51
            goto L_0x0var_
        L_0x0b8b:
            r0 = move-exception
            r40 = r8
            r41 = r9
            r15 = r21
            r8 = r47
            r1 = r52
        L_0x0b96:
            r3 = r0
        L_0x0b97:
            r6 = r37
            r4 = r40
            r17 = r41
            r12 = 0
            goto L_0x14e6
        L_0x0ba0:
            r0 = move-exception
            r40 = r8
            r15 = r21
            r8 = r47
            r1 = r52
            r3 = r0
            r6 = r37
            r4 = r40
            goto L_0x0bc3
        L_0x0baf:
            r0 = move-exception
            r15 = r21
            r8 = r47
            r1 = r52
            r3 = r0
            goto L_0x0bc0
        L_0x0bb8:
            r0 = move-exception
            r8 = r47
            r1 = r52
            r3 = r0
        L_0x0bbe:
            r21 = r15
        L_0x0bc0:
            r6 = r37
            r4 = 0
        L_0x0bc3:
            r12 = 0
            r17 = 0
            goto L_0x14e6
        L_0x0bc8:
            r11 = r46
            r10 = r56
            r36 = r2
            r37 = r3
            r35 = r4
            r38 = r7
            r30 = r9
            r29 = r15
            r4 = r21
            r14 = r23
            r2 = r51
            java.lang.String r1 = "SELECT COUNT(*) FROM messages_v2 WHERE uid = %d AND mid <= %d AND out = 0 AND read_state IN(0,2)"
            java.lang.String r3 = "SELECT max(mid), max(date) FROM messages_v2 WHERE uid = %d AND out = 0 AND read_state IN(0,2) AND mid < 0"
            java.lang.String r5 = "SELECT min(mid) FROM messages_v2 WHERE uid = %d AND mid < 0"
            r6 = 3
            if (r10 != r6) goto L_0x0ce2
            if (r54 != 0) goto L_0x0ce2
            org.telegram.SQLite.SQLiteDatabase r6 = r11.database     // Catch:{ Exception -> 0x0cd7 }
            java.util.Locale r7 = java.util.Locale.US     // Catch:{ Exception -> 0x0cd7 }
            r8 = 1
            java.lang.Object[] r9 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x0cd7 }
            java.lang.Long r8 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0cd7 }
            r15 = 0
            r9[r15] = r8     // Catch:{ Exception -> 0x0cd7 }
            java.lang.String r8 = java.lang.String.format(r7, r5, r9)     // Catch:{ Exception -> 0x0cd7 }
            java.lang.Object[] r9 = new java.lang.Object[r15]     // Catch:{ Exception -> 0x0cd7 }
            org.telegram.SQLite.SQLiteCursor r6 = r6.queryFinalized(r8, r9)     // Catch:{ Exception -> 0x0cd7 }
            boolean r8 = r6.next()     // Catch:{ Exception -> 0x0cd7 }
            if (r8 == 0) goto L_0x0c0c
            int r8 = r6.intValue(r15)     // Catch:{ Exception -> 0x0cd7 }
            goto L_0x0c0d
        L_0x0c0c:
            r8 = 0
        L_0x0c0d:
            r6.dispose()     // Catch:{ Exception -> 0x0cc3 }
            org.telegram.SQLite.SQLiteDatabase r6 = r11.database     // Catch:{ Exception -> 0x0cc3 }
            r9 = 1
            java.lang.Object[] r15 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x0cc3 }
            java.lang.Long r9 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0cc3 }
            r21 = r8
            r8 = 0
            r15[r8] = r9     // Catch:{ Exception -> 0x0cc1 }
            java.lang.String r9 = java.lang.String.format(r7, r3, r15)     // Catch:{ Exception -> 0x0cc1 }
            java.lang.Object[] r15 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x0cc1 }
            org.telegram.SQLite.SQLiteCursor r6 = r6.queryFinalized(r9, r15)     // Catch:{ Exception -> 0x0cc1 }
            boolean r9 = r6.next()     // Catch:{ Exception -> 0x0cc1 }
            if (r9 == 0) goto L_0x0CLASSNAME
            int r9 = r6.intValue(r8)     // Catch:{ Exception -> 0x0cc1 }
            r8 = 1
            int r15 = r6.intValue(r8)     // Catch:{ Exception -> 0x0cc1 }
            goto L_0x0c3a
        L_0x0CLASSNAME:
            r9 = 0
            r15 = 0
        L_0x0c3a:
            r6.dispose()     // Catch:{ Exception -> 0x0ca9 }
            if (r9 == 0) goto L_0x0ca2
            org.telegram.SQLite.SQLiteDatabase r6 = r11.database     // Catch:{ Exception -> 0x0CLASSNAME }
            r23 = r15
            r8 = 2
            java.lang.Object[] r15 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x0CLASSNAME }
            java.lang.Long r8 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0CLASSNAME }
            r31 = r12
            r12 = 0
            r15[r12] = r8     // Catch:{ Exception -> 0x0CLASSNAME }
            java.lang.Integer r8 = java.lang.Integer.valueOf(r9)     // Catch:{ Exception -> 0x0CLASSNAME }
            r17 = 1
            r15[r17] = r8     // Catch:{ Exception -> 0x0CLASSNAME }
            java.lang.String r7 = java.lang.String.format(r7, r1, r15)     // Catch:{ Exception -> 0x0CLASSNAME }
            java.lang.Object[] r8 = new java.lang.Object[r12]     // Catch:{ Exception -> 0x0CLASSNAME }
            org.telegram.SQLite.SQLiteCursor r6 = r6.queryFinalized(r7, r8)     // Catch:{ Exception -> 0x0CLASSNAME }
            boolean r7 = r6.next()     // Catch:{ Exception -> 0x0CLASSNAME }
            if (r7 == 0) goto L_0x0c6c
            int r7 = r6.intValue(r12)     // Catch:{ Exception -> 0x0CLASSNAME }
            goto L_0x0c6d
        L_0x0c6c:
            r7 = 0
        L_0x0c6d:
            r6.dispose()     // Catch:{ Exception -> 0x0CLASSNAME }
            r21 = r9
            r6 = 3
            goto L_0x0cea
        L_0x0CLASSNAME:
            r0 = move-exception
            r1 = r52
            r3 = r0
            r21 = r7
            r31 = r9
            r33 = r23
            r6 = r37
            r4 = 1
            r12 = 0
            r17 = 0
            goto L_0x0c9a
        L_0x0CLASSNAME:
            r0 = move-exception
            goto L_0x0c8b
        L_0x0CLASSNAME:
            r0 = move-exception
            r23 = r15
        L_0x0c8b:
            r1 = r52
            r3 = r0
            r31 = r9
            r33 = r23
            r6 = r37
            r4 = 1
            r12 = 0
            r17 = 0
            r21 = 0
        L_0x0c9a:
            r32 = 0
            r34 = 0
            r8 = r47
            goto L_0x14e6
        L_0x0ca2:
            r31 = r12
            r23 = r15
            r6 = 3
            r7 = 0
            goto L_0x0cea
        L_0x0ca9:
            r0 = move-exception
            r23 = r15
            r8 = r47
            r1 = r52
            r3 = r0
            r31 = r21
            r33 = r23
            r6 = r37
            r4 = 1
            r12 = 0
            r17 = 0
            r21 = 0
            r32 = 0
            goto L_0x14e4
        L_0x0cc1:
            r0 = move-exception
            goto L_0x0cc6
        L_0x0cc3:
            r0 = move-exception
            r21 = r8
        L_0x0cc6:
            r8 = r47
            r1 = r52
            r3 = r0
            r31 = r21
            r6 = r37
            r4 = 1
            r12 = 0
            r17 = 0
            r21 = 0
            goto L_0x14e0
        L_0x0cd7:
            r0 = move-exception
            r8 = r47
            r1 = r52
            r3 = r0
            r6 = r37
            r4 = 1
            goto L_0x14d9
        L_0x0ce2:
            r31 = r12
            r6 = 3
            r7 = 0
            r21 = 0
            r23 = 0
        L_0x0cea:
            if (r10 == r6) goto L_0x0ee1
            r6 = 4
            if (r10 != r6) goto L_0x0cf1
            goto L_0x0ee1
        L_0x0cf1:
            r6 = 1
            if (r10 != r6) goto L_0x0d4e
            org.telegram.SQLite.SQLiteDatabase r1 = r11.database     // Catch:{ Exception -> 0x0d40 }
            java.util.Locale r3 = java.util.Locale.US     // Catch:{ Exception -> 0x0d40 }
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0d40 }
            r4.<init>()     // Catch:{ Exception -> 0x0d40 }
            r4.append(r13)     // Catch:{ Exception -> 0x0d40 }
            r4.append(r14)     // Catch:{ Exception -> 0x0d40 }
            java.lang.String r5 = " WHERE m.uid = %d AND m.mid < %d ORDER BY m.mid DESC LIMIT %d"
            r4.append(r5)     // Catch:{ Exception -> 0x0d40 }
            java.lang.String r4 = r4.toString()     // Catch:{ Exception -> 0x0d40 }
            r5 = 3
            java.lang.Object[] r6 = new java.lang.Object[r5]     // Catch:{ Exception -> 0x0d40 }
            java.lang.Long r5 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0d40 }
            r8 = 0
            r6[r8] = r5     // Catch:{ Exception -> 0x0d40 }
            java.lang.Integer r5 = java.lang.Integer.valueOf(r52)     // Catch:{ Exception -> 0x0d40 }
            r8 = 1
            r6[r8] = r5     // Catch:{ Exception -> 0x0d40 }
            java.lang.Integer r5 = java.lang.Integer.valueOf(r51)     // Catch:{ Exception -> 0x0d40 }
            r8 = 2
            r6[r8] = r5     // Catch:{ Exception -> 0x0d40 }
            java.lang.String r3 = java.lang.String.format(r3, r4, r6)     // Catch:{ Exception -> 0x0d40 }
            r4 = 0
            java.lang.Object[] r5 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x0d40 }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r3, r5)     // Catch:{ Exception -> 0x0d40 }
        L_0x0d2f:
            r3 = r52
            r4 = r1
            r31 = r21
            r33 = r23
            r5 = 0
            r6 = 0
            r8 = 0
            r34 = 0
            r40 = 1
        L_0x0d3d:
            r1 = r3
            goto L_0x0var_
        L_0x0d40:
            r0 = move-exception
            r8 = r47
            r1 = r52
            r3 = r0
            r31 = r21
            r33 = r23
            r6 = r37
            goto L_0x14b5
        L_0x0d4e:
            if (r54 == 0) goto L_0x0dd1
            if (r52 == 0) goto L_0x0d8e
            org.telegram.SQLite.SQLiteDatabase r1 = r11.database     // Catch:{ Exception -> 0x0d40 }
            java.util.Locale r3 = java.util.Locale.US     // Catch:{ Exception -> 0x0d40 }
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0d40 }
            r4.<init>()     // Catch:{ Exception -> 0x0d40 }
            r4.append(r13)     // Catch:{ Exception -> 0x0d40 }
            r4.append(r14)     // Catch:{ Exception -> 0x0d40 }
            java.lang.String r5 = " WHERE m.uid = %d AND m.mid > %d ORDER BY m.mid ASC LIMIT %d"
            r4.append(r5)     // Catch:{ Exception -> 0x0d40 }
            java.lang.String r4 = r4.toString()     // Catch:{ Exception -> 0x0d40 }
            r5 = 3
            java.lang.Object[] r6 = new java.lang.Object[r5]     // Catch:{ Exception -> 0x0d40 }
            java.lang.Long r5 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0d40 }
            r8 = 0
            r6[r8] = r5     // Catch:{ Exception -> 0x0d40 }
            java.lang.Integer r5 = java.lang.Integer.valueOf(r52)     // Catch:{ Exception -> 0x0d40 }
            r8 = 1
            r6[r8] = r5     // Catch:{ Exception -> 0x0d40 }
            java.lang.Integer r5 = java.lang.Integer.valueOf(r51)     // Catch:{ Exception -> 0x0d40 }
            r8 = 2
            r6[r8] = r5     // Catch:{ Exception -> 0x0d40 }
            java.lang.String r3 = java.lang.String.format(r3, r4, r6)     // Catch:{ Exception -> 0x0d40 }
            r4 = 0
            java.lang.Object[] r5 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x0d40 }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r3, r5)     // Catch:{ Exception -> 0x0d40 }
            goto L_0x0d2f
        L_0x0d8e:
            org.telegram.SQLite.SQLiteDatabase r1 = r11.database     // Catch:{ Exception -> 0x0d40 }
            java.util.Locale r3 = java.util.Locale.US     // Catch:{ Exception -> 0x0d40 }
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0d40 }
            r4.<init>()     // Catch:{ Exception -> 0x0d40 }
            r4.append(r13)     // Catch:{ Exception -> 0x0d40 }
            r4.append(r14)     // Catch:{ Exception -> 0x0d40 }
            java.lang.String r5 = " WHERE m.uid = %d AND m.date <= %d ORDER BY m.mid ASC LIMIT %d,%d"
            r4.append(r5)     // Catch:{ Exception -> 0x0d40 }
            java.lang.String r4 = r4.toString()     // Catch:{ Exception -> 0x0d40 }
            r5 = 4
            java.lang.Object[] r6 = new java.lang.Object[r5]     // Catch:{ Exception -> 0x0d40 }
            java.lang.Long r5 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0d40 }
            r8 = 0
            r6[r8] = r5     // Catch:{ Exception -> 0x0d40 }
            java.lang.Integer r5 = java.lang.Integer.valueOf(r54)     // Catch:{ Exception -> 0x0d40 }
            r9 = 1
            r6[r9] = r5     // Catch:{ Exception -> 0x0d40 }
            java.lang.Integer r5 = java.lang.Integer.valueOf(r8)     // Catch:{ Exception -> 0x0d40 }
            r9 = 2
            r6[r9] = r5     // Catch:{ Exception -> 0x0d40 }
            java.lang.Integer r5 = java.lang.Integer.valueOf(r51)     // Catch:{ Exception -> 0x0d40 }
            r9 = 3
            r6[r9] = r5     // Catch:{ Exception -> 0x0d40 }
            java.lang.String r3 = java.lang.String.format(r3, r4, r6)     // Catch:{ Exception -> 0x0d40 }
            java.lang.Object[] r4 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x0d40 }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r3, r4)     // Catch:{ Exception -> 0x0d40 }
            goto L_0x0d2f
        L_0x0dd1:
            r6 = 2
            if (r10 != r6) goto L_0x0e50
            org.telegram.SQLite.SQLiteDatabase r6 = r11.database     // Catch:{ Exception -> 0x0d40 }
            java.util.Locale r8 = java.util.Locale.US     // Catch:{ Exception -> 0x0d40 }
            r9 = 1
            java.lang.Object[] r12 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x0d40 }
            java.lang.Long r9 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0d40 }
            r15 = 0
            r12[r15] = r9     // Catch:{ Exception -> 0x0d40 }
            java.lang.String r5 = java.lang.String.format(r8, r5, r12)     // Catch:{ Exception -> 0x0d40 }
            java.lang.Object[] r9 = new java.lang.Object[r15]     // Catch:{ Exception -> 0x0d40 }
            org.telegram.SQLite.SQLiteCursor r5 = r6.queryFinalized(r5, r9)     // Catch:{ Exception -> 0x0d40 }
            boolean r6 = r5.next()     // Catch:{ Exception -> 0x0d40 }
            if (r6 == 0) goto L_0x0df7
            int r6 = r5.intValue(r15)     // Catch:{ Exception -> 0x0d40 }
            goto L_0x0df8
        L_0x0df7:
            r6 = 0
        L_0x0df8:
            r5.dispose()     // Catch:{ Exception -> 0x0ecf }
            org.telegram.SQLite.SQLiteDatabase r5 = r11.database     // Catch:{ Exception -> 0x0ecf }
            r9 = 1
            java.lang.Object[] r12 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x0ecf }
            java.lang.Long r9 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0ecf }
            r15 = 0
            r12[r15] = r9     // Catch:{ Exception -> 0x0ecf }
            java.lang.String r3 = java.lang.String.format(r8, r3, r12)     // Catch:{ Exception -> 0x0ecf }
            java.lang.Object[] r9 = new java.lang.Object[r15]     // Catch:{ Exception -> 0x0ecf }
            org.telegram.SQLite.SQLiteCursor r3 = r5.queryFinalized(r3, r9)     // Catch:{ Exception -> 0x0ecf }
            boolean r5 = r3.next()     // Catch:{ Exception -> 0x0ecf }
            if (r5 == 0) goto L_0x0e20
            int r21 = r3.intValue(r15)     // Catch:{ Exception -> 0x0ecf }
            r5 = 1
            int r23 = r3.intValue(r5)     // Catch:{ Exception -> 0x0ecf }
        L_0x0e20:
            r3.dispose()     // Catch:{ Exception -> 0x0ecf }
            if (r21 == 0) goto L_0x0e51
            org.telegram.SQLite.SQLiteDatabase r3 = r11.database     // Catch:{ Exception -> 0x0ecf }
            r5 = 2
            java.lang.Object[] r9 = new java.lang.Object[r5]     // Catch:{ Exception -> 0x0ecf }
            java.lang.Long r5 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0ecf }
            r12 = 0
            r9[r12] = r5     // Catch:{ Exception -> 0x0ecf }
            java.lang.Integer r5 = java.lang.Integer.valueOf(r21)     // Catch:{ Exception -> 0x0ecf }
            r15 = 1
            r9[r15] = r5     // Catch:{ Exception -> 0x0ecf }
            java.lang.String r1 = java.lang.String.format(r8, r1, r9)     // Catch:{ Exception -> 0x0ecf }
            java.lang.Object[] r5 = new java.lang.Object[r12]     // Catch:{ Exception -> 0x0ecf }
            org.telegram.SQLite.SQLiteCursor r1 = r3.queryFinalized(r1, r5)     // Catch:{ Exception -> 0x0ecf }
            boolean r3 = r1.next()     // Catch:{ Exception -> 0x0ecf }
            if (r3 == 0) goto L_0x0e4c
            int r7 = r1.intValue(r12)     // Catch:{ Exception -> 0x0ecf }
        L_0x0e4c:
            r1.dispose()     // Catch:{ Exception -> 0x0ecf }
            goto L_0x0e51
        L_0x0e50:
            r6 = 0
        L_0x0e51:
            if (r2 > r7) goto L_0x0e60
            if (r7 >= r4) goto L_0x0e56
            goto L_0x0e60
        L_0x0e56:
            int r1 = r7 - r2
            int r2 = r2 + 10
            r45 = r2
            r2 = r1
            r1 = r45
            goto L_0x0e6d
        L_0x0e60:
            int r1 = r7 + 10
            int r1 = java.lang.Math.max(r2, r1)     // Catch:{ Exception -> 0x0ecf }
            r2 = 0
            if (r7 >= r4) goto L_0x0e6d
            r6 = 0
            r7 = 0
            r21 = 0
        L_0x0e6d:
            org.telegram.SQLite.SQLiteDatabase r3 = r11.database     // Catch:{ Exception -> 0x0eb8 }
            java.util.Locale r4 = java.util.Locale.US     // Catch:{ Exception -> 0x0eb8 }
            java.lang.StringBuilder r5 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0eb8 }
            r5.<init>()     // Catch:{ Exception -> 0x0eb8 }
            r5.append(r13)     // Catch:{ Exception -> 0x0eb8 }
            r5.append(r14)     // Catch:{ Exception -> 0x0eb8 }
            java.lang.String r8 = " WHERE m.uid = %d ORDER BY m.mid ASC LIMIT %d,%d"
            r5.append(r8)     // Catch:{ Exception -> 0x0eb8 }
            java.lang.String r5 = r5.toString()     // Catch:{ Exception -> 0x0eb8 }
            r8 = 3
            java.lang.Object[] r9 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x0eb8 }
            java.lang.Long r8 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x0eb8 }
            r12 = 0
            r9[r12] = r8     // Catch:{ Exception -> 0x0eb8 }
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)     // Catch:{ Exception -> 0x0eb8 }
            r8 = 1
            r9[r8] = r2     // Catch:{ Exception -> 0x0eb8 }
            java.lang.Integer r2 = java.lang.Integer.valueOf(r1)     // Catch:{ Exception -> 0x0eb8 }
            r8 = 2
            r9[r8] = r2     // Catch:{ Exception -> 0x0eb8 }
            java.lang.String r2 = java.lang.String.format(r4, r5, r9)     // Catch:{ Exception -> 0x0eb8 }
            r4 = 0
            java.lang.Object[] r5 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x0eb8 }
            org.telegram.SQLite.SQLiteCursor r2 = r3.queryFinalized(r2, r5)     // Catch:{ Exception -> 0x0eb8 }
            r3 = r52
            r4 = r2
            r31 = r21
            r33 = r23
            r5 = 0
            r8 = 0
            r34 = 0
            r40 = 1
            r2 = r1
            goto L_0x0d3d
        L_0x0eb8:
            r0 = move-exception
            r8 = r47
            r3 = r0
            r2 = r1
            r17 = r6
            r31 = r21
            r33 = r23
            r6 = r37
            r4 = 1
            r12 = 0
            r32 = 0
            r34 = 0
            r1 = r52
            goto L_0x14bd
        L_0x0ecf:
            r0 = move-exception
            r8 = r47
            r1 = r52
            r3 = r0
            r17 = r6
            r31 = r21
            r33 = r23
            r6 = r37
        L_0x0edd:
            r4 = 1
            r12 = 0
            goto L_0x14b9
        L_0x0ee1:
            org.telegram.SQLite.SQLiteDatabase r1 = r11.database     // Catch:{ Exception -> 0x14a9 }
            java.util.Locale r3 = java.util.Locale.US     // Catch:{ Exception -> 0x14a9 }
            r4 = 1
            java.lang.Object[] r6 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x14a9 }
            java.lang.Long r4 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x14a9 }
            r8 = 0
            r6[r8] = r4     // Catch:{ Exception -> 0x14a9 }
            java.lang.String r4 = java.lang.String.format(r3, r5, r6)     // Catch:{ Exception -> 0x14a9 }
            java.lang.Object[] r5 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x14a9 }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r4, r5)     // Catch:{ Exception -> 0x14a9 }
            boolean r4 = r1.next()     // Catch:{ Exception -> 0x14a9 }
            if (r4 == 0) goto L_0x0var_
            int r4 = r1.intValue(r8)     // Catch:{ Exception -> 0x0d40 }
            goto L_0x0var_
        L_0x0var_:
            r4 = 0
        L_0x0var_:
            r1.dispose()     // Catch:{ Exception -> 0x1499 }
            org.telegram.SQLite.SQLiteDatabase r1 = r11.database     // Catch:{ Exception -> 0x1499 }
            java.lang.StringBuilder r5 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x1499 }
            r5.<init>()     // Catch:{ Exception -> 0x1499 }
            r6 = r31
            r5.append(r6)     // Catch:{ Exception -> 0x1499 }
            r5.append(r14)     // Catch:{ Exception -> 0x1499 }
            java.lang.String r6 = " WHERE m.uid = %d AND m.mid <= %d ORDER BY m.mid DESC LIMIT %d) UNION SELECT * FROM ("
            r5.append(r6)     // Catch:{ Exception -> 0x1499 }
            r5.append(r14)     // Catch:{ Exception -> 0x1499 }
            java.lang.String r6 = " WHERE m.uid = %d AND m.mid > %d ORDER BY m.mid ASC LIMIT %d)"
            r5.append(r6)     // Catch:{ Exception -> 0x1499 }
            java.lang.String r5 = r5.toString()     // Catch:{ Exception -> 0x1499 }
            r6 = 6
            java.lang.Object[] r8 = new java.lang.Object[r6]     // Catch:{ Exception -> 0x1499 }
            java.lang.Long r6 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x1499 }
            r9 = 0
            r8[r9] = r6     // Catch:{ Exception -> 0x1499 }
            java.lang.Integer r6 = java.lang.Integer.valueOf(r52)     // Catch:{ Exception -> 0x1499 }
            r9 = 1
            r8[r9] = r6     // Catch:{ Exception -> 0x1499 }
            int r6 = r2 / 2
            java.lang.Integer r6 = java.lang.Integer.valueOf(r6)     // Catch:{ Exception -> 0x1499 }
            r9 = 2
            r8[r9] = r6     // Catch:{ Exception -> 0x1499 }
            java.lang.Long r6 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x1499 }
            r9 = 3
            r8[r9] = r6     // Catch:{ Exception -> 0x1499 }
            java.lang.Integer r6 = java.lang.Integer.valueOf(r52)     // Catch:{ Exception -> 0x1499 }
            r9 = 4
            r8[r9] = r6     // Catch:{ Exception -> 0x1499 }
            int r6 = r2 / 2
            java.lang.Integer r6 = java.lang.Integer.valueOf(r6)     // Catch:{ Exception -> 0x1499 }
            r9 = 5
            r8[r9] = r6     // Catch:{ Exception -> 0x1499 }
            java.lang.String r3 = java.lang.String.format(r3, r5, r8)     // Catch:{ Exception -> 0x1499 }
            r5 = 0
            java.lang.Object[] r6 = new java.lang.Object[r5]     // Catch:{ Exception -> 0x1499 }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r3, r6)     // Catch:{ Exception -> 0x1499 }
            r3 = r52
            r6 = r4
            r31 = r21
            r33 = r23
            r5 = 0
            r8 = 0
            r34 = 0
            r40 = 1
            r4 = r1
            goto L_0x0d3d
        L_0x0var_:
            r9 = 2147483647(0x7fffffff, float:NaN)
            r12 = -2147483648(0xfffffffvar_, float:-0.0)
            if (r4 == 0) goto L_0x126e
            r13 = 0
            r28 = 0
        L_0x0f7e:
            boolean r14 = r4.next()     // Catch:{ Exception -> 0x1256 }
            if (r14 == 0) goto L_0x122e
            int r13 = r13 + 1
            if (r60 != 0) goto L_0x0var_
            goto L_0x0f7e
        L_0x0var_:
            r14 = 1
            org.telegram.tgnet.NativeByteBuffer r15 = r4.byteBufferValue(r14)     // Catch:{ Exception -> 0x1256 }
            if (r15 == 0) goto L_0x11fe
            r51 = r1
            r14 = 0
            int r1 = r15.readInt32(r14)     // Catch:{ Exception -> 0x11ef }
            org.telegram.tgnet.TLRPC$Message r1 = org.telegram.tgnet.TLRPC$Message.TLdeserialize(r15, r1, r14)     // Catch:{ Exception -> 0x11ef }
            r52 = r2
            r14 = 2
            int r2 = r4.intValue(r14)     // Catch:{ Exception -> 0x11e0 }
            r1.send_state = r2     // Catch:{ Exception -> 0x11e0 }
            r14 = r6
            r54 = r7
            r2 = 3
            long r6 = r4.longValue(r2)     // Catch:{ Exception -> 0x11da }
            int r2 = (int) r6     // Catch:{ Exception -> 0x11da }
            r1.id = r2     // Catch:{ Exception -> 0x11da }
            r41 = -4294967296(0xfffffffvar_, double:NaN)
            long r43 = r6 & r41
            int r21 = (r43 > r41 ? 1 : (r43 == r41 ? 0 : -1))
            if (r21 != 0) goto L_0x0fcf
            if (r2 <= 0) goto L_0x0fcf
            if (r28 != 0) goto L_0x0fc4
            java.util.ArrayList r2 = new java.util.ArrayList     // Catch:{ Exception -> 0x0fde }
            r2.<init>()     // Catch:{ Exception -> 0x0fde }
            goto L_0x0fc6
        L_0x0fc4:
            r2 = r28
        L_0x0fc6:
            java.lang.Long r6 = java.lang.Long.valueOf(r6)     // Catch:{ Exception -> 0x0fde }
            r2.add(r6)     // Catch:{ Exception -> 0x0fde }
            r28 = r2
        L_0x0fcf:
            int r2 = r1.id     // Catch:{ Exception -> 0x11da }
            if (r2 <= 0) goto L_0x0ff3
            int r2 = r1.send_state     // Catch:{ Exception -> 0x0fde }
            if (r2 == 0) goto L_0x0ff3
            r6 = 3
            if (r2 == r6) goto L_0x0ff3
            r2 = 0
            r1.send_state = r2     // Catch:{ Exception -> 0x0fde }
            goto L_0x0ff3
        L_0x0fde:
            r0 = move-exception
            r8 = r47
            r1 = r51
            r2 = r52
            r21 = r54
            r3 = r0
            r32 = r5
        L_0x0fea:
            r12 = r13
            r17 = r14
            r6 = r37
            r4 = r40
            goto L_0x14e6
        L_0x0ff3:
            r6 = r47
            int r2 = (r6 > r38 ? 1 : (r6 == r38 ? 0 : -1))
            if (r2 != 0) goto L_0x1009
            r2 = 1
            r1.out = r2     // Catch:{ Exception -> 0x0ffd }
            goto L_0x1009
        L_0x0ffd:
            r0 = move-exception
            r1 = r51
            r2 = r52
            r21 = r54
            r3 = r0
            r32 = r5
            r8 = r6
            goto L_0x0fea
        L_0x1009:
            r2 = r13
            r21 = r14
            r13 = r38
            r1.readAttachPath(r15, r13)     // Catch:{ Exception -> 0x11d6 }
            r15.reuse()     // Catch:{ Exception -> 0x11d6 }
            r23 = r2
            r15 = 0
            int r2 = r4.intValue(r15)     // Catch:{ Exception -> 0x11d4 }
            org.telegram.messenger.MessageObject.setUnreadFlags(r1, r2)     // Catch:{ Exception -> 0x11d4 }
            int r2 = r1.id     // Catch:{ Exception -> 0x11d4 }
            if (r2 <= 0) goto L_0x1038
            int r9 = java.lang.Math.min(r2, r9)     // Catch:{ Exception -> 0x102d }
            int r2 = r1.id     // Catch:{ Exception -> 0x102d }
            int r12 = java.lang.Math.max(r2, r12)     // Catch:{ Exception -> 0x102d }
            goto L_0x1038
        L_0x102d:
            r0 = move-exception
            r1 = r51
            r2 = r52
            r3 = r0
            r32 = r5
            r8 = r6
            goto L_0x1266
        L_0x1038:
            r2 = 4
            int r15 = r4.intValue(r2)     // Catch:{ Exception -> 0x11d4 }
            r1.date = r15     // Catch:{ Exception -> 0x11d4 }
            r1.dialog_id = r6     // Catch:{ Exception -> 0x11d4 }
            int r2 = r1.flags     // Catch:{ Exception -> 0x11d4 }
            r2 = r2 & 1024(0x400, float:1.435E-42)
            if (r2 == 0) goto L_0x1057
            r2 = 7
            int r15 = r4.intValue(r2)     // Catch:{ Exception -> 0x102d }
            r1.views = r15     // Catch:{ Exception -> 0x102d }
            r15 = 11
            int r15 = r4.intValue(r15)     // Catch:{ Exception -> 0x102d }
            r1.forwards = r15     // Catch:{ Exception -> 0x102d }
            goto L_0x1058
        L_0x1057:
            r2 = 7
        L_0x1058:
            r15 = 12
            org.telegram.tgnet.NativeByteBuffer r15 = r4.byteBufferValue(r15)     // Catch:{ Exception -> 0x11d4 }
            if (r15 == 0) goto L_0x1073
            r32 = r9
            r2 = 0
            int r9 = r15.readInt32(r2)     // Catch:{ Exception -> 0x102d }
            org.telegram.tgnet.TLRPC$MessageReplies r9 = org.telegram.tgnet.TLRPC$MessageReplies.TLdeserialize(r15, r9, r2)     // Catch:{ Exception -> 0x102d }
            if (r9 == 0) goto L_0x106f
            r1.replies = r9     // Catch:{ Exception -> 0x102d }
        L_0x106f:
            r15.reuse()     // Catch:{ Exception -> 0x102d }
            goto L_0x1075
        L_0x1073:
            r32 = r9
        L_0x1075:
            boolean r2 = org.telegram.messenger.DialogObject.isEncryptedDialog(r47)     // Catch:{ Exception -> 0x11d4 }
            if (r2 != 0) goto L_0x1087
            int r2 = r1.ttl     // Catch:{ Exception -> 0x102d }
            if (r2 != 0) goto L_0x1087
            r2 = 8
            int r2 = r4.intValue(r2)     // Catch:{ Exception -> 0x102d }
            r1.ttl = r2     // Catch:{ Exception -> 0x102d }
        L_0x1087:
            r2 = 9
            int r2 = r4.intValue(r2)     // Catch:{ Exception -> 0x11d4 }
            if (r2 == 0) goto L_0x1092
            r2 = 1
            r1.mentioned = r2     // Catch:{ Exception -> 0x102d }
        L_0x1092:
            r2 = 10
            int r9 = r4.intValue(r2)     // Catch:{ Exception -> 0x11d4 }
            r15 = r9 & 1
            if (r15 == 0) goto L_0x10a0
            r15 = 0
            r1.stickerVerified = r15     // Catch:{ Exception -> 0x102d }
            goto L_0x10a7
        L_0x10a0:
            r9 = r9 & 2
            if (r9 == 0) goto L_0x10a7
            r9 = 2
            r1.stickerVerified = r9     // Catch:{ Exception -> 0x102d }
        L_0x10a7:
            r15 = r37
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r9 = r15.messages     // Catch:{ Exception -> 0x1249 }
            r9.add(r1)     // Catch:{ Exception -> 0x1249 }
            r9 = r22
            r2 = r36
            addUsersAndChatsFromMessage(r1, r9, r2)     // Catch:{ Exception -> 0x1249 }
            r22 = r12
            org.telegram.tgnet.TLRPC$TL_messageReplyHeader r12 = r1.reply_to     // Catch:{ Exception -> 0x1249 }
            if (r12 == 0) goto L_0x115c
            int r6 = r12.reply_to_msg_id     // Catch:{ Exception -> 0x1249 }
            if (r6 != 0) goto L_0x10c7
            long r6 = r12.reply_to_random_id     // Catch:{ Exception -> 0x1249 }
            r24 = 0
            int r12 = (r6 > r24 ? 1 : (r6 == r24 ? 0 : -1))
            if (r12 == 0) goto L_0x115c
        L_0x10c7:
            r6 = 6
            boolean r7 = r4.isNull(r6)     // Catch:{ Exception -> 0x1249 }
            if (r7 != 0) goto L_0x10ec
            org.telegram.tgnet.NativeByteBuffer r7 = r4.byteBufferValue(r6)     // Catch:{ Exception -> 0x1249 }
            if (r7 == 0) goto L_0x10ec
            r12 = 0
            int r6 = r7.readInt32(r12)     // Catch:{ Exception -> 0x1249 }
            org.telegram.tgnet.TLRPC$Message r6 = org.telegram.tgnet.TLRPC$Message.TLdeserialize(r7, r6, r12)     // Catch:{ Exception -> 0x1249 }
            r1.replyMessage = r6     // Catch:{ Exception -> 0x1249 }
            r6.readAttachPath(r7, r13)     // Catch:{ Exception -> 0x1249 }
            r7.reuse()     // Catch:{ Exception -> 0x1249 }
            org.telegram.tgnet.TLRPC$Message r6 = r1.replyMessage     // Catch:{ Exception -> 0x1249 }
            if (r6 == 0) goto L_0x10ec
            addUsersAndChatsFromMessage(r6, r9, r2)     // Catch:{ Exception -> 0x1249 }
        L_0x10ec:
            org.telegram.tgnet.TLRPC$Message r6 = r1.replyMessage     // Catch:{ Exception -> 0x1249 }
            if (r6 != 0) goto L_0x115c
            org.telegram.tgnet.TLRPC$TL_messageReplyHeader r6 = r1.reply_to     // Catch:{ Exception -> 0x1249 }
            int r7 = r6.reply_to_msg_id     // Catch:{ Exception -> 0x1249 }
            if (r7 == 0) goto L_0x110d
            r7 = r27
            r12 = r35
            addReplyMessages(r1, r7, r12)     // Catch:{ Exception -> 0x1249 }
            r36 = r2
            r27 = r7
            r35 = r9
            r38 = r13
            r13 = r29
            r9 = r30
            r29 = r3
            r14 = r12
            goto L_0x116a
        L_0x110d:
            r7 = r27
            r12 = r35
            r27 = r7
            long r6 = r6.reply_to_random_id     // Catch:{ Exception -> 0x1249 }
            r35 = r9
            r9 = r30
            java.lang.Object r6 = r9.get(r6)     // Catch:{ Exception -> 0x1249 }
            java.util.ArrayList r6 = (java.util.ArrayList) r6     // Catch:{ Exception -> 0x1249 }
            if (r6 != 0) goto L_0x1131
            java.util.ArrayList r6 = new java.util.ArrayList     // Catch:{ Exception -> 0x1249 }
            r6.<init>()     // Catch:{ Exception -> 0x1249 }
            org.telegram.tgnet.TLRPC$TL_messageReplyHeader r7 = r1.reply_to     // Catch:{ Exception -> 0x1249 }
            r38 = r13
            r14 = r12
            long r12 = r7.reply_to_random_id     // Catch:{ Exception -> 0x1249 }
            r9.put(r12, r6)     // Catch:{ Exception -> 0x1249 }
            goto L_0x1134
        L_0x1131:
            r38 = r13
            r14 = r12
        L_0x1134:
            org.telegram.tgnet.TLRPC$TL_messageReplyHeader r7 = r1.reply_to     // Catch:{ Exception -> 0x1249 }
            long r12 = r7.reply_to_random_id     // Catch:{ Exception -> 0x1249 }
            java.lang.Long r7 = java.lang.Long.valueOf(r12)     // Catch:{ Exception -> 0x1249 }
            r13 = r29
            boolean r7 = r13.contains(r7)     // Catch:{ Exception -> 0x1249 }
            if (r7 != 0) goto L_0x1154
            org.telegram.tgnet.TLRPC$TL_messageReplyHeader r7 = r1.reply_to     // Catch:{ Exception -> 0x1249 }
            r36 = r2
            r29 = r3
            long r2 = r7.reply_to_random_id     // Catch:{ Exception -> 0x1249 }
            java.lang.Long r2 = java.lang.Long.valueOf(r2)     // Catch:{ Exception -> 0x1249 }
            r13.add(r2)     // Catch:{ Exception -> 0x1249 }
            goto L_0x1158
        L_0x1154:
            r36 = r2
            r29 = r3
        L_0x1158:
            r6.add(r1)     // Catch:{ Exception -> 0x1249 }
            goto L_0x116a
        L_0x115c:
            r36 = r2
            r38 = r13
            r13 = r29
            r14 = r35
            r29 = r3
            r35 = r9
            r9 = r30
        L_0x116a:
            boolean r2 = org.telegram.messenger.DialogObject.isEncryptedDialog(r47)     // Catch:{ Exception -> 0x1249 }
            if (r2 == 0) goto L_0x117e
            r2 = 5
            boolean r3 = r4.isNull(r2)     // Catch:{ Exception -> 0x1249 }
            if (r3 != 0) goto L_0x117f
            long r6 = r4.longValue(r2)     // Catch:{ Exception -> 0x1249 }
            r1.random_id = r6     // Catch:{ Exception -> 0x1249 }
            goto L_0x117f
        L_0x117e:
            r2 = 5
        L_0x117f:
            boolean r3 = org.telegram.messenger.MessageObject.isSecretMedia(r1)     // Catch:{ Exception -> 0x1249 }
            if (r3 == 0) goto L_0x11c9
            org.telegram.SQLite.SQLiteDatabase r3 = r11.database     // Catch:{ Exception -> 0x11c1 }
            java.util.Locale r6 = java.util.Locale.US     // Catch:{ Exception -> 0x11c1 }
            java.lang.String r7 = "SELECT date FROM enc_tasks_v4 WHERE mid = %d AND uid = %d AND media = 1"
            r12 = 2
            java.lang.Object[] r2 = new java.lang.Object[r12]     // Catch:{ Exception -> 0x11c1 }
            int r12 = r1.id     // Catch:{ Exception -> 0x11c1 }
            java.lang.Integer r12 = java.lang.Integer.valueOf(r12)     // Catch:{ Exception -> 0x11c1 }
            r30 = r14
            r14 = 0
            r2[r14] = r12     // Catch:{ Exception -> 0x11bf }
            long r41 = org.telegram.messenger.MessageObject.getDialogId(r1)     // Catch:{ Exception -> 0x11bf }
            java.lang.Long r12 = java.lang.Long.valueOf(r41)     // Catch:{ Exception -> 0x11bf }
            r17 = 1
            r2[r17] = r12     // Catch:{ Exception -> 0x11bf }
            java.lang.String r2 = java.lang.String.format(r6, r7, r2)     // Catch:{ Exception -> 0x11bf }
            java.lang.Object[] r6 = new java.lang.Object[r14]     // Catch:{ Exception -> 0x11bf }
            org.telegram.SQLite.SQLiteCursor r2 = r3.queryFinalized(r2, r6)     // Catch:{ Exception -> 0x11bf }
            boolean r3 = r2.next()     // Catch:{ Exception -> 0x11bf }
            if (r3 == 0) goto L_0x11bb
            int r3 = r2.intValue(r14)     // Catch:{ Exception -> 0x11bf }
            r1.destroyTime = r3     // Catch:{ Exception -> 0x11bf }
        L_0x11bb:
            r2.dispose()     // Catch:{ Exception -> 0x11bf }
            goto L_0x11cb
        L_0x11bf:
            r0 = move-exception
            goto L_0x11c4
        L_0x11c1:
            r0 = move-exception
            r30 = r14
        L_0x11c4:
            r1 = r0
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r1)     // Catch:{ Exception -> 0x1249 }
            goto L_0x11cb
        L_0x11c9:
            r30 = r14
        L_0x11cb:
            r12 = r22
            r2 = r30
            r3 = r32
            r1 = r35
            goto L_0x1215
        L_0x11d4:
            r0 = move-exception
            goto L_0x11e7
        L_0x11d6:
            r0 = move-exception
            r23 = r2
            goto L_0x11e7
        L_0x11da:
            r0 = move-exception
            r23 = r13
            r21 = r14
            goto L_0x11e7
        L_0x11e0:
            r0 = move-exception
            r21 = r6
            r54 = r7
            r23 = r13
        L_0x11e7:
            r8 = r47
            r1 = r51
            r2 = r52
            goto L_0x1263
        L_0x11ef:
            r0 = move-exception
            r52 = r2
            r21 = r6
            r54 = r7
            r23 = r13
            r8 = r47
            r1 = r51
            goto L_0x1263
        L_0x11fe:
            r51 = r1
            r52 = r2
            r21 = r6
            r54 = r7
            r23 = r13
            r1 = r22
            r13 = r29
            r2 = r35
            r15 = r37
            r29 = r3
            r3 = r9
            r9 = r30
        L_0x1215:
            r7 = r54
            r22 = r1
            r35 = r2
            r30 = r9
            r37 = r15
            r6 = r21
            r1 = r51
            r2 = r52
            r9 = r3
            r3 = r29
            r29 = r13
            r13 = r23
            goto L_0x0f7e
        L_0x122e:
            r51 = r1
            r52 = r2
            r21 = r6
            r54 = r7
            r23 = r13
            r1 = r22
            r13 = r29
            r2 = r35
            r15 = r37
            r29 = r3
            r3 = r9
            r9 = r30
            r4.dispose()     // Catch:{ Exception -> 0x1249 }
            goto L_0x1287
        L_0x1249:
            r0 = move-exception
            r8 = r47
            r1 = r51
            r2 = r52
            r3 = r0
            r32 = r5
            r6 = r15
            goto L_0x1483
        L_0x1256:
            r0 = move-exception
            r51 = r1
            r52 = r2
            r21 = r6
            r54 = r7
            r23 = r13
            r8 = r47
        L_0x1263:
            r3 = r0
            r32 = r5
        L_0x1266:
            r17 = r21
            r12 = r23
            r6 = r37
            goto L_0x1487
        L_0x126e:
            r51 = r1
            r52 = r2
            r21 = r6
            r54 = r7
            r1 = r22
            r13 = r29
            r9 = r30
            r2 = r35
            r15 = r37
            r29 = r3
            r3 = 2147483647(0x7fffffff, float:NaN)
            r23 = 0
        L_0x1287:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r4 = r15.messages     // Catch:{ Exception -> 0x148d }
            org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda204 r6 = org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda204.INSTANCE     // Catch:{ Exception -> 0x148d }
            java.util.Collections.sort(r4, r6)     // Catch:{ Exception -> 0x148d }
            boolean r4 = org.telegram.messenger.DialogObject.isEncryptedDialog(r47)     // Catch:{ Exception -> 0x148d }
            if (r4 != 0) goto L_0x12d1
            r4 = 3
            if (r10 == r4) goto L_0x12a4
            r4 = 4
            if (r10 == r4) goto L_0x12a4
            r4 = 2
            if (r10 != r4) goto L_0x12a2
            if (r34 == 0) goto L_0x12a2
            if (r8 != 0) goto L_0x12a2
            goto L_0x12a4
        L_0x12a2:
            r3 = 4
            goto L_0x12be
        L_0x12a4:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r4 = r15.messages     // Catch:{ Exception -> 0x1249 }
            boolean r4 = r4.isEmpty()     // Catch:{ Exception -> 0x1249 }
            if (r4 != 0) goto L_0x12a2
            r4 = r29
            if (r3 > r4) goto L_0x12b2
            if (r12 >= r4) goto L_0x12a2
        L_0x12b2:
            r1.clear()     // Catch:{ Exception -> 0x1249 }
            r36.clear()     // Catch:{ Exception -> 0x1249 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r3 = r15.messages     // Catch:{ Exception -> 0x1249 }
            r3.clear()     // Catch:{ Exception -> 0x1249 }
            goto L_0x12a2
        L_0x12be:
            if (r10 == r3) goto L_0x12c3
            r3 = 3
            if (r10 != r3) goto L_0x12d1
        L_0x12c3:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r3 = r15.messages     // Catch:{ Exception -> 0x1249 }
            int r3 = r3.size()     // Catch:{ Exception -> 0x1249 }
            r4 = 1
            if (r3 != r4) goto L_0x12d1
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r3 = r15.messages     // Catch:{ Exception -> 0x1249 }
            r3.clear()     // Catch:{ Exception -> 0x1249 }
        L_0x12d1:
            if (r5 == 0) goto L_0x12fe
            org.telegram.SQLite.SQLiteDatabase r3 = r11.database     // Catch:{ Exception -> 0x1249 }
            java.util.Locale r4 = java.util.Locale.US     // Catch:{ Exception -> 0x1249 }
            java.lang.String r6 = "SELECT COUNT(mid) FROM messages_v2 WHERE uid = %d AND mention = 1 AND read_state IN(0, 1)"
            r7 = 1
            java.lang.Object[] r8 = new java.lang.Object[r7]     // Catch:{ Exception -> 0x1249 }
            java.lang.Long r7 = java.lang.Long.valueOf(r47)     // Catch:{ Exception -> 0x1249 }
            r12 = 0
            r8[r12] = r7     // Catch:{ Exception -> 0x1249 }
            java.lang.String r4 = java.lang.String.format(r4, r6, r8)     // Catch:{ Exception -> 0x1249 }
            java.lang.Object[] r6 = new java.lang.Object[r12]     // Catch:{ Exception -> 0x1249 }
            org.telegram.SQLite.SQLiteCursor r3 = r3.queryFinalized(r4, r6)     // Catch:{ Exception -> 0x1249 }
            boolean r4 = r3.next()     // Catch:{ Exception -> 0x1249 }
            if (r4 == 0) goto L_0x12f9
            int r4 = r3.intValue(r12)     // Catch:{ Exception -> 0x1249 }
            if (r5 == r4) goto L_0x12fb
        L_0x12f9:
            int r5 = r5 * -1
        L_0x12fb:
            r3.dispose()     // Catch:{ Exception -> 0x1249 }
        L_0x12fe:
            r4 = r51
            r3 = r52
            r6 = r5
            r5 = r54
        L_0x1305:
            boolean r7 = r9.isEmpty()     // Catch:{ Exception -> 0x1470 }
            java.lang.String r8 = ","
            if (r7 != 0) goto L_0x1419
            org.telegram.SQLite.SQLiteDatabase r2 = r11.database     // Catch:{ Exception -> 0x1406 }
            java.util.Locale r7 = java.util.Locale.US     // Catch:{ Exception -> 0x1406 }
            java.lang.String r12 = "SELECT m.data, m.mid, m.date, r.random_id FROM randoms_v2 as r INNER JOIN messages_v2 as m ON r.mid = m.mid AND r.uid = m.uid WHERE r.random_id IN(%s)"
            r51 = r3
            r14 = 1
            java.lang.Object[] r3 = new java.lang.Object[r14]     // Catch:{ Exception -> 0x1404 }
            java.lang.String r13 = android.text.TextUtils.join(r8, r13)     // Catch:{ Exception -> 0x1404 }
            r14 = 0
            r3[r14] = r13     // Catch:{ Exception -> 0x1404 }
            java.lang.String r3 = java.lang.String.format(r7, r12, r3)     // Catch:{ Exception -> 0x1404 }
            java.lang.Object[] r7 = new java.lang.Object[r14]     // Catch:{ Exception -> 0x1404 }
            org.telegram.SQLite.SQLiteCursor r2 = r2.queryFinalized(r3, r7)     // Catch:{ Exception -> 0x1404 }
        L_0x1329:
            boolean r3 = r2.next()     // Catch:{ Exception -> 0x1404 }
            if (r3 == 0) goto L_0x13ba
            org.telegram.tgnet.NativeByteBuffer r3 = r2.byteBufferValue(r14)     // Catch:{ Exception -> 0x1404 }
            if (r3 == 0) goto L_0x139d
            int r7 = r3.readInt32(r14)     // Catch:{ Exception -> 0x1404 }
            org.telegram.tgnet.TLRPC$Message r7 = org.telegram.tgnet.TLRPC$Message.TLdeserialize(r3, r7, r14)     // Catch:{ Exception -> 0x1404 }
            r12 = r38
            r7.readAttachPath(r3, r12)     // Catch:{ Exception -> 0x1404 }
            r3.reuse()     // Catch:{ Exception -> 0x1404 }
            r3 = 1
            int r14 = r2.intValue(r3)     // Catch:{ Exception -> 0x1404 }
            r7.id = r14     // Catch:{ Exception -> 0x1404 }
            r14 = 2
            int r3 = r2.intValue(r14)     // Catch:{ Exception -> 0x1404 }
            r7.date = r3     // Catch:{ Exception -> 0x1404 }
            r37 = r15
            r14 = r47
            r7.dialog_id = r14     // Catch:{ Exception -> 0x1394 }
            r3 = r36
            addUsersAndChatsFromMessage(r7, r1, r3)     // Catch:{ Exception -> 0x1394 }
            r52 = r4
            r54 = r5
            r16 = r6
            r4 = 3
            long r5 = r2.longValue(r4)     // Catch:{ Exception -> 0x13f9 }
            java.lang.Object r22 = r9.get(r5)     // Catch:{ Exception -> 0x13f9 }
            r4 = r22
            java.util.ArrayList r4 = (java.util.ArrayList) r4     // Catch:{ Exception -> 0x13f9 }
            r9.remove(r5)     // Catch:{ Exception -> 0x13f9 }
            if (r4 == 0) goto L_0x13ab
            r5 = 0
        L_0x1377:
            int r6 = r4.size()     // Catch:{ Exception -> 0x13f9 }
            if (r5 >= r6) goto L_0x13ab
            java.lang.Object r6 = r4.get(r5)     // Catch:{ Exception -> 0x13f9 }
            org.telegram.tgnet.TLRPC$Message r6 = (org.telegram.tgnet.TLRPC$Message) r6     // Catch:{ Exception -> 0x13f9 }
            r6.replyMessage = r7     // Catch:{ Exception -> 0x13f9 }
            org.telegram.tgnet.TLRPC$TL_messageReplyHeader r6 = r6.reply_to     // Catch:{ Exception -> 0x13f9 }
            r22 = r4
            if (r6 == 0) goto L_0x138f
            int r4 = r7.id     // Catch:{ Exception -> 0x13f9 }
            r6.reply_to_msg_id = r4     // Catch:{ Exception -> 0x13f9 }
        L_0x138f:
            int r5 = r5 + 1
            r4 = r22
            goto L_0x1377
        L_0x1394:
            r0 = move-exception
            r52 = r4
            r54 = r5
            r16 = r6
            goto L_0x13fa
        L_0x139d:
            r52 = r4
            r54 = r5
            r16 = r6
            r37 = r15
            r3 = r36
            r12 = r38
            r14 = r47
        L_0x13ab:
            r4 = r52
            r5 = r54
            r36 = r3
            r38 = r12
            r6 = r16
            r15 = r37
            r14 = 0
            goto L_0x1329
        L_0x13ba:
            r52 = r4
            r54 = r5
            r16 = r6
            r37 = r15
            r3 = r36
            r14 = r47
            r2.dispose()     // Catch:{ Exception -> 0x13f9 }
            int r2 = r9.size()     // Catch:{ Exception -> 0x13f9 }
            r4 = 0
        L_0x13ce:
            if (r4 >= r2) goto L_0x142c
            java.lang.Object r5 = r9.valueAt(r4)     // Catch:{ Exception -> 0x13f9 }
            java.util.ArrayList r5 = (java.util.ArrayList) r5     // Catch:{ Exception -> 0x13f9 }
            int r6 = r5.size()     // Catch:{ Exception -> 0x13f9 }
            r7 = 0
        L_0x13db:
            if (r7 >= r6) goto L_0x13f4
            java.lang.Object r12 = r5.get(r7)     // Catch:{ Exception -> 0x13f9 }
            org.telegram.tgnet.TLRPC$Message r12 = (org.telegram.tgnet.TLRPC$Message) r12     // Catch:{ Exception -> 0x13f9 }
            org.telegram.tgnet.TLRPC$TL_messageReplyHeader r12 = r12.reply_to     // Catch:{ Exception -> 0x13f9 }
            r13 = r5
            r18 = r6
            r5 = 0
            if (r12 == 0) goto L_0x13ee
            r12.reply_to_random_id = r5     // Catch:{ Exception -> 0x13f9 }
        L_0x13ee:
            int r7 = r7 + 1
            r5 = r13
            r6 = r18
            goto L_0x13db
        L_0x13f4:
            r5 = 0
            int r4 = r4 + 1
            goto L_0x13ce
        L_0x13f9:
            r0 = move-exception
        L_0x13fa:
            r2 = r51
            r1 = r52
            r3 = r0
            r8 = r14
            r32 = r16
            goto L_0x1266
        L_0x1404:
            r0 = move-exception
            goto L_0x1409
        L_0x1406:
            r0 = move-exception
            r51 = r3
        L_0x1409:
            r52 = r4
            r54 = r5
            r16 = r6
            r8 = r47
            r2 = r51
            r1 = r52
            r3 = r0
            r6 = r15
            goto L_0x1481
        L_0x1419:
            r51 = r3
            r52 = r4
            r54 = r5
            r16 = r6
            r37 = r15
            r4 = r27
            r3 = r36
            r14 = r47
            r11.loadReplyMessages(r4, r2, r1, r3)     // Catch:{ Exception -> 0x1466 }
        L_0x142c:
            boolean r2 = r1.isEmpty()     // Catch:{ Exception -> 0x1466 }
            if (r2 != 0) goto L_0x143e
            java.lang.String r1 = android.text.TextUtils.join(r8, r1)     // Catch:{ Exception -> 0x1466 }
            r6 = r37
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r6.users     // Catch:{ Exception -> 0x1464 }
            r11.getUsersInternal(r1, r2)     // Catch:{ Exception -> 0x1464 }
            goto L_0x1440
        L_0x143e:
            r6 = r37
        L_0x1440:
            boolean r1 = r3.isEmpty()     // Catch:{ Exception -> 0x1464 }
            if (r1 != 0) goto L_0x144f
            java.lang.String r1 = android.text.TextUtils.join(r8, r3)     // Catch:{ Exception -> 0x1464 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r2 = r6.chats     // Catch:{ Exception -> 0x1464 }
            r11.getChatsInternal(r1, r2)     // Catch:{ Exception -> 0x1464 }
        L_0x144f:
            r12 = r51
            r13 = r52
            r8 = r14
            r14 = r21
            r1 = r23
            r22 = r34
            r18 = r40
            r15 = r54
            r23 = r16
            r16 = r33
            goto L_0x1507
        L_0x1464:
            r0 = move-exception
            goto L_0x1469
        L_0x1466:
            r0 = move-exception
            r6 = r37
        L_0x1469:
            r2 = r51
            r1 = r52
            r3 = r0
            r8 = r14
            goto L_0x1481
        L_0x1470:
            r0 = move-exception
            r51 = r3
            r52 = r4
            r54 = r5
            r16 = r6
            r6 = r15
            r8 = r47
            r2 = r51
            r1 = r52
            r3 = r0
        L_0x1481:
            r32 = r16
        L_0x1483:
            r17 = r21
            r12 = r23
        L_0x1487:
            r4 = r40
            r21 = r54
            goto L_0x14e6
        L_0x148d:
            r0 = move-exception
            r6 = r15
            r8 = r47
            r1 = r51
            r2 = r52
            r3 = r0
            r32 = r5
            goto L_0x1483
        L_0x1499:
            r0 = move-exception
            r8 = r47
            r6 = r37
            r1 = r52
            r3 = r0
            r17 = r4
            r31 = r21
            r33 = r23
            goto L_0x0edd
        L_0x14a9:
            r0 = move-exception
            r8 = r47
            r6 = r37
            r1 = r52
            r3 = r0
            r31 = r21
            r33 = r23
        L_0x14b5:
            r4 = 1
            r12 = 0
            r17 = 0
        L_0x14b9:
            r32 = 0
            r34 = 0
        L_0x14bd:
            r21 = r7
            goto L_0x14e6
        L_0x14c0:
            r0 = move-exception
            r11 = r46
            r2 = r51
            r10 = r56
            r8 = r5
            goto L_0x14d4
        L_0x14c9:
            r0 = move-exception
            r2 = r1
            r8 = r5
            goto L_0x14d2
        L_0x14cd:
            r0 = move-exception
            r2 = r1
            r8 = r5
            r19 = r10
        L_0x14d2:
            r10 = r14
            r11 = r15
        L_0x14d4:
            r6 = r3
            r1 = r52
            r3 = r0
            r4 = 0
        L_0x14d9:
            r12 = 0
            r17 = 0
            r21 = 0
            r31 = 0
        L_0x14e0:
            r32 = 0
            r33 = 0
        L_0x14e4:
            r34 = 0
        L_0x14e6:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r5 = r6.messages
            r5.clear()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r5 = r6.chats
            r5.clear()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r5 = r6.users
            r5.clear()
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r3)
            r13 = r1
            r18 = r4
            r1 = r12
            r14 = r17
            r15 = r21
            r23 = r32
            r16 = r33
            r22 = r34
            r12 = r2
        L_0x1507:
            boolean r2 = org.telegram.messenger.BuildVars.LOGS_ENABLED
            if (r2 == 0) goto L_0x152d
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            r2.<init>()
            java.lang.String r3 = "messages load time = "
            r2.append(r3)
            long r3 = android.os.SystemClock.elapsedRealtime()
            long r3 = r3 - r19
            r2.append(r3)
            java.lang.String r3 = " for dialog = "
            r2.append(r3)
            r2.append(r8)
            java.lang.String r2 = r2.toString()
            org.telegram.messenger.FileLog.d(r2)
        L_0x152d:
            if (r57 == 0) goto L_0x1535
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r6.messages
            int r1 = r1.size()
        L_0x1535:
            r4 = r1
            org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda178 r25 = new org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda178
            r1 = r25
            r2 = r46
            r3 = r6
            r5 = r47
            r7 = r49
            r9 = r12
            r10 = r13
            r11 = r53
            r12 = r55
            r13 = r31
            r17 = r56
            r19 = r57
            r20 = r58
            r21 = r59
            r24 = r60
            r1.<init>(r2, r3, r4, r5, r7, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24)
            return r25
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.getMessagesInternal(long, long, int, int, int, int, int, int, boolean, int, int, boolean):java.lang.Runnable");
    }

    /* access modifiers changed from: private */
    public static /* synthetic */ int lambda$getMessagesInternal$128(TLRPC$Message tLRPC$Message, TLRPC$Message tLRPC$Message2) {
        int i;
        int i2;
        int i3 = tLRPC$Message.id;
        if (i3 <= 0 || (i2 = tLRPC$Message2.id) <= 0) {
            if (i3 >= 0 || (i = tLRPC$Message2.id) >= 0) {
                int i4 = tLRPC$Message.date;
                int i5 = tLRPC$Message2.date;
                if (i4 > i5) {
                    return -1;
                }
                if (i4 < i5) {
                    return 1;
                }
                return 0;
            } else if (i3 < i) {
                return -1;
            } else {
                if (i3 > i) {
                    return 1;
                }
                return 0;
            }
        } else if (i3 > i2) {
            return -1;
        } else {
            if (i3 < i2) {
                return 1;
            }
            return 0;
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getMessagesInternal$129(TLRPC$TL_messages_messages tLRPC$TL_messages_messages, int i, long j, long j2, int i2, int i3, int i4, int i5, int i6, int i7, int i8, int i9, int i10, boolean z, boolean z2, int i11, int i12, boolean z3, int i13, boolean z4) {
        getMessagesController().processLoadedMessages(tLRPC$TL_messages_messages, i, j, j2, i2, i3, i4, true, i5, i6, i7, i8, i9, i10, z, z2 ? 1 : 0, i11, i12, z3, i13, z4);
    }

    public void getMessages(long j, long j2, boolean z, int i, int i2, int i3, int i4, int i5, int i6, boolean z2, int i7, int i8, boolean z3) {
        MessagesStorage$$ExternalSyntheticLambda86 messagesStorage$$ExternalSyntheticLambda86 = r0;
        DispatchQueue dispatchQueue = this.storageQueue;
        MessagesStorage$$ExternalSyntheticLambda86 messagesStorage$$ExternalSyntheticLambda862 = new MessagesStorage$$ExternalSyntheticLambda86(this, j, j2, i, i2, i3, i4, i5, i6, z2, i7, i8, z3);
        dispatchQueue.postRunnable(messagesStorage$$ExternalSyntheticLambda86);
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getMessages$130(long j, long j2, int i, int i2, int i3, int i4, int i5, int i6, boolean z, int i7, int i8, boolean z2) {
        Utilities.stageQueue.postRunnable(getMessagesInternal(j, j2, i, i2, i3, i4, i5, i6, z, i7, i8, z2));
    }

    public void clearSentMedia() {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda17(this));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$clearSentMedia$131() {
        try {
            this.database.executeFast("DELETE FROM sent_files_v2 WHERE 1").stepThis().dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public Object[] getSentFile(String str, int i) {
        if (str == null || str.toLowerCase().endsWith("attheme")) {
            return null;
        }
        CountDownLatch countDownLatch = new CountDownLatch(1);
        Object[] objArr = new Object[2];
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda123(this, str, i, objArr, countDownLatch));
        try {
            countDownLatch.await();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        if (objArr[0] != null) {
            return objArr;
        }
        return null;
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getSentFile$132(String str, int i, Object[] objArr, CountDownLatch countDownLatch) {
        NativeByteBuffer byteBufferValue;
        try {
            String MD5 = Utilities.MD5(str);
            if (MD5 != null) {
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data, parent FROM sent_files_v2 WHERE uid = '%s' AND type = %d", new Object[]{MD5, Integer.valueOf(i)}), new Object[0]);
                if (queryFinalized.next() && (byteBufferValue = queryFinalized.byteBufferValue(0)) != null) {
                    TLRPC$MessageMedia TLdeserialize = TLRPC$MessageMedia.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    byteBufferValue.reuse();
                    if (TLdeserialize instanceof TLRPC$TL_messageMediaDocument) {
                        objArr[0] = ((TLRPC$TL_messageMediaDocument) TLdeserialize).document;
                    } else if (TLdeserialize instanceof TLRPC$TL_messageMediaPhoto) {
                        objArr[0] = ((TLRPC$TL_messageMediaPhoto) TLdeserialize).photo;
                    }
                    if (objArr[0] != null) {
                        objArr[1] = queryFinalized.stringValue(1);
                    }
                }
                queryFinalized.dispose();
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        } catch (Throwable th) {
            countDownLatch.countDown();
            throw th;
        }
        countDownLatch.countDown();
    }

    private void updateWidgets(long j) {
        ArrayList arrayList = new ArrayList();
        arrayList.add(Long.valueOf(j));
        updateWidgets((ArrayList<Long>) arrayList);
    }

    private void updateWidgets(ArrayList<Long> arrayList) {
        if (!arrayList.isEmpty()) {
            AppWidgetManager appWidgetManager = null;
            try {
                TextUtils.join(",", arrayList);
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT DISTINCT id FROM shortcut_widget WHERE did IN(%s,-1)", new Object[]{TextUtils.join(",", arrayList)}), new Object[0]);
                while (queryFinalized.next()) {
                    if (appWidgetManager == null) {
                        appWidgetManager = AppWidgetManager.getInstance(ApplicationLoader.applicationContext);
                    }
                    appWidgetManager.notifyAppWidgetViewDataChanged(queryFinalized.intValue(0), NUM);
                }
                queryFinalized.dispose();
            } catch (Exception e) {
                FileLog.e((Throwable) e);
            }
        }
    }

    public void putWidgetDialogs(int i, ArrayList<Long> arrayList) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda54(this, i, arrayList));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$putWidgetDialogs$133(int i, ArrayList arrayList) {
        try {
            this.database.beginTransaction();
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM shortcut_widget WHERE id = " + i).stepThis().dispose();
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO shortcut_widget VALUES(?, ?, ?)");
            if (arrayList.isEmpty()) {
                executeFast.requery();
                executeFast.bindInteger(1, i);
                executeFast.bindLong(2, -1);
                executeFast.bindInteger(3, 0);
                executeFast.step();
            } else {
                int size = arrayList.size();
                for (int i2 = 0; i2 < size; i2++) {
                    long longValue = ((Long) arrayList.get(i2)).longValue();
                    executeFast.requery();
                    executeFast.bindInteger(1, i);
                    executeFast.bindLong(2, longValue);
                    executeFast.bindInteger(3, i2);
                    executeFast.step();
                }
            }
            executeFast.dispose();
            this.database.commitTransaction();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void clearWidgetDialogs(int i) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda31(this, i));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$clearWidgetDialogs$134(int i) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM shortcut_widget WHERE id = " + i).stepThis().dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void getWidgetDialogIds(int i, int i2, ArrayList<Long> arrayList, ArrayList<TLRPC$User> arrayList2, ArrayList<TLRPC$Chat> arrayList3, boolean z) {
        CountDownLatch countDownLatch = new CountDownLatch(1);
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda60(this, i, arrayList, arrayList2, arrayList3, z, i2, countDownLatch));
        try {
            countDownLatch.await();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getWidgetDialogIds$135(int i, ArrayList arrayList, ArrayList arrayList2, ArrayList arrayList3, boolean z, int i2, CountDownLatch countDownLatch) {
        try {
            ArrayList arrayList4 = new ArrayList();
            ArrayList arrayList5 = new ArrayList();
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT did FROM shortcut_widget WHERE id = %d ORDER BY ord ASC", new Object[]{Integer.valueOf(i)}), new Object[0]);
            while (queryFinalized.next()) {
                long longValue = queryFinalized.longValue(0);
                if (longValue != -1) {
                    arrayList.add(Long.valueOf(longValue));
                    if (!(arrayList2 == null || arrayList3 == null)) {
                        if (DialogObject.isUserDialog(longValue)) {
                            arrayList4.add(Long.valueOf(longValue));
                        } else {
                            arrayList5.add(Long.valueOf(-longValue));
                        }
                    }
                }
            }
            queryFinalized.dispose();
            if (!z && arrayList.isEmpty()) {
                if (i2 == 0) {
                    SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT did FROM dialogs WHERE folder_id = 0 ORDER BY pinned DESC, date DESC LIMIT 0,10", new Object[0]);
                    while (queryFinalized2.next()) {
                        long longValue2 = queryFinalized2.longValue(0);
                        if (!DialogObject.isFolderDialogId(longValue2)) {
                            arrayList.add(Long.valueOf(longValue2));
                            if (!(arrayList2 == null || arrayList3 == null)) {
                                if (DialogObject.isUserDialog(longValue2)) {
                                    arrayList4.add(Long.valueOf(longValue2));
                                } else {
                                    arrayList5.add(Long.valueOf(-longValue2));
                                }
                            }
                        }
                    }
                    queryFinalized2.dispose();
                } else {
                    SQLiteCursor queryFinalized3 = getMessagesStorage().getDatabase().queryFinalized("SELECT did FROM chat_hints WHERE type = 0 ORDER BY rating DESC LIMIT 4", new Object[0]);
                    while (queryFinalized3.next()) {
                        long longValue3 = queryFinalized3.longValue(0);
                        arrayList.add(Long.valueOf(longValue3));
                        if (!(arrayList2 == null || arrayList3 == null)) {
                            if (DialogObject.isUserDialog(longValue3)) {
                                arrayList4.add(Long.valueOf(longValue3));
                            } else {
                                arrayList5.add(Long.valueOf(-longValue3));
                            }
                        }
                    }
                    queryFinalized3.dispose();
                }
            }
            if (!(arrayList2 == null || arrayList3 == null)) {
                if (!arrayList5.isEmpty()) {
                    getChatsInternal(TextUtils.join(",", arrayList5), arrayList3);
                }
                if (!arrayList4.isEmpty()) {
                    getUsersInternal(TextUtils.join(",", arrayList4), arrayList2);
                }
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        } catch (Throwable th) {
            countDownLatch.countDown();
            throw th;
        }
        countDownLatch.countDown();
    }

    public void getWidgetDialogs(int i, int i2, ArrayList<Long> arrayList, LongSparseArray<TLRPC$Dialog> longSparseArray, LongSparseArray<TLRPC$Message> longSparseArray2, ArrayList<TLRPC$User> arrayList2, ArrayList<TLRPC$Chat> arrayList3) {
        CountDownLatch countDownLatch = new CountDownLatch(1);
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda57(this, i, arrayList, i2, longSparseArray, longSparseArray2, arrayList3, arrayList2, countDownLatch));
        try {
            countDownLatch.await();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getWidgetDialogs$136(int i, ArrayList arrayList, int i2, LongSparseArray longSparseArray, LongSparseArray longSparseArray2, ArrayList arrayList2, ArrayList arrayList3, CountDownLatch countDownLatch) {
        boolean z;
        SQLiteCursor sQLiteCursor;
        ArrayList arrayList4 = arrayList;
        LongSparseArray longSparseArray3 = longSparseArray;
        try {
            ArrayList arrayList5 = new ArrayList();
            ArrayList arrayList6 = new ArrayList();
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT did FROM shortcut_widget WHERE id = %d ORDER BY ord ASC", new Object[]{Integer.valueOf(i)}), new Object[0]);
            while (queryFinalized.next()) {
                long longValue = queryFinalized.longValue(0);
                if (longValue != -1) {
                    arrayList4.add(Long.valueOf(longValue));
                    if (DialogObject.isUserDialog(longValue)) {
                        arrayList5.add(Long.valueOf(longValue));
                    } else {
                        arrayList6.add(Long.valueOf(-longValue));
                    }
                }
            }
            queryFinalized.dispose();
            if (arrayList.isEmpty() && i2 == 1) {
                SQLiteCursor queryFinalized2 = getMessagesStorage().getDatabase().queryFinalized("SELECT did FROM chat_hints WHERE type = 0 ORDER BY rating DESC LIMIT 4", new Object[0]);
                while (queryFinalized2.next()) {
                    long longValue2 = queryFinalized2.longValue(0);
                    arrayList4.add(Long.valueOf(longValue2));
                    if (DialogObject.isUserDialog(longValue2)) {
                        arrayList5.add(Long.valueOf(longValue2));
                    } else {
                        arrayList6.add(Long.valueOf(-longValue2));
                    }
                }
                queryFinalized2.dispose();
            }
            if (arrayList.isEmpty()) {
                sQLiteCursor = this.database.queryFinalized("SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, m.date FROM dialogs as d LEFT JOIN messages_v2 as m ON d.last_mid = m.mid AND d.did = m.uid WHERE d.folder_id = 0 ORDER BY d.pinned DESC, d.date DESC LIMIT 0,10", new Object[0]);
                z = true;
            } else {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, m.date FROM dialogs as d LEFT JOIN messages_v2 as m ON d.last_mid = m.mid AND d.did = m.uid WHERE d.did IN(%s)", new Object[]{TextUtils.join(",", arrayList4)}), new Object[0]);
                z = false;
            }
            while (sQLiteCursor.next()) {
                long longValue3 = sQLiteCursor.longValue(0);
                if (!DialogObject.isFolderDialogId(longValue3)) {
                    if (z) {
                        arrayList4.add(Long.valueOf(longValue3));
                    }
                    TLRPC$TL_dialog tLRPC$TL_dialog = new TLRPC$TL_dialog();
                    tLRPC$TL_dialog.id = longValue3;
                    tLRPC$TL_dialog.top_message = sQLiteCursor.intValue(1);
                    tLRPC$TL_dialog.unread_count = sQLiteCursor.intValue(2);
                    tLRPC$TL_dialog.last_message_date = sQLiteCursor.intValue(3);
                    longSparseArray3.put(tLRPC$TL_dialog.id, tLRPC$TL_dialog);
                    NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(4);
                    if (byteBufferValue != null) {
                        TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                        byteBufferValue.reuse();
                        MessageObject.setUnreadFlags(TLdeserialize, sQLiteCursor.intValue(5));
                        TLdeserialize.id = sQLiteCursor.intValue(6);
                        TLdeserialize.send_state = sQLiteCursor.intValue(7);
                        int intValue = sQLiteCursor.intValue(8);
                        if (intValue != 0) {
                            tLRPC$TL_dialog.last_message_date = intValue;
                        }
                        long j = tLRPC$TL_dialog.id;
                        TLdeserialize.dialog_id = j;
                        longSparseArray2.put(j, TLdeserialize);
                        addUsersAndChatsFromMessage(TLdeserialize, arrayList5, arrayList6);
                    }
                }
                LongSparseArray longSparseArray4 = longSparseArray2;
            }
            sQLiteCursor.dispose();
            if (!z && arrayList.size() > longSparseArray.size()) {
                int size = arrayList.size();
                for (int i3 = 0; i3 < size; i3++) {
                    long longValue4 = ((Long) arrayList4.get(i3)).longValue();
                    if (longSparseArray3.get(((Long) arrayList4.get(i3)).longValue()) == null) {
                        TLRPC$TL_dialog tLRPC$TL_dialog2 = new TLRPC$TL_dialog();
                        tLRPC$TL_dialog2.id = longValue4;
                        longSparseArray3.put(longValue4, tLRPC$TL_dialog2);
                        if (DialogObject.isChatDialog(longValue4)) {
                            long j2 = -longValue4;
                            if (arrayList6.contains(Long.valueOf(j2))) {
                                arrayList6.add(Long.valueOf(j2));
                            }
                        } else if (arrayList5.contains(Long.valueOf(longValue4))) {
                            arrayList5.add(Long.valueOf(longValue4));
                        }
                    }
                }
            }
            if (!arrayList6.isEmpty()) {
                getChatsInternal(TextUtils.join(",", arrayList6), arrayList2);
            }
            if (!arrayList5.isEmpty()) {
                getUsersInternal(TextUtils.join(",", arrayList5), arrayList3);
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        } catch (Throwable th) {
            countDownLatch.countDown();
            throw th;
        }
        countDownLatch.countDown();
    }

    public void putSentFile(String str, TLObject tLObject, int i, String str2) {
        if (str != null && tLObject != null && str2 != null) {
            this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda125(this, str, tLObject, i, str2));
        }
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v6, resolved type: org.telegram.tgnet.TLRPC$TL_messageMediaDocument} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v7, resolved type: org.telegram.tgnet.TLRPC$TL_messageMediaPhoto} */
    /* JADX WARNING: type inference failed for: r1v1, types: [org.telegram.tgnet.TLObject] */
    /* JADX WARNING: type inference failed for: r1v3 */
    /* access modifiers changed from: private */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$putSentFile$137(java.lang.String r5, org.telegram.tgnet.TLObject r6, int r7, java.lang.String r8) {
        /*
            r4 = this;
            r0 = 0
            java.lang.String r5 = org.telegram.messenger.Utilities.MD5(r5)     // Catch:{ Exception -> 0x0066 }
            if (r5 == 0) goto L_0x005e
            boolean r1 = r6 instanceof org.telegram.tgnet.TLRPC$Photo     // Catch:{ Exception -> 0x0066 }
            r2 = 1
            if (r1 == 0) goto L_0x001b
            org.telegram.tgnet.TLRPC$TL_messageMediaPhoto r1 = new org.telegram.tgnet.TLRPC$TL_messageMediaPhoto     // Catch:{ Exception -> 0x0066 }
            r1.<init>()     // Catch:{ Exception -> 0x0066 }
            org.telegram.tgnet.TLRPC$Photo r6 = (org.telegram.tgnet.TLRPC$Photo) r6     // Catch:{ Exception -> 0x0066 }
            r1.photo = r6     // Catch:{ Exception -> 0x0066 }
            int r6 = r1.flags     // Catch:{ Exception -> 0x0066 }
            r6 = r6 | r2
            r1.flags = r6     // Catch:{ Exception -> 0x0066 }
            goto L_0x002f
        L_0x001b:
            boolean r1 = r6 instanceof org.telegram.tgnet.TLRPC$Document     // Catch:{ Exception -> 0x0066 }
            if (r1 == 0) goto L_0x002e
            org.telegram.tgnet.TLRPC$TL_messageMediaDocument r1 = new org.telegram.tgnet.TLRPC$TL_messageMediaDocument     // Catch:{ Exception -> 0x0066 }
            r1.<init>()     // Catch:{ Exception -> 0x0066 }
            org.telegram.tgnet.TLRPC$Document r6 = (org.telegram.tgnet.TLRPC$Document) r6     // Catch:{ Exception -> 0x0066 }
            r1.document = r6     // Catch:{ Exception -> 0x0066 }
            int r6 = r1.flags     // Catch:{ Exception -> 0x0066 }
            r6 = r6 | r2
            r1.flags = r6     // Catch:{ Exception -> 0x0066 }
            goto L_0x002f
        L_0x002e:
            r1 = r0
        L_0x002f:
            if (r1 != 0) goto L_0x0032
            return
        L_0x0032:
            org.telegram.SQLite.SQLiteDatabase r6 = r4.database     // Catch:{ Exception -> 0x0066 }
            java.lang.String r3 = "REPLACE INTO sent_files_v2 VALUES(?, ?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r0 = r6.executeFast(r3)     // Catch:{ Exception -> 0x0066 }
            r0.requery()     // Catch:{ Exception -> 0x0066 }
            org.telegram.tgnet.NativeByteBuffer r6 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x0066 }
            int r3 = r1.getObjectSize()     // Catch:{ Exception -> 0x0066 }
            r6.<init>((int) r3)     // Catch:{ Exception -> 0x0066 }
            r1.serializeToStream(r6)     // Catch:{ Exception -> 0x0066 }
            r0.bindString(r2, r5)     // Catch:{ Exception -> 0x0066 }
            r5 = 2
            r0.bindInteger(r5, r7)     // Catch:{ Exception -> 0x0066 }
            r5 = 3
            r0.bindByteBuffer((int) r5, (org.telegram.tgnet.NativeByteBuffer) r6)     // Catch:{ Exception -> 0x0066 }
            r5 = 4
            r0.bindString(r5, r8)     // Catch:{ Exception -> 0x0066 }
            r0.step()     // Catch:{ Exception -> 0x0066 }
            r6.reuse()     // Catch:{ Exception -> 0x0066 }
        L_0x005e:
            if (r0 == 0) goto L_0x006d
        L_0x0060:
            r0.dispose()
            goto L_0x006d
        L_0x0064:
            r5 = move-exception
            goto L_0x006e
        L_0x0066:
            r5 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r5)     // Catch:{ all -> 0x0064 }
            if (r0 == 0) goto L_0x006d
            goto L_0x0060
        L_0x006d:
            return
        L_0x006e:
            if (r0 == 0) goto L_0x0073
            r0.dispose()
        L_0x0073:
            goto L_0x0075
        L_0x0074:
            throw r5
        L_0x0075:
            goto L_0x0074
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$putSentFile$137(java.lang.String, org.telegram.tgnet.TLObject, int, java.lang.String):void");
    }

    public void updateEncryptedChatSeq(TLRPC$EncryptedChat tLRPC$EncryptedChat, boolean z) {
        if (tLRPC$EncryptedChat != null) {
            this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda173(this, tLRPC$EncryptedChat, z));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateEncryptedChatSeq$138(TLRPC$EncryptedChat tLRPC$EncryptedChat, boolean z) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            sQLitePreparedStatement = this.database.executeFast("UPDATE enc_chats SET seq_in = ?, seq_out = ?, use_count = ?, in_seq_no = ?, mtproto_seq = ? WHERE uid = ?");
            sQLitePreparedStatement.bindInteger(1, tLRPC$EncryptedChat.seq_in);
            sQLitePreparedStatement.bindInteger(2, tLRPC$EncryptedChat.seq_out);
            sQLitePreparedStatement.bindInteger(3, (tLRPC$EncryptedChat.key_use_count_in << 16) | tLRPC$EncryptedChat.key_use_count_out);
            sQLitePreparedStatement.bindInteger(4, tLRPC$EncryptedChat.in_seq_no);
            sQLitePreparedStatement.bindInteger(5, tLRPC$EncryptedChat.mtproto_seq);
            sQLitePreparedStatement.bindInteger(6, tLRPC$EncryptedChat.id);
            sQLitePreparedStatement.step();
            if (z && tLRPC$EncryptedChat.in_seq_no != 0) {
                long encryptedChatId = (long) DialogObject.getEncryptedChatId((long) tLRPC$EncryptedChat.id);
                this.database.executeFast(String.format(Locale.US, "DELETE FROM messages_v2 WHERE mid IN (SELECT m.mid FROM messages_v2 as m LEFT JOIN messages_seq as s ON m.mid = s.mid WHERE m.uid = %d AND m.date = 0 AND m.mid < 0 AND s.seq_out <= %d) AND uid = %d", new Object[]{Long.valueOf(encryptedChatId), Integer.valueOf(tLRPC$EncryptedChat.in_seq_no), Long.valueOf(encryptedChatId)})).stepThis().dispose();
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
            if (sQLitePreparedStatement == null) {
                return;
            }
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
        sQLitePreparedStatement.dispose();
    }

    public void updateEncryptedChatTTL(TLRPC$EncryptedChat tLRPC$EncryptedChat) {
        if (tLRPC$EncryptedChat != null) {
            this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda169(this, tLRPC$EncryptedChat));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateEncryptedChatTTL$139(TLRPC$EncryptedChat tLRPC$EncryptedChat) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            sQLitePreparedStatement = this.database.executeFast("UPDATE enc_chats SET ttl = ? WHERE uid = ?");
            sQLitePreparedStatement.bindInteger(1, tLRPC$EncryptedChat.ttl);
            sQLitePreparedStatement.bindInteger(2, tLRPC$EncryptedChat.id);
            sQLitePreparedStatement.step();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
            if (sQLitePreparedStatement == null) {
                return;
            }
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
        sQLitePreparedStatement.dispose();
    }

    public void updateEncryptedChatLayer(TLRPC$EncryptedChat tLRPC$EncryptedChat) {
        if (tLRPC$EncryptedChat != null) {
            this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda171(this, tLRPC$EncryptedChat));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateEncryptedChatLayer$140(TLRPC$EncryptedChat tLRPC$EncryptedChat) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            sQLitePreparedStatement = this.database.executeFast("UPDATE enc_chats SET layer = ? WHERE uid = ?");
            sQLitePreparedStatement.bindInteger(1, tLRPC$EncryptedChat.layer);
            sQLitePreparedStatement.bindInteger(2, tLRPC$EncryptedChat.id);
            sQLitePreparedStatement.step();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
            if (sQLitePreparedStatement == null) {
                return;
            }
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
        sQLitePreparedStatement.dispose();
    }

    public void updateEncryptedChat(TLRPC$EncryptedChat tLRPC$EncryptedChat) {
        if (tLRPC$EncryptedChat != null) {
            this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda170(this, tLRPC$EncryptedChat));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateEncryptedChat$141(TLRPC$EncryptedChat tLRPC$EncryptedChat) {
        byte[] bArr;
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            byte[] bArr2 = tLRPC$EncryptedChat.key_hash;
            if ((bArr2 == null || bArr2.length < 16) && (bArr = tLRPC$EncryptedChat.auth_key) != null) {
                tLRPC$EncryptedChat.key_hash = AndroidUtilities.calcAuthKeyHash(bArr);
            }
            sQLitePreparedStatement = this.database.executeFast("UPDATE enc_chats SET data = ?, g = ?, authkey = ?, ttl = ?, layer = ?, seq_in = ?, seq_out = ?, use_count = ?, exchange_id = ?, key_date = ?, fprint = ?, fauthkey = ?, khash = ?, in_seq_no = ?, admin_id = ?, mtproto_seq = ? WHERE uid = ?");
            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$EncryptedChat.getObjectSize());
            byte[] bArr3 = tLRPC$EncryptedChat.a_or_b;
            NativeByteBuffer nativeByteBuffer2 = new NativeByteBuffer(bArr3 != null ? bArr3.length : 1);
            byte[] bArr4 = tLRPC$EncryptedChat.auth_key;
            NativeByteBuffer nativeByteBuffer3 = new NativeByteBuffer(bArr4 != null ? bArr4.length : 1);
            byte[] bArr5 = tLRPC$EncryptedChat.future_auth_key;
            NativeByteBuffer nativeByteBuffer4 = new NativeByteBuffer(bArr5 != null ? bArr5.length : 1);
            byte[] bArr6 = tLRPC$EncryptedChat.key_hash;
            NativeByteBuffer nativeByteBuffer5 = new NativeByteBuffer(bArr6 != null ? bArr6.length : 1);
            tLRPC$EncryptedChat.serializeToStream(nativeByteBuffer);
            sQLitePreparedStatement.bindByteBuffer(1, nativeByteBuffer);
            byte[] bArr7 = tLRPC$EncryptedChat.a_or_b;
            if (bArr7 != null) {
                nativeByteBuffer2.writeBytes(bArr7);
            }
            byte[] bArr8 = tLRPC$EncryptedChat.auth_key;
            if (bArr8 != null) {
                nativeByteBuffer3.writeBytes(bArr8);
            }
            byte[] bArr9 = tLRPC$EncryptedChat.future_auth_key;
            if (bArr9 != null) {
                nativeByteBuffer4.writeBytes(bArr9);
            }
            byte[] bArr10 = tLRPC$EncryptedChat.key_hash;
            if (bArr10 != null) {
                nativeByteBuffer5.writeBytes(bArr10);
            }
            sQLitePreparedStatement.bindByteBuffer(2, nativeByteBuffer2);
            sQLitePreparedStatement.bindByteBuffer(3, nativeByteBuffer3);
            sQLitePreparedStatement.bindInteger(4, tLRPC$EncryptedChat.ttl);
            sQLitePreparedStatement.bindInteger(5, tLRPC$EncryptedChat.layer);
            sQLitePreparedStatement.bindInteger(6, tLRPC$EncryptedChat.seq_in);
            sQLitePreparedStatement.bindInteger(7, tLRPC$EncryptedChat.seq_out);
            sQLitePreparedStatement.bindInteger(8, (tLRPC$EncryptedChat.key_use_count_in << 16) | tLRPC$EncryptedChat.key_use_count_out);
            sQLitePreparedStatement.bindLong(9, tLRPC$EncryptedChat.exchange_id);
            sQLitePreparedStatement.bindInteger(10, tLRPC$EncryptedChat.key_create_date);
            sQLitePreparedStatement.bindLong(11, tLRPC$EncryptedChat.future_key_fingerprint);
            sQLitePreparedStatement.bindByteBuffer(12, nativeByteBuffer4);
            sQLitePreparedStatement.bindByteBuffer(13, nativeByteBuffer5);
            sQLitePreparedStatement.bindInteger(14, tLRPC$EncryptedChat.in_seq_no);
            sQLitePreparedStatement.bindLong(15, tLRPC$EncryptedChat.admin_id);
            sQLitePreparedStatement.bindInteger(16, tLRPC$EncryptedChat.mtproto_seq);
            sQLitePreparedStatement.bindInteger(17, tLRPC$EncryptedChat.id);
            sQLitePreparedStatement.step();
            nativeByteBuffer.reuse();
            nativeByteBuffer2.reuse();
            nativeByteBuffer3.reuse();
            nativeByteBuffer4.reuse();
            nativeByteBuffer5.reuse();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
            if (sQLitePreparedStatement == null) {
                return;
            }
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
        sQLitePreparedStatement.dispose();
    }

    public void isDialogHasTopMessage(long j, Runnable runnable) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda93(this, j, runnable));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$isDialogHasTopMessage$142(long j, Runnable runnable) {
        boolean z = false;
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT last_mid FROM dialogs WHERE did = %d", new Object[]{Long.valueOf(j)}), new Object[0]);
            if (queryFinalized.next() && queryFinalized.intValue(0) != 0) {
                z = true;
            }
            queryFinalized.dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        if (!z) {
            AndroidUtilities.runOnUIThread(runnable);
        }
    }

    public boolean hasAuthMessage(int i) {
        CountDownLatch countDownLatch = new CountDownLatch(1);
        boolean[] zArr = new boolean[1];
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda62(this, i, zArr, countDownLatch));
        try {
            countDownLatch.await();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        return zArr[0];
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$hasAuthMessage$143(int i, boolean[] zArr, CountDownLatch countDownLatch) {
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT mid FROM messages_v2 WHERE uid = 777000 AND date = %d AND mid < 0 LIMIT 1", new Object[]{Integer.valueOf(i)}), new Object[0]);
            zArr[0] = queryFinalized.next();
            queryFinalized.dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        } catch (Throwable th) {
            countDownLatch.countDown();
            throw th;
        }
        countDownLatch.countDown();
    }

    public void getEncryptedChat(long j, CountDownLatch countDownLatch, ArrayList<TLObject> arrayList) {
        if (countDownLatch != null && arrayList != null) {
            this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda99(this, j, arrayList, countDownLatch));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getEncryptedChat$144(long j, ArrayList arrayList, CountDownLatch countDownLatch) {
        try {
            ArrayList arrayList2 = new ArrayList();
            ArrayList arrayList3 = new ArrayList();
            getEncryptedChatsInternal("" + j, arrayList3, arrayList2);
            if (!arrayList3.isEmpty() && !arrayList2.isEmpty()) {
                ArrayList arrayList4 = new ArrayList();
                getUsersInternal(TextUtils.join(",", arrayList2), arrayList4);
                if (!arrayList4.isEmpty()) {
                    arrayList.add((TLObject) arrayList3.get(0));
                    arrayList.add((TLObject) arrayList4.get(0));
                }
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        } catch (Throwable th) {
            countDownLatch.countDown();
            throw th;
        }
        countDownLatch.countDown();
    }

    public void putEncryptedChat(TLRPC$EncryptedChat tLRPC$EncryptedChat, TLRPC$User tLRPC$User, TLRPC$Dialog tLRPC$Dialog) {
        if (tLRPC$EncryptedChat != null) {
            this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda172(this, tLRPC$EncryptedChat, tLRPC$User, tLRPC$Dialog));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$putEncryptedChat$145(TLRPC$EncryptedChat tLRPC$EncryptedChat, TLRPC$User tLRPC$User, TLRPC$Dialog tLRPC$Dialog) {
        byte[] bArr;
        TLRPC$EncryptedChat tLRPC$EncryptedChat2 = tLRPC$EncryptedChat;
        TLRPC$User tLRPC$User2 = tLRPC$User;
        TLRPC$Dialog tLRPC$Dialog2 = tLRPC$Dialog;
        try {
            byte[] bArr2 = tLRPC$EncryptedChat2.key_hash;
            if ((bArr2 == null || bArr2.length < 16) && (bArr = tLRPC$EncryptedChat2.auth_key) != null) {
                tLRPC$EncryptedChat2.key_hash = AndroidUtilities.calcAuthKeyHash(bArr);
            }
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO enc_chats VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$EncryptedChat.getObjectSize());
            byte[] bArr3 = tLRPC$EncryptedChat2.a_or_b;
            NativeByteBuffer nativeByteBuffer2 = new NativeByteBuffer(bArr3 != null ? bArr3.length : 1);
            byte[] bArr4 = tLRPC$EncryptedChat2.auth_key;
            NativeByteBuffer nativeByteBuffer3 = new NativeByteBuffer(bArr4 != null ? bArr4.length : 1);
            byte[] bArr5 = tLRPC$EncryptedChat2.future_auth_key;
            NativeByteBuffer nativeByteBuffer4 = new NativeByteBuffer(bArr5 != null ? bArr5.length : 1);
            byte[] bArr6 = tLRPC$EncryptedChat2.key_hash;
            NativeByteBuffer nativeByteBuffer5 = new NativeByteBuffer(bArr6 != null ? bArr6.length : 1);
            tLRPC$EncryptedChat2.serializeToStream(nativeByteBuffer);
            executeFast.bindInteger(1, tLRPC$EncryptedChat2.id);
            executeFast.bindLong(2, tLRPC$User2.id);
            executeFast.bindString(3, formatUserSearchName(tLRPC$User2));
            executeFast.bindByteBuffer(4, nativeByteBuffer);
            byte[] bArr7 = tLRPC$EncryptedChat2.a_or_b;
            if (bArr7 != null) {
                nativeByteBuffer2.writeBytes(bArr7);
            }
            byte[] bArr8 = tLRPC$EncryptedChat2.auth_key;
            if (bArr8 != null) {
                nativeByteBuffer3.writeBytes(bArr8);
            }
            byte[] bArr9 = tLRPC$EncryptedChat2.future_auth_key;
            if (bArr9 != null) {
                nativeByteBuffer4.writeBytes(bArr9);
            }
            byte[] bArr10 = tLRPC$EncryptedChat2.key_hash;
            if (bArr10 != null) {
                nativeByteBuffer5.writeBytes(bArr10);
            }
            executeFast.bindByteBuffer(5, nativeByteBuffer2);
            executeFast.bindByteBuffer(6, nativeByteBuffer3);
            executeFast.bindInteger(7, tLRPC$EncryptedChat2.ttl);
            executeFast.bindInteger(8, tLRPC$EncryptedChat2.layer);
            executeFast.bindInteger(9, tLRPC$EncryptedChat2.seq_in);
            executeFast.bindInteger(10, tLRPC$EncryptedChat2.seq_out);
            executeFast.bindInteger(11, tLRPC$EncryptedChat2.key_use_count_out | (tLRPC$EncryptedChat2.key_use_count_in << 16));
            executeFast.bindLong(12, tLRPC$EncryptedChat2.exchange_id);
            executeFast.bindInteger(13, tLRPC$EncryptedChat2.key_create_date);
            executeFast.bindLong(14, tLRPC$EncryptedChat2.future_key_fingerprint);
            executeFast.bindByteBuffer(15, nativeByteBuffer4);
            executeFast.bindByteBuffer(16, nativeByteBuffer5);
            executeFast.bindInteger(17, tLRPC$EncryptedChat2.in_seq_no);
            executeFast.bindLong(18, tLRPC$EncryptedChat2.admin_id);
            executeFast.bindInteger(19, tLRPC$EncryptedChat2.mtproto_seq);
            executeFast.step();
            executeFast.dispose();
            nativeByteBuffer.reuse();
            nativeByteBuffer2.reuse();
            nativeByteBuffer3.reuse();
            nativeByteBuffer4.reuse();
            nativeByteBuffer5.reuse();
            if (tLRPC$Dialog2 != null) {
                SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO dialogs VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                executeFast2.bindLong(1, tLRPC$Dialog2.id);
                executeFast2.bindInteger(2, tLRPC$Dialog2.last_message_date);
                executeFast2.bindInteger(3, tLRPC$Dialog2.unread_count);
                executeFast2.bindInteger(4, tLRPC$Dialog2.top_message);
                executeFast2.bindInteger(5, tLRPC$Dialog2.read_inbox_max_id);
                executeFast2.bindInteger(6, tLRPC$Dialog2.read_outbox_max_id);
                executeFast2.bindInteger(7, 0);
                executeFast2.bindInteger(8, tLRPC$Dialog2.unread_mentions_count);
                executeFast2.bindInteger(9, tLRPC$Dialog2.pts);
                executeFast2.bindInteger(10, 0);
                executeFast2.bindInteger(11, tLRPC$Dialog2.pinnedNum);
                executeFast2.bindInteger(12, tLRPC$Dialog2.flags);
                executeFast2.bindInteger(13, tLRPC$Dialog2.folder_id);
                executeFast2.bindNull(14);
                executeFast2.bindInteger(15, tLRPC$Dialog2.unread_reactions_count);
                executeFast2.step();
                executeFast2.dispose();
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    private String formatUserSearchName(TLRPC$User tLRPC$User) {
        StringBuilder sb = new StringBuilder();
        String str = tLRPC$User.first_name;
        if (str != null && str.length() > 0) {
            sb.append(tLRPC$User.first_name);
        }
        String str2 = tLRPC$User.last_name;
        if (str2 != null && str2.length() > 0) {
            if (sb.length() > 0) {
                sb.append(" ");
            }
            sb.append(tLRPC$User.last_name);
        }
        sb.append(";;;");
        String str3 = tLRPC$User.username;
        if (str3 != null && str3.length() > 0) {
            sb.append(tLRPC$User.username);
        }
        return sb.toString().toLowerCase();
    }

    private void putUsersInternal(ArrayList<TLRPC$User> arrayList) throws Exception {
        if (arrayList != null && !arrayList.isEmpty()) {
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO users VALUES(?, ?, ?, ?)");
            for (int i = 0; i < arrayList.size(); i++) {
                TLRPC$User tLRPC$User = arrayList.get(i);
                if (tLRPC$User.min) {
                    SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM users WHERE uid = %d", new Object[]{Long.valueOf(tLRPC$User.id)}), new Object[0]);
                    if (queryFinalized.next()) {
                        try {
                            NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                            if (byteBufferValue != null) {
                                TLRPC$User TLdeserialize = TLRPC$User.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                byteBufferValue.reuse();
                                if (TLdeserialize != null) {
                                    String str = tLRPC$User.username;
                                    if (str != null) {
                                        TLdeserialize.username = str;
                                        TLdeserialize.flags |= 8;
                                    } else {
                                        TLdeserialize.username = null;
                                        TLdeserialize.flags &= -9;
                                    }
                                    if (tLRPC$User.apply_min_photo) {
                                        TLRPC$UserProfilePhoto tLRPC$UserProfilePhoto = tLRPC$User.photo;
                                        if (tLRPC$UserProfilePhoto != null) {
                                            TLdeserialize.photo = tLRPC$UserProfilePhoto;
                                            TLdeserialize.flags |= 32;
                                        } else {
                                            TLdeserialize.photo = null;
                                            TLdeserialize.flags &= -33;
                                        }
                                    }
                                    tLRPC$User = TLdeserialize;
                                }
                            }
                        } catch (Exception e) {
                            FileLog.e((Throwable) e);
                        }
                    }
                    queryFinalized.dispose();
                }
                executeFast.requery();
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$User.getObjectSize());
                tLRPC$User.serializeToStream(nativeByteBuffer);
                executeFast.bindLong(1, tLRPC$User.id);
                executeFast.bindString(2, formatUserSearchName(tLRPC$User));
                TLRPC$UserStatus tLRPC$UserStatus = tLRPC$User.status;
                if (tLRPC$UserStatus != null) {
                    if (tLRPC$UserStatus instanceof TLRPC$TL_userStatusRecently) {
                        tLRPC$UserStatus.expires = -100;
                    } else if (tLRPC$UserStatus instanceof TLRPC$TL_userStatusLastWeek) {
                        tLRPC$UserStatus.expires = -101;
                    } else if (tLRPC$UserStatus instanceof TLRPC$TL_userStatusLastMonth) {
                        tLRPC$UserStatus.expires = -102;
                    }
                    executeFast.bindInteger(3, tLRPC$UserStatus.expires);
                } else {
                    executeFast.bindInteger(3, 0);
                }
                executeFast.bindByteBuffer(4, nativeByteBuffer);
                executeFast.step();
                nativeByteBuffer.reuse();
            }
            executeFast.dispose();
        }
    }

    public void updateChatDefaultBannedRights(long j, TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights, int i) {
        if (tLRPC$TL_chatBannedRights != null && j != 0) {
            this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda78(this, j, i, tLRPC$TL_chatBannedRights));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateChatDefaultBannedRights$146(long j, int i, TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights) {
        NativeByteBuffer byteBufferValue;
        TLRPC$Chat tLRPC$Chat = null;
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM chats WHERE uid = %d", new Object[]{Long.valueOf(j)}), new Object[0]);
            if (queryFinalized.next() && (byteBufferValue = queryFinalized.byteBufferValue(0)) != null) {
                tLRPC$Chat = TLRPC$Chat.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                byteBufferValue.reuse();
            }
            queryFinalized.dispose();
            if (tLRPC$Chat == null) {
                return;
            }
            if (tLRPC$Chat.default_banned_rights == null || i >= tLRPC$Chat.version) {
                tLRPC$Chat.default_banned_rights = tLRPC$TL_chatBannedRights;
                tLRPC$Chat.flags |= 262144;
                tLRPC$Chat.version = i;
                SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE chats SET data = ? WHERE uid = ?");
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$Chat.getObjectSize());
                tLRPC$Chat.serializeToStream(nativeByteBuffer);
                executeFast.bindByteBuffer(1, nativeByteBuffer);
                executeFast.bindLong(2, tLRPC$Chat.id);
                executeFast.step();
                nativeByteBuffer.reuse();
                executeFast.dispose();
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    private void putChatsInternal(ArrayList<TLRPC$Chat> arrayList) throws Exception {
        if (arrayList != null && !arrayList.isEmpty()) {
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO chats VALUES(?, ?, ?)");
            for (int i = 0; i < arrayList.size(); i++) {
                TLRPC$Chat tLRPC$Chat = arrayList.get(i);
                if (tLRPC$Chat.min) {
                    SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM chats WHERE uid = %d", new Object[]{Long.valueOf(tLRPC$Chat.id)}), new Object[0]);
                    if (queryFinalized.next()) {
                        try {
                            NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                            if (byteBufferValue != null) {
                                TLRPC$Chat TLdeserialize = TLRPC$Chat.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                byteBufferValue.reuse();
                                if (TLdeserialize != null) {
                                    TLdeserialize.title = tLRPC$Chat.title;
                                    TLdeserialize.photo = tLRPC$Chat.photo;
                                    TLdeserialize.broadcast = tLRPC$Chat.broadcast;
                                    TLdeserialize.verified = tLRPC$Chat.verified;
                                    TLdeserialize.megagroup = tLRPC$Chat.megagroup;
                                    TLdeserialize.call_not_empty = tLRPC$Chat.call_not_empty;
                                    TLdeserialize.call_active = tLRPC$Chat.call_active;
                                    TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights = tLRPC$Chat.default_banned_rights;
                                    if (tLRPC$TL_chatBannedRights != null) {
                                        TLdeserialize.default_banned_rights = tLRPC$TL_chatBannedRights;
                                        TLdeserialize.flags |= 262144;
                                    }
                                    TLRPC$TL_chatAdminRights tLRPC$TL_chatAdminRights = tLRPC$Chat.admin_rights;
                                    if (tLRPC$TL_chatAdminRights != null) {
                                        TLdeserialize.admin_rights = tLRPC$TL_chatAdminRights;
                                        TLdeserialize.flags |= 16384;
                                    }
                                    TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights2 = tLRPC$Chat.banned_rights;
                                    if (tLRPC$TL_chatBannedRights2 != null) {
                                        TLdeserialize.banned_rights = tLRPC$TL_chatBannedRights2;
                                        TLdeserialize.flags |= 32768;
                                    }
                                    String str = tLRPC$Chat.username;
                                    if (str != null) {
                                        TLdeserialize.username = str;
                                        TLdeserialize.flags |= 64;
                                    } else {
                                        TLdeserialize.username = null;
                                        TLdeserialize.flags &= -65;
                                    }
                                    tLRPC$Chat = TLdeserialize;
                                }
                            }
                        } catch (Exception e) {
                            FileLog.e((Throwable) e);
                        }
                    }
                    queryFinalized.dispose();
                }
                executeFast.requery();
                tLRPC$Chat.flags |= 131072;
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$Chat.getObjectSize());
                tLRPC$Chat.serializeToStream(nativeByteBuffer);
                executeFast.bindLong(1, tLRPC$Chat.id);
                String str2 = tLRPC$Chat.title;
                if (str2 != null) {
                    executeFast.bindString(2, str2.toLowerCase());
                } else {
                    executeFast.bindString(2, "");
                }
                executeFast.bindByteBuffer(3, nativeByteBuffer);
                executeFast.step();
                nativeByteBuffer.reuse();
            }
            executeFast.dispose();
        }
    }

    public void getUsersInternal(String str, ArrayList<TLRPC$User> arrayList) throws Exception {
        if (str != null && str.length() != 0 && arrayList != null) {
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data, status FROM users WHERE uid IN(%s)", new Object[]{str}), new Object[0]);
            while (queryFinalized.next()) {
                try {
                    NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                    if (byteBufferValue != null) {
                        TLRPC$User TLdeserialize = TLRPC$User.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        byteBufferValue.reuse();
                        if (TLdeserialize != null) {
                            TLRPC$UserStatus tLRPC$UserStatus = TLdeserialize.status;
                            if (tLRPC$UserStatus != null) {
                                tLRPC$UserStatus.expires = queryFinalized.intValue(1);
                            }
                            arrayList.add(TLdeserialize);
                        }
                    }
                } catch (Exception e) {
                    FileLog.e((Throwable) e);
                }
            }
            queryFinalized.dispose();
        }
    }

    public void getChatsInternal(String str, ArrayList<TLRPC$Chat> arrayList) throws Exception {
        if (str != null && str.length() != 0 && arrayList != null) {
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM chats WHERE uid IN(%s)", new Object[]{str}), new Object[0]);
            while (queryFinalized.next()) {
                try {
                    NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                    if (byteBufferValue != null) {
                        TLRPC$Chat TLdeserialize = TLRPC$Chat.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        byteBufferValue.reuse();
                        if (TLdeserialize != null) {
                            arrayList.add(TLdeserialize);
                        }
                    }
                } catch (Exception e) {
                    FileLog.e((Throwable) e);
                }
            }
            queryFinalized.dispose();
        }
    }

    public void getEncryptedChatsInternal(String str, ArrayList<TLRPC$EncryptedChat> arrayList, ArrayList<Long> arrayList2) throws Exception {
        if (str != null && str.length() != 0 && arrayList != null) {
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data, user, g, authkey, ttl, layer, seq_in, seq_out, use_count, exchange_id, key_date, fprint, fauthkey, khash, in_seq_no, admin_id, mtproto_seq FROM enc_chats WHERE uid IN(%s)", new Object[]{str}), new Object[0]);
            while (queryFinalized.next()) {
                try {
                    NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                    if (byteBufferValue != null) {
                        TLRPC$EncryptedChat TLdeserialize = TLRPC$EncryptedChat.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        byteBufferValue.reuse();
                        if (TLdeserialize != null) {
                            long longValue = queryFinalized.longValue(1);
                            TLdeserialize.user_id = longValue;
                            if (arrayList2 != null && !arrayList2.contains(Long.valueOf(longValue))) {
                                arrayList2.add(Long.valueOf(TLdeserialize.user_id));
                            }
                            TLdeserialize.a_or_b = queryFinalized.byteArrayValue(2);
                            TLdeserialize.auth_key = queryFinalized.byteArrayValue(3);
                            TLdeserialize.ttl = queryFinalized.intValue(4);
                            TLdeserialize.layer = queryFinalized.intValue(5);
                            TLdeserialize.seq_in = queryFinalized.intValue(6);
                            TLdeserialize.seq_out = queryFinalized.intValue(7);
                            int intValue = queryFinalized.intValue(8);
                            TLdeserialize.key_use_count_in = (short) (intValue >> 16);
                            TLdeserialize.key_use_count_out = (short) intValue;
                            TLdeserialize.exchange_id = queryFinalized.longValue(9);
                            TLdeserialize.key_create_date = queryFinalized.intValue(10);
                            TLdeserialize.future_key_fingerprint = queryFinalized.longValue(11);
                            TLdeserialize.future_auth_key = queryFinalized.byteArrayValue(12);
                            TLdeserialize.key_hash = queryFinalized.byteArrayValue(13);
                            TLdeserialize.in_seq_no = queryFinalized.intValue(14);
                            long longValue2 = queryFinalized.longValue(15);
                            if (longValue2 != 0) {
                                TLdeserialize.admin_id = longValue2;
                            }
                            TLdeserialize.mtproto_seq = queryFinalized.intValue(16);
                            arrayList.add(TLdeserialize);
                        }
                    }
                } catch (Exception e) {
                    FileLog.e((Throwable) e);
                }
            }
            queryFinalized.dispose();
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: putUsersAndChatsInternal */
    public void lambda$putUsersAndChats$147(ArrayList<TLRPC$User> arrayList, ArrayList<TLRPC$Chat> arrayList2, boolean z) {
        if (z) {
            try {
                this.database.beginTransaction();
            } catch (Exception e) {
                FileLog.e((Throwable) e);
                return;
            }
        }
        putUsersInternal(arrayList);
        putChatsInternal(arrayList2);
        if (z) {
            this.database.commitTransaction();
        }
    }

    public void putUsersAndChats(ArrayList<TLRPC$User> arrayList, ArrayList<TLRPC$Chat> arrayList2, boolean z, boolean z2) {
        if (arrayList != null && arrayList.isEmpty() && arrayList2 != null && arrayList2.isEmpty()) {
            return;
        }
        if (z2) {
            this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda147(this, arrayList, arrayList2, z));
        } else {
            lambda$putUsersAndChats$147(arrayList, arrayList2, z);
        }
    }

    public void removeFromDownloadQueue(long j, int i, boolean z) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda189(this, z, i, j));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$removeFromDownloadQueue$148(boolean z, int i, long j) {
        if (z) {
            try {
                SQLiteDatabase sQLiteDatabase = this.database;
                Locale locale = Locale.US;
                SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized(String.format(locale, "SELECT min(date) FROM download_queue WHERE type = %d", new Object[]{Integer.valueOf(i)}), new Object[0]);
                int intValue = queryFinalized.next() ? queryFinalized.intValue(0) : -1;
                queryFinalized.dispose();
                if (intValue != -1) {
                    this.database.executeFast(String.format(locale, "UPDATE download_queue SET date = %d WHERE uid = %d AND type = %d", new Object[]{Integer.valueOf(intValue - 1), Long.valueOf(j), Integer.valueOf(i)})).stepThis().dispose();
                }
            } catch (Exception e) {
                FileLog.e((Throwable) e);
            }
        } else {
            this.database.executeFast(String.format(Locale.US, "DELETE FROM download_queue WHERE uid = %d AND type = %d", new Object[]{Long.valueOf(j), Integer.valueOf(i)})).stepThis().dispose();
        }
    }

    private void deleteFromDownloadQueue(ArrayList<Pair<Long, Integer>> arrayList, boolean z) {
        if (arrayList != null && !arrayList.isEmpty()) {
            if (z) {
                try {
                    this.database.beginTransaction();
                } catch (Exception e) {
                    FileLog.e((Throwable) e);
                    return;
                }
            }
            SQLitePreparedStatement executeFast = this.database.executeFast("DELETE FROM download_queue WHERE uid = ? AND type = ?");
            int size = arrayList.size();
            for (int i = 0; i < size; i++) {
                Pair pair = arrayList.get(i);
                executeFast.requery();
                executeFast.bindLong(1, ((Long) pair.first).longValue());
                executeFast.bindInteger(2, ((Integer) pair.second).intValue());
                executeFast.step();
            }
            executeFast.dispose();
            if (z) {
                this.database.commitTransaction();
            }
            AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda128(this, arrayList));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$deleteFromDownloadQueue$149(ArrayList arrayList) {
        getDownloadController().cancelDownloading(arrayList);
    }

    public void clearDownloadQueue(int i) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda33(this, i));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$clearDownloadQueue$150(int i) {
        if (i == 0) {
            try {
                this.database.executeFast("DELETE FROM download_queue WHERE 1").stepThis().dispose();
            } catch (Exception e) {
                FileLog.e((Throwable) e);
            }
        } else {
            this.database.executeFast(String.format(Locale.US, "DELETE FROM download_queue WHERE type = %d", new Object[]{Integer.valueOf(i)})).stepThis().dispose();
        }
    }

    public void getDownloadQueue(int i) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda35(this, i));
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Code restructure failed: missing block: B:10:0x005d, code lost:
        r3 = r5.ttl_seconds;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$getDownloadQueue$152(int r9) {
        /*
            r8 = this;
            java.util.ArrayList r0 = new java.util.ArrayList     // Catch:{ Exception -> 0x0096 }
            r0.<init>()     // Catch:{ Exception -> 0x0096 }
            org.telegram.SQLite.SQLiteDatabase r1 = r8.database     // Catch:{ Exception -> 0x0096 }
            java.util.Locale r2 = java.util.Locale.US     // Catch:{ Exception -> 0x0096 }
            java.lang.String r3 = "SELECT uid, type, data, parent FROM download_queue WHERE type = %d ORDER BY date DESC LIMIT 3"
            r4 = 1
            java.lang.Object[] r5 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x0096 }
            java.lang.Integer r6 = java.lang.Integer.valueOf(r9)     // Catch:{ Exception -> 0x0096 }
            r7 = 0
            r5[r7] = r6     // Catch:{ Exception -> 0x0096 }
            java.lang.String r2 = java.lang.String.format(r2, r3, r5)     // Catch:{ Exception -> 0x0096 }
            java.lang.Object[] r3 = new java.lang.Object[r7]     // Catch:{ Exception -> 0x0096 }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r2, r3)     // Catch:{ Exception -> 0x0096 }
        L_0x001f:
            boolean r2 = r1.next()     // Catch:{ Exception -> 0x0096 }
            if (r2 == 0) goto L_0x008a
            org.telegram.messenger.DownloadObject r2 = new org.telegram.messenger.DownloadObject     // Catch:{ Exception -> 0x0096 }
            r2.<init>()     // Catch:{ Exception -> 0x0096 }
            int r3 = r1.intValue(r4)     // Catch:{ Exception -> 0x0096 }
            r2.type = r3     // Catch:{ Exception -> 0x0096 }
            long r5 = r1.longValue(r7)     // Catch:{ Exception -> 0x0096 }
            r2.id = r5     // Catch:{ Exception -> 0x0096 }
            r3 = 3
            java.lang.String r3 = r1.stringValue(r3)     // Catch:{ Exception -> 0x0096 }
            r2.parent = r3     // Catch:{ Exception -> 0x0096 }
            r3 = 2
            org.telegram.tgnet.NativeByteBuffer r3 = r1.byteBufferValue(r3)     // Catch:{ Exception -> 0x0096 }
            if (r3 == 0) goto L_0x0086
            int r5 = r3.readInt32(r7)     // Catch:{ Exception -> 0x0096 }
            org.telegram.tgnet.TLRPC$MessageMedia r5 = org.telegram.tgnet.TLRPC$MessageMedia.TLdeserialize(r3, r5, r7)     // Catch:{ Exception -> 0x0096 }
            r3.reuse()     // Catch:{ Exception -> 0x0096 }
            org.telegram.tgnet.TLRPC$Document r3 = r5.document     // Catch:{ Exception -> 0x0096 }
            r6 = 60
            if (r3 == 0) goto L_0x0069
            r2.object = r3     // Catch:{ Exception -> 0x0096 }
            boolean r3 = org.telegram.messenger.MessageObject.isVideoDocument(r3)     // Catch:{ Exception -> 0x0096 }
            if (r3 == 0) goto L_0x0065
            int r3 = r5.ttl_seconds     // Catch:{ Exception -> 0x0096 }
            if (r3 <= 0) goto L_0x0065
            if (r3 > r6) goto L_0x0065
            r3 = 1
            goto L_0x0066
        L_0x0065:
            r3 = 0
        L_0x0066:
            r2.secret = r3     // Catch:{ Exception -> 0x0096 }
            goto L_0x007a
        L_0x0069:
            org.telegram.tgnet.TLRPC$Photo r3 = r5.photo     // Catch:{ Exception -> 0x0096 }
            if (r3 == 0) goto L_0x007a
            r2.object = r3     // Catch:{ Exception -> 0x0096 }
            int r3 = r5.ttl_seconds     // Catch:{ Exception -> 0x0096 }
            if (r3 <= 0) goto L_0x0077
            if (r3 > r6) goto L_0x0077
            r3 = 1
            goto L_0x0078
        L_0x0077:
            r3 = 0
        L_0x0078:
            r2.secret = r3     // Catch:{ Exception -> 0x0096 }
        L_0x007a:
            int r3 = r5.flags     // Catch:{ Exception -> 0x0096 }
            r5 = -2147483648(0xfffffffvar_, float:-0.0)
            r3 = r3 & r5
            if (r3 == 0) goto L_0x0083
            r3 = 1
            goto L_0x0084
        L_0x0083:
            r3 = 0
        L_0x0084:
            r2.forceCache = r3     // Catch:{ Exception -> 0x0096 }
        L_0x0086:
            r0.add(r2)     // Catch:{ Exception -> 0x0096 }
            goto L_0x001f
        L_0x008a:
            r1.dispose()     // Catch:{ Exception -> 0x0096 }
            org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda55 r1 = new org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda55     // Catch:{ Exception -> 0x0096 }
            r1.<init>(r8, r9, r0)     // Catch:{ Exception -> 0x0096 }
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r1)     // Catch:{ Exception -> 0x0096 }
            goto L_0x009a
        L_0x0096:
            r9 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r9)
        L_0x009a:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$getDownloadQueue$152(int):void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getDownloadQueue$151(int i, ArrayList arrayList) {
        getDownloadController().processDownloadObjects(i, arrayList);
    }

    private int getMessageMediaType(TLRPC$Message tLRPC$Message) {
        if (!(tLRPC$Message instanceof TLRPC$TL_message_secret)) {
            if (tLRPC$Message instanceof TLRPC$TL_message) {
                TLRPC$MessageMedia tLRPC$MessageMedia = tLRPC$Message.media;
                if (((tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPhoto) || (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaDocument)) && tLRPC$MessageMedia.ttl_seconds != 0) {
                    return 1;
                }
            }
            if ((tLRPC$Message.media instanceof TLRPC$TL_messageMediaPhoto) || MessageObject.isVideoMessage(tLRPC$Message)) {
                return 0;
            }
            return -1;
        } else if (!(tLRPC$Message.media instanceof TLRPC$TL_messageMediaPhoto) && !MessageObject.isGifMessage(tLRPC$Message) && !MessageObject.isVoiceMessage(tLRPC$Message) && !MessageObject.isVideoMessage(tLRPC$Message) && !MessageObject.isRoundVideoMessage(tLRPC$Message)) {
            return -1;
        } else {
            int i = tLRPC$Message.ttl;
            return (i <= 0 || i > 60) ? 0 : 1;
        }
    }

    public void putWebPages(LongSparseArray<TLRPC$WebPage> longSparseArray) {
        if (!isEmpty((LongSparseArray<?>) longSparseArray)) {
            this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda118(this, longSparseArray));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$putWebPages$154(LongSparseArray longSparseArray) {
        LongSparseArray longSparseArray2 = longSparseArray;
        try {
            ArrayList arrayList = new ArrayList();
            int size = longSparseArray.size();
            int i = 0;
            int i2 = 0;
            while (true) {
                int i3 = 2;
                if (i2 >= size) {
                    break;
                }
                SQLiteDatabase sQLiteDatabase = this.database;
                SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT mid, uid FROM webpage_pending_v2 WHERE id = " + longSparseArray2.keyAt(i2), new Object[i]);
                LongSparseArray longSparseArray3 = new LongSparseArray();
                while (queryFinalized.next()) {
                    long longValue = queryFinalized.longValue(1);
                    ArrayList arrayList2 = (ArrayList) longSparseArray3.get(longValue);
                    if (arrayList2 == null) {
                        arrayList2 = new ArrayList();
                        longSparseArray3.put(longValue, arrayList2);
                    }
                    arrayList2.add(Integer.valueOf(queryFinalized.intValue(i)));
                }
                queryFinalized.dispose();
                if (!longSparseArray3.isEmpty()) {
                    int size2 = longSparseArray3.size();
                    int i4 = 0;
                    while (i4 < size2) {
                        long keyAt = longSparseArray3.keyAt(i4);
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        Locale locale = Locale.US;
                        Object[] objArr = new Object[i3];
                        objArr[0] = TextUtils.join(",", (ArrayList) longSparseArray3.valueAt(i4));
                        objArr[1] = Long.valueOf(keyAt);
                        SQLiteCursor queryFinalized2 = sQLiteDatabase2.queryFinalized(String.format(locale, "SELECT mid, data FROM messages_v2 WHERE mid IN (%s) AND uid = %d", objArr), new Object[0]);
                        while (queryFinalized2.next()) {
                            int intValue = queryFinalized2.intValue(0);
                            NativeByteBuffer byteBufferValue = queryFinalized2.byteBufferValue(1);
                            if (byteBufferValue != null) {
                                TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                byteBufferValue.reuse();
                                TLRPC$MessageMedia tLRPC$MessageMedia = TLdeserialize.media;
                                if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaWebPage) {
                                    TLdeserialize.id = intValue;
                                    tLRPC$MessageMedia.webpage = (TLRPC$WebPage) longSparseArray2.valueAt(i2);
                                    arrayList.add(TLdeserialize);
                                }
                            }
                        }
                        queryFinalized2.dispose();
                        i4++;
                        i3 = 2;
                    }
                }
                i2++;
                i = 0;
            }
            if (!arrayList.isEmpty()) {
                this.database.beginTransaction();
                SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages_v2 SET data = ? WHERE mid = ? AND uid = ?");
                SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE media_v4 SET data = ? WHERE mid = ? AND uid = ?");
                for (int i5 = 0; i5 < arrayList.size(); i5++) {
                    TLRPC$Message tLRPC$Message = (TLRPC$Message) arrayList.get(i5);
                    NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$Message.getObjectSize());
                    tLRPC$Message.serializeToStream(nativeByteBuffer);
                    executeFast.requery();
                    executeFast.bindByteBuffer(1, nativeByteBuffer);
                    executeFast.bindInteger(2, tLRPC$Message.id);
                    executeFast.bindLong(3, MessageObject.getDialogId(tLRPC$Message));
                    executeFast.step();
                    executeFast2.requery();
                    executeFast2.bindByteBuffer(1, nativeByteBuffer);
                    executeFast2.bindInteger(2, tLRPC$Message.id);
                    executeFast2.bindLong(3, MessageObject.getDialogId(tLRPC$Message));
                    executeFast2.step();
                    nativeByteBuffer.reuse();
                }
                executeFast.dispose();
                executeFast2.dispose();
                this.database.commitTransaction();
                AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda127(this, arrayList));
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$putWebPages$153(ArrayList arrayList) {
        getNotificationCenter().postNotificationName(NotificationCenter.didReceivedWebpages, arrayList);
    }

    public void overwriteChannel(long j, TLRPC$TL_updates_channelDifferenceTooLong tLRPC$TL_updates_channelDifferenceTooLong, int i) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda79(this, j, i, tLRPC$TL_updates_channelDifferenceTooLong));
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Removed duplicated region for block: B:11:0x0157 A[Catch:{ Exception -> 0x0196 }] */
    /* JADX WARNING: Removed duplicated region for block: B:12:0x0159 A[Catch:{ Exception -> 0x0196 }] */
    /* JADX WARNING: Removed duplicated region for block: B:15:0x0183 A[Catch:{ Exception -> 0x0196 }] */
    /* JADX WARNING: Removed duplicated region for block: B:21:? A[RETURN, SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$overwriteChannel$156(long r19, int r21, org.telegram.tgnet.TLRPC$TL_updates_channelDifferenceTooLong r22) {
        /*
            r18 = this;
            r9 = r18
            r10 = r19
            r0 = r21
            r12 = r22
            long r13 = -r10
            org.telegram.SQLite.SQLiteDatabase r1 = r9.database     // Catch:{ Exception -> 0x0196 }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0196 }
            r2.<init>()     // Catch:{ Exception -> 0x0196 }
            java.lang.String r3 = "SELECT pinned FROM dialogs WHERE did = "
            r2.append(r3)     // Catch:{ Exception -> 0x0196 }
            r2.append(r13)     // Catch:{ Exception -> 0x0196 }
            java.lang.String r2 = r2.toString()     // Catch:{ Exception -> 0x0196 }
            r15 = 0
            java.lang.Object[] r3 = new java.lang.Object[r15]     // Catch:{ Exception -> 0x0196 }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r2, r3)     // Catch:{ Exception -> 0x0196 }
            boolean r2 = r1.next()     // Catch:{ Exception -> 0x0196 }
            r8 = 1
            if (r2 != 0) goto L_0x0033
            r2 = 0
            if (r0 == 0) goto L_0x0030
            r16 = 1
            goto L_0x0038
        L_0x0030:
            r16 = 0
            goto L_0x0038
        L_0x0033:
            int r2 = r1.intValue(r15)     // Catch:{ Exception -> 0x0196 }
            goto L_0x0030
        L_0x0038:
            r1.dispose()     // Catch:{ Exception -> 0x0196 }
            org.telegram.SQLite.SQLiteDatabase r1 = r9.database     // Catch:{ Exception -> 0x0196 }
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0196 }
            r3.<init>()     // Catch:{ Exception -> 0x0196 }
            java.lang.String r4 = "DELETE FROM chat_pinned_count WHERE uid = "
            r3.append(r4)     // Catch:{ Exception -> 0x0196 }
            r3.append(r13)     // Catch:{ Exception -> 0x0196 }
            java.lang.String r3 = r3.toString()     // Catch:{ Exception -> 0x0196 }
            org.telegram.SQLite.SQLitePreparedStatement r1 = r1.executeFast(r3)     // Catch:{ Exception -> 0x0196 }
            org.telegram.SQLite.SQLitePreparedStatement r1 = r1.stepThis()     // Catch:{ Exception -> 0x0196 }
            r1.dispose()     // Catch:{ Exception -> 0x0196 }
            org.telegram.SQLite.SQLiteDatabase r1 = r9.database     // Catch:{ Exception -> 0x0196 }
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0196 }
            r3.<init>()     // Catch:{ Exception -> 0x0196 }
            java.lang.String r4 = "DELETE FROM chat_pinned_v2 WHERE uid = "
            r3.append(r4)     // Catch:{ Exception -> 0x0196 }
            r3.append(r13)     // Catch:{ Exception -> 0x0196 }
            java.lang.String r3 = r3.toString()     // Catch:{ Exception -> 0x0196 }
            org.telegram.SQLite.SQLitePreparedStatement r1 = r1.executeFast(r3)     // Catch:{ Exception -> 0x0196 }
            org.telegram.SQLite.SQLitePreparedStatement r1 = r1.stepThis()     // Catch:{ Exception -> 0x0196 }
            r1.dispose()     // Catch:{ Exception -> 0x0196 }
            org.telegram.SQLite.SQLiteDatabase r1 = r9.database     // Catch:{ Exception -> 0x0196 }
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0196 }
            r3.<init>()     // Catch:{ Exception -> 0x0196 }
            java.lang.String r4 = "DELETE FROM messages_v2 WHERE uid = "
            r3.append(r4)     // Catch:{ Exception -> 0x0196 }
            r3.append(r13)     // Catch:{ Exception -> 0x0196 }
            java.lang.String r3 = r3.toString()     // Catch:{ Exception -> 0x0196 }
            org.telegram.SQLite.SQLitePreparedStatement r1 = r1.executeFast(r3)     // Catch:{ Exception -> 0x0196 }
            org.telegram.SQLite.SQLitePreparedStatement r1 = r1.stepThis()     // Catch:{ Exception -> 0x0196 }
            r1.dispose()     // Catch:{ Exception -> 0x0196 }
            org.telegram.SQLite.SQLiteDatabase r1 = r9.database     // Catch:{ Exception -> 0x0196 }
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0196 }
            r3.<init>()     // Catch:{ Exception -> 0x0196 }
            java.lang.String r4 = "DELETE FROM bot_keyboard WHERE uid = "
            r3.append(r4)     // Catch:{ Exception -> 0x0196 }
            r3.append(r13)     // Catch:{ Exception -> 0x0196 }
            java.lang.String r3 = r3.toString()     // Catch:{ Exception -> 0x0196 }
            org.telegram.SQLite.SQLitePreparedStatement r1 = r1.executeFast(r3)     // Catch:{ Exception -> 0x0196 }
            org.telegram.SQLite.SQLitePreparedStatement r1 = r1.stepThis()     // Catch:{ Exception -> 0x0196 }
            r1.dispose()     // Catch:{ Exception -> 0x0196 }
            org.telegram.SQLite.SQLiteDatabase r1 = r9.database     // Catch:{ Exception -> 0x0196 }
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0196 }
            r3.<init>()     // Catch:{ Exception -> 0x0196 }
            java.lang.String r4 = "UPDATE media_counts_v2 SET old = 1 WHERE uid = "
            r3.append(r4)     // Catch:{ Exception -> 0x0196 }
            r3.append(r13)     // Catch:{ Exception -> 0x0196 }
            java.lang.String r3 = r3.toString()     // Catch:{ Exception -> 0x0196 }
            org.telegram.SQLite.SQLitePreparedStatement r1 = r1.executeFast(r3)     // Catch:{ Exception -> 0x0196 }
            org.telegram.SQLite.SQLitePreparedStatement r1 = r1.stepThis()     // Catch:{ Exception -> 0x0196 }
            r1.dispose()     // Catch:{ Exception -> 0x0196 }
            org.telegram.SQLite.SQLiteDatabase r1 = r9.database     // Catch:{ Exception -> 0x0196 }
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0196 }
            r3.<init>()     // Catch:{ Exception -> 0x0196 }
            java.lang.String r4 = "DELETE FROM media_v4 WHERE uid = "
            r3.append(r4)     // Catch:{ Exception -> 0x0196 }
            r3.append(r13)     // Catch:{ Exception -> 0x0196 }
            java.lang.String r3 = r3.toString()     // Catch:{ Exception -> 0x0196 }
            org.telegram.SQLite.SQLitePreparedStatement r1 = r1.executeFast(r3)     // Catch:{ Exception -> 0x0196 }
            org.telegram.SQLite.SQLitePreparedStatement r1 = r1.stepThis()     // Catch:{ Exception -> 0x0196 }
            r1.dispose()     // Catch:{ Exception -> 0x0196 }
            org.telegram.SQLite.SQLiteDatabase r1 = r9.database     // Catch:{ Exception -> 0x0196 }
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0196 }
            r3.<init>()     // Catch:{ Exception -> 0x0196 }
            java.lang.String r4 = "DELETE FROM messages_holes WHERE uid = "
            r3.append(r4)     // Catch:{ Exception -> 0x0196 }
            r3.append(r13)     // Catch:{ Exception -> 0x0196 }
            java.lang.String r3 = r3.toString()     // Catch:{ Exception -> 0x0196 }
            org.telegram.SQLite.SQLitePreparedStatement r1 = r1.executeFast(r3)     // Catch:{ Exception -> 0x0196 }
            org.telegram.SQLite.SQLitePreparedStatement r1 = r1.stepThis()     // Catch:{ Exception -> 0x0196 }
            r1.dispose()     // Catch:{ Exception -> 0x0196 }
            org.telegram.SQLite.SQLiteDatabase r1 = r9.database     // Catch:{ Exception -> 0x0196 }
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0196 }
            r3.<init>()     // Catch:{ Exception -> 0x0196 }
            java.lang.String r4 = "DELETE FROM media_holes_v2 WHERE uid = "
            r3.append(r4)     // Catch:{ Exception -> 0x0196 }
            r3.append(r13)     // Catch:{ Exception -> 0x0196 }
            java.lang.String r3 = r3.toString()     // Catch:{ Exception -> 0x0196 }
            org.telegram.SQLite.SQLitePreparedStatement r1 = r1.executeFast(r3)     // Catch:{ Exception -> 0x0196 }
            org.telegram.SQLite.SQLitePreparedStatement r1 = r1.stepThis()     // Catch:{ Exception -> 0x0196 }
            r1.dispose()     // Catch:{ Exception -> 0x0196 }
            org.telegram.messenger.MediaDataController r1 = r18.getMediaDataController()     // Catch:{ Exception -> 0x0196 }
            r3 = 0
            r1.clearBotKeyboard(r13, r3)     // Catch:{ Exception -> 0x0196 }
            org.telegram.tgnet.TLRPC$TL_messages_dialogs r1 = new org.telegram.tgnet.TLRPC$TL_messages_dialogs     // Catch:{ Exception -> 0x0196 }
            r1.<init>()     // Catch:{ Exception -> 0x0196 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r4 = r1.chats     // Catch:{ Exception -> 0x0196 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r5 = r12.chats     // Catch:{ Exception -> 0x0196 }
            r4.addAll(r5)     // Catch:{ Exception -> 0x0196 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r4 = r1.users     // Catch:{ Exception -> 0x0196 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r5 = r12.users     // Catch:{ Exception -> 0x0196 }
            r4.addAll(r5)     // Catch:{ Exception -> 0x0196 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r4 = r1.messages     // Catch:{ Exception -> 0x0196 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r5 = r12.messages     // Catch:{ Exception -> 0x0196 }
            r4.addAll(r5)     // Catch:{ Exception -> 0x0196 }
            org.telegram.tgnet.TLRPC$Dialog r4 = r12.dialog     // Catch:{ Exception -> 0x0196 }
            r4.id = r13     // Catch:{ Exception -> 0x0196 }
            r4.flags = r8     // Catch:{ Exception -> 0x0196 }
            r4.notify_settings = r3     // Catch:{ Exception -> 0x0196 }
            if (r2 == 0) goto L_0x0159
            r3 = 1
            goto L_0x015a
        L_0x0159:
            r3 = 0
        L_0x015a:
            r4.pinned = r3     // Catch:{ Exception -> 0x0196 }
            r4.pinnedNum = r2     // Catch:{ Exception -> 0x0196 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r1.dialogs     // Catch:{ Exception -> 0x0196 }
            r2.add(r4)     // Catch:{ Exception -> 0x0196 }
            r9.putDialogsInternal(r1, r15)     // Catch:{ Exception -> 0x0196 }
            java.util.ArrayList r6 = new java.util.ArrayList     // Catch:{ Exception -> 0x0196 }
            r6.<init>()     // Catch:{ Exception -> 0x0196 }
            r7 = 0
            r17 = 0
            r1 = r18
            r2 = r13
            r4 = r19
            r15 = 1
            r8 = r17
            r1.updateDialogsWithDeletedMessages(r2, r4, r6, r7, r8)     // Catch:{ Exception -> 0x0196 }
            org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda108 r1 = new org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda108     // Catch:{ Exception -> 0x0196 }
            r1.<init>(r9, r13, r12)     // Catch:{ Exception -> 0x0196 }
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r1)     // Catch:{ Exception -> 0x0196 }
            if (r16 == 0) goto L_0x019a
            if (r0 != r15) goto L_0x018d
            org.telegram.messenger.MessagesController r0 = r18.getMessagesController()     // Catch:{ Exception -> 0x0196 }
            r0.checkChatInviter(r10, r15)     // Catch:{ Exception -> 0x0196 }
            goto L_0x019a
        L_0x018d:
            org.telegram.messenger.MessagesController r0 = r18.getMessagesController()     // Catch:{ Exception -> 0x0196 }
            r1 = 0
            r0.generateJoinMessage(r10, r1)     // Catch:{ Exception -> 0x0196 }
            goto L_0x019a
        L_0x0196:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
        L_0x019a:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$overwriteChannel$156(long, int, org.telegram.tgnet.TLRPC$TL_updates_channelDifferenceTooLong):void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$overwriteChannel$155(long j, TLRPC$TL_updates_channelDifferenceTooLong tLRPC$TL_updates_channelDifferenceTooLong) {
        getNotificationCenter().postNotificationName(NotificationCenter.removeAllMessagesFromDialog, Long.valueOf(j), Boolean.TRUE, tLRPC$TL_updates_channelDifferenceTooLong);
    }

    public void putChannelViews(LongSparseArray<SparseIntArray> longSparseArray, LongSparseArray<SparseIntArray> longSparseArray2, LongSparseArray<SparseArray<TLRPC$MessageReplies>> longSparseArray3, boolean z) {
        if (!isEmpty((LongSparseArray<?>) longSparseArray) || !isEmpty((LongSparseArray<?>) longSparseArray2) || !isEmpty((LongSparseArray<?>) longSparseArray3)) {
            this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda120(this, longSparseArray, longSparseArray2, longSparseArray3, z));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$putChannelViews$157(LongSparseArray longSparseArray, LongSparseArray longSparseArray2, LongSparseArray longSparseArray3, boolean z) {
        TLRPC$TL_messageReplies tLRPC$TL_messageReplies;
        int i;
        int i2;
        NativeByteBuffer byteBufferValue;
        LongSparseArray longSparseArray4 = longSparseArray;
        LongSparseArray longSparseArray5 = longSparseArray2;
        LongSparseArray longSparseArray6 = longSparseArray3;
        try {
            this.database.beginTransaction();
            int i3 = 2;
            char c = 1;
            if (!isEmpty((LongSparseArray<?>) longSparseArray)) {
                SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages_v2 SET media = max((SELECT media FROM messages_v2 WHERE mid = ? AND uid = ?), ?) WHERE mid = ? AND uid = ?");
                for (int i4 = 0; i4 < longSparseArray.size(); i4++) {
                    long keyAt = longSparseArray4.keyAt(i4);
                    SparseIntArray sparseIntArray = (SparseIntArray) longSparseArray4.valueAt(i4);
                    int size = sparseIntArray.size();
                    for (int i5 = 0; i5 < size; i5++) {
                        int valueAt = sparseIntArray.valueAt(i5);
                        int keyAt2 = sparseIntArray.keyAt(i5);
                        executeFast.requery();
                        executeFast.bindInteger(1, keyAt2);
                        executeFast.bindLong(2, keyAt);
                        executeFast.bindInteger(3, valueAt);
                        executeFast.bindInteger(4, keyAt2);
                        executeFast.bindLong(5, keyAt);
                        executeFast.step();
                    }
                }
                executeFast.dispose();
            }
            if (!isEmpty((LongSparseArray<?>) longSparseArray2)) {
                SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE messages_v2 SET forwards = max((SELECT forwards FROM messages_v2 WHERE mid = ? AND uid = ?), ?) WHERE mid = ? AND uid = ?");
                for (int i6 = 0; i6 < longSparseArray2.size(); i6++) {
                    long keyAt3 = longSparseArray5.keyAt(i6);
                    SparseIntArray sparseIntArray2 = (SparseIntArray) longSparseArray5.valueAt(i6);
                    int size2 = sparseIntArray2.size();
                    for (int i7 = 0; i7 < size2; i7++) {
                        int valueAt2 = sparseIntArray2.valueAt(i7);
                        int keyAt4 = sparseIntArray2.keyAt(i7);
                        executeFast2.requery();
                        executeFast2.bindInteger(1, keyAt4);
                        executeFast2.bindLong(2, keyAt3);
                        executeFast2.bindInteger(3, valueAt2);
                        executeFast2.bindInteger(4, keyAt4);
                        executeFast2.bindLong(5, keyAt3);
                        executeFast2.step();
                    }
                }
                executeFast2.dispose();
            }
            if (!isEmpty((LongSparseArray<?>) longSparseArray3)) {
                SQLitePreparedStatement executeFast3 = this.database.executeFast("UPDATE messages_v2 SET replies_data = ? WHERE mid = ? AND uid = ?");
                int i8 = 0;
                while (i8 < longSparseArray3.size()) {
                    long keyAt5 = longSparseArray6.keyAt(i8);
                    SparseArray sparseArray = (SparseArray) longSparseArray6.valueAt(i8);
                    int size3 = sparseArray.size();
                    int i9 = 0;
                    while (i9 < size3) {
                        int keyAt6 = sparseArray.keyAt(i9);
                        SQLiteDatabase sQLiteDatabase = this.database;
                        Locale locale = Locale.US;
                        Object[] objArr = new Object[i3];
                        objArr[0] = Integer.valueOf(keyAt6);
                        objArr[c] = Long.valueOf(keyAt5);
                        SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized(String.format(locale, "SELECT replies_data FROM messages_v2 WHERE mid = %d AND uid = %d", objArr), new Object[0]);
                        boolean next = queryFinalized.next();
                        if (!next || (byteBufferValue = queryFinalized.byteBufferValue(0)) == null) {
                            tLRPC$TL_messageReplies = null;
                        } else {
                            tLRPC$TL_messageReplies = TLRPC$MessageReplies.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            byteBufferValue.reuse();
                        }
                        queryFinalized.dispose();
                        if (next) {
                            TLRPC$MessageReplies tLRPC$MessageReplies = (TLRPC$MessageReplies) sparseArray.get(sparseArray.keyAt(i9));
                            if (z || tLRPC$TL_messageReplies == null || (i2 = tLRPC$TL_messageReplies.replies_pts) == 0 || tLRPC$MessageReplies.replies_pts > i2 || tLRPC$MessageReplies.read_max_id > tLRPC$TL_messageReplies.read_max_id || tLRPC$MessageReplies.max_id > tLRPC$TL_messageReplies.max_id) {
                                if (z) {
                                    if (tLRPC$TL_messageReplies == null) {
                                        TLRPC$TL_messageReplies tLRPC$TL_messageReplies2 = new TLRPC$TL_messageReplies();
                                        tLRPC$TL_messageReplies2.flags |= 2;
                                        tLRPC$TL_messageReplies = tLRPC$TL_messageReplies2;
                                    }
                                    tLRPC$TL_messageReplies.replies += tLRPC$MessageReplies.replies;
                                    int size4 = tLRPC$MessageReplies.recent_repliers.size();
                                    int i10 = 0;
                                    while (i10 < size4) {
                                        long peerId = MessageObject.getPeerId(tLRPC$MessageReplies.recent_repliers.get(i10));
                                        int size5 = tLRPC$TL_messageReplies.recent_repliers.size();
                                        int i11 = 0;
                                        while (i11 < size5) {
                                            if (peerId == MessageObject.getPeerId(tLRPC$TL_messageReplies.recent_repliers.get(i11))) {
                                                tLRPC$TL_messageReplies.recent_repliers.remove(i11);
                                                i11--;
                                                size5--;
                                            }
                                            i11++;
                                            LongSparseArray longSparseArray7 = longSparseArray3;
                                        }
                                        i10++;
                                        LongSparseArray longSparseArray8 = longSparseArray3;
                                    }
                                    tLRPC$TL_messageReplies.recent_repliers.addAll(0, tLRPC$MessageReplies.recent_repliers);
                                    while (tLRPC$TL_messageReplies.recent_repliers.size() > 3) {
                                        tLRPC$TL_messageReplies.recent_repliers.remove(0);
                                    }
                                    tLRPC$MessageReplies = tLRPC$TL_messageReplies;
                                }
                                if (tLRPC$TL_messageReplies != null && (i = tLRPC$TL_messageReplies.read_max_id) > tLRPC$MessageReplies.read_max_id) {
                                    tLRPC$MessageReplies.read_max_id = i;
                                }
                                executeFast3.requery();
                                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$MessageReplies.getObjectSize());
                                tLRPC$MessageReplies.serializeToStream(nativeByteBuffer);
                                executeFast3.bindByteBuffer(1, nativeByteBuffer);
                                executeFast3.bindInteger(2, keyAt6);
                                executeFast3.bindLong(3, keyAt5);
                                executeFast3.step();
                                nativeByteBuffer.reuse();
                                i9++;
                                LongSparseArray longSparseArray9 = longSparseArray3;
                                i3 = 2;
                                c = 1;
                            }
                        }
                        i9++;
                        LongSparseArray longSparseArray92 = longSparseArray3;
                        i3 = 2;
                        c = 1;
                    }
                    i8++;
                    longSparseArray6 = longSparseArray3;
                    i3 = 2;
                    c = 1;
                }
                executeFast3.dispose();
            }
            this.database.commitTransaction();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: updateRepliesMaxReadIdInternal */
    public void lambda$updateRepliesMaxReadId$158(long j, int i, int i2) {
        NativeByteBuffer byteBufferValue;
        long j2 = -j;
        try {
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages_v2 SET replies_data = ? WHERE mid = ? AND uid = ?");
            TLRPC$MessageReplies tLRPC$MessageReplies = null;
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT replies_data FROM messages_v2 WHERE mid = %d AND uid = %d", new Object[]{Integer.valueOf(i), Long.valueOf(j2)}), new Object[0]);
            if (queryFinalized.next() && (byteBufferValue = queryFinalized.byteBufferValue(0)) != null) {
                tLRPC$MessageReplies = TLRPC$MessageReplies.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                byteBufferValue.reuse();
            }
            queryFinalized.dispose();
            if (tLRPC$MessageReplies != null) {
                tLRPC$MessageReplies.read_max_id = i2;
                executeFast.requery();
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$MessageReplies.getObjectSize());
                tLRPC$MessageReplies.serializeToStream(nativeByteBuffer);
                executeFast.bindByteBuffer(1, nativeByteBuffer);
                executeFast.bindInteger(2, i);
                executeFast.bindLong(3, j2);
                executeFast.step();
                nativeByteBuffer.reuse();
            }
            executeFast.dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void updateRepliesMaxReadId(long j, int i, int i2, boolean z) {
        if (z) {
            this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda70(this, j, i, i2));
        } else {
            lambda$updateRepliesMaxReadId$158(j, i, i2);
        }
    }

    public void updateRepliesCount(long j, int i, ArrayList<TLRPC$Peer> arrayList, int i2, int i3) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda49(this, i, j, i3, arrayList, i2));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateRepliesCount$159(int i, long j, int i2, ArrayList arrayList, int i3) {
        NativeByteBuffer byteBufferValue;
        ArrayList arrayList2 = arrayList;
        int i4 = i3;
        try {
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages_v2 SET replies_data = ? WHERE mid = ? AND uid = ?");
            TLRPC$MessageReplies tLRPC$MessageReplies = null;
            long j2 = -j;
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.ENGLISH, "SELECT replies_data FROM messages_v2 WHERE mid = %d AND uid = %d", new Object[]{Integer.valueOf(i), Long.valueOf(j2)}), new Object[0]);
            if (queryFinalized.next() && (byteBufferValue = queryFinalized.byteBufferValue(0)) != null) {
                tLRPC$MessageReplies = TLRPC$MessageReplies.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                byteBufferValue.reuse();
            }
            queryFinalized.dispose();
            if (tLRPC$MessageReplies != null) {
                int i5 = tLRPC$MessageReplies.replies + i2;
                tLRPC$MessageReplies.replies = i5;
                if (i5 < 0) {
                    tLRPC$MessageReplies.replies = 0;
                }
                if (arrayList2 != null) {
                    tLRPC$MessageReplies.recent_repliers = arrayList2;
                    tLRPC$MessageReplies.flags |= 2;
                }
                if (i4 != 0) {
                    tLRPC$MessageReplies.max_id = i4;
                }
                executeFast.requery();
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$MessageReplies.getObjectSize());
                tLRPC$MessageReplies.serializeToStream(nativeByteBuffer);
                executeFast.bindByteBuffer(1, nativeByteBuffer);
                executeFast.bindInteger(2, i);
                executeFast.bindLong(3, j2);
                executeFast.step();
                nativeByteBuffer.reuse();
            }
            executeFast.dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    private boolean isValidKeyboardToSave(TLRPC$Message tLRPC$Message) {
        TLRPC$ReplyMarkup tLRPC$ReplyMarkup = tLRPC$Message.reply_markup;
        return tLRPC$ReplyMarkup != null && !(tLRPC$ReplyMarkup instanceof TLRPC$TL_replyInlineMarkup) && (!tLRPC$ReplyMarkup.selective || tLRPC$Message.mentioned);
    }

    public void updateMessageVerifyFlags(ArrayList<TLRPC$Message> arrayList) {
        Utilities.stageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda130(this, arrayList));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessageVerifyFlags$160(ArrayList arrayList) {
        try {
            this.database.beginTransaction();
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages_v2 SET imp = ? WHERE mid = ? AND uid = ?");
            int size = arrayList.size();
            for (int i = 0; i < size; i++) {
                TLRPC$Message tLRPC$Message = (TLRPC$Message) arrayList.get(i);
                executeFast.requery();
                int i2 = tLRPC$Message.stickerVerified;
                executeFast.bindInteger(1, i2 == 0 ? 1 : i2 == 2 ? 2 : 0);
                executeFast.bindInteger(2, tLRPC$Message.id);
                executeFast.bindLong(3, MessageObject.getDialogId(tLRPC$Message));
                executeFast.step();
            }
            executeFast.dispose();
            this.database.commitTransaction();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Removed duplicated region for block: B:109:0x02e5 A[Catch:{ Exception -> 0x0110 }] */
    /* JADX WARNING: Removed duplicated region for block: B:207:0x0594 A[Catch:{ Exception -> 0x0110 }] */
    /* JADX WARNING: Removed duplicated region for block: B:219:0x05ba A[Catch:{ Exception -> 0x0110 }] */
    /* JADX WARNING: Removed duplicated region for block: B:222:0x05e6 A[Catch:{ Exception -> 0x0110 }] */
    /* JADX WARNING: Removed duplicated region for block: B:229:0x05ff A[Catch:{ Exception -> 0x0110 }] */
    /* JADX WARNING: Removed duplicated region for block: B:230:0x0607 A[Catch:{ Exception -> 0x0110 }] */
    /* JADX WARNING: Removed duplicated region for block: B:233:0x0614 A[Catch:{ Exception -> 0x0110 }] */
    /* JADX WARNING: Removed duplicated region for block: B:235:0x0618 A[Catch:{ Exception -> 0x0110 }] */
    /* JADX WARNING: Removed duplicated region for block: B:241:0x0626 A[Catch:{ Exception -> 0x0110 }] */
    /* JADX WARNING: Removed duplicated region for block: B:242:0x0628 A[Catch:{ Exception -> 0x0110 }] */
    /* JADX WARNING: Removed duplicated region for block: B:245:0x0639 A[Catch:{ Exception -> 0x0110 }] */
    /* JADX WARNING: Removed duplicated region for block: B:246:0x064f A[Catch:{ Exception -> 0x0110 }] */
    /* JADX WARNING: Removed duplicated region for block: B:249:0x0659 A[Catch:{ Exception -> 0x0110 }] */
    /* JADX WARNING: Removed duplicated region for block: B:254:0x0666 A[Catch:{ Exception -> 0x0110 }] */
    /* JADX WARNING: Removed duplicated region for block: B:257:0x0681 A[Catch:{ Exception -> 0x0110 }] */
    /* JADX WARNING: Removed duplicated region for block: B:258:0x069c A[Catch:{ Exception -> 0x0110 }] */
    /* JADX WARNING: Removed duplicated region for block: B:261:0x06a6 A[Catch:{ Exception -> 0x0110 }] */
    /* JADX WARNING: Removed duplicated region for block: B:264:0x06d4 A[Catch:{ Exception -> 0x0110 }] */
    /* JADX WARNING: Removed duplicated region for block: B:270:0x06df A[Catch:{ Exception -> 0x0110 }] */
    /* JADX WARNING: Removed duplicated region for block: B:274:0x0715 A[Catch:{ Exception -> 0x0110 }] */
    /* JADX WARNING: Removed duplicated region for block: B:278:0x0744 A[Catch:{ Exception -> 0x0110 }] */
    /* JADX WARNING: Removed duplicated region for block: B:284:0x076e A[Catch:{ Exception -> 0x0110 }] */
    /* JADX WARNING: Removed duplicated region for block: B:303:0x07b9 A[Catch:{ Exception -> 0x0110 }] */
    /* JADX WARNING: Removed duplicated region for block: B:305:0x07cd A[Catch:{ Exception -> 0x0110 }] */
    /* JADX WARNING: Removed duplicated region for block: B:331:0x0865 A[Catch:{ Exception -> 0x0110 }] */
    /* JADX WARNING: Removed duplicated region for block: B:93:0x0271 A[Catch:{ Exception -> 0x0110 }] */
    /* renamed from: putMessagesInternal */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void lambda$putMessages$162(java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r40, boolean r41, boolean r42, int r43, boolean r44, boolean r45) {
        /*
            r39 = this;
            r1 = r39
            r2 = r40
            java.lang.String r3 = "REPLACE INTO randoms_v2 VALUES(?, ?, ?)"
            r9 = 3
            r10 = 2
            r11 = 1
            if (r45 == 0) goto L_0x00ce
            if (r41 == 0) goto L_0x0012
            org.telegram.SQLite.SQLiteDatabase r13 = r1.database     // Catch:{ Exception -> 0x0110 }
            r13.beginTransaction()     // Catch:{ Exception -> 0x0110 }
        L_0x0012:
            org.telegram.SQLite.SQLiteDatabase r13 = r1.database     // Catch:{ Exception -> 0x0110 }
            java.lang.String r14 = "REPLACE INTO scheduled_messages_v2 VALUES(?, ?, ?, ?, ?, ?, NULL, 0)"
            org.telegram.SQLite.SQLitePreparedStatement r13 = r13.executeFast(r14)     // Catch:{ Exception -> 0x0110 }
            org.telegram.SQLite.SQLiteDatabase r14 = r1.database     // Catch:{ Exception -> 0x0110 }
            org.telegram.SQLite.SQLitePreparedStatement r3 = r14.executeFast(r3)     // Catch:{ Exception -> 0x0110 }
            java.util.ArrayList r14 = new java.util.ArrayList     // Catch:{ Exception -> 0x0110 }
            r14.<init>()     // Catch:{ Exception -> 0x0110 }
            r15 = 0
        L_0x0026:
            int r12 = r40.size()     // Catch:{ Exception -> 0x0110 }
            if (r15 >= r12) goto L_0x00ab
            java.lang.Object r12 = r2.get(r15)     // Catch:{ Exception -> 0x0110 }
            org.telegram.tgnet.TLRPC$Message r12 = (org.telegram.tgnet.TLRPC$Message) r12     // Catch:{ Exception -> 0x0110 }
            boolean r7 = r12 instanceof org.telegram.tgnet.TLRPC$TL_messageEmpty     // Catch:{ Exception -> 0x0110 }
            if (r7 == 0) goto L_0x0037
            goto L_0x00a4
        L_0x0037:
            r1.fixUnsupportedMedia(r12)     // Catch:{ Exception -> 0x0110 }
            r13.requery()     // Catch:{ Exception -> 0x0110 }
            int r7 = r12.id     // Catch:{ Exception -> 0x0110 }
            int r8 = r12.local_id     // Catch:{ Exception -> 0x0110 }
            if (r8 == 0) goto L_0x0044
            r7 = r8
        L_0x0044:
            org.telegram.tgnet.NativeByteBuffer r8 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x0110 }
            int r4 = r12.getObjectSize()     // Catch:{ Exception -> 0x0110 }
            r8.<init>((int) r4)     // Catch:{ Exception -> 0x0110 }
            r12.serializeToStream(r8)     // Catch:{ Exception -> 0x0110 }
            long r5 = org.telegram.messenger.MessageObject.getDialogId(r12)     // Catch:{ Exception -> 0x0110 }
            r13.bindInteger(r11, r7)     // Catch:{ Exception -> 0x0110 }
            r13.bindLong(r10, r5)     // Catch:{ Exception -> 0x0110 }
            int r4 = r12.send_state     // Catch:{ Exception -> 0x0110 }
            r13.bindInteger(r9, r4)     // Catch:{ Exception -> 0x0110 }
            int r4 = r12.date     // Catch:{ Exception -> 0x0110 }
            r9 = 4
            r13.bindInteger(r9, r4)     // Catch:{ Exception -> 0x0110 }
            r4 = 5
            r13.bindByteBuffer((int) r4, (org.telegram.tgnet.NativeByteBuffer) r8)     // Catch:{ Exception -> 0x0110 }
            int r9 = r12.ttl     // Catch:{ Exception -> 0x0110 }
            r4 = 6
            r13.bindInteger(r4, r9)     // Catch:{ Exception -> 0x0110 }
            r13.step()     // Catch:{ Exception -> 0x0110 }
            long r10 = r12.random_id     // Catch:{ Exception -> 0x0110 }
            r17 = 0
            int r4 = (r10 > r17 ? 1 : (r10 == r17 ? 0 : -1))
            if (r4 == 0) goto L_0x0090
            r3.requery()     // Catch:{ Exception -> 0x0110 }
            long r10 = r12.random_id     // Catch:{ Exception -> 0x0110 }
            r4 = 1
            r3.bindLong(r4, r10)     // Catch:{ Exception -> 0x0110 }
            r4 = 2
            r3.bindInteger(r4, r7)     // Catch:{ Exception -> 0x0110 }
            long r10 = r12.dialog_id     // Catch:{ Exception -> 0x0110 }
            r4 = 3
            r3.bindLong(r4, r10)     // Catch:{ Exception -> 0x0110 }
            r3.step()     // Catch:{ Exception -> 0x0110 }
        L_0x0090:
            r8.reuse()     // Catch:{ Exception -> 0x0110 }
            java.lang.Long r4 = java.lang.Long.valueOf(r5)     // Catch:{ Exception -> 0x0110 }
            boolean r4 = r14.contains(r4)     // Catch:{ Exception -> 0x0110 }
            if (r4 != 0) goto L_0x00a4
            java.lang.Long r4 = java.lang.Long.valueOf(r5)     // Catch:{ Exception -> 0x0110 }
            r14.add(r4)     // Catch:{ Exception -> 0x0110 }
        L_0x00a4:
            int r15 = r15 + 1
            r9 = 3
            r10 = 2
            r11 = 1
            goto L_0x0026
        L_0x00ab:
            r13.dispose()     // Catch:{ Exception -> 0x0110 }
            r3.dispose()     // Catch:{ Exception -> 0x0110 }
            if (r41 == 0) goto L_0x00b8
            org.telegram.SQLite.SQLiteDatabase r2 = r1.database     // Catch:{ Exception -> 0x0110 }
            r2.commitTransaction()     // Catch:{ Exception -> 0x0110 }
        L_0x00b8:
            int r2 = r14.size()     // Catch:{ Exception -> 0x0110 }
            r12 = 0
        L_0x00bd:
            if (r12 >= r2) goto L_0x00cb
            java.lang.Object r3 = r14.get(r12)     // Catch:{ Exception -> 0x0110 }
            java.lang.Long r3 = (java.lang.Long) r3     // Catch:{ Exception -> 0x0110 }
            r1.broadcastScheduledMessagesChange(r3)     // Catch:{ Exception -> 0x0110 }
            int r12 = r12 + 1
            goto L_0x00bd
        L_0x00cb:
            r15 = r1
            goto L_0x0b9b
        L_0x00ce:
            if (r44 == 0) goto L_0x0115
            r4 = 0
            java.lang.Object r6 = r2.get(r4)     // Catch:{ Exception -> 0x0110 }
            org.telegram.tgnet.TLRPC$Message r6 = (org.telegram.tgnet.TLRPC$Message) r6     // Catch:{ Exception -> 0x0110 }
            long r7 = r6.dialog_id     // Catch:{ Exception -> 0x0110 }
            r10 = 0
            int r4 = (r7 > r10 ? 1 : (r7 == r10 ? 0 : -1))
            if (r4 != 0) goto L_0x00e2
            org.telegram.messenger.MessageObject.getDialogId(r6)     // Catch:{ Exception -> 0x0110 }
        L_0x00e2:
            org.telegram.SQLite.SQLiteDatabase r4 = r1.database     // Catch:{ Exception -> 0x0110 }
            java.lang.StringBuilder r7 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0110 }
            r7.<init>()     // Catch:{ Exception -> 0x0110 }
            java.lang.String r8 = "SELECT last_mid FROM dialogs WHERE did = "
            r7.append(r8)     // Catch:{ Exception -> 0x0110 }
            long r10 = r6.dialog_id     // Catch:{ Exception -> 0x0110 }
            r7.append(r10)     // Catch:{ Exception -> 0x0110 }
            java.lang.String r6 = r7.toString()     // Catch:{ Exception -> 0x0110 }
            r7 = 0
            java.lang.Object[] r8 = new java.lang.Object[r7]     // Catch:{ Exception -> 0x0110 }
            org.telegram.SQLite.SQLiteCursor r4 = r4.queryFinalized(r6, r8)     // Catch:{ Exception -> 0x0110 }
            boolean r6 = r4.next()     // Catch:{ Exception -> 0x0110 }
            if (r6 == 0) goto L_0x0109
            int r6 = r4.intValue(r7)     // Catch:{ Exception -> 0x0110 }
            goto L_0x010a
        L_0x0109:
            r6 = -1
        L_0x010a:
            r4.dispose()     // Catch:{ Exception -> 0x0110 }
            if (r6 == 0) goto L_0x0115
            return
        L_0x0110:
            r0 = move-exception
            r15 = r1
        L_0x0112:
            r1 = r0
            goto L_0x0b98
        L_0x0115:
            if (r41 == 0) goto L_0x011c
            org.telegram.SQLite.SQLiteDatabase r4 = r1.database     // Catch:{ Exception -> 0x0110 }
            r4.beginTransaction()     // Catch:{ Exception -> 0x0110 }
        L_0x011c:
            androidx.collection.LongSparseArray r6 = new androidx.collection.LongSparseArray     // Catch:{ Exception -> 0x0110 }
            r6.<init>()     // Catch:{ Exception -> 0x0110 }
            org.telegram.messenger.support.LongSparseIntArray r7 = new org.telegram.messenger.support.LongSparseIntArray     // Catch:{ Exception -> 0x0110 }
            r7.<init>()     // Catch:{ Exception -> 0x0110 }
            org.telegram.messenger.support.LongSparseIntArray r8 = new org.telegram.messenger.support.LongSparseIntArray     // Catch:{ Exception -> 0x0110 }
            r8.<init>()     // Catch:{ Exception -> 0x0110 }
            org.telegram.messenger.support.LongSparseIntArray r10 = new org.telegram.messenger.support.LongSparseIntArray     // Catch:{ Exception -> 0x0110 }
            r10.<init>()     // Catch:{ Exception -> 0x0110 }
            org.telegram.messenger.support.LongSparseIntArray r11 = new org.telegram.messenger.support.LongSparseIntArray     // Catch:{ Exception -> 0x0110 }
            r11.<init>()     // Catch:{ Exception -> 0x0110 }
            androidx.collection.LongSparseArray r4 = new androidx.collection.LongSparseArray     // Catch:{ Exception -> 0x0110 }
            r4.<init>()     // Catch:{ Exception -> 0x0110 }
            androidx.collection.LongSparseArray r12 = new androidx.collection.LongSparseArray     // Catch:{ Exception -> 0x0110 }
            r12.<init>()     // Catch:{ Exception -> 0x0110 }
            org.telegram.messenger.support.LongSparseIntArray r13 = new org.telegram.messenger.support.LongSparseIntArray     // Catch:{ Exception -> 0x0110 }
            r13.<init>()     // Catch:{ Exception -> 0x0110 }
            androidx.collection.LongSparseArray r14 = new androidx.collection.LongSparseArray     // Catch:{ Exception -> 0x0110 }
            r14.<init>()     // Catch:{ Exception -> 0x0110 }
            androidx.collection.LongSparseArray r15 = new androidx.collection.LongSparseArray     // Catch:{ Exception -> 0x0110 }
            r15.<init>()     // Catch:{ Exception -> 0x0110 }
            org.telegram.SQLite.SQLiteDatabase r9 = r1.database     // Catch:{ Exception -> 0x0110 }
            java.lang.String r5 = "REPLACE INTO messages_v2 VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, NULL, ?, ?, ?, ?, ?, ?, 0)"
            org.telegram.SQLite.SQLitePreparedStatement r5 = r9.executeFast(r5)     // Catch:{ Exception -> 0x0110 }
            org.telegram.SQLite.SQLiteDatabase r9 = r1.database     // Catch:{ Exception -> 0x0110 }
            org.telegram.SQLite.SQLitePreparedStatement r3 = r9.executeFast(r3)     // Catch:{ Exception -> 0x0110 }
            org.telegram.SQLite.SQLiteDatabase r9 = r1.database     // Catch:{ Exception -> 0x0110 }
            r44 = r10
            java.lang.String r10 = "REPLACE INTO download_queue VALUES(?, ?, ?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r10 = r9.executeFast(r10)     // Catch:{ Exception -> 0x0110 }
            org.telegram.SQLite.SQLiteDatabase r9 = r1.database     // Catch:{ Exception -> 0x0110 }
            r20 = r8
            java.lang.String r8 = "REPLACE INTO webpage_pending_v2 VALUES(?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r8 = r9.executeFast(r8)     // Catch:{ Exception -> 0x0110 }
            r21 = 2147483647(0x7fffffff, float:NaN)
            r25 = r3
            r26 = r6
            r24 = r8
            r23 = r10
            r3 = 0
            r8 = 0
            r9 = 0
            r10 = 0
        L_0x017f:
            int r6 = r40.size()     // Catch:{ Exception -> 0x0110 }
            if (r9 >= r6) goto L_0x0316
            java.lang.Object r6 = r2.get(r9)     // Catch:{ Exception -> 0x0110 }
            org.telegram.tgnet.TLRPC$Message r6 = (org.telegram.tgnet.TLRPC$Message) r6     // Catch:{ Exception -> 0x0110 }
            r27 = r5
            int r5 = r6.id     // Catch:{ Exception -> 0x0110 }
            org.telegram.messenger.MessageObject.getDialogId(r6)     // Catch:{ Exception -> 0x0110 }
            boolean r2 = r6.mentioned     // Catch:{ Exception -> 0x0110 }
            if (r2 == 0) goto L_0x01bf
            boolean r2 = r6.media_unread     // Catch:{ Exception -> 0x0110 }
            if (r2 == 0) goto L_0x01bf
            r28 = r3
            long r2 = r6.dialog_id     // Catch:{ Exception -> 0x0110 }
            java.lang.Object r2 = r15.get(r2)     // Catch:{ Exception -> 0x0110 }
            java.util.ArrayList r2 = (java.util.ArrayList) r2     // Catch:{ Exception -> 0x0110 }
            if (r2 != 0) goto L_0x01b4
            java.util.ArrayList r2 = new java.util.ArrayList     // Catch:{ Exception -> 0x0110 }
            r2.<init>()     // Catch:{ Exception -> 0x0110 }
            r3 = r7
            r29 = r8
            long r7 = r6.dialog_id     // Catch:{ Exception -> 0x0110 }
            r15.put(r7, r2)     // Catch:{ Exception -> 0x0110 }
            goto L_0x01b7
        L_0x01b4:
            r3 = r7
            r29 = r8
        L_0x01b7:
            java.lang.Integer r7 = java.lang.Integer.valueOf(r5)     // Catch:{ Exception -> 0x0110 }
            r2.add(r7)     // Catch:{ Exception -> 0x0110 }
            goto L_0x01c4
        L_0x01bf:
            r28 = r3
            r3 = r7
            r29 = r8
        L_0x01c4:
            org.telegram.tgnet.TLRPC$MessageAction r2 = r6.action     // Catch:{ Exception -> 0x0110 }
            boolean r2 = r2 instanceof org.telegram.tgnet.TLRPC$TL_messageActionHistoryClear     // Catch:{ Exception -> 0x0110 }
            java.lang.String r7 = ","
            if (r2 != 0) goto L_0x0266
            boolean r2 = org.telegram.messenger.MessageObject.isOut(r6)     // Catch:{ Exception -> 0x0110 }
            if (r2 == 0) goto L_0x01d6
            boolean r2 = r6.from_scheduled     // Catch:{ Exception -> 0x0110 }
            if (r2 == 0) goto L_0x0266
        L_0x01d6:
            int r2 = r6.id     // Catch:{ Exception -> 0x0110 }
            if (r2 > 0) goto L_0x01e0
            boolean r2 = org.telegram.messenger.MessageObject.isUnread(r6)     // Catch:{ Exception -> 0x0110 }
            if (r2 == 0) goto L_0x0266
        L_0x01e0:
            r8 = r3
            long r2 = r6.dialog_id     // Catch:{ Exception -> 0x0110 }
            r30 = r11
            r11 = -1
            int r2 = r13.get(r2, r11)     // Catch:{ Exception -> 0x0110 }
            if (r2 != r11) goto L_0x0221
            org.telegram.SQLite.SQLiteDatabase r2 = r1.database     // Catch:{ Exception -> 0x0110 }
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0110 }
            r3.<init>()     // Catch:{ Exception -> 0x0110 }
            java.lang.String r11 = "SELECT inbox_max FROM dialogs WHERE did = "
            r3.append(r11)     // Catch:{ Exception -> 0x0110 }
            r31 = r8
            r11 = r9
            long r8 = r6.dialog_id     // Catch:{ Exception -> 0x0110 }
            r3.append(r8)     // Catch:{ Exception -> 0x0110 }
            java.lang.String r3 = r3.toString()     // Catch:{ Exception -> 0x0110 }
            r8 = 0
            java.lang.Object[] r9 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x0110 }
            org.telegram.SQLite.SQLiteCursor r2 = r2.queryFinalized(r3, r9)     // Catch:{ Exception -> 0x0110 }
            boolean r3 = r2.next()     // Catch:{ Exception -> 0x0110 }
            if (r3 == 0) goto L_0x0216
            int r3 = r2.intValue(r8)     // Catch:{ Exception -> 0x0110 }
            goto L_0x0217
        L_0x0216:
            r3 = 0
        L_0x0217:
            r2.dispose()     // Catch:{ Exception -> 0x0110 }
            long r8 = r6.dialog_id     // Catch:{ Exception -> 0x0110 }
            r13.put(r8, r3)     // Catch:{ Exception -> 0x0110 }
            r2 = r3
            goto L_0x0224
        L_0x0221:
            r31 = r8
            r11 = r9
        L_0x0224:
            int r3 = r6.id     // Catch:{ Exception -> 0x0110 }
            if (r3 < 0) goto L_0x022a
            if (r2 >= r3) goto L_0x026b
        L_0x022a:
            long r2 = r6.dialog_id     // Catch:{ Exception -> 0x0110 }
            java.lang.Object r2 = r12.get(r2)     // Catch:{ Exception -> 0x0110 }
            java.lang.StringBuilder r2 = (java.lang.StringBuilder) r2     // Catch:{ Exception -> 0x0110 }
            if (r2 != 0) goto L_0x023e
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0110 }
            r2.<init>()     // Catch:{ Exception -> 0x0110 }
            long r8 = r6.dialog_id     // Catch:{ Exception -> 0x0110 }
            r12.put(r8, r2)     // Catch:{ Exception -> 0x0110 }
        L_0x023e:
            int r3 = r2.length()     // Catch:{ Exception -> 0x0110 }
            if (r3 <= 0) goto L_0x0247
            r2.append(r7)     // Catch:{ Exception -> 0x0110 }
        L_0x0247:
            r2.append(r5)     // Catch:{ Exception -> 0x0110 }
            long r2 = r6.dialog_id     // Catch:{ Exception -> 0x0110 }
            java.lang.Object r2 = r14.get(r2)     // Catch:{ Exception -> 0x0110 }
            java.util.ArrayList r2 = (java.util.ArrayList) r2     // Catch:{ Exception -> 0x0110 }
            if (r2 != 0) goto L_0x025e
            java.util.ArrayList r2 = new java.util.ArrayList     // Catch:{ Exception -> 0x0110 }
            r2.<init>()     // Catch:{ Exception -> 0x0110 }
            long r8 = r6.dialog_id     // Catch:{ Exception -> 0x0110 }
            r14.put(r8, r2)     // Catch:{ Exception -> 0x0110 }
        L_0x025e:
            java.lang.Integer r3 = java.lang.Integer.valueOf(r5)     // Catch:{ Exception -> 0x0110 }
            r2.add(r3)     // Catch:{ Exception -> 0x0110 }
            goto L_0x026b
        L_0x0266:
            r31 = r3
            r30 = r11
            r11 = r9
        L_0x026b:
            boolean r2 = org.telegram.messenger.MediaDataController.canAddMessageToMedia(r6)     // Catch:{ Exception -> 0x0110 }
            if (r2 == 0) goto L_0x02e5
            if (r10 != 0) goto L_0x0287
            androidx.collection.LongSparseArray r2 = new androidx.collection.LongSparseArray     // Catch:{ Exception -> 0x0110 }
            r2.<init>()     // Catch:{ Exception -> 0x0110 }
            androidx.collection.LongSparseArray r3 = new androidx.collection.LongSparseArray     // Catch:{ Exception -> 0x0110 }
            r3.<init>()     // Catch:{ Exception -> 0x0110 }
            androidx.collection.LongSparseArray r8 = new androidx.collection.LongSparseArray     // Catch:{ Exception -> 0x0110 }
            r8.<init>()     // Catch:{ Exception -> 0x0110 }
            r10 = r2
            r2 = r13
            r32 = r14
            goto L_0x028e
        L_0x0287:
            r2 = r13
            r32 = r14
            r3 = r28
            r8 = r29
        L_0x028e:
            long r13 = r6.dialog_id     // Catch:{ Exception -> 0x0110 }
            java.lang.Object r9 = r10.get(r13)     // Catch:{ Exception -> 0x0110 }
            java.lang.StringBuilder r9 = (java.lang.StringBuilder) r9     // Catch:{ Exception -> 0x0110 }
            if (r9 != 0) goto L_0x02a2
            java.lang.StringBuilder r9 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0110 }
            r9.<init>()     // Catch:{ Exception -> 0x0110 }
            long r13 = r6.dialog_id     // Catch:{ Exception -> 0x0110 }
            r10.put(r13, r9)     // Catch:{ Exception -> 0x0110 }
        L_0x02a2:
            int r13 = r9.length()     // Catch:{ Exception -> 0x0110 }
            if (r13 <= 0) goto L_0x02ab
            r9.append(r7)     // Catch:{ Exception -> 0x0110 }
        L_0x02ab:
            r9.append(r5)     // Catch:{ Exception -> 0x0110 }
            long r13 = r6.dialog_id     // Catch:{ Exception -> 0x0110 }
            java.lang.Object r7 = r3.get(r13)     // Catch:{ Exception -> 0x0110 }
            java.util.ArrayList r7 = (java.util.ArrayList) r7     // Catch:{ Exception -> 0x0110 }
            if (r7 != 0) goto L_0x02c2
            java.util.ArrayList r7 = new java.util.ArrayList     // Catch:{ Exception -> 0x0110 }
            r7.<init>()     // Catch:{ Exception -> 0x0110 }
            long r13 = r6.dialog_id     // Catch:{ Exception -> 0x0110 }
            r3.put(r13, r7)     // Catch:{ Exception -> 0x0110 }
        L_0x02c2:
            java.lang.Integer r9 = java.lang.Integer.valueOf(r5)     // Catch:{ Exception -> 0x0110 }
            r7.add(r9)     // Catch:{ Exception -> 0x0110 }
            long r13 = r6.dialog_id     // Catch:{ Exception -> 0x0110 }
            java.lang.Object r7 = r8.get(r13)     // Catch:{ Exception -> 0x0110 }
            android.util.SparseIntArray r7 = (android.util.SparseIntArray) r7     // Catch:{ Exception -> 0x0110 }
            if (r7 != 0) goto L_0x02dd
            android.util.SparseIntArray r7 = new android.util.SparseIntArray     // Catch:{ Exception -> 0x0110 }
            r7.<init>()     // Catch:{ Exception -> 0x0110 }
            long r13 = r6.dialog_id     // Catch:{ Exception -> 0x0110 }
            r8.put(r13, r7)     // Catch:{ Exception -> 0x0110 }
        L_0x02dd:
            int r9 = org.telegram.messenger.MediaDataController.getMediaType(r6)     // Catch:{ Exception -> 0x0110 }
            r7.put(r5, r9)     // Catch:{ Exception -> 0x0110 }
            goto L_0x02ec
        L_0x02e5:
            r2 = r13
            r32 = r14
            r3 = r28
            r8 = r29
        L_0x02ec:
            boolean r5 = r1.isValidKeyboardToSave(r6)     // Catch:{ Exception -> 0x0110 }
            if (r5 == 0) goto L_0x0307
            long r13 = r6.dialog_id     // Catch:{ Exception -> 0x0110 }
            java.lang.Object r5 = r4.get(r13)     // Catch:{ Exception -> 0x0110 }
            org.telegram.tgnet.TLRPC$Message r5 = (org.telegram.tgnet.TLRPC$Message) r5     // Catch:{ Exception -> 0x0110 }
            if (r5 == 0) goto L_0x0302
            int r5 = r5.id     // Catch:{ Exception -> 0x0110 }
            int r7 = r6.id     // Catch:{ Exception -> 0x0110 }
            if (r5 >= r7) goto L_0x0307
        L_0x0302:
            long r13 = r6.dialog_id     // Catch:{ Exception -> 0x0110 }
            r4.put(r13, r6)     // Catch:{ Exception -> 0x0110 }
        L_0x0307:
            int r9 = r11 + 1
            r13 = r2
            r5 = r27
            r11 = r30
            r7 = r31
            r14 = r32
            r2 = r40
            goto L_0x017f
        L_0x0316:
            r28 = r3
            r27 = r5
            r31 = r7
            r29 = r8
            r30 = r11
            r32 = r14
            r2 = 0
        L_0x0323:
            int r3 = r4.size()     // Catch:{ Exception -> 0x0110 }
            if (r2 >= r3) goto L_0x033d
            org.telegram.messenger.MediaDataController r3 = r39.getMediaDataController()     // Catch:{ Exception -> 0x0110 }
            long r5 = r4.keyAt(r2)     // Catch:{ Exception -> 0x0110 }
            java.lang.Object r7 = r4.valueAt(r2)     // Catch:{ Exception -> 0x0110 }
            org.telegram.tgnet.TLRPC$Message r7 = (org.telegram.tgnet.TLRPC$Message) r7     // Catch:{ Exception -> 0x0110 }
            r3.putBotKeyboard(r5, r7)     // Catch:{ Exception -> 0x0110 }
            int r2 = r2 + 1
            goto L_0x0323
        L_0x033d:
            if (r10 == 0) goto L_0x045f
            int r3 = r10.size()     // Catch:{ Exception -> 0x0110 }
            r4 = 0
            r5 = 0
            r6 = 0
        L_0x0346:
            if (r4 >= r3) goto L_0x0460
            long r7 = r10.keyAt(r4)     // Catch:{ Exception -> 0x0110 }
            java.lang.Object r9 = r10.valueAt(r4)     // Catch:{ Exception -> 0x0110 }
            r11 = r9
            java.lang.StringBuilder r11 = (java.lang.StringBuilder) r11     // Catch:{ Exception -> 0x0110 }
            r13 = r29
            java.lang.Object r9 = r13.get(r7)     // Catch:{ Exception -> 0x0110 }
            r14 = r9
            android.util.SparseIntArray r14 = (android.util.SparseIntArray) r14     // Catch:{ Exception -> 0x0110 }
            r9 = r28
            java.lang.Object r28 = r9.get(r7)     // Catch:{ Exception -> 0x0110 }
            r2 = r28
            java.util.ArrayList r2 = (java.util.ArrayList) r2     // Catch:{ Exception -> 0x0110 }
            r28 = r3
            org.telegram.SQLite.SQLiteDatabase r3 = r1.database     // Catch:{ Exception -> 0x0110 }
            r33 = r6
            java.util.Locale r6 = java.util.Locale.US     // Catch:{ Exception -> 0x0110 }
            r34 = r9
            java.lang.String r9 = "SELECT mid, type FROM media_v4 WHERE mid IN(%s) AND uid = %d"
            r35 = r10
            r19 = r13
            r10 = 2
            java.lang.Object[] r13 = new java.lang.Object[r10]     // Catch:{ Exception -> 0x0110 }
            r22 = r34
            r10 = 0
            java.lang.String r11 = r11.toString()     // Catch:{ Exception -> 0x0110 }
            r10 = 0
            r13[r10] = r11     // Catch:{ Exception -> 0x0110 }
            java.lang.Long r11 = java.lang.Long.valueOf(r7)     // Catch:{ Exception -> 0x0110 }
            r16 = 1
            r13[r16] = r11     // Catch:{ Exception -> 0x0110 }
            java.lang.String r6 = java.lang.String.format(r6, r9, r13)     // Catch:{ Exception -> 0x0110 }
            java.lang.Object[] r9 = new java.lang.Object[r10]     // Catch:{ Exception -> 0x0110 }
            org.telegram.SQLite.SQLiteCursor r3 = r3.queryFinalized(r6, r9)     // Catch:{ Exception -> 0x0110 }
            r6 = r33
            r9 = 0
        L_0x0398:
            boolean r11 = r3.next()     // Catch:{ Exception -> 0x0110 }
            if (r11 == 0) goto L_0x03d3
            int r11 = r3.intValue(r10)     // Catch:{ Exception -> 0x0110 }
            r10 = 1
            int r13 = r3.intValue(r10)     // Catch:{ Exception -> 0x0110 }
            int r10 = r14.get(r11)     // Catch:{ Exception -> 0x0110 }
            if (r13 != r10) goto L_0x03b5
            java.lang.Integer r10 = java.lang.Integer.valueOf(r11)     // Catch:{ Exception -> 0x0110 }
            r2.remove(r10)     // Catch:{ Exception -> 0x0110 }
            goto L_0x03d1
        L_0x03b5:
            if (r9 != 0) goto L_0x03ce
            if (r6 != 0) goto L_0x03be
            androidx.collection.LongSparseArray r6 = new androidx.collection.LongSparseArray     // Catch:{ Exception -> 0x0110 }
            r6.<init>()     // Catch:{ Exception -> 0x0110 }
        L_0x03be:
            java.lang.Object r9 = r6.get(r7)     // Catch:{ Exception -> 0x0110 }
            android.util.SparseIntArray r9 = (android.util.SparseIntArray) r9     // Catch:{ Exception -> 0x0110 }
            if (r9 != 0) goto L_0x03ce
            android.util.SparseIntArray r9 = new android.util.SparseIntArray     // Catch:{ Exception -> 0x0110 }
            r9.<init>()     // Catch:{ Exception -> 0x0110 }
            r6.put(r7, r9)     // Catch:{ Exception -> 0x0110 }
        L_0x03ce:
            r9.put(r11, r13)     // Catch:{ Exception -> 0x0110 }
        L_0x03d1:
            r10 = 0
            goto L_0x0398
        L_0x03d3:
            r3.dispose()     // Catch:{ Exception -> 0x0110 }
            if (r5 != 0) goto L_0x03de
            android.util.SparseArray r3 = new android.util.SparseArray     // Catch:{ Exception -> 0x0110 }
            r3.<init>()     // Catch:{ Exception -> 0x0110 }
            r5 = r3
        L_0x03de:
            int r3 = r2.size()     // Catch:{ Exception -> 0x0110 }
            r10 = 0
        L_0x03e3:
            if (r10 >= r3) goto L_0x0453
            java.lang.Object r11 = r2.get(r10)     // Catch:{ Exception -> 0x0110 }
            java.lang.Integer r11 = (java.lang.Integer) r11     // Catch:{ Exception -> 0x0110 }
            int r11 = r11.intValue()     // Catch:{ Exception -> 0x0110 }
            int r13 = r14.get(r11)     // Catch:{ Exception -> 0x0110 }
            java.lang.Object r33 = r5.get(r13)     // Catch:{ Exception -> 0x0110 }
            r36 = r2
            r2 = r33
            org.telegram.messenger.support.LongSparseIntArray r2 = (org.telegram.messenger.support.LongSparseIntArray) r2     // Catch:{ Exception -> 0x0110 }
            if (r2 != 0) goto L_0x040d
            org.telegram.messenger.support.LongSparseIntArray r2 = new org.telegram.messenger.support.LongSparseIntArray     // Catch:{ Exception -> 0x0110 }
            r2.<init>()     // Catch:{ Exception -> 0x0110 }
            r5.put(r13, r2)     // Catch:{ Exception -> 0x0110 }
            r33 = r3
            r3 = 0
            r13 = -2147483648(0xfffffffvar_, float:-0.0)
            goto L_0x0417
        L_0x040d:
            r13 = -2147483648(0xfffffffvar_, float:-0.0)
            int r29 = r2.get(r7, r13)     // Catch:{ Exception -> 0x0110 }
            r33 = r3
            r3 = r29
        L_0x0417:
            if (r3 != r13) goto L_0x041a
            r3 = 0
        L_0x041a:
            r13 = 1
            int r3 = r3 + r13
            r2.put(r7, r3)     // Catch:{ Exception -> 0x0110 }
            if (r9 == 0) goto L_0x044c
            r2 = -1
            int r3 = r9.get(r11, r2)     // Catch:{ Exception -> 0x0110 }
            if (r3 < 0) goto L_0x044c
            java.lang.Object r2 = r5.get(r3)     // Catch:{ Exception -> 0x0110 }
            org.telegram.messenger.support.LongSparseIntArray r2 = (org.telegram.messenger.support.LongSparseIntArray) r2     // Catch:{ Exception -> 0x0110 }
            if (r2 != 0) goto L_0x043c
            org.telegram.messenger.support.LongSparseIntArray r2 = new org.telegram.messenger.support.LongSparseIntArray     // Catch:{ Exception -> 0x0110 }
            r2.<init>()     // Catch:{ Exception -> 0x0110 }
            r5.put(r3, r2)     // Catch:{ Exception -> 0x0110 }
            r3 = -2147483648(0xfffffffvar_, float:-0.0)
            r11 = 0
            goto L_0x0442
        L_0x043c:
            r3 = -2147483648(0xfffffffvar_, float:-0.0)
            int r11 = r2.get(r7, r3)     // Catch:{ Exception -> 0x0110 }
        L_0x0442:
            if (r11 != r3) goto L_0x0447
            r3 = -1
            r11 = 0
            goto L_0x0448
        L_0x0447:
            r3 = -1
        L_0x0448:
            int r11 = r11 + r3
            r2.put(r7, r11)     // Catch:{ Exception -> 0x0110 }
        L_0x044c:
            int r10 = r10 + 1
            r3 = r33
            r2 = r36
            goto L_0x03e3
        L_0x0453:
            int r4 = r4 + 1
            r29 = r19
            r3 = r28
            r10 = r35
            r28 = r22
            goto L_0x0346
        L_0x045f:
            r5 = 0
        L_0x0460:
            boolean r2 = r12.isEmpty()     // Catch:{ Exception -> 0x0110 }
            if (r2 != 0) goto L_0x04fe
            int r2 = r12.size()     // Catch:{ Exception -> 0x0110 }
            r3 = 0
        L_0x046b:
            if (r3 >= r2) goto L_0x04fe
            long r6 = r12.keyAt(r3)     // Catch:{ Exception -> 0x0110 }
            java.lang.Object r4 = r12.valueAt(r3)     // Catch:{ Exception -> 0x0110 }
            java.lang.StringBuilder r4 = (java.lang.StringBuilder) r4     // Catch:{ Exception -> 0x0110 }
            r8 = r32
            java.lang.Object r9 = r8.get(r6)     // Catch:{ Exception -> 0x0110 }
            r10 = r9
            java.util.ArrayList r10 = (java.util.ArrayList) r10     // Catch:{ Exception -> 0x0110 }
            java.lang.Object r9 = r15.get(r6)     // Catch:{ Exception -> 0x0110 }
            r11 = r9
            java.util.ArrayList r11 = (java.util.ArrayList) r11     // Catch:{ Exception -> 0x0110 }
            org.telegram.SQLite.SQLiteDatabase r13 = r1.database     // Catch:{ Exception -> 0x0110 }
            java.util.Locale r14 = java.util.Locale.US     // Catch:{ Exception -> 0x0110 }
            java.lang.String r9 = "SELECT mid FROM messages_v2 WHERE mid IN(%s) AND uid = %d"
            r19 = r2
            r32 = r8
            r2 = 2
            java.lang.Object[] r8 = new java.lang.Object[r2]     // Catch:{ Exception -> 0x0110 }
            r2 = r9
            java.lang.String r4 = r4.toString()     // Catch:{ Exception -> 0x0110 }
            r9 = 0
            r8[r9] = r4     // Catch:{ Exception -> 0x0110 }
            java.lang.Long r4 = java.lang.Long.valueOf(r6)     // Catch:{ Exception -> 0x0110 }
            r16 = 1
            r8[r16] = r4     // Catch:{ Exception -> 0x0110 }
            java.lang.String r2 = java.lang.String.format(r14, r2, r8)     // Catch:{ Exception -> 0x0110 }
            java.lang.Object[] r4 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x0110 }
            org.telegram.SQLite.SQLiteCursor r2 = r13.queryFinalized(r2, r4)     // Catch:{ Exception -> 0x0110 }
        L_0x04ae:
            boolean r4 = r2.next()     // Catch:{ Exception -> 0x0110 }
            if (r4 == 0) goto L_0x04c8
            int r4 = r2.intValue(r9)     // Catch:{ Exception -> 0x0110 }
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)     // Catch:{ Exception -> 0x0110 }
            if (r10 == 0) goto L_0x04c1
            r10.remove(r4)     // Catch:{ Exception -> 0x0110 }
        L_0x04c1:
            if (r11 == 0) goto L_0x04c6
            r11.remove(r4)     // Catch:{ Exception -> 0x0110 }
        L_0x04c6:
            r9 = 0
            goto L_0x04ae
        L_0x04c8:
            r2.dispose()     // Catch:{ Exception -> 0x0110 }
            r2 = r31
            r4 = -1
            int r8 = r2.get(r6, r4)     // Catch:{ Exception -> 0x0110 }
            if (r8 >= 0) goto L_0x04d5
            r8 = 0
        L_0x04d5:
            int r4 = r10.size()     // Catch:{ Exception -> 0x0110 }
            int r8 = r8 + r4
            r2.put(r6, r8)     // Catch:{ Exception -> 0x0110 }
            if (r11 == 0) goto L_0x04f2
            r8 = r30
            r4 = -1
            int r9 = r8.get(r6, r4)     // Catch:{ Exception -> 0x0110 }
            if (r9 >= 0) goto L_0x04e9
            r9 = 0
        L_0x04e9:
            int r4 = r11.size()     // Catch:{ Exception -> 0x0110 }
            int r9 = r9 + r4
            r8.put(r6, r9)     // Catch:{ Exception -> 0x0110 }
            goto L_0x04f4
        L_0x04f2:
            r8 = r30
        L_0x04f4:
            int r3 = r3 + 1
            r31 = r2
            r30 = r8
            r2 = r19
            goto L_0x046b
        L_0x04fe:
            r8 = r30
            r2 = r31
            r3 = 0
            r6 = 0
            r7 = 0
            r10 = 0
            r11 = 0
            r12 = 2147483647(0x7fffffff, float:NaN)
        L_0x050a:
            int r4 = r40.size()     // Catch:{ Exception -> 0x0110 }
            if (r11 >= r4) goto L_0x08e6
            r4 = r40
            java.lang.Object r31 = r4.get(r11)     // Catch:{ Exception -> 0x0110 }
            r15 = r31
            org.telegram.tgnet.TLRPC$Message r15 = (org.telegram.tgnet.TLRPC$Message) r15     // Catch:{ Exception -> 0x0110 }
            r1.fixUnsupportedMedia(r15)     // Catch:{ Exception -> 0x0110 }
            r27.requery()     // Catch:{ Exception -> 0x0110 }
            int r13 = r15.id     // Catch:{ Exception -> 0x0110 }
            int r14 = r15.local_id     // Catch:{ Exception -> 0x0110 }
            if (r14 == 0) goto L_0x0527
            r13 = r14
        L_0x0527:
            org.telegram.tgnet.NativeByteBuffer r14 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x0110 }
            int r9 = r15.getObjectSize()     // Catch:{ Exception -> 0x0110 }
            r14.<init>((int) r9)     // Catch:{ Exception -> 0x0110 }
            r15.serializeToStream(r14)     // Catch:{ Exception -> 0x0110 }
            org.telegram.tgnet.TLRPC$MessageAction r9 = r15.action     // Catch:{ Exception -> 0x0110 }
            boolean r4 = r9 instanceof org.telegram.tgnet.TLRPC$TL_messageEncryptedAction     // Catch:{ Exception -> 0x0110 }
            if (r4 == 0) goto L_0x054d
            org.telegram.tgnet.TLRPC$DecryptedMessageAction r4 = r9.encryptedAction     // Catch:{ Exception -> 0x0110 }
            boolean r9 = r4 instanceof org.telegram.tgnet.TLRPC$TL_decryptedMessageActionSetMessageTTL     // Catch:{ Exception -> 0x0110 }
            if (r9 != 0) goto L_0x054d
            boolean r4 = r4 instanceof org.telegram.tgnet.TLRPC$TL_decryptedMessageActionScreenshotMessages     // Catch:{ Exception -> 0x0110 }
            if (r4 != 0) goto L_0x054d
            r37 = r2
            r38 = r3
            r36 = r5
            r34 = r8
            r3 = 0
            goto L_0x0592
        L_0x054d:
            boolean r4 = r15.out     // Catch:{ Exception -> 0x0110 }
            if (r4 == 0) goto L_0x0589
            org.telegram.SQLite.SQLiteDatabase r4 = r1.database     // Catch:{ Exception -> 0x0110 }
            java.util.Locale r9 = java.util.Locale.US     // Catch:{ Exception -> 0x0110 }
            r36 = r5
            java.lang.String r5 = "SELECT mid FROM messages_v2 WHERE mid = %d AND uid = %d"
            r37 = r2
            r34 = r8
            r2 = 2
            java.lang.Object[] r8 = new java.lang.Object[r2]     // Catch:{ Exception -> 0x0110 }
            r2 = 10
            java.lang.Integer r38 = java.lang.Integer.valueOf(r13)     // Catch:{ Exception -> 0x0110 }
            r2 = 0
            r8[r2] = r38     // Catch:{ Exception -> 0x0110 }
            r38 = r3
            long r2 = r15.dialog_id     // Catch:{ Exception -> 0x0110 }
            java.lang.Long r2 = java.lang.Long.valueOf(r2)     // Catch:{ Exception -> 0x0110 }
            r3 = 1
            r8[r3] = r2     // Catch:{ Exception -> 0x0110 }
            java.lang.String r2 = java.lang.String.format(r9, r5, r8)     // Catch:{ Exception -> 0x0110 }
            r3 = 0
            java.lang.Object[] r5 = new java.lang.Object[r3]     // Catch:{ Exception -> 0x0110 }
            org.telegram.SQLite.SQLiteCursor r2 = r4.queryFinalized(r2, r5)     // Catch:{ Exception -> 0x0110 }
            boolean r3 = r2.next()     // Catch:{ Exception -> 0x0110 }
            r4 = 1
            r3 = r3 ^ r4
            r2.dispose()     // Catch:{ Exception -> 0x0110 }
            goto L_0x0592
        L_0x0589:
            r37 = r2
            r38 = r3
            r36 = r5
            r34 = r8
            r3 = 1
        L_0x0592:
            if (r3 == 0) goto L_0x05ba
            long r2 = r15.dialog_id     // Catch:{ Exception -> 0x0110 }
            r5 = r26
            java.lang.Object r2 = r5.get(r2)     // Catch:{ Exception -> 0x0110 }
            org.telegram.tgnet.TLRPC$Message r2 = (org.telegram.tgnet.TLRPC$Message) r2     // Catch:{ Exception -> 0x0110 }
            if (r2 == 0) goto L_0x05b4
            int r3 = r15.date     // Catch:{ Exception -> 0x0110 }
            int r4 = r2.date     // Catch:{ Exception -> 0x0110 }
            if (r3 > r4) goto L_0x05b4
            int r2 = r2.id     // Catch:{ Exception -> 0x0110 }
            if (r2 <= 0) goto L_0x05ae
            int r3 = r15.id     // Catch:{ Exception -> 0x0110 }
            if (r3 > r2) goto L_0x05b4
        L_0x05ae:
            if (r2 >= 0) goto L_0x05bc
            int r3 = r15.id     // Catch:{ Exception -> 0x0110 }
            if (r3 >= r2) goto L_0x05bc
        L_0x05b4:
            long r2 = r15.dialog_id     // Catch:{ Exception -> 0x0110 }
            r5.put(r2, r15)     // Catch:{ Exception -> 0x0110 }
            goto L_0x05bc
        L_0x05ba:
            r5 = r26
        L_0x05bc:
            r2 = r27
            r3 = 1
            r2.bindInteger(r3, r13)     // Catch:{ Exception -> 0x0110 }
            long r3 = r15.dialog_id     // Catch:{ Exception -> 0x0110 }
            r8 = 2
            r2.bindLong(r8, r3)     // Catch:{ Exception -> 0x0110 }
            int r4 = org.telegram.messenger.MessageObject.getUnreadFlags(r15)     // Catch:{ Exception -> 0x0110 }
            r8 = 3
            r2.bindInteger(r8, r4)     // Catch:{ Exception -> 0x0110 }
            int r4 = r15.send_state     // Catch:{ Exception -> 0x0110 }
            r8 = 4
            r2.bindInteger(r8, r4)     // Catch:{ Exception -> 0x0110 }
            int r4 = r15.date     // Catch:{ Exception -> 0x0110 }
            r8 = 5
            r2.bindInteger(r8, r4)     // Catch:{ Exception -> 0x0110 }
            r8 = 6
            r2.bindByteBuffer((int) r8, (org.telegram.tgnet.NativeByteBuffer) r14)     // Catch:{ Exception -> 0x0110 }
            boolean r8 = org.telegram.messenger.MessageObject.isOut(r15)     // Catch:{ Exception -> 0x0110 }
            if (r8 != 0) goto L_0x05ed
            boolean r8 = r15.from_scheduled     // Catch:{ Exception -> 0x0110 }
            if (r8 == 0) goto L_0x05eb
            goto L_0x05ed
        L_0x05eb:
            r8 = 0
            goto L_0x05ee
        L_0x05ed:
            r8 = 1
        L_0x05ee:
            r9 = 7
            r2.bindInteger(r9, r8)     // Catch:{ Exception -> 0x0110 }
            int r8 = r15.ttl     // Catch:{ Exception -> 0x0110 }
            r9 = 8
            r2.bindInteger(r9, r8)     // Catch:{ Exception -> 0x0110 }
            int r8 = r15.flags     // Catch:{ Exception -> 0x0110 }
            r8 = r8 & 1024(0x400, float:1.435E-42)
            if (r8 == 0) goto L_0x0607
            int r8 = r15.views     // Catch:{ Exception -> 0x0110 }
            r9 = 9
            r2.bindInteger(r9, r8)     // Catch:{ Exception -> 0x0110 }
            goto L_0x0610
        L_0x0607:
            r9 = 9
            int r8 = r1.getMessageMediaType(r15)     // Catch:{ Exception -> 0x0110 }
            r2.bindInteger(r9, r8)     // Catch:{ Exception -> 0x0110 }
        L_0x0610:
            int r8 = r15.stickerVerified     // Catch:{ Exception -> 0x0110 }
            if (r8 != 0) goto L_0x0618
            r3 = 1
        L_0x0615:
            r8 = 10
            goto L_0x061f
        L_0x0618:
            r3 = 2
            if (r8 != r3) goto L_0x061d
            r3 = 2
            goto L_0x0615
        L_0x061d:
            r3 = 0
            goto L_0x0615
        L_0x061f:
            r2.bindInteger(r8, r3)     // Catch:{ Exception -> 0x0110 }
            boolean r3 = r15.mentioned     // Catch:{ Exception -> 0x0110 }
            if (r3 == 0) goto L_0x0628
            r3 = 1
            goto L_0x0629
        L_0x0628:
            r3 = 0
        L_0x0629:
            r8 = 11
            r2.bindInteger(r8, r3)     // Catch:{ Exception -> 0x0110 }
            int r3 = r15.forwards     // Catch:{ Exception -> 0x0110 }
            r8 = 12
            r2.bindInteger(r8, r3)     // Catch:{ Exception -> 0x0110 }
            org.telegram.tgnet.TLRPC$MessageReplies r3 = r15.replies     // Catch:{ Exception -> 0x0110 }
            if (r3 == 0) goto L_0x064f
            org.telegram.tgnet.NativeByteBuffer r3 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x0110 }
            org.telegram.tgnet.TLRPC$MessageReplies r8 = r15.replies     // Catch:{ Exception -> 0x0110 }
            int r8 = r8.getObjectSize()     // Catch:{ Exception -> 0x0110 }
            r3.<init>((int) r8)     // Catch:{ Exception -> 0x0110 }
            org.telegram.tgnet.TLRPC$MessageReplies r8 = r15.replies     // Catch:{ Exception -> 0x0110 }
            r8.serializeToStream(r3)     // Catch:{ Exception -> 0x0110 }
            r8 = 13
            r2.bindByteBuffer((int) r8, (org.telegram.tgnet.NativeByteBuffer) r3)     // Catch:{ Exception -> 0x0110 }
            goto L_0x0655
        L_0x064f:
            r3 = 13
            r2.bindNull(r3)     // Catch:{ Exception -> 0x0110 }
            r3 = 0
        L_0x0655:
            org.telegram.tgnet.TLRPC$TL_messageReplyHeader r8 = r15.reply_to     // Catch:{ Exception -> 0x0110 }
            if (r8 == 0) goto L_0x0666
            int r4 = r8.reply_to_top_id     // Catch:{ Exception -> 0x0110 }
            if (r4 == 0) goto L_0x065e
            goto L_0x0660
        L_0x065e:
            int r4 = r8.reply_to_msg_id     // Catch:{ Exception -> 0x0110 }
        L_0x0660:
            r8 = 14
            r2.bindInteger(r8, r4)     // Catch:{ Exception -> 0x0110 }
            goto L_0x066c
        L_0x0666:
            r4 = 0
            r8 = 14
            r2.bindInteger(r8, r4)     // Catch:{ Exception -> 0x0110 }
        L_0x066c:
            r8 = r10
            long r9 = org.telegram.messenger.MessageObject.getChannelId(r15)     // Catch:{ Exception -> 0x0110 }
            r4 = 15
            r2.bindLong(r4, r9)     // Catch:{ Exception -> 0x0110 }
            r2.step()     // Catch:{ Exception -> 0x0110 }
            long r9 = r15.random_id     // Catch:{ Exception -> 0x0110 }
            r17 = 0
            int r4 = (r9 > r17 ? 1 : (r9 == r17 ? 0 : -1))
            if (r4 == 0) goto L_0x069c
            r25.requery()     // Catch:{ Exception -> 0x0110 }
            long r9 = r15.random_id     // Catch:{ Exception -> 0x0110 }
            r26 = r5
            r4 = r25
            r5 = 1
            r4.bindLong(r5, r9)     // Catch:{ Exception -> 0x0110 }
            r5 = 2
            r4.bindInteger(r5, r13)     // Catch:{ Exception -> 0x0110 }
            long r9 = r15.dialog_id     // Catch:{ Exception -> 0x0110 }
            r5 = 3
            r4.bindLong(r5, r9)     // Catch:{ Exception -> 0x0110 }
            r4.step()     // Catch:{ Exception -> 0x0110 }
            goto L_0x06a0
        L_0x069c:
            r26 = r5
            r4 = r25
        L_0x06a0:
            boolean r5 = org.telegram.messenger.MediaDataController.canAddMessageToMedia(r15)     // Catch:{ Exception -> 0x0110 }
            if (r5 == 0) goto L_0x06d4
            if (r6 != 0) goto L_0x06b0
            org.telegram.SQLite.SQLiteDatabase r5 = r1.database     // Catch:{ Exception -> 0x0110 }
            java.lang.String r6 = "REPLACE INTO media_v4 VALUES(?, ?, ?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r6 = r5.executeFast(r6)     // Catch:{ Exception -> 0x0110 }
        L_0x06b0:
            r6.requery()     // Catch:{ Exception -> 0x0110 }
            r5 = 1
            r6.bindInteger(r5, r13)     // Catch:{ Exception -> 0x0110 }
            long r9 = r15.dialog_id     // Catch:{ Exception -> 0x0110 }
            r5 = 2
            r6.bindLong(r5, r9)     // Catch:{ Exception -> 0x0110 }
            int r5 = r15.date     // Catch:{ Exception -> 0x0110 }
            r10 = 3
            r6.bindInteger(r10, r5)     // Catch:{ Exception -> 0x0110 }
            int r5 = org.telegram.messenger.MediaDataController.getMediaType(r15)     // Catch:{ Exception -> 0x0110 }
            r10 = 4
            r6.bindInteger(r10, r5)     // Catch:{ Exception -> 0x0110 }
            r5 = 5
            r6.bindByteBuffer((int) r5, (org.telegram.tgnet.NativeByteBuffer) r14)     // Catch:{ Exception -> 0x0110 }
            r5 = r4
            r6.step()     // Catch:{ Exception -> 0x0110 }
            goto L_0x06d5
        L_0x06d4:
            r5 = r4
        L_0x06d5:
            int r10 = r15.ttl_period     // Catch:{ Exception -> 0x0110 }
            if (r10 == 0) goto L_0x070f
            int r10 = r15.id     // Catch:{ Exception -> 0x0110 }
            if (r10 <= 0) goto L_0x070f
            if (r7 != 0) goto L_0x06e7
            org.telegram.SQLite.SQLiteDatabase r7 = r1.database     // Catch:{ Exception -> 0x0110 }
            java.lang.String r10 = "REPLACE INTO enc_tasks_v4 VALUES(?, ?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r7 = r7.executeFast(r10)     // Catch:{ Exception -> 0x0110 }
        L_0x06e7:
            r7.requery()     // Catch:{ Exception -> 0x0110 }
            r10 = 1
            r7.bindInteger(r10, r13)     // Catch:{ Exception -> 0x0110 }
            long r9 = r15.dialog_id     // Catch:{ Exception -> 0x0110 }
            r4 = 2
            r7.bindLong(r4, r9)     // Catch:{ Exception -> 0x0110 }
            int r4 = r15.date     // Catch:{ Exception -> 0x0110 }
            int r10 = r15.ttl_period     // Catch:{ Exception -> 0x0110 }
            int r4 = r4 + r10
            r10 = 3
            r7.bindInteger(r10, r4)     // Catch:{ Exception -> 0x0110 }
            r4 = 4
            r10 = 0
            r7.bindInteger(r4, r10)     // Catch:{ Exception -> 0x0110 }
            r7.step()     // Catch:{ Exception -> 0x0110 }
            int r4 = r15.date     // Catch:{ Exception -> 0x0110 }
            int r10 = r15.ttl_period     // Catch:{ Exception -> 0x0110 }
            int r4 = r4 + r10
            int r4 = java.lang.Math.min(r12, r4)     // Catch:{ Exception -> 0x0110 }
            r12 = r4
        L_0x070f:
            org.telegram.tgnet.TLRPC$MessageMedia r4 = r15.media     // Catch:{ Exception -> 0x0110 }
            boolean r10 = r4 instanceof org.telegram.tgnet.TLRPC$TL_messageMediaPoll     // Catch:{ Exception -> 0x0110 }
            if (r10 == 0) goto L_0x0744
            if (r8 != 0) goto L_0x0720
            org.telegram.SQLite.SQLiteDatabase r4 = r1.database     // Catch:{ Exception -> 0x0110 }
            java.lang.String r8 = "REPLACE INTO polls_v2 VALUES(?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r10 = r4.executeFast(r8)     // Catch:{ Exception -> 0x0110 }
            goto L_0x0721
        L_0x0720:
            r10 = r8
        L_0x0721:
            org.telegram.tgnet.TLRPC$MessageMedia r4 = r15.media     // Catch:{ Exception -> 0x0110 }
            org.telegram.tgnet.TLRPC$TL_messageMediaPoll r4 = (org.telegram.tgnet.TLRPC$TL_messageMediaPoll) r4     // Catch:{ Exception -> 0x0110 }
            r10.requery()     // Catch:{ Exception -> 0x0110 }
            r8 = 1
            r10.bindInteger(r8, r13)     // Catch:{ Exception -> 0x0110 }
            r8 = r10
            long r9 = r15.dialog_id     // Catch:{ Exception -> 0x0110 }
            r13 = 2
            r8.bindLong(r13, r9)     // Catch:{ Exception -> 0x0110 }
            org.telegram.tgnet.TLRPC$Poll r4 = r4.poll     // Catch:{ Exception -> 0x0110 }
            long r9 = r4.id     // Catch:{ Exception -> 0x0110 }
            r4 = 3
            r8.bindLong(r4, r9)     // Catch:{ Exception -> 0x0110 }
            r8.step()     // Catch:{ Exception -> 0x0110 }
            r21 = r6
            r10 = r8
            r4 = r24
            goto L_0x076c
        L_0x0744:
            boolean r4 = r4 instanceof org.telegram.tgnet.TLRPC$TL_messageMediaWebPage     // Catch:{ Exception -> 0x0110 }
            if (r4 == 0) goto L_0x0767
            r24.requery()     // Catch:{ Exception -> 0x0110 }
            org.telegram.tgnet.TLRPC$MessageMedia r4 = r15.media     // Catch:{ Exception -> 0x0110 }
            org.telegram.tgnet.TLRPC$WebPage r4 = r4.webpage     // Catch:{ Exception -> 0x0110 }
            long r9 = r4.id     // Catch:{ Exception -> 0x0110 }
            r21 = r6
            r4 = r24
            r6 = 1
            r4.bindLong(r6, r9)     // Catch:{ Exception -> 0x0110 }
            r6 = 2
            r4.bindInteger(r6, r13)     // Catch:{ Exception -> 0x0110 }
            long r9 = r15.dialog_id     // Catch:{ Exception -> 0x0110 }
            r6 = 3
            r4.bindLong(r6, r9)     // Catch:{ Exception -> 0x0110 }
            r4.step()     // Catch:{ Exception -> 0x0110 }
            goto L_0x076b
        L_0x0767:
            r21 = r6
            r4 = r24
        L_0x076b:
            r10 = r8
        L_0x076c:
            if (r3 == 0) goto L_0x0771
            r3.reuse()     // Catch:{ Exception -> 0x0110 }
        L_0x0771:
            r14.reuse()     // Catch:{ Exception -> 0x0110 }
            if (r43 == 0) goto L_0x08cd
            org.telegram.tgnet.TLRPC$Peer r3 = r15.peer_id     // Catch:{ Exception -> 0x0110 }
            long r8 = r3.channel_id     // Catch:{ Exception -> 0x0110 }
            r13 = 0
            int r3 = (r8 > r13 ? 1 : (r8 == r13 ? 0 : -1))
            if (r3 == 0) goto L_0x0784
            boolean r3 = r15.post     // Catch:{ Exception -> 0x0110 }
            if (r3 == 0) goto L_0x08cd
        L_0x0784:
            int r3 = r15.date     // Catch:{ Exception -> 0x0110 }
            org.telegram.tgnet.ConnectionsManager r6 = r39.getConnectionsManager()     // Catch:{ Exception -> 0x0110 }
            int r6 = r6.getCurrentTime()     // Catch:{ Exception -> 0x0110 }
            int r6 = r6 + -3600
            if (r3 < r6) goto L_0x08cd
            org.telegram.messenger.DownloadController r3 = r39.getDownloadController()     // Catch:{ Exception -> 0x0110 }
            int r3 = r3.canDownloadMedia((org.telegram.tgnet.TLRPC$Message) r15)     // Catch:{ Exception -> 0x0110 }
            r6 = 1
            if (r3 != r6) goto L_0x08cd
            org.telegram.tgnet.TLRPC$MessageMedia r3 = r15.media     // Catch:{ Exception -> 0x0110 }
            boolean r6 = r3 instanceof org.telegram.tgnet.TLRPC$TL_messageMediaPhoto     // Catch:{ Exception -> 0x0110 }
            if (r6 != 0) goto L_0x07ab
            boolean r6 = r3 instanceof org.telegram.tgnet.TLRPC$TL_messageMediaDocument     // Catch:{ Exception -> 0x0110 }
            if (r6 != 0) goto L_0x07ab
            boolean r3 = r3 instanceof org.telegram.tgnet.TLRPC$TL_messageMediaWebPage     // Catch:{ Exception -> 0x0110 }
            if (r3 == 0) goto L_0x08cd
        L_0x07ab:
            org.telegram.tgnet.TLRPC$Document r3 = org.telegram.messenger.MessageObject.getDocument(r15)     // Catch:{ Exception -> 0x0110 }
            org.telegram.tgnet.TLRPC$Photo r6 = org.telegram.messenger.MessageObject.getPhoto(r15)     // Catch:{ Exception -> 0x0110 }
            boolean r8 = org.telegram.messenger.MessageObject.isVoiceMessage(r15)     // Catch:{ Exception -> 0x0110 }
            if (r8 == 0) goto L_0x07cd
            long r8 = r3.id     // Catch:{ Exception -> 0x0110 }
            org.telegram.tgnet.TLRPC$TL_messageMediaDocument r6 = new org.telegram.tgnet.TLRPC$TL_messageMediaDocument     // Catch:{ Exception -> 0x0110 }
            r6.<init>()     // Catch:{ Exception -> 0x0110 }
            r6.document = r3     // Catch:{ Exception -> 0x0110 }
            int r3 = r6.flags     // Catch:{ Exception -> 0x0110 }
            r13 = 1
            r3 = r3 | r13
            r6.flags = r3     // Catch:{ Exception -> 0x0110 }
            r13 = r8
            r3 = 2
        L_0x07ca:
            r9 = r6
            goto L_0x0863
        L_0x07cd:
            boolean r8 = org.telegram.messenger.MessageObject.isStickerMessage(r15)     // Catch:{ Exception -> 0x0110 }
            if (r8 != 0) goto L_0x084e
            boolean r8 = org.telegram.messenger.MessageObject.isAnimatedStickerMessage(r15)     // Catch:{ Exception -> 0x0110 }
            if (r8 == 0) goto L_0x07db
            goto L_0x084e
        L_0x07db:
            boolean r8 = org.telegram.messenger.MessageObject.isVideoMessage(r15)     // Catch:{ Exception -> 0x0110 }
            if (r8 != 0) goto L_0x0839
            boolean r8 = org.telegram.messenger.MessageObject.isRoundVideoMessage(r15)     // Catch:{ Exception -> 0x0110 }
            if (r8 != 0) goto L_0x0839
            boolean r8 = org.telegram.messenger.MessageObject.isGifMessage(r15)     // Catch:{ Exception -> 0x0110 }
            if (r8 == 0) goto L_0x07ee
            goto L_0x0839
        L_0x07ee:
            if (r3 == 0) goto L_0x0803
            long r8 = r3.id     // Catch:{ Exception -> 0x0110 }
            org.telegram.tgnet.TLRPC$TL_messageMediaDocument r6 = new org.telegram.tgnet.TLRPC$TL_messageMediaDocument     // Catch:{ Exception -> 0x0110 }
            r6.<init>()     // Catch:{ Exception -> 0x0110 }
            r6.document = r3     // Catch:{ Exception -> 0x0110 }
            int r3 = r6.flags     // Catch:{ Exception -> 0x0110 }
            r13 = 1
            r3 = r3 | r13
            r6.flags = r3     // Catch:{ Exception -> 0x0110 }
            r13 = r8
            r3 = 8
            goto L_0x07ca
        L_0x0803:
            if (r6 == 0) goto L_0x0832
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PhotoSize> r3 = r6.sizes     // Catch:{ Exception -> 0x0110 }
            int r8 = org.telegram.messenger.AndroidUtilities.getPhotoSize()     // Catch:{ Exception -> 0x0110 }
            org.telegram.tgnet.TLRPC$PhotoSize r3 = org.telegram.messenger.FileLoader.getClosestPhotoSizeWithSize(r3, r8)     // Catch:{ Exception -> 0x0110 }
            if (r3 == 0) goto L_0x0832
            long r8 = r6.id     // Catch:{ Exception -> 0x0110 }
            org.telegram.tgnet.TLRPC$TL_messageMediaPhoto r3 = new org.telegram.tgnet.TLRPC$TL_messageMediaPhoto     // Catch:{ Exception -> 0x0110 }
            r3.<init>()     // Catch:{ Exception -> 0x0110 }
            r3.photo = r6     // Catch:{ Exception -> 0x0110 }
            int r6 = r3.flags     // Catch:{ Exception -> 0x0110 }
            r13 = 1
            r6 = r6 | r13
            r3.flags = r6     // Catch:{ Exception -> 0x0110 }
            org.telegram.tgnet.TLRPC$MessageMedia r13 = r15.media     // Catch:{ Exception -> 0x0110 }
            boolean r13 = r13 instanceof org.telegram.tgnet.TLRPC$TL_messageMediaWebPage     // Catch:{ Exception -> 0x0110 }
            if (r13 == 0) goto L_0x082c
            r13 = -2147483648(0xfffffffvar_, float:-0.0)
            r6 = r6 | r13
            r3.flags = r6     // Catch:{ Exception -> 0x0110 }
            goto L_0x082e
        L_0x082c:
            r13 = -2147483648(0xfffffffvar_, float:-0.0)
        L_0x082e:
            r13 = r8
            r9 = r3
            r3 = 1
            goto L_0x0863
        L_0x0832:
            r13 = -2147483648(0xfffffffvar_, float:-0.0)
            r3 = 0
            r9 = 0
            r13 = 0
            goto L_0x0863
        L_0x0839:
            r13 = -2147483648(0xfffffffvar_, float:-0.0)
            long r8 = r3.id     // Catch:{ Exception -> 0x0110 }
            org.telegram.tgnet.TLRPC$TL_messageMediaDocument r6 = new org.telegram.tgnet.TLRPC$TL_messageMediaDocument     // Catch:{ Exception -> 0x0110 }
            r6.<init>()     // Catch:{ Exception -> 0x0110 }
            r6.document = r3     // Catch:{ Exception -> 0x0110 }
            int r3 = r6.flags     // Catch:{ Exception -> 0x0110 }
            r14 = 1
            r3 = r3 | r14
            r6.flags = r3     // Catch:{ Exception -> 0x0110 }
            r13 = r8
            r3 = 4
            goto L_0x07ca
        L_0x084e:
            r13 = -2147483648(0xfffffffvar_, float:-0.0)
            long r8 = r3.id     // Catch:{ Exception -> 0x0110 }
            org.telegram.tgnet.TLRPC$TL_messageMediaDocument r6 = new org.telegram.tgnet.TLRPC$TL_messageMediaDocument     // Catch:{ Exception -> 0x0110 }
            r6.<init>()     // Catch:{ Exception -> 0x0110 }
            r6.document = r3     // Catch:{ Exception -> 0x0110 }
            int r3 = r6.flags     // Catch:{ Exception -> 0x0110 }
            r14 = 1
            r3 = r3 | r14
            r6.flags = r3     // Catch:{ Exception -> 0x0110 }
            r13 = r8
            r3 = 1
            goto L_0x07ca
        L_0x0863:
            if (r9 == 0) goto L_0x08cd
            org.telegram.tgnet.TLRPC$MessageMedia r6 = r15.media     // Catch:{ Exception -> 0x0110 }
            int r6 = r6.ttl_seconds     // Catch:{ Exception -> 0x0110 }
            if (r6 == 0) goto L_0x0873
            r9.ttl_seconds = r6     // Catch:{ Exception -> 0x0110 }
            int r6 = r9.flags     // Catch:{ Exception -> 0x0110 }
            r8 = 4
            r6 = r6 | r8
            r9.flags = r6     // Catch:{ Exception -> 0x0110 }
        L_0x0873:
            r6 = r38 | r3
            r23.requery()     // Catch:{ Exception -> 0x0110 }
            org.telegram.tgnet.NativeByteBuffer r8 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x0110 }
            r24 = r4
            int r4 = r9.getObjectSize()     // Catch:{ Exception -> 0x0110 }
            r8.<init>((int) r4)     // Catch:{ Exception -> 0x0110 }
            r9.serializeToStream(r8)     // Catch:{ Exception -> 0x0110 }
            r9 = r23
            r4 = 1
            r9.bindLong(r4, r13)     // Catch:{ Exception -> 0x0110 }
            r4 = 2
            r9.bindInteger(r4, r3)     // Catch:{ Exception -> 0x0110 }
            int r4 = r15.date     // Catch:{ Exception -> 0x0110 }
            r13 = 3
            r9.bindInteger(r13, r4)     // Catch:{ Exception -> 0x0110 }
            r4 = 4
            r9.bindByteBuffer((int) r4, (org.telegram.tgnet.NativeByteBuffer) r8)     // Catch:{ Exception -> 0x0110 }
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0110 }
            r4.<init>()     // Catch:{ Exception -> 0x0110 }
            java.lang.String r13 = "sent_"
            r4.append(r13)     // Catch:{ Exception -> 0x0110 }
            org.telegram.tgnet.TLRPC$Peer r13 = r15.peer_id     // Catch:{ Exception -> 0x0110 }
            if (r13 == 0) goto L_0x08ab
            long r13 = r13.channel_id     // Catch:{ Exception -> 0x0110 }
            goto L_0x08ad
        L_0x08ab:
            r13 = 0
        L_0x08ad:
            r4.append(r13)     // Catch:{ Exception -> 0x0110 }
            java.lang.String r13 = "_"
            r4.append(r13)     // Catch:{ Exception -> 0x0110 }
            int r13 = r15.id     // Catch:{ Exception -> 0x0110 }
            r4.append(r13)     // Catch:{ Exception -> 0x0110 }
            java.lang.String r4 = r4.toString()     // Catch:{ Exception -> 0x0110 }
            r13 = 5
            r9.bindString(r13, r4)     // Catch:{ Exception -> 0x0110 }
            r13 = r24
            r9.step()     // Catch:{ Exception -> 0x0110 }
            r8.reuse()     // Catch:{ Exception -> 0x0110 }
            r38 = r6
            goto L_0x08d0
        L_0x08cd:
            r13 = r4
            r9 = r23
        L_0x08d0:
            int r11 = r11 + 1
            r27 = r2
            r25 = r5
            r23 = r9
            r24 = r13
            r6 = r21
            r8 = r34
            r5 = r36
            r2 = r37
            r3 = r38
            goto L_0x050a
        L_0x08e6:
            r37 = r2
            r38 = r3
            r36 = r5
            r34 = r8
            r8 = r10
            r9 = r23
            r13 = r24
            r5 = r25
            r2 = r27
            r2.dispose()     // Catch:{ Exception -> 0x0110 }
            if (r6 == 0) goto L_0x08ff
            r6.dispose()     // Catch:{ Exception -> 0x0110 }
        L_0x08ff:
            if (r7 == 0) goto L_0x090e
            r7.dispose()     // Catch:{ Exception -> 0x0110 }
            org.telegram.messenger.MessagesController r2 = r39.getMessagesController()     // Catch:{ Exception -> 0x0110 }
            r6 = 0
            r10 = 0
            r2.didAddedNewTask(r12, r6, r10)     // Catch:{ Exception -> 0x0110 }
        L_0x090e:
            if (r8 == 0) goto L_0x0913
            r8.dispose()     // Catch:{ Exception -> 0x0110 }
        L_0x0913:
            r5.dispose()     // Catch:{ Exception -> 0x0110 }
            r9.dispose()     // Catch:{ Exception -> 0x0110 }
            r13.dispose()     // Catch:{ Exception -> 0x0110 }
            org.telegram.SQLite.SQLiteDatabase r2 = r1.database     // Catch:{ Exception -> 0x0110 }
            java.lang.String r5 = "REPLACE INTO dialogs VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r2 = r2.executeFast(r5)     // Catch:{ Exception -> 0x0110 }
            org.telegram.SQLite.SQLiteDatabase r5 = r1.database     // Catch:{ Exception -> 0x0110 }
            java.lang.String r6 = "UPDATE dialogs SET date = ?, unread_count = ?, last_mid = ?, unread_count_i = ? WHERE did = ?"
            org.telegram.SQLite.SQLitePreparedStatement r5 = r5.executeFast(r6)     // Catch:{ Exception -> 0x0110 }
            java.util.ArrayList r6 = new java.util.ArrayList     // Catch:{ Exception -> 0x0110 }
            r6.<init>()     // Catch:{ Exception -> 0x0110 }
            r7 = 0
        L_0x0932:
            int r8 = r26.size()     // Catch:{ Exception -> 0x0110 }
            if (r7 >= r8) goto L_0x0abb
            r8 = r26
            long r9 = r8.keyAt(r7)     // Catch:{ Exception -> 0x0110 }
            r11 = 0
            int r13 = (r9 > r11 ? 1 : (r9 == r11 ? 0 : -1))
            if (r13 != 0) goto L_0x0953
            r12 = r44
            r15 = r1
            r23 = r7
            r26 = r8
            r7 = 7
            r8 = 6
            r11 = 10
            r14 = 9
            goto L_0x0aae
        L_0x0953:
            java.lang.Object r11 = r8.valueAt(r7)     // Catch:{ Exception -> 0x0110 }
            org.telegram.tgnet.TLRPC$Message r11 = (org.telegram.tgnet.TLRPC$Message) r11     // Catch:{ Exception -> 0x0110 }
            long r12 = org.telegram.messenger.MessageObject.getChannelId(r11)     // Catch:{ Exception -> 0x0110 }
            org.telegram.SQLite.SQLiteDatabase r14 = r1.database     // Catch:{ Exception -> 0x0110 }
            java.lang.StringBuilder r15 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0110 }
            r15.<init>()     // Catch:{ Exception -> 0x0110 }
            java.lang.String r3 = "SELECT date, unread_count, last_mid, unread_count_i FROM dialogs WHERE did = "
            r15.append(r3)     // Catch:{ Exception -> 0x0110 }
            r15.append(r9)     // Catch:{ Exception -> 0x0110 }
            java.lang.String r3 = r15.toString()     // Catch:{ Exception -> 0x0110 }
            r15 = 0
            java.lang.Object[] r4 = new java.lang.Object[r15]     // Catch:{ Exception -> 0x0110 }
            org.telegram.SQLite.SQLiteCursor r3 = r14.queryFinalized(r3, r4)     // Catch:{ Exception -> 0x0110 }
            boolean r4 = r3.next()     // Catch:{ Exception -> 0x0110 }
            if (r4 == 0) goto L_0x09a3
            int r14 = r3.intValue(r15)     // Catch:{ Exception -> 0x0110 }
            r26 = r8
            r15 = 1
            int r8 = r3.intValue(r15)     // Catch:{ Exception -> 0x0110 }
            r15 = 0
            int r8 = java.lang.Math.max(r15, r8)     // Catch:{ Exception -> 0x0110 }
            r15 = 2
            int r19 = r3.intValue(r15)     // Catch:{ Exception -> 0x0110 }
            r43 = r8
            r15 = 3
            int r8 = r3.intValue(r15)     // Catch:{ Exception -> 0x0110 }
            r15 = 0
            int r8 = java.lang.Math.max(r15, r8)     // Catch:{ Exception -> 0x0110 }
            r15 = r14
            r14 = r8
            r8 = r43
            goto L_0x09b8
        L_0x09a3:
            r26 = r8
            r14 = 0
            int r8 = (r12 > r14 ? 1 : (r12 == r14 ? 0 : -1))
            if (r8 == 0) goto L_0x09b3
            org.telegram.messenger.MessagesController r8 = r39.getMessagesController()     // Catch:{ Exception -> 0x0110 }
            r14 = 1
            r8.checkChatInviter(r12, r14)     // Catch:{ Exception -> 0x0110 }
        L_0x09b3:
            r8 = 0
            r14 = 0
            r15 = 0
            r19 = 0
        L_0x09b8:
            r3.dispose()     // Catch:{ Exception -> 0x0110 }
            r23 = r7
            r3 = r34
            r7 = -1
            int r1 = r3.get(r9, r7)     // Catch:{ Exception -> 0x0ab6 }
            r24 = r12
            r12 = r37
            int r13 = r12.get(r9, r7)     // Catch:{ Exception -> 0x0ab6 }
            if (r13 != r7) goto L_0x09d0
            r13 = 0
            goto L_0x09d6
        L_0x09d0:
            int r7 = r13 + r8
            r12.put(r9, r7)     // Catch:{ Exception -> 0x0ab6 }
            r7 = -1
        L_0x09d6:
            if (r1 != r7) goto L_0x09da
            r1 = 0
            goto L_0x09df
        L_0x09da:
            int r7 = r1 + r14
            r3.put(r9, r7)     // Catch:{ Exception -> 0x0ab6 }
        L_0x09df:
            if (r11 == 0) goto L_0x09e5
            int r7 = r11.id     // Catch:{ Exception -> 0x0ab6 }
            r19 = r7
        L_0x09e5:
            if (r11 == 0) goto L_0x09ec
            int r7 = r11.local_id     // Catch:{ Exception -> 0x0ab6 }
            if (r7 == 0) goto L_0x09ec
            goto L_0x09ee
        L_0x09ec:
            r7 = r19
        L_0x09ee:
            if (r8 != 0) goto L_0x09fa
            if (r13 == 0) goto L_0x09fa
            r34 = r3
            r3 = r20
            r3.put(r9, r13)     // Catch:{ Exception -> 0x0ab6 }
            goto L_0x09fe
        L_0x09fa:
            r34 = r3
            r3 = r20
        L_0x09fe:
            if (r14 != 0) goto L_0x0a0a
            if (r1 == 0) goto L_0x0a0a
            r37 = r12
            r12 = r44
            r12.put(r9, r1)     // Catch:{ Exception -> 0x0ab6 }
            goto L_0x0a0e
        L_0x0a0a:
            r37 = r12
            r12 = r44
        L_0x0a0e:
            r20 = r3
            java.lang.Long r3 = java.lang.Long.valueOf(r9)     // Catch:{ Exception -> 0x0ab6 }
            r6.add(r3)     // Catch:{ Exception -> 0x0ab6 }
            if (r4 == 0) goto L_0x0a46
            r5.requery()     // Catch:{ Exception -> 0x0ab6 }
            if (r11 == 0) goto L_0x0a24
            if (r42 == 0) goto L_0x0a22
            if (r15 != 0) goto L_0x0a24
        L_0x0a22:
            int r15 = r11.date     // Catch:{ Exception -> 0x0ab6 }
        L_0x0a24:
            r3 = 1
            r5.bindInteger(r3, r15)     // Catch:{ Exception -> 0x0ab6 }
            int r8 = r8 + r13
            r3 = 2
            r5.bindInteger(r3, r8)     // Catch:{ Exception -> 0x0ab6 }
            r4 = 3
            r5.bindInteger(r4, r7)     // Catch:{ Exception -> 0x0ab6 }
            int r14 = r14 + r1
            r1 = 4
            r5.bindInteger(r1, r14)     // Catch:{ Exception -> 0x0ab6 }
            r1 = 5
            r5.bindLong(r1, r9)     // Catch:{ Exception -> 0x0ab6 }
            r5.step()     // Catch:{ Exception -> 0x0ab6 }
            r7 = 7
            r8 = 6
            r11 = 10
            r14 = 9
            r15 = r39
            goto L_0x0aae
        L_0x0a46:
            r2.requery()     // Catch:{ Exception -> 0x0ab6 }
            r3 = 1
            r2.bindLong(r3, r9)     // Catch:{ Exception -> 0x0ab6 }
            if (r11 == 0) goto L_0x0a55
            if (r42 == 0) goto L_0x0a53
            if (r15 != 0) goto L_0x0a55
        L_0x0a53:
            int r15 = r11.date     // Catch:{ Exception -> 0x0ab6 }
        L_0x0a55:
            r3 = 2
            r2.bindInteger(r3, r15)     // Catch:{ Exception -> 0x0ab6 }
            int r8 = r8 + r13
            r11 = 3
            r2.bindInteger(r11, r8)     // Catch:{ Exception -> 0x0ab6 }
            r8 = 4
            r2.bindInteger(r8, r7)     // Catch:{ Exception -> 0x0ab6 }
            r4 = 5
            r7 = 0
            r2.bindInteger(r4, r7)     // Catch:{ Exception -> 0x0ab6 }
            r8 = 6
            r2.bindInteger(r8, r7)     // Catch:{ Exception -> 0x0ab6 }
            r3 = 0
            r7 = 7
            r2.bindLong(r7, r3)     // Catch:{ Exception -> 0x0ab6 }
            int r14 = r14 + r1
            r1 = 8
            r2.bindInteger(r1, r14)     // Catch:{ Exception -> 0x0ab6 }
            int r11 = (r24 > r3 ? 1 : (r24 == r3 ? 0 : -1))
            if (r11 == 0) goto L_0x0a7d
            r11 = 1
            goto L_0x0a7e
        L_0x0a7d:
            r11 = 0
        L_0x0a7e:
            r14 = 9
            r2.bindInteger(r14, r11)     // Catch:{ Exception -> 0x0ab6 }
            r11 = 10
            r15 = 0
            r2.bindInteger(r11, r15)     // Catch:{ Exception -> 0x0ab6 }
            r1 = 11
            r2.bindInteger(r1, r15)     // Catch:{ Exception -> 0x0ab6 }
            r1 = 12
            r2.bindInteger(r1, r15)     // Catch:{ Exception -> 0x0ab6 }
            r1 = 13
            r2.bindInteger(r1, r15)     // Catch:{ Exception -> 0x0ab6 }
            r1 = 14
            r2.bindNull(r1)     // Catch:{ Exception -> 0x0ab6 }
            r1 = 15
            r2.bindInteger(r1, r15)     // Catch:{ Exception -> 0x0ab6 }
            r2.step()     // Catch:{ Exception -> 0x0ab6 }
            r15 = r39
            androidx.collection.LongSparseArray<java.lang.Boolean> r1 = r15.unknownDialogsIds     // Catch:{ Exception -> 0x0b95 }
            java.lang.Boolean r3 = java.lang.Boolean.TRUE     // Catch:{ Exception -> 0x0b95 }
            r1.put(r9, r3)     // Catch:{ Exception -> 0x0b95 }
        L_0x0aae:
            int r1 = r23 + 1
            r7 = r1
            r44 = r12
            r1 = r15
            goto L_0x0932
        L_0x0ab6:
            r0 = move-exception
            r15 = r39
            goto L_0x0112
        L_0x0abb:
            r12 = r44
            r15 = r1
            r5.dispose()     // Catch:{ Exception -> 0x0b95 }
            r2.dispose()     // Catch:{ Exception -> 0x0b95 }
            if (r36 == 0) goto L_0x0b6d
            org.telegram.SQLite.SQLiteDatabase r1 = r15.database     // Catch:{ Exception -> 0x0b95 }
            java.lang.String r2 = "REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r1 = r1.executeFast(r2)     // Catch:{ Exception -> 0x0b95 }
            int r2 = r36.size()     // Catch:{ Exception -> 0x0b95 }
            r4 = 0
        L_0x0ad3:
            if (r4 >= r2) goto L_0x0b6a
            r5 = r36
            int r3 = r5.keyAt(r4)     // Catch:{ Exception -> 0x0b95 }
            java.lang.Object r7 = r5.valueAt(r4)     // Catch:{ Exception -> 0x0b95 }
            org.telegram.messenger.support.LongSparseIntArray r7 = (org.telegram.messenger.support.LongSparseIntArray) r7     // Catch:{ Exception -> 0x0b95 }
            int r8 = r7.size()     // Catch:{ Exception -> 0x0b95 }
            r10 = 0
        L_0x0ae6:
            if (r10 >= r8) goto L_0x0b5b
            long r13 = r7.keyAt(r10)     // Catch:{ Exception -> 0x0b95 }
            org.telegram.SQLite.SQLiteDatabase r11 = r15.database     // Catch:{ Exception -> 0x0b95 }
            java.util.Locale r9 = java.util.Locale.US     // Catch:{ Exception -> 0x0b95 }
            r40 = r2
            java.lang.String r2 = "SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1"
            r36 = r5
            r42 = r8
            r5 = 2
            java.lang.Object[] r8 = new java.lang.Object[r5]     // Catch:{ Exception -> 0x0b95 }
            r5 = r9
            java.lang.Long r17 = java.lang.Long.valueOf(r13)     // Catch:{ Exception -> 0x0b95 }
            r9 = 0
            r8[r9] = r17     // Catch:{ Exception -> 0x0b95 }
            java.lang.Integer r16 = java.lang.Integer.valueOf(r3)     // Catch:{ Exception -> 0x0b95 }
            r17 = 1
            r8[r17] = r16     // Catch:{ Exception -> 0x0b95 }
            java.lang.String r2 = java.lang.String.format(r5, r2, r8)     // Catch:{ Exception -> 0x0b95 }
            java.lang.Object[] r5 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x0b95 }
            org.telegram.SQLite.SQLiteCursor r2 = r11.queryFinalized(r2, r5)     // Catch:{ Exception -> 0x0b95 }
            boolean r5 = r2.next()     // Catch:{ Exception -> 0x0b95 }
            if (r5 == 0) goto L_0x0b25
            int r11 = r2.intValue(r9)     // Catch:{ Exception -> 0x0b95 }
            r5 = 1
            int r8 = r2.intValue(r5)     // Catch:{ Exception -> 0x0b95 }
            goto L_0x0b27
        L_0x0b25:
            r8 = 0
            r11 = -1
        L_0x0b27:
            r2.dispose()     // Catch:{ Exception -> 0x0b95 }
            r2 = -1
            if (r11 == r2) goto L_0x0b4e
            r1.requery()     // Catch:{ Exception -> 0x0b95 }
            int r5 = r7.valueAt(r10)     // Catch:{ Exception -> 0x0b95 }
            int r11 = r11 + r5
            r5 = 1
            r1.bindLong(r5, r13)     // Catch:{ Exception -> 0x0b95 }
            r9 = 2
            r1.bindInteger(r9, r3)     // Catch:{ Exception -> 0x0b95 }
            r13 = 0
            int r11 = java.lang.Math.max(r13, r11)     // Catch:{ Exception -> 0x0b95 }
            r13 = 3
            r1.bindInteger(r13, r11)     // Catch:{ Exception -> 0x0b95 }
            r11 = 4
            r1.bindInteger(r11, r8)     // Catch:{ Exception -> 0x0b95 }
            r1.step()     // Catch:{ Exception -> 0x0b95 }
            goto L_0x0b52
        L_0x0b4e:
            r5 = 1
            r9 = 2
            r11 = 4
            r13 = 3
        L_0x0b52:
            int r10 = r10 + 1
            r2 = r40
            r8 = r42
            r5 = r36
            goto L_0x0ae6
        L_0x0b5b:
            r40 = r2
            r36 = r5
            r2 = -1
            r5 = 1
            r9 = 2
            r11 = 4
            r13 = 3
            int r4 = r4 + 1
            r2 = r40
            goto L_0x0ad3
        L_0x0b6a:
            r1.dispose()     // Catch:{ Exception -> 0x0b95 }
        L_0x0b6d:
            if (r41 == 0) goto L_0x0b74
            org.telegram.SQLite.SQLiteDatabase r1 = r15.database     // Catch:{ Exception -> 0x0b95 }
            r1.commitTransaction()     // Catch:{ Exception -> 0x0b95 }
        L_0x0b74:
            r1 = r20
            r2 = 0
            r15.updateFiltersReadCounter(r1, r12, r2)     // Catch:{ Exception -> 0x0b95 }
            org.telegram.messenger.MessagesController r1 = r39.getMessagesController()     // Catch:{ Exception -> 0x0b95 }
            r3 = r34
            r2 = r37
            r1.processDialogsUpdateRead(r2, r3)     // Catch:{ Exception -> 0x0b95 }
            if (r38 == 0) goto L_0x0b91
            org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda32 r1 = new org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda32     // Catch:{ Exception -> 0x0b95 }
            r2 = r38
            r1.<init>(r15, r2)     // Catch:{ Exception -> 0x0b95 }
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r1)     // Catch:{ Exception -> 0x0b95 }
        L_0x0b91:
            r15.updateWidgets((java.util.ArrayList<java.lang.Long>) r6)     // Catch:{ Exception -> 0x0b95 }
            goto L_0x0b9b
        L_0x0b95:
            r0 = move-exception
            goto L_0x0112
        L_0x0b98:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r1)
        L_0x0b9b:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$putMessages$162(java.util.ArrayList, boolean, boolean, int, boolean, boolean):void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$putMessagesInternal$161(int i) {
        getDownloadController().newDownloadObjectsAvailable(i);
    }

    public void putMessages(ArrayList<TLRPC$Message> arrayList, boolean z, boolean z2, boolean z3, int i, boolean z4) {
        putMessages(arrayList, z, z2, z3, i, false, z4);
    }

    public void putMessages(ArrayList<TLRPC$Message> arrayList, boolean z, boolean z2, boolean z3, int i, boolean z4, boolean z5) {
        if (arrayList.size() != 0) {
            if (z2) {
                this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda149(this, arrayList, z, z3, i, z4, z5));
                return;
            }
            lambda$putMessages$162(arrayList, z, z3, i, z4, z5);
        }
    }

    public void markMessageAsSendError(TLRPC$Message tLRPC$Message, boolean z) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda176(this, tLRPC$Message, z));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessageAsSendError$163(TLRPC$Message tLRPC$Message, boolean z) {
        try {
            long j = (long) tLRPC$Message.id;
            if (z) {
                this.database.executeFast(String.format(Locale.US, "UPDATE scheduled_messages_v2 SET send_state = 2 WHERE mid = %d AND uid = %d", new Object[]{Long.valueOf(j), Long.valueOf(MessageObject.getDialogId(tLRPC$Message))})).stepThis().dispose();
                return;
            }
            this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET send_state = 2 WHERE mid = %d AND uid = %d", new Object[]{Long.valueOf(j), Long.valueOf(MessageObject.getDialogId(tLRPC$Message))})).stepThis().dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void setMessageSeq(int i, int i2, int i3) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda36(this, i, i2, i3));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$setMessageSeq$164(int i, int i2, int i3) {
        try {
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO messages_seq VALUES(?, ?, ?)");
            executeFast.requery();
            executeFast.bindInteger(1, i);
            executeFast.bindInteger(2, i2);
            executeFast.bindInteger(3, i3);
            executeFast.step();
            executeFast.dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v1, resolved type: org.telegram.SQLite.SQLitePreparedStatement} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v2, resolved type: org.telegram.SQLite.SQLitePreparedStatement} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v4, resolved type: org.telegram.SQLite.SQLitePreparedStatement} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v11, resolved type: org.telegram.SQLite.SQLitePreparedStatement} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v13, resolved type: org.telegram.SQLite.SQLitePreparedStatement} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v15, resolved type: org.telegram.SQLite.SQLiteCursor} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v18, resolved type: org.telegram.SQLite.SQLitePreparedStatement} */
    /* JADX WARNING: type inference failed for: r5v0, types: [long[], org.telegram.SQLite.SQLitePreparedStatement] */
    /* JADX WARNING: type inference failed for: r5v5 */
    /* JADX WARNING: type inference failed for: r5v9 */
    /* JADX WARNING: type inference failed for: r5v10 */
    /* JADX WARNING: type inference failed for: r5v14 */
    /* JADX WARNING: type inference failed for: r5v16 */
    /* JADX WARNING: type inference failed for: r5v17 */
    /* JADX WARNING: type inference failed for: r5v23 */
    /* access modifiers changed from: private */
    /* JADX WARNING: Code restructure failed: missing block: B:104:0x019e, code lost:
        if (r8 == null) goto L_0x01a3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:120:0x01d8, code lost:
        if (r5 == 0) goto L_0x01dd;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:143:0x0255, code lost:
        if (r3 != null) goto L_0x0257;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:144:0x0257, code lost:
        r3.dispose();
        r3 = r5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:146:?, code lost:
        r3 = r1.database.executeFast("UPDATE media_v4 SET mid = ? WHERE mid = ? AND uid = ?");
        r3.bindInteger(1, r2);
        r3.bindInteger(2, r12);
        r3.bindLong(3, r7);
        r3.step();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:147:0x0273, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:149:?, code lost:
        r1.database.executeFast(java.lang.String.format(java.util.Locale.US, "DELETE FROM media_v4 WHERE mid = %d AND uid = %d", new java.lang.Object[]{java.lang.Integer.valueOf(r12), java.lang.Long.valueOf(r7)})).stepThis().dispose();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:150:0x029b, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:152:?, code lost:
        org.telegram.messenger.FileLog.e((java.lang.Throwable) r0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:153:0x029f, code lost:
        if (r3 == null) goto L_0x02a5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:154:0x02a1, code lost:
        r3.dispose();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:155:0x02a5, code lost:
        r5 = r3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:156:0x02a6, code lost:
        r5 = r5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:157:?, code lost:
        r5 = r1.database.executeFast("UPDATE dialogs SET last_mid = ? WHERE last_mid = ?");
        r5.bindInteger(1, r2);
        r5.bindInteger(2, r12);
        r5.step();
        r5 = r5;
        r5 = r5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:158:0x02ba, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:159:0x02bc, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:161:?, code lost:
        org.telegram.messenger.FileLog.e((java.lang.Throwable) r0);
        r5 = r5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:162:0x02c0, code lost:
        if (r5 == null) goto L_0x0321;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:163:0x02c2, code lost:
        r5.dispose();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:164:0x02c6, code lost:
        if (r5 != null) goto L_0x02c8;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:165:0x02c8, code lost:
        r5.dispose();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:166:0x02cb, code lost:
        throw r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:167:0x02cc, code lost:
        if (r3 != null) goto L_0x02ce;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:168:0x02ce, code lost:
        r3.dispose();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:169:0x02d1, code lost:
        throw r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:181:0x031c, code lost:
        if (r5 != 0) goto L_0x031e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:182:0x031e, code lost:
        r5.dispose();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:49:0x009c, code lost:
        if (r10 != null) goto L_0x009e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:93:0x016c, code lost:
        if (r4 == 1) goto L_0x0170;
     */
    /* JADX WARNING: Failed to insert additional move for type inference */
    /* JADX WARNING: Failed to process nested try/catch */
    /* JADX WARNING: Missing exception handler attribute for start block: B:136:0x020b */
    /* JADX WARNING: Missing exception handler attribute for start block: B:148:0x0275 */
    /* JADX WARNING: Missing exception handler attribute for start block: B:176:0x02f2 */
    /* JADX WARNING: Multi-variable type inference failed */
    /* JADX WARNING: Removed duplicated region for block: B:108:0x01a9 A[RETURN] */
    /* JADX WARNING: Removed duplicated region for block: B:109:0x01aa  */
    /* JADX WARNING: Removed duplicated region for block: B:171:0x02d4  */
    /* JADX WARNING: Removed duplicated region for block: B:193:0x033e  */
    /* JADX WARNING: Removed duplicated region for block: B:21:0x0051  */
    /* JADX WARNING: Removed duplicated region for block: B:24:0x0058 A[RETURN] */
    /* JADX WARNING: Removed duplicated region for block: B:28:0x005d  */
    /* JADX WARNING: Removed duplicated region for block: B:33:0x0072 A[ADDED_TO_REGION] */
    /* JADX WARNING: Removed duplicated region for block: B:54:0x00a7  */
    /* JADX WARNING: Removed duplicated region for block: B:58:0x00b5  */
    /* JADX WARNING: Removed duplicated region for block: B:70:0x0122 A[ADDED_TO_REGION] */
    /* JADX WARNING: Removed duplicated region for block: B:78:0x0149 A[Catch:{ Exception -> 0x0156 }] */
    /* JADX WARNING: Removed duplicated region for block: B:80:0x014f  */
    /* JADX WARNING: Removed duplicated region for block: B:90:0x0165  */
    /* JADX WARNING: Removed duplicated region for block: B:92:0x016b  */
    /* JADX WARNING: Removed duplicated region for block: B:94:0x016f  */
    /* JADX WARNING: Removed duplicated region for block: B:98:0x018f A[Catch:{ Exception -> 0x019a, all -> 0x0197 }] */
    /* renamed from: updateMessageStateAndIdInternal */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public long[] lambda$updateMessageStateAndId$166(long r20, long r22, java.lang.Integer r24, int r25, int r26, int r27) {
        /*
            r19 = this;
            r1 = r19
            r2 = r25
            r3 = r26
            r4 = r27
            r5 = 0
            r6 = 0
            r7 = 1
            if (r24 != 0) goto L_0x0061
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0048, all -> 0x0046 }
            java.util.Locale r8 = java.util.Locale.US     // Catch:{ Exception -> 0x0048, all -> 0x0046 }
            java.lang.String r9 = "SELECT mid, uid FROM randoms_v2 WHERE random_id = %d LIMIT 1"
            java.lang.Object[] r10 = new java.lang.Object[r7]     // Catch:{ Exception -> 0x0048, all -> 0x0046 }
            java.lang.Long r11 = java.lang.Long.valueOf(r20)     // Catch:{ Exception -> 0x0048, all -> 0x0046 }
            r10[r6] = r11     // Catch:{ Exception -> 0x0048, all -> 0x0046 }
            java.lang.String r8 = java.lang.String.format(r8, r9, r10)     // Catch:{ Exception -> 0x0048, all -> 0x0046 }
            java.lang.Object[] r9 = new java.lang.Object[r6]     // Catch:{ Exception -> 0x0048, all -> 0x0046 }
            org.telegram.SQLite.SQLiteCursor r8 = r0.queryFinalized(r8, r9)     // Catch:{ Exception -> 0x0048, all -> 0x0046 }
            boolean r0 = r8.next()     // Catch:{ Exception -> 0x0042 }
            if (r0 == 0) goto L_0x003a
            int r0 = r8.intValue(r6)     // Catch:{ Exception -> 0x0042 }
            java.lang.Integer r9 = java.lang.Integer.valueOf(r0)     // Catch:{ Exception -> 0x0042 }
            long r10 = r8.longValue(r7)     // Catch:{ Exception -> 0x0038 }
            goto L_0x003e
        L_0x0038:
            r0 = move-exception
            goto L_0x004c
        L_0x003a:
            r10 = r22
            r9 = r24
        L_0x003e:
            r8.dispose()
            goto L_0x0056
        L_0x0042:
            r0 = move-exception
            r9 = r24
            goto L_0x004c
        L_0x0046:
            r0 = move-exception
            goto L_0x005b
        L_0x0048:
            r0 = move-exception
            r9 = r24
            r8 = r5
        L_0x004c:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ all -> 0x0059 }
            if (r8 == 0) goto L_0x0054
            r8.dispose()
        L_0x0054:
            r10 = r22
        L_0x0056:
            if (r9 != 0) goto L_0x0066
            return r5
        L_0x0059:
            r0 = move-exception
            r5 = r8
        L_0x005b:
            if (r5 == 0) goto L_0x0060
            r5.dispose()
        L_0x0060:
            throw r0
        L_0x0061:
            r10 = r22
            r9 = r24
            r8 = r5
        L_0x0066:
            int r12 = r9.intValue()
            int r0 = r9.intValue()
            r13 = 3
            r14 = 2
            if (r0 >= 0) goto L_0x00ab
            if (r4 != r7) goto L_0x00ab
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0095, all -> 0x0093 }
            java.lang.String r10 = "UPDATE randoms_v2 SET mid = ? WHERE random_id = ? AND mid = ?"
            org.telegram.SQLite.SQLitePreparedStatement r10 = r0.executeFast(r10)     // Catch:{ Exception -> 0x0095, all -> 0x0093 }
            r10.bindInteger(r7, r2)     // Catch:{ Exception -> 0x008f }
            r22 = r8
            r7 = r20
            r10.bindLong(r14, r7)     // Catch:{ Exception -> 0x008d }
            r10.bindInteger(r13, r12)     // Catch:{ Exception -> 0x008d }
            r10.step()     // Catch:{ Exception -> 0x008d }
            goto L_0x009e
        L_0x008d:
            r0 = move-exception
            goto L_0x0099
        L_0x008f:
            r0 = move-exception
            r22 = r8
            goto L_0x0099
        L_0x0093:
            r0 = move-exception
            goto L_0x00a5
        L_0x0095:
            r0 = move-exception
            r22 = r8
            r10 = r5
        L_0x0099:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ all -> 0x00a3 }
            if (r10 == 0) goto L_0x011d
        L_0x009e:
            r10.dispose()
            goto L_0x011d
        L_0x00a3:
            r0 = move-exception
            r5 = r10
        L_0x00a5:
            if (r5 == 0) goto L_0x00aa
            r5.dispose()
        L_0x00aa:
            throw r0
        L_0x00ab:
            r22 = r8
            r7 = r20
            int r0 = r9.intValue()
            if (r0 <= 0) goto L_0x011d
            org.telegram.tgnet.TLRPC$TL_updateDeleteScheduledMessages r0 = new org.telegram.tgnet.TLRPC$TL_updateDeleteScheduledMessages
            r0.<init>()
            java.util.ArrayList<java.lang.Integer> r2 = r0.messages
            java.lang.Integer r3 = java.lang.Integer.valueOf(r12)
            r2.add(r3)
            boolean r2 = org.telegram.messenger.DialogObject.isChatDialog(r10)
            if (r2 == 0) goto L_0x00d4
            org.telegram.tgnet.TLRPC$TL_peerChannel r2 = new org.telegram.tgnet.TLRPC$TL_peerChannel
            r2.<init>()
            r0.peer = r2
            long r3 = -r10
            r2.channel_id = r3
            goto L_0x00dd
        L_0x00d4:
            org.telegram.tgnet.TLRPC$TL_peerUser r2 = new org.telegram.tgnet.TLRPC$TL_peerUser
            r2.<init>()
            r0.peer = r2
            r2.user_id = r10
        L_0x00dd:
            org.telegram.tgnet.TLRPC$TL_updates r2 = new org.telegram.tgnet.TLRPC$TL_updates
            r2.<init>()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Update> r3 = r2.updates
            r3.add(r0)
            org.telegram.messenger.DispatchQueue r0 = org.telegram.messenger.Utilities.stageQueue
            org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda179 r3 = new org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda179
            r3.<init>(r1, r2)
            r0.postRunnable(r3)
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0118 }
            java.util.Locale r2 = java.util.Locale.US     // Catch:{ Exception -> 0x0118 }
            java.lang.String r3 = "DELETE FROM randoms_v2 WHERE random_id = %d AND mid = %d AND uid = %d"
            java.lang.Object[] r4 = new java.lang.Object[r13]     // Catch:{ Exception -> 0x0118 }
            java.lang.Long r7 = java.lang.Long.valueOf(r20)     // Catch:{ Exception -> 0x0118 }
            r4[r6] = r7     // Catch:{ Exception -> 0x0118 }
            r6 = 1
            r4[r6] = r9     // Catch:{ Exception -> 0x0118 }
            java.lang.Long r6 = java.lang.Long.valueOf(r10)     // Catch:{ Exception -> 0x0118 }
            r4[r14] = r6     // Catch:{ Exception -> 0x0118 }
            java.lang.String r2 = java.lang.String.format(r2, r3, r4)     // Catch:{ Exception -> 0x0118 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r2)     // Catch:{ Exception -> 0x0118 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0118 }
            r0.dispose()     // Catch:{ Exception -> 0x0118 }
            goto L_0x011c
        L_0x0118:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
        L_0x011c:
            return r5
        L_0x011d:
            r7 = -1
            r10 = 0
            if (r4 == r7) goto L_0x012a
            if (r4 != 0) goto L_0x0125
            goto L_0x012a
        L_0x0125:
            r8 = r22
        L_0x0127:
            r16 = r10
            goto L_0x0169
        L_0x012a:
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x015d, all -> 0x0158 }
            java.util.Locale r8 = java.util.Locale.US     // Catch:{ Exception -> 0x015d, all -> 0x0158 }
            java.lang.String r15 = "SELECT uid FROM messages_v2 WHERE mid = %d LIMIT 1"
            r13 = 1
            java.lang.Object[] r14 = new java.lang.Object[r13]     // Catch:{ Exception -> 0x015d, all -> 0x0158 }
            java.lang.Integer r16 = java.lang.Integer.valueOf(r12)     // Catch:{ Exception -> 0x015d, all -> 0x0158 }
            r14[r6] = r16     // Catch:{ Exception -> 0x015d, all -> 0x0158 }
            java.lang.String r8 = java.lang.String.format(r8, r15, r14)     // Catch:{ Exception -> 0x015d, all -> 0x0158 }
            java.lang.Object[] r14 = new java.lang.Object[r6]     // Catch:{ Exception -> 0x015d, all -> 0x0158 }
            org.telegram.SQLite.SQLiteCursor r8 = r0.queryFinalized(r8, r14)     // Catch:{ Exception -> 0x015d, all -> 0x0158 }
            boolean r0 = r8.next()     // Catch:{ Exception -> 0x0156 }
            if (r0 == 0) goto L_0x014f
            long r14 = r8.longValue(r6)     // Catch:{ Exception -> 0x0156 }
            r4 = 0
            goto L_0x0150
        L_0x014f:
            r14 = r10
        L_0x0150:
            r8.dispose()
            r16 = r14
            goto L_0x0169
        L_0x0156:
            r0 = move-exception
            goto L_0x0160
        L_0x0158:
            r0 = move-exception
            r8 = r22
            goto L_0x033c
        L_0x015d:
            r0 = move-exception
            r8 = r22
        L_0x0160:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ all -> 0x033b }
            if (r8 == 0) goto L_0x0127
            r8.dispose()
            goto L_0x0127
        L_0x0169:
            if (r4 == r7) goto L_0x016f
            r7 = 1
            if (r4 != r7) goto L_0x01a3
            goto L_0x0170
        L_0x016f:
            r7 = 1
        L_0x0170:
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x019a }
            java.util.Locale r13 = java.util.Locale.US     // Catch:{ Exception -> 0x019a }
            java.lang.String r14 = "SELECT uid FROM scheduled_messages_v2 WHERE mid = %d LIMIT 1"
            java.lang.Object[] r15 = new java.lang.Object[r7]     // Catch:{ Exception -> 0x019a }
            r7 = r15
            java.lang.Integer r18 = java.lang.Integer.valueOf(r12)     // Catch:{ Exception -> 0x019a }
            r7[r6] = r18     // Catch:{ Exception -> 0x019a }
            java.lang.String r7 = java.lang.String.format(r13, r14, r7)     // Catch:{ Exception -> 0x019a }
            java.lang.Object[] r13 = new java.lang.Object[r6]     // Catch:{ Exception -> 0x019a }
            org.telegram.SQLite.SQLiteCursor r8 = r0.queryFinalized(r7, r13)     // Catch:{ Exception -> 0x019a }
            boolean r0 = r8.next()     // Catch:{ Exception -> 0x019a }
            if (r0 == 0) goto L_0x01a0
            long r13 = r8.longValue(r6)     // Catch:{ Exception -> 0x019a }
            r16 = r13
            r4 = 1
            goto L_0x01a0
        L_0x0197:
            r0 = move-exception
            goto L_0x0335
        L_0x019a:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ all -> 0x0197 }
            if (r8 == 0) goto L_0x01a3
        L_0x01a0:
            r8.dispose()
        L_0x01a3:
            r7 = r16
            int r0 = (r7 > r10 ? 1 : (r7 == r10 ? 0 : -1))
            if (r0 != 0) goto L_0x01aa
            return r5
        L_0x01aa:
            if (r12 != r2) goto L_0x01ed
            if (r3 == 0) goto L_0x01ed
            if (r4 != 0) goto L_0x01b9
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x01d4 }
            java.lang.String r4 = "UPDATE messages_v2 SET send_state = 0, date = ? WHERE mid = ? AND uid = ?"
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r4)     // Catch:{ Exception -> 0x01d4 }
            goto L_0x01c1
        L_0x01b9:
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x01d4 }
            java.lang.String r4 = "UPDATE scheduled_messages_v2 SET send_state = 0, date = ? WHERE mid = ? AND uid = ?"
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r4)     // Catch:{ Exception -> 0x01d4 }
        L_0x01c1:
            r5 = r0
            r4 = 1
            r5.bindInteger(r4, r3)     // Catch:{ Exception -> 0x01d4 }
            r3 = 2
            r5.bindInteger(r3, r2)     // Catch:{ Exception -> 0x01d4 }
            r3 = 3
            r5.bindLong(r3, r7)     // Catch:{ Exception -> 0x01d4 }
            r5.step()     // Catch:{ Exception -> 0x01d4 }
            goto L_0x01da
        L_0x01d2:
            r0 = move-exception
            goto L_0x01e7
        L_0x01d4:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ all -> 0x01d2 }
            if (r5 == 0) goto L_0x01dd
        L_0x01da:
            r5.dispose()
        L_0x01dd:
            r3 = 2
            long[] r0 = new long[r3]
            r0[r6] = r7
            long r2 = (long) r2
            r4 = 1
            r0[r4] = r2
            return r0
        L_0x01e7:
            if (r5 == 0) goto L_0x01ec
            r5.dispose()
        L_0x01ec:
            throw r0
        L_0x01ed:
            if (r4 != 0) goto L_0x02d8
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x020a, all -> 0x0207 }
            java.lang.String r3 = "UPDATE messages_v2 SET mid = ?, send_state = 0 WHERE mid = ? AND uid = ?"
            org.telegram.SQLite.SQLitePreparedStatement r3 = r0.executeFast(r3)     // Catch:{ Exception -> 0x020a, all -> 0x0207 }
            r4 = 1
            r3.bindInteger(r4, r2)     // Catch:{ Exception -> 0x020b }
            r4 = 2
            r3.bindInteger(r4, r12)     // Catch:{ Exception -> 0x020b }
            r4 = 3
            r3.bindLong(r4, r7)     // Catch:{ Exception -> 0x020b }
            r3.step()     // Catch:{ Exception -> 0x020b }
            goto L_0x0257
        L_0x0207:
            r0 = move-exception
            goto L_0x02d2
        L_0x020a:
            r3 = r5
        L_0x020b:
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0251 }
            java.util.Locale r4 = java.util.Locale.US     // Catch:{ Exception -> 0x0251 }
            java.lang.String r10 = "DELETE FROM messages_v2 WHERE mid = %d AND uid = %d"
            r11 = 2
            java.lang.Object[] r13 = new java.lang.Object[r11]     // Catch:{ Exception -> 0x0251 }
            java.lang.Integer r11 = java.lang.Integer.valueOf(r12)     // Catch:{ Exception -> 0x0251 }
            r13[r6] = r11     // Catch:{ Exception -> 0x0251 }
            java.lang.Long r11 = java.lang.Long.valueOf(r7)     // Catch:{ Exception -> 0x0251 }
            r14 = 1
            r13[r14] = r11     // Catch:{ Exception -> 0x0251 }
            java.lang.String r10 = java.lang.String.format(r4, r10, r13)     // Catch:{ Exception -> 0x0251 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r10)     // Catch:{ Exception -> 0x0251 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0251 }
            r0.dispose()     // Catch:{ Exception -> 0x0251 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0251 }
            java.lang.String r10 = "DELETE FROM messages_seq WHERE mid = %d"
            r11 = 1
            java.lang.Object[] r13 = new java.lang.Object[r11]     // Catch:{ Exception -> 0x0251 }
            java.lang.Integer r11 = java.lang.Integer.valueOf(r12)     // Catch:{ Exception -> 0x0251 }
            r13[r6] = r11     // Catch:{ Exception -> 0x0251 }
            java.lang.String r4 = java.lang.String.format(r4, r10, r13)     // Catch:{ Exception -> 0x0251 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r4)     // Catch:{ Exception -> 0x0251 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0251 }
            r0.dispose()     // Catch:{ Exception -> 0x0251 }
            goto L_0x0255
        L_0x024d:
            r0 = move-exception
            r5 = r3
            goto L_0x02d2
        L_0x0251:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ all -> 0x024d }
        L_0x0255:
            if (r3 == 0) goto L_0x025b
        L_0x0257:
            r3.dispose()
            r3 = r5
        L_0x025b:
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0275 }
            java.lang.String r4 = "UPDATE media_v4 SET mid = ? WHERE mid = ? AND uid = ?"
            org.telegram.SQLite.SQLitePreparedStatement r3 = r0.executeFast(r4)     // Catch:{ Exception -> 0x0275 }
            r4 = 1
            r3.bindInteger(r4, r2)     // Catch:{ Exception -> 0x0275 }
            r4 = 2
            r3.bindInteger(r4, r12)     // Catch:{ Exception -> 0x0275 }
            r4 = 3
            r3.bindLong(r4, r7)     // Catch:{ Exception -> 0x0275 }
            r3.step()     // Catch:{ Exception -> 0x0275 }
            goto L_0x02a1
        L_0x0273:
            r0 = move-exception
            goto L_0x02cc
        L_0x0275:
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x029b }
            java.util.Locale r4 = java.util.Locale.US     // Catch:{ Exception -> 0x029b }
            java.lang.String r10 = "DELETE FROM media_v4 WHERE mid = %d AND uid = %d"
            r11 = 2
            java.lang.Object[] r13 = new java.lang.Object[r11]     // Catch:{ Exception -> 0x029b }
            java.lang.Integer r11 = java.lang.Integer.valueOf(r12)     // Catch:{ Exception -> 0x029b }
            r13[r6] = r11     // Catch:{ Exception -> 0x029b }
            java.lang.Long r11 = java.lang.Long.valueOf(r7)     // Catch:{ Exception -> 0x029b }
            r14 = 1
            r13[r14] = r11     // Catch:{ Exception -> 0x029b }
            java.lang.String r4 = java.lang.String.format(r4, r10, r13)     // Catch:{ Exception -> 0x029b }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r4)     // Catch:{ Exception -> 0x029b }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x029b }
            r0.dispose()     // Catch:{ Exception -> 0x029b }
            goto L_0x029f
        L_0x029b:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ all -> 0x0273 }
        L_0x029f:
            if (r3 == 0) goto L_0x02a5
        L_0x02a1:
            r3.dispose()
            goto L_0x02a6
        L_0x02a5:
            r5 = r3
        L_0x02a6:
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x02bc }
            java.lang.String r3 = "UPDATE dialogs SET last_mid = ? WHERE last_mid = ?"
            org.telegram.SQLite.SQLitePreparedStatement r5 = r0.executeFast(r3)     // Catch:{ Exception -> 0x02bc }
            r3 = 1
            r5.bindInteger(r3, r2)     // Catch:{ Exception -> 0x02bc }
            r2 = 2
            r5.bindInteger(r2, r12)     // Catch:{ Exception -> 0x02bc }
            r5.step()     // Catch:{ Exception -> 0x02bc }
            goto L_0x02c2
        L_0x02ba:
            r0 = move-exception
            goto L_0x02c6
        L_0x02bc:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ all -> 0x02ba }
            if (r5 == 0) goto L_0x0321
        L_0x02c2:
            r5.dispose()
            goto L_0x0321
        L_0x02c6:
            if (r5 == 0) goto L_0x02cb
            r5.dispose()
        L_0x02cb:
            throw r0
        L_0x02cc:
            if (r3 == 0) goto L_0x02d1
            r3.dispose()
        L_0x02d1:
            throw r0
        L_0x02d2:
            if (r5 == 0) goto L_0x02d7
            r5.dispose()
        L_0x02d7:
            throw r0
        L_0x02d8:
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x02f2 }
            java.lang.String r3 = "UPDATE scheduled_messages_v2 SET mid = ?, send_state = 0 WHERE mid = ? AND uid = ?"
            org.telegram.SQLite.SQLitePreparedStatement r5 = r0.executeFast(r3)     // Catch:{ Exception -> 0x02f2 }
            r3 = 1
            r5.bindInteger(r3, r2)     // Catch:{ Exception -> 0x02f2 }
            r2 = 2
            r5.bindInteger(r2, r12)     // Catch:{ Exception -> 0x02f2 }
            r2 = 3
            r5.bindLong(r2, r7)     // Catch:{ Exception -> 0x02f2 }
            r5.step()     // Catch:{ Exception -> 0x02f2 }
            goto L_0x031e
        L_0x02f0:
            r0 = move-exception
            goto L_0x032f
        L_0x02f2:
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0318 }
            java.util.Locale r2 = java.util.Locale.US     // Catch:{ Exception -> 0x0318 }
            java.lang.String r3 = "DELETE FROM scheduled_messages_v2 WHERE mid = %d AND uid = %d"
            r4 = 2
            java.lang.Object[] r10 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x0318 }
            java.lang.Integer r4 = java.lang.Integer.valueOf(r12)     // Catch:{ Exception -> 0x0318 }
            r10[r6] = r4     // Catch:{ Exception -> 0x0318 }
            java.lang.Long r4 = java.lang.Long.valueOf(r7)     // Catch:{ Exception -> 0x0318 }
            r11 = 1
            r10[r11] = r4     // Catch:{ Exception -> 0x0318 }
            java.lang.String r2 = java.lang.String.format(r2, r3, r10)     // Catch:{ Exception -> 0x0318 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r2)     // Catch:{ Exception -> 0x0318 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0318 }
            r0.dispose()     // Catch:{ Exception -> 0x0318 }
            goto L_0x031c
        L_0x0318:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ all -> 0x02f0 }
        L_0x031c:
            if (r5 == 0) goto L_0x0321
        L_0x031e:
            r5.dispose()
        L_0x0321:
            r2 = 2
            long[] r0 = new long[r2]
            r0[r6] = r7
            int r2 = r9.intValue()
            long r2 = (long) r2
            r4 = 1
            r0[r4] = r2
            return r0
        L_0x032f:
            if (r5 == 0) goto L_0x0334
            r5.dispose()
        L_0x0334:
            throw r0
        L_0x0335:
            if (r8 == 0) goto L_0x033a
            r8.dispose()
        L_0x033a:
            throw r0
        L_0x033b:
            r0 = move-exception
        L_0x033c:
            if (r8 == 0) goto L_0x0341
            r8.dispose()
        L_0x0341:
            goto L_0x0343
        L_0x0342:
            throw r0
        L_0x0343:
            goto L_0x0342
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$updateMessageStateAndId$166(long, long, java.lang.Integer, int, int, int):long[]");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateMessageStateAndIdInternal$165(TLRPC$TL_updates tLRPC$TL_updates) {
        getMessagesController().processUpdates(tLRPC$TL_updates, false);
    }

    public long[] updateMessageStateAndId(long j, long j2, Integer num, int i, int i2, boolean z, int i3) {
        if (z) {
            this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda87(this, j, j2, num, i, i2, i3));
            return null;
        }
        return lambda$updateMessageStateAndId$166(j, j2, num, i, i2, i3);
    }

    /* access modifiers changed from: private */
    /* renamed from: updateUsersInternal */
    public void lambda$updateUsers$167(ArrayList<TLRPC$User> arrayList, boolean z, boolean z2) {
        if (z) {
            if (z2) {
                try {
                    this.database.beginTransaction();
                } catch (Exception e) {
                    FileLog.e((Throwable) e);
                    return;
                }
            }
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE users SET status = ? WHERE uid = ?");
            int size = arrayList.size();
            for (int i = 0; i < size; i++) {
                TLRPC$User tLRPC$User = arrayList.get(i);
                executeFast.requery();
                TLRPC$UserStatus tLRPC$UserStatus = tLRPC$User.status;
                if (tLRPC$UserStatus != null) {
                    executeFast.bindInteger(1, tLRPC$UserStatus.expires);
                } else {
                    executeFast.bindInteger(1, 0);
                }
                executeFast.bindLong(2, tLRPC$User.id);
                executeFast.step();
            }
            executeFast.dispose();
            if (z2) {
                this.database.commitTransaction();
                return;
            }
            return;
        }
        StringBuilder sb = new StringBuilder();
        LongSparseArray longSparseArray = new LongSparseArray();
        int size2 = arrayList.size();
        for (int i2 = 0; i2 < size2; i2++) {
            TLRPC$User tLRPC$User2 = arrayList.get(i2);
            if (sb.length() != 0) {
                sb.append(",");
            }
            sb.append(tLRPC$User2.id);
            longSparseArray.put(tLRPC$User2.id, tLRPC$User2);
        }
        ArrayList arrayList2 = new ArrayList();
        getUsersInternal(sb.toString(), arrayList2);
        int size3 = arrayList2.size();
        for (int i3 = 0; i3 < size3; i3++) {
            TLRPC$User tLRPC$User3 = (TLRPC$User) arrayList2.get(i3);
            TLRPC$User tLRPC$User4 = (TLRPC$User) longSparseArray.get(tLRPC$User3.id);
            if (tLRPC$User4 != null) {
                if (tLRPC$User4.first_name == null || tLRPC$User4.last_name == null) {
                    TLRPC$UserProfilePhoto tLRPC$UserProfilePhoto = tLRPC$User4.photo;
                    if (tLRPC$UserProfilePhoto != null) {
                        tLRPC$User3.photo = tLRPC$UserProfilePhoto;
                    } else {
                        String str = tLRPC$User4.phone;
                        if (str != null) {
                            tLRPC$User3.phone = str;
                        }
                    }
                } else {
                    if (!UserObject.isContact(tLRPC$User3)) {
                        tLRPC$User3.first_name = tLRPC$User4.first_name;
                        tLRPC$User3.last_name = tLRPC$User4.last_name;
                    }
                    tLRPC$User3.username = tLRPC$User4.username;
                }
            }
        }
        if (!arrayList2.isEmpty()) {
            if (z2) {
                this.database.beginTransaction();
            }
            putUsersInternal(arrayList2);
            if (z2) {
                this.database.commitTransaction();
            }
        }
    }

    public void updateUsers(ArrayList<TLRPC$User> arrayList, boolean z, boolean z2, boolean z3) {
        if (arrayList != null && !arrayList.isEmpty()) {
            if (z3) {
                this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda148(this, arrayList, z, z2));
            } else {
                lambda$updateUsers$167(arrayList, z, z2);
            }
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: markMessagesAsReadInternal */
    public void lambda$markMessagesAsRead$169(LongSparseIntArray longSparseIntArray, LongSparseIntArray longSparseIntArray2, SparseIntArray sparseIntArray) {
        LongSparseIntArray longSparseIntArray3 = longSparseIntArray;
        LongSparseIntArray longSparseIntArray4 = longSparseIntArray2;
        SparseIntArray sparseIntArray2 = sparseIntArray;
        try {
            if (!isEmpty(longSparseIntArray)) {
                SQLitePreparedStatement executeFast = this.database.executeFast("DELETE FROM unread_push_messages WHERE uid = ? AND mid <= ?");
                for (int i = 0; i < longSparseIntArray.size(); i++) {
                    long keyAt = longSparseIntArray3.keyAt(i);
                    int i2 = longSparseIntArray3.get(keyAt);
                    this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET read_state = read_state | 1 WHERE uid = %d AND mid > 0 AND mid <= %d AND read_state IN(0,2) AND out = 0", new Object[]{Long.valueOf(keyAt), Integer.valueOf(i2)})).stepThis().dispose();
                    executeFast.requery();
                    executeFast.bindLong(1, keyAt);
                    executeFast.bindInteger(2, i2);
                    executeFast.step();
                }
                executeFast.dispose();
            }
            if (!isEmpty(longSparseIntArray2)) {
                for (int i3 = 0; i3 < longSparseIntArray2.size(); i3++) {
                    long keyAt2 = longSparseIntArray4.keyAt(i3);
                    int i4 = longSparseIntArray4.get(keyAt2);
                    this.database.executeFast(String.format(Locale.US, "UPDATE messages_v2 SET read_state = read_state | 1 WHERE uid = %d AND mid > 0 AND mid <= %d AND read_state IN(0,2) AND out = 1", new Object[]{Long.valueOf(keyAt2), Integer.valueOf(i4)})).stepThis().dispose();
                }
            }
            if (sparseIntArray2 != null && !isEmpty(sparseIntArray)) {
                for (int i5 = 0; i5 < sparseIntArray.size(); i5++) {
                    long makeEncryptedDialogId = DialogObject.makeEncryptedDialogId((long) sparseIntArray2.keyAt(i5));
                    int valueAt = sparseIntArray2.valueAt(i5);
                    SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE messages_v2 SET read_state = read_state | 1 WHERE uid = ? AND date <= ? AND read_state IN(0,2) AND out = 1");
                    executeFast2.requery();
                    executeFast2.bindLong(1, makeEncryptedDialogId);
                    executeFast2.bindInteger(2, valueAt);
                    executeFast2.step();
                    executeFast2.dispose();
                }
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    private void markMessagesContentAsReadInternal(long j, ArrayList<Integer> arrayList, int i) {
        try {
            String join = TextUtils.join(",", arrayList);
            SQLiteDatabase sQLiteDatabase = this.database;
            Locale locale = Locale.US;
            sQLiteDatabase.executeFast(String.format(locale, "UPDATE messages_v2 SET read_state = read_state | 2 WHERE mid IN (%s) AND uid = %d", new Object[]{join, Long.valueOf(j)})).stepThis().dispose();
            if (i != 0) {
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(locale, "SELECT mid, ttl FROM messages_v2 WHERE mid IN (%s) AND uid = %d AND ttl > 0", new Object[]{join, Long.valueOf(j)}), new Object[0]);
                ArrayList arrayList2 = null;
                while (queryFinalized.next()) {
                    if (arrayList2 == null) {
                        arrayList2 = new ArrayList();
                    }
                    arrayList2.add(Integer.valueOf(queryFinalized.intValue(0)));
                }
                if (arrayList2 != null) {
                    emptyMessagesMedia(j, arrayList2);
                }
                queryFinalized.dispose();
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void markMessagesContentAsRead(long j, ArrayList<Integer> arrayList, int i) {
        if (!isEmpty((List<?>) arrayList)) {
            this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda96(this, j, arrayList, i));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessagesContentAsRead$168(long j, ArrayList arrayList, int i) {
        if (j == 0) {
            try {
                LongSparseArray longSparseArray = new LongSparseArray();
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, mid FROM messages_v2 WHERE mid IN (%s) AND is_channel = 0", new Object[]{TextUtils.join(",", arrayList)}), new Object[0]);
                while (queryFinalized.next()) {
                    long longValue = queryFinalized.longValue(0);
                    ArrayList arrayList2 = (ArrayList) longSparseArray.get(longValue);
                    if (arrayList2 == null) {
                        arrayList2 = new ArrayList();
                        longSparseArray.put(longValue, arrayList2);
                    }
                    arrayList2.add(Integer.valueOf(queryFinalized.intValue(1)));
                }
                queryFinalized.dispose();
                int size = longSparseArray.size();
                for (int i2 = 0; i2 < size; i2++) {
                    markMessagesContentAsReadInternal(longSparseArray.keyAt(i2), (ArrayList) longSparseArray.valueAt(i2), i);
                }
            } catch (Exception e) {
                FileLog.e((Throwable) e);
            }
        } else {
            markMessagesContentAsReadInternal(j, arrayList, i);
        }
    }

    public void markMessagesAsRead(LongSparseIntArray longSparseIntArray, LongSparseIntArray longSparseIntArray2, SparseIntArray sparseIntArray, boolean z) {
        if (z) {
            this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda159(this, longSparseIntArray, longSparseIntArray2, sparseIntArray));
        } else {
            lambda$markMessagesAsRead$169(longSparseIntArray, longSparseIntArray2, sparseIntArray);
        }
    }

    public void markMessagesAsDeletedByRandoms(ArrayList<Long> arrayList) {
        if (!arrayList.isEmpty()) {
            this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda133(this, arrayList));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessagesAsDeletedByRandoms$171(ArrayList arrayList) {
        try {
            String join = TextUtils.join(",", arrayList);
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT mid, uid FROM randoms_v2 WHERE random_id IN(%s)", new Object[]{join}), new Object[0]);
            LongSparseArray longSparseArray = new LongSparseArray();
            while (queryFinalized.next()) {
                long longValue = queryFinalized.longValue(1);
                ArrayList arrayList2 = (ArrayList) longSparseArray.get(longValue);
                if (arrayList2 == null) {
                    arrayList2 = new ArrayList();
                    longSparseArray.put(longValue, arrayList2);
                }
                arrayList2.add(Integer.valueOf(queryFinalized.intValue(0)));
            }
            queryFinalized.dispose();
            if (!longSparseArray.isEmpty()) {
                int size = longSparseArray.size();
                for (int i = 0; i < size; i++) {
                    long keyAt = longSparseArray.keyAt(i);
                    ArrayList arrayList3 = (ArrayList) longSparseArray.valueAt(i);
                    AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda137(this, arrayList3));
                    updateDialogsWithReadMessagesInternal(arrayList3, (LongSparseIntArray) null, (LongSparseIntArray) null, (LongSparseArray<ArrayList<Integer>>) null);
                    lambda$markMessagesAsDeleted$175(keyAt, arrayList3, true, false);
                    lambda$updateDialogsWithDeletedMessages$174(keyAt, 0, arrayList3, (ArrayList<Long>) null);
                }
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessagesAsDeletedByRandoms$170(ArrayList arrayList) {
        getNotificationCenter().postNotificationName(NotificationCenter.messagesDeleted, arrayList, 0L, Boolean.FALSE);
    }

    /* access modifiers changed from: protected */
    public void deletePushMessages(long j, ArrayList<Integer> arrayList) {
        try {
            this.database.executeFast(String.format(Locale.US, "DELETE FROM unread_push_messages WHERE uid = %d AND mid IN(%s)", new Object[]{Long.valueOf(j), TextUtils.join(",", arrayList)})).stepThis().dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    private void broadcastScheduledMessagesChange(Long l) {
        try {
            int i = 0;
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(mid) FROM scheduled_messages_v2 WHERE uid = %d", new Object[]{l}), new Object[0]);
            if (queryFinalized.next()) {
                i = queryFinalized.intValue(0);
            }
            queryFinalized.dispose();
            AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda122(this, l, i));
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$broadcastScheduledMessagesChange$172(Long l, int i) {
        getNotificationCenter().postNotificationName(NotificationCenter.scheduledMessagesUpdated, l, Integer.valueOf(i));
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v24, resolved type: java.lang.Object} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v9, resolved type: java.lang.Integer} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v23, resolved type: java.lang.Object[]} */
    /* access modifiers changed from: private */
    /* JADX WARNING: Multi-variable type inference failed */
    /* JADX WARNING: Removed duplicated region for block: B:149:0x0633 A[Catch:{ Exception -> 0x0683 }] */
    /* JADX WARNING: Removed duplicated region for block: B:156:0x067a A[Catch:{ Exception -> 0x0683 }] */
    /* JADX WARNING: Removed duplicated region for block: B:70:0x0216 A[Catch:{ Exception -> 0x0685 }] */
    /* JADX WARNING: Removed duplicated region for block: B:89:0x02b9 A[Catch:{ Exception -> 0x0683 }] */
    /* JADX WARNING: Removed duplicated region for block: B:96:0x0340 A[Catch:{ Exception -> 0x0683 }] */
    /* renamed from: markMessagesAsDeletedInternal */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public java.util.ArrayList<java.lang.Long> lambda$markMessagesAsDeleted$175(long r30, java.util.ArrayList<java.lang.Integer> r32, boolean r33, boolean r34) {
        /*
            r29 = this;
            r7 = r29
            r8 = r30
            r10 = r32
            java.util.ArrayList r12 = new java.util.ArrayList     // Catch:{ Exception -> 0x0689 }
            r12.<init>()     // Catch:{ Exception -> 0x0689 }
            java.lang.String r13 = ","
            r14 = 2
            r15 = 1
            r6 = 0
            if (r34 == 0) goto L_0x008d
            java.lang.String r1 = android.text.TextUtils.join(r13, r10)     // Catch:{ Exception -> 0x0689 }
            java.util.ArrayList r2 = new java.util.ArrayList     // Catch:{ Exception -> 0x0689 }
            r2.<init>()     // Catch:{ Exception -> 0x0689 }
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x0689 }
            java.util.Locale r3 = java.util.Locale.US     // Catch:{ Exception -> 0x0689 }
            java.lang.String r4 = "SELECT uid FROM scheduled_messages_v2 WHERE mid IN(%s) AND uid = %d"
            java.lang.Object[] r5 = new java.lang.Object[r14]     // Catch:{ Exception -> 0x0689 }
            r5[r6] = r1     // Catch:{ Exception -> 0x0689 }
            java.lang.Long r10 = java.lang.Long.valueOf(r30)     // Catch:{ Exception -> 0x0689 }
            r5[r15] = r10     // Catch:{ Exception -> 0x0689 }
            java.lang.String r3 = java.lang.String.format(r3, r4, r5)     // Catch:{ Exception -> 0x0689 }
            java.lang.Object[] r4 = new java.lang.Object[r6]     // Catch:{ Exception -> 0x0689 }
            org.telegram.SQLite.SQLiteCursor r3 = r0.queryFinalized(r3, r4)     // Catch:{ Exception -> 0x0689 }
        L_0x0035:
            boolean r0 = r3.next()     // Catch:{ Exception -> 0x0051 }
            if (r0 == 0) goto L_0x0055
            long r4 = r3.longValue(r6)     // Catch:{ Exception -> 0x0051 }
            java.lang.Long r0 = java.lang.Long.valueOf(r4)     // Catch:{ Exception -> 0x0051 }
            boolean r0 = r2.contains(r0)     // Catch:{ Exception -> 0x0051 }
            if (r0 != 0) goto L_0x0035
            java.lang.Long r0 = java.lang.Long.valueOf(r4)     // Catch:{ Exception -> 0x0051 }
            r2.add(r0)     // Catch:{ Exception -> 0x0051 }
            goto L_0x0035
        L_0x0051:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ Exception -> 0x0689 }
        L_0x0055:
            r3.dispose()     // Catch:{ Exception -> 0x0689 }
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x0689 }
            java.util.Locale r3 = java.util.Locale.US     // Catch:{ Exception -> 0x0689 }
            java.lang.String r4 = "DELETE FROM scheduled_messages_v2 WHERE mid IN(%s) AND uid = %d"
            java.lang.Object[] r5 = new java.lang.Object[r14]     // Catch:{ Exception -> 0x0689 }
            r5[r6] = r1     // Catch:{ Exception -> 0x0689 }
            java.lang.Long r1 = java.lang.Long.valueOf(r30)     // Catch:{ Exception -> 0x0689 }
            r5[r15] = r1     // Catch:{ Exception -> 0x0689 }
            java.lang.String r1 = java.lang.String.format(r3, r4, r5)     // Catch:{ Exception -> 0x0689 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r1)     // Catch:{ Exception -> 0x0689 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0689 }
            r0.dispose()     // Catch:{ Exception -> 0x0689 }
            int r0 = r2.size()     // Catch:{ Exception -> 0x0689 }
        L_0x007b:
            if (r6 >= r0) goto L_0x0089
            java.lang.Object r1 = r2.get(r6)     // Catch:{ Exception -> 0x0689 }
            java.lang.Long r1 = (java.lang.Long) r1     // Catch:{ Exception -> 0x0689 }
            r7.broadcastScheduledMessagesChange(r1)     // Catch:{ Exception -> 0x0689 }
            int r6 = r6 + 1
            goto L_0x007b
        L_0x0089:
            r1 = r7
            r2 = r12
            goto L_0x0682
        L_0x008d:
            java.util.ArrayList r5 = new java.util.ArrayList     // Catch:{ Exception -> 0x0689 }
            r5.<init>(r10)     // Catch:{ Exception -> 0x0689 }
            androidx.collection.LongSparseArray r4 = new androidx.collection.LongSparseArray     // Catch:{ Exception -> 0x0689 }
            r4.<init>()     // Catch:{ Exception -> 0x0689 }
            androidx.collection.LongSparseArray r3 = new androidx.collection.LongSparseArray     // Catch:{ Exception -> 0x0689 }
            r3.<init>()     // Catch:{ Exception -> 0x0689 }
            java.lang.String r2 = android.text.TextUtils.join(r13, r10)     // Catch:{ Exception -> 0x0689 }
            java.util.ArrayList r1 = new java.util.ArrayList     // Catch:{ Exception -> 0x0689 }
            r1.<init>()     // Catch:{ Exception -> 0x0689 }
            java.util.ArrayList r11 = new java.util.ArrayList     // Catch:{ Exception -> 0x0689 }
            r11.<init>()     // Catch:{ Exception -> 0x0689 }
            java.util.ArrayList r15 = new java.util.ArrayList     // Catch:{ Exception -> 0x0689 }
            r15.<init>()     // Catch:{ Exception -> 0x0689 }
            org.telegram.messenger.UserConfig r0 = r29.getUserConfig()     // Catch:{ Exception -> 0x0689 }
            long r17 = r0.getClientUserId()     // Catch:{ Exception -> 0x0689 }
            r34 = r15
            r14 = 0
            int r0 = (r8 > r14 ? 1 : (r8 == r14 ? 0 : -1))
            if (r0 == 0) goto L_0x00e2
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x0689 }
            java.util.Locale r14 = java.util.Locale.US     // Catch:{ Exception -> 0x0689 }
            java.lang.String r15 = "SELECT uid, data, read_state, out, mention, mid FROM messages_v2 WHERE mid IN(%s) AND uid = %d"
            r20 = r1
            r6 = 2
            java.lang.Object[] r1 = new java.lang.Object[r6]     // Catch:{ Exception -> 0x0689 }
            r6 = 0
            r1[r6] = r2     // Catch:{ Exception -> 0x0689 }
            java.lang.Long r19 = java.lang.Long.valueOf(r30)     // Catch:{ Exception -> 0x0689 }
            r16 = 1
            r1[r16] = r19     // Catch:{ Exception -> 0x0689 }
            java.lang.String r1 = java.lang.String.format(r14, r15, r1)     // Catch:{ Exception -> 0x0689 }
            java.lang.Object[] r14 = new java.lang.Object[r6]     // Catch:{ Exception -> 0x0689 }
            org.telegram.SQLite.SQLiteCursor r0 = r0.queryFinalized(r1, r14)     // Catch:{ Exception -> 0x0689 }
            r15 = r0
            r14 = 0
            goto L_0x00fb
        L_0x00e2:
            r20 = r1
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x0689 }
            java.util.Locale r1 = java.util.Locale.US     // Catch:{ Exception -> 0x0689 }
            java.lang.String r6 = "SELECT uid, data, read_state, out, mention, mid FROM messages_v2 WHERE mid IN(%s) AND is_channel = 0"
            r14 = 1
            java.lang.Object[] r15 = new java.lang.Object[r14]     // Catch:{ Exception -> 0x0689 }
            r14 = 0
            r15[r14] = r2     // Catch:{ Exception -> 0x0689 }
            java.lang.String r1 = java.lang.String.format(r1, r6, r15)     // Catch:{ Exception -> 0x0689 }
            java.lang.Object[] r6 = new java.lang.Object[r14]     // Catch:{ Exception -> 0x0689 }
            org.telegram.SQLite.SQLiteCursor r0 = r0.queryFinalized(r1, r6)     // Catch:{ Exception -> 0x0689 }
            r15 = r0
        L_0x00fb:
            boolean r0 = r15.next()     // Catch:{ Exception -> 0x01f6 }
            if (r0 == 0) goto L_0x01eb
            long r0 = r15.longValue(r14)     // Catch:{ Exception -> 0x01f6 }
            r14 = 5
            int r14 = r15.intValue(r14)     // Catch:{ Exception -> 0x01f6 }
            java.lang.Integer r6 = java.lang.Integer.valueOf(r14)     // Catch:{ Exception -> 0x01f6 }
            r5.remove(r6)     // Catch:{ Exception -> 0x01f6 }
            java.lang.Object r6 = r3.get(r0)     // Catch:{ Exception -> 0x01f6 }
            java.util.ArrayList r6 = (java.util.ArrayList) r6     // Catch:{ Exception -> 0x01f6 }
            if (r6 != 0) goto L_0x0121
            java.util.ArrayList r6 = new java.util.ArrayList     // Catch:{ Exception -> 0x01f6 }
            r6.<init>()     // Catch:{ Exception -> 0x01f6 }
            r3.put(r0, r6)     // Catch:{ Exception -> 0x01f6 }
        L_0x0121:
            java.lang.Integer r14 = java.lang.Integer.valueOf(r14)     // Catch:{ Exception -> 0x01f6 }
            r6.add(r14)     // Catch:{ Exception -> 0x01f6 }
            int r6 = (r0 > r17 ? 1 : (r0 == r17 ? 0 : -1))
            if (r6 == 0) goto L_0x0185
            r6 = 2
            int r14 = r15.intValue(r6)     // Catch:{ Exception -> 0x01f6 }
            r6 = 3
            int r21 = r15.intValue(r6)     // Catch:{ Exception -> 0x01f6 }
            if (r21 != 0) goto L_0x0185
            java.lang.Object r21 = r4.get(r0)     // Catch:{ Exception -> 0x01f6 }
            java.lang.Integer[] r21 = (java.lang.Integer[]) r21     // Catch:{ Exception -> 0x01f6 }
            if (r21 != 0) goto L_0x0159
            r23 = r2
            r6 = 2
            java.lang.Integer[] r2 = new java.lang.Integer[r6]     // Catch:{ Exception -> 0x01de }
            r6 = 0
            java.lang.Integer r19 = java.lang.Integer.valueOf(r6)     // Catch:{ Exception -> 0x01de }
            r2[r6] = r19     // Catch:{ Exception -> 0x01de }
            java.lang.Integer r21 = java.lang.Integer.valueOf(r6)     // Catch:{ Exception -> 0x01de }
            r6 = 1
            r2[r6] = r21     // Catch:{ Exception -> 0x01de }
            r4.put(r0, r2)     // Catch:{ Exception -> 0x01de }
            r21 = r2
            goto L_0x015b
        L_0x0159:
            r23 = r2
        L_0x015b:
            r2 = 2
            if (r14 >= r2) goto L_0x016e
            r2 = 1
            r6 = r21[r2]     // Catch:{ Exception -> 0x01de }
            r6 = r21[r2]     // Catch:{ Exception -> 0x01de }
            int r6 = r6.intValue()     // Catch:{ Exception -> 0x01de }
            int r6 = r6 + r2
            java.lang.Integer r6 = java.lang.Integer.valueOf(r6)     // Catch:{ Exception -> 0x01de }
            r21[r2] = r6     // Catch:{ Exception -> 0x01de }
        L_0x016e:
            if (r14 == 0) goto L_0x0173
            r2 = 2
            if (r14 != r2) goto L_0x0187
        L_0x0173:
            r2 = 0
            r6 = r21[r2]     // Catch:{ Exception -> 0x01de }
            r6 = r21[r2]     // Catch:{ Exception -> 0x01de }
            int r6 = r6.intValue()     // Catch:{ Exception -> 0x01de }
            r14 = 1
            int r6 = r6 + r14
            java.lang.Integer r6 = java.lang.Integer.valueOf(r6)     // Catch:{ Exception -> 0x01de }
            r21[r2] = r6     // Catch:{ Exception -> 0x01de }
            goto L_0x0187
        L_0x0185:
            r23 = r2
        L_0x0187:
            boolean r0 = org.telegram.messenger.DialogObject.isEncryptedDialog(r0)     // Catch:{ Exception -> 0x01de }
            if (r0 != 0) goto L_0x019a
            if (r33 != 0) goto L_0x019a
        L_0x018f:
            r21 = r4
            r7 = r20
            r14 = r23
            r20 = r3
            r23 = r5
            goto L_0x01ce
        L_0x019a:
            r1 = 1
            org.telegram.tgnet.NativeByteBuffer r0 = r15.byteBufferValue(r1)     // Catch:{ Exception -> 0x01de }
            if (r0 == 0) goto L_0x018f
            r6 = 0
            int r1 = r0.readInt32(r6)     // Catch:{ Exception -> 0x01de }
            org.telegram.tgnet.TLRPC$Message r2 = org.telegram.tgnet.TLRPC$Message.TLdeserialize(r0, r1, r6)     // Catch:{ Exception -> 0x01de }
            org.telegram.messenger.UserConfig r1 = r29.getUserConfig()     // Catch:{ Exception -> 0x01de }
            long r6 = r1.clientUserId     // Catch:{ Exception -> 0x01de }
            r2.readAttachPath(r0, r6)     // Catch:{ Exception -> 0x01de }
            r0.reuse()     // Catch:{ Exception -> 0x01de }
            r6 = 0
            r7 = r20
            r1 = r29
            r14 = r23
            r20 = r3
            r3 = r7
            r21 = r4
            r4 = r34
            r23 = r5
            r5 = r11
            r10 = 3
            r1.addFilesToDelete(r2, r3, r4, r5, r6)     // Catch:{ Exception -> 0x01cc }
            goto L_0x01ce
        L_0x01cc:
            r0 = move-exception
            goto L_0x0201
        L_0x01ce:
            r10 = r32
            r2 = r14
            r3 = r20
            r4 = r21
            r5 = r23
            r14 = 0
            r20 = r7
            r7 = r29
            goto L_0x00fb
        L_0x01de:
            r0 = move-exception
            r21 = r4
            r7 = r20
            r14 = r23
            r10 = 3
            r20 = r3
            r23 = r5
            goto L_0x0201
        L_0x01eb:
            r14 = r2
            r21 = r4
            r23 = r5
            r7 = r20
            r10 = 3
            r20 = r3
            goto L_0x0204
        L_0x01f6:
            r0 = move-exception
            r14 = r2
            r21 = r4
            r23 = r5
            r7 = r20
            r10 = 3
            r20 = r3
        L_0x0201:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ Exception -> 0x0685 }
        L_0x0204:
            r15.dispose()     // Catch:{ Exception -> 0x0685 }
            org.telegram.messenger.MessagesStorage r0 = r29.getMessagesStorage()     // Catch:{ Exception -> 0x0685 }
            org.telegram.SQLite.SQLiteDatabase r0 = r0.getDatabase()     // Catch:{ Exception -> 0x0685 }
            r0.beginTransaction()     // Catch:{ Exception -> 0x0685 }
            r1 = 2
            r6 = 0
        L_0x0214:
            if (r6 >= r1) goto L_0x029a
            if (r6 != 0) goto L_0x023c
            r1 = 0
            int r0 = (r8 > r1 ? 1 : (r8 == r1 ? 0 : -1))
            if (r0 == 0) goto L_0x022d
            org.telegram.messenger.MessagesStorage r0 = r29.getMessagesStorage()     // Catch:{ Exception -> 0x0685 }
            org.telegram.SQLite.SQLiteDatabase r0 = r0.getDatabase()     // Catch:{ Exception -> 0x0685 }
            java.lang.String r1 = "UPDATE messages_v2 SET replydata = ? WHERE reply_to_message_id IN(?) AND uid = ?"
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r1)     // Catch:{ Exception -> 0x0685 }
            goto L_0x025f
        L_0x022d:
            org.telegram.messenger.MessagesStorage r0 = r29.getMessagesStorage()     // Catch:{ Exception -> 0x0685 }
            org.telegram.SQLite.SQLiteDatabase r0 = r0.getDatabase()     // Catch:{ Exception -> 0x0685 }
            java.lang.String r1 = "UPDATE messages_v2 SET replydata = ? WHERE reply_to_message_id IN(?) AND is_channel = 0"
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r1)     // Catch:{ Exception -> 0x0685 }
            goto L_0x025f
        L_0x023c:
            r1 = 0
            int r0 = (r8 > r1 ? 1 : (r8 == r1 ? 0 : -1))
            if (r0 == 0) goto L_0x0251
            org.telegram.messenger.MessagesStorage r0 = r29.getMessagesStorage()     // Catch:{ Exception -> 0x0685 }
            org.telegram.SQLite.SQLiteDatabase r0 = r0.getDatabase()     // Catch:{ Exception -> 0x0685 }
            java.lang.String r1 = "UPDATE scheduled_messages_v2 SET replydata = ? WHERE reply_to_message_id IN(?) AND uid = ?"
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r1)     // Catch:{ Exception -> 0x0685 }
            goto L_0x025f
        L_0x0251:
            org.telegram.messenger.MessagesStorage r0 = r29.getMessagesStorage()     // Catch:{ Exception -> 0x0685 }
            org.telegram.SQLite.SQLiteDatabase r0 = r0.getDatabase()     // Catch:{ Exception -> 0x0685 }
            java.lang.String r1 = "UPDATE scheduled_messages_v2 SET replydata = ? WHERE reply_to_message_id IN(?)"
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r1)     // Catch:{ Exception -> 0x0685 }
        L_0x025f:
            org.telegram.tgnet.TLRPC$TL_messageEmpty r1 = new org.telegram.tgnet.TLRPC$TL_messageEmpty     // Catch:{ Exception -> 0x0685 }
            r1.<init>()     // Catch:{ Exception -> 0x0685 }
            org.telegram.tgnet.NativeByteBuffer r2 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x0685 }
            int r3 = r1.getObjectSize()     // Catch:{ Exception -> 0x0685 }
            r2.<init>((int) r3)     // Catch:{ Exception -> 0x0685 }
            r1.serializeToStream(r2)     // Catch:{ Exception -> 0x0685 }
            r0.requery()     // Catch:{ Exception -> 0x0685 }
            r1 = 1
            r0.bindByteBuffer((int) r1, (org.telegram.tgnet.NativeByteBuffer) r2)     // Catch:{ Exception -> 0x0685 }
            r1 = 2
            r0.bindString(r1, r14)     // Catch:{ Exception -> 0x0685 }
            r1 = 0
            int r3 = (r8 > r1 ? 1 : (r8 == r1 ? 0 : -1))
            if (r3 == 0) goto L_0x0284
            r0.bindLong(r10, r8)     // Catch:{ Exception -> 0x0685 }
        L_0x0284:
            r0.step()     // Catch:{ Exception -> 0x0685 }
            r0.dispose()     // Catch:{ Exception -> 0x0685 }
            org.telegram.messenger.MessagesStorage r0 = r29.getMessagesStorage()     // Catch:{ Exception -> 0x0685 }
            org.telegram.SQLite.SQLiteDatabase r0 = r0.getDatabase()     // Catch:{ Exception -> 0x0685 }
            r0.commitTransaction()     // Catch:{ Exception -> 0x0685 }
            int r6 = r6 + 1
            r1 = 2
            goto L_0x0214
        L_0x029a:
            r3 = 1
            r1 = r29
            r2 = r34
            r1.deleteFromDownloadQueue(r2, r3)     // Catch:{ Exception -> 0x0683 }
            org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda131 r0 = new org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda131     // Catch:{ Exception -> 0x0683 }
            r0.<init>(r1, r11)     // Catch:{ Exception -> 0x0683 }
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r0)     // Catch:{ Exception -> 0x0683 }
            org.telegram.messenger.FileLoader r0 = r29.getFileLoader()     // Catch:{ Exception -> 0x0683 }
            r2 = 0
            r0.deleteFiles(r7, r2)     // Catch:{ Exception -> 0x0683 }
            r6 = 0
        L_0x02b3:
            int r0 = r21.size()     // Catch:{ Exception -> 0x0683 }
            if (r6 >= r0) goto L_0x0337
            r2 = r21
            long r3 = r2.keyAt(r6)     // Catch:{ Exception -> 0x0683 }
            java.lang.Object r0 = r2.valueAt(r6)     // Catch:{ Exception -> 0x0683 }
            java.lang.Integer[] r0 = (java.lang.Integer[]) r0     // Catch:{ Exception -> 0x0683 }
            org.telegram.SQLite.SQLiteDatabase r5 = r1.database     // Catch:{ Exception -> 0x0683 }
            java.lang.StringBuilder r7 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0683 }
            r7.<init>()     // Catch:{ Exception -> 0x0683 }
            java.lang.String r11 = "SELECT unread_count, unread_count_i FROM dialogs WHERE did = "
            r7.append(r11)     // Catch:{ Exception -> 0x0683 }
            r7.append(r3)     // Catch:{ Exception -> 0x0683 }
            java.lang.String r7 = r7.toString()     // Catch:{ Exception -> 0x0683 }
            r11 = 0
            java.lang.Object[] r15 = new java.lang.Object[r11]     // Catch:{ Exception -> 0x0683 }
            org.telegram.SQLite.SQLiteCursor r5 = r5.queryFinalized(r7, r15)     // Catch:{ Exception -> 0x0683 }
            boolean r7 = r5.next()     // Catch:{ Exception -> 0x0683 }
            if (r7 == 0) goto L_0x02ef
            int r7 = r5.intValue(r11)     // Catch:{ Exception -> 0x0683 }
            r11 = 1
            int r15 = r5.intValue(r11)     // Catch:{ Exception -> 0x0683 }
            goto L_0x02f1
        L_0x02ef:
            r7 = 0
            r15 = 0
        L_0x02f1:
            r5.dispose()     // Catch:{ Exception -> 0x0683 }
            java.lang.Long r5 = java.lang.Long.valueOf(r3)     // Catch:{ Exception -> 0x0683 }
            r12.add(r5)     // Catch:{ Exception -> 0x0683 }
            org.telegram.SQLite.SQLiteDatabase r5 = r1.database     // Catch:{ Exception -> 0x0683 }
            java.lang.String r11 = "UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?"
            org.telegram.SQLite.SQLitePreparedStatement r5 = r5.executeFast(r11)     // Catch:{ Exception -> 0x0683 }
            r5.requery()     // Catch:{ Exception -> 0x0683 }
            r11 = 0
            r17 = r0[r11]     // Catch:{ Exception -> 0x0683 }
            int r17 = r17.intValue()     // Catch:{ Exception -> 0x0683 }
            int r7 = r7 - r17
            int r7 = java.lang.Math.max(r11, r7)     // Catch:{ Exception -> 0x0683 }
            r10 = 1
            r5.bindInteger(r10, r7)     // Catch:{ Exception -> 0x0683 }
            r0 = r0[r10]     // Catch:{ Exception -> 0x0683 }
            int r0 = r0.intValue()     // Catch:{ Exception -> 0x0683 }
            int r15 = r15 - r0
            int r0 = java.lang.Math.max(r11, r15)     // Catch:{ Exception -> 0x0683 }
            r7 = 2
            r5.bindInteger(r7, r0)     // Catch:{ Exception -> 0x0683 }
            r7 = 3
            r5.bindLong(r7, r3)     // Catch:{ Exception -> 0x0683 }
            r5.step()     // Catch:{ Exception -> 0x0683 }
            r5.dispose()     // Catch:{ Exception -> 0x0683 }
            int r6 = r6 + 1
            r21 = r2
            r10 = 3
            goto L_0x02b3
        L_0x0337:
            r2 = r21
            int r0 = r20.size()     // Catch:{ Exception -> 0x0683 }
            r6 = 0
        L_0x033e:
            if (r6 >= r0) goto L_0x060e
            r3 = r20
            long r4 = r3.keyAt(r6)     // Catch:{ Exception -> 0x0683 }
            java.lang.Object r7 = r3.valueAt(r6)     // Catch:{ Exception -> 0x0683 }
            java.util.ArrayList r7 = (java.util.ArrayList) r7     // Catch:{ Exception -> 0x0683 }
            java.lang.String r7 = android.text.TextUtils.join(r13, r7)     // Catch:{ Exception -> 0x0683 }
            boolean r10 = org.telegram.messenger.DialogObject.isEncryptedDialog(r4)     // Catch:{ Exception -> 0x0683 }
            if (r10 != 0) goto L_0x03b1
            boolean r10 = org.telegram.messenger.DialogObject.isChatDialog(r4)     // Catch:{ Exception -> 0x0683 }
            if (r10 == 0) goto L_0x0387
            org.telegram.SQLite.SQLiteDatabase r10 = r1.database     // Catch:{ Exception -> 0x0683 }
            java.util.Locale r11 = java.util.Locale.US     // Catch:{ Exception -> 0x0683 }
            java.lang.String r15 = "UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned IN (%s)"
            r33 = r0
            r20 = r3
            r3 = 2
            java.lang.Object[] r0 = new java.lang.Object[r3]     // Catch:{ Exception -> 0x0683 }
            r3 = r12
            r17 = r13
            long r12 = -r4
            java.lang.Long r12 = java.lang.Long.valueOf(r12)     // Catch:{ Exception -> 0x0683 }
            r13 = 0
            r0[r13] = r12     // Catch:{ Exception -> 0x0683 }
            r12 = 1
            r0[r12] = r7     // Catch:{ Exception -> 0x0683 }
            java.lang.String r0 = java.lang.String.format(r11, r15, r0)     // Catch:{ Exception -> 0x0683 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r10.executeFast(r0)     // Catch:{ Exception -> 0x0683 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0683 }
            r0.dispose()     // Catch:{ Exception -> 0x0683 }
            goto L_0x03b8
        L_0x0387:
            r33 = r0
            r20 = r3
            r3 = r12
            r17 = r13
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0683 }
            java.util.Locale r10 = java.util.Locale.US     // Catch:{ Exception -> 0x0683 }
            java.lang.String r11 = "UPDATE user_settings SET pinned = 0 WHERE uid = %d AND pinned IN (%s)"
            r12 = 2
            java.lang.Object[] r13 = new java.lang.Object[r12]     // Catch:{ Exception -> 0x0683 }
            java.lang.Long r12 = java.lang.Long.valueOf(r4)     // Catch:{ Exception -> 0x0683 }
            r15 = 0
            r13[r15] = r12     // Catch:{ Exception -> 0x0683 }
            r12 = 1
            r13[r12] = r7     // Catch:{ Exception -> 0x0683 }
            java.lang.String r10 = java.lang.String.format(r10, r11, r13)     // Catch:{ Exception -> 0x0683 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r10)     // Catch:{ Exception -> 0x0683 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0683 }
            r0.dispose()     // Catch:{ Exception -> 0x0683 }
            goto L_0x03b8
        L_0x03b1:
            r33 = r0
            r20 = r3
            r3 = r12
            r17 = r13
        L_0x03b8:
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0683 }
            java.util.Locale r10 = java.util.Locale.US     // Catch:{ Exception -> 0x0683 }
            java.lang.String r11 = "DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid IN(%s)"
            r12 = 2
            java.lang.Object[] r13 = new java.lang.Object[r12]     // Catch:{ Exception -> 0x0683 }
            java.lang.Long r12 = java.lang.Long.valueOf(r4)     // Catch:{ Exception -> 0x0683 }
            r15 = 0
            r13[r15] = r12     // Catch:{ Exception -> 0x0683 }
            r12 = 1
            r13[r12] = r7     // Catch:{ Exception -> 0x0683 }
            java.lang.String r7 = java.lang.String.format(r10, r11, r13)     // Catch:{ Exception -> 0x0683 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r7)     // Catch:{ Exception -> 0x0683 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0683 }
            r0.dispose()     // Catch:{ Exception -> 0x0683 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0683 }
            java.lang.String r7 = "SELECT changes()"
            r11 = 0
            java.lang.Object[] r12 = new java.lang.Object[r11]     // Catch:{ Exception -> 0x0683 }
            org.telegram.SQLite.SQLiteCursor r0 = r0.queryFinalized(r7, r12)     // Catch:{ Exception -> 0x0683 }
            boolean r7 = r0.next()     // Catch:{ Exception -> 0x0683 }
            if (r7 == 0) goto L_0x03f0
            int r7 = r0.intValue(r11)     // Catch:{ Exception -> 0x0683 }
            goto L_0x03f1
        L_0x03f0:
            r7 = 0
        L_0x03f1:
            r0.dispose()     // Catch:{ Exception -> 0x0683 }
            if (r7 <= 0) goto L_0x043a
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0683 }
            java.lang.String r11 = "SELECT count FROM chat_pinned_count WHERE uid = %d"
            r12 = 1
            java.lang.Object[] r13 = new java.lang.Object[r12]     // Catch:{ Exception -> 0x0683 }
            java.lang.Long r12 = java.lang.Long.valueOf(r4)     // Catch:{ Exception -> 0x0683 }
            r15 = 0
            r13[r15] = r12     // Catch:{ Exception -> 0x0683 }
            java.lang.String r11 = java.lang.String.format(r10, r11, r13)     // Catch:{ Exception -> 0x0683 }
            java.lang.Object[] r12 = new java.lang.Object[r15]     // Catch:{ Exception -> 0x0683 }
            org.telegram.SQLite.SQLiteCursor r0 = r0.queryFinalized(r11, r12)     // Catch:{ Exception -> 0x0683 }
            boolean r11 = r0.next()     // Catch:{ Exception -> 0x0683 }
            if (r11 == 0) goto L_0x0437
            int r11 = r0.intValue(r15)     // Catch:{ Exception -> 0x0683 }
            org.telegram.SQLite.SQLiteDatabase r12 = r1.database     // Catch:{ Exception -> 0x0683 }
            java.lang.String r13 = "UPDATE chat_pinned_count SET count = ? WHERE uid = ?"
            org.telegram.SQLite.SQLitePreparedStatement r12 = r12.executeFast(r13)     // Catch:{ Exception -> 0x0683 }
            r12.requery()     // Catch:{ Exception -> 0x0683 }
            int r11 = r11 - r7
            r7 = 0
            int r11 = java.lang.Math.max(r7, r11)     // Catch:{ Exception -> 0x0683 }
            r7 = 1
            r12.bindInteger(r7, r11)     // Catch:{ Exception -> 0x0683 }
            r7 = 2
            r12.bindLong(r7, r4)     // Catch:{ Exception -> 0x0683 }
            r12.step()     // Catch:{ Exception -> 0x0683 }
            r12.dispose()     // Catch:{ Exception -> 0x0683 }
        L_0x0437:
            r0.dispose()     // Catch:{ Exception -> 0x0683 }
        L_0x043a:
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0683 }
            java.lang.String r7 = "DELETE FROM messages_v2 WHERE mid IN(%s) AND uid = %d"
            r11 = 2
            java.lang.Object[] r12 = new java.lang.Object[r11]     // Catch:{ Exception -> 0x0683 }
            r11 = 0
            r12[r11] = r14     // Catch:{ Exception -> 0x0683 }
            java.lang.Long r11 = java.lang.Long.valueOf(r4)     // Catch:{ Exception -> 0x0683 }
            r13 = 1
            r12[r13] = r11     // Catch:{ Exception -> 0x0683 }
            java.lang.String r7 = java.lang.String.format(r10, r7, r12)     // Catch:{ Exception -> 0x0683 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r7)     // Catch:{ Exception -> 0x0683 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0683 }
            r0.dispose()     // Catch:{ Exception -> 0x0683 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0683 }
            java.lang.String r7 = "DELETE FROM polls_v2 WHERE mid IN(%s) AND uid = %d"
            r11 = 2
            java.lang.Object[] r12 = new java.lang.Object[r11]     // Catch:{ Exception -> 0x0683 }
            r11 = 0
            r12[r11] = r14     // Catch:{ Exception -> 0x0683 }
            java.lang.Long r11 = java.lang.Long.valueOf(r4)     // Catch:{ Exception -> 0x0683 }
            r13 = 1
            r12[r13] = r11     // Catch:{ Exception -> 0x0683 }
            java.lang.String r7 = java.lang.String.format(r10, r7, r12)     // Catch:{ Exception -> 0x0683 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r7)     // Catch:{ Exception -> 0x0683 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0683 }
            r0.dispose()     // Catch:{ Exception -> 0x0683 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0683 }
            java.lang.String r7 = "DELETE FROM bot_keyboard WHERE mid IN(%s) AND uid = %d"
            r11 = 2
            java.lang.Object[] r12 = new java.lang.Object[r11]     // Catch:{ Exception -> 0x0683 }
            r11 = 0
            r12[r11] = r14     // Catch:{ Exception -> 0x0683 }
            java.lang.Long r11 = java.lang.Long.valueOf(r4)     // Catch:{ Exception -> 0x0683 }
            r13 = 1
            r12[r13] = r11     // Catch:{ Exception -> 0x0683 }
            java.lang.String r7 = java.lang.String.format(r10, r7, r12)     // Catch:{ Exception -> 0x0683 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r7)     // Catch:{ Exception -> 0x0683 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0683 }
            r0.dispose()     // Catch:{ Exception -> 0x0683 }
            boolean r0 = r23.isEmpty()     // Catch:{ Exception -> 0x0683 }
            if (r0 == 0) goto L_0x05d2
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0683 }
            java.lang.String r7 = "SELECT uid, type FROM media_v4 WHERE mid IN(%s) AND uid = %d"
            r11 = 2
            java.lang.Object[] r12 = new java.lang.Object[r11]     // Catch:{ Exception -> 0x0683 }
            r11 = 0
            r12[r11] = r14     // Catch:{ Exception -> 0x0683 }
            java.lang.Long r13 = java.lang.Long.valueOf(r4)     // Catch:{ Exception -> 0x0683 }
            r15 = 1
            r12[r15] = r13     // Catch:{ Exception -> 0x0683 }
            java.lang.String r7 = java.lang.String.format(r10, r7, r12)     // Catch:{ Exception -> 0x0683 }
            java.lang.Object[] r10 = new java.lang.Object[r11]     // Catch:{ Exception -> 0x0683 }
            org.telegram.SQLite.SQLiteCursor r0 = r0.queryFinalized(r7, r10)     // Catch:{ Exception -> 0x0683 }
            r7 = 0
        L_0x04bc:
            boolean r10 = r0.next()     // Catch:{ Exception -> 0x0683 }
            if (r10 == 0) goto L_0x0506
            long r12 = r0.longValue(r11)     // Catch:{ Exception -> 0x0683 }
            r10 = 1
            int r11 = r0.intValue(r10)     // Catch:{ Exception -> 0x0683 }
            if (r7 != 0) goto L_0x04d2
            android.util.SparseArray r7 = new android.util.SparseArray     // Catch:{ Exception -> 0x0683 }
            r7.<init>()     // Catch:{ Exception -> 0x0683 }
        L_0x04d2:
            java.lang.Object r10 = r7.get(r11)     // Catch:{ Exception -> 0x0683 }
            androidx.collection.LongSparseArray r10 = (androidx.collection.LongSparseArray) r10     // Catch:{ Exception -> 0x0683 }
            if (r10 != 0) goto L_0x04e8
            androidx.collection.LongSparseArray r10 = new androidx.collection.LongSparseArray     // Catch:{ Exception -> 0x0683 }
            r10.<init>()     // Catch:{ Exception -> 0x0683 }
            r15 = 0
            java.lang.Integer r18 = java.lang.Integer.valueOf(r15)     // Catch:{ Exception -> 0x0683 }
            r7.put(r11, r10)     // Catch:{ Exception -> 0x0683 }
            goto L_0x04f0
        L_0x04e8:
            java.lang.Object r11 = r10.get(r12)     // Catch:{ Exception -> 0x0683 }
            r18 = r11
            java.lang.Integer r18 = (java.lang.Integer) r18     // Catch:{ Exception -> 0x0683 }
        L_0x04f0:
            if (r18 != 0) goto L_0x04f7
            r11 = 0
            java.lang.Integer r18 = java.lang.Integer.valueOf(r11)     // Catch:{ Exception -> 0x0683 }
        L_0x04f7:
            int r11 = r18.intValue()     // Catch:{ Exception -> 0x0683 }
            r15 = 1
            int r11 = r11 + r15
            java.lang.Integer r11 = java.lang.Integer.valueOf(r11)     // Catch:{ Exception -> 0x0683 }
            r10.put(r12, r11)     // Catch:{ Exception -> 0x0683 }
            r11 = 0
            goto L_0x04bc
        L_0x0506:
            r0.dispose()     // Catch:{ Exception -> 0x0683 }
            if (r7 == 0) goto L_0x05d2
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0683 }
            java.lang.String r10 = "REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r10)     // Catch:{ Exception -> 0x0683 }
            int r10 = r7.size()     // Catch:{ Exception -> 0x0683 }
            r11 = 0
        L_0x0518:
            if (r11 >= r10) goto L_0x05c5
            int r12 = r7.keyAt(r11)     // Catch:{ Exception -> 0x0683 }
            java.lang.Object r13 = r7.valueAt(r11)     // Catch:{ Exception -> 0x0683 }
            androidx.collection.LongSparseArray r13 = (androidx.collection.LongSparseArray) r13     // Catch:{ Exception -> 0x0683 }
            int r15 = r13.size()     // Catch:{ Exception -> 0x0683 }
            r34 = r7
            r7 = 0
        L_0x052b:
            if (r7 >= r15) goto L_0x05b0
            r18 = r2
            r22 = r3
            long r2 = r13.keyAt(r7)     // Catch:{ Exception -> 0x0683 }
            r24 = r10
            org.telegram.SQLite.SQLiteDatabase r10 = r1.database     // Catch:{ Exception -> 0x0683 }
            r25 = r15
            java.util.Locale r15 = java.util.Locale.US     // Catch:{ Exception -> 0x0683 }
            java.lang.String r8 = "SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1"
            r26 = r6
            r9 = 2
            java.lang.Object[] r6 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x0683 }
            java.lang.Long r9 = java.lang.Long.valueOf(r2)     // Catch:{ Exception -> 0x0683 }
            r27 = r4
            r4 = 0
            r6[r4] = r9     // Catch:{ Exception -> 0x0683 }
            java.lang.Integer r5 = java.lang.Integer.valueOf(r12)     // Catch:{ Exception -> 0x0683 }
            r9 = 1
            r6[r9] = r5     // Catch:{ Exception -> 0x0683 }
            java.lang.String r5 = java.lang.String.format(r15, r8, r6)     // Catch:{ Exception -> 0x0683 }
            java.lang.Object[] r6 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x0683 }
            org.telegram.SQLite.SQLiteCursor r5 = r10.queryFinalized(r5, r6)     // Catch:{ Exception -> 0x0683 }
            boolean r6 = r5.next()     // Catch:{ Exception -> 0x0683 }
            r8 = -1
            if (r6 == 0) goto L_0x056f
            int r6 = r5.intValue(r4)     // Catch:{ Exception -> 0x0683 }
            r4 = 1
            int r9 = r5.intValue(r4)     // Catch:{ Exception -> 0x0683 }
            goto L_0x0571
        L_0x056f:
            r6 = -1
            r9 = 0
        L_0x0571:
            r5.dispose()     // Catch:{ Exception -> 0x0683 }
            if (r6 == r8) goto L_0x059d
            r0.requery()     // Catch:{ Exception -> 0x0683 }
            java.lang.Object r4 = r13.valueAt(r7)     // Catch:{ Exception -> 0x0683 }
            java.lang.Integer r4 = (java.lang.Integer) r4     // Catch:{ Exception -> 0x0683 }
            int r4 = r4.intValue()     // Catch:{ Exception -> 0x0683 }
            int r6 = r6 - r4
            r4 = 0
            int r5 = java.lang.Math.max(r4, r6)     // Catch:{ Exception -> 0x0683 }
            r4 = 1
            r0.bindLong(r4, r2)     // Catch:{ Exception -> 0x0683 }
            r2 = 2
            r0.bindInteger(r2, r12)     // Catch:{ Exception -> 0x0683 }
            r2 = 3
            r0.bindInteger(r2, r5)     // Catch:{ Exception -> 0x0683 }
            r3 = 4
            r0.bindInteger(r3, r9)     // Catch:{ Exception -> 0x0683 }
            r0.step()     // Catch:{ Exception -> 0x0683 }
            goto L_0x059e
        L_0x059d:
            r2 = 3
        L_0x059e:
            int r7 = r7 + 1
            r8 = r30
            r2 = r18
            r3 = r22
            r10 = r24
            r15 = r25
            r6 = r26
            r4 = r27
            goto L_0x052b
        L_0x05b0:
            r18 = r2
            r22 = r3
            r27 = r4
            r26 = r6
            r24 = r10
            r2 = 3
            int r11 = r11 + 1
            r8 = r30
            r7 = r34
            r2 = r18
            goto L_0x0518
        L_0x05c5:
            r18 = r2
            r22 = r3
            r27 = r4
            r26 = r6
            r2 = 3
            r0.dispose()     // Catch:{ Exception -> 0x0683 }
            goto L_0x05db
        L_0x05d2:
            r18 = r2
            r22 = r3
            r27 = r4
            r26 = r6
            r2 = 3
        L_0x05db:
            java.lang.System.currentTimeMillis()     // Catch:{ Exception -> 0x0683 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0683 }
            java.util.Locale r3 = java.util.Locale.US     // Catch:{ Exception -> 0x0683 }
            java.lang.String r4 = "DELETE FROM media_v4 WHERE mid IN(%s) AND uid = %d"
            r5 = 2
            java.lang.Object[] r6 = new java.lang.Object[r5]     // Catch:{ Exception -> 0x0683 }
            r7 = 0
            r6[r7] = r14     // Catch:{ Exception -> 0x0683 }
            java.lang.Long r7 = java.lang.Long.valueOf(r27)     // Catch:{ Exception -> 0x0683 }
            r8 = 1
            r6[r8] = r7     // Catch:{ Exception -> 0x0683 }
            java.lang.String r3 = java.lang.String.format(r3, r4, r6)     // Catch:{ Exception -> 0x0683 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r3)     // Catch:{ Exception -> 0x0683 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0683 }
            r0.dispose()     // Catch:{ Exception -> 0x0683 }
            int r6 = r26 + 1
            r8 = r30
            r0 = r33
            r13 = r17
            r2 = r18
            r12 = r22
            goto L_0x033e
        L_0x060e:
            r18 = r2
            r22 = r12
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0683 }
            java.util.Locale r2 = java.util.Locale.US     // Catch:{ Exception -> 0x0683 }
            java.lang.String r3 = "DELETE FROM messages_seq WHERE mid IN(%s)"
            r4 = 1
            java.lang.Object[] r5 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x0683 }
            r4 = 0
            r5[r4] = r14     // Catch:{ Exception -> 0x0683 }
            java.lang.String r3 = java.lang.String.format(r2, r3, r5)     // Catch:{ Exception -> 0x0683 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r3)     // Catch:{ Exception -> 0x0683 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0683 }
            r0.dispose()     // Catch:{ Exception -> 0x0683 }
            boolean r0 = r23.isEmpty()     // Catch:{ Exception -> 0x0683 }
            if (r0 != 0) goto L_0x0667
            r3 = 0
            int r0 = (r30 > r3 ? 1 : (r30 == r3 ? 0 : -1))
            if (r0 != 0) goto L_0x0649
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0683 }
            java.lang.String r2 = "UPDATE media_counts_v2 SET old = 1 WHERE 1"
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r2)     // Catch:{ Exception -> 0x0683 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0683 }
            r0.dispose()     // Catch:{ Exception -> 0x0683 }
            goto L_0x0667
        L_0x0649:
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0683 }
            java.lang.String r3 = "UPDATE media_counts_v2 SET old = 1 WHERE uid = %d"
            r4 = 1
            java.lang.Object[] r4 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x0683 }
            java.lang.Long r5 = java.lang.Long.valueOf(r30)     // Catch:{ Exception -> 0x0683 }
            r6 = 0
            r4[r6] = r5     // Catch:{ Exception -> 0x0683 }
            java.lang.String r2 = java.lang.String.format(r2, r3, r4)     // Catch:{ Exception -> 0x0683 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r2)     // Catch:{ Exception -> 0x0683 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0683 }
            r0.dispose()     // Catch:{ Exception -> 0x0683 }
            goto L_0x0668
        L_0x0667:
            r6 = 0
        L_0x0668:
            org.telegram.messenger.MediaDataController r0 = r29.getMediaDataController()     // Catch:{ Exception -> 0x0683 }
            r2 = r32
            r3 = 0
            r5 = 0
            r0.clearBotKeyboard(r3, r2)     // Catch:{ Exception -> 0x0683 }
            int r0 = r18.size()     // Catch:{ Exception -> 0x0683 }
            if (r0 == 0) goto L_0x067d
            r1.resetAllUnreadCounters(r5)     // Catch:{ Exception -> 0x0683 }
        L_0x067d:
            r2 = r22
            r1.updateWidgets((java.util.ArrayList<java.lang.Long>) r2)     // Catch:{ Exception -> 0x0683 }
        L_0x0682:
            return r2
        L_0x0683:
            r0 = move-exception
            goto L_0x068b
        L_0x0685:
            r0 = move-exception
            r1 = r29
            goto L_0x068b
        L_0x0689:
            r0 = move-exception
            r1 = r7
        L_0x068b:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
            r2 = 0
            return r2
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$markMessagesAsDeleted$175(long, java.util.ArrayList, boolean, boolean):java.util.ArrayList");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessagesAsDeletedInternal$173(ArrayList arrayList) {
        getFileLoader().cancelLoadFiles(arrayList);
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r14v2, resolved type: org.telegram.tgnet.TLRPC$TL_dialog} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r14v4, resolved type: org.telegram.tgnet.TLRPC$TL_dialogFolder} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r14v6, resolved type: org.telegram.tgnet.TLRPC$TL_dialog} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r14v7, resolved type: org.telegram.tgnet.TLRPC$TL_dialog} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r14v8, resolved type: org.telegram.tgnet.TLRPC$TL_dialog} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r14v9, resolved type: org.telegram.tgnet.TLRPC$TL_dialog} */
    /* access modifiers changed from: private */
    /* JADX WARNING: Multi-variable type inference failed */
    /* renamed from: updateDialogsWithDeletedMessagesInternal */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void lambda$updateDialogsWithDeletedMessages$174(long r20, long r22, java.util.ArrayList<java.lang.Integer> r24, java.util.ArrayList<java.lang.Long> r25) {
        /*
            r19 = this;
            r1 = r19
            r2 = r22
            r0 = r25
            java.util.ArrayList r4 = new java.util.ArrayList     // Catch:{ Exception -> 0x028c }
            r4.<init>()     // Catch:{ Exception -> 0x028c }
            boolean r5 = r24.isEmpty()     // Catch:{ Exception -> 0x028c }
            r6 = 3
            r7 = 2
            r8 = 0
            java.lang.String r10 = ","
            r11 = 1
            r12 = 0
            if (r5 != 0) goto L_0x00a2
            int r5 = (r2 > r8 ? 1 : (r2 == r8 ? 0 : -1))
            if (r5 == 0) goto L_0x002e
            long r13 = -r2
            java.lang.Long r5 = java.lang.Long.valueOf(r13)     // Catch:{ Exception -> 0x028c }
            r4.add(r5)     // Catch:{ Exception -> 0x028c }
            org.telegram.SQLite.SQLiteDatabase r5 = r1.database     // Catch:{ Exception -> 0x028c }
            java.lang.String r13 = "UPDATE dialogs SET last_mid = (SELECT mid FROM messages_v2 WHERE uid = ? AND date = (SELECT MAX(date) FROM messages_v2 WHERE uid = ?)) WHERE did = ?"
            org.telegram.SQLite.SQLitePreparedStatement r5 = r5.executeFast(r13)     // Catch:{ Exception -> 0x028c }
            goto L_0x0071
        L_0x002e:
            int r5 = (r20 > r8 ? 1 : (r20 == r8 ? 0 : -1))
            if (r5 != 0) goto L_0x0062
            r5 = r24
            java.lang.String r5 = android.text.TextUtils.join(r10, r5)     // Catch:{ Exception -> 0x028c }
            org.telegram.SQLite.SQLiteDatabase r13 = r1.database     // Catch:{ Exception -> 0x028c }
            java.util.Locale r14 = java.util.Locale.US     // Catch:{ Exception -> 0x028c }
            java.lang.String r15 = "SELECT did FROM dialogs WHERE last_mid IN(%s) AND flags = 0"
            java.lang.Object[] r8 = new java.lang.Object[r11]     // Catch:{ Exception -> 0x028c }
            r8[r12] = r5     // Catch:{ Exception -> 0x028c }
            java.lang.String r5 = java.lang.String.format(r14, r15, r8)     // Catch:{ Exception -> 0x028c }
            java.lang.Object[] r8 = new java.lang.Object[r12]     // Catch:{ Exception -> 0x028c }
            org.telegram.SQLite.SQLiteCursor r5 = r13.queryFinalized(r5, r8)     // Catch:{ Exception -> 0x028c }
        L_0x004c:
            boolean r8 = r5.next()     // Catch:{ Exception -> 0x028c }
            if (r8 == 0) goto L_0x005e
            long r8 = r5.longValue(r12)     // Catch:{ Exception -> 0x028c }
            java.lang.Long r8 = java.lang.Long.valueOf(r8)     // Catch:{ Exception -> 0x028c }
            r4.add(r8)     // Catch:{ Exception -> 0x028c }
            goto L_0x004c
        L_0x005e:
            r5.dispose()     // Catch:{ Exception -> 0x028c }
            goto L_0x0069
        L_0x0062:
            java.lang.Long r5 = java.lang.Long.valueOf(r20)     // Catch:{ Exception -> 0x028c }
            r4.add(r5)     // Catch:{ Exception -> 0x028c }
        L_0x0069:
            org.telegram.SQLite.SQLiteDatabase r5 = r1.database     // Catch:{ Exception -> 0x028c }
            java.lang.String r8 = "UPDATE dialogs SET last_mid = (SELECT mid FROM messages_v2 WHERE uid = ? AND date = (SELECT MAX(date) FROM messages_v2 WHERE uid = ? AND date != 0)) WHERE did = ?"
            org.telegram.SQLite.SQLitePreparedStatement r5 = r5.executeFast(r8)     // Catch:{ Exception -> 0x028c }
        L_0x0071:
            org.telegram.SQLite.SQLiteDatabase r8 = r1.database     // Catch:{ Exception -> 0x028c }
            r8.beginTransaction()     // Catch:{ Exception -> 0x028c }
            r8 = 0
        L_0x0077:
            int r9 = r4.size()     // Catch:{ Exception -> 0x028c }
            if (r8 >= r9) goto L_0x0099
            java.lang.Object r9 = r4.get(r8)     // Catch:{ Exception -> 0x028c }
            java.lang.Long r9 = (java.lang.Long) r9     // Catch:{ Exception -> 0x028c }
            long r13 = r9.longValue()     // Catch:{ Exception -> 0x028c }
            r5.requery()     // Catch:{ Exception -> 0x028c }
            r5.bindLong(r11, r13)     // Catch:{ Exception -> 0x028c }
            r5.bindLong(r7, r13)     // Catch:{ Exception -> 0x028c }
            r5.bindLong(r6, r13)     // Catch:{ Exception -> 0x028c }
            r5.step()     // Catch:{ Exception -> 0x028c }
            int r8 = r8 + 1
            goto L_0x0077
        L_0x0099:
            r5.dispose()     // Catch:{ Exception -> 0x028c }
            org.telegram.SQLite.SQLiteDatabase r5 = r1.database     // Catch:{ Exception -> 0x028c }
            r5.commitTransaction()     // Catch:{ Exception -> 0x028c }
            goto L_0x00aa
        L_0x00a2:
            long r8 = -r2
            java.lang.Long r5 = java.lang.Long.valueOf(r8)     // Catch:{ Exception -> 0x028c }
            r4.add(r5)     // Catch:{ Exception -> 0x028c }
        L_0x00aa:
            if (r0 == 0) goto L_0x00c5
            r5 = 0
        L_0x00ad:
            int r8 = r25.size()     // Catch:{ Exception -> 0x028c }
            if (r5 >= r8) goto L_0x00c5
            java.lang.Object r8 = r0.get(r5)     // Catch:{ Exception -> 0x028c }
            java.lang.Long r8 = (java.lang.Long) r8     // Catch:{ Exception -> 0x028c }
            boolean r9 = r4.contains(r8)     // Catch:{ Exception -> 0x028c }
            if (r9 != 0) goto L_0x00c2
            r4.add(r8)     // Catch:{ Exception -> 0x028c }
        L_0x00c2:
            int r5 = r5 + 1
            goto L_0x00ad
        L_0x00c5:
            java.lang.String r0 = android.text.TextUtils.join(r10, r4)     // Catch:{ Exception -> 0x028c }
            org.telegram.tgnet.TLRPC$TL_messages_dialogs r4 = new org.telegram.tgnet.TLRPC$TL_messages_dialogs     // Catch:{ Exception -> 0x028c }
            r4.<init>()     // Catch:{ Exception -> 0x028c }
            java.util.ArrayList r5 = new java.util.ArrayList     // Catch:{ Exception -> 0x028c }
            r5.<init>()     // Catch:{ Exception -> 0x028c }
            java.util.ArrayList r8 = new java.util.ArrayList     // Catch:{ Exception -> 0x028c }
            r8.<init>()     // Catch:{ Exception -> 0x028c }
            java.util.ArrayList r9 = new java.util.ArrayList     // Catch:{ Exception -> 0x028c }
            r9.<init>()     // Catch:{ Exception -> 0x028c }
            java.util.ArrayList r13 = new java.util.ArrayList     // Catch:{ Exception -> 0x028c }
            r13.<init>()     // Catch:{ Exception -> 0x028c }
            org.telegram.SQLite.SQLiteDatabase r14 = r1.database     // Catch:{ Exception -> 0x028c }
            java.util.Locale r15 = java.util.Locale.US     // Catch:{ Exception -> 0x028c }
            java.lang.String r6 = "SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, m.date, d.pts, d.inbox_max, d.outbox_max, d.pinned, d.unread_count_i, d.flags, d.folder_id, d.data, d.unread_reactions FROM dialogs as d LEFT JOIN messages_v2 as m ON d.last_mid = m.mid AND d.did = m.uid WHERE d.did IN(%s)"
            java.lang.Object[] r7 = new java.lang.Object[r11]     // Catch:{ Exception -> 0x028c }
            r7[r12] = r0     // Catch:{ Exception -> 0x028c }
            java.lang.String r0 = java.lang.String.format(r15, r6, r7)     // Catch:{ Exception -> 0x028c }
            java.lang.Object[] r6 = new java.lang.Object[r12]     // Catch:{ Exception -> 0x028c }
            org.telegram.SQLite.SQLiteCursor r0 = r14.queryFinalized(r0, r6)     // Catch:{ Exception -> 0x028c }
        L_0x00f6:
            boolean r6 = r0.next()     // Catch:{ Exception -> 0x028c }
            if (r6 == 0) goto L_0x0247
            long r6 = r0.longValue(r12)     // Catch:{ Exception -> 0x028c }
            boolean r14 = org.telegram.messenger.DialogObject.isFolderDialogId(r6)     // Catch:{ Exception -> 0x028c }
            if (r14 == 0) goto L_0x0137
            org.telegram.tgnet.TLRPC$TL_dialogFolder r14 = new org.telegram.tgnet.TLRPC$TL_dialogFolder     // Catch:{ Exception -> 0x028c }
            r14.<init>()     // Catch:{ Exception -> 0x028c }
            r11 = 16
            boolean r18 = r0.isNull(r11)     // Catch:{ Exception -> 0x028c }
            if (r18 != 0) goto L_0x013c
            org.telegram.tgnet.NativeByteBuffer r11 = r0.byteBufferValue(r11)     // Catch:{ Exception -> 0x028c }
            if (r11 == 0) goto L_0x0127
            int r15 = r11.readInt32(r12)     // Catch:{ Exception -> 0x028c }
            org.telegram.tgnet.TLRPC$TL_folder r15 = org.telegram.tgnet.TLRPC$TL_folder.TLdeserialize(r11, r15, r12)     // Catch:{ Exception -> 0x028c }
            r14.folder = r15     // Catch:{ Exception -> 0x028c }
            r11.reuse()     // Catch:{ Exception -> 0x028c }
            goto L_0x013c
        L_0x0127:
            org.telegram.tgnet.TLRPC$TL_folder r11 = new org.telegram.tgnet.TLRPC$TL_folder     // Catch:{ Exception -> 0x028c }
            r11.<init>()     // Catch:{ Exception -> 0x028c }
            r14.folder = r11     // Catch:{ Exception -> 0x028c }
            r15 = 15
            int r12 = r0.intValue(r15)     // Catch:{ Exception -> 0x028c }
            r11.id = r12     // Catch:{ Exception -> 0x028c }
            goto L_0x013c
        L_0x0137:
            org.telegram.tgnet.TLRPC$TL_dialog r14 = new org.telegram.tgnet.TLRPC$TL_dialog     // Catch:{ Exception -> 0x028c }
            r14.<init>()     // Catch:{ Exception -> 0x028c }
        L_0x013c:
            r14.id = r6     // Catch:{ Exception -> 0x028c }
            r11 = 1
            int r12 = r0.intValue(r11)     // Catch:{ Exception -> 0x028c }
            r14.top_message = r12     // Catch:{ Exception -> 0x028c }
            r11 = 10
            int r11 = r0.intValue(r11)     // Catch:{ Exception -> 0x028c }
            r14.read_inbox_max_id = r11     // Catch:{ Exception -> 0x028c }
            r11 = 11
            int r11 = r0.intValue(r11)     // Catch:{ Exception -> 0x028c }
            r14.read_outbox_max_id = r11     // Catch:{ Exception -> 0x028c }
            r11 = 2
            int r12 = r0.intValue(r11)     // Catch:{ Exception -> 0x028c }
            r14.unread_count = r12     // Catch:{ Exception -> 0x028c }
            r12 = 13
            int r12 = r0.intValue(r12)     // Catch:{ Exception -> 0x028c }
            r14.unread_mentions_count = r12     // Catch:{ Exception -> 0x028c }
            r12 = 3
            int r15 = r0.intValue(r12)     // Catch:{ Exception -> 0x028c }
            r14.last_message_date = r15     // Catch:{ Exception -> 0x028c }
            r15 = 9
            int r15 = r0.intValue(r15)     // Catch:{ Exception -> 0x028c }
            r14.pts = r15     // Catch:{ Exception -> 0x028c }
            r15 = 0
            int r17 = (r2 > r15 ? 1 : (r2 == r15 ? 0 : -1))
            if (r17 != 0) goto L_0x017b
            r11 = 0
            goto L_0x017c
        L_0x017b:
            r11 = 1
        L_0x017c:
            r14.flags = r11     // Catch:{ Exception -> 0x028c }
            r11 = 12
            int r11 = r0.intValue(r11)     // Catch:{ Exception -> 0x028c }
            r14.pinnedNum = r11     // Catch:{ Exception -> 0x028c }
            if (r11 == 0) goto L_0x018a
            r11 = 1
            goto L_0x018b
        L_0x018a:
            r11 = 0
        L_0x018b:
            r14.pinned = r11     // Catch:{ Exception -> 0x028c }
            r11 = 14
            int r11 = r0.intValue(r11)     // Catch:{ Exception -> 0x028c }
            r17 = 1
            r11 = r11 & 1
            if (r11 == 0) goto L_0x019b
            r11 = 1
            goto L_0x019c
        L_0x019b:
            r11 = 0
        L_0x019c:
            r14.unread_mark = r11     // Catch:{ Exception -> 0x028c }
            r11 = 15
            int r11 = r0.intValue(r11)     // Catch:{ Exception -> 0x028c }
            r14.folder_id = r11     // Catch:{ Exception -> 0x028c }
            r11 = 17
            int r11 = r0.intValue(r11)     // Catch:{ Exception -> 0x028c }
            r14.unread_reactions_count = r11     // Catch:{ Exception -> 0x028c }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r11 = r4.dialogs     // Catch:{ Exception -> 0x028c }
            r11.add(r14)     // Catch:{ Exception -> 0x028c }
            r11 = 4
            org.telegram.tgnet.NativeByteBuffer r11 = r0.byteBufferValue(r11)     // Catch:{ Exception -> 0x028c }
            if (r11 == 0) goto L_0x01fb
            r12 = 0
            int r15 = r11.readInt32(r12)     // Catch:{ Exception -> 0x028c }
            org.telegram.tgnet.TLRPC$Message r15 = org.telegram.tgnet.TLRPC$Message.TLdeserialize(r11, r15, r12)     // Catch:{ Exception -> 0x028c }
            org.telegram.messenger.UserConfig r12 = r19.getUserConfig()     // Catch:{ Exception -> 0x028c }
            long r2 = r12.clientUserId     // Catch:{ Exception -> 0x028c }
            r15.readAttachPath(r11, r2)     // Catch:{ Exception -> 0x028c }
            r11.reuse()     // Catch:{ Exception -> 0x028c }
            r2 = 5
            int r2 = r0.intValue(r2)     // Catch:{ Exception -> 0x028c }
            org.telegram.messenger.MessageObject.setUnreadFlags(r15, r2)     // Catch:{ Exception -> 0x028c }
            r2 = 6
            int r2 = r0.intValue(r2)     // Catch:{ Exception -> 0x028c }
            r15.id = r2     // Catch:{ Exception -> 0x028c }
            r2 = 7
            int r2 = r0.intValue(r2)     // Catch:{ Exception -> 0x028c }
            r15.send_state = r2     // Catch:{ Exception -> 0x028c }
            r2 = 8
            int r2 = r0.intValue(r2)     // Catch:{ Exception -> 0x028c }
            if (r2 == 0) goto L_0x01ef
            r14.last_message_date = r2     // Catch:{ Exception -> 0x028c }
        L_0x01ef:
            long r2 = r14.id     // Catch:{ Exception -> 0x028c }
            r15.dialog_id = r2     // Catch:{ Exception -> 0x028c }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r2 = r4.messages     // Catch:{ Exception -> 0x028c }
            r2.add(r15)     // Catch:{ Exception -> 0x028c }
            addUsersAndChatsFromMessage(r15, r8, r9)     // Catch:{ Exception -> 0x028c }
        L_0x01fb:
            boolean r2 = org.telegram.messenger.DialogObject.isEncryptedDialog(r6)     // Catch:{ Exception -> 0x028c }
            if (r2 == 0) goto L_0x0217
            int r2 = org.telegram.messenger.DialogObject.getEncryptedChatId(r6)     // Catch:{ Exception -> 0x028c }
            java.lang.Integer r3 = java.lang.Integer.valueOf(r2)     // Catch:{ Exception -> 0x028c }
            boolean r3 = r13.contains(r3)     // Catch:{ Exception -> 0x028c }
            if (r3 != 0) goto L_0x0241
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)     // Catch:{ Exception -> 0x028c }
            r13.add(r2)     // Catch:{ Exception -> 0x028c }
            goto L_0x0241
        L_0x0217:
            boolean r2 = org.telegram.messenger.DialogObject.isUserDialog(r6)     // Catch:{ Exception -> 0x028c }
            if (r2 == 0) goto L_0x022f
            java.lang.Long r2 = java.lang.Long.valueOf(r6)     // Catch:{ Exception -> 0x028c }
            boolean r2 = r8.contains(r2)     // Catch:{ Exception -> 0x028c }
            if (r2 != 0) goto L_0x0241
            java.lang.Long r2 = java.lang.Long.valueOf(r6)     // Catch:{ Exception -> 0x028c }
            r8.add(r2)     // Catch:{ Exception -> 0x028c }
            goto L_0x0241
        L_0x022f:
            long r2 = -r6
            java.lang.Long r6 = java.lang.Long.valueOf(r2)     // Catch:{ Exception -> 0x028c }
            boolean r6 = r9.contains(r6)     // Catch:{ Exception -> 0x028c }
            if (r6 != 0) goto L_0x0241
            java.lang.Long r2 = java.lang.Long.valueOf(r2)     // Catch:{ Exception -> 0x028c }
            r9.add(r2)     // Catch:{ Exception -> 0x028c }
        L_0x0241:
            r2 = r22
            r11 = 1
            r12 = 0
            goto L_0x00f6
        L_0x0247:
            r0.dispose()     // Catch:{ Exception -> 0x028c }
            boolean r0 = r13.isEmpty()     // Catch:{ Exception -> 0x028c }
            if (r0 != 0) goto L_0x0257
            java.lang.String r0 = android.text.TextUtils.join(r10, r13)     // Catch:{ Exception -> 0x028c }
            r1.getEncryptedChatsInternal(r0, r5, r8)     // Catch:{ Exception -> 0x028c }
        L_0x0257:
            boolean r0 = r9.isEmpty()     // Catch:{ Exception -> 0x028c }
            if (r0 != 0) goto L_0x0266
            java.lang.String r0 = android.text.TextUtils.join(r10, r9)     // Catch:{ Exception -> 0x028c }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r2 = r4.chats     // Catch:{ Exception -> 0x028c }
            r1.getChatsInternal(r0, r2)     // Catch:{ Exception -> 0x028c }
        L_0x0266:
            boolean r0 = r8.isEmpty()     // Catch:{ Exception -> 0x028c }
            if (r0 != 0) goto L_0x0275
            java.lang.String r0 = android.text.TextUtils.join(r10, r8)     // Catch:{ Exception -> 0x028c }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r4.users     // Catch:{ Exception -> 0x028c }
            r1.getUsersInternal(r0, r2)     // Catch:{ Exception -> 0x028c }
        L_0x0275:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r0 = r4.dialogs     // Catch:{ Exception -> 0x028c }
            boolean r0 = r0.isEmpty()     // Catch:{ Exception -> 0x028c }
            if (r0 == 0) goto L_0x0283
            boolean r0 = r5.isEmpty()     // Catch:{ Exception -> 0x028c }
            if (r0 != 0) goto L_0x0290
        L_0x0283:
            org.telegram.messenger.MessagesController r0 = r19.getMessagesController()     // Catch:{ Exception -> 0x028c }
            r2 = 1
            r0.processDialogsUpdate(r4, r5, r2)     // Catch:{ Exception -> 0x028c }
            goto L_0x0290
        L_0x028c:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
        L_0x0290:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$updateDialogsWithDeletedMessages$174(long, long, java.util.ArrayList, java.util.ArrayList):void");
    }

    public void updateDialogsWithDeletedMessages(long j, long j2, ArrayList<Integer> arrayList, ArrayList<Long> arrayList2, boolean z) {
        if (z) {
            this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda88(this, j, j2, arrayList, arrayList2));
            return;
        }
        lambda$updateDialogsWithDeletedMessages$174(j, j2, arrayList, arrayList2);
    }

    public ArrayList<Long> markMessagesAsDeleted(long j, ArrayList<Integer> arrayList, boolean z, boolean z2, boolean z3) {
        if (arrayList.isEmpty()) {
            return null;
        }
        if (!z) {
            return lambda$markMessagesAsDeleted$175(j, arrayList, z2, z3);
        }
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda100(this, j, arrayList, z2, z3));
        return null;
    }

    /* JADX WARNING: type inference failed for: r6v0 */
    /* JADX WARNING: type inference failed for: r6v1, types: [int, boolean] */
    /* JADX WARNING: type inference failed for: r15v5 */
    /* JADX WARNING: type inference failed for: r15v10 */
    /* JADX WARNING: type inference failed for: r6v24 */
    /* access modifiers changed from: private */
    /* JADX WARNING: Incorrect type for immutable var: ssa=int, code=?, for r15v2, types: [int, boolean] */
    /* JADX WARNING: Removed duplicated region for block: B:46:0x0109 A[Catch:{ Exception -> 0x0286 }] */
    /* JADX WARNING: Removed duplicated region for block: B:53:0x01d8 A[Catch:{ Exception -> 0x0286 }] */
    /* JADX WARNING: Removed duplicated region for block: B:54:0x01dd A[Catch:{ Exception -> 0x0286 }] */
    /* JADX WARNING: Removed duplicated region for block: B:57:0x01e3 A[Catch:{ Exception -> 0x0286 }] */
    /* renamed from: markMessagesAsDeletedInternal */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public java.util.ArrayList<java.lang.Long> lambda$markMessagesAsDeleted$177(long r20, int r22, boolean r23) {
        /*
            r19 = this;
            r7 = r19
            java.util.ArrayList r8 = new java.util.ArrayList     // Catch:{ Exception -> 0x028c }
            r8.<init>()     // Catch:{ Exception -> 0x028c }
            androidx.collection.LongSparseArray r9 = new androidx.collection.LongSparseArray     // Catch:{ Exception -> 0x028c }
            r9.<init>()     // Catch:{ Exception -> 0x028c }
            java.util.ArrayList r10 = new java.util.ArrayList     // Catch:{ Exception -> 0x028c }
            r10.<init>()     // Catch:{ Exception -> 0x028c }
            java.util.ArrayList r11 = new java.util.ArrayList     // Catch:{ Exception -> 0x028c }
            r11.<init>()     // Catch:{ Exception -> 0x028c }
            java.util.ArrayList r12 = new java.util.ArrayList     // Catch:{ Exception -> 0x028c }
            r12.<init>()     // Catch:{ Exception -> 0x028c }
            org.telegram.messenger.UserConfig r0 = r19.getUserConfig()     // Catch:{ Exception -> 0x028c }
            long r13 = r0.getClientUserId()     // Catch:{ Exception -> 0x028c }
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x028c }
            java.util.Locale r1 = java.util.Locale.US     // Catch:{ Exception -> 0x028c }
            java.lang.String r2 = "SELECT uid, data, read_state, out, mention FROM messages_v2 WHERE uid = %d AND mid <= %d"
            r15 = 2
            java.lang.Object[] r3 = new java.lang.Object[r15]     // Catch:{ Exception -> 0x028c }
            r5 = r20
            r16 = r8
            long r7 = -r5
            java.lang.Long r4 = java.lang.Long.valueOf(r7)     // Catch:{ Exception -> 0x0288 }
            r6 = 0
            r3[r6] = r4     // Catch:{ Exception -> 0x0288 }
            java.lang.Integer r4 = java.lang.Integer.valueOf(r22)     // Catch:{ Exception -> 0x0288 }
            r5 = 1
            r3[r5] = r4     // Catch:{ Exception -> 0x0288 }
            java.lang.String r1 = java.lang.String.format(r1, r2, r3)     // Catch:{ Exception -> 0x0288 }
            java.lang.Object[] r2 = new java.lang.Object[r6]     // Catch:{ Exception -> 0x0288 }
            org.telegram.SQLite.SQLiteCursor r4 = r0.queryFinalized(r1, r2)     // Catch:{ Exception -> 0x0288 }
        L_0x0049:
            r3 = 3
            boolean r0 = r4.next()     // Catch:{ Exception -> 0x00e2 }
            if (r0 == 0) goto L_0x00de
            long r0 = r4.longValue(r6)     // Catch:{ Exception -> 0x00e2 }
            int r2 = (r0 > r13 ? 1 : (r0 == r13 ? 0 : -1))
            if (r2 == 0) goto L_0x00a1
            int r2 = r4.intValue(r15)     // Catch:{ Exception -> 0x00e2 }
            int r17 = r4.intValue(r3)     // Catch:{ Exception -> 0x00e2 }
            if (r17 != 0) goto L_0x00a1
            java.lang.Object r17 = r9.get(r0)     // Catch:{ Exception -> 0x00e2 }
            java.lang.Integer[] r17 = (java.lang.Integer[]) r17     // Catch:{ Exception -> 0x00e2 }
            if (r17 != 0) goto L_0x007d
            java.lang.Integer[] r3 = new java.lang.Integer[r15]     // Catch:{ Exception -> 0x00e2 }
            java.lang.Integer r17 = java.lang.Integer.valueOf(r6)     // Catch:{ Exception -> 0x00e2 }
            r3[r6] = r17     // Catch:{ Exception -> 0x00e2 }
            java.lang.Integer r17 = java.lang.Integer.valueOf(r6)     // Catch:{ Exception -> 0x00e2 }
            r3[r5] = r17     // Catch:{ Exception -> 0x00e2 }
            r9.put(r0, r3)     // Catch:{ Exception -> 0x00e2 }
            r17 = r3
        L_0x007d:
            if (r2 >= r15) goto L_0x008e
            r3 = r17[r5]     // Catch:{ Exception -> 0x00e2 }
            r3 = r17[r5]     // Catch:{ Exception -> 0x00e2 }
            int r3 = r3.intValue()     // Catch:{ Exception -> 0x00e2 }
            int r3 = r3 + r5
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)     // Catch:{ Exception -> 0x00e2 }
            r17[r5] = r3     // Catch:{ Exception -> 0x00e2 }
        L_0x008e:
            if (r2 == 0) goto L_0x0092
            if (r2 != r15) goto L_0x00a1
        L_0x0092:
            r2 = r17[r6]     // Catch:{ Exception -> 0x00e2 }
            r2 = r17[r6]     // Catch:{ Exception -> 0x00e2 }
            int r2 = r2.intValue()     // Catch:{ Exception -> 0x00e2 }
            int r2 = r2 + r5
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)     // Catch:{ Exception -> 0x00e2 }
            r17[r6] = r2     // Catch:{ Exception -> 0x00e2 }
        L_0x00a1:
            boolean r0 = org.telegram.messenger.DialogObject.isEncryptedDialog(r0)     // Catch:{ Exception -> 0x00e2 }
            if (r0 != 0) goto L_0x00aa
            if (r23 != 0) goto L_0x00aa
            goto L_0x0049
        L_0x00aa:
            org.telegram.tgnet.NativeByteBuffer r0 = r4.byteBufferValue(r5)     // Catch:{ Exception -> 0x00e2 }
            if (r0 == 0) goto L_0x00d4
            int r1 = r0.readInt32(r6)     // Catch:{ Exception -> 0x00e2 }
            org.telegram.tgnet.TLRPC$Message r2 = org.telegram.tgnet.TLRPC$Message.TLdeserialize(r0, r1, r6)     // Catch:{ Exception -> 0x00e2 }
            org.telegram.messenger.UserConfig r1 = r19.getUserConfig()     // Catch:{ Exception -> 0x00e2 }
            long r5 = r1.clientUserId     // Catch:{ Exception -> 0x00e2 }
            r2.readAttachPath(r0, r5)     // Catch:{ Exception -> 0x00e2 }
            r0.reuse()     // Catch:{ Exception -> 0x00e2 }
            r6 = 0
            r1 = r19
            r5 = 3
            r3 = r10
            r18 = r4
            r4 = r12
            r15 = 1
            r5 = r11
            r1.addFilesToDelete(r2, r3, r4, r5, r6)     // Catch:{ Exception -> 0x00d2 }
            goto L_0x00d7
        L_0x00d2:
            r0 = move-exception
            goto L_0x00e6
        L_0x00d4:
            r18 = r4
            r15 = 1
        L_0x00d7:
            r4 = r18
            r5 = 1
            r6 = 0
            r15 = 2
            goto L_0x0049
        L_0x00de:
            r18 = r4
            r15 = 1
            goto L_0x00e9
        L_0x00e2:
            r0 = move-exception
            r18 = r4
            r15 = 1
        L_0x00e6:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ Exception -> 0x0288 }
        L_0x00e9:
            r18.dispose()     // Catch:{ Exception -> 0x0288 }
            r1 = r19
            r2 = r7
            r1.deleteFromDownloadQueue(r12, r15)     // Catch:{ Exception -> 0x0286 }
            org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda135 r0 = new org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda135     // Catch:{ Exception -> 0x0286 }
            r0.<init>(r1, r11)     // Catch:{ Exception -> 0x0286 }
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r0)     // Catch:{ Exception -> 0x0286 }
            org.telegram.messenger.FileLoader r0 = r19.getFileLoader()     // Catch:{ Exception -> 0x0286 }
            r4 = 0
            r0.deleteFiles(r10, r4)     // Catch:{ Exception -> 0x0286 }
            r6 = 0
        L_0x0103:
            int r0 = r9.size()     // Catch:{ Exception -> 0x0286 }
            if (r6 >= r0) goto L_0x0180
            long r7 = r9.keyAt(r6)     // Catch:{ Exception -> 0x0286 }
            java.lang.Object r0 = r9.valueAt(r6)     // Catch:{ Exception -> 0x0286 }
            java.lang.Integer[] r0 = (java.lang.Integer[]) r0     // Catch:{ Exception -> 0x0286 }
            org.telegram.SQLite.SQLiteDatabase r5 = r1.database     // Catch:{ Exception -> 0x0286 }
            java.lang.StringBuilder r10 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0286 }
            r10.<init>()     // Catch:{ Exception -> 0x0286 }
            java.lang.String r11 = "SELECT unread_count, unread_count_i FROM dialogs WHERE did = "
            r10.append(r11)     // Catch:{ Exception -> 0x0286 }
            r10.append(r7)     // Catch:{ Exception -> 0x0286 }
            java.lang.String r10 = r10.toString()     // Catch:{ Exception -> 0x0286 }
            java.lang.Object[] r11 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x0286 }
            org.telegram.SQLite.SQLiteCursor r5 = r5.queryFinalized(r10, r11)     // Catch:{ Exception -> 0x0286 }
            boolean r10 = r5.next()     // Catch:{ Exception -> 0x0286 }
            if (r10 == 0) goto L_0x013b
            int r10 = r5.intValue(r4)     // Catch:{ Exception -> 0x0286 }
            int r11 = r5.intValue(r15)     // Catch:{ Exception -> 0x0286 }
            goto L_0x013d
        L_0x013b:
            r10 = 0
            r11 = 0
        L_0x013d:
            r5.dispose()     // Catch:{ Exception -> 0x0286 }
            java.lang.Long r5 = java.lang.Long.valueOf(r7)     // Catch:{ Exception -> 0x0286 }
            r12 = r16
            r12.add(r5)     // Catch:{ Exception -> 0x0286 }
            org.telegram.SQLite.SQLiteDatabase r5 = r1.database     // Catch:{ Exception -> 0x0286 }
            java.lang.String r13 = "UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?"
            org.telegram.SQLite.SQLitePreparedStatement r5 = r5.executeFast(r13)     // Catch:{ Exception -> 0x0286 }
            r5.requery()     // Catch:{ Exception -> 0x0286 }
            r13 = r0[r4]     // Catch:{ Exception -> 0x0286 }
            int r13 = r13.intValue()     // Catch:{ Exception -> 0x0286 }
            int r10 = r10 - r13
            int r10 = java.lang.Math.max(r4, r10)     // Catch:{ Exception -> 0x0286 }
            r5.bindInteger(r15, r10)     // Catch:{ Exception -> 0x0286 }
            r0 = r0[r15]     // Catch:{ Exception -> 0x0286 }
            int r0 = r0.intValue()     // Catch:{ Exception -> 0x0286 }
            int r11 = r11 - r0
            int r0 = java.lang.Math.max(r4, r11)     // Catch:{ Exception -> 0x0286 }
            r10 = 2
            r5.bindInteger(r10, r0)     // Catch:{ Exception -> 0x0286 }
            r10 = 3
            r5.bindLong(r10, r7)     // Catch:{ Exception -> 0x0286 }
            r5.step()     // Catch:{ Exception -> 0x0286 }
            r5.dispose()     // Catch:{ Exception -> 0x0286 }
            int r6 = r6 + 1
            r16 = r12
            goto L_0x0103
        L_0x0180:
            r12 = r16
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0286 }
            java.util.Locale r5 = java.util.Locale.US     // Catch:{ Exception -> 0x0286 }
            java.lang.String r6 = "UPDATE chat_settings_v2 SET pinned = 0 WHERE uid = %d AND pinned <= %d"
            r7 = 2
            java.lang.Object[] r8 = new java.lang.Object[r7]     // Catch:{ Exception -> 0x0286 }
            java.lang.Long r7 = java.lang.Long.valueOf(r20)     // Catch:{ Exception -> 0x0286 }
            r8[r4] = r7     // Catch:{ Exception -> 0x0286 }
            java.lang.Integer r7 = java.lang.Integer.valueOf(r22)     // Catch:{ Exception -> 0x0286 }
            r8[r15] = r7     // Catch:{ Exception -> 0x0286 }
            java.lang.String r6 = java.lang.String.format(r5, r6, r8)     // Catch:{ Exception -> 0x0286 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r6)     // Catch:{ Exception -> 0x0286 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0286 }
            r0.dispose()     // Catch:{ Exception -> 0x0286 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0286 }
            java.lang.String r6 = "DELETE FROM chat_pinned_v2 WHERE uid = %d AND mid <= %d"
            r7 = 2
            java.lang.Object[] r8 = new java.lang.Object[r7]     // Catch:{ Exception -> 0x0286 }
            java.lang.Long r7 = java.lang.Long.valueOf(r20)     // Catch:{ Exception -> 0x0286 }
            r8[r4] = r7     // Catch:{ Exception -> 0x0286 }
            java.lang.Integer r7 = java.lang.Integer.valueOf(r22)     // Catch:{ Exception -> 0x0286 }
            r8[r15] = r7     // Catch:{ Exception -> 0x0286 }
            java.lang.String r6 = java.lang.String.format(r5, r6, r8)     // Catch:{ Exception -> 0x0286 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r6)     // Catch:{ Exception -> 0x0286 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0286 }
            r0.dispose()     // Catch:{ Exception -> 0x0286 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0286 }
            java.lang.String r6 = "SELECT changes()"
            java.lang.Object[] r7 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x0286 }
            org.telegram.SQLite.SQLiteCursor r0 = r0.queryFinalized(r6, r7)     // Catch:{ Exception -> 0x0286 }
            boolean r6 = r0.next()     // Catch:{ Exception -> 0x0286 }
            if (r6 == 0) goto L_0x01dd
            int r6 = r0.intValue(r4)     // Catch:{ Exception -> 0x0286 }
            goto L_0x01de
        L_0x01dd:
            r6 = 0
        L_0x01de:
            r0.dispose()     // Catch:{ Exception -> 0x0286 }
            if (r6 <= 0) goto L_0x0223
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0286 }
            java.lang.String r7 = "SELECT count FROM chat_pinned_count WHERE uid = %d"
            java.lang.Object[] r8 = new java.lang.Object[r15]     // Catch:{ Exception -> 0x0286 }
            java.lang.Long r9 = java.lang.Long.valueOf(r2)     // Catch:{ Exception -> 0x0286 }
            r8[r4] = r9     // Catch:{ Exception -> 0x0286 }
            java.lang.String r7 = java.lang.String.format(r5, r7, r8)     // Catch:{ Exception -> 0x0286 }
            java.lang.Object[] r8 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x0286 }
            org.telegram.SQLite.SQLiteCursor r0 = r0.queryFinalized(r7, r8)     // Catch:{ Exception -> 0x0286 }
            boolean r7 = r0.next()     // Catch:{ Exception -> 0x0286 }
            if (r7 == 0) goto L_0x0220
            int r7 = r0.intValue(r4)     // Catch:{ Exception -> 0x0286 }
            org.telegram.SQLite.SQLiteDatabase r8 = r1.database     // Catch:{ Exception -> 0x0286 }
            java.lang.String r9 = "UPDATE chat_pinned_count SET count = ? WHERE uid = ?"
            org.telegram.SQLite.SQLitePreparedStatement r8 = r8.executeFast(r9)     // Catch:{ Exception -> 0x0286 }
            r8.requery()     // Catch:{ Exception -> 0x0286 }
            int r7 = r7 - r6
            int r6 = java.lang.Math.max(r4, r7)     // Catch:{ Exception -> 0x0286 }
            r8.bindInteger(r15, r6)     // Catch:{ Exception -> 0x0286 }
            r6 = 2
            r8.bindLong(r6, r2)     // Catch:{ Exception -> 0x0286 }
            r8.step()     // Catch:{ Exception -> 0x0286 }
            r8.dispose()     // Catch:{ Exception -> 0x0286 }
        L_0x0220:
            r0.dispose()     // Catch:{ Exception -> 0x0286 }
        L_0x0223:
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0286 }
            java.lang.String r6 = "DELETE FROM messages_v2 WHERE uid = %d AND mid <= %d"
            r7 = 2
            java.lang.Object[] r8 = new java.lang.Object[r7]     // Catch:{ Exception -> 0x0286 }
            java.lang.Long r7 = java.lang.Long.valueOf(r2)     // Catch:{ Exception -> 0x0286 }
            r8[r4] = r7     // Catch:{ Exception -> 0x0286 }
            java.lang.Integer r7 = java.lang.Integer.valueOf(r22)     // Catch:{ Exception -> 0x0286 }
            r8[r15] = r7     // Catch:{ Exception -> 0x0286 }
            java.lang.String r6 = java.lang.String.format(r5, r6, r8)     // Catch:{ Exception -> 0x0286 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r6)     // Catch:{ Exception -> 0x0286 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0286 }
            r0.dispose()     // Catch:{ Exception -> 0x0286 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0286 }
            java.lang.String r6 = "DELETE FROM media_v4 WHERE uid = %d AND mid <= %d"
            r7 = 2
            java.lang.Object[] r7 = new java.lang.Object[r7]     // Catch:{ Exception -> 0x0286 }
            java.lang.Long r8 = java.lang.Long.valueOf(r2)     // Catch:{ Exception -> 0x0286 }
            r7[r4] = r8     // Catch:{ Exception -> 0x0286 }
            java.lang.Integer r8 = java.lang.Integer.valueOf(r22)     // Catch:{ Exception -> 0x0286 }
            r7[r15] = r8     // Catch:{ Exception -> 0x0286 }
            java.lang.String r6 = java.lang.String.format(r5, r6, r7)     // Catch:{ Exception -> 0x0286 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r6)     // Catch:{ Exception -> 0x0286 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0286 }
            r0.dispose()     // Catch:{ Exception -> 0x0286 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0286 }
            java.lang.String r6 = "UPDATE media_counts_v2 SET old = 1 WHERE uid = %d"
            java.lang.Object[] r7 = new java.lang.Object[r15]     // Catch:{ Exception -> 0x0286 }
            java.lang.Long r2 = java.lang.Long.valueOf(r2)     // Catch:{ Exception -> 0x0286 }
            r7[r4] = r2     // Catch:{ Exception -> 0x0286 }
            java.lang.String r2 = java.lang.String.format(r5, r6, r7)     // Catch:{ Exception -> 0x0286 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r2)     // Catch:{ Exception -> 0x0286 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0286 }
            r0.dispose()     // Catch:{ Exception -> 0x0286 }
            r1.updateWidgets((java.util.ArrayList<java.lang.Long>) r12)     // Catch:{ Exception -> 0x0286 }
            return r12
        L_0x0286:
            r0 = move-exception
            goto L_0x028e
        L_0x0288:
            r0 = move-exception
            r1 = r19
            goto L_0x028e
        L_0x028c:
            r0 = move-exception
            r1 = r7
        L_0x028e:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
            r0 = 0
            return r0
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$markMessagesAsDeleted$177(long, int, boolean):java.util.ArrayList");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$markMessagesAsDeletedInternal$176(ArrayList arrayList) {
        getFileLoader().cancelLoadFiles(arrayList);
    }

    public ArrayList<Long> markMessagesAsDeleted(long j, int i, boolean z, boolean z2) {
        if (!z) {
            return lambda$markMessagesAsDeleted$177(j, i, z2);
        }
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda80(this, j, i, z2));
        return null;
    }

    private void fixUnsupportedMedia(TLRPC$Message tLRPC$Message) {
        if (tLRPC$Message != null) {
            TLRPC$MessageMedia tLRPC$MessageMedia = tLRPC$Message.media;
            if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaUnsupported_old) {
                if (tLRPC$MessageMedia.bytes.length == 0) {
                    tLRPC$MessageMedia.bytes = Utilities.intToBytes(139);
                }
            } else if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaUnsupported) {
                TLRPC$TL_messageMediaUnsupported_old tLRPC$TL_messageMediaUnsupported_old = new TLRPC$TL_messageMediaUnsupported_old();
                tLRPC$Message.media = tLRPC$TL_messageMediaUnsupported_old;
                tLRPC$TL_messageMediaUnsupported_old.bytes = Utilities.intToBytes(139);
                tLRPC$Message.flags |= 512;
            }
        }
    }

    private void doneHolesInTable(String str, long j, int i) throws Exception {
        if (i == 0) {
            SQLiteDatabase sQLiteDatabase = this.database;
            Locale locale = Locale.US;
            sQLiteDatabase.executeFast(String.format(locale, "DELETE FROM " + str + " WHERE uid = %d", new Object[]{Long.valueOf(j)})).stepThis().dispose();
        } else {
            SQLiteDatabase sQLiteDatabase2 = this.database;
            Locale locale2 = Locale.US;
            sQLiteDatabase2.executeFast(String.format(locale2, "DELETE FROM " + str + " WHERE uid = %d AND start = 0", new Object[]{Long.valueOf(j)})).stepThis().dispose();
        }
        SQLiteDatabase sQLiteDatabase3 = this.database;
        SQLitePreparedStatement executeFast = sQLiteDatabase3.executeFast("REPLACE INTO " + str + " VALUES(?, ?, ?)");
        executeFast.requery();
        executeFast.bindLong(1, j);
        executeFast.bindInteger(2, 1);
        executeFast.bindInteger(3, 1);
        executeFast.step();
        executeFast.dispose();
    }

    public void doneHolesInMedia(long j, int i, int i2) throws Exception {
        if (i2 == -1) {
            if (i == 0) {
                this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_v2 WHERE uid = %d", new Object[]{Long.valueOf(j)})).stepThis().dispose();
            } else {
                this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_v2 WHERE uid = %d AND start = 0", new Object[]{Long.valueOf(j)})).stepThis().dispose();
            }
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
            for (int i3 = 0; i3 < 8; i3++) {
                executeFast.requery();
                executeFast.bindLong(1, j);
                executeFast.bindInteger(2, i3);
                executeFast.bindInteger(3, 1);
                executeFast.bindInteger(4, 1);
                executeFast.step();
            }
            executeFast.dispose();
            return;
        }
        if (i == 0) {
            this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_v2 WHERE uid = %d AND type = %d", new Object[]{Long.valueOf(j), Integer.valueOf(i2)})).stepThis().dispose();
        } else {
            this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_v2 WHERE uid = %d AND type = %d AND start = 0", new Object[]{Long.valueOf(j), Integer.valueOf(i2)})).stepThis().dispose();
        }
        SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
        executeFast2.requery();
        executeFast2.bindLong(1, j);
        executeFast2.bindInteger(2, i2);
        executeFast2.bindInteger(3, 1);
        executeFast2.bindInteger(4, 1);
        executeFast2.step();
        executeFast2.dispose();
    }

    private static class Hole {
        public int end;
        public int start;
        public int type;

        public Hole(int i, int i2) {
            this.start = i;
            this.end = i2;
        }

        public Hole(int i, int i2, int i3) {
            this.type = i;
            this.start = i2;
            this.end = i3;
        }
    }

    public void closeHolesInMedia(long j, int i, int i2, int i3) {
        SQLiteCursor sQLiteCursor;
        long j2 = j;
        int i4 = i;
        int i5 = i2;
        int i6 = 4;
        if (i3 < 0) {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT type, start, end FROM media_holes_v2 WHERE uid = %d AND type >= 0 AND ((end >= %d AND end <= %d) OR (start >= %d AND start <= %d) OR (start >= %d AND end <= %d) OR (start <= %d AND end >= %d))", new Object[]{Long.valueOf(j), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2)}), new Object[0]);
            } catch (Exception e) {
                FileLog.e((Throwable) e);
                return;
            }
        } else {
            sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT type, start, end FROM media_holes_v2 WHERE uid = %d AND type = %d AND ((end >= %d AND end <= %d) OR (start >= %d AND start <= %d) OR (start >= %d AND end <= %d) OR (start <= %d AND end >= %d))", new Object[]{Long.valueOf(j), Integer.valueOf(i3), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2)}), new Object[0]);
        }
        ArrayList arrayList = null;
        while (sQLiteCursor.next()) {
            if (arrayList == null) {
                arrayList = new ArrayList();
            }
            int intValue = sQLiteCursor.intValue(0);
            int intValue2 = sQLiteCursor.intValue(1);
            int intValue3 = sQLiteCursor.intValue(2);
            if (intValue2 != intValue3 || intValue2 != 1) {
                arrayList.add(new Hole(intValue, intValue2, intValue3));
            }
        }
        sQLiteCursor.dispose();
        if (arrayList != null) {
            int i7 = 0;
            while (i7 < arrayList.size()) {
                Hole hole = (Hole) arrayList.get(i7);
                int i8 = hole.end;
                if (i5 >= i8 - 1) {
                    if (i4 <= hole.start + 1) {
                        SQLiteDatabase sQLiteDatabase = this.database;
                        Locale locale = Locale.US;
                        Object[] objArr = new Object[i6];
                        objArr[0] = Long.valueOf(j);
                        objArr[1] = Integer.valueOf(hole.type);
                        objArr[2] = Integer.valueOf(hole.start);
                        objArr[3] = Integer.valueOf(hole.end);
                        sQLiteDatabase.executeFast(String.format(locale, "DELETE FROM media_holes_v2 WHERE uid = %d AND type = %d AND start = %d AND end = %d", objArr)).stepThis().dispose();
                        i6 = 4;
                        i7++;
                    }
                }
                if (i5 >= i8 - 1) {
                    if (i8 != i4) {
                        try {
                            this.database.executeFast(String.format(Locale.US, "UPDATE media_holes_v2 SET end = %d WHERE uid = %d AND type = %d AND start = %d AND end = %d", new Object[]{Integer.valueOf(i), Long.valueOf(j), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end)})).stepThis().dispose();
                        } catch (Exception e2) {
                            FileLog.e((Throwable) e2, false);
                        }
                    }
                    i6 = 4;
                    i7++;
                } else {
                    int i9 = hole.start;
                    if (i4 <= i9 + 1) {
                        if (i9 != i5) {
                            try {
                                this.database.executeFast(String.format(Locale.US, "UPDATE media_holes_v2 SET start = %d WHERE uid = %d AND type = %d AND start = %d AND end = %d", new Object[]{Integer.valueOf(i2), Long.valueOf(j), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end)})).stepThis().dispose();
                            } catch (Exception e3) {
                                FileLog.e((Throwable) e3, false);
                            }
                        }
                        i6 = 4;
                        i7++;
                    } else {
                        this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_v2 WHERE uid = %d AND type = %d AND start = %d AND end = %d", new Object[]{Long.valueOf(j), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end)})).stepThis().dispose();
                        SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
                        executeFast.requery();
                        executeFast.bindLong(1, j2);
                        executeFast.bindInteger(2, hole.type);
                        executeFast.bindInteger(3, hole.start);
                        executeFast.bindInteger(4, i4);
                        executeFast.step();
                        executeFast.requery();
                        executeFast.bindLong(1, j2);
                        executeFast.bindInteger(2, hole.type);
                        executeFast.bindInteger(3, i5);
                        i6 = 4;
                        executeFast.bindInteger(4, hole.end);
                        executeFast.step();
                        executeFast.dispose();
                        i7++;
                    }
                }
            }
        }
    }

    private void closeHolesInTable(String str, long j, int i, int i2) {
        String str2 = str;
        long j2 = j;
        int i3 = i;
        int i4 = i2;
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            Locale locale = Locale.US;
            int i5 = 1;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized(String.format(locale, "SELECT start, end FROM " + str2 + " WHERE uid = %d AND ((end >= %d AND end <= %d) OR (start >= %d AND start <= %d) OR (start >= %d AND end <= %d) OR (start <= %d AND end >= %d))", new Object[]{Long.valueOf(j), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2)}), new Object[0]);
            ArrayList arrayList = null;
            while (queryFinalized.next()) {
                if (arrayList == null) {
                    arrayList = new ArrayList();
                }
                int intValue = queryFinalized.intValue(0);
                int intValue2 = queryFinalized.intValue(1);
                if (intValue != intValue2 || intValue != 1) {
                    arrayList.add(new Hole(intValue, intValue2));
                }
            }
            queryFinalized.dispose();
            if (arrayList != null) {
                int i6 = 0;
                while (i6 < arrayList.size()) {
                    Hole hole = (Hole) arrayList.get(i6);
                    int i7 = hole.end;
                    if (i4 >= i7 - 1) {
                        if (i3 <= hole.start + i5) {
                            SQLiteDatabase sQLiteDatabase2 = this.database;
                            Locale locale2 = Locale.US;
                            sQLiteDatabase2.executeFast(String.format(locale2, "DELETE FROM " + str2 + " WHERE uid = %d AND start = %d AND end = %d", new Object[]{Long.valueOf(j), Integer.valueOf(hole.start), Integer.valueOf(hole.end)})).stepThis().dispose();
                            i6++;
                            i5 = 1;
                        }
                    }
                    if (i4 >= i7 - 1) {
                        if (i7 != i3) {
                            try {
                                SQLiteDatabase sQLiteDatabase3 = this.database;
                                Locale locale3 = Locale.US;
                                sQLiteDatabase3.executeFast(String.format(locale3, "UPDATE " + str2 + " SET end = %d WHERE uid = %d AND start = %d AND end = %d", new Object[]{Integer.valueOf(i), Long.valueOf(j), Integer.valueOf(hole.start), Integer.valueOf(hole.end)})).stepThis().dispose();
                            } catch (Exception e) {
                                FileLog.e((Throwable) e, false);
                            }
                        }
                        i6++;
                        i5 = 1;
                    } else {
                        int i8 = hole.start;
                        if (i3 <= i8 + 1) {
                            if (i8 != i4) {
                                try {
                                    SQLiteDatabase sQLiteDatabase4 = this.database;
                                    Locale locale4 = Locale.US;
                                    sQLiteDatabase4.executeFast(String.format(locale4, "UPDATE " + str2 + " SET start = %d WHERE uid = %d AND start = %d AND end = %d", new Object[]{Integer.valueOf(i2), Long.valueOf(j), Integer.valueOf(hole.start), Integer.valueOf(hole.end)})).stepThis().dispose();
                                } catch (Exception e2) {
                                    FileLog.e((Throwable) e2, false);
                                }
                            }
                            i6++;
                            i5 = 1;
                        } else {
                            SQLiteDatabase sQLiteDatabase5 = this.database;
                            Locale locale5 = Locale.US;
                            sQLiteDatabase5.executeFast(String.format(locale5, "DELETE FROM " + str2 + " WHERE uid = %d AND start = %d AND end = %d", new Object[]{Long.valueOf(j), Integer.valueOf(hole.start), Integer.valueOf(hole.end)})).stepThis().dispose();
                            SQLiteDatabase sQLiteDatabase6 = this.database;
                            SQLitePreparedStatement executeFast = sQLiteDatabase6.executeFast("REPLACE INTO " + str2 + " VALUES(?, ?, ?)");
                            executeFast.requery();
                            executeFast.bindLong(1, j2);
                            executeFast.bindInteger(2, hole.start);
                            executeFast.bindInteger(3, i3);
                            executeFast.step();
                            executeFast.requery();
                            executeFast.bindLong(1, j2);
                            executeFast.bindInteger(2, i4);
                            executeFast.bindInteger(3, hole.end);
                            executeFast.step();
                            executeFast.dispose();
                            i6++;
                            i5 = 1;
                        }
                    }
                }
            }
        } catch (Exception e3) {
            FileLog.e((Throwable) e3);
        }
    }

    public void replaceMessageIfExists(TLRPC$Message tLRPC$Message, ArrayList<TLRPC$User> arrayList, ArrayList<TLRPC$Chat> arrayList2, boolean z) {
        if (tLRPC$Message != null) {
            this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda177(this, tLRPC$Message, z, arrayList, arrayList2));
        }
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v1, resolved type: org.telegram.SQLite.SQLiteCursor} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v2, resolved type: org.telegram.tgnet.NativeByteBuffer} */
    /* JADX WARNING: type inference failed for: r2v0 */
    /* JADX WARNING: type inference failed for: r2v11 */
    /* JADX WARNING: type inference failed for: r2v12 */
    /* access modifiers changed from: private */
    /* JADX WARNING: Multi-variable type inference failed */
    /* JADX WARNING: Removed duplicated region for block: B:20:0x0049 A[SYNTHETIC, Splitter:B:20:0x0049] */
    /* JADX WARNING: Removed duplicated region for block: B:25:0x006a A[Catch:{ Exception -> 0x01c2 }] */
    /* JADX WARNING: Removed duplicated region for block: B:28:0x00a4 A[Catch:{ Exception -> 0x01c2 }] */
    /* JADX WARNING: Removed duplicated region for block: B:35:0x00be A[Catch:{ Exception -> 0x01c2 }] */
    /* JADX WARNING: Removed duplicated region for block: B:36:0x00c4 A[Catch:{ Exception -> 0x01c2 }] */
    /* JADX WARNING: Removed duplicated region for block: B:39:0x00cf A[Catch:{ Exception -> 0x01c2 }] */
    /* JADX WARNING: Removed duplicated region for block: B:40:0x00d1 A[Catch:{ Exception -> 0x01c2 }] */
    /* JADX WARNING: Removed duplicated region for block: B:45:0x00e1 A[Catch:{ Exception -> 0x01c2 }] */
    /* JADX WARNING: Removed duplicated region for block: B:46:0x00e3 A[Catch:{ Exception -> 0x01c2 }] */
    /* JADX WARNING: Removed duplicated region for block: B:49:0x00f4 A[Catch:{ Exception -> 0x01c2 }] */
    /* JADX WARNING: Removed duplicated region for block: B:50:0x0108 A[Catch:{ Exception -> 0x01c2 }] */
    /* JADX WARNING: Removed duplicated region for block: B:53:0x0111 A[Catch:{ Exception -> 0x01c2 }] */
    /* JADX WARNING: Removed duplicated region for block: B:58:0x011c A[Catch:{ Exception -> 0x01c2 }] */
    /* JADX WARNING: Removed duplicated region for block: B:61:0x0131 A[Catch:{ Exception -> 0x01c2 }] */
    /* JADX WARNING: Removed duplicated region for block: B:63:0x0152 A[Catch:{ Exception -> 0x01c2 }] */
    /* JADX WARNING: Removed duplicated region for block: B:66:0x0165 A[Catch:{ Exception -> 0x01c2 }] */
    /* JADX WARNING: Removed duplicated region for block: B:79:0x01c8 A[Catch:{ Exception -> 0x01c2 }] */
    /* JADX WARNING: Removed duplicated region for block: B:85:? A[RETURN, SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$replaceMessageIfExists$179(org.telegram.tgnet.TLRPC$Message r16, boolean r17, java.util.ArrayList r18, java.util.ArrayList r19) {
        /*
            r15 = this;
            r1 = r15
            r4 = r16
            r2 = 0
            r3 = 2
            r5 = 1
            r6 = 0
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0042, all -> 0x003f }
            java.util.Locale r7 = java.util.Locale.US     // Catch:{ Exception -> 0x0042, all -> 0x003f }
            java.lang.String r8 = "SELECT uid, read_state FROM messages_v2 WHERE mid = %d AND uid = %d LIMIT 1"
            java.lang.Object[] r9 = new java.lang.Object[r3]     // Catch:{ Exception -> 0x0042, all -> 0x003f }
            int r10 = r4.id     // Catch:{ Exception -> 0x0042, all -> 0x003f }
            java.lang.Integer r10 = java.lang.Integer.valueOf(r10)     // Catch:{ Exception -> 0x0042, all -> 0x003f }
            r9[r6] = r10     // Catch:{ Exception -> 0x0042, all -> 0x003f }
            long r10 = org.telegram.messenger.MessageObject.getDialogId(r16)     // Catch:{ Exception -> 0x0042, all -> 0x003f }
            java.lang.Long r10 = java.lang.Long.valueOf(r10)     // Catch:{ Exception -> 0x0042, all -> 0x003f }
            r9[r5] = r10     // Catch:{ Exception -> 0x0042, all -> 0x003f }
            java.lang.String r7 = java.lang.String.format(r7, r8, r9)     // Catch:{ Exception -> 0x0042, all -> 0x003f }
            java.lang.Object[] r8 = new java.lang.Object[r6]     // Catch:{ Exception -> 0x0042, all -> 0x003f }
            org.telegram.SQLite.SQLiteCursor r7 = r0.queryFinalized(r7, r8)     // Catch:{ Exception -> 0x0042, all -> 0x003f }
            boolean r0 = r7.next()     // Catch:{ Exception -> 0x003d }
            if (r0 != 0) goto L_0x0035
            r7.dispose()     // Catch:{ Exception -> 0x01c2 }
            return
        L_0x0035:
            int r0 = r7.intValue(r5)     // Catch:{ Exception -> 0x003d }
            r7.dispose()     // Catch:{ Exception -> 0x01c2 }
            goto L_0x004d
        L_0x003d:
            r0 = move-exception
            goto L_0x0044
        L_0x003f:
            r0 = move-exception
            goto L_0x01c6
        L_0x0042:
            r0 = move-exception
            r7 = r2
        L_0x0044:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ all -> 0x01c4 }
            if (r7 == 0) goto L_0x004c
            r7.dispose()     // Catch:{ Exception -> 0x01c2 }
        L_0x004c:
            r0 = 0
        L_0x004d:
            org.telegram.SQLite.SQLiteDatabase r7 = r1.database     // Catch:{ Exception -> 0x01c2 }
            r7.beginTransaction()     // Catch:{ Exception -> 0x01c2 }
            org.telegram.SQLite.SQLiteDatabase r7 = r1.database     // Catch:{ Exception -> 0x01c2 }
            java.lang.String r8 = "REPLACE INTO messages_v2 VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, NULL, ?, ?, ?, ?, ?, ?, 0)"
            org.telegram.SQLite.SQLitePreparedStatement r7 = r7.executeFast(r8)     // Catch:{ Exception -> 0x01c2 }
            org.telegram.SQLite.SQLiteDatabase r8 = r1.database     // Catch:{ Exception -> 0x01c2 }
            java.lang.String r9 = "REPLACE INTO media_v4 VALUES(?, ?, ?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r8 = r8.executeFast(r9)     // Catch:{ Exception -> 0x01c2 }
            long r9 = r4.dialog_id     // Catch:{ Exception -> 0x01c2 }
            r11 = 0
            int r13 = (r9 > r11 ? 1 : (r9 == r11 ? 0 : -1))
            if (r13 != 0) goto L_0x006d
            org.telegram.messenger.MessageObject.getDialogId(r16)     // Catch:{ Exception -> 0x01c2 }
        L_0x006d:
            r15.fixUnsupportedMedia(r16)     // Catch:{ Exception -> 0x01c2 }
            r7.requery()     // Catch:{ Exception -> 0x01c2 }
            org.telegram.tgnet.NativeByteBuffer r9 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x01c2 }
            int r10 = r16.getObjectSize()     // Catch:{ Exception -> 0x01c2 }
            r9.<init>((int) r10)     // Catch:{ Exception -> 0x01c2 }
            r4.serializeToStream(r9)     // Catch:{ Exception -> 0x01c2 }
            int r10 = r4.id     // Catch:{ Exception -> 0x01c2 }
            r7.bindInteger(r5, r10)     // Catch:{ Exception -> 0x01c2 }
            long r10 = r4.dialog_id     // Catch:{ Exception -> 0x01c2 }
            r7.bindLong(r3, r10)     // Catch:{ Exception -> 0x01c2 }
            r10 = 3
            r7.bindInteger(r10, r0)     // Catch:{ Exception -> 0x01c2 }
            int r0 = r4.send_state     // Catch:{ Exception -> 0x01c2 }
            r11 = 4
            r7.bindInteger(r11, r0)     // Catch:{ Exception -> 0x01c2 }
            int r0 = r4.date     // Catch:{ Exception -> 0x01c2 }
            r12 = 5
            r7.bindInteger(r12, r0)     // Catch:{ Exception -> 0x01c2 }
            r0 = 6
            r7.bindByteBuffer((int) r0, (org.telegram.tgnet.NativeByteBuffer) r9)     // Catch:{ Exception -> 0x01c2 }
            r0 = 7
            boolean r13 = org.telegram.messenger.MessageObject.isOut(r16)     // Catch:{ Exception -> 0x01c2 }
            if (r13 != 0) goto L_0x00ab
            boolean r13 = r4.from_scheduled     // Catch:{ Exception -> 0x01c2 }
            if (r13 == 0) goto L_0x00a9
            goto L_0x00ab
        L_0x00a9:
            r13 = 0
            goto L_0x00ac
        L_0x00ab:
            r13 = 1
        L_0x00ac:
            r7.bindInteger(r0, r13)     // Catch:{ Exception -> 0x01c2 }
            r0 = 8
            int r13 = r4.ttl     // Catch:{ Exception -> 0x01c2 }
            r7.bindInteger(r0, r13)     // Catch:{ Exception -> 0x01c2 }
            int r0 = r4.flags     // Catch:{ Exception -> 0x01c2 }
            r0 = r0 & 1024(0x400, float:1.435E-42)
            r13 = 9
            if (r0 == 0) goto L_0x00c4
            int r0 = r4.views     // Catch:{ Exception -> 0x01c2 }
            r7.bindInteger(r13, r0)     // Catch:{ Exception -> 0x01c2 }
            goto L_0x00cb
        L_0x00c4:
            int r0 = r15.getMessageMediaType(r16)     // Catch:{ Exception -> 0x01c2 }
            r7.bindInteger(r13, r0)     // Catch:{ Exception -> 0x01c2 }
        L_0x00cb:
            int r0 = r4.stickerVerified     // Catch:{ Exception -> 0x01c2 }
            if (r0 != 0) goto L_0x00d1
            r0 = 1
            goto L_0x00d6
        L_0x00d1:
            if (r0 != r3) goto L_0x00d5
            r0 = 2
            goto L_0x00d6
        L_0x00d5:
            r0 = 0
        L_0x00d6:
            r13 = 10
            r7.bindInteger(r13, r0)     // Catch:{ Exception -> 0x01c2 }
            r0 = 11
            boolean r13 = r4.mentioned     // Catch:{ Exception -> 0x01c2 }
            if (r13 == 0) goto L_0x00e3
            r13 = 1
            goto L_0x00e4
        L_0x00e3:
            r13 = 0
        L_0x00e4:
            r7.bindInteger(r0, r13)     // Catch:{ Exception -> 0x01c2 }
            r0 = 12
            int r13 = r4.forwards     // Catch:{ Exception -> 0x01c2 }
            r7.bindInteger(r0, r13)     // Catch:{ Exception -> 0x01c2 }
            org.telegram.tgnet.TLRPC$MessageReplies r0 = r4.replies     // Catch:{ Exception -> 0x01c2 }
            r13 = 13
            if (r0 == 0) goto L_0x0108
            org.telegram.tgnet.NativeByteBuffer r2 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x01c2 }
            org.telegram.tgnet.TLRPC$MessageReplies r0 = r4.replies     // Catch:{ Exception -> 0x01c2 }
            int r0 = r0.getObjectSize()     // Catch:{ Exception -> 0x01c2 }
            r2.<init>((int) r0)     // Catch:{ Exception -> 0x01c2 }
            org.telegram.tgnet.TLRPC$MessageReplies r0 = r4.replies     // Catch:{ Exception -> 0x01c2 }
            r0.serializeToStream(r2)     // Catch:{ Exception -> 0x01c2 }
            r7.bindByteBuffer((int) r13, (org.telegram.tgnet.NativeByteBuffer) r2)     // Catch:{ Exception -> 0x01c2 }
            goto L_0x010b
        L_0x0108:
            r7.bindNull(r13)     // Catch:{ Exception -> 0x01c2 }
        L_0x010b:
            org.telegram.tgnet.TLRPC$TL_messageReplyHeader r0 = r4.reply_to     // Catch:{ Exception -> 0x01c2 }
            r13 = 14
            if (r0 == 0) goto L_0x011c
            int r14 = r0.reply_to_top_id     // Catch:{ Exception -> 0x01c2 }
            if (r14 == 0) goto L_0x0116
            goto L_0x0118
        L_0x0116:
            int r14 = r0.reply_to_msg_id     // Catch:{ Exception -> 0x01c2 }
        L_0x0118:
            r7.bindInteger(r13, r14)     // Catch:{ Exception -> 0x01c2 }
            goto L_0x011f
        L_0x011c:
            r7.bindInteger(r13, r6)     // Catch:{ Exception -> 0x01c2 }
        L_0x011f:
            r0 = 15
            long r13 = org.telegram.messenger.MessageObject.getChannelId(r16)     // Catch:{ Exception -> 0x01c2 }
            r7.bindLong(r0, r13)     // Catch:{ Exception -> 0x01c2 }
            r7.step()     // Catch:{ Exception -> 0x01c2 }
            boolean r0 = org.telegram.messenger.MediaDataController.canAddMessageToMedia(r16)     // Catch:{ Exception -> 0x01c2 }
            if (r0 == 0) goto L_0x0150
            r8.requery()     // Catch:{ Exception -> 0x01c2 }
            int r0 = r4.id     // Catch:{ Exception -> 0x01c2 }
            r8.bindInteger(r5, r0)     // Catch:{ Exception -> 0x01c2 }
            long r13 = r4.dialog_id     // Catch:{ Exception -> 0x01c2 }
            r8.bindLong(r3, r13)     // Catch:{ Exception -> 0x01c2 }
            int r0 = r4.date     // Catch:{ Exception -> 0x01c2 }
            r8.bindInteger(r10, r0)     // Catch:{ Exception -> 0x01c2 }
            int r0 = org.telegram.messenger.MediaDataController.getMediaType(r16)     // Catch:{ Exception -> 0x01c2 }
            r8.bindInteger(r11, r0)     // Catch:{ Exception -> 0x01c2 }
            r8.bindByteBuffer((int) r12, (org.telegram.tgnet.NativeByteBuffer) r9)     // Catch:{ Exception -> 0x01c2 }
            r8.step()     // Catch:{ Exception -> 0x01c2 }
        L_0x0150:
            if (r2 == 0) goto L_0x0155
            r2.reuse()     // Catch:{ Exception -> 0x01c2 }
        L_0x0155:
            r9.reuse()     // Catch:{ Exception -> 0x01c2 }
            r7.dispose()     // Catch:{ Exception -> 0x01c2 }
            r8.dispose()     // Catch:{ Exception -> 0x01c2 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x01c2 }
            r0.commitTransaction()     // Catch:{ Exception -> 0x01c2 }
            if (r17 == 0) goto L_0x01cf
            java.util.HashMap r5 = new java.util.HashMap     // Catch:{ Exception -> 0x01c2 }
            r5.<init>()     // Catch:{ Exception -> 0x01c2 }
            java.util.HashMap r0 = new java.util.HashMap     // Catch:{ Exception -> 0x01c2 }
            r0.<init>()     // Catch:{ Exception -> 0x01c2 }
            r2 = 0
        L_0x0170:
            int r3 = r18.size()     // Catch:{ Exception -> 0x01c2 }
            if (r2 >= r3) goto L_0x018a
            r3 = r18
            java.lang.Object r7 = r3.get(r2)     // Catch:{ Exception -> 0x01c2 }
            org.telegram.tgnet.TLRPC$User r7 = (org.telegram.tgnet.TLRPC$User) r7     // Catch:{ Exception -> 0x01c2 }
            long r8 = r7.id     // Catch:{ Exception -> 0x01c2 }
            java.lang.Long r8 = java.lang.Long.valueOf(r8)     // Catch:{ Exception -> 0x01c2 }
            r5.put(r8, r7)     // Catch:{ Exception -> 0x01c2 }
            int r2 = r2 + 1
            goto L_0x0170
        L_0x018a:
            int r2 = r19.size()     // Catch:{ Exception -> 0x01c2 }
            if (r6 >= r2) goto L_0x01a4
            r2 = r19
            java.lang.Object r3 = r2.get(r6)     // Catch:{ Exception -> 0x01c2 }
            org.telegram.tgnet.TLRPC$Chat r3 = (org.telegram.tgnet.TLRPC$Chat) r3     // Catch:{ Exception -> 0x01c2 }
            long r7 = r3.id     // Catch:{ Exception -> 0x01c2 }
            java.lang.Long r7 = java.lang.Long.valueOf(r7)     // Catch:{ Exception -> 0x01c2 }
            r0.put(r7, r3)     // Catch:{ Exception -> 0x01c2 }
            int r6 = r6 + 1
            goto L_0x018a
        L_0x01a4:
            org.telegram.messenger.MessageObject r9 = new org.telegram.messenger.MessageObject     // Catch:{ Exception -> 0x01c2 }
            int r3 = r1.currentAccount     // Catch:{ Exception -> 0x01c2 }
            r7 = 1
            r8 = 1
            r2 = r9
            r4 = r16
            r6 = r0
            r2.<init>((int) r3, (org.telegram.tgnet.TLRPC$Message) r4, (java.util.AbstractMap<java.lang.Long, org.telegram.tgnet.TLRPC$User>) r5, (java.util.AbstractMap<java.lang.Long, org.telegram.tgnet.TLRPC$Chat>) r6, (boolean) r7, (boolean) r8)     // Catch:{ Exception -> 0x01c2 }
            java.util.ArrayList r0 = new java.util.ArrayList     // Catch:{ Exception -> 0x01c2 }
            r0.<init>()     // Catch:{ Exception -> 0x01c2 }
            r0.add(r9)     // Catch:{ Exception -> 0x01c2 }
            org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda156 r2 = new org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda156     // Catch:{ Exception -> 0x01c2 }
            r2.<init>(r15, r9, r0)     // Catch:{ Exception -> 0x01c2 }
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r2)     // Catch:{ Exception -> 0x01c2 }
            goto L_0x01cf
        L_0x01c2:
            r0 = move-exception
            goto L_0x01cc
        L_0x01c4:
            r0 = move-exception
            r2 = r7
        L_0x01c6:
            if (r2 == 0) goto L_0x01cb
            r2.dispose()     // Catch:{ Exception -> 0x01c2 }
        L_0x01cb:
            throw r0     // Catch:{ Exception -> 0x01c2 }
        L_0x01cc:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
        L_0x01cf:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$replaceMessageIfExists$179(org.telegram.tgnet.TLRPC$Message, boolean, java.util.ArrayList, java.util.ArrayList):void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$replaceMessageIfExists$178(MessageObject messageObject, ArrayList arrayList) {
        getNotificationCenter().postNotificationName(NotificationCenter.replaceMessagesObjects, Long.valueOf(messageObject.getDialogId()), arrayList);
    }

    public void putMessages(TLRPC$messages_Messages tLRPC$messages_Messages, long j, int i, int i2, boolean z, boolean z2) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda192(this, z2, j, tLRPC$messages_Messages, i, i2, z));
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Code restructure failed: missing block: B:59:0x023b, code lost:
        if (r4.id == r2.id) goto L_0x023d;
     */
    /* JADX WARNING: Removed duplicated region for block: B:122:0x0424 A[Catch:{ Exception -> 0x06ab }] */
    /* JADX WARNING: Removed duplicated region for block: B:123:0x042c A[Catch:{ Exception -> 0x06ab }] */
    /* JADX WARNING: Removed duplicated region for block: B:126:0x0439 A[Catch:{ Exception -> 0x06ab }] */
    /* JADX WARNING: Removed duplicated region for block: B:127:0x043d A[Catch:{ Exception -> 0x06ab }] */
    /* JADX WARNING: Removed duplicated region for block: B:133:0x044e A[Catch:{ Exception -> 0x06ab }] */
    /* JADX WARNING: Removed duplicated region for block: B:134:0x0450 A[Catch:{ Exception -> 0x06ab }] */
    /* JADX WARNING: Removed duplicated region for block: B:137:0x0461 A[Catch:{ Exception -> 0x06ab }] */
    /* JADX WARNING: Removed duplicated region for block: B:138:0x0478 A[Catch:{ Exception -> 0x06ab }] */
    /* JADX WARNING: Removed duplicated region for block: B:141:0x0482 A[Catch:{ Exception -> 0x06ab }] */
    /* JADX WARNING: Removed duplicated region for block: B:146:0x048f A[Catch:{ Exception -> 0x06ab }] */
    /* JADX WARNING: Removed duplicated region for block: B:149:0x04a7 A[Catch:{ Exception -> 0x06ab }] */
    /* JADX WARNING: Removed duplicated region for block: B:150:0x04ca A[Catch:{ Exception -> 0x06ab }] */
    /* JADX WARNING: Removed duplicated region for block: B:160:0x0524 A[Catch:{ Exception -> 0x06ab }] */
    /* JADX WARNING: Removed duplicated region for block: B:165:0x0532 A[Catch:{ Exception -> 0x06ab }] */
    /* JADX WARNING: Removed duplicated region for block: B:169:0x056b A[Catch:{ Exception -> 0x06ab }] */
    /* JADX WARNING: Removed duplicated region for block: B:172:0x0572 A[Catch:{ Exception -> 0x06ab }] */
    /* JADX WARNING: Removed duplicated region for block: B:176:0x05a0 A[Catch:{ Exception -> 0x06ab }] */
    /* JADX WARNING: Removed duplicated region for block: B:186:0x05d9 A[Catch:{ Exception -> 0x06ab }] */
    /* JADX WARNING: Removed duplicated region for block: B:191:0x05e7 A[Catch:{ Exception -> 0x06ab }] */
    /* JADX WARNING: Removed duplicated region for block: B:74:0x025d A[Catch:{ Exception -> 0x06ab }] */
    /* JADX WARNING: Removed duplicated region for block: B:78:0x0286 A[Catch:{ Exception -> 0x06ab }] */
    /* JADX WARNING: Removed duplicated region for block: B:79:0x0288 A[Catch:{ Exception -> 0x06ab }] */
    /* JADX WARNING: Removed duplicated region for block: B:82:0x0291 A[Catch:{ Exception -> 0x06ab }] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$putMessages$181(boolean r39, long r40, org.telegram.tgnet.TLRPC$messages_Messages r42, int r43, int r44, boolean r45) {
        /*
            r38 = this;
            r9 = r38
            r7 = r40
            r10 = r42
            r11 = r43
            r0 = r44
            r12 = 6
            r13 = 5
            r14 = 4
            r15 = 3
            r6 = 2
            r5 = 1
            r3 = 0
            if (r39 == 0) goto L_0x009d
            org.telegram.SQLite.SQLiteDatabase r0 = r9.database     // Catch:{ Exception -> 0x06ab }
            java.util.Locale r1 = java.util.Locale.US     // Catch:{ Exception -> 0x06ab }
            java.lang.String r2 = "DELETE FROM scheduled_messages_v2 WHERE uid = %d AND mid > 0"
            java.lang.Object[] r4 = new java.lang.Object[r5]     // Catch:{ Exception -> 0x06ab }
            java.lang.Long r11 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x06ab }
            r4[r3] = r11     // Catch:{ Exception -> 0x06ab }
            java.lang.String r1 = java.lang.String.format(r1, r2, r4)     // Catch:{ Exception -> 0x06ab }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r1)     // Catch:{ Exception -> 0x06ab }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x06ab }
            r0.dispose()     // Catch:{ Exception -> 0x06ab }
            org.telegram.SQLite.SQLiteDatabase r0 = r9.database     // Catch:{ Exception -> 0x06ab }
            java.lang.String r1 = "REPLACE INTO scheduled_messages_v2 VALUES(?, ?, ?, ?, ?, ?, NULL, 0)"
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r1)     // Catch:{ Exception -> 0x06ab }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r10.messages     // Catch:{ Exception -> 0x06ab }
            int r1 = r1.size()     // Catch:{ Exception -> 0x06ab }
        L_0x003e:
            if (r3 >= r1) goto L_0x0082
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r2 = r10.messages     // Catch:{ Exception -> 0x06ab }
            java.lang.Object r2 = r2.get(r3)     // Catch:{ Exception -> 0x06ab }
            org.telegram.tgnet.TLRPC$Message r2 = (org.telegram.tgnet.TLRPC$Message) r2     // Catch:{ Exception -> 0x06ab }
            boolean r4 = r2 instanceof org.telegram.tgnet.TLRPC$TL_messageEmpty     // Catch:{ Exception -> 0x06ab }
            if (r4 == 0) goto L_0x004d
            goto L_0x007f
        L_0x004d:
            r9.fixUnsupportedMedia(r2)     // Catch:{ Exception -> 0x06ab }
            r0.requery()     // Catch:{ Exception -> 0x06ab }
            org.telegram.tgnet.NativeByteBuffer r4 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x06ab }
            int r11 = r2.getObjectSize()     // Catch:{ Exception -> 0x06ab }
            r4.<init>((int) r11)     // Catch:{ Exception -> 0x06ab }
            r2.serializeToStream(r4)     // Catch:{ Exception -> 0x06ab }
            int r11 = r2.id     // Catch:{ Exception -> 0x06ab }
            r0.bindInteger(r5, r11)     // Catch:{ Exception -> 0x06ab }
            r0.bindLong(r6, r7)     // Catch:{ Exception -> 0x06ab }
            int r11 = r2.send_state     // Catch:{ Exception -> 0x06ab }
            r0.bindInteger(r15, r11)     // Catch:{ Exception -> 0x06ab }
            int r11 = r2.date     // Catch:{ Exception -> 0x06ab }
            r0.bindInteger(r14, r11)     // Catch:{ Exception -> 0x06ab }
            r0.bindByteBuffer((int) r13, (org.telegram.tgnet.NativeByteBuffer) r4)     // Catch:{ Exception -> 0x06ab }
            int r2 = r2.ttl     // Catch:{ Exception -> 0x06ab }
            r0.bindInteger(r12, r2)     // Catch:{ Exception -> 0x06ab }
            r0.step()     // Catch:{ Exception -> 0x06ab }
            r4.reuse()     // Catch:{ Exception -> 0x06ab }
        L_0x007f:
            int r3 = r3 + 1
            goto L_0x003e
        L_0x0082:
            r0.dispose()     // Catch:{ Exception -> 0x06ab }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r0 = r10.users     // Catch:{ Exception -> 0x06ab }
            r9.putUsersInternal(r0)     // Catch:{ Exception -> 0x06ab }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r0 = r10.chats     // Catch:{ Exception -> 0x06ab }
            r9.putChatsInternal(r0)     // Catch:{ Exception -> 0x06ab }
            org.telegram.SQLite.SQLiteDatabase r0 = r9.database     // Catch:{ Exception -> 0x06ab }
            r0.commitTransaction()     // Catch:{ Exception -> 0x06ab }
            java.lang.Long r0 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x06ab }
            r9.broadcastScheduledMessagesChange(r0)     // Catch:{ Exception -> 0x06ab }
            goto L_0x06af
        L_0x009d:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r10.messages     // Catch:{ Exception -> 0x06ab }
            boolean r1 = r1.isEmpty()     // Catch:{ Exception -> 0x06ab }
            r4 = -1
            if (r1 == 0) goto L_0x00b1
            if (r11 != 0) goto L_0x00b0
            java.lang.String r1 = "messages_holes"
            r9.doneHolesInTable(r1, r7, r0)     // Catch:{ Exception -> 0x06ab }
            r9.doneHolesInMedia(r7, r0, r4)     // Catch:{ Exception -> 0x06ab }
        L_0x00b0:
            return
        L_0x00b1:
            org.telegram.SQLite.SQLiteDatabase r1 = r9.database     // Catch:{ Exception -> 0x06ab }
            r1.beginTransaction()     // Catch:{ Exception -> 0x06ab }
            if (r11 != 0) goto L_0x00ed
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r10.messages     // Catch:{ Exception -> 0x06ab }
            int r16 = r1.size()     // Catch:{ Exception -> 0x06ab }
            int r2 = r16 + -1
            java.lang.Object r1 = r1.get(r2)     // Catch:{ Exception -> 0x06ab }
            org.telegram.tgnet.TLRPC$Message r1 = (org.telegram.tgnet.TLRPC$Message) r1     // Catch:{ Exception -> 0x06ab }
            int r2 = r1.id     // Catch:{ Exception -> 0x06ab }
            java.lang.String r16 = "messages_holes"
            r1 = r38
            r17 = r2
            r12 = 2147483647(0x7fffffff, float:NaN)
            r2 = r16
            r12 = 0
            r3 = r40
            r13 = 1
            r5 = r17
            r14 = 2
            r6 = r44
            r1.closeHolesInTable(r2, r3, r5, r6)     // Catch:{ Exception -> 0x06ab }
            r6 = -1
            r1 = r38
            r2 = r40
            r4 = r17
            r5 = r44
            r1.closeHolesInMedia(r2, r4, r5, r6)     // Catch:{ Exception -> 0x06ab }
            goto L_0x0158
        L_0x00ed:
            r12 = 0
            r13 = 1
            r14 = 2
            if (r11 != r13) goto L_0x0116
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r10.messages     // Catch:{ Exception -> 0x06ab }
            java.lang.Object r1 = r1.get(r12)     // Catch:{ Exception -> 0x06ab }
            org.telegram.tgnet.TLRPC$Message r1 = (org.telegram.tgnet.TLRPC$Message) r1     // Catch:{ Exception -> 0x06ab }
            int r6 = r1.id     // Catch:{ Exception -> 0x06ab }
            java.lang.String r2 = "messages_holes"
            r1 = r38
            r3 = r40
            r5 = r44
            r17 = r6
            r1.closeHolesInTable(r2, r3, r5, r6)     // Catch:{ Exception -> 0x06ab }
            r6 = -1
            r1 = r38
            r2 = r40
            r4 = r44
            r5 = r17
            r1.closeHolesInMedia(r2, r4, r5, r6)     // Catch:{ Exception -> 0x06ab }
            goto L_0x0158
        L_0x0116:
            if (r11 == r15) goto L_0x011e
            if (r11 == r14) goto L_0x011e
            r1 = 4
            if (r11 != r1) goto L_0x0158
            goto L_0x011f
        L_0x011e:
            r1 = 4
        L_0x011f:
            if (r0 != 0) goto L_0x0127
            if (r11 == r1) goto L_0x0127
            r0 = 2147483647(0x7fffffff, float:NaN)
            goto L_0x0131
        L_0x0127:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r0 = r10.messages     // Catch:{ Exception -> 0x06ab }
            java.lang.Object r0 = r0.get(r12)     // Catch:{ Exception -> 0x06ab }
            org.telegram.tgnet.TLRPC$Message r0 = (org.telegram.tgnet.TLRPC$Message) r0     // Catch:{ Exception -> 0x06ab }
            int r0 = r0.id     // Catch:{ Exception -> 0x06ab }
        L_0x0131:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r10.messages     // Catch:{ Exception -> 0x06ab }
            int r2 = r1.size()     // Catch:{ Exception -> 0x06ab }
            int r2 = r2 - r13
            java.lang.Object r1 = r1.get(r2)     // Catch:{ Exception -> 0x06ab }
            org.telegram.tgnet.TLRPC$Message r1 = (org.telegram.tgnet.TLRPC$Message) r1     // Catch:{ Exception -> 0x06ab }
            int r6 = r1.id     // Catch:{ Exception -> 0x06ab }
            java.lang.String r2 = "messages_holes"
            r1 = r38
            r3 = r40
            r5 = r6
            r17 = r6
            r6 = r0
            r1.closeHolesInTable(r2, r3, r5, r6)     // Catch:{ Exception -> 0x06ab }
            r6 = -1
            r1 = r38
            r2 = r40
            r4 = r17
            r5 = r0
            r1.closeHolesInMedia(r2, r4, r5, r6)     // Catch:{ Exception -> 0x06ab }
        L_0x0158:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r0 = r10.messages     // Catch:{ Exception -> 0x06ab }
            int r6 = r0.size()     // Catch:{ Exception -> 0x06ab }
            java.util.ArrayList r5 = new java.util.ArrayList     // Catch:{ Exception -> 0x06ab }
            r5.<init>()     // Catch:{ Exception -> 0x06ab }
            java.util.ArrayList r4 = new java.util.ArrayList     // Catch:{ Exception -> 0x06ab }
            r4.<init>()     // Catch:{ Exception -> 0x06ab }
            java.util.ArrayList r3 = new java.util.ArrayList     // Catch:{ Exception -> 0x06ab }
            r3.<init>()     // Catch:{ Exception -> 0x06ab }
            org.telegram.SQLite.SQLiteDatabase r0 = r9.database     // Catch:{ Exception -> 0x06ab }
            java.lang.String r1 = "REPLACE INTO messages_v2 VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, NULL, ?, ?, ?, ?, ?, ?, 0)"
            org.telegram.SQLite.SQLitePreparedStatement r2 = r0.executeFast(r1)     // Catch:{ Exception -> 0x06ab }
            org.telegram.SQLite.SQLiteDatabase r0 = r9.database     // Catch:{ Exception -> 0x06ab }
            java.lang.String r1 = "REPLACE INTO media_v4 VALUES(?, ?, ?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r1 = r0.executeFast(r1)     // Catch:{ Exception -> 0x06ab }
            r0 = 2147483647(0x7fffffff, float:NaN)
            r14 = 0
            r15 = 2147483647(0x7fffffff, float:NaN)
            r19 = 0
            r20 = 0
            r21 = 0
            r23 = 0
            r24 = 0
        L_0x018e:
            if (r14 >= r6) goto L_0x05fe
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r12 = r10.messages     // Catch:{ Exception -> 0x06ab }
            java.lang.Object r12 = r12.get(r14)     // Catch:{ Exception -> 0x06ab }
            org.telegram.tgnet.TLRPC$Message r12 = (org.telegram.tgnet.TLRPC$Message) r12     // Catch:{ Exception -> 0x06ab }
            r25 = 0
            int r13 = (r21 > r25 ? 1 : (r21 == r25 ? 0 : -1))
            if (r13 != 0) goto L_0x01a9
            org.telegram.tgnet.TLRPC$Peer r13 = r12.peer_id     // Catch:{ Exception -> 0x06ab }
            r28 = r1
            r27 = r2
            long r1 = r13.channel_id     // Catch:{ Exception -> 0x06ab }
            r21 = r1
            goto L_0x01ad
        L_0x01a9:
            r28 = r1
            r27 = r2
        L_0x01ad:
            r1 = -2
            if (r11 != r1) goto L_0x02df
            org.telegram.SQLite.SQLiteDatabase r1 = r9.database     // Catch:{ Exception -> 0x06ab }
            java.util.Locale r2 = java.util.Locale.US     // Catch:{ Exception -> 0x06ab }
            java.lang.String r13 = "SELECT mid, data, ttl, mention, read_state, send_state FROM messages_v2 WHERE mid = %d AND uid = %d"
            r29 = r3
            r30 = r4
            r3 = 2
            java.lang.Object[] r4 = new java.lang.Object[r3]     // Catch:{ Exception -> 0x06ab }
            int r3 = r12.id     // Catch:{ Exception -> 0x06ab }
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)     // Catch:{ Exception -> 0x06ab }
            r31 = r6
            r6 = 0
            r4[r6] = r3     // Catch:{ Exception -> 0x06ab }
            long r32 = org.telegram.messenger.MessageObject.getDialogId(r12)     // Catch:{ Exception -> 0x06ab }
            java.lang.Long r3 = java.lang.Long.valueOf(r32)     // Catch:{ Exception -> 0x06ab }
            r17 = 1
            r4[r17] = r3     // Catch:{ Exception -> 0x06ab }
            java.lang.String r2 = java.lang.String.format(r2, r13, r4)     // Catch:{ Exception -> 0x06ab }
            java.lang.Object[] r3 = new java.lang.Object[r6]     // Catch:{ Exception -> 0x06ab }
            org.telegram.SQLite.SQLiteCursor r13 = r1.queryFinalized(r2, r3)     // Catch:{ Exception -> 0x06ab }
            boolean r32 = r13.next()     // Catch:{ Exception -> 0x06ab }
            if (r32 == 0) goto L_0x02cc
            r1 = 1
            org.telegram.tgnet.NativeByteBuffer r2 = r13.byteBufferValue(r1)     // Catch:{ Exception -> 0x06ab }
            if (r2 == 0) goto L_0x0274
            r1 = 0
            int r3 = r2.readInt32(r1)     // Catch:{ Exception -> 0x06ab }
            org.telegram.tgnet.TLRPC$Message r3 = org.telegram.tgnet.TLRPC$Message.TLdeserialize(r2, r3, r1)     // Catch:{ Exception -> 0x06ab }
            org.telegram.messenger.UserConfig r1 = r38.getUserConfig()     // Catch:{ Exception -> 0x06ab }
            long r10 = r1.clientUserId     // Catch:{ Exception -> 0x06ab }
            r3.readAttachPath(r2, r10)     // Catch:{ Exception -> 0x06ab }
            r2.reuse()     // Catch:{ Exception -> 0x06ab }
            r1 = 5
            int r2 = r13.intValue(r1)     // Catch:{ Exception -> 0x06ab }
            r1 = 3
            if (r2 == r1) goto L_0x0221
            java.lang.String r1 = org.telegram.messenger.MessageObject.getFileName(r3)     // Catch:{ Exception -> 0x06ab }
            java.lang.String r2 = org.telegram.messenger.MessageObject.getFileName(r12)     // Catch:{ Exception -> 0x06ab }
            boolean r1 = r1.equals(r2)     // Catch:{ Exception -> 0x06ab }
            if (r1 == 0) goto L_0x021a
            java.lang.String r1 = r3.attachPath     // Catch:{ Exception -> 0x06ab }
            r12.attachPath = r1     // Catch:{ Exception -> 0x06ab }
        L_0x021a:
            r1 = 2
            int r2 = r13.intValue(r1)     // Catch:{ Exception -> 0x06ab }
            r12.ttl = r2     // Catch:{ Exception -> 0x06ab }
        L_0x0221:
            org.telegram.tgnet.TLRPC$MessageMedia r1 = r3.media     // Catch:{ Exception -> 0x06ab }
            boolean r2 = r1 instanceof org.telegram.tgnet.TLRPC$TL_messageMediaPhoto     // Catch:{ Exception -> 0x06ab }
            if (r2 == 0) goto L_0x023f
            org.telegram.tgnet.TLRPC$MessageMedia r2 = r12.media     // Catch:{ Exception -> 0x06ab }
            boolean r4 = r2 instanceof org.telegram.tgnet.TLRPC$TL_messageMediaPhoto     // Catch:{ Exception -> 0x06ab }
            if (r4 == 0) goto L_0x023f
            org.telegram.tgnet.TLRPC$Photo r4 = r1.photo     // Catch:{ Exception -> 0x06ab }
            if (r4 == 0) goto L_0x023f
            org.telegram.tgnet.TLRPC$Photo r2 = r2.photo     // Catch:{ Exception -> 0x06ab }
            if (r2 == 0) goto L_0x023f
            long r10 = r4.id     // Catch:{ Exception -> 0x06ab }
            long r1 = r2.id     // Catch:{ Exception -> 0x06ab }
            int r4 = (r10 > r1 ? 1 : (r10 == r1 ? 0 : -1))
            if (r4 != 0) goto L_0x025a
        L_0x023d:
            r1 = 1
            goto L_0x025b
        L_0x023f:
            boolean r2 = r1 instanceof org.telegram.tgnet.TLRPC$TL_messageMediaDocument     // Catch:{ Exception -> 0x06ab }
            if (r2 == 0) goto L_0x025a
            org.telegram.tgnet.TLRPC$MessageMedia r2 = r12.media     // Catch:{ Exception -> 0x06ab }
            boolean r4 = r2 instanceof org.telegram.tgnet.TLRPC$TL_messageMediaDocument     // Catch:{ Exception -> 0x06ab }
            if (r4 == 0) goto L_0x025a
            org.telegram.tgnet.TLRPC$Document r1 = r1.document     // Catch:{ Exception -> 0x06ab }
            if (r1 == 0) goto L_0x025a
            org.telegram.tgnet.TLRPC$Document r2 = r2.document     // Catch:{ Exception -> 0x06ab }
            if (r2 == 0) goto L_0x025a
            long r10 = r1.id     // Catch:{ Exception -> 0x06ab }
            long r1 = r2.id     // Catch:{ Exception -> 0x06ab }
            int r4 = (r10 > r1 ? 1 : (r10 == r1 ? 0 : -1))
            if (r4 != 0) goto L_0x025a
            goto L_0x023d
        L_0x025a:
            r1 = 0
        L_0x025b:
            if (r1 != 0) goto L_0x0274
            r6 = 0
            r10 = r28
            r1 = r38
            r11 = r27
            r2 = r3
            r4 = r29
            r3 = r5
            r27 = r30
            r34 = r5
            r5 = r27
            r28 = r31
            r1.addFilesToDelete(r2, r3, r4, r5, r6)     // Catch:{ Exception -> 0x06ab }
            goto L_0x027e
        L_0x0274:
            r34 = r5
            r11 = r27
            r10 = r28
            r27 = r30
            r28 = r31
        L_0x027e:
            r1 = 3
            int r2 = r13.intValue(r1)     // Catch:{ Exception -> 0x06ab }
            r1 = 4
            if (r2 == 0) goto L_0x0288
            r5 = 1
            goto L_0x0289
        L_0x0288:
            r5 = 0
        L_0x0289:
            int r2 = r13.intValue(r1)     // Catch:{ Exception -> 0x06ab }
            boolean r1 = r12.mentioned     // Catch:{ Exception -> 0x06ab }
            if (r5 == r1) goto L_0x02d6
            r1 = 2147483647(0x7fffffff, float:NaN)
            if (r0 != r1) goto L_0x02bd
            org.telegram.SQLite.SQLiteDatabase r1 = r9.database     // Catch:{ Exception -> 0x06ab }
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x06ab }
            r3.<init>()     // Catch:{ Exception -> 0x06ab }
            java.lang.String r4 = "SELECT unread_count_i FROM dialogs WHERE did = "
            r3.append(r4)     // Catch:{ Exception -> 0x06ab }
            r3.append(r7)     // Catch:{ Exception -> 0x06ab }
            java.lang.String r3 = r3.toString()     // Catch:{ Exception -> 0x06ab }
            r4 = 0
            java.lang.Object[] r6 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x06ab }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r3, r6)     // Catch:{ Exception -> 0x06ab }
            boolean r3 = r1.next()     // Catch:{ Exception -> 0x06ab }
            if (r3 == 0) goto L_0x02ba
            int r0 = r1.intValue(r4)     // Catch:{ Exception -> 0x06ab }
        L_0x02ba:
            r1.dispose()     // Catch:{ Exception -> 0x06ab }
        L_0x02bd:
            if (r5 == 0) goto L_0x02c5
            r1 = 1
            if (r2 > r1) goto L_0x02d6
            int r0 = r0 + -1
            goto L_0x02d6
        L_0x02c5:
            boolean r1 = r12.media_unread     // Catch:{ Exception -> 0x06ab }
            if (r1 == 0) goto L_0x02d6
            int r0 = r0 + 1
            goto L_0x02d6
        L_0x02cc:
            r34 = r5
            r11 = r27
            r10 = r28
            r27 = r30
            r28 = r31
        L_0x02d6:
            r13.dispose()     // Catch:{ Exception -> 0x06ab }
            if (r32 != 0) goto L_0x02eb
            r2 = 4
            r5 = 3
            goto L_0x05ec
        L_0x02df:
            r29 = r3
            r34 = r5
            r11 = r27
            r10 = r28
            r27 = r4
            r28 = r6
        L_0x02eb:
            r1 = r0
            r6 = 7
            if (r14 != 0) goto L_0x03ce
            if (r45 == 0) goto L_0x03ce
            org.telegram.SQLite.SQLiteDatabase r13 = r9.database     // Catch:{ Exception -> 0x06ab }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x06ab }
            r2.<init>()     // Catch:{ Exception -> 0x06ab }
            java.lang.String r3 = "SELECT pinned, unread_count_i, flags FROM dialogs WHERE did = "
            r2.append(r3)     // Catch:{ Exception -> 0x06ab }
            r2.append(r7)     // Catch:{ Exception -> 0x06ab }
            java.lang.String r2 = r2.toString()     // Catch:{ Exception -> 0x06ab }
            r3 = 0
            java.lang.Object[] r4 = new java.lang.Object[r3]     // Catch:{ Exception -> 0x06ab }
            org.telegram.SQLite.SQLiteCursor r2 = r13.queryFinalized(r2, r4)     // Catch:{ Exception -> 0x06ab }
            boolean r4 = r2.next()     // Catch:{ Exception -> 0x06ab }
            if (r4 == 0) goto L_0x0324
            int r13 = r2.intValue(r3)     // Catch:{ Exception -> 0x06ab }
            r3 = 1
            int r35 = r2.intValue(r3)     // Catch:{ Exception -> 0x06ab }
            r3 = 2
            int r36 = r2.intValue(r3)     // Catch:{ Exception -> 0x06ab }
            r3 = r35
            r37 = r36
            goto L_0x0328
        L_0x0324:
            r3 = 0
            r13 = 0
            r37 = 0
        L_0x0328:
            r2.dispose()     // Catch:{ Exception -> 0x06ab }
            if (r4 == 0) goto L_0x0360
            org.telegram.SQLite.SQLiteDatabase r2 = r9.database     // Catch:{ Exception -> 0x06ab }
            java.lang.String r3 = "UPDATE dialogs SET date = ?, last_mid = ?, inbox_max = ?, last_mid_i = ?, pts = ?, date_i = ? WHERE did = ?"
            org.telegram.SQLite.SQLitePreparedStatement r2 = r2.executeFast(r3)     // Catch:{ Exception -> 0x06ab }
            int r3 = r12.date     // Catch:{ Exception -> 0x06ab }
            r4 = 1
            r2.bindInteger(r4, r3)     // Catch:{ Exception -> 0x06ab }
            int r3 = r12.id     // Catch:{ Exception -> 0x06ab }
            r4 = 2
            r2.bindInteger(r4, r3)     // Catch:{ Exception -> 0x06ab }
            int r3 = r12.id     // Catch:{ Exception -> 0x06ab }
            r4 = 3
            r2.bindInteger(r4, r3)     // Catch:{ Exception -> 0x06ab }
            int r3 = r12.id     // Catch:{ Exception -> 0x06ab }
            r4 = 4
            r2.bindInteger(r4, r3)     // Catch:{ Exception -> 0x06ab }
            r4 = r42
            int r3 = r4.pts     // Catch:{ Exception -> 0x06ab }
            r13 = 5
            r2.bindInteger(r13, r3)     // Catch:{ Exception -> 0x06ab }
            int r3 = r12.date     // Catch:{ Exception -> 0x06ab }
            r13 = 6
            r2.bindInteger(r13, r3)     // Catch:{ Exception -> 0x06ab }
            r2.bindLong(r6, r7)     // Catch:{ Exception -> 0x06ab }
            r5 = -1
            goto L_0x03c7
        L_0x0360:
            r4 = r42
            org.telegram.SQLite.SQLiteDatabase r2 = r9.database     // Catch:{ Exception -> 0x06ab }
            java.lang.String r0 = "REPLACE INTO dialogs VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r2 = r2.executeFast(r0)     // Catch:{ Exception -> 0x06ab }
            r5 = 1
            r2.bindLong(r5, r7)     // Catch:{ Exception -> 0x06ab }
            int r5 = r12.date     // Catch:{ Exception -> 0x06ab }
            r6 = 2
            r2.bindInteger(r6, r5)     // Catch:{ Exception -> 0x06ab }
            r5 = 3
            r6 = 0
            r2.bindInteger(r5, r6)     // Catch:{ Exception -> 0x06ab }
            int r5 = r12.id     // Catch:{ Exception -> 0x06ab }
            r6 = 4
            r2.bindInteger(r6, r5)     // Catch:{ Exception -> 0x06ab }
            int r5 = r12.id     // Catch:{ Exception -> 0x06ab }
            r6 = 5
            r2.bindInteger(r6, r5)     // Catch:{ Exception -> 0x06ab }
            r5 = 6
            r6 = 0
            r2.bindInteger(r5, r6)     // Catch:{ Exception -> 0x06ab }
            int r5 = r12.id     // Catch:{ Exception -> 0x06ab }
            r6 = 7
            r2.bindInteger(r6, r5)     // Catch:{ Exception -> 0x06ab }
            r0 = 8
            r2.bindInteger(r0, r3)     // Catch:{ Exception -> 0x06ab }
            int r3 = r4.pts     // Catch:{ Exception -> 0x06ab }
            r5 = 9
            r2.bindInteger(r5, r3)     // Catch:{ Exception -> 0x06ab }
            int r3 = r12.date     // Catch:{ Exception -> 0x06ab }
            r5 = 10
            r2.bindInteger(r5, r3)     // Catch:{ Exception -> 0x06ab }
            r3 = 11
            r2.bindInteger(r3, r13)     // Catch:{ Exception -> 0x06ab }
            r3 = r37
            r5 = 12
            r2.bindInteger(r5, r3)     // Catch:{ Exception -> 0x06ab }
            r3 = 13
            r5 = -1
            r2.bindInteger(r3, r5)     // Catch:{ Exception -> 0x06ab }
            r3 = 14
            r2.bindNull(r3)     // Catch:{ Exception -> 0x06ab }
            r3 = 15
            r6 = 0
            r2.bindInteger(r3, r6)     // Catch:{ Exception -> 0x06ab }
            androidx.collection.LongSparseArray<java.lang.Boolean> r3 = r9.unknownDialogsIds     // Catch:{ Exception -> 0x06ab }
            java.lang.Boolean r6 = java.lang.Boolean.TRUE     // Catch:{ Exception -> 0x06ab }
            r3.put(r7, r6)     // Catch:{ Exception -> 0x06ab }
        L_0x03c7:
            r2.step()     // Catch:{ Exception -> 0x06ab }
            r2.dispose()     // Catch:{ Exception -> 0x06ab }
            goto L_0x03d1
        L_0x03ce:
            r4 = r42
            r5 = -1
        L_0x03d1:
            r9.fixUnsupportedMedia(r12)     // Catch:{ Exception -> 0x06ab }
            r11.requery()     // Catch:{ Exception -> 0x06ab }
            org.telegram.tgnet.NativeByteBuffer r2 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x06ab }
            int r3 = r12.getObjectSize()     // Catch:{ Exception -> 0x06ab }
            r2.<init>((int) r3)     // Catch:{ Exception -> 0x06ab }
            r12.serializeToStream(r2)     // Catch:{ Exception -> 0x06ab }
            int r3 = r12.id     // Catch:{ Exception -> 0x06ab }
            r6 = 1
            r11.bindInteger(r6, r3)     // Catch:{ Exception -> 0x06ab }
            r3 = 2
            r11.bindLong(r3, r7)     // Catch:{ Exception -> 0x06ab }
            int r3 = org.telegram.messenger.MessageObject.getUnreadFlags(r12)     // Catch:{ Exception -> 0x06ab }
            r6 = 3
            r11.bindInteger(r6, r3)     // Catch:{ Exception -> 0x06ab }
            int r3 = r12.send_state     // Catch:{ Exception -> 0x06ab }
            r6 = 4
            r11.bindInteger(r6, r3)     // Catch:{ Exception -> 0x06ab }
            int r3 = r12.date     // Catch:{ Exception -> 0x06ab }
            r6 = 5
            r11.bindInteger(r6, r3)     // Catch:{ Exception -> 0x06ab }
            r3 = 6
            r11.bindByteBuffer((int) r3, (org.telegram.tgnet.NativeByteBuffer) r2)     // Catch:{ Exception -> 0x06ab }
            boolean r6 = org.telegram.messenger.MessageObject.isOut(r12)     // Catch:{ Exception -> 0x06ab }
            if (r6 != 0) goto L_0x0412
            boolean r6 = r12.from_scheduled     // Catch:{ Exception -> 0x06ab }
            if (r6 == 0) goto L_0x0410
            goto L_0x0412
        L_0x0410:
            r6 = 0
            goto L_0x0413
        L_0x0412:
            r6 = 1
        L_0x0413:
            r13 = 7
            r11.bindInteger(r13, r6)     // Catch:{ Exception -> 0x06ab }
            int r6 = r12.ttl     // Catch:{ Exception -> 0x06ab }
            r0 = 8
            r11.bindInteger(r0, r6)     // Catch:{ Exception -> 0x06ab }
            int r0 = r12.flags     // Catch:{ Exception -> 0x06ab }
            r0 = r0 & 1024(0x400, float:1.435E-42)
            if (r0 == 0) goto L_0x042c
            int r0 = r12.views     // Catch:{ Exception -> 0x06ab }
            r6 = 9
            r11.bindInteger(r6, r0)     // Catch:{ Exception -> 0x06ab }
            goto L_0x0435
        L_0x042c:
            r6 = 9
            int r0 = r9.getMessageMediaType(r12)     // Catch:{ Exception -> 0x06ab }
            r11.bindInteger(r6, r0)     // Catch:{ Exception -> 0x06ab }
        L_0x0435:
            int r0 = r12.stickerVerified     // Catch:{ Exception -> 0x06ab }
            if (r0 != 0) goto L_0x043d
            r0 = 10
            r6 = 1
            goto L_0x0447
        L_0x043d:
            r6 = 2
            if (r0 != r6) goto L_0x0444
            r0 = 10
            r6 = 2
            goto L_0x0447
        L_0x0444:
            r0 = 10
            r6 = 0
        L_0x0447:
            r11.bindInteger(r0, r6)     // Catch:{ Exception -> 0x06ab }
            boolean r0 = r12.mentioned     // Catch:{ Exception -> 0x06ab }
            if (r0 == 0) goto L_0x0450
            r0 = 1
            goto L_0x0451
        L_0x0450:
            r0 = 0
        L_0x0451:
            r6 = 11
            r11.bindInteger(r6, r0)     // Catch:{ Exception -> 0x06ab }
            int r0 = r12.forwards     // Catch:{ Exception -> 0x06ab }
            r6 = 12
            r11.bindInteger(r6, r0)     // Catch:{ Exception -> 0x06ab }
            org.telegram.tgnet.TLRPC$MessageReplies r0 = r12.replies     // Catch:{ Exception -> 0x06ab }
            if (r0 == 0) goto L_0x0478
            org.telegram.tgnet.NativeByteBuffer r0 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x06ab }
            org.telegram.tgnet.TLRPC$MessageReplies r6 = r12.replies     // Catch:{ Exception -> 0x06ab }
            int r6 = r6.getObjectSize()     // Catch:{ Exception -> 0x06ab }
            r0.<init>((int) r6)     // Catch:{ Exception -> 0x06ab }
            org.telegram.tgnet.TLRPC$MessageReplies r6 = r12.replies     // Catch:{ Exception -> 0x06ab }
            r6.serializeToStream(r0)     // Catch:{ Exception -> 0x06ab }
            r6 = 13
            r11.bindByteBuffer((int) r6, (org.telegram.tgnet.NativeByteBuffer) r0)     // Catch:{ Exception -> 0x06ab }
            r6 = r0
            goto L_0x047e
        L_0x0478:
            r0 = 13
            r11.bindNull(r0)     // Catch:{ Exception -> 0x06ab }
            r6 = 0
        L_0x047e:
            org.telegram.tgnet.TLRPC$TL_messageReplyHeader r0 = r12.reply_to     // Catch:{ Exception -> 0x06ab }
            if (r0 == 0) goto L_0x048f
            int r13 = r0.reply_to_top_id     // Catch:{ Exception -> 0x06ab }
            if (r13 == 0) goto L_0x0487
            goto L_0x0489
        L_0x0487:
            int r13 = r0.reply_to_msg_id     // Catch:{ Exception -> 0x06ab }
        L_0x0489:
            r0 = 14
            r11.bindInteger(r0, r13)     // Catch:{ Exception -> 0x06ab }
            goto L_0x0495
        L_0x048f:
            r0 = 14
            r13 = 0
            r11.bindInteger(r0, r13)     // Catch:{ Exception -> 0x06ab }
        L_0x0495:
            long r3 = org.telegram.messenger.MessageObject.getChannelId(r12)     // Catch:{ Exception -> 0x06ab }
            r0 = 15
            r11.bindLong(r0, r3)     // Catch:{ Exception -> 0x06ab }
            r11.step()     // Catch:{ Exception -> 0x06ab }
            boolean r0 = org.telegram.messenger.MediaDataController.canAddMessageToMedia(r12)     // Catch:{ Exception -> 0x06ab }
            if (r0 == 0) goto L_0x04ca
            r10.requery()     // Catch:{ Exception -> 0x06ab }
            int r0 = r12.id     // Catch:{ Exception -> 0x06ab }
            r3 = 1
            r10.bindInteger(r3, r0)     // Catch:{ Exception -> 0x06ab }
            r3 = 2
            r10.bindLong(r3, r7)     // Catch:{ Exception -> 0x06ab }
            int r0 = r12.date     // Catch:{ Exception -> 0x06ab }
            r3 = 3
            r10.bindInteger(r3, r0)     // Catch:{ Exception -> 0x06ab }
            int r0 = org.telegram.messenger.MediaDataController.getMediaType(r12)     // Catch:{ Exception -> 0x06ab }
            r3 = 4
            r10.bindInteger(r3, r0)     // Catch:{ Exception -> 0x06ab }
            r3 = 5
            r10.bindByteBuffer((int) r3, (org.telegram.tgnet.NativeByteBuffer) r2)     // Catch:{ Exception -> 0x06ab }
            r10.step()     // Catch:{ Exception -> 0x06ab }
            goto L_0x0522
        L_0x04ca:
            r3 = 5
            boolean r0 = r12 instanceof org.telegram.tgnet.TLRPC$TL_messageService     // Catch:{ Exception -> 0x06ab }
            if (r0 == 0) goto L_0x0522
            org.telegram.tgnet.TLRPC$MessageAction r0 = r12.action     // Catch:{ Exception -> 0x06ab }
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC$TL_messageActionHistoryClear     // Catch:{ Exception -> 0x06ab }
            if (r0 == 0) goto L_0x0522
            org.telegram.SQLite.SQLiteDatabase r0 = r9.database     // Catch:{ Exception -> 0x051e }
            java.util.Locale r4 = java.util.Locale.US     // Catch:{ Exception -> 0x051e }
            java.lang.String r13 = "DELETE FROM media_v4 WHERE mid = %d AND uid = %d"
            r3 = 2
            java.lang.Object[] r5 = new java.lang.Object[r3]     // Catch:{ Exception -> 0x051e }
            int r3 = r12.id     // Catch:{ Exception -> 0x051e }
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)     // Catch:{ Exception -> 0x051e }
            r17 = 0
            r5[r17] = r3     // Catch:{ Exception -> 0x051e }
            java.lang.Long r3 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x051e }
            r18 = 1
            r5[r18] = r3     // Catch:{ Exception -> 0x051e }
            java.lang.String r3 = java.lang.String.format(r4, r13, r5)     // Catch:{ Exception -> 0x051e }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r3)     // Catch:{ Exception -> 0x051e }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x051e }
            r0.dispose()     // Catch:{ Exception -> 0x051e }
            org.telegram.SQLite.SQLiteDatabase r0 = r9.database     // Catch:{ Exception -> 0x051e }
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x051e }
            r3.<init>()     // Catch:{ Exception -> 0x051e }
            java.lang.String r4 = "DELETE FROM media_counts_v2 WHERE uid = "
            r3.append(r4)     // Catch:{ Exception -> 0x051e }
            r3.append(r7)     // Catch:{ Exception -> 0x051e }
            java.lang.String r3 = r3.toString()     // Catch:{ Exception -> 0x051e }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r3)     // Catch:{ Exception -> 0x051e }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x051e }
            r0.dispose()     // Catch:{ Exception -> 0x051e }
            goto L_0x0522
        L_0x051e:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ Exception -> 0x06ab }
        L_0x0522:
            if (r6 == 0) goto L_0x0527
            r6.reuse()     // Catch:{ Exception -> 0x06ab }
        L_0x0527:
            r2.reuse()     // Catch:{ Exception -> 0x06ab }
            int r0 = r12.ttl_period     // Catch:{ Exception -> 0x06ab }
            if (r0 == 0) goto L_0x056b
            int r0 = r12.id     // Catch:{ Exception -> 0x06ab }
            if (r0 <= 0) goto L_0x056b
            if (r20 != 0) goto L_0x053d
            org.telegram.SQLite.SQLiteDatabase r0 = r9.database     // Catch:{ Exception -> 0x06ab }
            java.lang.String r2 = "REPLACE INTO enc_tasks_v4 VALUES(?, ?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r2)     // Catch:{ Exception -> 0x06ab }
            goto L_0x053f
        L_0x053d:
            r0 = r20
        L_0x053f:
            r0.requery()     // Catch:{ Exception -> 0x06ab }
            int r2 = r12.id     // Catch:{ Exception -> 0x06ab }
            r3 = 1
            r0.bindInteger(r3, r2)     // Catch:{ Exception -> 0x06ab }
            long r2 = r12.dialog_id     // Catch:{ Exception -> 0x06ab }
            r4 = 2
            r0.bindLong(r4, r2)     // Catch:{ Exception -> 0x06ab }
            int r2 = r12.date     // Catch:{ Exception -> 0x06ab }
            int r3 = r12.ttl_period     // Catch:{ Exception -> 0x06ab }
            int r2 = r2 + r3
            r3 = 3
            r0.bindInteger(r3, r2)     // Catch:{ Exception -> 0x06ab }
            r2 = 4
            r3 = 0
            r0.bindInteger(r2, r3)     // Catch:{ Exception -> 0x06ab }
            r0.step()     // Catch:{ Exception -> 0x06ab }
            int r3 = r12.date     // Catch:{ Exception -> 0x06ab }
            int r4 = r12.ttl_period     // Catch:{ Exception -> 0x06ab }
            int r3 = r3 + r4
            int r15 = java.lang.Math.min(r15, r3)     // Catch:{ Exception -> 0x06ab }
            r20 = r0
            goto L_0x056c
        L_0x056b:
            r2 = 4
        L_0x056c:
            org.telegram.tgnet.TLRPC$MessageMedia r0 = r12.media     // Catch:{ Exception -> 0x06ab }
            boolean r3 = r0 instanceof org.telegram.tgnet.TLRPC$TL_messageMediaPoll     // Catch:{ Exception -> 0x06ab }
            if (r3 == 0) goto L_0x05a0
            if (r24 != 0) goto L_0x057d
            org.telegram.SQLite.SQLiteDatabase r0 = r9.database     // Catch:{ Exception -> 0x06ab }
            java.lang.String r3 = "REPLACE INTO polls_v2 VALUES(?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r3)     // Catch:{ Exception -> 0x06ab }
            goto L_0x057f
        L_0x057d:
            r0 = r24
        L_0x057f:
            org.telegram.tgnet.TLRPC$MessageMedia r3 = r12.media     // Catch:{ Exception -> 0x06ab }
            org.telegram.tgnet.TLRPC$TL_messageMediaPoll r3 = (org.telegram.tgnet.TLRPC$TL_messageMediaPoll) r3     // Catch:{ Exception -> 0x06ab }
            r0.requery()     // Catch:{ Exception -> 0x06ab }
            int r4 = r12.id     // Catch:{ Exception -> 0x06ab }
            r5 = 1
            r0.bindInteger(r5, r4)     // Catch:{ Exception -> 0x06ab }
            long r4 = r12.dialog_id     // Catch:{ Exception -> 0x06ab }
            r6 = 2
            r0.bindLong(r6, r4)     // Catch:{ Exception -> 0x06ab }
            org.telegram.tgnet.TLRPC$Poll r3 = r3.poll     // Catch:{ Exception -> 0x06ab }
            long r3 = r3.id     // Catch:{ Exception -> 0x06ab }
            r5 = 3
            r0.bindLong(r5, r3)     // Catch:{ Exception -> 0x06ab }
            r0.step()     // Catch:{ Exception -> 0x06ab }
            r24 = r0
            goto L_0x05d0
        L_0x05a0:
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC$TL_messageMediaWebPage     // Catch:{ Exception -> 0x06ab }
            if (r0 == 0) goto L_0x05d0
            if (r19 != 0) goto L_0x05af
            org.telegram.SQLite.SQLiteDatabase r0 = r9.database     // Catch:{ Exception -> 0x06ab }
            java.lang.String r3 = "REPLACE INTO webpage_pending_v2 VALUES(?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r3)     // Catch:{ Exception -> 0x06ab }
            goto L_0x05b1
        L_0x05af:
            r0 = r19
        L_0x05b1:
            r0.requery()     // Catch:{ Exception -> 0x06ab }
            org.telegram.tgnet.TLRPC$MessageMedia r3 = r12.media     // Catch:{ Exception -> 0x06ab }
            org.telegram.tgnet.TLRPC$WebPage r3 = r3.webpage     // Catch:{ Exception -> 0x06ab }
            long r3 = r3.id     // Catch:{ Exception -> 0x06ab }
            r5 = 1
            r0.bindLong(r5, r3)     // Catch:{ Exception -> 0x06ab }
            int r3 = r12.id     // Catch:{ Exception -> 0x06ab }
            r4 = 2
            r0.bindInteger(r4, r3)     // Catch:{ Exception -> 0x06ab }
            long r3 = r12.dialog_id     // Catch:{ Exception -> 0x06ab }
            r5 = 3
            r0.bindLong(r5, r3)     // Catch:{ Exception -> 0x06ab }
            r0.step()     // Catch:{ Exception -> 0x06ab }
            r19 = r0
            goto L_0x05d1
        L_0x05d0:
            r5 = 3
        L_0x05d1:
            if (r43 != 0) goto L_0x05e7
            boolean r0 = r9.isValidKeyboardToSave(r12)     // Catch:{ Exception -> 0x06ab }
            if (r0 == 0) goto L_0x05e7
            r3 = r23
            if (r3 == 0) goto L_0x05e3
            int r0 = r3.id     // Catch:{ Exception -> 0x06ab }
            int r4 = r12.id     // Catch:{ Exception -> 0x06ab }
            if (r0 >= r4) goto L_0x05e9
        L_0x05e3:
            r0 = r1
            r23 = r12
            goto L_0x05ec
        L_0x05e7:
            r3 = r23
        L_0x05e9:
            r0 = r1
            r23 = r3
        L_0x05ec:
            int r14 = r14 + 1
            r1 = r10
            r2 = r11
            r4 = r27
            r6 = r28
            r3 = r29
            r5 = r34
            r10 = r42
            r11 = r43
            goto L_0x018e
        L_0x05fe:
            r10 = r1
            r11 = r2
            r29 = r3
            r27 = r4
            r34 = r5
            r3 = r23
            r11.dispose()     // Catch:{ Exception -> 0x06ab }
            r10.dispose()     // Catch:{ Exception -> 0x06ab }
            if (r19 == 0) goto L_0x0613
            r19.dispose()     // Catch:{ Exception -> 0x06ab }
        L_0x0613:
            if (r20 == 0) goto L_0x0622
            r20.dispose()     // Catch:{ Exception -> 0x06ab }
            org.telegram.messenger.MessagesController r1 = r38.getMessagesController()     // Catch:{ Exception -> 0x06ab }
            r2 = 0
            r4 = 0
            r1.didAddedNewTask(r15, r4, r2)     // Catch:{ Exception -> 0x06ab }
        L_0x0622:
            if (r24 == 0) goto L_0x0627
            r24.dispose()     // Catch:{ Exception -> 0x06ab }
        L_0x0627:
            if (r3 == 0) goto L_0x0630
            org.telegram.messenger.MediaDataController r1 = r38.getMediaDataController()     // Catch:{ Exception -> 0x06ab }
            r1.putBotKeyboard(r7, r3)     // Catch:{ Exception -> 0x06ab }
        L_0x0630:
            r1 = r29
            r2 = 0
            r9.deleteFromDownloadQueue(r1, r2)     // Catch:{ Exception -> 0x06ab }
            org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda132 r1 = new org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda132     // Catch:{ Exception -> 0x06ab }
            r3 = r27
            r1.<init>(r9, r3)     // Catch:{ Exception -> 0x06ab }
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r1)     // Catch:{ Exception -> 0x06ab }
            org.telegram.messenger.FileLoader r1 = r38.getFileLoader()     // Catch:{ Exception -> 0x06ab }
            r3 = r34
            r1.deleteFiles(r3, r2)     // Catch:{ Exception -> 0x06ab }
            r1 = r42
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r1.users     // Catch:{ Exception -> 0x06ab }
            r9.putUsersInternal(r2)     // Catch:{ Exception -> 0x06ab }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r1 = r1.chats     // Catch:{ Exception -> 0x06ab }
            r9.putChatsInternal(r1)     // Catch:{ Exception -> 0x06ab }
            r1 = 2147483647(0x7fffffff, float:NaN)
            if (r0 == r1) goto L_0x0691
            org.telegram.SQLite.SQLiteDatabase r1 = r9.database     // Catch:{ Exception -> 0x06ab }
            java.util.Locale r2 = java.util.Locale.US     // Catch:{ Exception -> 0x06ab }
            java.lang.String r3 = "UPDATE dialogs SET unread_count_i = %d WHERE did = %d"
            r4 = 2
            java.lang.Object[] r4 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x06ab }
            java.lang.Integer r5 = java.lang.Integer.valueOf(r0)     // Catch:{ Exception -> 0x06ab }
            r6 = 0
            r4[r6] = r5     // Catch:{ Exception -> 0x06ab }
            java.lang.Long r5 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x06ab }
            r6 = 1
            r4[r6] = r5     // Catch:{ Exception -> 0x06ab }
            java.lang.String r2 = java.lang.String.format(r2, r3, r4)     // Catch:{ Exception -> 0x06ab }
            org.telegram.SQLite.SQLitePreparedStatement r1 = r1.executeFast(r2)     // Catch:{ Exception -> 0x06ab }
            org.telegram.SQLite.SQLitePreparedStatement r1 = r1.stepThis()     // Catch:{ Exception -> 0x06ab }
            r1.dispose()     // Catch:{ Exception -> 0x06ab }
            org.telegram.messenger.support.LongSparseIntArray r1 = new org.telegram.messenger.support.LongSparseIntArray     // Catch:{ Exception -> 0x06ab }
            r2 = 1
            r1.<init>(r2)     // Catch:{ Exception -> 0x06ab }
            r1.put(r7, r0)     // Catch:{ Exception -> 0x06ab }
            org.telegram.messenger.MessagesController r0 = r38.getMessagesController()     // Catch:{ Exception -> 0x06ab }
            r2 = 0
            r0.processDialogsUpdateRead(r2, r1)     // Catch:{ Exception -> 0x06ab }
        L_0x0691:
            org.telegram.SQLite.SQLiteDatabase r0 = r9.database     // Catch:{ Exception -> 0x06ab }
            r0.commitTransaction()     // Catch:{ Exception -> 0x06ab }
            if (r45 == 0) goto L_0x06af
            java.util.ArrayList r6 = new java.util.ArrayList     // Catch:{ Exception -> 0x06ab }
            r6.<init>()     // Catch:{ Exception -> 0x06ab }
            r0 = 0
            r10 = 0
            r1 = r38
            r2 = r40
            r4 = r21
            r7 = r0
            r8 = r10
            r1.updateDialogsWithDeletedMessages(r2, r4, r6, r7, r8)     // Catch:{ Exception -> 0x06ab }
            goto L_0x06af
        L_0x06ab:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
        L_0x06af:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$putMessages$181(boolean, long, org.telegram.tgnet.TLRPC$messages_Messages, int, int, boolean):void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$putMessages$180(ArrayList arrayList) {
        getFileLoader().cancelLoadFiles(arrayList);
    }

    public static void addUsersAndChatsFromMessage(TLRPC$Message tLRPC$Message, ArrayList<Long> arrayList, ArrayList<Long> arrayList2) {
        String str;
        TLRPC$Peer tLRPC$Peer;
        long fromChatId = MessageObject.getFromChatId(tLRPC$Message);
        if (DialogObject.isUserDialog(fromChatId)) {
            if (!arrayList.contains(Long.valueOf(fromChatId))) {
                arrayList.add(Long.valueOf(fromChatId));
            }
        } else if (DialogObject.isChatDialog(fromChatId)) {
            long j = -fromChatId;
            if (!arrayList2.contains(Long.valueOf(j))) {
                arrayList2.add(Long.valueOf(j));
            }
        }
        long j2 = tLRPC$Message.via_bot_id;
        if (j2 != 0 && !arrayList.contains(Long.valueOf(j2))) {
            arrayList.add(Long.valueOf(tLRPC$Message.via_bot_id));
        }
        TLRPC$MessageAction tLRPC$MessageAction = tLRPC$Message.action;
        if (tLRPC$MessageAction != null) {
            long j3 = tLRPC$MessageAction.user_id;
            if (j3 != 0 && !arrayList.contains(Long.valueOf(j3))) {
                arrayList.add(Long.valueOf(tLRPC$Message.action.user_id));
            }
            long j4 = tLRPC$Message.action.channel_id;
            if (j4 != 0 && !arrayList2.contains(Long.valueOf(j4))) {
                arrayList2.add(Long.valueOf(tLRPC$Message.action.channel_id));
            }
            long j5 = tLRPC$Message.action.chat_id;
            if (j5 != 0 && !arrayList2.contains(Long.valueOf(j5))) {
                arrayList2.add(Long.valueOf(tLRPC$Message.action.chat_id));
            }
            TLRPC$MessageAction tLRPC$MessageAction2 = tLRPC$Message.action;
            if (tLRPC$MessageAction2 instanceof TLRPC$TL_messageActionGeoProximityReached) {
                TLRPC$TL_messageActionGeoProximityReached tLRPC$TL_messageActionGeoProximityReached = (TLRPC$TL_messageActionGeoProximityReached) tLRPC$MessageAction2;
                long peerId = MessageObject.getPeerId(tLRPC$TL_messageActionGeoProximityReached.from_id);
                if (!DialogObject.isUserDialog(peerId)) {
                    long j6 = -peerId;
                    if (!arrayList2.contains(Long.valueOf(j6))) {
                        arrayList2.add(Long.valueOf(j6));
                    }
                } else if (!arrayList.contains(Long.valueOf(peerId))) {
                    arrayList.add(Long.valueOf(peerId));
                }
                long peerId2 = MessageObject.getPeerId(tLRPC$TL_messageActionGeoProximityReached.to_id);
                if (peerId2 <= 0) {
                    long j7 = -peerId2;
                    if (!arrayList2.contains(Long.valueOf(j7))) {
                        arrayList2.add(Long.valueOf(j7));
                    }
                } else if (!arrayList.contains(Long.valueOf(peerId2))) {
                    arrayList.add(Long.valueOf(peerId2));
                }
            }
            if (!tLRPC$Message.action.users.isEmpty()) {
                for (int i = 0; i < tLRPC$Message.action.users.size(); i++) {
                    Long l = tLRPC$Message.action.users.get(i);
                    if (!arrayList.contains(l)) {
                        arrayList.add(l);
                    }
                }
            }
        }
        if (!tLRPC$Message.entities.isEmpty()) {
            for (int i2 = 0; i2 < tLRPC$Message.entities.size(); i2++) {
                TLRPC$MessageEntity tLRPC$MessageEntity = tLRPC$Message.entities.get(i2);
                if (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityMentionName) {
                    arrayList.add(Long.valueOf(((TLRPC$TL_messageEntityMentionName) tLRPC$MessageEntity).user_id));
                } else if (tLRPC$MessageEntity instanceof TLRPC$TL_inputMessageEntityMentionName) {
                    arrayList.add(Long.valueOf(((TLRPC$TL_inputMessageEntityMentionName) tLRPC$MessageEntity).user_id.user_id));
                }
            }
        }
        TLRPC$MessageMedia tLRPC$MessageMedia = tLRPC$Message.media;
        if (tLRPC$MessageMedia != null) {
            long j8 = tLRPC$MessageMedia.user_id;
            if (j8 != 0 && !arrayList.contains(Long.valueOf(j8))) {
                arrayList.add(Long.valueOf(tLRPC$Message.media.user_id));
            }
            TLRPC$MessageMedia tLRPC$MessageMedia2 = tLRPC$Message.media;
            if (tLRPC$MessageMedia2 instanceof TLRPC$TL_messageMediaPoll) {
                TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll = (TLRPC$TL_messageMediaPoll) tLRPC$MessageMedia2;
                if (!tLRPC$TL_messageMediaPoll.results.recent_voters.isEmpty()) {
                    arrayList.addAll(tLRPC$TL_messageMediaPoll.results.recent_voters);
                }
            }
        }
        TLRPC$MessageReplies tLRPC$MessageReplies = tLRPC$Message.replies;
        if (tLRPC$MessageReplies != null) {
            int size = tLRPC$MessageReplies.recent_repliers.size();
            for (int i3 = 0; i3 < size; i3++) {
                long peerId3 = MessageObject.getPeerId(tLRPC$Message.replies.recent_repliers.get(i3));
                if (DialogObject.isUserDialog(peerId3)) {
                    if (!arrayList.contains(Long.valueOf(peerId3))) {
                        arrayList.add(Long.valueOf(peerId3));
                    }
                } else if (DialogObject.isChatDialog(peerId3)) {
                    long j9 = -peerId3;
                    if (!arrayList2.contains(Long.valueOf(j9))) {
                        arrayList2.add(Long.valueOf(j9));
                    }
                }
            }
        }
        TLRPC$TL_messageReplyHeader tLRPC$TL_messageReplyHeader = tLRPC$Message.reply_to;
        if (!(tLRPC$TL_messageReplyHeader == null || (tLRPC$Peer = tLRPC$TL_messageReplyHeader.reply_to_peer_id) == null)) {
            long peerId4 = MessageObject.getPeerId(tLRPC$Peer);
            if (DialogObject.isUserDialog(peerId4)) {
                if (!arrayList.contains(Long.valueOf(peerId4))) {
                    arrayList.add(Long.valueOf(peerId4));
                }
            } else if (DialogObject.isChatDialog(peerId4)) {
                long j10 = -peerId4;
                if (!arrayList2.contains(Long.valueOf(j10))) {
                    arrayList2.add(Long.valueOf(j10));
                }
            }
        }
        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = tLRPC$Message.fwd_from;
        if (tLRPC$MessageFwdHeader != null) {
            TLRPC$Peer tLRPC$Peer2 = tLRPC$MessageFwdHeader.from_id;
            if (tLRPC$Peer2 instanceof TLRPC$TL_peerUser) {
                if (!arrayList.contains(Long.valueOf(tLRPC$Peer2.user_id))) {
                    arrayList.add(Long.valueOf(tLRPC$Message.fwd_from.from_id.user_id));
                }
            } else if (tLRPC$Peer2 instanceof TLRPC$TL_peerChannel) {
                if (!arrayList2.contains(Long.valueOf(tLRPC$Peer2.channel_id))) {
                    arrayList2.add(Long.valueOf(tLRPC$Message.fwd_from.from_id.channel_id));
                }
            } else if ((tLRPC$Peer2 instanceof TLRPC$TL_peerChat) && !arrayList2.contains(Long.valueOf(tLRPC$Peer2.chat_id))) {
                arrayList2.add(Long.valueOf(tLRPC$Message.fwd_from.from_id.chat_id));
            }
            TLRPC$Peer tLRPC$Peer3 = tLRPC$Message.fwd_from.saved_from_peer;
            if (tLRPC$Peer3 != null) {
                long j11 = tLRPC$Peer3.user_id;
                if (j11 == 0) {
                    long j12 = tLRPC$Peer3.channel_id;
                    if (j12 == 0) {
                        long j13 = tLRPC$Peer3.chat_id;
                        if (j13 != 0 && !arrayList2.contains(Long.valueOf(j13))) {
                            arrayList2.add(Long.valueOf(tLRPC$Message.fwd_from.saved_from_peer.chat_id));
                        }
                    } else if (!arrayList2.contains(Long.valueOf(j12))) {
                        arrayList2.add(Long.valueOf(tLRPC$Message.fwd_from.saved_from_peer.channel_id));
                    }
                } else if (!arrayList2.contains(Long.valueOf(j11))) {
                    arrayList.add(Long.valueOf(tLRPC$Message.fwd_from.saved_from_peer.user_id));
                }
            }
        }
        HashMap<String, String> hashMap = tLRPC$Message.params;
        if (hashMap != null && (str = hashMap.get("fwd_peer")) != null) {
            long longValue = Utilities.parseLong(str).longValue();
            if (longValue < 0) {
                long j14 = -longValue;
                if (!arrayList2.contains(Long.valueOf(j14))) {
                    arrayList2.add(Long.valueOf(j14));
                }
            }
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:2:0x0003, code lost:
        r11 = getMediaDataController().getDrafts();
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void getDialogs(int r8, int r9, int r10, boolean r11) {
        /*
            r7 = this;
            r0 = 0
            if (r11 == 0) goto L_0x002d
            org.telegram.messenger.MediaDataController r11 = r7.getMediaDataController()
            androidx.collection.LongSparseArray r11 = r11.getDrafts()
            int r1 = r11.size()
            if (r1 <= 0) goto L_0x002d
            long[] r0 = new long[r1]
            r2 = 0
            r3 = 0
        L_0x0015:
            if (r3 >= r1) goto L_0x002d
            java.lang.Object r4 = r11.valueAt(r3)
            android.util.SparseArray r4 = (android.util.SparseArray) r4
            java.lang.Object r4 = r4.get(r2)
            if (r4 != 0) goto L_0x0024
            goto L_0x002a
        L_0x0024:
            long r4 = r11.keyAt(r3)
            r0[r3] = r4
        L_0x002a:
            int r3 = r3 + 1
            goto L_0x0015
        L_0x002d:
            r6 = r0
            org.telegram.messenger.DispatchQueue r11 = r7.storageQueue
            org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda39 r0 = new org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda39
            r1 = r0
            r2 = r7
            r3 = r8
            r4 = r9
            r5 = r10
            r1.<init>(r2, r3, r4, r5, r6)
            r11.postRunnable(r0)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.getDialogs(int, int, int, boolean):void");
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v21, resolved type: org.telegram.tgnet.TLRPC$TL_dialogFolder} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v43, resolved type: org.telegram.tgnet.TLRPC$TL_dialog} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v44, resolved type: org.telegram.tgnet.TLRPC$TL_dialogFolder} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v45, resolved type: org.telegram.tgnet.TLRPC$TL_dialogFolder} */
    /* access modifiers changed from: private */
    /* JADX WARNING: Failed to insert additional move for type inference */
    /* JADX WARNING: Multi-variable type inference failed */
    /* JADX WARNING: Removed duplicated region for block: B:38:0x0139 A[Catch:{ Exception -> 0x02ab }] */
    /* JADX WARNING: Removed duplicated region for block: B:39:0x013b A[Catch:{ Exception -> 0x02ab }] */
    /* JADX WARNING: Removed duplicated region for block: B:42:0x0150 A[Catch:{ Exception -> 0x02ab }] */
    /* JADX WARNING: Removed duplicated region for block: B:43:0x0152 A[Catch:{ Exception -> 0x02ab }] */
    /* JADX WARNING: Removed duplicated region for block: B:46:0x016b A[Catch:{ Exception -> 0x02ab }] */
    /* JADX WARNING: Removed duplicated region for block: B:51:0x018f A[Catch:{ Exception -> 0x02ab }] */
    /* JADX WARNING: Removed duplicated region for block: B:52:0x0198 A[Catch:{ Exception -> 0x02ab }] */
    /* JADX WARNING: Removed duplicated region for block: B:55:0x01a0 A[Catch:{ Exception -> 0x02ab }] */
    /* JADX WARNING: Removed duplicated region for block: B:86:0x0238 A[Catch:{ Exception -> 0x02ab }] */
    /* JADX WARNING: Removed duplicated region for block: B:89:0x023f A[Catch:{ Exception -> 0x02ab }] */
    /* JADX WARNING: Removed duplicated region for block: B:92:0x0257 A[Catch:{ Exception -> 0x02ab }] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$getDialogs$183(int r23, int r24, int r25, long[] r26) {
        /*
            r22 = this;
            r1 = r22
            r2 = r26
            org.telegram.tgnet.TLRPC$TL_messages_dialogs r12 = new org.telegram.tgnet.TLRPC$TL_messages_dialogs
            r12.<init>()
            java.util.ArrayList r13 = new java.util.ArrayList
            r13.<init>()
            java.util.ArrayList r3 = new java.util.ArrayList     // Catch:{ Exception -> 0x03ae }
            r3.<init>()     // Catch:{ Exception -> 0x03ae }
            org.telegram.messenger.UserConfig r0 = r22.getUserConfig()     // Catch:{ Exception -> 0x03ae }
            long r4 = r0.getClientUserId()     // Catch:{ Exception -> 0x03ae }
            java.lang.Long r0 = java.lang.Long.valueOf(r4)     // Catch:{ Exception -> 0x03ae }
            r3.add(r0)     // Catch:{ Exception -> 0x03ae }
            java.util.ArrayList r4 = new java.util.ArrayList     // Catch:{ Exception -> 0x03ae }
            r4.<init>()     // Catch:{ Exception -> 0x03ae }
            java.util.ArrayList r5 = new java.util.ArrayList     // Catch:{ Exception -> 0x03ae }
            r5.<init>()     // Catch:{ Exception -> 0x03ae }
            java.util.ArrayList r6 = new java.util.ArrayList     // Catch:{ Exception -> 0x03ae }
            r6.<init>()     // Catch:{ Exception -> 0x03ae }
            androidx.collection.LongSparseArray r7 = new androidx.collection.LongSparseArray     // Catch:{ Exception -> 0x03ae }
            r7.<init>()     // Catch:{ Exception -> 0x03ae }
            androidx.collection.LongSparseArray r8 = new androidx.collection.LongSparseArray     // Catch:{ Exception -> 0x03ae }
            r8.<init>()     // Catch:{ Exception -> 0x03ae }
            java.util.ArrayList r9 = new java.util.ArrayList     // Catch:{ Exception -> 0x03ae }
            r10 = 2
            r9.<init>(r10)     // Catch:{ Exception -> 0x03ae }
            java.lang.Integer r0 = java.lang.Integer.valueOf(r23)     // Catch:{ Exception -> 0x03ae }
            r9.add(r0)     // Catch:{ Exception -> 0x03ae }
            r14 = 0
        L_0x0049:
            int r0 = r9.size()     // Catch:{ Exception -> 0x03ae }
            if (r14 >= r0) goto L_0x02b5
            java.lang.Object r0 = r9.get(r14)     // Catch:{ Exception -> 0x02b0 }
            java.lang.Integer r0 = (java.lang.Integer) r0     // Catch:{ Exception -> 0x02b0 }
            int r0 = r0.intValue()     // Catch:{ Exception -> 0x02b0 }
            if (r14 != 0) goto L_0x0060
            r17 = r24
            r16 = r25
            goto L_0x0064
        L_0x0060:
            r16 = 100
            r17 = 0
        L_0x0064:
            org.telegram.SQLite.SQLiteDatabase r10 = r1.database     // Catch:{ Exception -> 0x02b0 }
            java.util.Locale r15 = java.util.Locale.US     // Catch:{ Exception -> 0x02b0 }
            java.lang.String r11 = "SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, s.flags, m.date, d.pts, d.inbox_max, d.outbox_max, m.replydata, d.pinned, d.unread_count_i, d.flags, d.folder_id, d.data, d.unread_reactions FROM dialogs as d LEFT JOIN messages_v2 as m ON d.last_mid = m.mid AND d.did = m.uid LEFT JOIN dialog_settings as s ON d.did = s.did WHERE d.folder_id = %d ORDER BY d.pinned DESC, d.date DESC LIMIT %d,%d"
            r20 = r13
            r13 = 3
            java.lang.Object[] r1 = new java.lang.Object[r13]     // Catch:{ Exception -> 0x02ab }
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)     // Catch:{ Exception -> 0x02ab }
            r19 = 0
            r1[r19] = r0     // Catch:{ Exception -> 0x02ab }
            java.lang.Integer r0 = java.lang.Integer.valueOf(r17)     // Catch:{ Exception -> 0x02ab }
            r17 = 1
            r1[r17] = r0     // Catch:{ Exception -> 0x02ab }
            java.lang.Integer r0 = java.lang.Integer.valueOf(r16)     // Catch:{ Exception -> 0x02ab }
            r16 = 2
            r1[r16] = r0     // Catch:{ Exception -> 0x02ab }
            java.lang.String r0 = java.lang.String.format(r15, r11, r1)     // Catch:{ Exception -> 0x02ab }
            r1 = 0
            java.lang.Object[] r11 = new java.lang.Object[r1]     // Catch:{ Exception -> 0x02ab }
            org.telegram.SQLite.SQLiteCursor r10 = r10.queryFinalized(r0, r11)     // Catch:{ Exception -> 0x02ab }
        L_0x0092:
            boolean r0 = r10.next()     // Catch:{ Exception -> 0x02ab }
            if (r0 == 0) goto L_0x0294
            r11 = r14
            long r13 = r10.longValue(r1)     // Catch:{ Exception -> 0x02ab }
            boolean r0 = org.telegram.messenger.DialogObject.isFolderDialogId(r13)     // Catch:{ Exception -> 0x02ab }
            if (r0 == 0) goto L_0x00e7
            org.telegram.tgnet.TLRPC$TL_dialogFolder r0 = new org.telegram.tgnet.TLRPC$TL_dialogFolder     // Catch:{ Exception -> 0x02ab }
            r0.<init>()     // Catch:{ Exception -> 0x02ab }
            r1 = 18
            boolean r16 = r10.isNull(r1)     // Catch:{ Exception -> 0x02ab }
            if (r16 != 0) goto L_0x00d7
            org.telegram.tgnet.NativeByteBuffer r1 = r10.byteBufferValue(r1)     // Catch:{ Exception -> 0x02ab }
            if (r1 == 0) goto L_0x00c7
            r17 = r5
            r15 = 0
            int r5 = r1.readInt32(r15)     // Catch:{ Exception -> 0x02ab }
            org.telegram.tgnet.TLRPC$TL_folder r5 = org.telegram.tgnet.TLRPC$TL_folder.TLdeserialize(r1, r5, r15)     // Catch:{ Exception -> 0x02ab }
            r0.folder = r5     // Catch:{ Exception -> 0x02ab }
            r1.reuse()     // Catch:{ Exception -> 0x02ab }
            goto L_0x00d9
        L_0x00c7:
            r17 = r5
            org.telegram.tgnet.TLRPC$TL_folder r1 = new org.telegram.tgnet.TLRPC$TL_folder     // Catch:{ Exception -> 0x02ab }
            r1.<init>()     // Catch:{ Exception -> 0x02ab }
            r0.folder = r1     // Catch:{ Exception -> 0x02ab }
            int r5 = org.telegram.messenger.DialogObject.getFolderId(r13)     // Catch:{ Exception -> 0x02ab }
            r1.id = r5     // Catch:{ Exception -> 0x02ab }
            goto L_0x00d9
        L_0x00d7:
            r17 = r5
        L_0x00d9:
            if (r11 != 0) goto L_0x00ee
            org.telegram.tgnet.TLRPC$TL_folder r1 = r0.folder     // Catch:{ Exception -> 0x02ab }
            int r1 = r1.id     // Catch:{ Exception -> 0x02ab }
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)     // Catch:{ Exception -> 0x02ab }
            r9.add(r1)     // Catch:{ Exception -> 0x02ab }
            goto L_0x00ee
        L_0x00e7:
            r17 = r5
            org.telegram.tgnet.TLRPC$TL_dialog r0 = new org.telegram.tgnet.TLRPC$TL_dialog     // Catch:{ Exception -> 0x02ab }
            r0.<init>()     // Catch:{ Exception -> 0x02ab }
        L_0x00ee:
            r0.id = r13     // Catch:{ Exception -> 0x02ab }
            r1 = 1
            int r5 = r10.intValue(r1)     // Catch:{ Exception -> 0x02ab }
            r0.top_message = r5     // Catch:{ Exception -> 0x02ab }
            r1 = 2
            int r5 = r10.intValue(r1)     // Catch:{ Exception -> 0x02ab }
            r0.unread_count = r5     // Catch:{ Exception -> 0x02ab }
            r5 = 3
            int r15 = r10.intValue(r5)     // Catch:{ Exception -> 0x02ab }
            r0.last_message_date = r15     // Catch:{ Exception -> 0x02ab }
            r15 = 10
            int r15 = r10.intValue(r15)     // Catch:{ Exception -> 0x02ab }
            r0.pts = r15     // Catch:{ Exception -> 0x02ab }
            if (r15 == 0) goto L_0x011b
            r15 = r6
            long r5 = r0.id     // Catch:{ Exception -> 0x02ab }
            boolean r5 = org.telegram.messenger.DialogObject.isUserDialog(r5)     // Catch:{ Exception -> 0x02ab }
            if (r5 == 0) goto L_0x0119
            goto L_0x011c
        L_0x0119:
            r5 = 1
            goto L_0x011d
        L_0x011b:
            r15 = r6
        L_0x011c:
            r5 = 0
        L_0x011d:
            r0.flags = r5     // Catch:{ Exception -> 0x02ab }
            r5 = 11
            int r5 = r10.intValue(r5)     // Catch:{ Exception -> 0x02ab }
            r0.read_inbox_max_id = r5     // Catch:{ Exception -> 0x02ab }
            r5 = 12
            int r5 = r10.intValue(r5)     // Catch:{ Exception -> 0x02ab }
            r0.read_outbox_max_id = r5     // Catch:{ Exception -> 0x02ab }
            r5 = 14
            int r5 = r10.intValue(r5)     // Catch:{ Exception -> 0x02ab }
            r0.pinnedNum = r5     // Catch:{ Exception -> 0x02ab }
            if (r5 == 0) goto L_0x013b
            r5 = 1
            goto L_0x013c
        L_0x013b:
            r5 = 0
        L_0x013c:
            r0.pinned = r5     // Catch:{ Exception -> 0x02ab }
            r5 = 15
            int r5 = r10.intValue(r5)     // Catch:{ Exception -> 0x02ab }
            r0.unread_mentions_count = r5     // Catch:{ Exception -> 0x02ab }
            r5 = 16
            int r5 = r10.intValue(r5)     // Catch:{ Exception -> 0x02ab }
            r6 = 1
            r5 = r5 & r6
            if (r5 == 0) goto L_0x0152
            r5 = 1
            goto L_0x0153
        L_0x0152:
            r5 = 0
        L_0x0153:
            r0.unread_mark = r5     // Catch:{ Exception -> 0x02ab }
            r5 = 8
            long r5 = r10.longValue(r5)     // Catch:{ Exception -> 0x02ab }
            int r1 = (int) r5     // Catch:{ Exception -> 0x02ab }
            r21 = r9
            org.telegram.tgnet.TLRPC$TL_peerNotifySettings r9 = new org.telegram.tgnet.TLRPC$TL_peerNotifySettings     // Catch:{ Exception -> 0x02ab }
            r9.<init>()     // Catch:{ Exception -> 0x02ab }
            r0.notify_settings = r9     // Catch:{ Exception -> 0x02ab }
            r18 = 1
            r1 = r1 & 1
            if (r1 == 0) goto L_0x0178
            r1 = 32
            long r5 = r5 >> r1
            int r1 = (int) r5     // Catch:{ Exception -> 0x02ab }
            r9.mute_until = r1     // Catch:{ Exception -> 0x02ab }
            if (r1 != 0) goto L_0x0178
            r1 = 2147483647(0x7fffffff, float:NaN)
            r9.mute_until = r1     // Catch:{ Exception -> 0x02ab }
        L_0x0178:
            r1 = 17
            int r1 = r10.intValue(r1)     // Catch:{ Exception -> 0x02ab }
            r0.folder_id = r1     // Catch:{ Exception -> 0x02ab }
            r1 = 19
            int r1 = r10.intValue(r1)     // Catch:{ Exception -> 0x02ab }
            r0.unread_reactions_count = r1     // Catch:{ Exception -> 0x02ab }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r12.dialogs     // Catch:{ Exception -> 0x02ab }
            r1.add(r0)     // Catch:{ Exception -> 0x02ab }
            if (r2 == 0) goto L_0x0198
            java.lang.Long r1 = java.lang.Long.valueOf(r13)     // Catch:{ Exception -> 0x02ab }
            r5 = r15
            r5.add(r1)     // Catch:{ Exception -> 0x02ab }
            goto L_0x0199
        L_0x0198:
            r5 = r15
        L_0x0199:
            r1 = 4
            org.telegram.tgnet.NativeByteBuffer r1 = r10.byteBufferValue(r1)     // Catch:{ Exception -> 0x02ab }
            if (r1 == 0) goto L_0x0238
            r6 = 0
            int r9 = r1.readInt32(r6)     // Catch:{ Exception -> 0x02ab }
            org.telegram.tgnet.TLRPC$Message r9 = org.telegram.tgnet.TLRPC$Message.TLdeserialize(r1, r9, r6)     // Catch:{ Exception -> 0x02ab }
            if (r9 == 0) goto L_0x0233
            org.telegram.messenger.UserConfig r6 = r22.getUserConfig()     // Catch:{ Exception -> 0x02ab }
            r15 = r5
            long r5 = r6.clientUserId     // Catch:{ Exception -> 0x02ab }
            r9.readAttachPath(r1, r5)     // Catch:{ Exception -> 0x02ab }
            r1.reuse()     // Catch:{ Exception -> 0x02ab }
            r1 = 5
            int r1 = r10.intValue(r1)     // Catch:{ Exception -> 0x02ab }
            org.telegram.messenger.MessageObject.setUnreadFlags(r9, r1)     // Catch:{ Exception -> 0x02ab }
            r1 = 6
            int r1 = r10.intValue(r1)     // Catch:{ Exception -> 0x02ab }
            r9.id = r1     // Catch:{ Exception -> 0x02ab }
            r1 = 9
            int r1 = r10.intValue(r1)     // Catch:{ Exception -> 0x02ab }
            if (r1 == 0) goto L_0x01d1
            r0.last_message_date = r1     // Catch:{ Exception -> 0x02ab }
        L_0x01d1:
            r1 = 7
            int r1 = r10.intValue(r1)     // Catch:{ Exception -> 0x02ab }
            r9.send_state = r1     // Catch:{ Exception -> 0x02ab }
            long r0 = r0.id     // Catch:{ Exception -> 0x02ab }
            r9.dialog_id = r0     // Catch:{ Exception -> 0x02ab }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r0 = r12.messages     // Catch:{ Exception -> 0x02ab }
            r0.add(r9)     // Catch:{ Exception -> 0x02ab }
            addUsersAndChatsFromMessage(r9, r3, r4)     // Catch:{ Exception -> 0x02ab }
            org.telegram.tgnet.TLRPC$TL_messageReplyHeader r0 = r9.reply_to     // Catch:{ Exception -> 0x022e }
            if (r0 == 0) goto L_0x0239
            int r0 = r0.reply_to_msg_id     // Catch:{ Exception -> 0x022e }
            if (r0 == 0) goto L_0x0239
            org.telegram.tgnet.TLRPC$MessageAction r0 = r9.action     // Catch:{ Exception -> 0x022e }
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_messageActionPinMessage     // Catch:{ Exception -> 0x022e }
            if (r1 != 0) goto L_0x01fa
            boolean r1 = r0 instanceof org.telegram.tgnet.TLRPC$TL_messageActionPaymentSent     // Catch:{ Exception -> 0x022e }
            if (r1 != 0) goto L_0x01fa
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC$TL_messageActionGameScore     // Catch:{ Exception -> 0x022e }
            if (r0 == 0) goto L_0x0239
        L_0x01fa:
            r0 = 13
            boolean r1 = r10.isNull(r0)     // Catch:{ Exception -> 0x022e }
            if (r1 != 0) goto L_0x0226
            org.telegram.tgnet.NativeByteBuffer r0 = r10.byteBufferValue(r0)     // Catch:{ Exception -> 0x022e }
            if (r0 == 0) goto L_0x0226
            r1 = 0
            int r5 = r0.readInt32(r1)     // Catch:{ Exception -> 0x022e }
            org.telegram.tgnet.TLRPC$Message r5 = org.telegram.tgnet.TLRPC$Message.TLdeserialize(r0, r5, r1)     // Catch:{ Exception -> 0x022e }
            r9.replyMessage = r5     // Catch:{ Exception -> 0x022e }
            org.telegram.messenger.UserConfig r1 = r22.getUserConfig()     // Catch:{ Exception -> 0x022e }
            long r1 = r1.clientUserId     // Catch:{ Exception -> 0x022e }
            r5.readAttachPath(r0, r1)     // Catch:{ Exception -> 0x022e }
            r0.reuse()     // Catch:{ Exception -> 0x022e }
            org.telegram.tgnet.TLRPC$Message r0 = r9.replyMessage     // Catch:{ Exception -> 0x022e }
            if (r0 == 0) goto L_0x0226
            addUsersAndChatsFromMessage(r0, r3, r4)     // Catch:{ Exception -> 0x022e }
        L_0x0226:
            org.telegram.tgnet.TLRPC$Message r0 = r9.replyMessage     // Catch:{ Exception -> 0x022e }
            if (r0 != 0) goto L_0x0239
            addReplyMessages(r9, r7, r8)     // Catch:{ Exception -> 0x022e }
            goto L_0x0239
        L_0x022e:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ Exception -> 0x02ab }
            goto L_0x0239
        L_0x0233:
            r15 = r5
            r1.reuse()     // Catch:{ Exception -> 0x02ab }
            goto L_0x0239
        L_0x0238:
            r15 = r5
        L_0x0239:
            boolean r0 = org.telegram.messenger.DialogObject.isEncryptedDialog(r13)     // Catch:{ Exception -> 0x02ab }
            if (r0 == 0) goto L_0x0257
            int r0 = org.telegram.messenger.DialogObject.getEncryptedChatId(r13)     // Catch:{ Exception -> 0x02ab }
            java.lang.Integer r1 = java.lang.Integer.valueOf(r0)     // Catch:{ Exception -> 0x02ab }
            r2 = r17
            boolean r1 = r2.contains(r1)     // Catch:{ Exception -> 0x02ab }
            if (r1 != 0) goto L_0x0289
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)     // Catch:{ Exception -> 0x02ab }
            r2.add(r0)     // Catch:{ Exception -> 0x02ab }
            goto L_0x0289
        L_0x0257:
            r2 = r17
            boolean r0 = org.telegram.messenger.DialogObject.isUserDialog(r13)     // Catch:{ Exception -> 0x02ab }
            if (r0 == 0) goto L_0x0271
            java.lang.Long r0 = java.lang.Long.valueOf(r13)     // Catch:{ Exception -> 0x02ab }
            boolean r0 = r3.contains(r0)     // Catch:{ Exception -> 0x02ab }
            if (r0 != 0) goto L_0x0289
            java.lang.Long r0 = java.lang.Long.valueOf(r13)     // Catch:{ Exception -> 0x02ab }
            r3.add(r0)     // Catch:{ Exception -> 0x02ab }
            goto L_0x0289
        L_0x0271:
            boolean r0 = org.telegram.messenger.DialogObject.isChatDialog(r13)     // Catch:{ Exception -> 0x02ab }
            if (r0 == 0) goto L_0x0289
            long r0 = -r13
            java.lang.Long r5 = java.lang.Long.valueOf(r0)     // Catch:{ Exception -> 0x02ab }
            boolean r5 = r4.contains(r5)     // Catch:{ Exception -> 0x02ab }
            if (r5 != 0) goto L_0x0289
            java.lang.Long r0 = java.lang.Long.valueOf(r0)     // Catch:{ Exception -> 0x02ab }
            r4.add(r0)     // Catch:{ Exception -> 0x02ab }
        L_0x0289:
            r5 = r2
            r14 = r11
            r6 = r15
            r9 = r21
            r1 = 0
            r13 = 3
            r2 = r26
            goto L_0x0092
        L_0x0294:
            r2 = r5
            r15 = r6
            r21 = r9
            r11 = r14
            r10.dispose()     // Catch:{ Exception -> 0x02ab }
            int r14 = r11 + 1
            r1 = r22
            r5 = r2
            r6 = r15
            r13 = r20
            r9 = r21
            r10 = 2
            r2 = r26
            goto L_0x0049
        L_0x02ab:
            r0 = move-exception
            r1 = r22
            goto L_0x03ab
        L_0x02b0:
            r0 = move-exception
            r1 = r22
            goto L_0x03af
        L_0x02b5:
            r2 = r5
            r15 = r6
            r20 = r13
            r1.loadReplyMessages(r7, r8, r3, r4)     // Catch:{ Exception -> 0x03aa }
            java.lang.String r0 = ","
            r5 = r26
            if (r5 == 0) goto L_0x0366
            java.util.ArrayList r6 = new java.util.ArrayList     // Catch:{ Exception -> 0x03aa }
            r6.<init>()     // Catch:{ Exception -> 0x03aa }
            r7 = 0
        L_0x02c8:
            int r8 = r5.length     // Catch:{ Exception -> 0x03aa }
            if (r7 >= r8) goto L_0x0319
            r8 = r5[r7]     // Catch:{ Exception -> 0x03aa }
            boolean r10 = org.telegram.messenger.DialogObject.isEncryptedDialog(r8)     // Catch:{ Exception -> 0x03aa }
            if (r10 == 0) goto L_0x02d5
            r9 = r15
            goto L_0x0315
        L_0x02d5:
            r10 = 0
            int r13 = (r8 > r10 ? 1 : (r8 == r10 ? 0 : -1))
            if (r13 <= 0) goto L_0x02ed
            java.lang.Long r10 = java.lang.Long.valueOf(r8)     // Catch:{ Exception -> 0x03aa }
            boolean r10 = r3.contains(r10)     // Catch:{ Exception -> 0x03aa }
            if (r10 != 0) goto L_0x02ff
            java.lang.Long r8 = java.lang.Long.valueOf(r8)     // Catch:{ Exception -> 0x03aa }
            r3.add(r8)     // Catch:{ Exception -> 0x03aa }
            goto L_0x02ff
        L_0x02ed:
            long r8 = -r8
            java.lang.Long r10 = java.lang.Long.valueOf(r8)     // Catch:{ Exception -> 0x03aa }
            boolean r10 = r4.contains(r10)     // Catch:{ Exception -> 0x03aa }
            if (r10 != 0) goto L_0x02ff
            java.lang.Long r8 = java.lang.Long.valueOf(r8)     // Catch:{ Exception -> 0x03aa }
            r4.add(r8)     // Catch:{ Exception -> 0x03aa }
        L_0x02ff:
            r8 = r5[r7]     // Catch:{ Exception -> 0x03aa }
            java.lang.Long r8 = java.lang.Long.valueOf(r8)     // Catch:{ Exception -> 0x03aa }
            r9 = r15
            boolean r8 = r9.contains(r8)     // Catch:{ Exception -> 0x03aa }
            if (r8 != 0) goto L_0x0315
            r10 = r5[r7]     // Catch:{ Exception -> 0x03aa }
            java.lang.Long r8 = java.lang.Long.valueOf(r10)     // Catch:{ Exception -> 0x03aa }
            r6.add(r8)     // Catch:{ Exception -> 0x03aa }
        L_0x0315:
            int r7 = r7 + 1
            r15 = r9
            goto L_0x02c8
        L_0x0319:
            boolean r5 = r6.isEmpty()     // Catch:{ Exception -> 0x03aa }
            if (r5 != 0) goto L_0x035d
            androidx.collection.LongSparseArray r5 = new androidx.collection.LongSparseArray     // Catch:{ Exception -> 0x03aa }
            int r7 = r6.size()     // Catch:{ Exception -> 0x03aa }
            r5.<init>(r7)     // Catch:{ Exception -> 0x03aa }
            org.telegram.SQLite.SQLiteDatabase r7 = r1.database     // Catch:{ Exception -> 0x03aa }
            java.util.Locale r8 = java.util.Locale.US     // Catch:{ Exception -> 0x03aa }
            java.lang.String r9 = "SELECT did, folder_id FROM dialogs WHERE did IN(%s)"
            r10 = 1
            java.lang.Object[] r11 = new java.lang.Object[r10]     // Catch:{ Exception -> 0x03aa }
            java.lang.String r6 = android.text.TextUtils.join(r0, r6)     // Catch:{ Exception -> 0x03aa }
            r10 = 0
            r11[r10] = r6     // Catch:{ Exception -> 0x03aa }
            java.lang.String r6 = java.lang.String.format(r8, r9, r11)     // Catch:{ Exception -> 0x03aa }
            java.lang.Object[] r8 = new java.lang.Object[r10]     // Catch:{ Exception -> 0x03aa }
            org.telegram.SQLite.SQLiteCursor r6 = r7.queryFinalized(r6, r8)     // Catch:{ Exception -> 0x03aa }
        L_0x0342:
            boolean r7 = r6.next()     // Catch:{ Exception -> 0x03aa }
            if (r7 == 0) goto L_0x0359
            long r7 = r6.longValue(r10)     // Catch:{ Exception -> 0x03aa }
            r9 = 1
            int r11 = r6.intValue(r9)     // Catch:{ Exception -> 0x03aa }
            java.lang.Integer r11 = java.lang.Integer.valueOf(r11)     // Catch:{ Exception -> 0x03aa }
            r5.put(r7, r11)     // Catch:{ Exception -> 0x03aa }
            goto L_0x0342
        L_0x0359:
            r6.dispose()     // Catch:{ Exception -> 0x03aa }
            goto L_0x035e
        L_0x035d:
            r5 = 0
        L_0x035e:
            org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda117 r6 = new org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda117     // Catch:{ Exception -> 0x03aa }
            r6.<init>(r1, r5)     // Catch:{ Exception -> 0x03aa }
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r6)     // Catch:{ Exception -> 0x03aa }
        L_0x0366:
            boolean r5 = r2.isEmpty()     // Catch:{ Exception -> 0x03aa }
            if (r5 != 0) goto L_0x0376
            java.lang.String r2 = android.text.TextUtils.join(r0, r2)     // Catch:{ Exception -> 0x03aa }
            r13 = r20
            r1.getEncryptedChatsInternal(r2, r13, r3)     // Catch:{ Exception -> 0x03ae }
            goto L_0x0378
        L_0x0376:
            r13 = r20
        L_0x0378:
            boolean r2 = r4.isEmpty()     // Catch:{ Exception -> 0x03ae }
            if (r2 != 0) goto L_0x0387
            java.lang.String r2 = android.text.TextUtils.join(r0, r4)     // Catch:{ Exception -> 0x03ae }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r4 = r12.chats     // Catch:{ Exception -> 0x03ae }
            r1.getChatsInternal(r2, r4)     // Catch:{ Exception -> 0x03ae }
        L_0x0387:
            boolean r2 = r3.isEmpty()     // Catch:{ Exception -> 0x03ae }
            if (r2 != 0) goto L_0x0396
            java.lang.String r0 = android.text.TextUtils.join(r0, r3)     // Catch:{ Exception -> 0x03ae }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r12.users     // Catch:{ Exception -> 0x03ae }
            r1.getUsersInternal(r0, r2)     // Catch:{ Exception -> 0x03ae }
        L_0x0396:
            org.telegram.messenger.MessagesController r2 = r22.getMessagesController()     // Catch:{ Exception -> 0x03ae }
            r8 = 1
            r9 = 0
            r10 = 0
            r11 = 1
            r3 = r12
            r4 = r13
            r5 = r23
            r6 = r24
            r7 = r25
            r2.processLoadedDialogs(r3, r4, r5, r6, r7, r8, r9, r10, r11)     // Catch:{ Exception -> 0x03ae }
            goto L_0x03d6
        L_0x03aa:
            r0 = move-exception
        L_0x03ab:
            r13 = r20
            goto L_0x03af
        L_0x03ae:
            r0 = move-exception
        L_0x03af:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r12.dialogs
            r2.clear()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r12.users
            r2.clear()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r2 = r12.chats
            r2.clear()
            r13.clear()
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
            org.telegram.messenger.MessagesController r2 = r22.getMessagesController()
            r6 = 0
            r7 = 100
            r8 = 1
            r9 = 1
            r10 = 0
            r11 = 1
            r3 = r12
            r4 = r13
            r5 = r23
            r2.processLoadedDialogs(r3, r4, r5, r6, r7, r8, r9, r10, r11)
        L_0x03d6:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$getDialogs$183(int, int, int, long[]):void");
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getDialogs$182(LongSparseArray longSparseArray) {
        MediaDataController mediaDataController = getMediaDataController();
        mediaDataController.clearDraftsFolderIds();
        if (longSparseArray != null) {
            int size = longSparseArray.size();
            for (int i = 0; i < size; i++) {
                mediaDataController.setDraftFolderId(longSparseArray.keyAt(i), ((Integer) longSparseArray.valueAt(i)).intValue());
            }
        }
    }

    public static void createFirstHoles(long j, SQLitePreparedStatement sQLitePreparedStatement, SQLitePreparedStatement sQLitePreparedStatement2, int i) throws Exception {
        sQLitePreparedStatement.requery();
        sQLitePreparedStatement.bindLong(1, j);
        sQLitePreparedStatement.bindInteger(2, i == 1 ? 1 : 0);
        sQLitePreparedStatement.bindInteger(3, i);
        sQLitePreparedStatement.step();
        for (int i2 = 0; i2 < 8; i2++) {
            sQLitePreparedStatement2.requery();
            sQLitePreparedStatement2.bindLong(1, j);
            sQLitePreparedStatement2.bindInteger(2, i2);
            sQLitePreparedStatement2.bindInteger(3, i == 1 ? 1 : 0);
            sQLitePreparedStatement2.bindInteger(4, i);
            sQLitePreparedStatement2.step();
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:33:0x0121, code lost:
        if (r12 < 0) goto L_0x0123;
     */
    /* JADX WARNING: Removed duplicated region for block: B:100:0x0305 A[Catch:{ Exception -> 0x040a }] */
    /* JADX WARNING: Removed duplicated region for block: B:103:0x036e A[Catch:{ Exception -> 0x040a }] */
    /* JADX WARNING: Removed duplicated region for block: B:104:0x0387 A[Catch:{ Exception -> 0x040a }] */
    /* JADX WARNING: Removed duplicated region for block: B:107:0x0399 A[Catch:{ Exception -> 0x040a }] */
    /* JADX WARNING: Removed duplicated region for block: B:110:0x03a0 A[Catch:{ Exception -> 0x040a }] */
    /* JADX WARNING: Removed duplicated region for block: B:38:0x013b A[Catch:{ Exception -> 0x040a }] */
    /* JADX WARNING: Removed duplicated region for block: B:51:0x01b2 A[Catch:{ Exception -> 0x040a }] */
    /* JADX WARNING: Removed duplicated region for block: B:52:0x01b5 A[Catch:{ Exception -> 0x040a }] */
    /* JADX WARNING: Removed duplicated region for block: B:55:0x01bf A[Catch:{ Exception -> 0x040a }] */
    /* JADX WARNING: Removed duplicated region for block: B:57:0x01c3 A[Catch:{ Exception -> 0x040a }] */
    /* JADX WARNING: Removed duplicated region for block: B:63:0x01d1 A[Catch:{ Exception -> 0x040a }] */
    /* JADX WARNING: Removed duplicated region for block: B:64:0x01d3 A[Catch:{ Exception -> 0x040a }] */
    /* JADX WARNING: Removed duplicated region for block: B:67:0x01e4 A[Catch:{ Exception -> 0x040a }] */
    /* JADX WARNING: Removed duplicated region for block: B:68:0x01fa A[Catch:{ Exception -> 0x040a }] */
    /* JADX WARNING: Removed duplicated region for block: B:71:0x0204 A[Catch:{ Exception -> 0x040a }] */
    /* JADX WARNING: Removed duplicated region for block: B:76:0x0211 A[Catch:{ Exception -> 0x040a }] */
    /* JADX WARNING: Removed duplicated region for block: B:79:0x022b A[Catch:{ Exception -> 0x040a }] */
    /* JADX WARNING: Removed duplicated region for block: B:81:0x0251 A[Catch:{ Exception -> 0x040a }] */
    /* JADX WARNING: Removed duplicated region for block: B:87:0x0261 A[Catch:{ Exception -> 0x040a }] */
    /* JADX WARNING: Removed duplicated region for block: B:91:0x029a A[Catch:{ Exception -> 0x040a }] */
    /* JADX WARNING: Removed duplicated region for block: B:94:0x02c4 A[Catch:{ Exception -> 0x040a }] */
    /* JADX WARNING: Removed duplicated region for block: B:97:0x02c8 A[Catch:{ Exception -> 0x040a }] */
    /* JADX WARNING: Removed duplicated region for block: B:98:0x02eb A[Catch:{ Exception -> 0x040a }] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void putDialogsInternal(org.telegram.tgnet.TLRPC$messages_Dialogs r24, int r25) {
        /*
            r23 = this;
            r7 = r23
            r0 = r24
            r8 = r25
            org.telegram.SQLite.SQLiteDatabase r1 = r7.database     // Catch:{ Exception -> 0x040a }
            r1.beginTransaction()     // Catch:{ Exception -> 0x040a }
            androidx.collection.LongSparseArray r9 = new androidx.collection.LongSparseArray     // Catch:{ Exception -> 0x040a }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r0.messages     // Catch:{ Exception -> 0x040a }
            int r1 = r1.size()     // Catch:{ Exception -> 0x040a }
            r9.<init>(r1)     // Catch:{ Exception -> 0x040a }
            r1 = 0
        L_0x0017:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r2 = r0.messages     // Catch:{ Exception -> 0x040a }
            int r2 = r2.size()     // Catch:{ Exception -> 0x040a }
            if (r1 >= r2) goto L_0x0031
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r2 = r0.messages     // Catch:{ Exception -> 0x040a }
            java.lang.Object r2 = r2.get(r1)     // Catch:{ Exception -> 0x040a }
            org.telegram.tgnet.TLRPC$Message r2 = (org.telegram.tgnet.TLRPC$Message) r2     // Catch:{ Exception -> 0x040a }
            long r3 = org.telegram.messenger.MessageObject.getDialogId(r2)     // Catch:{ Exception -> 0x040a }
            r9.put(r3, r2)     // Catch:{ Exception -> 0x040a }
            int r1 = r1 + 1
            goto L_0x0017
        L_0x0031:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r0.dialogs     // Catch:{ Exception -> 0x040a }
            boolean r1 = r1.isEmpty()     // Catch:{ Exception -> 0x040a }
            if (r1 != 0) goto L_0x03f6
            org.telegram.SQLite.SQLiteDatabase r1 = r7.database     // Catch:{ Exception -> 0x040a }
            java.lang.String r2 = "REPLACE INTO messages_v2 VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, NULL, ?, ?, ?, ?, ?, ?, 0)"
            org.telegram.SQLite.SQLitePreparedStatement r11 = r1.executeFast(r2)     // Catch:{ Exception -> 0x040a }
            org.telegram.SQLite.SQLiteDatabase r1 = r7.database     // Catch:{ Exception -> 0x040a }
            java.lang.String r2 = "REPLACE INTO dialogs VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r12 = r1.executeFast(r2)     // Catch:{ Exception -> 0x040a }
            org.telegram.SQLite.SQLiteDatabase r1 = r7.database     // Catch:{ Exception -> 0x040a }
            java.lang.String r2 = "REPLACE INTO media_v4 VALUES(?, ?, ?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r13 = r1.executeFast(r2)     // Catch:{ Exception -> 0x040a }
            org.telegram.SQLite.SQLiteDatabase r1 = r7.database     // Catch:{ Exception -> 0x040a }
            java.lang.String r2 = "REPLACE INTO dialog_settings VALUES(?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r14 = r1.executeFast(r2)     // Catch:{ Exception -> 0x040a }
            org.telegram.SQLite.SQLiteDatabase r1 = r7.database     // Catch:{ Exception -> 0x040a }
            java.lang.String r2 = "REPLACE INTO messages_holes VALUES(?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r15 = r1.executeFast(r2)     // Catch:{ Exception -> 0x040a }
            org.telegram.SQLite.SQLiteDatabase r1 = r7.database     // Catch:{ Exception -> 0x040a }
            java.lang.String r2 = "REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r6 = r1.executeFast(r2)     // Catch:{ Exception -> 0x040a }
            r1 = 2147483647(0x7fffffff, float:NaN)
            r2 = 0
            r3 = 0
            r4 = 0
        L_0x006f:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r5 = r0.dialogs     // Catch:{ Exception -> 0x040a }
            int r5 = r5.size()     // Catch:{ Exception -> 0x040a }
            r16 = r11
            if (r3 >= r5) goto L_0x03ca
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r5 = r0.dialogs     // Catch:{ Exception -> 0x040a }
            java.lang.Object r5 = r5.get(r3)     // Catch:{ Exception -> 0x040a }
            org.telegram.tgnet.TLRPC$Dialog r5 = (org.telegram.tgnet.TLRPC$Dialog) r5     // Catch:{ Exception -> 0x040a }
            org.telegram.messenger.DialogObject.initDialog(r5)     // Catch:{ Exception -> 0x040a }
            androidx.collection.LongSparseArray<java.lang.Boolean> r10 = r7.unknownDialogsIds     // Catch:{ Exception -> 0x040a }
            r17 = r12
            long r11 = r5.id     // Catch:{ Exception -> 0x040a }
            r10.remove(r11)     // Catch:{ Exception -> 0x040a }
            r12 = 1
            if (r8 != r12) goto L_0x00b9
            org.telegram.SQLite.SQLiteDatabase r12 = r7.database     // Catch:{ Exception -> 0x040a }
            java.lang.StringBuilder r10 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x040a }
            r10.<init>()     // Catch:{ Exception -> 0x040a }
            java.lang.String r11 = "SELECT did FROM dialogs WHERE did = "
            r10.append(r11)     // Catch:{ Exception -> 0x040a }
            r11 = r14
            r18 = r15
            long r14 = r5.id     // Catch:{ Exception -> 0x040a }
            r10.append(r14)     // Catch:{ Exception -> 0x040a }
            java.lang.String r10 = r10.toString()     // Catch:{ Exception -> 0x040a }
            r14 = 0
            java.lang.Object[] r15 = new java.lang.Object[r14]     // Catch:{ Exception -> 0x040a }
            org.telegram.SQLite.SQLiteCursor r10 = r12.queryFinalized(r10, r15)     // Catch:{ Exception -> 0x040a }
            boolean r12 = r10.next()     // Catch:{ Exception -> 0x040a }
            r10.dispose()     // Catch:{ Exception -> 0x040a }
            if (r12 == 0) goto L_0x0131
            goto L_0x0123
        L_0x00b9:
            r11 = r14
            r18 = r15
            r10 = 2
            if (r8 != r10) goto L_0x00f3
            org.telegram.SQLite.SQLiteDatabase r10 = r7.database     // Catch:{ Exception -> 0x040a }
            java.lang.StringBuilder r12 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x040a }
            r12.<init>()     // Catch:{ Exception -> 0x040a }
            java.lang.String r14 = "SELECT pinned FROM dialogs WHERE did = "
            r12.append(r14)     // Catch:{ Exception -> 0x040a }
            long r14 = r5.id     // Catch:{ Exception -> 0x040a }
            r12.append(r14)     // Catch:{ Exception -> 0x040a }
            java.lang.String r12 = r12.toString()     // Catch:{ Exception -> 0x040a }
            r14 = 0
            java.lang.Object[] r15 = new java.lang.Object[r14]     // Catch:{ Exception -> 0x040a }
            org.telegram.SQLite.SQLiteCursor r10 = r10.queryFinalized(r12, r15)     // Catch:{ Exception -> 0x040a }
            boolean r12 = r10.next()     // Catch:{ Exception -> 0x040a }
            if (r12 == 0) goto L_0x00ee
            boolean r12 = r5.pinned     // Catch:{ Exception -> 0x040a }
            if (r12 == 0) goto L_0x00ec
            r12 = 0
            int r14 = r10.intValue(r12)     // Catch:{ Exception -> 0x040a }
            r5.pinnedNum = r14     // Catch:{ Exception -> 0x040a }
        L_0x00ec:
            r12 = 1
            goto L_0x00ef
        L_0x00ee:
            r12 = 0
        L_0x00ef:
            r10.dispose()     // Catch:{ Exception -> 0x040a }
            goto L_0x0131
        L_0x00f3:
            r10 = 3
            if (r8 != r10) goto L_0x0130
            org.telegram.SQLite.SQLiteDatabase r10 = r7.database     // Catch:{ Exception -> 0x040a }
            java.lang.StringBuilder r12 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x040a }
            r12.<init>()     // Catch:{ Exception -> 0x040a }
            java.lang.String r14 = "SELECT last_mid FROM dialogs WHERE did = "
            r12.append(r14)     // Catch:{ Exception -> 0x040a }
            long r14 = r5.id     // Catch:{ Exception -> 0x040a }
            r12.append(r14)     // Catch:{ Exception -> 0x040a }
            java.lang.String r12 = r12.toString()     // Catch:{ Exception -> 0x040a }
            r14 = 0
            java.lang.Object[] r15 = new java.lang.Object[r14]     // Catch:{ Exception -> 0x040a }
            org.telegram.SQLite.SQLiteCursor r10 = r10.queryFinalized(r12, r15)     // Catch:{ Exception -> 0x040a }
            boolean r12 = r10.next()     // Catch:{ Exception -> 0x040a }
            if (r12 == 0) goto L_0x011d
            int r12 = r10.intValue(r14)     // Catch:{ Exception -> 0x040a }
            goto L_0x011e
        L_0x011d:
            r12 = 0
        L_0x011e:
            r10.dispose()     // Catch:{ Exception -> 0x040a }
            if (r12 >= 0) goto L_0x0130
        L_0x0123:
            r12 = r3
            r19 = r9
            r9 = r11
            r15 = r16
            r14 = r17
            r5 = r18
            r11 = r6
            goto L_0x03bd
        L_0x0130:
            r12 = 0
        L_0x0131:
            long r14 = r5.id     // Catch:{ Exception -> 0x040a }
            java.lang.Object r10 = r9.get(r14)     // Catch:{ Exception -> 0x040a }
            org.telegram.tgnet.TLRPC$Message r10 = (org.telegram.tgnet.TLRPC$Message) r10     // Catch:{ Exception -> 0x040a }
            if (r10 == 0) goto L_0x0305
            int r14 = r10.date     // Catch:{ Exception -> 0x040a }
            r15 = 0
            int r14 = java.lang.Math.max(r14, r15)     // Catch:{ Exception -> 0x040a }
            boolean r15 = r7.isValidKeyboardToSave(r10)     // Catch:{ Exception -> 0x040a }
            if (r15 == 0) goto L_0x0154
            org.telegram.messenger.MediaDataController r15 = r23.getMediaDataController()     // Catch:{ Exception -> 0x040a }
            r19 = r9
            long r8 = r5.id     // Catch:{ Exception -> 0x040a }
            r15.putBotKeyboard(r8, r10)     // Catch:{ Exception -> 0x040a }
            goto L_0x0156
        L_0x0154:
            r19 = r9
        L_0x0156:
            r7.fixUnsupportedMedia(r10)     // Catch:{ Exception -> 0x040a }
            org.telegram.tgnet.NativeByteBuffer r8 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x040a }
            int r9 = r10.getObjectSize()     // Catch:{ Exception -> 0x040a }
            r8.<init>((int) r9)     // Catch:{ Exception -> 0x040a }
            r10.serializeToStream(r8)     // Catch:{ Exception -> 0x040a }
            r16.requery()     // Catch:{ Exception -> 0x040a }
            int r9 = r10.id     // Catch:{ Exception -> 0x040a }
            r15 = r16
            r16 = r3
            r3 = 1
            r15.bindInteger(r3, r9)     // Catch:{ Exception -> 0x040a }
            r9 = r11
            r3 = r12
            long r11 = r5.id     // Catch:{ Exception -> 0x040a }
            r20 = r6
            r6 = 2
            r15.bindLong(r6, r11)     // Catch:{ Exception -> 0x040a }
            int r6 = org.telegram.messenger.MessageObject.getUnreadFlags(r10)     // Catch:{ Exception -> 0x040a }
            r11 = 3
            r15.bindInteger(r11, r6)     // Catch:{ Exception -> 0x040a }
            int r6 = r10.send_state     // Catch:{ Exception -> 0x040a }
            r11 = 4
            r15.bindInteger(r11, r6)     // Catch:{ Exception -> 0x040a }
            int r6 = r10.date     // Catch:{ Exception -> 0x040a }
            r11 = 5
            r15.bindInteger(r11, r6)     // Catch:{ Exception -> 0x040a }
            r6 = 6
            r15.bindByteBuffer((int) r6, (org.telegram.tgnet.NativeByteBuffer) r8)     // Catch:{ Exception -> 0x040a }
            boolean r6 = org.telegram.messenger.MessageObject.isOut(r10)     // Catch:{ Exception -> 0x040a }
            if (r6 != 0) goto L_0x01a1
            boolean r6 = r10.from_scheduled     // Catch:{ Exception -> 0x040a }
            if (r6 == 0) goto L_0x019f
            goto L_0x01a1
        L_0x019f:
            r6 = 0
            goto L_0x01a2
        L_0x01a1:
            r6 = 1
        L_0x01a2:
            r11 = 7
            r15.bindInteger(r11, r6)     // Catch:{ Exception -> 0x040a }
            r6 = 8
            r11 = 0
            r15.bindInteger(r6, r11)     // Catch:{ Exception -> 0x040a }
            int r6 = r10.flags     // Catch:{ Exception -> 0x040a }
            r6 = r6 & 1024(0x400, float:1.435E-42)
            if (r6 == 0) goto L_0x01b5
            int r6 = r10.views     // Catch:{ Exception -> 0x040a }
            goto L_0x01b6
        L_0x01b5:
            r6 = 0
        L_0x01b6:
            r11 = 9
            r15.bindInteger(r11, r6)     // Catch:{ Exception -> 0x040a }
            int r6 = r10.stickerVerified     // Catch:{ Exception -> 0x040a }
            if (r6 != 0) goto L_0x01c3
            r6 = 1
        L_0x01c0:
            r11 = 10
            goto L_0x01ca
        L_0x01c3:
            r11 = 2
            if (r6 != r11) goto L_0x01c8
            r6 = 2
            goto L_0x01c0
        L_0x01c8:
            r6 = 0
            goto L_0x01c0
        L_0x01ca:
            r15.bindInteger(r11, r6)     // Catch:{ Exception -> 0x040a }
            boolean r6 = r10.mentioned     // Catch:{ Exception -> 0x040a }
            if (r6 == 0) goto L_0x01d3
            r6 = 1
            goto L_0x01d4
        L_0x01d3:
            r6 = 0
        L_0x01d4:
            r11 = 11
            r15.bindInteger(r11, r6)     // Catch:{ Exception -> 0x040a }
            int r6 = r10.forwards     // Catch:{ Exception -> 0x040a }
            r11 = 12
            r15.bindInteger(r11, r6)     // Catch:{ Exception -> 0x040a }
            org.telegram.tgnet.TLRPC$MessageReplies r6 = r10.replies     // Catch:{ Exception -> 0x040a }
            if (r6 == 0) goto L_0x01fa
            org.telegram.tgnet.NativeByteBuffer r6 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x040a }
            org.telegram.tgnet.TLRPC$MessageReplies r11 = r10.replies     // Catch:{ Exception -> 0x040a }
            int r11 = r11.getObjectSize()     // Catch:{ Exception -> 0x040a }
            r6.<init>((int) r11)     // Catch:{ Exception -> 0x040a }
            org.telegram.tgnet.TLRPC$MessageReplies r11 = r10.replies     // Catch:{ Exception -> 0x040a }
            r11.serializeToStream(r6)     // Catch:{ Exception -> 0x040a }
            r11 = 13
            r15.bindByteBuffer((int) r11, (org.telegram.tgnet.NativeByteBuffer) r6)     // Catch:{ Exception -> 0x040a }
            goto L_0x0200
        L_0x01fa:
            r6 = 13
            r15.bindNull(r6)     // Catch:{ Exception -> 0x040a }
            r6 = 0
        L_0x0200:
            org.telegram.tgnet.TLRPC$TL_messageReplyHeader r11 = r10.reply_to     // Catch:{ Exception -> 0x040a }
            if (r11 == 0) goto L_0x0211
            int r12 = r11.reply_to_top_id     // Catch:{ Exception -> 0x040a }
            if (r12 == 0) goto L_0x0209
            goto L_0x020b
        L_0x0209:
            int r12 = r11.reply_to_msg_id     // Catch:{ Exception -> 0x040a }
        L_0x020b:
            r11 = 14
            r15.bindInteger(r11, r12)     // Catch:{ Exception -> 0x040a }
            goto L_0x0217
        L_0x0211:
            r11 = 14
            r12 = 0
            r15.bindInteger(r11, r12)     // Catch:{ Exception -> 0x040a }
        L_0x0217:
            long r11 = org.telegram.messenger.MessageObject.getChannelId(r10)     // Catch:{ Exception -> 0x040a }
            r21 = r14
            r14 = 15
            r15.bindLong(r14, r11)     // Catch:{ Exception -> 0x040a }
            r15.step()     // Catch:{ Exception -> 0x040a }
            boolean r11 = org.telegram.messenger.MediaDataController.canAddMessageToMedia(r10)     // Catch:{ Exception -> 0x040a }
            if (r11 == 0) goto L_0x024f
            r13.requery()     // Catch:{ Exception -> 0x040a }
            int r11 = r10.id     // Catch:{ Exception -> 0x040a }
            r12 = 1
            r13.bindInteger(r12, r11)     // Catch:{ Exception -> 0x040a }
            long r11 = r5.id     // Catch:{ Exception -> 0x040a }
            r14 = 2
            r13.bindLong(r14, r11)     // Catch:{ Exception -> 0x040a }
            int r11 = r10.date     // Catch:{ Exception -> 0x040a }
            r12 = 3
            r13.bindInteger(r12, r11)     // Catch:{ Exception -> 0x040a }
            int r11 = org.telegram.messenger.MediaDataController.getMediaType(r10)     // Catch:{ Exception -> 0x040a }
            r12 = 4
            r13.bindInteger(r12, r11)     // Catch:{ Exception -> 0x040a }
            r11 = 5
            r13.bindByteBuffer((int) r11, (org.telegram.tgnet.NativeByteBuffer) r8)     // Catch:{ Exception -> 0x040a }
            r13.step()     // Catch:{ Exception -> 0x040a }
        L_0x024f:
            if (r6 == 0) goto L_0x0254
            r6.reuse()     // Catch:{ Exception -> 0x040a }
        L_0x0254:
            r8.reuse()     // Catch:{ Exception -> 0x040a }
            int r6 = r10.ttl_period     // Catch:{ Exception -> 0x040a }
            if (r6 == 0) goto L_0x0292
            int r6 = r10.id     // Catch:{ Exception -> 0x040a }
            if (r6 <= 0) goto L_0x0292
            if (r2 != 0) goto L_0x0269
            org.telegram.SQLite.SQLiteDatabase r2 = r7.database     // Catch:{ Exception -> 0x040a }
            java.lang.String r6 = "REPLACE INTO enc_tasks_v4 VALUES(?, ?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r2 = r2.executeFast(r6)     // Catch:{ Exception -> 0x040a }
        L_0x0269:
            r2.requery()     // Catch:{ Exception -> 0x040a }
            int r6 = r10.id     // Catch:{ Exception -> 0x040a }
            r8 = 1
            r2.bindInteger(r8, r6)     // Catch:{ Exception -> 0x040a }
            long r11 = r10.dialog_id     // Catch:{ Exception -> 0x040a }
            r6 = 2
            r2.bindLong(r6, r11)     // Catch:{ Exception -> 0x040a }
            int r6 = r10.date     // Catch:{ Exception -> 0x040a }
            int r8 = r10.ttl_period     // Catch:{ Exception -> 0x040a }
            int r6 = r6 + r8
            r8 = 3
            r2.bindInteger(r8, r6)     // Catch:{ Exception -> 0x040a }
            r6 = 4
            r8 = 0
            r2.bindInteger(r6, r8)     // Catch:{ Exception -> 0x040a }
            r2.step()     // Catch:{ Exception -> 0x040a }
            int r6 = r10.date     // Catch:{ Exception -> 0x040a }
            int r8 = r10.ttl_period     // Catch:{ Exception -> 0x040a }
            int r6 = r6 + r8
            int r1 = java.lang.Math.min(r1, r6)     // Catch:{ Exception -> 0x040a }
        L_0x0292:
            r8 = r1
            r11 = r2
            org.telegram.tgnet.TLRPC$MessageMedia r1 = r10.media     // Catch:{ Exception -> 0x040a }
            boolean r1 = r1 instanceof org.telegram.tgnet.TLRPC$TL_messageMediaPoll     // Catch:{ Exception -> 0x040a }
            if (r1 == 0) goto L_0x02c4
            if (r4 != 0) goto L_0x02a4
            org.telegram.SQLite.SQLiteDatabase r1 = r7.database     // Catch:{ Exception -> 0x040a }
            java.lang.String r2 = "REPLACE INTO polls_v2 VALUES(?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r4 = r1.executeFast(r2)     // Catch:{ Exception -> 0x040a }
        L_0x02a4:
            org.telegram.tgnet.TLRPC$MessageMedia r1 = r10.media     // Catch:{ Exception -> 0x040a }
            org.telegram.tgnet.TLRPC$TL_messageMediaPoll r1 = (org.telegram.tgnet.TLRPC$TL_messageMediaPoll) r1     // Catch:{ Exception -> 0x040a }
            r4.requery()     // Catch:{ Exception -> 0x040a }
            int r2 = r10.id     // Catch:{ Exception -> 0x040a }
            r6 = 1
            r4.bindInteger(r6, r2)     // Catch:{ Exception -> 0x040a }
            r14 = r11
            long r11 = r10.dialog_id     // Catch:{ Exception -> 0x040a }
            r2 = 2
            r4.bindLong(r2, r11)     // Catch:{ Exception -> 0x040a }
            org.telegram.tgnet.TLRPC$Poll r1 = r1.poll     // Catch:{ Exception -> 0x040a }
            long r1 = r1.id     // Catch:{ Exception -> 0x040a }
            r6 = 3
            r4.bindLong(r6, r1)     // Catch:{ Exception -> 0x040a }
            r4.step()     // Catch:{ Exception -> 0x040a }
            goto L_0x02c5
        L_0x02c4:
            r14 = r11
        L_0x02c5:
            r11 = r4
            if (r3 == 0) goto L_0x02eb
            java.lang.String r2 = "messages_holes"
            long r3 = r5.id     // Catch:{ Exception -> 0x040a }
            int r6 = r10.id     // Catch:{ Exception -> 0x040a }
            r1 = r23
            r12 = r16
            r16 = r8
            r8 = r5
            r5 = r6
            r22 = r11
            r11 = r20
            r1.closeHolesInTable(r2, r3, r5, r6)     // Catch:{ Exception -> 0x040a }
            long r2 = r8.id     // Catch:{ Exception -> 0x040a }
            int r5 = r10.id     // Catch:{ Exception -> 0x040a }
            r6 = -1
            r1 = r23
            r4 = r5
            r1.closeHolesInMedia(r2, r4, r5, r6)     // Catch:{ Exception -> 0x040a }
            r5 = r18
            goto L_0x02fd
        L_0x02eb:
            r22 = r11
            r12 = r16
            r11 = r20
            r16 = r8
            r8 = r5
            long r1 = r8.id     // Catch:{ Exception -> 0x040a }
            int r3 = r10.id     // Catch:{ Exception -> 0x040a }
            r5 = r18
            createFirstHoles(r1, r5, r11, r3)     // Catch:{ Exception -> 0x040a }
        L_0x02fd:
            r2 = r14
            r1 = r16
            r3 = r21
            r4 = r22
            goto L_0x0310
        L_0x0305:
            r12 = r3
            r8 = r5
            r19 = r9
            r9 = r11
            r15 = r16
            r5 = r18
            r11 = r6
            r3 = 0
        L_0x0310:
            r17.requery()     // Catch:{ Exception -> 0x040a }
            r6 = r1
            r10 = r2
            long r1 = r8.id     // Catch:{ Exception -> 0x040a }
            r16 = r4
            r14 = r17
            r4 = 1
            r14.bindLong(r4, r1)     // Catch:{ Exception -> 0x040a }
            r1 = 2
            r14.bindInteger(r1, r3)     // Catch:{ Exception -> 0x040a }
            int r1 = r8.unread_count     // Catch:{ Exception -> 0x040a }
            r2 = 3
            r14.bindInteger(r2, r1)     // Catch:{ Exception -> 0x040a }
            int r1 = r8.top_message     // Catch:{ Exception -> 0x040a }
            r2 = 4
            r14.bindInteger(r2, r1)     // Catch:{ Exception -> 0x040a }
            int r1 = r8.read_inbox_max_id     // Catch:{ Exception -> 0x040a }
            r2 = 5
            r14.bindInteger(r2, r1)     // Catch:{ Exception -> 0x040a }
            int r1 = r8.read_outbox_max_id     // Catch:{ Exception -> 0x040a }
            r2 = 6
            r14.bindInteger(r2, r1)     // Catch:{ Exception -> 0x040a }
            r1 = 7
            r2 = 0
            r14.bindLong(r1, r2)     // Catch:{ Exception -> 0x040a }
            int r1 = r8.unread_mentions_count     // Catch:{ Exception -> 0x040a }
            r2 = 8
            r14.bindInteger(r2, r1)     // Catch:{ Exception -> 0x040a }
            int r1 = r8.pts     // Catch:{ Exception -> 0x040a }
            r2 = 9
            r14.bindInteger(r2, r1)     // Catch:{ Exception -> 0x040a }
            r1 = 10
            r2 = 0
            r14.bindInteger(r1, r2)     // Catch:{ Exception -> 0x040a }
            int r1 = r8.pinnedNum     // Catch:{ Exception -> 0x040a }
            r2 = 11
            r14.bindInteger(r2, r1)     // Catch:{ Exception -> 0x040a }
            boolean r1 = r8.unread_mark     // Catch:{ Exception -> 0x040a }
            r2 = 12
            r14.bindInteger(r2, r1)     // Catch:{ Exception -> 0x040a }
            int r1 = r8.folder_id     // Catch:{ Exception -> 0x040a }
            r2 = 13
            r14.bindInteger(r2, r1)     // Catch:{ Exception -> 0x040a }
            boolean r1 = r8 instanceof org.telegram.tgnet.TLRPC$TL_dialogFolder     // Catch:{ Exception -> 0x040a }
            if (r1 == 0) goto L_0x0387
            r1 = r8
            org.telegram.tgnet.TLRPC$TL_dialogFolder r1 = (org.telegram.tgnet.TLRPC$TL_dialogFolder) r1     // Catch:{ Exception -> 0x040a }
            org.telegram.tgnet.NativeByteBuffer r2 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x040a }
            org.telegram.tgnet.TLRPC$TL_folder r3 = r1.folder     // Catch:{ Exception -> 0x040a }
            int r3 = r3.getObjectSize()     // Catch:{ Exception -> 0x040a }
            r2.<init>((int) r3)     // Catch:{ Exception -> 0x040a }
            org.telegram.tgnet.TLRPC$TL_folder r1 = r1.folder     // Catch:{ Exception -> 0x040a }
            r1.serializeToStream(r2)     // Catch:{ Exception -> 0x040a }
            r1 = 14
            r14.bindByteBuffer((int) r1, (org.telegram.tgnet.NativeByteBuffer) r2)     // Catch:{ Exception -> 0x040a }
            goto L_0x038d
        L_0x0387:
            r1 = 14
            r14.bindNull(r1)     // Catch:{ Exception -> 0x040a }
            r2 = 0
        L_0x038d:
            int r1 = r8.unread_reactions_count     // Catch:{ Exception -> 0x040a }
            r3 = 15
            r14.bindInteger(r3, r1)     // Catch:{ Exception -> 0x040a }
            r14.step()     // Catch:{ Exception -> 0x040a }
            if (r2 == 0) goto L_0x039c
            r2.reuse()     // Catch:{ Exception -> 0x040a }
        L_0x039c:
            org.telegram.tgnet.TLRPC$PeerNotifySettings r1 = r8.notify_settings     // Catch:{ Exception -> 0x040a }
            if (r1 == 0) goto L_0x03b9
            r9.requery()     // Catch:{ Exception -> 0x040a }
            long r1 = r8.id     // Catch:{ Exception -> 0x040a }
            r3 = 1
            r9.bindLong(r3, r1)     // Catch:{ Exception -> 0x040a }
            org.telegram.tgnet.TLRPC$PeerNotifySettings r1 = r8.notify_settings     // Catch:{ Exception -> 0x040a }
            int r1 = r1.mute_until     // Catch:{ Exception -> 0x040a }
            if (r1 == 0) goto L_0x03b1
            r1 = 2
            goto L_0x03b3
        L_0x03b1:
            r1 = 2
            r3 = 0
        L_0x03b3:
            r9.bindInteger(r1, r3)     // Catch:{ Exception -> 0x040a }
            r9.step()     // Catch:{ Exception -> 0x040a }
        L_0x03b9:
            r1 = r6
            r2 = r10
            r4 = r16
        L_0x03bd:
            int r3 = r12 + 1
            r8 = r25
            r6 = r11
            r12 = r14
            r11 = r15
            r15 = r5
            r14 = r9
            r9 = r19
            goto L_0x006f
        L_0x03ca:
            r11 = r6
            r9 = r14
            r5 = r15
            r15 = r16
            r14 = r12
            r15.dispose()     // Catch:{ Exception -> 0x040a }
            r14.dispose()     // Catch:{ Exception -> 0x040a }
            r13.dispose()     // Catch:{ Exception -> 0x040a }
            r9.dispose()     // Catch:{ Exception -> 0x040a }
            r5.dispose()     // Catch:{ Exception -> 0x040a }
            r11.dispose()     // Catch:{ Exception -> 0x040a }
            if (r2 == 0) goto L_0x03f1
            r2.dispose()     // Catch:{ Exception -> 0x040a }
            org.telegram.messenger.MessagesController r2 = r23.getMessagesController()     // Catch:{ Exception -> 0x040a }
            r3 = 0
            r5 = 0
            r2.didAddedNewTask(r1, r5, r3)     // Catch:{ Exception -> 0x040a }
        L_0x03f1:
            if (r4 == 0) goto L_0x03f6
            r4.dispose()     // Catch:{ Exception -> 0x040a }
        L_0x03f6:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r1 = r0.users     // Catch:{ Exception -> 0x040a }
            r7.putUsersInternal(r1)     // Catch:{ Exception -> 0x040a }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r0 = r0.chats     // Catch:{ Exception -> 0x040a }
            r7.putChatsInternal(r0)     // Catch:{ Exception -> 0x040a }
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x040a }
            r0.commitTransaction()     // Catch:{ Exception -> 0x040a }
            r0 = 0
            r7.resetAllUnreadCounters(r0)     // Catch:{ Exception -> 0x040a }
            goto L_0x040e
        L_0x040a:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
        L_0x040e:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.putDialogsInternal(org.telegram.tgnet.TLRPC$messages_Dialogs, int):void");
    }

    public void getDialogFolderId(long j, IntCallback intCallback) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda103(this, j, intCallback));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getDialogFolderId$185(long j, IntCallback intCallback) {
        try {
            int i = -1;
            if (this.unknownDialogsIds.get(j) == null) {
                SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT folder_id FROM dialogs WHERE did = ?", Long.valueOf(j));
                if (queryFinalized.next()) {
                    i = queryFinalized.intValue(0);
                }
                queryFinalized.dispose();
            }
            AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda2(intCallback, i));
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void setDialogsFolderId(ArrayList<TLRPC$TL_folderPeer> arrayList, ArrayList<TLRPC$TL_inputFolderPeer> arrayList2, long j, int i) {
        if (arrayList != null || arrayList2 != null || j != 0) {
            this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda145(this, arrayList, arrayList2, i, j));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$setDialogsFolderId$186(ArrayList arrayList, ArrayList arrayList2, int i, long j) {
        try {
            this.database.beginTransaction();
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE dialogs SET folder_id = ?, pinned = ? WHERE did = ?");
            if (arrayList != null) {
                int size = arrayList.size();
                for (int i2 = 0; i2 < size; i2++) {
                    TLRPC$TL_folderPeer tLRPC$TL_folderPeer = (TLRPC$TL_folderPeer) arrayList.get(i2);
                    long peerDialogId = DialogObject.getPeerDialogId(tLRPC$TL_folderPeer.peer);
                    executeFast.requery();
                    executeFast.bindInteger(1, tLRPC$TL_folderPeer.folder_id);
                    executeFast.bindInteger(2, 0);
                    executeFast.bindLong(3, peerDialogId);
                    executeFast.step();
                    this.unknownDialogsIds.remove(peerDialogId);
                }
            } else if (arrayList2 != null) {
                int size2 = arrayList2.size();
                for (int i3 = 0; i3 < size2; i3++) {
                    TLRPC$TL_inputFolderPeer tLRPC$TL_inputFolderPeer = (TLRPC$TL_inputFolderPeer) arrayList2.get(i3);
                    long peerDialogId2 = DialogObject.getPeerDialogId(tLRPC$TL_inputFolderPeer.peer);
                    executeFast.requery();
                    executeFast.bindInteger(1, tLRPC$TL_inputFolderPeer.folder_id);
                    executeFast.bindInteger(2, 0);
                    executeFast.bindLong(3, peerDialogId2);
                    executeFast.step();
                    this.unknownDialogsIds.remove(peerDialogId2);
                }
            } else {
                executeFast.requery();
                executeFast.bindInteger(1, i);
                executeFast.bindInteger(2, 0);
                executeFast.bindLong(3, j);
                executeFast.step();
            }
            executeFast.dispose();
            this.database.commitTransaction();
            lambda$checkIfFolderEmpty$188(1);
            resetAllUnreadCounters(false);
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: checkIfFolderEmptyInternal */
    public void lambda$checkIfFolderEmpty$188(int i) {
        try {
            boolean z = true;
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT did FROM dialogs WHERE folder_id = ?", Integer.valueOf(i));
            while (true) {
                if (!queryFinalized.next()) {
                    break;
                }
                long longValue = queryFinalized.longValue(0);
                if (!DialogObject.isUserDialog(longValue)) {
                    if (!DialogObject.isEncryptedDialog(longValue)) {
                        TLRPC$Chat chat = getChat(-longValue);
                        if (!ChatObject.isNotInChat(chat) && chat.migrated_to == null) {
                            break;
                        }
                    } else {
                        break;
                    }
                } else {
                    break;
                }
            }
            z = false;
            queryFinalized.dispose();
            if (z) {
                AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda34(this, i));
                SQLiteDatabase sQLiteDatabase = this.database;
                sQLiteDatabase.executeFast("DELETE FROM dialogs WHERE did = " + DialogObject.makeFolderDialogId(i)).stepThis().dispose();
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$checkIfFolderEmptyInternal$187(int i) {
        getMessagesController().onFolderEmpty(i);
    }

    public void checkIfFolderEmpty(int i) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda29(this, i));
    }

    public void unpinAllDialogsExceptNew(ArrayList<Long> arrayList, int i) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda139(this, arrayList, i));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$unpinAllDialogsExceptNew$189(ArrayList arrayList, int i) {
        try {
            ArrayList arrayList2 = new ArrayList();
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT did, folder_id FROM dialogs WHERE pinned > 0 AND did NOT IN (%s)", new Object[]{TextUtils.join(",", arrayList)}), new Object[0]);
            while (queryFinalized.next()) {
                long longValue = queryFinalized.longValue(0);
                if (queryFinalized.intValue(1) == i && !DialogObject.isEncryptedDialog(longValue) && !DialogObject.isFolderDialogId(longValue)) {
                    arrayList2.add(Long.valueOf(queryFinalized.longValue(0)));
                }
            }
            queryFinalized.dispose();
            if (!arrayList2.isEmpty()) {
                SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE dialogs SET pinned = ? WHERE did = ?");
                for (int i2 = 0; i2 < arrayList2.size(); i2++) {
                    long longValue2 = ((Long) arrayList2.get(i2)).longValue();
                    executeFast.requery();
                    executeFast.bindInteger(1, 0);
                    executeFast.bindLong(2, longValue2);
                    executeFast.step();
                }
                executeFast.dispose();
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void setDialogUnread(long j, boolean z) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda110(this, j, z));
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Code restructure failed: missing block: B:15:0x0037, code lost:
        r6 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:23:0x005b, code lost:
        if (r1 != null) goto L_0x005d;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:24:0x005d, code lost:
        r1.dispose();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:25:0x0060, code lost:
        throw r6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:26:0x0061, code lost:
        org.telegram.messenger.FileLog.e((java.lang.Throwable) r6);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:27:?, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:8:0x002b, code lost:
        r6 = move-exception;
     */
    /* JADX WARNING: Exception block dominator not found, dom blocks: [B:6:0x0027, B:10:0x002e] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$setDialogUnread$190(long r6, boolean r8) {
        /*
            r5 = this;
            r0 = 0
            r1 = 0
            org.telegram.SQLite.SQLiteDatabase r2 = r5.database     // Catch:{ Exception -> 0x002d }
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x002d }
            r3.<init>()     // Catch:{ Exception -> 0x002d }
            java.lang.String r4 = "SELECT flags FROM dialogs WHERE did = "
            r3.append(r4)     // Catch:{ Exception -> 0x002d }
            r3.append(r6)     // Catch:{ Exception -> 0x002d }
            java.lang.String r3 = r3.toString()     // Catch:{ Exception -> 0x002d }
            java.lang.Object[] r4 = new java.lang.Object[r0]     // Catch:{ Exception -> 0x002d }
            org.telegram.SQLite.SQLiteCursor r1 = r2.queryFinalized(r3, r4)     // Catch:{ Exception -> 0x002d }
            boolean r2 = r1.next()     // Catch:{ Exception -> 0x002d }
            if (r2 == 0) goto L_0x0026
            int r2 = r1.intValue(r0)     // Catch:{ Exception -> 0x002d }
            goto L_0x0027
        L_0x0026:
            r2 = 0
        L_0x0027:
            r1.dispose()     // Catch:{ Exception -> 0x0037 }
            goto L_0x003a
        L_0x002b:
            r6 = move-exception
            goto L_0x005b
        L_0x002d:
            r2 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r2)     // Catch:{ all -> 0x002b }
            if (r1 == 0) goto L_0x0039
            r1.dispose()     // Catch:{ Exception -> 0x0037 }
            goto L_0x0039
        L_0x0037:
            r6 = move-exception
            goto L_0x0061
        L_0x0039:
            r2 = 0
        L_0x003a:
            r1 = 1
            if (r8 == 0) goto L_0x0040
            r8 = r2 | 1
            goto L_0x0042
        L_0x0040:
            r8 = r2 & -2
        L_0x0042:
            org.telegram.SQLite.SQLiteDatabase r2 = r5.database     // Catch:{ Exception -> 0x0037 }
            java.lang.String r3 = "UPDATE dialogs SET flags = ? WHERE did = ?"
            org.telegram.SQLite.SQLitePreparedStatement r2 = r2.executeFast(r3)     // Catch:{ Exception -> 0x0037 }
            r2.bindInteger(r1, r8)     // Catch:{ Exception -> 0x0037 }
            r8 = 2
            r2.bindLong(r8, r6)     // Catch:{ Exception -> 0x0037 }
            r2.step()     // Catch:{ Exception -> 0x0037 }
            r2.dispose()     // Catch:{ Exception -> 0x0037 }
            r5.resetAllUnreadCounters(r0)     // Catch:{ Exception -> 0x0037 }
            goto L_0x0064
        L_0x005b:
            if (r1 == 0) goto L_0x0060
            r1.dispose()     // Catch:{ Exception -> 0x0037 }
        L_0x0060:
            throw r6     // Catch:{ Exception -> 0x0037 }
        L_0x0061:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r6)
        L_0x0064:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$setDialogUnread$190(long, boolean):void");
    }

    private void resetAllUnreadCounters(boolean z) {
        int size = this.dialogFilters.size();
        for (int i = 0; i < size; i++) {
            MessagesController.DialogFilter dialogFilter = this.dialogFilters.get(i);
            if (!z) {
                dialogFilter.pendingUnreadCount = -1;
            } else if ((dialogFilter.flags & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED) != 0) {
                dialogFilter.pendingUnreadCount = -1;
            }
        }
        calcUnreadCounters(false);
        AndroidUtilities.runOnUIThread(new MessagesStorage$$ExternalSyntheticLambda8(this));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$resetAllUnreadCounters$191() {
        ArrayList<MessagesController.DialogFilter> arrayList = getMessagesController().dialogFilters;
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            arrayList.get(i).unreadCount = arrayList.get(i).pendingUnreadCount;
        }
        this.mainUnreadCount = this.pendingMainUnreadCount;
        this.archiveUnreadCount = this.pendingArchiveUnreadCount;
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, Integer.valueOf(MessagesController.UPDATE_MASK_READ_DIALOG_MESSAGE));
    }

    public void setDialogPinned(long j, int i) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda41(this, i, j));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$setDialogPinned$192(int i, long j) {
        try {
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE dialogs SET pinned = ? WHERE did = ?");
            executeFast.bindInteger(1, i);
            executeFast.bindLong(2, j);
            executeFast.step();
            executeFast.dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void setDialogsPinned(ArrayList<Long> arrayList, ArrayList<Integer> arrayList2) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda144(this, arrayList, arrayList2));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$setDialogsPinned$193(ArrayList arrayList, ArrayList arrayList2) {
        try {
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE dialogs SET pinned = ? WHERE did = ?");
            int size = arrayList.size();
            for (int i = 0; i < size; i++) {
                executeFast.requery();
                executeFast.bindInteger(1, ((Integer) arrayList2.get(i)).intValue());
                executeFast.bindLong(2, ((Long) arrayList.get(i)).longValue());
                executeFast.step();
            }
            executeFast.dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void putDialogs(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, int i) {
        if (!tLRPC$messages_Dialogs.dialogs.isEmpty()) {
            this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda182(this, tLRPC$messages_Dialogs, i));
        }
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$putDialogs$194(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, int i) {
        putDialogsInternal(tLRPC$messages_Dialogs, i);
        try {
            loadUnreadMessages();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void getDialogMaxMessageId(long j, IntCallback intCallback) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda102(this, j, intCallback));
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Code restructure failed: missing block: B:9:0x0031, code lost:
        if (r1 == null) goto L_0x0036;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$getDialogMaxMessageId$196(long r6, org.telegram.messenger.MessagesStorage.IntCallback r8) {
        /*
            r5 = this;
            r0 = 1
            int[] r0 = new int[r0]
            r1 = 0
            org.telegram.SQLite.SQLiteDatabase r2 = r5.database     // Catch:{ Exception -> 0x002d }
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x002d }
            r3.<init>()     // Catch:{ Exception -> 0x002d }
            java.lang.String r4 = "SELECT MAX(mid) FROM messages_v2 WHERE uid = "
            r3.append(r4)     // Catch:{ Exception -> 0x002d }
            r3.append(r6)     // Catch:{ Exception -> 0x002d }
            java.lang.String r6 = r3.toString()     // Catch:{ Exception -> 0x002d }
            r7 = 0
            java.lang.Object[] r3 = new java.lang.Object[r7]     // Catch:{ Exception -> 0x002d }
            org.telegram.SQLite.SQLiteCursor r1 = r2.queryFinalized(r6, r3)     // Catch:{ Exception -> 0x002d }
            boolean r6 = r1.next()     // Catch:{ Exception -> 0x002d }
            if (r6 == 0) goto L_0x0033
            int r6 = r1.intValue(r7)     // Catch:{ Exception -> 0x002d }
            r0[r7] = r6     // Catch:{ Exception -> 0x002d }
            goto L_0x0033
        L_0x002b:
            r6 = move-exception
            goto L_0x003f
        L_0x002d:
            r6 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r6)     // Catch:{ all -> 0x002b }
            if (r1 == 0) goto L_0x0036
        L_0x0033:
            r1.dispose()
        L_0x0036:
            org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda4 r6 = new org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda4
            r6.<init>(r8, r0)
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r6)
            return
        L_0x003f:
            if (r1 == 0) goto L_0x0044
            r1.dispose()
        L_0x0044:
            throw r6
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$getDialogMaxMessageId$196(long, org.telegram.messenger.MessagesStorage$IntCallback):void");
    }

    public int getDialogReadMax(boolean z, long j) {
        CountDownLatch countDownLatch = new CountDownLatch(1);
        Integer[] numArr = {0};
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda193(this, z, j, numArr, countDownLatch));
        try {
            countDownLatch.await();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        return numArr[0].intValue();
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Code restructure failed: missing block: B:12:0x004f, code lost:
        if (r1 == null) goto L_0x0054;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$getDialogReadMax$197(boolean r5, long r6, java.lang.Integer[] r8, java.util.concurrent.CountDownLatch r9) {
        /*
            r4 = this;
            r0 = 0
            r1 = 0
            if (r5 == 0) goto L_0x001e
            org.telegram.SQLite.SQLiteDatabase r5 = r4.database     // Catch:{ Exception -> 0x004b }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x004b }
            r2.<init>()     // Catch:{ Exception -> 0x004b }
            java.lang.String r3 = "SELECT outbox_max FROM dialogs WHERE did = "
            r2.append(r3)     // Catch:{ Exception -> 0x004b }
            r2.append(r6)     // Catch:{ Exception -> 0x004b }
            java.lang.String r6 = r2.toString()     // Catch:{ Exception -> 0x004b }
            java.lang.Object[] r7 = new java.lang.Object[r0]     // Catch:{ Exception -> 0x004b }
            org.telegram.SQLite.SQLiteCursor r5 = r5.queryFinalized(r6, r7)     // Catch:{ Exception -> 0x004b }
            goto L_0x0037
        L_0x001e:
            org.telegram.SQLite.SQLiteDatabase r5 = r4.database     // Catch:{ Exception -> 0x004b }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x004b }
            r2.<init>()     // Catch:{ Exception -> 0x004b }
            java.lang.String r3 = "SELECT inbox_max FROM dialogs WHERE did = "
            r2.append(r3)     // Catch:{ Exception -> 0x004b }
            r2.append(r6)     // Catch:{ Exception -> 0x004b }
            java.lang.String r6 = r2.toString()     // Catch:{ Exception -> 0x004b }
            java.lang.Object[] r7 = new java.lang.Object[r0]     // Catch:{ Exception -> 0x004b }
            org.telegram.SQLite.SQLiteCursor r5 = r5.queryFinalized(r6, r7)     // Catch:{ Exception -> 0x004b }
        L_0x0037:
            r1 = r5
            boolean r5 = r1.next()     // Catch:{ Exception -> 0x004b }
            if (r5 == 0) goto L_0x0051
            int r5 = r1.intValue(r0)     // Catch:{ Exception -> 0x004b }
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)     // Catch:{ Exception -> 0x004b }
            r8[r0] = r5     // Catch:{ Exception -> 0x004b }
            goto L_0x0051
        L_0x0049:
            r5 = move-exception
            goto L_0x0058
        L_0x004b:
            r5 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r5)     // Catch:{ all -> 0x0049 }
            if (r1 == 0) goto L_0x0054
        L_0x0051:
            r1.dispose()
        L_0x0054:
            r9.countDown()
            return
        L_0x0058:
            if (r1 == 0) goto L_0x005d
            r1.dispose()
        L_0x005d:
            throw r5
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$getDialogReadMax$197(boolean, long, java.lang.Integer[], java.util.concurrent.CountDownLatch):void");
    }

    public int getChannelPtsSync(long j) {
        CountDownLatch countDownLatch = new CountDownLatch(1);
        Integer[] numArr = {0};
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda113(this, j, numArr, countDownLatch));
        try {
            countDownLatch.await();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        return numArr[0].intValue();
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Code restructure failed: missing block: B:9:0x0033, code lost:
        if (r0 == null) goto L_0x0038;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$getChannelPtsSync$198(long r5, java.lang.Integer[] r7, java.util.concurrent.CountDownLatch r8) {
        /*
            r4 = this;
            r0 = 0
            org.telegram.SQLite.SQLiteDatabase r1 = r4.database     // Catch:{ Exception -> 0x002f }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x002f }
            r2.<init>()     // Catch:{ Exception -> 0x002f }
            java.lang.String r3 = "SELECT pts FROM dialogs WHERE did = "
            r2.append(r3)     // Catch:{ Exception -> 0x002f }
            long r5 = -r5
            r2.append(r5)     // Catch:{ Exception -> 0x002f }
            java.lang.String r5 = r2.toString()     // Catch:{ Exception -> 0x002f }
            r6 = 0
            java.lang.Object[] r2 = new java.lang.Object[r6]     // Catch:{ Exception -> 0x002f }
            org.telegram.SQLite.SQLiteCursor r0 = r1.queryFinalized(r5, r2)     // Catch:{ Exception -> 0x002f }
            boolean r5 = r0.next()     // Catch:{ Exception -> 0x002f }
            if (r5 == 0) goto L_0x0035
            int r5 = r0.intValue(r6)     // Catch:{ Exception -> 0x002f }
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)     // Catch:{ Exception -> 0x002f }
            r7[r6] = r5     // Catch:{ Exception -> 0x002f }
            goto L_0x0035
        L_0x002d:
            r5 = move-exception
            goto L_0x0041
        L_0x002f:
            r5 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r5)     // Catch:{ all -> 0x002d }
            if (r0 == 0) goto L_0x0038
        L_0x0035:
            r0.dispose()
        L_0x0038:
            r8.countDown()     // Catch:{ Exception -> 0x003c }
            goto L_0x0040
        L_0x003c:
            r5 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r5)
        L_0x0040:
            return
        L_0x0041:
            if (r0 == 0) goto L_0x0046
            r0.dispose()
        L_0x0046:
            throw r5
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$getChannelPtsSync$198(long, java.lang.Integer[], java.util.concurrent.CountDownLatch):void");
    }

    public TLRPC$User getUserSync(long j) {
        CountDownLatch countDownLatch = new CountDownLatch(1);
        TLRPC$User[] tLRPC$UserArr = new TLRPC$User[1];
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda199(this, tLRPC$UserArr, j, countDownLatch));
        try {
            countDownLatch.await();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        return tLRPC$UserArr[0];
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getUserSync$199(TLRPC$User[] tLRPC$UserArr, long j, CountDownLatch countDownLatch) {
        tLRPC$UserArr[0] = getUser(j);
        countDownLatch.countDown();
    }

    public TLRPC$Chat getChatSync(long j) {
        CountDownLatch countDownLatch = new CountDownLatch(1);
        TLRPC$Chat[] tLRPC$ChatArr = new TLRPC$Chat[1];
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda197(this, tLRPC$ChatArr, j, countDownLatch));
        try {
            countDownLatch.await();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        return tLRPC$ChatArr[0];
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$getChatSync$200(TLRPC$Chat[] tLRPC$ChatArr, long j, CountDownLatch countDownLatch) {
        tLRPC$ChatArr[0] = getChat(j);
        countDownLatch.countDown();
    }

    public TLRPC$User getUser(long j) {
        try {
            ArrayList arrayList = new ArrayList();
            getUsersInternal("" + j, arrayList);
            if (!arrayList.isEmpty()) {
                return (TLRPC$User) arrayList.get(0);
            }
            return null;
        } catch (Exception e) {
            FileLog.e((Throwable) e);
            return null;
        }
    }

    public ArrayList<TLRPC$User> getUsers(ArrayList<Long> arrayList) {
        ArrayList<TLRPC$User> arrayList2 = new ArrayList<>();
        try {
            getUsersInternal(TextUtils.join(",", arrayList), arrayList2);
        } catch (Exception e) {
            arrayList2.clear();
            FileLog.e((Throwable) e);
        }
        return arrayList2;
    }

    public TLRPC$Chat getChat(long j) {
        try {
            ArrayList arrayList = new ArrayList();
            getChatsInternal("" + j, arrayList);
            if (!arrayList.isEmpty()) {
                return (TLRPC$Chat) arrayList.get(0);
            }
            return null;
        } catch (Exception e) {
            FileLog.e((Throwable) e);
            return null;
        }
    }

    public TLRPC$EncryptedChat getEncryptedChat(long j) {
        try {
            ArrayList arrayList = new ArrayList();
            getEncryptedChatsInternal("" + j, arrayList, (ArrayList<Long>) null);
            if (!arrayList.isEmpty()) {
                return (TLRPC$EncryptedChat) arrayList.get(0);
            }
            return null;
        } catch (Exception e) {
            FileLog.e((Throwable) e);
            return null;
        }
    }

    /* JADX WARNING: type inference failed for: r0v13 */
    /* JADX WARNING: type inference failed for: r0v20 */
    /* JADX WARNING: type inference failed for: r0v24 */
    /* JADX WARNING: type inference failed for: r0v26 */
    /* JADX WARNING: Code restructure failed: missing block: B:102:0x025b, code lost:
        r21 = r5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:192:0x04fc, code lost:
        r11 = r27;
     */
    /* JADX WARNING: Multi-variable type inference failed */
    /* JADX WARNING: Removed duplicated region for block: B:101:0x0250 A[Catch:{ Exception -> 0x0654 }, LOOP:2: B:74:0x01a1->B:101:0x0250, LOOP_END] */
    /* JADX WARNING: Removed duplicated region for block: B:191:0x04f5 A[Catch:{ Exception -> 0x0654 }, LOOP:6: B:153:0x0380->B:191:0x04f5, LOOP_END] */
    /* JADX WARNING: Removed duplicated region for block: B:252:0x0640 A[Catch:{ Exception -> 0x0654 }, LOOP:10: B:225:0x059b->B:252:0x0640, LOOP_END] */
    /* JADX WARNING: Removed duplicated region for block: B:270:0x01f0 A[SYNTHETIC] */
    /* JADX WARNING: Removed duplicated region for block: B:289:0x03ca A[SYNTHETIC] */
    /* JADX WARNING: Removed duplicated region for block: B:299:0x05e5 A[SYNTHETIC] */
    /* JADX WARNING: Unknown variable types count: 1 */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void localSearch(int r23, java.lang.String r24, java.util.ArrayList<java.lang.Object> r25, java.util.ArrayList<java.lang.CharSequence> r26, java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r27, int r28) {
        /*
            r22 = this;
            r1 = r22
            r0 = r23
            r2 = r25
            r3 = r26
            int r4 = r1.currentAccount
            org.telegram.messenger.UserConfig r4 = org.telegram.messenger.UserConfig.getInstance(r4)
            long r4 = r4.getClientUserId()
            java.lang.String r6 = r24.trim()     // Catch:{ Exception -> 0x0654 }
            java.lang.String r6 = r6.toLowerCase()     // Catch:{ Exception -> 0x0654 }
            boolean r7 = android.text.TextUtils.isEmpty(r6)     // Catch:{ Exception -> 0x0654 }
            if (r7 == 0) goto L_0x0021
            return
        L_0x0021:
            java.lang.String r7 = "SavedMessages"
            r8 = 2131627765(0x7f0e0ef5, float:1.8882804E38)
            java.lang.String r7 = org.telegram.messenger.LocaleController.getString(r7, r8)     // Catch:{ Exception -> 0x0654 }
            java.lang.String r7 = r7.toLowerCase()     // Catch:{ Exception -> 0x0654 }
            java.lang.String r8 = "saved messages"
            org.telegram.messenger.LocaleController r9 = org.telegram.messenger.LocaleController.getInstance()     // Catch:{ Exception -> 0x0654 }
            java.lang.String r9 = r9.getTranslitString(r6)     // Catch:{ Exception -> 0x0654 }
            boolean r10 = r6.equals(r9)     // Catch:{ Exception -> 0x0654 }
            if (r10 != 0) goto L_0x0044
            int r10 = r9.length()     // Catch:{ Exception -> 0x0654 }
            if (r10 != 0) goto L_0x0045
        L_0x0044:
            r9 = 0
        L_0x0045:
            r10 = 1
            r12 = 0
            if (r9 == 0) goto L_0x004b
            r13 = 1
            goto L_0x004c
        L_0x004b:
            r13 = 0
        L_0x004c:
            int r13 = r13 + r10
            java.lang.String[] r14 = new java.lang.String[r13]     // Catch:{ Exception -> 0x0654 }
            r14[r12] = r6     // Catch:{ Exception -> 0x0654 }
            if (r9 == 0) goto L_0x0055
            r14[r10] = r9     // Catch:{ Exception -> 0x0654 }
        L_0x0055:
            java.util.ArrayList r9 = new java.util.ArrayList     // Catch:{ Exception -> 0x0654 }
            r9.<init>()     // Catch:{ Exception -> 0x0654 }
            java.util.ArrayList r15 = new java.util.ArrayList     // Catch:{ Exception -> 0x0654 }
            r15.<init>()     // Catch:{ Exception -> 0x0654 }
            java.util.ArrayList r11 = new java.util.ArrayList     // Catch:{ Exception -> 0x0654 }
            r11.<init>()     // Catch:{ Exception -> 0x0654 }
            androidx.collection.LongSparseArray r12 = new androidx.collection.LongSparseArray     // Catch:{ Exception -> 0x0654 }
            r12.<init>()     // Catch:{ Exception -> 0x0654 }
            if (r28 < 0) goto L_0x0083
            org.telegram.SQLite.SQLiteDatabase r10 = r22.getDatabase()     // Catch:{ Exception -> 0x0654 }
            java.lang.String r3 = "SELECT did, date FROM dialogs WHERE folder_id = ? ORDER BY date DESC LIMIT 600"
            r17 = r14
            r2 = 1
            java.lang.Object[] r14 = new java.lang.Object[r2]     // Catch:{ Exception -> 0x0654 }
            java.lang.Integer r2 = java.lang.Integer.valueOf(r28)     // Catch:{ Exception -> 0x0654 }
            r16 = 0
            r14[r16] = r2     // Catch:{ Exception -> 0x0654 }
            org.telegram.SQLite.SQLiteCursor r2 = r10.queryFinalized(r3, r14)     // Catch:{ Exception -> 0x0654 }
            goto L_0x0092
        L_0x0083:
            r17 = r14
            org.telegram.SQLite.SQLiteDatabase r2 = r22.getDatabase()     // Catch:{ Exception -> 0x0654 }
            java.lang.String r3 = "SELECT did, date FROM dialogs ORDER BY date DESC LIMIT 600"
            r10 = 0
            java.lang.Object[] r14 = new java.lang.Object[r10]     // Catch:{ Exception -> 0x0654 }
            org.telegram.SQLite.SQLiteCursor r2 = r2.queryFinalized(r3, r14)     // Catch:{ Exception -> 0x0654 }
        L_0x0092:
            boolean r3 = r2.next()     // Catch:{ Exception -> 0x0654 }
            if (r3 == 0) goto L_0x0115
            r18 = r15
            r3 = 0
            long r14 = r2.longValue(r3)     // Catch:{ Exception -> 0x0654 }
            org.telegram.ui.Adapters.DialogsSearchAdapter$DialogSearchResult r3 = new org.telegram.ui.Adapters.DialogsSearchAdapter$DialogSearchResult     // Catch:{ Exception -> 0x0654 }
            r3.<init>()     // Catch:{ Exception -> 0x0654 }
            r20 = r13
            r10 = 1
            int r13 = r2.intValue(r10)     // Catch:{ Exception -> 0x0654 }
            r3.date = r13     // Catch:{ Exception -> 0x0654 }
            r12.put(r14, r3)     // Catch:{ Exception -> 0x0654 }
            boolean r3 = org.telegram.messenger.DialogObject.isEncryptedDialog(r14)     // Catch:{ Exception -> 0x0654 }
            if (r3 != 0) goto L_0x00f4
            boolean r3 = org.telegram.messenger.DialogObject.isUserDialog(r14)     // Catch:{ Exception -> 0x0654 }
            if (r3 == 0) goto L_0x00d9
            r3 = 4
            if (r0 != r3) goto L_0x00c4
            int r3 = (r14 > r4 ? 1 : (r14 == r4 ? 0 : -1))
            if (r3 != 0) goto L_0x00c4
            goto L_0x00dc
        L_0x00c4:
            r3 = 2
            if (r0 == r3) goto L_0x00dc
            java.lang.Long r3 = java.lang.Long.valueOf(r14)     // Catch:{ Exception -> 0x0654 }
            boolean r3 = r9.contains(r3)     // Catch:{ Exception -> 0x0654 }
            if (r3 != 0) goto L_0x00dc
            java.lang.Long r3 = java.lang.Long.valueOf(r14)     // Catch:{ Exception -> 0x0654 }
            r9.add(r3)     // Catch:{ Exception -> 0x0654 }
            goto L_0x00dc
        L_0x00d9:
            r3 = 4
            if (r0 != r3) goto L_0x00df
        L_0x00dc:
            r10 = r18
            goto L_0x0110
        L_0x00df:
            long r13 = -r14
            java.lang.Long r3 = java.lang.Long.valueOf(r13)     // Catch:{ Exception -> 0x0654 }
            r10 = r18
            boolean r3 = r10.contains(r3)     // Catch:{ Exception -> 0x0654 }
            if (r3 != 0) goto L_0x0110
            java.lang.Long r3 = java.lang.Long.valueOf(r13)     // Catch:{ Exception -> 0x0654 }
            r10.add(r3)     // Catch:{ Exception -> 0x0654 }
            goto L_0x0110
        L_0x00f4:
            r10 = r18
            if (r0 == 0) goto L_0x00fb
            r3 = 3
            if (r0 != r3) goto L_0x0110
        L_0x00fb:
            int r3 = org.telegram.messenger.DialogObject.getEncryptedChatId(r14)     // Catch:{ Exception -> 0x0654 }
            java.lang.Integer r13 = java.lang.Integer.valueOf(r3)     // Catch:{ Exception -> 0x0654 }
            boolean r13 = r11.contains(r13)     // Catch:{ Exception -> 0x0654 }
            if (r13 != 0) goto L_0x0110
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)     // Catch:{ Exception -> 0x0654 }
            r11.add(r3)     // Catch:{ Exception -> 0x0654 }
        L_0x0110:
            r15 = r10
            r13 = r20
            goto L_0x0092
        L_0x0115:
            r20 = r13
            r10 = r15
            r2.dispose()     // Catch:{ Exception -> 0x0654 }
            r2 = 4
            if (r0 == r2) goto L_0x0124
            boolean r2 = r7.startsWith(r6)     // Catch:{ Exception -> 0x0654 }
            if (r2 != 0) goto L_0x012a
        L_0x0124:
            boolean r2 = r8.startsWith(r6)     // Catch:{ Exception -> 0x0654 }
            if (r2 == 0) goto L_0x0149
        L_0x012a:
            int r2 = r1.currentAccount     // Catch:{ Exception -> 0x0654 }
            org.telegram.messenger.UserConfig r2 = org.telegram.messenger.UserConfig.getInstance(r2)     // Catch:{ Exception -> 0x0654 }
            org.telegram.tgnet.TLRPC$User r2 = r2.getCurrentUser()     // Catch:{ Exception -> 0x0654 }
            org.telegram.ui.Adapters.DialogsSearchAdapter$DialogSearchResult r3 = new org.telegram.ui.Adapters.DialogsSearchAdapter$DialogSearchResult     // Catch:{ Exception -> 0x0654 }
            r3.<init>()     // Catch:{ Exception -> 0x0654 }
            r4 = 2147483647(0x7fffffff, float:NaN)
            r3.date = r4     // Catch:{ Exception -> 0x0654 }
            r3.name = r7     // Catch:{ Exception -> 0x0654 }
            r3.object = r2     // Catch:{ Exception -> 0x0654 }
            long r4 = r2.id     // Catch:{ Exception -> 0x0654 }
            r12.put(r4, r3)     // Catch:{ Exception -> 0x0654 }
            r2 = 1
            goto L_0x014a
        L_0x0149:
            r2 = 0
        L_0x014a:
            boolean r3 = r9.isEmpty()     // Catch:{ Exception -> 0x0654 }
            java.lang.String r5 = ";;;"
            java.lang.String r6 = ","
            java.lang.String r7 = "@"
            java.lang.String r8 = " "
            if (r3 != 0) goto L_0x026f
            org.telegram.SQLite.SQLiteDatabase r3 = r22.getDatabase()     // Catch:{ Exception -> 0x0654 }
            java.util.Locale r13 = java.util.Locale.US     // Catch:{ Exception -> 0x0654 }
            java.lang.String r14 = "SELECT data, status, name FROM users WHERE uid IN(%s)"
            r15 = 1
            java.lang.Object[] r4 = new java.lang.Object[r15]     // Catch:{ Exception -> 0x0654 }
            java.lang.String r9 = android.text.TextUtils.join(r6, r9)     // Catch:{ Exception -> 0x0654 }
            r15 = 0
            r4[r15] = r9     // Catch:{ Exception -> 0x0654 }
            java.lang.String r4 = java.lang.String.format(r13, r14, r4)     // Catch:{ Exception -> 0x0654 }
            java.lang.Object[] r9 = new java.lang.Object[r15]     // Catch:{ Exception -> 0x0654 }
            org.telegram.SQLite.SQLiteCursor r3 = r3.queryFinalized(r4, r9)     // Catch:{ Exception -> 0x0654 }
        L_0x0174:
            boolean r4 = r3.next()     // Catch:{ Exception -> 0x0654 }
            if (r4 == 0) goto L_0x0267
            r4 = 2
            java.lang.String r9 = r3.stringValue(r4)     // Catch:{ Exception -> 0x0654 }
            org.telegram.messenger.LocaleController r4 = org.telegram.messenger.LocaleController.getInstance()     // Catch:{ Exception -> 0x0654 }
            java.lang.String r4 = r4.getTranslitString(r9)     // Catch:{ Exception -> 0x0654 }
            boolean r13 = r9.equals(r4)     // Catch:{ Exception -> 0x0654 }
            if (r13 == 0) goto L_0x018e
            r4 = 0
        L_0x018e:
            int r13 = r9.lastIndexOf(r5)     // Catch:{ Exception -> 0x0654 }
            r14 = -1
            if (r13 == r14) goto L_0x019c
            int r13 = r13 + 3
            java.lang.String r13 = r9.substring(r13)     // Catch:{ Exception -> 0x0654 }
            goto L_0x019d
        L_0x019c:
            r13 = 0
        L_0x019d:
            r1 = r20
            r14 = 0
            r15 = 0
        L_0x01a1:
            if (r14 >= r1) goto L_0x025b
            r20 = r15
            r15 = r17[r14]     // Catch:{ Exception -> 0x0654 }
            boolean r21 = r9.startsWith(r15)     // Catch:{ Exception -> 0x0654 }
            if (r21 != 0) goto L_0x01ed
            java.lang.StringBuilder r0 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0654 }
            r0.<init>()     // Catch:{ Exception -> 0x0654 }
            r0.append(r8)     // Catch:{ Exception -> 0x0654 }
            r0.append(r15)     // Catch:{ Exception -> 0x0654 }
            java.lang.String r0 = r0.toString()     // Catch:{ Exception -> 0x0654 }
            boolean r0 = r9.contains(r0)     // Catch:{ Exception -> 0x0654 }
            if (r0 != 0) goto L_0x01ed
            if (r4 == 0) goto L_0x01e0
            boolean r0 = r4.startsWith(r15)     // Catch:{ Exception -> 0x0654 }
            if (r0 != 0) goto L_0x01ed
            java.lang.StringBuilder r0 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0654 }
            r0.<init>()     // Catch:{ Exception -> 0x0654 }
            r0.append(r8)     // Catch:{ Exception -> 0x0654 }
            r0.append(r15)     // Catch:{ Exception -> 0x0654 }
            java.lang.String r0 = r0.toString()     // Catch:{ Exception -> 0x0654 }
            boolean r0 = r4.contains(r0)     // Catch:{ Exception -> 0x0654 }
            if (r0 == 0) goto L_0x01e0
            goto L_0x01ed
        L_0x01e0:
            if (r13 == 0) goto L_0x01ea
            boolean r0 = r13.startsWith(r15)     // Catch:{ Exception -> 0x0654 }
            if (r0 == 0) goto L_0x01ea
            r0 = 2
            goto L_0x01ee
        L_0x01ea:
            r0 = r20
            goto L_0x01ee
        L_0x01ed:
            r0 = 1
        L_0x01ee:
            if (r0 == 0) goto L_0x0250
            r4 = 0
            org.telegram.tgnet.NativeByteBuffer r9 = r3.byteBufferValue(r4)     // Catch:{ Exception -> 0x0654 }
            if (r9 == 0) goto L_0x025b
            int r13 = r9.readInt32(r4)     // Catch:{ Exception -> 0x0654 }
            org.telegram.tgnet.TLRPC$User r13 = org.telegram.tgnet.TLRPC$User.TLdeserialize(r9, r13, r4)     // Catch:{ Exception -> 0x0654 }
            r9.reuse()     // Catch:{ Exception -> 0x0654 }
            r21 = r5
            long r4 = r13.id     // Catch:{ Exception -> 0x0654 }
            java.lang.Object r4 = r12.get(r4)     // Catch:{ Exception -> 0x0654 }
            org.telegram.ui.Adapters.DialogsSearchAdapter$DialogSearchResult r4 = (org.telegram.ui.Adapters.DialogsSearchAdapter.DialogSearchResult) r4     // Catch:{ Exception -> 0x0654 }
            org.telegram.tgnet.TLRPC$UserStatus r5 = r13.status     // Catch:{ Exception -> 0x0654 }
            r9 = 1
            if (r5 == 0) goto L_0x0217
            int r14 = r3.intValue(r9)     // Catch:{ Exception -> 0x0654 }
            r5.expires = r14     // Catch:{ Exception -> 0x0654 }
        L_0x0217:
            if (r0 != r9) goto L_0x0224
            java.lang.String r0 = r13.first_name     // Catch:{ Exception -> 0x0654 }
            java.lang.String r5 = r13.last_name     // Catch:{ Exception -> 0x0654 }
            java.lang.CharSequence r0 = org.telegram.messenger.AndroidUtilities.generateSearchName(r0, r5, r15)     // Catch:{ Exception -> 0x0654 }
            r4.name = r0     // Catch:{ Exception -> 0x0654 }
            goto L_0x024b
        L_0x0224:
            java.lang.StringBuilder r0 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0654 }
            r0.<init>()     // Catch:{ Exception -> 0x0654 }
            r0.append(r7)     // Catch:{ Exception -> 0x0654 }
            java.lang.String r5 = r13.username     // Catch:{ Exception -> 0x0654 }
            r0.append(r5)     // Catch:{ Exception -> 0x0654 }
            java.lang.String r0 = r0.toString()     // Catch:{ Exception -> 0x0654 }
            java.lang.StringBuilder r5 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0654 }
            r5.<init>()     // Catch:{ Exception -> 0x0654 }
            r5.append(r7)     // Catch:{ Exception -> 0x0654 }
            r5.append(r15)     // Catch:{ Exception -> 0x0654 }
            java.lang.String r5 = r5.toString()     // Catch:{ Exception -> 0x0654 }
            r9 = 0
            java.lang.CharSequence r0 = org.telegram.messenger.AndroidUtilities.generateSearchName(r0, r9, r5)     // Catch:{ Exception -> 0x0654 }
            r4.name = r0     // Catch:{ Exception -> 0x0654 }
        L_0x024b:
            r4.object = r13     // Catch:{ Exception -> 0x0654 }
            int r2 = r2 + 1
            goto L_0x025d
        L_0x0250:
            r20 = r4
            r21 = r5
            int r14 = r14 + 1
            r15 = r0
            r0 = r23
            goto L_0x01a1
        L_0x025b:
            r21 = r5
        L_0x025d:
            r0 = r23
            r20 = r1
            r5 = r21
            r1 = r22
            goto L_0x0174
        L_0x0267:
            r21 = r5
            r1 = r20
            r3.dispose()     // Catch:{ Exception -> 0x0654 }
            goto L_0x0273
        L_0x026f:
            r21 = r5
            r1 = r20
        L_0x0273:
            boolean r0 = r10.isEmpty()     // Catch:{ Exception -> 0x0654 }
            if (r0 != 0) goto L_0x032f
            org.telegram.SQLite.SQLiteDatabase r0 = r22.getDatabase()     // Catch:{ Exception -> 0x0654 }
            java.util.Locale r3 = java.util.Locale.US     // Catch:{ Exception -> 0x0654 }
            java.lang.String r4 = "SELECT data, name FROM chats WHERE uid IN(%s)"
            r5 = 1
            java.lang.Object[] r9 = new java.lang.Object[r5]     // Catch:{ Exception -> 0x0654 }
            java.lang.String r5 = android.text.TextUtils.join(r6, r10)     // Catch:{ Exception -> 0x0654 }
            r10 = 0
            r9[r10] = r5     // Catch:{ Exception -> 0x0654 }
            java.lang.String r3 = java.lang.String.format(r3, r4, r9)     // Catch:{ Exception -> 0x0654 }
            java.lang.Object[] r4 = new java.lang.Object[r10]     // Catch:{ Exception -> 0x0654 }
            org.telegram.SQLite.SQLiteCursor r0 = r0.queryFinalized(r3, r4)     // Catch:{ Exception -> 0x0654 }
        L_0x0295:
            boolean r3 = r0.next()     // Catch:{ Exception -> 0x0654 }
            if (r3 == 0) goto L_0x032c
            r3 = 1
            java.lang.String r4 = r0.stringValue(r3)     // Catch:{ Exception -> 0x0654 }
            org.telegram.messenger.LocaleController r3 = org.telegram.messenger.LocaleController.getInstance()     // Catch:{ Exception -> 0x0654 }
            java.lang.String r3 = r3.getTranslitString(r4)     // Catch:{ Exception -> 0x0654 }
            boolean r5 = r4.equals(r3)     // Catch:{ Exception -> 0x0654 }
            if (r5 == 0) goto L_0x02af
            r3 = 0
        L_0x02af:
            r5 = 0
        L_0x02b0:
            if (r5 >= r1) goto L_0x0295
            r9 = r17[r5]     // Catch:{ Exception -> 0x0654 }
            boolean r10 = r4.startsWith(r9)     // Catch:{ Exception -> 0x0654 }
            if (r10 != 0) goto L_0x02f0
            java.lang.StringBuilder r10 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0654 }
            r10.<init>()     // Catch:{ Exception -> 0x0654 }
            r10.append(r8)     // Catch:{ Exception -> 0x0654 }
            r10.append(r9)     // Catch:{ Exception -> 0x0654 }
            java.lang.String r10 = r10.toString()     // Catch:{ Exception -> 0x0654 }
            boolean r10 = r4.contains(r10)     // Catch:{ Exception -> 0x0654 }
            if (r10 != 0) goto L_0x02f0
            if (r3 == 0) goto L_0x02ed
            boolean r10 = r3.startsWith(r9)     // Catch:{ Exception -> 0x0654 }
            if (r10 != 0) goto L_0x02f0
            java.lang.StringBuilder r10 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0654 }
            r10.<init>()     // Catch:{ Exception -> 0x0654 }
            r10.append(r8)     // Catch:{ Exception -> 0x0654 }
            r10.append(r9)     // Catch:{ Exception -> 0x0654 }
            java.lang.String r10 = r10.toString()     // Catch:{ Exception -> 0x0654 }
            boolean r10 = r3.contains(r10)     // Catch:{ Exception -> 0x0654 }
            if (r10 == 0) goto L_0x02ed
            goto L_0x02f0
        L_0x02ed:
            int r5 = r5 + 1
            goto L_0x02b0
        L_0x02f0:
            r3 = 0
            org.telegram.tgnet.NativeByteBuffer r4 = r0.byteBufferValue(r3)     // Catch:{ Exception -> 0x0654 }
            if (r4 == 0) goto L_0x0295
            int r5 = r4.readInt32(r3)     // Catch:{ Exception -> 0x0654 }
            org.telegram.tgnet.TLRPC$Chat r5 = org.telegram.tgnet.TLRPC$Chat.TLdeserialize(r4, r5, r3)     // Catch:{ Exception -> 0x0654 }
            r4.reuse()     // Catch:{ Exception -> 0x0654 }
            if (r5 == 0) goto L_0x0295
            boolean r3 = r5.deactivated     // Catch:{ Exception -> 0x0654 }
            if (r3 != 0) goto L_0x0295
            boolean r3 = org.telegram.messenger.ChatObject.isChannel(r5)     // Catch:{ Exception -> 0x0654 }
            if (r3 == 0) goto L_0x0314
            boolean r3 = org.telegram.messenger.ChatObject.isNotInChat(r5)     // Catch:{ Exception -> 0x0654 }
            if (r3 != 0) goto L_0x0295
        L_0x0314:
            long r3 = r5.id     // Catch:{ Exception -> 0x0654 }
            long r3 = -r3
            java.lang.Object r3 = r12.get(r3)     // Catch:{ Exception -> 0x0654 }
            org.telegram.ui.Adapters.DialogsSearchAdapter$DialogSearchResult r3 = (org.telegram.ui.Adapters.DialogsSearchAdapter.DialogSearchResult) r3     // Catch:{ Exception -> 0x0654 }
            java.lang.String r4 = r5.title     // Catch:{ Exception -> 0x0654 }
            r10 = 0
            java.lang.CharSequence r4 = org.telegram.messenger.AndroidUtilities.generateSearchName(r4, r10, r9)     // Catch:{ Exception -> 0x0654 }
            r3.name = r4     // Catch:{ Exception -> 0x0654 }
            r3.object = r5     // Catch:{ Exception -> 0x0654 }
            int r2 = r2 + 1
            goto L_0x0295
        L_0x032c:
            r0.dispose()     // Catch:{ Exception -> 0x0654 }
        L_0x032f:
            boolean r0 = r11.isEmpty()     // Catch:{ Exception -> 0x0654 }
            if (r0 != 0) goto L_0x0509
            org.telegram.SQLite.SQLiteDatabase r0 = r22.getDatabase()     // Catch:{ Exception -> 0x0654 }
            java.util.Locale r3 = java.util.Locale.US     // Catch:{ Exception -> 0x0654 }
            java.lang.String r4 = "SELECT q.data, u.name, q.user, q.g, q.authkey, q.ttl, u.data, u.status, q.layer, q.seq_in, q.seq_out, q.use_count, q.exchange_id, q.key_date, q.fprint, q.fauthkey, q.khash, q.in_seq_no, q.admin_id, q.mtproto_seq FROM enc_chats as q INNER JOIN users as u ON q.user = u.uid WHERE q.uid IN(%s)"
            r5 = 1
            java.lang.Object[] r9 = new java.lang.Object[r5]     // Catch:{ Exception -> 0x0654 }
            java.lang.String r5 = android.text.TextUtils.join(r6, r11)     // Catch:{ Exception -> 0x0654 }
            r6 = 0
            r9[r6] = r5     // Catch:{ Exception -> 0x0654 }
            java.lang.String r3 = java.lang.String.format(r3, r4, r9)     // Catch:{ Exception -> 0x0654 }
            java.lang.Object[] r4 = new java.lang.Object[r6]     // Catch:{ Exception -> 0x0654 }
            org.telegram.SQLite.SQLiteCursor r0 = r0.queryFinalized(r3, r4)     // Catch:{ Exception -> 0x0654 }
        L_0x0351:
            boolean r3 = r0.next()     // Catch:{ Exception -> 0x0654 }
            if (r3 == 0) goto L_0x0503
            r3 = 1
            java.lang.String r4 = r0.stringValue(r3)     // Catch:{ Exception -> 0x0654 }
            org.telegram.messenger.LocaleController r3 = org.telegram.messenger.LocaleController.getInstance()     // Catch:{ Exception -> 0x0654 }
            java.lang.String r3 = r3.getTranslitString(r4)     // Catch:{ Exception -> 0x0654 }
            boolean r5 = r4.equals(r3)     // Catch:{ Exception -> 0x0654 }
            if (r5 == 0) goto L_0x036c
            r9 = 0
            goto L_0x036d
        L_0x036c:
            r9 = r3
        L_0x036d:
            r3 = r21
            int r5 = r4.lastIndexOf(r3)     // Catch:{ Exception -> 0x0654 }
            r6 = -1
            if (r5 == r6) goto L_0x037d
            int r5 = r5 + 2
            java.lang.String r5 = r4.substring(r5)     // Catch:{ Exception -> 0x0654 }
            goto L_0x037e
        L_0x037d:
            r5 = 0
        L_0x037e:
            r6 = 0
            r10 = 0
        L_0x0380:
            if (r6 >= r1) goto L_0x04fc
            r11 = r17[r6]     // Catch:{ Exception -> 0x0654 }
            boolean r13 = r4.startsWith(r11)     // Catch:{ Exception -> 0x0654 }
            if (r13 != 0) goto L_0x03c7
            java.lang.StringBuilder r13 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0654 }
            r13.<init>()     // Catch:{ Exception -> 0x0654 }
            r13.append(r8)     // Catch:{ Exception -> 0x0654 }
            r13.append(r11)     // Catch:{ Exception -> 0x0654 }
            java.lang.String r13 = r13.toString()     // Catch:{ Exception -> 0x0654 }
            boolean r13 = r4.contains(r13)     // Catch:{ Exception -> 0x0654 }
            if (r13 != 0) goto L_0x03c7
            if (r9 == 0) goto L_0x03bd
            boolean r13 = r9.startsWith(r11)     // Catch:{ Exception -> 0x0654 }
            if (r13 != 0) goto L_0x03c7
            java.lang.StringBuilder r13 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0654 }
            r13.<init>()     // Catch:{ Exception -> 0x0654 }
            r13.append(r8)     // Catch:{ Exception -> 0x0654 }
            r13.append(r11)     // Catch:{ Exception -> 0x0654 }
            java.lang.String r13 = r13.toString()     // Catch:{ Exception -> 0x0654 }
            boolean r13 = r9.contains(r13)     // Catch:{ Exception -> 0x0654 }
            if (r13 == 0) goto L_0x03bd
            goto L_0x03c7
        L_0x03bd:
            if (r5 == 0) goto L_0x03c8
            boolean r13 = r5.startsWith(r11)     // Catch:{ Exception -> 0x0654 }
            if (r13 == 0) goto L_0x03c8
            r10 = 2
            goto L_0x03c8
        L_0x03c7:
            r10 = 1
        L_0x03c8:
            if (r10 == 0) goto L_0x04f5
            r13 = 0
            org.telegram.tgnet.NativeByteBuffer r4 = r0.byteBufferValue(r13)     // Catch:{ Exception -> 0x0654 }
            if (r4 == 0) goto L_0x03de
            int r5 = r4.readInt32(r13)     // Catch:{ Exception -> 0x0654 }
            org.telegram.tgnet.TLRPC$EncryptedChat r5 = org.telegram.tgnet.TLRPC$EncryptedChat.TLdeserialize(r4, r5, r13)     // Catch:{ Exception -> 0x0654 }
            r4.reuse()     // Catch:{ Exception -> 0x0654 }
            r9 = r5
            goto L_0x03df
        L_0x03de:
            r9 = 0
        L_0x03df:
            r4 = 6
            org.telegram.tgnet.NativeByteBuffer r4 = r0.byteBufferValue(r4)     // Catch:{ Exception -> 0x0654 }
            if (r4 == 0) goto L_0x03f3
            r5 = 0
            int r6 = r4.readInt32(r5)     // Catch:{ Exception -> 0x0654 }
            org.telegram.tgnet.TLRPC$User r6 = org.telegram.tgnet.TLRPC$User.TLdeserialize(r4, r6, r5)     // Catch:{ Exception -> 0x0654 }
            r4.reuse()     // Catch:{ Exception -> 0x0654 }
            goto L_0x03f4
        L_0x03f3:
            r6 = 0
        L_0x03f4:
            if (r9 == 0) goto L_0x04fc
            if (r6 == 0) goto L_0x04fc
            int r4 = r9.id     // Catch:{ Exception -> 0x0654 }
            long r4 = (long) r4     // Catch:{ Exception -> 0x0654 }
            long r4 = org.telegram.messenger.DialogObject.makeEncryptedDialogId(r4)     // Catch:{ Exception -> 0x0654 }
            java.lang.Object r4 = r12.get(r4)     // Catch:{ Exception -> 0x0654 }
            org.telegram.ui.Adapters.DialogsSearchAdapter$DialogSearchResult r4 = (org.telegram.ui.Adapters.DialogsSearchAdapter.DialogSearchResult) r4     // Catch:{ Exception -> 0x0654 }
            r5 = 2
            long r13 = r0.longValue(r5)     // Catch:{ Exception -> 0x0654 }
            r9.user_id = r13     // Catch:{ Exception -> 0x0654 }
            r5 = 3
            byte[] r13 = r0.byteArrayValue(r5)     // Catch:{ Exception -> 0x0654 }
            r9.a_or_b = r13     // Catch:{ Exception -> 0x0654 }
            r13 = 4
            byte[] r5 = r0.byteArrayValue(r13)     // Catch:{ Exception -> 0x0654 }
            r9.auth_key = r5     // Catch:{ Exception -> 0x0654 }
            r5 = 5
            int r5 = r0.intValue(r5)     // Catch:{ Exception -> 0x0654 }
            r9.ttl = r5     // Catch:{ Exception -> 0x0654 }
            r5 = 8
            int r5 = r0.intValue(r5)     // Catch:{ Exception -> 0x0654 }
            r9.layer = r5     // Catch:{ Exception -> 0x0654 }
            r5 = 9
            int r5 = r0.intValue(r5)     // Catch:{ Exception -> 0x0654 }
            r9.seq_in = r5     // Catch:{ Exception -> 0x0654 }
            r5 = 10
            int r5 = r0.intValue(r5)     // Catch:{ Exception -> 0x0654 }
            r9.seq_out = r5     // Catch:{ Exception -> 0x0654 }
            r5 = 11
            int r5 = r0.intValue(r5)     // Catch:{ Exception -> 0x0654 }
            int r14 = r5 >> 16
            short r14 = (short) r14     // Catch:{ Exception -> 0x0654 }
            r9.key_use_count_in = r14     // Catch:{ Exception -> 0x0654 }
            short r5 = (short) r5     // Catch:{ Exception -> 0x0654 }
            r9.key_use_count_out = r5     // Catch:{ Exception -> 0x0654 }
            r5 = 12
            long r14 = r0.longValue(r5)     // Catch:{ Exception -> 0x0654 }
            r9.exchange_id = r14     // Catch:{ Exception -> 0x0654 }
            r5 = 13
            int r5 = r0.intValue(r5)     // Catch:{ Exception -> 0x0654 }
            r9.key_create_date = r5     // Catch:{ Exception -> 0x0654 }
            r5 = 14
            long r14 = r0.longValue(r5)     // Catch:{ Exception -> 0x0654 }
            r9.future_key_fingerprint = r14     // Catch:{ Exception -> 0x0654 }
            r5 = 15
            byte[] r5 = r0.byteArrayValue(r5)     // Catch:{ Exception -> 0x0654 }
            r9.future_auth_key = r5     // Catch:{ Exception -> 0x0654 }
            r5 = 16
            byte[] r5 = r0.byteArrayValue(r5)     // Catch:{ Exception -> 0x0654 }
            r9.key_hash = r5     // Catch:{ Exception -> 0x0654 }
            r5 = 17
            int r5 = r0.intValue(r5)     // Catch:{ Exception -> 0x0654 }
            r9.in_seq_no = r5     // Catch:{ Exception -> 0x0654 }
            r5 = 18
            long r14 = r0.longValue(r5)     // Catch:{ Exception -> 0x0654 }
            r19 = 0
            int r5 = (r14 > r19 ? 1 : (r14 == r19 ? 0 : -1))
            if (r5 == 0) goto L_0x0485
            r9.admin_id = r14     // Catch:{ Exception -> 0x0654 }
        L_0x0485:
            r5 = 19
            int r5 = r0.intValue(r5)     // Catch:{ Exception -> 0x0654 }
            r9.mtproto_seq = r5     // Catch:{ Exception -> 0x0654 }
            org.telegram.tgnet.TLRPC$UserStatus r5 = r6.status     // Catch:{ Exception -> 0x0654 }
            if (r5 == 0) goto L_0x0498
            r14 = 7
            int r14 = r0.intValue(r14)     // Catch:{ Exception -> 0x0654 }
            r5.expires = r14     // Catch:{ Exception -> 0x0654 }
        L_0x0498:
            r5 = 1
            if (r10 != r5) goto L_0x04c4
            android.text.SpannableStringBuilder r5 = new android.text.SpannableStringBuilder     // Catch:{ Exception -> 0x0654 }
            java.lang.String r10 = r6.first_name     // Catch:{ Exception -> 0x0654 }
            java.lang.String r11 = r6.last_name     // Catch:{ Exception -> 0x0654 }
            java.lang.String r10 = org.telegram.messenger.ContactsController.formatName(r10, r11)     // Catch:{ Exception -> 0x0654 }
            r5.<init>(r10)     // Catch:{ Exception -> 0x0654 }
            r4.name = r5     // Catch:{ Exception -> 0x0654 }
            android.text.SpannableStringBuilder r5 = (android.text.SpannableStringBuilder) r5     // Catch:{ Exception -> 0x0654 }
            android.text.style.ForegroundColorSpan r10 = new android.text.style.ForegroundColorSpan     // Catch:{ Exception -> 0x0654 }
            java.lang.String r11 = "chats_secretName"
            int r11 = org.telegram.ui.ActionBar.Theme.getColor(r11)     // Catch:{ Exception -> 0x0654 }
            r10.<init>(r11)     // Catch:{ Exception -> 0x0654 }
            java.lang.CharSequence r11 = r4.name     // Catch:{ Exception -> 0x0654 }
            int r11 = r11.length()     // Catch:{ Exception -> 0x0654 }
            r14 = 33
            r15 = 0
            r5.setSpan(r10, r15, r11, r14)     // Catch:{ Exception -> 0x0654 }
            goto L_0x04eb
        L_0x04c4:
            java.lang.StringBuilder r5 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0654 }
            r5.<init>()     // Catch:{ Exception -> 0x0654 }
            r5.append(r7)     // Catch:{ Exception -> 0x0654 }
            java.lang.String r10 = r6.username     // Catch:{ Exception -> 0x0654 }
            r5.append(r10)     // Catch:{ Exception -> 0x0654 }
            java.lang.String r5 = r5.toString()     // Catch:{ Exception -> 0x0654 }
            java.lang.StringBuilder r10 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0654 }
            r10.<init>()     // Catch:{ Exception -> 0x0654 }
            r10.append(r7)     // Catch:{ Exception -> 0x0654 }
            r10.append(r11)     // Catch:{ Exception -> 0x0654 }
            java.lang.String r10 = r10.toString()     // Catch:{ Exception -> 0x0654 }
            r11 = 0
            java.lang.CharSequence r5 = org.telegram.messenger.AndroidUtilities.generateSearchName(r5, r11, r10)     // Catch:{ Exception -> 0x0654 }
            r4.name = r5     // Catch:{ Exception -> 0x0654 }
        L_0x04eb:
            r4.object = r9     // Catch:{ Exception -> 0x0654 }
            r11 = r27
            r11.add(r6)     // Catch:{ Exception -> 0x0654 }
            int r2 = r2 + 1
            goto L_0x04ff
        L_0x04f5:
            r11 = r27
            r13 = 4
            int r6 = r6 + 1
            goto L_0x0380
        L_0x04fc:
            r11 = r27
            r13 = 4
        L_0x04ff:
            r21 = r3
            goto L_0x0351
        L_0x0503:
            r3 = r21
            r0.dispose()     // Catch:{ Exception -> 0x0654 }
            goto L_0x050b
        L_0x0509:
            r3 = r21
        L_0x050b:
            java.util.ArrayList r0 = new java.util.ArrayList     // Catch:{ Exception -> 0x0654 }
            r0.<init>(r2)     // Catch:{ Exception -> 0x0654 }
            r2 = 0
        L_0x0511:
            int r4 = r12.size()     // Catch:{ Exception -> 0x0654 }
            if (r2 >= r4) goto L_0x052b
            java.lang.Object r4 = r12.valueAt(r2)     // Catch:{ Exception -> 0x0654 }
            org.telegram.ui.Adapters.DialogsSearchAdapter$DialogSearchResult r4 = (org.telegram.ui.Adapters.DialogsSearchAdapter.DialogSearchResult) r4     // Catch:{ Exception -> 0x0654 }
            org.telegram.tgnet.TLObject r5 = r4.object     // Catch:{ Exception -> 0x0654 }
            if (r5 == 0) goto L_0x0528
            java.lang.CharSequence r5 = r4.name     // Catch:{ Exception -> 0x0654 }
            if (r5 == 0) goto L_0x0528
            r0.add(r4)     // Catch:{ Exception -> 0x0654 }
        L_0x0528:
            int r2 = r2 + 1
            goto L_0x0511
        L_0x052b:
            org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda205 r2 = org.telegram.messenger.MessagesStorage$$ExternalSyntheticLambda205.INSTANCE     // Catch:{ Exception -> 0x0654 }
            java.util.Collections.sort(r0, r2)     // Catch:{ Exception -> 0x0654 }
            r2 = 0
        L_0x0531:
            int r4 = r0.size()     // Catch:{ Exception -> 0x0654 }
            if (r2 >= r4) goto L_0x054e
            java.lang.Object r4 = r0.get(r2)     // Catch:{ Exception -> 0x0654 }
            org.telegram.ui.Adapters.DialogsSearchAdapter$DialogSearchResult r4 = (org.telegram.ui.Adapters.DialogsSearchAdapter.DialogSearchResult) r4     // Catch:{ Exception -> 0x0654 }
            org.telegram.tgnet.TLObject r5 = r4.object     // Catch:{ Exception -> 0x0654 }
            r6 = r25
            r6.add(r5)     // Catch:{ Exception -> 0x0654 }
            java.lang.CharSequence r4 = r4.name     // Catch:{ Exception -> 0x0654 }
            r5 = r26
            r5.add(r4)     // Catch:{ Exception -> 0x0654 }
            int r2 = r2 + 1
            goto L_0x0531
        L_0x054e:
            r0 = r23
            r6 = r25
            r5 = r26
            r2 = 2
            if (r0 == r2) goto L_0x0658
            org.telegram.SQLite.SQLiteDatabase r0 = r22.getDatabase()     // Catch:{ Exception -> 0x0654 }
            java.lang.String r2 = "SELECT u.data, u.status, u.name, u.uid FROM users as u INNER JOIN contacts as c ON u.uid = c.uid"
            r4 = 0
            java.lang.Object[] r9 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x0654 }
            org.telegram.SQLite.SQLiteCursor r0 = r0.queryFinalized(r2, r9)     // Catch:{ Exception -> 0x0654 }
        L_0x0564:
            boolean r2 = r0.next()     // Catch:{ Exception -> 0x0654 }
            if (r2 == 0) goto L_0x0650
            r2 = 3
            long r9 = r0.longValue(r2)     // Catch:{ Exception -> 0x0654 }
            int r4 = r12.indexOfKey(r9)     // Catch:{ Exception -> 0x0654 }
            if (r4 < 0) goto L_0x0576
            goto L_0x0564
        L_0x0576:
            r4 = 2
            java.lang.String r9 = r0.stringValue(r4)     // Catch:{ Exception -> 0x0654 }
            org.telegram.messenger.LocaleController r10 = org.telegram.messenger.LocaleController.getInstance()     // Catch:{ Exception -> 0x0654 }
            java.lang.String r10 = r10.getTranslitString(r9)     // Catch:{ Exception -> 0x0654 }
            boolean r11 = r9.equals(r10)     // Catch:{ Exception -> 0x0654 }
            if (r11 == 0) goto L_0x058a
            r10 = 0
        L_0x058a:
            int r11 = r9.lastIndexOf(r3)     // Catch:{ Exception -> 0x0654 }
            r13 = -1
            if (r11 == r13) goto L_0x0598
            int r11 = r11 + 3
            java.lang.String r11 = r9.substring(r11)     // Catch:{ Exception -> 0x0654 }
            goto L_0x0599
        L_0x0598:
            r11 = 0
        L_0x0599:
            r14 = 0
            r15 = 0
        L_0x059b:
            if (r15 >= r1) goto L_0x064a
            r2 = r17[r15]     // Catch:{ Exception -> 0x0654 }
            boolean r18 = r9.startsWith(r2)     // Catch:{ Exception -> 0x0654 }
            if (r18 != 0) goto L_0x05e2
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0654 }
            r4.<init>()     // Catch:{ Exception -> 0x0654 }
            r4.append(r8)     // Catch:{ Exception -> 0x0654 }
            r4.append(r2)     // Catch:{ Exception -> 0x0654 }
            java.lang.String r4 = r4.toString()     // Catch:{ Exception -> 0x0654 }
            boolean r4 = r9.contains(r4)     // Catch:{ Exception -> 0x0654 }
            if (r4 != 0) goto L_0x05e2
            if (r10 == 0) goto L_0x05d8
            boolean r4 = r10.startsWith(r2)     // Catch:{ Exception -> 0x0654 }
            if (r4 != 0) goto L_0x05e2
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0654 }
            r4.<init>()     // Catch:{ Exception -> 0x0654 }
            r4.append(r8)     // Catch:{ Exception -> 0x0654 }
            r4.append(r2)     // Catch:{ Exception -> 0x0654 }
            java.lang.String r4 = r4.toString()     // Catch:{ Exception -> 0x0654 }
            boolean r4 = r10.contains(r4)     // Catch:{ Exception -> 0x0654 }
            if (r4 == 0) goto L_0x05d8
            goto L_0x05e2
        L_0x05d8:
            if (r11 == 0) goto L_0x05e3
            boolean r4 = r11.startsWith(r2)     // Catch:{ Exception -> 0x0654 }
            if (r4 == 0) goto L_0x05e3
            r14 = 2
            goto L_0x05e3
        L_0x05e2:
            r14 = 1
        L_0x05e3:
            if (r14 == 0) goto L_0x0640
            r4 = 0
            org.telegram.tgnet.NativeByteBuffer r9 = r0.byteBufferValue(r4)     // Catch:{ Exception -> 0x0654 }
            if (r9 == 0) goto L_0x063e
            int r10 = r9.readInt32(r4)     // Catch:{ Exception -> 0x0654 }
            org.telegram.tgnet.TLRPC$User r10 = org.telegram.tgnet.TLRPC$User.TLdeserialize(r9, r10, r4)     // Catch:{ Exception -> 0x0654 }
            r9.reuse()     // Catch:{ Exception -> 0x0654 }
            org.telegram.tgnet.TLRPC$UserStatus r9 = r10.status     // Catch:{ Exception -> 0x0654 }
            r11 = 1
            if (r9 == 0) goto L_0x0602
            int r15 = r0.intValue(r11)     // Catch:{ Exception -> 0x0654 }
            r9.expires = r15     // Catch:{ Exception -> 0x0654 }
        L_0x0602:
            if (r14 != r11) goto L_0x0611
            java.lang.String r9 = r10.first_name     // Catch:{ Exception -> 0x0654 }
            java.lang.String r14 = r10.last_name     // Catch:{ Exception -> 0x0654 }
            java.lang.CharSequence r2 = org.telegram.messenger.AndroidUtilities.generateSearchName(r9, r14, r2)     // Catch:{ Exception -> 0x0654 }
            r5.add(r2)     // Catch:{ Exception -> 0x0654 }
            r14 = 0
            goto L_0x0639
        L_0x0611:
            java.lang.StringBuilder r9 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0654 }
            r9.<init>()     // Catch:{ Exception -> 0x0654 }
            r9.append(r7)     // Catch:{ Exception -> 0x0654 }
            java.lang.String r14 = r10.username     // Catch:{ Exception -> 0x0654 }
            r9.append(r14)     // Catch:{ Exception -> 0x0654 }
            java.lang.String r9 = r9.toString()     // Catch:{ Exception -> 0x0654 }
            java.lang.StringBuilder r14 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0654 }
            r14.<init>()     // Catch:{ Exception -> 0x0654 }
            r14.append(r7)     // Catch:{ Exception -> 0x0654 }
            r14.append(r2)     // Catch:{ Exception -> 0x0654 }
            java.lang.String r2 = r14.toString()     // Catch:{ Exception -> 0x0654 }
            r14 = 0
            java.lang.CharSequence r2 = org.telegram.messenger.AndroidUtilities.generateSearchName(r9, r14, r2)     // Catch:{ Exception -> 0x0654 }
            r5.add(r2)     // Catch:{ Exception -> 0x0654 }
        L_0x0639:
            r6.add(r10)     // Catch:{ Exception -> 0x0654 }
            r2 = r14
            goto L_0x064c
        L_0x063e:
            r2 = 0
            goto L_0x064c
        L_0x0640:
            r2 = 0
            r4 = 0
            r16 = 1
            int r15 = r15 + 1
            r2 = 3
            r4 = 2
            goto L_0x059b
        L_0x064a:
            r2 = 0
            r4 = 0
        L_0x064c:
            r16 = 1
            goto L_0x0564
        L_0x0650:
            r0.dispose()     // Catch:{ Exception -> 0x0654 }
            goto L_0x0658
        L_0x0654:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
        L_0x0658:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.localSearch(int, java.lang.String, java.util.ArrayList, java.util.ArrayList, java.util.ArrayList, int):void");
    }

    /* access modifiers changed from: private */
    public static /* synthetic */ int lambda$localSearch$201(DialogsSearchAdapter.DialogSearchResult dialogSearchResult, DialogsSearchAdapter.DialogSearchResult dialogSearchResult2) {
        int i = dialogSearchResult.date;
        int i2 = dialogSearchResult2.date;
        if (i < i2) {
            return 1;
        }
        return i > i2 ? -1 : 0;
    }

    public ArrayList<Integer> getCachedMessagesInRange(long j, int i, int i2) {
        ArrayList<Integer> arrayList = new ArrayList<>();
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT mid FROM messages_v2 WHERE uid = %d AND date >= %d AND date <= %d", new Object[]{Long.valueOf(j), Integer.valueOf(i), Integer.valueOf(i2)}), new Object[0]);
            while (queryFinalized.next()) {
                try {
                    arrayList.add(Integer.valueOf(queryFinalized.intValue(0)));
                } catch (Exception e) {
                    FileLog.e((Throwable) e);
                }
            }
            queryFinalized.dispose();
        } catch (Exception e2) {
            FileLog.e((Throwable) e2);
        }
        return arrayList;
    }

    public void updateUnreadReactionsCount(long j, int i) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda42(this, i, j));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateUnreadReactionsCount$202(int i, long j) {
        try {
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE dialogs SET unread_reactions = ? WHERE did = ?");
            executeFast.bindInteger(1, i);
            executeFast.bindLong(2, j);
            executeFast.step();
            executeFast.dispose();
            if (i == 0) {
                SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE reaction_mentions SET state = 0 WHERE dialog_id ?");
                executeFast2.bindLong(1, j);
                executeFast2.step();
                executeFast2.dispose();
            }
        } catch (SQLiteException e) {
            e.printStackTrace();
        }
    }

    public void markMessageReactionsAsRead(long j, int i, boolean z) {
        if (z) {
            getStorageQueue().postRunnable(new MessagesStorage$$ExternalSyntheticLambda69(this, j, i));
        } else {
            lambda$markMessageReactionsAsRead$203(j, i);
        }
    }

    /* renamed from: markMessageReactionsAsReadInternal */
    public void lambda$markMessageReactionsAsRead$203(long j, int i) {
        NativeByteBuffer byteBufferValue;
        try {
            SQLitePreparedStatement executeFast = getMessagesStorage().getDatabase().executeFast("UPDATE reaction_mentions SET state = 0 WHERE message_id = ? AND dialog_id = ?");
            executeFast.bindInteger(1, i);
            executeFast.bindLong(2, j);
            executeFast.step();
            executeFast.dispose();
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM messages_v2 WHERE uid = %d AND mid = %d", new Object[]{Long.valueOf(j), Integer.valueOf(i)}), new Object[0]);
            TLRPC$Message tLRPC$Message = null;
            if (queryFinalized.next() && (byteBufferValue = queryFinalized.byteBufferValue(0)) != null) {
                tLRPC$Message = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                tLRPC$Message.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                byteBufferValue.reuse();
                TLRPC$TL_messageReactions tLRPC$TL_messageReactions = tLRPC$Message.reactions;
                if (!(tLRPC$TL_messageReactions == null || tLRPC$TL_messageReactions.recent_reactions == null)) {
                    for (int i2 = 0; i2 < tLRPC$Message.reactions.recent_reactions.size(); i2++) {
                        tLRPC$Message.reactions.recent_reactions.get(i2).unread = false;
                    }
                }
            }
            queryFinalized.dispose();
            if (tLRPC$Message != null) {
                SQLitePreparedStatement executeFast2 = getMessagesStorage().getDatabase().executeFast(String.format(Locale.US, "UPDATE messages_v2 SET data = ? WHERE uid = %d AND mid = %d", new Object[]{Long.valueOf(j), Integer.valueOf(i)}));
                try {
                    NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$Message.getObjectSize());
                    tLRPC$Message.serializeToStream(nativeByteBuffer);
                    executeFast2.bindByteBuffer(1, nativeByteBuffer);
                    executeFast2.step();
                    executeFast2.dispose();
                    nativeByteBuffer.reuse();
                } catch (Exception e) {
                    FileLog.e((Throwable) e);
                }
            }
        } catch (SQLiteException e2) {
            FileLog.e((Throwable) e2);
        }
    }

    public void updateDialogUnreadReactions(long j, int i, boolean z) {
        this.storageQueue.postRunnable(new MessagesStorage$$ExternalSyntheticLambda190(this, z, j, i));
    }

    /* access modifiers changed from: private */
    public /* synthetic */ void lambda$updateDialogUnreadReactions$204(boolean z, long j, int i) {
        int i2 = 0;
        if (z) {
            try {
                SQLiteDatabase sQLiteDatabase = this.database;
                SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT unread_reactions FROM dialogs WHERE did = " + j, new Object[0]);
                if (queryFinalized.next()) {
                    i2 = Math.max(0, queryFinalized.intValue(0));
                }
                queryFinalized.dispose();
            } catch (SQLiteException e) {
                e.printStackTrace();
                return;
            }
        }
        SQLitePreparedStatement executeFast = getMessagesStorage().getDatabase().executeFast("UPDATE dialogs SET unread_reactions = ? WHERE did = ?");
        executeFast.bindInteger(1, i2 + i);
        executeFast.bindLong(2, j);
        executeFast.step();
        executeFast.dispose();
    }
}
