package org.telegram.messenger;

import android.text.TextUtils;
import android.util.LongSparseArray;
import android.util.SparseArray;
import android.util.SparseIntArray;
import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.atomic.AtomicLong;
import org.telegram.PhoneFormat.PhoneFormat;
import org.telegram.SQLite.SQLiteCursor;
import org.telegram.SQLite.SQLiteDatabase;
import org.telegram.SQLite.SQLitePreparedStatement;
import org.telegram.messenger.ContactsController.Contact;
import org.telegram.messenger.MediaController.SearchImage;
import org.telegram.messenger.exoplayer2.C0539C;
import org.telegram.messenger.exoplayer2.DefaultLoadControl;
import org.telegram.messenger.support.SparseLongArray;
import org.telegram.messenger.support.widget.helper.ItemTouchHelper.Callback;
import org.telegram.tgnet.ConnectionsManager;
import org.telegram.tgnet.NativeByteBuffer;
import org.telegram.tgnet.RequestDelegate;
import org.telegram.tgnet.TLObject;
import org.telegram.tgnet.TLRPC.BotInfo;
import org.telegram.tgnet.TLRPC.ChannelParticipant;
import org.telegram.tgnet.TLRPC.Chat;
import org.telegram.tgnet.TLRPC.ChatFull;
import org.telegram.tgnet.TLRPC.ChatParticipant;
import org.telegram.tgnet.TLRPC.ChatParticipants;
import org.telegram.tgnet.TLRPC.Document;
import org.telegram.tgnet.TLRPC.EncryptedChat;
import org.telegram.tgnet.TLRPC.InputChannel;
import org.telegram.tgnet.TLRPC.InputMedia;
import org.telegram.tgnet.TLRPC.InputPeer;
import org.telegram.tgnet.TLRPC.Message;
import org.telegram.tgnet.TLRPC.MessageEntity;
import org.telegram.tgnet.TLRPC.MessageMedia;
import org.telegram.tgnet.TLRPC.Photo;
import org.telegram.tgnet.TLRPC.PhotoSize;
import org.telegram.tgnet.TLRPC.TL_channelFull;
import org.telegram.tgnet.TLRPC.TL_channels_deleteMessages;
import org.telegram.tgnet.TLRPC.TL_chatChannelParticipant;
import org.telegram.tgnet.TLRPC.TL_chatFull;
import org.telegram.tgnet.TLRPC.TL_chatInviteEmpty;
import org.telegram.tgnet.TLRPC.TL_chatParticipant;
import org.telegram.tgnet.TLRPC.TL_chatParticipantAdmin;
import org.telegram.tgnet.TLRPC.TL_chatParticipants;
import org.telegram.tgnet.TLRPC.TL_contact;
import org.telegram.tgnet.TLRPC.TL_decryptedMessageActionScreenshotMessages;
import org.telegram.tgnet.TLRPC.TL_decryptedMessageActionSetMessageTTL;
import org.telegram.tgnet.TLRPC.TL_dialog;
import org.telegram.tgnet.TLRPC.TL_documentEmpty;
import org.telegram.tgnet.TLRPC.TL_inputMediaGame;
import org.telegram.tgnet.TLRPC.TL_inputMessageEntityMentionName;
import org.telegram.tgnet.TLRPC.TL_message;
import org.telegram.tgnet.TLRPC.TL_messageActionGameScore;
import org.telegram.tgnet.TLRPC.TL_messageActionHistoryClear;
import org.telegram.tgnet.TLRPC.TL_messageActionPaymentSent;
import org.telegram.tgnet.TLRPC.TL_messageActionPinMessage;
import org.telegram.tgnet.TLRPC.TL_messageEncryptedAction;
import org.telegram.tgnet.TLRPC.TL_messageEntityMentionName;
import org.telegram.tgnet.TLRPC.TL_messageMediaDocument;
import org.telegram.tgnet.TLRPC.TL_messageMediaPhoto;
import org.telegram.tgnet.TLRPC.TL_messageMediaUnsupported;
import org.telegram.tgnet.TLRPC.TL_messageMediaUnsupported_old;
import org.telegram.tgnet.TLRPC.TL_messageMediaWebPage;
import org.telegram.tgnet.TLRPC.TL_message_secret;
import org.telegram.tgnet.TLRPC.TL_messages_botCallbackAnswer;
import org.telegram.tgnet.TLRPC.TL_messages_botResults;
import org.telegram.tgnet.TLRPC.TL_messages_deleteMessages;
import org.telegram.tgnet.TLRPC.TL_messages_dialogs;
import org.telegram.tgnet.TLRPC.TL_messages_messages;
import org.telegram.tgnet.TLRPC.TL_peerChannel;
import org.telegram.tgnet.TLRPC.TL_peerNotifySettings;
import org.telegram.tgnet.TLRPC.TL_peerNotifySettingsEmpty;
import org.telegram.tgnet.TLRPC.TL_photoEmpty;
import org.telegram.tgnet.TLRPC.TL_photos_photos;
import org.telegram.tgnet.TLRPC.TL_replyInlineMarkup;
import org.telegram.tgnet.TLRPC.TL_updates_channelDifferenceTooLong;
import org.telegram.tgnet.TLRPC.TL_userStatusLastMonth;
import org.telegram.tgnet.TLRPC.TL_userStatusLastWeek;
import org.telegram.tgnet.TLRPC.TL_userStatusRecently;
import org.telegram.tgnet.TLRPC.User;
import org.telegram.tgnet.TLRPC.WallPaper;
import org.telegram.tgnet.TLRPC.WebPage;
import org.telegram.tgnet.TLRPC.messages_BotResults;
import org.telegram.tgnet.TLRPC.messages_Dialogs;
import org.telegram.tgnet.TLRPC.messages_Messages;
import org.telegram.tgnet.TLRPC.photos_Photos;

public class MessagesStorage {
    private static volatile MessagesStorage[] Instance = new MessagesStorage[3];
    private File cacheFile;
    private int currentAccount;
    private SQLiteDatabase database;
    private int lastDateValue = 0;
    private int lastPtsValue = 0;
    private int lastQtsValue = 0;
    private int lastSavedDate = 0;
    private int lastSavedPts = 0;
    private int lastSavedQts = 0;
    private int lastSavedSeq = 0;
    private int lastSecretVersion = 0;
    private int lastSeqValue = 0;
    private AtomicLong lastTaskId = new AtomicLong(System.currentTimeMillis());
    private CountDownLatch openSync = new CountDownLatch(1);
    private int secretG = 0;
    private byte[] secretPBytes = null;
    private File shmCacheFile;
    private DispatchQueue storageQueue = new DispatchQueue("storageQueue");
    private File walCacheFile;

    /* renamed from: org.telegram.messenger.MessagesStorage$1 */
    class C03721 implements Runnable {
        C03721() {
        }

        public void run() {
            MessagesStorage.this.openDatabase(true);
        }
    }

    /* renamed from: org.telegram.messenger.MessagesStorage$5 */
    class C03905 implements Runnable {
        C03905() {
        }

        public void run() {
            try {
                LongSparseArray<Long> ids = new LongSparseArray();
                Map<String, ?> values = MessagesController.getNotificationsSettings(MessagesStorage.this.currentAccount).getAll();
                for (Entry<String, ?> entry : values.entrySet()) {
                    String key = (String) entry.getKey();
                    if (key.startsWith("notify2_")) {
                        Integer value = (Integer) entry.getValue();
                        if (value.intValue() != 2) {
                            if (value.intValue() != 3) {
                                value.intValue();
                            }
                        }
                        key = key.replace("notify2_", TtmlNode.ANONYMOUS_REGION_ID);
                        long flags = 1;
                        if (value.intValue() == 2) {
                            flags = 1;
                        } else {
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.append("notifyuntil_");
                            stringBuilder.append(key);
                            Integer time = (Integer) values.get(stringBuilder.toString());
                            if (time != null) {
                                flags = (((long) time.intValue()) << 32) | 1;
                            }
                        }
                        ids.put(Long.parseLong(key), Long.valueOf(flags));
                    }
                }
                try {
                    MessagesStorage.this.database.beginTransaction();
                    SQLitePreparedStatement state = MessagesStorage.this.database.executeFast("REPLACE INTO dialog_settings VALUES(?, ?)");
                    for (int a = 0; a < ids.size(); a++) {
                        state.requery();
                        state.bindLong(1, ids.keyAt(a));
                        state.bindLong(2, ((Long) ids.valueAt(a)).longValue());
                        state.step();
                    }
                    state.dispose();
                    MessagesStorage.this.database.commitTransaction();
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            } catch (Throwable e3) {
                FileLog.m3e(e3);
            }
        }
    }

    /* renamed from: org.telegram.messenger.MessagesStorage$8 */
    class C04038 implements Runnable {
        C04038() {
        }

        public void run() {
            try {
                SQLiteCursor cursor = MessagesStorage.this.database.queryFinalized("SELECT id, data FROM pending_tasks WHERE 1", new Object[0]);
                while (cursor.next()) {
                    final long taskId = cursor.longValue(0);
                    NativeByteBuffer data = cursor.byteBufferValue(1);
                    if (data != null) {
                        int type = data.readInt32(false);
                        final int channelId;
                        final int newDialogType;
                        final long j;
                        long random_id;
                        switch (type) {
                            case 0:
                                final Chat chat = Chat.TLdeserialize(data, data.readInt32(false), false);
                                if (chat != null) {
                                    Utilities.stageQueue.postRunnable(new Runnable() {
                                        public void run() {
                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).loadUnknownChannel(chat, taskId);
                                        }
                                    });
                                    break;
                                }
                                break;
                            case 1:
                                channelId = data.readInt32(false);
                                newDialogType = data.readInt32(false);
                                j = taskId;
                                Utilities.stageQueue.postRunnable(new Runnable() {
                                    public void run() {
                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).getChannelDifference(channelId, newDialogType, j, null);
                                    }
                                });
                                break;
                            case 2:
                            case 5:
                            case 8:
                                TL_dialog dialog = new TL_dialog();
                                dialog.id = data.readInt64(false);
                                dialog.top_message = data.readInt32(false);
                                dialog.read_inbox_max_id = data.readInt32(false);
                                dialog.read_outbox_max_id = data.readInt32(false);
                                dialog.unread_count = data.readInt32(false);
                                dialog.last_message_date = data.readInt32(false);
                                dialog.pts = data.readInt32(false);
                                dialog.flags = data.readInt32(false);
                                if (type >= 5) {
                                    dialog.pinned = data.readBool(false);
                                    dialog.pinnedNum = data.readInt32(false);
                                }
                                if (type >= 8) {
                                    dialog.unread_mentions_count = data.readInt32(false);
                                }
                                final InputPeer peer = InputPeer.TLdeserialize(data, data.readInt32(false), false);
                                final TL_dialog tL_dialog = dialog;
                                j = taskId;
                                AndroidUtilities.runOnUIThread(new Runnable() {
                                    public void run() {
                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).checkLastDialogMessage(tL_dialog, peer, j);
                                    }
                                });
                                break;
                            case 3:
                                random_id = data.readInt64(false);
                                SendMessagesHelper.getInstance(MessagesStorage.this.currentAccount).sendGame(InputPeer.TLdeserialize(data, data.readInt32(false), false), (TL_inputMediaGame) InputMedia.TLdeserialize(data, data.readInt32(false), false), random_id, taskId);
                                break;
                            case 4:
                                final long did = data.readInt64(false);
                                final boolean pin = data.readBool(false);
                                final InputPeer peer2 = InputPeer.TLdeserialize(data, data.readInt32(false), false);
                                final long j2 = taskId;
                                AndroidUtilities.runOnUIThread(new Runnable() {
                                    public void run() {
                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).pinDialog(did, pin, peer2, j2);
                                    }
                                });
                                break;
                            case 6:
                                channelId = data.readInt32(false);
                                newDialogType = data.readInt32(false);
                                final InputChannel inputChannel = InputChannel.TLdeserialize(data, data.readInt32(false), false);
                                j = taskId;
                                Utilities.stageQueue.postRunnable(new Runnable() {
                                    public void run() {
                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).getChannelDifference(channelId, newDialogType, j, inputChannel);
                                    }
                                });
                                break;
                            case 7:
                                channelId = data.readInt32(false);
                                int constructor = data.readInt32(false);
                                TLObject request = TL_messages_deleteMessages.TLdeserialize(data, constructor, false);
                                if (request == null) {
                                    request = TL_channels_deleteMessages.TLdeserialize(data, constructor, false);
                                }
                                TLObject request2 = request;
                                if (request2 != null) {
                                    final TLObject finalRequest = request2;
                                    random_id = taskId;
                                    AndroidUtilities.runOnUIThread(new Runnable() {
                                        public void run() {
                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).deleteMessages(null, null, null, channelId, true, random_id, finalRequest);
                                        }
                                    });
                                    break;
                                }
                                MessagesStorage.this.removePendingTask(taskId);
                                break;
                            default:
                                break;
                        }
                        data.reuse();
                    }
                }
                cursor.dispose();
            } catch (Throwable e) {
                FileLog.m3e(e);
            }
        }
    }

    private class Hole {
        public int end;
        public int start;
        public int type;

        public Hole(int s, int e) {
            this.start = s;
            this.end = e;
        }

        public Hole(int t, int s, int e) {
            this.type = t;
            this.start = s;
            this.end = e;
        }
    }

    public interface IntCallback {
        void run(int i);
    }

    public static MessagesStorage getInstance(int num) {
        MessagesStorage localInstance = Instance[num];
        if (localInstance == null) {
            synchronized (MessagesStorage.class) {
                localInstance = Instance[num];
                if (localInstance == null) {
                    MessagesStorage[] messagesStorageArr = Instance;
                    MessagesStorage messagesStorage = new MessagesStorage(num);
                    localInstance = messagesStorage;
                    messagesStorageArr[num] = messagesStorage;
                }
            }
        }
        return localInstance;
    }

    private void ensureOpened() {
        try {
            this.openSync.await();
        } catch (Throwable th) {
        }
    }

    public int getLastDateValue() {
        ensureOpened();
        return this.lastDateValue;
    }

    public void setLastDateValue(int value) {
        ensureOpened();
        this.lastDateValue = value;
    }

    public int getLastPtsValue() {
        ensureOpened();
        return this.lastPtsValue;
    }

    public void setLastPtsValue(int value) {
        ensureOpened();
        this.lastPtsValue = value;
    }

    public int getLastQtsValue() {
        ensureOpened();
        return this.lastQtsValue;
    }

    public void setLastQtsValue(int value) {
        ensureOpened();
        this.lastQtsValue = value;
    }

    public int getLastSeqValue() {
        ensureOpened();
        return this.lastSeqValue;
    }

    public void setLastSeqValue(int value) {
        ensureOpened();
        this.lastSeqValue = value;
    }

    public int getLastSecretVersion() {
        ensureOpened();
        return this.lastSecretVersion;
    }

    public void setLastSecretVersion(int value) {
        ensureOpened();
        this.lastSecretVersion = value;
    }

    public byte[] getSecretPBytes() {
        ensureOpened();
        return this.secretPBytes;
    }

    public void setSecretPBytes(byte[] value) {
        ensureOpened();
        this.secretPBytes = value;
    }

    public int getSecretG() {
        ensureOpened();
        return this.secretG;
    }

    public void setSecretG(int value) {
        ensureOpened();
        this.secretG = value;
    }

    public MessagesStorage(int instance) {
        this.currentAccount = instance;
        this.storageQueue.postRunnable(new C03721());
    }

    public SQLiteDatabase getDatabase() {
        return this.database;
    }

    public DispatchQueue getStorageQueue() {
        return this.storageQueue;
    }

    public long getDatabaseSize() {
        long size = 0;
        if (this.cacheFile != null) {
            size = 0 + this.cacheFile.length();
        }
        if (this.shmCacheFile != null) {
            return size + this.shmCacheFile.length();
        }
        return size;
    }

    public void openDatabase(boolean first) {
        File filesDir = ApplicationLoader.getFilesDirFixed();
        if (this.currentAccount != 0) {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("account");
            stringBuilder.append(this.currentAccount);
            stringBuilder.append("/");
            filesDir = new File(filesDir, stringBuilder.toString());
            filesDir.mkdirs();
        }
        this.cacheFile = new File(filesDir, "cache4.db");
        this.walCacheFile = new File(filesDir, "cache4.db-wal");
        this.shmCacheFile = new File(filesDir, "cache4.db-shm");
        boolean createTable = false;
        if (!this.cacheFile.exists()) {
            createTable = true;
        }
        try {
            this.database = new SQLiteDatabase(this.cacheFile.getPath());
            this.database.executeFast("PRAGMA secure_delete = ON").stepThis().dispose();
            this.database.executeFast("PRAGMA temp_store = 1").stepThis().dispose();
            this.database.executeFast("PRAGMA journal_mode = WAL").stepThis().dispose();
            if (createTable) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.m0d("create new database");
                }
                this.database.executeFast("CREATE TABLE messages_holes(uid INTEGER, start INTEGER, end INTEGER, PRIMARY KEY(uid, start));").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS uid_end_messages_holes ON messages_holes(uid, end);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE media_holes_v2(uid INTEGER, type INTEGER, start INTEGER, end INTEGER, PRIMARY KEY(uid, type, start));").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS uid_end_media_holes_v2 ON media_holes_v2(uid, type, end);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE messages(mid INTEGER PRIMARY KEY, uid INTEGER, read_state INTEGER, send_state INTEGER, date INTEGER, data BLOB, out INTEGER, ttl INTEGER, media INTEGER, replydata BLOB, imp INTEGER, mention INTEGER)").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS uid_mid_idx_messages ON messages(uid, mid);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS uid_date_mid_idx_messages ON messages(uid, date, mid);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS mid_out_idx_messages ON messages(mid, out);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS task_idx_messages ON messages(uid, out, read_state, ttl, date, send_state);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS send_state_idx_messages ON messages(mid, send_state, date) WHERE mid < 0 AND send_state = 1;").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS uid_mention_idx_messages ON messages(uid, mention, read_state);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE download_queue(uid INTEGER, type INTEGER, date INTEGER, data BLOB, PRIMARY KEY (uid, type));").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS type_date_idx_download_queue ON download_queue(type, date);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE user_contacts_v7(key TEXT PRIMARY KEY, uid INTEGER, fname TEXT, sname TEXT, imported INTEGER)").stepThis().dispose();
                this.database.executeFast("CREATE TABLE user_phones_v7(key TEXT, phone TEXT, sphone TEXT, deleted INTEGER, PRIMARY KEY (key, phone))").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS sphone_deleted_idx_user_phones ON user_phones_v7(sphone, deleted);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE dialogs(did INTEGER PRIMARY KEY, date INTEGER, unread_count INTEGER, last_mid INTEGER, inbox_max INTEGER, outbox_max INTEGER, last_mid_i INTEGER, unread_count_i INTEGER, pts INTEGER, date_i INTEGER, pinned INTEGER)").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS date_idx_dialogs ON dialogs(date);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS last_mid_idx_dialogs ON dialogs(last_mid);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS unread_count_idx_dialogs ON dialogs(unread_count);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS last_mid_i_idx_dialogs ON dialogs(last_mid_i);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS unread_count_i_idx_dialogs ON dialogs(unread_count_i);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE randoms(random_id INTEGER, mid INTEGER, PRIMARY KEY (random_id, mid))").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS mid_idx_randoms ON randoms(mid);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE enc_tasks_v2(mid INTEGER PRIMARY KEY, date INTEGER)").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS date_idx_enc_tasks_v2 ON enc_tasks_v2(date);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE messages_seq(mid INTEGER PRIMARY KEY, seq_in INTEGER, seq_out INTEGER);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS seq_idx_messages_seq ON messages_seq(seq_in, seq_out);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE params(id INTEGER PRIMARY KEY, seq INTEGER, pts INTEGER, date INTEGER, qts INTEGER, lsv INTEGER, sg INTEGER, pbytes BLOB)").stepThis().dispose();
                this.database.executeFast("INSERT INTO params VALUES(1, 0, 0, 0, 0, 0, 0, NULL)").stepThis().dispose();
                this.database.executeFast("CREATE TABLE media_v2(mid INTEGER PRIMARY KEY, uid INTEGER, date INTEGER, type INTEGER, data BLOB)").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS uid_mid_type_date_idx_media ON media_v2(uid, mid, type, date);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE bot_keyboard(uid INTEGER PRIMARY KEY, mid INTEGER, info BLOB)").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS bot_keyboard_idx_mid ON bot_keyboard(mid);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE chat_settings_v2(uid INTEGER PRIMARY KEY, info BLOB, pinned INTEGER)").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS chat_settings_pinned_idx ON chat_settings_v2(uid, pinned) WHERE pinned != 0;").stepThis().dispose();
                this.database.executeFast("CREATE TABLE chat_pinned(uid INTEGER PRIMARY KEY, pinned INTEGER, data BLOB)").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS chat_pinned_mid_idx ON chat_pinned(uid, pinned) WHERE pinned != 0;").stepThis().dispose();
                this.database.executeFast("CREATE TABLE chat_hints(did INTEGER, type INTEGER, rating REAL, date INTEGER, PRIMARY KEY(did, type))").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS chat_hints_rating_idx ON chat_hints(rating);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE botcache(id TEXT PRIMARY KEY, date INTEGER, data BLOB)").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS botcache_date_idx ON botcache(date);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE users_data(uid INTEGER PRIMARY KEY, about TEXT)").stepThis().dispose();
                this.database.executeFast("CREATE TABLE users(uid INTEGER PRIMARY KEY, name TEXT, status INTEGER, data BLOB)").stepThis().dispose();
                this.database.executeFast("CREATE TABLE chats(uid INTEGER PRIMARY KEY, name TEXT, data BLOB)").stepThis().dispose();
                this.database.executeFast("CREATE TABLE enc_chats(uid INTEGER PRIMARY KEY, user INTEGER, name TEXT, data BLOB, g BLOB, authkey BLOB, ttl INTEGER, layer INTEGER, seq_in INTEGER, seq_out INTEGER, use_count INTEGER, exchange_id INTEGER, key_date INTEGER, fprint INTEGER, fauthkey BLOB, khash BLOB, in_seq_no INTEGER, admin_id INTEGER, mtproto_seq INTEGER)").stepThis().dispose();
                this.database.executeFast("CREATE TABLE channel_users_v2(did INTEGER, uid INTEGER, date INTEGER, data BLOB, PRIMARY KEY(did, uid))").stepThis().dispose();
                this.database.executeFast("CREATE TABLE channel_admins(did INTEGER, uid INTEGER, PRIMARY KEY(did, uid))").stepThis().dispose();
                this.database.executeFast("CREATE TABLE contacts(uid INTEGER PRIMARY KEY, mutual INTEGER)").stepThis().dispose();
                this.database.executeFast("CREATE TABLE wallpapers(uid INTEGER PRIMARY KEY, data BLOB)").stepThis().dispose();
                this.database.executeFast("CREATE TABLE user_photos(uid INTEGER, id INTEGER, data BLOB, PRIMARY KEY (uid, id))").stepThis().dispose();
                this.database.executeFast("CREATE TABLE blocked_users(uid INTEGER PRIMARY KEY)").stepThis().dispose();
                this.database.executeFast("CREATE TABLE dialog_settings(did INTEGER PRIMARY KEY, flags INTEGER);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE web_recent_v3(id TEXT, type INTEGER, image_url TEXT, thumb_url TEXT, local_url TEXT, width INTEGER, height INTEGER, size INTEGER, date INTEGER, document BLOB, PRIMARY KEY (id, type));").stepThis().dispose();
                this.database.executeFast("CREATE TABLE stickers_v2(id INTEGER PRIMARY KEY, data BLOB, date INTEGER, hash TEXT);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE stickers_featured(id INTEGER PRIMARY KEY, data BLOB, unread BLOB, date INTEGER, hash TEXT);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE hashtag_recent_v2(id TEXT PRIMARY KEY, date INTEGER);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE webpage_pending(id INTEGER, mid INTEGER, PRIMARY KEY (id, mid));").stepThis().dispose();
                this.database.executeFast("CREATE TABLE sent_files_v2(uid TEXT, type INTEGER, data BLOB, PRIMARY KEY (uid, type))").stepThis().dispose();
                this.database.executeFast("CREATE TABLE search_recent(did INTEGER PRIMARY KEY, date INTEGER);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE media_counts_v2(uid INTEGER, type INTEGER, count INTEGER, PRIMARY KEY(uid, type))").stepThis().dispose();
                this.database.executeFast("CREATE TABLE keyvalue(id TEXT PRIMARY KEY, value TEXT)").stepThis().dispose();
                this.database.executeFast("CREATE TABLE bot_info(uid INTEGER PRIMARY KEY, info BLOB)").stepThis().dispose();
                this.database.executeFast("CREATE TABLE pending_tasks(id INTEGER PRIMARY KEY, data BLOB);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE requested_holes(uid INTEGER, seq_out_start INTEGER, seq_out_end INTEGER, PRIMARY KEY (uid, seq_out_start, seq_out_end));").stepThis().dispose();
                this.database.executeFast("CREATE TABLE sharing_locations(uid INTEGER PRIMARY KEY, mid INTEGER, date INTEGER, period INTEGER, message BLOB);").stepThis().dispose();
                this.database.executeFast("PRAGMA user_version = 47").stepThis().dispose();
            } else {
                int version = this.database.executeInt("PRAGMA user_version", new Object[0]).intValue();
                if (BuildVars.LOGS_ENABLED) {
                    StringBuilder stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("current db version = ");
                    stringBuilder2.append(version);
                    FileLog.m0d(stringBuilder2.toString());
                }
                if (version == 0) {
                    throw new Exception("malformed");
                }
                try {
                    SQLiteCursor cursor = this.database.queryFinalized("SELECT seq, pts, date, qts, lsv, sg, pbytes FROM params WHERE id = 1", new Object[0]);
                    if (cursor.next()) {
                        this.lastSeqValue = cursor.intValue(0);
                        this.lastPtsValue = cursor.intValue(1);
                        this.lastDateValue = cursor.intValue(2);
                        this.lastQtsValue = cursor.intValue(3);
                        this.lastSecretVersion = cursor.intValue(4);
                        this.secretG = cursor.intValue(5);
                        if (cursor.isNull(6)) {
                            this.secretPBytes = null;
                        } else {
                            this.secretPBytes = cursor.byteArrayValue(6);
                            if (this.secretPBytes != null && this.secretPBytes.length == 1) {
                                this.secretPBytes = null;
                            }
                        }
                    }
                    cursor.dispose();
                } catch (Throwable e) {
                    FileLog.m3e(e);
                    try {
                        this.database.executeFast("CREATE TABLE IF NOT EXISTS params(id INTEGER PRIMARY KEY, seq INTEGER, pts INTEGER, date INTEGER, qts INTEGER, lsv INTEGER, sg INTEGER, pbytes BLOB)").stepThis().dispose();
                        this.database.executeFast("INSERT INTO params VALUES(1, 0, 0, 0, 0, 0, 0, NULL)").stepThis().dispose();
                    } catch (Throwable e2) {
                        FileLog.m3e(e2);
                    }
                }
                if (version < 47) {
                    updateDbToLastVersion(version);
                }
            }
        } catch (Throwable e3) {
            FileLog.m3e(e3);
            if (first && e3.getMessage().contains("malformed")) {
                cleanupInternal();
                UserConfig.getInstance(this.currentAccount).dialogsLoadOffsetId = 0;
                UserConfig.getInstance(this.currentAccount).totalDialogsLoadCount = 0;
                UserConfig.getInstance(this.currentAccount).dialogsLoadOffsetDate = 0;
                UserConfig.getInstance(this.currentAccount).dialogsLoadOffsetUserId = 0;
                UserConfig.getInstance(this.currentAccount).dialogsLoadOffsetChatId = 0;
                UserConfig.getInstance(this.currentAccount).dialogsLoadOffsetChannelId = 0;
                UserConfig.getInstance(this.currentAccount).dialogsLoadOffsetAccess = 0;
                UserConfig.getInstance(this.currentAccount).saveConfig(false);
                openDatabase(false);
            }
        }
        loadUnreadMessages();
        loadPendingTasks();
        try {
            this.openSync.countDown();
        } catch (Throwable th) {
        }
    }

    private void updateDbToLastVersion(final int currentVersion) {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    SQLiteCursor cursor;
                    SQLitePreparedStatement state;
                    int date;
                    NativeByteBuffer data;
                    int version = currentVersion;
                    if (version < 4) {
                        MessagesStorage.this.database.executeFast("CREATE TABLE IF NOT EXISTS user_photos(uid INTEGER, id INTEGER, data BLOB, PRIMARY KEY (uid, id))").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("DROP INDEX IF EXISTS read_state_out_idx_messages;").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("DROP INDEX IF EXISTS ttl_idx_messages;").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("DROP INDEX IF EXISTS date_idx_messages;").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE INDEX IF NOT EXISTS mid_out_idx_messages ON messages(mid, out);").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE INDEX IF NOT EXISTS task_idx_messages ON messages(uid, out, read_state, ttl, date, send_state);").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE INDEX IF NOT EXISTS uid_date_mid_idx_messages ON messages(uid, date, mid);").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE TABLE IF NOT EXISTS user_contacts_v6(uid INTEGER PRIMARY KEY, fname TEXT, sname TEXT)").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE TABLE IF NOT EXISTS user_phones_v6(uid INTEGER, phone TEXT, sphone TEXT, deleted INTEGER, PRIMARY KEY (uid, phone))").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE INDEX IF NOT EXISTS sphone_deleted_idx_user_phones ON user_phones_v6(sphone, deleted);").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE INDEX IF NOT EXISTS mid_idx_randoms ON randoms(mid);").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE TABLE IF NOT EXISTS sent_files_v2(uid TEXT, type INTEGER, data BLOB, PRIMARY KEY (uid, type))").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE TABLE IF NOT EXISTS blocked_users(uid INTEGER PRIMARY KEY)").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE TABLE IF NOT EXISTS download_queue(uid INTEGER, type INTEGER, date INTEGER, data BLOB, PRIMARY KEY (uid, type));").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE INDEX IF NOT EXISTS type_date_idx_download_queue ON download_queue(type, date);").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE TABLE IF NOT EXISTS dialog_settings(did INTEGER PRIMARY KEY, flags INTEGER);").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE INDEX IF NOT EXISTS send_state_idx_messages ON messages(mid, send_state, date) WHERE mid < 0 AND send_state = 1;").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE INDEX IF NOT EXISTS unread_count_idx_dialogs ON dialogs(unread_count);").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("UPDATE messages SET send_state = 2 WHERE mid < 0 AND send_state = 1").stepThis().dispose();
                        MessagesStorage.this.fixNotificationSettings();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 4").stepThis().dispose();
                        version = 4;
                    }
                    if (version == 4) {
                        MessagesStorage.this.database.executeFast("CREATE TABLE IF NOT EXISTS enc_tasks_v2(mid INTEGER PRIMARY KEY, date INTEGER)").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE INDEX IF NOT EXISTS date_idx_enc_tasks_v2 ON enc_tasks_v2(date);").stepThis().dispose();
                        MessagesStorage.this.database.beginTransaction();
                        cursor = MessagesStorage.this.database.queryFinalized("SELECT date, data FROM enc_tasks WHERE 1", new Object[0]);
                        state = MessagesStorage.this.database.executeFast("REPLACE INTO enc_tasks_v2 VALUES(?, ?)");
                        if (cursor.next()) {
                            date = cursor.intValue(0);
                            data = cursor.byteBufferValue(1);
                            if (data != null) {
                                int length = data.limit();
                                for (int a = 0; a < length / 4; a++) {
                                    state.requery();
                                    state.bindInteger(1, data.readInt32(false));
                                    state.bindInteger(2, date);
                                    state.step();
                                }
                                data.reuse();
                            }
                        }
                        state.dispose();
                        cursor.dispose();
                        MessagesStorage.this.database.commitTransaction();
                        MessagesStorage.this.database.executeFast("DROP INDEX IF EXISTS date_idx_enc_tasks;").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("DROP TABLE IF EXISTS enc_tasks;").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("ALTER TABLE messages ADD COLUMN media INTEGER default 0").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 6").stepThis().dispose();
                        version = 6;
                    }
                    if (version == 6) {
                        MessagesStorage.this.database.executeFast("CREATE TABLE IF NOT EXISTS messages_seq(mid INTEGER PRIMARY KEY, seq_in INTEGER, seq_out INTEGER);").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE INDEX IF NOT EXISTS seq_idx_messages_seq ON messages_seq(seq_in, seq_out);").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("ALTER TABLE enc_chats ADD COLUMN layer INTEGER default 0").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("ALTER TABLE enc_chats ADD COLUMN seq_in INTEGER default 0").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("ALTER TABLE enc_chats ADD COLUMN seq_out INTEGER default 0").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 7").stepThis().dispose();
                        version = 7;
                    }
                    if (version == 7 || version == 8 || version == 9) {
                        MessagesStorage.this.database.executeFast("ALTER TABLE enc_chats ADD COLUMN use_count INTEGER default 0").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("ALTER TABLE enc_chats ADD COLUMN exchange_id INTEGER default 0").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("ALTER TABLE enc_chats ADD COLUMN key_date INTEGER default 0").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("ALTER TABLE enc_chats ADD COLUMN fprint INTEGER default 0").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("ALTER TABLE enc_chats ADD COLUMN fauthkey BLOB default NULL").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("ALTER TABLE enc_chats ADD COLUMN khash BLOB default NULL").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 10").stepThis().dispose();
                        version = 10;
                    }
                    if (version == 10) {
                        MessagesStorage.this.database.executeFast("CREATE TABLE IF NOT EXISTS web_recent_v3(id TEXT, type INTEGER, image_url TEXT, thumb_url TEXT, local_url TEXT, width INTEGER, height INTEGER, size INTEGER, date INTEGER, PRIMARY KEY (id, type));").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 11").stepThis().dispose();
                        version = 11;
                    }
                    if (version == 11 || version == 12) {
                        MessagesStorage.this.database.executeFast("DROP INDEX IF EXISTS uid_mid_idx_media;").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("DROP INDEX IF EXISTS mid_idx_media;").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("DROP INDEX IF EXISTS uid_date_mid_idx_media;").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("DROP TABLE IF EXISTS media;").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("DROP TABLE IF EXISTS media_counts;").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE TABLE IF NOT EXISTS media_v2(mid INTEGER PRIMARY KEY, uid INTEGER, date INTEGER, type INTEGER, data BLOB)").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE TABLE IF NOT EXISTS media_counts_v2(uid INTEGER, type INTEGER, count INTEGER, PRIMARY KEY(uid, type))").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE INDEX IF NOT EXISTS uid_mid_type_date_idx_media ON media_v2(uid, mid, type, date);").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE TABLE IF NOT EXISTS keyvalue(id TEXT PRIMARY KEY, value TEXT)").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 13").stepThis().dispose();
                        version = 13;
                    }
                    if (version == 13) {
                        MessagesStorage.this.database.executeFast("ALTER TABLE messages ADD COLUMN replydata BLOB default NULL").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 14").stepThis().dispose();
                        version = 14;
                    }
                    if (version == 14) {
                        MessagesStorage.this.database.executeFast("CREATE TABLE IF NOT EXISTS hashtag_recent_v2(id TEXT PRIMARY KEY, date INTEGER);").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 15").stepThis().dispose();
                        version = 15;
                    }
                    if (version == 15) {
                        MessagesStorage.this.database.executeFast("CREATE TABLE IF NOT EXISTS webpage_pending(id INTEGER, mid INTEGER, PRIMARY KEY (id, mid));").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 16").stepThis().dispose();
                        version = 16;
                    }
                    if (version == 16) {
                        MessagesStorage.this.database.executeFast("ALTER TABLE dialogs ADD COLUMN inbox_max INTEGER default 0").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("ALTER TABLE dialogs ADD COLUMN outbox_max INTEGER default 0").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 17").stepThis().dispose();
                        version = 17;
                    }
                    if (version == 17) {
                        MessagesStorage.this.database.executeFast("CREATE TABLE bot_info(uid INTEGER PRIMARY KEY, info BLOB)").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 18").stepThis().dispose();
                        version = 18;
                    }
                    if (version == 18) {
                        MessagesStorage.this.database.executeFast("DROP TABLE IF EXISTS stickers;").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE TABLE IF NOT EXISTS stickers_v2(id INTEGER PRIMARY KEY, data BLOB, date INTEGER, hash TEXT);").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 19").stepThis().dispose();
                        version = 19;
                    }
                    if (version == 19) {
                        MessagesStorage.this.database.executeFast("CREATE TABLE IF NOT EXISTS bot_keyboard(uid INTEGER PRIMARY KEY, mid INTEGER, info BLOB)").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE INDEX IF NOT EXISTS bot_keyboard_idx_mid ON bot_keyboard(mid);").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 20").stepThis().dispose();
                        version = 20;
                    }
                    if (version == 20) {
                        MessagesStorage.this.database.executeFast("CREATE TABLE search_recent(did INTEGER PRIMARY KEY, date INTEGER);").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 21").stepThis().dispose();
                        version = 21;
                    }
                    if (version == 21) {
                        MessagesStorage.this.database.executeFast("CREATE TABLE IF NOT EXISTS chat_settings_v2(uid INTEGER PRIMARY KEY, info BLOB)").stepThis().dispose();
                        cursor = MessagesStorage.this.database.queryFinalized("SELECT uid, participants FROM chat_settings WHERE uid < 0", new Object[0]);
                        state = MessagesStorage.this.database.executeFast("REPLACE INTO chat_settings_v2 VALUES(?, ?)");
                        while (cursor.next()) {
                            date = cursor.intValue(0);
                            data = cursor.byteBufferValue(1);
                            if (data != null) {
                                ChatParticipants participants = ChatParticipants.TLdeserialize(data, data.readInt32(false), false);
                                data.reuse();
                                if (participants != null) {
                                    TL_chatFull chatFull = new TL_chatFull();
                                    chatFull.id = date;
                                    chatFull.chat_photo = new TL_photoEmpty();
                                    chatFull.notify_settings = new TL_peerNotifySettingsEmpty();
                                    chatFull.exported_invite = new TL_chatInviteEmpty();
                                    chatFull.participants = participants;
                                    NativeByteBuffer data2 = new NativeByteBuffer(chatFull.getObjectSize());
                                    chatFull.serializeToStream(data2);
                                    state.requery();
                                    state.bindInteger(1, date);
                                    state.bindByteBuffer(2, data2);
                                    state.step();
                                    data2.reuse();
                                }
                            }
                        }
                        state.dispose();
                        cursor.dispose();
                        MessagesStorage.this.database.executeFast("DROP TABLE IF EXISTS chat_settings;").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("ALTER TABLE dialogs ADD COLUMN last_mid_i INTEGER default 0").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("ALTER TABLE dialogs ADD COLUMN unread_count_i INTEGER default 0").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("ALTER TABLE dialogs ADD COLUMN pts INTEGER default 0").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("ALTER TABLE dialogs ADD COLUMN date_i INTEGER default 0").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE INDEX IF NOT EXISTS last_mid_i_idx_dialogs ON dialogs(last_mid_i);").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE INDEX IF NOT EXISTS unread_count_i_idx_dialogs ON dialogs(unread_count_i);").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("ALTER TABLE messages ADD COLUMN imp INTEGER default 0").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE TABLE IF NOT EXISTS messages_holes(uid INTEGER, start INTEGER, end INTEGER, PRIMARY KEY(uid, start));").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE INDEX IF NOT EXISTS uid_end_messages_holes ON messages_holes(uid, end);").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 22").stepThis().dispose();
                        version = 22;
                    }
                    if (version == 22) {
                        MessagesStorage.this.database.executeFast("CREATE TABLE IF NOT EXISTS media_holes_v2(uid INTEGER, type INTEGER, start INTEGER, end INTEGER, PRIMARY KEY(uid, type, start));").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE INDEX IF NOT EXISTS uid_end_media_holes_v2 ON media_holes_v2(uid, type, end);").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 23").stepThis().dispose();
                        version = 23;
                    }
                    if (version == 23 || version == 24) {
                        MessagesStorage.this.database.executeFast("DELETE FROM media_holes_v2 WHERE uid != 0 AND type >= 0 AND start IN (0, 1)").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 25").stepThis().dispose();
                        version = 25;
                    }
                    if (version == 25 || version == 26) {
                        MessagesStorage.this.database.executeFast("CREATE TABLE IF NOT EXISTS channel_users_v2(did INTEGER, uid INTEGER, date INTEGER, data BLOB, PRIMARY KEY(did, uid))").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 27").stepThis().dispose();
                        version = 27;
                    }
                    if (version == 27) {
                        MessagesStorage.this.database.executeFast("ALTER TABLE web_recent_v3 ADD COLUMN document BLOB default NULL").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 28").stepThis().dispose();
                        version = 28;
                    }
                    if (version == 28 || version == 29) {
                        MessagesStorage.this.database.executeFast("DELETE FROM sent_files_v2 WHERE 1").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("DELETE FROM download_queue WHERE 1").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 30").stepThis().dispose();
                        version = 30;
                    }
                    if (version == 30) {
                        MessagesStorage.this.database.executeFast("ALTER TABLE chat_settings_v2 ADD COLUMN pinned INTEGER default 0").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE INDEX IF NOT EXISTS chat_settings_pinned_idx ON chat_settings_v2(uid, pinned) WHERE pinned != 0;").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE TABLE IF NOT EXISTS chat_pinned(uid INTEGER PRIMARY KEY, pinned INTEGER, data BLOB)").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE INDEX IF NOT EXISTS chat_pinned_mid_idx ON chat_pinned(uid, pinned) WHERE pinned != 0;").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE TABLE IF NOT EXISTS users_data(uid INTEGER PRIMARY KEY, about TEXT)").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 31").stepThis().dispose();
                        version = 31;
                    }
                    if (version == 31) {
                        MessagesStorage.this.database.executeFast("DROP TABLE IF EXISTS bot_recent;").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE TABLE IF NOT EXISTS chat_hints(did INTEGER, type INTEGER, rating REAL, date INTEGER, PRIMARY KEY(did, type))").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE INDEX IF NOT EXISTS chat_hints_rating_idx ON chat_hints(rating);").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 32").stepThis().dispose();
                        version = 32;
                    }
                    if (version == 32) {
                        MessagesStorage.this.database.executeFast("DROP INDEX IF EXISTS uid_mid_idx_imp_messages;").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("DROP INDEX IF EXISTS uid_date_mid_imp_idx_messages;").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 33").stepThis().dispose();
                        version = 33;
                    }
                    if (version == 33) {
                        MessagesStorage.this.database.executeFast("CREATE TABLE IF NOT EXISTS pending_tasks(id INTEGER PRIMARY KEY, data BLOB);").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 34").stepThis().dispose();
                        version = 34;
                    }
                    if (version == 34) {
                        MessagesStorage.this.database.executeFast("CREATE TABLE IF NOT EXISTS stickers_featured(id INTEGER PRIMARY KEY, data BLOB, unread BLOB, date INTEGER, hash TEXT);").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 35").stepThis().dispose();
                        version = 35;
                    }
                    if (version == 35) {
                        MessagesStorage.this.database.executeFast("CREATE TABLE IF NOT EXISTS requested_holes(uid INTEGER, seq_out_start INTEGER, seq_out_end INTEGER, PRIMARY KEY (uid, seq_out_start, seq_out_end));").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 36").stepThis().dispose();
                        version = 36;
                    }
                    if (version == 36) {
                        MessagesStorage.this.database.executeFast("ALTER TABLE enc_chats ADD COLUMN in_seq_no INTEGER default 0").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 37").stepThis().dispose();
                        version = 37;
                    }
                    if (version == 37) {
                        MessagesStorage.this.database.executeFast("CREATE TABLE IF NOT EXISTS botcache(id TEXT PRIMARY KEY, date INTEGER, data BLOB)").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE INDEX IF NOT EXISTS botcache_date_idx ON botcache(date);").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 38").stepThis().dispose();
                        version = 38;
                    }
                    if (version == 38) {
                        MessagesStorage.this.database.executeFast("ALTER TABLE dialogs ADD COLUMN pinned INTEGER default 0").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 39").stepThis().dispose();
                        version = 39;
                    }
                    if (version == 39) {
                        MessagesStorage.this.database.executeFast("ALTER TABLE enc_chats ADD COLUMN admin_id INTEGER default 0").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 40").stepThis().dispose();
                        version = 40;
                    }
                    if (version == 40) {
                        MessagesStorage.this.fixNotificationSettings();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 41").stepThis().dispose();
                        version = 41;
                    }
                    if (version == 41) {
                        MessagesStorage.this.database.executeFast("ALTER TABLE messages ADD COLUMN mention INTEGER default 0").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("ALTER TABLE user_contacts_v6 ADD COLUMN imported INTEGER default 0").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE INDEX IF NOT EXISTS uid_mention_idx_messages ON messages(uid, mention, read_state);").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 42").stepThis().dispose();
                        version = 42;
                    }
                    if (version == 42) {
                        MessagesStorage.this.database.executeFast("CREATE TABLE IF NOT EXISTS sharing_locations(uid INTEGER PRIMARY KEY, mid INTEGER, date INTEGER, period INTEGER, message BLOB);").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 43").stepThis().dispose();
                        version = 43;
                    }
                    if (version == 43) {
                        MessagesStorage.this.database.executeFast("CREATE TABLE IF NOT EXISTS channel_admins(did INTEGER, uid INTEGER, PRIMARY KEY(did, uid))").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 44").stepThis().dispose();
                        version = 44;
                    }
                    if (version == 44) {
                        MessagesStorage.this.database.executeFast("CREATE TABLE IF NOT EXISTS user_contacts_v7(key TEXT PRIMARY KEY, uid INTEGER, fname TEXT, sname TEXT, imported INTEGER)").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE TABLE IF NOT EXISTS user_phones_v7(key TEXT, phone TEXT, sphone TEXT, deleted INTEGER, PRIMARY KEY (key, phone))").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("CREATE INDEX IF NOT EXISTS sphone_deleted_idx_user_phones ON user_phones_v7(sphone, deleted);").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 45").stepThis().dispose();
                        version = 45;
                    }
                    if (version == 45) {
                        MessagesStorage.this.database.executeFast("ALTER TABLE enc_chats ADD COLUMN mtproto_seq INTEGER default 0").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 46").stepThis().dispose();
                        version = 46;
                    }
                    if (version == 46) {
                        MessagesStorage.this.database.executeFast("DELETE FROM botcache WHERE 1").stepThis().dispose();
                        MessagesStorage.this.database.executeFast("PRAGMA user_version = 47").stepThis().dispose();
                    }
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    private void cleanupInternal() {
        this.lastDateValue = 0;
        this.lastSeqValue = 0;
        this.lastPtsValue = 0;
        this.lastQtsValue = 0;
        this.lastSecretVersion = 0;
        this.lastSavedSeq = 0;
        this.lastSavedPts = 0;
        this.lastSavedDate = 0;
        this.lastSavedQts = 0;
        this.secretPBytes = null;
        this.secretG = 0;
        if (this.database != null) {
            this.database.close();
            this.database = null;
        }
        if (this.cacheFile != null) {
            this.cacheFile.delete();
            this.cacheFile = null;
        }
        if (this.walCacheFile != null) {
            this.walCacheFile.delete();
            this.walCacheFile = null;
        }
        if (this.shmCacheFile != null) {
            this.shmCacheFile.delete();
            this.shmCacheFile = null;
        }
    }

    public void cleanup(final boolean isLogin) {
        this.storageQueue.cleanupQueue();
        this.storageQueue.postRunnable(new Runnable() {

            /* renamed from: org.telegram.messenger.MessagesStorage$3$1 */
            class C03801 implements Runnable {
                C03801() {
                }

                public void run() {
                    MessagesController.getInstance(MessagesStorage.this.currentAccount).getDifference();
                }
            }

            public void run() {
                MessagesStorage.this.cleanupInternal();
                MessagesStorage.this.openDatabase(false);
                if (isLogin) {
                    Utilities.stageQueue.postRunnable(new C03801());
                }
            }
        });
    }

    public void saveSecretParams(final int lsv, final int sg, final byte[] pbytes) {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    SQLitePreparedStatement state = MessagesStorage.this.database.executeFast("UPDATE params SET lsv = ?, sg = ?, pbytes = ? WHERE id = 1");
                    int i = 1;
                    state.bindInteger(1, lsv);
                    state.bindInteger(2, sg);
                    if (pbytes != null) {
                        i = pbytes.length;
                    }
                    NativeByteBuffer data = new NativeByteBuffer(i);
                    if (pbytes != null) {
                        data.writeBytes(pbytes);
                    }
                    state.bindByteBuffer(3, data);
                    state.step();
                    state.dispose();
                    data.reuse();
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    private void fixNotificationSettings() {
        this.storageQueue.postRunnable(new C03905());
    }

    public long createPendingTask(final NativeByteBuffer data) {
        if (data == null) {
            return 0;
        }
        final long id = this.lastTaskId.getAndAdd(1);
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    SQLitePreparedStatement state = MessagesStorage.this.database.executeFast("REPLACE INTO pending_tasks VALUES(?, ?)");
                    state.bindLong(1, id);
                    state.bindByteBuffer(2, data);
                    state.step();
                    state.dispose();
                } catch (Throwable e) {
                    FileLog.m3e(e);
                } catch (Throwable th) {
                    data.reuse();
                }
                data.reuse();
            }
        });
        return id;
    }

    public void removePendingTask(final long id) {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    SQLiteDatabase access$000 = MessagesStorage.this.database;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("DELETE FROM pending_tasks WHERE id = ");
                    stringBuilder.append(id);
                    access$000.executeFast(stringBuilder.toString()).stepThis().dispose();
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    private void loadPendingTasks() {
        this.storageQueue.postRunnable(new C04038());
    }

    public void saveChannelPts(final int channelId, final int pts) {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    SQLitePreparedStatement state = MessagesStorage.this.database.executeFast("UPDATE dialogs SET pts = ? WHERE did = ?");
                    state.bindInteger(1, pts);
                    state.bindInteger(2, -channelId);
                    state.step();
                    state.dispose();
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    private void saveDiffParamsInternal(int seq, int pts, int date, int qts) {
        try {
            if (this.lastSavedSeq != seq || this.lastSavedPts != pts || this.lastSavedDate != date || this.lastQtsValue != qts) {
                SQLitePreparedStatement state = this.database.executeFast("UPDATE params SET seq = ?, pts = ?, date = ?, qts = ? WHERE id = 1");
                state.bindInteger(1, seq);
                state.bindInteger(2, pts);
                state.bindInteger(3, date);
                state.bindInteger(4, qts);
                state.step();
                state.dispose();
                this.lastSavedSeq = seq;
                this.lastSavedPts = pts;
                this.lastSavedDate = date;
                this.lastSavedQts = qts;
            }
        } catch (Throwable e) {
            FileLog.m3e(e);
        }
    }

    public void saveDiffParams(int seq, int pts, int date, int qts) {
        final int i = seq;
        final int i2 = pts;
        final int i3 = date;
        final int i4 = qts;
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                MessagesStorage.this.saveDiffParamsInternal(i, i2, i3, i4);
            }
        });
    }

    public void setDialogFlags(long did, long flags) {
        final long j = did;
        final long j2 = flags;
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    MessagesStorage.this.database.executeFast(String.format(Locale.US, "REPLACE INTO dialog_settings VALUES(%d, %d)", new Object[]{Long.valueOf(j), Long.valueOf(j2)})).stepThis().dispose();
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public void loadUnreadMessages() {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                ArrayList<Chat> chats;
                ArrayList<User> users;
                ArrayList<Message> arrayList;
                Throwable e;
                int lower_id;
                Throwable chats2;
                AnonymousClass12 anonymousClass12 = this;
                try {
                    int currentTime;
                    ArrayList<User> users2;
                    ArrayList<EncryptedChat> encryptedChats;
                    ArrayList<User> users3;
                    ArrayList<Chat> chats3;
                    ArrayList<Message> replyMessageOwners;
                    ArrayList<Integer> usersToLoad = new ArrayList();
                    ArrayList<Integer> chatsToLoad = new ArrayList();
                    ArrayList<Integer> encryptedChatIds = new ArrayList();
                    LongSparseArray<Integer> pushDialogs = new LongSparseArray();
                    boolean z = false;
                    SQLiteCursor cursor = MessagesStorage.this.database.queryFinalized("SELECT d.did, d.unread_count, s.flags FROM dialogs as d LEFT JOIN dialog_settings as s ON d.did = s.did WHERE d.unread_count != 0", new Object[0]);
                    StringBuilder ids = new StringBuilder();
                    int currentTime2 = ConnectionsManager.getInstance(MessagesStorage.this.currentAccount).getCurrentTime();
                    while (true) {
                        currentTime = currentTime2;
                        if (!cursor.next()) {
                            break;
                        }
                        long flags = cursor.longValue(2);
                        boolean muted = (flags & 1) != 0 ? true : z;
                        int mutedUntil = (int) (flags >> 32);
                        if (cursor.isNull(2) || !muted || (mutedUntil != 0 && mutedUntil < currentTime)) {
                            long did = cursor.longValue(z);
                            int count = cursor.intValue(1);
                            long did2 = did;
                            pushDialogs.put(did2, Integer.valueOf(count));
                            if (ids.length() != 0) {
                                ids.append(",");
                            }
                            ids.append(did2);
                            int lower_id2 = (int) did2;
                            count = (int) (did2 >> 32);
                            if (lower_id2 != 0) {
                                if (lower_id2 < 0) {
                                    if (!chatsToLoad.contains(Integer.valueOf(-lower_id2))) {
                                        chatsToLoad.add(Integer.valueOf(-lower_id2));
                                    }
                                } else if (!usersToLoad.contains(Integer.valueOf(lower_id2))) {
                                    usersToLoad.add(Integer.valueOf(lower_id2));
                                }
                            } else if (!encryptedChatIds.contains(Integer.valueOf(count))) {
                                encryptedChatIds.add(Integer.valueOf(count));
                            }
                        }
                        currentTime2 = currentTime;
                        z = false;
                    }
                    cursor.dispose();
                    ArrayList<Long> replyMessages = new ArrayList();
                    SparseArray<ArrayList<Message>> replyMessageOwners2 = new SparseArray();
                    ArrayList<Message> messages = new ArrayList();
                    ArrayList<User> users4 = new ArrayList();
                    ArrayList<Chat> chats4 = new ArrayList();
                    ArrayList<EncryptedChat> encryptedChats2 = new ArrayList();
                    SparseArray<ArrayList<Message>> replyMessageOwners3;
                    ArrayList<Integer> arrayList2;
                    SQLiteCursor sQLiteCursor;
                    if (ids.length() > 0) {
                        SQLiteCursor cursor2;
                        SQLiteDatabase access$000 = MessagesStorage.this.database;
                        StringBuilder stringBuilder = new StringBuilder();
                        stringBuilder.append("SELECT read_state, data, send_state, mid, date, uid, replydata FROM messages WHERE uid IN (");
                        stringBuilder.append(ids.toString());
                        stringBuilder.append(") AND out = 0 AND read_state IN(0,2) ORDER BY date DESC LIMIT 50");
                        cursor = access$000.queryFinalized(stringBuilder.toString(), new Object[0]);
                        while (cursor.next()) {
                            NativeByteBuffer data = cursor.byteBufferValue(1);
                            if (data != null) {
                                Message message = Message.TLdeserialize(data, data.readInt32(false), false);
                                message.readAttachPath(data, UserConfig.getInstance(MessagesStorage.this.currentAccount).clientUserId);
                                data.reuse();
                                NativeByteBuffer data2 = data;
                                MessageObject.setUnreadFlags(message, cursor.intValue(0));
                                message.id = cursor.intValue(3);
                                message.date = cursor.intValue(4);
                                chats = chats4;
                                users = users4;
                                message.dialog_id = cursor.longValue(5);
                                messages.add(message);
                                chats4 = (int) message.dialog_id;
                                MessagesStorage.addUsersAndChatsFromMessage(message, usersToLoad, chatsToLoad);
                                message.send_state = cursor.intValue(2);
                                if (!(message.to_id.channel_id != 0 || MessageObject.isUnread(message) || chats4 == null) || message.id > 0) {
                                    message.send_state = 0;
                                }
                                if (chats4 == null && !cursor.isNull(5)) {
                                    message.random_id = cursor.longValue(5);
                                }
                                ArrayList<Chat> arrayList3;
                                NativeByteBuffer nativeByteBuffer;
                                try {
                                    if (message.reply_to_msg_id != 0) {
                                        if (!(message.action instanceof TL_messageActionPinMessage)) {
                                            try {
                                                if (!(message.action instanceof TL_messageActionPaymentSent)) {
                                                    if (!(message.action instanceof TL_messageActionGameScore)) {
                                                        arrayList3 = chats4;
                                                        arrayList = messages;
                                                    }
                                                }
                                            } catch (Exception e2) {
                                                e = e2;
                                                lower_id = chats4;
                                                arrayList = messages;
                                                chats2 = e;
                                                FileLog.m3e(chats2);
                                                users4 = users;
                                                chats4 = chats;
                                                messages = arrayList;
                                            }
                                        }
                                        if (cursor.isNull(6)) {
                                            data = data2;
                                        } else {
                                            data = cursor.byteBufferValue(6);
                                            if (data != null) {
                                                try {
                                                    message.replyMessage = Message.TLdeserialize(data, data.readInt32(false), false);
                                                    message.replyMessage.readAttachPath(data, UserConfig.getInstance(MessagesStorage.this.currentAccount).clientUserId);
                                                    data.reuse();
                                                    if (message.replyMessage != null) {
                                                        if (MessageObject.isMegagroup(message)) {
                                                            Message message2 = message.replyMessage;
                                                            message2.flags |= Integer.MIN_VALUE;
                                                        }
                                                        MessagesStorage.addUsersAndChatsFromMessage(message.replyMessage, usersToLoad, chatsToLoad);
                                                    }
                                                } catch (Exception e3) {
                                                    e = e3;
                                                    arrayList3 = chats4;
                                                    nativeByteBuffer = data;
                                                    arrayList = messages;
                                                    chats2 = e;
                                                    FileLog.m3e(chats2);
                                                    users4 = users;
                                                    chats4 = chats;
                                                    messages = arrayList;
                                                }
                                            }
                                        }
                                        try {
                                            if (message.replyMessage == null) {
                                                arrayList3 = chats4;
                                                chats4 = (long) message.reply_to_msg_id;
                                                try {
                                                    if (message.to_id.channel_id != 0) {
                                                        nativeByteBuffer = data;
                                                        arrayList = messages;
                                                        chats4 |= ((long) message.to_id.channel_id) << 32;
                                                    } else {
                                                        nativeByteBuffer = data;
                                                        arrayList = messages;
                                                    }
                                                    try {
                                                        if (!replyMessages.contains(Long.valueOf(chats4))) {
                                                            replyMessages.add(Long.valueOf(chats4));
                                                        }
                                                        data = (ArrayList) replyMessageOwners2.get(message.reply_to_msg_id);
                                                        if (data == null) {
                                                            data = new ArrayList();
                                                            replyMessageOwners2.put(message.reply_to_msg_id, data);
                                                        }
                                                        data.add(message);
                                                    } catch (Exception e4) {
                                                        e = e4;
                                                        chats2 = e;
                                                        FileLog.m3e(chats2);
                                                        users4 = users;
                                                        chats4 = chats;
                                                        messages = arrayList;
                                                    }
                                                } catch (Throwable e5) {
                                                    nativeByteBuffer = data;
                                                    arrayList = messages;
                                                    chats2 = e5;
                                                    FileLog.m3e(chats2);
                                                    users4 = users;
                                                    chats4 = chats;
                                                    messages = arrayList;
                                                }
                                            } else {
                                                lower_id = chats4;
                                                nativeByteBuffer = data;
                                                arrayList = messages;
                                            }
                                            data2 = nativeByteBuffer;
                                        } catch (Throwable e52) {
                                            arrayList3 = chats4;
                                            nativeByteBuffer = data;
                                            arrayList = messages;
                                            chats2 = e52;
                                            FileLog.m3e(chats2);
                                            users4 = users;
                                            chats4 = chats;
                                            messages = arrayList;
                                        }
                                    } else {
                                        lower_id = chats4;
                                        arrayList = messages;
                                    }
                                } catch (Throwable e522) {
                                    arrayList3 = chats4;
                                    arrayList = messages;
                                    chats2 = e522;
                                    nativeByteBuffer = data2;
                                    FileLog.m3e(chats2);
                                    users4 = users;
                                    chats4 = chats;
                                    messages = arrayList;
                                }
                            } else {
                                chats = chats4;
                                users = users4;
                                arrayList = messages;
                            }
                            users4 = users;
                            chats4 = chats;
                            messages = arrayList;
                        }
                        chats = chats4;
                        users = users4;
                        arrayList = messages;
                        cursor.dispose();
                        if (!replyMessages.isEmpty()) {
                            cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT data, mid, date, uid FROM messages WHERE mid IN(%s)", new Object[]{TextUtils.join(",", replyMessages)}), new Object[0]);
                            while (cursor.next()) {
                                NativeByteBuffer data3 = cursor.byteBufferValue(0);
                                if (data3 != null) {
                                    Message message3 = Message.TLdeserialize(data3, data3.readInt32(false), false);
                                    message3.readAttachPath(data3, UserConfig.getInstance(MessagesStorage.this.currentAccount).clientUserId);
                                    data3.reuse();
                                    message3.id = cursor.intValue(1);
                                    message3.date = cursor.intValue(2);
                                    message3.dialog_id = cursor.longValue(3);
                                    MessagesStorage.addUsersAndChatsFromMessage(message3, usersToLoad, chatsToLoad);
                                    ArrayList<Message> arrayList4 = (ArrayList) replyMessageOwners2.get(message3.id);
                                    if (arrayList4 != null) {
                                        currentTime = 0;
                                        while (currentTime < arrayList4.size()) {
                                            Message message4;
                                            Message m = (Message) arrayList4.get(currentTime);
                                            m.replyMessage = message3;
                                            if (MessageObject.isMegagroup(m)) {
                                                Message message5 = m.replyMessage;
                                                message4 = message3;
                                                message5.flags |= Integer.MIN_VALUE;
                                            } else {
                                                message4 = message3;
                                            }
                                            currentTime++;
                                            message3 = message4;
                                        }
                                    }
                                }
                            }
                            cursor.dispose();
                        }
                        if (!encryptedChatIds.isEmpty()) {
                            MessagesStorage.this.getEncryptedChatsInternal(TextUtils.join(",", encryptedChatIds), encryptedChats2, usersToLoad);
                        }
                        if (usersToLoad.isEmpty()) {
                            users2 = users;
                        } else {
                            users2 = users;
                            MessagesStorage.this.getUsersInternal(TextUtils.join(",", usersToLoad), users2);
                        }
                        if (chatsToLoad.isEmpty()) {
                            cursor2 = cursor;
                            encryptedChats = encryptedChats2;
                            users3 = users2;
                            replyMessageOwners3 = replyMessageOwners2;
                            arrayList2 = usersToLoad;
                            chats3 = chats;
                            replyMessageOwners = arrayList;
                        } else {
                            messages = chats;
                            MessagesStorage.this.getChatsInternal(TextUtils.join(",", chatsToLoad), messages);
                            int a = 0;
                            while (a < messages.size()) {
                                int a2;
                                Chat users5 = (Chat) messages.get(a);
                                if (users5 != null) {
                                    if (!users5.left) {
                                        if (users5.migrated_to == null) {
                                            cursor2 = cursor;
                                            encryptedChats = encryptedChats2;
                                            users3 = users2;
                                            chats3 = messages;
                                            replyMessageOwners3 = replyMessageOwners2;
                                            arrayList2 = usersToLoad;
                                            replyMessageOwners = arrayList;
                                        }
                                    }
                                    ids = (long) (-users5.id);
                                    cursor2 = cursor;
                                    cursor = MessagesStorage.this.database;
                                    encryptedChats = encryptedChats2;
                                    StringBuilder stringBuilder2 = new StringBuilder();
                                    users3 = users2;
                                    stringBuilder2.append("UPDATE dialogs SET unread_count = 0 WHERE did = ");
                                    stringBuilder2.append(ids);
                                    cursor.executeFast(stringBuilder2.toString()).stepThis().dispose();
                                    replyMessageOwners3 = replyMessageOwners2;
                                    arrayList2 = usersToLoad;
                                    MessagesStorage.this.database.executeFast(String.format(Locale.US, "UPDATE messages SET read_state = 3 WHERE uid = %d AND mid > 0 AND read_state IN(0,2) AND out = 0", new Object[]{Long.valueOf(ids)})).stepThis().dispose();
                                    messages.remove(a);
                                    a--;
                                    pushDialogs.remove((long) (-users5.id));
                                    cursor = null;
                                    while (true) {
                                        replyMessageOwners = arrayList;
                                        if (cursor >= replyMessageOwners.size()) {
                                            break;
                                        }
                                        Message message6 = (Message) replyMessageOwners.get(cursor);
                                        chats3 = messages;
                                        a2 = a;
                                        if (message6.dialog_id == ((long) (-users5.id))) {
                                            replyMessageOwners.remove(cursor);
                                            cursor--;
                                        }
                                        cursor++;
                                        arrayList = replyMessageOwners;
                                        messages = chats3;
                                        a = a2;
                                    }
                                    a2 = a;
                                    chats3 = messages;
                                    a = a2 + 1;
                                    arrayList = replyMessageOwners;
                                    cursor = cursor2;
                                    encryptedChats2 = encryptedChats;
                                    users2 = users3;
                                    replyMessageOwners2 = replyMessageOwners3;
                                    usersToLoad = arrayList2;
                                    messages = chats3;
                                } else {
                                    cursor2 = cursor;
                                    encryptedChats = encryptedChats2;
                                    users3 = users2;
                                    chats3 = messages;
                                    replyMessageOwners3 = replyMessageOwners2;
                                    arrayList2 = usersToLoad;
                                    replyMessageOwners = arrayList;
                                }
                                a2 = a;
                                a = a2 + 1;
                                arrayList = replyMessageOwners;
                                cursor = cursor2;
                                encryptedChats2 = encryptedChats;
                                users2 = users3;
                                replyMessageOwners2 = replyMessageOwners3;
                                usersToLoad = arrayList2;
                                messages = chats3;
                            }
                            cursor2 = cursor;
                            encryptedChats = encryptedChats2;
                            users3 = users2;
                            chats3 = messages;
                            replyMessageOwners3 = replyMessageOwners2;
                            arrayList2 = usersToLoad;
                            replyMessageOwners = arrayList;
                        }
                        sQLiteCursor = cursor2;
                    } else {
                        sQLiteCursor = cursor;
                        encryptedChats = encryptedChats2;
                        chats3 = chats4;
                        users3 = users4;
                        replyMessageOwners3 = replyMessageOwners2;
                        arrayList2 = usersToLoad;
                        StringBuilder stringBuilder3 = ids;
                        int i = currentTime;
                        replyMessageOwners = messages;
                    }
                    Collections.reverse(replyMessageOwners);
                    final LongSparseArray<Integer> longSparseArray = pushDialogs;
                    final ArrayList<Message> arrayList5 = replyMessageOwners;
                    users2 = users3;
                    final ArrayList<Chat> arrayList6 = chats3;
                    final ArrayList<EncryptedChat> arrayList7 = encryptedChats;
                    AndroidUtilities.runOnUIThread(new Runnable() {
                        public void run() {
                            NotificationsController.getInstance(MessagesStorage.this.currentAccount).processLoadedUnreadMessages(longSparseArray, arrayList5, users2, arrayList6, arrayList7);
                        }
                    });
                } catch (Throwable e5222) {
                    FileLog.m3e(e5222);
                }
            }
        });
    }

    public void putWallpapers(final ArrayList<WallPaper> wallPapers) {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                int num = 0;
                try {
                    MessagesStorage.this.database.executeFast("DELETE FROM wallpapers WHERE 1").stepThis().dispose();
                    MessagesStorage.this.database.beginTransaction();
                    SQLitePreparedStatement state = MessagesStorage.this.database.executeFast("REPLACE INTO wallpapers VALUES(?, ?)");
                    Iterator it = wallPapers.iterator();
                    while (it.hasNext()) {
                        WallPaper wallPaper = (WallPaper) it.next();
                        state.requery();
                        NativeByteBuffer data = new NativeByteBuffer(wallPaper.getObjectSize());
                        wallPaper.serializeToStream(data);
                        state.bindInteger(1, num);
                        state.bindByteBuffer(2, data);
                        state.step();
                        num++;
                        data.reuse();
                    }
                    state.dispose();
                    MessagesStorage.this.database.commitTransaction();
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public void loadWebRecent(final int type) {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    SQLiteCursor cursor = MessagesStorage.this.database;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("SELECT id, image_url, thumb_url, local_url, width, height, size, date, document FROM web_recent_v3 WHERE type = ");
                    stringBuilder.append(type);
                    stringBuilder.append(" ORDER BY date DESC");
                    cursor = cursor.queryFinalized(stringBuilder.toString(), new Object[0]);
                    final ArrayList<SearchImage> arrayList = new ArrayList();
                    while (cursor.next()) {
                        SearchImage searchImage = new SearchImage();
                        searchImage.id = cursor.stringValue(0);
                        searchImage.imageUrl = cursor.stringValue(1);
                        searchImage.thumbUrl = cursor.stringValue(2);
                        searchImage.localUrl = cursor.stringValue(3);
                        searchImage.width = cursor.intValue(4);
                        searchImage.height = cursor.intValue(5);
                        searchImage.size = cursor.intValue(6);
                        searchImage.date = cursor.intValue(7);
                        if (!cursor.isNull(8)) {
                            NativeByteBuffer data = cursor.byteBufferValue(8);
                            if (data != null) {
                                searchImage.document = Document.TLdeserialize(data, data.readInt32(false), false);
                                data.reuse();
                            }
                        }
                        searchImage.type = type;
                        arrayList.add(searchImage);
                    }
                    cursor.dispose();
                    AndroidUtilities.runOnUIThread(new Runnable() {
                        public void run() {
                            NotificationCenter.getInstance(MessagesStorage.this.currentAccount).postNotificationName(NotificationCenter.recentImagesDidLoaded, Integer.valueOf(type), arrayList);
                        }
                    });
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public void addRecentLocalFile(final String imageUrl, final String localUrl, final Document document) {
        if (!(imageUrl == null || imageUrl.length() == 0)) {
            if ((localUrl != null && localUrl.length() != 0) || document != null) {
                this.storageQueue.postRunnable(new Runnable() {
                    public void run() {
                        try {
                            SQLitePreparedStatement state;
                            if (document != null) {
                                state = MessagesStorage.this.database.executeFast("UPDATE web_recent_v3 SET document = ? WHERE image_url = ?");
                                state.requery();
                                NativeByteBuffer data = new NativeByteBuffer(document.getObjectSize());
                                document.serializeToStream(data);
                                state.bindByteBuffer(1, data);
                                state.bindString(2, imageUrl);
                                state.step();
                                state.dispose();
                                data.reuse();
                            } else {
                                state = MessagesStorage.this.database.executeFast("UPDATE web_recent_v3 SET local_url = ? WHERE image_url = ?");
                                state.requery();
                                state.bindString(1, localUrl);
                                state.bindString(2, imageUrl);
                                state.step();
                                state.dispose();
                            }
                        } catch (Throwable e) {
                            FileLog.m3e(e);
                        }
                    }
                });
            }
        }
    }

    public void clearWebRecent(final int type) {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    SQLiteDatabase access$000 = MessagesStorage.this.database;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("DELETE FROM web_recent_v3 WHERE type = ");
                    stringBuilder.append(type);
                    access$000.executeFast(stringBuilder.toString()).stepThis().dispose();
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public void putWebRecent(final ArrayList<SearchImage> arrayList) {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    int a;
                    MessagesStorage.this.database.beginTransaction();
                    SQLitePreparedStatement state = MessagesStorage.this.database.executeFast("REPLACE INTO web_recent_v3 VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                    int a2 = 0;
                    while (true) {
                        int size = arrayList.size();
                        a = Callback.DEFAULT_DRAG_ANIMATION_DURATION;
                        if (a2 >= size) {
                            break;
                        } else if (a2 == Callback.DEFAULT_DRAG_ANIMATION_DURATION) {
                            break;
                        } else {
                            SearchImage searchImage = (SearchImage) arrayList.get(a2);
                            state.requery();
                            state.bindString(1, searchImage.id);
                            state.bindInteger(2, searchImage.type);
                            state.bindString(3, searchImage.imageUrl != null ? searchImage.imageUrl : TtmlNode.ANONYMOUS_REGION_ID);
                            state.bindString(4, searchImage.thumbUrl != null ? searchImage.thumbUrl : TtmlNode.ANONYMOUS_REGION_ID);
                            state.bindString(5, searchImage.localUrl != null ? searchImage.localUrl : TtmlNode.ANONYMOUS_REGION_ID);
                            state.bindInteger(6, searchImage.width);
                            state.bindInteger(7, searchImage.height);
                            state.bindInteger(8, searchImage.size);
                            state.bindInteger(9, searchImage.date);
                            NativeByteBuffer data = null;
                            if (searchImage.document != null) {
                                data = new NativeByteBuffer(searchImage.document.getObjectSize());
                                searchImage.document.serializeToStream(data);
                                state.bindByteBuffer(10, data);
                            } else {
                                state.bindNull(10);
                            }
                            state.step();
                            if (data != null) {
                                data.reuse();
                            }
                            a2++;
                        }
                    }
                    state.dispose();
                    MessagesStorage.this.database.commitTransaction();
                    if (arrayList.size() >= Callback.DEFAULT_DRAG_ANIMATION_DURATION) {
                        MessagesStorage.this.database.beginTransaction();
                        while (true) {
                            a2 = a;
                            if (a2 >= arrayList.size()) {
                                break;
                            }
                            SQLiteDatabase access$000 = MessagesStorage.this.database;
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.append("DELETE FROM web_recent_v3 WHERE id = '");
                            stringBuilder.append(((SearchImage) arrayList.get(a2)).id);
                            stringBuilder.append("'");
                            access$000.executeFast(stringBuilder.toString()).stepThis().dispose();
                            a = a2 + 1;
                        }
                        MessagesStorage.this.database.commitTransaction();
                    }
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public void getWallpapers() {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    SQLiteCursor cursor = MessagesStorage.this.database.queryFinalized("SELECT data FROM wallpapers WHERE 1", new Object[0]);
                    final ArrayList<WallPaper> wallPapers = new ArrayList();
                    while (cursor.next()) {
                        NativeByteBuffer data = cursor.byteBufferValue(0);
                        if (data != null) {
                            WallPaper wallPaper = WallPaper.TLdeserialize(data, data.readInt32(false), false);
                            data.reuse();
                            wallPapers.add(wallPaper);
                        }
                    }
                    cursor.dispose();
                    AndroidUtilities.runOnUIThread(new Runnable() {
                        public void run() {
                            NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.wallpapersDidLoaded, wallPapers);
                        }
                    });
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public void getBlockedUsers() {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    ArrayList<Integer> ids = new ArrayList();
                    ArrayList<User> users = new ArrayList();
                    SQLiteCursor cursor = MessagesStorage.this.database.queryFinalized("SELECT * FROM blocked_users WHERE 1", new Object[0]);
                    StringBuilder usersToLoad = new StringBuilder();
                    while (cursor.next()) {
                        int user_id = cursor.intValue(0);
                        ids.add(Integer.valueOf(user_id));
                        if (usersToLoad.length() != 0) {
                            usersToLoad.append(",");
                        }
                        usersToLoad.append(user_id);
                    }
                    cursor.dispose();
                    if (usersToLoad.length() != 0) {
                        MessagesStorage.this.getUsersInternal(usersToLoad.toString(), users);
                    }
                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedBlockedUsers(ids, users, true);
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public void deleteBlockedUser(final int id) {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    SQLiteDatabase access$000 = MessagesStorage.this.database;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("DELETE FROM blocked_users WHERE uid = ");
                    stringBuilder.append(id);
                    access$000.executeFast(stringBuilder.toString()).stepThis().dispose();
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public void putBlockedUsers(final ArrayList<Integer> ids, final boolean replace) {
        if (ids != null) {
            if (!ids.isEmpty()) {
                this.storageQueue.postRunnable(new Runnable() {
                    public void run() {
                        try {
                            if (replace) {
                                MessagesStorage.this.database.executeFast("DELETE FROM blocked_users WHERE 1").stepThis().dispose();
                            }
                            MessagesStorage.this.database.beginTransaction();
                            SQLitePreparedStatement state = MessagesStorage.this.database.executeFast("REPLACE INTO blocked_users VALUES(?)");
                            Iterator it = ids.iterator();
                            while (it.hasNext()) {
                                Integer id = (Integer) it.next();
                                state.requery();
                                state.bindInteger(1, id.intValue());
                                state.step();
                            }
                            state.dispose();
                            MessagesStorage.this.database.commitTransaction();
                        } catch (Throwable e) {
                            FileLog.m3e(e);
                        }
                    }
                });
            }
        }
    }

    public void deleteUserChannelHistory(final int channelId, final int uid) {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    long did = (long) (-channelId);
                    final ArrayList<Integer> mids = new ArrayList();
                    SQLiteCursor cursor = MessagesStorage.this.database;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("SELECT data FROM messages WHERE uid = ");
                    stringBuilder.append(did);
                    cursor = cursor.queryFinalized(stringBuilder.toString(), new Object[0]);
                    ArrayList<File> filesToDelete = new ArrayList();
                    while (cursor.next()) {
                        try {
                            NativeByteBuffer data = cursor.byteBufferValue(0);
                            if (data != null) {
                                Message message = Message.TLdeserialize(data, data.readInt32(false), false);
                                message.readAttachPath(data, UserConfig.getInstance(MessagesStorage.this.currentAccount).clientUserId);
                                data.reuse();
                                if (!(message == null || message.from_id != uid || message.id == 1)) {
                                    mids.add(Integer.valueOf(message.id));
                                    if (message.media instanceof TL_messageMediaPhoto) {
                                        Iterator it = message.media.photo.sizes.iterator();
                                        while (it.hasNext()) {
                                            File file = FileLoader.getPathToAttach((PhotoSize) it.next());
                                            if (file != null && file.toString().length() > 0) {
                                                filesToDelete.add(file);
                                            }
                                        }
                                    } else if (message.media instanceof TL_messageMediaDocument) {
                                        File file2 = FileLoader.getPathToAttach(message.media.document);
                                        if (file2 != null && file2.toString().length() > 0) {
                                            filesToDelete.add(file2);
                                        }
                                        file2 = FileLoader.getPathToAttach(message.media.document.thumb);
                                        if (file2 != null && file2.toString().length() > 0) {
                                            filesToDelete.add(file2);
                                        }
                                    }
                                }
                            }
                        } catch (Throwable e) {
                            FileLog.m3e(e);
                        }
                    }
                    cursor.dispose();
                    AndroidUtilities.runOnUIThread(new Runnable() {
                        public void run() {
                            MessagesController.getInstance(MessagesStorage.this.currentAccount).markChannelDialogMessageAsDeleted(mids, channelId);
                        }
                    });
                    MessagesStorage.this.markMessagesAsDeletedInternal((ArrayList) mids, channelId);
                    MessagesStorage.this.updateDialogsWithDeletedMessagesInternal(mids, null, channelId);
                    FileLoader.getInstance(MessagesStorage.this.currentAccount).deleteFiles(filesToDelete, 0);
                    if (!mids.isEmpty()) {
                        AndroidUtilities.runOnUIThread(new Runnable() {
                            public void run() {
                                NotificationCenter.getInstance(MessagesStorage.this.currentAccount).postNotificationName(NotificationCenter.messagesDeleted, mids, Integer.valueOf(channelId));
                            }
                        });
                    }
                } catch (Throwable e2) {
                    FileLog.m3e(e2);
                }
            }
        });
    }

    public void deleteDialog(final long did, final int messagesOnly) {
        this.storageQueue.postRunnable(new Runnable() {

            /* renamed from: org.telegram.messenger.MessagesStorage$23$1 */
            class C03751 implements Runnable {
                C03751() {
                }

                public void run() {
                    NotificationCenter.getInstance(MessagesStorage.this.currentAccount).postNotificationName(NotificationCenter.needReloadRecentDialogsSearch, new Object[0]);
                }
            }

            public void run() {
                try {
                    int lastMid;
                    SQLiteCursor cursor;
                    StringBuilder stringBuilder;
                    SQLiteCursor cursor2;
                    NativeByteBuffer data;
                    SQLiteDatabase access$000;
                    StringBuilder stringBuilder2;
                    int messageId;
                    SQLiteDatabase access$0002;
                    if (messagesOnly == 3) {
                        lastMid = -1;
                        cursor = MessagesStorage.this.database;
                        stringBuilder = new StringBuilder();
                        stringBuilder.append("SELECT last_mid FROM dialogs WHERE did = ");
                        stringBuilder.append(did);
                        cursor = cursor.queryFinalized(stringBuilder.toString(), new Object[0]);
                        if (cursor.next()) {
                            lastMid = cursor.intValue(0);
                        }
                        cursor.dispose();
                        if (lastMid != 0) {
                            return;
                        }
                    }
                    if (((int) did) == 0 || messagesOnly == 2) {
                        cursor2 = MessagesStorage.this.database;
                        stringBuilder = new StringBuilder();
                        stringBuilder.append("SELECT data FROM messages WHERE uid = ");
                        stringBuilder.append(did);
                        cursor2 = cursor2.queryFinalized(stringBuilder.toString(), new Object[0]);
                        ArrayList<File> filesToDelete = new ArrayList();
                        while (cursor2.next()) {
                            try {
                                data = cursor2.byteBufferValue(0);
                                if (data != null) {
                                    Message message = Message.TLdeserialize(data, data.readInt32(false), false);
                                    message.readAttachPath(data, UserConfig.getInstance(MessagesStorage.this.currentAccount).clientUserId);
                                    data.reuse();
                                    if (!(message == null || message.media == null)) {
                                        if (message.media instanceof TL_messageMediaPhoto) {
                                            Iterator it = message.media.photo.sizes.iterator();
                                            while (it.hasNext()) {
                                                File file = FileLoader.getPathToAttach((PhotoSize) it.next());
                                                if (file != null && file.toString().length() > 0) {
                                                    filesToDelete.add(file);
                                                }
                                            }
                                        } else if (message.media instanceof TL_messageMediaDocument) {
                                            File file2 = FileLoader.getPathToAttach(message.media.document);
                                            if (file2 != null && file2.toString().length() > 0) {
                                                filesToDelete.add(file2);
                                            }
                                            file2 = FileLoader.getPathToAttach(message.media.document.thumb);
                                            if (file2 != null && file2.toString().length() > 0) {
                                                filesToDelete.add(file2);
                                            }
                                        }
                                    }
                                }
                            } catch (Throwable e) {
                                FileLog.m3e(e);
                            }
                        }
                        cursor2.dispose();
                        FileLoader.getInstance(MessagesStorage.this.currentAccount).deleteFiles(filesToDelete, messagesOnly);
                    }
                    if (messagesOnly != 0) {
                        if (messagesOnly != 3) {
                            if (messagesOnly == 2) {
                                access$000 = MessagesStorage.this.database;
                                stringBuilder2 = new StringBuilder();
                                stringBuilder2.append("SELECT last_mid_i, last_mid FROM dialogs WHERE did = ");
                                stringBuilder2.append(did);
                                cursor2 = access$000.queryFinalized(stringBuilder2.toString(), new Object[0]);
                                messageId = -1;
                                if (cursor2.next()) {
                                    long last_mid_i = cursor2.longValue(0);
                                    long last_mid = cursor2.longValue(1);
                                    cursor = MessagesStorage.this.database;
                                    StringBuilder stringBuilder3 = new StringBuilder();
                                    stringBuilder3.append("SELECT data FROM messages WHERE uid = ");
                                    stringBuilder3.append(did);
                                    stringBuilder3.append(" AND mid IN (");
                                    stringBuilder3.append(last_mid_i);
                                    stringBuilder3.append(",");
                                    stringBuilder3.append(last_mid);
                                    stringBuilder3.append(")");
                                    cursor = cursor.queryFinalized(stringBuilder3.toString(), new Object[0]);
                                    while (cursor.next()) {
                                        try {
                                            data = cursor.byteBufferValue(0);
                                            if (data != null) {
                                                Message message2 = Message.TLdeserialize(data, data.readInt32(false), false);
                                                message2.readAttachPath(data, UserConfig.getInstance(MessagesStorage.this.currentAccount).clientUserId);
                                                data.reuse();
                                                if (message2 != null) {
                                                    messageId = message2.id;
                                                }
                                            }
                                        } catch (Throwable e2) {
                                            FileLog.m3e(e2);
                                        }
                                    }
                                    cursor.dispose();
                                    access$0002 = MessagesStorage.this.database;
                                    stringBuilder3 = new StringBuilder();
                                    stringBuilder3.append("DELETE FROM messages WHERE uid = ");
                                    stringBuilder3.append(did);
                                    stringBuilder3.append(" AND mid != ");
                                    stringBuilder3.append(last_mid_i);
                                    stringBuilder3.append(" AND mid != ");
                                    stringBuilder3.append(last_mid);
                                    access$0002.executeFast(stringBuilder3.toString()).stepThis().dispose();
                                    access$0002 = MessagesStorage.this.database;
                                    stringBuilder3 = new StringBuilder();
                                    stringBuilder3.append("DELETE FROM messages_holes WHERE uid = ");
                                    stringBuilder3.append(did);
                                    access$0002.executeFast(stringBuilder3.toString()).stepThis().dispose();
                                    access$0002 = MessagesStorage.this.database;
                                    stringBuilder3 = new StringBuilder();
                                    stringBuilder3.append("DELETE FROM bot_keyboard WHERE uid = ");
                                    stringBuilder3.append(did);
                                    access$0002.executeFast(stringBuilder3.toString()).stepThis().dispose();
                                    access$0002 = MessagesStorage.this.database;
                                    stringBuilder3 = new StringBuilder();
                                    stringBuilder3.append("DELETE FROM media_counts_v2 WHERE uid = ");
                                    stringBuilder3.append(did);
                                    access$0002.executeFast(stringBuilder3.toString()).stepThis().dispose();
                                    access$0002 = MessagesStorage.this.database;
                                    stringBuilder3 = new StringBuilder();
                                    stringBuilder3.append("DELETE FROM media_v2 WHERE uid = ");
                                    stringBuilder3.append(did);
                                    access$0002.executeFast(stringBuilder3.toString()).stepThis().dispose();
                                    access$0002 = MessagesStorage.this.database;
                                    stringBuilder3 = new StringBuilder();
                                    stringBuilder3.append("DELETE FROM media_holes_v2 WHERE uid = ");
                                    stringBuilder3.append(did);
                                    access$0002.executeFast(stringBuilder3.toString()).stepThis().dispose();
                                    DataQuery.getInstance(MessagesStorage.this.currentAccount).clearBotKeyboard(did, null);
                                    SQLitePreparedStatement state5 = MessagesStorage.this.database.executeFast("REPLACE INTO messages_holes VALUES(?, ?, ?)");
                                    SQLitePreparedStatement state6 = MessagesStorage.this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
                                    if (messageId != -1) {
                                        MessagesStorage.createFirstHoles(did, state5, state6, messageId);
                                    }
                                    state5.dispose();
                                    state6.dispose();
                                }
                                cursor2.dispose();
                                return;
                            }
                            access$000 = MessagesStorage.this.database;
                            stringBuilder2 = new StringBuilder();
                            stringBuilder2.append("UPDATE dialogs SET unread_count = 0 WHERE did = ");
                            stringBuilder2.append(did);
                            access$000.executeFast(stringBuilder2.toString()).stepThis().dispose();
                            access$000 = MessagesStorage.this.database;
                            stringBuilder2 = new StringBuilder();
                            stringBuilder2.append("DELETE FROM messages WHERE uid = ");
                            stringBuilder2.append(did);
                            access$000.executeFast(stringBuilder2.toString()).stepThis().dispose();
                            access$000 = MessagesStorage.this.database;
                            stringBuilder2 = new StringBuilder();
                            stringBuilder2.append("DELETE FROM bot_keyboard WHERE uid = ");
                            stringBuilder2.append(did);
                            access$000.executeFast(stringBuilder2.toString()).stepThis().dispose();
                            access$000 = MessagesStorage.this.database;
                            stringBuilder2 = new StringBuilder();
                            stringBuilder2.append("DELETE FROM media_counts_v2 WHERE uid = ");
                            stringBuilder2.append(did);
                            access$000.executeFast(stringBuilder2.toString()).stepThis().dispose();
                            access$000 = MessagesStorage.this.database;
                            stringBuilder2 = new StringBuilder();
                            stringBuilder2.append("DELETE FROM media_v2 WHERE uid = ");
                            stringBuilder2.append(did);
                            access$000.executeFast(stringBuilder2.toString()).stepThis().dispose();
                            access$000 = MessagesStorage.this.database;
                            stringBuilder2 = new StringBuilder();
                            stringBuilder2.append("DELETE FROM messages_holes WHERE uid = ");
                            stringBuilder2.append(did);
                            access$000.executeFast(stringBuilder2.toString()).stepThis().dispose();
                            access$000 = MessagesStorage.this.database;
                            stringBuilder2 = new StringBuilder();
                            stringBuilder2.append("DELETE FROM media_holes_v2 WHERE uid = ");
                            stringBuilder2.append(did);
                            access$000.executeFast(stringBuilder2.toString()).stepThis().dispose();
                            DataQuery.getInstance(MessagesStorage.this.currentAccount).clearBotKeyboard(did, null);
                            AndroidUtilities.runOnUIThread(new C03751());
                        }
                    }
                    access$000 = MessagesStorage.this.database;
                    stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("DELETE FROM dialogs WHERE did = ");
                    stringBuilder2.append(did);
                    access$000.executeFast(stringBuilder2.toString()).stepThis().dispose();
                    access$000 = MessagesStorage.this.database;
                    stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("DELETE FROM chat_settings_v2 WHERE uid = ");
                    stringBuilder2.append(did);
                    access$000.executeFast(stringBuilder2.toString()).stepThis().dispose();
                    access$000 = MessagesStorage.this.database;
                    stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("DELETE FROM chat_pinned WHERE uid = ");
                    stringBuilder2.append(did);
                    access$000.executeFast(stringBuilder2.toString()).stepThis().dispose();
                    access$000 = MessagesStorage.this.database;
                    stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("DELETE FROM channel_users_v2 WHERE did = ");
                    stringBuilder2.append(did);
                    access$000.executeFast(stringBuilder2.toString()).stepThis().dispose();
                    access$000 = MessagesStorage.this.database;
                    stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("DELETE FROM search_recent WHERE did = ");
                    stringBuilder2.append(did);
                    access$000.executeFast(stringBuilder2.toString()).stepThis().dispose();
                    lastMid = (int) did;
                    messageId = (int) (did >> 32);
                    StringBuilder stringBuilder4;
                    if (lastMid == 0) {
                        access$0002 = MessagesStorage.this.database;
                        stringBuilder4 = new StringBuilder();
                        stringBuilder4.append("DELETE FROM enc_chats WHERE uid = ");
                        stringBuilder4.append(messageId);
                        access$0002.executeFast(stringBuilder4.toString()).stepThis().dispose();
                    } else if (messageId == 1) {
                        access$0002 = MessagesStorage.this.database;
                        stringBuilder4 = new StringBuilder();
                        stringBuilder4.append("DELETE FROM chats WHERE uid = ");
                        stringBuilder4.append(lastMid);
                        access$0002.executeFast(stringBuilder4.toString()).stepThis().dispose();
                    }
                    access$000 = MessagesStorage.this.database;
                    stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("UPDATE dialogs SET unread_count = 0 WHERE did = ");
                    stringBuilder2.append(did);
                    access$000.executeFast(stringBuilder2.toString()).stepThis().dispose();
                    access$000 = MessagesStorage.this.database;
                    stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("DELETE FROM messages WHERE uid = ");
                    stringBuilder2.append(did);
                    access$000.executeFast(stringBuilder2.toString()).stepThis().dispose();
                    access$000 = MessagesStorage.this.database;
                    stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("DELETE FROM bot_keyboard WHERE uid = ");
                    stringBuilder2.append(did);
                    access$000.executeFast(stringBuilder2.toString()).stepThis().dispose();
                    access$000 = MessagesStorage.this.database;
                    stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("DELETE FROM media_counts_v2 WHERE uid = ");
                    stringBuilder2.append(did);
                    access$000.executeFast(stringBuilder2.toString()).stepThis().dispose();
                    access$000 = MessagesStorage.this.database;
                    stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("DELETE FROM media_v2 WHERE uid = ");
                    stringBuilder2.append(did);
                    access$000.executeFast(stringBuilder2.toString()).stepThis().dispose();
                    access$000 = MessagesStorage.this.database;
                    stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("DELETE FROM messages_holes WHERE uid = ");
                    stringBuilder2.append(did);
                    access$000.executeFast(stringBuilder2.toString()).stepThis().dispose();
                    access$000 = MessagesStorage.this.database;
                    stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("DELETE FROM media_holes_v2 WHERE uid = ");
                    stringBuilder2.append(did);
                    access$000.executeFast(stringBuilder2.toString()).stepThis().dispose();
                    DataQuery.getInstance(MessagesStorage.this.currentAccount).clearBotKeyboard(did, null);
                    AndroidUtilities.runOnUIThread(new C03751());
                } catch (Throwable e3) {
                    FileLog.m3e(e3);
                }
            }
        });
    }

    public void getDialogPhotos(int did, int count, long max_id, int classGuid) {
        final long j = max_id;
        final int i = did;
        final int i2 = count;
        final int i3 = classGuid;
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    SQLiteCursor cursor;
                    if (j != 0) {
                        cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM user_photos WHERE uid = %d AND id < %d ORDER BY id DESC LIMIT %d", new Object[]{Integer.valueOf(i), Long.valueOf(j), Integer.valueOf(i2)}), new Object[0]);
                    } else {
                        cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM user_photos WHERE uid = %d ORDER BY id DESC LIMIT %d", new Object[]{Integer.valueOf(i), Integer.valueOf(i2)}), new Object[0]);
                    }
                    final photos_Photos res = new TL_photos_photos();
                    while (cursor.next()) {
                        NativeByteBuffer data = cursor.byteBufferValue(0);
                        if (data != null) {
                            Photo photo = Photo.TLdeserialize(data, data.readInt32(false), false);
                            data.reuse();
                            res.photos.add(photo);
                        }
                    }
                    cursor.dispose();
                    Utilities.stageQueue.postRunnable(new Runnable() {
                        public void run() {
                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedUserPhotos(res, i, i2, j, true, i3);
                        }
                    });
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public void clearUserPhotos(final int uid) {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    SQLiteDatabase access$000 = MessagesStorage.this.database;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("DELETE FROM user_photos WHERE uid = ");
                    stringBuilder.append(uid);
                    access$000.executeFast(stringBuilder.toString()).stepThis().dispose();
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public void clearUserPhoto(final int uid, final long pid) {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    SQLiteDatabase access$000 = MessagesStorage.this.database;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("DELETE FROM user_photos WHERE uid = ");
                    stringBuilder.append(uid);
                    stringBuilder.append(" AND id = ");
                    stringBuilder.append(pid);
                    access$000.executeFast(stringBuilder.toString()).stepThis().dispose();
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public void resetDialogs(messages_Dialogs dialogsRes, int messagesCount, int seq, int newPts, int date, int qts, LongSparseArray<TL_dialog> new_dialogs_dict, LongSparseArray<MessageObject> new_dialogMessage, Message lastMessage, int dialogsCount) {
        final messages_Dialogs messages_dialogs = dialogsRes;
        final int i = dialogsCount;
        final int i2 = seq;
        final int i3 = newPts;
        final int i4 = date;
        final int i5 = qts;
        final Message message = lastMessage;
        final int i6 = messagesCount;
        final LongSparseArray<TL_dialog> longSparseArray = new_dialogs_dict;
        final LongSparseArray<MessageObject> longSparseArray2 = new_dialogMessage;
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                AnonymousClass27 anonymousClass27 = this;
                int maxPinnedNum = 0;
                try {
                    int lower_id;
                    ArrayList<Integer> dids = new ArrayList();
                    int totalPinnedCount = messages_dialogs.dialogs.size() - i;
                    final LongSparseArray<Integer> oldPinnedDialogNums = new LongSparseArray();
                    ArrayList<Long> oldPinnedOrder = new ArrayList();
                    ArrayList<Long> orderArrayList = new ArrayList();
                    for (int a = i; a < messages_dialogs.dialogs.size(); a++) {
                        orderArrayList.add(Long.valueOf(((TL_dialog) messages_dialogs.dialogs.get(a)).id));
                    }
                    SQLiteCursor cursor = MessagesStorage.this.database.queryFinalized("SELECT did, pinned FROM dialogs WHERE 1", new Object[0]);
                    while (cursor.next()) {
                        long did = cursor.longValue(0);
                        int pinnedNum = cursor.intValue(1);
                        lower_id = (int) did;
                        if (lower_id != 0) {
                            dids.add(Integer.valueOf(lower_id));
                            if (pinnedNum > 0) {
                                maxPinnedNum = Math.max(pinnedNum, maxPinnedNum);
                                oldPinnedDialogNums.put(did, Integer.valueOf(pinnedNum));
                                oldPinnedOrder.add(Long.valueOf(did));
                            }
                        }
                    }
                    Collections.sort(oldPinnedOrder, new Comparator<Long>() {
                        public int compare(Long o1, Long o2) {
                            Integer val1 = (Integer) oldPinnedDialogNums.get(o1.longValue());
                            Integer val2 = (Integer) oldPinnedDialogNums.get(o2.longValue());
                            if (val1.intValue() < val2.intValue()) {
                                return 1;
                            }
                            if (val1.intValue() > val2.intValue()) {
                                return -1;
                            }
                            return 0;
                        }
                    });
                    while (oldPinnedOrder.size() < totalPinnedCount) {
                        oldPinnedOrder.add(0, Long.valueOf(0));
                    }
                    cursor.dispose();
                    String ids = new StringBuilder();
                    ids.append("(");
                    ids.append(TextUtils.join(",", dids));
                    ids.append(")");
                    ids = ids.toString();
                    MessagesStorage.this.database.beginTransaction();
                    SQLiteDatabase access$000 = MessagesStorage.this.database;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("DELETE FROM dialogs WHERE did IN ");
                    stringBuilder.append(ids);
                    access$000.executeFast(stringBuilder.toString()).stepThis().dispose();
                    access$000 = MessagesStorage.this.database;
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("DELETE FROM messages WHERE uid IN ");
                    stringBuilder.append(ids);
                    access$000.executeFast(stringBuilder.toString()).stepThis().dispose();
                    access$000 = MessagesStorage.this.database;
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("DELETE FROM bot_keyboard WHERE uid IN ");
                    stringBuilder.append(ids);
                    access$000.executeFast(stringBuilder.toString()).stepThis().dispose();
                    access$000 = MessagesStorage.this.database;
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("DELETE FROM media_counts_v2 WHERE uid IN ");
                    stringBuilder.append(ids);
                    access$000.executeFast(stringBuilder.toString()).stepThis().dispose();
                    access$000 = MessagesStorage.this.database;
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("DELETE FROM media_v2 WHERE uid IN ");
                    stringBuilder.append(ids);
                    access$000.executeFast(stringBuilder.toString()).stepThis().dispose();
                    access$000 = MessagesStorage.this.database;
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("DELETE FROM messages_holes WHERE uid IN ");
                    stringBuilder.append(ids);
                    access$000.executeFast(stringBuilder.toString()).stepThis().dispose();
                    access$000 = MessagesStorage.this.database;
                    stringBuilder = new StringBuilder();
                    stringBuilder.append("DELETE FROM media_holes_v2 WHERE uid IN ");
                    stringBuilder.append(ids);
                    access$000.executeFast(stringBuilder.toString()).stepThis().dispose();
                    MessagesStorage.this.database.commitTransaction();
                    int a2 = 0;
                    while (a2 < totalPinnedCount) {
                        ArrayList<Integer> dids2;
                        int a3;
                        TL_dialog dialog = (TL_dialog) messages_dialogs.dialogs.get(i + a2);
                        lower_id = oldPinnedOrder.indexOf(Long.valueOf(dialog.id));
                        int newIdx = orderArrayList.indexOf(Long.valueOf(dialog.id));
                        if (lower_id == -1 || newIdx == -1) {
                            dids2 = dids;
                            a3 = a2;
                        } else if (lower_id == newIdx) {
                            a3 = a2;
                            Integer oldNum = (Integer) oldPinnedDialogNums.get(dialog.id);
                            if (oldNum != null) {
                                dialog.pinnedNum = oldNum.intValue();
                            }
                            dids2 = dids;
                        } else {
                            a3 = a2;
                            Integer oldNum2 = (Integer) oldPinnedDialogNums.get(((Long) oldPinnedOrder.get(newIdx)).longValue());
                            if (oldNum2 != null) {
                                dids2 = dids;
                                dialog.pinnedNum = oldNum2.intValue();
                            } else {
                                dids2 = dids;
                            }
                        }
                        if (dialog.pinnedNum == 0) {
                            dialog.pinnedNum = (totalPinnedCount - a3) + maxPinnedNum;
                        }
                        a2 = a3 + 1;
                        dids = dids2;
                    }
                    MessagesStorage.this.putDialogsInternal(messages_dialogs, false);
                    MessagesStorage.this.saveDiffParamsInternal(i2, i3, i4, i5);
                    if (message == null || message.id == UserConfig.getInstance(MessagesStorage.this.currentAccount).dialogsLoadOffsetId) {
                        UserConfig.getInstance(MessagesStorage.this.currentAccount).dialogsLoadOffsetId = ConnectionsManager.DEFAULT_DATACENTER_ID;
                    } else {
                        UserConfig.getInstance(MessagesStorage.this.currentAccount).totalDialogsLoadCount = messages_dialogs.dialogs.size();
                        UserConfig.getInstance(MessagesStorage.this.currentAccount).dialogsLoadOffsetId = message.id;
                        UserConfig.getInstance(MessagesStorage.this.currentAccount).dialogsLoadOffsetDate = message.date;
                        int a4;
                        Chat chat;
                        if (message.to_id.channel_id != 0) {
                            UserConfig.getInstance(MessagesStorage.this.currentAccount).dialogsLoadOffsetChannelId = message.to_id.channel_id;
                            UserConfig.getInstance(MessagesStorage.this.currentAccount).dialogsLoadOffsetChatId = 0;
                            UserConfig.getInstance(MessagesStorage.this.currentAccount).dialogsLoadOffsetUserId = 0;
                            for (a4 = 0; a4 < messages_dialogs.chats.size(); a4++) {
                                chat = (Chat) messages_dialogs.chats.get(a4);
                                if (chat.id == UserConfig.getInstance(MessagesStorage.this.currentAccount).dialogsLoadOffsetChannelId) {
                                    UserConfig.getInstance(MessagesStorage.this.currentAccount).dialogsLoadOffsetAccess = chat.access_hash;
                                    break;
                                }
                            }
                        } else if (message.to_id.chat_id != 0) {
                            UserConfig.getInstance(MessagesStorage.this.currentAccount).dialogsLoadOffsetChatId = message.to_id.chat_id;
                            UserConfig.getInstance(MessagesStorage.this.currentAccount).dialogsLoadOffsetChannelId = 0;
                            UserConfig.getInstance(MessagesStorage.this.currentAccount).dialogsLoadOffsetUserId = 0;
                            for (a4 = 0; a4 < messages_dialogs.chats.size(); a4++) {
                                chat = (Chat) messages_dialogs.chats.get(a4);
                                if (chat.id == UserConfig.getInstance(MessagesStorage.this.currentAccount).dialogsLoadOffsetChatId) {
                                    UserConfig.getInstance(MessagesStorage.this.currentAccount).dialogsLoadOffsetAccess = chat.access_hash;
                                    break;
                                }
                            }
                        } else if (message.to_id.user_id != 0) {
                            UserConfig.getInstance(MessagesStorage.this.currentAccount).dialogsLoadOffsetUserId = message.to_id.user_id;
                            UserConfig.getInstance(MessagesStorage.this.currentAccount).dialogsLoadOffsetChatId = 0;
                            UserConfig.getInstance(MessagesStorage.this.currentAccount).dialogsLoadOffsetChannelId = 0;
                            for (a4 = 0; a4 < messages_dialogs.users.size(); a4++) {
                                User user = (User) messages_dialogs.users.get(a4);
                                if (user.id == UserConfig.getInstance(MessagesStorage.this.currentAccount).dialogsLoadOffsetUserId) {
                                    UserConfig.getInstance(MessagesStorage.this.currentAccount).dialogsLoadOffsetAccess = user.access_hash;
                                    break;
                                }
                            }
                        }
                    }
                    UserConfig.getInstance(MessagesStorage.this.currentAccount).saveConfig(false);
                    MessagesController.getInstance(MessagesStorage.this.currentAccount).completeDialogsReset(messages_dialogs, i6, i2, i3, i4, i5, longSparseArray, longSparseArray2, message);
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public void putDialogPhotos(final int did, final photos_Photos photos) {
        if (photos != null) {
            if (!photos.photos.isEmpty()) {
                this.storageQueue.postRunnable(new Runnable() {
                    public void run() {
                        try {
                            SQLitePreparedStatement state = MessagesStorage.this.database.executeFast("REPLACE INTO user_photos VALUES(?, ?, ?)");
                            Iterator it = photos.photos.iterator();
                            while (it.hasNext()) {
                                Photo photo = (Photo) it.next();
                                if (!(photo instanceof TL_photoEmpty)) {
                                    state.requery();
                                    NativeByteBuffer data = new NativeByteBuffer(photo.getObjectSize());
                                    photo.serializeToStream(data);
                                    state.bindInteger(1, did);
                                    state.bindLong(2, photo.id);
                                    state.bindByteBuffer(3, data);
                                    state.step();
                                    data.reuse();
                                }
                            }
                            state.dispose();
                        } catch (Throwable e) {
                            FileLog.m3e(e);
                        }
                    }
                });
            }
        }
    }

    public void emptyMessagesMedia(final ArrayList<Integer> mids) {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    ArrayList<File> filesToDelete = new ArrayList();
                    final ArrayList<Message> messages = new ArrayList();
                    SQLiteCursor cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT data, mid, date, uid FROM messages WHERE mid IN (%s)", new Object[]{TextUtils.join(",", mids)}), new Object[0]);
                    while (cursor.next()) {
                        NativeByteBuffer data = cursor.byteBufferValue(0);
                        if (data != null) {
                            Message message = Message.TLdeserialize(data, data.readInt32(false), false);
                            message.readAttachPath(data, UserConfig.getInstance(MessagesStorage.this.currentAccount).clientUserId);
                            data.reuse();
                            if (message.media != null) {
                                if (message.media.document != null) {
                                    File file = FileLoader.getPathToAttach(message.media.document, true);
                                    if (file != null && file.toString().length() > 0) {
                                        filesToDelete.add(file);
                                    }
                                    file = FileLoader.getPathToAttach(message.media.document.thumb, true);
                                    if (file != null && file.toString().length() > 0) {
                                        filesToDelete.add(file);
                                    }
                                    message.media.document = new TL_documentEmpty();
                                } else if (message.media.photo != null) {
                                    Iterator it = message.media.photo.sizes.iterator();
                                    while (it.hasNext()) {
                                        File file2 = FileLoader.getPathToAttach((PhotoSize) it.next(), true);
                                        if (file2 != null && file2.toString().length() > 0) {
                                            filesToDelete.add(file2);
                                        }
                                    }
                                    message.media.photo = new TL_photoEmpty();
                                }
                                message.media.flags &= -2;
                                message.id = cursor.intValue(1);
                                message.date = cursor.intValue(2);
                                message.dialog_id = cursor.longValue(3);
                                messages.add(message);
                            }
                        }
                    }
                    cursor.dispose();
                    if (!messages.isEmpty()) {
                        SQLitePreparedStatement state = MessagesStorage.this.database.executeFast("REPLACE INTO messages VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, NULL, ?, ?)");
                        for (int a = 0; a < messages.size(); a++) {
                            Message message2 = (Message) messages.get(a);
                            NativeByteBuffer data2 = new NativeByteBuffer(message2.getObjectSize());
                            message2.serializeToStream(data2);
                            state.requery();
                            state.bindLong(1, (long) message2.id);
                            state.bindLong(2, message2.dialog_id);
                            state.bindInteger(3, MessageObject.getUnreadFlags(message2));
                            state.bindInteger(4, message2.send_state);
                            state.bindInteger(5, message2.date);
                            state.bindByteBuffer(6, data2);
                            state.bindInteger(7, MessageObject.isOut(message2));
                            state.bindInteger(8, message2.ttl);
                            if ((message2.flags & 1024) != 0) {
                                state.bindInteger(9, message2.views);
                            } else {
                                state.bindInteger(9, MessagesStorage.this.getMessageMediaType(message2));
                            }
                            state.bindInteger(10, 0);
                            state.bindInteger(11, message2.mentioned);
                            state.step();
                            data2.reuse();
                        }
                        state.dispose();
                        AndroidUtilities.runOnUIThread(new Runnable() {
                            public void run() {
                                for (int a = 0; a < messages.size(); a++) {
                                    NotificationCenter.getInstance(MessagesStorage.this.currentAccount).postNotificationName(NotificationCenter.updateMessageMedia, messages.get(a));
                                }
                            }
                        });
                    }
                    FileLoader.getInstance(MessagesStorage.this.currentAccount).deleteFiles(filesToDelete, 0);
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public void getNewTask(final ArrayList<Integer> oldTask, int channelId) {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    if (oldTask != null) {
                        String ids = TextUtils.join(",", oldTask);
                        MessagesStorage.this.database.executeFast(String.format(Locale.US, "DELETE FROM enc_tasks_v2 WHERE mid IN(%s)", new Object[]{ids})).stepThis().dispose();
                    }
                    int date = 0;
                    int channelId = -1;
                    ArrayList<Integer> arr = null;
                    SQLiteCursor cursor = MessagesStorage.this.database.queryFinalized("SELECT mid, date FROM enc_tasks_v2 WHERE date = (SELECT min(date) FROM enc_tasks_v2)", new Object[0]);
                    while (cursor.next()) {
                        long mid = cursor.longValue(0);
                        if (channelId == -1) {
                            channelId = (int) (mid >> 32);
                            if (channelId < 0) {
                                channelId = 0;
                            }
                        }
                        date = cursor.intValue(1);
                        if (arr == null) {
                            arr = new ArrayList();
                        }
                        arr.add(Integer.valueOf((int) mid));
                    }
                    cursor.dispose();
                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedDeleteTask(date, arr, channelId);
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public void markMentionMessageAsRead(int messageId, int channelId, long did) {
        final int i = messageId;
        final int i2 = channelId;
        final long j = did;
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    long mid = (long) i;
                    if (i2 != 0) {
                        mid |= ((long) i2) << 32;
                    }
                    MessagesStorage.this.database.executeFast(String.format(Locale.US, "UPDATE messages SET read_state = read_state | 2 WHERE mid = %d", new Object[]{Long.valueOf(mid)})).stepThis().dispose();
                    SQLiteCursor cursor = MessagesStorage.this.database;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("SELECT unread_count_i FROM dialogs WHERE did = ");
                    stringBuilder.append(j);
                    cursor = cursor.queryFinalized(stringBuilder.toString(), new Object[0]);
                    int old_mentions_count = 0;
                    if (cursor.next()) {
                        old_mentions_count = Math.max(0, cursor.intValue(0) - 1);
                    }
                    cursor.dispose();
                    MessagesStorage.this.database.executeFast(String.format(Locale.US, "UPDATE dialogs SET unread_count_i = %d WHERE did = %d", new Object[]{Integer.valueOf(old_mentions_count), Long.valueOf(j)})).stepThis().dispose();
                    LongSparseArray<Integer> sparseArray = new LongSparseArray(1);
                    sparseArray.put(j, Integer.valueOf(old_mentions_count));
                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processDialogsUpdateRead(null, sparseArray);
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public void markMessageAsMention(final long mid) {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    MessagesStorage.this.database.executeFast(String.format(Locale.US, "UPDATE messages SET mention = 1, read_state = read_state & ~2 WHERE mid = %d", new Object[]{Long.valueOf(mid)})).stepThis().dispose();
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public void resetMentionsCount(final long did, final int count) {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    if (count == 0) {
                        MessagesStorage.this.database.executeFast(String.format(Locale.US, "UPDATE messages SET read_state = read_state | 2 WHERE uid = %d AND mention = 1 AND read_state IN(0, 1)", new Object[]{Long.valueOf(did)})).stepThis().dispose();
                    }
                    MessagesStorage.this.database.executeFast(String.format(Locale.US, "UPDATE dialogs SET unread_count_i = %d WHERE did = %d", new Object[]{Integer.valueOf(count), Long.valueOf(did)})).stepThis().dispose();
                    LongSparseArray<Integer> sparseArray = new LongSparseArray(1);
                    sparseArray.put(did, Integer.valueOf(count));
                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processDialogsUpdateRead(null, sparseArray);
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public void createTaskForMid(int messageId, int channelId, int time, int readTime, int ttl, boolean inner) {
        final int i = time;
        final int i2 = readTime;
        final int i3 = ttl;
        final int i4 = messageId;
        final int i5 = channelId;
        final boolean z = inner;
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    int minDate = (i > i2 ? i : i2) + i3;
                    SparseArray<ArrayList<Long>> messages = new SparseArray();
                    final ArrayList<Long> midsArray = new ArrayList();
                    long mid = (long) i4;
                    if (i5 != 0) {
                        mid |= ((long) i5) << 32;
                    }
                    midsArray.add(Long.valueOf(mid));
                    messages.put(minDate, midsArray);
                    AndroidUtilities.runOnUIThread(new Runnable() {
                        public void run() {
                            if (!z) {
                                MessagesStorage.this.markMessagesContentAsRead(midsArray, 0);
                            }
                            NotificationCenter.getInstance(MessagesStorage.this.currentAccount).postNotificationName(NotificationCenter.messagesReadContent, midsArray);
                        }
                    });
                    SQLitePreparedStatement state = MessagesStorage.this.database.executeFast("REPLACE INTO enc_tasks_v2 VALUES(?, ?)");
                    for (int a = 0; a < messages.size(); a++) {
                        int key = messages.keyAt(a);
                        ArrayList<Long> arr = (ArrayList) messages.get(key);
                        for (int b = 0; b < arr.size(); b++) {
                            state.requery();
                            state.bindLong(1, ((Long) arr.get(b)).longValue());
                            state.bindInteger(2, key);
                            state.step();
                        }
                    }
                    state.dispose();
                    MessagesStorage.this.database.executeFast(String.format(Locale.US, "UPDATE messages SET ttl = 0 WHERE mid = %d", new Object[]{Long.valueOf(mid)})).stepThis().dispose();
                    MessagesController.getInstance(MessagesStorage.this.currentAccount).didAddedNewTask(minDate, messages);
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public void createTaskForSecretChat(int chatId, int time, int readTime, int isOut, ArrayList<Long> random_ids) {
        final ArrayList<Long> arrayList = random_ids;
        final int i = chatId;
        final int i2 = isOut;
        final int i3 = time;
        final int i4 = readTime;
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                int minDate = ConnectionsManager.DEFAULT_DATACENTER_ID;
                try {
                    SQLiteCursor cursor;
                    SparseArray<ArrayList<Long>> messages = new SparseArray();
                    final ArrayList<Long> midsArray = new ArrayList();
                    StringBuilder mids = new StringBuilder();
                    if (arrayList == null) {
                        cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT mid, ttl FROM messages WHERE uid = %d AND out = %d AND read_state != 0 AND ttl > 0 AND date <= %d AND send_state = 0 AND media != 1", new Object[]{Long.valueOf(((long) i) << 32), Integer.valueOf(i2), Integer.valueOf(i3)}), new Object[0]);
                    } else {
                        String ids = TextUtils.join(",", arrayList);
                        cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT m.mid, m.ttl FROM messages as m INNER JOIN randoms as r ON m.mid = r.mid WHERE r.random_id IN (%s)", new Object[]{ids}), new Object[0]);
                    }
                    while (cursor.next()) {
                        int ttl = cursor.intValue(1);
                        long mid = (long) cursor.intValue(0);
                        if (arrayList != null) {
                            midsArray.add(Long.valueOf(mid));
                        }
                        if (ttl > 0) {
                            int date = (i3 > i4 ? i3 : i4) + ttl;
                            minDate = Math.min(minDate, date);
                            ArrayList<Long> arr = (ArrayList) messages.get(date);
                            if (arr == null) {
                                arr = new ArrayList();
                                messages.put(date, arr);
                            }
                            if (mids.length() != 0) {
                                mids.append(",");
                            }
                            mids.append(mid);
                            arr.add(Long.valueOf(mid));
                        }
                    }
                    cursor.dispose();
                    if (arrayList != null) {
                        AndroidUtilities.runOnUIThread(new Runnable() {
                            public void run() {
                                MessagesStorage.this.markMessagesContentAsRead(midsArray, 0);
                                NotificationCenter.getInstance(MessagesStorage.this.currentAccount).postNotificationName(NotificationCenter.messagesReadContent, midsArray);
                            }
                        });
                    }
                    if (messages.size() != 0) {
                        MessagesStorage.this.database.beginTransaction();
                        SQLitePreparedStatement state = MessagesStorage.this.database.executeFast("REPLACE INTO enc_tasks_v2 VALUES(?, ?)");
                        for (int a = 0; a < messages.size(); a++) {
                            int key = messages.keyAt(a);
                            ArrayList<Long> arr2 = (ArrayList) messages.get(key);
                            for (int b = 0; b < arr2.size(); b++) {
                                state.requery();
                                state.bindLong(1, ((Long) arr2.get(b)).longValue());
                                state.bindInteger(2, key);
                                state.step();
                            }
                        }
                        state.dispose();
                        MessagesStorage.this.database.commitTransaction();
                        MessagesStorage.this.database.executeFast(String.format(Locale.US, "UPDATE messages SET ttl = 0 WHERE mid IN(%s)", new Object[]{mids.toString()})).stepThis().dispose();
                        MessagesController.getInstance(MessagesStorage.this.currentAccount).didAddedNewTask(minDate, messages);
                    }
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    private void updateDialogsWithReadMessagesInternal(ArrayList<Integer> messages, SparseLongArray inbox, SparseLongArray outbox, ArrayList<Long> mentions) {
        MessagesStorage messagesStorage = this;
        SparseLongArray sparseLongArray = inbox;
        SparseLongArray sparseLongArray2 = outbox;
        ArrayList<Long> arrayList = mentions;
        try {
            int i;
            int a;
            LongSparseArray<Integer> dialogsToUpdate = new LongSparseArray();
            LongSparseArray<Integer> dialogsToUpdateMentions = new LongSparseArray();
            ArrayList<Integer> channelMentionsToReload = new ArrayList();
            int i2 = 0;
            int i3 = 1;
            String ids;
            SQLiteCursor cursor;
            long did;
            if (isEmpty((List) messages)) {
                if (!isEmpty(inbox)) {
                    int b = 0;
                    while (b < inbox.size()) {
                        i2 = sparseLongArray.keyAt(b);
                        long messageId = sparseLongArray.get(i2);
                        SQLiteCursor cursor2 = messagesStorage.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(mid) FROM messages WHERE uid = %d AND mid > %d AND read_state IN(0,2) AND out = 0", new Object[]{Integer.valueOf(i2), Long.valueOf(messageId)}), new Object[0]);
                        if (cursor2.next()) {
                            dialogsToUpdate.put((long) i2, Integer.valueOf(cursor2.intValue(0)));
                        }
                        cursor2.dispose();
                        SQLitePreparedStatement state = messagesStorage.database.executeFast("UPDATE dialogs SET inbox_max = max((SELECT inbox_max FROM dialogs WHERE did = ?), ?) WHERE did = ?");
                        state.requery();
                        state.bindLong(1, (long) i2);
                        state.bindInteger(2, (int) messageId);
                        state.bindLong(3, (long) i2);
                        state.step();
                        state.dispose();
                        b++;
                        sparseLongArray = inbox;
                    }
                }
                if (isEmpty((List) mentions)) {
                    i = 0;
                } else {
                    ArrayList<Long> notFoundMentions = new ArrayList(arrayList);
                    ids = TextUtils.join(",", arrayList);
                    cursor = messagesStorage.database.queryFinalized(String.format(Locale.US, "SELECT uid, read_state, out, mention, mid FROM messages WHERE mid IN(%s)", new Object[]{ids}), new Object[0]);
                    while (cursor.next()) {
                        did = cursor.longValue(0);
                        notFoundMentions.remove(Long.valueOf(cursor.longValue(4)));
                        if (cursor.intValue(1) < 2 && cursor.intValue(2) == 0 && cursor.intValue(3) == 1) {
                            Integer unread_count = (Integer) dialogsToUpdateMentions.get(did);
                            if (unread_count == null) {
                                SQLiteDatabase sQLiteDatabase = messagesStorage.database;
                                StringBuilder stringBuilder = new StringBuilder();
                                stringBuilder.append("SELECT unread_count_i FROM dialogs WHERE did = ");
                                stringBuilder.append(did);
                                SQLiteCursor cursor22 = sQLiteDatabase.queryFinalized(stringBuilder.toString(), new Object[0]);
                                i = 0;
                                if (cursor22.next()) {
                                    i = cursor22.intValue(0);
                                }
                                cursor22.dispose();
                                dialogsToUpdateMentions.put(did, Integer.valueOf(Math.max(0, i - 1)));
                            } else {
                                dialogsToUpdateMentions.put(did, Integer.valueOf(Math.max(0, unread_count.intValue() - 1)));
                                arrayList = mentions;
                            }
                        }
                        arrayList = mentions;
                    }
                    i = 0;
                    cursor.dispose();
                    for (a = 0; a < notFoundMentions.size(); a++) {
                        i2 = (int) (((Long) notFoundMentions.get(a)).longValue() >> 32);
                        if (i2 > 0 && !channelMentionsToReload.contains(Integer.valueOf(i2))) {
                            channelMentionsToReload.add(Integer.valueOf(i2));
                        }
                    }
                }
                if (!isEmpty(outbox)) {
                    for (int b2 = i; b2 < outbox.size(); b2++) {
                        a = sparseLongArray2.keyAt(b2);
                        long messageId2 = sparseLongArray2.get(a);
                        SQLitePreparedStatement state2 = messagesStorage.database.executeFast("UPDATE dialogs SET outbox_max = max((SELECT outbox_max FROM dialogs WHERE did = ?), ?) WHERE did = ?");
                        state2.requery();
                        state2.bindLong(1, (long) a);
                        state2.bindInteger(2, (int) messageId2);
                        state2.bindLong(3, (long) a);
                        state2.step();
                        state2.dispose();
                    }
                }
            } else {
                ids = TextUtils.join(",", messages);
                cursor = messagesStorage.database.queryFinalized(String.format(Locale.US, "SELECT uid, read_state, out FROM messages WHERE mid IN(%s)", new Object[]{ids}), new Object[0]);
                while (cursor.next()) {
                    String ids2;
                    ArrayList<Integer> arrayList2;
                    if (cursor.intValue(2) == 0) {
                        if (cursor.intValue(i3) == 0) {
                            did = cursor.longValue(i2);
                            Integer currentCount = (Integer) dialogsToUpdate.get(did);
                            if (currentCount == null) {
                                ids2 = ids;
                                dialogsToUpdate.put(did, Integer.valueOf(1));
                            } else {
                                ids2 = ids;
                                dialogsToUpdate.put(did, Integer.valueOf(currentCount.intValue() + 1));
                            }
                            ids = ids2;
                            i2 = 0;
                            i3 = 1;
                            arrayList2 = messages;
                        }
                    }
                    ids2 = ids;
                    ids = ids2;
                    i2 = 0;
                    i3 = 1;
                    arrayList2 = messages;
                }
                cursor.dispose();
                i = 0;
            }
            if (dialogsToUpdate.size() > 0 || dialogsToUpdateMentions.size() > 0) {
                SQLitePreparedStatement state3;
                messagesStorage.database.beginTransaction();
                if (dialogsToUpdate.size() > 0) {
                    state3 = messagesStorage.database.executeFast("UPDATE dialogs SET unread_count = ? WHERE did = ?");
                    for (a = i; a < dialogsToUpdate.size(); a++) {
                        state3.requery();
                        state3.bindInteger(1, ((Integer) dialogsToUpdate.valueAt(a)).intValue());
                        state3.bindLong(2, dialogsToUpdate.keyAt(a));
                        state3.step();
                    }
                    state3.dispose();
                }
                if (dialogsToUpdateMentions.size() > 0) {
                    state3 = messagesStorage.database.executeFast("UPDATE dialogs SET unread_count_i = ? WHERE did = ?");
                    while (true) {
                        a = i;
                        if (a >= dialogsToUpdateMentions.size()) {
                            break;
                        }
                        state3.requery();
                        state3.bindInteger(1, ((Integer) dialogsToUpdateMentions.valueAt(a)).intValue());
                        state3.bindLong(2, dialogsToUpdateMentions.keyAt(a));
                        state3.step();
                        i = a + 1;
                    }
                    state3.dispose();
                }
                messagesStorage.database.commitTransaction();
            }
            MessagesController.getInstance(messagesStorage.currentAccount).processDialogsUpdateRead(dialogsToUpdate, dialogsToUpdateMentions);
            if (!channelMentionsToReload.isEmpty()) {
                MessagesController.getInstance(messagesStorage.currentAccount).reloadMentionsCountForChannels(channelMentionsToReload);
            }
        } catch (Throwable e) {
            FileLog.m3e(e);
        }
    }

    private static boolean isEmpty(SparseArray<?> array) {
        if (array != null) {
            if (array.size() != 0) {
                return false;
            }
        }
        return true;
    }

    private static boolean isEmpty(SparseLongArray array) {
        if (array != null) {
            if (array.size() != 0) {
                return false;
            }
        }
        return true;
    }

    private static boolean isEmpty(List<?> array) {
        if (array != null) {
            if (!array.isEmpty()) {
                return false;
            }
        }
        return true;
    }

    private static boolean isEmpty(SparseIntArray array) {
        if (array != null) {
            if (array.size() != 0) {
                return false;
            }
        }
        return true;
    }

    private static boolean isEmpty(LongSparseArray<?> array) {
        if (array != null) {
            if (array.size() != 0) {
                return false;
            }
        }
        return true;
    }

    public void updateDialogsWithReadMessages(final SparseLongArray inbox, final SparseLongArray outbox, final ArrayList<Long> mentions, boolean useQueue) {
        if (!isEmpty(inbox) || !isEmpty((List) mentions)) {
            if (useQueue) {
                this.storageQueue.postRunnable(new Runnable() {
                    public void run() {
                        MessagesStorage.this.updateDialogsWithReadMessagesInternal(null, inbox, outbox, mentions);
                    }
                });
            } else {
                updateDialogsWithReadMessagesInternal(null, inbox, outbox, mentions);
            }
        }
    }

    public void updateChatParticipants(final ChatParticipants participants) {
        if (participants != null) {
            this.storageQueue.postRunnable(new Runnable() {
                public void run() {
                    try {
                        SQLiteCursor cursor = MessagesStorage.this.database;
                        StringBuilder stringBuilder = new StringBuilder();
                        stringBuilder.append("SELECT info, pinned FROM chat_settings_v2 WHERE uid = ");
                        stringBuilder.append(participants.chat_id);
                        cursor = cursor.queryFinalized(stringBuilder.toString(), new Object[0]);
                        ChatFull info = null;
                        ArrayList<User> loadedUsers = new ArrayList();
                        if (cursor.next()) {
                            NativeByteBuffer data = cursor.byteBufferValue(0);
                            if (data != null) {
                                info = ChatFull.TLdeserialize(data, data.readInt32(false), false);
                                data.reuse();
                                info.pinned_msg_id = cursor.intValue(1);
                            }
                        }
                        cursor.dispose();
                        if (info instanceof TL_chatFull) {
                            info.participants = participants;
                            final ChatFull finalInfo = info;
                            AndroidUtilities.runOnUIThread(new Runnable() {
                                public void run() {
                                    NotificationCenter.getInstance(MessagesStorage.this.currentAccount).postNotificationName(NotificationCenter.chatInfoDidLoaded, finalInfo, Integer.valueOf(0), Boolean.valueOf(false), null);
                                }
                            });
                            SQLitePreparedStatement state = MessagesStorage.this.database.executeFast("REPLACE INTO chat_settings_v2 VALUES(?, ?, ?)");
                            NativeByteBuffer data2 = new NativeByteBuffer(info.getObjectSize());
                            info.serializeToStream(data2);
                            state.bindInteger(1, info.id);
                            state.bindByteBuffer(2, data2);
                            state.bindInteger(3, info.pinned_msg_id);
                            state.step();
                            state.dispose();
                            data2.reuse();
                        }
                    } catch (Throwable e) {
                        FileLog.m3e(e);
                    }
                }
            });
        }
    }

    public void loadChannelAdmins(final int chatId) {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    SQLiteCursor cursor = MessagesStorage.this.database;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("SELECT uid FROM channel_admins WHERE did = ");
                    stringBuilder.append(chatId);
                    cursor = cursor.queryFinalized(stringBuilder.toString(), new Object[0]);
                    ArrayList<Integer> ids = new ArrayList();
                    while (cursor.next()) {
                        ids.add(Integer.valueOf(cursor.intValue(0)));
                    }
                    cursor.dispose();
                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedChannelAdmins(ids, chatId, true);
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public void putChannelAdmins(final int chatId, final ArrayList<Integer> ids) {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    SQLiteDatabase access$000 = MessagesStorage.this.database;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("DELETE FROM channel_admins WHERE did = ");
                    stringBuilder.append(chatId);
                    access$000.executeFast(stringBuilder.toString()).stepThis().dispose();
                    MessagesStorage.this.database.beginTransaction();
                    SQLitePreparedStatement state = MessagesStorage.this.database.executeFast("REPLACE INTO channel_admins VALUES(?, ?)");
                    int date = (int) (System.currentTimeMillis() / 1000);
                    for (int a = 0; a < ids.size(); a++) {
                        state.requery();
                        state.bindInteger(1, chatId);
                        state.bindInteger(2, ((Integer) ids.get(a)).intValue());
                        state.step();
                    }
                    state.dispose();
                    MessagesStorage.this.database.commitTransaction();
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public void updateChannelUsers(final int channel_id, final ArrayList<ChannelParticipant> participants) {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    long did = (long) (-channel_id);
                    SQLiteDatabase access$000 = MessagesStorage.this.database;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("DELETE FROM channel_users_v2 WHERE did = ");
                    stringBuilder.append(did);
                    access$000.executeFast(stringBuilder.toString()).stepThis().dispose();
                    MessagesStorage.this.database.beginTransaction();
                    SQLitePreparedStatement state = MessagesStorage.this.database.executeFast("REPLACE INTO channel_users_v2 VALUES(?, ?, ?, ?)");
                    int date = (int) (System.currentTimeMillis() / 1000);
                    for (int a = 0; a < participants.size(); a++) {
                        ChannelParticipant participant = (ChannelParticipant) participants.get(a);
                        state.requery();
                        state.bindLong(1, did);
                        state.bindInteger(2, participant.user_id);
                        state.bindInteger(3, date);
                        NativeByteBuffer data = new NativeByteBuffer(participant.getObjectSize());
                        participant.serializeToStream(data);
                        state.bindByteBuffer(4, data);
                        data.reuse();
                        state.step();
                        date--;
                    }
                    state.dispose();
                    MessagesStorage.this.database.commitTransaction();
                    MessagesStorage.this.loadChatInfo(channel_id, null, false, true);
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public void saveBotCache(final String key, final TLObject result) {
        if (result != null) {
            if (!TextUtils.isEmpty(key)) {
                this.storageQueue.postRunnable(new Runnable() {
                    public void run() {
                        try {
                            int currentDate = ConnectionsManager.getInstance(MessagesStorage.this.currentAccount).getCurrentTime();
                            if (result instanceof TL_messages_botCallbackAnswer) {
                                currentDate += ((TL_messages_botCallbackAnswer) result).cache_time;
                            } else if (result instanceof TL_messages_botResults) {
                                currentDate += ((TL_messages_botResults) result).cache_time;
                            }
                            SQLitePreparedStatement state = MessagesStorage.this.database.executeFast("REPLACE INTO botcache VALUES(?, ?, ?)");
                            NativeByteBuffer data = new NativeByteBuffer(result.getObjectSize());
                            result.serializeToStream(data);
                            state.bindString(1, key);
                            state.bindInteger(2, currentDate);
                            state.bindByteBuffer(3, data);
                            state.step();
                            state.dispose();
                            data.reuse();
                        } catch (Throwable e) {
                            FileLog.m3e(e);
                        }
                    }
                });
            }
        }
    }

    public void getBotCache(final String key, final RequestDelegate requestDelegate) {
        if (key != null) {
            if (requestDelegate != null) {
                final int currentDate = ConnectionsManager.getInstance(this.currentAccount).getCurrentTime();
                this.storageQueue.postRunnable(new Runnable() {
                    public void run() {
                        TLObject result = null;
                        try {
                            SQLiteDatabase access$000 = MessagesStorage.this.database;
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.append("DELETE FROM botcache WHERE date < ");
                            stringBuilder.append(currentDate);
                            access$000.executeFast(stringBuilder.toString()).stepThis().dispose();
                            SQLiteCursor cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM botcache WHERE id = '%s'", new Object[]{key}), new Object[0]);
                            if (cursor.next()) {
                                try {
                                    NativeByteBuffer data = cursor.byteBufferValue(0);
                                    if (data != null) {
                                        int constructor = data.readInt32(false);
                                        if (constructor == TL_messages_botCallbackAnswer.constructor) {
                                            result = TL_messages_botCallbackAnswer.TLdeserialize(data, constructor, false);
                                        } else {
                                            result = messages_BotResults.TLdeserialize(data, constructor, false);
                                        }
                                        data.reuse();
                                    }
                                } catch (Throwable e) {
                                    FileLog.m3e(e);
                                }
                            }
                            cursor.dispose();
                        } catch (Throwable e2) {
                            FileLog.m3e(e2);
                        } catch (Throwable th) {
                            requestDelegate.run(result, null);
                        }
                        requestDelegate.run(result, null);
                    }
                });
            }
        }
    }

    public void updateChatInfo(final ChatFull info, final boolean ifExist) {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    if (ifExist) {
                        SQLiteCursor cursor = MessagesStorage.this.database;
                        StringBuilder stringBuilder = new StringBuilder();
                        stringBuilder.append("SELECT uid FROM chat_settings_v2 WHERE uid = ");
                        stringBuilder.append(info.id);
                        cursor = cursor.queryFinalized(stringBuilder.toString(), new Object[0]);
                        boolean exist = cursor.next();
                        cursor.dispose();
                        if (!exist) {
                            return;
                        }
                    }
                    SQLitePreparedStatement state = MessagesStorage.this.database.executeFast("REPLACE INTO chat_settings_v2 VALUES(?, ?, ?)");
                    NativeByteBuffer data = new NativeByteBuffer(info.getObjectSize());
                    info.serializeToStream(data);
                    state.bindInteger(1, info.id);
                    state.bindByteBuffer(2, data);
                    state.bindInteger(3, info.pinned_msg_id);
                    state.step();
                    state.dispose();
                    data.reuse();
                    if (info instanceof TL_channelFull) {
                        SQLiteCursor cursor2 = MessagesStorage.this.database;
                        StringBuilder stringBuilder2 = new StringBuilder();
                        stringBuilder2.append("SELECT date, pts, last_mid, inbox_max, outbox_max, pinned, unread_count_i FROM dialogs WHERE did = ");
                        stringBuilder2.append(-info.id);
                        cursor2 = cursor2.queryFinalized(stringBuilder2.toString(), new Object[0]);
                        if (cursor2.next()) {
                            int inbox_max = cursor2.intValue(3);
                            if (inbox_max < info.read_inbox_max_id) {
                                int dialog_date = cursor2.intValue(0);
                                int pts = cursor2.intValue(1);
                                long last_mid = cursor2.longValue(2);
                                int outbox_max = cursor2.intValue(4);
                                int pinned = cursor2.intValue(5);
                                int mentions = cursor2.intValue(6);
                                state = MessagesStorage.this.database.executeFast("REPLACE INTO dialogs VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                                state.bindLong(1, (long) (-info.id));
                                state.bindInteger(2, dialog_date);
                                state.bindInteger(3, info.unread_count);
                                state.bindLong(4, last_mid);
                                state.bindInteger(5, info.read_inbox_max_id);
                                state.bindInteger(6, Math.max(outbox_max, info.read_outbox_max_id));
                                state.bindLong(7, 0);
                                state.bindInteger(8, mentions);
                                state.bindInteger(9, pts);
                                state.bindInteger(10, 0);
                                state.bindInteger(11, pinned);
                                state.step();
                                state.dispose();
                            }
                        }
                        cursor2.dispose();
                    }
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public void updateChannelPinnedMessage(final int channelId, final int messageId) {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    SQLiteCursor cursor = MessagesStorage.this.database;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("SELECT info, pinned FROM chat_settings_v2 WHERE uid = ");
                    stringBuilder.append(channelId);
                    cursor = cursor.queryFinalized(stringBuilder.toString(), new Object[0]);
                    ChatFull info = null;
                    ArrayList<User> loadedUsers = new ArrayList();
                    if (cursor.next()) {
                        NativeByteBuffer data = cursor.byteBufferValue(0);
                        if (data != null) {
                            info = ChatFull.TLdeserialize(data, data.readInt32(false), false);
                            data.reuse();
                            info.pinned_msg_id = cursor.intValue(1);
                        }
                    }
                    cursor.dispose();
                    if (info instanceof TL_channelFull) {
                        info.pinned_msg_id = messageId;
                        info.flags |= 32;
                        final ChatFull finalInfo = info;
                        AndroidUtilities.runOnUIThread(new Runnable() {
                            public void run() {
                                NotificationCenter.getInstance(MessagesStorage.this.currentAccount).postNotificationName(NotificationCenter.chatInfoDidLoaded, finalInfo, Integer.valueOf(0), Boolean.valueOf(false), null);
                            }
                        });
                        SQLitePreparedStatement state = MessagesStorage.this.database.executeFast("REPLACE INTO chat_settings_v2 VALUES(?, ?, ?)");
                        NativeByteBuffer data2 = new NativeByteBuffer(info.getObjectSize());
                        info.serializeToStream(data2);
                        state.bindInteger(1, channelId);
                        state.bindByteBuffer(2, data2);
                        state.bindInteger(3, info.pinned_msg_id);
                        state.step();
                        state.dispose();
                        data2.reuse();
                    }
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public void updateChatInfo(int chat_id, int user_id, int what, int invited_id, int version) {
        final int i = chat_id;
        final int i2 = what;
        final int i3 = user_id;
        final int i4 = invited_id;
        final int i5 = version;
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    SQLiteCursor cursor = MessagesStorage.this.database;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("SELECT info, pinned FROM chat_settings_v2 WHERE uid = ");
                    stringBuilder.append(i);
                    int a = 0;
                    cursor = cursor.queryFinalized(stringBuilder.toString(), new Object[0]);
                    ChatFull info = null;
                    ArrayList<User> loadedUsers = new ArrayList();
                    if (cursor.next()) {
                        NativeByteBuffer data = cursor.byteBufferValue(0);
                        if (data != null) {
                            info = ChatFull.TLdeserialize(data, data.readInt32(false), false);
                            data.reuse();
                            info.pinned_msg_id = cursor.intValue(1);
                        }
                    }
                    cursor.dispose();
                    if (info instanceof TL_chatFull) {
                        if (i2 == 1) {
                            while (a < info.participants.participants.size()) {
                                if (((ChatParticipant) info.participants.participants.get(a)).user_id == i3) {
                                    info.participants.participants.remove(a);
                                    break;
                                }
                                a++;
                            }
                        } else if (i2 == 0) {
                            Iterator it = info.participants.participants.iterator();
                            while (it.hasNext()) {
                                if (((ChatParticipant) it.next()).user_id == i3) {
                                    return;
                                }
                            }
                            a = new TL_chatParticipant();
                            a.user_id = i3;
                            a.inviter_id = i4;
                            a.date = ConnectionsManager.getInstance(MessagesStorage.this.currentAccount).getCurrentTime();
                            info.participants.participants.add(a);
                        } else if (i2 == 2) {
                            while (a < info.participants.participants.size()) {
                                ChatParticipant participant = (ChatParticipant) info.participants.participants.get(a);
                                if (participant.user_id == i3) {
                                    ChatParticipant newParticipant;
                                    if (i4 == 1) {
                                        newParticipant = new TL_chatParticipantAdmin();
                                        newParticipant.user_id = participant.user_id;
                                        newParticipant.date = participant.date;
                                        newParticipant.inviter_id = participant.inviter_id;
                                    } else {
                                        newParticipant = new TL_chatParticipant();
                                        newParticipant.user_id = participant.user_id;
                                        newParticipant.date = participant.date;
                                        newParticipant.inviter_id = participant.inviter_id;
                                    }
                                    info.participants.participants.set(a, newParticipant);
                                } else {
                                    a++;
                                }
                            }
                        }
                        info.participants.version = i5;
                        final ChatFull finalInfo = info;
                        AndroidUtilities.runOnUIThread(new Runnable() {
                            public void run() {
                                NotificationCenter.getInstance(MessagesStorage.this.currentAccount).postNotificationName(NotificationCenter.chatInfoDidLoaded, finalInfo, Integer.valueOf(0), Boolean.valueOf(false), null);
                            }
                        });
                        SQLitePreparedStatement state = MessagesStorage.this.database.executeFast("REPLACE INTO chat_settings_v2 VALUES(?, ?, ?)");
                        NativeByteBuffer data2 = new NativeByteBuffer(info.getObjectSize());
                        info.serializeToStream(data2);
                        state.bindInteger(1, i);
                        state.bindByteBuffer(2, data2);
                        state.bindInteger(3, info.pinned_msg_id);
                        state.step();
                        state.dispose();
                        data2.reuse();
                    }
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public boolean isMigratedChat(final int chat_id) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final boolean[] result = new boolean[1];
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                /* JADX: method processing error */
/*
Error: jadx.core.utils.exceptions.JadxRuntimeException: Can't find block by offset: 0x006d in list []
	at jadx.core.utils.BlockUtils.getBlockByOffset(BlockUtils.java:43)
	at jadx.core.dex.instructions.IfNode.initBlocks(IfNode.java:60)
	at jadx.core.dex.visitors.blocksmaker.BlockFinish.initBlocksInIfNodes(BlockFinish.java:48)
	at jadx.core.dex.visitors.blocksmaker.BlockFinish.visit(BlockFinish.java:33)
	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:31)
	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:17)
	at jadx.core.dex.visitors.DepthTraversal.visit(DepthTraversal.java:14)
	at jadx.core.ProcessClass.process(ProcessClass.java:34)
	at jadx.core.ProcessClass.processDependencies(ProcessClass.java:60)
	at jadx.core.ProcessClass.process(ProcessClass.java:39)
	at jadx.api.JadxDecompiler.processClass(JadxDecompiler.java:282)
	at jadx.api.JavaClass.decompile(JavaClass.java:62)
	at jadx.api.JadxDecompiler.lambda$appendSourcesSave$0(JadxDecompiler.java:200)
*/
                /*
                r6 = this;
                r0 = org.telegram.messenger.MessagesStorage.this;	 Catch:{ Exception -> 0x0060, all -> 0x005e }
                r0 = r0.database;	 Catch:{ Exception -> 0x0060, all -> 0x005e }
                r1 = new java.lang.StringBuilder;	 Catch:{ Exception -> 0x0060, all -> 0x005e }
                r1.<init>();	 Catch:{ Exception -> 0x0060, all -> 0x005e }
                r2 = "SELECT info FROM chat_settings_v2 WHERE uid = ";	 Catch:{ Exception -> 0x0060, all -> 0x005e }
                r1.append(r2);	 Catch:{ Exception -> 0x0060, all -> 0x005e }
                r2 = r5;	 Catch:{ Exception -> 0x0060, all -> 0x005e }
                r1.append(r2);	 Catch:{ Exception -> 0x0060, all -> 0x005e }
                r1 = r1.toString();	 Catch:{ Exception -> 0x0060, all -> 0x005e }
                r2 = 0;	 Catch:{ Exception -> 0x0060, all -> 0x005e }
                r3 = new java.lang.Object[r2];	 Catch:{ Exception -> 0x0060, all -> 0x005e }
                r0 = r0.queryFinalized(r1, r3);	 Catch:{ Exception -> 0x0060, all -> 0x005e }
                r1 = 0;	 Catch:{ Exception -> 0x0060, all -> 0x005e }
                r3 = new java.util.ArrayList;	 Catch:{ Exception -> 0x0060, all -> 0x005e }
                r3.<init>();	 Catch:{ Exception -> 0x0060, all -> 0x005e }
                r4 = r0.next();	 Catch:{ Exception -> 0x0060, all -> 0x005e }
                if (r4 == 0) goto L_0x003e;	 Catch:{ Exception -> 0x0060, all -> 0x005e }
            L_0x002c:
                r4 = r0.byteBufferValue(r2);	 Catch:{ Exception -> 0x0060, all -> 0x005e }
                if (r4 == 0) goto L_0x003e;	 Catch:{ Exception -> 0x0060, all -> 0x005e }
            L_0x0032:
                r5 = r4.readInt32(r2);	 Catch:{ Exception -> 0x0060, all -> 0x005e }
                r5 = org.telegram.tgnet.TLRPC.ChatFull.TLdeserialize(r4, r5, r2);	 Catch:{ Exception -> 0x0060, all -> 0x005e }
                r1 = r5;	 Catch:{ Exception -> 0x0060, all -> 0x005e }
                r4.reuse();	 Catch:{ Exception -> 0x0060, all -> 0x005e }
            L_0x003e:
                r0.dispose();	 Catch:{ Exception -> 0x0060, all -> 0x005e }
                r4 = r1;	 Catch:{ Exception -> 0x0060, all -> 0x005e }
                r5 = r1 instanceof org.telegram.tgnet.TLRPC.TL_channelFull;	 Catch:{ Exception -> 0x0060, all -> 0x005e }
                if (r5 == 0) goto L_0x004d;	 Catch:{ Exception -> 0x0060, all -> 0x005e }
            L_0x0047:
                r5 = r1.migrated_from_chat_id;	 Catch:{ Exception -> 0x0060, all -> 0x005e }
                if (r5 == 0) goto L_0x004d;	 Catch:{ Exception -> 0x0060, all -> 0x005e }
            L_0x004b:
                r5 = 1;	 Catch:{ Exception -> 0x0060, all -> 0x005e }
                goto L_0x004e;	 Catch:{ Exception -> 0x0060, all -> 0x005e }
            L_0x004d:
                r5 = r2;	 Catch:{ Exception -> 0x0060, all -> 0x005e }
            L_0x004e:
                r4[r2] = r5;	 Catch:{ Exception -> 0x0060, all -> 0x005e }
                r2 = r0;	 Catch:{ Exception -> 0x0060, all -> 0x005e }
                if (r2 == 0) goto L_0x0059;	 Catch:{ Exception -> 0x0060, all -> 0x005e }
            L_0x0054:
                r2 = r0;	 Catch:{ Exception -> 0x0060, all -> 0x005e }
                r2.countDown();	 Catch:{ Exception -> 0x0060, all -> 0x005e }
            L_0x0059:
                r0 = r0;
                if (r0 == 0) goto L_0x006d;
            L_0x005d:
                goto L_0x0068;
            L_0x005e:
                r0 = move-exception;
                goto L_0x006e;
            L_0x0060:
                r0 = move-exception;
                org.telegram.messenger.FileLog.m3e(r0);	 Catch:{ Exception -> 0x0060, all -> 0x005e }
                r0 = r0;
                if (r0 == 0) goto L_0x006d;
            L_0x0068:
                r0 = r0;
                r0.countDown();
            L_0x006d:
                return;
            L_0x006e:
                r1 = r0;
                if (r1 == 0) goto L_0x0077;
            L_0x0072:
                r1 = r0;
                r1.countDown();
            L_0x0077:
                throw r0;
                */
                throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.46.run():void");
            }
        });
        try {
            countDownLatch.await();
        } catch (Throwable e) {
            FileLog.m3e(e);
        }
        return result[0];
    }

    public void loadChatInfo(int chat_id, CountDownLatch countDownLatch, boolean force, boolean byChannelUsers) {
        final int i = chat_id;
        final CountDownLatch countDownLatch2 = countDownLatch;
        final boolean z = force;
        final boolean z2 = byChannelUsers;
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                ChatFull chatFull;
                ChatFull info;
                ArrayList<User> loadedUsers;
                AnonymousClass47 anonymousClass47 = this;
                MessageObject pinnedMessageObject = null;
                ChatFull info2 = null;
                ArrayList<User> loadedUsers2 = new ArrayList();
                try {
                    SQLiteCursor cursor = MessagesStorage.this.database;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("SELECT info, pinned FROM chat_settings_v2 WHERE uid = ");
                    stringBuilder.append(i);
                    cursor = cursor.queryFinalized(stringBuilder.toString(), new Object[0]);
                    if (cursor.next()) {
                        NativeByteBuffer data = cursor.byteBufferValue(0);
                        if (data != null) {
                            info2 = ChatFull.TLdeserialize(data, data.readInt32(false), false);
                            data.reuse();
                            info2.pinned_msg_id = cursor.intValue(1);
                        }
                    }
                    cursor.dispose();
                    int a;
                    if (info2 instanceof TL_chatFull) {
                        stringBuilder = new StringBuilder();
                        for (a = 0; a < info2.participants.participants.size(); a++) {
                            ChatParticipant c = (ChatParticipant) info2.participants.participants.get(a);
                            if (stringBuilder.length() != 0) {
                                stringBuilder.append(",");
                            }
                            stringBuilder.append(c.user_id);
                        }
                        if (stringBuilder.length() != 0) {
                            MessagesStorage.this.getUsersInternal(stringBuilder.toString(), loadedUsers2);
                        }
                    } else if (info2 instanceof TL_channelFull) {
                        SQLiteDatabase access$000 = MessagesStorage.this.database;
                        StringBuilder stringBuilder2 = new StringBuilder();
                        stringBuilder2.append("SELECT us.data, us.status, cu.data, cu.date FROM channel_users_v2 as cu LEFT JOIN users as us ON us.uid = cu.uid WHERE cu.did = ");
                        stringBuilder2.append(-i);
                        stringBuilder2.append(" ORDER BY cu.date DESC");
                        cursor = access$000.queryFinalized(stringBuilder2.toString(), new Object[0]);
                        info2.participants = new TL_chatParticipants();
                        while (cursor.next()) {
                            User user = null;
                            ChannelParticipant participant = null;
                            try {
                                NativeByteBuffer data2 = cursor.byteBufferValue(0);
                                if (data2 != null) {
                                    user = User.TLdeserialize(data2, data2.readInt32(false), false);
                                    data2.reuse();
                                }
                                data2 = cursor.byteBufferValue(2);
                                if (data2 != null) {
                                    participant = ChannelParticipant.TLdeserialize(data2, data2.readInt32(false), false);
                                    data2.reuse();
                                }
                                if (!(user == null || participant == null)) {
                                    if (user.status != null) {
                                        user.status.expires = cursor.intValue(1);
                                    }
                                    loadedUsers2.add(user);
                                    participant.date = cursor.intValue(3);
                                    TL_chatChannelParticipant chatChannelParticipant = new TL_chatChannelParticipant();
                                    chatChannelParticipant.user_id = participant.user_id;
                                    chatChannelParticipant.date = participant.date;
                                    chatChannelParticipant.inviter_id = participant.inviter_id;
                                    chatChannelParticipant.channelParticipant = participant;
                                    info2.participants.participants.add(chatChannelParticipant);
                                }
                            } catch (Throwable e) {
                                FileLog.m3e(e);
                            } catch (Throwable e2) {
                                chatFull = e2;
                                info = info2;
                                loadedUsers = loadedUsers2;
                            }
                        }
                        cursor.dispose();
                        stringBuilder = new StringBuilder();
                        for (a = 0; a < info2.bot_info.size(); a++) {
                            BotInfo botInfo = (BotInfo) info2.bot_info.get(a);
                            if (stringBuilder.length() != 0) {
                                stringBuilder.append(",");
                            }
                            stringBuilder.append(botInfo.user_id);
                        }
                        if (stringBuilder.length() != 0) {
                            MessagesStorage.this.getUsersInternal(stringBuilder.toString(), loadedUsers2);
                        }
                    }
                    if (countDownLatch2 != null) {
                        countDownLatch2.countDown();
                    }
                    if ((info2 instanceof TL_channelFull) && info2.pinned_msg_id != 0) {
                        pinnedMessageObject = DataQuery.getInstance(MessagesStorage.this.currentAccount).loadPinnedMessage(i, info2.pinned_msg_id, false);
                    }
                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processChatInfo(i, info2, loadedUsers2, true, z, z2, pinnedMessageObject);
                    if (countDownLatch2 != null) {
                        countDownLatch2.countDown();
                    }
                    loadedUsers = loadedUsers2;
                    return;
                } catch (Throwable e22) {
                    chatFull = info2;
                    FileLog.m3e(e22);
                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processChatInfo(i, chatFull, loadedUsers2, true, z, z2, null);
                    if (countDownLatch2 != null) {
                        countDownLatch2.countDown();
                    }
                    return;
                } catch (Throwable e222) {
                    loadedUsers = loadedUsers2;
                    info = chatFull;
                    chatFull = e222;
                }
                MessagesController.getInstance(MessagesStorage.this.currentAccount).processChatInfo(i, info, loadedUsers, true, z, z2, null);
                if (countDownLatch2 != null) {
                    countDownLatch2.countDown();
                }
                throw chatFull;
            }
        });
    }

    public void processPendingRead(long dialog_id, long maxPositiveId, long maxNegativeId, int max_date, boolean isChannel) {
        final long j = dialog_id;
        final long j2 = maxPositiveId;
        final boolean z = isChannel;
        final long j3 = maxNegativeId;
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                long currentMaxId = 0;
                int unreadCount = 0;
                long last_mid = 0;
                try {
                    SQLiteCursor cursor = MessagesStorage.this.database;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("SELECT unread_count, inbox_max, last_mid FROM dialogs WHERE did = ");
                    stringBuilder.append(j);
                    cursor = cursor.queryFinalized(stringBuilder.toString(), new Object[0]);
                    if (cursor.next()) {
                        unreadCount = cursor.intValue(0);
                        currentMaxId = (long) cursor.intValue(1);
                        last_mid = cursor.longValue(2);
                    }
                    cursor.dispose();
                    MessagesStorage.this.database.beginTransaction();
                    int lower_id = (int) j;
                    SQLitePreparedStatement state;
                    int updatedCount;
                    if (lower_id != 0) {
                        currentMaxId = Math.max(currentMaxId, (long) ((int) j2));
                        if (z) {
                            currentMaxId |= ((long) (-lower_id)) << 32;
                        }
                        state = MessagesStorage.this.database.executeFast("UPDATE messages SET read_state = read_state | 1 WHERE uid = ? AND mid <= ? AND read_state IN(0,2) AND out = 0");
                        state.requery();
                        state.bindLong(1, j);
                        state.bindLong(2, currentMaxId);
                        state.step();
                        state.dispose();
                        if (currentMaxId >= last_mid) {
                            unreadCount = 0;
                        } else {
                            updatedCount = 0;
                            cursor = MessagesStorage.this.database.queryFinalized("SELECT changes()", new Object[0]);
                            if (cursor.next()) {
                                updatedCount = cursor.intValue(0);
                            }
                            cursor.dispose();
                            unreadCount = Math.max(0, unreadCount - updatedCount);
                        }
                    } else {
                        currentMaxId = (long) ((int) j3);
                        state = MessagesStorage.this.database.executeFast("UPDATE messages SET read_state = read_state | 1 WHERE uid = ? AND mid >= ? AND read_state IN(0,2) AND out = 0");
                        state.requery();
                        state.bindLong(1, j);
                        state.bindLong(2, currentMaxId);
                        state.step();
                        state.dispose();
                        if (currentMaxId <= last_mid) {
                            unreadCount = 0;
                        } else {
                            updatedCount = 0;
                            cursor = MessagesStorage.this.database.queryFinalized("SELECT changes()", new Object[0]);
                            if (cursor.next()) {
                                updatedCount = cursor.intValue(0);
                            }
                            cursor.dispose();
                            unreadCount = Math.max(0, unreadCount - updatedCount);
                        }
                    }
                    SQLitePreparedStatement state2 = MessagesStorage.this.database.executeFast("UPDATE dialogs SET unread_count = ?, inbox_max = ? WHERE did = ?");
                    state2.requery();
                    state2.bindInteger(1, unreadCount);
                    state2.bindInteger(2, (int) currentMaxId);
                    state2.bindLong(3, j);
                    state2.step();
                    state2.dispose();
                    MessagesStorage.this.database.commitTransaction();
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public void putContacts(ArrayList<TL_contact> contacts, final boolean deleteAll) {
        if (!contacts.isEmpty()) {
            final ArrayList<TL_contact> contactsCopy = new ArrayList(contacts);
            this.storageQueue.postRunnable(new Runnable() {
                public void run() {
                    try {
                        if (deleteAll) {
                            MessagesStorage.this.database.executeFast("DELETE FROM contacts WHERE 1").stepThis().dispose();
                        }
                        MessagesStorage.this.database.beginTransaction();
                        SQLitePreparedStatement state = MessagesStorage.this.database.executeFast("REPLACE INTO contacts VALUES(?, ?)");
                        for (int a = 0; a < contactsCopy.size(); a++) {
                            TL_contact contact = (TL_contact) contactsCopy.get(a);
                            state.requery();
                            state.bindInteger(1, contact.user_id);
                            state.bindInteger(2, contact.mutual);
                            state.step();
                        }
                        state.dispose();
                        MessagesStorage.this.database.commitTransaction();
                    } catch (Throwable e) {
                        FileLog.m3e(e);
                    }
                }
            });
        }
    }

    public void deleteContacts(final ArrayList<Integer> uids) {
        if (uids != null) {
            if (!uids.isEmpty()) {
                this.storageQueue.postRunnable(new Runnable() {
                    public void run() {
                        try {
                            String ids = TextUtils.join(",", uids);
                            SQLiteDatabase access$000 = MessagesStorage.this.database;
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.append("DELETE FROM contacts WHERE uid IN(");
                            stringBuilder.append(ids);
                            stringBuilder.append(")");
                            access$000.executeFast(stringBuilder.toString()).stepThis().dispose();
                        } catch (Throwable e) {
                            FileLog.m3e(e);
                        }
                    }
                });
            }
        }
    }

    public void applyPhoneBookUpdates(final String adds, final String deletes) {
        if (adds.length() != 0 || deletes.length() != 0) {
            this.storageQueue.postRunnable(new Runnable() {
                public void run() {
                    try {
                        if (adds.length() != 0) {
                            MessagesStorage.this.database.executeFast(String.format(Locale.US, "UPDATE user_phones_v7 SET deleted = 0 WHERE sphone IN(%s)", new Object[]{adds})).stepThis().dispose();
                        }
                        if (deletes.length() != 0) {
                            MessagesStorage.this.database.executeFast(String.format(Locale.US, "UPDATE user_phones_v7 SET deleted = 1 WHERE sphone IN(%s)", new Object[]{deletes})).stepThis().dispose();
                        }
                    } catch (Throwable e) {
                        FileLog.m3e(e);
                    }
                }
            });
        }
    }

    public void putCachedPhoneBook(final HashMap<String, Contact> contactHashMap, final boolean migrate) {
        if (contactHashMap != null) {
            if (!contactHashMap.isEmpty() || migrate) {
                this.storageQueue.postRunnable(new Runnable() {
                    public void run() {
                        try {
                            if (BuildVars.LOGS_ENABLED) {
                                StringBuilder stringBuilder = new StringBuilder();
                                stringBuilder.append(MessagesStorage.this.currentAccount);
                                stringBuilder.append(" save contacts to db ");
                                stringBuilder.append(contactHashMap.size());
                                FileLog.m0d(stringBuilder.toString());
                            }
                            MessagesStorage.this.database.executeFast("DELETE FROM user_contacts_v7 WHERE 1").stepThis().dispose();
                            MessagesStorage.this.database.executeFast("DELETE FROM user_phones_v7 WHERE 1").stepThis().dispose();
                            MessagesStorage.this.database.beginTransaction();
                            SQLitePreparedStatement state = MessagesStorage.this.database.executeFast("REPLACE INTO user_contacts_v7 VALUES(?, ?, ?, ?, ?)");
                            SQLitePreparedStatement state2 = MessagesStorage.this.database.executeFast("REPLACE INTO user_phones_v7 VALUES(?, ?, ?, ?)");
                            Iterator it = contactHashMap.entrySet().iterator();
                            while (true) {
                                int a = 0;
                                if (!it.hasNext()) {
                                    break;
                                }
                                Contact contact = (Contact) ((Entry) it.next()).getValue();
                                if (!contact.phones.isEmpty()) {
                                    if (!contact.shortPhones.isEmpty()) {
                                        state.requery();
                                        state.bindString(1, contact.key);
                                        state.bindInteger(2, contact.contact_id);
                                        state.bindString(3, contact.first_name);
                                        state.bindString(4, contact.last_name);
                                        state.bindInteger(5, contact.imported);
                                        state.step();
                                        while (a < contact.phones.size()) {
                                            state2.requery();
                                            state2.bindString(1, contact.key);
                                            state2.bindString(2, (String) contact.phones.get(a));
                                            state2.bindString(3, (String) contact.shortPhones.get(a));
                                            state2.bindInteger(4, ((Integer) contact.phoneDeleted.get(a)).intValue());
                                            state2.step();
                                            a++;
                                        }
                                    }
                                }
                            }
                            state.dispose();
                            state2.dispose();
                            MessagesStorage.this.database.commitTransaction();
                            if (migrate) {
                                MessagesStorage.this.database.executeFast("DROP TABLE IF EXISTS user_contacts_v6;").stepThis().dispose();
                                MessagesStorage.this.database.executeFast("DROP TABLE IF EXISTS user_phones_v6;").stepThis().dispose();
                                MessagesStorage.this.getCachedPhoneBook(false);
                            }
                        } catch (Throwable e) {
                            FileLog.m3e(e);
                        }
                    }
                });
            }
        }
    }

    public void getCachedPhoneBook(final boolean byError) {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                SQLiteCursor count;
                Throwable th;
                Throwable th2;
                SQLiteCursor cursor;
                int i = 4;
                int i2 = 3;
                int i3 = 6;
                int i4 = 2;
                int i5 = 8;
                int i6 = 0;
                SQLiteCursor cursor2;
                try {
                    cursor2 = MessagesStorage.this.database.queryFinalized("SELECT name FROM sqlite_master WHERE type='table' AND name='user_contacts_v6'", new Object[0]);
                    boolean migrate = cursor2.next();
                    cursor2.dispose();
                    cursor2 = null;
                    if (migrate) {
                        int count2 = 16;
                        cursor2 = MessagesStorage.this.database.queryFinalized("SELECT COUNT(uid) FROM user_contacts_v6 WHERE 1", new Object[0]);
                        if (cursor2.next()) {
                            count2 = Math.min(DefaultLoadControl.DEFAULT_BUFFER_FOR_PLAYBACK_AFTER_REBUFFER_MS, cursor2.intValue(0));
                        }
                        cursor2.dispose();
                        SparseArray<Contact> contactHashMap = new SparseArray(count2);
                        cursor2 = MessagesStorage.this.database.queryFinalized("SELECT us.uid, us.fname, us.sname, up.phone, up.sphone, up.deleted, us.imported FROM user_contacts_v6 as us LEFT JOIN user_phones_v6 as up ON us.uid = up.uid WHERE 1", new Object[0]);
                        while (cursor2.next()) {
                            int uid = cursor2.intValue(0);
                            Contact contact = (Contact) contactHashMap.get(uid);
                            if (contact == null) {
                                contact = new Contact();
                                contact.first_name = cursor2.stringValue(1);
                                contact.last_name = cursor2.stringValue(2);
                                contact.imported = cursor2.intValue(i3);
                                if (contact.first_name == null) {
                                    contact.first_name = TtmlNode.ANONYMOUS_REGION_ID;
                                }
                                if (contact.last_name == null) {
                                    contact.last_name = TtmlNode.ANONYMOUS_REGION_ID;
                                }
                                contact.contact_id = uid;
                                contactHashMap.put(uid, contact);
                            }
                            String phone = cursor2.stringValue(i2);
                            if (phone != null) {
                                contact.phones.add(phone);
                                String sphone = cursor2.stringValue(i);
                                if (sphone == null) {
                                    i3 = 6;
                                } else {
                                    if (sphone.length() == i5 && phone.length() != i5) {
                                        sphone = PhoneFormat.stripExceptNumbers(phone);
                                    }
                                    contact.shortPhones.add(sphone);
                                    contact.phoneDeleted.add(Integer.valueOf(cursor2.intValue(5)));
                                    contact.phoneTypes.add(TtmlNode.ANONYMOUS_REGION_ID);
                                    if (contactHashMap.size() == DefaultLoadControl.DEFAULT_BUFFER_FOR_PLAYBACK_AFTER_REBUFFER_MS) {
                                        break;
                                    }
                                    i = 4;
                                    i2 = 3;
                                    i3 = 6;
                                    i5 = 8;
                                }
                            }
                        }
                        cursor2.dispose();
                        cursor2 = null;
                        ContactsController.getInstance(MessagesStorage.this.currentAccount).migratePhoneBookToV7(contactHashMap);
                        if (cursor2 != null) {
                            cursor2.dispose();
                        }
                        return;
                    }
                    if (cursor2 != null) {
                        cursor2.dispose();
                    }
                    count = 16;
                    i = 0;
                    i2 = 0;
                    try {
                        cursor2 = MessagesStorage.this.database.queryFinalized("SELECT COUNT(key) FROM user_contacts_v7 WHERE 1", new Object[0]);
                        if (cursor2.next()) {
                            i = cursor2.intValue(0);
                            count = Math.min(DefaultLoadControl.DEFAULT_BUFFER_FOR_PLAYBACK_AFTER_REBUFFER_MS, i);
                            if (i > DefaultLoadControl.DEFAULT_BUFFER_FOR_PLAYBACK_AFTER_REBUFFER_MS) {
                                i2 = i - 5000;
                            }
                            if (BuildVars.LOGS_ENABLED) {
                                StringBuilder stringBuilder = new StringBuilder();
                                stringBuilder.append(MessagesStorage.this.currentAccount);
                                stringBuilder.append(" current cached contacts count = ");
                                stringBuilder.append(i);
                                FileLog.m0d(stringBuilder.toString());
                            }
                        }
                        if (cursor2 != null) {
                            cursor2.dispose();
                        }
                    } catch (Throwable th3) {
                        th = th3;
                        th2 = th;
                        if (count != null) {
                            count.dispose();
                        }
                        throw th2;
                    }
                    i3 = new HashMap(count);
                    if (i2 != 0) {
                        try {
                            SQLiteDatabase access$000 = MessagesStorage.this.database;
                            StringBuilder stringBuilder2 = new StringBuilder();
                            stringBuilder2.append("SELECT us.key, us.uid, us.fname, us.sname, up.phone, up.sphone, up.deleted, us.imported FROM user_contacts_v7 as us LEFT JOIN user_phones_v7 as up ON us.key = up.key WHERE 1 LIMIT 0,");
                            stringBuilder2.append(i);
                            cursor2 = access$000.queryFinalized(stringBuilder2.toString(), new Object[0]);
                        } catch (Throwable th4) {
                            cursor = cursor2;
                            th2 = th4;
                            i3.clear();
                            FileLog.m3e(th2);
                            if (cursor != null) {
                                cursor.dispose();
                            }
                        } catch (Throwable th5) {
                            th4 = th5;
                            th2 = th4;
                            if (cursor != null) {
                                cursor.dispose();
                            }
                            throw th2;
                        }
                    }
                    cursor2 = MessagesStorage.this.database.queryFinalized("SELECT us.key, us.uid, us.fname, us.sname, up.phone, up.sphone, up.deleted, us.imported FROM user_contacts_v7 as us LEFT JOIN user_phones_v7 as up ON us.key = up.key WHERE 1", new Object[0]);
                    while (cursor2.next()) {
                        String key = cursor2.stringValue(i6);
                        Contact contact2 = (Contact) i3.get(key);
                        if (contact2 == null) {
                            contact2 = new Contact();
                            contact2.contact_id = cursor2.intValue(1);
                            contact2.first_name = cursor2.stringValue(i4);
                            contact2.last_name = cursor2.stringValue(3);
                            contact2.imported = cursor2.intValue(7);
                            if (contact2.first_name == null) {
                                contact2.first_name = TtmlNode.ANONYMOUS_REGION_ID;
                            }
                            if (contact2.last_name == null) {
                                contact2.last_name = TtmlNode.ANONYMOUS_REGION_ID;
                            }
                            i3.put(key, contact2);
                        }
                        String phone2 = cursor2.stringValue(4);
                        if (phone2 != null) {
                            contact2.phones.add(phone2);
                            String sphone2 = cursor2.stringValue(5);
                            if (sphone2 != null) {
                                if (sphone2.length() == 8 && phone2.length() != 8) {
                                    sphone2 = PhoneFormat.stripExceptNumbers(phone2);
                                }
                                contact2.shortPhones.add(sphone2);
                                contact2.phoneDeleted.add(Integer.valueOf(cursor2.intValue(6)));
                                contact2.phoneTypes.add(TtmlNode.ANONYMOUS_REGION_ID);
                                if (i3.size() == DefaultLoadControl.DEFAULT_BUFFER_FOR_PLAYBACK_AFTER_REBUFFER_MS) {
                                    break;
                                }
                            }
                        }
                        i4 = 2;
                        i6 = 0;
                    }
                    cursor2.dispose();
                    Exception e = null;
                    if (e != null) {
                        e.dispose();
                    }
                    ContactsController.getInstance(MessagesStorage.this.currentAccount).performSyncPhoneBook(i3, true, true, false, false, byError ^ 1, false);
                } catch (Throwable th6) {
                    th4 = th6;
                    th2 = th4;
                    if (count != null) {
                        count.dispose();
                    }
                    throw th2;
                }
            }
        });
    }

    public void getContacts() {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                ArrayList<TL_contact> contacts = new ArrayList();
                ArrayList<User> users = new ArrayList();
                try {
                    SQLiteCursor cursor = MessagesStorage.this.database.queryFinalized("SELECT * FROM contacts WHERE 1", new Object[0]);
                    StringBuilder uids = new StringBuilder();
                    while (cursor.next()) {
                        int user_id = cursor.intValue(0);
                        TL_contact contact = new TL_contact();
                        contact.user_id = user_id;
                        contact.mutual = cursor.intValue(1) == 1;
                        if (uids.length() != 0) {
                            uids.append(",");
                        }
                        contacts.add(contact);
                        uids.append(contact.user_id);
                    }
                    cursor.dispose();
                    if (uids.length() != 0) {
                        MessagesStorage.this.getUsersInternal(uids.toString(), users);
                    }
                } catch (Throwable e) {
                    contacts.clear();
                    users.clear();
                    FileLog.m3e(e);
                }
                ContactsController.getInstance(MessagesStorage.this.currentAccount).processLoadedContacts(contacts, users, 1);
            }
        });
    }

    public void getUnsentMessages(final int count) {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                AnonymousClass55 anonymousClass55 = this;
                try {
                    int lower_id;
                    SparseArray<Message> messageHashMap = new SparseArray();
                    ArrayList<Message> messages = new ArrayList();
                    ArrayList<User> users = new ArrayList();
                    ArrayList<Chat> chats = new ArrayList();
                    ArrayList<EncryptedChat> encryptedChats = new ArrayList();
                    ArrayList<Integer> usersToLoad = new ArrayList();
                    ArrayList<Integer> chatsToLoad = new ArrayList();
                    ArrayList<Integer> broadcastIds = new ArrayList();
                    ArrayList<Integer> encryptedChatIds = new ArrayList();
                    SQLiteCursor cursor = MessagesStorage.this.database;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.uid, s.seq_in, s.seq_out, m.ttl FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid LEFT JOIN messages_seq as s ON m.mid = s.mid WHERE m.mid < 0 AND m.send_state = 1 ORDER BY m.mid DESC LIMIT ");
                    stringBuilder.append(count);
                    boolean z = false;
                    cursor = cursor.queryFinalized(stringBuilder.toString(), new Object[0]);
                    while (cursor.next()) {
                        NativeByteBuffer data = cursor.byteBufferValue(1);
                        if (data != null) {
                            Message message = Message.TLdeserialize(data, data.readInt32(z), z);
                            message.readAttachPath(data, UserConfig.getInstance(MessagesStorage.this.currentAccount).clientUserId);
                            data.reuse();
                            if (messageHashMap.indexOfKey(message.id) < 0) {
                                MessageObject.setUnreadFlags(message, cursor.intValue(z));
                                message.id = cursor.intValue(3);
                                message.date = cursor.intValue(4);
                                if (cursor.isNull(5)) {
                                } else {
                                    message.random_id = cursor.longValue(5);
                                }
                                message.dialog_id = cursor.longValue(6);
                                message.seq_in = cursor.intValue(7);
                                message.seq_out = cursor.intValue(8);
                                message.ttl = cursor.intValue(9);
                                messages.add(message);
                                messageHashMap.put(message.id, message);
                                int lower_id2 = (int) message.dialog_id;
                                int high_id = (int) (message.dialog_id >> 32);
                                if (lower_id2 == 0) {
                                    lower_id = lower_id2;
                                    if (!encryptedChatIds.contains(Integer.valueOf(high_id))) {
                                        encryptedChatIds.add(Integer.valueOf(high_id));
                                    }
                                } else if (high_id == 1) {
                                    lower_id = lower_id2;
                                    if (!broadcastIds.contains(Integer.valueOf(lower_id))) {
                                        broadcastIds.add(Integer.valueOf(lower_id));
                                    }
                                } else {
                                    lower_id = lower_id2;
                                    if (lower_id < 0) {
                                        if (!chatsToLoad.contains(Integer.valueOf(-lower_id))) {
                                            chatsToLoad.add(Integer.valueOf(-lower_id));
                                        }
                                    } else if (!usersToLoad.contains(Integer.valueOf(lower_id))) {
                                        usersToLoad.add(Integer.valueOf(lower_id));
                                    }
                                }
                                MessagesStorage.addUsersAndChatsFromMessage(message, usersToLoad, chatsToLoad);
                                message.send_state = cursor.intValue(2);
                                if ((message.to_id.channel_id == 0 && !MessageObject.isUnread(message) && lower_id != 0) || message.id > 0) {
                                    message.send_state = 0;
                                }
                                if (lower_id == 0 && !cursor.isNull(5)) {
                                    message.random_id = cursor.longValue(5);
                                }
                            }
                        }
                        z = false;
                    }
                    cursor.dispose();
                    if (!encryptedChatIds.isEmpty()) {
                        MessagesStorage.this.getEncryptedChatsInternal(TextUtils.join(",", encryptedChatIds), encryptedChats, usersToLoad);
                    }
                    if (!usersToLoad.isEmpty()) {
                        MessagesStorage.this.getUsersInternal(TextUtils.join(",", usersToLoad), users);
                    }
                    if (!(chatsToLoad.isEmpty() && broadcastIds.isEmpty())) {
                        Integer cid;
                        stringBuilder = new StringBuilder();
                        for (lower_id = 0; lower_id < chatsToLoad.size(); lower_id++) {
                            cid = (Integer) chatsToLoad.get(lower_id);
                            if (stringBuilder.length() != 0) {
                                stringBuilder.append(",");
                            }
                            stringBuilder.append(cid);
                        }
                        int a = 0;
                        while (true) {
                            lower_id = a;
                            if (lower_id >= broadcastIds.size()) {
                                break;
                            }
                            cid = (Integer) broadcastIds.get(lower_id);
                            if (stringBuilder.length() != 0) {
                                stringBuilder.append(",");
                            }
                            stringBuilder.append(-cid.intValue());
                            a = lower_id + 1;
                        }
                        MessagesStorage.this.getChatsInternal(stringBuilder.toString(), chats);
                    }
                    SendMessagesHelper.getInstance(MessagesStorage.this.currentAccount).processUnsentMessages(messages, users, chats, encryptedChats);
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public boolean checkMessageId(long dialog_id, int mid) {
        boolean[] result = new boolean[1];
        CountDownLatch countDownLatch = new CountDownLatch(1);
        final long j = dialog_id;
        final int i = mid;
        final boolean[] zArr = result;
        final CountDownLatch countDownLatch2 = countDownLatch;
        this.storageQueue.postRunnable(new Runnable() {
            /* JADX WARNING: inconsistent code. */
            /* Code decompiled incorrectly, please refer to instructions dump. */
            public void run() {
                SQLiteCursor cursor = null;
                try {
                    cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT mid FROM messages WHERE uid = %d AND mid = %d", new Object[]{Long.valueOf(j), Integer.valueOf(i)}), new Object[0]);
                    if (cursor.next()) {
                        zArr[0] = true;
                    }
                } catch (Throwable e) {
                    FileLog.m3e(e);
                    if (cursor != null) {
                        cursor.dispose();
                    }
                    countDownLatch2.countDown();
                } catch (Throwable th) {
                    if (cursor != null) {
                        cursor.dispose();
                    }
                }
            }
        });
        try {
            countDownLatch.await();
        } catch (Throwable e) {
            FileLog.m3e(e);
        }
        return result[0];
    }

    public void getUnreadMention(final long dialog_id, final IntCallback callback) {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    SQLiteCursor cursor = MessagesStorage.this.database;
                    Object[] objArr = new Object[1];
                    int result = 0;
                    objArr[0] = Long.valueOf(dialog_id);
                    cursor = cursor.queryFinalized(String.format(Locale.US, "SELECT MIN(mid) FROM messages WHERE uid = %d AND mention = 1 AND read_state IN(0, 1)", objArr), new Object[0]);
                    if (cursor.next()) {
                        result = cursor.intValue(0);
                    }
                    final int result2 = result;
                    cursor.dispose();
                    AndroidUtilities.runOnUIThread(new Runnable() {
                        public void run() {
                            callback.run(result2);
                        }
                    });
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public void getMessages(long dialog_id, int count, int max_id, int offset_date, int minDate, int classGuid, int load_type, boolean isChannel, int loadIndex) {
        final int i = count;
        final int i2 = max_id;
        final boolean z = isChannel;
        final long j = dialog_id;
        final int i3 = load_type;
        final int i4 = minDate;
        final int i5 = offset_date;
        final int i6 = classGuid;
        final int i7 = loadIndex;
        this.storageQueue.postRunnable(new Runnable() {

            /* renamed from: org.telegram.messenger.MessagesStorage$58$1 */
            class C03891 implements Comparator<Message> {
                C03891() {
                }

                public int compare(Message lhs, Message rhs) {
                    if (lhs.id <= 0 || rhs.id <= 0) {
                        if (lhs.id >= 0 || rhs.id >= 0) {
                            if (lhs.date > rhs.date) {
                                return -1;
                            }
                            if (lhs.date < rhs.date) {
                                return 1;
                            }
                        } else if (lhs.id < rhs.id) {
                            return -1;
                        } else {
                            if (lhs.id > rhs.id) {
                                return 1;
                            }
                        }
                    } else if (lhs.id > rhs.id) {
                        return -1;
                    } else {
                        if (lhs.id < rhs.id) {
                            return 1;
                        }
                    }
                    return 0;
                }
            }

            /* JADX WARNING: inconsistent code. */
            /* Code decompiled incorrectly, please refer to instructions dump. */
            public void run() {
                int mentions_unread;
                int channelId;
                boolean isEnd;
                boolean queryFromServer;
                int max_id_override;
                int i;
                Throwable e;
                messages_Messages messages_messages;
                int i2;
                int i3;
                boolean z;
                int i4;
                int i5;
                int mentions_unread2;
                int count_unread;
                Throwable e2;
                messages_Messages res;
                messages_Messages res2;
                TL_messages_messages tL_messages_messages;
                messages_Messages messages_messages2;
                boolean num;
                Object obj;
                ArrayList<Integer> arrayList;
                int offset_query;
                int channelId2;
                int max_id_query;
                int i6;
                LongSparseArray<ArrayList<Message>> longSparseArray;
                int channelId3;
                int offset_query2;
                int channelId4;
                boolean queryFromServer2;
                int max_unread_date;
                boolean isEnd2;
                int i7;
                int num2;
                SparseArray<ArrayList<Message>> sparseArray;
                ArrayList<Long> arrayList2;
                int mentions_unread3;
                LongSparseArray<ArrayList<Message>> replyMessageRandomOwners;
                messages_Messages res3;
                int i8;
                Throwable mentions_unread4;
                int mentions_unread5;
                messages_Messages res4 = new TL_messages_messages();
                int count_query = i;
                int offset_query3 = 0;
                long messageMaxId = (long) i2;
                int max_id_query2 = i2;
                int max_id_override2 = i2;
                TL_messages_messages count_unread2 = 0;
                if (z != 0) {
                    mentions_unread = 0;
                    channelId = -((int) j);
                } else {
                    mentions_unread = 0;
                    channelId = 0;
                }
                int min_unread_id = 0;
                int last_message_id = 0;
                if (!(messageMaxId == 0 || channelId == 0)) {
                    messageMaxId |= ((long) channelId) << 32;
                }
                boolean num3 = j == 777000 ? true : true;
                boolean unreadCountIsLocal;
                int i9;
                long j;
                int i10;
                try {
                    ArrayList<Integer> usersToLoad = new ArrayList();
                    isEnd = false;
                    try {
                        ArrayList<Integer> chatsToLoad = new ArrayList();
                        queryFromServer = false;
                        try {
                            ArrayList<Long> replyMessages = new ArrayList();
                            int max_unread_date2 = 0;
                            try {
                                SparseArray<ArrayList<Message>> replyMessageOwners = new SparseArray();
                                int max_id_query3 = max_id_query2;
                                try {
                                    int i11;
                                    SQLiteCursor cursor;
                                    int endMid;
                                    boolean lower_id;
                                    int mentions_unread6;
                                    boolean queryFromServer3;
                                    int intValue;
                                    Message message;
                                    ArrayList<Integer> chatsToLoad2;
                                    ArrayList<Integer> usersToLoad2;
                                    LongSparseArray<ArrayList<Message>> replyMessageRandomOwners2 = new LongSparseArray();
                                    unreadCountIsLocal = false;
                                    max_id_override = max_id_override2;
                                    try {
                                        LongSparseArray<ArrayList<Message>> replyMessageRandomOwners3;
                                        SparseArray<ArrayList<Message>> sparseArray2;
                                        ArrayList<Long> arrayList3;
                                        ArrayList<Integer> arrayList4;
                                        ArrayList<Integer> arrayList5;
                                        int lower_id2 = (int) j;
                                        int count_unread3;
                                        Locale locale;
                                        Object[] objArr;
                                        Object[] objArr2;
                                        int existingUnreadCount;
                                        SQLiteDatabase access$000;
                                        String str;
                                        SQLiteCursor chatsToLoad3;
                                        if (lower_id2 != 0) {
                                            Locale locale2;
                                            String str2;
                                            SQLitePreparedStatement state;
                                            SQLiteCursor sQLiteCursor;
                                            ArrayList<Integer> cursor2;
                                            SQLiteDatabase access$0002;
                                            boolean containMessage;
                                            SQLiteCursor sQLiteCursor2;
                                            SQLiteDatabase access$0003;
                                            ArrayList<Integer> cursor3;
                                            int i12;
                                            SQLiteDatabase access$0004;
                                            long j2;
                                            Object[] objArr3;
                                            long holeMessageMinId;
                                            long holeMessageMinId2;
                                            Locale locale3;
                                            String str3;
                                            long holeMessageId;
                                            String str4;
                                            SQLiteCursor sQLiteCursor3;
                                            long j3;
                                            SQLiteCursor cursor4;
                                            long holeMessageId2;
                                            try {
                                                replyMessageRandomOwners3 = replyMessageRandomOwners2;
                                                if (i3 == 3) {
                                                    try {
                                                        if (i4 == 0) {
                                                            SQLiteDatabase access$0005 = MessagesStorage.this.database;
                                                            StringBuilder stringBuilder = new StringBuilder();
                                                            sparseArray2 = replyMessageOwners;
                                                            stringBuilder.append("SELECT inbox_max, unread_count, date, unread_count_i FROM dialogs WHERE did = ");
                                                            arrayList3 = replyMessages;
                                                            stringBuilder.append(j);
                                                            replyMessages = access$0005.queryFinalized(stringBuilder.toString(), new Object[0]);
                                                            if (replyMessages.next()) {
                                                                max_id_query2 = replyMessages.intValue(0) + 1;
                                                                try {
                                                                    count_unread3 = replyMessages.intValue(1);
                                                                    try {
                                                                        max_id_override2 = replyMessages.intValue(2);
                                                                        i = count_unread3;
                                                                        try {
                                                                            mentions_unread = replyMessages.intValue(3);
                                                                            replyMessageOwners = max_id_override2;
                                                                        } catch (Exception e3) {
                                                                            e = e3;
                                                                            messages_messages = res4;
                                                                            i2 = channelId;
                                                                            i3 = count_query;
                                                                            i9 = 0;
                                                                            z = num3;
                                                                            j = messageMaxId;
                                                                            i4 = max_id_query2;
                                                                            i5 = max_id_override2;
                                                                            mentions_unread2 = mentions_unread;
                                                                            count_unread = i;
                                                                            e2 = e;
                                                                            res = messages_messages;
                                                                            try {
                                                                                res.messages.clear();
                                                                                res.chats.clear();
                                                                                res.users.clear();
                                                                                FileLog.m3e(e2);
                                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                            } catch (Throwable e4) {
                                                                                res2 = res;
                                                                                tL_messages_messages = e4;
                                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                throw tL_messages_messages;
                                                                            }
                                                                        } catch (Throwable th) {
                                                                            e4 = th;
                                                                            res2 = res4;
                                                                            i2 = channelId;
                                                                            i3 = count_query;
                                                                            i9 = 0;
                                                                            z = num3;
                                                                            j = messageMaxId;
                                                                            i4 = max_id_query2;
                                                                            i5 = max_id_override2;
                                                                            mentions_unread2 = mentions_unread;
                                                                            count_unread = i;
                                                                            tL_messages_messages = e4;
                                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                            throw tL_messages_messages;
                                                                        }
                                                                    } catch (Throwable e42) {
                                                                        messages_messages = res4;
                                                                        i2 = channelId;
                                                                        i3 = count_query;
                                                                        i9 = 0;
                                                                        z = num3;
                                                                        j = messageMaxId;
                                                                        i4 = max_id_query2;
                                                                        mentions_unread2 = mentions_unread;
                                                                        i5 = max_unread_date2;
                                                                        count_unread = count_unread3;
                                                                        e2 = e42;
                                                                        res = messages_messages;
                                                                        res.messages.clear();
                                                                        res.chats.clear();
                                                                        res.users.clear();
                                                                        FileLog.m3e(e2);
                                                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                    } catch (Throwable e422) {
                                                                        res2 = res4;
                                                                        i2 = channelId;
                                                                        i3 = count_query;
                                                                        i9 = 0;
                                                                        z = num3;
                                                                        j = messageMaxId;
                                                                        i4 = max_id_query2;
                                                                        mentions_unread2 = mentions_unread;
                                                                        i5 = max_unread_date2;
                                                                        i10 = max_id_query3;
                                                                        count_unread = count_unread3;
                                                                        tL_messages_messages = e422;
                                                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                        throw tL_messages_messages;
                                                                    }
                                                                } catch (Exception e5) {
                                                                    e422 = e5;
                                                                    messages_messages = res4;
                                                                    i2 = channelId;
                                                                    i3 = count_query;
                                                                    i9 = 0;
                                                                    z = num3;
                                                                    j = messageMaxId;
                                                                    i4 = max_id_query2;
                                                                    count_unread = count_unread2;
                                                                    mentions_unread2 = mentions_unread;
                                                                    i5 = max_unread_date2;
                                                                    e2 = e422;
                                                                    res = messages_messages;
                                                                    res.messages.clear();
                                                                    res.chats.clear();
                                                                    res.users.clear();
                                                                    FileLog.m3e(e2);
                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                } catch (Throwable th2) {
                                                                    e422 = th2;
                                                                    i2 = channelId;
                                                                    i3 = count_query;
                                                                    i9 = 0;
                                                                    z = num3;
                                                                    j = messageMaxId;
                                                                    i4 = max_id_query2;
                                                                    count_unread = count_unread2;
                                                                    mentions_unread2 = mentions_unread;
                                                                    i5 = max_unread_date2;
                                                                    res2 = res4;
                                                                    tL_messages_messages = e422;
                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                    throw tL_messages_messages;
                                                                }
                                                            }
                                                            i = count_unread2;
                                                            max_id_query2 = min_unread_id;
                                                            replyMessageOwners = max_unread_date2;
                                                            try {
                                                                replyMessages.dispose();
                                                                messages_messages2 = res4;
                                                                arrayList4 = chatsToLoad;
                                                                arrayList5 = usersToLoad;
                                                                usersToLoad = max_id_query2;
                                                                i11 = lower_id2;
                                                                mentions_unread2 = mentions_unread;
                                                                replyMessages = queryFromServer;
                                                                replyMessageRandomOwners2 = max_id_query3;
                                                                chatsToLoad = i;
                                                                cursor = MessagesStorage.this.database;
                                                                locale2 = Locale.US;
                                                                str2 = "SELECT start FROM messages_holes WHERE uid = %d AND start IN (0, 1)";
                                                                i4 = usersToLoad;
                                                                i5 = replyMessageOwners;
                                                            } catch (Exception e6) {
                                                                e422 = e6;
                                                                messages_messages = res4;
                                                                i2 = channelId;
                                                                i3 = count_query;
                                                                i9 = 0;
                                                                z = num3;
                                                                i5 = replyMessageOwners;
                                                                j = messageMaxId;
                                                                i4 = max_id_query2;
                                                                mentions_unread2 = mentions_unread;
                                                                count_unread = i;
                                                                e2 = e422;
                                                                res = messages_messages;
                                                                res.messages.clear();
                                                                res.chats.clear();
                                                                res.users.clear();
                                                                FileLog.m3e(e2);
                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                            } catch (Throwable th3) {
                                                                e422 = th3;
                                                                res2 = res4;
                                                                i3 = count_query;
                                                                i9 = 0;
                                                                i5 = replyMessageOwners;
                                                                i4 = max_id_query2;
                                                                mentions_unread2 = mentions_unread;
                                                                count_unread = i;
                                                                tL_messages_messages = e422;
                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                throw tL_messages_messages;
                                                            }
                                                            try {
                                                                replyMessageOwners = new Object[1];
                                                                num = num3;
                                                                try {
                                                                    replyMessageOwners[0] = Long.valueOf(j);
                                                                    cursor = cursor.queryFinalized(String.format(locale2, str2, replyMessageOwners), new Object[0]);
                                                                    if (cursor.next() == null) {
                                                                        try {
                                                                            usersToLoad = cursor.intValue(null) != 1 ? true : null;
                                                                            try {
                                                                                cursor.dispose();
                                                                                isEnd = usersToLoad;
                                                                                i10 = replyMessageRandomOwners2;
                                                                            } catch (Throwable e4222) {
                                                                                e2 = e4222;
                                                                                count_unread = chatsToLoad;
                                                                                i2 = channelId;
                                                                                i3 = count_query;
                                                                                i9 = offset_query3;
                                                                                isEnd = usersToLoad;
                                                                                queryFromServer = replyMessages;
                                                                                j = messageMaxId;
                                                                                i10 = replyMessageRandomOwners2;
                                                                                messages_messages = messages_messages2;
                                                                                res = messages_messages;
                                                                                res.messages.clear();
                                                                                res.chats.clear();
                                                                                res.users.clear();
                                                                                FileLog.m3e(e2);
                                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                            } catch (Throwable e42222) {
                                                                                tL_messages_messages = e42222;
                                                                                count_unread = chatsToLoad;
                                                                                i2 = channelId;
                                                                                i3 = count_query;
                                                                                i9 = offset_query3;
                                                                                isEnd = usersToLoad;
                                                                                queryFromServer = replyMessages;
                                                                                j = messageMaxId;
                                                                                i10 = replyMessageRandomOwners2;
                                                                                res2 = messages_messages2;
                                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                throw tL_messages_messages;
                                                                            }
                                                                        } catch (Throwable e422222) {
                                                                            e2 = e422222;
                                                                            count_unread = chatsToLoad;
                                                                            i2 = channelId;
                                                                            i3 = count_query;
                                                                            i9 = offset_query3;
                                                                            queryFromServer = replyMessages;
                                                                            j = messageMaxId;
                                                                            i10 = replyMessageRandomOwners2;
                                                                            messages_messages = messages_messages2;
                                                                            res = messages_messages;
                                                                            res.messages.clear();
                                                                            res.chats.clear();
                                                                            res.users.clear();
                                                                            FileLog.m3e(e2);
                                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                        } catch (Throwable e4222222) {
                                                                            tL_messages_messages = e4222222;
                                                                            count_unread = chatsToLoad;
                                                                            i2 = channelId;
                                                                            i3 = count_query;
                                                                            i9 = offset_query3;
                                                                            queryFromServer = replyMessages;
                                                                            j = messageMaxId;
                                                                            i10 = replyMessageRandomOwners2;
                                                                            res2 = messages_messages2;
                                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                            throw tL_messages_messages;
                                                                        }
                                                                    }
                                                                    cursor.dispose();
                                                                    usersToLoad = MessagesStorage.this.database;
                                                                    locale = Locale.US;
                                                                    replyMessageOwners = "SELECT min(mid) FROM messages WHERE uid = %d AND mid > 0";
                                                                    objArr = new Object[1];
                                                                    i10 = replyMessageRandomOwners2;
                                                                    try {
                                                                        objArr[0] = Long.valueOf(j);
                                                                        cursor = usersToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[0]);
                                                                        if (cursor.next() != null) {
                                                                            try {
                                                                                usersToLoad = cursor.intValue(null);
                                                                                if (usersToLoad != null) {
                                                                                    state = MessagesStorage.this.database.executeFast("REPLACE INTO messages_holes VALUES(?, ?, ?)");
                                                                                    state.requery();
                                                                                    state.bindLong(1, j);
                                                                                    state.bindInteger(2, null);
                                                                                    state.bindInteger(3, usersToLoad);
                                                                                    state.step();
                                                                                    state.dispose();
                                                                                }
                                                                            } catch (Throwable e42222222) {
                                                                                e2 = e42222222;
                                                                                count_unread = chatsToLoad;
                                                                                i2 = channelId;
                                                                                i3 = count_query;
                                                                                i9 = offset_query3;
                                                                                queryFromServer = replyMessages;
                                                                                j = messageMaxId;
                                                                                messages_messages = messages_messages2;
                                                                                res = messages_messages;
                                                                                res.messages.clear();
                                                                                res.chats.clear();
                                                                                res.users.clear();
                                                                                FileLog.m3e(e2);
                                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                            } catch (Throwable e422222222) {
                                                                                obj = e422222222;
                                                                                count_unread = chatsToLoad;
                                                                                i2 = channelId;
                                                                                i3 = count_query;
                                                                                i9 = offset_query3;
                                                                                queryFromServer = replyMessages;
                                                                                j = messageMaxId;
                                                                                res2 = messages_messages2;
                                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                throw tL_messages_messages;
                                                                            }
                                                                        }
                                                                        cursor.dispose();
                                                                    } catch (Throwable eNUM) {
                                                                        i3 = count_query;
                                                                        j = messageMaxId;
                                                                        e2 = eNUM;
                                                                        count_unread = chatsToLoad;
                                                                        queryFromServer = replyMessages;
                                                                        messages_messages = messages_messages2;
                                                                        z = num;
                                                                        i9 = offset_query3;
                                                                        i2 = channelId;
                                                                        res = messages_messages;
                                                                        res.messages.clear();
                                                                        res.chats.clear();
                                                                        res.users.clear();
                                                                        FileLog.m3e(e2);
                                                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                    } catch (Throwable e4NUM) {
                                                                        i3 = count_query;
                                                                        j = messageMaxId;
                                                                        tL_messages_messages = e4NUM;
                                                                        count_unread = chatsToLoad;
                                                                        queryFromServer = replyMessages;
                                                                        res2 = messages_messages2;
                                                                        z = num;
                                                                        i9 = offset_query3;
                                                                        i2 = channelId;
                                                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                        throw tL_messages_messages;
                                                                    }
                                                                    if (i3 != 3) {
                                                                        try {
                                                                            if (i3 != 4) {
                                                                                if (replyMessages != null) {
                                                                                    if (i3 == 2) {
                                                                                        sQLiteCursor = cursor;
                                                                                        count_unread = chatsToLoad;
                                                                                        usersToLoad = channelId;
                                                                                        j = messageMaxId;
                                                                                        cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT max(mid) FROM messages WHERE uid = %d AND mid > 0", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                                        if (cursor.next() != null) {
                                                                                            last_message_id = cursor.intValue(null);
                                                                                        }
                                                                                        cursor.dispose();
                                                                                        if (i3 == 4) {
                                                                                            try {
                                                                                                if (i5 != null) {
                                                                                                    cursor2 = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT max(mid) FROM messages WHERE uid = %d AND date <= %d AND mid > 0", new Object[]{Long.valueOf(j), Integer.valueOf(i5)}), new Object[0]);
                                                                                                    if (cursor2.next() == null) {
                                                                                                        chatsToLoad = cursor2.intValue(null);
                                                                                                    } else {
                                                                                                        chatsToLoad = -1;
                                                                                                    }
                                                                                                    cursor2.dispose();
                                                                                                    cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT min(mid) FROM messages WHERE uid = %d AND date >= %d AND mid > 0", new Object[]{Long.valueOf(j), Integer.valueOf(i5)}), new Object[0]);
                                                                                                    if (cursor.next()) {
                                                                                                        endMid = -1;
                                                                                                    } else {
                                                                                                        endMid = cursor.intValue(0);
                                                                                                    }
                                                                                                    cursor.dispose();
                                                                                                    if (!(chatsToLoad == -1 || endMid == -1)) {
                                                                                                        if (chatsToLoad != endMid) {
                                                                                                            replyMessageRandomOwners2 = chatsToLoad;
                                                                                                            i3 = count_query;
                                                                                                            messageMaxId = j;
                                                                                                            chatsToLoad = replyMessageRandomOwners2 == null ? true : null;
                                                                                                            if (chatsToLoad == null) {
                                                                                                                try {
                                                                                                                    access$0002 = MessagesStorage.this.database;
                                                                                                                    objArr2 = new Object[3];
                                                                                                                    containMessage = chatsToLoad;
                                                                                                                    objArr2[null] = Long.valueOf(j);
                                                                                                                    objArr2[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                                                    objArr2[2] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                                                    cursor = access$0002.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start < %d AND end > %d", objArr2), new Object[null]);
                                                                                                                    if (cursor.next() == null) {
                                                                                                                        chatsToLoad = null;
                                                                                                                    } else {
                                                                                                                        chatsToLoad = containMessage;
                                                                                                                    }
                                                                                                                    cursor.dispose();
                                                                                                                    sQLiteCursor2 = cursor;
                                                                                                                    containMessage = chatsToLoad;
                                                                                                                } catch (Throwable e42NUM) {
                                                                                                                    e2 = e42NUM;
                                                                                                                    i9 = offset_query3;
                                                                                                                    arrayList = usersToLoad;
                                                                                                                    queryFromServer = replyMessages;
                                                                                                                    j = messageMaxId;
                                                                                                                    i10 = replyMessageRandomOwners2;
                                                                                                                    messages_messages = messages_messages2;
                                                                                                                    res = messages_messages;
                                                                                                                    res.messages.clear();
                                                                                                                    res.chats.clear();
                                                                                                                    res.users.clear();
                                                                                                                    FileLog.m3e(e2);
                                                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                                } catch (Throwable e422NUM) {
                                                                                                                    obj = e422NUM;
                                                                                                                    i9 = offset_query3;
                                                                                                                    arrayList = usersToLoad;
                                                                                                                    queryFromServer = replyMessages;
                                                                                                                    j = messageMaxId;
                                                                                                                    i10 = replyMessageRandomOwners2;
                                                                                                                    res2 = messages_messages2;
                                                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                                    throw tL_messages_messages;
                                                                                                                }
                                                                                                            }
                                                                                                            sQLiteCursor2 = cursor;
                                                                                                            containMessage = chatsToLoad;
                                                                                                            if (containMessage) {
                                                                                                                offset_query = offset_query3;
                                                                                                                channelId2 = usersToLoad;
                                                                                                                max_id_query = replyMessageRandomOwners2;
                                                                                                                try {
                                                                                                                    if (i3 != 2) {
                                                                                                                        existingUnreadCount = 0;
                                                                                                                        chatsToLoad = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid != 0 AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                                                                        if (chatsToLoad.next()) {
                                                                                                                            existingUnreadCount = chatsToLoad.intValue(0);
                                                                                                                        }
                                                                                                                        chatsToLoad.dispose();
                                                                                                                        channelId = count_unread;
                                                                                                                        if (existingUnreadCount != channelId) {
                                                                                                                            lower_id = true;
                                                                                                                            try {
                                                                                                                                access$0003 = MessagesStorage.this.database;
                                                                                                                                replyMessageOwners = new Object[6];
                                                                                                                                cursor3 = chatsToLoad;
                                                                                                                                replyMessageOwners[null] = Long.valueOf(j);
                                                                                                                                replyMessageOwners[1] = Long.valueOf(messageMaxId);
                                                                                                                                replyMessageOwners[2] = Integer.valueOf(i3 / 2);
                                                                                                                                replyMessageOwners[3] = Long.valueOf(j);
                                                                                                                                replyMessageOwners[4] = Long.valueOf(messageMaxId);
                                                                                                                                replyMessageOwners[5] = Integer.valueOf(i3 / 2);
                                                                                                                                cursor = access$0003.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", replyMessageOwners), new Object[null]);
                                                                                                                            } catch (Throwable e4222NUM) {
                                                                                                                                e2 = e4222NUM;
                                                                                                                                count_unread = channelId;
                                                                                                                                queryFromServer = replyMessages;
                                                                                                                                j = messageMaxId;
                                                                                                                                i6 = 1;
                                                                                                                                messages_messages = messages_messages2;
                                                                                                                                i10 = max_id_query;
                                                                                                                                i9 = offset_query;
                                                                                                                                res = messages_messages;
                                                                                                                                res.messages.clear();
                                                                                                                                res.chats.clear();
                                                                                                                                res.users.clear();
                                                                                                                                FileLog.m3e(e2);
                                                                                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                                            } catch (Throwable e42222NUM) {
                                                                                                                                obj = e42222NUM;
                                                                                                                                count_unread = channelId;
                                                                                                                                queryFromServer = replyMessages;
                                                                                                                                j = messageMaxId;
                                                                                                                                i6 = 1;
                                                                                                                                res2 = messages_messages2;
                                                                                                                                i10 = max_id_query;
                                                                                                                                i9 = offset_query;
                                                                                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                                                throw tL_messages_messages;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        i12 = existingUnreadCount;
                                                                                                                        cursor3 = chatsToLoad;
                                                                                                                        cursor = null;
                                                                                                                        lower_id = unreadCountIsLocal;
                                                                                                                    } else {
                                                                                                                        channelId = count_unread;
                                                                                                                        cursor = null;
                                                                                                                        lower_id = unreadCountIsLocal;
                                                                                                                    }
                                                                                                                } catch (Throwable e422222NUM) {
                                                                                                                    channelId = count_unread;
                                                                                                                    e2 = e422222NUM;
                                                                                                                    queryFromServer = replyMessages;
                                                                                                                    j = messageMaxId;
                                                                                                                    messages_messages = messages_messages2;
                                                                                                                    z = num;
                                                                                                                    i10 = max_id_query;
                                                                                                                    i9 = offset_query;
                                                                                                                    i2 = channelId2;
                                                                                                                    res = messages_messages;
                                                                                                                    res.messages.clear();
                                                                                                                    res.chats.clear();
                                                                                                                    res.users.clear();
                                                                                                                    FileLog.m3e(e2);
                                                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                                } catch (Throwable e4222222NUM) {
                                                                                                                    channelId = count_unread;
                                                                                                                    tL_messages_messages = e4222222NUM;
                                                                                                                    queryFromServer = replyMessages;
                                                                                                                    j = messageMaxId;
                                                                                                                    res2 = messages_messages2;
                                                                                                                    z = num;
                                                                                                                    i10 = max_id_query;
                                                                                                                    i9 = offset_query;
                                                                                                                    i2 = channelId2;
                                                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                                    throw tL_messages_messages;
                                                                                                                }
                                                                                                            }
                                                                                                            try {
                                                                                                                access$0004 = MessagesStorage.this.database;
                                                                                                                j2 = 0;
                                                                                                                objArr3 = new Object[2];
                                                                                                                holeMessageMinId = 1;
                                                                                                                objArr3[0] = Long.valueOf(j);
                                                                                                                objArr3[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                                                cursor = access$0004.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start >= %d ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                                                                                if (cursor.next() != null) {
                                                                                                                    chatsToLoad = (long) cursor.intValue(null);
                                                                                                                    if (usersToLoad == null) {
                                                                                                                        j2 = chatsToLoad | (((long) usersToLoad) << 32);
                                                                                                                    } else {
                                                                                                                        j2 = chatsToLoad;
                                                                                                                    }
                                                                                                                }
                                                                                                                cursor.dispose();
                                                                                                                cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(replyMessageRandomOwners2)}), new Object[0]);
                                                                                                                if (cursor.next() == null) {
                                                                                                                    holeMessageMinId2 = (long) cursor.intValue(null);
                                                                                                                    if (usersToLoad != null) {
                                                                                                                        holeMessageMinId2 |= ((long) usersToLoad) << 32;
                                                                                                                    }
                                                                                                                } else {
                                                                                                                    holeMessageMinId2 = holeMessageMinId;
                                                                                                                }
                                                                                                                cursor.dispose();
                                                                                                                if (j2 != 0) {
                                                                                                                    max_id_query = replyMessageRandomOwners2;
                                                                                                                } else if (holeMessageMinId2 == 1) {
                                                                                                                    max_id_query = replyMessageRandomOwners2;
                                                                                                                } else {
                                                                                                                    try {
                                                                                                                        chatsToLoad = MessagesStorage.this.database;
                                                                                                                        locale = Locale.US;
                                                                                                                        replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                                        objArr = new Object[6];
                                                                                                                        max_id_query = replyMessageRandomOwners2;
                                                                                                                        try {
                                                                                                                            objArr[0] = Long.valueOf(j);
                                                                                                                            objArr[1] = Long.valueOf(messageMaxId);
                                                                                                                            objArr[2] = Integer.valueOf(i3 / 2);
                                                                                                                            objArr[3] = Long.valueOf(j);
                                                                                                                            objArr[4] = Long.valueOf(messageMaxId);
                                                                                                                            objArr[5] = Integer.valueOf(i3 / 2);
                                                                                                                            cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[null]);
                                                                                                                            offset_query = offset_query3;
                                                                                                                            channelId2 = usersToLoad;
                                                                                                                            lower_id = unreadCountIsLocal;
                                                                                                                            channelId = count_unread;
                                                                                                                        } catch (Throwable e42222222NUM) {
                                                                                                                            e2 = e42222222NUM;
                                                                                                                            i9 = offset_query3;
                                                                                                                            arrayList = usersToLoad;
                                                                                                                            queryFromServer = replyMessages;
                                                                                                                            j = messageMaxId;
                                                                                                                            messages_messages = messages_messages2;
                                                                                                                            z = num;
                                                                                                                            longSparseArray = max_id_query;
                                                                                                                            res = messages_messages;
                                                                                                                            res.messages.clear();
                                                                                                                            res.chats.clear();
                                                                                                                            res.users.clear();
                                                                                                                            FileLog.m3e(e2);
                                                                                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                                        } catch (Throwable e422222222NUM) {
                                                                                                                            tL_messages_messages = e422222222NUM;
                                                                                                                            i9 = offset_query3;
                                                                                                                            arrayList = usersToLoad;
                                                                                                                            queryFromServer = replyMessages;
                                                                                                                            j = messageMaxId;
                                                                                                                            res2 = messages_messages2;
                                                                                                                            z = num;
                                                                                                                            longSparseArray = max_id_query;
                                                                                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                                            throw tL_messages_messages;
                                                                                                                        }
                                                                                                                    } catch (Throwable e4222222222NUM) {
                                                                                                                        e2 = e4222222222NUM;
                                                                                                                        i9 = offset_query3;
                                                                                                                        arrayList = usersToLoad;
                                                                                                                        queryFromServer = replyMessages;
                                                                                                                        j = messageMaxId;
                                                                                                                        messages_messages = messages_messages2;
                                                                                                                        z = num;
                                                                                                                        longSparseArray = replyMessageRandomOwners2;
                                                                                                                        res = messages_messages;
                                                                                                                        res.messages.clear();
                                                                                                                        res.chats.clear();
                                                                                                                        res.users.clear();
                                                                                                                        FileLog.m3e(e2);
                                                                                                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                                    } catch (Throwable e42222222222NUM) {
                                                                                                                        tL_messages_messages = e42222222222NUM;
                                                                                                                        i9 = offset_query3;
                                                                                                                        arrayList = usersToLoad;
                                                                                                                        queryFromServer = replyMessages;
                                                                                                                        j = messageMaxId;
                                                                                                                        res2 = messages_messages2;
                                                                                                                        z = num;
                                                                                                                        longSparseArray = replyMessageRandomOwners2;
                                                                                                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                                        throw tL_messages_messages;
                                                                                                                    }
                                                                                                                }
                                                                                                                if (j2 == null) {
                                                                                                                    j2 = C0539C.NANOS_PER_SECOND;
                                                                                                                    if (usersToLoad != null) {
                                                                                                                        replyMessageRandomOwners2 = C0539C.NANOS_PER_SECOND | (((long) usersToLoad) << 32);
                                                                                                                        chatsToLoad = MessagesStorage.this.database;
                                                                                                                        locale = Locale.US;
                                                                                                                        replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                                        objArr3 = new Object[8];
                                                                                                                        offset_query = offset_query3;
                                                                                                                        channelId2 = usersToLoad;
                                                                                                                        try {
                                                                                                                            objArr3[null] = Long.valueOf(j);
                                                                                                                            objArr3[1] = Long.valueOf(messageMaxId);
                                                                                                                            objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                                                            objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                                                            objArr3[4] = Long.valueOf(j);
                                                                                                                            objArr3[5] = Long.valueOf(messageMaxId);
                                                                                                                            objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                                                            objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                                                            cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                                                            lower_id = unreadCountIsLocal;
                                                                                                                            channelId = count_unread;
                                                                                                                        } catch (Throwable e422222222222NUM) {
                                                                                                                            e2 = e422222222222NUM;
                                                                                                                            queryFromServer = replyMessages;
                                                                                                                            j = messageMaxId;
                                                                                                                            messages_messages = messages_messages2;
                                                                                                                            i10 = max_id_query;
                                                                                                                            i9 = offset_query;
                                                                                                                            res = messages_messages;
                                                                                                                            res.messages.clear();
                                                                                                                            res.chats.clear();
                                                                                                                            res.users.clear();
                                                                                                                            FileLog.m3e(e2);
                                                                                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                                        } catch (Throwable e4222222222222NUM) {
                                                                                                                            tL_messages_messages = e4222222222222NUM;
                                                                                                                            queryFromServer = replyMessages;
                                                                                                                            j = messageMaxId;
                                                                                                                            res2 = messages_messages2;
                                                                                                                            i10 = max_id_query;
                                                                                                                            i9 = offset_query;
                                                                                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                                            throw tL_messages_messages;
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                                replyMessageRandomOwners2 = j2;
                                                                                                                try {
                                                                                                                    chatsToLoad = MessagesStorage.this.database;
                                                                                                                    locale = Locale.US;
                                                                                                                    replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                                    objArr3 = new Object[8];
                                                                                                                    offset_query = offset_query3;
                                                                                                                    channelId2 = usersToLoad;
                                                                                                                    objArr3[null] = Long.valueOf(j);
                                                                                                                    objArr3[1] = Long.valueOf(messageMaxId);
                                                                                                                    objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                                                    objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                                                    objArr3[4] = Long.valueOf(j);
                                                                                                                    objArr3[5] = Long.valueOf(messageMaxId);
                                                                                                                    objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                                                    objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                                                    cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                                                    lower_id = unreadCountIsLocal;
                                                                                                                    channelId = count_unread;
                                                                                                                } catch (Throwable e42222222222222NUM) {
                                                                                                                    e2 = e42222222222222NUM;
                                                                                                                    arrayList = usersToLoad;
                                                                                                                    queryFromServer = replyMessages;
                                                                                                                    j = messageMaxId;
                                                                                                                    messages_messages = messages_messages2;
                                                                                                                    z = num;
                                                                                                                    i10 = max_id_query;
                                                                                                                    i9 = offset_query3;
                                                                                                                    res = messages_messages;
                                                                                                                    res.messages.clear();
                                                                                                                    res.chats.clear();
                                                                                                                    res.users.clear();
                                                                                                                    FileLog.m3e(e2);
                                                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                                } catch (Throwable e422222222222222NUM) {
                                                                                                                    tL_messages_messages = e422222222222222NUM;
                                                                                                                    arrayList = usersToLoad;
                                                                                                                    queryFromServer = replyMessages;
                                                                                                                    j = messageMaxId;
                                                                                                                    res2 = messages_messages2;
                                                                                                                    z = num;
                                                                                                                    i10 = max_id_query;
                                                                                                                    i9 = offset_query3;
                                                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                                    throw tL_messages_messages;
                                                                                                                }
                                                                                                            } catch (Throwable e4222222222222222NUM) {
                                                                                                                e2 = e4222222222222222NUM;
                                                                                                                arrayList = usersToLoad;
                                                                                                                queryFromServer = replyMessages;
                                                                                                                j = messageMaxId;
                                                                                                                messages_messages = messages_messages2;
                                                                                                                z = num;
                                                                                                                longSparseArray = replyMessageRandomOwners2;
                                                                                                                i9 = offset_query3;
                                                                                                                res = messages_messages;
                                                                                                                res.messages.clear();
                                                                                                                res.chats.clear();
                                                                                                                res.users.clear();
                                                                                                                FileLog.m3e(e2);
                                                                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                            } catch (Throwable e42222222222222222NUM) {
                                                                                                                tL_messages_messages = e42222222222222222NUM;
                                                                                                                arrayList = usersToLoad;
                                                                                                                queryFromServer = replyMessages;
                                                                                                                j = messageMaxId;
                                                                                                                res2 = messages_messages2;
                                                                                                                z = num;
                                                                                                                longSparseArray = replyMessageRandomOwners2;
                                                                                                                i9 = offset_query3;
                                                                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                                throw tL_messages_messages;
                                                                                                            }
                                                                                                            count_unread = channelId;
                                                                                                            queryFromServer = replyMessages;
                                                                                                            j = messageMaxId;
                                                                                                            unreadCountIsLocal = lower_id;
                                                                                                            mentions_unread6 = mentions_unread2;
                                                                                                            queryFromServer3 = num;
                                                                                                            max_id_override2 = max_id_query;
                                                                                                            i9 = offset_query;
                                                                                                        } else {
                                                                                                            replyMessageOwners = MessagesStorage.this.database;
                                                                                                            locale3 = Locale.US;
                                                                                                            str3 = "SELECT start FROM messages_holes WHERE uid = %d AND start <= %d AND end > %d";
                                                                                                            objArr2 = new Object[3];
                                                                                                            i3 = count_query;
                                                                                                            try {
                                                                                                                objArr2[0] = Long.valueOf(j);
                                                                                                                objArr2[1] = Integer.valueOf(chatsToLoad);
                                                                                                                objArr2[2] = Integer.valueOf(chatsToLoad);
                                                                                                                cursor = replyMessageOwners.queryFinalized(String.format(locale3, str3, objArr2), new Object[0]);
                                                                                                                if (cursor.next()) {
                                                                                                                    chatsToLoad = -1;
                                                                                                                }
                                                                                                                cursor.dispose();
                                                                                                                if (chatsToLoad != -1) {
                                                                                                                    cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start <= %d AND end > %d", new Object[]{Long.valueOf(j), Integer.valueOf(endMid), Integer.valueOf(endMid)}), new Object[null]);
                                                                                                                    if (cursor.next()) {
                                                                                                                        endMid = -1;
                                                                                                                    }
                                                                                                                    cursor.dispose();
                                                                                                                    if (endMid != -1) {
                                                                                                                        max_id_override2 = endMid;
                                                                                                                        channelId = endMid;
                                                                                                                        replyMessageOwners = (long) endMid;
                                                                                                                        if (replyMessageOwners != 0 || usersToLoad == null) {
                                                                                                                            replyMessageRandomOwners2 = channelId;
                                                                                                                            messageMaxId = replyMessageOwners;
                                                                                                                            max_id_override = max_id_override2;
                                                                                                                        } else {
                                                                                                                            replyMessageRandomOwners2 = channelId;
                                                                                                                            max_id_override = max_id_override2;
                                                                                                                            messageMaxId = replyMessageOwners | (((long) usersToLoad) << 32);
                                                                                                                        }
                                                                                                                        if (replyMessageRandomOwners2 == null) {
                                                                                                                        }
                                                                                                                        if (chatsToLoad == null) {
                                                                                                                            sQLiteCursor2 = cursor;
                                                                                                                            containMessage = chatsToLoad;
                                                                                                                        } else {
                                                                                                                            access$0002 = MessagesStorage.this.database;
                                                                                                                            objArr2 = new Object[3];
                                                                                                                            containMessage = chatsToLoad;
                                                                                                                            objArr2[null] = Long.valueOf(j);
                                                                                                                            objArr2[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                                                            objArr2[2] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                                                            cursor = access$0002.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start < %d AND end > %d", objArr2), new Object[null]);
                                                                                                                            if (cursor.next() == null) {
                                                                                                                                chatsToLoad = containMessage;
                                                                                                                            } else {
                                                                                                                                chatsToLoad = null;
                                                                                                                            }
                                                                                                                            cursor.dispose();
                                                                                                                            sQLiteCursor2 = cursor;
                                                                                                                            containMessage = chatsToLoad;
                                                                                                                        }
                                                                                                                        if (containMessage) {
                                                                                                                            offset_query = offset_query3;
                                                                                                                            channelId2 = usersToLoad;
                                                                                                                            max_id_query = replyMessageRandomOwners2;
                                                                                                                            if (i3 != 2) {
                                                                                                                                channelId = count_unread;
                                                                                                                                cursor = null;
                                                                                                                                lower_id = unreadCountIsLocal;
                                                                                                                            } else {
                                                                                                                                existingUnreadCount = 0;
                                                                                                                                chatsToLoad = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid != 0 AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                                                                                if (chatsToLoad.next()) {
                                                                                                                                    existingUnreadCount = chatsToLoad.intValue(0);
                                                                                                                                }
                                                                                                                                chatsToLoad.dispose();
                                                                                                                                channelId = count_unread;
                                                                                                                                if (existingUnreadCount != channelId) {
                                                                                                                                    i12 = existingUnreadCount;
                                                                                                                                    cursor3 = chatsToLoad;
                                                                                                                                    cursor = null;
                                                                                                                                    lower_id = unreadCountIsLocal;
                                                                                                                                } else {
                                                                                                                                    lower_id = true;
                                                                                                                                    access$0003 = MessagesStorage.this.database;
                                                                                                                                    replyMessageOwners = new Object[6];
                                                                                                                                    cursor3 = chatsToLoad;
                                                                                                                                    replyMessageOwners[null] = Long.valueOf(j);
                                                                                                                                    replyMessageOwners[1] = Long.valueOf(messageMaxId);
                                                                                                                                    replyMessageOwners[2] = Integer.valueOf(i3 / 2);
                                                                                                                                    replyMessageOwners[3] = Long.valueOf(j);
                                                                                                                                    replyMessageOwners[4] = Long.valueOf(messageMaxId);
                                                                                                                                    replyMessageOwners[5] = Integer.valueOf(i3 / 2);
                                                                                                                                    cursor = access$0003.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", replyMessageOwners), new Object[null]);
                                                                                                                                }
                                                                                                                            }
                                                                                                                        } else {
                                                                                                                            access$0004 = MessagesStorage.this.database;
                                                                                                                            j2 = 0;
                                                                                                                            objArr3 = new Object[2];
                                                                                                                            holeMessageMinId = 1;
                                                                                                                            objArr3[0] = Long.valueOf(j);
                                                                                                                            objArr3[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                                                            cursor = access$0004.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start >= %d ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                                                                                            if (cursor.next() != null) {
                                                                                                                                chatsToLoad = (long) cursor.intValue(null);
                                                                                                                                if (usersToLoad == null) {
                                                                                                                                    j2 = chatsToLoad;
                                                                                                                                } else {
                                                                                                                                    j2 = chatsToLoad | (((long) usersToLoad) << 32);
                                                                                                                                }
                                                                                                                            }
                                                                                                                            cursor.dispose();
                                                                                                                            cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(replyMessageRandomOwners2)}), new Object[0]);
                                                                                                                            if (cursor.next() == null) {
                                                                                                                                holeMessageMinId2 = holeMessageMinId;
                                                                                                                            } else {
                                                                                                                                holeMessageMinId2 = (long) cursor.intValue(null);
                                                                                                                                if (usersToLoad != null) {
                                                                                                                                    holeMessageMinId2 |= ((long) usersToLoad) << 32;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            cursor.dispose();
                                                                                                                            if (j2 != 0) {
                                                                                                                                max_id_query = replyMessageRandomOwners2;
                                                                                                                            } else if (holeMessageMinId2 == 1) {
                                                                                                                                chatsToLoad = MessagesStorage.this.database;
                                                                                                                                locale = Locale.US;
                                                                                                                                replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                                                objArr = new Object[6];
                                                                                                                                max_id_query = replyMessageRandomOwners2;
                                                                                                                                objArr[0] = Long.valueOf(j);
                                                                                                                                objArr[1] = Long.valueOf(messageMaxId);
                                                                                                                                objArr[2] = Integer.valueOf(i3 / 2);
                                                                                                                                objArr[3] = Long.valueOf(j);
                                                                                                                                objArr[4] = Long.valueOf(messageMaxId);
                                                                                                                                objArr[5] = Integer.valueOf(i3 / 2);
                                                                                                                                cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[null]);
                                                                                                                                offset_query = offset_query3;
                                                                                                                                channelId2 = usersToLoad;
                                                                                                                                lower_id = unreadCountIsLocal;
                                                                                                                                channelId = count_unread;
                                                                                                                            } else {
                                                                                                                                max_id_query = replyMessageRandomOwners2;
                                                                                                                            }
                                                                                                                            if (j2 == null) {
                                                                                                                                j2 = C0539C.NANOS_PER_SECOND;
                                                                                                                                if (usersToLoad != null) {
                                                                                                                                    replyMessageRandomOwners2 = C0539C.NANOS_PER_SECOND | (((long) usersToLoad) << 32);
                                                                                                                                    chatsToLoad = MessagesStorage.this.database;
                                                                                                                                    locale = Locale.US;
                                                                                                                                    replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                                                    objArr3 = new Object[8];
                                                                                                                                    offset_query = offset_query3;
                                                                                                                                    channelId2 = usersToLoad;
                                                                                                                                    objArr3[null] = Long.valueOf(j);
                                                                                                                                    objArr3[1] = Long.valueOf(messageMaxId);
                                                                                                                                    objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                                                                    objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                                                                    objArr3[4] = Long.valueOf(j);
                                                                                                                                    objArr3[5] = Long.valueOf(messageMaxId);
                                                                                                                                    objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                                                                    objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                                                                    cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                                                                    lower_id = unreadCountIsLocal;
                                                                                                                                    channelId = count_unread;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            replyMessageRandomOwners2 = j2;
                                                                                                                            chatsToLoad = MessagesStorage.this.database;
                                                                                                                            locale = Locale.US;
                                                                                                                            replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                                            objArr3 = new Object[8];
                                                                                                                            offset_query = offset_query3;
                                                                                                                            channelId2 = usersToLoad;
                                                                                                                            objArr3[null] = Long.valueOf(j);
                                                                                                                            objArr3[1] = Long.valueOf(messageMaxId);
                                                                                                                            objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                                                            objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                                                            objArr3[4] = Long.valueOf(j);
                                                                                                                            objArr3[5] = Long.valueOf(messageMaxId);
                                                                                                                            objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                                                            objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                                                            cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                                                            lower_id = unreadCountIsLocal;
                                                                                                                            channelId = count_unread;
                                                                                                                        }
                                                                                                                        count_unread = channelId;
                                                                                                                        queryFromServer = replyMessages;
                                                                                                                        j = messageMaxId;
                                                                                                                        unreadCountIsLocal = lower_id;
                                                                                                                        mentions_unread6 = mentions_unread2;
                                                                                                                        queryFromServer3 = num;
                                                                                                                        max_id_override2 = max_id_query;
                                                                                                                        i9 = offset_query;
                                                                                                                    }
                                                                                                                }
                                                                                                                replyMessageRandomOwners2 = i10;
                                                                                                                messageMaxId = j;
                                                                                                                if (replyMessageRandomOwners2 == null) {
                                                                                                                }
                                                                                                                if (chatsToLoad == null) {
                                                                                                                    access$0002 = MessagesStorage.this.database;
                                                                                                                    objArr2 = new Object[3];
                                                                                                                    containMessage = chatsToLoad;
                                                                                                                    objArr2[null] = Long.valueOf(j);
                                                                                                                    objArr2[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                                                    objArr2[2] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                                                    cursor = access$0002.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start < %d AND end > %d", objArr2), new Object[null]);
                                                                                                                    if (cursor.next() == null) {
                                                                                                                        chatsToLoad = null;
                                                                                                                    } else {
                                                                                                                        chatsToLoad = containMessage;
                                                                                                                    }
                                                                                                                    cursor.dispose();
                                                                                                                    sQLiteCursor2 = cursor;
                                                                                                                    containMessage = chatsToLoad;
                                                                                                                } else {
                                                                                                                    sQLiteCursor2 = cursor;
                                                                                                                    containMessage = chatsToLoad;
                                                                                                                }
                                                                                                                if (containMessage) {
                                                                                                                    access$0004 = MessagesStorage.this.database;
                                                                                                                    j2 = 0;
                                                                                                                    objArr3 = new Object[2];
                                                                                                                    holeMessageMinId = 1;
                                                                                                                    objArr3[0] = Long.valueOf(j);
                                                                                                                    objArr3[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                                                    cursor = access$0004.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start >= %d ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                                                                                    if (cursor.next() != null) {
                                                                                                                        chatsToLoad = (long) cursor.intValue(null);
                                                                                                                        if (usersToLoad == null) {
                                                                                                                            j2 = chatsToLoad | (((long) usersToLoad) << 32);
                                                                                                                        } else {
                                                                                                                            j2 = chatsToLoad;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    cursor.dispose();
                                                                                                                    cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(replyMessageRandomOwners2)}), new Object[0]);
                                                                                                                    if (cursor.next() == null) {
                                                                                                                        holeMessageMinId2 = (long) cursor.intValue(null);
                                                                                                                        if (usersToLoad != null) {
                                                                                                                            holeMessageMinId2 |= ((long) usersToLoad) << 32;
                                                                                                                        }
                                                                                                                    } else {
                                                                                                                        holeMessageMinId2 = holeMessageMinId;
                                                                                                                    }
                                                                                                                    cursor.dispose();
                                                                                                                    if (j2 != 0) {
                                                                                                                        max_id_query = replyMessageRandomOwners2;
                                                                                                                    } else if (holeMessageMinId2 == 1) {
                                                                                                                        max_id_query = replyMessageRandomOwners2;
                                                                                                                    } else {
                                                                                                                        chatsToLoad = MessagesStorage.this.database;
                                                                                                                        locale = Locale.US;
                                                                                                                        replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                                        objArr = new Object[6];
                                                                                                                        max_id_query = replyMessageRandomOwners2;
                                                                                                                        objArr[0] = Long.valueOf(j);
                                                                                                                        objArr[1] = Long.valueOf(messageMaxId);
                                                                                                                        objArr[2] = Integer.valueOf(i3 / 2);
                                                                                                                        objArr[3] = Long.valueOf(j);
                                                                                                                        objArr[4] = Long.valueOf(messageMaxId);
                                                                                                                        objArr[5] = Integer.valueOf(i3 / 2);
                                                                                                                        cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[null]);
                                                                                                                        offset_query = offset_query3;
                                                                                                                        channelId2 = usersToLoad;
                                                                                                                        lower_id = unreadCountIsLocal;
                                                                                                                        channelId = count_unread;
                                                                                                                    }
                                                                                                                    if (j2 == null) {
                                                                                                                        j2 = C0539C.NANOS_PER_SECOND;
                                                                                                                        if (usersToLoad != null) {
                                                                                                                            replyMessageRandomOwners2 = C0539C.NANOS_PER_SECOND | (((long) usersToLoad) << 32);
                                                                                                                            chatsToLoad = MessagesStorage.this.database;
                                                                                                                            locale = Locale.US;
                                                                                                                            replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                                            objArr3 = new Object[8];
                                                                                                                            offset_query = offset_query3;
                                                                                                                            channelId2 = usersToLoad;
                                                                                                                            objArr3[null] = Long.valueOf(j);
                                                                                                                            objArr3[1] = Long.valueOf(messageMaxId);
                                                                                                                            objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                                                            objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                                                            objArr3[4] = Long.valueOf(j);
                                                                                                                            objArr3[5] = Long.valueOf(messageMaxId);
                                                                                                                            objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                                                            objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                                                            cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                                                            lower_id = unreadCountIsLocal;
                                                                                                                            channelId = count_unread;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    replyMessageRandomOwners2 = j2;
                                                                                                                    chatsToLoad = MessagesStorage.this.database;
                                                                                                                    locale = Locale.US;
                                                                                                                    replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                                    objArr3 = new Object[8];
                                                                                                                    offset_query = offset_query3;
                                                                                                                    channelId2 = usersToLoad;
                                                                                                                    objArr3[null] = Long.valueOf(j);
                                                                                                                    objArr3[1] = Long.valueOf(messageMaxId);
                                                                                                                    objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                                                    objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                                                    objArr3[4] = Long.valueOf(j);
                                                                                                                    objArr3[5] = Long.valueOf(messageMaxId);
                                                                                                                    objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                                                    objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                                                    cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                                                    lower_id = unreadCountIsLocal;
                                                                                                                    channelId = count_unread;
                                                                                                                } else {
                                                                                                                    offset_query = offset_query3;
                                                                                                                    channelId2 = usersToLoad;
                                                                                                                    max_id_query = replyMessageRandomOwners2;
                                                                                                                    if (i3 != 2) {
                                                                                                                        existingUnreadCount = 0;
                                                                                                                        chatsToLoad = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid != 0 AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                                                                        if (chatsToLoad.next()) {
                                                                                                                            existingUnreadCount = chatsToLoad.intValue(0);
                                                                                                                        }
                                                                                                                        chatsToLoad.dispose();
                                                                                                                        channelId = count_unread;
                                                                                                                        if (existingUnreadCount != channelId) {
                                                                                                                            lower_id = true;
                                                                                                                            access$0003 = MessagesStorage.this.database;
                                                                                                                            replyMessageOwners = new Object[6];
                                                                                                                            cursor3 = chatsToLoad;
                                                                                                                            replyMessageOwners[null] = Long.valueOf(j);
                                                                                                                            replyMessageOwners[1] = Long.valueOf(messageMaxId);
                                                                                                                            replyMessageOwners[2] = Integer.valueOf(i3 / 2);
                                                                                                                            replyMessageOwners[3] = Long.valueOf(j);
                                                                                                                            replyMessageOwners[4] = Long.valueOf(messageMaxId);
                                                                                                                            replyMessageOwners[5] = Integer.valueOf(i3 / 2);
                                                                                                                            cursor = access$0003.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", replyMessageOwners), new Object[null]);
                                                                                                                        } else {
                                                                                                                            i12 = existingUnreadCount;
                                                                                                                            cursor3 = chatsToLoad;
                                                                                                                            cursor = null;
                                                                                                                            lower_id = unreadCountIsLocal;
                                                                                                                        }
                                                                                                                    } else {
                                                                                                                        channelId = count_unread;
                                                                                                                        cursor = null;
                                                                                                                        lower_id = unreadCountIsLocal;
                                                                                                                    }
                                                                                                                }
                                                                                                                count_unread = channelId;
                                                                                                                queryFromServer = replyMessages;
                                                                                                                j = messageMaxId;
                                                                                                                unreadCountIsLocal = lower_id;
                                                                                                                mentions_unread6 = mentions_unread2;
                                                                                                                queryFromServer3 = num;
                                                                                                                max_id_override2 = max_id_query;
                                                                                                                i9 = offset_query;
                                                                                                            } catch (Throwable e422222222222222222NUM) {
                                                                                                                e2 = e422222222222222222NUM;
                                                                                                                i2 = usersToLoad;
                                                                                                                queryFromServer = replyMessages;
                                                                                                                messages_messages = messages_messages2;
                                                                                                                res = messages_messages;
                                                                                                                res.messages.clear();
                                                                                                                res.chats.clear();
                                                                                                                res.users.clear();
                                                                                                                FileLog.m3e(e2);
                                                                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                            } catch (Throwable e4222222222222222222NUM) {
                                                                                                                obj = e4222222222222222222NUM;
                                                                                                                i2 = usersToLoad;
                                                                                                                queryFromServer = replyMessages;
                                                                                                                res2 = messages_messages2;
                                                                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                                throw tL_messages_messages;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            } catch (Throwable e42222222222222222222NUM) {
                                                                                                i3 = count_query;
                                                                                                e2 = e42222222222222222222NUM;
                                                                                                i9 = offset_query3;
                                                                                                arrayList = usersToLoad;
                                                                                                queryFromServer = replyMessages;
                                                                                                messages_messages = messages_messages2;
                                                                                                z = num;
                                                                                                res = messages_messages;
                                                                                                res.messages.clear();
                                                                                                res.chats.clear();
                                                                                                res.users.clear();
                                                                                                FileLog.m3e(e2);
                                                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                            } catch (Throwable e422222222222222222222NUM) {
                                                                                                i3 = count_query;
                                                                                                tL_messages_messages = e422222222222222222222NUM;
                                                                                                i9 = offset_query3;
                                                                                                arrayList = usersToLoad;
                                                                                                queryFromServer = replyMessages;
                                                                                                res2 = messages_messages2;
                                                                                                z = num;
                                                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                throw tL_messages_messages;
                                                                                            }
                                                                                        }
                                                                                        i3 = count_query;
                                                                                        replyMessageRandomOwners2 = i10;
                                                                                        messageMaxId = j;
                                                                                        if (replyMessageRandomOwners2 == null) {
                                                                                        }
                                                                                        if (chatsToLoad == null) {
                                                                                            sQLiteCursor2 = cursor;
                                                                                            containMessage = chatsToLoad;
                                                                                        } else {
                                                                                            access$0002 = MessagesStorage.this.database;
                                                                                            objArr2 = new Object[3];
                                                                                            containMessage = chatsToLoad;
                                                                                            objArr2[null] = Long.valueOf(j);
                                                                                            objArr2[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                            objArr2[2] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                            cursor = access$0002.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start < %d AND end > %d", objArr2), new Object[null]);
                                                                                            if (cursor.next() == null) {
                                                                                                chatsToLoad = containMessage;
                                                                                            } else {
                                                                                                chatsToLoad = null;
                                                                                            }
                                                                                            cursor.dispose();
                                                                                            sQLiteCursor2 = cursor;
                                                                                            containMessage = chatsToLoad;
                                                                                        }
                                                                                        if (containMessage) {
                                                                                            offset_query = offset_query3;
                                                                                            channelId2 = usersToLoad;
                                                                                            max_id_query = replyMessageRandomOwners2;
                                                                                            if (i3 != 2) {
                                                                                                channelId = count_unread;
                                                                                                cursor = null;
                                                                                                lower_id = unreadCountIsLocal;
                                                                                            } else {
                                                                                                existingUnreadCount = 0;
                                                                                                chatsToLoad = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid != 0 AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                                                if (chatsToLoad.next()) {
                                                                                                    existingUnreadCount = chatsToLoad.intValue(0);
                                                                                                }
                                                                                                chatsToLoad.dispose();
                                                                                                channelId = count_unread;
                                                                                                if (existingUnreadCount != channelId) {
                                                                                                    i12 = existingUnreadCount;
                                                                                                    cursor3 = chatsToLoad;
                                                                                                    cursor = null;
                                                                                                    lower_id = unreadCountIsLocal;
                                                                                                } else {
                                                                                                    lower_id = true;
                                                                                                    access$0003 = MessagesStorage.this.database;
                                                                                                    replyMessageOwners = new Object[6];
                                                                                                    cursor3 = chatsToLoad;
                                                                                                    replyMessageOwners[null] = Long.valueOf(j);
                                                                                                    replyMessageOwners[1] = Long.valueOf(messageMaxId);
                                                                                                    replyMessageOwners[2] = Integer.valueOf(i3 / 2);
                                                                                                    replyMessageOwners[3] = Long.valueOf(j);
                                                                                                    replyMessageOwners[4] = Long.valueOf(messageMaxId);
                                                                                                    replyMessageOwners[5] = Integer.valueOf(i3 / 2);
                                                                                                    cursor = access$0003.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", replyMessageOwners), new Object[null]);
                                                                                                }
                                                                                            }
                                                                                        } else {
                                                                                            access$0004 = MessagesStorage.this.database;
                                                                                            j2 = 0;
                                                                                            objArr3 = new Object[2];
                                                                                            holeMessageMinId = 1;
                                                                                            objArr3[0] = Long.valueOf(j);
                                                                                            objArr3[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                            cursor = access$0004.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start >= %d ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                                                            if (cursor.next() != null) {
                                                                                                chatsToLoad = (long) cursor.intValue(null);
                                                                                                if (usersToLoad == null) {
                                                                                                    j2 = chatsToLoad;
                                                                                                } else {
                                                                                                    j2 = chatsToLoad | (((long) usersToLoad) << 32);
                                                                                                }
                                                                                            }
                                                                                            cursor.dispose();
                                                                                            cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(replyMessageRandomOwners2)}), new Object[0]);
                                                                                            if (cursor.next() == null) {
                                                                                                holeMessageMinId2 = holeMessageMinId;
                                                                                            } else {
                                                                                                holeMessageMinId2 = (long) cursor.intValue(null);
                                                                                                if (usersToLoad != null) {
                                                                                                    holeMessageMinId2 |= ((long) usersToLoad) << 32;
                                                                                                }
                                                                                            }
                                                                                            cursor.dispose();
                                                                                            if (j2 != 0) {
                                                                                                max_id_query = replyMessageRandomOwners2;
                                                                                            } else if (holeMessageMinId2 == 1) {
                                                                                                chatsToLoad = MessagesStorage.this.database;
                                                                                                locale = Locale.US;
                                                                                                replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                objArr = new Object[6];
                                                                                                max_id_query = replyMessageRandomOwners2;
                                                                                                objArr[0] = Long.valueOf(j);
                                                                                                objArr[1] = Long.valueOf(messageMaxId);
                                                                                                objArr[2] = Integer.valueOf(i3 / 2);
                                                                                                objArr[3] = Long.valueOf(j);
                                                                                                objArr[4] = Long.valueOf(messageMaxId);
                                                                                                objArr[5] = Integer.valueOf(i3 / 2);
                                                                                                cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[null]);
                                                                                                offset_query = offset_query3;
                                                                                                channelId2 = usersToLoad;
                                                                                                lower_id = unreadCountIsLocal;
                                                                                                channelId = count_unread;
                                                                                            } else {
                                                                                                max_id_query = replyMessageRandomOwners2;
                                                                                            }
                                                                                            if (j2 == null) {
                                                                                                j2 = C0539C.NANOS_PER_SECOND;
                                                                                                if (usersToLoad != null) {
                                                                                                    replyMessageRandomOwners2 = C0539C.NANOS_PER_SECOND | (((long) usersToLoad) << 32);
                                                                                                    chatsToLoad = MessagesStorage.this.database;
                                                                                                    locale = Locale.US;
                                                                                                    replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                    objArr3 = new Object[8];
                                                                                                    offset_query = offset_query3;
                                                                                                    channelId2 = usersToLoad;
                                                                                                    objArr3[null] = Long.valueOf(j);
                                                                                                    objArr3[1] = Long.valueOf(messageMaxId);
                                                                                                    objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                                    objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                                    objArr3[4] = Long.valueOf(j);
                                                                                                    objArr3[5] = Long.valueOf(messageMaxId);
                                                                                                    objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                                    objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                                    cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                                    lower_id = unreadCountIsLocal;
                                                                                                    channelId = count_unread;
                                                                                                }
                                                                                            }
                                                                                            replyMessageRandomOwners2 = j2;
                                                                                            chatsToLoad = MessagesStorage.this.database;
                                                                                            locale = Locale.US;
                                                                                            replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                            objArr3 = new Object[8];
                                                                                            offset_query = offset_query3;
                                                                                            channelId2 = usersToLoad;
                                                                                            objArr3[null] = Long.valueOf(j);
                                                                                            objArr3[1] = Long.valueOf(messageMaxId);
                                                                                            objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                            objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                            objArr3[4] = Long.valueOf(j);
                                                                                            objArr3[5] = Long.valueOf(messageMaxId);
                                                                                            objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                            objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                            cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                            lower_id = unreadCountIsLocal;
                                                                                            channelId = count_unread;
                                                                                        }
                                                                                        count_unread = channelId;
                                                                                        queryFromServer = replyMessages;
                                                                                        j = messageMaxId;
                                                                                        unreadCountIsLocal = lower_id;
                                                                                        mentions_unread6 = mentions_unread2;
                                                                                        queryFromServer3 = num;
                                                                                        max_id_override2 = max_id_query;
                                                                                        i9 = offset_query;
                                                                                    }
                                                                                }
                                                                                if (i3 != 1) {
                                                                                    try {
                                                                                        replyMessageOwners = MessagesStorage.this.database;
                                                                                        objArr3 = new Object[2];
                                                                                        holeMessageId = null;
                                                                                        objArr3[0] = Long.valueOf(j);
                                                                                        objArr3[1] = Integer.valueOf(i2);
                                                                                        cursor = replyMessageOwners.queryFinalized(String.format(Locale.US, "SELECT start, end FROM messages_holes WHERE uid = %d AND start >= %d AND start != 1 AND end != 1 ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                                                        if (cursor.next() == null) {
                                                                                            usersToLoad = (long) cursor.intValue(null);
                                                                                            if (channelId != 0) {
                                                                                                usersToLoad |= ((long) channelId) << 32;
                                                                                            }
                                                                                        } else {
                                                                                            usersToLoad = holeMessageId;
                                                                                        }
                                                                                        cursor.dispose();
                                                                                        if (usersToLoad == null) {
                                                                                            replyMessageOwners = MessagesStorage.this.database;
                                                                                            replyMessageRandomOwners2 = Locale.US;
                                                                                            str4 = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date >= %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d";
                                                                                            objArr3 = new Object[5];
                                                                                            count_unread = chatsToLoad;
                                                                                            channelId3 = channelId;
                                                                                            try {
                                                                                                objArr3[0] = Long.valueOf(j);
                                                                                                objArr3[1] = Integer.valueOf(i4);
                                                                                                objArr3[2] = Long.valueOf(messageMaxId);
                                                                                                objArr3[3] = Long.valueOf(usersToLoad);
                                                                                                objArr3[4] = Integer.valueOf(count_query);
                                                                                                cursor = replyMessageOwners.queryFinalized(String.format(replyMessageRandomOwners2, str4, objArr3), new Object[null]);
                                                                                            } catch (Throwable e4222222222222222222222NUM) {
                                                                                                e2 = e4222222222222222222222NUM;
                                                                                                i3 = count_query;
                                                                                                i9 = offset_query3;
                                                                                                queryFromServer = replyMessages;
                                                                                                j = messageMaxId;
                                                                                                messages_messages = messages_messages2;
                                                                                                z = num;
                                                                                                i2 = channelId3;
                                                                                                res = messages_messages;
                                                                                                res.messages.clear();
                                                                                                res.chats.clear();
                                                                                                res.users.clear();
                                                                                                FileLog.m3e(e2);
                                                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                            } catch (Throwable e42222222222222222222222NUM) {
                                                                                                tL_messages_messages = e42222222222222222222222NUM;
                                                                                                i3 = count_query;
                                                                                                i9 = offset_query3;
                                                                                                queryFromServer = replyMessages;
                                                                                                j = messageMaxId;
                                                                                                res2 = messages_messages2;
                                                                                                z = num;
                                                                                                i2 = channelId3;
                                                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                throw tL_messages_messages;
                                                                                            }
                                                                                        }
                                                                                        sQLiteCursor3 = cursor;
                                                                                        count_unread = chatsToLoad;
                                                                                        channelId3 = channelId;
                                                                                        cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date >= %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d", new Object[]{Long.valueOf(j), Integer.valueOf(i4), Long.valueOf(messageMaxId), Integer.valueOf(count_query)}), new Object[0]);
                                                                                        i3 = count_query;
                                                                                        i9 = offset_query3;
                                                                                        queryFromServer = replyMessages;
                                                                                        j = messageMaxId;
                                                                                        mentions_unread6 = mentions_unread2;
                                                                                        queryFromServer3 = num;
                                                                                        max_id_override2 = i10;
                                                                                        channelId2 = channelId3;
                                                                                    } catch (Throwable e422222222222222222222222NUM) {
                                                                                        count_unread = chatsToLoad;
                                                                                        e2 = e422222222222222222222222NUM;
                                                                                        i2 = channelId;
                                                                                        i3 = count_query;
                                                                                        i9 = offset_query3;
                                                                                        queryFromServer = replyMessages;
                                                                                        j = messageMaxId;
                                                                                        messages_messages = messages_messages2;
                                                                                        z = num;
                                                                                        res = messages_messages;
                                                                                        res.messages.clear();
                                                                                        res.chats.clear();
                                                                                        res.users.clear();
                                                                                        FileLog.m3e(e2);
                                                                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                    } catch (Throwable e4222222222222222222222222NUM) {
                                                                                        count_unread = chatsToLoad;
                                                                                        tL_messages_messages = e4222222222222222222222222NUM;
                                                                                        i2 = channelId;
                                                                                        i3 = count_query;
                                                                                        i9 = offset_query3;
                                                                                        queryFromServer = replyMessages;
                                                                                        j = messageMaxId;
                                                                                        res2 = messages_messages2;
                                                                                        z = num;
                                                                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                        throw tL_messages_messages;
                                                                                    }
                                                                                }
                                                                                sQLiteCursor = cursor;
                                                                                count_unread = chatsToLoad;
                                                                                channelId3 = channelId;
                                                                                try {
                                                                                    if (i4 == 0) {
                                                                                        if (messageMaxId == 0) {
                                                                                            j3 = 0;
                                                                                            try {
                                                                                                cursor4 = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(i2)}), new Object[0]);
                                                                                                if (cursor4.next() != null) {
                                                                                                    try {
                                                                                                        j3 = (long) cursor4.intValue(null);
                                                                                                        if (channelId3 != 0) {
                                                                                                            usersToLoad = channelId3;
                                                                                                            j3 |= ((long) usersToLoad) << 32;
                                                                                                            cursor4.dispose();
                                                                                                            if (j3 == null) {
                                                                                                                access$0004 = MessagesStorage.this.database;
                                                                                                                replyMessageOwners = Locale.US;
                                                                                                                replyMessageRandomOwners2 = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d AND m.mid < %d AND (m.mid >= %d OR m.mid < 0) ORDER BY m.date DESC, m.mid DESC LIMIT %d";
                                                                                                                objArr = new Object[5];
                                                                                                                offset_query2 = offset_query3;
                                                                                                                channelId4 = usersToLoad;
                                                                                                                try {
                                                                                                                    objArr[null] = Long.valueOf(j);
                                                                                                                    objArr[1] = Integer.valueOf(i4);
                                                                                                                    objArr[2] = Long.valueOf(messageMaxId);
                                                                                                                    objArr[3] = Long.valueOf(j3);
                                                                                                                    objArr[4] = Integer.valueOf(count_query);
                                                                                                                    cursor = access$0004.queryFinalized(String.format(replyMessageOwners, replyMessageRandomOwners2, objArr), new Object[null]);
                                                                                                                } catch (Throwable e42222222222222222222222222NUM) {
                                                                                                                    e2 = e42222222222222222222222222NUM;
                                                                                                                    i3 = count_query;
                                                                                                                    queryFromServer = replyMessages;
                                                                                                                    j = messageMaxId;
                                                                                                                    messages_messages = messages_messages2;
                                                                                                                    z = num;
                                                                                                                    i9 = offset_query2;
                                                                                                                    res = messages_messages;
                                                                                                                    res.messages.clear();
                                                                                                                    res.chats.clear();
                                                                                                                    res.users.clear();
                                                                                                                    FileLog.m3e(e2);
                                                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                                } catch (Throwable e422222222222222222222222222NUM) {
                                                                                                                    tL_messages_messages = e422222222222222222222222222NUM;
                                                                                                                    i3 = count_query;
                                                                                                                    queryFromServer = replyMessages;
                                                                                                                    j = messageMaxId;
                                                                                                                    res2 = messages_messages2;
                                                                                                                    z = num;
                                                                                                                    i9 = offset_query2;
                                                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                                    throw tL_messages_messages;
                                                                                                                }
                                                                                                            }
                                                                                                            offset_query2 = offset_query3;
                                                                                                            channelId4 = usersToLoad;
                                                                                                            cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d AND m.mid < %d ORDER BY m.date DESC, m.mid DESC LIMIT %d", new Object[]{Long.valueOf(j), Integer.valueOf(i4), Long.valueOf(messageMaxId), Integer.valueOf(count_query)}), new Object[0]);
                                                                                                            i3 = count_query;
                                                                                                            queryFromServer = replyMessages;
                                                                                                            j = messageMaxId;
                                                                                                            mentions_unread6 = mentions_unread2;
                                                                                                            queryFromServer3 = num;
                                                                                                            max_id_override2 = i10;
                                                                                                            i9 = offset_query2;
                                                                                                        }
                                                                                                    } catch (Throwable e4222222222222222222222222222NUM) {
                                                                                                        e2 = e4222222222222222222222222222NUM;
                                                                                                        i3 = count_query;
                                                                                                        i9 = offset_query3;
                                                                                                        queryFromServer = replyMessages;
                                                                                                        j = messageMaxId;
                                                                                                        messages_messages = messages_messages2;
                                                                                                        z = num;
                                                                                                        i2 = channelId3;
                                                                                                        res = messages_messages;
                                                                                                        res.messages.clear();
                                                                                                        res.chats.clear();
                                                                                                        res.users.clear();
                                                                                                        FileLog.m3e(e2);
                                                                                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                    } catch (Throwable e42222222222222222222222222222NUM) {
                                                                                                        tL_messages_messages = e42222222222222222222222222222NUM;
                                                                                                        i3 = count_query;
                                                                                                        i9 = offset_query3;
                                                                                                        queryFromServer = replyMessages;
                                                                                                        j = messageMaxId;
                                                                                                        res2 = messages_messages2;
                                                                                                        z = num;
                                                                                                        i2 = channelId3;
                                                                                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                        throw tL_messages_messages;
                                                                                                    }
                                                                                                }
                                                                                                usersToLoad = channelId3;
                                                                                                try {
                                                                                                    cursor4.dispose();
                                                                                                    if (j3 == null) {
                                                                                                        offset_query2 = offset_query3;
                                                                                                        channelId4 = usersToLoad;
                                                                                                        cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d AND m.mid < %d ORDER BY m.date DESC, m.mid DESC LIMIT %d", new Object[]{Long.valueOf(j), Integer.valueOf(i4), Long.valueOf(messageMaxId), Integer.valueOf(count_query)}), new Object[0]);
                                                                                                    } else {
                                                                                                        access$0004 = MessagesStorage.this.database;
                                                                                                        replyMessageOwners = Locale.US;
                                                                                                        replyMessageRandomOwners2 = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d AND m.mid < %d AND (m.mid >= %d OR m.mid < 0) ORDER BY m.date DESC, m.mid DESC LIMIT %d";
                                                                                                        objArr = new Object[5];
                                                                                                        offset_query2 = offset_query3;
                                                                                                        channelId4 = usersToLoad;
                                                                                                        objArr[null] = Long.valueOf(j);
                                                                                                        objArr[1] = Integer.valueOf(i4);
                                                                                                        objArr[2] = Long.valueOf(messageMaxId);
                                                                                                        objArr[3] = Long.valueOf(j3);
                                                                                                        objArr[4] = Integer.valueOf(count_query);
                                                                                                        cursor = access$0004.queryFinalized(String.format(replyMessageOwners, replyMessageRandomOwners2, objArr), new Object[null]);
                                                                                                    }
                                                                                                    i3 = count_query;
                                                                                                    queryFromServer = replyMessages;
                                                                                                    j = messageMaxId;
                                                                                                    mentions_unread6 = mentions_unread2;
                                                                                                    queryFromServer3 = num;
                                                                                                    max_id_override2 = i10;
                                                                                                    i9 = offset_query2;
                                                                                                } catch (Throwable e422222222222222222222222222222NUM) {
                                                                                                    e2 = e422222222222222222222222222222NUM;
                                                                                                    i3 = count_query;
                                                                                                    arrayList = usersToLoad;
                                                                                                    queryFromServer = replyMessages;
                                                                                                    j = messageMaxId;
                                                                                                    messages_messages = messages_messages2;
                                                                                                    z = num;
                                                                                                    i9 = offset_query3;
                                                                                                    res = messages_messages;
                                                                                                    res.messages.clear();
                                                                                                    res.chats.clear();
                                                                                                    res.users.clear();
                                                                                                    FileLog.m3e(e2);
                                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                } catch (Throwable e4222222222222222222222222222222NUM) {
                                                                                                    tL_messages_messages = e4222222222222222222222222222222NUM;
                                                                                                    i3 = count_query;
                                                                                                    arrayList = usersToLoad;
                                                                                                    queryFromServer = replyMessages;
                                                                                                    j = messageMaxId;
                                                                                                    res2 = messages_messages2;
                                                                                                    z = num;
                                                                                                    i9 = offset_query3;
                                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                    throw tL_messages_messages;
                                                                                                }
                                                                                            } catch (Throwable e42222222222222222222222222222222NUM) {
                                                                                                e2 = e42222222222222222222222222222222NUM;
                                                                                                i3 = count_query;
                                                                                                queryFromServer = replyMessages;
                                                                                                j = messageMaxId;
                                                                                                messages_messages = messages_messages2;
                                                                                                z = num;
                                                                                                i2 = channelId3;
                                                                                                i9 = offset_query3;
                                                                                                res = messages_messages;
                                                                                                res.messages.clear();
                                                                                                res.chats.clear();
                                                                                                res.users.clear();
                                                                                                FileLog.m3e(e2);
                                                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                            } catch (Throwable e422222222222222222222222222222222NUM) {
                                                                                                tL_messages_messages = e422222222222222222222222222222222NUM;
                                                                                                i3 = count_query;
                                                                                                queryFromServer = replyMessages;
                                                                                                j = messageMaxId;
                                                                                                res2 = messages_messages2;
                                                                                                z = num;
                                                                                                i2 = channelId3;
                                                                                                i9 = offset_query3;
                                                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                throw tL_messages_messages;
                                                                                            }
                                                                                        }
                                                                                        offset_query2 = offset_query3;
                                                                                        channelId4 = channelId3;
                                                                                        try {
                                                                                            access$000 = MessagesStorage.this.database;
                                                                                            chatsToLoad = Locale.US;
                                                                                            str = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d,%d";
                                                                                            usersToLoad = new Object[4];
                                                                                            usersToLoad[0] = Long.valueOf(j);
                                                                                            usersToLoad[1] = Integer.valueOf(i4);
                                                                                            offset_query3 = offset_query2;
                                                                                        } catch (Throwable e4222222222222222222222222222222222NUM) {
                                                                                            e2 = e4222222222222222222222222222222222NUM;
                                                                                            i3 = count_query;
                                                                                            i9 = offset_query2;
                                                                                            queryFromServer = replyMessages;
                                                                                            j = messageMaxId;
                                                                                            messages_messages = messages_messages2;
                                                                                            z = num;
                                                                                            i2 = channelId4;
                                                                                            res = messages_messages;
                                                                                            res.messages.clear();
                                                                                            res.chats.clear();
                                                                                            res.users.clear();
                                                                                            FileLog.m3e(e2);
                                                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                        } catch (Throwable e42222222222222222222222222222222222NUM) {
                                                                                            tL_messages_messages = e42222222222222222222222222222222222NUM;
                                                                                            i3 = count_query;
                                                                                            i9 = offset_query2;
                                                                                            queryFromServer = replyMessages;
                                                                                            j = messageMaxId;
                                                                                            res2 = messages_messages2;
                                                                                            z = num;
                                                                                            i2 = channelId4;
                                                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                            throw tL_messages_messages;
                                                                                        }
                                                                                        try {
                                                                                            usersToLoad[2] = Integer.valueOf(offset_query3);
                                                                                            usersToLoad[3] = Integer.valueOf(count_query);
                                                                                            cursor = access$000.queryFinalized(String.format(chatsToLoad, str, usersToLoad), new Object[0]);
                                                                                            i3 = count_query;
                                                                                            i9 = offset_query3;
                                                                                            queryFromServer = replyMessages;
                                                                                            j = messageMaxId;
                                                                                            mentions_unread6 = mentions_unread2;
                                                                                            queryFromServer3 = num;
                                                                                            max_id_override2 = i10;
                                                                                        } catch (Throwable e422222222222222222222222222222222222NUM) {
                                                                                            e2 = e422222222222222222222222222222222222NUM;
                                                                                            i3 = count_query;
                                                                                            i9 = offset_query3;
                                                                                            queryFromServer = replyMessages;
                                                                                            j = messageMaxId;
                                                                                            messages_messages = messages_messages2;
                                                                                            z = num;
                                                                                            res = messages_messages;
                                                                                            res.messages.clear();
                                                                                            res.chats.clear();
                                                                                            res.users.clear();
                                                                                            FileLog.m3e(e2);
                                                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                        } catch (Throwable e4222222222222222222222222222222222222NUM) {
                                                                                            tL_messages_messages = e4222222222222222222222222222222222222NUM;
                                                                                            i3 = count_query;
                                                                                            i9 = offset_query3;
                                                                                            queryFromServer = replyMessages;
                                                                                            j = messageMaxId;
                                                                                            res2 = messages_messages2;
                                                                                            z = num;
                                                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                            throw tL_messages_messages;
                                                                                        }
                                                                                        channelId2 = channelId4;
                                                                                    } else {
                                                                                        channelId4 = channelId3;
                                                                                        try {
                                                                                            cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT max(mid) FROM messages WHERE uid = %d AND mid > 0", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                                            if (cursor.next() != null) {
                                                                                                last_message_id = cursor.intValue(null);
                                                                                            }
                                                                                            cursor.dispose();
                                                                                            usersToLoad = MessagesStorage.this.database;
                                                                                            objArr2 = new Object[1];
                                                                                            holeMessageId2 = null;
                                                                                            objArr2[0] = Long.valueOf(j);
                                                                                            cursor = usersToLoad.queryFinalized(String.format(Locale.US, "SELECT max(end) FROM messages_holes WHERE uid = %d", objArr2), new Object[0]);
                                                                                            if (cursor.next() == null) {
                                                                                                try {
                                                                                                    chatsToLoad = (long) cursor.intValue(null);
                                                                                                    if (channelId4 == 0) {
                                                                                                        usersToLoad = channelId4;
                                                                                                        chatsToLoad |= ((long) usersToLoad) << 32;
                                                                                                    } else {
                                                                                                        usersToLoad = channelId4;
                                                                                                    }
                                                                                                } catch (Throwable e42222222222222222222222222222222222222NUM) {
                                                                                                    e2 = e42222222222222222222222222222222222222NUM;
                                                                                                    i3 = count_query;
                                                                                                    i9 = offset_query3;
                                                                                                    queryFromServer = replyMessages;
                                                                                                    j = messageMaxId;
                                                                                                    messages_messages = messages_messages2;
                                                                                                    z = num;
                                                                                                    i2 = channelId4;
                                                                                                    res = messages_messages;
                                                                                                    res.messages.clear();
                                                                                                    res.chats.clear();
                                                                                                    res.users.clear();
                                                                                                    FileLog.m3e(e2);
                                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                } catch (Throwable e422222222222222222222222222222222222222NUM) {
                                                                                                    tL_messages_messages = e422222222222222222222222222222222222222NUM;
                                                                                                    i3 = count_query;
                                                                                                    i9 = offset_query3;
                                                                                                    queryFromServer = replyMessages;
                                                                                                    j = messageMaxId;
                                                                                                    res2 = messages_messages2;
                                                                                                    z = num;
                                                                                                    i2 = channelId4;
                                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                    throw tL_messages_messages;
                                                                                                }
                                                                                            }
                                                                                            usersToLoad = channelId4;
                                                                                            chatsToLoad = holeMessageId2;
                                                                                        } catch (Throwable e4222222222222222222222222222222222222222NUM) {
                                                                                            j = messageMaxId;
                                                                                            e2 = e4222222222222222222222222222222222222222NUM;
                                                                                            i3 = count_query;
                                                                                            i9 = offset_query3;
                                                                                            queryFromServer = replyMessages;
                                                                                            messages_messages = messages_messages2;
                                                                                            z = num;
                                                                                            i2 = channelId4;
                                                                                            res = messages_messages;
                                                                                            res.messages.clear();
                                                                                            res.chats.clear();
                                                                                            res.users.clear();
                                                                                            FileLog.m3e(e2);
                                                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                        } catch (Throwable e42222222222222222222222222222222222222222NUM) {
                                                                                            j = messageMaxId;
                                                                                            tL_messages_messages = e42222222222222222222222222222222222222222NUM;
                                                                                            i3 = count_query;
                                                                                            i9 = offset_query3;
                                                                                            queryFromServer = replyMessages;
                                                                                            res2 = messages_messages2;
                                                                                            z = num;
                                                                                            i2 = channelId4;
                                                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                            throw tL_messages_messages;
                                                                                        }
                                                                                        try {
                                                                                            cursor.dispose();
                                                                                            if (chatsToLoad == null) {
                                                                                                access$0004 = MessagesStorage.this.database;
                                                                                                replyMessageOwners = Locale.US;
                                                                                                replyMessageRandomOwners2 = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND (m.mid >= %d OR m.mid < 0) ORDER BY m.date DESC, m.mid DESC LIMIT %d,%d";
                                                                                                objArr = new Object[4];
                                                                                                j = messageMaxId;
                                                                                                try {
                                                                                                    objArr[0] = Long.valueOf(j);
                                                                                                    objArr[1] = Long.valueOf(chatsToLoad);
                                                                                                    objArr[2] = Integer.valueOf(offset_query3);
                                                                                                    objArr[3] = Integer.valueOf(count_query);
                                                                                                    cursor = access$0004.queryFinalized(String.format(replyMessageOwners, replyMessageRandomOwners2, objArr), new Object[0]);
                                                                                                } catch (Throwable e422222222222222222222222222222222222222222NUM) {
                                                                                                    e2 = e422222222222222222222222222222222222222222NUM;
                                                                                                    i3 = count_query;
                                                                                                    i2 = usersToLoad;
                                                                                                    queryFromServer = replyMessages;
                                                                                                    messages_messages = messages_messages2;
                                                                                                    res = messages_messages;
                                                                                                    res.messages.clear();
                                                                                                    res.chats.clear();
                                                                                                    res.users.clear();
                                                                                                    FileLog.m3e(e2);
                                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                } catch (Throwable e4222222222222222222222222222222222222222222NUM) {
                                                                                                    tL_messages_messages = e4222222222222222222222222222222222222222222NUM;
                                                                                                    i3 = count_query;
                                                                                                    i2 = usersToLoad;
                                                                                                    queryFromServer = replyMessages;
                                                                                                    res2 = messages_messages2;
                                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                    throw tL_messages_messages;
                                                                                                }
                                                                                            }
                                                                                            cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d ORDER BY m.date DESC, m.mid DESC LIMIT %d,%d", new Object[]{Long.valueOf(j), Integer.valueOf(offset_query3), Integer.valueOf(count_query)}), new Object[0]);
                                                                                            i3 = count_query;
                                                                                            i9 = offset_query3;
                                                                                            channelId2 = usersToLoad;
                                                                                            queryFromServer = replyMessages;
                                                                                            mentions_unread6 = mentions_unread2;
                                                                                            queryFromServer3 = num;
                                                                                            max_id_override2 = i10;
                                                                                        } catch (Throwable e42222222222222222222222222222222222222222222NUM) {
                                                                                            j = messageMaxId;
                                                                                            e2 = e42222222222222222222222222222222222222222222NUM;
                                                                                            i3 = count_query;
                                                                                            i9 = offset_query3;
                                                                                            arrayList = usersToLoad;
                                                                                            queryFromServer = replyMessages;
                                                                                            messages_messages = messages_messages2;
                                                                                            z = num;
                                                                                            res = messages_messages;
                                                                                            res.messages.clear();
                                                                                            res.chats.clear();
                                                                                            res.users.clear();
                                                                                            FileLog.m3e(e2);
                                                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                        } catch (Throwable e422222222222222222222222222222222222222222222NUM) {
                                                                                            j = messageMaxId;
                                                                                            tL_messages_messages = e422222222222222222222222222222222222222222222NUM;
                                                                                            i3 = count_query;
                                                                                            i9 = offset_query3;
                                                                                            arrayList = usersToLoad;
                                                                                            queryFromServer = replyMessages;
                                                                                            res2 = messages_messages2;
                                                                                            z = num;
                                                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                            throw tL_messages_messages;
                                                                                        }
                                                                                    }
                                                                                } catch (Throwable e4222222222222222222222222222222222222222222222NUM) {
                                                                                    j = messageMaxId;
                                                                                    e2 = e4222222222222222222222222222222222222222222222NUM;
                                                                                    i3 = count_query;
                                                                                    i9 = offset_query3;
                                                                                    queryFromServer = replyMessages;
                                                                                    messages_messages = messages_messages2;
                                                                                    z = num;
                                                                                    i2 = channelId3;
                                                                                    res = messages_messages;
                                                                                    res.messages.clear();
                                                                                    res.chats.clear();
                                                                                    res.users.clear();
                                                                                    FileLog.m3e(e2);
                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                } catch (Throwable e42222222222222222222222222222222222222222222222NUM) {
                                                                                    j = messageMaxId;
                                                                                    tL_messages_messages = e42222222222222222222222222222222222222222222222NUM;
                                                                                    i3 = count_query;
                                                                                    i9 = offset_query3;
                                                                                    queryFromServer = replyMessages;
                                                                                    res2 = messages_messages2;
                                                                                    z = num;
                                                                                    i2 = channelId3;
                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                    throw tL_messages_messages;
                                                                                }
                                                                            }
                                                                        } catch (Throwable e422222222222222222222222222222222222222222222222NUM) {
                                                                            count_unread = chatsToLoad;
                                                                            j = messageMaxId;
                                                                            e2 = e422222222222222222222222222222222222222222222222NUM;
                                                                            i2 = channelId;
                                                                            i3 = count_query;
                                                                            i9 = offset_query3;
                                                                            queryFromServer = replyMessages;
                                                                            messages_messages = messages_messages2;
                                                                            z = num;
                                                                            res = messages_messages;
                                                                            res.messages.clear();
                                                                            res.chats.clear();
                                                                            res.users.clear();
                                                                            FileLog.m3e(e2);
                                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                        } catch (Throwable e4222222222222222222222222222222222222222222222222NUM) {
                                                                            count_unread = chatsToLoad;
                                                                            j = messageMaxId;
                                                                            tL_messages_messages = e4222222222222222222222222222222222222222222222222NUM;
                                                                            i2 = channelId;
                                                                            i3 = count_query;
                                                                            i9 = offset_query3;
                                                                            queryFromServer = replyMessages;
                                                                            res2 = messages_messages2;
                                                                            z = num;
                                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                            throw tL_messages_messages;
                                                                        }
                                                                    }
                                                                    sQLiteCursor = cursor;
                                                                    count_unread = chatsToLoad;
                                                                    usersToLoad = channelId;
                                                                    j = messageMaxId;
                                                                    try {
                                                                        cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT max(mid) FROM messages WHERE uid = %d AND mid > 0", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                        if (cursor.next() != null) {
                                                                            last_message_id = cursor.intValue(null);
                                                                        }
                                                                        cursor.dispose();
                                                                        if (i3 == 4) {
                                                                            if (i5 != null) {
                                                                                cursor2 = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT max(mid) FROM messages WHERE uid = %d AND date <= %d AND mid > 0", new Object[]{Long.valueOf(j), Integer.valueOf(i5)}), new Object[0]);
                                                                                if (cursor2.next() == null) {
                                                                                    chatsToLoad = -1;
                                                                                } else {
                                                                                    chatsToLoad = cursor2.intValue(null);
                                                                                }
                                                                                cursor2.dispose();
                                                                                cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT min(mid) FROM messages WHERE uid = %d AND date >= %d AND mid > 0", new Object[]{Long.valueOf(j), Integer.valueOf(i5)}), new Object[0]);
                                                                                if (cursor.next()) {
                                                                                    endMid = -1;
                                                                                } else {
                                                                                    endMid = cursor.intValue(0);
                                                                                }
                                                                                cursor.dispose();
                                                                                if (chatsToLoad != endMid) {
                                                                                    replyMessageOwners = MessagesStorage.this.database;
                                                                                    locale3 = Locale.US;
                                                                                    str3 = "SELECT start FROM messages_holes WHERE uid = %d AND start <= %d AND end > %d";
                                                                                    objArr2 = new Object[3];
                                                                                    i3 = count_query;
                                                                                    objArr2[0] = Long.valueOf(j);
                                                                                    objArr2[1] = Integer.valueOf(chatsToLoad);
                                                                                    objArr2[2] = Integer.valueOf(chatsToLoad);
                                                                                    cursor = replyMessageOwners.queryFinalized(String.format(locale3, str3, objArr2), new Object[0]);
                                                                                    if (cursor.next()) {
                                                                                        chatsToLoad = -1;
                                                                                    }
                                                                                    cursor.dispose();
                                                                                    if (chatsToLoad != -1) {
                                                                                        cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start <= %d AND end > %d", new Object[]{Long.valueOf(j), Integer.valueOf(endMid), Integer.valueOf(endMid)}), new Object[null]);
                                                                                        if (cursor.next()) {
                                                                                            endMid = -1;
                                                                                        }
                                                                                        cursor.dispose();
                                                                                        if (endMid != -1) {
                                                                                            max_id_override2 = endMid;
                                                                                            channelId = endMid;
                                                                                            replyMessageOwners = (long) endMid;
                                                                                            if (replyMessageOwners != 0) {
                                                                                            }
                                                                                            replyMessageRandomOwners2 = channelId;
                                                                                            messageMaxId = replyMessageOwners;
                                                                                            max_id_override = max_id_override2;
                                                                                            if (replyMessageRandomOwners2 == null) {
                                                                                            }
                                                                                            if (chatsToLoad == null) {
                                                                                                access$0002 = MessagesStorage.this.database;
                                                                                                objArr2 = new Object[3];
                                                                                                containMessage = chatsToLoad;
                                                                                                objArr2[null] = Long.valueOf(j);
                                                                                                objArr2[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                                objArr2[2] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                                cursor = access$0002.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start < %d AND end > %d", objArr2), new Object[null]);
                                                                                                if (cursor.next() == null) {
                                                                                                    chatsToLoad = null;
                                                                                                } else {
                                                                                                    chatsToLoad = containMessage;
                                                                                                }
                                                                                                cursor.dispose();
                                                                                                sQLiteCursor2 = cursor;
                                                                                                containMessage = chatsToLoad;
                                                                                            } else {
                                                                                                sQLiteCursor2 = cursor;
                                                                                                containMessage = chatsToLoad;
                                                                                            }
                                                                                            if (containMessage) {
                                                                                                access$0004 = MessagesStorage.this.database;
                                                                                                j2 = 0;
                                                                                                objArr3 = new Object[2];
                                                                                                holeMessageMinId = 1;
                                                                                                objArr3[0] = Long.valueOf(j);
                                                                                                objArr3[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                                cursor = access$0004.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start >= %d ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                                                                if (cursor.next() != null) {
                                                                                                    chatsToLoad = (long) cursor.intValue(null);
                                                                                                    if (usersToLoad == null) {
                                                                                                        j2 = chatsToLoad | (((long) usersToLoad) << 32);
                                                                                                    } else {
                                                                                                        j2 = chatsToLoad;
                                                                                                    }
                                                                                                }
                                                                                                cursor.dispose();
                                                                                                cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(replyMessageRandomOwners2)}), new Object[0]);
                                                                                                if (cursor.next() == null) {
                                                                                                    holeMessageMinId2 = (long) cursor.intValue(null);
                                                                                                    if (usersToLoad != null) {
                                                                                                        holeMessageMinId2 |= ((long) usersToLoad) << 32;
                                                                                                    }
                                                                                                } else {
                                                                                                    holeMessageMinId2 = holeMessageMinId;
                                                                                                }
                                                                                                cursor.dispose();
                                                                                                if (j2 != 0) {
                                                                                                    max_id_query = replyMessageRandomOwners2;
                                                                                                } else if (holeMessageMinId2 == 1) {
                                                                                                    max_id_query = replyMessageRandomOwners2;
                                                                                                } else {
                                                                                                    chatsToLoad = MessagesStorage.this.database;
                                                                                                    locale = Locale.US;
                                                                                                    replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                    objArr = new Object[6];
                                                                                                    max_id_query = replyMessageRandomOwners2;
                                                                                                    objArr[0] = Long.valueOf(j);
                                                                                                    objArr[1] = Long.valueOf(messageMaxId);
                                                                                                    objArr[2] = Integer.valueOf(i3 / 2);
                                                                                                    objArr[3] = Long.valueOf(j);
                                                                                                    objArr[4] = Long.valueOf(messageMaxId);
                                                                                                    objArr[5] = Integer.valueOf(i3 / 2);
                                                                                                    cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[null]);
                                                                                                    offset_query = offset_query3;
                                                                                                    channelId2 = usersToLoad;
                                                                                                    lower_id = unreadCountIsLocal;
                                                                                                    channelId = count_unread;
                                                                                                }
                                                                                                if (j2 == null) {
                                                                                                    j2 = C0539C.NANOS_PER_SECOND;
                                                                                                    if (usersToLoad != null) {
                                                                                                        replyMessageRandomOwners2 = C0539C.NANOS_PER_SECOND | (((long) usersToLoad) << 32);
                                                                                                        chatsToLoad = MessagesStorage.this.database;
                                                                                                        locale = Locale.US;
                                                                                                        replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                        objArr3 = new Object[8];
                                                                                                        offset_query = offset_query3;
                                                                                                        channelId2 = usersToLoad;
                                                                                                        objArr3[null] = Long.valueOf(j);
                                                                                                        objArr3[1] = Long.valueOf(messageMaxId);
                                                                                                        objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                                        objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                                        objArr3[4] = Long.valueOf(j);
                                                                                                        objArr3[5] = Long.valueOf(messageMaxId);
                                                                                                        objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                                        objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                                        cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                                        lower_id = unreadCountIsLocal;
                                                                                                        channelId = count_unread;
                                                                                                    }
                                                                                                }
                                                                                                replyMessageRandomOwners2 = j2;
                                                                                                chatsToLoad = MessagesStorage.this.database;
                                                                                                locale = Locale.US;
                                                                                                replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                objArr3 = new Object[8];
                                                                                                offset_query = offset_query3;
                                                                                                channelId2 = usersToLoad;
                                                                                                objArr3[null] = Long.valueOf(j);
                                                                                                objArr3[1] = Long.valueOf(messageMaxId);
                                                                                                objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                                objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                                objArr3[4] = Long.valueOf(j);
                                                                                                objArr3[5] = Long.valueOf(messageMaxId);
                                                                                                objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                                objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                                cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                                lower_id = unreadCountIsLocal;
                                                                                                channelId = count_unread;
                                                                                            } else {
                                                                                                offset_query = offset_query3;
                                                                                                channelId2 = usersToLoad;
                                                                                                max_id_query = replyMessageRandomOwners2;
                                                                                                if (i3 != 2) {
                                                                                                    existingUnreadCount = 0;
                                                                                                    chatsToLoad = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid != 0 AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                                                    if (chatsToLoad.next()) {
                                                                                                        existingUnreadCount = chatsToLoad.intValue(0);
                                                                                                    }
                                                                                                    chatsToLoad.dispose();
                                                                                                    channelId = count_unread;
                                                                                                    if (existingUnreadCount != channelId) {
                                                                                                        lower_id = true;
                                                                                                        access$0003 = MessagesStorage.this.database;
                                                                                                        replyMessageOwners = new Object[6];
                                                                                                        cursor3 = chatsToLoad;
                                                                                                        replyMessageOwners[null] = Long.valueOf(j);
                                                                                                        replyMessageOwners[1] = Long.valueOf(messageMaxId);
                                                                                                        replyMessageOwners[2] = Integer.valueOf(i3 / 2);
                                                                                                        replyMessageOwners[3] = Long.valueOf(j);
                                                                                                        replyMessageOwners[4] = Long.valueOf(messageMaxId);
                                                                                                        replyMessageOwners[5] = Integer.valueOf(i3 / 2);
                                                                                                        cursor = access$0003.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", replyMessageOwners), new Object[null]);
                                                                                                    } else {
                                                                                                        i12 = existingUnreadCount;
                                                                                                        cursor3 = chatsToLoad;
                                                                                                        cursor = null;
                                                                                                        lower_id = unreadCountIsLocal;
                                                                                                    }
                                                                                                } else {
                                                                                                    channelId = count_unread;
                                                                                                    cursor = null;
                                                                                                    lower_id = unreadCountIsLocal;
                                                                                                }
                                                                                            }
                                                                                            count_unread = channelId;
                                                                                            queryFromServer = replyMessages;
                                                                                            j = messageMaxId;
                                                                                            unreadCountIsLocal = lower_id;
                                                                                            mentions_unread6 = mentions_unread2;
                                                                                            queryFromServer3 = num;
                                                                                            max_id_override2 = max_id_query;
                                                                                            i9 = offset_query;
                                                                                        }
                                                                                    }
                                                                                    replyMessageRandomOwners2 = i10;
                                                                                    messageMaxId = j;
                                                                                    if (replyMessageRandomOwners2 == null) {
                                                                                    }
                                                                                    if (chatsToLoad == null) {
                                                                                        sQLiteCursor2 = cursor;
                                                                                        containMessage = chatsToLoad;
                                                                                    } else {
                                                                                        access$0002 = MessagesStorage.this.database;
                                                                                        objArr2 = new Object[3];
                                                                                        containMessage = chatsToLoad;
                                                                                        objArr2[null] = Long.valueOf(j);
                                                                                        objArr2[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                        objArr2[2] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                        cursor = access$0002.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start < %d AND end > %d", objArr2), new Object[null]);
                                                                                        if (cursor.next() == null) {
                                                                                            chatsToLoad = containMessage;
                                                                                        } else {
                                                                                            chatsToLoad = null;
                                                                                        }
                                                                                        cursor.dispose();
                                                                                        sQLiteCursor2 = cursor;
                                                                                        containMessage = chatsToLoad;
                                                                                    }
                                                                                    if (containMessage) {
                                                                                        offset_query = offset_query3;
                                                                                        channelId2 = usersToLoad;
                                                                                        max_id_query = replyMessageRandomOwners2;
                                                                                        if (i3 != 2) {
                                                                                            channelId = count_unread;
                                                                                            cursor = null;
                                                                                            lower_id = unreadCountIsLocal;
                                                                                        } else {
                                                                                            existingUnreadCount = 0;
                                                                                            chatsToLoad = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid != 0 AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                                            if (chatsToLoad.next()) {
                                                                                                existingUnreadCount = chatsToLoad.intValue(0);
                                                                                            }
                                                                                            chatsToLoad.dispose();
                                                                                            channelId = count_unread;
                                                                                            if (existingUnreadCount != channelId) {
                                                                                                i12 = existingUnreadCount;
                                                                                                cursor3 = chatsToLoad;
                                                                                                cursor = null;
                                                                                                lower_id = unreadCountIsLocal;
                                                                                            } else {
                                                                                                lower_id = true;
                                                                                                access$0003 = MessagesStorage.this.database;
                                                                                                replyMessageOwners = new Object[6];
                                                                                                cursor3 = chatsToLoad;
                                                                                                replyMessageOwners[null] = Long.valueOf(j);
                                                                                                replyMessageOwners[1] = Long.valueOf(messageMaxId);
                                                                                                replyMessageOwners[2] = Integer.valueOf(i3 / 2);
                                                                                                replyMessageOwners[3] = Long.valueOf(j);
                                                                                                replyMessageOwners[4] = Long.valueOf(messageMaxId);
                                                                                                replyMessageOwners[5] = Integer.valueOf(i3 / 2);
                                                                                                cursor = access$0003.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", replyMessageOwners), new Object[null]);
                                                                                            }
                                                                                        }
                                                                                    } else {
                                                                                        access$0004 = MessagesStorage.this.database;
                                                                                        j2 = 0;
                                                                                        objArr3 = new Object[2];
                                                                                        holeMessageMinId = 1;
                                                                                        objArr3[0] = Long.valueOf(j);
                                                                                        objArr3[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                        cursor = access$0004.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start >= %d ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                                                        if (cursor.next() != null) {
                                                                                            chatsToLoad = (long) cursor.intValue(null);
                                                                                            if (usersToLoad == null) {
                                                                                                j2 = chatsToLoad;
                                                                                            } else {
                                                                                                j2 = chatsToLoad | (((long) usersToLoad) << 32);
                                                                                            }
                                                                                        }
                                                                                        cursor.dispose();
                                                                                        cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(replyMessageRandomOwners2)}), new Object[0]);
                                                                                        if (cursor.next() == null) {
                                                                                            holeMessageMinId2 = holeMessageMinId;
                                                                                        } else {
                                                                                            holeMessageMinId2 = (long) cursor.intValue(null);
                                                                                            if (usersToLoad != null) {
                                                                                                holeMessageMinId2 |= ((long) usersToLoad) << 32;
                                                                                            }
                                                                                        }
                                                                                        cursor.dispose();
                                                                                        if (j2 != 0) {
                                                                                            max_id_query = replyMessageRandomOwners2;
                                                                                        } else if (holeMessageMinId2 == 1) {
                                                                                            chatsToLoad = MessagesStorage.this.database;
                                                                                            locale = Locale.US;
                                                                                            replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                            objArr = new Object[6];
                                                                                            max_id_query = replyMessageRandomOwners2;
                                                                                            objArr[0] = Long.valueOf(j);
                                                                                            objArr[1] = Long.valueOf(messageMaxId);
                                                                                            objArr[2] = Integer.valueOf(i3 / 2);
                                                                                            objArr[3] = Long.valueOf(j);
                                                                                            objArr[4] = Long.valueOf(messageMaxId);
                                                                                            objArr[5] = Integer.valueOf(i3 / 2);
                                                                                            cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[null]);
                                                                                            offset_query = offset_query3;
                                                                                            channelId2 = usersToLoad;
                                                                                            lower_id = unreadCountIsLocal;
                                                                                            channelId = count_unread;
                                                                                        } else {
                                                                                            max_id_query = replyMessageRandomOwners2;
                                                                                        }
                                                                                        if (j2 == null) {
                                                                                            j2 = C0539C.NANOS_PER_SECOND;
                                                                                            if (usersToLoad != null) {
                                                                                                replyMessageRandomOwners2 = C0539C.NANOS_PER_SECOND | (((long) usersToLoad) << 32);
                                                                                                chatsToLoad = MessagesStorage.this.database;
                                                                                                locale = Locale.US;
                                                                                                replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                objArr3 = new Object[8];
                                                                                                offset_query = offset_query3;
                                                                                                channelId2 = usersToLoad;
                                                                                                objArr3[null] = Long.valueOf(j);
                                                                                                objArr3[1] = Long.valueOf(messageMaxId);
                                                                                                objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                                objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                                objArr3[4] = Long.valueOf(j);
                                                                                                objArr3[5] = Long.valueOf(messageMaxId);
                                                                                                objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                                objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                                cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                                lower_id = unreadCountIsLocal;
                                                                                                channelId = count_unread;
                                                                                            }
                                                                                        }
                                                                                        replyMessageRandomOwners2 = j2;
                                                                                        chatsToLoad = MessagesStorage.this.database;
                                                                                        locale = Locale.US;
                                                                                        replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                        objArr3 = new Object[8];
                                                                                        offset_query = offset_query3;
                                                                                        channelId2 = usersToLoad;
                                                                                        objArr3[null] = Long.valueOf(j);
                                                                                        objArr3[1] = Long.valueOf(messageMaxId);
                                                                                        objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                        objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                        objArr3[4] = Long.valueOf(j);
                                                                                        objArr3[5] = Long.valueOf(messageMaxId);
                                                                                        objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                        objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                        cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                        lower_id = unreadCountIsLocal;
                                                                                        channelId = count_unread;
                                                                                    }
                                                                                    count_unread = channelId;
                                                                                    queryFromServer = replyMessages;
                                                                                    j = messageMaxId;
                                                                                    unreadCountIsLocal = lower_id;
                                                                                    mentions_unread6 = mentions_unread2;
                                                                                    queryFromServer3 = num;
                                                                                    max_id_override2 = max_id_query;
                                                                                    i9 = offset_query;
                                                                                } else {
                                                                                    replyMessageRandomOwners2 = chatsToLoad;
                                                                                    i3 = count_query;
                                                                                    messageMaxId = j;
                                                                                    if (replyMessageRandomOwners2 == null) {
                                                                                    }
                                                                                    if (chatsToLoad == null) {
                                                                                        access$0002 = MessagesStorage.this.database;
                                                                                        objArr2 = new Object[3];
                                                                                        containMessage = chatsToLoad;
                                                                                        objArr2[null] = Long.valueOf(j);
                                                                                        objArr2[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                        objArr2[2] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                        cursor = access$0002.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start < %d AND end > %d", objArr2), new Object[null]);
                                                                                        if (cursor.next() == null) {
                                                                                            chatsToLoad = null;
                                                                                        } else {
                                                                                            chatsToLoad = containMessage;
                                                                                        }
                                                                                        cursor.dispose();
                                                                                        sQLiteCursor2 = cursor;
                                                                                        containMessage = chatsToLoad;
                                                                                    } else {
                                                                                        sQLiteCursor2 = cursor;
                                                                                        containMessage = chatsToLoad;
                                                                                    }
                                                                                    if (containMessage) {
                                                                                        access$0004 = MessagesStorage.this.database;
                                                                                        j2 = 0;
                                                                                        objArr3 = new Object[2];
                                                                                        holeMessageMinId = 1;
                                                                                        objArr3[0] = Long.valueOf(j);
                                                                                        objArr3[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                        cursor = access$0004.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start >= %d ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                                                        if (cursor.next() != null) {
                                                                                            chatsToLoad = (long) cursor.intValue(null);
                                                                                            if (usersToLoad == null) {
                                                                                                j2 = chatsToLoad | (((long) usersToLoad) << 32);
                                                                                            } else {
                                                                                                j2 = chatsToLoad;
                                                                                            }
                                                                                        }
                                                                                        cursor.dispose();
                                                                                        cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(replyMessageRandomOwners2)}), new Object[0]);
                                                                                        if (cursor.next() == null) {
                                                                                            holeMessageMinId2 = (long) cursor.intValue(null);
                                                                                            if (usersToLoad != null) {
                                                                                                holeMessageMinId2 |= ((long) usersToLoad) << 32;
                                                                                            }
                                                                                        } else {
                                                                                            holeMessageMinId2 = holeMessageMinId;
                                                                                        }
                                                                                        cursor.dispose();
                                                                                        if (j2 != 0) {
                                                                                            max_id_query = replyMessageRandomOwners2;
                                                                                        } else if (holeMessageMinId2 == 1) {
                                                                                            max_id_query = replyMessageRandomOwners2;
                                                                                        } else {
                                                                                            chatsToLoad = MessagesStorage.this.database;
                                                                                            locale = Locale.US;
                                                                                            replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                            objArr = new Object[6];
                                                                                            max_id_query = replyMessageRandomOwners2;
                                                                                            objArr[0] = Long.valueOf(j);
                                                                                            objArr[1] = Long.valueOf(messageMaxId);
                                                                                            objArr[2] = Integer.valueOf(i3 / 2);
                                                                                            objArr[3] = Long.valueOf(j);
                                                                                            objArr[4] = Long.valueOf(messageMaxId);
                                                                                            objArr[5] = Integer.valueOf(i3 / 2);
                                                                                            cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[null]);
                                                                                            offset_query = offset_query3;
                                                                                            channelId2 = usersToLoad;
                                                                                            lower_id = unreadCountIsLocal;
                                                                                            channelId = count_unread;
                                                                                        }
                                                                                        if (j2 == null) {
                                                                                            j2 = C0539C.NANOS_PER_SECOND;
                                                                                            if (usersToLoad != null) {
                                                                                                replyMessageRandomOwners2 = C0539C.NANOS_PER_SECOND | (((long) usersToLoad) << 32);
                                                                                                chatsToLoad = MessagesStorage.this.database;
                                                                                                locale = Locale.US;
                                                                                                replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                objArr3 = new Object[8];
                                                                                                offset_query = offset_query3;
                                                                                                channelId2 = usersToLoad;
                                                                                                objArr3[null] = Long.valueOf(j);
                                                                                                objArr3[1] = Long.valueOf(messageMaxId);
                                                                                                objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                                objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                                objArr3[4] = Long.valueOf(j);
                                                                                                objArr3[5] = Long.valueOf(messageMaxId);
                                                                                                objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                                objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                                cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                                lower_id = unreadCountIsLocal;
                                                                                                channelId = count_unread;
                                                                                            }
                                                                                        }
                                                                                        replyMessageRandomOwners2 = j2;
                                                                                        chatsToLoad = MessagesStorage.this.database;
                                                                                        locale = Locale.US;
                                                                                        replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                        objArr3 = new Object[8];
                                                                                        offset_query = offset_query3;
                                                                                        channelId2 = usersToLoad;
                                                                                        objArr3[null] = Long.valueOf(j);
                                                                                        objArr3[1] = Long.valueOf(messageMaxId);
                                                                                        objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                        objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                        objArr3[4] = Long.valueOf(j);
                                                                                        objArr3[5] = Long.valueOf(messageMaxId);
                                                                                        objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                        objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                        cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                        lower_id = unreadCountIsLocal;
                                                                                        channelId = count_unread;
                                                                                    } else {
                                                                                        offset_query = offset_query3;
                                                                                        channelId2 = usersToLoad;
                                                                                        max_id_query = replyMessageRandomOwners2;
                                                                                        if (i3 != 2) {
                                                                                            existingUnreadCount = 0;
                                                                                            chatsToLoad = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid != 0 AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                                            if (chatsToLoad.next()) {
                                                                                                existingUnreadCount = chatsToLoad.intValue(0);
                                                                                            }
                                                                                            chatsToLoad.dispose();
                                                                                            channelId = count_unread;
                                                                                            if (existingUnreadCount != channelId) {
                                                                                                lower_id = true;
                                                                                                access$0003 = MessagesStorage.this.database;
                                                                                                replyMessageOwners = new Object[6];
                                                                                                cursor3 = chatsToLoad;
                                                                                                replyMessageOwners[null] = Long.valueOf(j);
                                                                                                replyMessageOwners[1] = Long.valueOf(messageMaxId);
                                                                                                replyMessageOwners[2] = Integer.valueOf(i3 / 2);
                                                                                                replyMessageOwners[3] = Long.valueOf(j);
                                                                                                replyMessageOwners[4] = Long.valueOf(messageMaxId);
                                                                                                replyMessageOwners[5] = Integer.valueOf(i3 / 2);
                                                                                                cursor = access$0003.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", replyMessageOwners), new Object[null]);
                                                                                            } else {
                                                                                                i12 = existingUnreadCount;
                                                                                                cursor3 = chatsToLoad;
                                                                                                cursor = null;
                                                                                                lower_id = unreadCountIsLocal;
                                                                                            }
                                                                                        } else {
                                                                                            channelId = count_unread;
                                                                                            cursor = null;
                                                                                            lower_id = unreadCountIsLocal;
                                                                                        }
                                                                                    }
                                                                                    count_unread = channelId;
                                                                                    queryFromServer = replyMessages;
                                                                                    j = messageMaxId;
                                                                                    unreadCountIsLocal = lower_id;
                                                                                    mentions_unread6 = mentions_unread2;
                                                                                    queryFromServer3 = num;
                                                                                    max_id_override2 = max_id_query;
                                                                                    i9 = offset_query;
                                                                                }
                                                                            }
                                                                        }
                                                                        i3 = count_query;
                                                                        replyMessageRandomOwners2 = i10;
                                                                        messageMaxId = j;
                                                                        if (replyMessageRandomOwners2 == null) {
                                                                        }
                                                                        if (chatsToLoad == null) {
                                                                            sQLiteCursor2 = cursor;
                                                                            containMessage = chatsToLoad;
                                                                        } else {
                                                                            access$0002 = MessagesStorage.this.database;
                                                                            objArr2 = new Object[3];
                                                                            containMessage = chatsToLoad;
                                                                            objArr2[null] = Long.valueOf(j);
                                                                            objArr2[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                            objArr2[2] = Integer.valueOf(replyMessageRandomOwners2);
                                                                            cursor = access$0002.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start < %d AND end > %d", objArr2), new Object[null]);
                                                                            if (cursor.next() == null) {
                                                                                chatsToLoad = containMessage;
                                                                            } else {
                                                                                chatsToLoad = null;
                                                                            }
                                                                            cursor.dispose();
                                                                            sQLiteCursor2 = cursor;
                                                                            containMessage = chatsToLoad;
                                                                        }
                                                                        if (containMessage) {
                                                                            offset_query = offset_query3;
                                                                            channelId2 = usersToLoad;
                                                                            max_id_query = replyMessageRandomOwners2;
                                                                            if (i3 != 2) {
                                                                                channelId = count_unread;
                                                                                cursor = null;
                                                                                lower_id = unreadCountIsLocal;
                                                                            } else {
                                                                                existingUnreadCount = 0;
                                                                                chatsToLoad = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid != 0 AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                                if (chatsToLoad.next()) {
                                                                                    existingUnreadCount = chatsToLoad.intValue(0);
                                                                                }
                                                                                chatsToLoad.dispose();
                                                                                channelId = count_unread;
                                                                                if (existingUnreadCount != channelId) {
                                                                                    i12 = existingUnreadCount;
                                                                                    cursor3 = chatsToLoad;
                                                                                    cursor = null;
                                                                                    lower_id = unreadCountIsLocal;
                                                                                } else {
                                                                                    lower_id = true;
                                                                                    access$0003 = MessagesStorage.this.database;
                                                                                    replyMessageOwners = new Object[6];
                                                                                    cursor3 = chatsToLoad;
                                                                                    replyMessageOwners[null] = Long.valueOf(j);
                                                                                    replyMessageOwners[1] = Long.valueOf(messageMaxId);
                                                                                    replyMessageOwners[2] = Integer.valueOf(i3 / 2);
                                                                                    replyMessageOwners[3] = Long.valueOf(j);
                                                                                    replyMessageOwners[4] = Long.valueOf(messageMaxId);
                                                                                    replyMessageOwners[5] = Integer.valueOf(i3 / 2);
                                                                                    cursor = access$0003.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", replyMessageOwners), new Object[null]);
                                                                                }
                                                                            }
                                                                        } else {
                                                                            access$0004 = MessagesStorage.this.database;
                                                                            j2 = 0;
                                                                            objArr3 = new Object[2];
                                                                            holeMessageMinId = 1;
                                                                            objArr3[0] = Long.valueOf(j);
                                                                            objArr3[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                            cursor = access$0004.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start >= %d ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                                            if (cursor.next() != null) {
                                                                                chatsToLoad = (long) cursor.intValue(null);
                                                                                if (usersToLoad == null) {
                                                                                    j2 = chatsToLoad;
                                                                                } else {
                                                                                    j2 = chatsToLoad | (((long) usersToLoad) << 32);
                                                                                }
                                                                            }
                                                                            cursor.dispose();
                                                                            cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(replyMessageRandomOwners2)}), new Object[0]);
                                                                            if (cursor.next() == null) {
                                                                                holeMessageMinId2 = holeMessageMinId;
                                                                            } else {
                                                                                holeMessageMinId2 = (long) cursor.intValue(null);
                                                                                if (usersToLoad != null) {
                                                                                    holeMessageMinId2 |= ((long) usersToLoad) << 32;
                                                                                }
                                                                            }
                                                                            cursor.dispose();
                                                                            if (j2 != 0) {
                                                                                max_id_query = replyMessageRandomOwners2;
                                                                            } else if (holeMessageMinId2 == 1) {
                                                                                chatsToLoad = MessagesStorage.this.database;
                                                                                locale = Locale.US;
                                                                                replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                objArr = new Object[6];
                                                                                max_id_query = replyMessageRandomOwners2;
                                                                                objArr[0] = Long.valueOf(j);
                                                                                objArr[1] = Long.valueOf(messageMaxId);
                                                                                objArr[2] = Integer.valueOf(i3 / 2);
                                                                                objArr[3] = Long.valueOf(j);
                                                                                objArr[4] = Long.valueOf(messageMaxId);
                                                                                objArr[5] = Integer.valueOf(i3 / 2);
                                                                                cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[null]);
                                                                                offset_query = offset_query3;
                                                                                channelId2 = usersToLoad;
                                                                                lower_id = unreadCountIsLocal;
                                                                                channelId = count_unread;
                                                                            } else {
                                                                                max_id_query = replyMessageRandomOwners2;
                                                                            }
                                                                            if (j2 == null) {
                                                                                j2 = C0539C.NANOS_PER_SECOND;
                                                                                if (usersToLoad != null) {
                                                                                    replyMessageRandomOwners2 = C0539C.NANOS_PER_SECOND | (((long) usersToLoad) << 32);
                                                                                    chatsToLoad = MessagesStorage.this.database;
                                                                                    locale = Locale.US;
                                                                                    replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                    objArr3 = new Object[8];
                                                                                    offset_query = offset_query3;
                                                                                    channelId2 = usersToLoad;
                                                                                    objArr3[null] = Long.valueOf(j);
                                                                                    objArr3[1] = Long.valueOf(messageMaxId);
                                                                                    objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                    objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                    objArr3[4] = Long.valueOf(j);
                                                                                    objArr3[5] = Long.valueOf(messageMaxId);
                                                                                    objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                    objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                    cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                    lower_id = unreadCountIsLocal;
                                                                                    channelId = count_unread;
                                                                                }
                                                                            }
                                                                            replyMessageRandomOwners2 = j2;
                                                                            chatsToLoad = MessagesStorage.this.database;
                                                                            locale = Locale.US;
                                                                            replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                            objArr3 = new Object[8];
                                                                            offset_query = offset_query3;
                                                                            channelId2 = usersToLoad;
                                                                            objArr3[null] = Long.valueOf(j);
                                                                            objArr3[1] = Long.valueOf(messageMaxId);
                                                                            objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                            objArr3[3] = Integer.valueOf(i3 / 2);
                                                                            objArr3[4] = Long.valueOf(j);
                                                                            objArr3[5] = Long.valueOf(messageMaxId);
                                                                            objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                            objArr3[7] = Integer.valueOf(i3 / 2);
                                                                            cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                            lower_id = unreadCountIsLocal;
                                                                            channelId = count_unread;
                                                                        }
                                                                        count_unread = channelId;
                                                                        queryFromServer = replyMessages;
                                                                        j = messageMaxId;
                                                                        unreadCountIsLocal = lower_id;
                                                                        mentions_unread6 = mentions_unread2;
                                                                        queryFromServer3 = num;
                                                                        max_id_override2 = max_id_query;
                                                                        i9 = offset_query;
                                                                    } catch (Throwable e42222222222222222222222222222222222222222222222222NUM) {
                                                                        i3 = count_query;
                                                                        channelId = count_unread;
                                                                        e2 = e42222222222222222222222222222222222222222222222222NUM;
                                                                        arrayList = usersToLoad;
                                                                        queryFromServer = replyMessages;
                                                                        messages_messages = messages_messages2;
                                                                        z = num;
                                                                        i9 = offset_query3;
                                                                        res = messages_messages;
                                                                        res.messages.clear();
                                                                        res.chats.clear();
                                                                        res.users.clear();
                                                                        FileLog.m3e(e2);
                                                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                    } catch (Throwable e422222222222222222222222222222222222222222222222222NUM) {
                                                                        i3 = count_query;
                                                                        channelId = count_unread;
                                                                        tL_messages_messages = e422222222222222222222222222222222222222222222222222NUM;
                                                                        arrayList = usersToLoad;
                                                                        queryFromServer = replyMessages;
                                                                        res2 = messages_messages2;
                                                                        z = num;
                                                                        i9 = offset_query3;
                                                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                        throw tL_messages_messages;
                                                                    }
                                                                } catch (Throwable e4222222222222222222222222222222222222222222222222222NUM) {
                                                                    i3 = count_query;
                                                                    j = messageMaxId;
                                                                    longSparseArray = replyMessageRandomOwners2;
                                                                    e2 = e4222222222222222222222222222222222222222222222222222NUM;
                                                                    count_unread = chatsToLoad;
                                                                    queryFromServer = replyMessages;
                                                                    messages_messages = messages_messages2;
                                                                    z = num;
                                                                    i9 = offset_query3;
                                                                    i2 = channelId;
                                                                    res = messages_messages;
                                                                    res.messages.clear();
                                                                    res.chats.clear();
                                                                    res.users.clear();
                                                                    FileLog.m3e(e2);
                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                } catch (Throwable e42222222222222222222222222222222222222222222222222222NUM) {
                                                                    i3 = count_query;
                                                                    j = messageMaxId;
                                                                    longSparseArray = replyMessageRandomOwners2;
                                                                    tL_messages_messages = e42222222222222222222222222222222222222222222222222222NUM;
                                                                    count_unread = chatsToLoad;
                                                                    queryFromServer = replyMessages;
                                                                    res2 = messages_messages2;
                                                                    z = num;
                                                                    i9 = offset_query3;
                                                                    i2 = channelId;
                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                    throw tL_messages_messages;
                                                                }
                                                            } catch (Throwable e422222222222222222222222222222222222222222222222222222NUM) {
                                                                i3 = count_query;
                                                                j = messageMaxId;
                                                                longSparseArray = replyMessageRandomOwners2;
                                                                e2 = e422222222222222222222222222222222222222222222222222222NUM;
                                                                count_unread = chatsToLoad;
                                                                z = num3;
                                                                queryFromServer = replyMessages;
                                                                messages_messages = messages_messages2;
                                                                i9 = offset_query3;
                                                                i2 = channelId;
                                                                res = messages_messages;
                                                                res.messages.clear();
                                                                res.chats.clear();
                                                                res.users.clear();
                                                                FileLog.m3e(e2);
                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                            } catch (Throwable e4222222222222222222222222222222222222222222222222222222NUM) {
                                                                i3 = count_query;
                                                                j = messageMaxId;
                                                                longSparseArray = replyMessageRandomOwners2;
                                                                tL_messages_messages = e4222222222222222222222222222222222222222222222222222222NUM;
                                                                count_unread = chatsToLoad;
                                                                z = num3;
                                                                queryFromServer = replyMessages;
                                                                res2 = messages_messages2;
                                                                i9 = offset_query3;
                                                                i2 = channelId;
                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                throw tL_messages_messages;
                                                            }
                                                        }
                                                    } catch (Exception e7) {
                                                        e4222222222222222222222222222222222222222222222222222222NUM = e7;
                                                        messages_messages = res4;
                                                        i2 = channelId;
                                                        i3 = count_query;
                                                        i9 = 0;
                                                        z = num3;
                                                        j = messageMaxId;
                                                        count_unread = count_unread2;
                                                        mentions_unread2 = mentions_unread;
                                                        i4 = min_unread_id;
                                                        i5 = max_unread_date2;
                                                        e2 = e4222222222222222222222222222222222222222222222222222222NUM;
                                                        res = messages_messages;
                                                        res.messages.clear();
                                                        res.chats.clear();
                                                        res.users.clear();
                                                        FileLog.m3e(e2);
                                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                    } catch (Throwable th4) {
                                                        e4222222222222222222222222222222222222222222222222222222NUM = th4;
                                                        i2 = channelId;
                                                        i3 = count_query;
                                                        i9 = 0;
                                                        z = num3;
                                                        j = messageMaxId;
                                                        count_unread = count_unread2;
                                                        mentions_unread2 = mentions_unread;
                                                        i4 = min_unread_id;
                                                        i5 = max_unread_date2;
                                                        res2 = res4;
                                                        tL_messages_messages = e4222222222222222222222222222222222222222222222222222222NUM;
                                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                        throw tL_messages_messages;
                                                    }
                                                }
                                                arrayList3 = replyMessages;
                                                sparseArray2 = replyMessageOwners;
                                                if (i3 != 1) {
                                                    try {
                                                        if (!(i3 == 3 || i3 == 4 || i4 != 0)) {
                                                            if (i3 == 2) {
                                                                SQLiteDatabase access$0006 = MessagesStorage.this.database;
                                                                StringBuilder stringBuilder2 = new StringBuilder();
                                                                stringBuilder2.append("SELECT inbox_max, unread_count, date, unread_count_i FROM dialogs WHERE did = ");
                                                                messages_messages2 = res4;
                                                                arrayList4 = chatsToLoad;
                                                                try {
                                                                    int intValue2;
                                                                    stringBuilder2.append(j);
                                                                    tL_messages_messages = access$0006.queryFinalized(stringBuilder2.toString(), new Object[0]);
                                                                    if (tL_messages_messages.next()) {
                                                                        try {
                                                                            intValue2 = tL_messages_messages.intValue(0);
                                                                            chatsToLoad = intValue2;
                                                                            replyMessageRandomOwners2 = intValue2;
                                                                            messageMaxId = (long) intValue2;
                                                                            try {
                                                                                intValue2 = tL_messages_messages.intValue(1);
                                                                                try {
                                                                                    count_unread3 = tL_messages_messages.intValue(2);
                                                                                    try {
                                                                                        int i13;
                                                                                        max_id_override2 = tL_messages_messages.intValue(3);
                                                                                        queryFromServer2 = true;
                                                                                        if (messageMaxId == 0 || channelId == 0) {
                                                                                            i13 = intValue2;
                                                                                            max_unread_date = count_unread3;
                                                                                        } else {
                                                                                            i13 = intValue2;
                                                                                            max_unread_date = count_unread3;
                                                                                            messageMaxId |= ((long) channelId) << 32;
                                                                                        }
                                                                                        intValue2 = i13;
                                                                                    } catch (Throwable e42222222222222222222222222222222222222222222222222222222NUM) {
                                                                                        e2 = e42222222222222222222222222222222222222222222222222222222NUM;
                                                                                        i4 = chatsToLoad;
                                                                                        i2 = channelId;
                                                                                        i3 = count_query;
                                                                                        i9 = 0;
                                                                                        z = num3;
                                                                                        j = messageMaxId;
                                                                                        i10 = replyMessageRandomOwners2;
                                                                                        mentions_unread2 = mentions_unread;
                                                                                        messages_messages = messages_messages2;
                                                                                        count_unread = intValue2;
                                                                                        i5 = count_unread3;
                                                                                        res = messages_messages;
                                                                                        res.messages.clear();
                                                                                        res.chats.clear();
                                                                                        res.users.clear();
                                                                                        FileLog.m3e(e2);
                                                                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                    } catch (Throwable e422222222222222222222222222222222222222222222222222222222NUM) {
                                                                                        tL_messages_messages = e422222222222222222222222222222222222222222222222222222222NUM;
                                                                                        i4 = chatsToLoad;
                                                                                        i2 = channelId;
                                                                                        i3 = count_query;
                                                                                        i9 = 0;
                                                                                        z = num3;
                                                                                        j = messageMaxId;
                                                                                        i10 = replyMessageRandomOwners2;
                                                                                        mentions_unread2 = mentions_unread;
                                                                                        res2 = messages_messages2;
                                                                                        count_unread = intValue2;
                                                                                        i5 = count_unread3;
                                                                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                        throw tL_messages_messages;
                                                                                    }
                                                                                } catch (Throwable e4222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                    e2 = e4222222222222222222222222222222222222222222222222222222222NUM;
                                                                                    i4 = chatsToLoad;
                                                                                    i2 = channelId;
                                                                                    i3 = count_query;
                                                                                    i9 = 0;
                                                                                    z = num3;
                                                                                    j = messageMaxId;
                                                                                    i10 = replyMessageRandomOwners2;
                                                                                    mentions_unread2 = mentions_unread;
                                                                                    i5 = max_unread_date2;
                                                                                    messages_messages = messages_messages2;
                                                                                    count_unread = intValue2;
                                                                                    res = messages_messages;
                                                                                    res.messages.clear();
                                                                                    res.chats.clear();
                                                                                    res.users.clear();
                                                                                    FileLog.m3e(e2);
                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                } catch (Throwable e42222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                    tL_messages_messages = e42222222222222222222222222222222222222222222222222222222222NUM;
                                                                                    i4 = chatsToLoad;
                                                                                    i2 = channelId;
                                                                                    i3 = count_query;
                                                                                    i9 = 0;
                                                                                    z = num3;
                                                                                    j = messageMaxId;
                                                                                    i10 = replyMessageRandomOwners2;
                                                                                    mentions_unread2 = mentions_unread;
                                                                                    i5 = max_unread_date2;
                                                                                    res2 = messages_messages2;
                                                                                    count_unread = intValue2;
                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                    throw tL_messages_messages;
                                                                                }
                                                                            } catch (Throwable e422222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                e2 = e422222222222222222222222222222222222222222222222222222222222NUM;
                                                                                i4 = chatsToLoad;
                                                                                i2 = channelId;
                                                                                i3 = count_query;
                                                                                i9 = 0;
                                                                                z = num3;
                                                                                j = messageMaxId;
                                                                                i10 = replyMessageRandomOwners2;
                                                                                count_unread = count_unread2;
                                                                                mentions_unread2 = mentions_unread;
                                                                                i5 = max_unread_date2;
                                                                                messages_messages = messages_messages2;
                                                                                res = messages_messages;
                                                                                res.messages.clear();
                                                                                res.chats.clear();
                                                                                res.users.clear();
                                                                                FileLog.m3e(e2);
                                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                            } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                tL_messages_messages = e4222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                i4 = chatsToLoad;
                                                                                i2 = channelId;
                                                                                i3 = count_query;
                                                                                i9 = 0;
                                                                                z = num3;
                                                                                j = messageMaxId;
                                                                                i10 = replyMessageRandomOwners2;
                                                                                count_unread = count_unread2;
                                                                                mentions_unread2 = mentions_unread;
                                                                                i5 = max_unread_date2;
                                                                                res2 = messages_messages2;
                                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                throw tL_messages_messages;
                                                                            }
                                                                        } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                            e2 = e42222222222222222222222222222222222222222222222222222222222222NUM;
                                                                            i2 = channelId;
                                                                            i3 = count_query;
                                                                            i9 = 0;
                                                                            z = num3;
                                                                            j = messageMaxId;
                                                                            count_unread = count_unread2;
                                                                            mentions_unread2 = mentions_unread;
                                                                            i4 = min_unread_id;
                                                                            i5 = max_unread_date2;
                                                                            i10 = max_id_query3;
                                                                            messages_messages = messages_messages2;
                                                                            res = messages_messages;
                                                                            res.messages.clear();
                                                                            res.chats.clear();
                                                                            res.users.clear();
                                                                            FileLog.m3e(e2);
                                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                        } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                            tL_messages_messages = e422222222222222222222222222222222222222222222222222222222222222NUM;
                                                                            i2 = channelId;
                                                                            i3 = count_query;
                                                                            i9 = 0;
                                                                            z = num3;
                                                                            j = messageMaxId;
                                                                            count_unread = count_unread2;
                                                                            mentions_unread2 = mentions_unread;
                                                                            i4 = min_unread_id;
                                                                            i5 = max_unread_date2;
                                                                            i10 = max_id_query3;
                                                                            res2 = messages_messages2;
                                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                            throw tL_messages_messages;
                                                                        }
                                                                    }
                                                                    intValue2 = count_unread2;
                                                                    max_id_override2 = mentions_unread;
                                                                    chatsToLoad = min_unread_id;
                                                                    queryFromServer2 = queryFromServer;
                                                                    max_unread_date = max_unread_date2;
                                                                    replyMessageRandomOwners2 = max_id_query3;
                                                                    try {
                                                                        long messageMaxId2;
                                                                        tL_messages_messages.dispose();
                                                                        TL_messages_messages tL_messages_messages2;
                                                                        int min_unread_id2;
                                                                        if (queryFromServer2) {
                                                                            tL_messages_messages2 = tL_messages_messages;
                                                                            min_unread_id2 = chatsToLoad;
                                                                            i9 = 0;
                                                                            arrayList5 = usersToLoad;
                                                                            messageMaxId2 = messageMaxId;
                                                                            i11 = lower_id2;
                                                                            mentions_unread2 = max_id_override2;
                                                                            if (replyMessageRandomOwners2 == null) {
                                                                                tL_messages_messages = null;
                                                                                try {
                                                                                    chatsToLoad = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid > 0 AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                                    if (chatsToLoad.next()) {
                                                                                        tL_messages_messages = chatsToLoad.intValue(0);
                                                                                    }
                                                                                    chatsToLoad.dispose();
                                                                                    if (tL_messages_messages == intValue2) {
                                                                                        chatsToLoad3 = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT min(mid) FROM messages WHERE uid = %d AND out = 0 AND read_state IN(0,2) AND mid > 0", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                                        if (chatsToLoad3.next()) {
                                                                                            intValue = chatsToLoad3.intValue(0);
                                                                                            offset_query3 = intValue;
                                                                                            count_unread3 = intValue;
                                                                                            messageMaxId = (long) intValue;
                                                                                            if (messageMaxId == 0 || channelId == 0) {
                                                                                                replyMessageRandomOwners2 = count_unread3;
                                                                                            } else {
                                                                                                replyMessageRandomOwners2 = count_unread3;
                                                                                                messageMaxId |= ((long) channelId) << 32;
                                                                                            }
                                                                                        } else {
                                                                                            offset_query3 = min_unread_id2;
                                                                                            messageMaxId = messageMaxId2;
                                                                                        }
                                                                                        try {
                                                                                            chatsToLoad3.dispose();
                                                                                            usersToLoad = offset_query3;
                                                                                            messageMaxId2 = messageMaxId;
                                                                                        } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                            e2 = e4222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                            i2 = channelId;
                                                                                            i3 = count_query;
                                                                                            i4 = offset_query3;
                                                                                            z = num3;
                                                                                            count_unread = intValue2;
                                                                                            j = messageMaxId;
                                                                                            i10 = replyMessageRandomOwners2;
                                                                                            queryFromServer = queryFromServer2;
                                                                                            messages_messages = messages_messages2;
                                                                                            i5 = max_unread_date;
                                                                                            res = messages_messages;
                                                                                            res.messages.clear();
                                                                                            res.chats.clear();
                                                                                            res.users.clear();
                                                                                            FileLog.m3e(e2);
                                                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                        } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                            tL_messages_messages = e42222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                            i2 = channelId;
                                                                                            i3 = count_query;
                                                                                            i4 = offset_query3;
                                                                                            z = num3;
                                                                                            count_unread = intValue2;
                                                                                            j = messageMaxId;
                                                                                            i10 = replyMessageRandomOwners2;
                                                                                            queryFromServer = queryFromServer2;
                                                                                            res2 = messages_messages2;
                                                                                            i5 = max_unread_date;
                                                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                            throw tL_messages_messages;
                                                                                        }
                                                                                    }
                                                                                    usersToLoad = min_unread_id2;
                                                                                    chatsToLoad = intValue2;
                                                                                } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                    e2 = e422222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                    i2 = channelId;
                                                                                    i3 = count_query;
                                                                                    count_unread = intValue2;
                                                                                    i10 = replyMessageRandomOwners2;
                                                                                    queryFromServer = queryFromServer2;
                                                                                    messages_messages = messages_messages2;
                                                                                    i5 = max_unread_date;
                                                                                    i4 = min_unread_id2;
                                                                                    j = messageMaxId2;
                                                                                    res = messages_messages;
                                                                                    res.messages.clear();
                                                                                    res.chats.clear();
                                                                                    res.users.clear();
                                                                                    FileLog.m3e(e2);
                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                    tL_messages_messages = e4222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                    i2 = channelId;
                                                                                    i3 = count_query;
                                                                                    count_unread = intValue2;
                                                                                    i10 = replyMessageRandomOwners2;
                                                                                    queryFromServer = queryFromServer2;
                                                                                    res2 = messages_messages2;
                                                                                    i5 = max_unread_date;
                                                                                    i4 = min_unread_id2;
                                                                                    j = messageMaxId2;
                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                    throw tL_messages_messages;
                                                                                }
                                                                            }
                                                                            tL_messages_messages = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT start, end FROM messages_holes WHERE uid = %d AND start < %d AND end > %d", new Object[]{Long.valueOf(j), Integer.valueOf(replyMessageRandomOwners2), Integer.valueOf(replyMessageRandomOwners2)}), new Object[0]);
                                                                            chatsToLoad = tL_messages_messages.next() ^ 1;
                                                                            tL_messages_messages.dispose();
                                                                            if (chatsToLoad != null) {
                                                                                cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT min(mid) FROM messages WHERE uid = %d AND out = 0 AND read_state IN(0,2) AND mid > %d", new Object[]{Long.valueOf(j), Integer.valueOf(replyMessageRandomOwners2)}), new Object[0]);
                                                                                if (cursor.next()) {
                                                                                    intValue = cursor.intValue(0);
                                                                                    offset_query3 = intValue;
                                                                                    long messageMaxId3 = (long) intValue;
                                                                                    if (messageMaxId3 == 0 || channelId == 0) {
                                                                                        replyMessageRandomOwners2 = offset_query3;
                                                                                        messageMaxId = messageMaxId3;
                                                                                    } else {
                                                                                        replyMessageRandomOwners2 = offset_query3;
                                                                                        messageMaxId = messageMaxId3 | (((long) channelId) << 32);
                                                                                    }
                                                                                } else {
                                                                                    messageMaxId = messageMaxId2;
                                                                                }
                                                                                try {
                                                                                    cursor.dispose();
                                                                                    chatsToLoad = intValue2;
                                                                                    replyMessages = queryFromServer2;
                                                                                    replyMessageOwners = max_unread_date;
                                                                                    usersToLoad = min_unread_id2;
                                                                                } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                    e2 = e42222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                    i2 = channelId;
                                                                                    i3 = count_query;
                                                                                    z = num3;
                                                                                    count_unread = intValue2;
                                                                                    j = messageMaxId;
                                                                                    longSparseArray = replyMessageRandomOwners2;
                                                                                    queryFromServer = queryFromServer2;
                                                                                    messages_messages = messages_messages2;
                                                                                    i5 = max_unread_date;
                                                                                    i4 = min_unread_id2;
                                                                                    res = messages_messages;
                                                                                    res.messages.clear();
                                                                                    res.chats.clear();
                                                                                    res.users.clear();
                                                                                    FileLog.m3e(e2);
                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                    tL_messages_messages = e422222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                    i2 = channelId;
                                                                                    i3 = count_query;
                                                                                    z = num3;
                                                                                    count_unread = intValue2;
                                                                                    j = messageMaxId;
                                                                                    longSparseArray = replyMessageRandomOwners2;
                                                                                    queryFromServer = queryFromServer2;
                                                                                    res2 = messages_messages2;
                                                                                    i5 = max_unread_date;
                                                                                    i4 = min_unread_id2;
                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                    throw tL_messages_messages;
                                                                                }
                                                                            }
                                                                            chatsToLoad = intValue2;
                                                                            replyMessages = queryFromServer2;
                                                                            replyMessageOwners = max_unread_date;
                                                                            usersToLoad = min_unread_id2;
                                                                            messageMaxId = messageMaxId2;
                                                                        } else {
                                                                            SQLiteDatabase access$0007 = MessagesStorage.this.database;
                                                                            tL_messages_messages2 = tL_messages_messages;
                                                                            tL_messages_messages = Locale.US;
                                                                            min_unread_id2 = chatsToLoad;
                                                                            try {
                                                                                chatsToLoad = "SELECT min(mid), max(date) FROM messages WHERE uid = %d AND out = 0 AND read_state IN(0,2) AND mid > 0";
                                                                                messageMaxId2 = messageMaxId;
                                                                                try {
                                                                                    Object[] objArr4 = new Object[1];
                                                                                    i11 = lower_id2;
                                                                                    mentions_unread2 = max_id_override2;
                                                                                    try {
                                                                                        objArr4[0] = Long.valueOf(j);
                                                                                        tL_messages_messages = access$0007.queryFinalized(String.format(tL_messages_messages, chatsToLoad, objArr4), new Object[0]);
                                                                                        if (tL_messages_messages.next() != null) {
                                                                                            try {
                                                                                                chatsToLoad = tL_messages_messages.intValue(null);
                                                                                                try {
                                                                                                    max_unread_date = tL_messages_messages.intValue(1);
                                                                                                } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                                    e2 = e4222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                                    i4 = chatsToLoad;
                                                                                                    i2 = channelId;
                                                                                                    i3 = count_query;
                                                                                                    i9 = 0;
                                                                                                    count_unread = intValue2;
                                                                                                    i10 = replyMessageRandomOwners2;
                                                                                                    queryFromServer = queryFromServer2;
                                                                                                    messages_messages = messages_messages2;
                                                                                                    i5 = max_unread_date;
                                                                                                    j = messageMaxId2;
                                                                                                    res = messages_messages;
                                                                                                    res.messages.clear();
                                                                                                    res.chats.clear();
                                                                                                    res.users.clear();
                                                                                                    FileLog.m3e(e2);
                                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                                    tL_messages_messages = e42222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                                    i4 = chatsToLoad;
                                                                                                    i2 = channelId;
                                                                                                    i3 = count_query;
                                                                                                    i9 = 0;
                                                                                                    count_unread = intValue2;
                                                                                                    i10 = replyMessageRandomOwners2;
                                                                                                    queryFromServer = queryFromServer2;
                                                                                                    res2 = messages_messages2;
                                                                                                    i5 = max_unread_date;
                                                                                                    j = messageMaxId2;
                                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                    throw tL_messages_messages;
                                                                                                }
                                                                                            } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                                e2 = e422222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                                i2 = channelId;
                                                                                                i3 = count_query;
                                                                                                i9 = 0;
                                                                                                count_unread = intValue2;
                                                                                                i10 = replyMessageRandomOwners2;
                                                                                                queryFromServer = queryFromServer2;
                                                                                                messages_messages = messages_messages2;
                                                                                                i5 = max_unread_date;
                                                                                                i4 = min_unread_id2;
                                                                                                j = messageMaxId2;
                                                                                                res = messages_messages;
                                                                                                res.messages.clear();
                                                                                                res.chats.clear();
                                                                                                res.users.clear();
                                                                                                FileLog.m3e(e2);
                                                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                            } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                                tL_messages_messages = e4222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                                i2 = channelId;
                                                                                                i3 = count_query;
                                                                                                i9 = 0;
                                                                                                count_unread = intValue2;
                                                                                                i10 = replyMessageRandomOwners2;
                                                                                                queryFromServer = queryFromServer2;
                                                                                                res2 = messages_messages2;
                                                                                                i5 = max_unread_date;
                                                                                                i4 = min_unread_id2;
                                                                                                j = messageMaxId2;
                                                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                throw tL_messages_messages;
                                                                                            }
                                                                                        }
                                                                                        chatsToLoad = min_unread_id2;
                                                                                        try {
                                                                                            tL_messages_messages.dispose();
                                                                                            if (chatsToLoad != null) {
                                                                                                access$0007 = MessagesStorage.this.database;
                                                                                                locale3 = Locale.US;
                                                                                                str3 = "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid >= %d AND out = 0 AND read_state IN(0,2)";
                                                                                                objArr = new Object[2];
                                                                                                i9 = 0;
                                                                                                arrayList5 = usersToLoad;
                                                                                                try {
                                                                                                    objArr[0] = Long.valueOf(j);
                                                                                                    objArr[1] = Integer.valueOf(chatsToLoad);
                                                                                                    tL_messages_messages = access$0007.queryFinalized(String.format(locale3, str3, objArr), new Object[0]);
                                                                                                    if (tL_messages_messages.next() != 0) {
                                                                                                        offset_query3 = tL_messages_messages.intValue(0);
                                                                                                    } else {
                                                                                                        offset_query3 = intValue2;
                                                                                                    }
                                                                                                    try {
                                                                                                        tL_messages_messages.dispose();
                                                                                                        usersToLoad = chatsToLoad;
                                                                                                        chatsToLoad = offset_query3;
                                                                                                    } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                                        e2 = e42222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                                        i4 = chatsToLoad;
                                                                                                        i2 = channelId;
                                                                                                        i3 = count_query;
                                                                                                        count_unread = offset_query3;
                                                                                                        z = num3;
                                                                                                        i10 = replyMessageRandomOwners2;
                                                                                                        queryFromServer = queryFromServer2;
                                                                                                        messages_messages = messages_messages2;
                                                                                                        i5 = max_unread_date;
                                                                                                        j = messageMaxId2;
                                                                                                        res = messages_messages;
                                                                                                        res.messages.clear();
                                                                                                        res.chats.clear();
                                                                                                        res.users.clear();
                                                                                                        FileLog.m3e(e2);
                                                                                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                    } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                                        obj = e422222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                                        i4 = chatsToLoad;
                                                                                                        i2 = channelId;
                                                                                                        i3 = count_query;
                                                                                                        count_unread = offset_query3;
                                                                                                        z = num3;
                                                                                                        i10 = replyMessageRandomOwners2;
                                                                                                        queryFromServer = queryFromServer2;
                                                                                                        res2 = messages_messages2;
                                                                                                        i5 = max_unread_date;
                                                                                                        j = messageMaxId2;
                                                                                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                        throw tL_messages_messages;
                                                                                                    }
                                                                                                } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                                    e2 = e4222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                                    i4 = chatsToLoad;
                                                                                                    i2 = channelId;
                                                                                                    i3 = count_query;
                                                                                                    count_unread = intValue2;
                                                                                                    i10 = replyMessageRandomOwners2;
                                                                                                    queryFromServer = queryFromServer2;
                                                                                                    messages_messages = messages_messages2;
                                                                                                    i5 = max_unread_date;
                                                                                                    j = messageMaxId2;
                                                                                                    res = messages_messages;
                                                                                                    res.messages.clear();
                                                                                                    res.chats.clear();
                                                                                                    res.users.clear();
                                                                                                    FileLog.m3e(e2);
                                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                                    obj = e42222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                                    i4 = chatsToLoad;
                                                                                                    i2 = channelId;
                                                                                                    i3 = count_query;
                                                                                                    count_unread = intValue2;
                                                                                                    i10 = replyMessageRandomOwners2;
                                                                                                    queryFromServer = queryFromServer2;
                                                                                                    res2 = messages_messages2;
                                                                                                    i5 = max_unread_date;
                                                                                                    j = messageMaxId2;
                                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                    throw tL_messages_messages;
                                                                                                }
                                                                                            }
                                                                                            i9 = 0;
                                                                                            arrayList5 = usersToLoad;
                                                                                            usersToLoad = chatsToLoad;
                                                                                            chatsToLoad = intValue2;
                                                                                            replyMessages = queryFromServer2;
                                                                                            replyMessageOwners = max_unread_date;
                                                                                            messageMaxId = messageMaxId2;
                                                                                        } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                            i9 = 0;
                                                                                            e2 = e422222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                            i4 = chatsToLoad;
                                                                                            i2 = channelId;
                                                                                            i3 = count_query;
                                                                                            z = num3;
                                                                                            count_unread = intValue2;
                                                                                            longSparseArray = replyMessageRandomOwners2;
                                                                                            queryFromServer = queryFromServer2;
                                                                                            messages_messages = messages_messages2;
                                                                                            i5 = max_unread_date;
                                                                                            j = messageMaxId2;
                                                                                            res = messages_messages;
                                                                                            res.messages.clear();
                                                                                            res.chats.clear();
                                                                                            res.users.clear();
                                                                                            FileLog.m3e(e2);
                                                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                        } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                            i9 = 0;
                                                                                            tL_messages_messages = e4222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                            i4 = chatsToLoad;
                                                                                            i2 = channelId;
                                                                                            i3 = count_query;
                                                                                            z = num3;
                                                                                            count_unread = intValue2;
                                                                                            longSparseArray = replyMessageRandomOwners2;
                                                                                            queryFromServer = queryFromServer2;
                                                                                            res2 = messages_messages2;
                                                                                            i5 = max_unread_date;
                                                                                            j = messageMaxId2;
                                                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                            throw tL_messages_messages;
                                                                                        }
                                                                                    } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                        i9 = 0;
                                                                                        e2 = e42222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                        i2 = channelId;
                                                                                        i3 = count_query;
                                                                                        z = num3;
                                                                                        count_unread = intValue2;
                                                                                        longSparseArray = replyMessageRandomOwners2;
                                                                                        queryFromServer = queryFromServer2;
                                                                                        messages_messages = messages_messages2;
                                                                                        i5 = max_unread_date;
                                                                                        i4 = min_unread_id2;
                                                                                        j = messageMaxId2;
                                                                                        res = messages_messages;
                                                                                        res.messages.clear();
                                                                                        res.chats.clear();
                                                                                        res.users.clear();
                                                                                        FileLog.m3e(e2);
                                                                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                    } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                        i9 = 0;
                                                                                        tL_messages_messages = e422222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                        i2 = channelId;
                                                                                        i3 = count_query;
                                                                                        z = num3;
                                                                                        count_unread = intValue2;
                                                                                        longSparseArray = replyMessageRandomOwners2;
                                                                                        queryFromServer = queryFromServer2;
                                                                                        res2 = messages_messages2;
                                                                                        i5 = max_unread_date;
                                                                                        i4 = min_unread_id2;
                                                                                        j = messageMaxId2;
                                                                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                        throw tL_messages_messages;
                                                                                    }
                                                                                } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                    i9 = 0;
                                                                                    mentions_unread2 = max_id_override2;
                                                                                    e2 = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                    i2 = channelId;
                                                                                    i3 = count_query;
                                                                                    z = num3;
                                                                                    count_unread = intValue2;
                                                                                    longSparseArray = replyMessageRandomOwners2;
                                                                                    queryFromServer = queryFromServer2;
                                                                                    messages_messages = messages_messages2;
                                                                                    i5 = max_unread_date;
                                                                                    i4 = min_unread_id2;
                                                                                    j = messageMaxId2;
                                                                                    res = messages_messages;
                                                                                    res.messages.clear();
                                                                                    res.chats.clear();
                                                                                    res.users.clear();
                                                                                    FileLog.m3e(e2);
                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                    i9 = 0;
                                                                                    mentions_unread2 = max_id_override2;
                                                                                    tL_messages_messages = e42222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                    i2 = channelId;
                                                                                    i3 = count_query;
                                                                                    z = num3;
                                                                                    count_unread = intValue2;
                                                                                    longSparseArray = replyMessageRandomOwners2;
                                                                                    queryFromServer = queryFromServer2;
                                                                                    res2 = messages_messages2;
                                                                                    i5 = max_unread_date;
                                                                                    i4 = min_unread_id2;
                                                                                    j = messageMaxId2;
                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                    throw tL_messages_messages;
                                                                                }
                                                                            } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                i9 = 0;
                                                                                mentions_unread2 = max_id_override2;
                                                                                e2 = e422222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                i2 = channelId;
                                                                                i3 = count_query;
                                                                                z = num3;
                                                                                count_unread = intValue2;
                                                                                longSparseArray = replyMessageRandomOwners2;
                                                                                queryFromServer = queryFromServer2;
                                                                                messages_messages = messages_messages2;
                                                                                i5 = max_unread_date;
                                                                                i4 = min_unread_id2;
                                                                                j = messageMaxId;
                                                                                res = messages_messages;
                                                                                res.messages.clear();
                                                                                res.chats.clear();
                                                                                res.users.clear();
                                                                                FileLog.m3e(e2);
                                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                            } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                i9 = 0;
                                                                                mentions_unread2 = max_id_override2;
                                                                                tL_messages_messages = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                i2 = channelId;
                                                                                i3 = count_query;
                                                                                z = num3;
                                                                                count_unread = intValue2;
                                                                                longSparseArray = replyMessageRandomOwners2;
                                                                                queryFromServer = queryFromServer2;
                                                                                res2 = messages_messages2;
                                                                                i5 = max_unread_date;
                                                                                i4 = min_unread_id2;
                                                                                j = messageMaxId;
                                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                throw tL_messages_messages;
                                                                            }
                                                                        }
                                                                        replyMessages = queryFromServer2;
                                                                        replyMessageOwners = max_unread_date;
                                                                        messageMaxId = messageMaxId2;
                                                                    } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                        i9 = 0;
                                                                        mentions_unread2 = max_id_override2;
                                                                        e2 = e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                        i2 = channelId;
                                                                        i3 = count_query;
                                                                        z = num3;
                                                                        count_unread = intValue2;
                                                                        longSparseArray = replyMessageRandomOwners2;
                                                                        queryFromServer = queryFromServer2;
                                                                        messages_messages = messages_messages2;
                                                                        i5 = max_unread_date;
                                                                        i4 = chatsToLoad;
                                                                        j = messageMaxId;
                                                                        res = messages_messages;
                                                                        res.messages.clear();
                                                                        res.chats.clear();
                                                                        res.users.clear();
                                                                        FileLog.m3e(e2);
                                                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                    } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                        i9 = 0;
                                                                        mentions_unread2 = max_id_override2;
                                                                        tL_messages_messages = e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                        i2 = channelId;
                                                                        i3 = count_query;
                                                                        z = num3;
                                                                        count_unread = intValue2;
                                                                        longSparseArray = replyMessageRandomOwners2;
                                                                        queryFromServer = queryFromServer2;
                                                                        res2 = messages_messages2;
                                                                        i5 = max_unread_date;
                                                                        i4 = chatsToLoad;
                                                                        j = messageMaxId;
                                                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                        throw tL_messages_messages;
                                                                    }
                                                                } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                    i9 = 0;
                                                                    e2 = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                    i2 = channelId;
                                                                    i3 = count_query;
                                                                    z = num3;
                                                                    j = messageMaxId;
                                                                    count_unread = count_unread2;
                                                                    mentions_unread2 = mentions_unread;
                                                                    i4 = min_unread_id;
                                                                    i5 = max_unread_date2;
                                                                    i10 = max_id_query3;
                                                                    messages_messages = messages_messages2;
                                                                    res = messages_messages;
                                                                    res.messages.clear();
                                                                    res.chats.clear();
                                                                    res.users.clear();
                                                                    FileLog.m3e(e2);
                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                    i9 = 0;
                                                                    tL_messages_messages = e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                    i2 = channelId;
                                                                    i3 = count_query;
                                                                    z = num3;
                                                                    j = messageMaxId;
                                                                    count_unread = count_unread2;
                                                                    mentions_unread2 = mentions_unread;
                                                                    i4 = min_unread_id;
                                                                    i5 = max_unread_date2;
                                                                    i10 = max_id_query3;
                                                                    res2 = messages_messages2;
                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                    throw tL_messages_messages;
                                                                }
                                                            }
                                                            messages_messages2 = res4;
                                                            arrayList4 = chatsToLoad;
                                                            i9 = 0;
                                                            arrayList5 = usersToLoad;
                                                            i11 = lower_id2;
                                                            chatsToLoad = count_unread2;
                                                            mentions_unread2 = mentions_unread;
                                                            usersToLoad = min_unread_id;
                                                            replyMessages = queryFromServer;
                                                            replyMessageOwners = max_unread_date2;
                                                            replyMessageRandomOwners2 = max_id_query3;
                                                            if (count_query <= chatsToLoad) {
                                                                if (chatsToLoad >= num3) {
                                                                    offset_query3 = chatsToLoad - count_query;
                                                                    count_query += 10;
                                                                    cursor = MessagesStorage.this.database;
                                                                    locale2 = Locale.US;
                                                                    str2 = "SELECT start FROM messages_holes WHERE uid = %d AND start IN (0, 1)";
                                                                    i4 = usersToLoad;
                                                                    i5 = replyMessageOwners;
                                                                    replyMessageOwners = new Object[1];
                                                                    num = num3;
                                                                    replyMessageOwners[0] = Long.valueOf(j);
                                                                    cursor = cursor.queryFinalized(String.format(locale2, str2, replyMessageOwners), new Object[0]);
                                                                    if (cursor.next() == null) {
                                                                        cursor.dispose();
                                                                        usersToLoad = MessagesStorage.this.database;
                                                                        locale = Locale.US;
                                                                        replyMessageOwners = "SELECT min(mid) FROM messages WHERE uid = %d AND mid > 0";
                                                                        objArr = new Object[1];
                                                                        i10 = replyMessageRandomOwners2;
                                                                        objArr[0] = Long.valueOf(j);
                                                                        cursor = usersToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[0]);
                                                                        if (cursor.next() != null) {
                                                                            usersToLoad = cursor.intValue(null);
                                                                            if (usersToLoad != null) {
                                                                                state = MessagesStorage.this.database.executeFast("REPLACE INTO messages_holes VALUES(?, ?, ?)");
                                                                                state.requery();
                                                                                state.bindLong(1, j);
                                                                                state.bindInteger(2, null);
                                                                                state.bindInteger(3, usersToLoad);
                                                                                state.step();
                                                                                state.dispose();
                                                                            }
                                                                        }
                                                                        cursor.dispose();
                                                                    } else {
                                                                        if (cursor.intValue(null) != 1) {
                                                                        }
                                                                        cursor.dispose();
                                                                        isEnd = usersToLoad;
                                                                        i10 = replyMessageRandomOwners2;
                                                                    }
                                                                    if (i3 != 3) {
                                                                        if (i3 != 4) {
                                                                            if (replyMessages != null) {
                                                                                if (i3 == 2) {
                                                                                    sQLiteCursor = cursor;
                                                                                    count_unread = chatsToLoad;
                                                                                    usersToLoad = channelId;
                                                                                    j = messageMaxId;
                                                                                    cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT max(mid) FROM messages WHERE uid = %d AND mid > 0", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                                    if (cursor.next() != null) {
                                                                                        last_message_id = cursor.intValue(null);
                                                                                    }
                                                                                    cursor.dispose();
                                                                                    if (i3 == 4) {
                                                                                        if (i5 != null) {
                                                                                            cursor2 = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT max(mid) FROM messages WHERE uid = %d AND date <= %d AND mid > 0", new Object[]{Long.valueOf(j), Integer.valueOf(i5)}), new Object[0]);
                                                                                            if (cursor2.next() == null) {
                                                                                                chatsToLoad = cursor2.intValue(null);
                                                                                            } else {
                                                                                                chatsToLoad = -1;
                                                                                            }
                                                                                            cursor2.dispose();
                                                                                            cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT min(mid) FROM messages WHERE uid = %d AND date >= %d AND mid > 0", new Object[]{Long.valueOf(j), Integer.valueOf(i5)}), new Object[0]);
                                                                                            if (cursor.next()) {
                                                                                                endMid = cursor.intValue(0);
                                                                                            } else {
                                                                                                endMid = -1;
                                                                                            }
                                                                                            cursor.dispose();
                                                                                            if (chatsToLoad != endMid) {
                                                                                                replyMessageRandomOwners2 = chatsToLoad;
                                                                                                i3 = count_query;
                                                                                                messageMaxId = j;
                                                                                                if (replyMessageRandomOwners2 == null) {
                                                                                                }
                                                                                                if (chatsToLoad == null) {
                                                                                                    access$0002 = MessagesStorage.this.database;
                                                                                                    objArr2 = new Object[3];
                                                                                                    containMessage = chatsToLoad;
                                                                                                    objArr2[null] = Long.valueOf(j);
                                                                                                    objArr2[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                                    objArr2[2] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                                    cursor = access$0002.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start < %d AND end > %d", objArr2), new Object[null]);
                                                                                                    if (cursor.next() == null) {
                                                                                                        chatsToLoad = null;
                                                                                                    } else {
                                                                                                        chatsToLoad = containMessage;
                                                                                                    }
                                                                                                    cursor.dispose();
                                                                                                    sQLiteCursor2 = cursor;
                                                                                                    containMessage = chatsToLoad;
                                                                                                } else {
                                                                                                    sQLiteCursor2 = cursor;
                                                                                                    containMessage = chatsToLoad;
                                                                                                }
                                                                                                if (containMessage) {
                                                                                                    access$0004 = MessagesStorage.this.database;
                                                                                                    j2 = 0;
                                                                                                    objArr3 = new Object[2];
                                                                                                    holeMessageMinId = 1;
                                                                                                    objArr3[0] = Long.valueOf(j);
                                                                                                    objArr3[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                                    cursor = access$0004.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start >= %d ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                                                                    if (cursor.next() != null) {
                                                                                                        chatsToLoad = (long) cursor.intValue(null);
                                                                                                        if (usersToLoad == null) {
                                                                                                            j2 = chatsToLoad | (((long) usersToLoad) << 32);
                                                                                                        } else {
                                                                                                            j2 = chatsToLoad;
                                                                                                        }
                                                                                                    }
                                                                                                    cursor.dispose();
                                                                                                    cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(replyMessageRandomOwners2)}), new Object[0]);
                                                                                                    if (cursor.next() == null) {
                                                                                                        holeMessageMinId2 = (long) cursor.intValue(null);
                                                                                                        if (usersToLoad != null) {
                                                                                                            holeMessageMinId2 |= ((long) usersToLoad) << 32;
                                                                                                        }
                                                                                                    } else {
                                                                                                        holeMessageMinId2 = holeMessageMinId;
                                                                                                    }
                                                                                                    cursor.dispose();
                                                                                                    if (j2 != 0) {
                                                                                                        max_id_query = replyMessageRandomOwners2;
                                                                                                    } else if (holeMessageMinId2 == 1) {
                                                                                                        max_id_query = replyMessageRandomOwners2;
                                                                                                    } else {
                                                                                                        chatsToLoad = MessagesStorage.this.database;
                                                                                                        locale = Locale.US;
                                                                                                        replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                        objArr = new Object[6];
                                                                                                        max_id_query = replyMessageRandomOwners2;
                                                                                                        objArr[0] = Long.valueOf(j);
                                                                                                        objArr[1] = Long.valueOf(messageMaxId);
                                                                                                        objArr[2] = Integer.valueOf(i3 / 2);
                                                                                                        objArr[3] = Long.valueOf(j);
                                                                                                        objArr[4] = Long.valueOf(messageMaxId);
                                                                                                        objArr[5] = Integer.valueOf(i3 / 2);
                                                                                                        cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[null]);
                                                                                                        offset_query = offset_query3;
                                                                                                        channelId2 = usersToLoad;
                                                                                                        lower_id = unreadCountIsLocal;
                                                                                                        channelId = count_unread;
                                                                                                    }
                                                                                                    if (j2 == null) {
                                                                                                        j2 = C0539C.NANOS_PER_SECOND;
                                                                                                        if (usersToLoad != null) {
                                                                                                            replyMessageRandomOwners2 = C0539C.NANOS_PER_SECOND | (((long) usersToLoad) << 32);
                                                                                                            chatsToLoad = MessagesStorage.this.database;
                                                                                                            locale = Locale.US;
                                                                                                            replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                            objArr3 = new Object[8];
                                                                                                            offset_query = offset_query3;
                                                                                                            channelId2 = usersToLoad;
                                                                                                            objArr3[null] = Long.valueOf(j);
                                                                                                            objArr3[1] = Long.valueOf(messageMaxId);
                                                                                                            objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                                            objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                                            objArr3[4] = Long.valueOf(j);
                                                                                                            objArr3[5] = Long.valueOf(messageMaxId);
                                                                                                            objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                                            objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                                            cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                                            lower_id = unreadCountIsLocal;
                                                                                                            channelId = count_unread;
                                                                                                        }
                                                                                                    }
                                                                                                    replyMessageRandomOwners2 = j2;
                                                                                                    chatsToLoad = MessagesStorage.this.database;
                                                                                                    locale = Locale.US;
                                                                                                    replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                    objArr3 = new Object[8];
                                                                                                    offset_query = offset_query3;
                                                                                                    channelId2 = usersToLoad;
                                                                                                    objArr3[null] = Long.valueOf(j);
                                                                                                    objArr3[1] = Long.valueOf(messageMaxId);
                                                                                                    objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                                    objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                                    objArr3[4] = Long.valueOf(j);
                                                                                                    objArr3[5] = Long.valueOf(messageMaxId);
                                                                                                    objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                                    objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                                    cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                                    lower_id = unreadCountIsLocal;
                                                                                                    channelId = count_unread;
                                                                                                } else {
                                                                                                    offset_query = offset_query3;
                                                                                                    channelId2 = usersToLoad;
                                                                                                    max_id_query = replyMessageRandomOwners2;
                                                                                                    if (i3 != 2) {
                                                                                                        existingUnreadCount = 0;
                                                                                                        chatsToLoad = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid != 0 AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                                                        if (chatsToLoad.next()) {
                                                                                                            existingUnreadCount = chatsToLoad.intValue(0);
                                                                                                        }
                                                                                                        chatsToLoad.dispose();
                                                                                                        channelId = count_unread;
                                                                                                        if (existingUnreadCount != channelId) {
                                                                                                            lower_id = true;
                                                                                                            access$0003 = MessagesStorage.this.database;
                                                                                                            replyMessageOwners = new Object[6];
                                                                                                            cursor3 = chatsToLoad;
                                                                                                            replyMessageOwners[null] = Long.valueOf(j);
                                                                                                            replyMessageOwners[1] = Long.valueOf(messageMaxId);
                                                                                                            replyMessageOwners[2] = Integer.valueOf(i3 / 2);
                                                                                                            replyMessageOwners[3] = Long.valueOf(j);
                                                                                                            replyMessageOwners[4] = Long.valueOf(messageMaxId);
                                                                                                            replyMessageOwners[5] = Integer.valueOf(i3 / 2);
                                                                                                            cursor = access$0003.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", replyMessageOwners), new Object[null]);
                                                                                                        } else {
                                                                                                            i12 = existingUnreadCount;
                                                                                                            cursor3 = chatsToLoad;
                                                                                                            cursor = null;
                                                                                                            lower_id = unreadCountIsLocal;
                                                                                                        }
                                                                                                    } else {
                                                                                                        channelId = count_unread;
                                                                                                        cursor = null;
                                                                                                        lower_id = unreadCountIsLocal;
                                                                                                    }
                                                                                                }
                                                                                                count_unread = channelId;
                                                                                                queryFromServer = replyMessages;
                                                                                                j = messageMaxId;
                                                                                                unreadCountIsLocal = lower_id;
                                                                                                mentions_unread6 = mentions_unread2;
                                                                                                queryFromServer3 = num;
                                                                                                max_id_override2 = max_id_query;
                                                                                                i9 = offset_query;
                                                                                            } else {
                                                                                                replyMessageOwners = MessagesStorage.this.database;
                                                                                                locale3 = Locale.US;
                                                                                                str3 = "SELECT start FROM messages_holes WHERE uid = %d AND start <= %d AND end > %d";
                                                                                                objArr2 = new Object[3];
                                                                                                i3 = count_query;
                                                                                                objArr2[0] = Long.valueOf(j);
                                                                                                objArr2[1] = Integer.valueOf(chatsToLoad);
                                                                                                objArr2[2] = Integer.valueOf(chatsToLoad);
                                                                                                cursor = replyMessageOwners.queryFinalized(String.format(locale3, str3, objArr2), new Object[0]);
                                                                                                if (cursor.next()) {
                                                                                                    chatsToLoad = -1;
                                                                                                }
                                                                                                cursor.dispose();
                                                                                                if (chatsToLoad != -1) {
                                                                                                    cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start <= %d AND end > %d", new Object[]{Long.valueOf(j), Integer.valueOf(endMid), Integer.valueOf(endMid)}), new Object[null]);
                                                                                                    if (cursor.next()) {
                                                                                                        endMid = -1;
                                                                                                    }
                                                                                                    cursor.dispose();
                                                                                                    if (endMid != -1) {
                                                                                                        max_id_override2 = endMid;
                                                                                                        channelId = endMid;
                                                                                                        replyMessageOwners = (long) endMid;
                                                                                                        if (replyMessageOwners != 0) {
                                                                                                        }
                                                                                                        replyMessageRandomOwners2 = channelId;
                                                                                                        messageMaxId = replyMessageOwners;
                                                                                                        max_id_override = max_id_override2;
                                                                                                        if (replyMessageRandomOwners2 == null) {
                                                                                                        }
                                                                                                        if (chatsToLoad == null) {
                                                                                                            sQLiteCursor2 = cursor;
                                                                                                            containMessage = chatsToLoad;
                                                                                                        } else {
                                                                                                            access$0002 = MessagesStorage.this.database;
                                                                                                            objArr2 = new Object[3];
                                                                                                            containMessage = chatsToLoad;
                                                                                                            objArr2[null] = Long.valueOf(j);
                                                                                                            objArr2[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                                            objArr2[2] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                                            cursor = access$0002.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start < %d AND end > %d", objArr2), new Object[null]);
                                                                                                            if (cursor.next() == null) {
                                                                                                                chatsToLoad = containMessage;
                                                                                                            } else {
                                                                                                                chatsToLoad = null;
                                                                                                            }
                                                                                                            cursor.dispose();
                                                                                                            sQLiteCursor2 = cursor;
                                                                                                            containMessage = chatsToLoad;
                                                                                                        }
                                                                                                        if (containMessage) {
                                                                                                            offset_query = offset_query3;
                                                                                                            channelId2 = usersToLoad;
                                                                                                            max_id_query = replyMessageRandomOwners2;
                                                                                                            if (i3 != 2) {
                                                                                                                channelId = count_unread;
                                                                                                                cursor = null;
                                                                                                                lower_id = unreadCountIsLocal;
                                                                                                            } else {
                                                                                                                existingUnreadCount = 0;
                                                                                                                chatsToLoad = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid != 0 AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                                                                if (chatsToLoad.next()) {
                                                                                                                    existingUnreadCount = chatsToLoad.intValue(0);
                                                                                                                }
                                                                                                                chatsToLoad.dispose();
                                                                                                                channelId = count_unread;
                                                                                                                if (existingUnreadCount != channelId) {
                                                                                                                    i12 = existingUnreadCount;
                                                                                                                    cursor3 = chatsToLoad;
                                                                                                                    cursor = null;
                                                                                                                    lower_id = unreadCountIsLocal;
                                                                                                                } else {
                                                                                                                    lower_id = true;
                                                                                                                    access$0003 = MessagesStorage.this.database;
                                                                                                                    replyMessageOwners = new Object[6];
                                                                                                                    cursor3 = chatsToLoad;
                                                                                                                    replyMessageOwners[null] = Long.valueOf(j);
                                                                                                                    replyMessageOwners[1] = Long.valueOf(messageMaxId);
                                                                                                                    replyMessageOwners[2] = Integer.valueOf(i3 / 2);
                                                                                                                    replyMessageOwners[3] = Long.valueOf(j);
                                                                                                                    replyMessageOwners[4] = Long.valueOf(messageMaxId);
                                                                                                                    replyMessageOwners[5] = Integer.valueOf(i3 / 2);
                                                                                                                    cursor = access$0003.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", replyMessageOwners), new Object[null]);
                                                                                                                }
                                                                                                            }
                                                                                                        } else {
                                                                                                            access$0004 = MessagesStorage.this.database;
                                                                                                            j2 = 0;
                                                                                                            objArr3 = new Object[2];
                                                                                                            holeMessageMinId = 1;
                                                                                                            objArr3[0] = Long.valueOf(j);
                                                                                                            objArr3[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                                            cursor = access$0004.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start >= %d ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                                                                            if (cursor.next() != null) {
                                                                                                                chatsToLoad = (long) cursor.intValue(null);
                                                                                                                if (usersToLoad == null) {
                                                                                                                    j2 = chatsToLoad;
                                                                                                                } else {
                                                                                                                    j2 = chatsToLoad | (((long) usersToLoad) << 32);
                                                                                                                }
                                                                                                            }
                                                                                                            cursor.dispose();
                                                                                                            cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(replyMessageRandomOwners2)}), new Object[0]);
                                                                                                            if (cursor.next() == null) {
                                                                                                                holeMessageMinId2 = holeMessageMinId;
                                                                                                            } else {
                                                                                                                holeMessageMinId2 = (long) cursor.intValue(null);
                                                                                                                if (usersToLoad != null) {
                                                                                                                    holeMessageMinId2 |= ((long) usersToLoad) << 32;
                                                                                                                }
                                                                                                            }
                                                                                                            cursor.dispose();
                                                                                                            if (j2 != 0) {
                                                                                                                max_id_query = replyMessageRandomOwners2;
                                                                                                            } else if (holeMessageMinId2 == 1) {
                                                                                                                chatsToLoad = MessagesStorage.this.database;
                                                                                                                locale = Locale.US;
                                                                                                                replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                                objArr = new Object[6];
                                                                                                                max_id_query = replyMessageRandomOwners2;
                                                                                                                objArr[0] = Long.valueOf(j);
                                                                                                                objArr[1] = Long.valueOf(messageMaxId);
                                                                                                                objArr[2] = Integer.valueOf(i3 / 2);
                                                                                                                objArr[3] = Long.valueOf(j);
                                                                                                                objArr[4] = Long.valueOf(messageMaxId);
                                                                                                                objArr[5] = Integer.valueOf(i3 / 2);
                                                                                                                cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[null]);
                                                                                                                offset_query = offset_query3;
                                                                                                                channelId2 = usersToLoad;
                                                                                                                lower_id = unreadCountIsLocal;
                                                                                                                channelId = count_unread;
                                                                                                            } else {
                                                                                                                max_id_query = replyMessageRandomOwners2;
                                                                                                            }
                                                                                                            if (j2 == null) {
                                                                                                                j2 = C0539C.NANOS_PER_SECOND;
                                                                                                                if (usersToLoad != null) {
                                                                                                                    replyMessageRandomOwners2 = C0539C.NANOS_PER_SECOND | (((long) usersToLoad) << 32);
                                                                                                                    chatsToLoad = MessagesStorage.this.database;
                                                                                                                    locale = Locale.US;
                                                                                                                    replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                                    objArr3 = new Object[8];
                                                                                                                    offset_query = offset_query3;
                                                                                                                    channelId2 = usersToLoad;
                                                                                                                    objArr3[null] = Long.valueOf(j);
                                                                                                                    objArr3[1] = Long.valueOf(messageMaxId);
                                                                                                                    objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                                                    objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                                                    objArr3[4] = Long.valueOf(j);
                                                                                                                    objArr3[5] = Long.valueOf(messageMaxId);
                                                                                                                    objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                                                    objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                                                    cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                                                    lower_id = unreadCountIsLocal;
                                                                                                                    channelId = count_unread;
                                                                                                                }
                                                                                                            }
                                                                                                            replyMessageRandomOwners2 = j2;
                                                                                                            chatsToLoad = MessagesStorage.this.database;
                                                                                                            locale = Locale.US;
                                                                                                            replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                            objArr3 = new Object[8];
                                                                                                            offset_query = offset_query3;
                                                                                                            channelId2 = usersToLoad;
                                                                                                            objArr3[null] = Long.valueOf(j);
                                                                                                            objArr3[1] = Long.valueOf(messageMaxId);
                                                                                                            objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                                            objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                                            objArr3[4] = Long.valueOf(j);
                                                                                                            objArr3[5] = Long.valueOf(messageMaxId);
                                                                                                            objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                                            objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                                            cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                                            lower_id = unreadCountIsLocal;
                                                                                                            channelId = count_unread;
                                                                                                        }
                                                                                                        count_unread = channelId;
                                                                                                        queryFromServer = replyMessages;
                                                                                                        j = messageMaxId;
                                                                                                        unreadCountIsLocal = lower_id;
                                                                                                        mentions_unread6 = mentions_unread2;
                                                                                                        queryFromServer3 = num;
                                                                                                        max_id_override2 = max_id_query;
                                                                                                        i9 = offset_query;
                                                                                                    }
                                                                                                }
                                                                                                replyMessageRandomOwners2 = i10;
                                                                                                messageMaxId = j;
                                                                                                if (replyMessageRandomOwners2 == null) {
                                                                                                }
                                                                                                if (chatsToLoad == null) {
                                                                                                    access$0002 = MessagesStorage.this.database;
                                                                                                    objArr2 = new Object[3];
                                                                                                    containMessage = chatsToLoad;
                                                                                                    objArr2[null] = Long.valueOf(j);
                                                                                                    objArr2[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                                    objArr2[2] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                                    cursor = access$0002.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start < %d AND end > %d", objArr2), new Object[null]);
                                                                                                    if (cursor.next() == null) {
                                                                                                        chatsToLoad = null;
                                                                                                    } else {
                                                                                                        chatsToLoad = containMessage;
                                                                                                    }
                                                                                                    cursor.dispose();
                                                                                                    sQLiteCursor2 = cursor;
                                                                                                    containMessage = chatsToLoad;
                                                                                                } else {
                                                                                                    sQLiteCursor2 = cursor;
                                                                                                    containMessage = chatsToLoad;
                                                                                                }
                                                                                                if (containMessage) {
                                                                                                    access$0004 = MessagesStorage.this.database;
                                                                                                    j2 = 0;
                                                                                                    objArr3 = new Object[2];
                                                                                                    holeMessageMinId = 1;
                                                                                                    objArr3[0] = Long.valueOf(j);
                                                                                                    objArr3[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                                    cursor = access$0004.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start >= %d ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                                                                    if (cursor.next() != null) {
                                                                                                        chatsToLoad = (long) cursor.intValue(null);
                                                                                                        if (usersToLoad == null) {
                                                                                                            j2 = chatsToLoad | (((long) usersToLoad) << 32);
                                                                                                        } else {
                                                                                                            j2 = chatsToLoad;
                                                                                                        }
                                                                                                    }
                                                                                                    cursor.dispose();
                                                                                                    cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(replyMessageRandomOwners2)}), new Object[0]);
                                                                                                    if (cursor.next() == null) {
                                                                                                        holeMessageMinId2 = (long) cursor.intValue(null);
                                                                                                        if (usersToLoad != null) {
                                                                                                            holeMessageMinId2 |= ((long) usersToLoad) << 32;
                                                                                                        }
                                                                                                    } else {
                                                                                                        holeMessageMinId2 = holeMessageMinId;
                                                                                                    }
                                                                                                    cursor.dispose();
                                                                                                    if (j2 != 0) {
                                                                                                        max_id_query = replyMessageRandomOwners2;
                                                                                                    } else if (holeMessageMinId2 == 1) {
                                                                                                        max_id_query = replyMessageRandomOwners2;
                                                                                                    } else {
                                                                                                        chatsToLoad = MessagesStorage.this.database;
                                                                                                        locale = Locale.US;
                                                                                                        replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                        objArr = new Object[6];
                                                                                                        max_id_query = replyMessageRandomOwners2;
                                                                                                        objArr[0] = Long.valueOf(j);
                                                                                                        objArr[1] = Long.valueOf(messageMaxId);
                                                                                                        objArr[2] = Integer.valueOf(i3 / 2);
                                                                                                        objArr[3] = Long.valueOf(j);
                                                                                                        objArr[4] = Long.valueOf(messageMaxId);
                                                                                                        objArr[5] = Integer.valueOf(i3 / 2);
                                                                                                        cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[null]);
                                                                                                        offset_query = offset_query3;
                                                                                                        channelId2 = usersToLoad;
                                                                                                        lower_id = unreadCountIsLocal;
                                                                                                        channelId = count_unread;
                                                                                                    }
                                                                                                    if (j2 == null) {
                                                                                                        j2 = C0539C.NANOS_PER_SECOND;
                                                                                                        if (usersToLoad != null) {
                                                                                                            replyMessageRandomOwners2 = C0539C.NANOS_PER_SECOND | (((long) usersToLoad) << 32);
                                                                                                            chatsToLoad = MessagesStorage.this.database;
                                                                                                            locale = Locale.US;
                                                                                                            replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                            objArr3 = new Object[8];
                                                                                                            offset_query = offset_query3;
                                                                                                            channelId2 = usersToLoad;
                                                                                                            objArr3[null] = Long.valueOf(j);
                                                                                                            objArr3[1] = Long.valueOf(messageMaxId);
                                                                                                            objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                                            objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                                            objArr3[4] = Long.valueOf(j);
                                                                                                            objArr3[5] = Long.valueOf(messageMaxId);
                                                                                                            objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                                            objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                                            cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                                            lower_id = unreadCountIsLocal;
                                                                                                            channelId = count_unread;
                                                                                                        }
                                                                                                    }
                                                                                                    replyMessageRandomOwners2 = j2;
                                                                                                    chatsToLoad = MessagesStorage.this.database;
                                                                                                    locale = Locale.US;
                                                                                                    replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                    objArr3 = new Object[8];
                                                                                                    offset_query = offset_query3;
                                                                                                    channelId2 = usersToLoad;
                                                                                                    objArr3[null] = Long.valueOf(j);
                                                                                                    objArr3[1] = Long.valueOf(messageMaxId);
                                                                                                    objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                                    objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                                    objArr3[4] = Long.valueOf(j);
                                                                                                    objArr3[5] = Long.valueOf(messageMaxId);
                                                                                                    objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                                    objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                                    cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                                    lower_id = unreadCountIsLocal;
                                                                                                    channelId = count_unread;
                                                                                                } else {
                                                                                                    offset_query = offset_query3;
                                                                                                    channelId2 = usersToLoad;
                                                                                                    max_id_query = replyMessageRandomOwners2;
                                                                                                    if (i3 != 2) {
                                                                                                        existingUnreadCount = 0;
                                                                                                        chatsToLoad = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid != 0 AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                                                        if (chatsToLoad.next()) {
                                                                                                            existingUnreadCount = chatsToLoad.intValue(0);
                                                                                                        }
                                                                                                        chatsToLoad.dispose();
                                                                                                        channelId = count_unread;
                                                                                                        if (existingUnreadCount != channelId) {
                                                                                                            lower_id = true;
                                                                                                            access$0003 = MessagesStorage.this.database;
                                                                                                            replyMessageOwners = new Object[6];
                                                                                                            cursor3 = chatsToLoad;
                                                                                                            replyMessageOwners[null] = Long.valueOf(j);
                                                                                                            replyMessageOwners[1] = Long.valueOf(messageMaxId);
                                                                                                            replyMessageOwners[2] = Integer.valueOf(i3 / 2);
                                                                                                            replyMessageOwners[3] = Long.valueOf(j);
                                                                                                            replyMessageOwners[4] = Long.valueOf(messageMaxId);
                                                                                                            replyMessageOwners[5] = Integer.valueOf(i3 / 2);
                                                                                                            cursor = access$0003.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", replyMessageOwners), new Object[null]);
                                                                                                        } else {
                                                                                                            i12 = existingUnreadCount;
                                                                                                            cursor3 = chatsToLoad;
                                                                                                            cursor = null;
                                                                                                            lower_id = unreadCountIsLocal;
                                                                                                        }
                                                                                                    } else {
                                                                                                        channelId = count_unread;
                                                                                                        cursor = null;
                                                                                                        lower_id = unreadCountIsLocal;
                                                                                                    }
                                                                                                }
                                                                                                count_unread = channelId;
                                                                                                queryFromServer = replyMessages;
                                                                                                j = messageMaxId;
                                                                                                unreadCountIsLocal = lower_id;
                                                                                                mentions_unread6 = mentions_unread2;
                                                                                                queryFromServer3 = num;
                                                                                                max_id_override2 = max_id_query;
                                                                                                i9 = offset_query;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    i3 = count_query;
                                                                                    replyMessageRandomOwners2 = i10;
                                                                                    messageMaxId = j;
                                                                                    if (replyMessageRandomOwners2 == null) {
                                                                                    }
                                                                                    if (chatsToLoad == null) {
                                                                                        sQLiteCursor2 = cursor;
                                                                                        containMessage = chatsToLoad;
                                                                                    } else {
                                                                                        access$0002 = MessagesStorage.this.database;
                                                                                        objArr2 = new Object[3];
                                                                                        containMessage = chatsToLoad;
                                                                                        objArr2[null] = Long.valueOf(j);
                                                                                        objArr2[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                        objArr2[2] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                        cursor = access$0002.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start < %d AND end > %d", objArr2), new Object[null]);
                                                                                        if (cursor.next() == null) {
                                                                                            chatsToLoad = containMessage;
                                                                                        } else {
                                                                                            chatsToLoad = null;
                                                                                        }
                                                                                        cursor.dispose();
                                                                                        sQLiteCursor2 = cursor;
                                                                                        containMessage = chatsToLoad;
                                                                                    }
                                                                                    if (containMessage) {
                                                                                        offset_query = offset_query3;
                                                                                        channelId2 = usersToLoad;
                                                                                        max_id_query = replyMessageRandomOwners2;
                                                                                        if (i3 != 2) {
                                                                                            channelId = count_unread;
                                                                                            cursor = null;
                                                                                            lower_id = unreadCountIsLocal;
                                                                                        } else {
                                                                                            existingUnreadCount = 0;
                                                                                            chatsToLoad = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid != 0 AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                                            if (chatsToLoad.next()) {
                                                                                                existingUnreadCount = chatsToLoad.intValue(0);
                                                                                            }
                                                                                            chatsToLoad.dispose();
                                                                                            channelId = count_unread;
                                                                                            if (existingUnreadCount != channelId) {
                                                                                                i12 = existingUnreadCount;
                                                                                                cursor3 = chatsToLoad;
                                                                                                cursor = null;
                                                                                                lower_id = unreadCountIsLocal;
                                                                                            } else {
                                                                                                lower_id = true;
                                                                                                access$0003 = MessagesStorage.this.database;
                                                                                                replyMessageOwners = new Object[6];
                                                                                                cursor3 = chatsToLoad;
                                                                                                replyMessageOwners[null] = Long.valueOf(j);
                                                                                                replyMessageOwners[1] = Long.valueOf(messageMaxId);
                                                                                                replyMessageOwners[2] = Integer.valueOf(i3 / 2);
                                                                                                replyMessageOwners[3] = Long.valueOf(j);
                                                                                                replyMessageOwners[4] = Long.valueOf(messageMaxId);
                                                                                                replyMessageOwners[5] = Integer.valueOf(i3 / 2);
                                                                                                cursor = access$0003.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", replyMessageOwners), new Object[null]);
                                                                                            }
                                                                                        }
                                                                                    } else {
                                                                                        access$0004 = MessagesStorage.this.database;
                                                                                        j2 = 0;
                                                                                        objArr3 = new Object[2];
                                                                                        holeMessageMinId = 1;
                                                                                        objArr3[0] = Long.valueOf(j);
                                                                                        objArr3[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                        cursor = access$0004.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start >= %d ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                                                        if (cursor.next() != null) {
                                                                                            chatsToLoad = (long) cursor.intValue(null);
                                                                                            if (usersToLoad == null) {
                                                                                                j2 = chatsToLoad;
                                                                                            } else {
                                                                                                j2 = chatsToLoad | (((long) usersToLoad) << 32);
                                                                                            }
                                                                                        }
                                                                                        cursor.dispose();
                                                                                        cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(replyMessageRandomOwners2)}), new Object[0]);
                                                                                        if (cursor.next() == null) {
                                                                                            holeMessageMinId2 = holeMessageMinId;
                                                                                        } else {
                                                                                            holeMessageMinId2 = (long) cursor.intValue(null);
                                                                                            if (usersToLoad != null) {
                                                                                                holeMessageMinId2 |= ((long) usersToLoad) << 32;
                                                                                            }
                                                                                        }
                                                                                        cursor.dispose();
                                                                                        if (j2 != 0) {
                                                                                            max_id_query = replyMessageRandomOwners2;
                                                                                        } else if (holeMessageMinId2 == 1) {
                                                                                            chatsToLoad = MessagesStorage.this.database;
                                                                                            locale = Locale.US;
                                                                                            replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                            objArr = new Object[6];
                                                                                            max_id_query = replyMessageRandomOwners2;
                                                                                            objArr[0] = Long.valueOf(j);
                                                                                            objArr[1] = Long.valueOf(messageMaxId);
                                                                                            objArr[2] = Integer.valueOf(i3 / 2);
                                                                                            objArr[3] = Long.valueOf(j);
                                                                                            objArr[4] = Long.valueOf(messageMaxId);
                                                                                            objArr[5] = Integer.valueOf(i3 / 2);
                                                                                            cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[null]);
                                                                                            offset_query = offset_query3;
                                                                                            channelId2 = usersToLoad;
                                                                                            lower_id = unreadCountIsLocal;
                                                                                            channelId = count_unread;
                                                                                        } else {
                                                                                            max_id_query = replyMessageRandomOwners2;
                                                                                        }
                                                                                        if (j2 == null) {
                                                                                            j2 = C0539C.NANOS_PER_SECOND;
                                                                                            if (usersToLoad != null) {
                                                                                                replyMessageRandomOwners2 = C0539C.NANOS_PER_SECOND | (((long) usersToLoad) << 32);
                                                                                                chatsToLoad = MessagesStorage.this.database;
                                                                                                locale = Locale.US;
                                                                                                replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                objArr3 = new Object[8];
                                                                                                offset_query = offset_query3;
                                                                                                channelId2 = usersToLoad;
                                                                                                objArr3[null] = Long.valueOf(j);
                                                                                                objArr3[1] = Long.valueOf(messageMaxId);
                                                                                                objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                                objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                                objArr3[4] = Long.valueOf(j);
                                                                                                objArr3[5] = Long.valueOf(messageMaxId);
                                                                                                objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                                objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                                cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                                lower_id = unreadCountIsLocal;
                                                                                                channelId = count_unread;
                                                                                            }
                                                                                        }
                                                                                        replyMessageRandomOwners2 = j2;
                                                                                        chatsToLoad = MessagesStorage.this.database;
                                                                                        locale = Locale.US;
                                                                                        replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                        objArr3 = new Object[8];
                                                                                        offset_query = offset_query3;
                                                                                        channelId2 = usersToLoad;
                                                                                        objArr3[null] = Long.valueOf(j);
                                                                                        objArr3[1] = Long.valueOf(messageMaxId);
                                                                                        objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                        objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                        objArr3[4] = Long.valueOf(j);
                                                                                        objArr3[5] = Long.valueOf(messageMaxId);
                                                                                        objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                        objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                        cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                        lower_id = unreadCountIsLocal;
                                                                                        channelId = count_unread;
                                                                                    }
                                                                                    count_unread = channelId;
                                                                                    queryFromServer = replyMessages;
                                                                                    j = messageMaxId;
                                                                                    unreadCountIsLocal = lower_id;
                                                                                    mentions_unread6 = mentions_unread2;
                                                                                    queryFromServer3 = num;
                                                                                    max_id_override2 = max_id_query;
                                                                                    i9 = offset_query;
                                                                                }
                                                                            }
                                                                            if (i3 != 1) {
                                                                                sQLiteCursor = cursor;
                                                                                count_unread = chatsToLoad;
                                                                                channelId3 = channelId;
                                                                                if (i4 == 0) {
                                                                                    channelId4 = channelId3;
                                                                                    cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT max(mid) FROM messages WHERE uid = %d AND mid > 0", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                                    if (cursor.next() != null) {
                                                                                        last_message_id = cursor.intValue(null);
                                                                                    }
                                                                                    cursor.dispose();
                                                                                    usersToLoad = MessagesStorage.this.database;
                                                                                    objArr2 = new Object[1];
                                                                                    holeMessageId2 = null;
                                                                                    objArr2[0] = Long.valueOf(j);
                                                                                    cursor = usersToLoad.queryFinalized(String.format(Locale.US, "SELECT max(end) FROM messages_holes WHERE uid = %d", objArr2), new Object[0]);
                                                                                    if (cursor.next() == null) {
                                                                                        usersToLoad = channelId4;
                                                                                        chatsToLoad = holeMessageId2;
                                                                                    } else {
                                                                                        chatsToLoad = (long) cursor.intValue(null);
                                                                                        if (channelId4 == 0) {
                                                                                            usersToLoad = channelId4;
                                                                                        } else {
                                                                                            usersToLoad = channelId4;
                                                                                            chatsToLoad |= ((long) usersToLoad) << 32;
                                                                                        }
                                                                                    }
                                                                                    cursor.dispose();
                                                                                    if (chatsToLoad == null) {
                                                                                        cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d ORDER BY m.date DESC, m.mid DESC LIMIT %d,%d", new Object[]{Long.valueOf(j), Integer.valueOf(offset_query3), Integer.valueOf(count_query)}), new Object[0]);
                                                                                    } else {
                                                                                        access$0004 = MessagesStorage.this.database;
                                                                                        replyMessageOwners = Locale.US;
                                                                                        replyMessageRandomOwners2 = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND (m.mid >= %d OR m.mid < 0) ORDER BY m.date DESC, m.mid DESC LIMIT %d,%d";
                                                                                        objArr = new Object[4];
                                                                                        j = messageMaxId;
                                                                                        objArr[0] = Long.valueOf(j);
                                                                                        objArr[1] = Long.valueOf(chatsToLoad);
                                                                                        objArr[2] = Integer.valueOf(offset_query3);
                                                                                        objArr[3] = Integer.valueOf(count_query);
                                                                                        cursor = access$0004.queryFinalized(String.format(replyMessageOwners, replyMessageRandomOwners2, objArr), new Object[0]);
                                                                                    }
                                                                                    i3 = count_query;
                                                                                    i9 = offset_query3;
                                                                                    channelId2 = usersToLoad;
                                                                                    queryFromServer = replyMessages;
                                                                                    mentions_unread6 = mentions_unread2;
                                                                                    queryFromServer3 = num;
                                                                                    max_id_override2 = i10;
                                                                                } else {
                                                                                    if (messageMaxId == 0) {
                                                                                        offset_query2 = offset_query3;
                                                                                        channelId4 = channelId3;
                                                                                        access$000 = MessagesStorage.this.database;
                                                                                        chatsToLoad = Locale.US;
                                                                                        str = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d,%d";
                                                                                        usersToLoad = new Object[4];
                                                                                        usersToLoad[0] = Long.valueOf(j);
                                                                                        usersToLoad[1] = Integer.valueOf(i4);
                                                                                        offset_query3 = offset_query2;
                                                                                        usersToLoad[2] = Integer.valueOf(offset_query3);
                                                                                        usersToLoad[3] = Integer.valueOf(count_query);
                                                                                        cursor = access$000.queryFinalized(String.format(chatsToLoad, str, usersToLoad), new Object[0]);
                                                                                        i3 = count_query;
                                                                                        i9 = offset_query3;
                                                                                        queryFromServer = replyMessages;
                                                                                        j = messageMaxId;
                                                                                        mentions_unread6 = mentions_unread2;
                                                                                        queryFromServer3 = num;
                                                                                        max_id_override2 = i10;
                                                                                    } else {
                                                                                        j3 = 0;
                                                                                        cursor4 = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(i2)}), new Object[0]);
                                                                                        if (cursor4.next() != null) {
                                                                                            j3 = (long) cursor4.intValue(null);
                                                                                            if (channelId3 != 0) {
                                                                                                usersToLoad = channelId3;
                                                                                                j3 |= ((long) usersToLoad) << 32;
                                                                                                cursor4.dispose();
                                                                                                if (j3 == null) {
                                                                                                    access$0004 = MessagesStorage.this.database;
                                                                                                    replyMessageOwners = Locale.US;
                                                                                                    replyMessageRandomOwners2 = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d AND m.mid < %d AND (m.mid >= %d OR m.mid < 0) ORDER BY m.date DESC, m.mid DESC LIMIT %d";
                                                                                                    objArr = new Object[5];
                                                                                                    offset_query2 = offset_query3;
                                                                                                    channelId4 = usersToLoad;
                                                                                                    objArr[null] = Long.valueOf(j);
                                                                                                    objArr[1] = Integer.valueOf(i4);
                                                                                                    objArr[2] = Long.valueOf(messageMaxId);
                                                                                                    objArr[3] = Long.valueOf(j3);
                                                                                                    objArr[4] = Integer.valueOf(count_query);
                                                                                                    cursor = access$0004.queryFinalized(String.format(replyMessageOwners, replyMessageRandomOwners2, objArr), new Object[null]);
                                                                                                } else {
                                                                                                    offset_query2 = offset_query3;
                                                                                                    channelId4 = usersToLoad;
                                                                                                    cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d AND m.mid < %d ORDER BY m.date DESC, m.mid DESC LIMIT %d", new Object[]{Long.valueOf(j), Integer.valueOf(i4), Long.valueOf(messageMaxId), Integer.valueOf(count_query)}), new Object[0]);
                                                                                                }
                                                                                                i3 = count_query;
                                                                                                queryFromServer = replyMessages;
                                                                                                j = messageMaxId;
                                                                                                mentions_unread6 = mentions_unread2;
                                                                                                queryFromServer3 = num;
                                                                                                max_id_override2 = i10;
                                                                                                i9 = offset_query2;
                                                                                            }
                                                                                        }
                                                                                        usersToLoad = channelId3;
                                                                                        cursor4.dispose();
                                                                                        if (j3 == null) {
                                                                                            offset_query2 = offset_query3;
                                                                                            channelId4 = usersToLoad;
                                                                                            cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d AND m.mid < %d ORDER BY m.date DESC, m.mid DESC LIMIT %d", new Object[]{Long.valueOf(j), Integer.valueOf(i4), Long.valueOf(messageMaxId), Integer.valueOf(count_query)}), new Object[0]);
                                                                                        } else {
                                                                                            access$0004 = MessagesStorage.this.database;
                                                                                            replyMessageOwners = Locale.US;
                                                                                            replyMessageRandomOwners2 = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d AND m.mid < %d AND (m.mid >= %d OR m.mid < 0) ORDER BY m.date DESC, m.mid DESC LIMIT %d";
                                                                                            objArr = new Object[5];
                                                                                            offset_query2 = offset_query3;
                                                                                            channelId4 = usersToLoad;
                                                                                            objArr[null] = Long.valueOf(j);
                                                                                            objArr[1] = Integer.valueOf(i4);
                                                                                            objArr[2] = Long.valueOf(messageMaxId);
                                                                                            objArr[3] = Long.valueOf(j3);
                                                                                            objArr[4] = Integer.valueOf(count_query);
                                                                                            cursor = access$0004.queryFinalized(String.format(replyMessageOwners, replyMessageRandomOwners2, objArr), new Object[null]);
                                                                                        }
                                                                                        i3 = count_query;
                                                                                        queryFromServer = replyMessages;
                                                                                        j = messageMaxId;
                                                                                        mentions_unread6 = mentions_unread2;
                                                                                        queryFromServer3 = num;
                                                                                        max_id_override2 = i10;
                                                                                        i9 = offset_query2;
                                                                                    }
                                                                                    channelId2 = channelId4;
                                                                                }
                                                                            } else {
                                                                                replyMessageOwners = MessagesStorage.this.database;
                                                                                objArr3 = new Object[2];
                                                                                holeMessageId = null;
                                                                                objArr3[0] = Long.valueOf(j);
                                                                                objArr3[1] = Integer.valueOf(i2);
                                                                                cursor = replyMessageOwners.queryFinalized(String.format(Locale.US, "SELECT start, end FROM messages_holes WHERE uid = %d AND start >= %d AND start != 1 AND end != 1 ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                                                if (cursor.next() == null) {
                                                                                    usersToLoad = holeMessageId;
                                                                                } else {
                                                                                    usersToLoad = (long) cursor.intValue(null);
                                                                                    if (channelId != 0) {
                                                                                        usersToLoad |= ((long) channelId) << 32;
                                                                                    }
                                                                                }
                                                                                cursor.dispose();
                                                                                if (usersToLoad == null) {
                                                                                    sQLiteCursor3 = cursor;
                                                                                    count_unread = chatsToLoad;
                                                                                    channelId3 = channelId;
                                                                                    cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date >= %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d", new Object[]{Long.valueOf(j), Integer.valueOf(i4), Long.valueOf(messageMaxId), Integer.valueOf(count_query)}), new Object[0]);
                                                                                } else {
                                                                                    replyMessageOwners = MessagesStorage.this.database;
                                                                                    replyMessageRandomOwners2 = Locale.US;
                                                                                    str4 = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date >= %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d";
                                                                                    objArr3 = new Object[5];
                                                                                    count_unread = chatsToLoad;
                                                                                    channelId3 = channelId;
                                                                                    objArr3[0] = Long.valueOf(j);
                                                                                    objArr3[1] = Integer.valueOf(i4);
                                                                                    objArr3[2] = Long.valueOf(messageMaxId);
                                                                                    objArr3[3] = Long.valueOf(usersToLoad);
                                                                                    objArr3[4] = Integer.valueOf(count_query);
                                                                                    cursor = replyMessageOwners.queryFinalized(String.format(replyMessageRandomOwners2, str4, objArr3), new Object[null]);
                                                                                }
                                                                                i3 = count_query;
                                                                                i9 = offset_query3;
                                                                                queryFromServer = replyMessages;
                                                                                j = messageMaxId;
                                                                                mentions_unread6 = mentions_unread2;
                                                                                queryFromServer3 = num;
                                                                                max_id_override2 = i10;
                                                                                channelId2 = channelId3;
                                                                            }
                                                                        }
                                                                    }
                                                                    sQLiteCursor = cursor;
                                                                    count_unread = chatsToLoad;
                                                                    usersToLoad = channelId;
                                                                    j = messageMaxId;
                                                                    cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT max(mid) FROM messages WHERE uid = %d AND mid > 0", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                    if (cursor.next() != null) {
                                                                        last_message_id = cursor.intValue(null);
                                                                    }
                                                                    cursor.dispose();
                                                                    if (i3 == 4) {
                                                                        if (i5 != null) {
                                                                            cursor2 = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT max(mid) FROM messages WHERE uid = %d AND date <= %d AND mid > 0", new Object[]{Long.valueOf(j), Integer.valueOf(i5)}), new Object[0]);
                                                                            if (cursor2.next() == null) {
                                                                                chatsToLoad = -1;
                                                                            } else {
                                                                                chatsToLoad = cursor2.intValue(null);
                                                                            }
                                                                            cursor2.dispose();
                                                                            cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT min(mid) FROM messages WHERE uid = %d AND date >= %d AND mid > 0", new Object[]{Long.valueOf(j), Integer.valueOf(i5)}), new Object[0]);
                                                                            if (cursor.next()) {
                                                                                endMid = -1;
                                                                            } else {
                                                                                endMid = cursor.intValue(0);
                                                                            }
                                                                            cursor.dispose();
                                                                            if (chatsToLoad != endMid) {
                                                                                replyMessageOwners = MessagesStorage.this.database;
                                                                                locale3 = Locale.US;
                                                                                str3 = "SELECT start FROM messages_holes WHERE uid = %d AND start <= %d AND end > %d";
                                                                                objArr2 = new Object[3];
                                                                                i3 = count_query;
                                                                                objArr2[0] = Long.valueOf(j);
                                                                                objArr2[1] = Integer.valueOf(chatsToLoad);
                                                                                objArr2[2] = Integer.valueOf(chatsToLoad);
                                                                                cursor = replyMessageOwners.queryFinalized(String.format(locale3, str3, objArr2), new Object[0]);
                                                                                if (cursor.next()) {
                                                                                    chatsToLoad = -1;
                                                                                }
                                                                                cursor.dispose();
                                                                                if (chatsToLoad != -1) {
                                                                                    cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start <= %d AND end > %d", new Object[]{Long.valueOf(j), Integer.valueOf(endMid), Integer.valueOf(endMid)}), new Object[null]);
                                                                                    if (cursor.next()) {
                                                                                        endMid = -1;
                                                                                    }
                                                                                    cursor.dispose();
                                                                                    if (endMid != -1) {
                                                                                        max_id_override2 = endMid;
                                                                                        channelId = endMid;
                                                                                        replyMessageOwners = (long) endMid;
                                                                                        if (replyMessageOwners != 0) {
                                                                                        }
                                                                                        replyMessageRandomOwners2 = channelId;
                                                                                        messageMaxId = replyMessageOwners;
                                                                                        max_id_override = max_id_override2;
                                                                                        if (replyMessageRandomOwners2 == null) {
                                                                                        }
                                                                                        if (chatsToLoad == null) {
                                                                                            access$0002 = MessagesStorage.this.database;
                                                                                            objArr2 = new Object[3];
                                                                                            containMessage = chatsToLoad;
                                                                                            objArr2[null] = Long.valueOf(j);
                                                                                            objArr2[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                            objArr2[2] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                            cursor = access$0002.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start < %d AND end > %d", objArr2), new Object[null]);
                                                                                            if (cursor.next() == null) {
                                                                                                chatsToLoad = null;
                                                                                            } else {
                                                                                                chatsToLoad = containMessage;
                                                                                            }
                                                                                            cursor.dispose();
                                                                                            sQLiteCursor2 = cursor;
                                                                                            containMessage = chatsToLoad;
                                                                                        } else {
                                                                                            sQLiteCursor2 = cursor;
                                                                                            containMessage = chatsToLoad;
                                                                                        }
                                                                                        if (containMessage) {
                                                                                            access$0004 = MessagesStorage.this.database;
                                                                                            j2 = 0;
                                                                                            objArr3 = new Object[2];
                                                                                            holeMessageMinId = 1;
                                                                                            objArr3[0] = Long.valueOf(j);
                                                                                            objArr3[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                            cursor = access$0004.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start >= %d ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                                                            if (cursor.next() != null) {
                                                                                                chatsToLoad = (long) cursor.intValue(null);
                                                                                                if (usersToLoad == null) {
                                                                                                    j2 = chatsToLoad | (((long) usersToLoad) << 32);
                                                                                                } else {
                                                                                                    j2 = chatsToLoad;
                                                                                                }
                                                                                            }
                                                                                            cursor.dispose();
                                                                                            cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(replyMessageRandomOwners2)}), new Object[0]);
                                                                                            if (cursor.next() == null) {
                                                                                                holeMessageMinId2 = (long) cursor.intValue(null);
                                                                                                if (usersToLoad != null) {
                                                                                                    holeMessageMinId2 |= ((long) usersToLoad) << 32;
                                                                                                }
                                                                                            } else {
                                                                                                holeMessageMinId2 = holeMessageMinId;
                                                                                            }
                                                                                            cursor.dispose();
                                                                                            if (j2 != 0) {
                                                                                                max_id_query = replyMessageRandomOwners2;
                                                                                            } else if (holeMessageMinId2 == 1) {
                                                                                                max_id_query = replyMessageRandomOwners2;
                                                                                            } else {
                                                                                                chatsToLoad = MessagesStorage.this.database;
                                                                                                locale = Locale.US;
                                                                                                replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                objArr = new Object[6];
                                                                                                max_id_query = replyMessageRandomOwners2;
                                                                                                objArr[0] = Long.valueOf(j);
                                                                                                objArr[1] = Long.valueOf(messageMaxId);
                                                                                                objArr[2] = Integer.valueOf(i3 / 2);
                                                                                                objArr[3] = Long.valueOf(j);
                                                                                                objArr[4] = Long.valueOf(messageMaxId);
                                                                                                objArr[5] = Integer.valueOf(i3 / 2);
                                                                                                cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[null]);
                                                                                                offset_query = offset_query3;
                                                                                                channelId2 = usersToLoad;
                                                                                                lower_id = unreadCountIsLocal;
                                                                                                channelId = count_unread;
                                                                                            }
                                                                                            if (j2 == null) {
                                                                                                j2 = C0539C.NANOS_PER_SECOND;
                                                                                                if (usersToLoad != null) {
                                                                                                    replyMessageRandomOwners2 = C0539C.NANOS_PER_SECOND | (((long) usersToLoad) << 32);
                                                                                                    chatsToLoad = MessagesStorage.this.database;
                                                                                                    locale = Locale.US;
                                                                                                    replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                    objArr3 = new Object[8];
                                                                                                    offset_query = offset_query3;
                                                                                                    channelId2 = usersToLoad;
                                                                                                    objArr3[null] = Long.valueOf(j);
                                                                                                    objArr3[1] = Long.valueOf(messageMaxId);
                                                                                                    objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                                    objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                                    objArr3[4] = Long.valueOf(j);
                                                                                                    objArr3[5] = Long.valueOf(messageMaxId);
                                                                                                    objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                                    objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                                    cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                                    lower_id = unreadCountIsLocal;
                                                                                                    channelId = count_unread;
                                                                                                }
                                                                                            }
                                                                                            replyMessageRandomOwners2 = j2;
                                                                                            chatsToLoad = MessagesStorage.this.database;
                                                                                            locale = Locale.US;
                                                                                            replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                            objArr3 = new Object[8];
                                                                                            offset_query = offset_query3;
                                                                                            channelId2 = usersToLoad;
                                                                                            objArr3[null] = Long.valueOf(j);
                                                                                            objArr3[1] = Long.valueOf(messageMaxId);
                                                                                            objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                            objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                            objArr3[4] = Long.valueOf(j);
                                                                                            objArr3[5] = Long.valueOf(messageMaxId);
                                                                                            objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                            objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                            cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                            lower_id = unreadCountIsLocal;
                                                                                            channelId = count_unread;
                                                                                        } else {
                                                                                            offset_query = offset_query3;
                                                                                            channelId2 = usersToLoad;
                                                                                            max_id_query = replyMessageRandomOwners2;
                                                                                            if (i3 != 2) {
                                                                                                existingUnreadCount = 0;
                                                                                                chatsToLoad = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid != 0 AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                                                if (chatsToLoad.next()) {
                                                                                                    existingUnreadCount = chatsToLoad.intValue(0);
                                                                                                }
                                                                                                chatsToLoad.dispose();
                                                                                                channelId = count_unread;
                                                                                                if (existingUnreadCount != channelId) {
                                                                                                    lower_id = true;
                                                                                                    access$0003 = MessagesStorage.this.database;
                                                                                                    replyMessageOwners = new Object[6];
                                                                                                    cursor3 = chatsToLoad;
                                                                                                    replyMessageOwners[null] = Long.valueOf(j);
                                                                                                    replyMessageOwners[1] = Long.valueOf(messageMaxId);
                                                                                                    replyMessageOwners[2] = Integer.valueOf(i3 / 2);
                                                                                                    replyMessageOwners[3] = Long.valueOf(j);
                                                                                                    replyMessageOwners[4] = Long.valueOf(messageMaxId);
                                                                                                    replyMessageOwners[5] = Integer.valueOf(i3 / 2);
                                                                                                    cursor = access$0003.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", replyMessageOwners), new Object[null]);
                                                                                                } else {
                                                                                                    i12 = existingUnreadCount;
                                                                                                    cursor3 = chatsToLoad;
                                                                                                    cursor = null;
                                                                                                    lower_id = unreadCountIsLocal;
                                                                                                }
                                                                                            } else {
                                                                                                channelId = count_unread;
                                                                                                cursor = null;
                                                                                                lower_id = unreadCountIsLocal;
                                                                                            }
                                                                                        }
                                                                                        count_unread = channelId;
                                                                                        queryFromServer = replyMessages;
                                                                                        j = messageMaxId;
                                                                                        unreadCountIsLocal = lower_id;
                                                                                        mentions_unread6 = mentions_unread2;
                                                                                        queryFromServer3 = num;
                                                                                        max_id_override2 = max_id_query;
                                                                                        i9 = offset_query;
                                                                                    }
                                                                                }
                                                                                replyMessageRandomOwners2 = i10;
                                                                                messageMaxId = j;
                                                                                if (replyMessageRandomOwners2 == null) {
                                                                                }
                                                                                if (chatsToLoad == null) {
                                                                                    sQLiteCursor2 = cursor;
                                                                                    containMessage = chatsToLoad;
                                                                                } else {
                                                                                    access$0002 = MessagesStorage.this.database;
                                                                                    objArr2 = new Object[3];
                                                                                    containMessage = chatsToLoad;
                                                                                    objArr2[null] = Long.valueOf(j);
                                                                                    objArr2[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                    objArr2[2] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                    cursor = access$0002.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start < %d AND end > %d", objArr2), new Object[null]);
                                                                                    if (cursor.next() == null) {
                                                                                        chatsToLoad = containMessage;
                                                                                    } else {
                                                                                        chatsToLoad = null;
                                                                                    }
                                                                                    cursor.dispose();
                                                                                    sQLiteCursor2 = cursor;
                                                                                    containMessage = chatsToLoad;
                                                                                }
                                                                                if (containMessage) {
                                                                                    offset_query = offset_query3;
                                                                                    channelId2 = usersToLoad;
                                                                                    max_id_query = replyMessageRandomOwners2;
                                                                                    if (i3 != 2) {
                                                                                        channelId = count_unread;
                                                                                        cursor = null;
                                                                                        lower_id = unreadCountIsLocal;
                                                                                    } else {
                                                                                        existingUnreadCount = 0;
                                                                                        chatsToLoad = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid != 0 AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                                        if (chatsToLoad.next()) {
                                                                                            existingUnreadCount = chatsToLoad.intValue(0);
                                                                                        }
                                                                                        chatsToLoad.dispose();
                                                                                        channelId = count_unread;
                                                                                        if (existingUnreadCount != channelId) {
                                                                                            i12 = existingUnreadCount;
                                                                                            cursor3 = chatsToLoad;
                                                                                            cursor = null;
                                                                                            lower_id = unreadCountIsLocal;
                                                                                        } else {
                                                                                            lower_id = true;
                                                                                            access$0003 = MessagesStorage.this.database;
                                                                                            replyMessageOwners = new Object[6];
                                                                                            cursor3 = chatsToLoad;
                                                                                            replyMessageOwners[null] = Long.valueOf(j);
                                                                                            replyMessageOwners[1] = Long.valueOf(messageMaxId);
                                                                                            replyMessageOwners[2] = Integer.valueOf(i3 / 2);
                                                                                            replyMessageOwners[3] = Long.valueOf(j);
                                                                                            replyMessageOwners[4] = Long.valueOf(messageMaxId);
                                                                                            replyMessageOwners[5] = Integer.valueOf(i3 / 2);
                                                                                            cursor = access$0003.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", replyMessageOwners), new Object[null]);
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    access$0004 = MessagesStorage.this.database;
                                                                                    j2 = 0;
                                                                                    objArr3 = new Object[2];
                                                                                    holeMessageMinId = 1;
                                                                                    objArr3[0] = Long.valueOf(j);
                                                                                    objArr3[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                    cursor = access$0004.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start >= %d ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                                                    if (cursor.next() != null) {
                                                                                        chatsToLoad = (long) cursor.intValue(null);
                                                                                        if (usersToLoad == null) {
                                                                                            j2 = chatsToLoad;
                                                                                        } else {
                                                                                            j2 = chatsToLoad | (((long) usersToLoad) << 32);
                                                                                        }
                                                                                    }
                                                                                    cursor.dispose();
                                                                                    cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(replyMessageRandomOwners2)}), new Object[0]);
                                                                                    if (cursor.next() == null) {
                                                                                        holeMessageMinId2 = holeMessageMinId;
                                                                                    } else {
                                                                                        holeMessageMinId2 = (long) cursor.intValue(null);
                                                                                        if (usersToLoad != null) {
                                                                                            holeMessageMinId2 |= ((long) usersToLoad) << 32;
                                                                                        }
                                                                                    }
                                                                                    cursor.dispose();
                                                                                    if (j2 != 0) {
                                                                                        max_id_query = replyMessageRandomOwners2;
                                                                                    } else if (holeMessageMinId2 == 1) {
                                                                                        chatsToLoad = MessagesStorage.this.database;
                                                                                        locale = Locale.US;
                                                                                        replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                        objArr = new Object[6];
                                                                                        max_id_query = replyMessageRandomOwners2;
                                                                                        objArr[0] = Long.valueOf(j);
                                                                                        objArr[1] = Long.valueOf(messageMaxId);
                                                                                        objArr[2] = Integer.valueOf(i3 / 2);
                                                                                        objArr[3] = Long.valueOf(j);
                                                                                        objArr[4] = Long.valueOf(messageMaxId);
                                                                                        objArr[5] = Integer.valueOf(i3 / 2);
                                                                                        cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[null]);
                                                                                        offset_query = offset_query3;
                                                                                        channelId2 = usersToLoad;
                                                                                        lower_id = unreadCountIsLocal;
                                                                                        channelId = count_unread;
                                                                                    } else {
                                                                                        max_id_query = replyMessageRandomOwners2;
                                                                                    }
                                                                                    if (j2 == null) {
                                                                                        j2 = C0539C.NANOS_PER_SECOND;
                                                                                        if (usersToLoad != null) {
                                                                                            replyMessageRandomOwners2 = C0539C.NANOS_PER_SECOND | (((long) usersToLoad) << 32);
                                                                                            chatsToLoad = MessagesStorage.this.database;
                                                                                            locale = Locale.US;
                                                                                            replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                            objArr3 = new Object[8];
                                                                                            offset_query = offset_query3;
                                                                                            channelId2 = usersToLoad;
                                                                                            objArr3[null] = Long.valueOf(j);
                                                                                            objArr3[1] = Long.valueOf(messageMaxId);
                                                                                            objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                            objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                            objArr3[4] = Long.valueOf(j);
                                                                                            objArr3[5] = Long.valueOf(messageMaxId);
                                                                                            objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                            objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                            cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                            lower_id = unreadCountIsLocal;
                                                                                            channelId = count_unread;
                                                                                        }
                                                                                    }
                                                                                    replyMessageRandomOwners2 = j2;
                                                                                    chatsToLoad = MessagesStorage.this.database;
                                                                                    locale = Locale.US;
                                                                                    replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                    objArr3 = new Object[8];
                                                                                    offset_query = offset_query3;
                                                                                    channelId2 = usersToLoad;
                                                                                    objArr3[null] = Long.valueOf(j);
                                                                                    objArr3[1] = Long.valueOf(messageMaxId);
                                                                                    objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                    objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                    objArr3[4] = Long.valueOf(j);
                                                                                    objArr3[5] = Long.valueOf(messageMaxId);
                                                                                    objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                    objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                    cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                    lower_id = unreadCountIsLocal;
                                                                                    channelId = count_unread;
                                                                                }
                                                                                count_unread = channelId;
                                                                                queryFromServer = replyMessages;
                                                                                j = messageMaxId;
                                                                                unreadCountIsLocal = lower_id;
                                                                                mentions_unread6 = mentions_unread2;
                                                                                queryFromServer3 = num;
                                                                                max_id_override2 = max_id_query;
                                                                                i9 = offset_query;
                                                                            } else {
                                                                                replyMessageRandomOwners2 = chatsToLoad;
                                                                                i3 = count_query;
                                                                                messageMaxId = j;
                                                                                if (replyMessageRandomOwners2 == null) {
                                                                                }
                                                                                if (chatsToLoad == null) {
                                                                                    access$0002 = MessagesStorage.this.database;
                                                                                    objArr2 = new Object[3];
                                                                                    containMessage = chatsToLoad;
                                                                                    objArr2[null] = Long.valueOf(j);
                                                                                    objArr2[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                    objArr2[2] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                    cursor = access$0002.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start < %d AND end > %d", objArr2), new Object[null]);
                                                                                    if (cursor.next() == null) {
                                                                                        chatsToLoad = null;
                                                                                    } else {
                                                                                        chatsToLoad = containMessage;
                                                                                    }
                                                                                    cursor.dispose();
                                                                                    sQLiteCursor2 = cursor;
                                                                                    containMessage = chatsToLoad;
                                                                                } else {
                                                                                    sQLiteCursor2 = cursor;
                                                                                    containMessage = chatsToLoad;
                                                                                }
                                                                                if (containMessage) {
                                                                                    access$0004 = MessagesStorage.this.database;
                                                                                    j2 = 0;
                                                                                    objArr3 = new Object[2];
                                                                                    holeMessageMinId = 1;
                                                                                    objArr3[0] = Long.valueOf(j);
                                                                                    objArr3[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                    cursor = access$0004.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start >= %d ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                                                    if (cursor.next() != null) {
                                                                                        chatsToLoad = (long) cursor.intValue(null);
                                                                                        if (usersToLoad == null) {
                                                                                            j2 = chatsToLoad | (((long) usersToLoad) << 32);
                                                                                        } else {
                                                                                            j2 = chatsToLoad;
                                                                                        }
                                                                                    }
                                                                                    cursor.dispose();
                                                                                    cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(replyMessageRandomOwners2)}), new Object[0]);
                                                                                    if (cursor.next() == null) {
                                                                                        holeMessageMinId2 = (long) cursor.intValue(null);
                                                                                        if (usersToLoad != null) {
                                                                                            holeMessageMinId2 |= ((long) usersToLoad) << 32;
                                                                                        }
                                                                                    } else {
                                                                                        holeMessageMinId2 = holeMessageMinId;
                                                                                    }
                                                                                    cursor.dispose();
                                                                                    if (j2 != 0) {
                                                                                        max_id_query = replyMessageRandomOwners2;
                                                                                    } else if (holeMessageMinId2 == 1) {
                                                                                        max_id_query = replyMessageRandomOwners2;
                                                                                    } else {
                                                                                        chatsToLoad = MessagesStorage.this.database;
                                                                                        locale = Locale.US;
                                                                                        replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                        objArr = new Object[6];
                                                                                        max_id_query = replyMessageRandomOwners2;
                                                                                        objArr[0] = Long.valueOf(j);
                                                                                        objArr[1] = Long.valueOf(messageMaxId);
                                                                                        objArr[2] = Integer.valueOf(i3 / 2);
                                                                                        objArr[3] = Long.valueOf(j);
                                                                                        objArr[4] = Long.valueOf(messageMaxId);
                                                                                        objArr[5] = Integer.valueOf(i3 / 2);
                                                                                        cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[null]);
                                                                                        offset_query = offset_query3;
                                                                                        channelId2 = usersToLoad;
                                                                                        lower_id = unreadCountIsLocal;
                                                                                        channelId = count_unread;
                                                                                    }
                                                                                    if (j2 == null) {
                                                                                        j2 = C0539C.NANOS_PER_SECOND;
                                                                                        if (usersToLoad != null) {
                                                                                            replyMessageRandomOwners2 = C0539C.NANOS_PER_SECOND | (((long) usersToLoad) << 32);
                                                                                            chatsToLoad = MessagesStorage.this.database;
                                                                                            locale = Locale.US;
                                                                                            replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                            objArr3 = new Object[8];
                                                                                            offset_query = offset_query3;
                                                                                            channelId2 = usersToLoad;
                                                                                            objArr3[null] = Long.valueOf(j);
                                                                                            objArr3[1] = Long.valueOf(messageMaxId);
                                                                                            objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                            objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                            objArr3[4] = Long.valueOf(j);
                                                                                            objArr3[5] = Long.valueOf(messageMaxId);
                                                                                            objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                            objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                            cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                            lower_id = unreadCountIsLocal;
                                                                                            channelId = count_unread;
                                                                                        }
                                                                                    }
                                                                                    replyMessageRandomOwners2 = j2;
                                                                                    chatsToLoad = MessagesStorage.this.database;
                                                                                    locale = Locale.US;
                                                                                    replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                    objArr3 = new Object[8];
                                                                                    offset_query = offset_query3;
                                                                                    channelId2 = usersToLoad;
                                                                                    objArr3[null] = Long.valueOf(j);
                                                                                    objArr3[1] = Long.valueOf(messageMaxId);
                                                                                    objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                    objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                    objArr3[4] = Long.valueOf(j);
                                                                                    objArr3[5] = Long.valueOf(messageMaxId);
                                                                                    objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                    objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                    cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                    lower_id = unreadCountIsLocal;
                                                                                    channelId = count_unread;
                                                                                } else {
                                                                                    offset_query = offset_query3;
                                                                                    channelId2 = usersToLoad;
                                                                                    max_id_query = replyMessageRandomOwners2;
                                                                                    if (i3 != 2) {
                                                                                        existingUnreadCount = 0;
                                                                                        chatsToLoad = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid != 0 AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                                        if (chatsToLoad.next()) {
                                                                                            existingUnreadCount = chatsToLoad.intValue(0);
                                                                                        }
                                                                                        chatsToLoad.dispose();
                                                                                        channelId = count_unread;
                                                                                        if (existingUnreadCount != channelId) {
                                                                                            lower_id = true;
                                                                                            access$0003 = MessagesStorage.this.database;
                                                                                            replyMessageOwners = new Object[6];
                                                                                            cursor3 = chatsToLoad;
                                                                                            replyMessageOwners[null] = Long.valueOf(j);
                                                                                            replyMessageOwners[1] = Long.valueOf(messageMaxId);
                                                                                            replyMessageOwners[2] = Integer.valueOf(i3 / 2);
                                                                                            replyMessageOwners[3] = Long.valueOf(j);
                                                                                            replyMessageOwners[4] = Long.valueOf(messageMaxId);
                                                                                            replyMessageOwners[5] = Integer.valueOf(i3 / 2);
                                                                                            cursor = access$0003.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", replyMessageOwners), new Object[null]);
                                                                                        } else {
                                                                                            i12 = existingUnreadCount;
                                                                                            cursor3 = chatsToLoad;
                                                                                            cursor = null;
                                                                                            lower_id = unreadCountIsLocal;
                                                                                        }
                                                                                    } else {
                                                                                        channelId = count_unread;
                                                                                        cursor = null;
                                                                                        lower_id = unreadCountIsLocal;
                                                                                    }
                                                                                }
                                                                                count_unread = channelId;
                                                                                queryFromServer = replyMessages;
                                                                                j = messageMaxId;
                                                                                unreadCountIsLocal = lower_id;
                                                                                mentions_unread6 = mentions_unread2;
                                                                                queryFromServer3 = num;
                                                                                max_id_override2 = max_id_query;
                                                                                i9 = offset_query;
                                                                            }
                                                                        }
                                                                    }
                                                                    i3 = count_query;
                                                                    replyMessageRandomOwners2 = i10;
                                                                    messageMaxId = j;
                                                                    if (replyMessageRandomOwners2 == null) {
                                                                    }
                                                                    if (chatsToLoad == null) {
                                                                        sQLiteCursor2 = cursor;
                                                                        containMessage = chatsToLoad;
                                                                    } else {
                                                                        access$0002 = MessagesStorage.this.database;
                                                                        objArr2 = new Object[3];
                                                                        containMessage = chatsToLoad;
                                                                        objArr2[null] = Long.valueOf(j);
                                                                        objArr2[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                        objArr2[2] = Integer.valueOf(replyMessageRandomOwners2);
                                                                        cursor = access$0002.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start < %d AND end > %d", objArr2), new Object[null]);
                                                                        if (cursor.next() == null) {
                                                                            chatsToLoad = containMessage;
                                                                        } else {
                                                                            chatsToLoad = null;
                                                                        }
                                                                        cursor.dispose();
                                                                        sQLiteCursor2 = cursor;
                                                                        containMessage = chatsToLoad;
                                                                    }
                                                                    if (containMessage) {
                                                                        offset_query = offset_query3;
                                                                        channelId2 = usersToLoad;
                                                                        max_id_query = replyMessageRandomOwners2;
                                                                        if (i3 != 2) {
                                                                            channelId = count_unread;
                                                                            cursor = null;
                                                                            lower_id = unreadCountIsLocal;
                                                                        } else {
                                                                            existingUnreadCount = 0;
                                                                            chatsToLoad = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid != 0 AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                            if (chatsToLoad.next()) {
                                                                                existingUnreadCount = chatsToLoad.intValue(0);
                                                                            }
                                                                            chatsToLoad.dispose();
                                                                            channelId = count_unread;
                                                                            if (existingUnreadCount != channelId) {
                                                                                i12 = existingUnreadCount;
                                                                                cursor3 = chatsToLoad;
                                                                                cursor = null;
                                                                                lower_id = unreadCountIsLocal;
                                                                            } else {
                                                                                lower_id = true;
                                                                                access$0003 = MessagesStorage.this.database;
                                                                                replyMessageOwners = new Object[6];
                                                                                cursor3 = chatsToLoad;
                                                                                replyMessageOwners[null] = Long.valueOf(j);
                                                                                replyMessageOwners[1] = Long.valueOf(messageMaxId);
                                                                                replyMessageOwners[2] = Integer.valueOf(i3 / 2);
                                                                                replyMessageOwners[3] = Long.valueOf(j);
                                                                                replyMessageOwners[4] = Long.valueOf(messageMaxId);
                                                                                replyMessageOwners[5] = Integer.valueOf(i3 / 2);
                                                                                cursor = access$0003.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", replyMessageOwners), new Object[null]);
                                                                            }
                                                                        }
                                                                    } else {
                                                                        access$0004 = MessagesStorage.this.database;
                                                                        j2 = 0;
                                                                        objArr3 = new Object[2];
                                                                        holeMessageMinId = 1;
                                                                        objArr3[0] = Long.valueOf(j);
                                                                        objArr3[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                        cursor = access$0004.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start >= %d ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                                        if (cursor.next() != null) {
                                                                            chatsToLoad = (long) cursor.intValue(null);
                                                                            if (usersToLoad == null) {
                                                                                j2 = chatsToLoad;
                                                                            } else {
                                                                                j2 = chatsToLoad | (((long) usersToLoad) << 32);
                                                                            }
                                                                        }
                                                                        cursor.dispose();
                                                                        cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(replyMessageRandomOwners2)}), new Object[0]);
                                                                        if (cursor.next() == null) {
                                                                            holeMessageMinId2 = holeMessageMinId;
                                                                        } else {
                                                                            holeMessageMinId2 = (long) cursor.intValue(null);
                                                                            if (usersToLoad != null) {
                                                                                holeMessageMinId2 |= ((long) usersToLoad) << 32;
                                                                            }
                                                                        }
                                                                        cursor.dispose();
                                                                        if (j2 != 0) {
                                                                            max_id_query = replyMessageRandomOwners2;
                                                                        } else if (holeMessageMinId2 == 1) {
                                                                            chatsToLoad = MessagesStorage.this.database;
                                                                            locale = Locale.US;
                                                                            replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                            objArr = new Object[6];
                                                                            max_id_query = replyMessageRandomOwners2;
                                                                            objArr[0] = Long.valueOf(j);
                                                                            objArr[1] = Long.valueOf(messageMaxId);
                                                                            objArr[2] = Integer.valueOf(i3 / 2);
                                                                            objArr[3] = Long.valueOf(j);
                                                                            objArr[4] = Long.valueOf(messageMaxId);
                                                                            objArr[5] = Integer.valueOf(i3 / 2);
                                                                            cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[null]);
                                                                            offset_query = offset_query3;
                                                                            channelId2 = usersToLoad;
                                                                            lower_id = unreadCountIsLocal;
                                                                            channelId = count_unread;
                                                                        } else {
                                                                            max_id_query = replyMessageRandomOwners2;
                                                                        }
                                                                        if (j2 == null) {
                                                                            j2 = C0539C.NANOS_PER_SECOND;
                                                                            if (usersToLoad != null) {
                                                                                replyMessageRandomOwners2 = C0539C.NANOS_PER_SECOND | (((long) usersToLoad) << 32);
                                                                                chatsToLoad = MessagesStorage.this.database;
                                                                                locale = Locale.US;
                                                                                replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                objArr3 = new Object[8];
                                                                                offset_query = offset_query3;
                                                                                channelId2 = usersToLoad;
                                                                                objArr3[null] = Long.valueOf(j);
                                                                                objArr3[1] = Long.valueOf(messageMaxId);
                                                                                objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                objArr3[4] = Long.valueOf(j);
                                                                                objArr3[5] = Long.valueOf(messageMaxId);
                                                                                objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                lower_id = unreadCountIsLocal;
                                                                                channelId = count_unread;
                                                                            }
                                                                        }
                                                                        replyMessageRandomOwners2 = j2;
                                                                        chatsToLoad = MessagesStorage.this.database;
                                                                        locale = Locale.US;
                                                                        replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                        objArr3 = new Object[8];
                                                                        offset_query = offset_query3;
                                                                        channelId2 = usersToLoad;
                                                                        objArr3[null] = Long.valueOf(j);
                                                                        objArr3[1] = Long.valueOf(messageMaxId);
                                                                        objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                        objArr3[3] = Integer.valueOf(i3 / 2);
                                                                        objArr3[4] = Long.valueOf(j);
                                                                        objArr3[5] = Long.valueOf(messageMaxId);
                                                                        objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                        objArr3[7] = Integer.valueOf(i3 / 2);
                                                                        cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                        lower_id = unreadCountIsLocal;
                                                                        channelId = count_unread;
                                                                    }
                                                                    count_unread = channelId;
                                                                    queryFromServer = replyMessages;
                                                                    j = messageMaxId;
                                                                    unreadCountIsLocal = lower_id;
                                                                    mentions_unread6 = mentions_unread2;
                                                                    queryFromServer3 = num;
                                                                    max_id_override2 = max_id_query;
                                                                    i9 = offset_query;
                                                                }
                                                            }
                                                            try {
                                                                count_query = Math.max(count_query, chatsToLoad + 10);
                                                                if (chatsToLoad < num3) {
                                                                    chatsToLoad = null;
                                                                    usersToLoad = null;
                                                                    messageMaxId = 0;
                                                                    replyMessages = null;
                                                                    last_message_id = 0;
                                                                }
                                                                offset_query3 = i9;
                                                                cursor = MessagesStorage.this.database;
                                                                locale2 = Locale.US;
                                                                str2 = "SELECT start FROM messages_holes WHERE uid = %d AND start IN (0, 1)";
                                                                i4 = usersToLoad;
                                                                i5 = replyMessageOwners;
                                                                replyMessageOwners = new Object[1];
                                                                num = num3;
                                                                replyMessageOwners[0] = Long.valueOf(j);
                                                                cursor = cursor.queryFinalized(String.format(locale2, str2, replyMessageOwners), new Object[0]);
                                                                if (cursor.next() == null) {
                                                                    if (cursor.intValue(null) != 1) {
                                                                    }
                                                                    cursor.dispose();
                                                                    isEnd = usersToLoad;
                                                                    i10 = replyMessageRandomOwners2;
                                                                } else {
                                                                    cursor.dispose();
                                                                    usersToLoad = MessagesStorage.this.database;
                                                                    locale = Locale.US;
                                                                    replyMessageOwners = "SELECT min(mid) FROM messages WHERE uid = %d AND mid > 0";
                                                                    objArr = new Object[1];
                                                                    i10 = replyMessageRandomOwners2;
                                                                    objArr[0] = Long.valueOf(j);
                                                                    cursor = usersToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[0]);
                                                                    if (cursor.next() != null) {
                                                                        usersToLoad = cursor.intValue(null);
                                                                        if (usersToLoad != null) {
                                                                            state = MessagesStorage.this.database.executeFast("REPLACE INTO messages_holes VALUES(?, ?, ?)");
                                                                            state.requery();
                                                                            state.bindLong(1, j);
                                                                            state.bindInteger(2, null);
                                                                            state.bindInteger(3, usersToLoad);
                                                                            state.step();
                                                                            state.dispose();
                                                                        }
                                                                    }
                                                                    cursor.dispose();
                                                                }
                                                                if (i3 != 3) {
                                                                    if (i3 != 4) {
                                                                        if (replyMessages != null) {
                                                                            if (i3 == 2) {
                                                                                sQLiteCursor = cursor;
                                                                                count_unread = chatsToLoad;
                                                                                usersToLoad = channelId;
                                                                                j = messageMaxId;
                                                                                cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT max(mid) FROM messages WHERE uid = %d AND mid > 0", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                                if (cursor.next() != null) {
                                                                                    last_message_id = cursor.intValue(null);
                                                                                }
                                                                                cursor.dispose();
                                                                                if (i3 == 4) {
                                                                                    if (i5 != null) {
                                                                                        cursor2 = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT max(mid) FROM messages WHERE uid = %d AND date <= %d AND mid > 0", new Object[]{Long.valueOf(j), Integer.valueOf(i5)}), new Object[0]);
                                                                                        if (cursor2.next() == null) {
                                                                                            chatsToLoad = cursor2.intValue(null);
                                                                                        } else {
                                                                                            chatsToLoad = -1;
                                                                                        }
                                                                                        cursor2.dispose();
                                                                                        cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT min(mid) FROM messages WHERE uid = %d AND date >= %d AND mid > 0", new Object[]{Long.valueOf(j), Integer.valueOf(i5)}), new Object[0]);
                                                                                        if (cursor.next()) {
                                                                                            endMid = cursor.intValue(0);
                                                                                        } else {
                                                                                            endMid = -1;
                                                                                        }
                                                                                        cursor.dispose();
                                                                                        if (chatsToLoad != endMid) {
                                                                                            replyMessageRandomOwners2 = chatsToLoad;
                                                                                            i3 = count_query;
                                                                                            messageMaxId = j;
                                                                                            if (replyMessageRandomOwners2 == null) {
                                                                                            }
                                                                                            if (chatsToLoad == null) {
                                                                                                access$0002 = MessagesStorage.this.database;
                                                                                                objArr2 = new Object[3];
                                                                                                containMessage = chatsToLoad;
                                                                                                objArr2[null] = Long.valueOf(j);
                                                                                                objArr2[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                                objArr2[2] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                                cursor = access$0002.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start < %d AND end > %d", objArr2), new Object[null]);
                                                                                                if (cursor.next() == null) {
                                                                                                    chatsToLoad = null;
                                                                                                } else {
                                                                                                    chatsToLoad = containMessage;
                                                                                                }
                                                                                                cursor.dispose();
                                                                                                sQLiteCursor2 = cursor;
                                                                                                containMessage = chatsToLoad;
                                                                                            } else {
                                                                                                sQLiteCursor2 = cursor;
                                                                                                containMessage = chatsToLoad;
                                                                                            }
                                                                                            if (containMessage) {
                                                                                                access$0004 = MessagesStorage.this.database;
                                                                                                j2 = 0;
                                                                                                objArr3 = new Object[2];
                                                                                                holeMessageMinId = 1;
                                                                                                objArr3[0] = Long.valueOf(j);
                                                                                                objArr3[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                                cursor = access$0004.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start >= %d ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                                                                if (cursor.next() != null) {
                                                                                                    chatsToLoad = (long) cursor.intValue(null);
                                                                                                    if (usersToLoad == null) {
                                                                                                        j2 = chatsToLoad | (((long) usersToLoad) << 32);
                                                                                                    } else {
                                                                                                        j2 = chatsToLoad;
                                                                                                    }
                                                                                                }
                                                                                                cursor.dispose();
                                                                                                cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(replyMessageRandomOwners2)}), new Object[0]);
                                                                                                if (cursor.next() == null) {
                                                                                                    holeMessageMinId2 = (long) cursor.intValue(null);
                                                                                                    if (usersToLoad != null) {
                                                                                                        holeMessageMinId2 |= ((long) usersToLoad) << 32;
                                                                                                    }
                                                                                                } else {
                                                                                                    holeMessageMinId2 = holeMessageMinId;
                                                                                                }
                                                                                                cursor.dispose();
                                                                                                if (j2 != 0) {
                                                                                                    max_id_query = replyMessageRandomOwners2;
                                                                                                } else if (holeMessageMinId2 == 1) {
                                                                                                    max_id_query = replyMessageRandomOwners2;
                                                                                                } else {
                                                                                                    chatsToLoad = MessagesStorage.this.database;
                                                                                                    locale = Locale.US;
                                                                                                    replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                    objArr = new Object[6];
                                                                                                    max_id_query = replyMessageRandomOwners2;
                                                                                                    objArr[0] = Long.valueOf(j);
                                                                                                    objArr[1] = Long.valueOf(messageMaxId);
                                                                                                    objArr[2] = Integer.valueOf(i3 / 2);
                                                                                                    objArr[3] = Long.valueOf(j);
                                                                                                    objArr[4] = Long.valueOf(messageMaxId);
                                                                                                    objArr[5] = Integer.valueOf(i3 / 2);
                                                                                                    cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[null]);
                                                                                                    offset_query = offset_query3;
                                                                                                    channelId2 = usersToLoad;
                                                                                                    lower_id = unreadCountIsLocal;
                                                                                                    channelId = count_unread;
                                                                                                }
                                                                                                if (j2 == null) {
                                                                                                    j2 = C0539C.NANOS_PER_SECOND;
                                                                                                    if (usersToLoad != null) {
                                                                                                        replyMessageRandomOwners2 = C0539C.NANOS_PER_SECOND | (((long) usersToLoad) << 32);
                                                                                                        chatsToLoad = MessagesStorage.this.database;
                                                                                                        locale = Locale.US;
                                                                                                        replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                        objArr3 = new Object[8];
                                                                                                        offset_query = offset_query3;
                                                                                                        channelId2 = usersToLoad;
                                                                                                        objArr3[null] = Long.valueOf(j);
                                                                                                        objArr3[1] = Long.valueOf(messageMaxId);
                                                                                                        objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                                        objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                                        objArr3[4] = Long.valueOf(j);
                                                                                                        objArr3[5] = Long.valueOf(messageMaxId);
                                                                                                        objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                                        objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                                        cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                                        lower_id = unreadCountIsLocal;
                                                                                                        channelId = count_unread;
                                                                                                    }
                                                                                                }
                                                                                                replyMessageRandomOwners2 = j2;
                                                                                                chatsToLoad = MessagesStorage.this.database;
                                                                                                locale = Locale.US;
                                                                                                replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                objArr3 = new Object[8];
                                                                                                offset_query = offset_query3;
                                                                                                channelId2 = usersToLoad;
                                                                                                objArr3[null] = Long.valueOf(j);
                                                                                                objArr3[1] = Long.valueOf(messageMaxId);
                                                                                                objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                                objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                                objArr3[4] = Long.valueOf(j);
                                                                                                objArr3[5] = Long.valueOf(messageMaxId);
                                                                                                objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                                objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                                cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                                lower_id = unreadCountIsLocal;
                                                                                                channelId = count_unread;
                                                                                            } else {
                                                                                                offset_query = offset_query3;
                                                                                                channelId2 = usersToLoad;
                                                                                                max_id_query = replyMessageRandomOwners2;
                                                                                                if (i3 != 2) {
                                                                                                    existingUnreadCount = 0;
                                                                                                    chatsToLoad = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid != 0 AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                                                    if (chatsToLoad.next()) {
                                                                                                        existingUnreadCount = chatsToLoad.intValue(0);
                                                                                                    }
                                                                                                    chatsToLoad.dispose();
                                                                                                    channelId = count_unread;
                                                                                                    if (existingUnreadCount != channelId) {
                                                                                                        lower_id = true;
                                                                                                        access$0003 = MessagesStorage.this.database;
                                                                                                        replyMessageOwners = new Object[6];
                                                                                                        cursor3 = chatsToLoad;
                                                                                                        replyMessageOwners[null] = Long.valueOf(j);
                                                                                                        replyMessageOwners[1] = Long.valueOf(messageMaxId);
                                                                                                        replyMessageOwners[2] = Integer.valueOf(i3 / 2);
                                                                                                        replyMessageOwners[3] = Long.valueOf(j);
                                                                                                        replyMessageOwners[4] = Long.valueOf(messageMaxId);
                                                                                                        replyMessageOwners[5] = Integer.valueOf(i3 / 2);
                                                                                                        cursor = access$0003.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", replyMessageOwners), new Object[null]);
                                                                                                    } else {
                                                                                                        i12 = existingUnreadCount;
                                                                                                        cursor3 = chatsToLoad;
                                                                                                        cursor = null;
                                                                                                        lower_id = unreadCountIsLocal;
                                                                                                    }
                                                                                                } else {
                                                                                                    channelId = count_unread;
                                                                                                    cursor = null;
                                                                                                    lower_id = unreadCountIsLocal;
                                                                                                }
                                                                                            }
                                                                                            count_unread = channelId;
                                                                                            queryFromServer = replyMessages;
                                                                                            j = messageMaxId;
                                                                                            unreadCountIsLocal = lower_id;
                                                                                            mentions_unread6 = mentions_unread2;
                                                                                            queryFromServer3 = num;
                                                                                            max_id_override2 = max_id_query;
                                                                                            i9 = offset_query;
                                                                                        } else {
                                                                                            replyMessageOwners = MessagesStorage.this.database;
                                                                                            locale3 = Locale.US;
                                                                                            str3 = "SELECT start FROM messages_holes WHERE uid = %d AND start <= %d AND end > %d";
                                                                                            objArr2 = new Object[3];
                                                                                            i3 = count_query;
                                                                                            objArr2[0] = Long.valueOf(j);
                                                                                            objArr2[1] = Integer.valueOf(chatsToLoad);
                                                                                            objArr2[2] = Integer.valueOf(chatsToLoad);
                                                                                            cursor = replyMessageOwners.queryFinalized(String.format(locale3, str3, objArr2), new Object[0]);
                                                                                            if (cursor.next()) {
                                                                                                chatsToLoad = -1;
                                                                                            }
                                                                                            cursor.dispose();
                                                                                            if (chatsToLoad != -1) {
                                                                                                cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start <= %d AND end > %d", new Object[]{Long.valueOf(j), Integer.valueOf(endMid), Integer.valueOf(endMid)}), new Object[null]);
                                                                                                if (cursor.next()) {
                                                                                                    endMid = -1;
                                                                                                }
                                                                                                cursor.dispose();
                                                                                                if (endMid != -1) {
                                                                                                    max_id_override2 = endMid;
                                                                                                    channelId = endMid;
                                                                                                    replyMessageOwners = (long) endMid;
                                                                                                    if (replyMessageOwners != 0) {
                                                                                                    }
                                                                                                    replyMessageRandomOwners2 = channelId;
                                                                                                    messageMaxId = replyMessageOwners;
                                                                                                    max_id_override = max_id_override2;
                                                                                                    if (replyMessageRandomOwners2 == null) {
                                                                                                    }
                                                                                                    if (chatsToLoad == null) {
                                                                                                        sQLiteCursor2 = cursor;
                                                                                                        containMessage = chatsToLoad;
                                                                                                    } else {
                                                                                                        access$0002 = MessagesStorage.this.database;
                                                                                                        objArr2 = new Object[3];
                                                                                                        containMessage = chatsToLoad;
                                                                                                        objArr2[null] = Long.valueOf(j);
                                                                                                        objArr2[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                                        objArr2[2] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                                        cursor = access$0002.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start < %d AND end > %d", objArr2), new Object[null]);
                                                                                                        if (cursor.next() == null) {
                                                                                                            chatsToLoad = containMessage;
                                                                                                        } else {
                                                                                                            chatsToLoad = null;
                                                                                                        }
                                                                                                        cursor.dispose();
                                                                                                        sQLiteCursor2 = cursor;
                                                                                                        containMessage = chatsToLoad;
                                                                                                    }
                                                                                                    if (containMessage) {
                                                                                                        offset_query = offset_query3;
                                                                                                        channelId2 = usersToLoad;
                                                                                                        max_id_query = replyMessageRandomOwners2;
                                                                                                        if (i3 != 2) {
                                                                                                            channelId = count_unread;
                                                                                                            cursor = null;
                                                                                                            lower_id = unreadCountIsLocal;
                                                                                                        } else {
                                                                                                            existingUnreadCount = 0;
                                                                                                            chatsToLoad = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid != 0 AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                                                            if (chatsToLoad.next()) {
                                                                                                                existingUnreadCount = chatsToLoad.intValue(0);
                                                                                                            }
                                                                                                            chatsToLoad.dispose();
                                                                                                            channelId = count_unread;
                                                                                                            if (existingUnreadCount != channelId) {
                                                                                                                i12 = existingUnreadCount;
                                                                                                                cursor3 = chatsToLoad;
                                                                                                                cursor = null;
                                                                                                                lower_id = unreadCountIsLocal;
                                                                                                            } else {
                                                                                                                lower_id = true;
                                                                                                                access$0003 = MessagesStorage.this.database;
                                                                                                                replyMessageOwners = new Object[6];
                                                                                                                cursor3 = chatsToLoad;
                                                                                                                replyMessageOwners[null] = Long.valueOf(j);
                                                                                                                replyMessageOwners[1] = Long.valueOf(messageMaxId);
                                                                                                                replyMessageOwners[2] = Integer.valueOf(i3 / 2);
                                                                                                                replyMessageOwners[3] = Long.valueOf(j);
                                                                                                                replyMessageOwners[4] = Long.valueOf(messageMaxId);
                                                                                                                replyMessageOwners[5] = Integer.valueOf(i3 / 2);
                                                                                                                cursor = access$0003.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", replyMessageOwners), new Object[null]);
                                                                                                            }
                                                                                                        }
                                                                                                    } else {
                                                                                                        access$0004 = MessagesStorage.this.database;
                                                                                                        j2 = 0;
                                                                                                        objArr3 = new Object[2];
                                                                                                        holeMessageMinId = 1;
                                                                                                        objArr3[0] = Long.valueOf(j);
                                                                                                        objArr3[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                                        cursor = access$0004.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start >= %d ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                                                                        if (cursor.next() != null) {
                                                                                                            chatsToLoad = (long) cursor.intValue(null);
                                                                                                            if (usersToLoad == null) {
                                                                                                                j2 = chatsToLoad;
                                                                                                            } else {
                                                                                                                j2 = chatsToLoad | (((long) usersToLoad) << 32);
                                                                                                            }
                                                                                                        }
                                                                                                        cursor.dispose();
                                                                                                        cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(replyMessageRandomOwners2)}), new Object[0]);
                                                                                                        if (cursor.next() == null) {
                                                                                                            holeMessageMinId2 = holeMessageMinId;
                                                                                                        } else {
                                                                                                            holeMessageMinId2 = (long) cursor.intValue(null);
                                                                                                            if (usersToLoad != null) {
                                                                                                                holeMessageMinId2 |= ((long) usersToLoad) << 32;
                                                                                                            }
                                                                                                        }
                                                                                                        cursor.dispose();
                                                                                                        if (j2 != 0) {
                                                                                                            max_id_query = replyMessageRandomOwners2;
                                                                                                        } else if (holeMessageMinId2 == 1) {
                                                                                                            chatsToLoad = MessagesStorage.this.database;
                                                                                                            locale = Locale.US;
                                                                                                            replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                            objArr = new Object[6];
                                                                                                            max_id_query = replyMessageRandomOwners2;
                                                                                                            objArr[0] = Long.valueOf(j);
                                                                                                            objArr[1] = Long.valueOf(messageMaxId);
                                                                                                            objArr[2] = Integer.valueOf(i3 / 2);
                                                                                                            objArr[3] = Long.valueOf(j);
                                                                                                            objArr[4] = Long.valueOf(messageMaxId);
                                                                                                            objArr[5] = Integer.valueOf(i3 / 2);
                                                                                                            cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[null]);
                                                                                                            offset_query = offset_query3;
                                                                                                            channelId2 = usersToLoad;
                                                                                                            lower_id = unreadCountIsLocal;
                                                                                                            channelId = count_unread;
                                                                                                        } else {
                                                                                                            max_id_query = replyMessageRandomOwners2;
                                                                                                        }
                                                                                                        if (j2 == null) {
                                                                                                            j2 = C0539C.NANOS_PER_SECOND;
                                                                                                            if (usersToLoad != null) {
                                                                                                                replyMessageRandomOwners2 = C0539C.NANOS_PER_SECOND | (((long) usersToLoad) << 32);
                                                                                                                chatsToLoad = MessagesStorage.this.database;
                                                                                                                locale = Locale.US;
                                                                                                                replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                                objArr3 = new Object[8];
                                                                                                                offset_query = offset_query3;
                                                                                                                channelId2 = usersToLoad;
                                                                                                                objArr3[null] = Long.valueOf(j);
                                                                                                                objArr3[1] = Long.valueOf(messageMaxId);
                                                                                                                objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                                                objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                                                objArr3[4] = Long.valueOf(j);
                                                                                                                objArr3[5] = Long.valueOf(messageMaxId);
                                                                                                                objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                                                objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                                                cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                                                lower_id = unreadCountIsLocal;
                                                                                                                channelId = count_unread;
                                                                                                            }
                                                                                                        }
                                                                                                        replyMessageRandomOwners2 = j2;
                                                                                                        chatsToLoad = MessagesStorage.this.database;
                                                                                                        locale = Locale.US;
                                                                                                        replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                        objArr3 = new Object[8];
                                                                                                        offset_query = offset_query3;
                                                                                                        channelId2 = usersToLoad;
                                                                                                        objArr3[null] = Long.valueOf(j);
                                                                                                        objArr3[1] = Long.valueOf(messageMaxId);
                                                                                                        objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                                        objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                                        objArr3[4] = Long.valueOf(j);
                                                                                                        objArr3[5] = Long.valueOf(messageMaxId);
                                                                                                        objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                                        objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                                        cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                                        lower_id = unreadCountIsLocal;
                                                                                                        channelId = count_unread;
                                                                                                    }
                                                                                                    count_unread = channelId;
                                                                                                    queryFromServer = replyMessages;
                                                                                                    j = messageMaxId;
                                                                                                    unreadCountIsLocal = lower_id;
                                                                                                    mentions_unread6 = mentions_unread2;
                                                                                                    queryFromServer3 = num;
                                                                                                    max_id_override2 = max_id_query;
                                                                                                    i9 = offset_query;
                                                                                                }
                                                                                            }
                                                                                            replyMessageRandomOwners2 = i10;
                                                                                            messageMaxId = j;
                                                                                            if (replyMessageRandomOwners2 == null) {
                                                                                            }
                                                                                            if (chatsToLoad == null) {
                                                                                                access$0002 = MessagesStorage.this.database;
                                                                                                objArr2 = new Object[3];
                                                                                                containMessage = chatsToLoad;
                                                                                                objArr2[null] = Long.valueOf(j);
                                                                                                objArr2[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                                objArr2[2] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                                cursor = access$0002.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start < %d AND end > %d", objArr2), new Object[null]);
                                                                                                if (cursor.next() == null) {
                                                                                                    chatsToLoad = null;
                                                                                                } else {
                                                                                                    chatsToLoad = containMessage;
                                                                                                }
                                                                                                cursor.dispose();
                                                                                                sQLiteCursor2 = cursor;
                                                                                                containMessage = chatsToLoad;
                                                                                            } else {
                                                                                                sQLiteCursor2 = cursor;
                                                                                                containMessage = chatsToLoad;
                                                                                            }
                                                                                            if (containMessage) {
                                                                                                access$0004 = MessagesStorage.this.database;
                                                                                                j2 = 0;
                                                                                                objArr3 = new Object[2];
                                                                                                holeMessageMinId = 1;
                                                                                                objArr3[0] = Long.valueOf(j);
                                                                                                objArr3[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                                cursor = access$0004.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start >= %d ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                                                                if (cursor.next() != null) {
                                                                                                    chatsToLoad = (long) cursor.intValue(null);
                                                                                                    if (usersToLoad == null) {
                                                                                                        j2 = chatsToLoad | (((long) usersToLoad) << 32);
                                                                                                    } else {
                                                                                                        j2 = chatsToLoad;
                                                                                                    }
                                                                                                }
                                                                                                cursor.dispose();
                                                                                                cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(replyMessageRandomOwners2)}), new Object[0]);
                                                                                                if (cursor.next() == null) {
                                                                                                    holeMessageMinId2 = (long) cursor.intValue(null);
                                                                                                    if (usersToLoad != null) {
                                                                                                        holeMessageMinId2 |= ((long) usersToLoad) << 32;
                                                                                                    }
                                                                                                } else {
                                                                                                    holeMessageMinId2 = holeMessageMinId;
                                                                                                }
                                                                                                cursor.dispose();
                                                                                                if (j2 != 0) {
                                                                                                    max_id_query = replyMessageRandomOwners2;
                                                                                                } else if (holeMessageMinId2 == 1) {
                                                                                                    max_id_query = replyMessageRandomOwners2;
                                                                                                } else {
                                                                                                    chatsToLoad = MessagesStorage.this.database;
                                                                                                    locale = Locale.US;
                                                                                                    replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                    objArr = new Object[6];
                                                                                                    max_id_query = replyMessageRandomOwners2;
                                                                                                    objArr[0] = Long.valueOf(j);
                                                                                                    objArr[1] = Long.valueOf(messageMaxId);
                                                                                                    objArr[2] = Integer.valueOf(i3 / 2);
                                                                                                    objArr[3] = Long.valueOf(j);
                                                                                                    objArr[4] = Long.valueOf(messageMaxId);
                                                                                                    objArr[5] = Integer.valueOf(i3 / 2);
                                                                                                    cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[null]);
                                                                                                    offset_query = offset_query3;
                                                                                                    channelId2 = usersToLoad;
                                                                                                    lower_id = unreadCountIsLocal;
                                                                                                    channelId = count_unread;
                                                                                                }
                                                                                                if (j2 == null) {
                                                                                                    j2 = C0539C.NANOS_PER_SECOND;
                                                                                                    if (usersToLoad != null) {
                                                                                                        replyMessageRandomOwners2 = C0539C.NANOS_PER_SECOND | (((long) usersToLoad) << 32);
                                                                                                        chatsToLoad = MessagesStorage.this.database;
                                                                                                        locale = Locale.US;
                                                                                                        replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                        objArr3 = new Object[8];
                                                                                                        offset_query = offset_query3;
                                                                                                        channelId2 = usersToLoad;
                                                                                                        objArr3[null] = Long.valueOf(j);
                                                                                                        objArr3[1] = Long.valueOf(messageMaxId);
                                                                                                        objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                                        objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                                        objArr3[4] = Long.valueOf(j);
                                                                                                        objArr3[5] = Long.valueOf(messageMaxId);
                                                                                                        objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                                        objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                                        cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                                        lower_id = unreadCountIsLocal;
                                                                                                        channelId = count_unread;
                                                                                                    }
                                                                                                }
                                                                                                replyMessageRandomOwners2 = j2;
                                                                                                chatsToLoad = MessagesStorage.this.database;
                                                                                                locale = Locale.US;
                                                                                                replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                objArr3 = new Object[8];
                                                                                                offset_query = offset_query3;
                                                                                                channelId2 = usersToLoad;
                                                                                                objArr3[null] = Long.valueOf(j);
                                                                                                objArr3[1] = Long.valueOf(messageMaxId);
                                                                                                objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                                objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                                objArr3[4] = Long.valueOf(j);
                                                                                                objArr3[5] = Long.valueOf(messageMaxId);
                                                                                                objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                                objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                                cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                                lower_id = unreadCountIsLocal;
                                                                                                channelId = count_unread;
                                                                                            } else {
                                                                                                offset_query = offset_query3;
                                                                                                channelId2 = usersToLoad;
                                                                                                max_id_query = replyMessageRandomOwners2;
                                                                                                if (i3 != 2) {
                                                                                                    existingUnreadCount = 0;
                                                                                                    chatsToLoad = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid != 0 AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                                                    if (chatsToLoad.next()) {
                                                                                                        existingUnreadCount = chatsToLoad.intValue(0);
                                                                                                    }
                                                                                                    chatsToLoad.dispose();
                                                                                                    channelId = count_unread;
                                                                                                    if (existingUnreadCount != channelId) {
                                                                                                        lower_id = true;
                                                                                                        access$0003 = MessagesStorage.this.database;
                                                                                                        replyMessageOwners = new Object[6];
                                                                                                        cursor3 = chatsToLoad;
                                                                                                        replyMessageOwners[null] = Long.valueOf(j);
                                                                                                        replyMessageOwners[1] = Long.valueOf(messageMaxId);
                                                                                                        replyMessageOwners[2] = Integer.valueOf(i3 / 2);
                                                                                                        replyMessageOwners[3] = Long.valueOf(j);
                                                                                                        replyMessageOwners[4] = Long.valueOf(messageMaxId);
                                                                                                        replyMessageOwners[5] = Integer.valueOf(i3 / 2);
                                                                                                        cursor = access$0003.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", replyMessageOwners), new Object[null]);
                                                                                                    } else {
                                                                                                        i12 = existingUnreadCount;
                                                                                                        cursor3 = chatsToLoad;
                                                                                                        cursor = null;
                                                                                                        lower_id = unreadCountIsLocal;
                                                                                                    }
                                                                                                } else {
                                                                                                    channelId = count_unread;
                                                                                                    cursor = null;
                                                                                                    lower_id = unreadCountIsLocal;
                                                                                                }
                                                                                            }
                                                                                            count_unread = channelId;
                                                                                            queryFromServer = replyMessages;
                                                                                            j = messageMaxId;
                                                                                            unreadCountIsLocal = lower_id;
                                                                                            mentions_unread6 = mentions_unread2;
                                                                                            queryFromServer3 = num;
                                                                                            max_id_override2 = max_id_query;
                                                                                            i9 = offset_query;
                                                                                        }
                                                                                    }
                                                                                }
                                                                                i3 = count_query;
                                                                                replyMessageRandomOwners2 = i10;
                                                                                messageMaxId = j;
                                                                                if (replyMessageRandomOwners2 == null) {
                                                                                }
                                                                                if (chatsToLoad == null) {
                                                                                    sQLiteCursor2 = cursor;
                                                                                    containMessage = chatsToLoad;
                                                                                } else {
                                                                                    access$0002 = MessagesStorage.this.database;
                                                                                    objArr2 = new Object[3];
                                                                                    containMessage = chatsToLoad;
                                                                                    objArr2[null] = Long.valueOf(j);
                                                                                    objArr2[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                    objArr2[2] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                    cursor = access$0002.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start < %d AND end > %d", objArr2), new Object[null]);
                                                                                    if (cursor.next() == null) {
                                                                                        chatsToLoad = containMessage;
                                                                                    } else {
                                                                                        chatsToLoad = null;
                                                                                    }
                                                                                    cursor.dispose();
                                                                                    sQLiteCursor2 = cursor;
                                                                                    containMessage = chatsToLoad;
                                                                                }
                                                                                if (containMessage) {
                                                                                    offset_query = offset_query3;
                                                                                    channelId2 = usersToLoad;
                                                                                    max_id_query = replyMessageRandomOwners2;
                                                                                    if (i3 != 2) {
                                                                                        channelId = count_unread;
                                                                                        cursor = null;
                                                                                        lower_id = unreadCountIsLocal;
                                                                                    } else {
                                                                                        existingUnreadCount = 0;
                                                                                        chatsToLoad = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid != 0 AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                                        if (chatsToLoad.next()) {
                                                                                            existingUnreadCount = chatsToLoad.intValue(0);
                                                                                        }
                                                                                        chatsToLoad.dispose();
                                                                                        channelId = count_unread;
                                                                                        if (existingUnreadCount != channelId) {
                                                                                            i12 = existingUnreadCount;
                                                                                            cursor3 = chatsToLoad;
                                                                                            cursor = null;
                                                                                            lower_id = unreadCountIsLocal;
                                                                                        } else {
                                                                                            lower_id = true;
                                                                                            access$0003 = MessagesStorage.this.database;
                                                                                            replyMessageOwners = new Object[6];
                                                                                            cursor3 = chatsToLoad;
                                                                                            replyMessageOwners[null] = Long.valueOf(j);
                                                                                            replyMessageOwners[1] = Long.valueOf(messageMaxId);
                                                                                            replyMessageOwners[2] = Integer.valueOf(i3 / 2);
                                                                                            replyMessageOwners[3] = Long.valueOf(j);
                                                                                            replyMessageOwners[4] = Long.valueOf(messageMaxId);
                                                                                            replyMessageOwners[5] = Integer.valueOf(i3 / 2);
                                                                                            cursor = access$0003.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", replyMessageOwners), new Object[null]);
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    access$0004 = MessagesStorage.this.database;
                                                                                    j2 = 0;
                                                                                    objArr3 = new Object[2];
                                                                                    holeMessageMinId = 1;
                                                                                    objArr3[0] = Long.valueOf(j);
                                                                                    objArr3[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                    cursor = access$0004.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start >= %d ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                                                    if (cursor.next() != null) {
                                                                                        chatsToLoad = (long) cursor.intValue(null);
                                                                                        if (usersToLoad == null) {
                                                                                            j2 = chatsToLoad;
                                                                                        } else {
                                                                                            j2 = chatsToLoad | (((long) usersToLoad) << 32);
                                                                                        }
                                                                                    }
                                                                                    cursor.dispose();
                                                                                    cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(replyMessageRandomOwners2)}), new Object[0]);
                                                                                    if (cursor.next() == null) {
                                                                                        holeMessageMinId2 = holeMessageMinId;
                                                                                    } else {
                                                                                        holeMessageMinId2 = (long) cursor.intValue(null);
                                                                                        if (usersToLoad != null) {
                                                                                            holeMessageMinId2 |= ((long) usersToLoad) << 32;
                                                                                        }
                                                                                    }
                                                                                    cursor.dispose();
                                                                                    if (j2 != 0) {
                                                                                        max_id_query = replyMessageRandomOwners2;
                                                                                    } else if (holeMessageMinId2 == 1) {
                                                                                        chatsToLoad = MessagesStorage.this.database;
                                                                                        locale = Locale.US;
                                                                                        replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                        objArr = new Object[6];
                                                                                        max_id_query = replyMessageRandomOwners2;
                                                                                        objArr[0] = Long.valueOf(j);
                                                                                        objArr[1] = Long.valueOf(messageMaxId);
                                                                                        objArr[2] = Integer.valueOf(i3 / 2);
                                                                                        objArr[3] = Long.valueOf(j);
                                                                                        objArr[4] = Long.valueOf(messageMaxId);
                                                                                        objArr[5] = Integer.valueOf(i3 / 2);
                                                                                        cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[null]);
                                                                                        offset_query = offset_query3;
                                                                                        channelId2 = usersToLoad;
                                                                                        lower_id = unreadCountIsLocal;
                                                                                        channelId = count_unread;
                                                                                    } else {
                                                                                        max_id_query = replyMessageRandomOwners2;
                                                                                    }
                                                                                    if (j2 == null) {
                                                                                        j2 = C0539C.NANOS_PER_SECOND;
                                                                                        if (usersToLoad != null) {
                                                                                            replyMessageRandomOwners2 = C0539C.NANOS_PER_SECOND | (((long) usersToLoad) << 32);
                                                                                            chatsToLoad = MessagesStorage.this.database;
                                                                                            locale = Locale.US;
                                                                                            replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                            objArr3 = new Object[8];
                                                                                            offset_query = offset_query3;
                                                                                            channelId2 = usersToLoad;
                                                                                            objArr3[null] = Long.valueOf(j);
                                                                                            objArr3[1] = Long.valueOf(messageMaxId);
                                                                                            objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                            objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                            objArr3[4] = Long.valueOf(j);
                                                                                            objArr3[5] = Long.valueOf(messageMaxId);
                                                                                            objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                            objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                            cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                            lower_id = unreadCountIsLocal;
                                                                                            channelId = count_unread;
                                                                                        }
                                                                                    }
                                                                                    replyMessageRandomOwners2 = j2;
                                                                                    chatsToLoad = MessagesStorage.this.database;
                                                                                    locale = Locale.US;
                                                                                    replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                    objArr3 = new Object[8];
                                                                                    offset_query = offset_query3;
                                                                                    channelId2 = usersToLoad;
                                                                                    objArr3[null] = Long.valueOf(j);
                                                                                    objArr3[1] = Long.valueOf(messageMaxId);
                                                                                    objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                    objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                    objArr3[4] = Long.valueOf(j);
                                                                                    objArr3[5] = Long.valueOf(messageMaxId);
                                                                                    objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                    objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                    cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                    lower_id = unreadCountIsLocal;
                                                                                    channelId = count_unread;
                                                                                }
                                                                                count_unread = channelId;
                                                                                queryFromServer = replyMessages;
                                                                                j = messageMaxId;
                                                                                unreadCountIsLocal = lower_id;
                                                                                mentions_unread6 = mentions_unread2;
                                                                                queryFromServer3 = num;
                                                                                max_id_override2 = max_id_query;
                                                                                i9 = offset_query;
                                                                            }
                                                                        }
                                                                        if (i3 != 1) {
                                                                            replyMessageOwners = MessagesStorage.this.database;
                                                                            objArr3 = new Object[2];
                                                                            holeMessageId = null;
                                                                            objArr3[0] = Long.valueOf(j);
                                                                            objArr3[1] = Integer.valueOf(i2);
                                                                            cursor = replyMessageOwners.queryFinalized(String.format(Locale.US, "SELECT start, end FROM messages_holes WHERE uid = %d AND start >= %d AND start != 1 AND end != 1 ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                                            if (cursor.next() == null) {
                                                                                usersToLoad = (long) cursor.intValue(null);
                                                                                if (channelId != 0) {
                                                                                    usersToLoad |= ((long) channelId) << 32;
                                                                                }
                                                                            } else {
                                                                                usersToLoad = holeMessageId;
                                                                            }
                                                                            cursor.dispose();
                                                                            if (usersToLoad == null) {
                                                                                replyMessageOwners = MessagesStorage.this.database;
                                                                                replyMessageRandomOwners2 = Locale.US;
                                                                                str4 = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date >= %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d";
                                                                                objArr3 = new Object[5];
                                                                                count_unread = chatsToLoad;
                                                                                channelId3 = channelId;
                                                                                objArr3[0] = Long.valueOf(j);
                                                                                objArr3[1] = Integer.valueOf(i4);
                                                                                objArr3[2] = Long.valueOf(messageMaxId);
                                                                                objArr3[3] = Long.valueOf(usersToLoad);
                                                                                objArr3[4] = Integer.valueOf(count_query);
                                                                                cursor = replyMessageOwners.queryFinalized(String.format(replyMessageRandomOwners2, str4, objArr3), new Object[null]);
                                                                            } else {
                                                                                sQLiteCursor3 = cursor;
                                                                                count_unread = chatsToLoad;
                                                                                channelId3 = channelId;
                                                                                cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date >= %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d", new Object[]{Long.valueOf(j), Integer.valueOf(i4), Long.valueOf(messageMaxId), Integer.valueOf(count_query)}), new Object[0]);
                                                                            }
                                                                            i3 = count_query;
                                                                            i9 = offset_query3;
                                                                            queryFromServer = replyMessages;
                                                                            j = messageMaxId;
                                                                            mentions_unread6 = mentions_unread2;
                                                                            queryFromServer3 = num;
                                                                            max_id_override2 = i10;
                                                                            channelId2 = channelId3;
                                                                        } else {
                                                                            sQLiteCursor = cursor;
                                                                            count_unread = chatsToLoad;
                                                                            channelId3 = channelId;
                                                                            if (i4 == 0) {
                                                                                if (messageMaxId == 0) {
                                                                                    j3 = 0;
                                                                                    cursor4 = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(i2)}), new Object[0]);
                                                                                    if (cursor4.next() != null) {
                                                                                        j3 = (long) cursor4.intValue(null);
                                                                                        if (channelId3 != 0) {
                                                                                            usersToLoad = channelId3;
                                                                                            j3 |= ((long) usersToLoad) << 32;
                                                                                            cursor4.dispose();
                                                                                            if (j3 == null) {
                                                                                                access$0004 = MessagesStorage.this.database;
                                                                                                replyMessageOwners = Locale.US;
                                                                                                replyMessageRandomOwners2 = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d AND m.mid < %d AND (m.mid >= %d OR m.mid < 0) ORDER BY m.date DESC, m.mid DESC LIMIT %d";
                                                                                                objArr = new Object[5];
                                                                                                offset_query2 = offset_query3;
                                                                                                channelId4 = usersToLoad;
                                                                                                objArr[null] = Long.valueOf(j);
                                                                                                objArr[1] = Integer.valueOf(i4);
                                                                                                objArr[2] = Long.valueOf(messageMaxId);
                                                                                                objArr[3] = Long.valueOf(j3);
                                                                                                objArr[4] = Integer.valueOf(count_query);
                                                                                                cursor = access$0004.queryFinalized(String.format(replyMessageOwners, replyMessageRandomOwners2, objArr), new Object[null]);
                                                                                            } else {
                                                                                                offset_query2 = offset_query3;
                                                                                                channelId4 = usersToLoad;
                                                                                                cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d AND m.mid < %d ORDER BY m.date DESC, m.mid DESC LIMIT %d", new Object[]{Long.valueOf(j), Integer.valueOf(i4), Long.valueOf(messageMaxId), Integer.valueOf(count_query)}), new Object[0]);
                                                                                            }
                                                                                            i3 = count_query;
                                                                                            queryFromServer = replyMessages;
                                                                                            j = messageMaxId;
                                                                                            mentions_unread6 = mentions_unread2;
                                                                                            queryFromServer3 = num;
                                                                                            max_id_override2 = i10;
                                                                                            i9 = offset_query2;
                                                                                        }
                                                                                    }
                                                                                    usersToLoad = channelId3;
                                                                                    cursor4.dispose();
                                                                                    if (j3 == null) {
                                                                                        offset_query2 = offset_query3;
                                                                                        channelId4 = usersToLoad;
                                                                                        cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d AND m.mid < %d ORDER BY m.date DESC, m.mid DESC LIMIT %d", new Object[]{Long.valueOf(j), Integer.valueOf(i4), Long.valueOf(messageMaxId), Integer.valueOf(count_query)}), new Object[0]);
                                                                                    } else {
                                                                                        access$0004 = MessagesStorage.this.database;
                                                                                        replyMessageOwners = Locale.US;
                                                                                        replyMessageRandomOwners2 = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d AND m.mid < %d AND (m.mid >= %d OR m.mid < 0) ORDER BY m.date DESC, m.mid DESC LIMIT %d";
                                                                                        objArr = new Object[5];
                                                                                        offset_query2 = offset_query3;
                                                                                        channelId4 = usersToLoad;
                                                                                        objArr[null] = Long.valueOf(j);
                                                                                        objArr[1] = Integer.valueOf(i4);
                                                                                        objArr[2] = Long.valueOf(messageMaxId);
                                                                                        objArr[3] = Long.valueOf(j3);
                                                                                        objArr[4] = Integer.valueOf(count_query);
                                                                                        cursor = access$0004.queryFinalized(String.format(replyMessageOwners, replyMessageRandomOwners2, objArr), new Object[null]);
                                                                                    }
                                                                                    i3 = count_query;
                                                                                    queryFromServer = replyMessages;
                                                                                    j = messageMaxId;
                                                                                    mentions_unread6 = mentions_unread2;
                                                                                    queryFromServer3 = num;
                                                                                    max_id_override2 = i10;
                                                                                    i9 = offset_query2;
                                                                                } else {
                                                                                    offset_query2 = offset_query3;
                                                                                    channelId4 = channelId3;
                                                                                    access$000 = MessagesStorage.this.database;
                                                                                    chatsToLoad = Locale.US;
                                                                                    str = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d,%d";
                                                                                    usersToLoad = new Object[4];
                                                                                    usersToLoad[0] = Long.valueOf(j);
                                                                                    usersToLoad[1] = Integer.valueOf(i4);
                                                                                    offset_query3 = offset_query2;
                                                                                    usersToLoad[2] = Integer.valueOf(offset_query3);
                                                                                    usersToLoad[3] = Integer.valueOf(count_query);
                                                                                    cursor = access$000.queryFinalized(String.format(chatsToLoad, str, usersToLoad), new Object[0]);
                                                                                    i3 = count_query;
                                                                                    i9 = offset_query3;
                                                                                    queryFromServer = replyMessages;
                                                                                    j = messageMaxId;
                                                                                    mentions_unread6 = mentions_unread2;
                                                                                    queryFromServer3 = num;
                                                                                    max_id_override2 = i10;
                                                                                }
                                                                                channelId2 = channelId4;
                                                                            } else {
                                                                                channelId4 = channelId3;
                                                                                cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT max(mid) FROM messages WHERE uid = %d AND mid > 0", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                                if (cursor.next() != null) {
                                                                                    last_message_id = cursor.intValue(null);
                                                                                }
                                                                                cursor.dispose();
                                                                                usersToLoad = MessagesStorage.this.database;
                                                                                objArr2 = new Object[1];
                                                                                holeMessageId2 = null;
                                                                                objArr2[0] = Long.valueOf(j);
                                                                                cursor = usersToLoad.queryFinalized(String.format(Locale.US, "SELECT max(end) FROM messages_holes WHERE uid = %d", objArr2), new Object[0]);
                                                                                if (cursor.next() == null) {
                                                                                    chatsToLoad = (long) cursor.intValue(null);
                                                                                    if (channelId4 == 0) {
                                                                                        usersToLoad = channelId4;
                                                                                        chatsToLoad |= ((long) usersToLoad) << 32;
                                                                                    } else {
                                                                                        usersToLoad = channelId4;
                                                                                    }
                                                                                } else {
                                                                                    usersToLoad = channelId4;
                                                                                    chatsToLoad = holeMessageId2;
                                                                                }
                                                                                cursor.dispose();
                                                                                if (chatsToLoad == null) {
                                                                                    access$0004 = MessagesStorage.this.database;
                                                                                    replyMessageOwners = Locale.US;
                                                                                    replyMessageRandomOwners2 = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND (m.mid >= %d OR m.mid < 0) ORDER BY m.date DESC, m.mid DESC LIMIT %d,%d";
                                                                                    objArr = new Object[4];
                                                                                    j = messageMaxId;
                                                                                    objArr[0] = Long.valueOf(j);
                                                                                    objArr[1] = Long.valueOf(chatsToLoad);
                                                                                    objArr[2] = Integer.valueOf(offset_query3);
                                                                                    objArr[3] = Integer.valueOf(count_query);
                                                                                    cursor = access$0004.queryFinalized(String.format(replyMessageOwners, replyMessageRandomOwners2, objArr), new Object[0]);
                                                                                } else {
                                                                                    cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d ORDER BY m.date DESC, m.mid DESC LIMIT %d,%d", new Object[]{Long.valueOf(j), Integer.valueOf(offset_query3), Integer.valueOf(count_query)}), new Object[0]);
                                                                                }
                                                                                i3 = count_query;
                                                                                i9 = offset_query3;
                                                                                channelId2 = usersToLoad;
                                                                                queryFromServer = replyMessages;
                                                                                mentions_unread6 = mentions_unread2;
                                                                                queryFromServer3 = num;
                                                                                max_id_override2 = i10;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                sQLiteCursor = cursor;
                                                                count_unread = chatsToLoad;
                                                                usersToLoad = channelId;
                                                                j = messageMaxId;
                                                                cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT max(mid) FROM messages WHERE uid = %d AND mid > 0", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                if (cursor.next() != null) {
                                                                    last_message_id = cursor.intValue(null);
                                                                }
                                                                cursor.dispose();
                                                                if (i3 == 4) {
                                                                    if (i5 != null) {
                                                                        cursor2 = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT max(mid) FROM messages WHERE uid = %d AND date <= %d AND mid > 0", new Object[]{Long.valueOf(j), Integer.valueOf(i5)}), new Object[0]);
                                                                        if (cursor2.next() == null) {
                                                                            chatsToLoad = -1;
                                                                        } else {
                                                                            chatsToLoad = cursor2.intValue(null);
                                                                        }
                                                                        cursor2.dispose();
                                                                        cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT min(mid) FROM messages WHERE uid = %d AND date >= %d AND mid > 0", new Object[]{Long.valueOf(j), Integer.valueOf(i5)}), new Object[0]);
                                                                        if (cursor.next()) {
                                                                            endMid = -1;
                                                                        } else {
                                                                            endMid = cursor.intValue(0);
                                                                        }
                                                                        cursor.dispose();
                                                                        if (chatsToLoad != endMid) {
                                                                            replyMessageOwners = MessagesStorage.this.database;
                                                                            locale3 = Locale.US;
                                                                            str3 = "SELECT start FROM messages_holes WHERE uid = %d AND start <= %d AND end > %d";
                                                                            objArr2 = new Object[3];
                                                                            i3 = count_query;
                                                                            objArr2[0] = Long.valueOf(j);
                                                                            objArr2[1] = Integer.valueOf(chatsToLoad);
                                                                            objArr2[2] = Integer.valueOf(chatsToLoad);
                                                                            cursor = replyMessageOwners.queryFinalized(String.format(locale3, str3, objArr2), new Object[0]);
                                                                            if (cursor.next()) {
                                                                                chatsToLoad = -1;
                                                                            }
                                                                            cursor.dispose();
                                                                            if (chatsToLoad != -1) {
                                                                                cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start <= %d AND end > %d", new Object[]{Long.valueOf(j), Integer.valueOf(endMid), Integer.valueOf(endMid)}), new Object[null]);
                                                                                if (cursor.next()) {
                                                                                    endMid = -1;
                                                                                }
                                                                                cursor.dispose();
                                                                                if (endMid != -1) {
                                                                                    max_id_override2 = endMid;
                                                                                    channelId = endMid;
                                                                                    replyMessageOwners = (long) endMid;
                                                                                    if (replyMessageOwners != 0) {
                                                                                    }
                                                                                    replyMessageRandomOwners2 = channelId;
                                                                                    messageMaxId = replyMessageOwners;
                                                                                    max_id_override = max_id_override2;
                                                                                    if (replyMessageRandomOwners2 == null) {
                                                                                    }
                                                                                    if (chatsToLoad == null) {
                                                                                        access$0002 = MessagesStorage.this.database;
                                                                                        objArr2 = new Object[3];
                                                                                        containMessage = chatsToLoad;
                                                                                        objArr2[null] = Long.valueOf(j);
                                                                                        objArr2[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                        objArr2[2] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                        cursor = access$0002.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start < %d AND end > %d", objArr2), new Object[null]);
                                                                                        if (cursor.next() == null) {
                                                                                            chatsToLoad = null;
                                                                                        } else {
                                                                                            chatsToLoad = containMessage;
                                                                                        }
                                                                                        cursor.dispose();
                                                                                        sQLiteCursor2 = cursor;
                                                                                        containMessage = chatsToLoad;
                                                                                    } else {
                                                                                        sQLiteCursor2 = cursor;
                                                                                        containMessage = chatsToLoad;
                                                                                    }
                                                                                    if (containMessage) {
                                                                                        access$0004 = MessagesStorage.this.database;
                                                                                        j2 = 0;
                                                                                        objArr3 = new Object[2];
                                                                                        holeMessageMinId = 1;
                                                                                        objArr3[0] = Long.valueOf(j);
                                                                                        objArr3[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                        cursor = access$0004.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start >= %d ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                                                        if (cursor.next() != null) {
                                                                                            chatsToLoad = (long) cursor.intValue(null);
                                                                                            if (usersToLoad == null) {
                                                                                                j2 = chatsToLoad | (((long) usersToLoad) << 32);
                                                                                            } else {
                                                                                                j2 = chatsToLoad;
                                                                                            }
                                                                                        }
                                                                                        cursor.dispose();
                                                                                        cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(replyMessageRandomOwners2)}), new Object[0]);
                                                                                        if (cursor.next() == null) {
                                                                                            holeMessageMinId2 = (long) cursor.intValue(null);
                                                                                            if (usersToLoad != null) {
                                                                                                holeMessageMinId2 |= ((long) usersToLoad) << 32;
                                                                                            }
                                                                                        } else {
                                                                                            holeMessageMinId2 = holeMessageMinId;
                                                                                        }
                                                                                        cursor.dispose();
                                                                                        if (j2 != 0) {
                                                                                            max_id_query = replyMessageRandomOwners2;
                                                                                        } else if (holeMessageMinId2 == 1) {
                                                                                            max_id_query = replyMessageRandomOwners2;
                                                                                        } else {
                                                                                            chatsToLoad = MessagesStorage.this.database;
                                                                                            locale = Locale.US;
                                                                                            replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                            objArr = new Object[6];
                                                                                            max_id_query = replyMessageRandomOwners2;
                                                                                            objArr[0] = Long.valueOf(j);
                                                                                            objArr[1] = Long.valueOf(messageMaxId);
                                                                                            objArr[2] = Integer.valueOf(i3 / 2);
                                                                                            objArr[3] = Long.valueOf(j);
                                                                                            objArr[4] = Long.valueOf(messageMaxId);
                                                                                            objArr[5] = Integer.valueOf(i3 / 2);
                                                                                            cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[null]);
                                                                                            offset_query = offset_query3;
                                                                                            channelId2 = usersToLoad;
                                                                                            lower_id = unreadCountIsLocal;
                                                                                            channelId = count_unread;
                                                                                        }
                                                                                        if (j2 == null) {
                                                                                            j2 = C0539C.NANOS_PER_SECOND;
                                                                                            if (usersToLoad != null) {
                                                                                                replyMessageRandomOwners2 = C0539C.NANOS_PER_SECOND | (((long) usersToLoad) << 32);
                                                                                                chatsToLoad = MessagesStorage.this.database;
                                                                                                locale = Locale.US;
                                                                                                replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                objArr3 = new Object[8];
                                                                                                offset_query = offset_query3;
                                                                                                channelId2 = usersToLoad;
                                                                                                objArr3[null] = Long.valueOf(j);
                                                                                                objArr3[1] = Long.valueOf(messageMaxId);
                                                                                                objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                                objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                                objArr3[4] = Long.valueOf(j);
                                                                                                objArr3[5] = Long.valueOf(messageMaxId);
                                                                                                objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                                objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                                cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                                lower_id = unreadCountIsLocal;
                                                                                                channelId = count_unread;
                                                                                            }
                                                                                        }
                                                                                        replyMessageRandomOwners2 = j2;
                                                                                        chatsToLoad = MessagesStorage.this.database;
                                                                                        locale = Locale.US;
                                                                                        replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                        objArr3 = new Object[8];
                                                                                        offset_query = offset_query3;
                                                                                        channelId2 = usersToLoad;
                                                                                        objArr3[null] = Long.valueOf(j);
                                                                                        objArr3[1] = Long.valueOf(messageMaxId);
                                                                                        objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                        objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                        objArr3[4] = Long.valueOf(j);
                                                                                        objArr3[5] = Long.valueOf(messageMaxId);
                                                                                        objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                        objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                        cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                        lower_id = unreadCountIsLocal;
                                                                                        channelId = count_unread;
                                                                                    } else {
                                                                                        offset_query = offset_query3;
                                                                                        channelId2 = usersToLoad;
                                                                                        max_id_query = replyMessageRandomOwners2;
                                                                                        if (i3 != 2) {
                                                                                            existingUnreadCount = 0;
                                                                                            chatsToLoad = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid != 0 AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                                            if (chatsToLoad.next()) {
                                                                                                existingUnreadCount = chatsToLoad.intValue(0);
                                                                                            }
                                                                                            chatsToLoad.dispose();
                                                                                            channelId = count_unread;
                                                                                            if (existingUnreadCount != channelId) {
                                                                                                lower_id = true;
                                                                                                access$0003 = MessagesStorage.this.database;
                                                                                                replyMessageOwners = new Object[6];
                                                                                                cursor3 = chatsToLoad;
                                                                                                replyMessageOwners[null] = Long.valueOf(j);
                                                                                                replyMessageOwners[1] = Long.valueOf(messageMaxId);
                                                                                                replyMessageOwners[2] = Integer.valueOf(i3 / 2);
                                                                                                replyMessageOwners[3] = Long.valueOf(j);
                                                                                                replyMessageOwners[4] = Long.valueOf(messageMaxId);
                                                                                                replyMessageOwners[5] = Integer.valueOf(i3 / 2);
                                                                                                cursor = access$0003.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", replyMessageOwners), new Object[null]);
                                                                                            } else {
                                                                                                i12 = existingUnreadCount;
                                                                                                cursor3 = chatsToLoad;
                                                                                                cursor = null;
                                                                                                lower_id = unreadCountIsLocal;
                                                                                            }
                                                                                        } else {
                                                                                            channelId = count_unread;
                                                                                            cursor = null;
                                                                                            lower_id = unreadCountIsLocal;
                                                                                        }
                                                                                    }
                                                                                    count_unread = channelId;
                                                                                    queryFromServer = replyMessages;
                                                                                    j = messageMaxId;
                                                                                    unreadCountIsLocal = lower_id;
                                                                                    mentions_unread6 = mentions_unread2;
                                                                                    queryFromServer3 = num;
                                                                                    max_id_override2 = max_id_query;
                                                                                    i9 = offset_query;
                                                                                }
                                                                            }
                                                                            replyMessageRandomOwners2 = i10;
                                                                            messageMaxId = j;
                                                                            if (replyMessageRandomOwners2 == null) {
                                                                            }
                                                                            if (chatsToLoad == null) {
                                                                                sQLiteCursor2 = cursor;
                                                                                containMessage = chatsToLoad;
                                                                            } else {
                                                                                access$0002 = MessagesStorage.this.database;
                                                                                objArr2 = new Object[3];
                                                                                containMessage = chatsToLoad;
                                                                                objArr2[null] = Long.valueOf(j);
                                                                                objArr2[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                objArr2[2] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                cursor = access$0002.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start < %d AND end > %d", objArr2), new Object[null]);
                                                                                if (cursor.next() == null) {
                                                                                    chatsToLoad = containMessage;
                                                                                } else {
                                                                                    chatsToLoad = null;
                                                                                }
                                                                                cursor.dispose();
                                                                                sQLiteCursor2 = cursor;
                                                                                containMessage = chatsToLoad;
                                                                            }
                                                                            if (containMessage) {
                                                                                offset_query = offset_query3;
                                                                                channelId2 = usersToLoad;
                                                                                max_id_query = replyMessageRandomOwners2;
                                                                                if (i3 != 2) {
                                                                                    channelId = count_unread;
                                                                                    cursor = null;
                                                                                    lower_id = unreadCountIsLocal;
                                                                                } else {
                                                                                    existingUnreadCount = 0;
                                                                                    chatsToLoad = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid != 0 AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                                    if (chatsToLoad.next()) {
                                                                                        existingUnreadCount = chatsToLoad.intValue(0);
                                                                                    }
                                                                                    chatsToLoad.dispose();
                                                                                    channelId = count_unread;
                                                                                    if (existingUnreadCount != channelId) {
                                                                                        i12 = existingUnreadCount;
                                                                                        cursor3 = chatsToLoad;
                                                                                        cursor = null;
                                                                                        lower_id = unreadCountIsLocal;
                                                                                    } else {
                                                                                        lower_id = true;
                                                                                        access$0003 = MessagesStorage.this.database;
                                                                                        replyMessageOwners = new Object[6];
                                                                                        cursor3 = chatsToLoad;
                                                                                        replyMessageOwners[null] = Long.valueOf(j);
                                                                                        replyMessageOwners[1] = Long.valueOf(messageMaxId);
                                                                                        replyMessageOwners[2] = Integer.valueOf(i3 / 2);
                                                                                        replyMessageOwners[3] = Long.valueOf(j);
                                                                                        replyMessageOwners[4] = Long.valueOf(messageMaxId);
                                                                                        replyMessageOwners[5] = Integer.valueOf(i3 / 2);
                                                                                        cursor = access$0003.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", replyMessageOwners), new Object[null]);
                                                                                    }
                                                                                }
                                                                            } else {
                                                                                access$0004 = MessagesStorage.this.database;
                                                                                j2 = 0;
                                                                                objArr3 = new Object[2];
                                                                                holeMessageMinId = 1;
                                                                                objArr3[0] = Long.valueOf(j);
                                                                                objArr3[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                cursor = access$0004.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start >= %d ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                                                if (cursor.next() != null) {
                                                                                    chatsToLoad = (long) cursor.intValue(null);
                                                                                    if (usersToLoad == null) {
                                                                                        j2 = chatsToLoad;
                                                                                    } else {
                                                                                        j2 = chatsToLoad | (((long) usersToLoad) << 32);
                                                                                    }
                                                                                }
                                                                                cursor.dispose();
                                                                                cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(replyMessageRandomOwners2)}), new Object[0]);
                                                                                if (cursor.next() == null) {
                                                                                    holeMessageMinId2 = holeMessageMinId;
                                                                                } else {
                                                                                    holeMessageMinId2 = (long) cursor.intValue(null);
                                                                                    if (usersToLoad != null) {
                                                                                        holeMessageMinId2 |= ((long) usersToLoad) << 32;
                                                                                    }
                                                                                }
                                                                                cursor.dispose();
                                                                                if (j2 != 0) {
                                                                                    max_id_query = replyMessageRandomOwners2;
                                                                                } else if (holeMessageMinId2 == 1) {
                                                                                    chatsToLoad = MessagesStorage.this.database;
                                                                                    locale = Locale.US;
                                                                                    replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                    objArr = new Object[6];
                                                                                    max_id_query = replyMessageRandomOwners2;
                                                                                    objArr[0] = Long.valueOf(j);
                                                                                    objArr[1] = Long.valueOf(messageMaxId);
                                                                                    objArr[2] = Integer.valueOf(i3 / 2);
                                                                                    objArr[3] = Long.valueOf(j);
                                                                                    objArr[4] = Long.valueOf(messageMaxId);
                                                                                    objArr[5] = Integer.valueOf(i3 / 2);
                                                                                    cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[null]);
                                                                                    offset_query = offset_query3;
                                                                                    channelId2 = usersToLoad;
                                                                                    lower_id = unreadCountIsLocal;
                                                                                    channelId = count_unread;
                                                                                } else {
                                                                                    max_id_query = replyMessageRandomOwners2;
                                                                                }
                                                                                if (j2 == null) {
                                                                                    j2 = C0539C.NANOS_PER_SECOND;
                                                                                    if (usersToLoad != null) {
                                                                                        replyMessageRandomOwners2 = C0539C.NANOS_PER_SECOND | (((long) usersToLoad) << 32);
                                                                                        chatsToLoad = MessagesStorage.this.database;
                                                                                        locale = Locale.US;
                                                                                        replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                        objArr3 = new Object[8];
                                                                                        offset_query = offset_query3;
                                                                                        channelId2 = usersToLoad;
                                                                                        objArr3[null] = Long.valueOf(j);
                                                                                        objArr3[1] = Long.valueOf(messageMaxId);
                                                                                        objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                        objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                        objArr3[4] = Long.valueOf(j);
                                                                                        objArr3[5] = Long.valueOf(messageMaxId);
                                                                                        objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                        objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                        cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                        lower_id = unreadCountIsLocal;
                                                                                        channelId = count_unread;
                                                                                    }
                                                                                }
                                                                                replyMessageRandomOwners2 = j2;
                                                                                chatsToLoad = MessagesStorage.this.database;
                                                                                locale = Locale.US;
                                                                                replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                objArr3 = new Object[8];
                                                                                offset_query = offset_query3;
                                                                                channelId2 = usersToLoad;
                                                                                objArr3[null] = Long.valueOf(j);
                                                                                objArr3[1] = Long.valueOf(messageMaxId);
                                                                                objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                objArr3[4] = Long.valueOf(j);
                                                                                objArr3[5] = Long.valueOf(messageMaxId);
                                                                                objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                lower_id = unreadCountIsLocal;
                                                                                channelId = count_unread;
                                                                            }
                                                                            count_unread = channelId;
                                                                            queryFromServer = replyMessages;
                                                                            j = messageMaxId;
                                                                            unreadCountIsLocal = lower_id;
                                                                            mentions_unread6 = mentions_unread2;
                                                                            queryFromServer3 = num;
                                                                            max_id_override2 = max_id_query;
                                                                            i9 = offset_query;
                                                                        } else {
                                                                            replyMessageRandomOwners2 = chatsToLoad;
                                                                            i3 = count_query;
                                                                            messageMaxId = j;
                                                                            if (replyMessageRandomOwners2 == null) {
                                                                            }
                                                                            if (chatsToLoad == null) {
                                                                                access$0002 = MessagesStorage.this.database;
                                                                                objArr2 = new Object[3];
                                                                                containMessage = chatsToLoad;
                                                                                objArr2[null] = Long.valueOf(j);
                                                                                objArr2[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                objArr2[2] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                cursor = access$0002.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start < %d AND end > %d", objArr2), new Object[null]);
                                                                                if (cursor.next() == null) {
                                                                                    chatsToLoad = null;
                                                                                } else {
                                                                                    chatsToLoad = containMessage;
                                                                                }
                                                                                cursor.dispose();
                                                                                sQLiteCursor2 = cursor;
                                                                                containMessage = chatsToLoad;
                                                                            } else {
                                                                                sQLiteCursor2 = cursor;
                                                                                containMessage = chatsToLoad;
                                                                            }
                                                                            if (containMessage) {
                                                                                access$0004 = MessagesStorage.this.database;
                                                                                j2 = 0;
                                                                                objArr3 = new Object[2];
                                                                                holeMessageMinId = 1;
                                                                                objArr3[0] = Long.valueOf(j);
                                                                                objArr3[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                cursor = access$0004.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start >= %d ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                                                if (cursor.next() != null) {
                                                                                    chatsToLoad = (long) cursor.intValue(null);
                                                                                    if (usersToLoad == null) {
                                                                                        j2 = chatsToLoad | (((long) usersToLoad) << 32);
                                                                                    } else {
                                                                                        j2 = chatsToLoad;
                                                                                    }
                                                                                }
                                                                                cursor.dispose();
                                                                                cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(replyMessageRandomOwners2)}), new Object[0]);
                                                                                if (cursor.next() == null) {
                                                                                    holeMessageMinId2 = (long) cursor.intValue(null);
                                                                                    if (usersToLoad != null) {
                                                                                        holeMessageMinId2 |= ((long) usersToLoad) << 32;
                                                                                    }
                                                                                } else {
                                                                                    holeMessageMinId2 = holeMessageMinId;
                                                                                }
                                                                                cursor.dispose();
                                                                                if (j2 != 0) {
                                                                                    max_id_query = replyMessageRandomOwners2;
                                                                                } else if (holeMessageMinId2 == 1) {
                                                                                    max_id_query = replyMessageRandomOwners2;
                                                                                } else {
                                                                                    chatsToLoad = MessagesStorage.this.database;
                                                                                    locale = Locale.US;
                                                                                    replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                    objArr = new Object[6];
                                                                                    max_id_query = replyMessageRandomOwners2;
                                                                                    objArr[0] = Long.valueOf(j);
                                                                                    objArr[1] = Long.valueOf(messageMaxId);
                                                                                    objArr[2] = Integer.valueOf(i3 / 2);
                                                                                    objArr[3] = Long.valueOf(j);
                                                                                    objArr[4] = Long.valueOf(messageMaxId);
                                                                                    objArr[5] = Integer.valueOf(i3 / 2);
                                                                                    cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[null]);
                                                                                    offset_query = offset_query3;
                                                                                    channelId2 = usersToLoad;
                                                                                    lower_id = unreadCountIsLocal;
                                                                                    channelId = count_unread;
                                                                                }
                                                                                if (j2 == null) {
                                                                                    j2 = C0539C.NANOS_PER_SECOND;
                                                                                    if (usersToLoad != null) {
                                                                                        replyMessageRandomOwners2 = C0539C.NANOS_PER_SECOND | (((long) usersToLoad) << 32);
                                                                                        chatsToLoad = MessagesStorage.this.database;
                                                                                        locale = Locale.US;
                                                                                        replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                        objArr3 = new Object[8];
                                                                                        offset_query = offset_query3;
                                                                                        channelId2 = usersToLoad;
                                                                                        objArr3[null] = Long.valueOf(j);
                                                                                        objArr3[1] = Long.valueOf(messageMaxId);
                                                                                        objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                        objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                        objArr3[4] = Long.valueOf(j);
                                                                                        objArr3[5] = Long.valueOf(messageMaxId);
                                                                                        objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                        objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                        cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                        lower_id = unreadCountIsLocal;
                                                                                        channelId = count_unread;
                                                                                    }
                                                                                }
                                                                                replyMessageRandomOwners2 = j2;
                                                                                chatsToLoad = MessagesStorage.this.database;
                                                                                locale = Locale.US;
                                                                                replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                objArr3 = new Object[8];
                                                                                offset_query = offset_query3;
                                                                                channelId2 = usersToLoad;
                                                                                objArr3[null] = Long.valueOf(j);
                                                                                objArr3[1] = Long.valueOf(messageMaxId);
                                                                                objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                objArr3[4] = Long.valueOf(j);
                                                                                objArr3[5] = Long.valueOf(messageMaxId);
                                                                                objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                lower_id = unreadCountIsLocal;
                                                                                channelId = count_unread;
                                                                            } else {
                                                                                offset_query = offset_query3;
                                                                                channelId2 = usersToLoad;
                                                                                max_id_query = replyMessageRandomOwners2;
                                                                                if (i3 != 2) {
                                                                                    existingUnreadCount = 0;
                                                                                    chatsToLoad = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid != 0 AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                                    if (chatsToLoad.next()) {
                                                                                        existingUnreadCount = chatsToLoad.intValue(0);
                                                                                    }
                                                                                    chatsToLoad.dispose();
                                                                                    channelId = count_unread;
                                                                                    if (existingUnreadCount != channelId) {
                                                                                        lower_id = true;
                                                                                        access$0003 = MessagesStorage.this.database;
                                                                                        replyMessageOwners = new Object[6];
                                                                                        cursor3 = chatsToLoad;
                                                                                        replyMessageOwners[null] = Long.valueOf(j);
                                                                                        replyMessageOwners[1] = Long.valueOf(messageMaxId);
                                                                                        replyMessageOwners[2] = Integer.valueOf(i3 / 2);
                                                                                        replyMessageOwners[3] = Long.valueOf(j);
                                                                                        replyMessageOwners[4] = Long.valueOf(messageMaxId);
                                                                                        replyMessageOwners[5] = Integer.valueOf(i3 / 2);
                                                                                        cursor = access$0003.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", replyMessageOwners), new Object[null]);
                                                                                    } else {
                                                                                        i12 = existingUnreadCount;
                                                                                        cursor3 = chatsToLoad;
                                                                                        cursor = null;
                                                                                        lower_id = unreadCountIsLocal;
                                                                                    }
                                                                                } else {
                                                                                    channelId = count_unread;
                                                                                    cursor = null;
                                                                                    lower_id = unreadCountIsLocal;
                                                                                }
                                                                            }
                                                                            count_unread = channelId;
                                                                            queryFromServer = replyMessages;
                                                                            j = messageMaxId;
                                                                            unreadCountIsLocal = lower_id;
                                                                            mentions_unread6 = mentions_unread2;
                                                                            queryFromServer3 = num;
                                                                            max_id_override2 = max_id_query;
                                                                            i9 = offset_query;
                                                                        }
                                                                    }
                                                                }
                                                                i3 = count_query;
                                                                replyMessageRandomOwners2 = i10;
                                                                messageMaxId = j;
                                                                if (replyMessageRandomOwners2 == null) {
                                                                }
                                                                if (chatsToLoad == null) {
                                                                    sQLiteCursor2 = cursor;
                                                                    containMessage = chatsToLoad;
                                                                } else {
                                                                    access$0002 = MessagesStorage.this.database;
                                                                    objArr2 = new Object[3];
                                                                    containMessage = chatsToLoad;
                                                                    objArr2[null] = Long.valueOf(j);
                                                                    objArr2[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                    objArr2[2] = Integer.valueOf(replyMessageRandomOwners2);
                                                                    cursor = access$0002.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start < %d AND end > %d", objArr2), new Object[null]);
                                                                    if (cursor.next() == null) {
                                                                        chatsToLoad = containMessage;
                                                                    } else {
                                                                        chatsToLoad = null;
                                                                    }
                                                                    cursor.dispose();
                                                                    sQLiteCursor2 = cursor;
                                                                    containMessage = chatsToLoad;
                                                                }
                                                                if (containMessage) {
                                                                    offset_query = offset_query3;
                                                                    channelId2 = usersToLoad;
                                                                    max_id_query = replyMessageRandomOwners2;
                                                                    if (i3 != 2) {
                                                                        channelId = count_unread;
                                                                        cursor = null;
                                                                        lower_id = unreadCountIsLocal;
                                                                    } else {
                                                                        existingUnreadCount = 0;
                                                                        chatsToLoad = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid != 0 AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                        if (chatsToLoad.next()) {
                                                                            existingUnreadCount = chatsToLoad.intValue(0);
                                                                        }
                                                                        chatsToLoad.dispose();
                                                                        channelId = count_unread;
                                                                        if (existingUnreadCount != channelId) {
                                                                            i12 = existingUnreadCount;
                                                                            cursor3 = chatsToLoad;
                                                                            cursor = null;
                                                                            lower_id = unreadCountIsLocal;
                                                                        } else {
                                                                            lower_id = true;
                                                                            access$0003 = MessagesStorage.this.database;
                                                                            replyMessageOwners = new Object[6];
                                                                            cursor3 = chatsToLoad;
                                                                            replyMessageOwners[null] = Long.valueOf(j);
                                                                            replyMessageOwners[1] = Long.valueOf(messageMaxId);
                                                                            replyMessageOwners[2] = Integer.valueOf(i3 / 2);
                                                                            replyMessageOwners[3] = Long.valueOf(j);
                                                                            replyMessageOwners[4] = Long.valueOf(messageMaxId);
                                                                            replyMessageOwners[5] = Integer.valueOf(i3 / 2);
                                                                            cursor = access$0003.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", replyMessageOwners), new Object[null]);
                                                                        }
                                                                    }
                                                                } else {
                                                                    access$0004 = MessagesStorage.this.database;
                                                                    j2 = 0;
                                                                    objArr3 = new Object[2];
                                                                    holeMessageMinId = 1;
                                                                    objArr3[0] = Long.valueOf(j);
                                                                    objArr3[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                    cursor = access$0004.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start >= %d ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                                    if (cursor.next() != null) {
                                                                        chatsToLoad = (long) cursor.intValue(null);
                                                                        if (usersToLoad == null) {
                                                                            j2 = chatsToLoad;
                                                                        } else {
                                                                            j2 = chatsToLoad | (((long) usersToLoad) << 32);
                                                                        }
                                                                    }
                                                                    cursor.dispose();
                                                                    cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(replyMessageRandomOwners2)}), new Object[0]);
                                                                    if (cursor.next() == null) {
                                                                        holeMessageMinId2 = holeMessageMinId;
                                                                    } else {
                                                                        holeMessageMinId2 = (long) cursor.intValue(null);
                                                                        if (usersToLoad != null) {
                                                                            holeMessageMinId2 |= ((long) usersToLoad) << 32;
                                                                        }
                                                                    }
                                                                    cursor.dispose();
                                                                    if (j2 != 0) {
                                                                        max_id_query = replyMessageRandomOwners2;
                                                                    } else if (holeMessageMinId2 == 1) {
                                                                        chatsToLoad = MessagesStorage.this.database;
                                                                        locale = Locale.US;
                                                                        replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                        objArr = new Object[6];
                                                                        max_id_query = replyMessageRandomOwners2;
                                                                        objArr[0] = Long.valueOf(j);
                                                                        objArr[1] = Long.valueOf(messageMaxId);
                                                                        objArr[2] = Integer.valueOf(i3 / 2);
                                                                        objArr[3] = Long.valueOf(j);
                                                                        objArr[4] = Long.valueOf(messageMaxId);
                                                                        objArr[5] = Integer.valueOf(i3 / 2);
                                                                        cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[null]);
                                                                        offset_query = offset_query3;
                                                                        channelId2 = usersToLoad;
                                                                        lower_id = unreadCountIsLocal;
                                                                        channelId = count_unread;
                                                                    } else {
                                                                        max_id_query = replyMessageRandomOwners2;
                                                                    }
                                                                    if (j2 == null) {
                                                                        j2 = C0539C.NANOS_PER_SECOND;
                                                                        if (usersToLoad != null) {
                                                                            replyMessageRandomOwners2 = C0539C.NANOS_PER_SECOND | (((long) usersToLoad) << 32);
                                                                            chatsToLoad = MessagesStorage.this.database;
                                                                            locale = Locale.US;
                                                                            replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                            objArr3 = new Object[8];
                                                                            offset_query = offset_query3;
                                                                            channelId2 = usersToLoad;
                                                                            objArr3[null] = Long.valueOf(j);
                                                                            objArr3[1] = Long.valueOf(messageMaxId);
                                                                            objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                            objArr3[3] = Integer.valueOf(i3 / 2);
                                                                            objArr3[4] = Long.valueOf(j);
                                                                            objArr3[5] = Long.valueOf(messageMaxId);
                                                                            objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                            objArr3[7] = Integer.valueOf(i3 / 2);
                                                                            cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                            lower_id = unreadCountIsLocal;
                                                                            channelId = count_unread;
                                                                        }
                                                                    }
                                                                    replyMessageRandomOwners2 = j2;
                                                                    chatsToLoad = MessagesStorage.this.database;
                                                                    locale = Locale.US;
                                                                    replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                    objArr3 = new Object[8];
                                                                    offset_query = offset_query3;
                                                                    channelId2 = usersToLoad;
                                                                    objArr3[null] = Long.valueOf(j);
                                                                    objArr3[1] = Long.valueOf(messageMaxId);
                                                                    objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                    objArr3[3] = Integer.valueOf(i3 / 2);
                                                                    objArr3[4] = Long.valueOf(j);
                                                                    objArr3[5] = Long.valueOf(messageMaxId);
                                                                    objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                    objArr3[7] = Integer.valueOf(i3 / 2);
                                                                    cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                    lower_id = unreadCountIsLocal;
                                                                    channelId = count_unread;
                                                                }
                                                                count_unread = channelId;
                                                                queryFromServer = replyMessages;
                                                                j = messageMaxId;
                                                                unreadCountIsLocal = lower_id;
                                                                mentions_unread6 = mentions_unread2;
                                                                queryFromServer3 = num;
                                                                max_id_override2 = max_id_query;
                                                                i9 = offset_query;
                                                            } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                e2 = e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                count_unread = chatsToLoad;
                                                                i2 = channelId;
                                                                i3 = count_query;
                                                                i4 = usersToLoad;
                                                                z = num3;
                                                                queryFromServer = replyMessages;
                                                                i5 = replyMessageOwners;
                                                                j = messageMaxId;
                                                                longSparseArray = replyMessageRandomOwners2;
                                                                messages_messages = messages_messages2;
                                                                res = messages_messages;
                                                                res.messages.clear();
                                                                res.chats.clear();
                                                                res.users.clear();
                                                                FileLog.m3e(e2);
                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                            } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                tL_messages_messages = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                count_unread = chatsToLoad;
                                                                i2 = channelId;
                                                                i3 = count_query;
                                                                i4 = usersToLoad;
                                                                z = num3;
                                                                queryFromServer = replyMessages;
                                                                i5 = replyMessageOwners;
                                                                j = messageMaxId;
                                                                longSparseArray = replyMessageRandomOwners2;
                                                                res2 = messages_messages2;
                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                throw tL_messages_messages;
                                                            }
                                                        }
                                                    } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                        i9 = 0;
                                                        messages_messages = res4;
                                                        i2 = channelId;
                                                        i3 = count_query;
                                                        z = num3;
                                                        j = messageMaxId;
                                                        count_unread = count_unread2;
                                                        mentions_unread2 = mentions_unread;
                                                        i4 = min_unread_id;
                                                        i5 = max_unread_date2;
                                                        i10 = max_id_query3;
                                                        e2 = e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                        res = messages_messages;
                                                        res.messages.clear();
                                                        res.chats.clear();
                                                        res.users.clear();
                                                        FileLog.m3e(e2);
                                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                    } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                        i9 = 0;
                                                        i2 = channelId;
                                                        i3 = count_query;
                                                        z = num3;
                                                        j = messageMaxId;
                                                        count_unread = count_unread2;
                                                        mentions_unread2 = mentions_unread;
                                                        i4 = min_unread_id;
                                                        i5 = max_unread_date2;
                                                        i10 = max_id_query3;
                                                        res2 = res4;
                                                        tL_messages_messages = e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                        throw tL_messages_messages;
                                                    }
                                                }
                                                messages_messages2 = res4;
                                                arrayList4 = chatsToLoad;
                                                i9 = 0;
                                                arrayList5 = usersToLoad;
                                                i11 = lower_id2;
                                                chatsToLoad = count_unread2;
                                                mentions_unread2 = mentions_unread;
                                                usersToLoad = min_unread_id;
                                                replyMessages = queryFromServer;
                                                replyMessageOwners = max_unread_date2;
                                                replyMessageRandomOwners2 = max_id_query3;
                                                offset_query3 = i9;
                                            } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                i9 = 0;
                                                messages_messages = res4;
                                                i2 = channelId;
                                                i3 = count_query;
                                                z = num3;
                                                j = messageMaxId;
                                                count_unread = count_unread2;
                                                mentions_unread2 = mentions_unread;
                                                i4 = min_unread_id;
                                                i5 = max_unread_date2;
                                                i10 = max_id_query3;
                                                e2 = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                res = messages_messages;
                                                res.messages.clear();
                                                res.chats.clear();
                                                res.users.clear();
                                                FileLog.m3e(e2);
                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                            } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                i9 = 0;
                                                i2 = channelId;
                                                i3 = count_query;
                                                z = num3;
                                                j = messageMaxId;
                                                count_unread = count_unread2;
                                                mentions_unread2 = mentions_unread;
                                                i4 = min_unread_id;
                                                i5 = max_unread_date2;
                                                i10 = max_id_query3;
                                                res2 = res4;
                                                tL_messages_messages = e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                throw tL_messages_messages;
                                            }
                                            try {
                                                cursor = MessagesStorage.this.database;
                                                locale2 = Locale.US;
                                                str2 = "SELECT start FROM messages_holes WHERE uid = %d AND start IN (0, 1)";
                                                i4 = usersToLoad;
                                                i5 = replyMessageOwners;
                                                replyMessageOwners = new Object[1];
                                                num = num3;
                                                replyMessageOwners[0] = Long.valueOf(j);
                                                cursor = cursor.queryFinalized(String.format(locale2, str2, replyMessageOwners), new Object[0]);
                                                if (cursor.next() == null) {
                                                    cursor.dispose();
                                                    usersToLoad = MessagesStorage.this.database;
                                                    locale = Locale.US;
                                                    replyMessageOwners = "SELECT min(mid) FROM messages WHERE uid = %d AND mid > 0";
                                                    objArr = new Object[1];
                                                    i10 = replyMessageRandomOwners2;
                                                    objArr[0] = Long.valueOf(j);
                                                    cursor = usersToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[0]);
                                                    if (cursor.next() != null) {
                                                        usersToLoad = cursor.intValue(null);
                                                        if (usersToLoad != null) {
                                                            state = MessagesStorage.this.database.executeFast("REPLACE INTO messages_holes VALUES(?, ?, ?)");
                                                            state.requery();
                                                            state.bindLong(1, j);
                                                            state.bindInteger(2, null);
                                                            state.bindInteger(3, usersToLoad);
                                                            state.step();
                                                            state.dispose();
                                                        }
                                                    }
                                                    cursor.dispose();
                                                } else {
                                                    if (cursor.intValue(null) != 1) {
                                                    }
                                                    cursor.dispose();
                                                    isEnd = usersToLoad;
                                                    i10 = replyMessageRandomOwners2;
                                                }
                                                if (i3 != 3) {
                                                    if (i3 != 4) {
                                                        if (replyMessages != null) {
                                                            if (i3 == 2) {
                                                                sQLiteCursor = cursor;
                                                                count_unread = chatsToLoad;
                                                                usersToLoad = channelId;
                                                                j = messageMaxId;
                                                                cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT max(mid) FROM messages WHERE uid = %d AND mid > 0", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                if (cursor.next() != null) {
                                                                    last_message_id = cursor.intValue(null);
                                                                }
                                                                cursor.dispose();
                                                                if (i3 == 4) {
                                                                    if (i5 != null) {
                                                                        cursor2 = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT max(mid) FROM messages WHERE uid = %d AND date <= %d AND mid > 0", new Object[]{Long.valueOf(j), Integer.valueOf(i5)}), new Object[0]);
                                                                        if (cursor2.next() == null) {
                                                                            chatsToLoad = cursor2.intValue(null);
                                                                        } else {
                                                                            chatsToLoad = -1;
                                                                        }
                                                                        cursor2.dispose();
                                                                        cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT min(mid) FROM messages WHERE uid = %d AND date >= %d AND mid > 0", new Object[]{Long.valueOf(j), Integer.valueOf(i5)}), new Object[0]);
                                                                        if (cursor.next()) {
                                                                            endMid = cursor.intValue(0);
                                                                        } else {
                                                                            endMid = -1;
                                                                        }
                                                                        cursor.dispose();
                                                                        if (chatsToLoad != endMid) {
                                                                            replyMessageRandomOwners2 = chatsToLoad;
                                                                            i3 = count_query;
                                                                            messageMaxId = j;
                                                                            if (replyMessageRandomOwners2 == null) {
                                                                            }
                                                                            if (chatsToLoad == null) {
                                                                                access$0002 = MessagesStorage.this.database;
                                                                                objArr2 = new Object[3];
                                                                                containMessage = chatsToLoad;
                                                                                objArr2[null] = Long.valueOf(j);
                                                                                objArr2[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                objArr2[2] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                cursor = access$0002.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start < %d AND end > %d", objArr2), new Object[null]);
                                                                                if (cursor.next() == null) {
                                                                                    chatsToLoad = null;
                                                                                } else {
                                                                                    chatsToLoad = containMessage;
                                                                                }
                                                                                cursor.dispose();
                                                                                sQLiteCursor2 = cursor;
                                                                                containMessage = chatsToLoad;
                                                                            } else {
                                                                                sQLiteCursor2 = cursor;
                                                                                containMessage = chatsToLoad;
                                                                            }
                                                                            if (containMessage) {
                                                                                access$0004 = MessagesStorage.this.database;
                                                                                j2 = 0;
                                                                                objArr3 = new Object[2];
                                                                                holeMessageMinId = 1;
                                                                                objArr3[0] = Long.valueOf(j);
                                                                                objArr3[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                cursor = access$0004.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start >= %d ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                                                if (cursor.next() != null) {
                                                                                    chatsToLoad = (long) cursor.intValue(null);
                                                                                    if (usersToLoad == null) {
                                                                                        j2 = chatsToLoad | (((long) usersToLoad) << 32);
                                                                                    } else {
                                                                                        j2 = chatsToLoad;
                                                                                    }
                                                                                }
                                                                                cursor.dispose();
                                                                                cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(replyMessageRandomOwners2)}), new Object[0]);
                                                                                if (cursor.next() == null) {
                                                                                    holeMessageMinId2 = (long) cursor.intValue(null);
                                                                                    if (usersToLoad != null) {
                                                                                        holeMessageMinId2 |= ((long) usersToLoad) << 32;
                                                                                    }
                                                                                } else {
                                                                                    holeMessageMinId2 = holeMessageMinId;
                                                                                }
                                                                                cursor.dispose();
                                                                                if (j2 != 0) {
                                                                                    max_id_query = replyMessageRandomOwners2;
                                                                                } else if (holeMessageMinId2 == 1) {
                                                                                    max_id_query = replyMessageRandomOwners2;
                                                                                } else {
                                                                                    chatsToLoad = MessagesStorage.this.database;
                                                                                    locale = Locale.US;
                                                                                    replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                    objArr = new Object[6];
                                                                                    max_id_query = replyMessageRandomOwners2;
                                                                                    objArr[0] = Long.valueOf(j);
                                                                                    objArr[1] = Long.valueOf(messageMaxId);
                                                                                    objArr[2] = Integer.valueOf(i3 / 2);
                                                                                    objArr[3] = Long.valueOf(j);
                                                                                    objArr[4] = Long.valueOf(messageMaxId);
                                                                                    objArr[5] = Integer.valueOf(i3 / 2);
                                                                                    cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[null]);
                                                                                    offset_query = offset_query3;
                                                                                    channelId2 = usersToLoad;
                                                                                    lower_id = unreadCountIsLocal;
                                                                                    channelId = count_unread;
                                                                                }
                                                                                if (j2 == null) {
                                                                                    j2 = C0539C.NANOS_PER_SECOND;
                                                                                    if (usersToLoad != null) {
                                                                                        replyMessageRandomOwners2 = C0539C.NANOS_PER_SECOND | (((long) usersToLoad) << 32);
                                                                                        chatsToLoad = MessagesStorage.this.database;
                                                                                        locale = Locale.US;
                                                                                        replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                        objArr3 = new Object[8];
                                                                                        offset_query = offset_query3;
                                                                                        channelId2 = usersToLoad;
                                                                                        objArr3[null] = Long.valueOf(j);
                                                                                        objArr3[1] = Long.valueOf(messageMaxId);
                                                                                        objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                        objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                        objArr3[4] = Long.valueOf(j);
                                                                                        objArr3[5] = Long.valueOf(messageMaxId);
                                                                                        objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                        objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                        cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                        lower_id = unreadCountIsLocal;
                                                                                        channelId = count_unread;
                                                                                    }
                                                                                }
                                                                                replyMessageRandomOwners2 = j2;
                                                                                chatsToLoad = MessagesStorage.this.database;
                                                                                locale = Locale.US;
                                                                                replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                objArr3 = new Object[8];
                                                                                offset_query = offset_query3;
                                                                                channelId2 = usersToLoad;
                                                                                objArr3[null] = Long.valueOf(j);
                                                                                objArr3[1] = Long.valueOf(messageMaxId);
                                                                                objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                objArr3[4] = Long.valueOf(j);
                                                                                objArr3[5] = Long.valueOf(messageMaxId);
                                                                                objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                lower_id = unreadCountIsLocal;
                                                                                channelId = count_unread;
                                                                            } else {
                                                                                offset_query = offset_query3;
                                                                                channelId2 = usersToLoad;
                                                                                max_id_query = replyMessageRandomOwners2;
                                                                                if (i3 != 2) {
                                                                                    existingUnreadCount = 0;
                                                                                    chatsToLoad = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid != 0 AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                                    if (chatsToLoad.next()) {
                                                                                        existingUnreadCount = chatsToLoad.intValue(0);
                                                                                    }
                                                                                    chatsToLoad.dispose();
                                                                                    channelId = count_unread;
                                                                                    if (existingUnreadCount != channelId) {
                                                                                        lower_id = true;
                                                                                        access$0003 = MessagesStorage.this.database;
                                                                                        replyMessageOwners = new Object[6];
                                                                                        cursor3 = chatsToLoad;
                                                                                        replyMessageOwners[null] = Long.valueOf(j);
                                                                                        replyMessageOwners[1] = Long.valueOf(messageMaxId);
                                                                                        replyMessageOwners[2] = Integer.valueOf(i3 / 2);
                                                                                        replyMessageOwners[3] = Long.valueOf(j);
                                                                                        replyMessageOwners[4] = Long.valueOf(messageMaxId);
                                                                                        replyMessageOwners[5] = Integer.valueOf(i3 / 2);
                                                                                        cursor = access$0003.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", replyMessageOwners), new Object[null]);
                                                                                    } else {
                                                                                        i12 = existingUnreadCount;
                                                                                        cursor3 = chatsToLoad;
                                                                                        cursor = null;
                                                                                        lower_id = unreadCountIsLocal;
                                                                                    }
                                                                                } else {
                                                                                    channelId = count_unread;
                                                                                    cursor = null;
                                                                                    lower_id = unreadCountIsLocal;
                                                                                }
                                                                            }
                                                                            count_unread = channelId;
                                                                            queryFromServer = replyMessages;
                                                                            j = messageMaxId;
                                                                            unreadCountIsLocal = lower_id;
                                                                            mentions_unread6 = mentions_unread2;
                                                                            queryFromServer3 = num;
                                                                            max_id_override2 = max_id_query;
                                                                            i9 = offset_query;
                                                                        } else {
                                                                            replyMessageOwners = MessagesStorage.this.database;
                                                                            locale3 = Locale.US;
                                                                            str3 = "SELECT start FROM messages_holes WHERE uid = %d AND start <= %d AND end > %d";
                                                                            objArr2 = new Object[3];
                                                                            i3 = count_query;
                                                                            objArr2[0] = Long.valueOf(j);
                                                                            objArr2[1] = Integer.valueOf(chatsToLoad);
                                                                            objArr2[2] = Integer.valueOf(chatsToLoad);
                                                                            cursor = replyMessageOwners.queryFinalized(String.format(locale3, str3, objArr2), new Object[0]);
                                                                            if (cursor.next()) {
                                                                                chatsToLoad = -1;
                                                                            }
                                                                            cursor.dispose();
                                                                            if (chatsToLoad != -1) {
                                                                                cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start <= %d AND end > %d", new Object[]{Long.valueOf(j), Integer.valueOf(endMid), Integer.valueOf(endMid)}), new Object[null]);
                                                                                if (cursor.next()) {
                                                                                    endMid = -1;
                                                                                }
                                                                                cursor.dispose();
                                                                                if (endMid != -1) {
                                                                                    max_id_override2 = endMid;
                                                                                    channelId = endMid;
                                                                                    replyMessageOwners = (long) endMid;
                                                                                    if (replyMessageOwners != 0) {
                                                                                    }
                                                                                    replyMessageRandomOwners2 = channelId;
                                                                                    messageMaxId = replyMessageOwners;
                                                                                    max_id_override = max_id_override2;
                                                                                    if (replyMessageRandomOwners2 == null) {
                                                                                    }
                                                                                    if (chatsToLoad == null) {
                                                                                        sQLiteCursor2 = cursor;
                                                                                        containMessage = chatsToLoad;
                                                                                    } else {
                                                                                        access$0002 = MessagesStorage.this.database;
                                                                                        objArr2 = new Object[3];
                                                                                        containMessage = chatsToLoad;
                                                                                        objArr2[null] = Long.valueOf(j);
                                                                                        objArr2[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                        objArr2[2] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                        cursor = access$0002.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start < %d AND end > %d", objArr2), new Object[null]);
                                                                                        if (cursor.next() == null) {
                                                                                            chatsToLoad = containMessage;
                                                                                        } else {
                                                                                            chatsToLoad = null;
                                                                                        }
                                                                                        cursor.dispose();
                                                                                        sQLiteCursor2 = cursor;
                                                                                        containMessage = chatsToLoad;
                                                                                    }
                                                                                    if (containMessage) {
                                                                                        offset_query = offset_query3;
                                                                                        channelId2 = usersToLoad;
                                                                                        max_id_query = replyMessageRandomOwners2;
                                                                                        if (i3 != 2) {
                                                                                            channelId = count_unread;
                                                                                            cursor = null;
                                                                                            lower_id = unreadCountIsLocal;
                                                                                        } else {
                                                                                            existingUnreadCount = 0;
                                                                                            chatsToLoad = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid != 0 AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                                            if (chatsToLoad.next()) {
                                                                                                existingUnreadCount = chatsToLoad.intValue(0);
                                                                                            }
                                                                                            chatsToLoad.dispose();
                                                                                            channelId = count_unread;
                                                                                            if (existingUnreadCount != channelId) {
                                                                                                i12 = existingUnreadCount;
                                                                                                cursor3 = chatsToLoad;
                                                                                                cursor = null;
                                                                                                lower_id = unreadCountIsLocal;
                                                                                            } else {
                                                                                                lower_id = true;
                                                                                                access$0003 = MessagesStorage.this.database;
                                                                                                replyMessageOwners = new Object[6];
                                                                                                cursor3 = chatsToLoad;
                                                                                                replyMessageOwners[null] = Long.valueOf(j);
                                                                                                replyMessageOwners[1] = Long.valueOf(messageMaxId);
                                                                                                replyMessageOwners[2] = Integer.valueOf(i3 / 2);
                                                                                                replyMessageOwners[3] = Long.valueOf(j);
                                                                                                replyMessageOwners[4] = Long.valueOf(messageMaxId);
                                                                                                replyMessageOwners[5] = Integer.valueOf(i3 / 2);
                                                                                                cursor = access$0003.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", replyMessageOwners), new Object[null]);
                                                                                            }
                                                                                        }
                                                                                    } else {
                                                                                        access$0004 = MessagesStorage.this.database;
                                                                                        j2 = 0;
                                                                                        objArr3 = new Object[2];
                                                                                        holeMessageMinId = 1;
                                                                                        objArr3[0] = Long.valueOf(j);
                                                                                        objArr3[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                        cursor = access$0004.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start >= %d ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                                                        if (cursor.next() != null) {
                                                                                            chatsToLoad = (long) cursor.intValue(null);
                                                                                            if (usersToLoad == null) {
                                                                                                j2 = chatsToLoad;
                                                                                            } else {
                                                                                                j2 = chatsToLoad | (((long) usersToLoad) << 32);
                                                                                            }
                                                                                        }
                                                                                        cursor.dispose();
                                                                                        cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(replyMessageRandomOwners2)}), new Object[0]);
                                                                                        if (cursor.next() == null) {
                                                                                            holeMessageMinId2 = holeMessageMinId;
                                                                                        } else {
                                                                                            holeMessageMinId2 = (long) cursor.intValue(null);
                                                                                            if (usersToLoad != null) {
                                                                                                holeMessageMinId2 |= ((long) usersToLoad) << 32;
                                                                                            }
                                                                                        }
                                                                                        cursor.dispose();
                                                                                        if (j2 != 0) {
                                                                                            max_id_query = replyMessageRandomOwners2;
                                                                                        } else if (holeMessageMinId2 == 1) {
                                                                                            chatsToLoad = MessagesStorage.this.database;
                                                                                            locale = Locale.US;
                                                                                            replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                            objArr = new Object[6];
                                                                                            max_id_query = replyMessageRandomOwners2;
                                                                                            objArr[0] = Long.valueOf(j);
                                                                                            objArr[1] = Long.valueOf(messageMaxId);
                                                                                            objArr[2] = Integer.valueOf(i3 / 2);
                                                                                            objArr[3] = Long.valueOf(j);
                                                                                            objArr[4] = Long.valueOf(messageMaxId);
                                                                                            objArr[5] = Integer.valueOf(i3 / 2);
                                                                                            cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[null]);
                                                                                            offset_query = offset_query3;
                                                                                            channelId2 = usersToLoad;
                                                                                            lower_id = unreadCountIsLocal;
                                                                                            channelId = count_unread;
                                                                                        } else {
                                                                                            max_id_query = replyMessageRandomOwners2;
                                                                                        }
                                                                                        if (j2 == null) {
                                                                                            j2 = C0539C.NANOS_PER_SECOND;
                                                                                            if (usersToLoad != null) {
                                                                                                replyMessageRandomOwners2 = C0539C.NANOS_PER_SECOND | (((long) usersToLoad) << 32);
                                                                                                chatsToLoad = MessagesStorage.this.database;
                                                                                                locale = Locale.US;
                                                                                                replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                                objArr3 = new Object[8];
                                                                                                offset_query = offset_query3;
                                                                                                channelId2 = usersToLoad;
                                                                                                objArr3[null] = Long.valueOf(j);
                                                                                                objArr3[1] = Long.valueOf(messageMaxId);
                                                                                                objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                                objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                                objArr3[4] = Long.valueOf(j);
                                                                                                objArr3[5] = Long.valueOf(messageMaxId);
                                                                                                objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                                objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                                cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                                lower_id = unreadCountIsLocal;
                                                                                                channelId = count_unread;
                                                                                            }
                                                                                        }
                                                                                        replyMessageRandomOwners2 = j2;
                                                                                        chatsToLoad = MessagesStorage.this.database;
                                                                                        locale = Locale.US;
                                                                                        replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                        objArr3 = new Object[8];
                                                                                        offset_query = offset_query3;
                                                                                        channelId2 = usersToLoad;
                                                                                        objArr3[null] = Long.valueOf(j);
                                                                                        objArr3[1] = Long.valueOf(messageMaxId);
                                                                                        objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                        objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                        objArr3[4] = Long.valueOf(j);
                                                                                        objArr3[5] = Long.valueOf(messageMaxId);
                                                                                        objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                        objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                        cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                        lower_id = unreadCountIsLocal;
                                                                                        channelId = count_unread;
                                                                                    }
                                                                                    count_unread = channelId;
                                                                                    queryFromServer = replyMessages;
                                                                                    j = messageMaxId;
                                                                                    unreadCountIsLocal = lower_id;
                                                                                    mentions_unread6 = mentions_unread2;
                                                                                    queryFromServer3 = num;
                                                                                    max_id_override2 = max_id_query;
                                                                                    i9 = offset_query;
                                                                                }
                                                                            }
                                                                            replyMessageRandomOwners2 = i10;
                                                                            messageMaxId = j;
                                                                            if (replyMessageRandomOwners2 == null) {
                                                                            }
                                                                            if (chatsToLoad == null) {
                                                                                access$0002 = MessagesStorage.this.database;
                                                                                objArr2 = new Object[3];
                                                                                containMessage = chatsToLoad;
                                                                                objArr2[null] = Long.valueOf(j);
                                                                                objArr2[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                objArr2[2] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                cursor = access$0002.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start < %d AND end > %d", objArr2), new Object[null]);
                                                                                if (cursor.next() == null) {
                                                                                    chatsToLoad = null;
                                                                                } else {
                                                                                    chatsToLoad = containMessage;
                                                                                }
                                                                                cursor.dispose();
                                                                                sQLiteCursor2 = cursor;
                                                                                containMessage = chatsToLoad;
                                                                            } else {
                                                                                sQLiteCursor2 = cursor;
                                                                                containMessage = chatsToLoad;
                                                                            }
                                                                            if (containMessage) {
                                                                                access$0004 = MessagesStorage.this.database;
                                                                                j2 = 0;
                                                                                objArr3 = new Object[2];
                                                                                holeMessageMinId = 1;
                                                                                objArr3[0] = Long.valueOf(j);
                                                                                objArr3[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                                cursor = access$0004.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start >= %d ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                                                if (cursor.next() != null) {
                                                                                    chatsToLoad = (long) cursor.intValue(null);
                                                                                    if (usersToLoad == null) {
                                                                                        j2 = chatsToLoad | (((long) usersToLoad) << 32);
                                                                                    } else {
                                                                                        j2 = chatsToLoad;
                                                                                    }
                                                                                }
                                                                                cursor.dispose();
                                                                                cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(replyMessageRandomOwners2)}), new Object[0]);
                                                                                if (cursor.next() == null) {
                                                                                    holeMessageMinId2 = (long) cursor.intValue(null);
                                                                                    if (usersToLoad != null) {
                                                                                        holeMessageMinId2 |= ((long) usersToLoad) << 32;
                                                                                    }
                                                                                } else {
                                                                                    holeMessageMinId2 = holeMessageMinId;
                                                                                }
                                                                                cursor.dispose();
                                                                                if (j2 != 0) {
                                                                                    max_id_query = replyMessageRandomOwners2;
                                                                                } else if (holeMessageMinId2 == 1) {
                                                                                    max_id_query = replyMessageRandomOwners2;
                                                                                } else {
                                                                                    chatsToLoad = MessagesStorage.this.database;
                                                                                    locale = Locale.US;
                                                                                    replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                    objArr = new Object[6];
                                                                                    max_id_query = replyMessageRandomOwners2;
                                                                                    objArr[0] = Long.valueOf(j);
                                                                                    objArr[1] = Long.valueOf(messageMaxId);
                                                                                    objArr[2] = Integer.valueOf(i3 / 2);
                                                                                    objArr[3] = Long.valueOf(j);
                                                                                    objArr[4] = Long.valueOf(messageMaxId);
                                                                                    objArr[5] = Integer.valueOf(i3 / 2);
                                                                                    cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[null]);
                                                                                    offset_query = offset_query3;
                                                                                    channelId2 = usersToLoad;
                                                                                    lower_id = unreadCountIsLocal;
                                                                                    channelId = count_unread;
                                                                                }
                                                                                if (j2 == null) {
                                                                                    j2 = C0539C.NANOS_PER_SECOND;
                                                                                    if (usersToLoad != null) {
                                                                                        replyMessageRandomOwners2 = C0539C.NANOS_PER_SECOND | (((long) usersToLoad) << 32);
                                                                                        chatsToLoad = MessagesStorage.this.database;
                                                                                        locale = Locale.US;
                                                                                        replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                        objArr3 = new Object[8];
                                                                                        offset_query = offset_query3;
                                                                                        channelId2 = usersToLoad;
                                                                                        objArr3[null] = Long.valueOf(j);
                                                                                        objArr3[1] = Long.valueOf(messageMaxId);
                                                                                        objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                        objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                        objArr3[4] = Long.valueOf(j);
                                                                                        objArr3[5] = Long.valueOf(messageMaxId);
                                                                                        objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                        objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                        cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                        lower_id = unreadCountIsLocal;
                                                                                        channelId = count_unread;
                                                                                    }
                                                                                }
                                                                                replyMessageRandomOwners2 = j2;
                                                                                chatsToLoad = MessagesStorage.this.database;
                                                                                locale = Locale.US;
                                                                                replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                objArr3 = new Object[8];
                                                                                offset_query = offset_query3;
                                                                                channelId2 = usersToLoad;
                                                                                objArr3[null] = Long.valueOf(j);
                                                                                objArr3[1] = Long.valueOf(messageMaxId);
                                                                                objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                objArr3[4] = Long.valueOf(j);
                                                                                objArr3[5] = Long.valueOf(messageMaxId);
                                                                                objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                lower_id = unreadCountIsLocal;
                                                                                channelId = count_unread;
                                                                            } else {
                                                                                offset_query = offset_query3;
                                                                                channelId2 = usersToLoad;
                                                                                max_id_query = replyMessageRandomOwners2;
                                                                                if (i3 != 2) {
                                                                                    existingUnreadCount = 0;
                                                                                    chatsToLoad = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid != 0 AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                                    if (chatsToLoad.next()) {
                                                                                        existingUnreadCount = chatsToLoad.intValue(0);
                                                                                    }
                                                                                    chatsToLoad.dispose();
                                                                                    channelId = count_unread;
                                                                                    if (existingUnreadCount != channelId) {
                                                                                        lower_id = true;
                                                                                        access$0003 = MessagesStorage.this.database;
                                                                                        replyMessageOwners = new Object[6];
                                                                                        cursor3 = chatsToLoad;
                                                                                        replyMessageOwners[null] = Long.valueOf(j);
                                                                                        replyMessageOwners[1] = Long.valueOf(messageMaxId);
                                                                                        replyMessageOwners[2] = Integer.valueOf(i3 / 2);
                                                                                        replyMessageOwners[3] = Long.valueOf(j);
                                                                                        replyMessageOwners[4] = Long.valueOf(messageMaxId);
                                                                                        replyMessageOwners[5] = Integer.valueOf(i3 / 2);
                                                                                        cursor = access$0003.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", replyMessageOwners), new Object[null]);
                                                                                    } else {
                                                                                        i12 = existingUnreadCount;
                                                                                        cursor3 = chatsToLoad;
                                                                                        cursor = null;
                                                                                        lower_id = unreadCountIsLocal;
                                                                                    }
                                                                                } else {
                                                                                    channelId = count_unread;
                                                                                    cursor = null;
                                                                                    lower_id = unreadCountIsLocal;
                                                                                }
                                                                            }
                                                                            count_unread = channelId;
                                                                            queryFromServer = replyMessages;
                                                                            j = messageMaxId;
                                                                            unreadCountIsLocal = lower_id;
                                                                            mentions_unread6 = mentions_unread2;
                                                                            queryFromServer3 = num;
                                                                            max_id_override2 = max_id_query;
                                                                            i9 = offset_query;
                                                                        }
                                                                    }
                                                                }
                                                                i3 = count_query;
                                                                replyMessageRandomOwners2 = i10;
                                                                messageMaxId = j;
                                                                if (replyMessageRandomOwners2 == null) {
                                                                }
                                                                if (chatsToLoad == null) {
                                                                    sQLiteCursor2 = cursor;
                                                                    containMessage = chatsToLoad;
                                                                } else {
                                                                    access$0002 = MessagesStorage.this.database;
                                                                    objArr2 = new Object[3];
                                                                    containMessage = chatsToLoad;
                                                                    objArr2[null] = Long.valueOf(j);
                                                                    objArr2[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                    objArr2[2] = Integer.valueOf(replyMessageRandomOwners2);
                                                                    cursor = access$0002.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start < %d AND end > %d", objArr2), new Object[null]);
                                                                    if (cursor.next() == null) {
                                                                        chatsToLoad = containMessage;
                                                                    } else {
                                                                        chatsToLoad = null;
                                                                    }
                                                                    cursor.dispose();
                                                                    sQLiteCursor2 = cursor;
                                                                    containMessage = chatsToLoad;
                                                                }
                                                                if (containMessage) {
                                                                    offset_query = offset_query3;
                                                                    channelId2 = usersToLoad;
                                                                    max_id_query = replyMessageRandomOwners2;
                                                                    if (i3 != 2) {
                                                                        channelId = count_unread;
                                                                        cursor = null;
                                                                        lower_id = unreadCountIsLocal;
                                                                    } else {
                                                                        existingUnreadCount = 0;
                                                                        chatsToLoad = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid != 0 AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                        if (chatsToLoad.next()) {
                                                                            existingUnreadCount = chatsToLoad.intValue(0);
                                                                        }
                                                                        chatsToLoad.dispose();
                                                                        channelId = count_unread;
                                                                        if (existingUnreadCount != channelId) {
                                                                            i12 = existingUnreadCount;
                                                                            cursor3 = chatsToLoad;
                                                                            cursor = null;
                                                                            lower_id = unreadCountIsLocal;
                                                                        } else {
                                                                            lower_id = true;
                                                                            access$0003 = MessagesStorage.this.database;
                                                                            replyMessageOwners = new Object[6];
                                                                            cursor3 = chatsToLoad;
                                                                            replyMessageOwners[null] = Long.valueOf(j);
                                                                            replyMessageOwners[1] = Long.valueOf(messageMaxId);
                                                                            replyMessageOwners[2] = Integer.valueOf(i3 / 2);
                                                                            replyMessageOwners[3] = Long.valueOf(j);
                                                                            replyMessageOwners[4] = Long.valueOf(messageMaxId);
                                                                            replyMessageOwners[5] = Integer.valueOf(i3 / 2);
                                                                            cursor = access$0003.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", replyMessageOwners), new Object[null]);
                                                                        }
                                                                    }
                                                                } else {
                                                                    access$0004 = MessagesStorage.this.database;
                                                                    j2 = 0;
                                                                    objArr3 = new Object[2];
                                                                    holeMessageMinId = 1;
                                                                    objArr3[0] = Long.valueOf(j);
                                                                    objArr3[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                    cursor = access$0004.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start >= %d ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                                    if (cursor.next() != null) {
                                                                        chatsToLoad = (long) cursor.intValue(null);
                                                                        if (usersToLoad == null) {
                                                                            j2 = chatsToLoad;
                                                                        } else {
                                                                            j2 = chatsToLoad | (((long) usersToLoad) << 32);
                                                                        }
                                                                    }
                                                                    cursor.dispose();
                                                                    cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(replyMessageRandomOwners2)}), new Object[0]);
                                                                    if (cursor.next() == null) {
                                                                        holeMessageMinId2 = holeMessageMinId;
                                                                    } else {
                                                                        holeMessageMinId2 = (long) cursor.intValue(null);
                                                                        if (usersToLoad != null) {
                                                                            holeMessageMinId2 |= ((long) usersToLoad) << 32;
                                                                        }
                                                                    }
                                                                    cursor.dispose();
                                                                    if (j2 != 0) {
                                                                        max_id_query = replyMessageRandomOwners2;
                                                                    } else if (holeMessageMinId2 == 1) {
                                                                        chatsToLoad = MessagesStorage.this.database;
                                                                        locale = Locale.US;
                                                                        replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                        objArr = new Object[6];
                                                                        max_id_query = replyMessageRandomOwners2;
                                                                        objArr[0] = Long.valueOf(j);
                                                                        objArr[1] = Long.valueOf(messageMaxId);
                                                                        objArr[2] = Integer.valueOf(i3 / 2);
                                                                        objArr[3] = Long.valueOf(j);
                                                                        objArr[4] = Long.valueOf(messageMaxId);
                                                                        objArr[5] = Integer.valueOf(i3 / 2);
                                                                        cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[null]);
                                                                        offset_query = offset_query3;
                                                                        channelId2 = usersToLoad;
                                                                        lower_id = unreadCountIsLocal;
                                                                        channelId = count_unread;
                                                                    } else {
                                                                        max_id_query = replyMessageRandomOwners2;
                                                                    }
                                                                    if (j2 == null) {
                                                                        j2 = C0539C.NANOS_PER_SECOND;
                                                                        if (usersToLoad != null) {
                                                                            replyMessageRandomOwners2 = C0539C.NANOS_PER_SECOND | (((long) usersToLoad) << 32);
                                                                            chatsToLoad = MessagesStorage.this.database;
                                                                            locale = Locale.US;
                                                                            replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                            objArr3 = new Object[8];
                                                                            offset_query = offset_query3;
                                                                            channelId2 = usersToLoad;
                                                                            objArr3[null] = Long.valueOf(j);
                                                                            objArr3[1] = Long.valueOf(messageMaxId);
                                                                            objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                            objArr3[3] = Integer.valueOf(i3 / 2);
                                                                            objArr3[4] = Long.valueOf(j);
                                                                            objArr3[5] = Long.valueOf(messageMaxId);
                                                                            objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                            objArr3[7] = Integer.valueOf(i3 / 2);
                                                                            cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                            lower_id = unreadCountIsLocal;
                                                                            channelId = count_unread;
                                                                        }
                                                                    }
                                                                    replyMessageRandomOwners2 = j2;
                                                                    chatsToLoad = MessagesStorage.this.database;
                                                                    locale = Locale.US;
                                                                    replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                    objArr3 = new Object[8];
                                                                    offset_query = offset_query3;
                                                                    channelId2 = usersToLoad;
                                                                    objArr3[null] = Long.valueOf(j);
                                                                    objArr3[1] = Long.valueOf(messageMaxId);
                                                                    objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                    objArr3[3] = Integer.valueOf(i3 / 2);
                                                                    objArr3[4] = Long.valueOf(j);
                                                                    objArr3[5] = Long.valueOf(messageMaxId);
                                                                    objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                    objArr3[7] = Integer.valueOf(i3 / 2);
                                                                    cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                    lower_id = unreadCountIsLocal;
                                                                    channelId = count_unread;
                                                                }
                                                                count_unread = channelId;
                                                                queryFromServer = replyMessages;
                                                                j = messageMaxId;
                                                                unreadCountIsLocal = lower_id;
                                                                mentions_unread6 = mentions_unread2;
                                                                queryFromServer3 = num;
                                                                max_id_override2 = max_id_query;
                                                                i9 = offset_query;
                                                            }
                                                        }
                                                        if (i3 != 1) {
                                                            sQLiteCursor = cursor;
                                                            count_unread = chatsToLoad;
                                                            channelId3 = channelId;
                                                            if (i4 == 0) {
                                                                channelId4 = channelId3;
                                                                cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT max(mid) FROM messages WHERE uid = %d AND mid > 0", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                if (cursor.next() != null) {
                                                                    last_message_id = cursor.intValue(null);
                                                                }
                                                                cursor.dispose();
                                                                usersToLoad = MessagesStorage.this.database;
                                                                objArr2 = new Object[1];
                                                                holeMessageId2 = null;
                                                                objArr2[0] = Long.valueOf(j);
                                                                cursor = usersToLoad.queryFinalized(String.format(Locale.US, "SELECT max(end) FROM messages_holes WHERE uid = %d", objArr2), new Object[0]);
                                                                if (cursor.next() == null) {
                                                                    usersToLoad = channelId4;
                                                                    chatsToLoad = holeMessageId2;
                                                                } else {
                                                                    chatsToLoad = (long) cursor.intValue(null);
                                                                    if (channelId4 == 0) {
                                                                        usersToLoad = channelId4;
                                                                    } else {
                                                                        usersToLoad = channelId4;
                                                                        chatsToLoad |= ((long) usersToLoad) << 32;
                                                                    }
                                                                }
                                                                cursor.dispose();
                                                                if (chatsToLoad == null) {
                                                                    cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d ORDER BY m.date DESC, m.mid DESC LIMIT %d,%d", new Object[]{Long.valueOf(j), Integer.valueOf(offset_query3), Integer.valueOf(count_query)}), new Object[0]);
                                                                } else {
                                                                    access$0004 = MessagesStorage.this.database;
                                                                    replyMessageOwners = Locale.US;
                                                                    replyMessageRandomOwners2 = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND (m.mid >= %d OR m.mid < 0) ORDER BY m.date DESC, m.mid DESC LIMIT %d,%d";
                                                                    objArr = new Object[4];
                                                                    j = messageMaxId;
                                                                    objArr[0] = Long.valueOf(j);
                                                                    objArr[1] = Long.valueOf(chatsToLoad);
                                                                    objArr[2] = Integer.valueOf(offset_query3);
                                                                    objArr[3] = Integer.valueOf(count_query);
                                                                    cursor = access$0004.queryFinalized(String.format(replyMessageOwners, replyMessageRandomOwners2, objArr), new Object[0]);
                                                                }
                                                                i3 = count_query;
                                                                i9 = offset_query3;
                                                                channelId2 = usersToLoad;
                                                                queryFromServer = replyMessages;
                                                                mentions_unread6 = mentions_unread2;
                                                                queryFromServer3 = num;
                                                                max_id_override2 = i10;
                                                            } else {
                                                                if (messageMaxId == 0) {
                                                                    offset_query2 = offset_query3;
                                                                    channelId4 = channelId3;
                                                                    access$000 = MessagesStorage.this.database;
                                                                    chatsToLoad = Locale.US;
                                                                    str = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d,%d";
                                                                    usersToLoad = new Object[4];
                                                                    usersToLoad[0] = Long.valueOf(j);
                                                                    usersToLoad[1] = Integer.valueOf(i4);
                                                                    offset_query3 = offset_query2;
                                                                    usersToLoad[2] = Integer.valueOf(offset_query3);
                                                                    usersToLoad[3] = Integer.valueOf(count_query);
                                                                    cursor = access$000.queryFinalized(String.format(chatsToLoad, str, usersToLoad), new Object[0]);
                                                                    i3 = count_query;
                                                                    i9 = offset_query3;
                                                                    queryFromServer = replyMessages;
                                                                    j = messageMaxId;
                                                                    mentions_unread6 = mentions_unread2;
                                                                    queryFromServer3 = num;
                                                                    max_id_override2 = i10;
                                                                } else {
                                                                    j3 = 0;
                                                                    cursor4 = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(i2)}), new Object[0]);
                                                                    if (cursor4.next() != null) {
                                                                        j3 = (long) cursor4.intValue(null);
                                                                        if (channelId3 != 0) {
                                                                            usersToLoad = channelId3;
                                                                            j3 |= ((long) usersToLoad) << 32;
                                                                            cursor4.dispose();
                                                                            if (j3 == null) {
                                                                                access$0004 = MessagesStorage.this.database;
                                                                                replyMessageOwners = Locale.US;
                                                                                replyMessageRandomOwners2 = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d AND m.mid < %d AND (m.mid >= %d OR m.mid < 0) ORDER BY m.date DESC, m.mid DESC LIMIT %d";
                                                                                objArr = new Object[5];
                                                                                offset_query2 = offset_query3;
                                                                                channelId4 = usersToLoad;
                                                                                objArr[null] = Long.valueOf(j);
                                                                                objArr[1] = Integer.valueOf(i4);
                                                                                objArr[2] = Long.valueOf(messageMaxId);
                                                                                objArr[3] = Long.valueOf(j3);
                                                                                objArr[4] = Integer.valueOf(count_query);
                                                                                cursor = access$0004.queryFinalized(String.format(replyMessageOwners, replyMessageRandomOwners2, objArr), new Object[null]);
                                                                            } else {
                                                                                offset_query2 = offset_query3;
                                                                                channelId4 = usersToLoad;
                                                                                cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d AND m.mid < %d ORDER BY m.date DESC, m.mid DESC LIMIT %d", new Object[]{Long.valueOf(j), Integer.valueOf(i4), Long.valueOf(messageMaxId), Integer.valueOf(count_query)}), new Object[0]);
                                                                            }
                                                                            i3 = count_query;
                                                                            queryFromServer = replyMessages;
                                                                            j = messageMaxId;
                                                                            mentions_unread6 = mentions_unread2;
                                                                            queryFromServer3 = num;
                                                                            max_id_override2 = i10;
                                                                            i9 = offset_query2;
                                                                        }
                                                                    }
                                                                    usersToLoad = channelId3;
                                                                    cursor4.dispose();
                                                                    if (j3 == null) {
                                                                        offset_query2 = offset_query3;
                                                                        channelId4 = usersToLoad;
                                                                        cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d AND m.mid < %d ORDER BY m.date DESC, m.mid DESC LIMIT %d", new Object[]{Long.valueOf(j), Integer.valueOf(i4), Long.valueOf(messageMaxId), Integer.valueOf(count_query)}), new Object[0]);
                                                                    } else {
                                                                        access$0004 = MessagesStorage.this.database;
                                                                        replyMessageOwners = Locale.US;
                                                                        replyMessageRandomOwners2 = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d AND m.mid < %d AND (m.mid >= %d OR m.mid < 0) ORDER BY m.date DESC, m.mid DESC LIMIT %d";
                                                                        objArr = new Object[5];
                                                                        offset_query2 = offset_query3;
                                                                        channelId4 = usersToLoad;
                                                                        objArr[null] = Long.valueOf(j);
                                                                        objArr[1] = Integer.valueOf(i4);
                                                                        objArr[2] = Long.valueOf(messageMaxId);
                                                                        objArr[3] = Long.valueOf(j3);
                                                                        objArr[4] = Integer.valueOf(count_query);
                                                                        cursor = access$0004.queryFinalized(String.format(replyMessageOwners, replyMessageRandomOwners2, objArr), new Object[null]);
                                                                    }
                                                                    i3 = count_query;
                                                                    queryFromServer = replyMessages;
                                                                    j = messageMaxId;
                                                                    mentions_unread6 = mentions_unread2;
                                                                    queryFromServer3 = num;
                                                                    max_id_override2 = i10;
                                                                    i9 = offset_query2;
                                                                }
                                                                channelId2 = channelId4;
                                                            }
                                                        } else {
                                                            replyMessageOwners = MessagesStorage.this.database;
                                                            objArr3 = new Object[2];
                                                            holeMessageId = null;
                                                            objArr3[0] = Long.valueOf(j);
                                                            objArr3[1] = Integer.valueOf(i2);
                                                            cursor = replyMessageOwners.queryFinalized(String.format(Locale.US, "SELECT start, end FROM messages_holes WHERE uid = %d AND start >= %d AND start != 1 AND end != 1 ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                            if (cursor.next() == null) {
                                                                usersToLoad = holeMessageId;
                                                            } else {
                                                                usersToLoad = (long) cursor.intValue(null);
                                                                if (channelId != 0) {
                                                                    usersToLoad |= ((long) channelId) << 32;
                                                                }
                                                            }
                                                            cursor.dispose();
                                                            if (usersToLoad == null) {
                                                                sQLiteCursor3 = cursor;
                                                                count_unread = chatsToLoad;
                                                                channelId3 = channelId;
                                                                cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date >= %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d", new Object[]{Long.valueOf(j), Integer.valueOf(i4), Long.valueOf(messageMaxId), Integer.valueOf(count_query)}), new Object[0]);
                                                            } else {
                                                                replyMessageOwners = MessagesStorage.this.database;
                                                                replyMessageRandomOwners2 = Locale.US;
                                                                str4 = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date >= %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d";
                                                                objArr3 = new Object[5];
                                                                count_unread = chatsToLoad;
                                                                channelId3 = channelId;
                                                                objArr3[0] = Long.valueOf(j);
                                                                objArr3[1] = Integer.valueOf(i4);
                                                                objArr3[2] = Long.valueOf(messageMaxId);
                                                                objArr3[3] = Long.valueOf(usersToLoad);
                                                                objArr3[4] = Integer.valueOf(count_query);
                                                                cursor = replyMessageOwners.queryFinalized(String.format(replyMessageRandomOwners2, str4, objArr3), new Object[null]);
                                                            }
                                                            i3 = count_query;
                                                            i9 = offset_query3;
                                                            queryFromServer = replyMessages;
                                                            j = messageMaxId;
                                                            mentions_unread6 = mentions_unread2;
                                                            queryFromServer3 = num;
                                                            max_id_override2 = i10;
                                                            channelId2 = channelId3;
                                                        }
                                                    }
                                                }
                                                sQLiteCursor = cursor;
                                                count_unread = chatsToLoad;
                                                usersToLoad = channelId;
                                                j = messageMaxId;
                                                cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT max(mid) FROM messages WHERE uid = %d AND mid > 0", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                if (cursor.next() != null) {
                                                    last_message_id = cursor.intValue(null);
                                                }
                                                cursor.dispose();
                                                if (i3 == 4) {
                                                    if (i5 != null) {
                                                        cursor2 = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT max(mid) FROM messages WHERE uid = %d AND date <= %d AND mid > 0", new Object[]{Long.valueOf(j), Integer.valueOf(i5)}), new Object[0]);
                                                        if (cursor2.next() == null) {
                                                            chatsToLoad = -1;
                                                        } else {
                                                            chatsToLoad = cursor2.intValue(null);
                                                        }
                                                        cursor2.dispose();
                                                        cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT min(mid) FROM messages WHERE uid = %d AND date >= %d AND mid > 0", new Object[]{Long.valueOf(j), Integer.valueOf(i5)}), new Object[0]);
                                                        if (cursor.next()) {
                                                            endMid = -1;
                                                        } else {
                                                            endMid = cursor.intValue(0);
                                                        }
                                                        cursor.dispose();
                                                        if (chatsToLoad != endMid) {
                                                            replyMessageOwners = MessagesStorage.this.database;
                                                            locale3 = Locale.US;
                                                            str3 = "SELECT start FROM messages_holes WHERE uid = %d AND start <= %d AND end > %d";
                                                            objArr2 = new Object[3];
                                                            i3 = count_query;
                                                            objArr2[0] = Long.valueOf(j);
                                                            objArr2[1] = Integer.valueOf(chatsToLoad);
                                                            objArr2[2] = Integer.valueOf(chatsToLoad);
                                                            cursor = replyMessageOwners.queryFinalized(String.format(locale3, str3, objArr2), new Object[0]);
                                                            if (cursor.next()) {
                                                                chatsToLoad = -1;
                                                            }
                                                            cursor.dispose();
                                                            if (chatsToLoad != -1) {
                                                                cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start <= %d AND end > %d", new Object[]{Long.valueOf(j), Integer.valueOf(endMid), Integer.valueOf(endMid)}), new Object[null]);
                                                                if (cursor.next()) {
                                                                    endMid = -1;
                                                                }
                                                                cursor.dispose();
                                                                if (endMid != -1) {
                                                                    max_id_override2 = endMid;
                                                                    channelId = endMid;
                                                                    replyMessageOwners = (long) endMid;
                                                                    if (replyMessageOwners != 0) {
                                                                    }
                                                                    replyMessageRandomOwners2 = channelId;
                                                                    messageMaxId = replyMessageOwners;
                                                                    max_id_override = max_id_override2;
                                                                    if (replyMessageRandomOwners2 == null) {
                                                                    }
                                                                    if (chatsToLoad == null) {
                                                                        access$0002 = MessagesStorage.this.database;
                                                                        objArr2 = new Object[3];
                                                                        containMessage = chatsToLoad;
                                                                        objArr2[null] = Long.valueOf(j);
                                                                        objArr2[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                        objArr2[2] = Integer.valueOf(replyMessageRandomOwners2);
                                                                        cursor = access$0002.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start < %d AND end > %d", objArr2), new Object[null]);
                                                                        if (cursor.next() == null) {
                                                                            chatsToLoad = null;
                                                                        } else {
                                                                            chatsToLoad = containMessage;
                                                                        }
                                                                        cursor.dispose();
                                                                        sQLiteCursor2 = cursor;
                                                                        containMessage = chatsToLoad;
                                                                    } else {
                                                                        sQLiteCursor2 = cursor;
                                                                        containMessage = chatsToLoad;
                                                                    }
                                                                    if (containMessage) {
                                                                        access$0004 = MessagesStorage.this.database;
                                                                        j2 = 0;
                                                                        objArr3 = new Object[2];
                                                                        holeMessageMinId = 1;
                                                                        objArr3[0] = Long.valueOf(j);
                                                                        objArr3[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                        cursor = access$0004.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start >= %d ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                                        if (cursor.next() != null) {
                                                                            chatsToLoad = (long) cursor.intValue(null);
                                                                            if (usersToLoad == null) {
                                                                                j2 = chatsToLoad | (((long) usersToLoad) << 32);
                                                                            } else {
                                                                                j2 = chatsToLoad;
                                                                            }
                                                                        }
                                                                        cursor.dispose();
                                                                        cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(replyMessageRandomOwners2)}), new Object[0]);
                                                                        if (cursor.next() == null) {
                                                                            holeMessageMinId2 = (long) cursor.intValue(null);
                                                                            if (usersToLoad != null) {
                                                                                holeMessageMinId2 |= ((long) usersToLoad) << 32;
                                                                            }
                                                                        } else {
                                                                            holeMessageMinId2 = holeMessageMinId;
                                                                        }
                                                                        cursor.dispose();
                                                                        if (j2 != 0) {
                                                                            max_id_query = replyMessageRandomOwners2;
                                                                        } else if (holeMessageMinId2 == 1) {
                                                                            max_id_query = replyMessageRandomOwners2;
                                                                        } else {
                                                                            chatsToLoad = MessagesStorage.this.database;
                                                                            locale = Locale.US;
                                                                            replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                            objArr = new Object[6];
                                                                            max_id_query = replyMessageRandomOwners2;
                                                                            objArr[0] = Long.valueOf(j);
                                                                            objArr[1] = Long.valueOf(messageMaxId);
                                                                            objArr[2] = Integer.valueOf(i3 / 2);
                                                                            objArr[3] = Long.valueOf(j);
                                                                            objArr[4] = Long.valueOf(messageMaxId);
                                                                            objArr[5] = Integer.valueOf(i3 / 2);
                                                                            cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[null]);
                                                                            offset_query = offset_query3;
                                                                            channelId2 = usersToLoad;
                                                                            lower_id = unreadCountIsLocal;
                                                                            channelId = count_unread;
                                                                        }
                                                                        if (j2 == null) {
                                                                            j2 = C0539C.NANOS_PER_SECOND;
                                                                            if (usersToLoad != null) {
                                                                                replyMessageRandomOwners2 = C0539C.NANOS_PER_SECOND | (((long) usersToLoad) << 32);
                                                                                chatsToLoad = MessagesStorage.this.database;
                                                                                locale = Locale.US;
                                                                                replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                                objArr3 = new Object[8];
                                                                                offset_query = offset_query3;
                                                                                channelId2 = usersToLoad;
                                                                                objArr3[null] = Long.valueOf(j);
                                                                                objArr3[1] = Long.valueOf(messageMaxId);
                                                                                objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                                objArr3[3] = Integer.valueOf(i3 / 2);
                                                                                objArr3[4] = Long.valueOf(j);
                                                                                objArr3[5] = Long.valueOf(messageMaxId);
                                                                                objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                                objArr3[7] = Integer.valueOf(i3 / 2);
                                                                                cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                                lower_id = unreadCountIsLocal;
                                                                                channelId = count_unread;
                                                                            }
                                                                        }
                                                                        replyMessageRandomOwners2 = j2;
                                                                        chatsToLoad = MessagesStorage.this.database;
                                                                        locale = Locale.US;
                                                                        replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                        objArr3 = new Object[8];
                                                                        offset_query = offset_query3;
                                                                        channelId2 = usersToLoad;
                                                                        objArr3[null] = Long.valueOf(j);
                                                                        objArr3[1] = Long.valueOf(messageMaxId);
                                                                        objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                        objArr3[3] = Integer.valueOf(i3 / 2);
                                                                        objArr3[4] = Long.valueOf(j);
                                                                        objArr3[5] = Long.valueOf(messageMaxId);
                                                                        objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                        objArr3[7] = Integer.valueOf(i3 / 2);
                                                                        cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                        lower_id = unreadCountIsLocal;
                                                                        channelId = count_unread;
                                                                    } else {
                                                                        offset_query = offset_query3;
                                                                        channelId2 = usersToLoad;
                                                                        max_id_query = replyMessageRandomOwners2;
                                                                        if (i3 != 2) {
                                                                            existingUnreadCount = 0;
                                                                            chatsToLoad = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid != 0 AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                            if (chatsToLoad.next()) {
                                                                                existingUnreadCount = chatsToLoad.intValue(0);
                                                                            }
                                                                            chatsToLoad.dispose();
                                                                            channelId = count_unread;
                                                                            if (existingUnreadCount != channelId) {
                                                                                lower_id = true;
                                                                                access$0003 = MessagesStorage.this.database;
                                                                                replyMessageOwners = new Object[6];
                                                                                cursor3 = chatsToLoad;
                                                                                replyMessageOwners[null] = Long.valueOf(j);
                                                                                replyMessageOwners[1] = Long.valueOf(messageMaxId);
                                                                                replyMessageOwners[2] = Integer.valueOf(i3 / 2);
                                                                                replyMessageOwners[3] = Long.valueOf(j);
                                                                                replyMessageOwners[4] = Long.valueOf(messageMaxId);
                                                                                replyMessageOwners[5] = Integer.valueOf(i3 / 2);
                                                                                cursor = access$0003.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", replyMessageOwners), new Object[null]);
                                                                            } else {
                                                                                i12 = existingUnreadCount;
                                                                                cursor3 = chatsToLoad;
                                                                                cursor = null;
                                                                                lower_id = unreadCountIsLocal;
                                                                            }
                                                                        } else {
                                                                            channelId = count_unread;
                                                                            cursor = null;
                                                                            lower_id = unreadCountIsLocal;
                                                                        }
                                                                    }
                                                                    count_unread = channelId;
                                                                    queryFromServer = replyMessages;
                                                                    j = messageMaxId;
                                                                    unreadCountIsLocal = lower_id;
                                                                    mentions_unread6 = mentions_unread2;
                                                                    queryFromServer3 = num;
                                                                    max_id_override2 = max_id_query;
                                                                    i9 = offset_query;
                                                                }
                                                            }
                                                            replyMessageRandomOwners2 = i10;
                                                            messageMaxId = j;
                                                            if (replyMessageRandomOwners2 == null) {
                                                            }
                                                            if (chatsToLoad == null) {
                                                                sQLiteCursor2 = cursor;
                                                                containMessage = chatsToLoad;
                                                            } else {
                                                                access$0002 = MessagesStorage.this.database;
                                                                objArr2 = new Object[3];
                                                                containMessage = chatsToLoad;
                                                                objArr2[null] = Long.valueOf(j);
                                                                objArr2[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                objArr2[2] = Integer.valueOf(replyMessageRandomOwners2);
                                                                cursor = access$0002.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start < %d AND end > %d", objArr2), new Object[null]);
                                                                if (cursor.next() == null) {
                                                                    chatsToLoad = containMessage;
                                                                } else {
                                                                    chatsToLoad = null;
                                                                }
                                                                cursor.dispose();
                                                                sQLiteCursor2 = cursor;
                                                                containMessage = chatsToLoad;
                                                            }
                                                            if (containMessage) {
                                                                offset_query = offset_query3;
                                                                channelId2 = usersToLoad;
                                                                max_id_query = replyMessageRandomOwners2;
                                                                if (i3 != 2) {
                                                                    channelId = count_unread;
                                                                    cursor = null;
                                                                    lower_id = unreadCountIsLocal;
                                                                } else {
                                                                    existingUnreadCount = 0;
                                                                    chatsToLoad = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid != 0 AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                    if (chatsToLoad.next()) {
                                                                        existingUnreadCount = chatsToLoad.intValue(0);
                                                                    }
                                                                    chatsToLoad.dispose();
                                                                    channelId = count_unread;
                                                                    if (existingUnreadCount != channelId) {
                                                                        i12 = existingUnreadCount;
                                                                        cursor3 = chatsToLoad;
                                                                        cursor = null;
                                                                        lower_id = unreadCountIsLocal;
                                                                    } else {
                                                                        lower_id = true;
                                                                        access$0003 = MessagesStorage.this.database;
                                                                        replyMessageOwners = new Object[6];
                                                                        cursor3 = chatsToLoad;
                                                                        replyMessageOwners[null] = Long.valueOf(j);
                                                                        replyMessageOwners[1] = Long.valueOf(messageMaxId);
                                                                        replyMessageOwners[2] = Integer.valueOf(i3 / 2);
                                                                        replyMessageOwners[3] = Long.valueOf(j);
                                                                        replyMessageOwners[4] = Long.valueOf(messageMaxId);
                                                                        replyMessageOwners[5] = Integer.valueOf(i3 / 2);
                                                                        cursor = access$0003.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", replyMessageOwners), new Object[null]);
                                                                    }
                                                                }
                                                            } else {
                                                                access$0004 = MessagesStorage.this.database;
                                                                j2 = 0;
                                                                objArr3 = new Object[2];
                                                                holeMessageMinId = 1;
                                                                objArr3[0] = Long.valueOf(j);
                                                                objArr3[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                cursor = access$0004.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start >= %d ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                                if (cursor.next() != null) {
                                                                    chatsToLoad = (long) cursor.intValue(null);
                                                                    if (usersToLoad == null) {
                                                                        j2 = chatsToLoad;
                                                                    } else {
                                                                        j2 = chatsToLoad | (((long) usersToLoad) << 32);
                                                                    }
                                                                }
                                                                cursor.dispose();
                                                                cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(replyMessageRandomOwners2)}), new Object[0]);
                                                                if (cursor.next() == null) {
                                                                    holeMessageMinId2 = holeMessageMinId;
                                                                } else {
                                                                    holeMessageMinId2 = (long) cursor.intValue(null);
                                                                    if (usersToLoad != null) {
                                                                        holeMessageMinId2 |= ((long) usersToLoad) << 32;
                                                                    }
                                                                }
                                                                cursor.dispose();
                                                                if (j2 != 0) {
                                                                    max_id_query = replyMessageRandomOwners2;
                                                                } else if (holeMessageMinId2 == 1) {
                                                                    chatsToLoad = MessagesStorage.this.database;
                                                                    locale = Locale.US;
                                                                    replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                    objArr = new Object[6];
                                                                    max_id_query = replyMessageRandomOwners2;
                                                                    objArr[0] = Long.valueOf(j);
                                                                    objArr[1] = Long.valueOf(messageMaxId);
                                                                    objArr[2] = Integer.valueOf(i3 / 2);
                                                                    objArr[3] = Long.valueOf(j);
                                                                    objArr[4] = Long.valueOf(messageMaxId);
                                                                    objArr[5] = Integer.valueOf(i3 / 2);
                                                                    cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[null]);
                                                                    offset_query = offset_query3;
                                                                    channelId2 = usersToLoad;
                                                                    lower_id = unreadCountIsLocal;
                                                                    channelId = count_unread;
                                                                } else {
                                                                    max_id_query = replyMessageRandomOwners2;
                                                                }
                                                                if (j2 == null) {
                                                                    j2 = C0539C.NANOS_PER_SECOND;
                                                                    if (usersToLoad != null) {
                                                                        replyMessageRandomOwners2 = C0539C.NANOS_PER_SECOND | (((long) usersToLoad) << 32);
                                                                        chatsToLoad = MessagesStorage.this.database;
                                                                        locale = Locale.US;
                                                                        replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                        objArr3 = new Object[8];
                                                                        offset_query = offset_query3;
                                                                        channelId2 = usersToLoad;
                                                                        objArr3[null] = Long.valueOf(j);
                                                                        objArr3[1] = Long.valueOf(messageMaxId);
                                                                        objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                        objArr3[3] = Integer.valueOf(i3 / 2);
                                                                        objArr3[4] = Long.valueOf(j);
                                                                        objArr3[5] = Long.valueOf(messageMaxId);
                                                                        objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                        objArr3[7] = Integer.valueOf(i3 / 2);
                                                                        cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                        lower_id = unreadCountIsLocal;
                                                                        channelId = count_unread;
                                                                    }
                                                                }
                                                                replyMessageRandomOwners2 = j2;
                                                                chatsToLoad = MessagesStorage.this.database;
                                                                locale = Locale.US;
                                                                replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                objArr3 = new Object[8];
                                                                offset_query = offset_query3;
                                                                channelId2 = usersToLoad;
                                                                objArr3[null] = Long.valueOf(j);
                                                                objArr3[1] = Long.valueOf(messageMaxId);
                                                                objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                objArr3[3] = Integer.valueOf(i3 / 2);
                                                                objArr3[4] = Long.valueOf(j);
                                                                objArr3[5] = Long.valueOf(messageMaxId);
                                                                objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                objArr3[7] = Integer.valueOf(i3 / 2);
                                                                cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                lower_id = unreadCountIsLocal;
                                                                channelId = count_unread;
                                                            }
                                                            count_unread = channelId;
                                                            queryFromServer = replyMessages;
                                                            j = messageMaxId;
                                                            unreadCountIsLocal = lower_id;
                                                            mentions_unread6 = mentions_unread2;
                                                            queryFromServer3 = num;
                                                            max_id_override2 = max_id_query;
                                                            i9 = offset_query;
                                                        } else {
                                                            replyMessageRandomOwners2 = chatsToLoad;
                                                            i3 = count_query;
                                                            messageMaxId = j;
                                                            if (replyMessageRandomOwners2 == null) {
                                                            }
                                                            if (chatsToLoad == null) {
                                                                access$0002 = MessagesStorage.this.database;
                                                                objArr2 = new Object[3];
                                                                containMessage = chatsToLoad;
                                                                objArr2[null] = Long.valueOf(j);
                                                                objArr2[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                objArr2[2] = Integer.valueOf(replyMessageRandomOwners2);
                                                                cursor = access$0002.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start < %d AND end > %d", objArr2), new Object[null]);
                                                                if (cursor.next() == null) {
                                                                    chatsToLoad = null;
                                                                } else {
                                                                    chatsToLoad = containMessage;
                                                                }
                                                                cursor.dispose();
                                                                sQLiteCursor2 = cursor;
                                                                containMessage = chatsToLoad;
                                                            } else {
                                                                sQLiteCursor2 = cursor;
                                                                containMessage = chatsToLoad;
                                                            }
                                                            if (containMessage) {
                                                                access$0004 = MessagesStorage.this.database;
                                                                j2 = 0;
                                                                objArr3 = new Object[2];
                                                                holeMessageMinId = 1;
                                                                objArr3[0] = Long.valueOf(j);
                                                                objArr3[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                                cursor = access$0004.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start >= %d ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                                if (cursor.next() != null) {
                                                                    chatsToLoad = (long) cursor.intValue(null);
                                                                    if (usersToLoad == null) {
                                                                        j2 = chatsToLoad | (((long) usersToLoad) << 32);
                                                                    } else {
                                                                        j2 = chatsToLoad;
                                                                    }
                                                                }
                                                                cursor.dispose();
                                                                cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(replyMessageRandomOwners2)}), new Object[0]);
                                                                if (cursor.next() == null) {
                                                                    holeMessageMinId2 = (long) cursor.intValue(null);
                                                                    if (usersToLoad != null) {
                                                                        holeMessageMinId2 |= ((long) usersToLoad) << 32;
                                                                    }
                                                                } else {
                                                                    holeMessageMinId2 = holeMessageMinId;
                                                                }
                                                                cursor.dispose();
                                                                if (j2 != 0) {
                                                                    max_id_query = replyMessageRandomOwners2;
                                                                } else if (holeMessageMinId2 == 1) {
                                                                    max_id_query = replyMessageRandomOwners2;
                                                                } else {
                                                                    chatsToLoad = MessagesStorage.this.database;
                                                                    locale = Locale.US;
                                                                    replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                    objArr = new Object[6];
                                                                    max_id_query = replyMessageRandomOwners2;
                                                                    objArr[0] = Long.valueOf(j);
                                                                    objArr[1] = Long.valueOf(messageMaxId);
                                                                    objArr[2] = Integer.valueOf(i3 / 2);
                                                                    objArr[3] = Long.valueOf(j);
                                                                    objArr[4] = Long.valueOf(messageMaxId);
                                                                    objArr[5] = Integer.valueOf(i3 / 2);
                                                                    cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[null]);
                                                                    offset_query = offset_query3;
                                                                    channelId2 = usersToLoad;
                                                                    lower_id = unreadCountIsLocal;
                                                                    channelId = count_unread;
                                                                }
                                                                if (j2 == null) {
                                                                    j2 = C0539C.NANOS_PER_SECOND;
                                                                    if (usersToLoad != null) {
                                                                        replyMessageRandomOwners2 = C0539C.NANOS_PER_SECOND | (((long) usersToLoad) << 32);
                                                                        chatsToLoad = MessagesStorage.this.database;
                                                                        locale = Locale.US;
                                                                        replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                        objArr3 = new Object[8];
                                                                        offset_query = offset_query3;
                                                                        channelId2 = usersToLoad;
                                                                        objArr3[null] = Long.valueOf(j);
                                                                        objArr3[1] = Long.valueOf(messageMaxId);
                                                                        objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                        objArr3[3] = Integer.valueOf(i3 / 2);
                                                                        objArr3[4] = Long.valueOf(j);
                                                                        objArr3[5] = Long.valueOf(messageMaxId);
                                                                        objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                        objArr3[7] = Integer.valueOf(i3 / 2);
                                                                        cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                        lower_id = unreadCountIsLocal;
                                                                        channelId = count_unread;
                                                                    }
                                                                }
                                                                replyMessageRandomOwners2 = j2;
                                                                chatsToLoad = MessagesStorage.this.database;
                                                                locale = Locale.US;
                                                                replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                                objArr3 = new Object[8];
                                                                offset_query = offset_query3;
                                                                channelId2 = usersToLoad;
                                                                objArr3[null] = Long.valueOf(j);
                                                                objArr3[1] = Long.valueOf(messageMaxId);
                                                                objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                                objArr3[3] = Integer.valueOf(i3 / 2);
                                                                objArr3[4] = Long.valueOf(j);
                                                                objArr3[5] = Long.valueOf(messageMaxId);
                                                                objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                                objArr3[7] = Integer.valueOf(i3 / 2);
                                                                cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                                lower_id = unreadCountIsLocal;
                                                                channelId = count_unread;
                                                            } else {
                                                                offset_query = offset_query3;
                                                                channelId2 = usersToLoad;
                                                                max_id_query = replyMessageRandomOwners2;
                                                                if (i3 != 2) {
                                                                    existingUnreadCount = 0;
                                                                    chatsToLoad = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid != 0 AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                    if (chatsToLoad.next()) {
                                                                        existingUnreadCount = chatsToLoad.intValue(0);
                                                                    }
                                                                    chatsToLoad.dispose();
                                                                    channelId = count_unread;
                                                                    if (existingUnreadCount != channelId) {
                                                                        lower_id = true;
                                                                        access$0003 = MessagesStorage.this.database;
                                                                        replyMessageOwners = new Object[6];
                                                                        cursor3 = chatsToLoad;
                                                                        replyMessageOwners[null] = Long.valueOf(j);
                                                                        replyMessageOwners[1] = Long.valueOf(messageMaxId);
                                                                        replyMessageOwners[2] = Integer.valueOf(i3 / 2);
                                                                        replyMessageOwners[3] = Long.valueOf(j);
                                                                        replyMessageOwners[4] = Long.valueOf(messageMaxId);
                                                                        replyMessageOwners[5] = Integer.valueOf(i3 / 2);
                                                                        cursor = access$0003.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", replyMessageOwners), new Object[null]);
                                                                    } else {
                                                                        i12 = existingUnreadCount;
                                                                        cursor3 = chatsToLoad;
                                                                        cursor = null;
                                                                        lower_id = unreadCountIsLocal;
                                                                    }
                                                                } else {
                                                                    channelId = count_unread;
                                                                    cursor = null;
                                                                    lower_id = unreadCountIsLocal;
                                                                }
                                                            }
                                                            count_unread = channelId;
                                                            queryFromServer = replyMessages;
                                                            j = messageMaxId;
                                                            unreadCountIsLocal = lower_id;
                                                            mentions_unread6 = mentions_unread2;
                                                            queryFromServer3 = num;
                                                            max_id_override2 = max_id_query;
                                                            i9 = offset_query;
                                                        }
                                                    }
                                                }
                                                i3 = count_query;
                                                replyMessageRandomOwners2 = i10;
                                                messageMaxId = j;
                                                if (replyMessageRandomOwners2 == null) {
                                                }
                                                if (chatsToLoad == null) {
                                                    sQLiteCursor2 = cursor;
                                                    containMessage = chatsToLoad;
                                                } else {
                                                    access$0002 = MessagesStorage.this.database;
                                                    objArr2 = new Object[3];
                                                    containMessage = chatsToLoad;
                                                    objArr2[null] = Long.valueOf(j);
                                                    objArr2[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                    objArr2[2] = Integer.valueOf(replyMessageRandomOwners2);
                                                    cursor = access$0002.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start < %d AND end > %d", objArr2), new Object[null]);
                                                    if (cursor.next() == null) {
                                                        chatsToLoad = containMessage;
                                                    } else {
                                                        chatsToLoad = null;
                                                    }
                                                    cursor.dispose();
                                                    sQLiteCursor2 = cursor;
                                                    containMessage = chatsToLoad;
                                                }
                                                if (containMessage) {
                                                    offset_query = offset_query3;
                                                    channelId2 = usersToLoad;
                                                    max_id_query = replyMessageRandomOwners2;
                                                    if (i3 != 2) {
                                                        channelId = count_unread;
                                                        cursor = null;
                                                        lower_id = unreadCountIsLocal;
                                                    } else {
                                                        existingUnreadCount = 0;
                                                        chatsToLoad = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid != 0 AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                        if (chatsToLoad.next()) {
                                                            existingUnreadCount = chatsToLoad.intValue(0);
                                                        }
                                                        chatsToLoad.dispose();
                                                        channelId = count_unread;
                                                        if (existingUnreadCount != channelId) {
                                                            i12 = existingUnreadCount;
                                                            cursor3 = chatsToLoad;
                                                            cursor = null;
                                                            lower_id = unreadCountIsLocal;
                                                        } else {
                                                            lower_id = true;
                                                            access$0003 = MessagesStorage.this.database;
                                                            replyMessageOwners = new Object[6];
                                                            cursor3 = chatsToLoad;
                                                            replyMessageOwners[null] = Long.valueOf(j);
                                                            replyMessageOwners[1] = Long.valueOf(messageMaxId);
                                                            replyMessageOwners[2] = Integer.valueOf(i3 / 2);
                                                            replyMessageOwners[3] = Long.valueOf(j);
                                                            replyMessageOwners[4] = Long.valueOf(messageMaxId);
                                                            replyMessageOwners[5] = Integer.valueOf(i3 / 2);
                                                            cursor = access$0003.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)", replyMessageOwners), new Object[null]);
                                                        }
                                                    }
                                                } else {
                                                    access$0004 = MessagesStorage.this.database;
                                                    j2 = 0;
                                                    objArr3 = new Object[2];
                                                    holeMessageMinId = 1;
                                                    objArr3[0] = Long.valueOf(j);
                                                    objArr3[1] = Integer.valueOf(replyMessageRandomOwners2);
                                                    cursor = access$0004.queryFinalized(String.format(Locale.US, "SELECT start FROM messages_holes WHERE uid = %d AND start >= %d ORDER BY start ASC LIMIT 1", objArr3), new Object[null]);
                                                    if (cursor.next() != null) {
                                                        chatsToLoad = (long) cursor.intValue(null);
                                                        if (usersToLoad == null) {
                                                            j2 = chatsToLoad;
                                                        } else {
                                                            j2 = chatsToLoad | (((long) usersToLoad) << 32);
                                                        }
                                                    }
                                                    cursor.dispose();
                                                    cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1", new Object[]{Long.valueOf(j), Integer.valueOf(replyMessageRandomOwners2)}), new Object[0]);
                                                    if (cursor.next() == null) {
                                                        holeMessageMinId2 = holeMessageMinId;
                                                    } else {
                                                        holeMessageMinId2 = (long) cursor.intValue(null);
                                                        if (usersToLoad != null) {
                                                            holeMessageMinId2 |= ((long) usersToLoad) << 32;
                                                        }
                                                    }
                                                    cursor.dispose();
                                                    if (j2 != 0) {
                                                        max_id_query = replyMessageRandomOwners2;
                                                    } else if (holeMessageMinId2 == 1) {
                                                        chatsToLoad = MessagesStorage.this.database;
                                                        locale = Locale.US;
                                                        replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                        objArr = new Object[6];
                                                        max_id_query = replyMessageRandomOwners2;
                                                        objArr[0] = Long.valueOf(j);
                                                        objArr[1] = Long.valueOf(messageMaxId);
                                                        objArr[2] = Integer.valueOf(i3 / 2);
                                                        objArr[3] = Long.valueOf(j);
                                                        objArr[4] = Long.valueOf(messageMaxId);
                                                        objArr[5] = Integer.valueOf(i3 / 2);
                                                        cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr), new Object[null]);
                                                        offset_query = offset_query3;
                                                        channelId2 = usersToLoad;
                                                        lower_id = unreadCountIsLocal;
                                                        channelId = count_unread;
                                                    } else {
                                                        max_id_query = replyMessageRandomOwners2;
                                                    }
                                                    if (j2 == null) {
                                                        j2 = C0539C.NANOS_PER_SECOND;
                                                        if (usersToLoad != null) {
                                                            replyMessageRandomOwners2 = C0539C.NANOS_PER_SECOND | (((long) usersToLoad) << 32);
                                                            chatsToLoad = MessagesStorage.this.database;
                                                            locale = Locale.US;
                                                            replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                            objArr3 = new Object[8];
                                                            offset_query = offset_query3;
                                                            channelId2 = usersToLoad;
                                                            objArr3[null] = Long.valueOf(j);
                                                            objArr3[1] = Long.valueOf(messageMaxId);
                                                            objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                            objArr3[3] = Integer.valueOf(i3 / 2);
                                                            objArr3[4] = Long.valueOf(j);
                                                            objArr3[5] = Long.valueOf(messageMaxId);
                                                            objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                            objArr3[7] = Integer.valueOf(i3 / 2);
                                                            cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                            lower_id = unreadCountIsLocal;
                                                            channelId = count_unread;
                                                        }
                                                    }
                                                    replyMessageRandomOwners2 = j2;
                                                    chatsToLoad = MessagesStorage.this.database;
                                                    locale = Locale.US;
                                                    replyMessageOwners = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND m.mid >= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)";
                                                    objArr3 = new Object[8];
                                                    offset_query = offset_query3;
                                                    channelId2 = usersToLoad;
                                                    objArr3[null] = Long.valueOf(j);
                                                    objArr3[1] = Long.valueOf(messageMaxId);
                                                    objArr3[2] = Long.valueOf(holeMessageMinId2);
                                                    objArr3[3] = Integer.valueOf(i3 / 2);
                                                    objArr3[4] = Long.valueOf(j);
                                                    objArr3[5] = Long.valueOf(messageMaxId);
                                                    objArr3[6] = Long.valueOf(replyMessageRandomOwners2);
                                                    objArr3[7] = Integer.valueOf(i3 / 2);
                                                    cursor = chatsToLoad.queryFinalized(String.format(locale, replyMessageOwners, objArr3), new Object[0]);
                                                    lower_id = unreadCountIsLocal;
                                                    channelId = count_unread;
                                                }
                                                count_unread = channelId;
                                                queryFromServer = replyMessages;
                                                j = messageMaxId;
                                                unreadCountIsLocal = lower_id;
                                                mentions_unread6 = mentions_unread2;
                                                queryFromServer3 = num;
                                                max_id_override2 = max_id_query;
                                                i9 = offset_query;
                                            } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                i3 = count_query;
                                                i4 = usersToLoad;
                                                i5 = replyMessageOwners;
                                                j = messageMaxId;
                                                longSparseArray = replyMessageRandomOwners2;
                                                e2 = e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                count_unread = chatsToLoad;
                                                z = num3;
                                                queryFromServer = replyMessages;
                                                messages_messages = messages_messages2;
                                                i9 = offset_query3;
                                                i2 = channelId;
                                                res = messages_messages;
                                                res.messages.clear();
                                                res.chats.clear();
                                                res.users.clear();
                                                FileLog.m3e(e2);
                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                            } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                i3 = count_query;
                                                i4 = usersToLoad;
                                                i5 = replyMessageOwners;
                                                j = messageMaxId;
                                                longSparseArray = replyMessageRandomOwners2;
                                                tL_messages_messages = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                count_unread = chatsToLoad;
                                                z = num3;
                                                queryFromServer = replyMessages;
                                                res2 = messages_messages2;
                                                i9 = offset_query3;
                                                i2 = channelId;
                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                throw tL_messages_messages;
                                            }
                                        }
                                        String str5;
                                        int i14;
                                        Locale locale4;
                                        Object[] objArr5;
                                        SQLiteDatabase access$0008;
                                        Locale locale5;
                                        String str6;
                                        int min_unread_id3;
                                        int last_message_id2;
                                        messages_messages2 = res4;
                                        arrayList4 = chatsToLoad;
                                        channelId2 = channelId;
                                        i9 = 0;
                                        arrayList5 = usersToLoad;
                                        num = num3;
                                        arrayList3 = replyMessages;
                                        sparseArray2 = replyMessageOwners;
                                        replyMessageRandomOwners3 = replyMessageRandomOwners2;
                                        i11 = lower_id2;
                                        try {
                                            if (i3 == 3) {
                                                try {
                                                    if (i4 == 0) {
                                                        chatsToLoad3 = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT min(mid) FROM messages WHERE uid = %d AND mid < 0", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                        if (chatsToLoad3.next()) {
                                                            try {
                                                                intValue = chatsToLoad3.intValue(0);
                                                            } catch (Exception e8) {
                                                                e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM = e8;
                                                                isEnd = true;
                                                                i3 = count_query;
                                                                j = messageMaxId;
                                                                count_unread = count_unread2;
                                                                mentions_unread2 = mentions_unread;
                                                                i4 = min_unread_id;
                                                                i5 = max_unread_date2;
                                                                messages_messages = messages_messages2;
                                                                e2 = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                res = messages_messages;
                                                                res.messages.clear();
                                                                res.chats.clear();
                                                                res.users.clear();
                                                                FileLog.m3e(e2);
                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                            } catch (Throwable th5) {
                                                                e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM = th5;
                                                                isEnd = true;
                                                                i3 = count_query;
                                                                j = messageMaxId;
                                                                count_unread = count_unread2;
                                                                mentions_unread2 = mentions_unread;
                                                                i4 = min_unread_id;
                                                                i5 = max_unread_date2;
                                                                res2 = messages_messages2;
                                                                tL_messages_messages = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                throw tL_messages_messages;
                                                            }
                                                        }
                                                        intValue = min_unread_id;
                                                        try {
                                                            chatsToLoad3.dispose();
                                                            channelId = 0;
                                                            chatsToLoad3 = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT max(mid), max(date) FROM messages WHERE uid = %d AND out = 0 AND read_state IN(0,2) AND mid < 0", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                            if (chatsToLoad3.next()) {
                                                                try {
                                                                    channelId = chatsToLoad3.intValue(0);
                                                                    count_unread3 = chatsToLoad3.intValue(1);
                                                                } catch (Exception e9) {
                                                                    e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM = e9;
                                                                    isEnd = true;
                                                                    i3 = count_query;
                                                                    i4 = intValue;
                                                                    j = messageMaxId;
                                                                    count_unread = count_unread2;
                                                                    mentions_unread2 = mentions_unread;
                                                                    i5 = max_unread_date2;
                                                                    messages_messages = messages_messages2;
                                                                    e2 = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                    res = messages_messages;
                                                                    res.messages.clear();
                                                                    res.chats.clear();
                                                                    res.users.clear();
                                                                    FileLog.m3e(e2);
                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                } catch (Throwable th6) {
                                                                    e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM = th6;
                                                                    isEnd = true;
                                                                    i3 = count_query;
                                                                    i4 = intValue;
                                                                    j = messageMaxId;
                                                                    count_unread = count_unread2;
                                                                    mentions_unread2 = mentions_unread;
                                                                    i5 = max_unread_date2;
                                                                    res2 = messages_messages2;
                                                                    tL_messages_messages = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                    throw tL_messages_messages;
                                                                }
                                                            }
                                                            count_unread3 = max_unread_date2;
                                                            try {
                                                                chatsToLoad3.dispose();
                                                                if (channelId != 0) {
                                                                    intValue = channelId;
                                                                    SQLiteDatabase access$0009 = MessagesStorage.this.database;
                                                                    locale = Locale.US;
                                                                    str5 = "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid <= %d AND out = 0 AND read_state IN(0,2)";
                                                                    objArr2 = new Object[2];
                                                                    isEnd2 = true;
                                                                    try {
                                                                        objArr2[0] = Long.valueOf(j);
                                                                        objArr2[1] = Integer.valueOf(channelId);
                                                                        boolean isEnd3 = access$0009.queryFinalized(String.format(locale, str5, objArr2), new Object[0]);
                                                                        if (isEnd3.next()) {
                                                                            mentions_unread6 = isEnd3.intValue(0);
                                                                        } else {
                                                                            mentions_unread6 = count_unread2;
                                                                        }
                                                                        try {
                                                                            isEnd3.dispose();
                                                                            count_unread2 = mentions_unread6;
                                                                        } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                            e2 = e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                            count_unread = mentions_unread6;
                                                                            i3 = count_query;
                                                                            i4 = intValue;
                                                                            i5 = count_unread3;
                                                                            j = messageMaxId;
                                                                            mentions_unread2 = mentions_unread;
                                                                            messages_messages = messages_messages2;
                                                                            isEnd = isEnd2;
                                                                            res = messages_messages;
                                                                            res.messages.clear();
                                                                            res.chats.clear();
                                                                            res.users.clear();
                                                                            FileLog.m3e(e2);
                                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                        } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                            tL_messages_messages = e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                            count_unread = mentions_unread6;
                                                                            i3 = count_query;
                                                                            i4 = intValue;
                                                                            i5 = count_unread3;
                                                                            j = messageMaxId;
                                                                            mentions_unread2 = mentions_unread;
                                                                            res2 = messages_messages2;
                                                                            isEnd = isEnd2;
                                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                            throw tL_messages_messages;
                                                                        }
                                                                    } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                        e2 = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                        i3 = count_query;
                                                                        i4 = intValue;
                                                                        i5 = count_unread3;
                                                                        count_unread = count_unread2;
                                                                        mentions_unread2 = mentions_unread;
                                                                        messages_messages = messages_messages2;
                                                                        isEnd = isEnd2;
                                                                        res = messages_messages;
                                                                        res.messages.clear();
                                                                        res.chats.clear();
                                                                        res.users.clear();
                                                                        FileLog.m3e(e2);
                                                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                    } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                        tL_messages_messages = e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                        i3 = count_query;
                                                                        i4 = intValue;
                                                                        i5 = count_unread3;
                                                                        count_unread = count_unread2;
                                                                        mentions_unread2 = mentions_unread;
                                                                        res2 = messages_messages2;
                                                                        isEnd = isEnd2;
                                                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                        throw tL_messages_messages;
                                                                    }
                                                                }
                                                                isEnd2 = true;
                                                                if (i3 == 3) {
                                                                    try {
                                                                        if (i3 != 4) {
                                                                            i14 = intValue;
                                                                            i7 = i9;
                                                                            queryFromServer3 = num;
                                                                        } else {
                                                                            if (i3 == 1) {
                                                                                cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid < %d ORDER BY m.mid DESC LIMIT %d", new Object[]{Long.valueOf(j), Integer.valueOf(i2), Integer.valueOf(count_query)}), new Object[0]);
                                                                            } else if (i4 == 0) {
                                                                                try {
                                                                                    if (i2 == 0) {
                                                                                        cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.mid ASC LIMIT %d", new Object[]{Long.valueOf(j), Integer.valueOf(i2), Integer.valueOf(count_query)}), new Object[0]);
                                                                                    } else {
                                                                                        access$000 = MessagesStorage.this.database;
                                                                                        locale4 = Locale.US;
                                                                                        str = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d ORDER BY m.mid ASC LIMIT %d,%d";
                                                                                        objArr5 = new Object[4];
                                                                                        objArr5[0] = Long.valueOf(j);
                                                                                        objArr5[1] = Integer.valueOf(i4);
                                                                                        offset_query3 = i9;
                                                                                        try {
                                                                                            objArr5[2] = Integer.valueOf(offset_query3);
                                                                                            objArr5[3] = Integer.valueOf(count_query);
                                                                                            cursor = access$000.queryFinalized(String.format(locale4, str, objArr5), new Object[0]);
                                                                                            i3 = count_query;
                                                                                            i9 = offset_query3;
                                                                                            i4 = intValue;
                                                                                            i5 = count_unread3;
                                                                                            count_unread = count_unread2;
                                                                                            mentions_unread6 = mentions_unread;
                                                                                            max_id_override2 = max_id_query3;
                                                                                            queryFromServer3 = num;
                                                                                            isEnd = isEnd2;
                                                                                        } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                            e2 = e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                            i3 = count_query;
                                                                                            i9 = offset_query3;
                                                                                            i4 = intValue;
                                                                                            i5 = count_unread3;
                                                                                            count_unread = count_unread2;
                                                                                            mentions_unread2 = mentions_unread;
                                                                                            messages_messages = messages_messages2;
                                                                                            isEnd = isEnd2;
                                                                                            res = messages_messages;
                                                                                            res.messages.clear();
                                                                                            res.chats.clear();
                                                                                            res.users.clear();
                                                                                            FileLog.m3e(e2);
                                                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                        } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                            obj = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                            i3 = count_query;
                                                                                            i9 = offset_query3;
                                                                                            i4 = intValue;
                                                                                            i5 = count_unread3;
                                                                                            count_unread = count_unread2;
                                                                                            mentions_unread2 = mentions_unread;
                                                                                            res2 = messages_messages2;
                                                                                            isEnd = isEnd2;
                                                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                            throw tL_messages_messages;
                                                                                        }
                                                                                    }
                                                                                } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                    offset_query3 = i9;
                                                                                    e2 = e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                    i3 = count_query;
                                                                                    i4 = intValue;
                                                                                    i5 = count_unread3;
                                                                                    j = messageMaxId;
                                                                                    count_unread = count_unread2;
                                                                                    mentions_unread2 = mentions_unread;
                                                                                    i10 = max_id_query3;
                                                                                    messages_messages = messages_messages2;
                                                                                    z = num;
                                                                                    i2 = channelId2;
                                                                                    isEnd = isEnd2;
                                                                                    res = messages_messages;
                                                                                    res.messages.clear();
                                                                                    res.chats.clear();
                                                                                    res.users.clear();
                                                                                    FileLog.m3e(e2);
                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                    offset_query3 = i9;
                                                                                    tL_messages_messages = e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                    i3 = count_query;
                                                                                    i4 = intValue;
                                                                                    i5 = count_unread3;
                                                                                    j = messageMaxId;
                                                                                    count_unread = count_unread2;
                                                                                    mentions_unread2 = mentions_unread;
                                                                                    i10 = max_id_query3;
                                                                                    res2 = messages_messages2;
                                                                                    z = num;
                                                                                    i2 = channelId2;
                                                                                    isEnd = isEnd2;
                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                    throw tL_messages_messages;
                                                                                }
                                                                            } else {
                                                                                offset_query3 = i9;
                                                                                try {
                                                                                    if (i3 != 2) {
                                                                                        try {
                                                                                            cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT min(mid) FROM messages WHERE uid = %d AND mid < 0", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                                            if (cursor.next()) {
                                                                                                endMid = last_message_id;
                                                                                            } else {
                                                                                                endMid = cursor.intValue(0);
                                                                                            }
                                                                                            try {
                                                                                                cursor.dispose();
                                                                                                access$0008 = MessagesStorage.this.database;
                                                                                                locale5 = Locale.US;
                                                                                                str5 = "SELECT max(mid), max(date) FROM messages WHERE uid = %d AND out = 0 AND read_state IN(0,2) AND mid < 0";
                                                                                                objArr2 = new Object[1];
                                                                                                i7 = offset_query3;
                                                                                                i14 = intValue;
                                                                                                try {
                                                                                                    objArr2[0] = Long.valueOf(j);
                                                                                                    cursor = access$0008.queryFinalized(String.format(locale5, str5, objArr2), new Object[0]);
                                                                                                    if (cursor.next()) {
                                                                                                        intValue = i14;
                                                                                                    } else {
                                                                                                        intValue = cursor.intValue(0);
                                                                                                        try {
                                                                                                            count_unread3 = cursor.intValue(1);
                                                                                                        } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                                            e2 = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                                            i3 = count_query;
                                                                                                            i4 = intValue;
                                                                                                            last_message_id = endMid;
                                                                                                            i5 = count_unread3;
                                                                                                            j = messageMaxId;
                                                                                                            count_unread = count_unread2;
                                                                                                            mentions_unread2 = mentions_unread;
                                                                                                            i10 = max_id_query3;
                                                                                                            messages_messages = messages_messages2;
                                                                                                            z = num;
                                                                                                            i2 = channelId2;
                                                                                                            isEnd = isEnd2;
                                                                                                            i9 = i7;
                                                                                                            res = messages_messages;
                                                                                                            res.messages.clear();
                                                                                                            res.chats.clear();
                                                                                                            res.users.clear();
                                                                                                            FileLog.m3e(e2);
                                                                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                        } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                                            tL_messages_messages = e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                                            i3 = count_query;
                                                                                                            i4 = intValue;
                                                                                                            last_message_id = endMid;
                                                                                                            i5 = count_unread3;
                                                                                                            j = messageMaxId;
                                                                                                            count_unread = count_unread2;
                                                                                                            mentions_unread2 = mentions_unread;
                                                                                                            i10 = max_id_query3;
                                                                                                            res2 = messages_messages2;
                                                                                                            z = num;
                                                                                                            i2 = channelId2;
                                                                                                            isEnd = isEnd2;
                                                                                                            i9 = i7;
                                                                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                            throw tL_messages_messages;
                                                                                                        }
                                                                                                    }
                                                                                                    cursor.dispose();
                                                                                                    if (intValue != 0) {
                                                                                                        cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid <= %d AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j), Integer.valueOf(intValue)}), new Object[0]);
                                                                                                        if (cursor.next()) {
                                                                                                            count_unread2 = cursor.intValue(0);
                                                                                                        }
                                                                                                        cursor.dispose();
                                                                                                    }
                                                                                                    existingUnreadCount = count_unread2;
                                                                                                } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                                    e2 = e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                                    i3 = count_query;
                                                                                                    last_message_id = endMid;
                                                                                                    i5 = count_unread3;
                                                                                                    j = messageMaxId;
                                                                                                    count_unread = count_unread2;
                                                                                                    mentions_unread2 = mentions_unread;
                                                                                                    i10 = max_id_query3;
                                                                                                    messages_messages = messages_messages2;
                                                                                                    z = num;
                                                                                                    isEnd = isEnd2;
                                                                                                    i4 = i14;
                                                                                                    i9 = i7;
                                                                                                    res = messages_messages;
                                                                                                    res.messages.clear();
                                                                                                    res.chats.clear();
                                                                                                    res.users.clear();
                                                                                                    FileLog.m3e(e2);
                                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                                    tL_messages_messages = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                                    i3 = count_query;
                                                                                                    last_message_id = endMid;
                                                                                                    i5 = count_unread3;
                                                                                                    j = messageMaxId;
                                                                                                    count_unread = count_unread2;
                                                                                                    mentions_unread2 = mentions_unread;
                                                                                                    i10 = max_id_query3;
                                                                                                    res2 = messages_messages2;
                                                                                                    z = num;
                                                                                                    isEnd = isEnd2;
                                                                                                    i4 = i14;
                                                                                                    i9 = i7;
                                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                    throw tL_messages_messages;
                                                                                                }
                                                                                            } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                                i7 = offset_query3;
                                                                                                i14 = intValue;
                                                                                                e2 = e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                                i3 = count_query;
                                                                                                last_message_id = endMid;
                                                                                                i5 = count_unread3;
                                                                                                count_unread = count_unread2;
                                                                                                mentions_unread2 = mentions_unread;
                                                                                                messages_messages = messages_messages2;
                                                                                                isEnd = isEnd2;
                                                                                                i4 = i14;
                                                                                                i9 = i7;
                                                                                                res = messages_messages;
                                                                                                res.messages.clear();
                                                                                                res.chats.clear();
                                                                                                res.users.clear();
                                                                                                FileLog.m3e(e2);
                                                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                            } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                                i7 = offset_query3;
                                                                                                i14 = intValue;
                                                                                                tL_messages_messages = e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                                i3 = count_query;
                                                                                                last_message_id = endMid;
                                                                                                i5 = count_unread3;
                                                                                                count_unread = count_unread2;
                                                                                                mentions_unread2 = mentions_unread;
                                                                                                res2 = messages_messages2;
                                                                                                isEnd = isEnd2;
                                                                                                i4 = i14;
                                                                                                i9 = i7;
                                                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                throw tL_messages_messages;
                                                                                            }
                                                                                        } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                            i7 = offset_query3;
                                                                                            i14 = intValue;
                                                                                            e2 = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                            i3 = count_query;
                                                                                            i5 = count_unread3;
                                                                                            count_unread = count_unread2;
                                                                                            mentions_unread2 = mentions_unread;
                                                                                            messages_messages = messages_messages2;
                                                                                            isEnd = isEnd2;
                                                                                            i4 = i14;
                                                                                            i9 = i7;
                                                                                            res = messages_messages;
                                                                                            res.messages.clear();
                                                                                            res.chats.clear();
                                                                                            res.users.clear();
                                                                                            FileLog.m3e(e2);
                                                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                        } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                            i7 = offset_query3;
                                                                                            i14 = intValue;
                                                                                            tL_messages_messages = e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                            i3 = count_query;
                                                                                            i5 = count_unread3;
                                                                                            count_unread = count_unread2;
                                                                                            mentions_unread2 = mentions_unread;
                                                                                            res2 = messages_messages2;
                                                                                            isEnd = isEnd2;
                                                                                            i4 = i14;
                                                                                            i9 = i7;
                                                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                            throw tL_messages_messages;
                                                                                        }
                                                                                    }
                                                                                    i7 = offset_query3;
                                                                                    i14 = intValue;
                                                                                    existingUnreadCount = count_unread2;
                                                                                    endMid = last_message_id;
                                                                                    if (count_query > existingUnreadCount) {
                                                                                        queryFromServer3 = num;
                                                                                        if (existingUnreadCount < queryFromServer3) {
                                                                                            offset_query3 = existingUnreadCount - count_query;
                                                                                            count_query += 10;
                                                                                            try {
                                                                                                access$0008 = MessagesStorage.this.database;
                                                                                                locale5 = Locale.US;
                                                                                                str6 = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d ORDER BY m.mid ASC LIMIT %d,%d";
                                                                                                objArr = new Object[3];
                                                                                                min_unread_id3 = intValue;
                                                                                                last_message_id2 = endMid;
                                                                                                try {
                                                                                                    objArr[0] = Long.valueOf(j);
                                                                                                    objArr[1] = Integer.valueOf(offset_query3);
                                                                                                    objArr[2] = Integer.valueOf(count_query);
                                                                                                    count_unread = existingUnreadCount;
                                                                                                    cursor = access$0008.queryFinalized(String.format(locale5, str6, objArr), new Object[0]);
                                                                                                    i3 = count_query;
                                                                                                    i9 = offset_query3;
                                                                                                    i5 = count_unread3;
                                                                                                    j = messageMaxId;
                                                                                                    mentions_unread6 = mentions_unread;
                                                                                                    max_id_override2 = max_id_query3;
                                                                                                    isEnd = isEnd2;
                                                                                                    i4 = min_unread_id3;
                                                                                                    last_message_id = last_message_id2;
                                                                                                } catch (Exception e10) {
                                                                                                    e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM = e10;
                                                                                                    count_unread = existingUnreadCount;
                                                                                                    i3 = count_query;
                                                                                                    i9 = offset_query3;
                                                                                                    z = queryFromServer3;
                                                                                                    i5 = count_unread3;
                                                                                                    j = messageMaxId;
                                                                                                    mentions_unread2 = mentions_unread;
                                                                                                    i10 = max_id_query3;
                                                                                                    messages_messages = messages_messages2;
                                                                                                    i2 = channelId2;
                                                                                                    isEnd = isEnd2;
                                                                                                    i4 = min_unread_id3;
                                                                                                    last_message_id = last_message_id2;
                                                                                                    e2 = e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                                    res = messages_messages;
                                                                                                    res.messages.clear();
                                                                                                    res.chats.clear();
                                                                                                    res.users.clear();
                                                                                                    FileLog.m3e(e2);
                                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                } catch (Throwable th7) {
                                                                                                    e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM = th7;
                                                                                                    count_unread = existingUnreadCount;
                                                                                                    i3 = count_query;
                                                                                                    i9 = offset_query3;
                                                                                                    z = queryFromServer3;
                                                                                                    i5 = count_unread3;
                                                                                                    j = messageMaxId;
                                                                                                    mentions_unread2 = mentions_unread;
                                                                                                    i10 = max_id_query3;
                                                                                                    res2 = messages_messages2;
                                                                                                    i2 = channelId2;
                                                                                                    isEnd = isEnd2;
                                                                                                    i4 = min_unread_id3;
                                                                                                    last_message_id = last_message_id2;
                                                                                                    tL_messages_messages = e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                    throw tL_messages_messages;
                                                                                                }
                                                                                            } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                                count_unread = existingUnreadCount;
                                                                                                i3 = count_query;
                                                                                                i9 = offset_query3;
                                                                                                z = queryFromServer3;
                                                                                                i5 = count_unread3;
                                                                                                j = messageMaxId;
                                                                                                mentions_unread2 = mentions_unread;
                                                                                                i10 = max_id_query3;
                                                                                                messages_messages = messages_messages2;
                                                                                                i2 = channelId2;
                                                                                                isEnd = isEnd2;
                                                                                                i4 = intValue;
                                                                                                last_message_id = endMid;
                                                                                                e2 = e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                                res = messages_messages;
                                                                                                res.messages.clear();
                                                                                                res.chats.clear();
                                                                                                res.users.clear();
                                                                                                FileLog.m3e(e2);
                                                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                            } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                                count_unread = existingUnreadCount;
                                                                                                i3 = count_query;
                                                                                                i9 = offset_query3;
                                                                                                z = queryFromServer3;
                                                                                                i5 = count_unread3;
                                                                                                j = messageMaxId;
                                                                                                mentions_unread2 = mentions_unread;
                                                                                                i10 = max_id_query3;
                                                                                                res2 = messages_messages2;
                                                                                                i2 = channelId2;
                                                                                                isEnd = isEnd2;
                                                                                                i4 = intValue;
                                                                                                last_message_id = endMid;
                                                                                                tL_messages_messages = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                                throw tL_messages_messages;
                                                                                            }
                                                                                        }
                                                                                    } else {
                                                                                        queryFromServer3 = num;
                                                                                    }
                                                                                } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                    e2 = e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                    i3 = count_query;
                                                                                    i5 = count_unread3;
                                                                                    j = messageMaxId;
                                                                                    count_unread = count_unread2;
                                                                                    mentions_unread2 = mentions_unread;
                                                                                    i10 = max_id_query3;
                                                                                    messages_messages = messages_messages2;
                                                                                    z = num;
                                                                                    i2 = channelId2;
                                                                                    isEnd = isEnd2;
                                                                                    i4 = intValue;
                                                                                    i9 = offset_query3;
                                                                                    res = messages_messages;
                                                                                    res.messages.clear();
                                                                                    res.chats.clear();
                                                                                    res.users.clear();
                                                                                    FileLog.m3e(e2);
                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                    tL_messages_messages = e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                    i3 = count_query;
                                                                                    i5 = count_unread3;
                                                                                    j = messageMaxId;
                                                                                    count_unread = count_unread2;
                                                                                    mentions_unread2 = mentions_unread;
                                                                                    i10 = max_id_query3;
                                                                                    res2 = messages_messages2;
                                                                                    z = num;
                                                                                    i2 = channelId2;
                                                                                    isEnd = isEnd2;
                                                                                    i4 = intValue;
                                                                                    i9 = offset_query3;
                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                    throw tL_messages_messages;
                                                                                }
                                                                                try {
                                                                                    count_query = Math.max(count_query, existingUnreadCount + 10);
                                                                                    if (existingUnreadCount < queryFromServer3) {
                                                                                        existingUnreadCount = 0;
                                                                                        intValue = 0;
                                                                                        endMid = 0;
                                                                                    }
                                                                                    offset_query3 = i7;
                                                                                    access$0008 = MessagesStorage.this.database;
                                                                                    locale5 = Locale.US;
                                                                                    str6 = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d ORDER BY m.mid ASC LIMIT %d,%d";
                                                                                    objArr = new Object[3];
                                                                                    min_unread_id3 = intValue;
                                                                                    last_message_id2 = endMid;
                                                                                    objArr[0] = Long.valueOf(j);
                                                                                    objArr[1] = Integer.valueOf(offset_query3);
                                                                                    objArr[2] = Integer.valueOf(count_query);
                                                                                    count_unread = existingUnreadCount;
                                                                                    cursor = access$0008.queryFinalized(String.format(locale5, str6, objArr), new Object[0]);
                                                                                    i3 = count_query;
                                                                                    i9 = offset_query3;
                                                                                    i5 = count_unread3;
                                                                                    j = messageMaxId;
                                                                                    mentions_unread6 = mentions_unread;
                                                                                    max_id_override2 = max_id_query3;
                                                                                    isEnd = isEnd2;
                                                                                    i4 = min_unread_id3;
                                                                                    last_message_id = last_message_id2;
                                                                                } catch (Exception e11) {
                                                                                    e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM = e11;
                                                                                    count_unread = existingUnreadCount;
                                                                                    i3 = count_query;
                                                                                    i4 = intValue;
                                                                                    last_message_id = endMid;
                                                                                    z = queryFromServer3;
                                                                                    i5 = count_unread3;
                                                                                    j = messageMaxId;
                                                                                    mentions_unread2 = mentions_unread;
                                                                                    i10 = max_id_query3;
                                                                                    messages_messages = messages_messages2;
                                                                                    i2 = channelId2;
                                                                                    isEnd = isEnd2;
                                                                                    i9 = i7;
                                                                                    e2 = e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                    res = messages_messages;
                                                                                    res.messages.clear();
                                                                                    res.chats.clear();
                                                                                    res.users.clear();
                                                                                    FileLog.m3e(e2);
                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                } catch (Throwable th8) {
                                                                                    e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM = th8;
                                                                                    count_unread = existingUnreadCount;
                                                                                    i3 = count_query;
                                                                                    i4 = intValue;
                                                                                    last_message_id = endMid;
                                                                                    z = queryFromServer3;
                                                                                    i5 = count_unread3;
                                                                                    j = messageMaxId;
                                                                                    mentions_unread2 = mentions_unread;
                                                                                    i10 = max_id_query3;
                                                                                    res2 = messages_messages2;
                                                                                    i2 = channelId2;
                                                                                    isEnd = isEnd2;
                                                                                    i9 = i7;
                                                                                    tL_messages_messages = e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                                    throw tL_messages_messages;
                                                                                }
                                                                            }
                                                                            i3 = count_query;
                                                                            i4 = intValue;
                                                                            i5 = count_unread3;
                                                                            count_unread = count_unread2;
                                                                            mentions_unread6 = mentions_unread;
                                                                            max_id_override2 = max_id_query3;
                                                                            queryFromServer3 = num;
                                                                            isEnd = isEnd2;
                                                                        }
                                                                    } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                        i7 = i9;
                                                                        e2 = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                        i3 = count_query;
                                                                        i5 = count_unread3;
                                                                        j = messageMaxId;
                                                                        count_unread = count_unread2;
                                                                        mentions_unread2 = mentions_unread;
                                                                        i10 = max_id_query3;
                                                                        messages_messages = messages_messages2;
                                                                        z = num;
                                                                        i2 = channelId2;
                                                                        isEnd = isEnd2;
                                                                        i4 = intValue;
                                                                        res = messages_messages;
                                                                        res.messages.clear();
                                                                        res.chats.clear();
                                                                        res.users.clear();
                                                                        FileLog.m3e(e2);
                                                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                    } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                        i7 = i9;
                                                                        tL_messages_messages = e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                        i3 = count_query;
                                                                        i5 = count_unread3;
                                                                        j = messageMaxId;
                                                                        count_unread = count_unread2;
                                                                        mentions_unread2 = mentions_unread;
                                                                        i10 = max_id_query3;
                                                                        res2 = messages_messages2;
                                                                        z = num;
                                                                        i2 = channelId2;
                                                                        isEnd = isEnd2;
                                                                        i4 = intValue;
                                                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                        throw tL_messages_messages;
                                                                    }
                                                                }
                                                                i14 = intValue;
                                                                i7 = i9;
                                                                queryFromServer3 = num;
                                                                try {
                                                                    cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT min(mid) FROM messages WHERE uid = %d AND mid < 0", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                                    if (cursor.next()) {
                                                                        endMid = last_message_id;
                                                                    } else {
                                                                        try {
                                                                            endMid = cursor.intValue(0);
                                                                        } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                            e2 = e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                            i3 = count_query;
                                                                            z = queryFromServer3;
                                                                            i5 = count_unread3;
                                                                            j = messageMaxId;
                                                                            count_unread = count_unread2;
                                                                            mentions_unread2 = mentions_unread;
                                                                            i10 = max_id_query3;
                                                                            messages_messages = messages_messages2;
                                                                            isEnd = isEnd2;
                                                                            i4 = i14;
                                                                            i9 = i7;
                                                                            res = messages_messages;
                                                                            res.messages.clear();
                                                                            res.chats.clear();
                                                                            res.users.clear();
                                                                            FileLog.m3e(e2);
                                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                        } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                            tL_messages_messages = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                            i3 = count_query;
                                                                            z = queryFromServer3;
                                                                            i5 = count_unread3;
                                                                            j = messageMaxId;
                                                                            count_unread = count_unread2;
                                                                            mentions_unread2 = mentions_unread;
                                                                            i10 = max_id_query3;
                                                                            res2 = messages_messages2;
                                                                            isEnd = isEnd2;
                                                                            i4 = i14;
                                                                            i9 = i7;
                                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                            throw tL_messages_messages;
                                                                        }
                                                                    }
                                                                    cursor.dispose();
                                                                    cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.mid ASC LIMIT %d)", new Object[]{Long.valueOf(j), Long.valueOf(messageMaxId), Integer.valueOf(count_query / 2), Long.valueOf(j), Long.valueOf(messageMaxId), Integer.valueOf(count_query / 2)}), new Object[0]);
                                                                    i3 = count_query;
                                                                    last_message_id = endMid;
                                                                    i5 = count_unread3;
                                                                    j = messageMaxId;
                                                                    count_unread = count_unread2;
                                                                    mentions_unread6 = mentions_unread;
                                                                    max_id_override2 = max_id_query3;
                                                                    isEnd = isEnd2;
                                                                    i4 = i14;
                                                                    i9 = i7;
                                                                } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                    z = queryFromServer3;
                                                                    messages_messages = messages_messages2;
                                                                    i2 = channelId2;
                                                                    e2 = e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                    i3 = count_query;
                                                                    i5 = count_unread3;
                                                                    count_unread = count_unread2;
                                                                    mentions_unread2 = mentions_unread;
                                                                    isEnd = isEnd2;
                                                                    i4 = i14;
                                                                    i9 = i7;
                                                                    res = messages_messages;
                                                                    res.messages.clear();
                                                                    res.chats.clear();
                                                                    res.users.clear();
                                                                    FileLog.m3e(e2);
                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                    z = queryFromServer3;
                                                                    i2 = channelId2;
                                                                    tL_messages_messages = e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                    i3 = count_query;
                                                                    i5 = count_unread3;
                                                                    count_unread = count_unread2;
                                                                    mentions_unread2 = mentions_unread;
                                                                    res2 = messages_messages2;
                                                                    isEnd = isEnd2;
                                                                    i4 = i14;
                                                                    i9 = i7;
                                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                    throw tL_messages_messages;
                                                                }
                                                            } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                isEnd2 = true;
                                                                e2 = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                i3 = count_query;
                                                                i4 = intValue;
                                                                i5 = count_unread3;
                                                                j = messageMaxId;
                                                                count_unread = count_unread2;
                                                                mentions_unread2 = mentions_unread;
                                                                messages_messages = messages_messages2;
                                                                isEnd = isEnd2;
                                                                res = messages_messages;
                                                                res.messages.clear();
                                                                res.chats.clear();
                                                                res.users.clear();
                                                                FileLog.m3e(e2);
                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                            } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                isEnd2 = true;
                                                                tL_messages_messages = e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                i3 = count_query;
                                                                i4 = intValue;
                                                                i5 = count_unread3;
                                                                j = messageMaxId;
                                                                count_unread = count_unread2;
                                                                mentions_unread2 = mentions_unread;
                                                                res2 = messages_messages2;
                                                                isEnd = isEnd2;
                                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                                throw tL_messages_messages;
                                                            }
                                                        } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                            isEnd2 = true;
                                                            e2 = e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                            i3 = count_query;
                                                            i4 = intValue;
                                                            j = messageMaxId;
                                                            count_unread = count_unread2;
                                                            mentions_unread2 = mentions_unread;
                                                            i5 = max_unread_date2;
                                                            messages_messages = messages_messages2;
                                                            isEnd = isEnd2;
                                                            res = messages_messages;
                                                            res.messages.clear();
                                                            res.chats.clear();
                                                            res.users.clear();
                                                            FileLog.m3e(e2);
                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                        } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                            isEnd2 = true;
                                                            tL_messages_messages = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                            i3 = count_query;
                                                            i4 = intValue;
                                                            j = messageMaxId;
                                                            count_unread = count_unread2;
                                                            mentions_unread2 = mentions_unread;
                                                            i5 = max_unread_date2;
                                                            res2 = messages_messages2;
                                                            isEnd = isEnd2;
                                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                            throw tL_messages_messages;
                                                        }
                                                    }
                                                } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                    isEnd2 = true;
                                                    e2 = e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                    i3 = count_query;
                                                    j = messageMaxId;
                                                    count_unread = count_unread2;
                                                    mentions_unread2 = mentions_unread;
                                                    i4 = min_unread_id;
                                                    i5 = max_unread_date2;
                                                    messages_messages = messages_messages2;
                                                    isEnd = isEnd2;
                                                    res = messages_messages;
                                                    res.messages.clear();
                                                    res.chats.clear();
                                                    res.users.clear();
                                                    FileLog.m3e(e2);
                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                    isEnd2 = true;
                                                    tL_messages_messages = e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                    i3 = count_query;
                                                    j = messageMaxId;
                                                    count_unread = count_unread2;
                                                    mentions_unread2 = mentions_unread;
                                                    i4 = min_unread_id;
                                                    i5 = max_unread_date2;
                                                    res2 = messages_messages2;
                                                    isEnd = isEnd2;
                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                    throw tL_messages_messages;
                                                }
                                            }
                                            isEnd2 = true;
                                            intValue = min_unread_id;
                                            count_unread3 = max_unread_date2;
                                        } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                            messages_messages = messages_messages2;
                                            i7 = i9;
                                            z = num;
                                            i2 = channelId2;
                                            e2 = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                            i3 = count_query;
                                            j = messageMaxId;
                                            count_unread = count_unread2;
                                            mentions_unread2 = mentions_unread;
                                            i4 = min_unread_id;
                                            i5 = max_unread_date2;
                                            i10 = max_id_query3;
                                            isEnd = true;
                                            res = messages_messages;
                                            res.messages.clear();
                                            res.chats.clear();
                                            res.users.clear();
                                            FileLog.m3e(e2);
                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                        } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                            i7 = i9;
                                            z = num;
                                            i2 = channelId2;
                                            tL_messages_messages = e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                            i3 = count_query;
                                            j = messageMaxId;
                                            count_unread = count_unread2;
                                            mentions_unread2 = mentions_unread;
                                            i4 = min_unread_id;
                                            i5 = max_unread_date2;
                                            i10 = max_id_query3;
                                            res2 = messages_messages2;
                                            isEnd = true;
                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                            throw tL_messages_messages;
                                        }
                                        try {
                                            if (i3 == 3) {
                                                i14 = intValue;
                                                i7 = i9;
                                                queryFromServer3 = num;
                                            } else if (i3 != 4) {
                                                if (i3 == 1) {
                                                    cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid < %d ORDER BY m.mid DESC LIMIT %d", new Object[]{Long.valueOf(j), Integer.valueOf(i2), Integer.valueOf(count_query)}), new Object[0]);
                                                } else if (i4 == 0) {
                                                    offset_query3 = i9;
                                                    if (i3 != 2) {
                                                        i7 = offset_query3;
                                                        i14 = intValue;
                                                        existingUnreadCount = count_unread2;
                                                        endMid = last_message_id;
                                                    } else {
                                                        cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT min(mid) FROM messages WHERE uid = %d AND mid < 0", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                        if (cursor.next()) {
                                                            endMid = last_message_id;
                                                        } else {
                                                            endMid = cursor.intValue(0);
                                                        }
                                                        cursor.dispose();
                                                        access$0008 = MessagesStorage.this.database;
                                                        locale5 = Locale.US;
                                                        str5 = "SELECT max(mid), max(date) FROM messages WHERE uid = %d AND out = 0 AND read_state IN(0,2) AND mid < 0";
                                                        objArr2 = new Object[1];
                                                        i7 = offset_query3;
                                                        i14 = intValue;
                                                        objArr2[0] = Long.valueOf(j);
                                                        cursor = access$0008.queryFinalized(String.format(locale5, str5, objArr2), new Object[0]);
                                                        if (cursor.next()) {
                                                            intValue = i14;
                                                        } else {
                                                            intValue = cursor.intValue(0);
                                                            count_unread3 = cursor.intValue(1);
                                                        }
                                                        cursor.dispose();
                                                        if (intValue != 0) {
                                                            cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid <= %d AND out = 0 AND read_state IN(0,2)", new Object[]{Long.valueOf(j), Integer.valueOf(intValue)}), new Object[0]);
                                                            if (cursor.next()) {
                                                                count_unread2 = cursor.intValue(0);
                                                            }
                                                            cursor.dispose();
                                                        }
                                                        existingUnreadCount = count_unread2;
                                                    }
                                                    if (count_query > existingUnreadCount) {
                                                        queryFromServer3 = num;
                                                    } else {
                                                        queryFromServer3 = num;
                                                        if (existingUnreadCount < queryFromServer3) {
                                                            offset_query3 = existingUnreadCount - count_query;
                                                            count_query += 10;
                                                            access$0008 = MessagesStorage.this.database;
                                                            locale5 = Locale.US;
                                                            str6 = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d ORDER BY m.mid ASC LIMIT %d,%d";
                                                            objArr = new Object[3];
                                                            min_unread_id3 = intValue;
                                                            last_message_id2 = endMid;
                                                            objArr[0] = Long.valueOf(j);
                                                            objArr[1] = Integer.valueOf(offset_query3);
                                                            objArr[2] = Integer.valueOf(count_query);
                                                            count_unread = existingUnreadCount;
                                                            cursor = access$0008.queryFinalized(String.format(locale5, str6, objArr), new Object[0]);
                                                            i3 = count_query;
                                                            i9 = offset_query3;
                                                            i5 = count_unread3;
                                                            j = messageMaxId;
                                                            mentions_unread6 = mentions_unread;
                                                            max_id_override2 = max_id_query3;
                                                            isEnd = isEnd2;
                                                            i4 = min_unread_id3;
                                                            last_message_id = last_message_id2;
                                                        }
                                                    }
                                                    count_query = Math.max(count_query, existingUnreadCount + 10);
                                                    if (existingUnreadCount < queryFromServer3) {
                                                        existingUnreadCount = 0;
                                                        intValue = 0;
                                                        endMid = 0;
                                                    }
                                                    offset_query3 = i7;
                                                    access$0008 = MessagesStorage.this.database;
                                                    locale5 = Locale.US;
                                                    str6 = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d ORDER BY m.mid ASC LIMIT %d,%d";
                                                    objArr = new Object[3];
                                                    min_unread_id3 = intValue;
                                                    last_message_id2 = endMid;
                                                    objArr[0] = Long.valueOf(j);
                                                    objArr[1] = Integer.valueOf(offset_query3);
                                                    objArr[2] = Integer.valueOf(count_query);
                                                    count_unread = existingUnreadCount;
                                                    cursor = access$0008.queryFinalized(String.format(locale5, str6, objArr), new Object[0]);
                                                    i3 = count_query;
                                                    i9 = offset_query3;
                                                    i5 = count_unread3;
                                                    j = messageMaxId;
                                                    mentions_unread6 = mentions_unread;
                                                    max_id_override2 = max_id_query3;
                                                    isEnd = isEnd2;
                                                    i4 = min_unread_id3;
                                                    last_message_id = last_message_id2;
                                                } else if (i2 == 0) {
                                                    access$000 = MessagesStorage.this.database;
                                                    locale4 = Locale.US;
                                                    str = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d ORDER BY m.mid ASC LIMIT %d,%d";
                                                    objArr5 = new Object[4];
                                                    objArr5[0] = Long.valueOf(j);
                                                    objArr5[1] = Integer.valueOf(i4);
                                                    offset_query3 = i9;
                                                    objArr5[2] = Integer.valueOf(offset_query3);
                                                    objArr5[3] = Integer.valueOf(count_query);
                                                    cursor = access$000.queryFinalized(String.format(locale4, str, objArr5), new Object[0]);
                                                    i3 = count_query;
                                                    i9 = offset_query3;
                                                    i4 = intValue;
                                                    i5 = count_unread3;
                                                    count_unread = count_unread2;
                                                    mentions_unread6 = mentions_unread;
                                                    max_id_override2 = max_id_query3;
                                                    queryFromServer3 = num;
                                                    isEnd = isEnd2;
                                                } else {
                                                    cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.mid ASC LIMIT %d", new Object[]{Long.valueOf(j), Integer.valueOf(i2), Integer.valueOf(count_query)}), new Object[0]);
                                                }
                                                i3 = count_query;
                                                i4 = intValue;
                                                i5 = count_unread3;
                                                count_unread = count_unread2;
                                                mentions_unread6 = mentions_unread;
                                                max_id_override2 = max_id_query3;
                                                queryFromServer3 = num;
                                                isEnd = isEnd2;
                                            } else {
                                                i14 = intValue;
                                                i7 = i9;
                                                queryFromServer3 = num;
                                            }
                                            cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT min(mid) FROM messages WHERE uid = %d AND mid < 0", new Object[]{Long.valueOf(j)}), new Object[0]);
                                            if (cursor.next()) {
                                                endMid = last_message_id;
                                            } else {
                                                endMid = cursor.intValue(0);
                                            }
                                        } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                            messages_messages = messages_messages2;
                                            i7 = i9;
                                            z = num;
                                            i2 = channelId2;
                                            e2 = e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                            i3 = count_query;
                                            i5 = count_unread3;
                                            j = messageMaxId;
                                            count_unread = count_unread2;
                                            mentions_unread2 = mentions_unread;
                                            i10 = max_id_query3;
                                            isEnd = isEnd2;
                                            i4 = intValue;
                                            res = messages_messages;
                                            res.messages.clear();
                                            res.chats.clear();
                                            res.users.clear();
                                            FileLog.m3e(e2);
                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                        } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                            i7 = i9;
                                            z = num;
                                            i2 = channelId2;
                                            tL_messages_messages = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                            i3 = count_query;
                                            i5 = count_unread3;
                                            j = messageMaxId;
                                            count_unread = count_unread2;
                                            mentions_unread2 = mentions_unread;
                                            i10 = max_id_query3;
                                            res2 = messages_messages2;
                                            isEnd = isEnd2;
                                            i4 = intValue;
                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                            throw tL_messages_messages;
                                        }
                                        try {
                                            cursor.dispose();
                                            cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.mid ASC LIMIT %d)", new Object[]{Long.valueOf(j), Long.valueOf(messageMaxId), Integer.valueOf(count_query / 2), Long.valueOf(j), Long.valueOf(messageMaxId), Integer.valueOf(count_query / 2)}), new Object[0]);
                                            i3 = count_query;
                                            last_message_id = endMid;
                                            i5 = count_unread3;
                                            j = messageMaxId;
                                            count_unread = count_unread2;
                                            mentions_unread6 = mentions_unread;
                                            max_id_override2 = max_id_query3;
                                            isEnd = isEnd2;
                                            i4 = i14;
                                            i9 = i7;
                                        } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                            z = queryFromServer3;
                                            messages_messages = messages_messages2;
                                            i2 = channelId2;
                                            e2 = e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                            i3 = count_query;
                                            last_message_id = endMid;
                                            i5 = count_unread3;
                                            count_unread = count_unread2;
                                            mentions_unread2 = mentions_unread;
                                            isEnd = isEnd2;
                                            i4 = i14;
                                            i9 = i7;
                                            res = messages_messages;
                                            res.messages.clear();
                                            res.chats.clear();
                                            res.users.clear();
                                            FileLog.m3e(e2);
                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                        } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                            z = queryFromServer3;
                                            i2 = channelId2;
                                            tL_messages_messages = e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                            i3 = count_query;
                                            last_message_id = endMid;
                                            i5 = count_unread3;
                                            count_unread = count_unread2;
                                            mentions_unread2 = mentions_unread;
                                            res2 = messages_messages2;
                                            isEnd = isEnd2;
                                            i4 = i14;
                                            i9 = i7;
                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                            throw tL_messages_messages;
                                        }
                                        channelId = Integer.MIN_VALUE;
                                        if (cursor != null) {
                                            while (cursor.next()) {
                                                try {
                                                    NativeByteBuffer data = cursor.byteBufferValue(1);
                                                    if (data != null) {
                                                        message = Message.TLdeserialize(data, data.readInt32(false), false);
                                                        message.readAttachPath(data, UserConfig.getInstance(MessagesStorage.this.currentAccount).clientUserId);
                                                        data.reuse();
                                                        MessageObject.setUnreadFlags(message, cursor.intValue(0));
                                                        message.id = cursor.intValue(3);
                                                        message.date = cursor.intValue(4);
                                                        message.dialog_id = j;
                                                        if ((message.flags & 1024) != 0) {
                                                            try {
                                                                message.views = cursor.intValue(7);
                                                            } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                e2 = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                mentions_unread2 = mentions_unread6;
                                                                z = queryFromServer3;
                                                                i10 = max_id_override2;
                                                                messages_messages = messages_messages2;
                                                            } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                tL_messages_messages = e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                mentions_unread2 = mentions_unread6;
                                                                z = queryFromServer3;
                                                                i10 = max_id_override2;
                                                                res2 = messages_messages2;
                                                            }
                                                        }
                                                        if (i11 != 0 && message.ttl == 0) {
                                                            message.ttl = cursor.intValue(8);
                                                        }
                                                        if (cursor.intValue(9) != 0) {
                                                            message.mentioned = true;
                                                        }
                                                        lower_id = messages_messages2;
                                                        try {
                                                            LongSparseArray<ArrayList<Message>> replyMessageRandomOwners4;
                                                            String str7;
                                                            lower_id.messages.add(message);
                                                            chatsToLoad2 = arrayList4;
                                                            usersToLoad2 = arrayList5;
                                                            MessagesStorage.addUsersAndChatsFromMessage(message, usersToLoad2, chatsToLoad2);
                                                            if (message.reply_to_msg_id == 0) {
                                                                try {
                                                                    if (message.reply_to_random_id == 0) {
                                                                        num2 = queryFromServer3;
                                                                        replyMessageRandomOwners4 = replyMessageRandomOwners3;
                                                                        sparseArray = sparseArray2;
                                                                        arrayList2 = arrayList3;
                                                                        message.send_state = cursor.intValue(2);
                                                                        if (message.id > 0) {
                                                                            if (message.send_state != 0) {
                                                                                message.send_state = 0;
                                                                            }
                                                                        }
                                                                        if (i11 == 0) {
                                                                            if (cursor.isNull(5) == 0) {
                                                                                message.random_id = cursor.longValue(5);
                                                                            }
                                                                        }
                                                                        try {
                                                                            if (MessageObject.isSecretPhotoOrVideo(message) == 0) {
                                                                                endMid = MessagesStorage.this.database;
                                                                                queryFromServer3 = Locale.US;
                                                                                str7 = "SELECT date FROM enc_tasks_v2 WHERE mid = %d";
                                                                                mentions_unread3 = mentions_unread6;
                                                                                try {
                                                                                    mentions_unread6 = new Object[1];
                                                                                    replyMessageRandomOwners = replyMessageRandomOwners4;
                                                                                    try {
                                                                                        mentions_unread6[0] = Integer.valueOf(message.id);
                                                                                        mentions_unread6 = endMid.queryFinalized(String.format(queryFromServer3, str7, mentions_unread6), new Object[0]);
                                                                                        if (mentions_unread6.next()) {
                                                                                            message.destroyTime = mentions_unread6.intValue(0);
                                                                                        }
                                                                                        mentions_unread6.dispose();
                                                                                    } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                        e2 = e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                        messages_messages = res3;
                                                                                        i10 = max_id_override2;
                                                                                        i2 = channelId2;
                                                                                        i8 = num2;
                                                                                        mentions_unread2 = mentions_unread3;
                                                                                    } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                        tL_messages_messages = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                        res2 = res3;
                                                                                        i10 = max_id_override2;
                                                                                        i2 = channelId2;
                                                                                        i8 = num2;
                                                                                        mentions_unread2 = mentions_unread3;
                                                                                    }
                                                                                } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                    replyMessageRandomOwners = replyMessageRandomOwners4;
                                                                                    mentions_unread4 = e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                    FileLog.m3e(mentions_unread4);
                                                                                    arrayList5 = usersToLoad2;
                                                                                    arrayList4 = chatsToLoad2;
                                                                                    arrayList3 = arrayList2;
                                                                                    sparseArray2 = sparseArray;
                                                                                    messages_messages2 = res3;
                                                                                    queryFromServer3 = num2;
                                                                                    mentions_unread6 = mentions_unread3;
                                                                                    replyMessageRandomOwners3 = replyMessageRandomOwners;
                                                                                    channelId = Integer.MIN_VALUE;
                                                                                } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                                    tL_messages_messages = e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                                    res2 = res3;
                                                                                    i10 = max_id_override2;
                                                                                    i2 = channelId2;
                                                                                    i8 = num2;
                                                                                    mentions_unread2 = mentions_unread3;
                                                                                }
                                                                            } else {
                                                                                mentions_unread3 = mentions_unread6;
                                                                                replyMessageRandomOwners = replyMessageRandomOwners4;
                                                                            }
                                                                        } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                            mentions_unread3 = mentions_unread6;
                                                                            replyMessageRandomOwners = replyMessageRandomOwners4;
                                                                            NativeByteBuffer nativeByteBuffer = data;
                                                                            mentions_unread4 = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                            FileLog.m3e(mentions_unread4);
                                                                            arrayList5 = usersToLoad2;
                                                                            arrayList4 = chatsToLoad2;
                                                                            arrayList3 = arrayList2;
                                                                            sparseArray2 = sparseArray;
                                                                            messages_messages2 = res3;
                                                                            queryFromServer3 = num2;
                                                                            mentions_unread6 = mentions_unread3;
                                                                            replyMessageRandomOwners3 = replyMessageRandomOwners;
                                                                            channelId = Integer.MIN_VALUE;
                                                                        } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                            tL_messages_messages = e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                            res2 = lower_id;
                                                                            i10 = max_id_override2;
                                                                            i2 = channelId2;
                                                                            i8 = num2;
                                                                            mentions_unread2 = mentions_unread6;
                                                                        }
                                                                    }
                                                                } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                    e2 = e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                    mentions_unread2 = mentions_unread6;
                                                                    z = queryFromServer3;
                                                                    messages_messages = lower_id;
                                                                    i10 = max_id_override2;
                                                                } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                    obj = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                    mentions_unread2 = mentions_unread6;
                                                                    z = queryFromServer3;
                                                                    res2 = lower_id;
                                                                    i10 = max_id_override2;
                                                                }
                                                            }
                                                            if (!cursor.isNull(6)) {
                                                                data = cursor.byteBufferValue(6);
                                                                if (data != null) {
                                                                    message.replyMessage = Message.TLdeserialize(data, data.readInt32(false), false);
                                                                    message.replyMessage.readAttachPath(data, UserConfig.getInstance(MessagesStorage.this.currentAccount).clientUserId);
                                                                    data.reuse();
                                                                    if (message.replyMessage != null) {
                                                                        if (MessageObject.isMegagroup(message)) {
                                                                            Message message2 = message.replyMessage;
                                                                            message2.flags |= channelId;
                                                                        }
                                                                        MessagesStorage.addUsersAndChatsFromMessage(message.replyMessage, usersToLoad2, chatsToLoad2);
                                                                    }
                                                                }
                                                            }
                                                            if (message.replyMessage == null) {
                                                                try {
                                                                    ArrayList<Message> messages;
                                                                    if (message.reply_to_msg_id != 0) {
                                                                        num2 = queryFromServer3;
                                                                        endMid = (long) message.reply_to_msg_id;
                                                                        try {
                                                                            if (message.to_id.channel_id != 0) {
                                                                                endMid |= ((long) message.to_id.channel_id) << 32;
                                                                            }
                                                                            arrayList2 = arrayList3;
                                                                            if (!arrayList2.contains(Long.valueOf(endMid))) {
                                                                                arrayList2.add(Long.valueOf(endMid));
                                                                            }
                                                                            sparseArray = sparseArray2;
                                                                            messages = (ArrayList) sparseArray.get(message.reply_to_msg_id);
                                                                            if (messages == null) {
                                                                                messages = new ArrayList();
                                                                                sparseArray.put(message.reply_to_msg_id, messages);
                                                                            }
                                                                            messages.add(message);
                                                                            replyMessageRandomOwners4 = replyMessageRandomOwners3;
                                                                        } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                            e2 = e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                            mentions_unread2 = mentions_unread6;
                                                                            messages_messages = lower_id;
                                                                            i10 = max_id_override2;
                                                                        } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                            tL_messages_messages = e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                            mentions_unread2 = mentions_unread6;
                                                                            res2 = lower_id;
                                                                            i10 = max_id_override2;
                                                                            i2 = channelId2;
                                                                            i8 = num2;
                                                                        }
                                                                    } else {
                                                                        num2 = queryFromServer3;
                                                                        sparseArray = sparseArray2;
                                                                        arrayList2 = arrayList3;
                                                                        if (!arrayList2.contains(Long.valueOf(message.reply_to_random_id))) {
                                                                            arrayList2.add(Long.valueOf(message.reply_to_random_id));
                                                                        }
                                                                        replyMessageRandomOwners4 = replyMessageRandomOwners3;
                                                                        messages = (ArrayList) replyMessageRandomOwners4.get(message.reply_to_random_id);
                                                                        if (messages == null) {
                                                                            messages = new ArrayList();
                                                                            replyMessageRandomOwners4.put(message.reply_to_random_id, messages);
                                                                        }
                                                                        messages.add(message);
                                                                    }
                                                                } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                    e2 = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                    mentions_unread2 = mentions_unread6;
                                                                    z = queryFromServer3;
                                                                    messages_messages = lower_id;
                                                                    i10 = max_id_override2;
                                                                    i2 = channelId2;
                                                                } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                    tL_messages_messages = e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                    mentions_unread2 = mentions_unread6;
                                                                    z = queryFromServer3;
                                                                    res2 = lower_id;
                                                                    i10 = max_id_override2;
                                                                    i2 = channelId2;
                                                                }
                                                            } else {
                                                                num2 = queryFromServer3;
                                                                replyMessageRandomOwners4 = replyMessageRandomOwners3;
                                                                sparseArray = sparseArray2;
                                                                arrayList2 = arrayList3;
                                                            }
                                                            try {
                                                                message.send_state = cursor.intValue(2);
                                                                if (message.id > 0) {
                                                                    if (message.send_state != 0) {
                                                                        message.send_state = 0;
                                                                    }
                                                                }
                                                                if (i11 == 0) {
                                                                    if (cursor.isNull(5) == 0) {
                                                                        message.random_id = cursor.longValue(5);
                                                                    }
                                                                }
                                                                if (MessageObject.isSecretPhotoOrVideo(message) == 0) {
                                                                    mentions_unread3 = mentions_unread6;
                                                                    replyMessageRandomOwners = replyMessageRandomOwners4;
                                                                } else {
                                                                    endMid = MessagesStorage.this.database;
                                                                    queryFromServer3 = Locale.US;
                                                                    str7 = "SELECT date FROM enc_tasks_v2 WHERE mid = %d";
                                                                    mentions_unread3 = mentions_unread6;
                                                                    mentions_unread6 = new Object[1];
                                                                    replyMessageRandomOwners = replyMessageRandomOwners4;
                                                                    mentions_unread6[0] = Integer.valueOf(message.id);
                                                                    mentions_unread6 = endMid.queryFinalized(String.format(queryFromServer3, str7, mentions_unread6), new Object[0]);
                                                                    if (mentions_unread6.next()) {
                                                                        message.destroyTime = mentions_unread6.intValue(0);
                                                                    }
                                                                    mentions_unread6.dispose();
                                                                }
                                                            } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                e2 = e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                messages_messages = lower_id;
                                                                i10 = max_id_override2;
                                                                i2 = channelId2;
                                                                i8 = num2;
                                                                mentions_unread2 = mentions_unread6;
                                                            } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                                tL_messages_messages = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                                res2 = lower_id;
                                                                i10 = max_id_override2;
                                                                i2 = channelId2;
                                                                i8 = num2;
                                                                mentions_unread2 = mentions_unread6;
                                                            }
                                                        } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                            e2 = e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                            z = queryFromServer3;
                                                            messages_messages = lower_id;
                                                            i10 = max_id_override2;
                                                            i2 = channelId2;
                                                            mentions_unread2 = mentions_unread6;
                                                        } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                            tL_messages_messages = e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                            z = queryFromServer3;
                                                            res2 = lower_id;
                                                            i10 = max_id_override2;
                                                            i2 = channelId2;
                                                            mentions_unread2 = mentions_unread6;
                                                        }
                                                    } else {
                                                        mentions_unread3 = mentions_unread6;
                                                        num2 = queryFromServer3;
                                                        replyMessageRandomOwners = replyMessageRandomOwners3;
                                                        sparseArray = sparseArray2;
                                                        arrayList2 = arrayList3;
                                                        res3 = messages_messages2;
                                                        chatsToLoad2 = arrayList4;
                                                        usersToLoad2 = arrayList5;
                                                    }
                                                    arrayList5 = usersToLoad2;
                                                    arrayList4 = chatsToLoad2;
                                                    arrayList3 = arrayList2;
                                                    sparseArray2 = sparseArray;
                                                    messages_messages2 = res3;
                                                    queryFromServer3 = num2;
                                                    mentions_unread6 = mentions_unread3;
                                                    replyMessageRandomOwners3 = replyMessageRandomOwners;
                                                    channelId = Integer.MIN_VALUE;
                                                } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                    e2 = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                    z = queryFromServer3;
                                                    i10 = max_id_override2;
                                                    messages_messages = messages_messages2;
                                                    i2 = channelId2;
                                                    mentions_unread2 = mentions_unread6;
                                                } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                    tL_messages_messages = e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                    z = queryFromServer3;
                                                    i10 = max_id_override2;
                                                    res2 = messages_messages2;
                                                    i2 = channelId2;
                                                    mentions_unread2 = mentions_unread6;
                                                }
                                            }
                                            mentions_unread3 = mentions_unread6;
                                            num2 = queryFromServer3;
                                            replyMessageRandomOwners = replyMessageRandomOwners3;
                                            sparseArray = sparseArray2;
                                            arrayList2 = arrayList3;
                                            res3 = messages_messages2;
                                            chatsToLoad2 = arrayList4;
                                            usersToLoad2 = arrayList5;
                                            cursor.dispose();
                                        } else {
                                            mentions_unread3 = mentions_unread6;
                                            num2 = queryFromServer3;
                                            replyMessageRandomOwners = replyMessageRandomOwners3;
                                            sparseArray = sparseArray2;
                                            arrayList2 = arrayList3;
                                            res3 = messages_messages2;
                                            chatsToLoad2 = arrayList4;
                                            usersToLoad2 = arrayList5;
                                        }
                                    } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                        messages_messages = res4;
                                        i2 = channelId;
                                        z = num3;
                                        e2 = e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                        i3 = count_query;
                                        j = messageMaxId;
                                        count_unread = count_unread2;
                                        mentions_unread2 = mentions_unread;
                                        i4 = min_unread_id;
                                        i5 = max_unread_date2;
                                        i10 = max_id_query3;
                                        i9 = 0;
                                        res = messages_messages;
                                        res.messages.clear();
                                        res.chats.clear();
                                        res.users.clear();
                                        FileLog.m3e(e2);
                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                    } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                        i2 = channelId;
                                        z = num3;
                                        i3 = count_query;
                                        j = messageMaxId;
                                        count_unread = count_unread2;
                                        mentions_unread2 = mentions_unread;
                                        i4 = min_unread_id;
                                        i5 = max_unread_date2;
                                        i10 = max_id_query3;
                                        i9 = 0;
                                        res2 = res4;
                                        tL_messages_messages = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                        throw tL_messages_messages;
                                    }
                                    try {
                                        Collections.sort(lower_id.messages, new C03891());
                                        if (i11 != 0) {
                                            if ((i3 == 3 || i3 == 4 || (i3 == 2 && queryFromServer && !unreadCountIsLocal)) && !lower_id.messages.isEmpty()) {
                                                mentions_unread6 = ((Message) lower_id.messages.get(lower_id.messages.size() - 1)).id;
                                                channelId = ((Message) lower_id.messages.get(0)).id;
                                                if (mentions_unread6 > max_id_override2 || channelId < max_id_override2) {
                                                    arrayList2.clear();
                                                    usersToLoad2.clear();
                                                    chatsToLoad2.clear();
                                                    lower_id.messages.clear();
                                                }
                                            }
                                            if ((i3 == 4 || i3 == 3) && lower_id.messages.size() == 1) {
                                                lower_id.messages.clear();
                                            }
                                        }
                                        if (arrayList2.isEmpty()) {
                                        } else {
                                            LongSparseArray<ArrayList<Message>> replyMessageRandomOwners5;
                                            if (sparseArray.size() > 0) {
                                                cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT data, mid, date FROM messages WHERE mid IN(%s)", new Object[]{TextUtils.join(",", arrayList2)}), new Object[0]);
                                            } else {
                                                cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT m.data, m.mid, m.date, r.random_id FROM randoms as r INNER JOIN messages as m ON r.mid = m.mid WHERE r.random_id IN(%s)", new Object[]{TextUtils.join(",", arrayList2)}), new Object[0]);
                                            }
                                            while (cursor.next()) {
                                                NativeByteBuffer data2 = cursor.byteBufferValue(0);
                                                if (data2 != null) {
                                                    Message message3 = Message.TLdeserialize(data2, data2.readInt32(false), false);
                                                    message3.readAttachPath(data2, UserConfig.getInstance(MessagesStorage.this.currentAccount).clientUserId);
                                                    data2.reuse();
                                                    message3.id = cursor.intValue(1);
                                                    message3.date = cursor.intValue(2);
                                                    message3.dialog_id = j;
                                                    MessagesStorage.addUsersAndChatsFromMessage(message3, usersToLoad2, chatsToLoad2);
                                                    if (sparseArray.size() > 0) {
                                                        ArrayList<Message> arrayList6 = (ArrayList) sparseArray.get(message3.id);
                                                        if (arrayList6 != null) {
                                                            for (intValue = 0; intValue < arrayList6.size(); intValue++) {
                                                                Message num4 = (Message) arrayList6.get(intValue);
                                                                num4.replyMessage = message3;
                                                                if (MessageObject.isMegagroup(num4)) {
                                                                    queryFromServer3 = num4.replyMessage;
                                                                    queryFromServer3.flags |= Integer.MIN_VALUE;
                                                                }
                                                            }
                                                        }
                                                        endMid = replyMessageRandomOwners;
                                                    } else {
                                                        long value = cursor.longValue(3);
                                                        endMid = replyMessageRandomOwners;
                                                        ArrayList queryFromServer4 = (ArrayList) endMid.get(value);
                                                        endMid.remove(value);
                                                        if (queryFromServer4 != null) {
                                                            int a = 0;
                                                            while (true) {
                                                                NativeByteBuffer data3 = data2;
                                                                channelId = a;
                                                                if (channelId >= queryFromServer4.size()) {
                                                                    break;
                                                                }
                                                                Message object = (Message) queryFromServer4.get(channelId);
                                                                object.replyMessage = message3;
                                                                long value2 = value;
                                                                object.reply_to_msg_id = message3.id;
                                                                if (MessageObject.isMegagroup(object)) {
                                                                    message = object.replyMessage;
                                                                    message.flags |= Integer.MIN_VALUE;
                                                                }
                                                                a = channelId + 1;
                                                                data2 = data3;
                                                                value = value2;
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    endMid = replyMessageRandomOwners;
                                                }
                                                replyMessageRandomOwners = endMid;
                                            }
                                            endMid = replyMessageRandomOwners;
                                            cursor.dispose();
                                            if (endMid.size() > 0) {
                                                mentions_unread6 = 0;
                                                while (mentions_unread6 < endMid.size()) {
                                                    ArrayList<Message> arrayList7 = (ArrayList) endMid.valueAt(mentions_unread6);
                                                    count_query = 0;
                                                    while (count_query < arrayList7.size()) {
                                                        replyMessageRandomOwners5 = endMid;
                                                        ((Message) arrayList7.get(count_query)).reply_to_random_id = 0;
                                                        count_query++;
                                                        endMid = replyMessageRandomOwners5;
                                                    }
                                                    mentions_unread6++;
                                                    endMid = endMid;
                                                }
                                            }
                                            replyMessageRandomOwners5 = endMid;
                                        }
                                        if (mentions_unread3 != 0) {
                                            try {
                                                cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(mid) FROM messages WHERE uid = %d AND mention = 1 AND read_state IN(0, 1)", new Object[]{Long.valueOf(j)}), new Object[0]);
                                                if (cursor.next()) {
                                                    channelId = mentions_unread3;
                                                    if (channelId != cursor.intValue(0)) {
                                                        mentions_unread6 = channelId * -1;
                                                    } else {
                                                        mentions_unread6 = channelId;
                                                    }
                                                } else {
                                                    mentions_unread6 = mentions_unread3 * -1;
                                                }
                                                cursor.dispose();
                                                mentions_unread5 = mentions_unread6;
                                            } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                e2 = e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                mentions_unread2 = mentions_unread3;
                                                messages_messages = lower_id;
                                                i10 = max_id_override2;
                                                i2 = channelId2;
                                                i8 = num2;
                                                res = messages_messages;
                                                res.messages.clear();
                                                res.chats.clear();
                                                res.users.clear();
                                                FileLog.m3e(e2);
                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                            } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                tL_messages_messages = e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                mentions_unread2 = mentions_unread3;
                                                res2 = lower_id;
                                                i10 = max_id_override2;
                                                i2 = channelId2;
                                                i8 = num2;
                                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                throw tL_messages_messages;
                                            }
                                        }
                                        mentions_unread5 = mentions_unread3;
                                        try {
                                            if (!usersToLoad2.isEmpty()) {
                                                try {
                                                    MessagesStorage.this.getUsersInternal(TextUtils.join(",", usersToLoad2), lower_id.users);
                                                } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                    e2 = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                    messages_messages = lower_id;
                                                    i10 = max_id_override2;
                                                    mentions_unread2 = mentions_unread5;
                                                    i8 = num2;
                                                    res = messages_messages;
                                                    res.messages.clear();
                                                    res.chats.clear();
                                                    res.users.clear();
                                                    FileLog.m3e(e2);
                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                                    tL_messages_messages = e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                                    i10 = max_id_override2;
                                                    mentions_unread2 = mentions_unread5;
                                                    i2 = channelId2;
                                                    i8 = num2;
                                                    res2 = lower_id;
                                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                                    throw tL_messages_messages;
                                                }
                                            }
                                            if (!chatsToLoad2.isEmpty()) {
                                                MessagesStorage.this.getChatsInternal(TextUtils.join(",", chatsToLoad2), lower_id.chats);
                                            }
                                            i2 = channelId2;
                                            i8 = num2;
                                            TL_messages_messages res5 = lower_id;
                                            max_id_query3 = max_id_override2;
                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(lower_id, j, i3, max_id_override, i5, 1, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread5);
                                            mentions_unread2 = mentions_unread5;
                                            i10 = max_id_query3;
                                            mentions_unread5 = res5;
                                        } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                            messages_messages = lower_id;
                                            i2 = channelId2;
                                            i8 = num2;
                                            e2 = e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                            mentions_unread2 = mentions_unread5;
                                            i10 = max_id_override2;
                                            res = messages_messages;
                                            res.messages.clear();
                                            res.chats.clear();
                                            res.users.clear();
                                            FileLog.m3e(e2);
                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                        } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                            i2 = channelId2;
                                            i8 = num2;
                                            tL_messages_messages = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                            mentions_unread2 = mentions_unread5;
                                            i10 = max_id_override2;
                                            res2 = lower_id;
                                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                            throw tL_messages_messages;
                                        }
                                    } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                        messages_messages = lower_id;
                                        i2 = channelId2;
                                        i8 = num2;
                                        e2 = e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                        mentions_unread2 = mentions_unread3;
                                        i10 = max_id_override2;
                                        res = messages_messages;
                                        res.messages.clear();
                                        res.chats.clear();
                                        res.users.clear();
                                        FileLog.m3e(e2);
                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                    } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                        i2 = channelId2;
                                        i8 = num2;
                                        tL_messages_messages = e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                        mentions_unread2 = mentions_unread3;
                                        res2 = lower_id;
                                        i10 = max_id_override2;
                                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                        throw tL_messages_messages;
                                    }
                                } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                    messages_messages = res4;
                                    i2 = channelId;
                                    z = num3;
                                    unreadCountIsLocal = false;
                                    max_id_override = max_id_override2;
                                    e2 = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                    i3 = count_query;
                                    j = messageMaxId;
                                    count_unread = count_unread2;
                                    mentions_unread2 = mentions_unread;
                                    i4 = min_unread_id;
                                    i5 = max_unread_date2;
                                    i10 = max_id_query3;
                                    i9 = 0;
                                    res = messages_messages;
                                    res.messages.clear();
                                    res.chats.clear();
                                    res.users.clear();
                                    FileLog.m3e(e2);
                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                    i2 = channelId;
                                    z = num3;
                                    unreadCountIsLocal = false;
                                    max_id_override = max_id_override2;
                                    i3 = count_query;
                                    j = messageMaxId;
                                    count_unread = count_unread2;
                                    mentions_unread2 = mentions_unread;
                                    i4 = min_unread_id;
                                    i5 = max_unread_date2;
                                    i10 = max_id_query3;
                                    i9 = 0;
                                    res2 = res4;
                                    tL_messages_messages = e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                    throw tL_messages_messages;
                                }
                            } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                messages_messages = res4;
                                i2 = channelId;
                                z = num3;
                                unreadCountIsLocal = false;
                                max_id_override = max_id_override2;
                                e2 = e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                i3 = count_query;
                                j = messageMaxId;
                                count_unread = count_unread2;
                                mentions_unread2 = mentions_unread;
                                i4 = min_unread_id;
                                i5 = max_unread_date2;
                                i10 = max_id_query2;
                                i9 = 0;
                                res = messages_messages;
                                res.messages.clear();
                                res.chats.clear();
                                res.users.clear();
                                FileLog.m3e(e2);
                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                            } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                                i2 = channelId;
                                z = num3;
                                unreadCountIsLocal = false;
                                max_id_override = max_id_override2;
                                i3 = count_query;
                                j = messageMaxId;
                                count_unread = count_unread2;
                                mentions_unread2 = mentions_unread;
                                i4 = min_unread_id;
                                i5 = max_unread_date2;
                                i10 = max_id_query2;
                                i9 = 0;
                                res2 = res4;
                                tL_messages_messages = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                                throw tL_messages_messages;
                            }
                        } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                            messages_messages = res4;
                            i2 = channelId;
                            z = num3;
                            unreadCountIsLocal = false;
                            max_id_override = max_id_override2;
                            e2 = e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                            i3 = count_query;
                            j = messageMaxId;
                            count_unread = count_unread2;
                            mentions_unread2 = mentions_unread;
                            i4 = min_unread_id;
                            i5 = 0;
                            i10 = max_id_query2;
                            i9 = 0;
                            res = messages_messages;
                            res.messages.clear();
                            res.chats.clear();
                            res.users.clear();
                            FileLog.m3e(e2);
                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                        } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                            i2 = channelId;
                            z = num3;
                            unreadCountIsLocal = false;
                            max_id_override = max_id_override2;
                            i3 = count_query;
                            j = messageMaxId;
                            count_unread = count_unread2;
                            mentions_unread2 = mentions_unread;
                            i4 = min_unread_id;
                            i5 = 0;
                            i10 = max_id_query2;
                            i9 = 0;
                            res2 = res4;
                            tL_messages_messages = e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                            throw tL_messages_messages;
                        }
                    } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                        messages_messages = res4;
                        i2 = channelId;
                        z = num3;
                        queryFromServer = false;
                        unreadCountIsLocal = false;
                        max_id_override = max_id_override2;
                        e2 = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                        i3 = count_query;
                        j = messageMaxId;
                        count_unread = count_unread2;
                        mentions_unread2 = mentions_unread;
                        i4 = min_unread_id;
                        i5 = 0;
                        i10 = max_id_query2;
                        i9 = 0;
                        res = messages_messages;
                        res.messages.clear();
                        res.chats.clear();
                        res.users.clear();
                        FileLog.m3e(e2);
                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                    } catch (Throwable e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                        i2 = channelId;
                        z = num3;
                        queryFromServer = false;
                        unreadCountIsLocal = false;
                        max_id_override = max_id_override2;
                        i3 = count_query;
                        j = messageMaxId;
                        count_unread = count_unread2;
                        mentions_unread2 = mentions_unread;
                        i4 = min_unread_id;
                        i5 = 0;
                        i10 = max_id_query2;
                        i9 = 0;
                        res2 = res4;
                        tL_messages_messages = e42222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                        throw tL_messages_messages;
                    }
                } catch (Throwable e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                    messages_messages = res4;
                    isEnd = false;
                    i2 = channelId;
                    z = num3;
                    queryFromServer = false;
                    unreadCountIsLocal = false;
                    max_id_override = max_id_override2;
                    e2 = e422222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                    i3 = count_query;
                    j = messageMaxId;
                    count_unread = count_unread2;
                    mentions_unread2 = mentions_unread;
                    i4 = min_unread_id;
                    i5 = 0;
                    i10 = max_id_query2;
                    i9 = 0;
                    res = messages_messages;
                    res.messages.clear();
                    res.chats.clear();
                    res.users.clear();
                    FileLog.m3e(e2);
                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                } catch (Throwable e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM) {
                    isEnd = false;
                    i2 = channelId;
                    z = num3;
                    queryFromServer = false;
                    unreadCountIsLocal = false;
                    max_id_override = max_id_override2;
                    i3 = count_query;
                    j = messageMaxId;
                    count_unread = count_unread2;
                    mentions_unread2 = mentions_unread;
                    i4 = min_unread_id;
                    i5 = 0;
                    i10 = max_id_query2;
                    i9 = 0;
                    res2 = res4;
                    tL_messages_messages = e4222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222NUM;
                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedMessages(res2, j, i3, max_id_override, i5, true, i6, i4, last_message_id, count_unread, i5, i3, z, isEnd, i7, queryFromServer, mentions_unread2);
                    throw tL_messages_messages;
                }
            }
        });
    }

    public void clearSentMedia() {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    MessagesStorage.this.database.executeFast("DELETE FROM sent_files_v2 WHERE 1").stepThis().dispose();
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public TLObject getSentFile(String path, int type) {
        TLObject tLObject = null;
        if (path != null) {
            if (!path.endsWith("attheme")) {
                CountDownLatch countDownLatch = new CountDownLatch(1);
                ArrayList<TLObject> result = new ArrayList();
                final String str = path;
                final int i = type;
                final ArrayList<TLObject> arrayList = result;
                final CountDownLatch countDownLatch2 = countDownLatch;
                this.storageQueue.postRunnable(new Runnable() {
                    public void run() {
                        try {
                            if (Utilities.MD5(str) != null) {
                                SQLiteCursor cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM sent_files_v2 WHERE uid = '%s' AND type = %d", new Object[]{id, Integer.valueOf(i)}), new Object[0]);
                                if (cursor.next()) {
                                    NativeByteBuffer data = cursor.byteBufferValue(0);
                                    if (data != null) {
                                        TLObject file = MessageMedia.TLdeserialize(data, data.readInt32(false), false);
                                        data.reuse();
                                        if (file instanceof TL_messageMediaDocument) {
                                            arrayList.add(((TL_messageMediaDocument) file).document);
                                        } else if (file instanceof TL_messageMediaPhoto) {
                                            arrayList.add(((TL_messageMediaPhoto) file).photo);
                                        }
                                    }
                                }
                                cursor.dispose();
                            }
                        } catch (Throwable e) {
                            FileLog.m3e(e);
                        } catch (Throwable th) {
                            countDownLatch2.countDown();
                        }
                        countDownLatch2.countDown();
                    }
                });
                try {
                    countDownLatch.await();
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
                if (!result.isEmpty()) {
                    tLObject = (TLObject) result.get(0);
                }
                return tLObject;
            }
        }
        return null;
    }

    public void putSentFile(final String path, final TLObject file, final int type) {
        if (path != null) {
            if (file != null) {
                this.storageQueue.postRunnable(new Runnable() {
                    /* JADX WARNING: inconsistent code. */
                    /* Code decompiled incorrectly, please refer to instructions dump. */
                    public void run() {
                        SQLitePreparedStatement state = null;
                        try {
                            String id = Utilities.MD5(path);
                            if (id != null) {
                                MessageMedia messageMedia = null;
                                if (file instanceof Photo) {
                                    messageMedia = new TL_messageMediaPhoto();
                                    messageMedia.photo = (Photo) file;
                                    messageMedia.flags |= 1;
                                } else if (file instanceof Document) {
                                    messageMedia = new TL_messageMediaDocument();
                                    messageMedia.document = (Document) file;
                                    messageMedia.flags |= 1;
                                }
                                if (messageMedia == null) {
                                    if (state != null) {
                                        state.dispose();
                                    }
                                    return;
                                }
                                state = MessagesStorage.this.database.executeFast("REPLACE INTO sent_files_v2 VALUES(?, ?, ?)");
                                state.requery();
                                NativeByteBuffer data = new NativeByteBuffer(messageMedia.getObjectSize());
                                messageMedia.serializeToStream(data);
                                state.bindString(1, id);
                                state.bindInteger(2, type);
                                state.bindByteBuffer(3, data);
                                state.step();
                                data.reuse();
                            }
                        } catch (Throwable e) {
                            FileLog.m3e(e);
                            if (state != null) {
                                state.dispose();
                            }
                        } catch (Throwable th) {
                            if (state != null) {
                                state.dispose();
                            }
                        }
                    }
                });
            }
        }
    }

    public void updateEncryptedChatSeq(final EncryptedChat chat, final boolean cleanup) {
        if (chat != null) {
            this.storageQueue.postRunnable(new Runnable() {
                public void run() {
                    SQLitePreparedStatement state = null;
                    try {
                        state = MessagesStorage.this.database.executeFast("UPDATE enc_chats SET seq_in = ?, seq_out = ?, use_count = ?, in_seq_no = ?, mtproto_seq = ? WHERE uid = ?");
                        state.bindInteger(1, chat.seq_in);
                        state.bindInteger(2, chat.seq_out);
                        state.bindInteger(3, (chat.key_use_count_in << 16) | chat.key_use_count_out);
                        state.bindInteger(4, chat.in_seq_no);
                        state.bindInteger(5, chat.mtproto_seq);
                        state.bindInteger(6, chat.id);
                        state.step();
                        if (cleanup) {
                            long did = ((long) chat.id) << 32;
                            MessagesStorage.this.database.executeFast(String.format(Locale.US, "DELETE FROM messages WHERE mid IN (SELECT m.mid FROM messages as m LEFT JOIN messages_seq as s ON m.mid = s.mid WHERE m.uid = %d AND m.date = 0 AND m.mid < 0 AND s.seq_out <= %d)", new Object[]{Long.valueOf(did), Integer.valueOf(chat.in_seq_no)})).stepThis().dispose();
                        }
                        if (state == null) {
                            return;
                        }
                    } catch (Throwable e) {
                        FileLog.m3e(e);
                        if (state == null) {
                            return;
                        }
                    } catch (Throwable th) {
                        if (state != null) {
                            state.dispose();
                        }
                    }
                    state.dispose();
                }
            });
        }
    }

    public void updateEncryptedChatTTL(final EncryptedChat chat) {
        if (chat != null) {
            this.storageQueue.postRunnable(new Runnable() {
                public void run() {
                    SQLitePreparedStatement state = null;
                    try {
                        state = MessagesStorage.this.database.executeFast("UPDATE enc_chats SET ttl = ? WHERE uid = ?");
                        state.bindInteger(1, chat.ttl);
                        state.bindInteger(2, chat.id);
                        state.step();
                        if (state == null) {
                            return;
                        }
                    } catch (Throwable e) {
                        FileLog.m3e(e);
                        if (state == null) {
                            return;
                        }
                    } catch (Throwable th) {
                        if (state != null) {
                            state.dispose();
                        }
                    }
                    state.dispose();
                }
            });
        }
    }

    public void updateEncryptedChatLayer(final EncryptedChat chat) {
        if (chat != null) {
            this.storageQueue.postRunnable(new Runnable() {
                public void run() {
                    SQLitePreparedStatement state = null;
                    try {
                        state = MessagesStorage.this.database.executeFast("UPDATE enc_chats SET layer = ? WHERE uid = ?");
                        state.bindInteger(1, chat.layer);
                        state.bindInteger(2, chat.id);
                        state.step();
                        if (state == null) {
                            return;
                        }
                    } catch (Throwable e) {
                        FileLog.m3e(e);
                        if (state == null) {
                            return;
                        }
                    } catch (Throwable th) {
                        if (state != null) {
                            state.dispose();
                        }
                    }
                    state.dispose();
                }
            });
        }
    }

    public void updateEncryptedChat(final EncryptedChat chat) {
        if (chat != null) {
            this.storageQueue.postRunnable(new Runnable() {
                public void run() {
                    SQLitePreparedStatement state = null;
                    try {
                        if ((chat.key_hash == null || chat.key_hash.length < 16) && chat.auth_key != null) {
                            chat.key_hash = AndroidUtilities.calcAuthKeyHash(chat.auth_key);
                        }
                        state = MessagesStorage.this.database.executeFast("UPDATE enc_chats SET data = ?, g = ?, authkey = ?, ttl = ?, layer = ?, seq_in = ?, seq_out = ?, use_count = ?, exchange_id = ?, key_date = ?, fprint = ?, fauthkey = ?, khash = ?, in_seq_no = ?, admin_id = ?, mtproto_seq = ? WHERE uid = ?");
                        NativeByteBuffer data = new NativeByteBuffer(chat.getObjectSize());
                        NativeByteBuffer data2 = new NativeByteBuffer(chat.a_or_b != null ? chat.a_or_b.length : 1);
                        NativeByteBuffer data3 = new NativeByteBuffer(chat.auth_key != null ? chat.auth_key.length : 1);
                        NativeByteBuffer data4 = new NativeByteBuffer(chat.future_auth_key != null ? chat.future_auth_key.length : 1);
                        NativeByteBuffer data5 = new NativeByteBuffer(chat.key_hash != null ? chat.key_hash.length : 1);
                        chat.serializeToStream(data);
                        state.bindByteBuffer(1, data);
                        if (chat.a_or_b != null) {
                            data2.writeBytes(chat.a_or_b);
                        }
                        if (chat.auth_key != null) {
                            data3.writeBytes(chat.auth_key);
                        }
                        if (chat.future_auth_key != null) {
                            data4.writeBytes(chat.future_auth_key);
                        }
                        if (chat.key_hash != null) {
                            data5.writeBytes(chat.key_hash);
                        }
                        state.bindByteBuffer(2, data2);
                        state.bindByteBuffer(3, data3);
                        state.bindInteger(4, chat.ttl);
                        state.bindInteger(5, chat.layer);
                        state.bindInteger(6, chat.seq_in);
                        state.bindInteger(7, chat.seq_out);
                        state.bindInteger(8, (chat.key_use_count_in << 16) | chat.key_use_count_out);
                        state.bindLong(9, chat.exchange_id);
                        state.bindInteger(10, chat.key_create_date);
                        state.bindLong(11, chat.future_key_fingerprint);
                        state.bindByteBuffer(12, data4);
                        state.bindByteBuffer(13, data5);
                        state.bindInteger(14, chat.in_seq_no);
                        state.bindInteger(15, chat.admin_id);
                        state.bindInteger(16, chat.mtproto_seq);
                        state.bindInteger(17, chat.id);
                        state.step();
                        data.reuse();
                        data2.reuse();
                        data3.reuse();
                        data4.reuse();
                        data5.reuse();
                        if (state == null) {
                            return;
                        }
                    } catch (Throwable e) {
                        FileLog.m3e(e);
                        if (state == null) {
                            return;
                        }
                    } catch (Throwable th) {
                        if (state != null) {
                            state.dispose();
                        }
                    }
                    state.dispose();
                }
            });
        }
    }

    public boolean isDialogHasMessages(long did) {
        CountDownLatch countDownLatch = new CountDownLatch(1);
        boolean[] result = new boolean[1];
        final long j = did;
        final boolean[] zArr = result;
        final CountDownLatch countDownLatch2 = countDownLatch;
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    SQLiteCursor cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT mid FROM messages WHERE uid = %d LIMIT 1", new Object[]{Long.valueOf(j)}), new Object[0]);
                    zArr[0] = cursor.next();
                    cursor.dispose();
                } catch (Throwable e) {
                    FileLog.m3e(e);
                } catch (Throwable th) {
                    countDownLatch2.countDown();
                }
                countDownLatch2.countDown();
            }
        });
        try {
            countDownLatch.await();
        } catch (Throwable e) {
            FileLog.m3e(e);
        }
        return result[0];
    }

    public boolean hasAuthMessage(final int date) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final boolean[] result = new boolean[1];
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    SQLiteCursor cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT mid FROM messages WHERE uid = 777000 AND date = %d AND mid < 0 LIMIT 1", new Object[]{Integer.valueOf(date)}), new Object[0]);
                    result[0] = cursor.next();
                    cursor.dispose();
                } catch (Throwable e) {
                    FileLog.m3e(e);
                } catch (Throwable th) {
                    countDownLatch.countDown();
                }
                countDownLatch.countDown();
            }
        });
        try {
            countDownLatch.await();
        } catch (Throwable e) {
            FileLog.m3e(e);
        }
        return result[0];
    }

    public void getEncryptedChat(final int chat_id, final CountDownLatch countDownLatch, final ArrayList<TLObject> result) {
        if (countDownLatch != null) {
            if (result != null) {
                this.storageQueue.postRunnable(new Runnable() {
                    public void run() {
                        try {
                            ArrayList<Integer> usersToLoad = new ArrayList();
                            ArrayList<EncryptedChat> encryptedChats = new ArrayList();
                            MessagesStorage messagesStorage = MessagesStorage.this;
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.append(TtmlNode.ANONYMOUS_REGION_ID);
                            stringBuilder.append(chat_id);
                            messagesStorage.getEncryptedChatsInternal(stringBuilder.toString(), encryptedChats, usersToLoad);
                            if (!(encryptedChats.isEmpty() || usersToLoad.isEmpty())) {
                                ArrayList<User> users = new ArrayList();
                                MessagesStorage.this.getUsersInternal(TextUtils.join(",", usersToLoad), users);
                                if (!users.isEmpty()) {
                                    result.add(encryptedChats.get(0));
                                    result.add(users.get(0));
                                }
                            }
                        } catch (Throwable e) {
                            FileLog.m3e(e);
                        } catch (Throwable th) {
                            countDownLatch.countDown();
                        }
                        countDownLatch.countDown();
                    }
                });
            }
        }
    }

    public void putEncryptedChat(final EncryptedChat chat, final User user, final TL_dialog dialog) {
        if (chat != null) {
            this.storageQueue.postRunnable(new Runnable() {
                public void run() {
                    try {
                        if ((chat.key_hash == null || chat.key_hash.length < 16) && chat.auth_key != null) {
                            chat.key_hash = AndroidUtilities.calcAuthKeyHash(chat.auth_key);
                        }
                        SQLitePreparedStatement state = MessagesStorage.this.database.executeFast("REPLACE INTO enc_chats VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                        NativeByteBuffer data = new NativeByteBuffer(chat.getObjectSize());
                        NativeByteBuffer data2 = new NativeByteBuffer(chat.a_or_b != null ? chat.a_or_b.length : 1);
                        NativeByteBuffer data3 = new NativeByteBuffer(chat.auth_key != null ? chat.auth_key.length : 1);
                        NativeByteBuffer data4 = new NativeByteBuffer(chat.future_auth_key != null ? chat.future_auth_key.length : 1);
                        NativeByteBuffer data5 = new NativeByteBuffer(chat.key_hash != null ? chat.key_hash.length : 1);
                        chat.serializeToStream(data);
                        state.bindInteger(1, chat.id);
                        state.bindInteger(2, user.id);
                        state.bindString(3, MessagesStorage.this.formatUserSearchName(user));
                        state.bindByteBuffer(4, data);
                        if (chat.a_or_b != null) {
                            data2.writeBytes(chat.a_or_b);
                        }
                        if (chat.auth_key != null) {
                            data3.writeBytes(chat.auth_key);
                        }
                        if (chat.future_auth_key != null) {
                            data4.writeBytes(chat.future_auth_key);
                        }
                        if (chat.key_hash != null) {
                            data5.writeBytes(chat.key_hash);
                        }
                        state.bindByteBuffer(5, data2);
                        state.bindByteBuffer(6, data3);
                        state.bindInteger(7, chat.ttl);
                        state.bindInteger(8, chat.layer);
                        state.bindInteger(9, chat.seq_in);
                        state.bindInteger(10, chat.seq_out);
                        state.bindInteger(11, chat.key_use_count_out | (chat.key_use_count_in << 16));
                        state.bindLong(12, chat.exchange_id);
                        state.bindInteger(13, chat.key_create_date);
                        state.bindLong(14, chat.future_key_fingerprint);
                        state.bindByteBuffer(15, data4);
                        state.bindByteBuffer(16, data5);
                        state.bindInteger(17, chat.in_seq_no);
                        state.bindInteger(18, chat.admin_id);
                        state.bindInteger(19, chat.mtproto_seq);
                        state.step();
                        state.dispose();
                        data.reuse();
                        data2.reuse();
                        data3.reuse();
                        data4.reuse();
                        data5.reuse();
                        if (dialog != null) {
                            state = MessagesStorage.this.database.executeFast("REPLACE INTO dialogs VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                            state.bindLong(1, dialog.id);
                            state.bindInteger(2, dialog.last_message_date);
                            state.bindInteger(3, dialog.unread_count);
                            state.bindInteger(4, dialog.top_message);
                            state.bindInteger(5, dialog.read_inbox_max_id);
                            state.bindInteger(6, dialog.read_outbox_max_id);
                            state.bindInteger(7, 0);
                            state.bindInteger(8, dialog.unread_mentions_count);
                            state.bindInteger(9, dialog.pts);
                            state.bindInteger(10, 0);
                            state.bindInteger(11, dialog.pinnedNum);
                            state.step();
                            state.dispose();
                        }
                    } catch (Throwable e) {
                        FileLog.m3e(e);
                    }
                }
            });
        }
    }

    private String formatUserSearchName(User user) {
        StringBuilder str = new StringBuilder(TtmlNode.ANONYMOUS_REGION_ID);
        if (user.first_name != null && user.first_name.length() > 0) {
            str.append(user.first_name);
        }
        if (user.last_name != null && user.last_name.length() > 0) {
            if (str.length() > 0) {
                str.append(" ");
            }
            str.append(user.last_name);
        }
        str.append(";;;");
        if (user.username != null && user.username.length() > 0) {
            str.append(user.username);
        }
        return str.toString().toLowerCase();
    }

    private void putUsersInternal(ArrayList<User> users) throws Exception {
        if (users != null) {
            if (!users.isEmpty()) {
                SQLitePreparedStatement state = this.database.executeFast("REPLACE INTO users VALUES(?, ?, ?, ?)");
                for (int a = 0; a < users.size(); a++) {
                    User user = (User) users.get(a);
                    if (user.min) {
                        SQLiteCursor cursor = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM users WHERE uid = %d", new Object[]{Integer.valueOf(user.id)}), new Object[0]);
                        if (cursor.next()) {
                            try {
                                NativeByteBuffer data = cursor.byteBufferValue(0);
                                if (data != null) {
                                    User oldUser = User.TLdeserialize(data, data.readInt32(false), false);
                                    data.reuse();
                                    if (oldUser != null) {
                                        if (user.username != null) {
                                            oldUser.username = user.username;
                                            oldUser.flags |= 8;
                                        } else {
                                            oldUser.username = null;
                                            oldUser.flags &= -9;
                                        }
                                        if (user.photo != null) {
                                            oldUser.photo = user.photo;
                                            oldUser.flags |= 32;
                                        } else {
                                            oldUser.photo = null;
                                            oldUser.flags &= -33;
                                        }
                                        user = oldUser;
                                    }
                                }
                            } catch (Throwable e) {
                                FileLog.m3e(e);
                            }
                        }
                        cursor.dispose();
                    }
                    state.requery();
                    NativeByteBuffer data2 = new NativeByteBuffer(user.getObjectSize());
                    user.serializeToStream(data2);
                    state.bindInteger(1, user.id);
                    state.bindString(2, formatUserSearchName(user));
                    if (user.status != null) {
                        if (user.status instanceof TL_userStatusRecently) {
                            user.status.expires = -100;
                        } else if (user.status instanceof TL_userStatusLastWeek) {
                            user.status.expires = -101;
                        } else if (user.status instanceof TL_userStatusLastMonth) {
                            user.status.expires = -102;
                        }
                        state.bindInteger(3, user.status.expires);
                    } else {
                        state.bindInteger(3, 0);
                    }
                    state.bindByteBuffer(4, data2);
                    state.step();
                    data2.reuse();
                }
                state.dispose();
            }
        }
    }

    private void putChatsInternal(ArrayList<Chat> chats) throws Exception {
        if (chats != null) {
            if (!chats.isEmpty()) {
                SQLitePreparedStatement state = this.database.executeFast("REPLACE INTO chats VALUES(?, ?, ?)");
                for (int a = 0; a < chats.size(); a++) {
                    Chat chat = (Chat) chats.get(a);
                    if (chat.min) {
                        SQLiteCursor cursor = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM chats WHERE uid = %d", new Object[]{Integer.valueOf(chat.id)}), new Object[0]);
                        if (cursor.next()) {
                            try {
                                NativeByteBuffer data = cursor.byteBufferValue(0);
                                if (data != null) {
                                    Chat oldChat = Chat.TLdeserialize(data, data.readInt32(false), false);
                                    data.reuse();
                                    if (oldChat != null) {
                                        oldChat.title = chat.title;
                                        oldChat.photo = chat.photo;
                                        oldChat.broadcast = chat.broadcast;
                                        oldChat.verified = chat.verified;
                                        oldChat.megagroup = chat.megagroup;
                                        oldChat.democracy = chat.democracy;
                                        if (chat.username != null) {
                                            oldChat.username = chat.username;
                                            oldChat.flags |= 64;
                                        } else {
                                            oldChat.username = null;
                                            oldChat.flags &= -65;
                                        }
                                        chat = oldChat;
                                    }
                                }
                            } catch (Throwable e) {
                                FileLog.m3e(e);
                            }
                        }
                        cursor.dispose();
                    }
                    state.requery();
                    NativeByteBuffer data2 = new NativeByteBuffer(chat.getObjectSize());
                    chat.serializeToStream(data2);
                    state.bindInteger(1, chat.id);
                    if (chat.title != null) {
                        state.bindString(2, chat.title.toLowerCase());
                    } else {
                        state.bindString(2, TtmlNode.ANONYMOUS_REGION_ID);
                    }
                    state.bindByteBuffer(3, data2);
                    state.step();
                    data2.reuse();
                }
                state.dispose();
            }
        }
    }

    public void getUsersInternal(String usersToLoad, ArrayList<User> result) throws Exception {
        if (!(usersToLoad == null || usersToLoad.length() == 0)) {
            if (result != null) {
                SQLiteCursor cursor = this.database.queryFinalized(String.format(Locale.US, "SELECT data, status FROM users WHERE uid IN(%s)", new Object[]{usersToLoad}), new Object[0]);
                while (cursor.next()) {
                    try {
                        NativeByteBuffer data = cursor.byteBufferValue(0);
                        if (data != null) {
                            User user = User.TLdeserialize(data, data.readInt32(false), false);
                            data.reuse();
                            if (user != null) {
                                if (user.status != null) {
                                    user.status.expires = cursor.intValue(1);
                                }
                                result.add(user);
                            }
                        }
                    } catch (Throwable e) {
                        FileLog.m3e(e);
                    }
                }
                cursor.dispose();
            }
        }
    }

    public void getChatsInternal(String chatsToLoad, ArrayList<Chat> result) throws Exception {
        if (!(chatsToLoad == null || chatsToLoad.length() == 0)) {
            if (result != null) {
                SQLiteCursor cursor = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM chats WHERE uid IN(%s)", new Object[]{chatsToLoad}), new Object[0]);
                while (cursor.next()) {
                    try {
                        NativeByteBuffer data = cursor.byteBufferValue(0);
                        if (data != null) {
                            Chat chat = Chat.TLdeserialize(data, data.readInt32(false), false);
                            data.reuse();
                            if (chat != null) {
                                result.add(chat);
                            }
                        }
                    } catch (Throwable e) {
                        FileLog.m3e(e);
                    }
                }
                cursor.dispose();
            }
        }
    }

    public void getEncryptedChatsInternal(String chatsToLoad, ArrayList<EncryptedChat> result, ArrayList<Integer> usersToLoad) throws Exception {
        if (!(chatsToLoad == null || chatsToLoad.length() == 0)) {
            if (result != null) {
                SQLiteCursor cursor = this.database.queryFinalized(String.format(Locale.US, "SELECT data, user, g, authkey, ttl, layer, seq_in, seq_out, use_count, exchange_id, key_date, fprint, fauthkey, khash, in_seq_no, admin_id, mtproto_seq FROM enc_chats WHERE uid IN(%s)", new Object[]{chatsToLoad}), new Object[0]);
                while (cursor.next()) {
                    try {
                        NativeByteBuffer data = cursor.byteBufferValue(0);
                        if (data != null) {
                            EncryptedChat chat = EncryptedChat.TLdeserialize(data, data.readInt32(false), false);
                            data.reuse();
                            if (chat != null) {
                                chat.user_id = cursor.intValue(1);
                                if (!(usersToLoad == null || usersToLoad.contains(Integer.valueOf(chat.user_id)))) {
                                    usersToLoad.add(Integer.valueOf(chat.user_id));
                                }
                                chat.a_or_b = cursor.byteArrayValue(2);
                                chat.auth_key = cursor.byteArrayValue(3);
                                chat.ttl = cursor.intValue(4);
                                chat.layer = cursor.intValue(5);
                                chat.seq_in = cursor.intValue(6);
                                chat.seq_out = cursor.intValue(7);
                                int use_count = cursor.intValue(8);
                                chat.key_use_count_in = (short) (use_count >> 16);
                                chat.key_use_count_out = (short) use_count;
                                chat.exchange_id = cursor.longValue(9);
                                chat.key_create_date = cursor.intValue(10);
                                chat.future_key_fingerprint = cursor.longValue(11);
                                chat.future_auth_key = cursor.byteArrayValue(12);
                                chat.key_hash = cursor.byteArrayValue(13);
                                chat.in_seq_no = cursor.intValue(14);
                                int admin_id = cursor.intValue(15);
                                if (admin_id != 0) {
                                    chat.admin_id = admin_id;
                                }
                                chat.mtproto_seq = cursor.intValue(16);
                                result.add(chat);
                            }
                        }
                    } catch (Throwable e) {
                        FileLog.m3e(e);
                    }
                }
                cursor.dispose();
            }
        }
    }

    private void putUsersAndChatsInternal(ArrayList<User> users, ArrayList<Chat> chats, boolean withTransaction) {
        if (withTransaction) {
            try {
                this.database.beginTransaction();
            } catch (Throwable e) {
                FileLog.m3e(e);
                return;
            }
        }
        putUsersInternal(users);
        putChatsInternal(chats);
        if (withTransaction) {
            this.database.commitTransaction();
        }
    }

    public void putUsersAndChats(final ArrayList<User> users, final ArrayList<Chat> chats, final boolean withTransaction, boolean useQueue) {
        if (users == null || !users.isEmpty() || chats == null || !chats.isEmpty()) {
            if (useQueue) {
                this.storageQueue.postRunnable(new Runnable() {
                    public void run() {
                        MessagesStorage.this.putUsersAndChatsInternal(users, chats, withTransaction);
                    }
                });
            } else {
                putUsersAndChatsInternal(users, chats, withTransaction);
            }
        }
    }

    public void removeFromDownloadQueue(long id, int type, boolean move) {
        final boolean z = move;
        final int i = type;
        final long j = id;
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    if (z) {
                        int minDate = -1;
                        SQLiteCursor cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT min(date) FROM download_queue WHERE type = %d", new Object[]{Integer.valueOf(i)}), new Object[0]);
                        if (cursor.next()) {
                            minDate = cursor.intValue(0);
                        }
                        cursor.dispose();
                        if (minDate != -1) {
                            MessagesStorage.this.database.executeFast(String.format(Locale.US, "UPDATE download_queue SET date = %d WHERE uid = %d AND type = %d", new Object[]{Integer.valueOf(minDate - 1), Long.valueOf(j), Integer.valueOf(i)})).stepThis().dispose();
                        }
                    } else {
                        MessagesStorage.this.database.executeFast(String.format(Locale.US, "DELETE FROM download_queue WHERE uid = %d AND type = %d", new Object[]{Long.valueOf(j), Integer.valueOf(i)})).stepThis().dispose();
                    }
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public void clearDownloadQueue(final int type) {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    if (type == 0) {
                        MessagesStorage.this.database.executeFast("DELETE FROM download_queue WHERE 1").stepThis().dispose();
                    } else {
                        MessagesStorage.this.database.executeFast(String.format(Locale.US, "DELETE FROM download_queue WHERE type = %d", new Object[]{Integer.valueOf(type)})).stepThis().dispose();
                    }
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public void getDownloadQueue(final int type) {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    final ArrayList<DownloadObject> objects = new ArrayList();
                    SQLiteCursor cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT uid, type, data FROM download_queue WHERE type = %d ORDER BY date DESC LIMIT 3", new Object[]{Integer.valueOf(type)}), new Object[0]);
                    while (cursor.next()) {
                        DownloadObject downloadObject = new DownloadObject();
                        downloadObject.type = cursor.intValue(1);
                        downloadObject.id = cursor.longValue(0);
                        NativeByteBuffer data = cursor.byteBufferValue(2);
                        if (data != null) {
                            MessageMedia messageMedia = MessageMedia.TLdeserialize(data, data.readInt32(false), false);
                            data.reuse();
                            if (messageMedia.document != null) {
                                downloadObject.object = messageMedia.document;
                            } else if (messageMedia.photo != null) {
                                downloadObject.object = FileLoader.getClosestPhotoSizeWithSize(messageMedia.photo.sizes, AndroidUtilities.getPhotoSize());
                            }
                            downloadObject.secret = messageMedia.ttl_seconds != 0;
                        }
                        objects.add(downloadObject);
                    }
                    cursor.dispose();
                    AndroidUtilities.runOnUIThread(new Runnable() {
                        public void run() {
                            DownloadController.getInstance(MessagesStorage.this.currentAccount).processDownloadObjects(type, objects);
                        }
                    });
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    private int getMessageMediaType(Message message) {
        if (message instanceof TL_message_secret) {
            if (!((((message.media instanceof TL_messageMediaPhoto) || MessageObject.isGifMessage(message)) && message.ttl > 0 && message.ttl <= 60) || MessageObject.isVoiceMessage(message) || MessageObject.isVideoMessage(message))) {
                if (!MessageObject.isRoundVideoMessage(message)) {
                    if ((message.media instanceof TL_messageMediaPhoto) || MessageObject.isVideoMessage(message)) {
                        return 0;
                    }
                }
            }
            return 1;
        } else if ((message instanceof TL_message) && (((message.media instanceof TL_messageMediaPhoto) || (message.media instanceof TL_messageMediaDocument)) && message.media.ttl_seconds != 0)) {
            return 1;
        } else {
            if (!(message.media instanceof TL_messageMediaPhoto)) {
                if (MessageObject.isVideoMessage(message)) {
                }
            }
            return 0;
        }
        return -1;
    }

    public void putWebPages(final LongSparseArray<WebPage> webPages) {
        if (!isEmpty((LongSparseArray) webPages)) {
            this.storageQueue.postRunnable(new Runnable() {
                public void run() {
                    try {
                        final ArrayList<Message> messages = new ArrayList();
                        int a = 0;
                        for (int a2 = 0; a2 < webPages.size(); a2++) {
                            SQLiteCursor cursor = MessagesStorage.this.database;
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.append("SELECT mid FROM webpage_pending WHERE id = ");
                            stringBuilder.append(webPages.keyAt(a2));
                            cursor = cursor.queryFinalized(stringBuilder.toString(), new Object[0]);
                            ArrayList<Long> mids = new ArrayList();
                            while (cursor.next()) {
                                mids.add(Long.valueOf(cursor.longValue(0)));
                            }
                            cursor.dispose();
                            if (!mids.isEmpty()) {
                                cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT mid, data FROM messages WHERE mid IN (%s)", new Object[]{TextUtils.join(",", mids)}), new Object[0]);
                                while (cursor.next()) {
                                    int mid = cursor.intValue(0);
                                    NativeByteBuffer data = cursor.byteBufferValue(1);
                                    if (data != null) {
                                        Message message = Message.TLdeserialize(data, data.readInt32(false), false);
                                        message.readAttachPath(data, UserConfig.getInstance(MessagesStorage.this.currentAccount).clientUserId);
                                        data.reuse();
                                        if (message.media instanceof TL_messageMediaWebPage) {
                                            message.id = mid;
                                            message.media.webpage = (WebPage) webPages.valueAt(a2);
                                            messages.add(message);
                                        }
                                    }
                                }
                                cursor.dispose();
                            }
                        }
                        if (!messages.isEmpty()) {
                            MessagesStorage.this.database.beginTransaction();
                            SQLitePreparedStatement state = MessagesStorage.this.database.executeFast("UPDATE messages SET data = ? WHERE mid = ?");
                            SQLitePreparedStatement state2 = MessagesStorage.this.database.executeFast("UPDATE media_v2 SET data = ? WHERE mid = ?");
                            while (a < messages.size()) {
                                Message message2 = (Message) messages.get(a);
                                NativeByteBuffer data2 = new NativeByteBuffer(message2.getObjectSize());
                                message2.serializeToStream(data2);
                                long messageId = (long) message2.id;
                                if (message2.to_id.channel_id != 0) {
                                    messageId |= ((long) message2.to_id.channel_id) << 32;
                                }
                                state.requery();
                                state.bindByteBuffer(1, data2);
                                state.bindLong(2, messageId);
                                state.step();
                                state2.requery();
                                state2.bindByteBuffer(1, data2);
                                state2.bindLong(2, messageId);
                                state2.step();
                                data2.reuse();
                                a++;
                            }
                            state.dispose();
                            state2.dispose();
                            MessagesStorage.this.database.commitTransaction();
                            AndroidUtilities.runOnUIThread(new Runnable() {
                                public void run() {
                                    NotificationCenter.getInstance(MessagesStorage.this.currentAccount).postNotificationName(NotificationCenter.didReceivedWebpages, messages);
                                }
                            });
                        }
                    } catch (Throwable e) {
                        FileLog.m3e(e);
                    }
                }
            });
        }
    }

    public void overwriteChannel(final int channel_id, final TL_updates_channelDifferenceTooLong difference, final int newDialogType) {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                boolean checkInvite = false;
                try {
                    final long did = (long) (-channel_id);
                    int pinned = 0;
                    SQLiteCursor cursor = MessagesStorage.this.database;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("SELECT pts, pinned FROM dialogs WHERE did = ");
                    stringBuilder.append(did);
                    cursor = cursor.queryFinalized(stringBuilder.toString(), new Object[0]);
                    if (cursor.next()) {
                        pinned = cursor.intValue(1);
                    } else if (newDialogType != 0) {
                        checkInvite = true;
                    }
                    cursor.dispose();
                    SQLiteDatabase access$000 = MessagesStorage.this.database;
                    StringBuilder stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("DELETE FROM messages WHERE uid = ");
                    stringBuilder2.append(did);
                    access$000.executeFast(stringBuilder2.toString()).stepThis().dispose();
                    access$000 = MessagesStorage.this.database;
                    stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("DELETE FROM bot_keyboard WHERE uid = ");
                    stringBuilder2.append(did);
                    access$000.executeFast(stringBuilder2.toString()).stepThis().dispose();
                    access$000 = MessagesStorage.this.database;
                    stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("DELETE FROM media_counts_v2 WHERE uid = ");
                    stringBuilder2.append(did);
                    access$000.executeFast(stringBuilder2.toString()).stepThis().dispose();
                    access$000 = MessagesStorage.this.database;
                    stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("DELETE FROM media_v2 WHERE uid = ");
                    stringBuilder2.append(did);
                    access$000.executeFast(stringBuilder2.toString()).stepThis().dispose();
                    access$000 = MessagesStorage.this.database;
                    stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("DELETE FROM messages_holes WHERE uid = ");
                    stringBuilder2.append(did);
                    access$000.executeFast(stringBuilder2.toString()).stepThis().dispose();
                    access$000 = MessagesStorage.this.database;
                    stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("DELETE FROM media_holes_v2 WHERE uid = ");
                    stringBuilder2.append(did);
                    access$000.executeFast(stringBuilder2.toString()).stepThis().dispose();
                    DataQuery.getInstance(MessagesStorage.this.currentAccount).clearBotKeyboard(did, null);
                    TL_messages_dialogs dialogs = new TL_messages_dialogs();
                    dialogs.chats.addAll(difference.chats);
                    dialogs.users.addAll(difference.users);
                    dialogs.messages.addAll(difference.messages);
                    TL_dialog dialog = new TL_dialog();
                    dialog.id = did;
                    dialog.flags = 1;
                    dialog.peer = new TL_peerChannel();
                    dialog.peer.channel_id = channel_id;
                    dialog.top_message = difference.top_message;
                    dialog.read_inbox_max_id = difference.read_inbox_max_id;
                    dialog.read_outbox_max_id = difference.read_outbox_max_id;
                    dialog.unread_count = difference.unread_count;
                    dialog.unread_mentions_count = difference.unread_mentions_count;
                    dialog.notify_settings = null;
                    dialog.pinned = pinned != 0;
                    dialog.pinnedNum = pinned;
                    dialog.pts = difference.pts;
                    dialogs.dialogs.add(dialog);
                    MessagesStorage.this.putDialogsInternal(dialogs, false);
                    MessagesStorage.this.updateDialogsWithDeletedMessages(new ArrayList(), null, false, channel_id);
                    AndroidUtilities.runOnUIThread(new Runnable() {
                        public void run() {
                            NotificationCenter.getInstance(MessagesStorage.this.currentAccount).postNotificationName(NotificationCenter.removeAllMessagesFromDialog, Long.valueOf(did), Boolean.valueOf(true));
                        }
                    });
                    if (checkInvite) {
                        if (newDialogType == 1) {
                            MessagesController.getInstance(MessagesStorage.this.currentAccount).checkChannelInviter(channel_id);
                        } else {
                            MessagesController.getInstance(MessagesStorage.this.currentAccount).generateJoinMessage(channel_id, false);
                        }
                    }
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public void putChannelViews(final SparseArray<SparseIntArray> channelViews, final boolean isChannel) {
        if (!isEmpty((SparseArray) channelViews)) {
            this.storageQueue.postRunnable(new Runnable() {
                public void run() {
                    try {
                        MessagesStorage.this.database.beginTransaction();
                        SQLitePreparedStatement state = MessagesStorage.this.database.executeFast("UPDATE messages SET media = max((SELECT media FROM messages WHERE mid = ?), ?) WHERE mid = ?");
                        for (int a = 0; a < channelViews.size(); a++) {
                            int peer = channelViews.keyAt(a);
                            SparseIntArray messages = (SparseIntArray) channelViews.get(peer);
                            for (int b = 0; b < messages.size(); b++) {
                                int views = messages.get(messages.keyAt(b));
                                long messageId = (long) messages.keyAt(b);
                                if (isChannel) {
                                    messageId |= ((long) (-peer)) << 32;
                                }
                                state.requery();
                                state.bindLong(1, messageId);
                                state.bindInteger(2, views);
                                state.bindLong(3, messageId);
                                state.step();
                            }
                        }
                        state.dispose();
                        MessagesStorage.this.database.commitTransaction();
                    } catch (Throwable e) {
                        FileLog.m3e(e);
                    }
                }
            });
        }
    }

    private boolean isValidKeyboardToSave(Message message) {
        return (message.reply_markup == null || (message.reply_markup instanceof TL_replyInlineMarkup) || (message.reply_markup.selective && !message.mentioned)) ? false : true;
    }

    private void putMessagesInternal(ArrayList<Message> messages, boolean withTransaction, boolean doNotUpdateDialogDate, int downloadMask, boolean ifNoLastMessage) {
        Message lastMessage;
        int lastMid;
        LongSparseArray<Message> messagesMap;
        SQLitePreparedStatement state;
        LongSparseArray<Integer> mentionCounts;
        LongSparseArray<Integer> mediaTypes;
        LongSparseArray<Long> messagesMediaIdsMap;
        int a;
        SparseArray<LongSparseArray<Integer>> sparseArray;
        int a2;
        Integer count;
        int a3;
        LongSparseArray<Integer> mentionCounts2;
        LongSparseArray<Long> mentionsIdsMap;
        LongSparseArray<Message> botKeyboards;
        LongSparseArray<Integer> mediaTypes2;
        LongSparseArray<Long> messagesMediaIdsMap2;
        LongSparseArray<Message> messagesMap2;
        SparseArray<LongSparseArray<Integer>> mediaCounts;
        LongSparseArray<Integer> messagesCounts;
        SQLitePreparedStatement state5;
        SQLitePreparedStatement state4;
        int downloadMediaMask;
        SQLitePreparedStatement state42;
        LongSparseArray<Integer> mentionCounts3;
        SQLitePreparedStatement state52;
        SQLitePreparedStatement state3;
        LongSparseArray<Message> messagesMap3;
        LongSparseArray<Integer> messagesCounts2;
        MessagesStorage messagesStorage = this;
        ArrayList arrayList = messages;
        if (ifNoLastMessage) {
            lastMessage = (Message) arrayList.get(0);
            if (lastMessage.dialog_id == 0) {
                if (lastMessage.to_id.user_id != 0) {
                    lastMessage.dialog_id = (long) lastMessage.to_id.user_id;
                } else if (lastMessage.to_id.chat_id != 0) {
                    lastMessage.dialog_id = (long) (-lastMessage.to_id.chat_id);
                } else {
                    lastMessage.dialog_id = (long) (-lastMessage.to_id.channel_id);
                }
            }
            lastMid = -1;
            SQLiteCursor cursor = messagesStorage.database;
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("SELECT last_mid FROM dialogs WHERE did = ");
            stringBuilder.append(lastMessage.dialog_id);
            cursor = cursor.queryFinalized(stringBuilder.toString(), new Object[0]);
            if (cursor.next()) {
                lastMid = cursor.intValue(0);
            }
            cursor.dispose();
            if (lastMid != 0) {
                return;
            }
        }
        if (withTransaction) {
            messagesStorage.database.beginTransaction();
        }
        LongSparseArray<Message> messagesMap4 = new LongSparseArray();
        LongSparseArray<Integer> messagesCounts3 = new LongSparseArray();
        LongSparseArray<Integer> mentionCounts4 = new LongSparseArray();
        LongSparseArray<Message> botKeyboards2 = new LongSparseArray();
        StringBuilder messageIds = new StringBuilder();
        LongSparseArray<Integer> dialogsReadMax = new LongSparseArray();
        LongSparseArray<Long> messagesIdsMap = new LongSparseArray();
        LongSparseArray<Long> mentionsIdsMap2 = new LongSparseArray();
        SparseArray<LongSparseArray<Integer>> mediaCounts2 = null;
        LongSparseArray<Long> messagesMediaIdsMap3 = null;
        SQLitePreparedStatement state2 = messagesStorage.database.executeFast("REPLACE INTO messages VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, NULL, ?, ?)");
        SQLitePreparedStatement state22 = null;
        StringBuilder messageMediaIds = null;
        SQLitePreparedStatement state32 = messagesStorage.database.executeFast("REPLACE INTO randoms VALUES(?, ?)");
        LongSparseArray<Integer> mediaTypes3 = null;
        SQLitePreparedStatement state43 = messagesStorage.database.executeFast("REPLACE INTO download_queue VALUES(?, ?, ?, ?)");
        SQLitePreparedStatement state53 = messagesStorage.database.executeFast("REPLACE INTO webpage_pending VALUES(?, ?)");
        SQLitePreparedStatement state33 = state32;
        SQLitePreparedStatement state44 = state43;
        LongSparseArray<Long> messagesMediaIdsMap4 = messagesMediaIdsMap3;
        StringBuilder messageMediaIds2 = messageMediaIds;
        LongSparseArray<Integer> mediaTypes4 = mediaTypes3;
        int a4 = 0;
        while (true) {
            messagesMap = messagesMap4;
            if (a4 >= messages.size()) {
                break;
            }
            lastMessage = (Message) arrayList.get(a4);
            state = state2;
            mentionCounts = mentionCounts4;
            mentionCounts4 = (long) lastMessage.id;
            mediaTypes = mediaTypes4;
            messagesMediaIdsMap = messagesMediaIdsMap4;
            if (lastMessage.dialog_id == 0) {
                if (lastMessage.to_id.user_id != 0) {
                    lastMessage.dialog_id = (long) lastMessage.to_id.user_id;
                } else if (lastMessage.to_id.chat_id != 0) {
                    lastMessage.dialog_id = (long) (-lastMessage.to_id.chat_id);
                } else {
                    lastMessage.dialog_id = (long) (-lastMessage.to_id.channel_id);
                }
            }
            if (lastMessage.to_id.channel_id != 0) {
                mentionCounts4 |= ((long) lastMessage.to_id.channel_id) << 32;
            }
            if (lastMessage.mentioned && lastMessage.media_unread) {
                mentionsIdsMap2.put(mentionCounts4, Long.valueOf(lastMessage.dialog_id));
            }
            if (!((lastMessage.action instanceof TL_messageActionHistoryClear) || MessageObject.isOut(lastMessage) || (lastMessage.id <= 0 && !MessageObject.isUnread(lastMessage)))) {
                Integer currentMaxId = (Integer) dialogsReadMax.get(lastMessage.dialog_id);
                if (currentMaxId == null) {
                    SQLiteDatabase sQLiteDatabase = messagesStorage.database;
                    StringBuilder stringBuilder2 = new StringBuilder();
                    stringBuilder2.append("SELECT inbox_max FROM dialogs WHERE did = ");
                    try {
                        stringBuilder2.append(lastMessage.dialog_id);
                        SQLiteCursor cursor2 = sQLiteDatabase.queryFinalized(stringBuilder2.toString(), new Object[0]);
                        if (cursor2.next()) {
                            currentMaxId = Integer.valueOf(cursor2.intValue(0));
                        } else {
                            currentMaxId = Integer.valueOf(0);
                            Integer num = currentMaxId;
                        }
                        cursor2.dispose();
                        dialogsReadMax.put(lastMessage.dialog_id, currentMaxId);
                    } catch (Throwable e) {
                        Throwable e2;
                        Throwable e3 = e2;
                        messagesStorage = this;
                    }
                } else {
                    Integer num2 = currentMaxId;
                }
                if (lastMessage.id < 0 || currentMaxId.intValue() < lastMessage.id) {
                    if (messageIds.length() > 0) {
                        messageIds.append(",");
                    }
                    messageIds.append(mentionCounts4);
                    messagesIdsMap.put(mentionCounts4, Long.valueOf(lastMessage.dialog_id));
                }
            }
            if (DataQuery.canAddMessageToMedia(lastMessage)) {
                if (messageMediaIds2 == null) {
                    messageMediaIds2 = new StringBuilder();
                    messagesMediaIdsMap4 = new LongSparseArray();
                    mediaTypes4 = new LongSparseArray();
                } else {
                    messagesMediaIdsMap4 = messagesMediaIdsMap;
                    mediaTypes4 = mediaTypes;
                }
                if (messageMediaIds2.length() > 0) {
                    messageMediaIds2.append(",");
                }
                messageMediaIds2.append(mentionCounts4);
                messagesMediaIdsMap4.put(mentionCounts4, Long.valueOf(lastMessage.dialog_id));
                mediaTypes4.put(mentionCounts4, Integer.valueOf(DataQuery.getMediaType(lastMessage)));
            } else {
                messagesMediaIdsMap4 = messagesMediaIdsMap;
                mediaTypes4 = mediaTypes;
            }
            try {
                StringBuilder messageMediaIds3;
                if (isValidKeyboardToSave(lastMessage)) {
                    messageMediaIds3 = messageMediaIds2;
                    Message oldMessage = (Message) botKeyboards2.get(lastMessage.dialog_id);
                    if (oldMessage != null) {
                        if (oldMessage.id < lastMessage.id) {
                        }
                    }
                    botKeyboards2.put(lastMessage.dialog_id, lastMessage);
                } else {
                    messageMediaIds3 = messageMediaIds2;
                }
                a4++;
                messagesMap4 = messagesMap;
                state2 = state;
                mentionCounts4 = mentionCounts;
                messageMediaIds2 = messageMediaIds3;
                ArrayList<Message> arrayList2 = messages;
            } catch (Exception e4) {
                e2 = e4;
            }
        }
        mentionCounts = mentionCounts4;
        state = state2;
        mediaTypes = mediaTypes4;
        messagesMediaIdsMap = messagesMediaIdsMap4;
        for (a = 0; a < botKeyboards2.size(); a++) {
            DataQuery.getInstance(messagesStorage.currentAccount).putBotKeyboard(botKeyboards2.keyAt(a), (Message) botKeyboards2.valueAt(a));
        }
        LongSparseArray<Integer> dialogsReadMax2;
        if (messageMediaIds2 != null) {
            SQLiteCursor cursor3 = messagesStorage.database;
            StringBuilder stringBuilder3 = new StringBuilder();
            stringBuilder3.append("SELECT mid FROM media_v2 WHERE mid IN(");
            stringBuilder3.append(messageMediaIds2.toString());
            stringBuilder3.append(")");
            cursor3 = cursor3.queryFinalized(stringBuilder3.toString(), new Object[0]);
            while (cursor3.next()) {
                messagesMediaIdsMap4 = messagesMediaIdsMap;
                messagesMediaIdsMap4.remove(cursor3.longValue(0));
                messagesMediaIdsMap = messagesMediaIdsMap4;
            }
            messagesMediaIdsMap4 = messagesMediaIdsMap;
            cursor3.dispose();
            sparseArray = new SparseArray();
            a2 = 0;
            while (a2 < messagesMediaIdsMap4.size()) {
                Integer count2;
                SQLiteCursor cursor4;
                long key = messagesMediaIdsMap4.keyAt(a2);
                long value = ((Long) messagesMediaIdsMap4.valueAt(a2)).longValue();
                StringBuilder messageMediaIds4 = messageMediaIds2;
                mediaTypes4 = mediaTypes;
                long key2 = key;
                Integer type = (Integer) mediaTypes4.get(key2);
                LongSparseArray<Integer> counts = (LongSparseArray) sparseArray.get(type.intValue());
                if (counts == null) {
                    counts = new LongSparseArray();
                    count2 = Integer.valueOf(null);
                    sparseArray.put(type.intValue(), counts);
                    dialogsReadMax2 = dialogsReadMax;
                    messageMediaIds2 = value;
                } else {
                    dialogsReadMax2 = dialogsReadMax;
                    messageMediaIds2 = value;
                    count2 = (Integer) counts.get(messageMediaIds2);
                }
                Integer count3 = count2;
                if (count3 == null) {
                    cursor4 = cursor3;
                    count = Integer.valueOf(null);
                } else {
                    cursor4 = cursor3;
                    count = count3;
                }
                counts.put(messageMediaIds2, Integer.valueOf(count.intValue() + 1));
                a2++;
                mediaTypes = mediaTypes4;
                messageMediaIds2 = messageMediaIds4;
                dialogsReadMax = dialogsReadMax2;
                cursor3 = cursor4;
            }
            dialogsReadMax2 = dialogsReadMax;
            mediaTypes4 = mediaTypes;
        } else {
            dialogsReadMax2 = dialogsReadMax;
            messagesMediaIdsMap4 = messagesMediaIdsMap;
            mediaTypes4 = mediaTypes;
            sparseArray = mediaCounts2;
        }
        if (messageIds.length() > 0) {
            long dialog_id;
            SQLiteCursor cursor5 = messagesStorage.database;
            messageMediaIds2 = new StringBuilder();
            messageMediaIds2.append("SELECT mid FROM messages WHERE mid IN(");
            messageMediaIds2.append(messageIds.toString());
            messageMediaIds2.append(")");
            cursor5 = cursor5.queryFinalized(messageMediaIds2.toString(), new Object[0]);
            while (cursor5.next()) {
                long mid = cursor5.longValue(0);
                messagesIdsMap.remove(mid);
                mentionsIdsMap2.remove(mid);
            }
            cursor5.dispose();
            a3 = 0;
            while (a3 < messagesIdsMap.size()) {
                LongSparseArray<Long> messagesIdsMap2 = messagesIdsMap;
                dialog_id = ((Long) messagesIdsMap.valueAt(a3)).longValue();
                count = (Integer) messagesCounts3.get(dialog_id);
                if (count == null) {
                    count = Integer.valueOf(0);
                }
                messagesCounts3.put(dialog_id, Integer.valueOf(count.intValue() + 1));
                a3++;
                messagesIdsMap = messagesIdsMap2;
            }
            a3 = 0;
            while (a3 < mentionsIdsMap2.size()) {
                dialog_id = ((Long) mentionsIdsMap2.valueAt(a3)).longValue();
                mentionCounts2 = mentionCounts;
                Integer count4 = (Integer) mentionCounts2.get(dialog_id);
                if (count4 == null) {
                    count4 = Integer.valueOf(0);
                }
                mentionCounts2.put(dialog_id, Integer.valueOf(count4.intValue() + 1));
                a3++;
                mentionCounts = mentionCounts2;
            }
            mentionCounts2 = mentionCounts;
        } else {
            mentionCounts2 = mentionCounts;
        }
        int downloadMediaMask2 = 0;
        SQLitePreparedStatement state23 = state22;
        a = 0;
        while (true) {
            ArrayList<Message> arrayList3 = messages;
            if (a >= messages.size()) {
                break;
            }
            long messageId;
            boolean updateDialog;
            SQLitePreparedStatement state24;
            Message message = (Message) arrayList3.get(a);
            messagesStorage.fixUnsupportedMedia(message);
            SQLitePreparedStatement state6 = state;
            state6.requery();
            StringBuilder messageIds2 = messageIds;
            long messageId2 = (long) message.id;
            if (message.local_id != null) {
                messageId2 = (long) message.local_id;
            }
            if (message.to_id.channel_id != 0) {
                messageId = messageId2 | (((long) message.to_id.channel_id) << 32);
            } else {
                messageId = messageId2;
            }
            mentionsIdsMap = mentionsIdsMap2;
            botKeyboards = botKeyboards2;
            NativeByteBuffer data = new NativeByteBuffer(message.getObjectSize());
            message.serializeToStream(data);
            boolean updateDialog2 = true;
            if (!message.action || !(message.action instanceof TL_messageEncryptedAction) || (message.action.encryptedAction instanceof TL_decryptedMessageActionSetMessageTTL) || (message.action.encryptedAction instanceof TL_decryptedMessageActionScreenshotMessages)) {
                updateDialog = updateDialog2;
            } else {
                updateDialog = false;
            }
            if (updateDialog) {
                mediaTypes2 = mediaTypes4;
                messagesMediaIdsMap2 = messagesMediaIdsMap4;
                messagesMap2 = messagesMap;
                Message updateDialog3 = (Message) messagesMap2.get(message.dialog_id);
                if (updateDialog3 != null) {
                    mediaCounts = sparseArray;
                    if (message.date <= updateDialog3.date && (message.id <= 0 || updateDialog3.id <= 0 || message.id <= updateDialog3.id)) {
                        if (message.id < 0 && updateDialog3.id < 0 && message.id < updateDialog3.id) {
                        }
                    }
                } else {
                    mediaCounts = sparseArray;
                }
                Message lastMessage2 = updateDialog3;
                messagesMap2.put(message.dialog_id, message);
            } else {
                mediaCounts = sparseArray;
                boolean z = updateDialog;
                mediaTypes2 = mediaTypes4;
                messagesMediaIdsMap2 = messagesMediaIdsMap4;
                messagesMap2 = messagesMap;
            }
            state6.bindLong(1, messageId);
            state6.bindLong(2, message.dialog_id);
            state6.bindInteger(3, MessageObject.getUnreadFlags(message));
            state6.bindInteger(4, message.send_state);
            state6.bindInteger(5, message.date);
            state6.bindByteBuffer(6, data);
            state6.bindInteger(7, MessageObject.isOut(message));
            state6.bindInteger(8, message.ttl);
            if ((message.flags & 1024) != 0) {
                state6.bindInteger(9, message.views);
            } else {
                state6.bindInteger(9, messagesStorage.getMessageMediaType(message));
            }
            state6.bindInteger(10, 0);
            state6.bindInteger(11, message.mentioned);
            state6.step();
            if (message.random_id != 0) {
                state2 = state33;
                state2.requery();
                messagesCounts = messagesCounts3;
                state2.bindLong(1, message.random_id);
                state2.bindLong(2, messageId);
                state2.step();
            } else {
                messagesCounts = messagesCounts3;
                state2 = state33;
            }
            if (DataQuery.canAddMessageToMedia(message)) {
                if (state23 == null) {
                    state23 = messagesStorage.database.executeFast("REPLACE INTO media_v2 VALUES(?, ?, ?, ?, ?)");
                }
                state23.requery();
                state23.bindLong(1, messageId);
                state23.bindLong(2, message.dialog_id);
                state23.bindInteger(3, message.date);
                state23.bindInteger(4, DataQuery.getMediaType(message));
                state23.bindByteBuffer(5, data);
                state23.step();
            }
            if (message.media instanceof TL_messageMediaWebPage) {
                state5 = state53;
                state5.requery();
                state24 = state23;
                state5.bindLong(1, message.media.webpage.id);
                state5.bindLong(2, messageId);
                state5.step();
            } else {
                state24 = state23;
                state5 = state53;
            }
            data.reuse();
            if (downloadMask != 0) {
                if (message.to_id.channel_id != 0) {
                    if (message.post) {
                    }
                    state4 = state44;
                    a++;
                    state44 = state4;
                    state53 = state5;
                    state33 = state2;
                    messagesMap = messagesMap2;
                    state = state6;
                    messageIds = messageIds2;
                    mentionsIdsMap2 = mentionsIdsMap;
                    botKeyboards2 = botKeyboards;
                    mediaTypes4 = mediaTypes2;
                    messagesMediaIdsMap4 = messagesMediaIdsMap2;
                    sparseArray = mediaCounts;
                    messagesCounts3 = messagesCounts;
                    state23 = state24;
                }
                if (message.date >= ConnectionsManager.getInstance(messagesStorage.currentAccount).getCurrentTime() - 3600 && DownloadController.getInstance(messagesStorage.currentAccount).canDownloadMedia(message)) {
                    if ((message.media instanceof TL_messageMediaPhoto) || (message.media instanceof TL_messageMediaDocument)) {
                        int downloadMediaMask3;
                        NativeByteBuffer data2;
                        long id = 0;
                        MessageMedia object = null;
                        int type2;
                        if (MessageObject.isVoiceMessage(message)) {
                            type2 = 0;
                            id = message.media.document.id;
                            a3 = 2;
                            object = new TL_messageMediaDocument();
                            object.document = message.media.document;
                            object.flags |= 1;
                        } else {
                            type2 = 0;
                            long j = messageId;
                            if (MessageObject.isRoundVideoMessage(message)) {
                                id = message.media.document.id;
                                a3 = 64;
                                object = new TL_messageMediaDocument();
                                object.document = message.media.document;
                                object.flags |= 1;
                            } else if (message.media instanceof TL_messageMediaPhoto) {
                                if (FileLoader.getClosestPhotoSizeWithSize(message.media.photo.sizes, AndroidUtilities.getPhotoSize()) != null) {
                                    id = message.media.photo.id;
                                    object = new TL_messageMediaPhoto();
                                    object.photo = message.media.photo;
                                    object.flags |= 1;
                                    a3 = 1;
                                } else {
                                    a3 = type2;
                                }
                            } else if (MessageObject.isVideoMessage(message)) {
                                id = message.media.document.id;
                                a3 = 4;
                                object = new TL_messageMediaDocument();
                                object.document = message.media.document;
                                object.flags |= 1;
                            } else if (!(message.media instanceof TL_messageMediaDocument) || MessageObject.isMusicMessage(message) || MessageObject.isGifDocument(message.media.document)) {
                                messageId = 0;
                                a3 = type2;
                                if (object != null) {
                                    if (message.media.ttl_seconds != 0) {
                                        object.ttl_seconds = message.media.ttl_seconds;
                                        object.flags |= 4;
                                    }
                                    downloadMediaMask2 |= a3;
                                    state4 = state44;
                                    state4.requery();
                                    downloadMediaMask3 = downloadMediaMask2;
                                    data2 = new NativeByteBuffer(object.getObjectSize());
                                    object.serializeToStream(data2);
                                    state4.bindLong(1, messageId);
                                    state4.bindInteger(2, a3);
                                    state4.bindInteger(3, message.date);
                                    state4.bindByteBuffer(4, data2);
                                    state4.step();
                                    data2.reuse();
                                    downloadMediaMask2 = downloadMediaMask3;
                                    a++;
                                    state44 = state4;
                                    state53 = state5;
                                    state33 = state2;
                                    messagesMap = messagesMap2;
                                    state = state6;
                                    messageIds = messageIds2;
                                    mentionsIdsMap2 = mentionsIdsMap;
                                    botKeyboards2 = botKeyboards;
                                    mediaTypes4 = mediaTypes2;
                                    messagesMediaIdsMap4 = messagesMediaIdsMap2;
                                    sparseArray = mediaCounts;
                                    messagesCounts3 = messagesCounts;
                                    state23 = state24;
                                }
                            } else {
                                id = message.media.document.id;
                                a3 = 8;
                                object = new TL_messageMediaDocument();
                                object.document = message.media.document;
                                object.flags |= 1;
                            }
                        }
                        messageId = id;
                        if (object != null) {
                            if (message.media.ttl_seconds != 0) {
                                object.ttl_seconds = message.media.ttl_seconds;
                                object.flags |= 4;
                            }
                            downloadMediaMask2 |= a3;
                            state4 = state44;
                            state4.requery();
                            downloadMediaMask3 = downloadMediaMask2;
                            data2 = new NativeByteBuffer(object.getObjectSize());
                            object.serializeToStream(data2);
                            state4.bindLong(1, messageId);
                            state4.bindInteger(2, a3);
                            state4.bindInteger(3, message.date);
                            state4.bindByteBuffer(4, data2);
                            state4.step();
                            data2.reuse();
                            downloadMediaMask2 = downloadMediaMask3;
                            a++;
                            state44 = state4;
                            state53 = state5;
                            state33 = state2;
                            messagesMap = messagesMap2;
                            state = state6;
                            messageIds = messageIds2;
                            mentionsIdsMap2 = mentionsIdsMap;
                            botKeyboards2 = botKeyboards;
                            mediaTypes4 = mediaTypes2;
                            messagesMediaIdsMap4 = messagesMediaIdsMap2;
                            sparseArray = mediaCounts;
                            messagesCounts3 = messagesCounts;
                            state23 = state24;
                        }
                    }
                    state4 = state44;
                    a++;
                    state44 = state4;
                    state53 = state5;
                    state33 = state2;
                    messagesMap = messagesMap2;
                    state = state6;
                    messageIds = messageIds2;
                    mentionsIdsMap2 = mentionsIdsMap;
                    botKeyboards2 = botKeyboards;
                    mediaTypes4 = mediaTypes2;
                    messagesMediaIdsMap4 = messagesMediaIdsMap2;
                    sparseArray = mediaCounts;
                    messagesCounts3 = messagesCounts;
                    state23 = state24;
                }
            }
            state4 = state44;
            a++;
            state44 = state4;
            state53 = state5;
            state33 = state2;
            messagesMap = messagesMap2;
            state = state6;
            messageIds = messageIds2;
            mentionsIdsMap2 = mentionsIdsMap;
            botKeyboards2 = botKeyboards;
            mediaTypes4 = mediaTypes2;
            messagesMediaIdsMap4 = messagesMediaIdsMap2;
            sparseArray = mediaCounts;
            messagesCounts3 = messagesCounts;
            state23 = state24;
        }
        mentionsIdsMap = mentionsIdsMap2;
        messagesCounts = messagesCounts3;
        mediaCounts = sparseArray;
        botKeyboards = botKeyboards2;
        mediaTypes2 = mediaTypes4;
        messagesMediaIdsMap2 = messagesMediaIdsMap4;
        state4 = state44;
        state5 = state53;
        state2 = state33;
        messagesMap2 = messagesMap;
        state.dispose();
        if (state23 != null) {
            state23.dispose();
        }
        state2.dispose();
        state4.dispose();
        state5.dispose();
        SQLitePreparedStatement state7 = messagesStorage.database.executeFast("REPLACE INTO dialogs VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
        int a5 = 0;
        while (a5 < messagesMap2.size()) {
            SQLitePreparedStatement state25;
            int a6;
            long key3 = messagesMap2.keyAt(a5);
            if (key3 == 0) {
                state25 = state23;
                downloadMediaMask = downloadMediaMask2;
                a6 = a5;
                state42 = state4;
                mentionCounts3 = mentionCounts2;
                state52 = state5;
                state3 = state2;
                messagesMap3 = messagesMap2;
                messagesCounts2 = messagesCounts;
            } else {
                int pts;
                int inbox_max;
                int pinned;
                int dialog_date;
                int pinned2;
                int outbox_max;
                long messageId3;
                int i;
                Message message2;
                long messageId4;
                Message message3 = (Message) messagesMap2.valueAt(a5);
                a2 = 0;
                if (message3 != null) {
                    a2 = message3.to_id.channel_id;
                }
                SQLiteDatabase sQLiteDatabase2 = messagesStorage.database;
                state25 = state23;
                state23 = new StringBuilder();
                state42 = state4;
                state23.append("SELECT date, unread_count, pts, last_mid, inbox_max, outbox_max, pinned, unread_count_i FROM dialogs WHERE did = ");
                state23.append(key3);
                state52 = state5;
                state23 = sQLiteDatabase2.queryFinalized(state23.toString(), new Object[0]);
                lastMid = 0;
                a4 = 0;
                int pts2 = a2 != 0 ? 1 : 0;
                int old_mentions_count = 0;
                int dialog_date2;
                if (state23.next()) {
                    dialog_date2 = 0;
                    int dialog_date3 = state23.intValue(0);
                    a4 = state23.intValue(1);
                    pts2 = state23.intValue(2);
                    lastMid = state23.intValue(3);
                    int inbox_max2 = state23.intValue(4);
                    int outbox_max2 = state23.intValue(5);
                    int pinned3 = state23.intValue(6);
                    old_mentions_count = state23.intValue(7);
                    downloadMediaMask = downloadMediaMask2;
                    state3 = state2;
                    messagesMap3 = messagesMap2;
                    pts = pts2;
                    inbox_max = inbox_max2;
                    downloadMediaMask2 = outbox_max2;
                    pinned = pinned3;
                    dialog_date = dialog_date3;
                } else {
                    dialog_date2 = 0;
                    if (a2 != 0) {
                        MessagesController.getInstance(messagesStorage.currentAccount).checkChannelInviter(a2);
                    }
                    downloadMediaMask = downloadMediaMask2;
                    state3 = state2;
                    messagesMap3 = messagesMap2;
                    pts = pts2;
                    inbox_max = 0;
                    downloadMediaMask2 = 0;
                    pinned = 0;
                    dialog_date = dialog_date2;
                }
                state23.dispose();
                Integer mentions_count = (Integer) mentionCounts2.get(key3);
                SQLitePreparedStatement cursor6 = state23;
                LongSparseArray<Integer> state26 = messagesCounts;
                a6 = a5;
                Integer unread_count = (Integer) state26.get(key3);
                if (unread_count == null) {
                    pinned2 = pinned;
                    unread_count = Integer.valueOf(0);
                } else {
                    pinned2 = pinned;
                    state26.put(key3, Integer.valueOf(unread_count.intValue() + a4));
                }
                Integer mentions_count2 = mentions_count;
                if (mentions_count2 == null) {
                    messagesCounts2 = state26;
                    mentions_count2 = Integer.valueOf(null);
                } else {
                    messagesCounts2 = state26;
                    mentionCounts2.put(key3, Integer.valueOf(mentions_count2.intValue() + old_mentions_count));
                }
                if (message3 != null) {
                    outbox_max = downloadMediaMask2;
                    state23 = (long) message3.id;
                } else {
                    outbox_max = downloadMediaMask2;
                    state23 = (long) lastMid;
                }
                if (message3 != null) {
                    messageId3 = state23;
                    if (message3.local_id != null) {
                        state23 = (long) message3.local_id;
                        if (a2 == 0) {
                            mentionCounts3 = mentionCounts2;
                            state23 |= ((long) a2) << 32;
                        } else {
                            mentionCounts3 = mentionCounts2;
                            i = lastMid;
                        }
                        state7.requery();
                        state7.bindLong(1, key3);
                        if (message3 == null) {
                            if (doNotUpdateDialogDate) {
                                if (dialog_date == 0) {
                                    message2 = message3;
                                    message3 = 2;
                                }
                            }
                            state7.bindInteger(2, message3.date);
                            state7.bindInteger(3, unread_count.intValue() + a4);
                            state7.bindLong(4, state23);
                            state7.bindInteger(5, inbox_max);
                            state7.bindInteger(6, outbox_max);
                            messageId4 = state23;
                            state7.bindLong(7, 0);
                            state7.bindInteger(8, old_mentions_count + mentions_count2.intValue());
                            state7.bindInteger(9, pts);
                            state7.bindInteger(10, null);
                            state7.bindInteger(11, pinned2);
                            state7.step();
                        } else {
                            message3 = 2;
                        }
                        state7.bindInteger(message3, dialog_date);
                        state7.bindInteger(3, unread_count.intValue() + a4);
                        state7.bindLong(4, state23);
                        state7.bindInteger(5, inbox_max);
                        state7.bindInteger(6, outbox_max);
                        messageId4 = state23;
                        state7.bindLong(7, 0);
                        state7.bindInteger(8, old_mentions_count + mentions_count2.intValue());
                        state7.bindInteger(9, pts);
                        state7.bindInteger(10, null);
                        state7.bindInteger(11, pinned2);
                        state7.step();
                    }
                } else {
                    messageId3 = state23;
                }
                state23 = messageId3;
                if (a2 == 0) {
                    mentionCounts3 = mentionCounts2;
                    i = lastMid;
                } else {
                    mentionCounts3 = mentionCounts2;
                    state23 |= ((long) a2) << 32;
                }
                state7.requery();
                state7.bindLong(1, key3);
                if (message3 == null) {
                    message3 = 2;
                } else {
                    if (doNotUpdateDialogDate) {
                        if (dialog_date == 0) {
                            message2 = message3;
                            message3 = 2;
                        }
                    }
                    state7.bindInteger(2, message3.date);
                    state7.bindInteger(3, unread_count.intValue() + a4);
                    state7.bindLong(4, state23);
                    state7.bindInteger(5, inbox_max);
                    state7.bindInteger(6, outbox_max);
                    messageId4 = state23;
                    state7.bindLong(7, 0);
                    state7.bindInteger(8, old_mentions_count + mentions_count2.intValue());
                    state7.bindInteger(9, pts);
                    state7.bindInteger(10, null);
                    state7.bindInteger(11, pinned2);
                    state7.step();
                }
                state7.bindInteger(message3, dialog_date);
                state7.bindInteger(3, unread_count.intValue() + a4);
                state7.bindLong(4, state23);
                state7.bindInteger(5, inbox_max);
                state7.bindInteger(6, outbox_max);
                messageId4 = state23;
                state7.bindLong(7, 0);
                state7.bindInteger(8, old_mentions_count + mentions_count2.intValue());
                state7.bindInteger(9, pts);
                state7.bindInteger(10, null);
                state7.bindInteger(11, pinned2);
                state7.step();
            }
            a5 = a6 + 1;
            state23 = state25;
            state4 = state42;
            state5 = state52;
            state2 = state3;
            messagesMap2 = messagesMap3;
            downloadMediaMask2 = downloadMediaMask;
            messagesCounts = messagesCounts2;
            mentionCounts2 = mentionCounts3;
            messagesStorage = this;
        }
        downloadMediaMask = downloadMediaMask2;
        state42 = state4;
        mentionCounts3 = mentionCounts2;
        state52 = state5;
        state3 = state2;
        messagesMap3 = messagesMap2;
        messagesCounts2 = messagesCounts;
        try {
            state7.dispose();
            if (mediaCounts != null) {
                state32 = this.database.executeFast("REPLACE INTO media_counts_v2 VALUES(?, ?, ?)");
                a3 = 0;
                while (true) {
                    sparseArray = mediaCounts;
                    if (a3 >= sparseArray.size()) {
                        break;
                    }
                    downloadMediaMask2 = sparseArray.keyAt(a3);
                    LongSparseArray<Integer> value2 = (LongSparseArray) sparseArray.valueAt(a3);
                    int b = 0;
                    while (b < value2.size()) {
                        long uid = value2.keyAt(b);
                        int count5 = -1;
                        SQLitePreparedStatement state8 = state7;
                        int lower_part = (int) uid;
                        state7 = messagesStorage.database.queryFinalized(String.format(Locale.US, "SELECT count FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1", new Object[]{Long.valueOf(uid), Integer.valueOf(downloadMediaMask2)}), new Object[0]);
                        if (state7.next()) {
                            count5 = state7.intValue(0);
                        }
                        state7.dispose();
                        if (count5 != -1) {
                            state32.requery();
                            count5 += ((Integer) value2.valueAt(b)).intValue();
                            state32.bindLong(1, uid);
                            state32.bindInteger(2, downloadMediaMask2);
                            state32.bindInteger(3, count5);
                            state32.step();
                        }
                        b++;
                        state7 = state8;
                    }
                    a3++;
                    mediaCounts = sparseArray;
                }
                state32.dispose();
                state3 = state32;
            } else {
                sparseArray = mediaCounts;
                messagesStorage = this;
            }
            if (withTransaction) {
                messagesStorage.database.commitTransaction();
            }
            MessagesController.getInstance(messagesStorage.currentAccount).processDialogsUpdateRead(messagesCounts2, mentionCounts3);
            if (downloadMediaMask != 0) {
                a3 = downloadMediaMask;
                AndroidUtilities.runOnUIThread(new Runnable() {
                    public void run() {
                        DownloadController.getInstance(MessagesStorage.this.currentAccount).newDownloadObjectsAvailable(a3);
                    }
                });
            }
        } catch (Exception e5) {
            e2 = e5;
            messagesStorage = this;
            e3 = e2;
            FileLog.m3e(e3);
        }
    }

    public void putMessages(ArrayList<Message> messages, boolean withTransaction, boolean useQueue, boolean doNotUpdateDialogDate, int downloadMask) {
        putMessages(messages, withTransaction, useQueue, doNotUpdateDialogDate, downloadMask, false);
    }

    public void putMessages(ArrayList<Message> messages, boolean withTransaction, boolean useQueue, boolean doNotUpdateDialogDate, int downloadMask, boolean ifNoLastMessage) {
        if (messages.size() != 0) {
            if (useQueue) {
                final ArrayList<Message> arrayList = messages;
                final boolean z = withTransaction;
                final boolean z2 = doNotUpdateDialogDate;
                final int i = downloadMask;
                final boolean z3 = ifNoLastMessage;
                this.storageQueue.postRunnable(new Runnable() {
                    public void run() {
                        MessagesStorage.this.putMessagesInternal(arrayList, z, z2, i, z3);
                    }
                });
            } else {
                putMessagesInternal(messages, withTransaction, doNotUpdateDialogDate, downloadMask, ifNoLastMessage);
            }
        }
    }

    public void markMessageAsSendError(final Message message) {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    long messageId = (long) message.id;
                    if (message.to_id.channel_id != 0) {
                        messageId |= ((long) message.to_id.channel_id) << 32;
                    }
                    SQLiteDatabase access$000 = MessagesStorage.this.database;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("UPDATE messages SET send_state = 2 WHERE mid = ");
                    stringBuilder.append(messageId);
                    access$000.executeFast(stringBuilder.toString()).stepThis().dispose();
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public void setMessageSeq(final int mid, final int seq_in, final int seq_out) {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    SQLitePreparedStatement state = MessagesStorage.this.database.executeFast("REPLACE INTO messages_seq VALUES(?, ?, ?)");
                    state.requery();
                    state.bindInteger(1, mid);
                    state.bindInteger(2, seq_in);
                    state.bindInteger(3, seq_out);
                    state.step();
                    state.dispose();
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    /* JADX WARNING: inconsistent code. */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private long[] updateMessageStateAndIdInternal(long random_id, Integer _oldId, int newId, int date, int channelId) {
        Integer valueOf;
        SQLiteCursor cursor;
        Throwable e;
        Throwable th;
        long newMessageId;
        SQLiteCursor cursor2;
        Throwable th2;
        SQLitePreparedStatement state;
        Throwable th3;
        MessagesStorage messagesStorage = this;
        int i = date;
        int i2 = channelId;
        SQLiteCursor sQLiteCursor = null;
        long newMessageId2 = (long) newId;
        if (_oldId == null) {
            try {
                sQLiteCursor = messagesStorage.database.queryFinalized(String.format(Locale.US, "SELECT mid FROM randoms WHERE random_id = %d LIMIT 1", new Object[]{Long.valueOf(random_id)}), new Object[0]);
                if (sQLiteCursor.next()) {
                    valueOf = Integer.valueOf(sQLiteCursor.intValue(0));
                } else {
                    valueOf = _oldId;
                }
                if (sQLiteCursor != null) {
                    sQLiteCursor.dispose();
                }
            } catch (Throwable e2) {
                cursor = null;
                FileLog.m3e(e2);
                if (cursor != null) {
                    cursor.dispose();
                }
                valueOf = _oldId;
                sQLiteCursor = cursor;
            } catch (Throwable th4) {
                e2 = th4;
                th = e2;
                if (cursor != null) {
                    cursor.dispose();
                }
                throw th;
            }
            if (valueOf == null) {
                return null;
            }
        }
        valueOf = _oldId;
        long oldMessageId = (long) valueOf.intValue();
        if (i2 != 0) {
            newMessageId = newMessageId2 | (((long) i2) << 32);
            oldMessageId |= ((long) i2) << 32;
        } else {
            newMessageId = newMessageId2;
        }
        long did = 0;
        try {
            sQLiteCursor = messagesStorage.database.queryFinalized(String.format(Locale.US, "SELECT uid FROM messages WHERE mid = %d LIMIT 1", new Object[]{Long.valueOf(oldMessageId)}), new Object[0]);
            if (sQLiteCursor.next()) {
                did = sQLiteCursor.longValue(0);
            }
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
        } catch (Throwable e22) {
            cursor2 = sQLiteCursor;
            FileLog.m3e(e22);
            if (cursor2 != null) {
                cursor2.dispose();
            }
        } catch (Throwable e222) {
            th2 = e222;
            sQLiteCursor = cursor2;
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th2;
        }
        if (did == 0) {
            return null;
        }
        SQLitePreparedStatement state2 = null;
        if (oldMessageId != newMessageId || i == 0) {
            state2 = null;
            try {
                state2 = messagesStorage.database.executeFast("UPDATE messages SET mid = ?, send_state = 0 WHERE mid = ?");
                state2.bindLong(1, newMessageId);
                state2.bindLong(2, oldMessageId);
                state2.step();
                if (state2 != null) {
                    state2.dispose();
                    state2 = null;
                }
            } catch (Exception e3) {
                state = state2;
                try {
                    messagesStorage.database.executeFast(String.format(Locale.US, "DELETE FROM messages WHERE mid = %d", new Object[]{Long.valueOf(oldMessageId)})).stepThis().dispose();
                    messagesStorage.database.executeFast(String.format(Locale.US, "DELETE FROM messages_seq WHERE mid = %d", new Object[]{Long.valueOf(oldMessageId)})).stepThis().dispose();
                } catch (Throwable e2222) {
                    FileLog.m3e(e2222);
                } catch (Throwable e22222) {
                    th2 = e22222;
                    if (state != null) {
                        state.dispose();
                    }
                    throw th2;
                }
                if (state != null) {
                    state.dispose();
                    state2 = null;
                } else {
                    state2 = state;
                }
            } catch (Throwable e222222) {
                th2 = e222222;
                state = state2;
                if (state != null) {
                    state.dispose();
                }
                throw th2;
            }
            try {
                state2 = messagesStorage.database.executeFast("UPDATE media_v2 SET mid = ? WHERE mid = ?");
                state2.bindLong(1, newMessageId);
                state2.bindLong(2, oldMessageId);
                state2.step();
                if (state2 != null) {
                    state2.dispose();
                    state2 = null;
                }
            } catch (Exception e4) {
                try {
                    messagesStorage.database.executeFast(String.format(Locale.US, "DELETE FROM media_v2 WHERE mid = %d", new Object[]{Long.valueOf(oldMessageId)})).stepThis().dispose();
                } catch (Throwable e2222222) {
                    FileLog.m3e(e2222222);
                } catch (Throwable e22222222) {
                    th2 = e22222222;
                    if (state2 != null) {
                        state2.dispose();
                    }
                }
            }
            try {
                state2 = messagesStorage.database.executeFast("UPDATE dialogs SET last_mid = ? WHERE last_mid = ?");
                state2.bindLong(1, newMessageId);
                state2.bindLong(2, oldMessageId);
                state2.step();
            } catch (Throwable e222222222) {
                FileLog.m3e(e222222222);
                if (state2 != null) {
                    state2.dispose();
                }
                return new long[]{did, (long) valueOf.intValue()};
            } catch (Throwable eNUM) {
                th2 = eNUM;
                if (state2 != null) {
                    state2.dispose();
                }
            }
        } else {
            try {
                state2 = messagesStorage.database.executeFast("UPDATE messages SET send_state = 0, date = ? WHERE mid = ?");
                state2.bindInteger(1, i);
                state2.bindLong(2, newMessageId);
                state2.step();
                if (state2 != null) {
                    state2.dispose();
                }
                state = state2;
            } catch (Throwable e2NUM) {
                state = state2;
                FileLog.m3e(e2NUM);
                if (state != null) {
                    state.dispose();
                }
            } catch (Throwable th5) {
                e2NUM = th5;
                th3 = e2NUM;
                if (state != null) {
                    state.dispose();
                }
                throw th3;
            }
            return new long[]{did, (long) r2};
        }
    }

    public long[] updateMessageStateAndId(long random_id, Integer _oldId, int newId, int date, boolean useQueue, int channelId) {
        if (!useQueue) {
            return updateMessageStateAndIdInternal(random_id, _oldId, newId, date, channelId);
        }
        final long j = random_id;
        final Integer num = _oldId;
        final int i = newId;
        final int i2 = date;
        final int i3 = channelId;
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                MessagesStorage.this.updateMessageStateAndIdInternal(j, num, i, i2, i3);
            }
        });
        return null;
    }

    private void updateUsersInternal(ArrayList<User> users, boolean onlyStatus, boolean withTransaction) {
        if (Thread.currentThread().getId() != this.storageQueue.getId()) {
            throw new RuntimeException("wrong db thread");
        }
        if (onlyStatus) {
            if (withTransaction) {
                try {
                    this.database.beginTransaction();
                } catch (Throwable e) {
                    FileLog.m3e(e);
                    return;
                }
            }
            SQLitePreparedStatement state = this.database.executeFast("UPDATE users SET status = ? WHERE uid = ?");
            Iterator it = users.iterator();
            while (it.hasNext()) {
                User user = (User) it.next();
                state.requery();
                if (user.status != null) {
                    state.bindInteger(1, user.status.expires);
                } else {
                    state.bindInteger(1, 0);
                }
                state.bindInteger(2, user.id);
                state.step();
            }
            state.dispose();
            if (withTransaction) {
                this.database.commitTransaction();
            }
        } else {
            StringBuilder ids = new StringBuilder();
            SparseArray<User> usersDict = new SparseArray();
            Iterator it2 = users.iterator();
            while (it2.hasNext()) {
                User user2 = (User) it2.next();
                if (ids.length() != 0) {
                    ids.append(",");
                }
                ids.append(user2.id);
                usersDict.put(user2.id, user2);
            }
            ArrayList<User> loadedUsers = new ArrayList();
            getUsersInternal(ids.toString(), loadedUsers);
            Iterator it3 = loadedUsers.iterator();
            while (it3.hasNext()) {
                User user3 = (User) it3.next();
                User updateUser = (User) usersDict.get(user3.id);
                if (updateUser != null) {
                    if (updateUser.first_name != null && updateUser.last_name != null) {
                        if (!UserObject.isContact(user3)) {
                            user3.first_name = updateUser.first_name;
                            user3.last_name = updateUser.last_name;
                        }
                        user3.username = updateUser.username;
                    } else if (updateUser.photo != null) {
                        user3.photo = updateUser.photo;
                    } else if (updateUser.phone != null) {
                        user3.phone = updateUser.phone;
                    }
                }
            }
            if (!loadedUsers.isEmpty()) {
                if (withTransaction) {
                    this.database.beginTransaction();
                }
                putUsersInternal(loadedUsers);
                if (withTransaction) {
                    this.database.commitTransaction();
                }
            }
        }
    }

    public void updateUsers(final ArrayList<User> users, final boolean onlyStatus, final boolean withTransaction, boolean useQueue) {
        if (!users.isEmpty()) {
            if (useQueue) {
                this.storageQueue.postRunnable(new Runnable() {
                    public void run() {
                        MessagesStorage.this.updateUsersInternal(users, onlyStatus, withTransaction);
                    }
                });
            } else {
                updateUsersInternal(users, onlyStatus, withTransaction);
            }
        }
    }

    private void markMessagesAsReadInternal(SparseLongArray inbox, SparseLongArray outbox, SparseIntArray encryptedMessages) {
        try {
            int b;
            long messageId;
            int a = 0;
            if (!isEmpty(inbox)) {
                for (b = 0; b < inbox.size(); b++) {
                    messageId = inbox.get(inbox.keyAt(b));
                    this.database.executeFast(String.format(Locale.US, "UPDATE messages SET read_state = read_state | 1 WHERE uid = %d AND mid > 0 AND mid <= %d AND read_state IN(0,2) AND out = 0", new Object[]{Integer.valueOf(key), Long.valueOf(messageId)})).stepThis().dispose();
                }
            }
            if (!isEmpty(outbox)) {
                for (b = 0; b < outbox.size(); b++) {
                    messageId = outbox.get(outbox.keyAt(b));
                    this.database.executeFast(String.format(Locale.US, "UPDATE messages SET read_state = read_state | 1 WHERE uid = %d AND mid > 0 AND mid <= %d AND read_state IN(0,2) AND out = 1", new Object[]{Integer.valueOf(key), Long.valueOf(messageId)})).stepThis().dispose();
                }
            }
            if (encryptedMessages != null && !isEmpty(encryptedMessages)) {
                while (true) {
                    b = a;
                    if (b >= encryptedMessages.size()) {
                        break;
                    }
                    long dialog_id = ((long) encryptedMessages.keyAt(b)) << 32;
                    a = encryptedMessages.valueAt(b);
                    SQLitePreparedStatement state = this.database.executeFast("UPDATE messages SET read_state = read_state | 1 WHERE uid = ? AND date <= ? AND read_state IN(0,2) AND out = 1");
                    state.requery();
                    state.bindLong(1, dialog_id);
                    state.bindInteger(2, a);
                    state.step();
                    state.dispose();
                    a = b + 1;
                }
            }
        } catch (Throwable e) {
            FileLog.m3e(e);
        }
    }

    public void markMessagesContentAsRead(final ArrayList<Long> mids, final int date) {
        if (!isEmpty((List) mids)) {
            this.storageQueue.postRunnable(new Runnable() {
                public void run() {
                    try {
                        String midsStr = TextUtils.join(",", mids);
                        MessagesStorage.this.database.executeFast(String.format(Locale.US, "UPDATE messages SET read_state = read_state | 2 WHERE mid IN (%s)", new Object[]{midsStr})).stepThis().dispose();
                        if (date != 0) {
                            SQLiteCursor cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT mid, ttl FROM messages WHERE mid IN (%s) AND ttl > 0", new Object[]{midsStr}), new Object[0]);
                            ArrayList<Integer> arrayList = null;
                            while (cursor.next()) {
                                if (arrayList == null) {
                                    arrayList = new ArrayList();
                                }
                                arrayList.add(Integer.valueOf(cursor.intValue(0)));
                            }
                            if (arrayList != null) {
                                MessagesStorage.this.emptyMessagesMedia(arrayList);
                            }
                            cursor.dispose();
                        }
                    } catch (Throwable e) {
                        FileLog.m3e(e);
                    }
                }
            });
        }
    }

    public void markMessagesAsRead(final SparseLongArray inbox, final SparseLongArray outbox, final SparseIntArray encryptedMessages, boolean useQueue) {
        if (useQueue) {
            this.storageQueue.postRunnable(new Runnable() {
                public void run() {
                    MessagesStorage.this.markMessagesAsReadInternal(inbox, outbox, encryptedMessages);
                }
            });
        } else {
            markMessagesAsReadInternal(inbox, outbox, encryptedMessages);
        }
    }

    public void markMessagesAsDeletedByRandoms(final ArrayList<Long> messages) {
        if (!messages.isEmpty()) {
            this.storageQueue.postRunnable(new Runnable() {
                public void run() {
                    try {
                        String ids = TextUtils.join(",", messages);
                        SQLiteCursor cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT mid FROM randoms WHERE random_id IN(%s)", new Object[]{ids}), new Object[0]);
                        final ArrayList<Integer> mids = new ArrayList();
                        while (cursor.next()) {
                            mids.add(Integer.valueOf(cursor.intValue(0)));
                        }
                        cursor.dispose();
                        if (!mids.isEmpty()) {
                            AndroidUtilities.runOnUIThread(new Runnable() {
                                public void run() {
                                    NotificationCenter.getInstance(MessagesStorage.this.currentAccount).postNotificationName(NotificationCenter.messagesDeleted, mids, Integer.valueOf(0));
                                }
                            });
                            MessagesStorage.this.updateDialogsWithReadMessagesInternal(mids, null, null, null);
                            MessagesStorage.this.markMessagesAsDeletedInternal((ArrayList) mids, 0);
                            MessagesStorage.this.updateDialogsWithDeletedMessagesInternal(mids, null, 0);
                        }
                    } catch (Throwable e) {
                        FileLog.m3e(e);
                    }
                }
            });
        }
    }

    private ArrayList<Long> markMessagesAsDeletedInternal(ArrayList<Integer> messages, int channelId) {
        MessagesStorage messagesStorage = this;
        ArrayList<Integer> arrayList = messages;
        int i = channelId;
        try {
            String ids;
            String ids2;
            Throwable e;
            long did;
            Integer[] counts;
            SQLiteDatabase sQLiteDatabase;
            StringBuilder stringBuilder;
            int old_unread_count;
            SQLitePreparedStatement state;
            LongSparseArray<Integer[]> dialogsToUpdate;
            ArrayList<Long> dialogsIds = new ArrayList();
            LongSparseArray<Integer[]> dialogsToUpdate2 = new LongSparseArray();
            int i2 = 0;
            if (i != 0) {
                StringBuilder builder = new StringBuilder(messages.size());
                for (int a = 0; a < messages.size(); a++) {
                    long messageId = ((long) ((Integer) arrayList.get(a)).intValue()) | (((long) i) << 32);
                    if (builder.length() > 0) {
                        builder.append(',');
                    }
                    builder.append(messageId);
                }
                ids = builder.toString();
            } else {
                ids = TextUtils.join(",", arrayList);
            }
            ArrayList<File> filesToDelete = new ArrayList();
            int currentUser = UserConfig.getInstance(messagesStorage.currentAccount).getClientUserId();
            int i3 = 1;
            SQLiteCursor cursor = messagesStorage.database.queryFinalized(String.format(Locale.US, "SELECT uid, data, read_state, out, mention FROM messages WHERE mid IN(%s)", new Object[]{ids}), new Object[0]);
            while (cursor.next()) {
                try {
                    long did2 = cursor.longValue(i2);
                    ids2 = ids;
                    if (did2 != ((long) currentUser)) {
                        try {
                            i2 = cursor.intValue(2);
                            if (cursor.intValue(3) == null) {
                                ids = (Integer[]) dialogsToUpdate2.get(did2);
                                if (ids == null) {
                                    ids = new Integer[]{Integer.valueOf(0), Integer.valueOf(0)};
                                    dialogsToUpdate2.put(did2, ids);
                                }
                                if (i2 < 2) {
                                    Object obj = ids[i3];
                                    ids[i3] = Integer.valueOf(ids[i3].intValue() + i3);
                                }
                                if (i2 == 0 || i2 == 2) {
                                    Object obj2 = ids[0];
                                    ids[0] = Integer.valueOf(ids[0].intValue() + i3);
                                }
                            }
                            if (((int) did2) == null) {
                                ids = cursor.byteBufferValue(i3);
                                if (ids != null) {
                                    Message message = Message.TLdeserialize(ids, ids.readInt32(false), false);
                                    message.readAttachPath(ids, UserConfig.getInstance(messagesStorage.currentAccount).clientUserId);
                                    ids.reuse();
                                    if (message != null) {
                                        File file;
                                        if (message.media instanceof TL_messageMediaPhoto) {
                                            Iterator it = message.media.photo.sizes.iterator();
                                            while (it.hasNext()) {
                                                int read_state;
                                                file = FileLoader.getPathToAttach((PhotoSize) it.next());
                                                if (file != null) {
                                                    read_state = i2;
                                                    if (file.toString().length() > 0) {
                                                        filesToDelete.add(file);
                                                    }
                                                } else {
                                                    read_state = i2;
                                                }
                                                i2 = read_state;
                                                i = channelId;
                                            }
                                        } else {
                                            if (message.media instanceof TL_messageMediaDocument) {
                                                file = FileLoader.getPathToAttach(message.media.document);
                                                if (file != null && file.toString().length() > 0) {
                                                    filesToDelete.add(file);
                                                }
                                                file = FileLoader.getPathToAttach(message.media.document.thumb);
                                                if (file != null && file.toString().length() > 0) {
                                                    filesToDelete.add(file);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } catch (Throwable e2) {
                            e = e2;
                        }
                    }
                    ids = ids2;
                    i = channelId;
                    i2 = 0;
                    i3 = 1;
                } catch (Throwable e22) {
                    ids2 = ids;
                    e = e22;
                }
            }
            ids2 = ids;
            cursor.dispose();
            FileLoader.getInstance(messagesStorage.currentAccount).deleteFiles(filesToDelete, 0);
            i = 0;
            while (i < dialogsToUpdate2.size()) {
                did = dialogsToUpdate2.keyAt(i);
                counts = (Integer[]) dialogsToUpdate2.valueAt(i);
                sQLiteDatabase = messagesStorage.database;
                stringBuilder = new StringBuilder();
                stringBuilder.append("SELECT unread_count, unread_count_i FROM dialogs WHERE did = ");
                stringBuilder.append(did);
                cursor = sQLiteDatabase.queryFinalized(stringBuilder.toString(), new Object[0]);
                old_unread_count = 0;
                i3 = 0;
                if (cursor.next()) {
                    old_unread_count = cursor.intValue(0);
                    i3 = cursor.intValue(1);
                }
                cursor.dispose();
                dialogsIds.add(Long.valueOf(did));
                state = messagesStorage.database.executeFast("UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?");
                state.requery();
                dialogsToUpdate = dialogsToUpdate2;
                state.bindInteger(1, Math.max(0, old_unread_count - counts[0].intValue()));
                state.bindInteger(2, Math.max(0, i3 - counts[1].intValue()));
                state.bindLong(3, did);
                state.step();
                state.dispose();
                i++;
                dialogsToUpdate2 = dialogsToUpdate;
            }
            messagesStorage.database.executeFast(String.format(Locale.US, "DELETE FROM messages WHERE mid IN(%s)", new Object[]{ids2})).stepThis().dispose();
            messagesStorage.database.executeFast(String.format(Locale.US, "DELETE FROM bot_keyboard WHERE mid IN(%s)", new Object[]{ids2})).stepThis().dispose();
            messagesStorage.database.executeFast(String.format(Locale.US, "DELETE FROM messages_seq WHERE mid IN(%s)", new Object[]{ids2})).stepThis().dispose();
            messagesStorage.database.executeFast(String.format(Locale.US, "DELETE FROM media_v2 WHERE mid IN(%s)", new Object[]{ids2})).stepThis().dispose();
            messagesStorage.database.executeFast("DELETE FROM media_counts_v2 WHERE 1").stepThis().dispose();
            DataQuery.getInstance(messagesStorage.currentAccount).clearBotKeyboard(0, arrayList);
            return dialogsIds;
            FileLog.m3e(e);
            cursor.dispose();
            FileLoader.getInstance(messagesStorage.currentAccount).deleteFiles(filesToDelete, 0);
            i = 0;
            while (i < dialogsToUpdate2.size()) {
                did = dialogsToUpdate2.keyAt(i);
                counts = (Integer[]) dialogsToUpdate2.valueAt(i);
                sQLiteDatabase = messagesStorage.database;
                stringBuilder = new StringBuilder();
                stringBuilder.append("SELECT unread_count, unread_count_i FROM dialogs WHERE did = ");
                stringBuilder.append(did);
                cursor = sQLiteDatabase.queryFinalized(stringBuilder.toString(), new Object[0]);
                old_unread_count = 0;
                i3 = 0;
                if (cursor.next()) {
                    old_unread_count = cursor.intValue(0);
                    i3 = cursor.intValue(1);
                }
                cursor.dispose();
                dialogsIds.add(Long.valueOf(did));
                state = messagesStorage.database.executeFast("UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?");
                state.requery();
                dialogsToUpdate = dialogsToUpdate2;
                state.bindInteger(1, Math.max(0, old_unread_count - counts[0].intValue()));
                state.bindInteger(2, Math.max(0, i3 - counts[1].intValue()));
                state.bindLong(3, did);
                state.step();
                state.dispose();
                i++;
                dialogsToUpdate2 = dialogsToUpdate;
            }
            messagesStorage.database.executeFast(String.format(Locale.US, "DELETE FROM messages WHERE mid IN(%s)", new Object[]{ids2})).stepThis().dispose();
            messagesStorage.database.executeFast(String.format(Locale.US, "DELETE FROM bot_keyboard WHERE mid IN(%s)", new Object[]{ids2})).stepThis().dispose();
            messagesStorage.database.executeFast(String.format(Locale.US, "DELETE FROM messages_seq WHERE mid IN(%s)", new Object[]{ids2})).stepThis().dispose();
            messagesStorage.database.executeFast(String.format(Locale.US, "DELETE FROM media_v2 WHERE mid IN(%s)", new Object[]{ids2})).stepThis().dispose();
            messagesStorage.database.executeFast("DELETE FROM media_counts_v2 WHERE 1").stepThis().dispose();
            DataQuery.getInstance(messagesStorage.currentAccount).clearBotKeyboard(0, arrayList);
            return dialogsIds;
        } catch (Throwable e222) {
            FileLog.m3e(e222);
            return null;
        }
    }

    private void updateDialogsWithDeletedMessagesInternal(ArrayList<Integer> messages, ArrayList<Long> additionalDialogsToUpdate, int channelId) {
        Throwable e;
        ArrayList<Long> arrayList = additionalDialogsToUpdate;
        int i = channelId;
        if (Thread.currentThread().getId() != this.storageQueue.getId()) {
            throw new RuntimeException("wrong db thread");
        }
        ArrayList<Integer> arrayList2;
        try {
            String ids;
            ArrayList<Long> dialogsToUpdate = new ArrayList();
            if (messages.isEmpty()) {
                arrayList2 = messages;
                dialogsToUpdate.add(Long.valueOf((long) (-i)));
            } else {
                SQLitePreparedStatement state;
                if (i != 0) {
                    dialogsToUpdate.add(Long.valueOf((long) (-i)));
                    arrayList2 = messages;
                    state = r1.database.executeFast("UPDATE dialogs SET last_mid = (SELECT mid FROM messages WHERE uid = ? AND date = (SELECT MAX(date) FROM messages WHERE uid = ?)) WHERE did = ?");
                } else {
                    try {
                        ids = TextUtils.join(",", messages);
                        SQLiteCursor cursor = r1.database.queryFinalized(String.format(Locale.US, "SELECT did FROM dialogs WHERE last_mid IN(%s)", new Object[]{ids}), new Object[0]);
                        while (cursor.next()) {
                            dialogsToUpdate.add(Long.valueOf(cursor.longValue(0)));
                        }
                        cursor.dispose();
                        state = r1.database.executeFast("UPDATE dialogs SET last_mid = (SELECT mid FROM messages WHERE uid = ? AND date = (SELECT MAX(date) FROM messages WHERE uid = ? AND date != 0)) WHERE did = ?");
                    } catch (Exception e2) {
                        e = e2;
                        FileLog.m3e(e);
                    }
                }
                SQLitePreparedStatement state2 = state;
                r1.database.beginTransaction();
                for (int a = 0; a < dialogsToUpdate.size(); a++) {
                    long did = ((Long) dialogsToUpdate.get(a)).longValue();
                    state2.requery();
                    state2.bindLong(1, did);
                    state2.bindLong(2, did);
                    state2.bindLong(3, did);
                    state2.step();
                }
                state2.dispose();
                r1.database.commitTransaction();
            }
            if (arrayList != null) {
                for (int a2 = 0; a2 < additionalDialogsToUpdate.size(); a2++) {
                    Long did2 = (Long) arrayList.get(a2);
                    if (!dialogsToUpdate.contains(did2)) {
                        dialogsToUpdate.add(did2);
                    }
                }
            }
            ids = TextUtils.join(",", dialogsToUpdate);
            messages_Dialogs dialogs = new TL_messages_dialogs();
            ArrayList<EncryptedChat> encryptedChats = new ArrayList();
            ArrayList<Integer> usersToLoad = new ArrayList();
            ArrayList<Integer> chatsToLoad = new ArrayList();
            ArrayList<Integer> encryptedToLoad = new ArrayList();
            SQLiteCursor cursor2 = r1.database.queryFinalized(String.format(Locale.US, "SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, m.date, d.pts, d.inbox_max, d.outbox_max, d.pinned, d.unread_count_i FROM dialogs as d LEFT JOIN messages as m ON d.last_mid = m.mid WHERE d.did IN(%s)", new Object[]{ids}), new Object[0]);
            while (cursor2.next()) {
                ArrayList<Long> dialogsToUpdate2;
                TL_dialog dialog = new TL_dialog();
                dialog.id = cursor2.longValue(0);
                dialog.top_message = cursor2.intValue(1);
                dialog.read_inbox_max_id = cursor2.intValue(10);
                dialog.read_outbox_max_id = cursor2.intValue(11);
                dialog.unread_count = cursor2.intValue(2);
                dialog.unread_mentions_count = cursor2.intValue(13);
                dialog.last_message_date = cursor2.intValue(3);
                dialog.pts = cursor2.intValue(9);
                dialog.flags = i == 0 ? 0 : 1;
                dialog.pinnedNum = cursor2.intValue(12);
                dialog.pinned = dialog.pinnedNum != 0;
                dialogs.dialogs.add(dialog);
                NativeByteBuffer data = cursor2.byteBufferValue(4);
                if (data != null) {
                    Message message = Message.TLdeserialize(data, data.readInt32(false), false);
                    message.readAttachPath(data, UserConfig.getInstance(r1.currentAccount).clientUserId);
                    data.reuse();
                    MessageObject.setUnreadFlags(message, cursor2.intValue(5));
                    message.id = cursor2.intValue(6);
                    message.send_state = cursor2.intValue(7);
                    int date = cursor2.intValue(8);
                    if (date != 0) {
                        dialog.last_message_date = date;
                    }
                    dialogsToUpdate2 = dialogsToUpdate;
                    message.dialog_id = dialog.id;
                    dialogs.messages.add(message);
                    addUsersAndChatsFromMessage(message, usersToLoad, chatsToLoad);
                } else {
                    dialogsToUpdate2 = dialogsToUpdate;
                }
                i = (int) dialog.id;
                dialogsToUpdate = (int) (dialog.id >> 32);
                if (i != 0) {
                    if (dialogsToUpdate == 1) {
                        if (!chatsToLoad.contains(Integer.valueOf(i))) {
                            chatsToLoad.add(Integer.valueOf(i));
                        }
                    } else if (i > 0) {
                        if (!usersToLoad.contains(Integer.valueOf(i))) {
                            usersToLoad.add(Integer.valueOf(i));
                        }
                    } else if (!chatsToLoad.contains(Integer.valueOf(-i))) {
                        chatsToLoad.add(Integer.valueOf(-i));
                    }
                } else if (!encryptedToLoad.contains(Integer.valueOf(dialogsToUpdate))) {
                    encryptedToLoad.add(Integer.valueOf(dialogsToUpdate));
                }
                dialogsToUpdate = dialogsToUpdate2;
                i = channelId;
            }
            cursor2.dispose();
            if (!encryptedToLoad.isEmpty()) {
                getEncryptedChatsInternal(TextUtils.join(",", encryptedToLoad), encryptedChats, usersToLoad);
            }
            if (!chatsToLoad.isEmpty()) {
                getChatsInternal(TextUtils.join(",", chatsToLoad), dialogs.chats);
            }
            if (!usersToLoad.isEmpty()) {
                getUsersInternal(TextUtils.join(",", usersToLoad), dialogs.users);
            }
            if (!(dialogs.dialogs.isEmpty() && encryptedChats.isEmpty())) {
                MessagesController.getInstance(r1.currentAccount).processDialogsUpdate(dialogs, encryptedChats);
            }
        } catch (Exception e3) {
            e = e3;
            arrayList2 = messages;
            FileLog.m3e(e);
        }
    }

    public void updateDialogsWithDeletedMessages(final ArrayList<Integer> messages, final ArrayList<Long> additionalDialogsToUpdate, boolean useQueue, final int channelId) {
        if (!messages.isEmpty() || channelId != 0) {
            if (useQueue) {
                this.storageQueue.postRunnable(new Runnable() {
                    public void run() {
                        MessagesStorage.this.updateDialogsWithDeletedMessagesInternal(messages, additionalDialogsToUpdate, channelId);
                    }
                });
            } else {
                updateDialogsWithDeletedMessagesInternal(messages, additionalDialogsToUpdate, channelId);
            }
        }
    }

    public ArrayList<Long> markMessagesAsDeleted(final ArrayList<Integer> messages, boolean useQueue, final int channelId) {
        if (messages.isEmpty()) {
            return null;
        }
        if (!useQueue) {
            return markMessagesAsDeletedInternal((ArrayList) messages, channelId);
        }
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                MessagesStorage.this.markMessagesAsDeletedInternal(messages, channelId);
            }
        });
        return null;
    }

    private ArrayList<Long> markMessagesAsDeletedInternal(int channelId, int mid) {
        MessagesStorage messagesStorage = this;
        int i = channelId;
        try {
            long maxMessageId;
            Throwable e;
            int i2;
            long did;
            Integer[] counts;
            SQLiteDatabase sQLiteDatabase;
            StringBuilder stringBuilder;
            int old_unread_count;
            int old_mentions_count;
            SQLitePreparedStatement state;
            ArrayList<Long> dialogsIds = new ArrayList();
            LongSparseArray<Integer[]> dialogsToUpdate = new LongSparseArray();
            long maxMessageId2 = ((long) mid) | (((long) i) << 32);
            ArrayList<File> filesToDelete = new ArrayList();
            int currentUser = UserConfig.getInstance(messagesStorage.currentAccount).getClientUserId();
            SQLiteCursor cursor = messagesStorage.database;
            Object[] objArr = new Object[2];
            objArr[0] = Integer.valueOf(-i);
            int i3 = 1;
            objArr[1] = Long.valueOf(maxMessageId2);
            cursor = cursor.queryFinalized(String.format(Locale.US, "SELECT uid, data, read_state, out, mention FROM messages WHERE uid = %d AND mid <= %d", objArr), new Object[0]);
            while (cursor.next()) {
                int i4;
                try {
                    long did2 = cursor.longValue(0);
                    maxMessageId = maxMessageId2;
                    if (did2 != ((long) currentUser)) {
                        try {
                            int read_state = cursor.intValue(2);
                            if (cursor.intValue(3) == 0) {
                                try {
                                    Integer[] unread_count = (Integer[]) dialogsToUpdate.get(did2);
                                    if (unread_count == null) {
                                        unread_count = new Integer[]{Integer.valueOf(0), Integer.valueOf(0)};
                                        dialogsToUpdate.put(did2, unread_count);
                                    }
                                    if (read_state < 2) {
                                        Integer num = unread_count[i3];
                                        unread_count[i3] = Integer.valueOf(unread_count[i3].intValue() + i3);
                                    }
                                    if (read_state == 0 || read_state == 2) {
                                        Integer num2 = unread_count[0];
                                        unread_count[0] = Integer.valueOf(unread_count[0].intValue() + i3);
                                    }
                                } catch (Throwable e2) {
                                    e = e2;
                                    i4 = currentUser;
                                }
                            }
                            if (((int) did2) == 0) {
                                NativeByteBuffer data = cursor.byteBufferValue(i3);
                                if (data != null) {
                                    Message message = Message.TLdeserialize(data, data.readInt32(false), false);
                                    message.readAttachPath(data, UserConfig.getInstance(messagesStorage.currentAccount).clientUserId);
                                    data.reuse();
                                    if (message != null) {
                                        File file;
                                        if (message.media instanceof TL_messageMediaPhoto) {
                                            Iterator it = message.media.photo.sizes.iterator();
                                            while (it.hasNext()) {
                                                file = FileLoader.getPathToAttach((PhotoSize) it.next());
                                                if (file != null) {
                                                    i4 = currentUser;
                                                    try {
                                                        if (file.toString().length() > 0) {
                                                            filesToDelete.add(file);
                                                        }
                                                    } catch (Throwable e22) {
                                                        e = e22;
                                                    }
                                                } else {
                                                    i4 = currentUser;
                                                }
                                                currentUser = i4;
                                                i2 = mid;
                                            }
                                        } else {
                                            i4 = currentUser;
                                            if (message.media instanceof TL_messageMediaDocument) {
                                                file = FileLoader.getPathToAttach(message.media.document);
                                                if (file != null && file.toString().length() > 0) {
                                                    filesToDelete.add(file);
                                                }
                                                file = FileLoader.getPathToAttach(message.media.document.thumb);
                                                if (file != null && file.toString().length() > 0) {
                                                    filesToDelete.add(file);
                                                }
                                            }
                                            maxMessageId2 = maxMessageId;
                                            currentUser = i4;
                                            i2 = mid;
                                            i3 = 1;
                                        }
                                    }
                                }
                                i4 = currentUser;
                                maxMessageId2 = maxMessageId;
                                currentUser = i4;
                                i2 = mid;
                                i3 = 1;
                            }
                        } catch (Throwable e222) {
                            i4 = currentUser;
                            e = e222;
                        }
                    }
                    i4 = currentUser;
                    maxMessageId2 = maxMessageId;
                    currentUser = i4;
                    i2 = mid;
                    i3 = 1;
                } catch (Throwable e2222) {
                    i4 = currentUser;
                    maxMessageId = maxMessageId2;
                    e = e2222;
                }
            }
            maxMessageId = maxMessageId2;
            cursor.dispose();
            FileLoader.getInstance(messagesStorage.currentAccount).deleteFiles(filesToDelete, 0);
            for (i2 = 0; i2 < dialogsToUpdate.size(); i2++) {
                did = dialogsToUpdate.keyAt(i2);
                counts = (Integer[]) dialogsToUpdate.valueAt(i2);
                sQLiteDatabase = messagesStorage.database;
                stringBuilder = new StringBuilder();
                stringBuilder.append("SELECT unread_count, unread_count_i FROM dialogs WHERE did = ");
                stringBuilder.append(did);
                cursor = sQLiteDatabase.queryFinalized(stringBuilder.toString(), new Object[0]);
                old_unread_count = 0;
                old_mentions_count = 0;
                if (cursor.next()) {
                    old_unread_count = cursor.intValue(0);
                    old_mentions_count = cursor.intValue(1);
                }
                cursor.dispose();
                dialogsIds.add(Long.valueOf(did));
                state = messagesStorage.database.executeFast("UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?");
                state.requery();
                state.bindInteger(1, Math.max(0, old_unread_count - counts[0].intValue()));
                state.bindInteger(2, Math.max(0, old_mentions_count - counts[1].intValue()));
                state.bindLong(3, did);
                state.step();
                state.dispose();
            }
            SQLiteDatabase sQLiteDatabase2 = messagesStorage.database;
            Object[] objArr2 = new Object[2];
            objArr2[0] = Integer.valueOf(-i);
            objArr2[1] = Long.valueOf(maxMessageId);
            sQLiteDatabase2.executeFast(String.format(Locale.US, "DELETE FROM messages WHERE uid = %d AND mid <= %d", objArr2)).stepThis().dispose();
            messagesStorage.database.executeFast(String.format(Locale.US, "DELETE FROM media_v2 WHERE uid = %d AND mid <= %d", new Object[]{Integer.valueOf(-i), Long.valueOf(maxMessageId)})).stepThis().dispose();
            messagesStorage.database.executeFast("DELETE FROM media_counts_v2 WHERE 1").stepThis().dispose();
            return dialogsIds;
            FileLog.m3e(e);
            cursor.dispose();
            FileLoader.getInstance(messagesStorage.currentAccount).deleteFiles(filesToDelete, 0);
            for (i2 = 0; i2 < dialogsToUpdate.size(); i2++) {
                did = dialogsToUpdate.keyAt(i2);
                counts = (Integer[]) dialogsToUpdate.valueAt(i2);
                sQLiteDatabase = messagesStorage.database;
                stringBuilder = new StringBuilder();
                stringBuilder.append("SELECT unread_count, unread_count_i FROM dialogs WHERE did = ");
                stringBuilder.append(did);
                cursor = sQLiteDatabase.queryFinalized(stringBuilder.toString(), new Object[0]);
                old_unread_count = 0;
                old_mentions_count = 0;
                if (cursor.next()) {
                    old_unread_count = cursor.intValue(0);
                    old_mentions_count = cursor.intValue(1);
                }
                cursor.dispose();
                dialogsIds.add(Long.valueOf(did));
                state = messagesStorage.database.executeFast("UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?");
                state.requery();
                state.bindInteger(1, Math.max(0, old_unread_count - counts[0].intValue()));
                state.bindInteger(2, Math.max(0, old_mentions_count - counts[1].intValue()));
                state.bindLong(3, did);
                state.step();
                state.dispose();
            }
            SQLiteDatabase sQLiteDatabase22 = messagesStorage.database;
            Object[] objArr22 = new Object[2];
            objArr22[0] = Integer.valueOf(-i);
            objArr22[1] = Long.valueOf(maxMessageId);
            sQLiteDatabase22.executeFast(String.format(Locale.US, "DELETE FROM messages WHERE uid = %d AND mid <= %d", objArr22)).stepThis().dispose();
            messagesStorage.database.executeFast(String.format(Locale.US, "DELETE FROM media_v2 WHERE uid = %d AND mid <= %d", new Object[]{Integer.valueOf(-i), Long.valueOf(maxMessageId)})).stepThis().dispose();
            messagesStorage.database.executeFast("DELETE FROM media_counts_v2 WHERE 1").stepThis().dispose();
            return dialogsIds;
        } catch (Throwable e22222) {
            FileLog.m3e(e22222);
            return null;
        }
    }

    public ArrayList<Long> markMessagesAsDeleted(final int channelId, final int mid, boolean useQueue) {
        if (!useQueue) {
            return markMessagesAsDeletedInternal(channelId, mid);
        }
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                MessagesStorage.this.markMessagesAsDeletedInternal(channelId, mid);
            }
        });
        return null;
    }

    private void fixUnsupportedMedia(Message message) {
        if (message != null) {
            if (message.media instanceof TL_messageMediaUnsupported_old) {
                if (message.media.bytes.length == 0) {
                    message.media.bytes = new byte[1];
                    message.media.bytes[0] = (byte) 76;
                }
            } else if (message.media instanceof TL_messageMediaUnsupported) {
                message.media = new TL_messageMediaUnsupported_old();
                message.media.bytes = new byte[1];
                message.media.bytes[0] = (byte) 76;
                message.flags |= 512;
            }
        }
    }

    private void doneHolesInTable(String table, long did, int max_id) throws Exception {
        SQLiteDatabase sQLiteDatabase;
        Locale locale;
        StringBuilder stringBuilder;
        if (max_id == 0) {
            sQLiteDatabase = this.database;
            locale = Locale.US;
            stringBuilder = new StringBuilder();
            stringBuilder.append("DELETE FROM ");
            stringBuilder.append(table);
            stringBuilder.append(" WHERE uid = %d");
            sQLiteDatabase.executeFast(String.format(locale, stringBuilder.toString(), new Object[]{Long.valueOf(did)})).stepThis().dispose();
        } else {
            sQLiteDatabase = this.database;
            locale = Locale.US;
            stringBuilder = new StringBuilder();
            stringBuilder.append("DELETE FROM ");
            stringBuilder.append(table);
            stringBuilder.append(" WHERE uid = %d AND start = 0");
            sQLiteDatabase.executeFast(String.format(locale, stringBuilder.toString(), new Object[]{Long.valueOf(did)})).stepThis().dispose();
        }
        SQLitePreparedStatement state = this.database;
        StringBuilder stringBuilder2 = new StringBuilder();
        stringBuilder2.append("REPLACE INTO ");
        stringBuilder2.append(table);
        stringBuilder2.append(" VALUES(?, ?, ?)");
        state = state.executeFast(stringBuilder2.toString());
        state.requery();
        state.bindLong(1, did);
        state.bindInteger(2, 1);
        state.bindInteger(3, 1);
        state.step();
        state.dispose();
    }

    public void doneHolesInMedia(long did, int max_id, int type) throws Exception {
        int a = 0;
        if (type == -1) {
            if (max_id == 0) {
                this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_v2 WHERE uid = %d", new Object[]{Long.valueOf(did)})).stepThis().dispose();
            } else {
                this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_v2 WHERE uid = %d AND start = 0", new Object[]{Long.valueOf(did)})).stepThis().dispose();
            }
            SQLitePreparedStatement state = this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
            while (a < 5) {
                state.requery();
                state.bindLong(1, did);
                state.bindInteger(2, a);
                state.bindInteger(3, 1);
                state.bindInteger(4, 1);
                state.step();
                a++;
            }
            state.dispose();
            return;
        }
        if (max_id == 0) {
            this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_v2 WHERE uid = %d AND type = %d", new Object[]{Long.valueOf(did), Integer.valueOf(type)})).stepThis().dispose();
        } else {
            this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_v2 WHERE uid = %d AND type = %d AND start = 0", new Object[]{Long.valueOf(did), Integer.valueOf(type)})).stepThis().dispose();
        }
        SQLitePreparedStatement state2 = this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
        state2.requery();
        state2.bindLong(1, did);
        state2.bindInteger(2, type);
        state2.bindInteger(3, 1);
        state2.bindInteger(4, 1);
        state2.step();
        state2.dispose();
    }

    public void closeHolesInMedia(long did, int minId, int maxId, int type) throws Exception {
        SQLiteCursor cursor;
        MessagesStorage messagesStorage = this;
        long j = did;
        int i = minId;
        int i2 = maxId;
        int i3 = 4;
        int i4 = 2;
        int i5 = 1;
        if (type < 0) {
            cursor = messagesStorage.database.queryFinalized(String.format(Locale.US, "SELECT type, start, end FROM media_holes_v2 WHERE uid = %d AND type >= 0 AND ((end >= %d AND end <= %d) OR (start >= %d AND start <= %d) OR (start >= %d AND end <= %d) OR (start <= %d AND end >= %d))", new Object[]{Long.valueOf(did), Integer.valueOf(minId), Integer.valueOf(maxId), Integer.valueOf(minId), Integer.valueOf(maxId), Integer.valueOf(minId), Integer.valueOf(maxId), Integer.valueOf(minId), Integer.valueOf(maxId)}), new Object[0]);
        } else {
            cursor = messagesStorage.database.queryFinalized(String.format(Locale.US, "SELECT type, start, end FROM media_holes_v2 WHERE uid = %d AND type = %d AND ((end >= %d AND end <= %d) OR (start >= %d AND start <= %d) OR (start >= %d AND end <= %d) OR (start <= %d AND end >= %d))", new Object[]{Long.valueOf(did), Integer.valueOf(type), Integer.valueOf(minId), Integer.valueOf(maxId), Integer.valueOf(minId), Integer.valueOf(maxId), Integer.valueOf(minId), Integer.valueOf(maxId), Integer.valueOf(minId), Integer.valueOf(maxId)}), new Object[0]);
        }
        ArrayList<Hole> holes = null;
        while (cursor.next()) {
            if (holes == null) {
                holes = new ArrayList();
            }
            int holeType = cursor.intValue(0);
            int start = cursor.intValue(1);
            int end = cursor.intValue(i4);
            if (start != end || start != 1) {
                holes.add(new Hole(holeType, start, end));
            }
            i4 = 2;
        }
        cursor.dispose();
        if (holes != null) {
            holeType = 0;
            while (holeType < holes.size()) {
                int i6;
                int i7;
                Hole hole = (Hole) holes.get(holeType);
                Object[] objArr;
                if (i2 >= hole.end - i5 && i <= hole.start + i5) {
                    SQLiteDatabase sQLiteDatabase = messagesStorage.database;
                    objArr = new Object[i3];
                    objArr[0] = Long.valueOf(did);
                    objArr[1] = Integer.valueOf(hole.type);
                    objArr[2] = Integer.valueOf(hole.start);
                    objArr[3] = Integer.valueOf(hole.end);
                    sQLiteDatabase.executeFast(String.format(Locale.US, "DELETE FROM media_holes_v2 WHERE uid = %d AND type = %d AND start = %d AND end = %d", objArr)).stepThis().dispose();
                } else if (i2 >= hole.end - 1) {
                    if (hole.end != i) {
                        try {
                            messagesStorage.database.executeFast(String.format(Locale.US, "UPDATE media_holes_v2 SET end = %d WHERE uid = %d AND type = %d AND start = %d AND end = %d", new Object[]{Integer.valueOf(minId), Long.valueOf(did), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end)})).stepThis().dispose();
                        } catch (Throwable e) {
                            FileLog.m3e(e);
                        }
                    }
                } else if (i > hole.start + 1) {
                    SQLiteDatabase sQLiteDatabase2 = messagesStorage.database;
                    objArr = new Object[4];
                    i6 = 0;
                    objArr[0] = Long.valueOf(did);
                    objArr[1] = Integer.valueOf(hole.type);
                    objArr[2] = Integer.valueOf(hole.start);
                    objArr[3] = Integer.valueOf(hole.end);
                    sQLiteDatabase2.executeFast(String.format(Locale.US, "DELETE FROM media_holes_v2 WHERE uid = %d AND type = %d AND start = %d AND end = %d", objArr)).stepThis().dispose();
                    SQLitePreparedStatement state = messagesStorage.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
                    state.requery();
                    state.bindLong(1, j);
                    state.bindInteger(2, hole.type);
                    state.bindInteger(3, hole.start);
                    state.bindInteger(4, i);
                    state.step();
                    state.requery();
                    state.bindLong(1, j);
                    state.bindInteger(2, hole.type);
                    state.bindInteger(3, i2);
                    i3 = 4;
                    state.bindInteger(4, hole.end);
                    state.step();
                    state.dispose();
                    holeType++;
                    i7 = i6;
                    i5 = 1;
                } else if (hole.start != i2) {
                    try {
                        messagesStorage.database.executeFast(String.format(Locale.US, "UPDATE media_holes_v2 SET start = %d WHERE uid = %d AND type = %d AND start = %d AND end = %d", new Object[]{Integer.valueOf(maxId), Long.valueOf(did), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end)})).stepThis().dispose();
                    } catch (Throwable e2) {
                        try {
                            FileLog.m3e(e2);
                        } catch (Throwable e22) {
                            FileLog.m3e(e22);
                            return;
                        }
                    }
                }
                i3 = 4;
                i6 = 0;
                holeType++;
                i7 = i6;
                i5 = 1;
            }
        }
    }

    private void closeHolesInTable(String table, long did, int minId, int maxId) throws Exception {
        String str = table;
        long j = did;
        int i = minId;
        int i2 = maxId;
        boolean ok = false;
        SQLiteCursor cursor = this.database;
        Locale locale = Locale.US;
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("SELECT start, end FROM ");
        stringBuilder.append(str);
        stringBuilder.append(" WHERE uid = %d AND ((end >= %d AND end <= %d) OR (start >= %d AND start <= %d) OR (start >= %d AND end <= %d) OR (start <= %d AND end >= %d))");
        String stringBuilder2 = stringBuilder.toString();
        r11 = new Object[9];
        int i3 = 1;
        r11[1] = Integer.valueOf(minId);
        r11[2] = Integer.valueOf(maxId);
        r11[3] = Integer.valueOf(minId);
        r11[4] = Integer.valueOf(maxId);
        r11[5] = Integer.valueOf(minId);
        r11[6] = Integer.valueOf(maxId);
        r11[7] = Integer.valueOf(minId);
        r11[8] = Integer.valueOf(maxId);
        cursor = cursor.queryFinalized(String.format(locale, stringBuilder2, r11), new Object[0]);
        ArrayList<Hole> holes = null;
        while (cursor.next()) {
            if (holes == null) {
                holes = new ArrayList();
            }
            int start = cursor.intValue(0);
            int end = cursor.intValue(1);
            if (start != end || start != 1) {
                holes.add(new Hole(start, end));
            }
        }
        cursor.dispose();
        if (holes != null) {
            start = 0;
            while (start < holes.size()) {
                boolean ok2;
                int i4;
                int i5;
                int i6;
                Hole hole = (Hole) holes.get(start);
                if (i2 < hole.end - i3 || i > hole.start + i3) {
                    ok2 = ok;
                    SQLiteDatabase sQLiteDatabase;
                    Locale locale2;
                    StringBuilder stringBuilder3;
                    if (i2 >= hole.end - 1) {
                        if (hole.end != i) {
                            try {
                                sQLiteDatabase = r1.database;
                                locale2 = Locale.US;
                                stringBuilder3 = new StringBuilder();
                                stringBuilder3.append("UPDATE ");
                                stringBuilder3.append(str);
                                stringBuilder3.append(" SET end = %d WHERE uid = %d AND start = %d AND end = %d");
                                sQLiteDatabase.executeFast(String.format(locale2, stringBuilder3.toString(), new Object[]{Integer.valueOf(minId), Long.valueOf(did), Integer.valueOf(hole.start), Integer.valueOf(hole.end)})).stepThis().dispose();
                            } catch (Throwable e) {
                                FileLog.m3e(e);
                            }
                        }
                    } else if (i > hole.start + 1) {
                        sQLiteDatabase = r1.database;
                        locale2 = Locale.US;
                        stringBuilder3 = new StringBuilder();
                        stringBuilder3.append("DELETE FROM ");
                        stringBuilder3.append(str);
                        stringBuilder3.append(" WHERE uid = %d AND start = %d AND end = %d");
                        String stringBuilder4 = stringBuilder3.toString();
                        r15 = new Object[3];
                        i4 = 0;
                        r15[0] = Long.valueOf(did);
                        r15[1] = Integer.valueOf(hole.start);
                        r15[2] = Integer.valueOf(hole.end);
                        sQLiteDatabase.executeFast(String.format(locale2, stringBuilder4, r15)).stepThis().dispose();
                        SQLitePreparedStatement state = r1.database;
                        StringBuilder stringBuilder5 = new StringBuilder();
                        stringBuilder5.append("REPLACE INTO ");
                        stringBuilder5.append(str);
                        stringBuilder5.append(" VALUES(?, ?, ?)");
                        state = state.executeFast(stringBuilder5.toString());
                        state.requery();
                        state.bindLong(1, j);
                        state.bindInteger(2, hole.start);
                        state.bindInteger(3, i);
                        state.step();
                        state.requery();
                        i5 = 1;
                        state.bindLong(1, j);
                        state.bindInteger(2, i2);
                        state.bindInteger(3, hole.end);
                        state.step();
                        state.dispose();
                        start++;
                        i3 = i5;
                        i6 = i4;
                        ok = ok2;
                    } else if (hole.start != i2) {
                        try {
                            sQLiteDatabase = r1.database;
                            locale2 = Locale.US;
                            stringBuilder3 = new StringBuilder();
                            stringBuilder3.append("UPDATE ");
                            stringBuilder3.append(str);
                            stringBuilder3.append(" SET start = %d WHERE uid = %d AND start = %d AND end = %d");
                            sQLiteDatabase.executeFast(String.format(locale2, stringBuilder3.toString(), new Object[]{Integer.valueOf(maxId), Long.valueOf(did), Integer.valueOf(hole.start), Integer.valueOf(hole.end)})).stepThis().dispose();
                        } catch (Throwable e2) {
                            try {
                                FileLog.m3e(e2);
                            } catch (Throwable e22) {
                                FileLog.m3e(e22);
                                return;
                            }
                        }
                    }
                }
                SQLiteDatabase sQLiteDatabase2 = r1.database;
                Locale locale3 = Locale.US;
                StringBuilder stringBuilder6 = new StringBuilder();
                stringBuilder6.append("DELETE FROM ");
                stringBuilder6.append(str);
                stringBuilder6.append(" WHERE uid = %d AND start = %d AND end = %d");
                ok2 = ok;
                sQLiteDatabase2.executeFast(String.format(locale3, stringBuilder6.toString(), new Object[]{Long.valueOf(did), Integer.valueOf(hole.start), Integer.valueOf(hole.end)})).stepThis().dispose();
                i5 = 1;
                i4 = 0;
                start++;
                i3 = i5;
                i6 = i4;
                ok = ok2;
            }
        }
    }

    public void putMessages(messages_Messages messages, long dialog_id, int load_type, int max_id, boolean createDialog) {
        final messages_Messages messages_messages = messages;
        final int i = load_type;
        final long j = dialog_id;
        final int i2 = max_id;
        final boolean z = createDialog;
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    if (messages_messages.messages.isEmpty()) {
                        if (i == 0) {
                            MessagesStorage.this.doneHolesInTable("messages_holes", j, i2);
                            MessagesStorage.this.doneHolesInMedia(j, i2, -1);
                        }
                        return;
                    }
                    int minId;
                    int maxId;
                    int minChannelMessageId;
                    int i;
                    int mentionCountUpdate;
                    int i2;
                    MessagesStorage.this.database.beginTransaction();
                    if (i == 0) {
                        minId = ((Message) messages_messages.messages.get(messages_messages.messages.size() - 1)).id;
                        MessagesStorage.this.closeHolesInTable("messages_holes", j, minId, i2);
                        MessagesStorage.this.closeHolesInMedia(j, minId, i2, -1);
                    } else if (i == 1) {
                        maxId = ((Message) messages_messages.messages.get(0)).id;
                        MessagesStorage.this.closeHolesInTable("messages_holes", j, i2, maxId);
                        MessagesStorage.this.closeHolesInMedia(j, i2, maxId, -1);
                    } else if (i == 3 || i == 2 || i == 4) {
                        maxId = (i2 != 0 || i == 4) ? ((Message) messages_messages.messages.get(0)).id : ConnectionsManager.DEFAULT_DATACENTER_ID;
                        minId = ((Message) messages_messages.messages.get(messages_messages.messages.size() - 1)).id;
                        MessagesStorage.this.closeHolesInTable("messages_holes", j, minId, maxId);
                        MessagesStorage.this.closeHolesInMedia(j, minId, maxId, -1);
                    }
                    int count = messages_messages.messages.size();
                    SQLitePreparedStatement state = MessagesStorage.this.database.executeFast("REPLACE INTO messages VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, NULL, ?, ?)");
                    SQLitePreparedStatement state2 = MessagesStorage.this.database.executeFast("REPLACE INTO media_v2 VALUES(?, ?, ?, ?, ?)");
                    SQLitePreparedStatement state5 = null;
                    Message botKeyboard = null;
                    minId = ConnectionsManager.DEFAULT_DATACENTER_ID;
                    maxId = 0;
                    int mentionCountUpdate2 = ConnectionsManager.DEFAULT_DATACENTER_ID;
                    int a = 0;
                    int channelId = 0;
                    while (a < count) {
                        int count2;
                        int channelId2;
                        NativeByteBuffer data;
                        int readState;
                        Message message;
                        int i3;
                        int i4;
                        Message message2 = (Message) messages_messages.messages.get(a);
                        SQLitePreparedStatement state3 = state;
                        long messageId = (long) message2.id;
                        if (channelId == 0) {
                            channelId = message2.to_id.channel_id;
                        }
                        if (message2.to_id.channel_id != 0) {
                            messageId |= ((long) channelId) << 32;
                        }
                        if (i == -2) {
                            SQLiteDatabase access$000 = MessagesStorage.this.database;
                            count2 = count;
                            channelId2 = channelId;
                            Object[] objArr = new Object[1];
                            minChannelMessageId = minId;
                            objArr[0] = Long.valueOf(messageId);
                            count = access$000.queryFinalized(String.format(Locale.US, "SELECT mid, data, ttl, mention, read_state FROM messages WHERE mid = %d", objArr), new Object[0]);
                            boolean next = count.next();
                            boolean exist = next;
                            if (next) {
                                data = count.byteBufferValue(1);
                                if (data != null) {
                                    Message oldMessage = Message.TLdeserialize(data, data.readInt32(false), false);
                                    oldMessage.readAttachPath(data, UserConfig.getInstance(MessagesStorage.this.currentAccount).clientUserId);
                                    data.reuse();
                                    if (oldMessage != null) {
                                        message2.attachPath = oldMessage.attachPath;
                                        message2.ttl = count.intValue(2);
                                    }
                                }
                                boolean oldMention = count.intValue(3) != 0;
                                readState = count.intValue(4);
                                if (oldMention != message2.mentioned) {
                                    minId = mentionCountUpdate2;
                                    if (minId == ConnectionsManager.DEFAULT_DATACENTER_ID) {
                                        SQLiteCursor cursor2 = MessagesStorage.this.database;
                                        i = maxId;
                                        StringBuilder stringBuilder = new StringBuilder();
                                        mentionCountUpdate = minId;
                                        stringBuilder.append("SELECT unread_count_i FROM dialogs WHERE did = ");
                                        message = botKeyboard;
                                        stringBuilder.append(j);
                                        cursor2 = cursor2.queryFinalized(stringBuilder.toString(), new Object[0]);
                                        if (cursor2.next() != null) {
                                            mentionCountUpdate2 = cursor2.intValue(null);
                                        } else {
                                            mentionCountUpdate2 = mentionCountUpdate;
                                        }
                                        cursor2.dispose();
                                        mentionCountUpdate = mentionCountUpdate2;
                                    } else {
                                        message = botKeyboard;
                                        mentionCountUpdate = minId;
                                        i = maxId;
                                    }
                                    if (oldMention) {
                                        if (readState <= 1) {
                                            mentionCountUpdate--;
                                        }
                                    } else if (message2.media_unread != 0) {
                                        mentionCountUpdate++;
                                    }
                                    mentionCountUpdate2 = mentionCountUpdate;
                                    count.dispose();
                                    if (exist) {
                                        count = state3;
                                        botKeyboard = message;
                                        i3 = 3;
                                        readState = 4;
                                        a++;
                                        state = count;
                                        i2 = i3;
                                        i4 = readState;
                                        count = count2;
                                        channelId = channelId2;
                                        minId = minChannelMessageId;
                                        maxId = i;
                                    } else {
                                        mentionCountUpdate = mentionCountUpdate2;
                                    }
                                }
                            }
                            message = botKeyboard;
                            i = maxId;
                            mentionCountUpdate = mentionCountUpdate2;
                            mentionCountUpdate2 = mentionCountUpdate;
                            count.dispose();
                            if (exist) {
                                mentionCountUpdate = mentionCountUpdate2;
                            } else {
                                count = state3;
                                botKeyboard = message;
                                i3 = 3;
                                readState = 4;
                                a++;
                                state = count;
                                i2 = i3;
                                i4 = readState;
                                count = count2;
                                channelId = channelId2;
                                minId = minChannelMessageId;
                                maxId = i;
                            }
                        } else {
                            count2 = count;
                            channelId2 = channelId;
                            message = botKeyboard;
                            minChannelMessageId = minId;
                            i = maxId;
                            mentionCountUpdate = mentionCountUpdate2;
                        }
                        if (a == 0 && z) {
                            maxId = 0;
                            int mentions = 0;
                            count = MessagesStorage.this.database;
                            StringBuilder stringBuilder2 = new StringBuilder();
                            stringBuilder2.append("SELECT pinned, unread_count_i FROM dialogs WHERE did = ");
                            stringBuilder2.append(j);
                            count = count.queryFinalized(stringBuilder2.toString(), new Object[0]);
                            if (count.next()) {
                                maxId = count.intValue(0);
                                mentions = count.intValue(1);
                            }
                            channelId = mentions;
                            count.dispose();
                            SQLitePreparedStatement state32 = MessagesStorage.this.database.executeFast("REPLACE INTO dialogs VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                            int pinned = maxId;
                            state32.bindLong(1, j);
                            state32.bindInteger(2, message2.date);
                            state32.bindInteger(3, 0);
                            state32.bindLong(4, messageId);
                            state32.bindInteger(5, message2.id);
                            state32.bindInteger(6, 0);
                            state32.bindLong(7, messageId);
                            state32.bindInteger(8, channelId);
                            state32.bindInteger(9, messages_messages.pts);
                            state32.bindInteger(10, message2.date);
                            state32.bindInteger(11, pinned);
                            state32.step();
                            state32.dispose();
                        }
                        MessagesStorage.this.fixUnsupportedMedia(message2);
                        count = state3;
                        count.requery();
                        data = new NativeByteBuffer(message2.getObjectSize());
                        message2.serializeToStream(data);
                        count.bindLong(1, messageId);
                        count.bindLong(2, j);
                        count.bindInteger(3, MessageObject.getUnreadFlags(message2));
                        count.bindInteger(4, message2.send_state);
                        count.bindInteger(5, message2.date);
                        count.bindByteBuffer(6, data);
                        count.bindInteger(7, MessageObject.isOut(message2));
                        count.bindInteger(8, message2.ttl);
                        if ((message2.flags & 1024) != 0) {
                            count.bindInteger(9, message2.views);
                        } else {
                            count.bindInteger(9, MessagesStorage.this.getMessageMediaType(message2));
                        }
                        count.bindInteger(10, 0);
                        count.bindInteger(11, message2.mentioned);
                        count.step();
                        if (DataQuery.canAddMessageToMedia(message2)) {
                            state2.requery();
                            state2.bindLong(1, messageId);
                            state2.bindLong(2, j);
                            i3 = 3;
                            state2.bindInteger(3, message2.date);
                            readState = 4;
                            state2.bindInteger(4, DataQuery.getMediaType(message2));
                            state2.bindByteBuffer(5, data);
                            state2.step();
                        } else {
                            i3 = 3;
                            readState = 4;
                        }
                        data.reuse();
                        if (message2.media instanceof TL_messageMediaWebPage) {
                            if (state5 == null) {
                                state5 = MessagesStorage.this.database.executeFast("REPLACE INTO webpage_pending VALUES(?, ?)");
                            }
                            state5.requery();
                            state5.bindLong(1, message2.media.webpage.id);
                            state5.bindLong(2, messageId);
                            state5.step();
                        }
                        if (i == 0 && MessagesStorage.this.isValidKeyboardToSave(message2)) {
                            if (message != null) {
                                botKeyboard = message;
                                if (botKeyboard.id < message2.id) {
                                }
                            }
                            botKeyboard = message2;
                        } else {
                            botKeyboard = message;
                        }
                        mentionCountUpdate2 = mentionCountUpdate;
                        a++;
                        state = count;
                        i2 = i3;
                        i4 = readState;
                        count = count2;
                        channelId = channelId2;
                        minId = minChannelMessageId;
                        maxId = i;
                    }
                    minChannelMessageId = minId;
                    i = maxId;
                    mentionCountUpdate = mentionCountUpdate2;
                    state.dispose();
                    state2.dispose();
                    if (state5 != null) {
                        state5.dispose();
                    }
                    if (botKeyboard != null) {
                        DataQuery.getInstance(MessagesStorage.this.currentAccount).putBotKeyboard(j, botKeyboard);
                    }
                    MessagesStorage.this.putUsersInternal(messages_messages.users);
                    MessagesStorage.this.putChatsInternal(messages_messages.chats);
                    i2 = mentionCountUpdate;
                    if (i2 != ConnectionsManager.DEFAULT_DATACENTER_ID) {
                        MessagesStorage.this.database.executeFast(String.format(Locale.US, "UPDATE dialogs SET unread_count_i = %d WHERE did = %d", new Object[]{Integer.valueOf(i2), Long.valueOf(j)})).stepThis().dispose();
                        LongSparseArray<Integer> sparseArray = new LongSparseArray(1);
                        sparseArray.put(j, Integer.valueOf(i2));
                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processDialogsUpdateRead(null, sparseArray);
                    }
                    MessagesStorage.this.database.commitTransaction();
                    if (z) {
                        MessagesStorage.this.updateDialogsWithDeletedMessages(new ArrayList(), null, false, channelId);
                    }
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public static void addUsersAndChatsFromMessage(Message message, ArrayList<Integer> usersToLoad, ArrayList<Integer> chatsToLoad) {
        int a;
        if (message.from_id != 0) {
            if (message.from_id > 0) {
                if (!usersToLoad.contains(Integer.valueOf(message.from_id))) {
                    usersToLoad.add(Integer.valueOf(message.from_id));
                }
            } else if (!chatsToLoad.contains(Integer.valueOf(-message.from_id))) {
                chatsToLoad.add(Integer.valueOf(-message.from_id));
            }
        }
        if (!(message.via_bot_id == 0 || usersToLoad.contains(Integer.valueOf(message.via_bot_id)))) {
            usersToLoad.add(Integer.valueOf(message.via_bot_id));
        }
        int a2 = 0;
        if (message.action != null) {
            if (!(message.action.user_id == 0 || usersToLoad.contains(Integer.valueOf(message.action.user_id)))) {
                usersToLoad.add(Integer.valueOf(message.action.user_id));
            }
            if (!(message.action.channel_id == 0 || chatsToLoad.contains(Integer.valueOf(message.action.channel_id)))) {
                chatsToLoad.add(Integer.valueOf(message.action.channel_id));
            }
            if (!(message.action.chat_id == 0 || chatsToLoad.contains(Integer.valueOf(message.action.chat_id)))) {
                chatsToLoad.add(Integer.valueOf(message.action.chat_id));
            }
            if (!message.action.users.isEmpty()) {
                for (a = 0; a < message.action.users.size(); a++) {
                    Integer uid = (Integer) message.action.users.get(a);
                    if (!usersToLoad.contains(uid)) {
                        usersToLoad.add(uid);
                    }
                }
            }
        }
        if (!message.entities.isEmpty()) {
            while (true) {
                a = a2;
                if (a >= message.entities.size()) {
                    break;
                }
                MessageEntity entity = (MessageEntity) message.entities.get(a);
                if (entity instanceof TL_messageEntityMentionName) {
                    usersToLoad.add(Integer.valueOf(((TL_messageEntityMentionName) entity).user_id));
                } else if (entity instanceof TL_inputMessageEntityMentionName) {
                    usersToLoad.add(Integer.valueOf(((TL_inputMessageEntityMentionName) entity).user_id.user_id));
                }
                a2 = a + 1;
            }
        }
        if (!(message.media == null || message.media.user_id == 0 || usersToLoad.contains(Integer.valueOf(message.media.user_id)))) {
            usersToLoad.add(Integer.valueOf(message.media.user_id));
        }
        if (message.fwd_from != null) {
            if (!(message.fwd_from.from_id == 0 || usersToLoad.contains(Integer.valueOf(message.fwd_from.from_id)))) {
                usersToLoad.add(Integer.valueOf(message.fwd_from.from_id));
            }
            if (!(message.fwd_from.channel_id == 0 || chatsToLoad.contains(Integer.valueOf(message.fwd_from.channel_id)))) {
                chatsToLoad.add(Integer.valueOf(message.fwd_from.channel_id));
            }
            if (message.fwd_from.saved_from_peer != null) {
                if (message.fwd_from.saved_from_peer.user_id != 0) {
                    if (!chatsToLoad.contains(Integer.valueOf(message.fwd_from.saved_from_peer.user_id))) {
                        usersToLoad.add(Integer.valueOf(message.fwd_from.saved_from_peer.user_id));
                    }
                } else if (message.fwd_from.saved_from_peer.channel_id != 0) {
                    if (!chatsToLoad.contains(Integer.valueOf(message.fwd_from.saved_from_peer.channel_id))) {
                        chatsToLoad.add(Integer.valueOf(message.fwd_from.saved_from_peer.channel_id));
                    }
                } else if (!(message.fwd_from.saved_from_peer.chat_id == 0 || chatsToLoad.contains(Integer.valueOf(message.fwd_from.saved_from_peer.chat_id)))) {
                    chatsToLoad.add(Integer.valueOf(message.fwd_from.saved_from_peer.chat_id));
                }
            }
        }
        if (message.ttl < 0 && !chatsToLoad.contains(Integer.valueOf(-message.ttl))) {
            chatsToLoad.add(Integer.valueOf(-message.ttl));
        }
    }

    public void getDialogs(final int offset, final int count) {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                Throwable e;
                messages_Dialogs dialogs;
                NativeByteBuffer data;
                messages_Dialogs messages_dialogs;
                LongSparseArray<Message> longSparseArray;
                Throwable e2;
                int lower_id;
                int high_id;
                Throwable e3;
                messages_Dialogs dialogs2;
                AnonymousClass90 anonymousClass90 = this;
                messages_Dialogs dialogs3 = new TL_messages_dialogs();
                ArrayList<EncryptedChat> encryptedChats = new ArrayList();
                try {
                    Message message;
                    ArrayList<Integer> usersToLoad = new ArrayList();
                    usersToLoad.add(Integer.valueOf(UserConfig.getInstance(MessagesStorage.this.currentAccount).getClientUserId()));
                    ArrayList<Integer> chatsToLoad = new ArrayList();
                    ArrayList<Integer> encryptedToLoad = new ArrayList();
                    ArrayList<Long> replyMessages = new ArrayList();
                    LongSparseArray<Message> replyMessageOwners = new LongSparseArray();
                    SQLiteCursor cursor = MessagesStorage.this.database;
                    r7 = new Object[2];
                    boolean z = false;
                    r7[0] = Integer.valueOf(offset);
                    boolean z2 = true;
                    r7[1] = Integer.valueOf(count);
                    cursor = cursor.queryFinalized(String.format(Locale.US, "SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, s.flags, m.date, d.pts, d.inbox_max, d.outbox_max, m.replydata, d.pinned, d.unread_count_i FROM dialogs as d LEFT JOIN messages as m ON d.last_mid = m.mid LEFT JOIN dialog_settings as s ON d.did = s.did ORDER BY d.pinned DESC, d.date DESC LIMIT %d,%d", r7), new Object[0]);
                    while (cursor.next()) {
                        int i;
                        long flags;
                        int low_flags;
                        LongSparseArray<Message> replyMessageOwners2;
                        NativeByteBuffer data2;
                        Message message2;
                        int date;
                        long j;
                        int i2;
                        TL_dialog dialog = new TL_dialog();
                        dialog.id = cursor.longValue(z);
                        dialog.top_message = cursor.intValue(z2);
                        dialog.unread_count = cursor.intValue(2);
                        dialog.last_message_date = cursor.intValue(3);
                        dialog.pts = cursor.intValue(10);
                        if (dialog.pts != 0) {
                            if (((int) dialog.id) <= 0) {
                                i = z2;
                                dialog.flags = i;
                                dialog.read_inbox_max_id = cursor.intValue(11);
                                dialog.read_outbox_max_id = cursor.intValue(12);
                                dialog.pinnedNum = cursor.intValue(14);
                                dialog.pinned = dialog.pinnedNum == 0 ? z2 : z;
                                dialog.unread_mentions_count = cursor.intValue(15);
                                flags = cursor.longValue(8);
                                low_flags = (int) flags;
                                dialog.notify_settings = new TL_peerNotifySettings();
                                if ((low_flags & 1) == 0) {
                                    replyMessageOwners2 = replyMessageOwners;
                                    dialog.notify_settings.mute_until = (int) (flags >> 32);
                                    if (dialog.notify_settings.mute_until == 0) {
                                        dialog.notify_settings.mute_until = ConnectionsManager.DEFAULT_DATACENTER_ID;
                                    }
                                } else {
                                    replyMessageOwners2 = replyMessageOwners;
                                }
                                dialogs3.dialogs.add(dialog);
                                data2 = cursor.byteBufferValue(4);
                                if (data2 != null) {
                                    message2 = Message.TLdeserialize(data2, data2.readInt32(false), false);
                                    message2.readAttachPath(data2, UserConfig.getInstance(MessagesStorage.this.currentAccount).clientUserId);
                                    data2.reuse();
                                    if (message2 != null) {
                                        MessageObject.setUnreadFlags(message2, cursor.intValue(5));
                                        message2.id = cursor.intValue(6);
                                        date = cursor.intValue(9);
                                        if (date != 0) {
                                            try {
                                                dialog.last_message_date = date;
                                            } catch (Exception e4) {
                                                e = e4;
                                                dialogs = dialogs3;
                                            }
                                        }
                                        data = data2;
                                        message2.send_state = cursor.intValue(7);
                                        message2.dialog_id = dialog.id;
                                        dialogs3.messages.add(message2);
                                        MessagesStorage.addUsersAndChatsFromMessage(message2, usersToLoad, chatsToLoad);
                                        try {
                                            if (message2.reply_to_msg_id == 0) {
                                                if (!(message2.action instanceof TL_messageActionPinMessage)) {
                                                    try {
                                                        if (!(message2.action instanceof TL_messageActionPaymentSent)) {
                                                            if (message2.action instanceof TL_messageActionGameScore) {
                                                                messages_dialogs = dialogs3;
                                                                j = flags;
                                                                longSparseArray = replyMessageOwners2;
                                                            }
                                                        }
                                                    } catch (Throwable e5) {
                                                        e2 = e5;
                                                        messages_dialogs = dialogs3;
                                                        j = flags;
                                                        longSparseArray = replyMessageOwners2;
                                                        data2 = data;
                                                        try {
                                                            FileLog.m3e(e2);
                                                            lower_id = (int) dialog.id;
                                                            high_id = (int) (dialog.id >> 32);
                                                            if (lower_id != 0) {
                                                                if (high_id == 1) {
                                                                    if (chatsToLoad.contains(Integer.valueOf(lower_id))) {
                                                                        chatsToLoad.add(Integer.valueOf(lower_id));
                                                                    }
                                                                } else if (lower_id > 0) {
                                                                    if (usersToLoad.contains(Integer.valueOf(lower_id))) {
                                                                        usersToLoad.add(Integer.valueOf(lower_id));
                                                                    }
                                                                } else if (chatsToLoad.contains(Integer.valueOf(-lower_id))) {
                                                                    chatsToLoad.add(Integer.valueOf(-lower_id));
                                                                }
                                                            } else if (encryptedToLoad.contains(Integer.valueOf(high_id))) {
                                                                encryptedToLoad.add(Integer.valueOf(high_id));
                                                            }
                                                            replyMessageOwners = longSparseArray;
                                                            dialogs3 = messages_dialogs;
                                                            anonymousClass90 = this;
                                                            z2 = true;
                                                            z = false;
                                                        } catch (Throwable e52) {
                                                            e3 = e52;
                                                            dialogs = messages_dialogs;
                                                            anonymousClass90 = this;
                                                        }
                                                    }
                                                }
                                                if (cursor.isNull(13)) {
                                                    try {
                                                        data2 = cursor.byteBufferValue(13);
                                                        if (data2 == null) {
                                                            try {
                                                                message2.replyMessage = Message.TLdeserialize(data2, data2.readInt32(false), false);
                                                                message2.replyMessage.readAttachPath(data2, UserConfig.getInstance(MessagesStorage.this.currentAccount).clientUserId);
                                                                data2.reuse();
                                                                if (message2.replyMessage != null) {
                                                                    if (MessageObject.isMegagroup(message2)) {
                                                                        message = message2.replyMessage;
                                                                        message.flags |= Integer.MIN_VALUE;
                                                                    }
                                                                    MessagesStorage.addUsersAndChatsFromMessage(message2.replyMessage, usersToLoad, chatsToLoad);
                                                                }
                                                            } catch (Throwable e522) {
                                                                e2 = e522;
                                                                messages_dialogs = dialogs3;
                                                                longSparseArray = replyMessageOwners2;
                                                                FileLog.m3e(e2);
                                                                lower_id = (int) dialog.id;
                                                                high_id = (int) (dialog.id >> 32);
                                                                if (lower_id != 0) {
                                                                    if (high_id == 1) {
                                                                        if (chatsToLoad.contains(Integer.valueOf(lower_id))) {
                                                                            chatsToLoad.add(Integer.valueOf(lower_id));
                                                                        }
                                                                    } else if (lower_id > 0) {
                                                                        if (usersToLoad.contains(Integer.valueOf(lower_id))) {
                                                                            usersToLoad.add(Integer.valueOf(lower_id));
                                                                        }
                                                                    } else if (chatsToLoad.contains(Integer.valueOf(-lower_id))) {
                                                                        chatsToLoad.add(Integer.valueOf(-lower_id));
                                                                    }
                                                                } else if (encryptedToLoad.contains(Integer.valueOf(high_id))) {
                                                                    encryptedToLoad.add(Integer.valueOf(high_id));
                                                                }
                                                                replyMessageOwners = longSparseArray;
                                                                dialogs3 = messages_dialogs;
                                                                anonymousClass90 = this;
                                                                z2 = true;
                                                                z = false;
                                                            }
                                                        }
                                                    } catch (Throwable e5222) {
                                                        j = flags;
                                                        e2 = e5222;
                                                        messages_dialogs = dialogs3;
                                                        longSparseArray = replyMessageOwners2;
                                                        data2 = data;
                                                        FileLog.m3e(e2);
                                                        lower_id = (int) dialog.id;
                                                        high_id = (int) (dialog.id >> 32);
                                                        if (lower_id != 0) {
                                                            if (encryptedToLoad.contains(Integer.valueOf(high_id))) {
                                                                encryptedToLoad.add(Integer.valueOf(high_id));
                                                            }
                                                        } else if (high_id == 1) {
                                                            if (lower_id > 0) {
                                                                if (chatsToLoad.contains(Integer.valueOf(-lower_id))) {
                                                                    chatsToLoad.add(Integer.valueOf(-lower_id));
                                                                }
                                                            } else if (usersToLoad.contains(Integer.valueOf(lower_id))) {
                                                                usersToLoad.add(Integer.valueOf(lower_id));
                                                            }
                                                        } else if (chatsToLoad.contains(Integer.valueOf(lower_id))) {
                                                            chatsToLoad.add(Integer.valueOf(lower_id));
                                                        }
                                                        replyMessageOwners = longSparseArray;
                                                        dialogs3 = messages_dialogs;
                                                        anonymousClass90 = this;
                                                        z2 = true;
                                                        z = false;
                                                    }
                                                } else {
                                                    data2 = data;
                                                }
                                                try {
                                                    if (message2.replyMessage != null) {
                                                        low_flags = (long) message2.reply_to_msg_id;
                                                        if (message2.to_id.channel_id == 0) {
                                                            try {
                                                                messages_dialogs = dialogs3;
                                                                low_flags |= ((long) message2.to_id.channel_id) << 32;
                                                            } catch (Throwable e52222) {
                                                                messages_dialogs = dialogs3;
                                                                e2 = e52222;
                                                                longSparseArray = replyMessageOwners2;
                                                                FileLog.m3e(e2);
                                                                lower_id = (int) dialog.id;
                                                                high_id = (int) (dialog.id >> 32);
                                                                if (lower_id != 0) {
                                                                    if (high_id == 1) {
                                                                        if (chatsToLoad.contains(Integer.valueOf(lower_id))) {
                                                                            chatsToLoad.add(Integer.valueOf(lower_id));
                                                                        }
                                                                    } else if (lower_id > 0) {
                                                                        if (usersToLoad.contains(Integer.valueOf(lower_id))) {
                                                                            usersToLoad.add(Integer.valueOf(lower_id));
                                                                        }
                                                                    } else if (chatsToLoad.contains(Integer.valueOf(-lower_id))) {
                                                                        chatsToLoad.add(Integer.valueOf(-lower_id));
                                                                    }
                                                                } else if (encryptedToLoad.contains(Integer.valueOf(high_id))) {
                                                                    encryptedToLoad.add(Integer.valueOf(high_id));
                                                                }
                                                                replyMessageOwners = longSparseArray;
                                                                dialogs3 = messages_dialogs;
                                                                anonymousClass90 = this;
                                                                z2 = true;
                                                                z = false;
                                                            }
                                                        } else {
                                                            messages_dialogs = dialogs3;
                                                        }
                                                        if (!replyMessages.contains(Long.valueOf(low_flags))) {
                                                            try {
                                                                replyMessages.add(Long.valueOf(low_flags));
                                                            } catch (Throwable e522222) {
                                                                e2 = e522222;
                                                                longSparseArray = replyMessageOwners2;
                                                                FileLog.m3e(e2);
                                                                lower_id = (int) dialog.id;
                                                                high_id = (int) (dialog.id >> 32);
                                                                if (lower_id != 0) {
                                                                    if (encryptedToLoad.contains(Integer.valueOf(high_id))) {
                                                                        encryptedToLoad.add(Integer.valueOf(high_id));
                                                                    }
                                                                } else if (high_id == 1) {
                                                                    if (lower_id > 0) {
                                                                        if (chatsToLoad.contains(Integer.valueOf(-lower_id))) {
                                                                            chatsToLoad.add(Integer.valueOf(-lower_id));
                                                                        }
                                                                    } else if (usersToLoad.contains(Integer.valueOf(lower_id))) {
                                                                        usersToLoad.add(Integer.valueOf(lower_id));
                                                                    }
                                                                } else if (chatsToLoad.contains(Integer.valueOf(lower_id))) {
                                                                    chatsToLoad.add(Integer.valueOf(lower_id));
                                                                }
                                                                replyMessageOwners = longSparseArray;
                                                                dialogs3 = messages_dialogs;
                                                                anonymousClass90 = this;
                                                                z2 = true;
                                                                z = false;
                                                            }
                                                        }
                                                        try {
                                                            longSparseArray = replyMessageOwners2;
                                                            try {
                                                                longSparseArray.put(dialog.id, message2);
                                                            } catch (Throwable e5222222) {
                                                                e2 = e5222222;
                                                                FileLog.m3e(e2);
                                                                lower_id = (int) dialog.id;
                                                                high_id = (int) (dialog.id >> 32);
                                                                if (lower_id != 0) {
                                                                    if (high_id == 1) {
                                                                        if (chatsToLoad.contains(Integer.valueOf(lower_id))) {
                                                                            chatsToLoad.add(Integer.valueOf(lower_id));
                                                                        }
                                                                    } else if (lower_id > 0) {
                                                                        if (usersToLoad.contains(Integer.valueOf(lower_id))) {
                                                                            usersToLoad.add(Integer.valueOf(lower_id));
                                                                        }
                                                                    } else if (chatsToLoad.contains(Integer.valueOf(-lower_id))) {
                                                                        chatsToLoad.add(Integer.valueOf(-lower_id));
                                                                    }
                                                                } else if (encryptedToLoad.contains(Integer.valueOf(high_id))) {
                                                                    encryptedToLoad.add(Integer.valueOf(high_id));
                                                                }
                                                                replyMessageOwners = longSparseArray;
                                                                dialogs3 = messages_dialogs;
                                                                anonymousClass90 = this;
                                                                z2 = true;
                                                                z = false;
                                                            }
                                                        } catch (Throwable e52222222) {
                                                            longSparseArray = replyMessageOwners2;
                                                            e2 = e52222222;
                                                            FileLog.m3e(e2);
                                                            lower_id = (int) dialog.id;
                                                            high_id = (int) (dialog.id >> 32);
                                                            if (lower_id != 0) {
                                                                if (encryptedToLoad.contains(Integer.valueOf(high_id))) {
                                                                    encryptedToLoad.add(Integer.valueOf(high_id));
                                                                }
                                                            } else if (high_id == 1) {
                                                                if (lower_id > 0) {
                                                                    if (chatsToLoad.contains(Integer.valueOf(-lower_id))) {
                                                                        chatsToLoad.add(Integer.valueOf(-lower_id));
                                                                    }
                                                                } else if (usersToLoad.contains(Integer.valueOf(lower_id))) {
                                                                    usersToLoad.add(Integer.valueOf(lower_id));
                                                                }
                                                            } else if (chatsToLoad.contains(Integer.valueOf(lower_id))) {
                                                                chatsToLoad.add(Integer.valueOf(lower_id));
                                                            }
                                                            replyMessageOwners = longSparseArray;
                                                            dialogs3 = messages_dialogs;
                                                            anonymousClass90 = this;
                                                            z2 = true;
                                                            z = false;
                                                        }
                                                    } else {
                                                        messages_dialogs = dialogs3;
                                                        longSparseArray = replyMessageOwners2;
                                                    }
                                                } catch (Throwable e522222222) {
                                                    messages_dialogs = dialogs3;
                                                    longSparseArray = replyMessageOwners2;
                                                    e2 = e522222222;
                                                    FileLog.m3e(e2);
                                                    lower_id = (int) dialog.id;
                                                    high_id = (int) (dialog.id >> 32);
                                                    if (lower_id != 0) {
                                                        if (high_id == 1) {
                                                            if (chatsToLoad.contains(Integer.valueOf(lower_id))) {
                                                                chatsToLoad.add(Integer.valueOf(lower_id));
                                                            }
                                                        } else if (lower_id > 0) {
                                                            if (usersToLoad.contains(Integer.valueOf(lower_id))) {
                                                                usersToLoad.add(Integer.valueOf(lower_id));
                                                            }
                                                        } else if (chatsToLoad.contains(Integer.valueOf(-lower_id))) {
                                                            chatsToLoad.add(Integer.valueOf(-lower_id));
                                                        }
                                                    } else if (encryptedToLoad.contains(Integer.valueOf(high_id))) {
                                                        encryptedToLoad.add(Integer.valueOf(high_id));
                                                    }
                                                    replyMessageOwners = longSparseArray;
                                                    dialogs3 = messages_dialogs;
                                                    anonymousClass90 = this;
                                                    z2 = true;
                                                    z = false;
                                                }
                                                lower_id = (int) dialog.id;
                                                high_id = (int) (dialog.id >> 32);
                                                if (lower_id != 0) {
                                                    if (high_id == 1) {
                                                        if (chatsToLoad.contains(Integer.valueOf(lower_id))) {
                                                            chatsToLoad.add(Integer.valueOf(lower_id));
                                                        }
                                                    } else if (lower_id > 0) {
                                                        if (usersToLoad.contains(Integer.valueOf(lower_id))) {
                                                            usersToLoad.add(Integer.valueOf(lower_id));
                                                        }
                                                    } else if (chatsToLoad.contains(Integer.valueOf(-lower_id))) {
                                                        chatsToLoad.add(Integer.valueOf(-lower_id));
                                                    }
                                                } else if (encryptedToLoad.contains(Integer.valueOf(high_id))) {
                                                    encryptedToLoad.add(Integer.valueOf(high_id));
                                                }
                                                replyMessageOwners = longSparseArray;
                                                dialogs3 = messages_dialogs;
                                                anonymousClass90 = this;
                                                z2 = true;
                                                z = false;
                                            } else {
                                                messages_dialogs = dialogs3;
                                                j = flags;
                                                longSparseArray = replyMessageOwners2;
                                            }
                                            data2 = data;
                                        } catch (Throwable eNUM) {
                                            messages_dialogs = dialogs3;
                                            j = flags;
                                            longSparseArray = replyMessageOwners2;
                                            e2 = eNUM;
                                            data2 = data;
                                            FileLog.m3e(e2);
                                            lower_id = (int) dialog.id;
                                            high_id = (int) (dialog.id >> 32);
                                            if (lower_id != 0) {
                                                if (encryptedToLoad.contains(Integer.valueOf(high_id))) {
                                                    encryptedToLoad.add(Integer.valueOf(high_id));
                                                }
                                            } else if (high_id == 1) {
                                                if (lower_id > 0) {
                                                    if (chatsToLoad.contains(Integer.valueOf(-lower_id))) {
                                                        chatsToLoad.add(Integer.valueOf(-lower_id));
                                                    }
                                                } else if (usersToLoad.contains(Integer.valueOf(lower_id))) {
                                                    usersToLoad.add(Integer.valueOf(lower_id));
                                                }
                                            } else if (chatsToLoad.contains(Integer.valueOf(lower_id))) {
                                                chatsToLoad.add(Integer.valueOf(lower_id));
                                            }
                                            replyMessageOwners = longSparseArray;
                                            dialogs3 = messages_dialogs;
                                            anonymousClass90 = this;
                                            z2 = true;
                                            z = false;
                                        }
                                        lower_id = (int) dialog.id;
                                        high_id = (int) (dialog.id >> 32);
                                        if (lower_id != 0) {
                                            if (encryptedToLoad.contains(Integer.valueOf(high_id))) {
                                                encryptedToLoad.add(Integer.valueOf(high_id));
                                            }
                                        } else if (high_id == 1) {
                                            if (lower_id > 0) {
                                                if (chatsToLoad.contains(Integer.valueOf(-lower_id))) {
                                                    chatsToLoad.add(Integer.valueOf(-lower_id));
                                                }
                                            } else if (usersToLoad.contains(Integer.valueOf(lower_id))) {
                                                usersToLoad.add(Integer.valueOf(lower_id));
                                            }
                                        } else if (chatsToLoad.contains(Integer.valueOf(lower_id))) {
                                            chatsToLoad.add(Integer.valueOf(lower_id));
                                        }
                                        replyMessageOwners = longSparseArray;
                                        dialogs3 = messages_dialogs;
                                        anonymousClass90 = this;
                                        z2 = true;
                                        z = false;
                                    }
                                }
                                messages_dialogs = dialogs3;
                                i2 = low_flags;
                                j = flags;
                                longSparseArray = replyMessageOwners2;
                                lower_id = (int) dialog.id;
                                high_id = (int) (dialog.id >> 32);
                                if (lower_id != 0) {
                                    if (high_id == 1) {
                                        if (chatsToLoad.contains(Integer.valueOf(lower_id))) {
                                            chatsToLoad.add(Integer.valueOf(lower_id));
                                        }
                                    } else if (lower_id > 0) {
                                        if (usersToLoad.contains(Integer.valueOf(lower_id))) {
                                            usersToLoad.add(Integer.valueOf(lower_id));
                                        }
                                    } else if (chatsToLoad.contains(Integer.valueOf(-lower_id))) {
                                        chatsToLoad.add(Integer.valueOf(-lower_id));
                                    }
                                } else if (encryptedToLoad.contains(Integer.valueOf(high_id))) {
                                    encryptedToLoad.add(Integer.valueOf(high_id));
                                }
                                replyMessageOwners = longSparseArray;
                                dialogs3 = messages_dialogs;
                                anonymousClass90 = this;
                                z2 = true;
                                z = false;
                            }
                        }
                        i = z;
                        dialog.flags = i;
                        dialog.read_inbox_max_id = cursor.intValue(11);
                        dialog.read_outbox_max_id = cursor.intValue(12);
                        dialog.pinnedNum = cursor.intValue(14);
                        if (dialog.pinnedNum == 0) {
                        }
                        dialog.pinned = dialog.pinnedNum == 0 ? z2 : z;
                        dialog.unread_mentions_count = cursor.intValue(15);
                        flags = cursor.longValue(8);
                        low_flags = (int) flags;
                        dialog.notify_settings = new TL_peerNotifySettings();
                        if ((low_flags & 1) == 0) {
                            replyMessageOwners2 = replyMessageOwners;
                        } else {
                            replyMessageOwners2 = replyMessageOwners;
                            dialog.notify_settings.mute_until = (int) (flags >> 32);
                            if (dialog.notify_settings.mute_until == 0) {
                                dialog.notify_settings.mute_until = ConnectionsManager.DEFAULT_DATACENTER_ID;
                            }
                        }
                        try {
                            dialogs3.dialogs.add(dialog);
                            data2 = cursor.byteBufferValue(4);
                            if (data2 != null) {
                                message2 = Message.TLdeserialize(data2, data2.readInt32(false), false);
                                message2.readAttachPath(data2, UserConfig.getInstance(MessagesStorage.this.currentAccount).clientUserId);
                                data2.reuse();
                                if (message2 != null) {
                                    MessageObject.setUnreadFlags(message2, cursor.intValue(5));
                                    message2.id = cursor.intValue(6);
                                    date = cursor.intValue(9);
                                    if (date != 0) {
                                        dialog.last_message_date = date;
                                    }
                                    data = data2;
                                    message2.send_state = cursor.intValue(7);
                                    message2.dialog_id = dialog.id;
                                    dialogs3.messages.add(message2);
                                    MessagesStorage.addUsersAndChatsFromMessage(message2, usersToLoad, chatsToLoad);
                                    if (message2.reply_to_msg_id == 0) {
                                        messages_dialogs = dialogs3;
                                        j = flags;
                                        longSparseArray = replyMessageOwners2;
                                    } else {
                                        if (message2.action instanceof TL_messageActionPinMessage) {
                                            if (message2.action instanceof TL_messageActionPaymentSent) {
                                                if (message2.action instanceof TL_messageActionGameScore) {
                                                    messages_dialogs = dialogs3;
                                                    j = flags;
                                                    longSparseArray = replyMessageOwners2;
                                                }
                                            }
                                        }
                                        if (cursor.isNull(13)) {
                                            data2 = data;
                                        } else {
                                            data2 = cursor.byteBufferValue(13);
                                            if (data2 == null) {
                                            } else {
                                                message2.replyMessage = Message.TLdeserialize(data2, data2.readInt32(false), false);
                                                message2.replyMessage.readAttachPath(data2, UserConfig.getInstance(MessagesStorage.this.currentAccount).clientUserId);
                                                data2.reuse();
                                                if (message2.replyMessage != null) {
                                                    if (MessageObject.isMegagroup(message2)) {
                                                        message = message2.replyMessage;
                                                        message.flags |= Integer.MIN_VALUE;
                                                    }
                                                    MessagesStorage.addUsersAndChatsFromMessage(message2.replyMessage, usersToLoad, chatsToLoad);
                                                }
                                            }
                                        }
                                        if (message2.replyMessage != null) {
                                            messages_dialogs = dialogs3;
                                            longSparseArray = replyMessageOwners2;
                                        } else {
                                            low_flags = (long) message2.reply_to_msg_id;
                                            if (message2.to_id.channel_id == 0) {
                                                messages_dialogs = dialogs3;
                                            } else {
                                                messages_dialogs = dialogs3;
                                                low_flags |= ((long) message2.to_id.channel_id) << 32;
                                            }
                                            if (replyMessages.contains(Long.valueOf(low_flags))) {
                                                replyMessages.add(Long.valueOf(low_flags));
                                            }
                                            longSparseArray = replyMessageOwners2;
                                            longSparseArray.put(dialog.id, message2);
                                        }
                                        lower_id = (int) dialog.id;
                                        high_id = (int) (dialog.id >> 32);
                                        if (lower_id != 0) {
                                            if (encryptedToLoad.contains(Integer.valueOf(high_id))) {
                                                encryptedToLoad.add(Integer.valueOf(high_id));
                                            }
                                        } else if (high_id == 1) {
                                            if (lower_id > 0) {
                                                if (chatsToLoad.contains(Integer.valueOf(-lower_id))) {
                                                    chatsToLoad.add(Integer.valueOf(-lower_id));
                                                }
                                            } else if (usersToLoad.contains(Integer.valueOf(lower_id))) {
                                                usersToLoad.add(Integer.valueOf(lower_id));
                                            }
                                        } else if (chatsToLoad.contains(Integer.valueOf(lower_id))) {
                                            chatsToLoad.add(Integer.valueOf(lower_id));
                                        }
                                        replyMessageOwners = longSparseArray;
                                        dialogs3 = messages_dialogs;
                                        anonymousClass90 = this;
                                        z2 = true;
                                        z = false;
                                    }
                                    data2 = data;
                                    lower_id = (int) dialog.id;
                                    high_id = (int) (dialog.id >> 32);
                                    if (lower_id != 0) {
                                        if (high_id == 1) {
                                            if (chatsToLoad.contains(Integer.valueOf(lower_id))) {
                                                chatsToLoad.add(Integer.valueOf(lower_id));
                                            }
                                        } else if (lower_id > 0) {
                                            if (usersToLoad.contains(Integer.valueOf(lower_id))) {
                                                usersToLoad.add(Integer.valueOf(lower_id));
                                            }
                                        } else if (chatsToLoad.contains(Integer.valueOf(-lower_id))) {
                                            chatsToLoad.add(Integer.valueOf(-lower_id));
                                        }
                                    } else if (encryptedToLoad.contains(Integer.valueOf(high_id))) {
                                        encryptedToLoad.add(Integer.valueOf(high_id));
                                    }
                                    replyMessageOwners = longSparseArray;
                                    dialogs3 = messages_dialogs;
                                    anonymousClass90 = this;
                                    z2 = true;
                                    z = false;
                                }
                            }
                            messages_dialogs = dialogs3;
                            i2 = low_flags;
                            j = flags;
                            longSparseArray = replyMessageOwners2;
                            lower_id = (int) dialog.id;
                            high_id = (int) (dialog.id >> 32);
                            if (lower_id != 0) {
                                if (encryptedToLoad.contains(Integer.valueOf(high_id))) {
                                    encryptedToLoad.add(Integer.valueOf(high_id));
                                }
                            } else if (high_id == 1) {
                                if (lower_id > 0) {
                                    if (chatsToLoad.contains(Integer.valueOf(-lower_id))) {
                                        chatsToLoad.add(Integer.valueOf(-lower_id));
                                    }
                                } else if (usersToLoad.contains(Integer.valueOf(lower_id))) {
                                    usersToLoad.add(Integer.valueOf(lower_id));
                                }
                            } else if (chatsToLoad.contains(Integer.valueOf(lower_id))) {
                                chatsToLoad.add(Integer.valueOf(lower_id));
                            }
                            replyMessageOwners = longSparseArray;
                            dialogs3 = messages_dialogs;
                            anonymousClass90 = this;
                            z2 = true;
                            z = false;
                        } catch (Throwable e5NUM) {
                            dialogs = dialogs3;
                            e3 = e5NUM;
                        }
                    }
                    messages_dialogs = dialogs3;
                    longSparseArray = replyMessageOwners;
                    try {
                        cursor.dispose();
                        if (replyMessages.isEmpty()) {
                            anonymousClass90 = this;
                        } else {
                            try {
                                cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT data, mid, date, uid FROM messages WHERE mid IN(%s)", new Object[]{TextUtils.join(",", replyMessages)}), new Object[0]);
                                while (cursor.next()) {
                                    NativeByteBuffer data3 = cursor.byteBufferValue(0);
                                    if (data3 != null) {
                                        Message message3 = Message.TLdeserialize(data3, data3.readInt32(false), false);
                                        message3.readAttachPath(data3, UserConfig.getInstance(MessagesStorage.this.currentAccount).clientUserId);
                                        data3.reuse();
                                        message3.id = cursor.intValue(1);
                                        message3.date = cursor.intValue(2);
                                        message3.dialog_id = cursor.longValue(3);
                                        MessagesStorage.addUsersAndChatsFromMessage(message3, usersToLoad, chatsToLoad);
                                        message = (Message) longSparseArray.get(message3.dialog_id);
                                        if (message != null) {
                                            message.replyMessage = message3;
                                            message3.dialog_id = message.dialog_id;
                                            if (MessageObject.isMegagroup(message)) {
                                                Message message4 = message.replyMessage;
                                                message4.flags |= Integer.MIN_VALUE;
                                            }
                                        }
                                    }
                                }
                                cursor.dispose();
                            } catch (Throwable e52NUM) {
                                e3 = e52NUM;
                                dialogs = messages_dialogs;
                                dialogs2 = dialogs;
                                dialogs2.dialogs.clear();
                                dialogs2.users.clear();
                                dialogs2.chats.clear();
                                encryptedChats.clear();
                                FileLog.m3e(e3);
                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedDialogs(dialogs2, encryptedChats, 0, 100, 1, true, false, true);
                            }
                        }
                    } catch (Exception e6) {
                        e52NUM = e6;
                        dialogs = messages_dialogs;
                        anonymousClass90 = this;
                        e3 = e52NUM;
                        dialogs2 = dialogs;
                        dialogs2.dialogs.clear();
                        dialogs2.users.clear();
                        dialogs2.chats.clear();
                        encryptedChats.clear();
                        FileLog.m3e(e3);
                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedDialogs(dialogs2, encryptedChats, 0, 100, 1, true, false, true);
                    }
                    try {
                        messages_Dialogs dialogs4;
                        if (!encryptedToLoad.isEmpty()) {
                            MessagesStorage.this.getEncryptedChatsInternal(TextUtils.join(",", encryptedToLoad), encryptedChats, usersToLoad);
                        }
                        if (chatsToLoad.isEmpty()) {
                            dialogs4 = messages_dialogs;
                        } else {
                            try {
                                dialogs4 = messages_dialogs;
                                try {
                                    MessagesStorage.this.getChatsInternal(TextUtils.join(",", chatsToLoad), dialogs4.chats);
                                } catch (Throwable e522NUM) {
                                    e3 = e522NUM;
                                    dialogs = dialogs4;
                                    dialogs2 = dialogs;
                                    dialogs2.dialogs.clear();
                                    dialogs2.users.clear();
                                    dialogs2.chats.clear();
                                    encryptedChats.clear();
                                    FileLog.m3e(e3);
                                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedDialogs(dialogs2, encryptedChats, 0, 100, 1, true, false, true);
                                }
                            } catch (Throwable e5222NUM) {
                                e3 = e5222NUM;
                                dialogs = messages_dialogs;
                                dialogs2 = dialogs;
                                dialogs2.dialogs.clear();
                                dialogs2.users.clear();
                                dialogs2.chats.clear();
                                encryptedChats.clear();
                                FileLog.m3e(e3);
                                MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedDialogs(dialogs2, encryptedChats, 0, 100, 1, true, false, true);
                            }
                        }
                        try {
                            if (!usersToLoad.isEmpty()) {
                                MessagesStorage.this.getUsersInternal(TextUtils.join(",", usersToLoad), dialogs4.users);
                            }
                            dialogs = dialogs4;
                        } catch (Throwable e52222NUM) {
                            dialogs = dialogs4;
                            e3 = e52222NUM;
                            dialogs2 = dialogs;
                            dialogs2.dialogs.clear();
                            dialogs2.users.clear();
                            dialogs2.chats.clear();
                            encryptedChats.clear();
                            FileLog.m3e(e3);
                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedDialogs(dialogs2, encryptedChats, 0, 100, 1, true, false, true);
                        }
                        try {
                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedDialogs(dialogs4, encryptedChats, offset, count, 1, false, false, 1);
                            dialogs2 = dialogs;
                        } catch (Exception e7) {
                            e52222NUM = e7;
                            e3 = e52222NUM;
                            dialogs2 = dialogs;
                            dialogs2.dialogs.clear();
                            dialogs2.users.clear();
                            dialogs2.chats.clear();
                            encryptedChats.clear();
                            FileLog.m3e(e3);
                            MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedDialogs(dialogs2, encryptedChats, 0, 100, 1, true, false, true);
                        }
                    } catch (Exception e8) {
                        e52222NUM = e8;
                        dialogs = messages_dialogs;
                        e3 = e52222NUM;
                        dialogs2 = dialogs;
                        dialogs2.dialogs.clear();
                        dialogs2.users.clear();
                        dialogs2.chats.clear();
                        encryptedChats.clear();
                        FileLog.m3e(e3);
                        MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedDialogs(dialogs2, encryptedChats, 0, 100, 1, true, false, true);
                    }
                } catch (Throwable e522222NUM) {
                    dialogs = dialogs3;
                    e3 = e522222NUM;
                    dialogs2 = dialogs;
                    dialogs2.dialogs.clear();
                    dialogs2.users.clear();
                    dialogs2.chats.clear();
                    encryptedChats.clear();
                    FileLog.m3e(e3);
                    MessagesController.getInstance(MessagesStorage.this.currentAccount).processLoadedDialogs(dialogs2, encryptedChats, 0, 100, 1, true, false, true);
                }
            }
        });
    }

    public static void createFirstHoles(long did, SQLitePreparedStatement state5, SQLitePreparedStatement state6, int messageId) throws Exception {
        state5.requery();
        state5.bindLong(1, did);
        state5.bindInteger(2, messageId == 1 ? 1 : 0);
        state5.bindInteger(3, messageId);
        state5.step();
        for (int b = 0; b < 5; b++) {
            state6.requery();
            state6.bindLong(1, did);
            state6.bindInteger(2, b);
            state6.bindInteger(3, messageId == 1 ? 1 : 0);
            state6.bindInteger(4, messageId);
            state6.step();
        }
    }

    private void putDialogsInternal(messages_Dialogs dialogs, boolean check) {
        Throwable e;
        Throwable e2;
        messages_Dialogs messages_dialogs = dialogs;
        MessagesStorage messagesStorage;
        messages_Dialogs messages_dialogs2;
        MessagesStorage new_dialogMessage;
        try {
            this.database.beginTransaction();
            LongSparseArray<Message> new_dialogMessage2 = new LongSparseArray(messages_dialogs.messages.size());
            for (int a = 0; a < messages_dialogs.messages.size(); a++) {
                Message message = (Message) messages_dialogs.messages.get(a);
                new_dialogMessage2.put(MessageObject.getDialogId(message), message);
            }
            LongSparseArray<Message> longSparseArray;
            if (messages_dialogs.dialogs.isEmpty()) {
                longSparseArray = new_dialogMessage2;
            } else {
                SQLitePreparedStatement state = messagesStorage.database.executeFast("REPLACE INTO messages VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, NULL, ?, ?)");
                SQLitePreparedStatement state2 = messagesStorage.database.executeFast("REPLACE INTO dialogs VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                SQLitePreparedStatement state3 = messagesStorage.database.executeFast("REPLACE INTO media_v2 VALUES(?, ?, ?, ?, ?)");
                SQLitePreparedStatement state4 = messagesStorage.database.executeFast("REPLACE INTO dialog_settings VALUES(?, ?)");
                SQLitePreparedStatement state5 = messagesStorage.database.executeFast("REPLACE INTO messages_holes VALUES(?, ?, ?)");
                SQLitePreparedStatement state6 = messagesStorage.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
                int a2 = 0;
                while (a2 < messages_dialogs.dialogs.size()) {
                    Object state7;
                    TL_dialog dialog = (TL_dialog) messages_dialogs.dialogs.get(a2);
                    SQLitePreparedStatement state8 = state;
                    if (dialog.id == 0) {
                        if (dialog.peer.user_id != 0) {
                            dialog.id = (long) dialog.peer.user_id;
                        } else if (dialog.peer.chat_id != 0) {
                            dialog.id = (long) (-dialog.peer.chat_id);
                        } else {
                            dialog.id = (long) (-dialog.peer.channel_id);
                        }
                    }
                    if (check) {
                        SQLiteDatabase sQLiteDatabase = messagesStorage.database;
                        StringBuilder stringBuilder = new StringBuilder();
                        stringBuilder.append("SELECT did FROM dialogs WHERE did = ");
                        stringBuilder.append(dialog.id);
                        SQLiteCursor cursor = sQLiteDatabase.queryFinalized(stringBuilder.toString(), new Object[0]);
                        boolean exists = cursor.next();
                        cursor.dispose();
                        if (exists) {
                            longSparseArray = new_dialogMessage2;
                            new_dialogMessage2 = state8;
                            a2++;
                            state7 = new_dialogMessage2;
                            new_dialogMessage2 = longSparseArray;
                            messagesStorage = this;
                            messages_dialogs = dialogs;
                        }
                    }
                    int messageDate = 0;
                    Message message2 = (Message) new_dialogMessage2.get(dialog.id);
                    if (message2 != null) {
                        int messageDate2;
                        messageDate = Math.max(message2.date, 0);
                        if (messagesStorage.isValidKeyboardToSave(message2)) {
                            DataQuery.getInstance(messagesStorage.currentAccount).putBotKeyboard(dialog.id, message2);
                        }
                        messagesStorage.fixUnsupportedMedia(message2);
                        NativeByteBuffer data = new NativeByteBuffer(message2.getObjectSize());
                        message2.serializeToStream(data);
                        long messageId = (long) message2.id;
                        longSparseArray = new_dialogMessage2;
                        if (message2.to_id.channel_id != null) {
                            messageDate2 = messageDate;
                            messageId |= ((long) message2.to_id.channel_id) << 32;
                        } else {
                            messageDate2 = messageDate;
                        }
                        new_dialogMessage2 = state8;
                        new_dialogMessage2.requery();
                        new_dialogMessage2.bindLong(1, messageId);
                        try {
                            new_dialogMessage2.bindLong(2, dialog.id);
                            new_dialogMessage2.bindInteger(3, MessageObject.getUnreadFlags(message2));
                            new_dialogMessage2.bindInteger(4, message2.send_state);
                            new_dialogMessage2.bindInteger(5, message2.date);
                            new_dialogMessage2.bindByteBuffer(6, data);
                            new_dialogMessage2.bindInteger(7, MessageObject.isOut(message2));
                            new_dialogMessage2.bindInteger(8, 0);
                            new_dialogMessage2.bindInteger(9, (message2.flags & 1024) != 0 ? message2.views : 0);
                            new_dialogMessage2.bindInteger(10, 0);
                            new_dialogMessage2.bindInteger(11, message2.mentioned);
                            new_dialogMessage2.step();
                            if (DataQuery.canAddMessageToMedia(message2)) {
                                state3.requery();
                                state3.bindLong(1, messageId);
                                state3.bindLong(2, dialog.id);
                                state3.bindInteger(3, message2.date);
                                state3.bindInteger(4, DataQuery.getMediaType(message2));
                                state3.bindByteBuffer(5, data);
                                state3.step();
                            }
                            data.reuse();
                            createFirstHoles(dialog.id, state5, state6, message2.id);
                            messageDate = messageDate2;
                        } catch (Throwable e22) {
                            e = e22;
                            messages_dialogs2 = dialogs;
                            new_dialogMessage = this;
                        }
                    } else {
                        longSparseArray = new_dialogMessage2;
                        new_dialogMessage2 = state8;
                    }
                    long topMessage = (long) dialog.top_message;
                    if (dialog.peer.channel_id != 0) {
                        topMessage |= ((long) dialog.peer.channel_id) << 32;
                    }
                    state2.requery();
                    state2.bindLong(1, dialog.id);
                    state2.bindInteger(2, messageDate);
                    state2.bindInteger(3, dialog.unread_count);
                    state2.bindLong(4, topMessage);
                    state2.bindInteger(5, dialog.read_inbox_max_id);
                    state2.bindInteger(6, dialog.read_outbox_max_id);
                    state2.bindLong(7, 0);
                    state2.bindInteger(8, dialog.unread_mentions_count);
                    state2.bindInteger(9, dialog.pts);
                    state2.bindInteger(10, 0);
                    state2.bindInteger(11, dialog.pinnedNum);
                    state2.step();
                    if (dialog.notify_settings != null) {
                        state4.requery();
                        int i = 1;
                        state4.bindLong(1, dialog.id);
                        if (dialog.notify_settings.mute_until == 0) {
                            i = 0;
                        }
                        state4.bindInteger(2, i);
                        state4.step();
                    }
                    a2++;
                    state7 = new_dialogMessage2;
                    new_dialogMessage2 = longSparseArray;
                    messagesStorage = this;
                    messages_dialogs = dialogs;
                }
                state.dispose();
                state2.dispose();
                state3.dispose();
                state4.dispose();
                state5.dispose();
                state6.dispose();
            }
            messages_dialogs2 = dialogs;
            try {
            } catch (Exception e3) {
                e22 = e3;
                new_dialogMessage = this;
                e = e22;
                FileLog.m3e(e);
            }
            try {
                putUsersInternal(messages_dialogs2.users);
                putChatsInternal(messages_dialogs2.chats);
                new_dialogMessage.database.commitTransaction();
            } catch (Exception e4) {
                e22 = e4;
                e = e22;
                FileLog.m3e(e);
            }
        } catch (Exception e5) {
            e22 = e5;
            new_dialogMessage = messagesStorage;
            messages_dialogs2 = messages_dialogs;
            e = e22;
            FileLog.m3e(e);
        }
    }

    public void unpinAllDialogsExceptNew(final ArrayList<Long> dids) {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    ArrayList<Long> unpinnedDialogs = new ArrayList();
                    SQLiteCursor cursor = MessagesStorage.this.database.queryFinalized(String.format(Locale.US, "SELECT did FROM dialogs WHERE pinned != 0 AND did NOT IN (%s)", new Object[]{TextUtils.join(",", dids)}), new Object[0]);
                    while (cursor.next()) {
                        if (((int) cursor.longValue(0)) != 0) {
                            unpinnedDialogs.add(Long.valueOf(cursor.longValue(0)));
                        }
                    }
                    cursor.dispose();
                    if (!unpinnedDialogs.isEmpty()) {
                        SQLitePreparedStatement state = MessagesStorage.this.database.executeFast("UPDATE dialogs SET pinned = ? WHERE did = ?");
                        for (int a = 0; a < unpinnedDialogs.size(); a++) {
                            long did = ((Long) unpinnedDialogs.get(a)).longValue();
                            state.requery();
                            state.bindInteger(1, 0);
                            state.bindLong(2, did);
                            state.step();
                        }
                        state.dispose();
                    }
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public void setDialogPinned(final long did, final int pinned) {
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                try {
                    SQLitePreparedStatement state = MessagesStorage.this.database.executeFast("UPDATE dialogs SET pinned = ? WHERE did = ?");
                    state.bindInteger(1, pinned);
                    state.bindLong(2, did);
                    state.step();
                    state.dispose();
                } catch (Throwable e) {
                    FileLog.m3e(e);
                }
            }
        });
    }

    public void putDialogs(final messages_Dialogs dialogs, final boolean check) {
        if (!dialogs.dialogs.isEmpty()) {
            this.storageQueue.postRunnable(new Runnable() {
                public void run() {
                    MessagesStorage.this.putDialogsInternal(dialogs, check);
                    try {
                        MessagesStorage.this.loadUnreadMessages();
                    } catch (Throwable e) {
                        FileLog.m3e(e);
                    }
                }
            });
        }
    }

    public int getDialogReadMax(boolean outbox, long dialog_id) {
        CountDownLatch countDownLatch = new CountDownLatch(1);
        Integer[] max = new Integer[]{Integer.valueOf(0)};
        final boolean z = outbox;
        final long j = dialog_id;
        final Integer[] numArr = max;
        final CountDownLatch countDownLatch2 = countDownLatch;
        this.storageQueue.postRunnable(new Runnable() {
            /* JADX WARNING: inconsistent code. */
            /* Code decompiled incorrectly, please refer to instructions dump. */
            public void run() {
                SQLiteCursor cursor = null;
                try {
                    SQLiteDatabase access$000;
                    StringBuilder stringBuilder;
                    if (z) {
                        access$000 = MessagesStorage.this.database;
                        stringBuilder = new StringBuilder();
                        stringBuilder.append("SELECT outbox_max FROM dialogs WHERE did = ");
                        stringBuilder.append(j);
                        cursor = access$000.queryFinalized(stringBuilder.toString(), new Object[0]);
                    } else {
                        access$000 = MessagesStorage.this.database;
                        stringBuilder = new StringBuilder();
                        stringBuilder.append("SELECT inbox_max FROM dialogs WHERE did = ");
                        stringBuilder.append(j);
                        cursor = access$000.queryFinalized(stringBuilder.toString(), new Object[0]);
                    }
                    if (cursor.next()) {
                        numArr[0] = Integer.valueOf(cursor.intValue(0));
                    }
                } catch (Throwable e) {
                    FileLog.m3e(e);
                    if (cursor != null) {
                        cursor.dispose();
                    }
                    countDownLatch2.countDown();
                } catch (Throwable th) {
                    if (cursor != null) {
                        cursor.dispose();
                    }
                }
            }
        });
        try {
            countDownLatch.await();
        } catch (Throwable e) {
            FileLog.m3e(e);
        }
        return max[0].intValue();
    }

    public int getChannelPtsSync(final int channelId) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final Integer[] pts = new Integer[]{Integer.valueOf(0)};
        this.storageQueue.postRunnable(new Runnable() {
            /* JADX WARNING: inconsistent code. */
            /* Code decompiled incorrectly, please refer to instructions dump. */
            public void run() {
                SQLiteCursor cursor = null;
                try {
                    SQLiteDatabase access$000 = MessagesStorage.this.database;
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.append("SELECT pts FROM dialogs WHERE did = ");
                    stringBuilder.append(-channelId);
                    cursor = access$000.queryFinalized(stringBuilder.toString(), new Object[0]);
                    if (cursor.next()) {
                        pts[0] = Integer.valueOf(cursor.intValue(0));
                    }
                } catch (Throwable e) {
                    FileLog.m3e(e);
                    if (cursor != null) {
                        cursor.dispose();
                    }
                    try {
                        if (countDownLatch != null) {
                            countDownLatch.countDown();
                        }
                    } catch (Throwable e2) {
                        FileLog.m3e(e2);
                    }
                } catch (Throwable th) {
                    if (cursor != null) {
                        cursor.dispose();
                    }
                }
            }
        });
        try {
            countDownLatch.await();
        } catch (Throwable e) {
            FileLog.m3e(e);
        }
        return pts[0].intValue();
    }

    public User getUserSync(final int user_id) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final User[] user = new User[1];
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                user[0] = MessagesStorage.this.getUser(user_id);
                countDownLatch.countDown();
            }
        });
        try {
            countDownLatch.await();
        } catch (Throwable e) {
            FileLog.m3e(e);
        }
        return user[0];
    }

    public Chat getChatSync(final int chat_id) {
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        final Chat[] chat = new Chat[1];
        this.storageQueue.postRunnable(new Runnable() {
            public void run() {
                chat[0] = MessagesStorage.this.getChat(chat_id);
                countDownLatch.countDown();
            }
        });
        try {
            countDownLatch.await();
        } catch (Throwable e) {
            FileLog.m3e(e);
        }
        return chat[0];
    }

    public User getUser(int user_id) {
        User user = null;
        try {
            ArrayList<User> users = new ArrayList();
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(TtmlNode.ANONYMOUS_REGION_ID);
            stringBuilder.append(user_id);
            getUsersInternal(stringBuilder.toString(), users);
            if (!users.isEmpty()) {
                user = (User) users.get(0);
            }
        } catch (Throwable e) {
            FileLog.m3e(e);
        }
        return user;
    }

    public ArrayList<User> getUsers(ArrayList<Integer> uids) {
        ArrayList<User> users = new ArrayList();
        try {
            getUsersInternal(TextUtils.join(",", uids), users);
        } catch (Throwable e) {
            users.clear();
            FileLog.m3e(e);
        }
        return users;
    }

    public Chat getChat(int chat_id) {
        Chat chat = null;
        try {
            ArrayList<Chat> chats = new ArrayList();
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(TtmlNode.ANONYMOUS_REGION_ID);
            stringBuilder.append(chat_id);
            getChatsInternal(stringBuilder.toString(), chats);
            if (!chats.isEmpty()) {
                chat = (Chat) chats.get(0);
            }
        } catch (Throwable e) {
            FileLog.m3e(e);
        }
        return chat;
    }

    public EncryptedChat getEncryptedChat(int chat_id) {
        EncryptedChat chat = null;
        try {
            ArrayList<EncryptedChat> encryptedChats = new ArrayList();
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append(TtmlNode.ANONYMOUS_REGION_ID);
            stringBuilder.append(chat_id);
            getEncryptedChatsInternal(stringBuilder.toString(), encryptedChats, null);
            if (!encryptedChats.isEmpty()) {
                chat = (EncryptedChat) encryptedChats.get(0);
            }
        } catch (Throwable e) {
            FileLog.m3e(e);
        }
        return chat;
    }
}
