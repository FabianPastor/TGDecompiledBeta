package org.telegram.messenger;

import android.text.TextUtils;
import android.util.LongSparseArray;
import android.util.Pair;
import android.util.SparseArray;
import android.util.SparseIntArray;
import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.atomic.AtomicLong;
import org.telegram.SQLite.SQLiteCursor;
import org.telegram.SQLite.SQLiteDatabase;
import org.telegram.SQLite.SQLitePreparedStatement;
import org.telegram.messenger.ContactsController;
import org.telegram.messenger.MessagesController;
import org.telegram.messenger.MessagesStorage;
import org.telegram.messenger.support.SparseLongArray;
import org.telegram.tgnet.NativeByteBuffer;
import org.telegram.tgnet.RequestDelegate;
import org.telegram.tgnet.TLObject;
import org.telegram.tgnet.TLRPC$BotInfo;
import org.telegram.tgnet.TLRPC$ChannelParticipant;
import org.telegram.tgnet.TLRPC$Chat;
import org.telegram.tgnet.TLRPC$ChatFull;
import org.telegram.tgnet.TLRPC$ChatParticipant;
import org.telegram.tgnet.TLRPC$ChatParticipants;
import org.telegram.tgnet.TLRPC$Dialog;
import org.telegram.tgnet.TLRPC$Document;
import org.telegram.tgnet.TLRPC$EncryptedChat;
import org.telegram.tgnet.TLRPC$InputChannel;
import org.telegram.tgnet.TLRPC$InputDialogPeer;
import org.telegram.tgnet.TLRPC$InputMedia;
import org.telegram.tgnet.TLRPC$InputPeer;
import org.telegram.tgnet.TLRPC$Message;
import org.telegram.tgnet.TLRPC$MessageAction;
import org.telegram.tgnet.TLRPC$MessageEntity;
import org.telegram.tgnet.TLRPC$MessageFwdHeader;
import org.telegram.tgnet.TLRPC$MessageMedia;
import org.telegram.tgnet.TLRPC$Peer;
import org.telegram.tgnet.TLRPC$Photo;
import org.telegram.tgnet.TLRPC$Poll;
import org.telegram.tgnet.TLRPC$PollResults;
import org.telegram.tgnet.TLRPC$ReplyMarkup;
import org.telegram.tgnet.TLRPC$TL_channelFull;
import org.telegram.tgnet.TLRPC$TL_channels_deleteMessages;
import org.telegram.tgnet.TLRPC$TL_chatBannedRights;
import org.telegram.tgnet.TLRPC$TL_chatChannelParticipant;
import org.telegram.tgnet.TLRPC$TL_chatFull;
import org.telegram.tgnet.TLRPC$TL_chatInviteEmpty;
import org.telegram.tgnet.TLRPC$TL_chatParticipant;
import org.telegram.tgnet.TLRPC$TL_chatParticipantAdmin;
import org.telegram.tgnet.TLRPC$TL_chatParticipants;
import org.telegram.tgnet.TLRPC$TL_contact;
import org.telegram.tgnet.TLRPC$TL_dialog;
import org.telegram.tgnet.TLRPC$TL_folderPeer;
import org.telegram.tgnet.TLRPC$TL_inputFolderPeer;
import org.telegram.tgnet.TLRPC$TL_inputMediaGame;
import org.telegram.tgnet.TLRPC$TL_inputMessageEntityMentionName;
import org.telegram.tgnet.TLRPC$TL_message;
import org.telegram.tgnet.TLRPC$TL_messageActionGameScore;
import org.telegram.tgnet.TLRPC$TL_messageActionPaymentSent;
import org.telegram.tgnet.TLRPC$TL_messageActionPinMessage;
import org.telegram.tgnet.TLRPC$TL_messageEntityMentionName;
import org.telegram.tgnet.TLRPC$TL_messageMediaDocument;
import org.telegram.tgnet.TLRPC$TL_messageMediaPhoto;
import org.telegram.tgnet.TLRPC$TL_messageMediaPoll;
import org.telegram.tgnet.TLRPC$TL_messageMediaUnsupported;
import org.telegram.tgnet.TLRPC$TL_messageMediaUnsupported_old;
import org.telegram.tgnet.TLRPC$TL_messageMediaWebPage;
import org.telegram.tgnet.TLRPC$TL_messageReactions;
import org.telegram.tgnet.TLRPC$TL_message_secret;
import org.telegram.tgnet.TLRPC$TL_messages_botCallbackAnswer;
import org.telegram.tgnet.TLRPC$TL_messages_botResults;
import org.telegram.tgnet.TLRPC$TL_messages_deleteMessages;
import org.telegram.tgnet.TLRPC$TL_messages_deleteScheduledMessages;
import org.telegram.tgnet.TLRPC$TL_messages_dialogs;
import org.telegram.tgnet.TLRPC$TL_messages_messages;
import org.telegram.tgnet.TLRPC$TL_peerNotifySettings;
import org.telegram.tgnet.TLRPC$TL_peerNotifySettingsEmpty_layer77;
import org.telegram.tgnet.TLRPC$TL_photoEmpty;
import org.telegram.tgnet.TLRPC$TL_photos_photos;
import org.telegram.tgnet.TLRPC$TL_replyInlineMarkup;
import org.telegram.tgnet.TLRPC$TL_updates_channelDifferenceTooLong;
import org.telegram.tgnet.TLRPC$TL_userStatusLastMonth;
import org.telegram.tgnet.TLRPC$TL_userStatusLastWeek;
import org.telegram.tgnet.TLRPC$TL_userStatusRecently;
import org.telegram.tgnet.TLRPC$TL_wallPaper;
import org.telegram.tgnet.TLRPC$User;
import org.telegram.tgnet.TLRPC$UserFull;
import org.telegram.tgnet.TLRPC$UserStatus;
import org.telegram.tgnet.TLRPC$Vector;
import org.telegram.tgnet.TLRPC$WallPaper;
import org.telegram.tgnet.TLRPC$WebPage;
import org.telegram.tgnet.TLRPC$messages_Dialogs;
import org.telegram.tgnet.TLRPC$messages_Messages;
import org.telegram.tgnet.TLRPC$photos_Photos;
import org.telegram.ui.ActionBar.Theme;

public class MessagesStorage extends BaseController {
    private static volatile MessagesStorage[] Instance = new MessagesStorage[3];
    private static final int LAST_DB_VERSION = 68;
    private int archiveUnreadCount;
    private int[][] bots = {new int[2], new int[2]};
    private File cacheFile;
    private int[][] channels = {new int[2], new int[2]};
    private int[][] contacts = {new int[2], new int[2]};
    private SQLiteDatabase database;
    private ArrayList<MessagesController.DialogFilter> dialogFilters = new ArrayList<>();
    private SparseArray<MessagesController.DialogFilter> dialogFiltersMap = new SparseArray<>();
    private LongSparseArray<Integer> dialogsWithMentions = new LongSparseArray<>();
    private LongSparseArray<Integer> dialogsWithUnread = new LongSparseArray<>();
    private int[][] groups = {new int[2], new int[2]};
    private int lastDateValue = 0;
    private int lastPtsValue = 0;
    private int lastQtsValue = 0;
    private int lastSavedDate = 0;
    private int lastSavedPts = 0;
    private int lastSavedQts = 0;
    private int lastSavedSeq = 0;
    private int lastSecretVersion = 0;
    private int lastSeqValue = 0;
    private AtomicLong lastTaskId = new AtomicLong(System.currentTimeMillis());
    private int mainUnreadCount;
    private int[] mentionChannels = new int[2];
    private int[] mentionGroups = new int[2];
    private int[][] nonContacts = {new int[2], new int[2]};
    private CountDownLatch openSync = new CountDownLatch(1);
    private volatile int pendingArchiveUnreadCount;
    private volatile int pendingMainUnreadCount;
    private int secretG = 0;
    private byte[] secretPBytes = null;
    private File shmCacheFile;
    private DispatchQueue storageQueue = new DispatchQueue("storageQueue");
    private SparseArray<ArrayList<Runnable>> tasks = new SparseArray<>();
    private LongSparseArray<Boolean> unknownDialogsIds = new LongSparseArray<>();
    private File walCacheFile;

    public interface BooleanCallback {
        void run(boolean z);
    }

    public interface IntCallback {
        void run(int i);
    }

    public static MessagesStorage getInstance(int i) {
        MessagesStorage messagesStorage = Instance[i];
        if (messagesStorage == null) {
            synchronized (MessagesStorage.class) {
                messagesStorage = Instance[i];
                if (messagesStorage == null) {
                    MessagesStorage[] messagesStorageArr = Instance;
                    MessagesStorage messagesStorage2 = new MessagesStorage(i);
                    messagesStorageArr[i] = messagesStorage2;
                    messagesStorage = messagesStorage2;
                }
            }
        }
        return messagesStorage;
    }

    private void ensureOpened() {
        try {
            this.openSync.await();
        } catch (Throwable unused) {
        }
    }

    public int getLastDateValue() {
        ensureOpened();
        return this.lastDateValue;
    }

    public void setLastDateValue(int i) {
        ensureOpened();
        this.lastDateValue = i;
    }

    public int getLastPtsValue() {
        ensureOpened();
        return this.lastPtsValue;
    }

    public int getMainUnreadCount() {
        return this.mainUnreadCount;
    }

    public int getArchiveUnreadCount() {
        return this.archiveUnreadCount;
    }

    public void setLastPtsValue(int i) {
        ensureOpened();
        this.lastPtsValue = i;
    }

    public int getLastQtsValue() {
        ensureOpened();
        return this.lastQtsValue;
    }

    public void setLastQtsValue(int i) {
        ensureOpened();
        this.lastQtsValue = i;
    }

    public int getLastSeqValue() {
        ensureOpened();
        return this.lastSeqValue;
    }

    public void setLastSeqValue(int i) {
        ensureOpened();
        this.lastSeqValue = i;
    }

    public int getLastSecretVersion() {
        ensureOpened();
        return this.lastSecretVersion;
    }

    public void setLastSecretVersion(int i) {
        ensureOpened();
        this.lastSecretVersion = i;
    }

    public byte[] getSecretPBytes() {
        ensureOpened();
        return this.secretPBytes;
    }

    public void setSecretPBytes(byte[] bArr) {
        ensureOpened();
        this.secretPBytes = bArr;
    }

    public int getSecretG() {
        ensureOpened();
        return this.secretG;
    }

    public void setSecretG(int i) {
        ensureOpened();
        this.secretG = i;
    }

    public MessagesStorage(int i) {
        super(i);
        this.storageQueue.postRunnable(new Runnable() {
            public final void run() {
                MessagesStorage.this.lambda$new$0$MessagesStorage();
            }
        });
    }

    public /* synthetic */ void lambda$new$0$MessagesStorage() {
        openDatabase(1);
    }

    public SQLiteDatabase getDatabase() {
        return this.database;
    }

    public DispatchQueue getStorageQueue() {
        return this.storageQueue;
    }

    public void bindTaskToGuid(Runnable runnable, int i) {
        ArrayList arrayList = this.tasks.get(i);
        if (arrayList == null) {
            arrayList = new ArrayList();
            this.tasks.put(i, arrayList);
        }
        arrayList.add(runnable);
    }

    public void cancelTasksForGuid(int i) {
        ArrayList arrayList = this.tasks.get(i);
        if (arrayList != null) {
            int size = arrayList.size();
            for (int i2 = 0; i2 < size; i2++) {
                this.storageQueue.cancelRunnable((Runnable) arrayList.get(i2));
            }
            this.tasks.remove(i);
        }
    }

    public void completeTaskForGuid(Runnable runnable, int i) {
        ArrayList arrayList = this.tasks.get(i);
        if (arrayList != null) {
            arrayList.remove(runnable);
            if (arrayList.isEmpty()) {
                this.tasks.remove(i);
            }
        }
    }

    public long getDatabaseSize() {
        File file = this.cacheFile;
        long j = 0;
        if (file != null) {
            j = 0 + file.length();
        }
        File file2 = this.shmCacheFile;
        return file2 != null ? j + file2.length() : j;
    }

    public void openDatabase(int i) {
        int i2 = i;
        File filesDirFixed = ApplicationLoader.getFilesDirFixed();
        if (this.currentAccount != 0) {
            File file = new File(filesDirFixed, "account" + this.currentAccount + "/");
            file.mkdirs();
            filesDirFixed = file;
        }
        this.cacheFile = new File(filesDirFixed, "cache4.db");
        this.walCacheFile = new File(filesDirFixed, "cache4.db-wal");
        this.shmCacheFile = new File(filesDirFixed, "cache4.db-shm");
        boolean z = !this.cacheFile.exists();
        int i3 = 3;
        try {
            SQLiteDatabase sQLiteDatabase = new SQLiteDatabase(this.cacheFile.getPath());
            this.database = sQLiteDatabase;
            sQLiteDatabase.executeFast("PRAGMA secure_delete = ON").stepThis().dispose();
            this.database.executeFast("PRAGMA temp_store = MEMORY").stepThis().dispose();
            this.database.executeFast("PRAGMA journal_mode = WAL").stepThis().dispose();
            if (z) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("create new database");
                }
                this.database.executeFast("CREATE TABLE messages_holes(uid INTEGER, start INTEGER, end INTEGER, PRIMARY KEY(uid, start));").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS uid_end_messages_holes ON messages_holes(uid, end);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE media_holes_v2(uid INTEGER, type INTEGER, start INTEGER, end INTEGER, PRIMARY KEY(uid, type, start));").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS uid_end_media_holes_v2 ON media_holes_v2(uid, type, end);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE scheduled_messages(mid INTEGER PRIMARY KEY, uid INTEGER, send_state INTEGER, date INTEGER, data BLOB, ttl INTEGER, replydata BLOB)").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS send_state_idx_scheduled_messages ON scheduled_messages(mid, send_state, date);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS uid_date_idx_scheduled_messages ON scheduled_messages(uid, date);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE messages(mid INTEGER PRIMARY KEY, uid INTEGER, read_state INTEGER, send_state INTEGER, date INTEGER, data BLOB, out INTEGER, ttl INTEGER, media INTEGER, replydata BLOB, imp INTEGER, mention INTEGER)").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS uid_mid_read_out_idx_messages ON messages(uid, mid, read_state, out);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS uid_date_mid_idx_messages ON messages(uid, date, mid);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS mid_out_idx_messages ON messages(mid, out);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS task_idx_messages ON messages(uid, out, read_state, ttl, date, send_state);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS send_state_idx_messages2 ON messages(mid, send_state, date);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS uid_mention_idx_messages ON messages(uid, mention, read_state);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE download_queue(uid INTEGER, type INTEGER, date INTEGER, data BLOB, parent TEXT, PRIMARY KEY (uid, type));").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS type_date_idx_download_queue ON download_queue(type, date);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE user_contacts_v7(key TEXT PRIMARY KEY, uid INTEGER, fname TEXT, sname TEXT, imported INTEGER)").stepThis().dispose();
                this.database.executeFast("CREATE TABLE user_phones_v7(key TEXT, phone TEXT, sphone TEXT, deleted INTEGER, PRIMARY KEY (key, phone))").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS sphone_deleted_idx_user_phones ON user_phones_v7(sphone, deleted);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE dialogs(did INTEGER PRIMARY KEY, date INTEGER, unread_count INTEGER, last_mid INTEGER, inbox_max INTEGER, outbox_max INTEGER, last_mid_i INTEGER, unread_count_i INTEGER, pts INTEGER, date_i INTEGER, pinned INTEGER, flags INTEGER, folder_id INTEGER, data BLOB)").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS date_idx_dialogs ON dialogs(date);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS last_mid_idx_dialogs ON dialogs(last_mid);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS unread_count_idx_dialogs ON dialogs(unread_count);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS last_mid_i_idx_dialogs ON dialogs(last_mid_i);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS unread_count_i_idx_dialogs ON dialogs(unread_count_i);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS folder_id_idx_dialogs ON dialogs(folder_id);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS flags_idx_dialogs ON dialogs(flags);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE dialog_filter(id INTEGER PRIMARY KEY, ord INTEGER, unread_count INTEGER, flags INTEGER, title TEXT)").stepThis().dispose();
                this.database.executeFast("CREATE TABLE dialog_filter_ep(id INTEGER, peer INTEGER, PRIMARY KEY (id, peer))").stepThis().dispose();
                this.database.executeFast("CREATE TABLE dialog_filter_pin_v2(id INTEGER, peer INTEGER, pin INTEGER, PRIMARY KEY (id, peer))").stepThis().dispose();
                this.database.executeFast("CREATE TABLE randoms(random_id INTEGER, mid INTEGER, PRIMARY KEY (random_id, mid))").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS mid_idx_randoms ON randoms(mid);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE enc_tasks_v2(mid INTEGER PRIMARY KEY, date INTEGER)").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS date_idx_enc_tasks_v2 ON enc_tasks_v2(date);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE messages_seq(mid INTEGER PRIMARY KEY, seq_in INTEGER, seq_out INTEGER);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS seq_idx_messages_seq ON messages_seq(seq_in, seq_out);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE params(id INTEGER PRIMARY KEY, seq INTEGER, pts INTEGER, date INTEGER, qts INTEGER, lsv INTEGER, sg INTEGER, pbytes BLOB)").stepThis().dispose();
                this.database.executeFast("INSERT INTO params VALUES(1, 0, 0, 0, 0, 0, 0, NULL)").stepThis().dispose();
                this.database.executeFast("CREATE TABLE media_v2(mid INTEGER PRIMARY KEY, uid INTEGER, date INTEGER, type INTEGER, data BLOB)").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS uid_mid_type_date_idx_media ON media_v2(uid, mid, type, date);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE bot_keyboard(uid INTEGER PRIMARY KEY, mid INTEGER, info BLOB)").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS bot_keyboard_idx_mid ON bot_keyboard(mid);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE chat_settings_v2(uid INTEGER PRIMARY KEY, info BLOB, pinned INTEGER, online INTEGER)").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS chat_settings_pinned_idx ON chat_settings_v2(uid, pinned) WHERE pinned != 0;").stepThis().dispose();
                this.database.executeFast("CREATE TABLE user_settings(uid INTEGER PRIMARY KEY, info BLOB, pinned INTEGER)").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS user_settings_pinned_idx ON user_settings(uid, pinned) WHERE pinned != 0;").stepThis().dispose();
                this.database.executeFast("CREATE TABLE chat_pinned(uid INTEGER PRIMARY KEY, pinned INTEGER, data BLOB)").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS chat_pinned_mid_idx ON chat_pinned(uid, pinned) WHERE pinned != 0;").stepThis().dispose();
                this.database.executeFast("CREATE TABLE chat_hints(did INTEGER, type INTEGER, rating REAL, date INTEGER, PRIMARY KEY(did, type))").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS chat_hints_rating_idx ON chat_hints(rating);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE botcache(id TEXT PRIMARY KEY, date INTEGER, data BLOB)").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS botcache_date_idx ON botcache(date);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE users_data(uid INTEGER PRIMARY KEY, about TEXT)").stepThis().dispose();
                this.database.executeFast("CREATE TABLE users(uid INTEGER PRIMARY KEY, name TEXT, status INTEGER, data BLOB)").stepThis().dispose();
                this.database.executeFast("CREATE TABLE chats(uid INTEGER PRIMARY KEY, name TEXT, data BLOB)").stepThis().dispose();
                this.database.executeFast("CREATE TABLE enc_chats(uid INTEGER PRIMARY KEY, user INTEGER, name TEXT, data BLOB, g BLOB, authkey BLOB, ttl INTEGER, layer INTEGER, seq_in INTEGER, seq_out INTEGER, use_count INTEGER, exchange_id INTEGER, key_date INTEGER, fprint INTEGER, fauthkey BLOB, khash BLOB, in_seq_no INTEGER, admin_id INTEGER, mtproto_seq INTEGER)").stepThis().dispose();
                this.database.executeFast("CREATE TABLE channel_users_v2(did INTEGER, uid INTEGER, date INTEGER, data BLOB, PRIMARY KEY(did, uid))").stepThis().dispose();
                this.database.executeFast("CREATE TABLE channel_admins_v2(did INTEGER, uid INTEGER, rank TEXT, PRIMARY KEY(did, uid))").stepThis().dispose();
                this.database.executeFast("CREATE TABLE contacts(uid INTEGER PRIMARY KEY, mutual INTEGER)").stepThis().dispose();
                this.database.executeFast("CREATE TABLE user_photos(uid INTEGER, id INTEGER, data BLOB, PRIMARY KEY (uid, id))").stepThis().dispose();
                this.database.executeFast("CREATE TABLE dialog_settings(did INTEGER PRIMARY KEY, flags INTEGER);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE web_recent_v3(id TEXT, type INTEGER, image_url TEXT, thumb_url TEXT, local_url TEXT, width INTEGER, height INTEGER, size INTEGER, date INTEGER, document BLOB, PRIMARY KEY (id, type));").stepThis().dispose();
                this.database.executeFast("CREATE TABLE stickers_v2(id INTEGER PRIMARY KEY, data BLOB, date INTEGER, hash INTEGER);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE stickers_featured(id INTEGER PRIMARY KEY, data BLOB, unread BLOB, date INTEGER, hash INTEGER);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE stickers_dice(emoji TEXT PRIMARY KEY, data BLOB, date INTEGER);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE hashtag_recent_v2(id TEXT PRIMARY KEY, date INTEGER);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE webpage_pending(id INTEGER, mid INTEGER, PRIMARY KEY (id, mid));").stepThis().dispose();
                this.database.executeFast("CREATE TABLE sent_files_v2(uid TEXT, type INTEGER, data BLOB, parent TEXT, PRIMARY KEY (uid, type))").stepThis().dispose();
                this.database.executeFast("CREATE TABLE search_recent(did INTEGER PRIMARY KEY, date INTEGER);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE media_counts_v2(uid INTEGER, type INTEGER, count INTEGER, old INTEGER, PRIMARY KEY(uid, type))").stepThis().dispose();
                this.database.executeFast("CREATE TABLE keyvalue(id TEXT PRIMARY KEY, value TEXT)").stepThis().dispose();
                this.database.executeFast("CREATE TABLE bot_info(uid INTEGER PRIMARY KEY, info BLOB)").stepThis().dispose();
                this.database.executeFast("CREATE TABLE pending_tasks(id INTEGER PRIMARY KEY, data BLOB);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE requested_holes(uid INTEGER, seq_out_start INTEGER, seq_out_end INTEGER, PRIMARY KEY (uid, seq_out_start, seq_out_end));").stepThis().dispose();
                this.database.executeFast("CREATE TABLE sharing_locations(uid INTEGER PRIMARY KEY, mid INTEGER, date INTEGER, period INTEGER, message BLOB);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE emoji_keywords_v2(lang TEXT, keyword TEXT, emoji TEXT, PRIMARY KEY(lang, keyword, emoji));").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS emoji_keywords_v2_keyword ON emoji_keywords_v2(keyword);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE emoji_keywords_info_v2(lang TEXT PRIMARY KEY, alias TEXT, version INTEGER, date INTEGER);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE wallpapers2(uid INTEGER PRIMARY KEY, data BLOB, num INTEGER)").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS wallpapers_num ON wallpapers2(num);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE unread_push_messages(uid INTEGER, mid INTEGER, random INTEGER, date INTEGER, data BLOB, fm TEXT, name TEXT, uname TEXT, flags INTEGER, PRIMARY KEY(uid, mid))").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS unread_push_messages_idx_date ON unread_push_messages(date);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS unread_push_messages_idx_random ON unread_push_messages(random);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE polls(mid INTEGER PRIMARY KEY, id INTEGER);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS polls_id ON polls(id);").stepThis().dispose();
                this.database.executeFast("PRAGMA user_version = 68").stepThis().dispose();
                loadDialogFilters();
                loadUnreadMessages();
                loadPendingTasks();
                try {
                    this.openSync.countDown();
                } catch (Throwable unused) {
                }
            } else {
                int intValue = this.database.executeInt("PRAGMA user_version", new Object[0]).intValue();
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("current db version = " + intValue);
                }
                if (intValue != 0) {
                    try {
                        SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT seq, pts, date, qts, lsv, sg, pbytes FROM params WHERE id = 1", new Object[0]);
                        if (queryFinalized.next()) {
                            this.lastSeqValue = queryFinalized.intValue(0);
                            this.lastPtsValue = queryFinalized.intValue(1);
                            this.lastDateValue = queryFinalized.intValue(2);
                            this.lastQtsValue = queryFinalized.intValue(3);
                            this.lastSecretVersion = queryFinalized.intValue(4);
                            this.secretG = queryFinalized.intValue(5);
                            if (queryFinalized.isNull(6)) {
                                this.secretPBytes = null;
                            } else {
                                byte[] byteArrayValue = queryFinalized.byteArrayValue(6);
                                this.secretPBytes = byteArrayValue;
                                if (byteArrayValue != null && byteArrayValue.length == 1) {
                                    this.secretPBytes = null;
                                }
                            }
                        }
                        queryFinalized.dispose();
                    } catch (Exception e) {
                        FileLog.e((Throwable) e);
                        try {
                            this.database.executeFast("CREATE TABLE IF NOT EXISTS params(id INTEGER PRIMARY KEY, seq INTEGER, pts INTEGER, date INTEGER, qts INTEGER, lsv INTEGER, sg INTEGER, pbytes BLOB)").stepThis().dispose();
                            this.database.executeFast("INSERT INTO params VALUES(1, 0, 0, 0, 0, 0, 0, NULL)").stepThis().dispose();
                        } catch (Exception e2) {
                            FileLog.e((Throwable) e2);
                        }
                    }
                    if (intValue < 68) {
                        updateDbToLastVersion(intValue);
                    }
                    loadDialogFilters();
                    loadUnreadMessages();
                    loadPendingTasks();
                    this.openSync.countDown();
                }
                throw new Exception("malformed");
            }
        } catch (Exception e3) {
            Exception exc = e3;
            FileLog.e((Throwable) exc);
            if (i2 < 3 && exc.getMessage().contains("malformed")) {
                if (i2 == 2) {
                    cleanupInternal(true);
                    for (int i4 = 0; i4 < 2; i4++) {
                        getUserConfig().setDialogsLoadOffset(i4, 0, 0, 0, 0, 0, 0);
                        getUserConfig().setTotalDialogsCount(i4, 0);
                    }
                    getUserConfig().saveConfig(false);
                } else {
                    cleanupInternal(false);
                }
                if (i2 == 1) {
                    i3 = 2;
                }
                openDatabase(i3);
            }
        }
    }

    private void updateDbToLastVersion(int i) {
        this.storageQueue.postRunnable(new Runnable(i) {
            public final /* synthetic */ int f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesStorage.this.lambda$updateDbToLastVersion$1$MessagesStorage(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$updateDbToLastVersion$1$MessagesStorage(int i) {
        if (i < 4) {
            try {
                this.database.executeFast("CREATE TABLE IF NOT EXISTS user_photos(uid INTEGER, id INTEGER, data BLOB, PRIMARY KEY (uid, id))").stepThis().dispose();
                this.database.executeFast("DROP INDEX IF EXISTS read_state_out_idx_messages;").stepThis().dispose();
                this.database.executeFast("DROP INDEX IF EXISTS ttl_idx_messages;").stepThis().dispose();
                this.database.executeFast("DROP INDEX IF EXISTS date_idx_messages;").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS mid_out_idx_messages ON messages(mid, out);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS task_idx_messages ON messages(uid, out, read_state, ttl, date, send_state);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS uid_date_mid_idx_messages ON messages(uid, date, mid);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE IF NOT EXISTS user_contacts_v6(uid INTEGER PRIMARY KEY, fname TEXT, sname TEXT)").stepThis().dispose();
                this.database.executeFast("CREATE TABLE IF NOT EXISTS user_phones_v6(uid INTEGER, phone TEXT, sphone TEXT, deleted INTEGER, PRIMARY KEY (uid, phone))").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS sphone_deleted_idx_user_phones ON user_phones_v6(sphone, deleted);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS mid_idx_randoms ON randoms(mid);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE IF NOT EXISTS sent_files_v2(uid TEXT, type INTEGER, data BLOB, PRIMARY KEY (uid, type))").stepThis().dispose();
                this.database.executeFast("CREATE TABLE IF NOT EXISTS download_queue(uid INTEGER, type INTEGER, date INTEGER, data BLOB, PRIMARY KEY (uid, type));").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS type_date_idx_download_queue ON download_queue(type, date);").stepThis().dispose();
                this.database.executeFast("CREATE TABLE IF NOT EXISTS dialog_settings(did INTEGER PRIMARY KEY, flags INTEGER);").stepThis().dispose();
                this.database.executeFast("CREATE INDEX IF NOT EXISTS unread_count_idx_dialogs ON dialogs(unread_count);").stepThis().dispose();
                this.database.executeFast("UPDATE messages SET send_state = 2 WHERE mid < 0 AND send_state = 1").stepThis().dispose();
                fixNotificationSettings();
                this.database.executeFast("PRAGMA user_version = 4").stepThis().dispose();
                i = 4;
            } catch (Exception e) {
                FileLog.e((Throwable) e);
                return;
            }
        }
        if (i == 4) {
            this.database.executeFast("CREATE TABLE IF NOT EXISTS enc_tasks_v2(mid INTEGER PRIMARY KEY, date INTEGER)").stepThis().dispose();
            this.database.executeFast("CREATE INDEX IF NOT EXISTS date_idx_enc_tasks_v2 ON enc_tasks_v2(date);").stepThis().dispose();
            this.database.beginTransaction();
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT date, data FROM enc_tasks WHERE 1", new Object[0]);
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO enc_tasks_v2 VALUES(?, ?)");
            if (queryFinalized.next()) {
                int intValue = queryFinalized.intValue(0);
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(1);
                if (byteBufferValue != null) {
                    int limit = byteBufferValue.limit();
                    for (int i2 = 0; i2 < limit / 4; i2++) {
                        executeFast.requery();
                        executeFast.bindInteger(1, byteBufferValue.readInt32(false));
                        executeFast.bindInteger(2, intValue);
                        executeFast.step();
                    }
                    byteBufferValue.reuse();
                }
            }
            executeFast.dispose();
            queryFinalized.dispose();
            this.database.commitTransaction();
            this.database.executeFast("DROP INDEX IF EXISTS date_idx_enc_tasks;").stepThis().dispose();
            this.database.executeFast("DROP TABLE IF EXISTS enc_tasks;").stepThis().dispose();
            this.database.executeFast("ALTER TABLE messages ADD COLUMN media INTEGER default 0").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 6").stepThis().dispose();
            i = 6;
        }
        if (i == 6) {
            this.database.executeFast("CREATE TABLE IF NOT EXISTS messages_seq(mid INTEGER PRIMARY KEY, seq_in INTEGER, seq_out INTEGER);").stepThis().dispose();
            this.database.executeFast("CREATE INDEX IF NOT EXISTS seq_idx_messages_seq ON messages_seq(seq_in, seq_out);").stepThis().dispose();
            this.database.executeFast("ALTER TABLE enc_chats ADD COLUMN layer INTEGER default 0").stepThis().dispose();
            this.database.executeFast("ALTER TABLE enc_chats ADD COLUMN seq_in INTEGER default 0").stepThis().dispose();
            this.database.executeFast("ALTER TABLE enc_chats ADD COLUMN seq_out INTEGER default 0").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 7").stepThis().dispose();
            i = 7;
        }
        if (i == 7 || i == 8 || i == 9) {
            this.database.executeFast("ALTER TABLE enc_chats ADD COLUMN use_count INTEGER default 0").stepThis().dispose();
            this.database.executeFast("ALTER TABLE enc_chats ADD COLUMN exchange_id INTEGER default 0").stepThis().dispose();
            this.database.executeFast("ALTER TABLE enc_chats ADD COLUMN key_date INTEGER default 0").stepThis().dispose();
            this.database.executeFast("ALTER TABLE enc_chats ADD COLUMN fprint INTEGER default 0").stepThis().dispose();
            this.database.executeFast("ALTER TABLE enc_chats ADD COLUMN fauthkey BLOB default NULL").stepThis().dispose();
            this.database.executeFast("ALTER TABLE enc_chats ADD COLUMN khash BLOB default NULL").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 10").stepThis().dispose();
            i = 10;
        }
        if (i == 10) {
            this.database.executeFast("CREATE TABLE IF NOT EXISTS web_recent_v3(id TEXT, type INTEGER, image_url TEXT, thumb_url TEXT, local_url TEXT, width INTEGER, height INTEGER, size INTEGER, date INTEGER, PRIMARY KEY (id, type));").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 11").stepThis().dispose();
            i = 11;
        }
        if (i == 11 || i == 12) {
            this.database.executeFast("DROP INDEX IF EXISTS uid_mid_idx_media;").stepThis().dispose();
            this.database.executeFast("DROP INDEX IF EXISTS mid_idx_media;").stepThis().dispose();
            this.database.executeFast("DROP INDEX IF EXISTS uid_date_mid_idx_media;").stepThis().dispose();
            this.database.executeFast("DROP TABLE IF EXISTS media;").stepThis().dispose();
            this.database.executeFast("DROP TABLE IF EXISTS media_counts;").stepThis().dispose();
            this.database.executeFast("CREATE TABLE IF NOT EXISTS media_v2(mid INTEGER PRIMARY KEY, uid INTEGER, date INTEGER, type INTEGER, data BLOB)").stepThis().dispose();
            this.database.executeFast("CREATE TABLE IF NOT EXISTS media_counts_v2(uid INTEGER, type INTEGER, count INTEGER, PRIMARY KEY(uid, type))").stepThis().dispose();
            this.database.executeFast("CREATE INDEX IF NOT EXISTS uid_mid_type_date_idx_media ON media_v2(uid, mid, type, date);").stepThis().dispose();
            this.database.executeFast("CREATE TABLE IF NOT EXISTS keyvalue(id TEXT PRIMARY KEY, value TEXT)").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 13").stepThis().dispose();
            i = 13;
        }
        if (i == 13) {
            this.database.executeFast("ALTER TABLE messages ADD COLUMN replydata BLOB default NULL").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 14").stepThis().dispose();
            i = 14;
        }
        if (i == 14) {
            this.database.executeFast("CREATE TABLE IF NOT EXISTS hashtag_recent_v2(id TEXT PRIMARY KEY, date INTEGER);").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 15").stepThis().dispose();
            i = 15;
        }
        if (i == 15) {
            this.database.executeFast("CREATE TABLE IF NOT EXISTS webpage_pending(id INTEGER, mid INTEGER, PRIMARY KEY (id, mid));").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 16").stepThis().dispose();
            i = 16;
        }
        if (i == 16) {
            this.database.executeFast("ALTER TABLE dialogs ADD COLUMN inbox_max INTEGER default 0").stepThis().dispose();
            this.database.executeFast("ALTER TABLE dialogs ADD COLUMN outbox_max INTEGER default 0").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 17").stepThis().dispose();
            i = 17;
        }
        if (i == 17) {
            this.database.executeFast("CREATE TABLE bot_info(uid INTEGER PRIMARY KEY, info BLOB)").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 18").stepThis().dispose();
            i = 18;
        }
        if (i == 18) {
            this.database.executeFast("DROP TABLE IF EXISTS stickers;").stepThis().dispose();
            this.database.executeFast("CREATE TABLE IF NOT EXISTS stickers_v2(id INTEGER PRIMARY KEY, data BLOB, date INTEGER, hash INTEGER);").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 19").stepThis().dispose();
            i = 19;
        }
        if (i == 19) {
            this.database.executeFast("CREATE TABLE IF NOT EXISTS bot_keyboard(uid INTEGER PRIMARY KEY, mid INTEGER, info BLOB)").stepThis().dispose();
            this.database.executeFast("CREATE INDEX IF NOT EXISTS bot_keyboard_idx_mid ON bot_keyboard(mid);").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 20").stepThis().dispose();
            i = 20;
        }
        if (i == 20) {
            this.database.executeFast("CREATE TABLE search_recent(did INTEGER PRIMARY KEY, date INTEGER);").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 21").stepThis().dispose();
            i = 21;
        }
        if (i == 21) {
            this.database.executeFast("CREATE TABLE IF NOT EXISTS chat_settings_v2(uid INTEGER PRIMARY KEY, info BLOB)").stepThis().dispose();
            SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT uid, participants FROM chat_settings WHERE uid < 0", new Object[0]);
            SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO chat_settings_v2 VALUES(?, ?)");
            while (queryFinalized2.next()) {
                int intValue2 = queryFinalized2.intValue(0);
                NativeByteBuffer byteBufferValue2 = queryFinalized2.byteBufferValue(1);
                if (byteBufferValue2 != null) {
                    TLRPC$ChatParticipants TLdeserialize = TLRPC$ChatParticipants.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(false), false);
                    byteBufferValue2.reuse();
                    if (TLdeserialize != null) {
                        TLRPC$TL_chatFull tLRPC$TL_chatFull = new TLRPC$TL_chatFull();
                        tLRPC$TL_chatFull.id = intValue2;
                        tLRPC$TL_chatFull.chat_photo = new TLRPC$TL_photoEmpty();
                        tLRPC$TL_chatFull.notify_settings = new TLRPC$TL_peerNotifySettingsEmpty_layer77();
                        tLRPC$TL_chatFull.exported_invite = new TLRPC$TL_chatInviteEmpty();
                        tLRPC$TL_chatFull.participants = TLdeserialize;
                        NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$TL_chatFull.getObjectSize());
                        tLRPC$TL_chatFull.serializeToStream(nativeByteBuffer);
                        executeFast2.requery();
                        executeFast2.bindInteger(1, intValue2);
                        executeFast2.bindByteBuffer(2, nativeByteBuffer);
                        executeFast2.step();
                        nativeByteBuffer.reuse();
                    }
                }
            }
            executeFast2.dispose();
            queryFinalized2.dispose();
            this.database.executeFast("DROP TABLE IF EXISTS chat_settings;").stepThis().dispose();
            this.database.executeFast("ALTER TABLE dialogs ADD COLUMN last_mid_i INTEGER default 0").stepThis().dispose();
            this.database.executeFast("ALTER TABLE dialogs ADD COLUMN unread_count_i INTEGER default 0").stepThis().dispose();
            this.database.executeFast("ALTER TABLE dialogs ADD COLUMN pts INTEGER default 0").stepThis().dispose();
            this.database.executeFast("ALTER TABLE dialogs ADD COLUMN date_i INTEGER default 0").stepThis().dispose();
            this.database.executeFast("CREATE INDEX IF NOT EXISTS last_mid_i_idx_dialogs ON dialogs(last_mid_i);").stepThis().dispose();
            this.database.executeFast("CREATE INDEX IF NOT EXISTS unread_count_i_idx_dialogs ON dialogs(unread_count_i);").stepThis().dispose();
            this.database.executeFast("ALTER TABLE messages ADD COLUMN imp INTEGER default 0").stepThis().dispose();
            this.database.executeFast("CREATE TABLE IF NOT EXISTS messages_holes(uid INTEGER, start INTEGER, end INTEGER, PRIMARY KEY(uid, start));").stepThis().dispose();
            this.database.executeFast("CREATE INDEX IF NOT EXISTS uid_end_messages_holes ON messages_holes(uid, end);").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 22").stepThis().dispose();
            i = 22;
        }
        if (i == 22) {
            this.database.executeFast("CREATE TABLE IF NOT EXISTS media_holes_v2(uid INTEGER, type INTEGER, start INTEGER, end INTEGER, PRIMARY KEY(uid, type, start));").stepThis().dispose();
            this.database.executeFast("CREATE INDEX IF NOT EXISTS uid_end_media_holes_v2 ON media_holes_v2(uid, type, end);").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 23").stepThis().dispose();
            i = 23;
        }
        if (i == 23 || i == 24) {
            this.database.executeFast("DELETE FROM media_holes_v2 WHERE uid != 0 AND type >= 0 AND start IN (0, 1)").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 25").stepThis().dispose();
            i = 25;
        }
        if (i == 25 || i == 26) {
            this.database.executeFast("CREATE TABLE IF NOT EXISTS channel_users_v2(did INTEGER, uid INTEGER, date INTEGER, data BLOB, PRIMARY KEY(did, uid))").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 27").stepThis().dispose();
            i = 27;
        }
        if (i == 27) {
            this.database.executeFast("ALTER TABLE web_recent_v3 ADD COLUMN document BLOB default NULL").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 28").stepThis().dispose();
            i = 28;
        }
        if (i == 28 || i == 29) {
            this.database.executeFast("DELETE FROM sent_files_v2 WHERE 1").stepThis().dispose();
            this.database.executeFast("DELETE FROM download_queue WHERE 1").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 30").stepThis().dispose();
            i = 30;
        }
        if (i == 30) {
            this.database.executeFast("ALTER TABLE chat_settings_v2 ADD COLUMN pinned INTEGER default 0").stepThis().dispose();
            this.database.executeFast("CREATE INDEX IF NOT EXISTS chat_settings_pinned_idx ON chat_settings_v2(uid, pinned) WHERE pinned != 0;").stepThis().dispose();
            this.database.executeFast("CREATE TABLE IF NOT EXISTS chat_pinned(uid INTEGER PRIMARY KEY, pinned INTEGER, data BLOB)").stepThis().dispose();
            this.database.executeFast("CREATE INDEX IF NOT EXISTS chat_pinned_mid_idx ON chat_pinned(uid, pinned) WHERE pinned != 0;").stepThis().dispose();
            this.database.executeFast("CREATE TABLE IF NOT EXISTS users_data(uid INTEGER PRIMARY KEY, about TEXT)").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 31").stepThis().dispose();
            i = 31;
        }
        if (i == 31) {
            this.database.executeFast("DROP TABLE IF EXISTS bot_recent;").stepThis().dispose();
            this.database.executeFast("CREATE TABLE IF NOT EXISTS chat_hints(did INTEGER, type INTEGER, rating REAL, date INTEGER, PRIMARY KEY(did, type))").stepThis().dispose();
            this.database.executeFast("CREATE INDEX IF NOT EXISTS chat_hints_rating_idx ON chat_hints(rating);").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 32").stepThis().dispose();
            i = 32;
        }
        if (i == 32) {
            this.database.executeFast("DROP INDEX IF EXISTS uid_mid_idx_imp_messages;").stepThis().dispose();
            this.database.executeFast("DROP INDEX IF EXISTS uid_date_mid_imp_idx_messages;").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 33").stepThis().dispose();
            i = 33;
        }
        if (i == 33) {
            this.database.executeFast("CREATE TABLE IF NOT EXISTS pending_tasks(id INTEGER PRIMARY KEY, data BLOB);").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 34").stepThis().dispose();
            i = 34;
        }
        if (i == 34) {
            this.database.executeFast("CREATE TABLE IF NOT EXISTS stickers_featured(id INTEGER PRIMARY KEY, data BLOB, unread BLOB, date INTEGER, hash INTEGER);").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 35").stepThis().dispose();
            i = 35;
        }
        if (i == 35) {
            this.database.executeFast("CREATE TABLE IF NOT EXISTS requested_holes(uid INTEGER, seq_out_start INTEGER, seq_out_end INTEGER, PRIMARY KEY (uid, seq_out_start, seq_out_end));").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 36").stepThis().dispose();
            i = 36;
        }
        if (i == 36) {
            this.database.executeFast("ALTER TABLE enc_chats ADD COLUMN in_seq_no INTEGER default 0").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 37").stepThis().dispose();
            i = 37;
        }
        if (i == 37) {
            this.database.executeFast("CREATE TABLE IF NOT EXISTS botcache(id TEXT PRIMARY KEY, date INTEGER, data BLOB)").stepThis().dispose();
            this.database.executeFast("CREATE INDEX IF NOT EXISTS botcache_date_idx ON botcache(date);").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 38").stepThis().dispose();
            i = 38;
        }
        if (i == 38) {
            this.database.executeFast("ALTER TABLE dialogs ADD COLUMN pinned INTEGER default 0").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 39").stepThis().dispose();
            i = 39;
        }
        if (i == 39) {
            this.database.executeFast("ALTER TABLE enc_chats ADD COLUMN admin_id INTEGER default 0").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 40").stepThis().dispose();
            i = 40;
        }
        if (i == 40) {
            fixNotificationSettings();
            this.database.executeFast("PRAGMA user_version = 41").stepThis().dispose();
            i = 41;
        }
        if (i == 41) {
            this.database.executeFast("ALTER TABLE messages ADD COLUMN mention INTEGER default 0").stepThis().dispose();
            this.database.executeFast("ALTER TABLE user_contacts_v6 ADD COLUMN imported INTEGER default 0").stepThis().dispose();
            this.database.executeFast("CREATE INDEX IF NOT EXISTS uid_mention_idx_messages ON messages(uid, mention, read_state);").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 42").stepThis().dispose();
            i = 42;
        }
        if (i == 42) {
            this.database.executeFast("CREATE TABLE IF NOT EXISTS sharing_locations(uid INTEGER PRIMARY KEY, mid INTEGER, date INTEGER, period INTEGER, message BLOB);").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 43").stepThis().dispose();
            i = 43;
        }
        if (i == 43) {
            this.database.executeFast("PRAGMA user_version = 44").stepThis().dispose();
            i = 44;
        }
        if (i == 44) {
            this.database.executeFast("CREATE TABLE IF NOT EXISTS user_contacts_v7(key TEXT PRIMARY KEY, uid INTEGER, fname TEXT, sname TEXT, imported INTEGER)").stepThis().dispose();
            this.database.executeFast("CREATE TABLE IF NOT EXISTS user_phones_v7(key TEXT, phone TEXT, sphone TEXT, deleted INTEGER, PRIMARY KEY (key, phone))").stepThis().dispose();
            this.database.executeFast("CREATE INDEX IF NOT EXISTS sphone_deleted_idx_user_phones ON user_phones_v7(sphone, deleted);").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 45").stepThis().dispose();
            i = 45;
        }
        if (i == 45) {
            this.database.executeFast("ALTER TABLE enc_chats ADD COLUMN mtproto_seq INTEGER default 0").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 46").stepThis().dispose();
            i = 46;
        }
        if (i == 46) {
            this.database.executeFast("DELETE FROM botcache WHERE 1").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 47").stepThis().dispose();
            i = 47;
        }
        if (i == 47) {
            this.database.executeFast("ALTER TABLE dialogs ADD COLUMN flags INTEGER default 0").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 48").stepThis().dispose();
            i = 48;
        }
        if (i == 48) {
            this.database.executeFast("CREATE TABLE IF NOT EXISTS unread_push_messages(uid INTEGER, mid INTEGER, random INTEGER, date INTEGER, data BLOB, fm TEXT, name TEXT, uname TEXT, flags INTEGER, PRIMARY KEY(uid, mid))").stepThis().dispose();
            this.database.executeFast("CREATE INDEX IF NOT EXISTS unread_push_messages_idx_date ON unread_push_messages(date);").stepThis().dispose();
            this.database.executeFast("CREATE INDEX IF NOT EXISTS unread_push_messages_idx_random ON unread_push_messages(random);").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 49").stepThis().dispose();
            i = 49;
        }
        if (i == 49) {
            this.database.executeFast("DELETE FROM chat_pinned WHERE uid = 1").stepThis().dispose();
            this.database.executeFast("CREATE TABLE IF NOT EXISTS user_settings(uid INTEGER PRIMARY KEY, info BLOB, pinned INTEGER)").stepThis().dispose();
            this.database.executeFast("CREATE INDEX IF NOT EXISTS user_settings_pinned_idx ON user_settings(uid, pinned) WHERE pinned != 0;").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 50").stepThis().dispose();
            i = 50;
        }
        if (i == 50) {
            this.database.executeFast("DELETE FROM sent_files_v2 WHERE 1").stepThis().dispose();
            this.database.executeFast("ALTER TABLE sent_files_v2 ADD COLUMN parent TEXT").stepThis().dispose();
            this.database.executeFast("DELETE FROM download_queue WHERE 1").stepThis().dispose();
            this.database.executeFast("ALTER TABLE download_queue ADD COLUMN parent TEXT").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 51").stepThis().dispose();
            i = 51;
        }
        if (i == 51) {
            this.database.executeFast("ALTER TABLE media_counts_v2 ADD COLUMN old INTEGER").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 52").stepThis().dispose();
            i = 52;
        }
        if (i == 52) {
            this.database.executeFast("CREATE TABLE IF NOT EXISTS polls(mid INTEGER PRIMARY KEY, id INTEGER);").stepThis().dispose();
            this.database.executeFast("CREATE INDEX IF NOT EXISTS polls_id ON polls(id);").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 53").stepThis().dispose();
            i = 53;
        }
        if (i == 53) {
            this.database.executeFast("ALTER TABLE chat_settings_v2 ADD COLUMN online INTEGER default 0").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 54").stepThis().dispose();
            i = 54;
        }
        if (i == 54) {
            this.database.executeFast("DROP TABLE IF EXISTS wallpapers;").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 55").stepThis().dispose();
            i = 55;
        }
        if (i == 55) {
            this.database.executeFast("CREATE TABLE IF NOT EXISTS wallpapers2(uid INTEGER PRIMARY KEY, data BLOB, num INTEGER)").stepThis().dispose();
            this.database.executeFast("CREATE INDEX IF NOT EXISTS wallpapers_num ON wallpapers2(num);").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 56").stepThis().dispose();
            i = 56;
        }
        if (i == 56 || i == 57) {
            this.database.executeFast("CREATE TABLE IF NOT EXISTS emoji_keywords_v2(lang TEXT, keyword TEXT, emoji TEXT, PRIMARY KEY(lang, keyword, emoji));").stepThis().dispose();
            this.database.executeFast("CREATE TABLE IF NOT EXISTS emoji_keywords_info_v2(lang TEXT PRIMARY KEY, alias TEXT, version INTEGER);").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 58").stepThis().dispose();
            i = 58;
        }
        if (i == 58) {
            this.database.executeFast("CREATE INDEX IF NOT EXISTS emoji_keywords_v2_keyword ON emoji_keywords_v2(keyword);").stepThis().dispose();
            this.database.executeFast("ALTER TABLE emoji_keywords_info_v2 ADD COLUMN date INTEGER default 0").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 59").stepThis().dispose();
            i = 59;
        }
        if (i == 59) {
            this.database.executeFast("ALTER TABLE dialogs ADD COLUMN folder_id INTEGER default 0").stepThis().dispose();
            this.database.executeFast("ALTER TABLE dialogs ADD COLUMN data BLOB default NULL").stepThis().dispose();
            this.database.executeFast("CREATE INDEX IF NOT EXISTS folder_id_idx_dialogs ON dialogs(folder_id);").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 60").stepThis().dispose();
            i = 60;
        }
        if (i == 60) {
            this.database.executeFast("DROP TABLE IF EXISTS channel_admins;").stepThis().dispose();
            this.database.executeFast("DROP TABLE IF EXISTS blocked_users;").stepThis().dispose();
            this.database.executeFast("CREATE TABLE IF NOT EXISTS channel_admins_v2(did INTEGER, uid INTEGER, rank TEXT, PRIMARY KEY(did, uid))").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 61").stepThis().dispose();
            i = 61;
        }
        if (i == 61) {
            this.database.executeFast("DROP INDEX IF EXISTS send_state_idx_messages;").stepThis().dispose();
            this.database.executeFast("CREATE INDEX IF NOT EXISTS send_state_idx_messages2 ON messages(mid, send_state, date);").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 62").stepThis().dispose();
            i = 62;
        }
        if (i == 62) {
            this.database.executeFast("CREATE TABLE IF NOT EXISTS scheduled_messages(mid INTEGER PRIMARY KEY, uid INTEGER, send_state INTEGER, date INTEGER, data BLOB, ttl INTEGER, replydata BLOB)").stepThis().dispose();
            this.database.executeFast("CREATE INDEX IF NOT EXISTS send_state_idx_scheduled_messages ON scheduled_messages(mid, send_state, date);").stepThis().dispose();
            this.database.executeFast("CREATE INDEX IF NOT EXISTS uid_date_idx_scheduled_messages ON scheduled_messages(uid, date);").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 63").stepThis().dispose();
            i = 63;
        }
        if (i == 63) {
            this.database.executeFast("DELETE FROM download_queue WHERE 1").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 64").stepThis().dispose();
            i = 64;
        }
        if (i == 64) {
            this.database.executeFast("CREATE TABLE IF NOT EXISTS dialog_filter(id INTEGER PRIMARY KEY, ord INTEGER, unread_count INTEGER, flags INTEGER, title TEXT)").stepThis().dispose();
            this.database.executeFast("CREATE TABLE IF NOT EXISTS dialog_filter_ep(id INTEGER, peer INTEGER, PRIMARY KEY (id, peer))").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 65").stepThis().dispose();
            i = 65;
        }
        if (i == 65) {
            this.database.executeFast("CREATE INDEX IF NOT EXISTS flags_idx_dialogs ON dialogs(flags);").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 66").stepThis().dispose();
            i = 66;
        }
        if (i == 66) {
            this.database.executeFast("CREATE TABLE dialog_filter_pin_v2(id INTEGER, peer INTEGER, pin INTEGER, PRIMARY KEY (id, peer))").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 67").stepThis().dispose();
            i = 67;
        }
        if (i == 67) {
            this.database.executeFast("CREATE TABLE IF NOT EXISTS stickers_dice(emoji TEXT PRIMARY KEY, data BLOB, date INTEGER);").stepThis().dispose();
            this.database.executeFast("PRAGMA user_version = 68").stepThis().dispose();
        }
    }

    private void cleanupInternal(boolean z) {
        this.lastDateValue = 0;
        this.lastSeqValue = 0;
        this.lastPtsValue = 0;
        this.lastQtsValue = 0;
        this.lastSecretVersion = 0;
        this.mainUnreadCount = 0;
        this.archiveUnreadCount = 0;
        this.pendingMainUnreadCount = 0;
        this.pendingArchiveUnreadCount = 0;
        this.dialogFilters.clear();
        this.dialogFiltersMap.clear();
        this.unknownDialogsIds.clear();
        this.lastSavedSeq = 0;
        this.lastSavedPts = 0;
        this.lastSavedDate = 0;
        this.lastSavedQts = 0;
        this.secretPBytes = null;
        this.secretG = 0;
        SQLiteDatabase sQLiteDatabase = this.database;
        if (sQLiteDatabase != null) {
            sQLiteDatabase.close();
            this.database = null;
        }
        if (z) {
            File file = this.cacheFile;
            if (file != null) {
                file.delete();
                this.cacheFile = null;
            }
            File file2 = this.walCacheFile;
            if (file2 != null) {
                file2.delete();
                this.walCacheFile = null;
            }
            File file3 = this.shmCacheFile;
            if (file3 != null) {
                file3.delete();
                this.shmCacheFile = null;
            }
        }
    }

    public void cleanup(boolean z) {
        if (!z) {
            this.storageQueue.cleanupQueue();
        }
        this.storageQueue.postRunnable(new Runnable(z) {
            public final /* synthetic */ boolean f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesStorage.this.lambda$cleanup$3$MessagesStorage(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$cleanup$3$MessagesStorage(boolean z) {
        cleanupInternal(true);
        openDatabase(1);
        if (z) {
            Utilities.stageQueue.postRunnable(new Runnable() {
                public final void run() {
                    MessagesStorage.this.lambda$null$2$MessagesStorage();
                }
            });
        }
    }

    public /* synthetic */ void lambda$null$2$MessagesStorage() {
        getMessagesController().getDifference();
    }

    public void saveSecretParams(int i, int i2, byte[] bArr) {
        this.storageQueue.postRunnable(new Runnable(i, i2, bArr) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ int f$2;
            public final /* synthetic */ byte[] f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesStorage.this.lambda$saveSecretParams$4$MessagesStorage(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    public /* synthetic */ void lambda$saveSecretParams$4$MessagesStorage(int i, int i2, byte[] bArr) {
        try {
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE params SET lsv = ?, sg = ?, pbytes = ? WHERE id = 1");
            int i3 = 1;
            executeFast.bindInteger(1, i);
            executeFast.bindInteger(2, i2);
            if (bArr != null) {
                i3 = bArr.length;
            }
            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(i3);
            if (bArr != null) {
                nativeByteBuffer.writeBytes(bArr);
            }
            executeFast.bindByteBuffer(3, nativeByteBuffer);
            executeFast.step();
            executeFast.dispose();
            nativeByteBuffer.reuse();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    private void fixNotificationSettings() {
        this.storageQueue.postRunnable(new Runnable() {
            public final void run() {
                MessagesStorage.this.lambda$fixNotificationSettings$5$MessagesStorage();
            }
        });
    }

    public /* synthetic */ void lambda$fixNotificationSettings$5$MessagesStorage() {
        try {
            LongSparseArray longSparseArray = new LongSparseArray();
            Map<String, ?> all = MessagesController.getNotificationsSettings(this.currentAccount).getAll();
            for (Map.Entry next : all.entrySet()) {
                String str = (String) next.getKey();
                if (str.startsWith("notify2_")) {
                    Integer num = (Integer) next.getValue();
                    if (num.intValue() == 2 || num.intValue() == 3) {
                        String replace = str.replace("notify2_", "");
                        long j = 1;
                        if (num.intValue() != 2) {
                            Integer num2 = (Integer) all.get("notifyuntil_" + replace);
                            if (num2 != null) {
                                j = 1 | (((long) num2.intValue()) << 32);
                            }
                        }
                        longSparseArray.put(Long.parseLong(replace), Long.valueOf(j));
                    }
                }
            }
            try {
                this.database.beginTransaction();
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO dialog_settings VALUES(?, ?)");
                for (int i = 0; i < longSparseArray.size(); i++) {
                    executeFast.requery();
                    executeFast.bindLong(1, longSparseArray.keyAt(i));
                    executeFast.bindLong(2, ((Long) longSparseArray.valueAt(i)).longValue());
                    executeFast.step();
                }
                executeFast.dispose();
                this.database.commitTransaction();
            } catch (Exception e) {
                FileLog.e((Throwable) e);
            }
        } catch (Exception e2) {
            e2.printStackTrace();
        } catch (Throwable th) {
            FileLog.e(th);
        }
    }

    public long createPendingTask(NativeByteBuffer nativeByteBuffer) {
        if (nativeByteBuffer == null) {
            return 0;
        }
        long andAdd = this.lastTaskId.getAndAdd(1);
        this.storageQueue.postRunnable(new Runnable(andAdd, nativeByteBuffer) {
            public final /* synthetic */ long f$1;
            public final /* synthetic */ NativeByteBuffer f$2;

            {
                this.f$1 = r2;
                this.f$2 = r4;
            }

            public final void run() {
                MessagesStorage.this.lambda$createPendingTask$6$MessagesStorage(this.f$1, this.f$2);
            }
        });
        return andAdd;
    }

    public /* synthetic */ void lambda$createPendingTask$6$MessagesStorage(long j, NativeByteBuffer nativeByteBuffer) {
        try {
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO pending_tasks VALUES(?, ?)");
            executeFast.bindLong(1, j);
            executeFast.bindByteBuffer(2, nativeByteBuffer);
            executeFast.step();
            executeFast.dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        } catch (Throwable th) {
            nativeByteBuffer.reuse();
            throw th;
        }
        nativeByteBuffer.reuse();
    }

    public void removePendingTask(long j) {
        this.storageQueue.postRunnable(new Runnable(j) {
            public final /* synthetic */ long f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesStorage.this.lambda$removePendingTask$7$MessagesStorage(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$removePendingTask$7$MessagesStorage(long j) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM pending_tasks WHERE id = " + j).stepThis().dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    private void loadPendingTasks() {
        this.storageQueue.postRunnable(new Runnable() {
            public final void run() {
                MessagesStorage.this.lambda$loadPendingTasks$23$MessagesStorage();
            }
        });
    }

    public /* synthetic */ void lambda$loadPendingTasks$23$MessagesStorage() {
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT id, data FROM pending_tasks WHERE 1", new Object[0]);
            while (queryFinalized.next()) {
                long longValue = queryFinalized.longValue(0);
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(1);
                if (byteBufferValue != null) {
                    int readInt32 = byteBufferValue.readInt32(false);
                    switch (readInt32) {
                        case 0:
                            TLRPC$Chat TLdeserialize = TLRPC$Chat.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            if (TLdeserialize != null) {
                                Utilities.stageQueue.postRunnable(new Runnable(TLdeserialize, longValue) {
                                    public final /* synthetic */ TLRPC$Chat f$1;
                                    public final /* synthetic */ long f$2;

                                    {
                                        this.f$1 = r2;
                                        this.f$2 = r3;
                                    }

                                    public final void run() {
                                        MessagesStorage.this.lambda$null$8$MessagesStorage(this.f$1, this.f$2);
                                    }
                                });
                                break;
                            }
                            break;
                        case 1:
                            Utilities.stageQueue.postRunnable(new Runnable(byteBufferValue.readInt32(false), byteBufferValue.readInt32(false), longValue) {
                                public final /* synthetic */ int f$1;
                                public final /* synthetic */ int f$2;
                                public final /* synthetic */ long f$3;

                                {
                                    this.f$1 = r2;
                                    this.f$2 = r3;
                                    this.f$3 = r4;
                                }

                                public final void run() {
                                    MessagesStorage.this.lambda$null$9$MessagesStorage(this.f$1, this.f$2, this.f$3);
                                }
                            });
                            break;
                        case 2:
                        case 5:
                        case 8:
                        case 10:
                        case 14:
                            TLRPC$TL_dialog tLRPC$TL_dialog = new TLRPC$TL_dialog();
                            tLRPC$TL_dialog.id = byteBufferValue.readInt64(false);
                            tLRPC$TL_dialog.top_message = byteBufferValue.readInt32(false);
                            tLRPC$TL_dialog.read_inbox_max_id = byteBufferValue.readInt32(false);
                            tLRPC$TL_dialog.read_outbox_max_id = byteBufferValue.readInt32(false);
                            tLRPC$TL_dialog.unread_count = byteBufferValue.readInt32(false);
                            tLRPC$TL_dialog.last_message_date = byteBufferValue.readInt32(false);
                            tLRPC$TL_dialog.pts = byteBufferValue.readInt32(false);
                            tLRPC$TL_dialog.flags = byteBufferValue.readInt32(false);
                            if (readInt32 >= 5) {
                                tLRPC$TL_dialog.pinned = byteBufferValue.readBool(false);
                                tLRPC$TL_dialog.pinnedNum = byteBufferValue.readInt32(false);
                            }
                            if (readInt32 >= 8) {
                                tLRPC$TL_dialog.unread_mentions_count = byteBufferValue.readInt32(false);
                            }
                            if (readInt32 >= 10) {
                                tLRPC$TL_dialog.unread_mark = byteBufferValue.readBool(false);
                            }
                            if (readInt32 >= 14) {
                                tLRPC$TL_dialog.folder_id = byteBufferValue.readInt32(false);
                            }
                            AndroidUtilities.runOnUIThread(new Runnable(tLRPC$TL_dialog, TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false), longValue) {
                                public final /* synthetic */ TLRPC$Dialog f$1;
                                public final /* synthetic */ TLRPC$InputPeer f$2;
                                public final /* synthetic */ long f$3;

                                {
                                    this.f$1 = r2;
                                    this.f$2 = r3;
                                    this.f$3 = r4;
                                }

                                public final void run() {
                                    MessagesStorage.this.lambda$null$10$MessagesStorage(this.f$1, this.f$2, this.f$3);
                                }
                            });
                            break;
                        case 3:
                            getSendMessagesHelper().sendGame(TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false), (TLRPC$TL_inputMediaGame) TLRPC$InputMedia.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false), byteBufferValue.readInt64(false), longValue);
                            break;
                        case 4:
                            AndroidUtilities.runOnUIThread(new Runnable(byteBufferValue.readInt64(false), byteBufferValue.readBool(false), TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false), longValue) {
                                public final /* synthetic */ long f$1;
                                public final /* synthetic */ boolean f$2;
                                public final /* synthetic */ TLRPC$InputPeer f$3;
                                public final /* synthetic */ long f$4;

                                {
                                    this.f$1 = r2;
                                    this.f$2 = r4;
                                    this.f$3 = r5;
                                    this.f$4 = r6;
                                }

                                public final void run() {
                                    MessagesStorage.this.lambda$null$11$MessagesStorage(this.f$1, this.f$2, this.f$3, this.f$4);
                                }
                            });
                            break;
                        case 6:
                            Utilities.stageQueue.postRunnable(new Runnable(byteBufferValue.readInt32(false), byteBufferValue.readInt32(false), longValue, TLRPC$InputChannel.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false)) {
                                public final /* synthetic */ int f$1;
                                public final /* synthetic */ int f$2;
                                public final /* synthetic */ long f$3;
                                public final /* synthetic */ TLRPC$InputChannel f$4;

                                {
                                    this.f$1 = r2;
                                    this.f$2 = r3;
                                    this.f$3 = r4;
                                    this.f$4 = r6;
                                }

                                public final void run() {
                                    MessagesStorage.this.lambda$null$12$MessagesStorage(this.f$1, this.f$2, this.f$3, this.f$4);
                                }
                            });
                            break;
                        case 7:
                            int readInt322 = byteBufferValue.readInt32(false);
                            int readInt323 = byteBufferValue.readInt32(false);
                            TLObject TLdeserialize2 = TLRPC$TL_messages_deleteMessages.TLdeserialize(byteBufferValue, readInt323, false);
                            TLObject TLdeserialize3 = TLdeserialize2 == null ? TLRPC$TL_channels_deleteMessages.TLdeserialize(byteBufferValue, readInt323, false) : TLdeserialize2;
                            if (TLdeserialize3 != null) {
                                AndroidUtilities.runOnUIThread(new Runnable(readInt322, longValue, TLdeserialize3) {
                                    public final /* synthetic */ int f$1;
                                    public final /* synthetic */ long f$2;
                                    public final /* synthetic */ TLObject f$3;

                                    {
                                        this.f$1 = r2;
                                        this.f$2 = r3;
                                        this.f$3 = r5;
                                    }

                                    public final void run() {
                                        MessagesStorage.this.lambda$null$13$MessagesStorage(this.f$1, this.f$2, this.f$3);
                                    }
                                });
                                break;
                            } else {
                                removePendingTask(longValue);
                                break;
                            }
                        case 9:
                            AndroidUtilities.runOnUIThread(new Runnable(byteBufferValue.readInt64(false), TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false), longValue) {
                                public final /* synthetic */ long f$1;
                                public final /* synthetic */ TLRPC$InputPeer f$2;
                                public final /* synthetic */ long f$3;

                                {
                                    this.f$1 = r2;
                                    this.f$2 = r4;
                                    this.f$3 = r5;
                                }

                                public final void run() {
                                    MessagesStorage.this.lambda$null$14$MessagesStorage(this.f$1, this.f$2, this.f$3);
                                }
                            });
                            break;
                        case 11:
                            int readInt324 = byteBufferValue.readInt32(false);
                            int readInt325 = byteBufferValue.readInt32(false);
                            AndroidUtilities.runOnUIThread(new Runnable(readInt324, readInt325, readInt325 != 0 ? TLRPC$InputChannel.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false) : null, byteBufferValue.readInt32(false), longValue) {
                                public final /* synthetic */ int f$1;
                                public final /* synthetic */ int f$2;
                                public final /* synthetic */ TLRPC$InputChannel f$3;
                                public final /* synthetic */ int f$4;
                                public final /* synthetic */ long f$5;

                                {
                                    this.f$1 = r2;
                                    this.f$2 = r3;
                                    this.f$3 = r4;
                                    this.f$4 = r5;
                                    this.f$5 = r6;
                                }

                                public final void run() {
                                    MessagesStorage.this.lambda$null$15$MessagesStorage(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5);
                                }
                            });
                            break;
                        case 12:
                        case 19:
                        case 20:
                            removePendingTask(longValue);
                            break;
                        case 13:
                            AndroidUtilities.runOnUIThread(new Runnable(byteBufferValue.readInt64(false), byteBufferValue.readBool(false), byteBufferValue.readInt32(false), byteBufferValue.readInt32(false), byteBufferValue.readBool(false), TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false), longValue) {
                                public final /* synthetic */ long f$1;
                                public final /* synthetic */ boolean f$2;
                                public final /* synthetic */ int f$3;
                                public final /* synthetic */ int f$4;
                                public final /* synthetic */ boolean f$5;
                                public final /* synthetic */ TLRPC$InputPeer f$6;
                                public final /* synthetic */ long f$7;

                                {
                                    this.f$1 = r2;
                                    this.f$2 = r4;
                                    this.f$3 = r5;
                                    this.f$4 = r6;
                                    this.f$5 = r7;
                                    this.f$6 = r8;
                                    this.f$7 = r9;
                                }

                                public final void run() {
                                    MessagesStorage.this.lambda$null$17$MessagesStorage(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7);
                                }
                            });
                            break;
                        case 15:
                            Utilities.stageQueue.postRunnable(new Runnable(TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false), longValue) {
                                public final /* synthetic */ TLRPC$InputPeer f$1;
                                public final /* synthetic */ long f$2;

                                {
                                    this.f$1 = r2;
                                    this.f$2 = r3;
                                }

                                public final void run() {
                                    MessagesStorage.this.lambda$null$18$MessagesStorage(this.f$1, this.f$2);
                                }
                            });
                            break;
                        case 16:
                            int readInt326 = byteBufferValue.readInt32(false);
                            int readInt327 = byteBufferValue.readInt32(false);
                            ArrayList arrayList = new ArrayList();
                            for (int i = 0; i < readInt327; i++) {
                                arrayList.add(TLRPC$InputDialogPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false));
                            }
                            AndroidUtilities.runOnUIThread(new Runnable(readInt326, arrayList, longValue) {
                                public final /* synthetic */ int f$1;
                                public final /* synthetic */ ArrayList f$2;
                                public final /* synthetic */ long f$3;

                                {
                                    this.f$1 = r2;
                                    this.f$2 = r3;
                                    this.f$3 = r4;
                                }

                                public final void run() {
                                    MessagesStorage.this.lambda$null$19$MessagesStorage(this.f$1, this.f$2, this.f$3);
                                }
                            });
                            break;
                        case 17:
                            int readInt328 = byteBufferValue.readInt32(false);
                            int readInt329 = byteBufferValue.readInt32(false);
                            ArrayList arrayList2 = new ArrayList();
                            for (int i2 = 0; i2 < readInt329; i2++) {
                                arrayList2.add(TLRPC$TL_inputFolderPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false));
                            }
                            AndroidUtilities.runOnUIThread(new Runnable(readInt328, arrayList2, longValue) {
                                public final /* synthetic */ int f$1;
                                public final /* synthetic */ ArrayList f$2;
                                public final /* synthetic */ long f$3;

                                {
                                    this.f$1 = r2;
                                    this.f$2 = r3;
                                    this.f$3 = r4;
                                }

                                public final void run() {
                                    MessagesStorage.this.lambda$null$20$MessagesStorage(this.f$1, this.f$2, this.f$3);
                                }
                            });
                            break;
                        case 18:
                            long readInt64 = byteBufferValue.readInt64(false);
                            int readInt3210 = byteBufferValue.readInt32(false);
                            TLRPC$TL_messages_deleteScheduledMessages TLdeserialize4 = TLRPC$TL_messages_deleteScheduledMessages.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            if (TLdeserialize4 != null) {
                                AndroidUtilities.runOnUIThread(new Runnable(readInt64, readInt3210, longValue, TLdeserialize4) {
                                    public final /* synthetic */ long f$1;
                                    public final /* synthetic */ int f$2;
                                    public final /* synthetic */ long f$3;
                                    public final /* synthetic */ TLObject f$4;

                                    {
                                        this.f$1 = r2;
                                        this.f$2 = r4;
                                        this.f$3 = r5;
                                        this.f$4 = r7;
                                    }

                                    public final void run() {
                                        MessagesStorage.this.lambda$null$21$MessagesStorage(this.f$1, this.f$2, this.f$3, this.f$4);
                                    }
                                });
                                break;
                            } else {
                                removePendingTask(longValue);
                                break;
                            }
                        case 21:
                            Theme.OverrideWallpaperInfo overrideWallpaperInfo = new Theme.OverrideWallpaperInfo();
                            byteBufferValue.readInt64(false);
                            overrideWallpaperInfo.isBlurred = byteBufferValue.readBool(false);
                            overrideWallpaperInfo.isMotion = byteBufferValue.readBool(false);
                            overrideWallpaperInfo.color = byteBufferValue.readInt32(false);
                            overrideWallpaperInfo.gradientColor = byteBufferValue.readInt32(false);
                            overrideWallpaperInfo.rotation = byteBufferValue.readInt32(false);
                            overrideWallpaperInfo.intensity = (float) byteBufferValue.readDouble(false);
                            boolean readBool = byteBufferValue.readBool(false);
                            overrideWallpaperInfo.slug = byteBufferValue.readString(false);
                            overrideWallpaperInfo.originalFileName = byteBufferValue.readString(false);
                            AndroidUtilities.runOnUIThread(new Runnable(overrideWallpaperInfo, readBool, longValue) {
                                public final /* synthetic */ Theme.OverrideWallpaperInfo f$1;
                                public final /* synthetic */ boolean f$2;
                                public final /* synthetic */ long f$3;

                                {
                                    this.f$1 = r2;
                                    this.f$2 = r3;
                                    this.f$3 = r4;
                                }

                                public final void run() {
                                    MessagesStorage.this.lambda$null$16$MessagesStorage(this.f$1, this.f$2, this.f$3);
                                }
                            });
                            break;
                        case 22:
                            AndroidUtilities.runOnUIThread(new Runnable(TLRPC$InputPeer.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false), longValue) {
                                public final /* synthetic */ TLRPC$InputPeer f$1;
                                public final /* synthetic */ long f$2;

                                {
                                    this.f$1 = r2;
                                    this.f$2 = r3;
                                }

                                public final void run() {
                                    MessagesStorage.this.lambda$null$22$MessagesStorage(this.f$1, this.f$2);
                                }
                            });
                            break;
                    }
                    byteBufferValue.reuse();
                }
            }
            queryFinalized.dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public /* synthetic */ void lambda$null$8$MessagesStorage(TLRPC$Chat tLRPC$Chat, long j) {
        getMessagesController().loadUnknownChannel(tLRPC$Chat, j);
    }

    public /* synthetic */ void lambda$null$9$MessagesStorage(int i, int i2, long j) {
        getMessagesController().getChannelDifference(i, i2, j, (TLRPC$InputChannel) null);
    }

    public /* synthetic */ void lambda$null$10$MessagesStorage(TLRPC$Dialog tLRPC$Dialog, TLRPC$InputPeer tLRPC$InputPeer, long j) {
        getMessagesController().checkLastDialogMessage(tLRPC$Dialog, tLRPC$InputPeer, j);
    }

    public /* synthetic */ void lambda$null$11$MessagesStorage(long j, boolean z, TLRPC$InputPeer tLRPC$InputPeer, long j2) {
        getMessagesController().pinDialog(j, z, tLRPC$InputPeer, j2);
    }

    public /* synthetic */ void lambda$null$12$MessagesStorage(int i, int i2, long j, TLRPC$InputChannel tLRPC$InputChannel) {
        getMessagesController().getChannelDifference(i, i2, j, tLRPC$InputChannel);
    }

    public /* synthetic */ void lambda$null$13$MessagesStorage(int i, long j, TLObject tLObject) {
        getMessagesController().deleteMessages((ArrayList<Integer>) null, (ArrayList<Long>) null, (TLRPC$EncryptedChat) null, 0, i, true, false, j, tLObject);
    }

    public /* synthetic */ void lambda$null$14$MessagesStorage(long j, TLRPC$InputPeer tLRPC$InputPeer, long j2) {
        getMessagesController().markDialogAsUnread(j, tLRPC$InputPeer, j2);
    }

    public /* synthetic */ void lambda$null$15$MessagesStorage(int i, int i2, TLRPC$InputChannel tLRPC$InputChannel, int i3, long j) {
        getMessagesController().markMessageAsRead(i, i2, tLRPC$InputChannel, i3, j);
    }

    public /* synthetic */ void lambda$null$16$MessagesStorage(Theme.OverrideWallpaperInfo overrideWallpaperInfo, boolean z, long j) {
        getMessagesController().saveWallpaperToServer((File) null, overrideWallpaperInfo, z, j);
    }

    public /* synthetic */ void lambda$null$17$MessagesStorage(long j, boolean z, int i, int i2, boolean z2, TLRPC$InputPeer tLRPC$InputPeer, long j2) {
        getMessagesController().deleteDialog(j, z, i, i2, z2, tLRPC$InputPeer, j2);
    }

    public /* synthetic */ void lambda$null$18$MessagesStorage(TLRPC$InputPeer tLRPC$InputPeer, long j) {
        getMessagesController().loadUnknownDialog(tLRPC$InputPeer, j);
    }

    public /* synthetic */ void lambda$null$19$MessagesStorage(int i, ArrayList arrayList, long j) {
        getMessagesController().reorderPinnedDialogs(i, arrayList, j);
    }

    public /* synthetic */ void lambda$null$20$MessagesStorage(int i, ArrayList arrayList, long j) {
        getMessagesController().addDialogToFolder((ArrayList<Long>) null, i, -1, arrayList, j);
    }

    public /* synthetic */ void lambda$null$21$MessagesStorage(long j, int i, long j2, TLObject tLObject) {
        MessagesController.getInstance(this.currentAccount).deleteMessages((ArrayList<Integer>) null, (ArrayList<Long>) null, (TLRPC$EncryptedChat) null, j, i, true, true, j2, tLObject);
    }

    public /* synthetic */ void lambda$null$22$MessagesStorage(TLRPC$InputPeer tLRPC$InputPeer, long j) {
        getMessagesController().reloadMentionsCountForChannel(tLRPC$InputPeer, j);
    }

    public void saveChannelPts(int i, int i2) {
        this.storageQueue.postRunnable(new Runnable(i2, i) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ int f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesStorage.this.lambda$saveChannelPts$24$MessagesStorage(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$saveChannelPts$24$MessagesStorage(int i, int i2) {
        try {
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE dialogs SET pts = ? WHERE did = ?");
            executeFast.bindInteger(1, i);
            executeFast.bindInteger(2, -i2);
            executeFast.step();
            executeFast.dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: saveDiffParamsInternal */
    public void lambda$saveDiffParams$25$MessagesStorage(int i, int i2, int i3, int i4) {
        try {
            if (this.lastSavedSeq != i || this.lastSavedPts != i2 || this.lastSavedDate != i3 || this.lastQtsValue != i4) {
                SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE params SET seq = ?, pts = ?, date = ?, qts = ? WHERE id = 1");
                executeFast.bindInteger(1, i);
                executeFast.bindInteger(2, i2);
                executeFast.bindInteger(3, i3);
                executeFast.bindInteger(4, i4);
                executeFast.step();
                executeFast.dispose();
                this.lastSavedSeq = i;
                this.lastSavedPts = i2;
                this.lastSavedDate = i3;
                this.lastSavedQts = i4;
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void saveDiffParams(int i, int i2, int i3, int i4) {
        this.storageQueue.postRunnable(new Runnable(i, i2, i3, i4) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ int f$2;
            public final /* synthetic */ int f$3;
            public final /* synthetic */ int f$4;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
            }

            public final void run() {
                MessagesStorage.this.lambda$saveDiffParams$25$MessagesStorage(this.f$1, this.f$2, this.f$3, this.f$4);
            }
        });
    }

    public /* synthetic */ void lambda$updateMutedDialogsFiltersCounters$26$MessagesStorage() {
        resetAllUnreadCounters(true);
    }

    public void updateMutedDialogsFiltersCounters() {
        this.storageQueue.postRunnable(new Runnable() {
            public final void run() {
                MessagesStorage.this.lambda$updateMutedDialogsFiltersCounters$26$MessagesStorage();
            }
        });
    }

    public void setDialogFlags(long j, long j2) {
        this.storageQueue.postRunnable(new Runnable(j, j2) {
            public final /* synthetic */ long f$1;
            public final /* synthetic */ long f$2;

            {
                this.f$1 = r2;
                this.f$2 = r4;
            }

            public final void run() {
                MessagesStorage.this.lambda$setDialogFlags$27$MessagesStorage(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$setDialogFlags$27$MessagesStorage(long j, long j2) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT flags FROM dialog_settings WHERE did = " + j, new Object[0]);
            int intValue = queryFinalized.next() ? queryFinalized.intValue(0) : 0;
            queryFinalized.dispose();
            if (j2 != ((long) intValue)) {
                this.database.executeFast(String.format(Locale.US, "REPLACE INTO dialog_settings VALUES(%d, %d)", new Object[]{Long.valueOf(j), Long.valueOf(j2)})).stepThis().dispose();
                resetAllUnreadCounters(true);
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void putPushMessage(MessageObject messageObject) {
        this.storageQueue.postRunnable(new Runnable(messageObject) {
            public final /* synthetic */ MessageObject f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesStorage.this.lambda$putPushMessage$28$MessagesStorage(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$putPushMessage$28$MessagesStorage(MessageObject messageObject) {
        try {
            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(messageObject.messageOwner.getObjectSize());
            messageObject.messageOwner.serializeToStream(nativeByteBuffer);
            long id = (long) messageObject.getId();
            if (messageObject.messageOwner.to_id.channel_id != 0) {
                id |= ((long) messageObject.messageOwner.to_id.channel_id) << 32;
            }
            int i = 0;
            if (messageObject.localType == 2) {
                i = 1;
            }
            if (messageObject.localChannel) {
                i |= 2;
            }
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO unread_push_messages VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)");
            executeFast.requery();
            executeFast.bindLong(1, messageObject.getDialogId());
            executeFast.bindLong(2, id);
            executeFast.bindLong(3, messageObject.messageOwner.random_id);
            executeFast.bindInteger(4, messageObject.messageOwner.date);
            executeFast.bindByteBuffer(5, nativeByteBuffer);
            if (messageObject.messageText == null) {
                executeFast.bindNull(6);
            } else {
                executeFast.bindString(6, messageObject.messageText.toString());
            }
            if (messageObject.localName == null) {
                executeFast.bindNull(7);
            } else {
                executeFast.bindString(7, messageObject.localName);
            }
            if (messageObject.localUserName == null) {
                executeFast.bindNull(8);
            } else {
                executeFast.bindString(8, messageObject.localUserName);
            }
            executeFast.bindInteger(9, i);
            executeFast.step();
            nativeByteBuffer.reuse();
            executeFast.dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    private static class ReadDialog {
        public int date;
        public int lastMid;
        public int unreadCount;

        private ReadDialog() {
        }
    }

    public void readAllDialogs(int i) {
        this.storageQueue.postRunnable(new Runnable(i) {
            public final /* synthetic */ int f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesStorage.this.lambda$readAllDialogs$30$MessagesStorage(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$readAllDialogs$30$MessagesStorage(int i) {
        SQLiteCursor sQLiteCursor;
        try {
            ArrayList arrayList = new ArrayList();
            ArrayList arrayList2 = new ArrayList();
            ArrayList arrayList3 = new ArrayList();
            LongSparseArray longSparseArray = new LongSparseArray();
            if (i >= 0) {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT did, last_mid, unread_count, date FROM dialogs WHERE unread_count > 0 AND folder_id = %1$d", new Object[]{Integer.valueOf(i)}), new Object[0]);
            } else {
                sQLiteCursor = this.database.queryFinalized("SELECT did, last_mid, unread_count, date FROM dialogs WHERE unread_count > 0", new Object[0]);
            }
            while (sQLiteCursor.next()) {
                long longValue = sQLiteCursor.longValue(0);
                if (!DialogObject.isFolderDialogId(longValue)) {
                    ReadDialog readDialog = new ReadDialog();
                    readDialog.lastMid = sQLiteCursor.intValue(1);
                    readDialog.unreadCount = sQLiteCursor.intValue(2);
                    readDialog.date = sQLiteCursor.intValue(3);
                    longSparseArray.put(longValue, readDialog);
                    int i2 = (int) longValue;
                    int i3 = (int) (longValue >> 32);
                    if (i2 != 0) {
                        if (i2 < 0) {
                            int i4 = -i2;
                            if (!arrayList2.contains(Integer.valueOf(i4))) {
                                arrayList2.add(Integer.valueOf(i4));
                            }
                        } else if (!arrayList.contains(Integer.valueOf(i2))) {
                            arrayList.add(Integer.valueOf(i2));
                        }
                    } else if (!arrayList3.contains(Integer.valueOf(i3))) {
                        arrayList3.add(Integer.valueOf(i3));
                    }
                }
            }
            sQLiteCursor.dispose();
            ArrayList arrayList4 = new ArrayList();
            ArrayList arrayList5 = new ArrayList();
            ArrayList arrayList6 = new ArrayList();
            if (!arrayList3.isEmpty()) {
                getEncryptedChatsInternal(TextUtils.join(",", arrayList3), arrayList6, arrayList);
            }
            if (!arrayList.isEmpty()) {
                getUsersInternal(TextUtils.join(",", arrayList), arrayList4);
            }
            if (!arrayList2.isEmpty()) {
                getChatsInternal(TextUtils.join(",", arrayList2), arrayList5);
            }
            AndroidUtilities.runOnUIThread(new Runnable(arrayList4, arrayList5, arrayList6, longSparseArray) {
                public final /* synthetic */ ArrayList f$1;
                public final /* synthetic */ ArrayList f$2;
                public final /* synthetic */ ArrayList f$3;
                public final /* synthetic */ LongSparseArray f$4;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r5;
                }

                public final void run() {
                    MessagesStorage.this.lambda$null$29$MessagesStorage(this.f$1, this.f$2, this.f$3, this.f$4);
                }
            });
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public /* synthetic */ void lambda$null$29$MessagesStorage(ArrayList arrayList, ArrayList arrayList2, ArrayList arrayList3, LongSparseArray longSparseArray) {
        getMessagesController().putUsers(arrayList, true);
        getMessagesController().putChats(arrayList2, true);
        getMessagesController().putEncryptedChats(arrayList3, true);
        for (int i = 0; i < longSparseArray.size(); i++) {
            long keyAt = longSparseArray.keyAt(i);
            ReadDialog readDialog = (ReadDialog) longSparseArray.valueAt(i);
            MessagesController messagesController = getMessagesController();
            int i2 = readDialog.lastMid;
            messagesController.markDialogAsRead(keyAt, i2, i2, readDialog.date, false, readDialog.unreadCount, true, 0);
        }
    }

    private TLRPC$messages_Dialogs loadDialogsByIds(String str, ArrayList<Integer> arrayList, ArrayList<Integer> arrayList2, ArrayList<Integer> arrayList3) throws Exception {
        TLRPC$Message tLRPC$Message;
        NativeByteBuffer byteBufferValue;
        ArrayList<Integer> arrayList4 = arrayList;
        ArrayList<Integer> arrayList5 = arrayList2;
        ArrayList<Integer> arrayList6 = arrayList3;
        TLRPC$TL_messages_dialogs tLRPC$TL_messages_dialogs = new TLRPC$TL_messages_dialogs();
        ArrayList arrayList7 = new ArrayList();
        LongSparseArray longSparseArray = new LongSparseArray();
        boolean z = false;
        SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, s.flags, m.date, d.pts, d.inbox_max, d.outbox_max, m.replydata, d.pinned, d.unread_count_i, d.flags, d.folder_id, d.data FROM dialogs as d LEFT JOIN messages as m ON d.last_mid = m.mid LEFT JOIN dialog_settings as s ON d.did = s.did WHERE d.did IN (%s) ORDER BY d.pinned DESC, d.date DESC", new Object[]{str}), new Object[0]);
        while (queryFinalized.next()) {
            long longValue = queryFinalized.longValue(z ? 1 : 0);
            TLRPC$TL_dialog tLRPC$TL_dialog = new TLRPC$TL_dialog();
            tLRPC$TL_dialog.id = longValue;
            tLRPC$TL_dialog.top_message = queryFinalized.intValue(1);
            tLRPC$TL_dialog.unread_count = queryFinalized.intValue(2);
            tLRPC$TL_dialog.last_message_date = queryFinalized.intValue(3);
            int intValue = queryFinalized.intValue(10);
            tLRPC$TL_dialog.pts = intValue;
            tLRPC$TL_dialog.flags = (intValue == 0 || ((int) tLRPC$TL_dialog.id) > 0) ? 0 : 1;
            tLRPC$TL_dialog.read_inbox_max_id = queryFinalized.intValue(11);
            tLRPC$TL_dialog.read_outbox_max_id = queryFinalized.intValue(12);
            int intValue2 = queryFinalized.intValue(14);
            tLRPC$TL_dialog.pinnedNum = intValue2;
            tLRPC$TL_dialog.pinned = intValue2 != 0;
            tLRPC$TL_dialog.unread_mentions_count = queryFinalized.intValue(15);
            tLRPC$TL_dialog.unread_mark = (queryFinalized.intValue(16) & 1) != 0;
            long longValue2 = queryFinalized.longValue(8);
            TLRPC$TL_peerNotifySettings tLRPC$TL_peerNotifySettings = new TLRPC$TL_peerNotifySettings();
            tLRPC$TL_dialog.notify_settings = tLRPC$TL_peerNotifySettings;
            if ((((int) longValue2) & 1) != 0) {
                int i = (int) (longValue2 >> 32);
                tLRPC$TL_peerNotifySettings.mute_until = i;
                if (i == 0) {
                    tLRPC$TL_peerNotifySettings.mute_until = Integer.MAX_VALUE;
                }
            }
            tLRPC$TL_dialog.folder_id = queryFinalized.intValue(17);
            tLRPC$TL_messages_dialogs.dialogs.add(tLRPC$TL_dialog);
            NativeByteBuffer byteBufferValue2 = queryFinalized.byteBufferValue(4);
            if (byteBufferValue2 != null) {
                TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(z), z);
                TLdeserialize.readAttachPath(byteBufferValue2, getUserConfig().clientUserId);
                byteBufferValue2.reuse();
                if (TLdeserialize != null) {
                    MessageObject.setUnreadFlags(TLdeserialize, queryFinalized.intValue(5));
                    TLdeserialize.id = queryFinalized.intValue(6);
                    int intValue3 = queryFinalized.intValue(9);
                    if (intValue3 != 0) {
                        tLRPC$TL_dialog.last_message_date = intValue3;
                    }
                    TLdeserialize.send_state = queryFinalized.intValue(7);
                    TLdeserialize.dialog_id = tLRPC$TL_dialog.id;
                    tLRPC$TL_messages_dialogs.messages.add(TLdeserialize);
                    addUsersAndChatsFromMessage(TLdeserialize, arrayList4, arrayList5);
                    try {
                        if (TLdeserialize.reply_to_msg_id != 0 && ((TLdeserialize.action instanceof TLRPC$TL_messageActionPinMessage) || (TLdeserialize.action instanceof TLRPC$TL_messageActionPaymentSent) || (TLdeserialize.action instanceof TLRPC$TL_messageActionGameScore))) {
                            if (!queryFinalized.isNull(13) && (byteBufferValue = queryFinalized.byteBufferValue(13)) != null) {
                                TLRPC$Message TLdeserialize2 = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(z), z);
                                TLdeserialize.replyMessage = TLdeserialize2;
                                TLdeserialize2.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                byteBufferValue.reuse();
                                if (TLdeserialize.replyMessage != null) {
                                    if (MessageObject.isMegagroup(TLdeserialize)) {
                                        TLdeserialize.replyMessage.flags |= Integer.MIN_VALUE;
                                    }
                                    addUsersAndChatsFromMessage(TLdeserialize.replyMessage, arrayList4, arrayList5);
                                }
                            }
                            if (TLdeserialize.replyMessage == null) {
                                long j = (long) TLdeserialize.reply_to_msg_id;
                                if (TLdeserialize.to_id.channel_id != 0) {
                                    tLRPC$Message = TLdeserialize;
                                    j |= ((long) TLdeserialize.to_id.channel_id) << 32;
                                } else {
                                    tLRPC$Message = TLdeserialize;
                                }
                                if (!arrayList7.contains(Long.valueOf(j))) {
                                    arrayList7.add(Long.valueOf(j));
                                }
                                longSparseArray.put(tLRPC$TL_dialog.id, tLRPC$Message);
                            }
                        }
                    } catch (Exception e) {
                        FileLog.e((Throwable) e);
                    }
                }
            }
            long j2 = tLRPC$TL_dialog.id;
            int i2 = (int) j2;
            int i3 = (int) (j2 >> 32);
            if (i2 != 0) {
                if (i2 <= 0) {
                    int i4 = -i2;
                    if (!arrayList5.contains(Integer.valueOf(i4))) {
                        arrayList5.add(Integer.valueOf(i4));
                    }
                } else if (!arrayList4.contains(Integer.valueOf(i2))) {
                    arrayList4.add(Integer.valueOf(i2));
                }
            } else if (!arrayList6.contains(Integer.valueOf(i3))) {
                arrayList6.add(Integer.valueOf(i3));
            }
            z = false;
        }
        queryFinalized.dispose();
        if (!arrayList7.isEmpty()) {
            SQLiteCursor queryFinalized2 = this.database.queryFinalized(String.format(Locale.US, "SELECT data, mid, date, uid FROM messages WHERE mid IN(%s)", new Object[]{TextUtils.join(",", arrayList7)}), new Object[0]);
            while (queryFinalized2.next()) {
                NativeByteBuffer byteBufferValue3 = queryFinalized2.byteBufferValue(0);
                if (byteBufferValue3 != null) {
                    TLRPC$Message TLdeserialize3 = TLRPC$Message.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(false), false);
                    TLdeserialize3.readAttachPath(byteBufferValue3, getUserConfig().clientUserId);
                    byteBufferValue3.reuse();
                    TLdeserialize3.id = queryFinalized2.intValue(1);
                    TLdeserialize3.date = queryFinalized2.intValue(2);
                    TLdeserialize3.dialog_id = queryFinalized2.longValue(3);
                    addUsersAndChatsFromMessage(TLdeserialize3, arrayList4, arrayList5);
                    TLRPC$Message tLRPC$Message2 = (TLRPC$Message) longSparseArray.get(TLdeserialize3.dialog_id);
                    if (tLRPC$Message2 != null) {
                        tLRPC$Message2.replyMessage = TLdeserialize3;
                        TLdeserialize3.dialog_id = tLRPC$Message2.dialog_id;
                        if (MessageObject.isMegagroup(tLRPC$Message2)) {
                            tLRPC$Message2.replyMessage.flags |= Integer.MIN_VALUE;
                        }
                    }
                }
            }
            queryFinalized2.dispose();
        }
        return tLRPC$TL_messages_dialogs;
    }

    private void loadDialogFilters() {
        this.storageQueue.postRunnable(new Runnable() {
            public final void run() {
                MessagesStorage.this.lambda$loadDialogFilters$32$MessagesStorage();
            }
        });
    }

    public /* synthetic */ void lambda$loadDialogFilters$32$MessagesStorage() {
        TLRPC$messages_Dialogs tLRPC$messages_Dialogs;
        SQLiteCursor sQLiteCursor;
        try {
            ArrayList arrayList = new ArrayList();
            ArrayList arrayList2 = new ArrayList();
            ArrayList arrayList3 = new ArrayList();
            ArrayList arrayList4 = new ArrayList();
            SparseArray sparseArray = new SparseArray();
            arrayList.add(Integer.valueOf(getUserConfig().getClientUserId()));
            int i = 0;
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT id, ord, unread_count, flags, title FROM dialog_filter WHERE 1", new Object[0]);
            boolean z = false;
            while (true) {
                int i2 = 1;
                if (!queryFinalized.next()) {
                    break;
                }
                MessagesController.DialogFilter dialogFilter = new MessagesController.DialogFilter();
                dialogFilter.id = queryFinalized.intValue(i);
                dialogFilter.order = queryFinalized.intValue(1);
                dialogFilter.unreadCount = -1;
                dialogFilter.pendingUnreadCount = -1;
                dialogFilter.flags = queryFinalized.intValue(3);
                dialogFilter.name = queryFinalized.stringValue(4);
                this.dialogFilters.add(dialogFilter);
                this.dialogFiltersMap.put(dialogFilter.id, dialogFilter);
                sparseArray.put(dialogFilter.id, dialogFilter);
                if (dialogFilter.pendingUnreadCount < 0) {
                    z = true;
                }
                int i3 = 0;
                while (i3 < 2) {
                    if (i3 == 0) {
                        SQLiteDatabase sQLiteDatabase = this.database;
                        sQLiteCursor = sQLiteDatabase.queryFinalized("SELECT peer, pin FROM dialog_filter_pin_v2 WHERE id = " + dialogFilter.id, new Object[i]);
                    } else {
                        SQLiteDatabase sQLiteDatabase2 = this.database;
                        sQLiteCursor = sQLiteDatabase2.queryFinalized("SELECT peer FROM dialog_filter_ep WHERE id = " + dialogFilter.id, new Object[i]);
                    }
                    while (sQLiteCursor.next()) {
                        long longValue = sQLiteCursor.longValue(i);
                        int i4 = (int) longValue;
                        if (i3 == 0 || i3 == i2) {
                            if (i3 == 0) {
                                if (i4 != 0) {
                                    dialogFilter.alwaysShow.add(Integer.valueOf(i4));
                                }
                                int intValue = sQLiteCursor.intValue(1);
                                if (intValue != Integer.MIN_VALUE) {
                                    dialogFilter.pinnedDialogs.put(longValue, Integer.valueOf(intValue));
                                    if (!arrayList4.contains(Long.valueOf(longValue))) {
                                        arrayList4.add(Long.valueOf(longValue));
                                    }
                                }
                            } else if (i3 == 1 && i4 != 0) {
                                dialogFilter.neverShow.add(Integer.valueOf(i4));
                            }
                            if (i4 < 0) {
                                int i5 = -i4;
                                if (!arrayList2.contains(Integer.valueOf(i5))) {
                                    arrayList2.add(Integer.valueOf(i5));
                                }
                            } else if (i4 <= 0) {
                                int i6 = (int) (longValue >> 32);
                                if (!arrayList3.contains(Integer.valueOf(i6))) {
                                    arrayList3.add(Integer.valueOf(i6));
                                }
                            } else if (!arrayList.contains(Integer.valueOf(i4))) {
                                arrayList.add(Integer.valueOf(i4));
                            }
                        }
                        i = 0;
                        i2 = 1;
                    }
                    sQLiteCursor.dispose();
                    i3++;
                    i = 0;
                    i2 = 1;
                }
            }
            queryFinalized.dispose();
            Collections.sort(this.dialogFilters, $$Lambda$MessagesStorage$QdcxJnVfAGi1Cat1gHSam1snQX0.INSTANCE);
            if (z) {
                calcUnreadCounters(true);
            }
            if (!arrayList4.isEmpty()) {
                tLRPC$messages_Dialogs = loadDialogsByIds(TextUtils.join(",", arrayList4), arrayList, arrayList2, arrayList3);
            } else {
                tLRPC$messages_Dialogs = new TLRPC$TL_messages_dialogs();
            }
            TLRPC$messages_Dialogs tLRPC$messages_Dialogs2 = tLRPC$messages_Dialogs;
            ArrayList arrayList5 = new ArrayList();
            ArrayList arrayList6 = new ArrayList();
            ArrayList arrayList7 = new ArrayList();
            if (!arrayList3.isEmpty()) {
                getEncryptedChatsInternal(TextUtils.join(",", arrayList3), arrayList7, arrayList);
            }
            if (!arrayList.isEmpty()) {
                getUsersInternal(TextUtils.join(",", arrayList), arrayList5);
            }
            if (!arrayList2.isEmpty()) {
                getChatsInternal(TextUtils.join(",", arrayList2), arrayList6);
            }
            getMessagesController().processLoadedDialogFilters(new ArrayList(this.dialogFilters), tLRPC$messages_Dialogs2, (TLRPC$messages_Dialogs) null, arrayList5, arrayList6, arrayList7, 0);
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    static /* synthetic */ int lambda$null$31(MessagesController.DialogFilter dialogFilter, MessagesController.DialogFilter dialogFilter2) {
        int i = dialogFilter.order;
        int i2 = dialogFilter2.order;
        if (i > i2) {
            return 1;
        }
        return i < i2 ? -1 : 0;
    }

    /* JADX WARNING: Removed duplicated region for block: B:114:0x032a A[Catch:{ Exception -> 0x066d }] */
    /* JADX WARNING: Removed duplicated region for block: B:191:0x047f A[Catch:{ Exception -> 0x066d }] */
    /* JADX WARNING: Removed duplicated region for block: B:324:0x064c A[Catch:{ Exception -> 0x066d }] */
    /* JADX WARNING: Removed duplicated region for block: B:84:0x027b A[Catch:{ Exception -> 0x066d }] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void calcUnreadCounters(boolean r26) {
        /*
            r25 = this;
            r1 = r25
            r0 = 0
            r2 = 0
        L_0x0004:
            r3 = 2
            if (r2 >= r3) goto L_0x002e
            r4 = 0
        L_0x0008:
            if (r4 >= r3) goto L_0x002b
            int[][] r5 = r1.contacts     // Catch:{ Exception -> 0x066d }
            r5 = r5[r2]     // Catch:{ Exception -> 0x066d }
            int[][] r6 = r1.nonContacts     // Catch:{ Exception -> 0x066d }
            r6 = r6[r2]     // Catch:{ Exception -> 0x066d }
            int[][] r7 = r1.bots     // Catch:{ Exception -> 0x066d }
            r7 = r7[r2]     // Catch:{ Exception -> 0x066d }
            int[][] r8 = r1.channels     // Catch:{ Exception -> 0x066d }
            r8 = r8[r2]     // Catch:{ Exception -> 0x066d }
            int[][] r9 = r1.groups     // Catch:{ Exception -> 0x066d }
            r9 = r9[r2]     // Catch:{ Exception -> 0x066d }
            r9[r4] = r0     // Catch:{ Exception -> 0x066d }
            r8[r4] = r0     // Catch:{ Exception -> 0x066d }
            r7[r4] = r0     // Catch:{ Exception -> 0x066d }
            r6[r4] = r0     // Catch:{ Exception -> 0x066d }
            r5[r4] = r0     // Catch:{ Exception -> 0x066d }
            int r4 = r4 + 1
            goto L_0x0008
        L_0x002b:
            int r2 = r2 + 1
            goto L_0x0004
        L_0x002e:
            android.util.LongSparseArray<java.lang.Integer> r2 = r1.dialogsWithMentions     // Catch:{ Exception -> 0x066d }
            r2.clear()     // Catch:{ Exception -> 0x066d }
            android.util.LongSparseArray<java.lang.Integer> r2 = r1.dialogsWithUnread     // Catch:{ Exception -> 0x066d }
            r2.clear()     // Catch:{ Exception -> 0x066d }
            java.util.ArrayList r2 = new java.util.ArrayList     // Catch:{ Exception -> 0x066d }
            r2.<init>()     // Catch:{ Exception -> 0x066d }
            java.util.ArrayList r4 = new java.util.ArrayList     // Catch:{ Exception -> 0x066d }
            r4.<init>()     // Catch:{ Exception -> 0x066d }
            java.util.ArrayList r5 = new java.util.ArrayList     // Catch:{ Exception -> 0x066d }
            r5.<init>()     // Catch:{ Exception -> 0x066d }
            java.util.ArrayList r6 = new java.util.ArrayList     // Catch:{ Exception -> 0x066d }
            r6.<init>()     // Catch:{ Exception -> 0x066d }
            java.util.ArrayList r7 = new java.util.ArrayList     // Catch:{ Exception -> 0x066d }
            r7.<init>()     // Catch:{ Exception -> 0x066d }
            java.util.ArrayList r8 = new java.util.ArrayList     // Catch:{ Exception -> 0x066d }
            r8.<init>()     // Catch:{ Exception -> 0x066d }
            android.util.LongSparseArray r9 = new android.util.LongSparseArray     // Catch:{ Exception -> 0x066d }
            r9.<init>()     // Catch:{ Exception -> 0x066d }
            org.telegram.SQLite.SQLiteDatabase r10 = r1.database     // Catch:{ Exception -> 0x066d }
            java.lang.String r11 = "SELECT did, folder_id, unread_count, unread_count_i FROM dialogs WHERE unread_count > 0 OR flags > 0 UNION ALL SELECT did, folder_id, unread_count, unread_count_i FROM dialogs WHERE unread_count_i > 0"
            java.lang.Object[] r12 = new java.lang.Object[r0]     // Catch:{ Exception -> 0x066d }
            org.telegram.SQLite.SQLiteCursor r10 = r10.queryFinalized(r11, r12)     // Catch:{ Exception -> 0x066d }
        L_0x0065:
            boolean r11 = r10.next()     // Catch:{ Exception -> 0x066d }
            r12 = 32
            r13 = 1
            if (r11 == 0) goto L_0x00dd
            int r11 = r10.intValue(r13)     // Catch:{ Exception -> 0x066d }
            long r13 = r10.longValue(r0)     // Catch:{ Exception -> 0x066d }
            int r15 = r10.intValue(r3)     // Catch:{ Exception -> 0x066d }
            r3 = 3
            int r3 = r10.intValue(r3)     // Catch:{ Exception -> 0x066d }
            if (r15 <= 0) goto L_0x008a
            android.util.LongSparseArray<java.lang.Integer> r0 = r1.dialogsWithUnread     // Catch:{ Exception -> 0x066d }
            java.lang.Integer r15 = java.lang.Integer.valueOf(r15)     // Catch:{ Exception -> 0x066d }
            r0.put(r13, r15)     // Catch:{ Exception -> 0x066d }
        L_0x008a:
            if (r3 <= 0) goto L_0x0095
            android.util.LongSparseArray<java.lang.Integer> r0 = r1.dialogsWithMentions     // Catch:{ Exception -> 0x066d }
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)     // Catch:{ Exception -> 0x066d }
            r0.put(r13, r3)     // Catch:{ Exception -> 0x066d }
        L_0x0095:
            java.lang.Integer r0 = java.lang.Integer.valueOf(r11)     // Catch:{ Exception -> 0x066d }
            r9.put(r13, r0)     // Catch:{ Exception -> 0x066d }
            int r0 = (int) r13     // Catch:{ Exception -> 0x066d }
            long r11 = r13 >> r12
            int r3 = (int) r11     // Catch:{ Exception -> 0x066d }
            if (r0 == 0) goto L_0x00c9
            if (r0 >= 0) goto L_0x00b7
            int r0 = -r0
            java.lang.Integer r3 = java.lang.Integer.valueOf(r0)     // Catch:{ Exception -> 0x066d }
            boolean r3 = r7.contains(r3)     // Catch:{ Exception -> 0x066d }
            if (r3 != 0) goto L_0x00da
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)     // Catch:{ Exception -> 0x066d }
            r7.add(r0)     // Catch:{ Exception -> 0x066d }
            goto L_0x00da
        L_0x00b7:
            java.lang.Integer r3 = java.lang.Integer.valueOf(r0)     // Catch:{ Exception -> 0x066d }
            boolean r3 = r6.contains(r3)     // Catch:{ Exception -> 0x066d }
            if (r3 != 0) goto L_0x00da
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)     // Catch:{ Exception -> 0x066d }
            r6.add(r0)     // Catch:{ Exception -> 0x066d }
            goto L_0x00da
        L_0x00c9:
            java.lang.Integer r0 = java.lang.Integer.valueOf(r3)     // Catch:{ Exception -> 0x066d }
            boolean r0 = r8.contains(r0)     // Catch:{ Exception -> 0x066d }
            if (r0 != 0) goto L_0x00da
            java.lang.Integer r0 = java.lang.Integer.valueOf(r3)     // Catch:{ Exception -> 0x066d }
            r8.add(r0)     // Catch:{ Exception -> 0x066d }
        L_0x00da:
            r0 = 0
            r3 = 2
            goto L_0x0065
        L_0x00dd:
            r10.dispose()     // Catch:{ Exception -> 0x066d }
            android.util.SparseArray r0 = new android.util.SparseArray     // Catch:{ Exception -> 0x066d }
            r0.<init>()     // Catch:{ Exception -> 0x066d }
            android.util.SparseArray r3 = new android.util.SparseArray     // Catch:{ Exception -> 0x066d }
            r3.<init>()     // Catch:{ Exception -> 0x066d }
            android.util.SparseArray r10 = new android.util.SparseArray     // Catch:{ Exception -> 0x066d }
            r10.<init>()     // Catch:{ Exception -> 0x066d }
            android.util.SparseArray r11 = new android.util.SparseArray     // Catch:{ Exception -> 0x066d }
            r11.<init>()     // Catch:{ Exception -> 0x066d }
            android.util.SparseArray r14 = new android.util.SparseArray     // Catch:{ Exception -> 0x066d }
            r14.<init>()     // Catch:{ Exception -> 0x066d }
            android.util.SparseArray r15 = new android.util.SparseArray     // Catch:{ Exception -> 0x066d }
            r15.<init>()     // Catch:{ Exception -> 0x066d }
            boolean r18 = r6.isEmpty()     // Catch:{ Exception -> 0x066d }
            java.lang.String r12 = ","
            if (r18 != 0) goto L_0x0190
            java.lang.String r6 = android.text.TextUtils.join(r12, r6)     // Catch:{ Exception -> 0x066d }
            r1.getUsersInternal(r6, r2)     // Catch:{ Exception -> 0x066d }
            int r6 = r2.size()     // Catch:{ Exception -> 0x066d }
            r13 = 0
        L_0x0112:
            if (r13 >= r6) goto L_0x0190
            java.lang.Object r20 = r2.get(r13)     // Catch:{ Exception -> 0x066d }
            r21 = r2
            r2 = r20
            org.telegram.tgnet.TLRPC$User r2 = (org.telegram.tgnet.TLRPC$User) r2     // Catch:{ Exception -> 0x066d }
            r20 = r6
            org.telegram.messenger.MessagesController r6 = r25.getMessagesController()     // Catch:{ Exception -> 0x066d }
            r22 = r3
            int r3 = r2.id     // Catch:{ Exception -> 0x066d }
            r23 = r10
            r24 = r11
            long r10 = (long) r3     // Catch:{ Exception -> 0x066d }
            boolean r3 = r6.isDialogMuted(r10)     // Catch:{ Exception -> 0x066d }
            int r6 = r2.id     // Catch:{ Exception -> 0x066d }
            long r10 = (long) r6     // Catch:{ Exception -> 0x066d }
            java.lang.Object r6 = r9.get(r10)     // Catch:{ Exception -> 0x066d }
            java.lang.Integer r6 = (java.lang.Integer) r6     // Catch:{ Exception -> 0x066d }
            int r6 = r6.intValue()     // Catch:{ Exception -> 0x066d }
            if (r3 == 0) goto L_0x0147
            int r10 = r2.id     // Catch:{ Exception -> 0x066d }
            java.lang.Boolean r11 = java.lang.Boolean.TRUE     // Catch:{ Exception -> 0x066d }
            r14.put(r10, r11)     // Catch:{ Exception -> 0x066d }
        L_0x0147:
            r10 = 1
            if (r6 != r10) goto L_0x0151
            int r10 = r2.id     // Catch:{ Exception -> 0x066d }
            java.lang.Boolean r11 = java.lang.Boolean.TRUE     // Catch:{ Exception -> 0x066d }
            r15.put(r10, r11)     // Catch:{ Exception -> 0x066d }
        L_0x0151:
            boolean r10 = r2.bot     // Catch:{ Exception -> 0x066d }
            if (r10 == 0) goto L_0x0160
            int[][] r10 = r1.bots     // Catch:{ Exception -> 0x066d }
            r6 = r10[r6]     // Catch:{ Exception -> 0x066d }
            r10 = r6[r3]     // Catch:{ Exception -> 0x066d }
            r11 = 1
            int r10 = r10 + r11
            r6[r3] = r10     // Catch:{ Exception -> 0x066d }
            goto L_0x017e
        L_0x0160:
            boolean r10 = r2.self     // Catch:{ Exception -> 0x066d }
            if (r10 != 0) goto L_0x0174
            boolean r10 = r2.contact     // Catch:{ Exception -> 0x066d }
            if (r10 == 0) goto L_0x0169
            goto L_0x0174
        L_0x0169:
            int[][] r10 = r1.nonContacts     // Catch:{ Exception -> 0x066d }
            r6 = r10[r6]     // Catch:{ Exception -> 0x066d }
            r10 = r6[r3]     // Catch:{ Exception -> 0x066d }
            r11 = 1
            int r10 = r10 + r11
            r6[r3] = r10     // Catch:{ Exception -> 0x066d }
            goto L_0x017e
        L_0x0174:
            int[][] r10 = r1.contacts     // Catch:{ Exception -> 0x066d }
            r6 = r10[r6]     // Catch:{ Exception -> 0x066d }
            r10 = r6[r3]     // Catch:{ Exception -> 0x066d }
            r11 = 1
            int r10 = r10 + r11
            r6[r3] = r10     // Catch:{ Exception -> 0x066d }
        L_0x017e:
            int r3 = r2.id     // Catch:{ Exception -> 0x066d }
            r0.put(r3, r2)     // Catch:{ Exception -> 0x066d }
            int r13 = r13 + 1
            r6 = r20
            r2 = r21
            r3 = r22
            r10 = r23
            r11 = r24
            goto L_0x0112
        L_0x0190:
            r22 = r3
            r23 = r10
            r24 = r11
            boolean r2 = r8.isEmpty()     // Catch:{ Exception -> 0x066d }
            if (r2 != 0) goto L_0x026f
            java.util.ArrayList r2 = new java.util.ArrayList     // Catch:{ Exception -> 0x066d }
            r2.<init>()     // Catch:{ Exception -> 0x066d }
            java.util.ArrayList r3 = new java.util.ArrayList     // Catch:{ Exception -> 0x066d }
            r3.<init>()     // Catch:{ Exception -> 0x066d }
            java.lang.String r6 = android.text.TextUtils.join(r12, r8)     // Catch:{ Exception -> 0x066d }
            r1.getEncryptedChatsInternal(r6, r3, r2)     // Catch:{ Exception -> 0x066d }
            boolean r6 = r2.isEmpty()     // Catch:{ Exception -> 0x066d }
            if (r6 != 0) goto L_0x026f
            java.lang.String r2 = android.text.TextUtils.join(r12, r2)     // Catch:{ Exception -> 0x066d }
            r1.getUsersInternal(r2, r4)     // Catch:{ Exception -> 0x066d }
            int r2 = r4.size()     // Catch:{ Exception -> 0x066d }
            r6 = 0
        L_0x01bf:
            if (r6 >= r2) goto L_0x01d3
            java.lang.Object r8 = r4.get(r6)     // Catch:{ Exception -> 0x066d }
            org.telegram.tgnet.TLRPC$User r8 = (org.telegram.tgnet.TLRPC$User) r8     // Catch:{ Exception -> 0x066d }
            int r10 = r8.id     // Catch:{ Exception -> 0x066d }
            r11 = r23
            r11.put(r10, r8)     // Catch:{ Exception -> 0x066d }
            int r6 = r6 + 1
            r23 = r11
            goto L_0x01bf
        L_0x01d3:
            r11 = r23
            int r2 = r3.size()     // Catch:{ Exception -> 0x066d }
            r4 = 0
        L_0x01da:
            if (r4 >= r2) goto L_0x026c
            java.lang.Object r6 = r3.get(r4)     // Catch:{ Exception -> 0x066d }
            org.telegram.tgnet.TLRPC$EncryptedChat r6 = (org.telegram.tgnet.TLRPC$EncryptedChat) r6     // Catch:{ Exception -> 0x066d }
            int r8 = r6.user_id     // Catch:{ Exception -> 0x066d }
            java.lang.Object r8 = r11.get(r8)     // Catch:{ Exception -> 0x066d }
            org.telegram.tgnet.TLRPC$User r8 = (org.telegram.tgnet.TLRPC$User) r8     // Catch:{ Exception -> 0x066d }
            if (r8 != 0) goto L_0x01f4
            r20 = r0
            r13 = r2
            r10 = r3
            r2 = r24
            goto L_0x0262
        L_0x01f4:
            int r6 = r6.id     // Catch:{ Exception -> 0x066d }
            r13 = r2
            r10 = r3
            long r2 = (long) r6     // Catch:{ Exception -> 0x066d }
            r6 = 32
            long r2 = r2 << r6
            org.telegram.messenger.MessagesController r6 = r25.getMessagesController()     // Catch:{ Exception -> 0x066d }
            boolean r6 = r6.isDialogMuted(r2)     // Catch:{ Exception -> 0x066d }
            java.lang.Object r2 = r9.get(r2)     // Catch:{ Exception -> 0x066d }
            java.lang.Integer r2 = (java.lang.Integer) r2     // Catch:{ Exception -> 0x066d }
            int r2 = r2.intValue()     // Catch:{ Exception -> 0x066d }
            if (r6 == 0) goto L_0x021a
            int r3 = r8.id     // Catch:{ Exception -> 0x066d }
            r20 = r0
            java.lang.Boolean r0 = java.lang.Boolean.TRUE     // Catch:{ Exception -> 0x066d }
            r14.put(r3, r0)     // Catch:{ Exception -> 0x066d }
            goto L_0x021c
        L_0x021a:
            r20 = r0
        L_0x021c:
            r0 = 1
            if (r2 != r0) goto L_0x0226
            int r0 = r8.id     // Catch:{ Exception -> 0x066d }
            java.lang.Boolean r3 = java.lang.Boolean.TRUE     // Catch:{ Exception -> 0x066d }
            r15.put(r0, r3)     // Catch:{ Exception -> 0x066d }
        L_0x0226:
            boolean r0 = r8.self     // Catch:{ Exception -> 0x066d }
            if (r0 != 0) goto L_0x023a
            boolean r0 = r8.contact     // Catch:{ Exception -> 0x066d }
            if (r0 == 0) goto L_0x022f
            goto L_0x023a
        L_0x022f:
            int[][] r0 = r1.nonContacts     // Catch:{ Exception -> 0x066d }
            r0 = r0[r2]     // Catch:{ Exception -> 0x066d }
            r2 = r0[r6]     // Catch:{ Exception -> 0x066d }
            r3 = 1
            int r2 = r2 + r3
            r0[r6] = r2     // Catch:{ Exception -> 0x066d }
            goto L_0x0244
        L_0x023a:
            int[][] r0 = r1.contacts     // Catch:{ Exception -> 0x066d }
            r0 = r0[r2]     // Catch:{ Exception -> 0x066d }
            r2 = r0[r6]     // Catch:{ Exception -> 0x066d }
            r3 = 1
            int r2 = r2 + r3
            r0[r6] = r2     // Catch:{ Exception -> 0x066d }
        L_0x0244:
            int r0 = r8.id     // Catch:{ Exception -> 0x066d }
            r2 = 0
            java.lang.Integer r3 = java.lang.Integer.valueOf(r2)     // Catch:{ Exception -> 0x066d }
            r2 = r24
            java.lang.Object r0 = r2.get(r0, r3)     // Catch:{ Exception -> 0x066d }
            java.lang.Integer r0 = (java.lang.Integer) r0     // Catch:{ Exception -> 0x066d }
            int r0 = r0.intValue()     // Catch:{ Exception -> 0x066d }
            int r3 = r8.id     // Catch:{ Exception -> 0x066d }
            r6 = 1
            int r0 = r0 + r6
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)     // Catch:{ Exception -> 0x066d }
            r2.put(r3, r0)     // Catch:{ Exception -> 0x066d }
        L_0x0262:
            int r4 = r4 + 1
            r24 = r2
            r3 = r10
            r2 = r13
            r0 = r20
            goto L_0x01da
        L_0x026c:
            r20 = r0
            goto L_0x0273
        L_0x026f:
            r20 = r0
            r11 = r23
        L_0x0273:
            r2 = r24
            boolean r0 = r7.isEmpty()     // Catch:{ Exception -> 0x066d }
            if (r0 != 0) goto L_0x031d
            java.lang.String r0 = android.text.TextUtils.join(r12, r7)     // Catch:{ Exception -> 0x066d }
            r1.getChatsInternal(r0, r5)     // Catch:{ Exception -> 0x066d }
            int r0 = r5.size()     // Catch:{ Exception -> 0x066d }
            r3 = 0
        L_0x0287:
            if (r3 >= r0) goto L_0x031d
            java.lang.Object r4 = r5.get(r3)     // Catch:{ Exception -> 0x066d }
            org.telegram.tgnet.TLRPC$Chat r4 = (org.telegram.tgnet.TLRPC$Chat) r4     // Catch:{ Exception -> 0x066d }
            org.telegram.tgnet.TLRPC$InputChannel r6 = r4.migrated_to     // Catch:{ Exception -> 0x066d }
            boolean r6 = r6 instanceof org.telegram.tgnet.TLRPC$TL_inputChannel     // Catch:{ Exception -> 0x066d }
            if (r6 != 0) goto L_0x0303
            boolean r6 = org.telegram.messenger.ChatObject.isNotInChat(r4)     // Catch:{ Exception -> 0x066d }
            if (r6 == 0) goto L_0x029c
            goto L_0x0303
        L_0x029c:
            org.telegram.messenger.MessagesController r6 = r25.getMessagesController()     // Catch:{ Exception -> 0x066d }
            int r7 = r4.id     // Catch:{ Exception -> 0x066d }
            int r7 = -r7
            long r7 = (long) r7     // Catch:{ Exception -> 0x066d }
            boolean r6 = r6.isDialogMuted(r7, r4)     // Catch:{ Exception -> 0x066d }
            int r7 = r4.id     // Catch:{ Exception -> 0x066d }
            int r7 = -r7
            long r7 = (long) r7     // Catch:{ Exception -> 0x066d }
            java.lang.Object r7 = r9.get(r7)     // Catch:{ Exception -> 0x066d }
            java.lang.Integer r7 = (java.lang.Integer) r7     // Catch:{ Exception -> 0x066d }
            int r7 = r7.intValue()     // Catch:{ Exception -> 0x066d }
            if (r6 == 0) goto L_0x02c6
            android.util.LongSparseArray<java.lang.Integer> r8 = r1.dialogsWithMentions     // Catch:{ Exception -> 0x066d }
            int r10 = r4.id     // Catch:{ Exception -> 0x066d }
            int r10 = -r10
            long r12 = (long) r10     // Catch:{ Exception -> 0x066d }
            int r8 = r8.indexOfKey(r12)     // Catch:{ Exception -> 0x066d }
            if (r8 >= 0) goto L_0x02c6
            r8 = 1
            goto L_0x02c7
        L_0x02c6:
            r8 = 0
        L_0x02c7:
            if (r6 == 0) goto L_0x02d1
            int r6 = r4.id     // Catch:{ Exception -> 0x066d }
            int r6 = -r6
            java.lang.Boolean r10 = java.lang.Boolean.TRUE     // Catch:{ Exception -> 0x066d }
            r14.put(r6, r10)     // Catch:{ Exception -> 0x066d }
        L_0x02d1:
            r6 = 1
            if (r7 != r6) goto L_0x02dc
            int r6 = r4.id     // Catch:{ Exception -> 0x066d }
            int r6 = -r6
            java.lang.Boolean r10 = java.lang.Boolean.TRUE     // Catch:{ Exception -> 0x066d }
            r15.put(r6, r10)     // Catch:{ Exception -> 0x066d }
        L_0x02dc:
            boolean r6 = org.telegram.messenger.ChatObject.isChannel(r4)     // Catch:{ Exception -> 0x066d }
            if (r6 == 0) goto L_0x02f1
            boolean r6 = r4.megagroup     // Catch:{ Exception -> 0x066d }
            if (r6 != 0) goto L_0x02f1
            int[][] r6 = r1.channels     // Catch:{ Exception -> 0x066d }
            r6 = r6[r7]     // Catch:{ Exception -> 0x066d }
            r7 = r6[r8]     // Catch:{ Exception -> 0x066d }
            r10 = 1
            int r7 = r7 + r10
            r6[r8] = r7     // Catch:{ Exception -> 0x066d }
            goto L_0x02fb
        L_0x02f1:
            int[][] r6 = r1.groups     // Catch:{ Exception -> 0x066d }
            r6 = r6[r7]     // Catch:{ Exception -> 0x066d }
            r7 = r6[r8]     // Catch:{ Exception -> 0x066d }
            r10 = 1
            int r7 = r7 + r10
            r6[r8] = r7     // Catch:{ Exception -> 0x066d }
        L_0x02fb:
            int r6 = r4.id     // Catch:{ Exception -> 0x066d }
            r7 = r22
            r7.put(r6, r4)     // Catch:{ Exception -> 0x066d }
            goto L_0x0317
        L_0x0303:
            r7 = r22
            android.util.LongSparseArray<java.lang.Integer> r6 = r1.dialogsWithUnread     // Catch:{ Exception -> 0x066d }
            int r8 = r4.id     // Catch:{ Exception -> 0x066d }
            int r8 = -r8
            long r12 = (long) r8     // Catch:{ Exception -> 0x066d }
            r6.remove(r12)     // Catch:{ Exception -> 0x066d }
            android.util.LongSparseArray<java.lang.Integer> r6 = r1.dialogsWithMentions     // Catch:{ Exception -> 0x066d }
            int r4 = r4.id     // Catch:{ Exception -> 0x066d }
            int r4 = -r4
            long r12 = (long) r4     // Catch:{ Exception -> 0x066d }
            r6.remove(r12)     // Catch:{ Exception -> 0x066d }
        L_0x0317:
            int r3 = r3 + 1
            r22 = r7
            goto L_0x0287
        L_0x031d:
            r7 = r22
            java.util.ArrayList<org.telegram.messenger.MessagesController$DialogFilter> r0 = r1.dialogFilters     // Catch:{ Exception -> 0x066d }
            int r0 = r0.size()     // Catch:{ Exception -> 0x066d }
            r3 = 0
        L_0x0326:
            int r4 = r0 + 2
            if (r3 >= r4) goto L_0x0671
            if (r3 >= r0) goto L_0x0343
            java.util.ArrayList<org.telegram.messenger.MessagesController$DialogFilter> r4 = r1.dialogFilters     // Catch:{ Exception -> 0x066d }
            java.lang.Object r4 = r4.get(r3)     // Catch:{ Exception -> 0x066d }
            org.telegram.messenger.MessagesController$DialogFilter r4 = (org.telegram.messenger.MessagesController.DialogFilter) r4     // Catch:{ Exception -> 0x066d }
            int r5 = r4.pendingUnreadCount     // Catch:{ Exception -> 0x066d }
            if (r5 < 0) goto L_0x0340
            r24 = r2
            r23 = r11
            r16 = 0
            goto L_0x0665
        L_0x0340:
            int r5 = r4.flags     // Catch:{ Exception -> 0x066d }
            goto L_0x035a
        L_0x0343:
            r4 = 0
            int r5 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ALL_CHATS     // Catch:{ Exception -> 0x066d }
            if (r3 != r0) goto L_0x0357
            org.telegram.messenger.NotificationsController r6 = r25.getNotificationsController()     // Catch:{ Exception -> 0x066d }
            boolean r6 = r6.showBadgeMuted     // Catch:{ Exception -> 0x066d }
            if (r6 != 0) goto L_0x0353
            int r6 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED     // Catch:{ Exception -> 0x066d }
            r5 = r5 | r6
        L_0x0353:
            int r6 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED     // Catch:{ Exception -> 0x066d }
        L_0x0355:
            r5 = r5 | r6
            goto L_0x035a
        L_0x0357:
            int r6 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED     // Catch:{ Exception -> 0x066d }
            goto L_0x0355
        L_0x035a:
            int r6 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CONTACTS     // Catch:{ Exception -> 0x066d }
            r6 = r6 & r5
            if (r6 == 0) goto L_0x0396
            int r6 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED     // Catch:{ Exception -> 0x066d }
            r6 = r6 & r5
            if (r6 != 0) goto L_0x037a
            int[][] r6 = r1.contacts     // Catch:{ Exception -> 0x066d }
            r8 = 0
            r6 = r6[r8]     // Catch:{ Exception -> 0x066d }
            r6 = r6[r8]     // Catch:{ Exception -> 0x066d }
            int r6 = r6 + r8
            int r9 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED     // Catch:{ Exception -> 0x066d }
            r9 = r9 & r5
            if (r9 != 0) goto L_0x037b
            int[][] r9 = r1.contacts     // Catch:{ Exception -> 0x066d }
            r9 = r9[r8]     // Catch:{ Exception -> 0x066d }
            r8 = 1
            r9 = r9[r8]     // Catch:{ Exception -> 0x066d }
            int r6 = r6 + r9
            goto L_0x037b
        L_0x037a:
            r6 = 0
        L_0x037b:
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED     // Catch:{ Exception -> 0x066d }
            r8 = r8 & r5
            if (r8 != 0) goto L_0x0397
            int[][] r8 = r1.contacts     // Catch:{ Exception -> 0x066d }
            r9 = 1
            r8 = r8[r9]     // Catch:{ Exception -> 0x066d }
            r10 = 0
            r8 = r8[r10]     // Catch:{ Exception -> 0x066d }
            int r6 = r6 + r8
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED     // Catch:{ Exception -> 0x066d }
            r8 = r8 & r5
            if (r8 != 0) goto L_0x0397
            int[][] r8 = r1.contacts     // Catch:{ Exception -> 0x066d }
            r8 = r8[r9]     // Catch:{ Exception -> 0x066d }
            r8 = r8[r9]     // Catch:{ Exception -> 0x066d }
            int r6 = r6 + r8
            goto L_0x0397
        L_0x0396:
            r6 = 0
        L_0x0397:
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS     // Catch:{ Exception -> 0x066d }
            r8 = r8 & r5
            if (r8 == 0) goto L_0x03d0
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED     // Catch:{ Exception -> 0x066d }
            r8 = r8 & r5
            if (r8 != 0) goto L_0x03b6
            int[][] r8 = r1.nonContacts     // Catch:{ Exception -> 0x066d }
            r9 = 0
            r8 = r8[r9]     // Catch:{ Exception -> 0x066d }
            r8 = r8[r9]     // Catch:{ Exception -> 0x066d }
            int r6 = r6 + r8
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED     // Catch:{ Exception -> 0x066d }
            r8 = r8 & r5
            if (r8 != 0) goto L_0x03b6
            int[][] r8 = r1.nonContacts     // Catch:{ Exception -> 0x066d }
            r8 = r8[r9]     // Catch:{ Exception -> 0x066d }
            r9 = 1
            r8 = r8[r9]     // Catch:{ Exception -> 0x066d }
            int r6 = r6 + r8
        L_0x03b6:
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED     // Catch:{ Exception -> 0x066d }
            r8 = r8 & r5
            if (r8 != 0) goto L_0x03d0
            int[][] r8 = r1.nonContacts     // Catch:{ Exception -> 0x066d }
            r9 = 1
            r8 = r8[r9]     // Catch:{ Exception -> 0x066d }
            r10 = 0
            r8 = r8[r10]     // Catch:{ Exception -> 0x066d }
            int r6 = r6 + r8
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED     // Catch:{ Exception -> 0x066d }
            r8 = r8 & r5
            if (r8 != 0) goto L_0x03d0
            int[][] r8 = r1.nonContacts     // Catch:{ Exception -> 0x066d }
            r8 = r8[r9]     // Catch:{ Exception -> 0x066d }
            r8 = r8[r9]     // Catch:{ Exception -> 0x066d }
            int r6 = r6 + r8
        L_0x03d0:
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_GROUPS     // Catch:{ Exception -> 0x066d }
            r8 = r8 & r5
            if (r8 == 0) goto L_0x0409
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED     // Catch:{ Exception -> 0x066d }
            r8 = r8 & r5
            if (r8 != 0) goto L_0x03ef
            int[][] r8 = r1.groups     // Catch:{ Exception -> 0x066d }
            r9 = 0
            r8 = r8[r9]     // Catch:{ Exception -> 0x066d }
            r8 = r8[r9]     // Catch:{ Exception -> 0x066d }
            int r6 = r6 + r8
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED     // Catch:{ Exception -> 0x066d }
            r8 = r8 & r5
            if (r8 != 0) goto L_0x03ef
            int[][] r8 = r1.groups     // Catch:{ Exception -> 0x066d }
            r8 = r8[r9]     // Catch:{ Exception -> 0x066d }
            r9 = 1
            r8 = r8[r9]     // Catch:{ Exception -> 0x066d }
            int r6 = r6 + r8
        L_0x03ef:
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED     // Catch:{ Exception -> 0x066d }
            r8 = r8 & r5
            if (r8 != 0) goto L_0x0409
            int[][] r8 = r1.groups     // Catch:{ Exception -> 0x066d }
            r9 = 1
            r8 = r8[r9]     // Catch:{ Exception -> 0x066d }
            r10 = 0
            r8 = r8[r10]     // Catch:{ Exception -> 0x066d }
            int r6 = r6 + r8
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED     // Catch:{ Exception -> 0x066d }
            r8 = r8 & r5
            if (r8 != 0) goto L_0x0409
            int[][] r8 = r1.groups     // Catch:{ Exception -> 0x066d }
            r8 = r8[r9]     // Catch:{ Exception -> 0x066d }
            r8 = r8[r9]     // Catch:{ Exception -> 0x066d }
            int r6 = r6 + r8
        L_0x0409:
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CHANNELS     // Catch:{ Exception -> 0x066d }
            r8 = r8 & r5
            if (r8 == 0) goto L_0x0442
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED     // Catch:{ Exception -> 0x066d }
            r8 = r8 & r5
            if (r8 != 0) goto L_0x0428
            int[][] r8 = r1.channels     // Catch:{ Exception -> 0x066d }
            r9 = 0
            r8 = r8[r9]     // Catch:{ Exception -> 0x066d }
            r8 = r8[r9]     // Catch:{ Exception -> 0x066d }
            int r6 = r6 + r8
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED     // Catch:{ Exception -> 0x066d }
            r8 = r8 & r5
            if (r8 != 0) goto L_0x0428
            int[][] r8 = r1.channels     // Catch:{ Exception -> 0x066d }
            r8 = r8[r9]     // Catch:{ Exception -> 0x066d }
            r9 = 1
            r8 = r8[r9]     // Catch:{ Exception -> 0x066d }
            int r6 = r6 + r8
        L_0x0428:
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED     // Catch:{ Exception -> 0x066d }
            r8 = r8 & r5
            if (r8 != 0) goto L_0x0442
            int[][] r8 = r1.channels     // Catch:{ Exception -> 0x066d }
            r9 = 1
            r8 = r8[r9]     // Catch:{ Exception -> 0x066d }
            r10 = 0
            r8 = r8[r10]     // Catch:{ Exception -> 0x066d }
            int r6 = r6 + r8
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED     // Catch:{ Exception -> 0x066d }
            r8 = r8 & r5
            if (r8 != 0) goto L_0x0442
            int[][] r8 = r1.channels     // Catch:{ Exception -> 0x066d }
            r8 = r8[r9]     // Catch:{ Exception -> 0x066d }
            r8 = r8[r9]     // Catch:{ Exception -> 0x066d }
            int r6 = r6 + r8
        L_0x0442:
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_BOTS     // Catch:{ Exception -> 0x066d }
            r8 = r8 & r5
            if (r8 == 0) goto L_0x047c
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED     // Catch:{ Exception -> 0x066d }
            r8 = r8 & r5
            if (r8 != 0) goto L_0x0461
            int[][] r8 = r1.bots     // Catch:{ Exception -> 0x066d }
            r9 = 0
            r8 = r8[r9]     // Catch:{ Exception -> 0x066d }
            r8 = r8[r9]     // Catch:{ Exception -> 0x066d }
            int r6 = r6 + r8
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED     // Catch:{ Exception -> 0x066d }
            r8 = r8 & r5
            if (r8 != 0) goto L_0x0461
            int[][] r8 = r1.bots     // Catch:{ Exception -> 0x066d }
            r8 = r8[r9]     // Catch:{ Exception -> 0x066d }
            r9 = 1
            r8 = r8[r9]     // Catch:{ Exception -> 0x066d }
            int r6 = r6 + r8
        L_0x0461:
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED     // Catch:{ Exception -> 0x066d }
            r8 = r8 & r5
            if (r8 != 0) goto L_0x047c
            int[][] r8 = r1.bots     // Catch:{ Exception -> 0x066d }
            r10 = 1
            r8 = r8[r10]     // Catch:{ Exception -> 0x066d }
            r9 = 0
            r8 = r8[r9]     // Catch:{ Exception -> 0x066d }
            int r6 = r6 + r8
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED     // Catch:{ Exception -> 0x066d }
            r8 = r8 & r5
            if (r8 != 0) goto L_0x047d
            int[][] r8 = r1.bots     // Catch:{ Exception -> 0x066d }
            r8 = r8[r10]     // Catch:{ Exception -> 0x066d }
            r8 = r8[r10]     // Catch:{ Exception -> 0x066d }
            int r6 = r6 + r8
            goto L_0x047d
        L_0x047c:
            r10 = 1
        L_0x047d:
            if (r4 == 0) goto L_0x064c
            java.util.ArrayList<java.lang.Integer> r8 = r4.alwaysShow     // Catch:{ Exception -> 0x066d }
            int r8 = r8.size()     // Catch:{ Exception -> 0x066d }
            r9 = r6
            r6 = 0
        L_0x0487:
            if (r6 >= r8) goto L_0x0565
            java.util.ArrayList<java.lang.Integer> r12 = r4.alwaysShow     // Catch:{ Exception -> 0x066d }
            java.lang.Object r12 = r12.get(r6)     // Catch:{ Exception -> 0x066d }
            java.lang.Integer r12 = (java.lang.Integer) r12     // Catch:{ Exception -> 0x066d }
            int r12 = r12.intValue()     // Catch:{ Exception -> 0x066d }
            if (r12 <= 0) goto L_0x0510
            r13 = r9
            r9 = 0
        L_0x0499:
            r10 = 2
            if (r9 >= r10) goto L_0x050a
            if (r9 != 0) goto L_0x04a1
            r10 = r20
            goto L_0x04a2
        L_0x04a1:
            r10 = r11
        L_0x04a2:
            java.lang.Object r10 = r10.get(r12)     // Catch:{ Exception -> 0x066d }
            org.telegram.tgnet.TLRPC$User r10 = (org.telegram.tgnet.TLRPC$User) r10     // Catch:{ Exception -> 0x066d }
            if (r10 == 0) goto L_0x04ff
            if (r9 != 0) goto L_0x04b2
            r19 = r8
            r23 = r11
            r8 = 1
            goto L_0x04c9
        L_0x04b2:
            r19 = r8
            r17 = 0
            java.lang.Integer r8 = java.lang.Integer.valueOf(r17)     // Catch:{ Exception -> 0x066d }
            java.lang.Object r8 = r2.get(r12, r8)     // Catch:{ Exception -> 0x066d }
            java.lang.Integer r8 = (java.lang.Integer) r8     // Catch:{ Exception -> 0x066d }
            int r8 = r8.intValue()     // Catch:{ Exception -> 0x066d }
            r23 = r11
            if (r8 != 0) goto L_0x04c9
            goto L_0x0503
        L_0x04c9:
            boolean r11 = r10.bot     // Catch:{ Exception -> 0x066d }
            if (r11 == 0) goto L_0x04d0
            int r11 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_BOTS     // Catch:{ Exception -> 0x066d }
            goto L_0x04de
        L_0x04d0:
            boolean r11 = r10.self     // Catch:{ Exception -> 0x066d }
            if (r11 != 0) goto L_0x04dc
            boolean r11 = r10.contact     // Catch:{ Exception -> 0x066d }
            if (r11 == 0) goto L_0x04d9
            goto L_0x04dc
        L_0x04d9:
            int r11 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS     // Catch:{ Exception -> 0x066d }
            goto L_0x04de
        L_0x04dc:
            int r11 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CONTACTS     // Catch:{ Exception -> 0x066d }
        L_0x04de:
            r11 = r11 & r5
            if (r11 != 0) goto L_0x04e3
        L_0x04e1:
            int r13 = r13 + r8
            goto L_0x0503
        L_0x04e3:
            int r11 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED     // Catch:{ Exception -> 0x066d }
            r11 = r11 & r5
            if (r11 == 0) goto L_0x04f1
            int r11 = r10.id     // Catch:{ Exception -> 0x066d }
            int r11 = r14.indexOfKey(r11)     // Catch:{ Exception -> 0x066d }
            if (r11 < 0) goto L_0x04f1
            goto L_0x04e1
        L_0x04f1:
            int r11 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED     // Catch:{ Exception -> 0x066d }
            r11 = r11 & r5
            if (r11 == 0) goto L_0x0503
            int r10 = r10.id     // Catch:{ Exception -> 0x066d }
            int r10 = r15.indexOfKey(r10)     // Catch:{ Exception -> 0x066d }
            if (r10 < 0) goto L_0x0503
            goto L_0x04e1
        L_0x04ff:
            r19 = r8
            r23 = r11
        L_0x0503:
            int r9 = r9 + 1
            r8 = r19
            r11 = r23
            goto L_0x0499
        L_0x050a:
            r19 = r8
            r23 = r11
            r9 = r13
            goto L_0x055c
        L_0x0510:
            r19 = r8
            r23 = r11
            int r8 = -r12
            java.lang.Object r8 = r7.get(r8)     // Catch:{ Exception -> 0x066d }
            org.telegram.tgnet.TLRPC$Chat r8 = (org.telegram.tgnet.TLRPC$Chat) r8     // Catch:{ Exception -> 0x066d }
            if (r8 == 0) goto L_0x055c
            boolean r10 = org.telegram.messenger.ChatObject.isChannel(r8)     // Catch:{ Exception -> 0x066d }
            if (r10 == 0) goto L_0x052a
            boolean r10 = r8.megagroup     // Catch:{ Exception -> 0x066d }
            if (r10 != 0) goto L_0x052a
            int r10 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CHANNELS     // Catch:{ Exception -> 0x066d }
            goto L_0x052c
        L_0x052a:
            int r10 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_GROUPS     // Catch:{ Exception -> 0x066d }
        L_0x052c:
            r10 = r10 & r5
            if (r10 != 0) goto L_0x0532
        L_0x052f:
            int r9 = r9 + 1
            goto L_0x055c
        L_0x0532:
            int r10 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED     // Catch:{ Exception -> 0x066d }
            r10 = r10 & r5
            if (r10 == 0) goto L_0x054d
            int r10 = r8.id     // Catch:{ Exception -> 0x066d }
            int r10 = -r10
            int r10 = r14.indexOfKey(r10)     // Catch:{ Exception -> 0x066d }
            if (r10 < 0) goto L_0x054d
            android.util.LongSparseArray<java.lang.Integer> r10 = r1.dialogsWithMentions     // Catch:{ Exception -> 0x066d }
            int r11 = r8.id     // Catch:{ Exception -> 0x066d }
            int r11 = -r11
            long r11 = (long) r11     // Catch:{ Exception -> 0x066d }
            int r10 = r10.indexOfKey(r11)     // Catch:{ Exception -> 0x066d }
            if (r10 >= 0) goto L_0x054d
            goto L_0x052f
        L_0x054d:
            int r10 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED     // Catch:{ Exception -> 0x066d }
            r10 = r10 & r5
            if (r10 == 0) goto L_0x055c
            int r8 = r8.id     // Catch:{ Exception -> 0x066d }
            int r8 = -r8
            int r8 = r15.indexOfKey(r8)     // Catch:{ Exception -> 0x066d }
            if (r8 < 0) goto L_0x055c
            goto L_0x052f
        L_0x055c:
            int r6 = r6 + 1
            r8 = r19
            r11 = r23
            r10 = 1
            goto L_0x0487
        L_0x0565:
            r23 = r11
            java.util.ArrayList<java.lang.Integer> r6 = r4.neverShow     // Catch:{ Exception -> 0x066d }
            int r6 = r6.size()     // Catch:{ Exception -> 0x066d }
            r8 = 0
        L_0x056e:
            if (r8 >= r6) goto L_0x0641
            java.util.ArrayList<java.lang.Integer> r10 = r4.neverShow     // Catch:{ Exception -> 0x066d }
            java.lang.Object r10 = r10.get(r8)     // Catch:{ Exception -> 0x066d }
            java.lang.Integer r10 = (java.lang.Integer) r10     // Catch:{ Exception -> 0x066d }
            int r10 = r10.intValue()     // Catch:{ Exception -> 0x066d }
            if (r10 <= 0) goto L_0x05f2
            r11 = r9
            r9 = 0
        L_0x0580:
            r12 = 2
            if (r9 >= r12) goto L_0x05ec
            if (r9 != 0) goto L_0x0588
            r13 = r20
            goto L_0x058a
        L_0x0588:
            r13 = r23
        L_0x058a:
            java.lang.Object r13 = r13.get(r10)     // Catch:{ Exception -> 0x066d }
            org.telegram.tgnet.TLRPC$User r13 = (org.telegram.tgnet.TLRPC$User) r13     // Catch:{ Exception -> 0x066d }
            if (r13 == 0) goto L_0x05e3
            if (r9 != 0) goto L_0x059a
            r24 = r2
            r12 = 1
            r16 = 0
            goto L_0x05af
        L_0x059a:
            r16 = 0
            java.lang.Integer r12 = java.lang.Integer.valueOf(r16)     // Catch:{ Exception -> 0x066d }
            java.lang.Object r12 = r2.get(r10, r12)     // Catch:{ Exception -> 0x066d }
            java.lang.Integer r12 = (java.lang.Integer) r12     // Catch:{ Exception -> 0x066d }
            int r12 = r12.intValue()     // Catch:{ Exception -> 0x066d }
            r24 = r2
            if (r12 != 0) goto L_0x05af
            goto L_0x05e7
        L_0x05af:
            boolean r2 = r13.bot     // Catch:{ Exception -> 0x066d }
            if (r2 == 0) goto L_0x05b6
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_BOTS     // Catch:{ Exception -> 0x066d }
            goto L_0x05c4
        L_0x05b6:
            boolean r2 = r13.self     // Catch:{ Exception -> 0x066d }
            if (r2 != 0) goto L_0x05c2
            boolean r2 = r13.contact     // Catch:{ Exception -> 0x066d }
            if (r2 == 0) goto L_0x05bf
            goto L_0x05c2
        L_0x05bf:
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS     // Catch:{ Exception -> 0x066d }
            goto L_0x05c4
        L_0x05c2:
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CONTACTS     // Catch:{ Exception -> 0x066d }
        L_0x05c4:
            r2 = r2 & r5
            if (r2 == 0) goto L_0x05e7
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED     // Catch:{ Exception -> 0x066d }
            r2 = r2 & r5
            if (r2 == 0) goto L_0x05d4
            int r2 = r13.id     // Catch:{ Exception -> 0x066d }
            int r2 = r15.indexOfKey(r2)     // Catch:{ Exception -> 0x066d }
            if (r2 >= 0) goto L_0x05e7
        L_0x05d4:
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED     // Catch:{ Exception -> 0x066d }
            r2 = r2 & r5
            if (r2 == 0) goto L_0x05e1
            int r2 = r13.id     // Catch:{ Exception -> 0x066d }
            int r2 = r14.indexOfKey(r2)     // Catch:{ Exception -> 0x066d }
            if (r2 >= 0) goto L_0x05e7
        L_0x05e1:
            int r11 = r11 - r12
            goto L_0x05e7
        L_0x05e3:
            r24 = r2
            r16 = 0
        L_0x05e7:
            int r9 = r9 + 1
            r2 = r24
            goto L_0x0580
        L_0x05ec:
            r24 = r2
            r16 = 0
            r9 = r11
            goto L_0x063b
        L_0x05f2:
            r24 = r2
            r16 = 0
            int r2 = -r10
            java.lang.Object r2 = r7.get(r2)     // Catch:{ Exception -> 0x066d }
            org.telegram.tgnet.TLRPC$Chat r2 = (org.telegram.tgnet.TLRPC$Chat) r2     // Catch:{ Exception -> 0x066d }
            if (r2 == 0) goto L_0x063b
            boolean r10 = org.telegram.messenger.ChatObject.isChannel(r2)     // Catch:{ Exception -> 0x066d }
            if (r10 == 0) goto L_0x060c
            boolean r10 = r2.megagroup     // Catch:{ Exception -> 0x066d }
            if (r10 != 0) goto L_0x060c
            int r10 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CHANNELS     // Catch:{ Exception -> 0x066d }
            goto L_0x060e
        L_0x060c:
            int r10 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_GROUPS     // Catch:{ Exception -> 0x066d }
        L_0x060e:
            r10 = r10 & r5
            if (r10 == 0) goto L_0x063b
            int r10 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED     // Catch:{ Exception -> 0x066d }
            r10 = r10 & r5
            if (r10 == 0) goto L_0x061f
            int r10 = r2.id     // Catch:{ Exception -> 0x066d }
            int r10 = -r10
            int r10 = r15.indexOfKey(r10)     // Catch:{ Exception -> 0x066d }
            if (r10 >= 0) goto L_0x063b
        L_0x061f:
            int r10 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED     // Catch:{ Exception -> 0x066d }
            r10 = r10 & r5
            if (r10 == 0) goto L_0x0639
            int r10 = r2.id     // Catch:{ Exception -> 0x066d }
            int r10 = -r10
            int r10 = r14.indexOfKey(r10)     // Catch:{ Exception -> 0x066d }
            if (r10 < 0) goto L_0x0639
            android.util.LongSparseArray<java.lang.Integer> r10 = r1.dialogsWithMentions     // Catch:{ Exception -> 0x066d }
            int r2 = r2.id     // Catch:{ Exception -> 0x066d }
            int r2 = -r2
            long r11 = (long) r2     // Catch:{ Exception -> 0x066d }
            int r2 = r10.indexOfKey(r11)     // Catch:{ Exception -> 0x066d }
            if (r2 < 0) goto L_0x063b
        L_0x0639:
            int r9 = r9 + -1
        L_0x063b:
            int r8 = r8 + 1
            r2 = r24
            goto L_0x056e
        L_0x0641:
            r24 = r2
            r16 = 0
            r4.pendingUnreadCount = r9     // Catch:{ Exception -> 0x066d }
            if (r26 == 0) goto L_0x0665
            r4.unreadCount = r9     // Catch:{ Exception -> 0x066d }
            goto L_0x0665
        L_0x064c:
            r24 = r2
            r23 = r11
            r16 = 0
            if (r3 != r0) goto L_0x065b
            r1.pendingMainUnreadCount = r6     // Catch:{ Exception -> 0x066d }
            if (r26 == 0) goto L_0x0665
            r1.mainUnreadCount = r6     // Catch:{ Exception -> 0x066d }
            goto L_0x0665
        L_0x065b:
            int r2 = r0 + 1
            if (r3 != r2) goto L_0x0665
            r1.pendingArchiveUnreadCount = r6     // Catch:{ Exception -> 0x066d }
            if (r26 == 0) goto L_0x0665
            r1.archiveUnreadCount = r6     // Catch:{ Exception -> 0x066d }
        L_0x0665:
            int r3 = r3 + 1
            r11 = r23
            r2 = r24
            goto L_0x0326
        L_0x066d:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
        L_0x0671:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.calcUnreadCounters(boolean):void");
    }

    private void saveDialogFilterInternal(MessagesController.DialogFilter dialogFilter, boolean z, boolean z2) {
        try {
            if (!this.dialogFilters.contains(dialogFilter)) {
                if (z) {
                    this.dialogFilters.add(0, dialogFilter);
                } else {
                    this.dialogFilters.add(dialogFilter);
                }
                this.dialogFiltersMap.put(dialogFilter.id, dialogFilter);
            }
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO dialog_filter VALUES(?, ?, ?, ?, ?)");
            executeFast.bindInteger(1, dialogFilter.id);
            executeFast.bindInteger(2, dialogFilter.order);
            executeFast.bindInteger(3, dialogFilter.unreadCount);
            executeFast.bindInteger(4, dialogFilter.flags);
            executeFast.bindString(5, dialogFilter.name);
            executeFast.step();
            executeFast.dispose();
            if (z2) {
                SQLiteDatabase sQLiteDatabase = this.database;
                sQLiteDatabase.executeFast("DELETE FROM dialog_filter_ep WHERE id = " + dialogFilter.id).stepThis().dispose();
                SQLiteDatabase sQLiteDatabase2 = this.database;
                sQLiteDatabase2.executeFast("DELETE FROM dialog_filter_pin_v2 WHERE id = " + dialogFilter.id).stepThis().dispose();
                this.database.beginTransaction();
                SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO dialog_filter_pin_v2 VALUES(?, ?, ?)");
                int size = dialogFilter.alwaysShow.size();
                for (int i = 0; i < size; i++) {
                    long intValue = (long) dialogFilter.alwaysShow.get(i).intValue();
                    executeFast2.requery();
                    executeFast2.bindInteger(1, dialogFilter.id);
                    executeFast2.bindLong(2, intValue);
                    executeFast2.bindInteger(3, dialogFilter.pinnedDialogs.get(intValue, Integer.MIN_VALUE).intValue());
                    executeFast2.step();
                }
                int size2 = dialogFilter.pinnedDialogs.size();
                for (int i2 = 0; i2 < size2; i2++) {
                    long keyAt = dialogFilter.pinnedDialogs.keyAt(i2);
                    if (((int) keyAt) == 0) {
                        executeFast2.requery();
                        executeFast2.bindInteger(1, dialogFilter.id);
                        executeFast2.bindLong(2, keyAt);
                        executeFast2.bindInteger(3, dialogFilter.pinnedDialogs.valueAt(i2).intValue());
                        executeFast2.step();
                    }
                }
                executeFast2.dispose();
                SQLitePreparedStatement executeFast3 = this.database.executeFast("REPLACE INTO dialog_filter_ep VALUES(?, ?)");
                int size3 = dialogFilter.neverShow.size();
                for (int i3 = 0; i3 < size3; i3++) {
                    executeFast3.requery();
                    executeFast3.bindInteger(1, dialogFilter.id);
                    executeFast3.bindLong(2, (long) dialogFilter.neverShow.get(i3).intValue());
                    executeFast3.step();
                }
                executeFast3.dispose();
                this.database.commitTransaction();
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void checkLoadedRemoteFilters(TLRPC$Vector tLRPC$Vector) {
        this.storageQueue.postRunnable(new Runnable(tLRPC$Vector) {
            public final /* synthetic */ TLRPC$Vector f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesStorage.this.lambda$checkLoadedRemoteFilters$34$MessagesStorage(this.f$1);
            }
        });
    }

    /* JADX WARNING: Removed duplicated region for block: B:172:0x036e A[Catch:{ Exception -> 0x05cf }] */
    /* JADX WARNING: Removed duplicated region for block: B:173:0x037d A[Catch:{ Exception -> 0x05cf }] */
    /* JADX WARNING: Removed duplicated region for block: B:176:0x0385 A[Catch:{ Exception -> 0x05cf }] */
    /* JADX WARNING: Removed duplicated region for block: B:177:0x0391 A[Catch:{ Exception -> 0x05cf }] */
    /* JADX WARNING: Removed duplicated region for block: B:179:0x0397 A[Catch:{ Exception -> 0x05cf }] */
    /* JADX WARNING: Removed duplicated region for block: B:180:0x039d A[Catch:{ Exception -> 0x05cf }] */
    /* JADX WARNING: Removed duplicated region for block: B:182:0x03a1 A[Catch:{ Exception -> 0x05cf }] */
    /* JADX WARNING: Removed duplicated region for block: B:183:0x03ad A[Catch:{ Exception -> 0x05cf }] */
    /* JADX WARNING: Removed duplicated region for block: B:92:0x0197 A[Catch:{ Exception -> 0x05cf }] */
    /* JADX WARNING: Removed duplicated region for block: B:99:0x01b8 A[Catch:{ Exception -> 0x05cf }] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$checkLoadedRemoteFilters$34$MessagesStorage(org.telegram.tgnet.TLRPC$Vector r38) {
        /*
            r37 = this;
            r12 = r37
            r0 = r38
            android.util.SparseArray r7 = new android.util.SparseArray     // Catch:{ Exception -> 0x05d3 }
            r7.<init>()     // Catch:{ Exception -> 0x05d3 }
            java.util.ArrayList<org.telegram.messenger.MessagesController$DialogFilter> r1 = r12.dialogFilters     // Catch:{ Exception -> 0x05d3 }
            int r1 = r1.size()     // Catch:{ Exception -> 0x05d3 }
            r3 = 0
        L_0x0010:
            if (r3 >= r1) goto L_0x0022
            java.util.ArrayList<org.telegram.messenger.MessagesController$DialogFilter> r4 = r12.dialogFilters     // Catch:{ Exception -> 0x05d3 }
            java.lang.Object r4 = r4.get(r3)     // Catch:{ Exception -> 0x05d3 }
            org.telegram.messenger.MessagesController$DialogFilter r4 = (org.telegram.messenger.MessagesController.DialogFilter) r4     // Catch:{ Exception -> 0x05d3 }
            int r5 = r4.id     // Catch:{ Exception -> 0x05d3 }
            r7.put(r5, r4)     // Catch:{ Exception -> 0x05d3 }
            int r3 = r3 + 1
            goto L_0x0010
        L_0x0022:
            java.util.ArrayList r8 = new java.util.ArrayList     // Catch:{ Exception -> 0x05d3 }
            r8.<init>()     // Catch:{ Exception -> 0x05d3 }
            java.util.ArrayList r1 = new java.util.ArrayList     // Catch:{ Exception -> 0x05d3 }
            r1.<init>()     // Catch:{ Exception -> 0x05d3 }
            java.util.HashMap r15 = new java.util.HashMap     // Catch:{ Exception -> 0x05d3 }
            r15.<init>()     // Catch:{ Exception -> 0x05d3 }
            java.util.ArrayList r3 = new java.util.ArrayList     // Catch:{ Exception -> 0x05d3 }
            r3.<init>()     // Catch:{ Exception -> 0x05d3 }
            java.util.HashMap r4 = new java.util.HashMap     // Catch:{ Exception -> 0x05d3 }
            r4.<init>()     // Catch:{ Exception -> 0x05d3 }
            java.util.ArrayList r5 = new java.util.ArrayList     // Catch:{ Exception -> 0x05d3 }
            r5.<init>()     // Catch:{ Exception -> 0x05d3 }
            java.util.HashMap r14 = new java.util.HashMap     // Catch:{ Exception -> 0x05d3 }
            r14.<init>()     // Catch:{ Exception -> 0x05d3 }
            java.util.ArrayList r6 = new java.util.ArrayList     // Catch:{ Exception -> 0x05d3 }
            r6.<init>()     // Catch:{ Exception -> 0x05d3 }
            java.util.HashMap r10 = new java.util.HashMap     // Catch:{ Exception -> 0x05d3 }
            r10.<init>()     // Catch:{ Exception -> 0x05d3 }
            java.util.HashMap r9 = new java.util.HashMap     // Catch:{ Exception -> 0x05d3 }
            r9.<init>()     // Catch:{ Exception -> 0x05d3 }
            java.util.HashSet r11 = new java.util.HashSet     // Catch:{ Exception -> 0x05d3 }
            r11.<init>()     // Catch:{ Exception -> 0x05d3 }
            java.util.ArrayList<java.lang.Object> r13 = r0.objects     // Catch:{ Exception -> 0x05d3 }
            int r13 = r13.size()     // Catch:{ Exception -> 0x05d3 }
            r2 = 0
        L_0x0060:
            if (r2 >= r13) goto L_0x04eb
            r17 = r13
            java.util.ArrayList<java.lang.Object> r13 = r0.objects     // Catch:{ Exception -> 0x05cf }
            java.lang.Object r13 = r13.get(r2)     // Catch:{ Exception -> 0x05cf }
            org.telegram.tgnet.TLRPC$TL_dialogFilter r13 = (org.telegram.tgnet.TLRPC$TL_dialogFilter) r13     // Catch:{ Exception -> 0x05cf }
            int r0 = r13.id     // Catch:{ Exception -> 0x05cf }
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)     // Catch:{ Exception -> 0x05cf }
            r8.add(r0)     // Catch:{ Exception -> 0x05cf }
            boolean r0 = r13.contacts     // Catch:{ Exception -> 0x05cf }
            if (r0 == 0) goto L_0x0082
            int r0 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CONTACTS     // Catch:{ Exception -> 0x05d3 }
            r16 = 0
            r0 = r0 | 0
            r23 = r8
            goto L_0x0087
        L_0x0082:
            r16 = 0
            r23 = r8
            r0 = 0
        L_0x0087:
            boolean r8 = r13.non_contacts     // Catch:{ Exception -> 0x05cf }
            if (r8 == 0) goto L_0x008e
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS     // Catch:{ Exception -> 0x05d3 }
            r0 = r0 | r8
        L_0x008e:
            boolean r8 = r13.groups     // Catch:{ Exception -> 0x05cf }
            if (r8 == 0) goto L_0x0095
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_GROUPS     // Catch:{ Exception -> 0x05d3 }
            r0 = r0 | r8
        L_0x0095:
            boolean r8 = r13.broadcasts     // Catch:{ Exception -> 0x05cf }
            if (r8 == 0) goto L_0x009c
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CHANNELS     // Catch:{ Exception -> 0x05d3 }
            r0 = r0 | r8
        L_0x009c:
            boolean r8 = r13.bots     // Catch:{ Exception -> 0x05cf }
            if (r8 == 0) goto L_0x00a3
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_BOTS     // Catch:{ Exception -> 0x05d3 }
            r0 = r0 | r8
        L_0x00a3:
            boolean r8 = r13.exclude_muted     // Catch:{ Exception -> 0x05cf }
            if (r8 == 0) goto L_0x00aa
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED     // Catch:{ Exception -> 0x05d3 }
            r0 = r0 | r8
        L_0x00aa:
            boolean r8 = r13.exclude_read     // Catch:{ Exception -> 0x05cf }
            if (r8 == 0) goto L_0x00b1
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_READ     // Catch:{ Exception -> 0x05d3 }
            r0 = r0 | r8
        L_0x00b1:
            boolean r8 = r13.exclude_archived     // Catch:{ Exception -> 0x05cf }
            if (r8 == 0) goto L_0x00b8
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED     // Catch:{ Exception -> 0x05d3 }
            r0 = r0 | r8
        L_0x00b8:
            android.util.SparseArray<org.telegram.messenger.MessagesController$DialogFilter> r8 = r12.dialogFiltersMap     // Catch:{ Exception -> 0x05cf }
            int r12 = r13.id     // Catch:{ Exception -> 0x05cf }
            java.lang.Object r8 = r8.get(r12)     // Catch:{ Exception -> 0x05cf }
            org.telegram.messenger.MessagesController$DialogFilter r8 = (org.telegram.messenger.MessagesController.DialogFilter) r8     // Catch:{ Exception -> 0x05cf }
            r18 = 1
            if (r8 == 0) goto L_0x03b8
            int r12 = r13.id     // Catch:{ Exception -> 0x05cf }
            r7.remove(r12)     // Catch:{ Exception -> 0x05cf }
            java.lang.String r12 = r8.name     // Catch:{ Exception -> 0x05cf }
            r22 = r7
            java.lang.String r7 = r13.title     // Catch:{ Exception -> 0x05cf }
            boolean r7 = android.text.TextUtils.equals(r12, r7)     // Catch:{ Exception -> 0x05cf }
            if (r7 != 0) goto L_0x00dd
            java.lang.String r7 = r13.title     // Catch:{ Exception -> 0x05cf }
            r8.name = r7     // Catch:{ Exception -> 0x05cf }
            r7 = 1
            goto L_0x00de
        L_0x00dd:
            r7 = 0
        L_0x00de:
            int r12 = r8.flags     // Catch:{ Exception -> 0x05cf }
            if (r12 == r0) goto L_0x00e7
            r8.flags = r0     // Catch:{ Exception -> 0x05cf }
            r0 = 1
            r7 = 1
            goto L_0x00e8
        L_0x00e7:
            r0 = 0
        L_0x00e8:
            java.util.HashSet r12 = new java.util.HashSet     // Catch:{ Exception -> 0x05cf }
            r20 = r0
            java.util.ArrayList<java.lang.Integer> r0 = r8.alwaysShow     // Catch:{ Exception -> 0x05cf }
            r12.<init>(r0)     // Catch:{ Exception -> 0x05cf }
            java.util.ArrayList<java.lang.Integer> r0 = r8.neverShow     // Catch:{ Exception -> 0x05cf }
            r12.addAll(r0)     // Catch:{ Exception -> 0x05cf }
            java.util.HashSet r0 = new java.util.HashSet     // Catch:{ Exception -> 0x05cf }
            r0.<init>()     // Catch:{ Exception -> 0x05cf }
            r21 = 0
            r24 = r7
            android.util.LongSparseArray<java.lang.Integer> r7 = r8.pinnedDialogs     // Catch:{ Exception -> 0x05cf }
            int r7 = r7.size()     // Catch:{ Exception -> 0x05cf }
            if (r7 == 0) goto L_0x0182
            java.util.ArrayList r7 = new java.util.ArrayList     // Catch:{ Exception -> 0x05cf }
            r7.<init>()     // Catch:{ Exception -> 0x05cf }
            r25 = r2
            android.util.LongSparseArray<java.lang.Integer> r2 = r8.pinnedDialogs     // Catch:{ Exception -> 0x05cf }
            int r2 = r2.size()     // Catch:{ Exception -> 0x05cf }
            r26 = r11
            r11 = 0
            r27 = 0
        L_0x0119:
            if (r11 >= r2) goto L_0x013c
            r28 = r2
            android.util.LongSparseArray<java.lang.Integer> r2 = r8.pinnedDialogs     // Catch:{ Exception -> 0x05cf }
            r30 = r9
            r29 = r10
            long r9 = r2.keyAt(r11)     // Catch:{ Exception -> 0x05cf }
            int r2 = (int) r9     // Catch:{ Exception -> 0x05cf }
            if (r2 != 0) goto L_0x012c
            r27 = 1
        L_0x012c:
            java.lang.Long r2 = java.lang.Long.valueOf(r9)     // Catch:{ Exception -> 0x05cf }
            r7.add(r2)     // Catch:{ Exception -> 0x05cf }
            int r11 = r11 + 1
            r2 = r28
            r10 = r29
            r9 = r30
            goto L_0x0119
        L_0x013c:
            r30 = r9
            r29 = r10
            if (r27 == 0) goto L_0x017f
            java.util.LinkedHashMap r2 = new java.util.LinkedHashMap     // Catch:{ Exception -> 0x05cf }
            r2.<init>()     // Catch:{ Exception -> 0x05cf }
            android.util.LongSparseArray<java.lang.Integer> r9 = r8.pinnedDialogs     // Catch:{ Exception -> 0x05cf }
            org.telegram.messenger.-$$Lambda$MessagesStorage$gI5OYUcz3fl3CzSqjYyEPZfySk4 r10 = new org.telegram.messenger.-$$Lambda$MessagesStorage$gI5OYUcz3fl3CzSqjYyEPZfySk4     // Catch:{ Exception -> 0x05cf }
            r10.<init>(r9)     // Catch:{ Exception -> 0x05cf }
            java.util.Collections.sort(r7, r10)     // Catch:{ Exception -> 0x05cf }
            int r9 = r7.size()     // Catch:{ Exception -> 0x05cf }
            r10 = 0
        L_0x0156:
            if (r10 >= r9) goto L_0x017c
            java.lang.Object r11 = r7.get(r10)     // Catch:{ Exception -> 0x05cf }
            java.lang.Long r11 = (java.lang.Long) r11     // Catch:{ Exception -> 0x05cf }
            r27 = r6
            r28 = r7
            long r6 = r11.longValue()     // Catch:{ Exception -> 0x05cf }
            int r11 = (int) r6     // Catch:{ Exception -> 0x05cf }
            if (r11 == 0) goto L_0x016a
            goto L_0x0175
        L_0x016a:
            java.lang.Integer r11 = java.lang.Integer.valueOf(r10)     // Catch:{ Exception -> 0x05cf }
            java.lang.Long r6 = java.lang.Long.valueOf(r6)     // Catch:{ Exception -> 0x05cf }
            r2.put(r11, r6)     // Catch:{ Exception -> 0x05cf }
        L_0x0175:
            int r10 = r10 + 1
            r6 = r27
            r7 = r28
            goto L_0x0156
        L_0x017c:
            r27 = r6
            goto L_0x018e
        L_0x017f:
            r27 = r6
            goto L_0x018c
        L_0x0182:
            r25 = r2
            r27 = r6
            r30 = r9
            r29 = r10
            r26 = r11
        L_0x018c:
            r2 = r21
        L_0x018e:
            android.util.LongSparseArray<java.lang.Integer> r6 = r8.pinnedDialogs     // Catch:{ Exception -> 0x05cf }
            int r6 = r6.size()     // Catch:{ Exception -> 0x05cf }
            r7 = 0
        L_0x0195:
            if (r7 >= r6) goto L_0x01b2
            android.util.LongSparseArray<java.lang.Integer> r9 = r8.pinnedDialogs     // Catch:{ Exception -> 0x05cf }
            long r9 = r9.keyAt(r7)     // Catch:{ Exception -> 0x05cf }
            int r10 = (int) r9     // Catch:{ Exception -> 0x05cf }
            if (r10 != 0) goto L_0x01a1
            goto L_0x01af
        L_0x01a1:
            java.lang.Integer r9 = java.lang.Integer.valueOf(r10)     // Catch:{ Exception -> 0x05cf }
            r0.add(r9)     // Catch:{ Exception -> 0x05cf }
            java.lang.Integer r9 = java.lang.Integer.valueOf(r10)     // Catch:{ Exception -> 0x05cf }
            r12.remove(r9)     // Catch:{ Exception -> 0x05cf }
        L_0x01af:
            int r7 = r7 + 1
            goto L_0x0195
        L_0x01b2:
            r7 = r24
            r6 = 0
            r9 = 2
        L_0x01b6:
            if (r6 >= r9) goto L_0x0366
            if (r6 != 0) goto L_0x01bd
            java.util.ArrayList<org.telegram.tgnet.TLRPC$InputPeer> r9 = r13.include_peers     // Catch:{ Exception -> 0x05cf }
            goto L_0x01bf
        L_0x01bd:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$InputPeer> r9 = r13.exclude_peers     // Catch:{ Exception -> 0x05cf }
        L_0x01bf:
            if (r6 != 0) goto L_0x01c4
            java.util.ArrayList<java.lang.Integer> r10 = r8.alwaysShow     // Catch:{ Exception -> 0x05cf }
            goto L_0x01c6
        L_0x01c4:
            java.util.ArrayList<java.lang.Integer> r10 = r8.neverShow     // Catch:{ Exception -> 0x05cf }
        L_0x01c6:
            if (r6 != 0) goto L_0x02bb
            android.util.LongSparseArray<java.lang.Integer> r11 = r8.pinnedDialogs     // Catch:{ Exception -> 0x05cf }
            r11.clear()     // Catch:{ Exception -> 0x05cf }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$InputPeer> r11 = r13.pinned_peers     // Catch:{ Exception -> 0x05cf }
            int r11 = r11.size()     // Catch:{ Exception -> 0x05cf }
            r21 = r7
            r7 = 0
        L_0x01d6:
            if (r7 >= r11) goto L_0x027c
            r24 = r11
            java.util.ArrayList<org.telegram.tgnet.TLRPC$InputPeer> r11 = r13.pinned_peers     // Catch:{ Exception -> 0x05cf }
            java.lang.Object r11 = r11.get(r7)     // Catch:{ Exception -> 0x05cf }
            org.telegram.tgnet.TLRPC$InputPeer r11 = (org.telegram.tgnet.TLRPC$InputPeer) r11     // Catch:{ Exception -> 0x05cf }
            r28 = r13
            int r13 = r11.user_id     // Catch:{ Exception -> 0x05cf }
            if (r13 == 0) goto L_0x01f1
            int r13 = r11.user_id     // Catch:{ Exception -> 0x05cf }
            java.lang.Integer r13 = java.lang.Integer.valueOf(r13)     // Catch:{ Exception -> 0x05cf }
        L_0x01ee:
            r31 = r6
            goto L_0x0200
        L_0x01f1:
            int r13 = r11.chat_id     // Catch:{ Exception -> 0x05cf }
            if (r13 == 0) goto L_0x01f8
            int r13 = r11.chat_id     // Catch:{ Exception -> 0x05cf }
            goto L_0x01fa
        L_0x01f8:
            int r13 = r11.channel_id     // Catch:{ Exception -> 0x05cf }
        L_0x01fa:
            int r13 = -r13
            java.lang.Integer r13 = java.lang.Integer.valueOf(r13)     // Catch:{ Exception -> 0x05cf }
            goto L_0x01ee
        L_0x0200:
            java.util.ArrayList<java.lang.Integer> r6 = r8.alwaysShow     // Catch:{ Exception -> 0x05cf }
            boolean r6 = r6.contains(r13)     // Catch:{ Exception -> 0x05cf }
            if (r6 != 0) goto L_0x020d
            java.util.ArrayList<java.lang.Integer> r6 = r8.alwaysShow     // Catch:{ Exception -> 0x05cf }
            r6.add(r13)     // Catch:{ Exception -> 0x05cf }
        L_0x020d:
            android.util.LongSparseArray<java.lang.Integer> r6 = r8.pinnedDialogs     // Catch:{ Exception -> 0x05cf }
            int r6 = r6.size()     // Catch:{ Exception -> 0x05cf }
            r32 = r3
            if (r2 == 0) goto L_0x023f
        L_0x0217:
            java.lang.Integer r3 = java.lang.Integer.valueOf(r6)     // Catch:{ Exception -> 0x05cf }
            java.lang.Object r3 = r2.remove(r3)     // Catch:{ Exception -> 0x05cf }
            java.lang.Long r3 = (java.lang.Long) r3     // Catch:{ Exception -> 0x05cf }
            if (r3 == 0) goto L_0x023f
            r33 = r4
            android.util.LongSparseArray<java.lang.Integer> r4 = r8.pinnedDialogs     // Catch:{ Exception -> 0x05cf }
            r34 = r9
            r35 = r10
            long r9 = r3.longValue()     // Catch:{ Exception -> 0x05cf }
            java.lang.Integer r3 = java.lang.Integer.valueOf(r6)     // Catch:{ Exception -> 0x05cf }
            r4.put(r9, r3)     // Catch:{ Exception -> 0x05cf }
            int r6 = r6 + 1
            r4 = r33
            r9 = r34
            r10 = r35
            goto L_0x0217
        L_0x023f:
            r33 = r4
            r34 = r9
            r35 = r10
            android.util.LongSparseArray<java.lang.Integer> r3 = r8.pinnedDialogs     // Catch:{ Exception -> 0x05cf }
            int r4 = r13.intValue()     // Catch:{ Exception -> 0x05cf }
            long r9 = (long) r4     // Catch:{ Exception -> 0x05cf }
            java.lang.Integer r4 = java.lang.Integer.valueOf(r6)     // Catch:{ Exception -> 0x05cf }
            r3.put(r9, r4)     // Catch:{ Exception -> 0x05cf }
            r12.remove(r13)     // Catch:{ Exception -> 0x05cf }
            boolean r3 = r0.remove(r13)     // Catch:{ Exception -> 0x05cf }
            if (r3 != 0) goto L_0x026a
            boolean r3 = r14.containsKey(r13)     // Catch:{ Exception -> 0x05cf }
            if (r3 != 0) goto L_0x0268
            r5.add(r13)     // Catch:{ Exception -> 0x05cf }
            r14.put(r13, r11)     // Catch:{ Exception -> 0x05cf }
        L_0x0268:
            r21 = 1
        L_0x026a:
            int r7 = r7 + 1
            r11 = r24
            r13 = r28
            r6 = r31
            r3 = r32
            r4 = r33
            r9 = r34
            r10 = r35
            goto L_0x01d6
        L_0x027c:
            r32 = r3
            r33 = r4
            r31 = r6
            r34 = r9
            r35 = r10
            r28 = r13
            if (r2 == 0) goto L_0x02b8
            java.util.Set r3 = r2.entrySet()     // Catch:{ Exception -> 0x05cf }
            java.util.Iterator r3 = r3.iterator()     // Catch:{ Exception -> 0x05cf }
        L_0x0292:
            boolean r4 = r3.hasNext()     // Catch:{ Exception -> 0x05cf }
            if (r4 == 0) goto L_0x02b8
            java.lang.Object r4 = r3.next()     // Catch:{ Exception -> 0x05cf }
            java.util.Map$Entry r4 = (java.util.Map.Entry) r4     // Catch:{ Exception -> 0x05cf }
            android.util.LongSparseArray<java.lang.Integer> r6 = r8.pinnedDialogs     // Catch:{ Exception -> 0x05cf }
            java.lang.Object r4 = r4.getValue()     // Catch:{ Exception -> 0x05cf }
            java.lang.Long r4 = (java.lang.Long) r4     // Catch:{ Exception -> 0x05cf }
            long r9 = r4.longValue()     // Catch:{ Exception -> 0x05cf }
            android.util.LongSparseArray<java.lang.Integer> r4 = r8.pinnedDialogs     // Catch:{ Exception -> 0x05cf }
            int r4 = r4.size()     // Catch:{ Exception -> 0x05cf }
            java.lang.Integer r4 = java.lang.Integer.valueOf(r4)     // Catch:{ Exception -> 0x05cf }
            r6.put(r9, r4)     // Catch:{ Exception -> 0x05cf }
            goto L_0x0292
        L_0x02b8:
            r7 = r21
            goto L_0x02c7
        L_0x02bb:
            r32 = r3
            r33 = r4
            r31 = r6
            r34 = r9
            r35 = r10
            r28 = r13
        L_0x02c7:
            int r3 = r34.size()     // Catch:{ Exception -> 0x05cf }
            r4 = 0
        L_0x02cc:
            if (r4 >= r3) goto L_0x0355
            r9 = r34
            java.lang.Object r6 = r9.get(r4)     // Catch:{ Exception -> 0x05cf }
            org.telegram.tgnet.TLRPC$InputPeer r6 = (org.telegram.tgnet.TLRPC$InputPeer) r6     // Catch:{ Exception -> 0x05cf }
            int r10 = r6.user_id     // Catch:{ Exception -> 0x05cf }
            if (r10 == 0) goto L_0x030a
            int r10 = r6.user_id     // Catch:{ Exception -> 0x05cf }
            java.lang.Integer r10 = java.lang.Integer.valueOf(r10)     // Catch:{ Exception -> 0x05cf }
            boolean r11 = r12.remove(r10)     // Catch:{ Exception -> 0x05cf }
            if (r11 != 0) goto L_0x0303
            r11 = r35
            boolean r7 = r11.contains(r10)     // Catch:{ Exception -> 0x05cf }
            if (r7 != 0) goto L_0x02f1
            r11.add(r10)     // Catch:{ Exception -> 0x05cf }
        L_0x02f1:
            boolean r7 = r15.containsKey(r10)     // Catch:{ Exception -> 0x05cf }
            if (r7 != 0) goto L_0x0301
            r1.add(r10)     // Catch:{ Exception -> 0x05cf }
            r15.put(r10, r6)     // Catch:{ Exception -> 0x05cf }
            r7 = 1
            r20 = 1
            goto L_0x0305
        L_0x0301:
            r7 = 1
            goto L_0x0305
        L_0x0303:
            r11 = r35
        L_0x0305:
            r6 = r32
            r13 = r33
            goto L_0x0349
        L_0x030a:
            r11 = r35
            int r10 = r6.chat_id     // Catch:{ Exception -> 0x05cf }
            if (r10 == 0) goto L_0x0313
            int r10 = r6.chat_id     // Catch:{ Exception -> 0x05cf }
            goto L_0x0315
        L_0x0313:
            int r10 = r6.channel_id     // Catch:{ Exception -> 0x05cf }
        L_0x0315:
            java.lang.Integer r10 = java.lang.Integer.valueOf(r10)     // Catch:{ Exception -> 0x05cf }
            int r13 = r10.intValue()     // Catch:{ Exception -> 0x05cf }
            int r13 = -r13
            java.lang.Integer r13 = java.lang.Integer.valueOf(r13)     // Catch:{ Exception -> 0x05cf }
            boolean r21 = r12.remove(r13)     // Catch:{ Exception -> 0x05cf }
            if (r21 != 0) goto L_0x0305
            boolean r7 = r11.contains(r13)     // Catch:{ Exception -> 0x05cf }
            if (r7 != 0) goto L_0x0331
            r11.add(r13)     // Catch:{ Exception -> 0x05cf }
        L_0x0331:
            r13 = r33
            boolean r7 = r13.containsKey(r10)     // Catch:{ Exception -> 0x05cf }
            if (r7 != 0) goto L_0x0346
            r7 = r32
            r7.add(r10)     // Catch:{ Exception -> 0x05cf }
            r13.put(r10, r6)     // Catch:{ Exception -> 0x05cf }
            r6 = r7
            r7 = 1
            r20 = 1
            goto L_0x0349
        L_0x0346:
            r6 = r32
            r7 = 1
        L_0x0349:
            int r4 = r4 + 1
            r32 = r6
            r34 = r9
            r35 = r11
            r33 = r13
            goto L_0x02cc
        L_0x0355:
            r6 = r32
            r13 = r33
            int r3 = r31 + 1
            r4 = r13
            r13 = r28
            r9 = 2
            r36 = r6
            r6 = r3
            r3 = r36
            goto L_0x01b6
        L_0x0366:
            r6 = r3
            r13 = r4
            boolean r2 = r12.isEmpty()     // Catch:{ Exception -> 0x05cf }
            if (r2 != 0) goto L_0x037d
            int r2 = r8.id     // Catch:{ Exception -> 0x05cf }
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)     // Catch:{ Exception -> 0x05cf }
            r10 = r29
            r10.put(r2, r12)     // Catch:{ Exception -> 0x05cf }
            r7 = 1
            r20 = 1
            goto L_0x037f
        L_0x037d:
            r10 = r29
        L_0x037f:
            boolean r2 = r0.isEmpty()     // Catch:{ Exception -> 0x05cf }
            if (r2 != 0) goto L_0x0391
            int r2 = r8.id     // Catch:{ Exception -> 0x05cf }
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)     // Catch:{ Exception -> 0x05cf }
            r9 = r30
            r9.put(r2, r0)     // Catch:{ Exception -> 0x05cf }
            goto L_0x0395
        L_0x0391:
            r9 = r30
            r18 = r7
        L_0x0395:
            if (r18 == 0) goto L_0x039d
            r7 = r27
            r7.add(r8)     // Catch:{ Exception -> 0x05cf }
            goto L_0x039f
        L_0x039d:
            r7 = r27
        L_0x039f:
            if (r20 == 0) goto L_0x03ad
            int r0 = r8.id     // Catch:{ Exception -> 0x05cf }
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)     // Catch:{ Exception -> 0x05cf }
            r11 = r26
            r11.add(r0)     // Catch:{ Exception -> 0x05cf }
            goto L_0x03af
        L_0x03ad:
            r11 = r26
        L_0x03af:
            r0 = r7
            r30 = r9
            r29 = r10
            r26 = r11
            goto L_0x04d4
        L_0x03b8:
            r25 = r2
            r22 = r7
            r28 = r13
            r13 = r4
            r7 = r6
            r6 = r3
            org.telegram.messenger.MessagesController$DialogFilter r2 = new org.telegram.messenger.MessagesController$DialogFilter     // Catch:{ Exception -> 0x05cf }
            r2.<init>()     // Catch:{ Exception -> 0x05cf }
            r3 = r28
            int r4 = r3.id     // Catch:{ Exception -> 0x05cf }
            r2.id = r4     // Catch:{ Exception -> 0x05cf }
            r2.flags = r0     // Catch:{ Exception -> 0x05cf }
            java.lang.String r0 = r3.title     // Catch:{ Exception -> 0x05cf }
            r2.name = r0     // Catch:{ Exception -> 0x05cf }
            r0 = -1
            r2.pendingUnreadCount = r0     // Catch:{ Exception -> 0x05cf }
            r0 = 0
        L_0x03d6:
            r4 = 2
            if (r0 >= r4) goto L_0x04ca
            if (r0 != 0) goto L_0x044d
            java.util.ArrayList<org.telegram.tgnet.TLRPC$InputPeer> r8 = r3.pinned_peers     // Catch:{ Exception -> 0x05cf }
            int r8 = r8.size()     // Catch:{ Exception -> 0x05cf }
            r12 = 0
        L_0x03e2:
            if (r12 >= r8) goto L_0x044d
            java.util.ArrayList<org.telegram.tgnet.TLRPC$InputPeer> r4 = r3.pinned_peers     // Catch:{ Exception -> 0x05cf }
            java.lang.Object r4 = r4.get(r12)     // Catch:{ Exception -> 0x05cf }
            org.telegram.tgnet.TLRPC$InputPeer r4 = (org.telegram.tgnet.TLRPC$InputPeer) r4     // Catch:{ Exception -> 0x05cf }
            r20 = r8
            int r8 = r4.user_id     // Catch:{ Exception -> 0x05cf }
            if (r8 == 0) goto L_0x03fb
            int r8 = r4.user_id     // Catch:{ Exception -> 0x05cf }
            java.lang.Integer r8 = java.lang.Integer.valueOf(r8)     // Catch:{ Exception -> 0x05cf }
        L_0x03f8:
            r26 = r11
            goto L_0x040a
        L_0x03fb:
            int r8 = r4.chat_id     // Catch:{ Exception -> 0x05cf }
            if (r8 == 0) goto L_0x0402
            int r8 = r4.chat_id     // Catch:{ Exception -> 0x05cf }
            goto L_0x0404
        L_0x0402:
            int r8 = r4.channel_id     // Catch:{ Exception -> 0x05cf }
        L_0x0404:
            int r8 = -r8
            java.lang.Integer r8 = java.lang.Integer.valueOf(r8)     // Catch:{ Exception -> 0x05cf }
            goto L_0x03f8
        L_0x040a:
            java.util.ArrayList<java.lang.Integer> r11 = r2.alwaysShow     // Catch:{ Exception -> 0x05cf }
            boolean r11 = r11.contains(r8)     // Catch:{ Exception -> 0x05cf }
            if (r11 != 0) goto L_0x0417
            java.util.ArrayList<java.lang.Integer> r11 = r2.alwaysShow     // Catch:{ Exception -> 0x05cf }
            r11.add(r8)     // Catch:{ Exception -> 0x05cf }
        L_0x0417:
            android.util.LongSparseArray<java.lang.Integer> r11 = r2.pinnedDialogs     // Catch:{ Exception -> 0x05cf }
            r29 = r10
            int r10 = r8.intValue()     // Catch:{ Exception -> 0x05cf }
            r30 = r9
            long r9 = (long) r10     // Catch:{ Exception -> 0x05cf }
            r27 = r7
            android.util.LongSparseArray<java.lang.Integer> r7 = r2.pinnedDialogs     // Catch:{ Exception -> 0x05cf }
            int r7 = r7.size()     // Catch:{ Exception -> 0x05cf }
            int r7 = r7 + 1
            java.lang.Integer r7 = java.lang.Integer.valueOf(r7)     // Catch:{ Exception -> 0x05cf }
            r11.put(r9, r7)     // Catch:{ Exception -> 0x05cf }
            boolean r7 = r14.containsKey(r8)     // Catch:{ Exception -> 0x05cf }
            if (r7 != 0) goto L_0x043f
            r5.add(r8)     // Catch:{ Exception -> 0x05cf }
            r14.put(r8, r4)     // Catch:{ Exception -> 0x05cf }
        L_0x043f:
            int r12 = r12 + 1
            r8 = r20
            r11 = r26
            r7 = r27
            r10 = r29
            r9 = r30
            r4 = 2
            goto L_0x03e2
        L_0x044d:
            r27 = r7
            r30 = r9
            r29 = r10
            r26 = r11
            if (r0 != 0) goto L_0x045a
            java.util.ArrayList<org.telegram.tgnet.TLRPC$InputPeer> r4 = r3.include_peers     // Catch:{ Exception -> 0x05cf }
            goto L_0x045c
        L_0x045a:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$InputPeer> r4 = r3.exclude_peers     // Catch:{ Exception -> 0x05cf }
        L_0x045c:
            if (r0 != 0) goto L_0x0461
            java.util.ArrayList<java.lang.Integer> r7 = r2.alwaysShow     // Catch:{ Exception -> 0x05cf }
            goto L_0x0463
        L_0x0461:
            java.util.ArrayList<java.lang.Integer> r7 = r2.neverShow     // Catch:{ Exception -> 0x05cf }
        L_0x0463:
            int r8 = r4.size()     // Catch:{ Exception -> 0x05cf }
            r9 = 0
        L_0x0468:
            if (r9 >= r8) goto L_0x04be
            java.lang.Object r10 = r4.get(r9)     // Catch:{ Exception -> 0x05cf }
            org.telegram.tgnet.TLRPC$InputPeer r10 = (org.telegram.tgnet.TLRPC$InputPeer) r10     // Catch:{ Exception -> 0x05cf }
            int r11 = r10.user_id     // Catch:{ Exception -> 0x05cf }
            if (r11 == 0) goto L_0x0490
            int r11 = r10.user_id     // Catch:{ Exception -> 0x05cf }
            java.lang.Integer r11 = java.lang.Integer.valueOf(r11)     // Catch:{ Exception -> 0x05cf }
            boolean r12 = r7.contains(r11)     // Catch:{ Exception -> 0x05cf }
            if (r12 != 0) goto L_0x0483
            r7.add(r11)     // Catch:{ Exception -> 0x05cf }
        L_0x0483:
            boolean r12 = r15.containsKey(r11)     // Catch:{ Exception -> 0x05cf }
            if (r12 != 0) goto L_0x04bb
            r1.add(r11)     // Catch:{ Exception -> 0x05cf }
            r15.put(r11, r10)     // Catch:{ Exception -> 0x05cf }
            goto L_0x04bb
        L_0x0490:
            int r11 = r10.chat_id     // Catch:{ Exception -> 0x05cf }
            if (r11 == 0) goto L_0x0497
            int r11 = r10.chat_id     // Catch:{ Exception -> 0x05cf }
            goto L_0x0499
        L_0x0497:
            int r11 = r10.channel_id     // Catch:{ Exception -> 0x05cf }
        L_0x0499:
            java.lang.Integer r11 = java.lang.Integer.valueOf(r11)     // Catch:{ Exception -> 0x05cf }
            int r12 = r11.intValue()     // Catch:{ Exception -> 0x05cf }
            int r12 = -r12
            java.lang.Integer r12 = java.lang.Integer.valueOf(r12)     // Catch:{ Exception -> 0x05cf }
            boolean r20 = r7.contains(r12)     // Catch:{ Exception -> 0x05cf }
            if (r20 != 0) goto L_0x04af
            r7.add(r12)     // Catch:{ Exception -> 0x05cf }
        L_0x04af:
            boolean r12 = r13.containsKey(r11)     // Catch:{ Exception -> 0x05cf }
            if (r12 != 0) goto L_0x04bb
            r6.add(r11)     // Catch:{ Exception -> 0x05cf }
            r13.put(r11, r10)     // Catch:{ Exception -> 0x05cf }
        L_0x04bb:
            int r9 = r9 + 1
            goto L_0x0468
        L_0x04be:
            int r0 = r0 + 1
            r11 = r26
            r7 = r27
            r10 = r29
            r9 = r30
            goto L_0x03d6
        L_0x04ca:
            r0 = r7
            r30 = r9
            r29 = r10
            r26 = r11
            r0.add(r2)     // Catch:{ Exception -> 0x05cf }
        L_0x04d4:
            int r2 = r25 + 1
            r12 = r37
            r3 = r6
            r4 = r13
            r13 = r17
            r7 = r22
            r8 = r23
            r11 = r26
            r10 = r29
            r9 = r30
            r6 = r0
            r0 = r38
            goto L_0x0060
        L_0x04eb:
            r13 = r4
            r0 = r6
            r22 = r7
            r23 = r8
            r30 = r9
            r29 = r10
            r26 = r11
            r16 = 0
            r6 = r3
            boolean r2 = r5.isEmpty()     // Catch:{ Exception -> 0x05cf }
            java.lang.String r3 = ","
            if (r2 != 0) goto L_0x052f
            java.lang.String r2 = android.text.TextUtils.join(r3, r5)     // Catch:{ Exception -> 0x05cf }
            java.util.ArrayList r4 = new java.util.ArrayList     // Catch:{ Exception -> 0x05cf }
            r4.<init>()     // Catch:{ Exception -> 0x05cf }
            r12 = r37
            org.telegram.tgnet.TLRPC$messages_Dialogs r2 = r12.loadDialogsByIds(r2, r1, r6, r4)     // Catch:{ Exception -> 0x05d3 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r4 = r2.dialogs     // Catch:{ Exception -> 0x05d3 }
            int r4 = r4.size()     // Catch:{ Exception -> 0x05d3 }
            r5 = 0
        L_0x0518:
            if (r5 >= r4) goto L_0x0536
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r7 = r2.dialogs     // Catch:{ Exception -> 0x05d3 }
            java.lang.Object r7 = r7.get(r5)     // Catch:{ Exception -> 0x05d3 }
            org.telegram.tgnet.TLRPC$Dialog r7 = (org.telegram.tgnet.TLRPC$Dialog) r7     // Catch:{ Exception -> 0x05d3 }
            long r7 = r7.id     // Catch:{ Exception -> 0x05d3 }
            int r8 = (int) r7     // Catch:{ Exception -> 0x05d3 }
            java.lang.Integer r7 = java.lang.Integer.valueOf(r8)     // Catch:{ Exception -> 0x05d3 }
            r14.remove(r7)     // Catch:{ Exception -> 0x05d3 }
            int r5 = r5 + 1
            goto L_0x0518
        L_0x052f:
            r12 = r37
            org.telegram.tgnet.TLRPC$TL_messages_dialogs r2 = new org.telegram.tgnet.TLRPC$TL_messages_dialogs     // Catch:{ Exception -> 0x05d3 }
            r2.<init>()     // Catch:{ Exception -> 0x05d3 }
        L_0x0536:
            r17 = r2
            java.util.ArrayList r4 = new java.util.ArrayList     // Catch:{ Exception -> 0x05d3 }
            r4.<init>()     // Catch:{ Exception -> 0x05d3 }
            boolean r2 = r1.isEmpty()     // Catch:{ Exception -> 0x05d3 }
            if (r2 != 0) goto L_0x0563
            java.lang.String r1 = android.text.TextUtils.join(r3, r1)     // Catch:{ Exception -> 0x05d3 }
            r12.getUsersInternal(r1, r4)     // Catch:{ Exception -> 0x05d3 }
            int r1 = r4.size()     // Catch:{ Exception -> 0x05d3 }
            r2 = 0
        L_0x054f:
            if (r2 >= r1) goto L_0x0563
            java.lang.Object r5 = r4.get(r2)     // Catch:{ Exception -> 0x05d3 }
            org.telegram.tgnet.TLRPC$User r5 = (org.telegram.tgnet.TLRPC$User) r5     // Catch:{ Exception -> 0x05d3 }
            int r5 = r5.id     // Catch:{ Exception -> 0x05d3 }
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)     // Catch:{ Exception -> 0x05d3 }
            r15.remove(r5)     // Catch:{ Exception -> 0x05d3 }
            int r2 = r2 + 1
            goto L_0x054f
        L_0x0563:
            java.util.ArrayList r5 = new java.util.ArrayList     // Catch:{ Exception -> 0x05d3 }
            r5.<init>()     // Catch:{ Exception -> 0x05d3 }
            boolean r1 = r6.isEmpty()     // Catch:{ Exception -> 0x05d3 }
            if (r1 != 0) goto L_0x058e
            java.lang.String r1 = android.text.TextUtils.join(r3, r6)     // Catch:{ Exception -> 0x05d3 }
            r12.getChatsInternal(r1, r5)     // Catch:{ Exception -> 0x05d3 }
            int r1 = r5.size()     // Catch:{ Exception -> 0x05d3 }
            r2 = 0
        L_0x057a:
            if (r2 >= r1) goto L_0x058e
            java.lang.Object r3 = r5.get(r2)     // Catch:{ Exception -> 0x05d3 }
            org.telegram.tgnet.TLRPC$Chat r3 = (org.telegram.tgnet.TLRPC$Chat) r3     // Catch:{ Exception -> 0x05d3 }
            int r3 = r3.id     // Catch:{ Exception -> 0x05d3 }
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)     // Catch:{ Exception -> 0x05d3 }
            r13.remove(r3)     // Catch:{ Exception -> 0x05d3 }
            int r2 = r2 + 1
            goto L_0x057a
        L_0x058e:
            boolean r1 = r15.isEmpty()     // Catch:{ Exception -> 0x05d3 }
            if (r1 == 0) goto L_0x05b4
            boolean r1 = r13.isEmpty()     // Catch:{ Exception -> 0x05d3 }
            if (r1 == 0) goto L_0x05b4
            boolean r1 = r14.isEmpty()     // Catch:{ Exception -> 0x05d3 }
            if (r1 == 0) goto L_0x05b4
            r3 = 0
            r1 = r37
            r2 = r17
            r6 = r0
            r7 = r22
            r8 = r23
            r9 = r30
            r10 = r29
            r11 = r26
            r1.lambda$processLoadedFilterPeers$36$MessagesStorage(r2, r3, r4, r5, r6, r7, r8, r9, r10, r11)     // Catch:{ Exception -> 0x05d3 }
            goto L_0x05d7
        L_0x05b4:
            org.telegram.messenger.MessagesController r1 = r37.getMessagesController()     // Catch:{ Exception -> 0x05d3 }
            org.telegram.tgnet.TLRPC$TL_messages_dialogs r18 = new org.telegram.tgnet.TLRPC$TL_messages_dialogs     // Catch:{ Exception -> 0x05d3 }
            r18.<init>()     // Catch:{ Exception -> 0x05d3 }
            r2 = r13
            r13 = r1
            r16 = r2
            r19 = r4
            r20 = r5
            r21 = r0
            r24 = r30
            r25 = r29
            r13.loadFilterPeers(r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26)     // Catch:{ Exception -> 0x05d3 }
            goto L_0x05d7
        L_0x05cf:
            r0 = move-exception
            r12 = r37
            goto L_0x05d4
        L_0x05d3:
            r0 = move-exception
        L_0x05d4:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
        L_0x05d7:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$checkLoadedRemoteFilters$34$MessagesStorage(org.telegram.tgnet.TLRPC$Vector):void");
    }

    static /* synthetic */ int lambda$null$33(LongSparseArray longSparseArray, Long l, Long l2) {
        int intValue = ((Integer) longSparseArray.get(l.longValue())).intValue();
        int intValue2 = ((Integer) longSparseArray.get(l2.longValue())).intValue();
        if (intValue > intValue2) {
            return 1;
        }
        return intValue < intValue2 ? -1 : 0;
    }

    /* access modifiers changed from: private */
    /* renamed from: processLoadedFilterPeersInternal */
    public void lambda$processLoadedFilterPeers$36$MessagesStorage(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, ArrayList<TLRPC$User> arrayList, ArrayList<TLRPC$Chat> arrayList2, ArrayList<MessagesController.DialogFilter> arrayList3, SparseArray<MessagesController.DialogFilter> sparseArray, ArrayList<Integer> arrayList4, HashMap<Integer, HashSet<Integer>> hashMap, HashMap<Integer, HashSet<Integer>> hashMap2, HashSet<Integer> hashSet) {
        ArrayList<TLRPC$User> arrayList5 = arrayList;
        putUsersAndChats(arrayList, arrayList2, true, false);
        int size = sparseArray.size();
        int i = 0;
        boolean z = false;
        while (i < size) {
            lambda$deleteDialogFilter$37$MessagesStorage(sparseArray.valueAt(i));
            i++;
            z = true;
        }
        Iterator<Integer> it = hashSet.iterator();
        while (it.hasNext()) {
            MessagesController.DialogFilter dialogFilter = this.dialogFiltersMap.get(it.next().intValue());
            if (dialogFilter != null) {
                dialogFilter.pendingUnreadCount = -1;
            }
        }
        for (Map.Entry next : hashMap2.entrySet()) {
            MessagesController.DialogFilter dialogFilter2 = this.dialogFiltersMap.get(((Integer) next.getKey()).intValue());
            if (dialogFilter2 != null) {
                HashSet hashSet2 = (HashSet) next.getValue();
                dialogFilter2.alwaysShow.removeAll(hashSet2);
                dialogFilter2.neverShow.removeAll(hashSet2);
                z = true;
            }
        }
        for (Map.Entry next2 : hashMap.entrySet()) {
            MessagesController.DialogFilter dialogFilter3 = this.dialogFiltersMap.get(((Integer) next2.getKey()).intValue());
            if (dialogFilter3 != null) {
                Iterator it2 = ((HashSet) next2.getValue()).iterator();
                while (it2.hasNext()) {
                    dialogFilter3.pinnedDialogs.remove((long) ((Integer) it2.next()).intValue());
                }
                z = true;
            }
        }
        int size2 = arrayList3.size();
        int i2 = 0;
        while (i2 < size2) {
            saveDialogFilterInternal(arrayList3.get(i2), false, true);
            i2++;
            z = true;
        }
        int size3 = this.dialogFilters.size();
        boolean z2 = false;
        for (int i3 = 0; i3 < size3; i3++) {
            MessagesController.DialogFilter dialogFilter4 = this.dialogFilters.get(i3);
            int indexOf = arrayList4.indexOf(Integer.valueOf(dialogFilter4.id));
            if (dialogFilter4.order != indexOf) {
                dialogFilter4.order = indexOf;
                z2 = true;
                z = true;
            }
        }
        if (z2) {
            Collections.sort(this.dialogFilters, $$Lambda$MessagesStorage$t3Jp43aqLZ1MTR9Z7RAfEQdsY.INSTANCE);
            saveDialogFiltersOrderInternal();
        }
        int i4 = z ? 1 : 2;
        calcUnreadCounters(true);
        getMessagesController().processLoadedDialogFilters(new ArrayList(this.dialogFilters), tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, (ArrayList<TLRPC$EncryptedChat>) null, i4);
    }

    static /* synthetic */ int lambda$processLoadedFilterPeersInternal$35(MessagesController.DialogFilter dialogFilter, MessagesController.DialogFilter dialogFilter2) {
        int i = dialogFilter.order;
        int i2 = dialogFilter2.order;
        if (i > i2) {
            return 1;
        }
        return i < i2 ? -1 : 0;
    }

    /* access modifiers changed from: protected */
    public void processLoadedFilterPeers(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, TLRPC$messages_Dialogs tLRPC$messages_Dialogs2, ArrayList<TLRPC$User> arrayList, ArrayList<TLRPC$Chat> arrayList2, ArrayList<MessagesController.DialogFilter> arrayList3, SparseArray<MessagesController.DialogFilter> sparseArray, ArrayList<Integer> arrayList4, HashMap<Integer, HashSet<Integer>> hashMap, HashMap<Integer, HashSet<Integer>> hashMap2, HashSet<Integer> hashSet) {
        this.storageQueue.postRunnable(new Runnable(tLRPC$messages_Dialogs, tLRPC$messages_Dialogs2, arrayList, arrayList2, arrayList3, sparseArray, arrayList4, hashMap, hashMap2, hashSet) {
            public final /* synthetic */ TLRPC$messages_Dialogs f$1;
            public final /* synthetic */ HashSet f$10;
            public final /* synthetic */ TLRPC$messages_Dialogs f$2;
            public final /* synthetic */ ArrayList f$3;
            public final /* synthetic */ ArrayList f$4;
            public final /* synthetic */ ArrayList f$5;
            public final /* synthetic */ SparseArray f$6;
            public final /* synthetic */ ArrayList f$7;
            public final /* synthetic */ HashMap f$8;
            public final /* synthetic */ HashMap f$9;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
                this.f$7 = r8;
                this.f$8 = r9;
                this.f$9 = r10;
                this.f$10 = r11;
            }

            public final void run() {
                MessagesStorage.this.lambda$processLoadedFilterPeers$36$MessagesStorage(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7, this.f$8, this.f$9, this.f$10);
            }
        });
    }

    /* access modifiers changed from: private */
    /* renamed from: deleteDialogFilterInternal */
    public void lambda$deleteDialogFilter$37$MessagesStorage(MessagesController.DialogFilter dialogFilter) {
        try {
            this.dialogFilters.remove(dialogFilter);
            this.dialogFiltersMap.remove(dialogFilter.id);
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM dialog_filter WHERE id = " + dialogFilter.id).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase2 = this.database;
            sQLiteDatabase2.executeFast("DELETE FROM dialog_filter_ep WHERE id = " + dialogFilter.id).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase3 = this.database;
            sQLiteDatabase3.executeFast("DELETE FROM dialog_filter_pin_v2 WHERE id = " + dialogFilter.id).stepThis().dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void deleteDialogFilter(MessagesController.DialogFilter dialogFilter) {
        this.storageQueue.postRunnable(new Runnable(dialogFilter) {
            public final /* synthetic */ MessagesController.DialogFilter f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesStorage.this.lambda$deleteDialogFilter$37$MessagesStorage(this.f$1);
            }
        });
    }

    public void saveDialogFilter(MessagesController.DialogFilter dialogFilter, boolean z, boolean z2) {
        this.storageQueue.postRunnable(new Runnable(dialogFilter, z, z2) {
            public final /* synthetic */ MessagesController.DialogFilter f$1;
            public final /* synthetic */ boolean f$2;
            public final /* synthetic */ boolean f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesStorage.this.lambda$saveDialogFilter$39$MessagesStorage(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    public /* synthetic */ void lambda$saveDialogFilter$39$MessagesStorage(MessagesController.DialogFilter dialogFilter, boolean z, boolean z2) {
        saveDialogFilterInternal(dialogFilter, z, z2);
        calcUnreadCounters(false);
        AndroidUtilities.runOnUIThread(new Runnable() {
            public final void run() {
                MessagesStorage.this.lambda$null$38$MessagesStorage();
            }
        });
    }

    public /* synthetic */ void lambda$null$38$MessagesStorage() {
        ArrayList<MessagesController.DialogFilter> arrayList = getMessagesController().dialogFilters;
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            arrayList.get(i).unreadCount = arrayList.get(i).pendingUnreadCount;
        }
        this.mainUnreadCount = this.pendingMainUnreadCount;
        this.archiveUnreadCount = this.pendingArchiveUnreadCount;
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 256);
    }

    public void saveDialogFiltersOrderInternal() {
        try {
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE dialog_filter SET ord = ?, flags = ? WHERE id = ?");
            int size = this.dialogFilters.size();
            for (int i = 0; i < size; i++) {
                MessagesController.DialogFilter dialogFilter = this.dialogFilters.get(i);
                executeFast.requery();
                executeFast.bindInteger(1, dialogFilter.order);
                executeFast.bindInteger(2, dialogFilter.flags);
                executeFast.bindInteger(3, dialogFilter.id);
                executeFast.step();
            }
            executeFast.dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void saveDialogFiltersOrder() {
        this.storageQueue.postRunnable(new Runnable() {
            public final void run() {
                MessagesStorage.this.saveDialogFiltersOrderInternal();
            }
        });
    }

    public void loadUnreadMessages() {
        this.storageQueue.postRunnable(new Runnable() {
            public final void run() {
                MessagesStorage.this.lambda$loadUnreadMessages$41$MessagesStorage();
            }
        });
    }

    public /* synthetic */ void lambda$loadUnreadMessages$41$MessagesStorage() {
        String str;
        ArrayList arrayList;
        ArrayList arrayList2;
        ArrayList arrayList3;
        ArrayList arrayList4;
        LongSparseArray longSparseArray;
        ArrayList arrayList5;
        LongSparseArray longSparseArray2;
        int i;
        ArrayList arrayList6;
        ArrayList arrayList7;
        ArrayList arrayList8;
        ArrayList arrayList9;
        String str2;
        NativeByteBuffer byteBufferValue;
        try {
            ArrayList arrayList10 = new ArrayList();
            ArrayList arrayList11 = new ArrayList();
            ArrayList arrayList12 = new ArrayList();
            LongSparseArray longSparseArray3 = new LongSparseArray();
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT d.did, d.unread_count, s.flags FROM dialogs as d LEFT JOIN dialog_settings as s ON d.did = s.did WHERE d.unread_count > 0", new Object[0]);
            StringBuilder sb = new StringBuilder();
            int currentTime = getConnectionsManager().getCurrentTime();
            while (true) {
                str = ",";
                if (!queryFinalized.next()) {
                    break;
                }
                long longValue = queryFinalized.longValue(2);
                boolean z = (longValue & 1) != 0;
                int i2 = (int) (longValue >> 32);
                if (queryFinalized.isNull(2) || !z || (i2 != 0 && i2 < currentTime)) {
                    long longValue2 = queryFinalized.longValue(0);
                    if (!DialogObject.isFolderDialogId(longValue2)) {
                        longSparseArray3.put(longValue2, Integer.valueOf(queryFinalized.intValue(1)));
                        if (sb.length() != 0) {
                            sb.append(str);
                        }
                        sb.append(longValue2);
                        int i3 = (int) longValue2;
                        int i4 = (int) (longValue2 >> 32);
                        if (i3 != 0) {
                            if (i3 < 0) {
                                int i5 = -i3;
                                if (!arrayList11.contains(Integer.valueOf(i5))) {
                                    arrayList11.add(Integer.valueOf(i5));
                                }
                            } else if (!arrayList10.contains(Integer.valueOf(i3))) {
                                arrayList10.add(Integer.valueOf(i3));
                            }
                        } else if (!arrayList12.contains(Integer.valueOf(i4))) {
                            arrayList12.add(Integer.valueOf(i4));
                        }
                    }
                }
            }
            queryFinalized.dispose();
            ArrayList arrayList13 = new ArrayList();
            SparseArray sparseArray = new SparseArray();
            ArrayList arrayList14 = new ArrayList();
            ArrayList arrayList15 = new ArrayList();
            ArrayList arrayList16 = new ArrayList();
            ArrayList arrayList17 = new ArrayList();
            ArrayList arrayList18 = new ArrayList();
            if (sb.length() > 0) {
                SQLiteDatabase sQLiteDatabase = this.database;
                StringBuilder sb2 = new StringBuilder();
                LongSparseArray longSparseArray4 = longSparseArray3;
                sb2.append("SELECT read_state, data, send_state, mid, date, uid, replydata FROM messages WHERE uid IN (");
                sb2.append(sb.toString());
                sb2.append(") AND out = 0 AND read_state IN(0,2) ORDER BY date DESC LIMIT 50");
                SQLiteCursor queryFinalized2 = sQLiteDatabase.queryFinalized(sb2.toString(), new Object[0]);
                int i6 = 0;
                while (queryFinalized2.next()) {
                    NativeByteBuffer byteBufferValue2 = queryFinalized2.byteBufferValue(1);
                    if (byteBufferValue2 != null) {
                        arrayList9 = arrayList17;
                        TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(false), false);
                        TLdeserialize.readAttachPath(byteBufferValue2, getUserConfig().clientUserId);
                        byteBufferValue2.reuse();
                        MessageObject.setUnreadFlags(TLdeserialize, queryFinalized2.intValue(0));
                        TLdeserialize.id = queryFinalized2.intValue(3);
                        TLdeserialize.date = queryFinalized2.intValue(4);
                        arrayList8 = arrayList16;
                        str2 = str;
                        TLdeserialize.dialog_id = queryFinalized2.longValue(5);
                        arrayList14.add(TLdeserialize);
                        int max = Math.max(i6, TLdeserialize.date);
                        int i7 = (int) TLdeserialize.dialog_id;
                        addUsersAndChatsFromMessage(TLdeserialize, arrayList10, arrayList11);
                        TLdeserialize.send_state = queryFinalized2.intValue(2);
                        if ((TLdeserialize.to_id.channel_id == 0 && !MessageObject.isUnread(TLdeserialize) && i7 != 0) || TLdeserialize.id > 0) {
                            TLdeserialize.send_state = 0;
                        }
                        if (i7 == 0 && !queryFinalized2.isNull(5)) {
                            TLdeserialize.random_id = queryFinalized2.longValue(5);
                        }
                        try {
                            if (TLdeserialize.reply_to_msg_id != 0 && ((TLdeserialize.action instanceof TLRPC$TL_messageActionPinMessage) || (TLdeserialize.action instanceof TLRPC$TL_messageActionPaymentSent) || (TLdeserialize.action instanceof TLRPC$TL_messageActionGameScore))) {
                                if (!queryFinalized2.isNull(6) && (byteBufferValue = queryFinalized2.byteBufferValue(6)) != null) {
                                    TLRPC$Message TLdeserialize2 = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                    TLdeserialize.replyMessage = TLdeserialize2;
                                    TLdeserialize2.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                                    byteBufferValue.reuse();
                                    if (TLdeserialize.replyMessage != null) {
                                        if (MessageObject.isMegagroup(TLdeserialize)) {
                                            TLdeserialize.replyMessage.flags |= Integer.MIN_VALUE;
                                        }
                                        addUsersAndChatsFromMessage(TLdeserialize.replyMessage, arrayList10, arrayList11);
                                    }
                                }
                                if (TLdeserialize.replyMessage == null) {
                                    long j = (long) TLdeserialize.reply_to_msg_id;
                                    if (TLdeserialize.to_id.channel_id != 0) {
                                        arrayList6 = arrayList18;
                                        arrayList7 = arrayList14;
                                        j |= ((long) TLdeserialize.to_id.channel_id) << 32;
                                    } else {
                                        arrayList6 = arrayList18;
                                        arrayList7 = arrayList14;
                                    }
                                    try {
                                        if (!arrayList13.contains(Long.valueOf(j))) {
                                            arrayList13.add(Long.valueOf(j));
                                        }
                                        ArrayList arrayList19 = (ArrayList) sparseArray.get(TLdeserialize.reply_to_msg_id);
                                        if (arrayList19 == null) {
                                            arrayList19 = new ArrayList();
                                            sparseArray.put(TLdeserialize.reply_to_msg_id, arrayList19);
                                        }
                                        arrayList19.add(TLdeserialize);
                                    } catch (Exception e) {
                                        e = e;
                                        FileLog.e((Throwable) e);
                                        i6 = max;
                                        str = str2;
                                        arrayList17 = arrayList9;
                                        arrayList16 = arrayList8;
                                        arrayList14 = arrayList7;
                                        arrayList18 = arrayList6;
                                    }
                                    i6 = max;
                                }
                            }
                            arrayList6 = arrayList18;
                            arrayList7 = arrayList14;
                        } catch (Exception e2) {
                            e = e2;
                            arrayList6 = arrayList18;
                            arrayList7 = arrayList14;
                            FileLog.e((Throwable) e);
                            i6 = max;
                            str = str2;
                            arrayList17 = arrayList9;
                            arrayList16 = arrayList8;
                            arrayList14 = arrayList7;
                            arrayList18 = arrayList6;
                        }
                        i6 = max;
                    } else {
                        arrayList8 = arrayList16;
                        str2 = str;
                        arrayList9 = arrayList17;
                        arrayList6 = arrayList18;
                        arrayList7 = arrayList14;
                    }
                    str = str2;
                    arrayList17 = arrayList9;
                    arrayList16 = arrayList8;
                    arrayList14 = arrayList7;
                    arrayList18 = arrayList6;
                }
                ArrayList arrayList20 = arrayList16;
                String str3 = str;
                ArrayList arrayList21 = arrayList17;
                ArrayList arrayList22 = arrayList18;
                ArrayList arrayList23 = arrayList14;
                queryFinalized2.dispose();
                this.database.executeFast("DELETE FROM unread_push_messages WHERE date <= " + i6).stepThis().dispose();
                boolean z2 = false;
                SQLiteCursor queryFinalized3 = this.database.queryFinalized("SELECT data, mid, date, uid, random, fm, name, uname, flags FROM unread_push_messages WHERE 1 ORDER BY date DESC LIMIT 50", new Object[0]);
                while (queryFinalized3.next()) {
                    NativeByteBuffer byteBufferValue3 = queryFinalized3.byteBufferValue(z2 ? 1 : 0);
                    if (byteBufferValue3 != null) {
                        TLRPC$Message TLdeserialize3 = TLRPC$Message.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(z2), z2);
                        byteBufferValue3.reuse();
                        TLdeserialize3.id = queryFinalized3.intValue(1);
                        TLdeserialize3.date = queryFinalized3.intValue(2);
                        TLdeserialize3.dialog_id = queryFinalized3.longValue(3);
                        TLdeserialize3.random_id = queryFinalized3.longValue(4);
                        String str4 = null;
                        String stringValue = queryFinalized3.isNull(5) ? null : queryFinalized3.stringValue(5);
                        String stringValue2 = queryFinalized3.isNull(6) ? null : queryFinalized3.stringValue(6);
                        if (!queryFinalized3.isNull(7)) {
                            str4 = queryFinalized3.stringValue(7);
                        }
                        String str5 = str4;
                        int intValue = queryFinalized3.intValue(8);
                        if (TLdeserialize3.from_id == 0 && (i = (int) TLdeserialize3.dialog_id) > 0) {
                            TLdeserialize3.from_id = i;
                        }
                        int i8 = (int) TLdeserialize3.dialog_id;
                        if (i8 > 0) {
                            if (!arrayList10.contains(Integer.valueOf(i8))) {
                                arrayList10.add(Integer.valueOf(i8));
                            }
                        } else if (i8 < 0) {
                            int i9 = -i8;
                            if (!arrayList11.contains(Integer.valueOf(i9))) {
                                arrayList11.add(Integer.valueOf(i9));
                            }
                        }
                        arrayList15.add(new MessageObject(this.currentAccount, TLdeserialize3, stringValue, stringValue2, str5, (intValue & 1) != 0, (intValue & 2) != 0, false));
                        addUsersAndChatsFromMessage(TLdeserialize3, arrayList10, arrayList11);
                    }
                    z2 = false;
                }
                queryFinalized3.dispose();
                if (!arrayList13.isEmpty()) {
                    boolean z3 = false;
                    SQLiteCursor queryFinalized4 = this.database.queryFinalized(String.format(Locale.US, "SELECT data, mid, date, uid FROM messages WHERE mid IN(%s)", new Object[]{TextUtils.join(str3, arrayList13)}), new Object[0]);
                    while (queryFinalized4.next()) {
                        NativeByteBuffer byteBufferValue4 = queryFinalized4.byteBufferValue(z3 ? 1 : 0);
                        if (byteBufferValue4 != null) {
                            TLRPC$Message TLdeserialize4 = TLRPC$Message.TLdeserialize(byteBufferValue4, byteBufferValue4.readInt32(z3), z3);
                            TLdeserialize4.readAttachPath(byteBufferValue4, getUserConfig().clientUserId);
                            byteBufferValue4.reuse();
                            TLdeserialize4.id = queryFinalized4.intValue(1);
                            TLdeserialize4.date = queryFinalized4.intValue(2);
                            TLdeserialize4.dialog_id = queryFinalized4.longValue(3);
                            addUsersAndChatsFromMessage(TLdeserialize4, arrayList10, arrayList11);
                            ArrayList arrayList24 = (ArrayList) sparseArray.get(TLdeserialize4.id);
                            if (arrayList24 != null) {
                                for (int i10 = 0; i10 < arrayList24.size(); i10++) {
                                    TLRPC$Message tLRPC$Message = (TLRPC$Message) arrayList24.get(i10);
                                    tLRPC$Message.replyMessage = TLdeserialize4;
                                    if (MessageObject.isMegagroup(tLRPC$Message)) {
                                        tLRPC$Message.replyMessage.flags |= Integer.MIN_VALUE;
                                    }
                                }
                            }
                        }
                        z3 = false;
                    }
                    queryFinalized4.dispose();
                }
                if (!arrayList12.isEmpty()) {
                    arrayList2 = arrayList22;
                    getEncryptedChatsInternal(TextUtils.join(str3, arrayList12), arrayList2, arrayList10);
                } else {
                    arrayList2 = arrayList22;
                }
                if (!arrayList10.isEmpty()) {
                    arrayList3 = arrayList20;
                    getUsersInternal(TextUtils.join(str3, arrayList10), arrayList3);
                } else {
                    arrayList3 = arrayList20;
                }
                if (!arrayList11.isEmpty()) {
                    arrayList = arrayList21;
                    getChatsInternal(TextUtils.join(str3, arrayList11), arrayList);
                    int i11 = 0;
                    while (i11 < arrayList.size()) {
                        TLRPC$Chat tLRPC$Chat = (TLRPC$Chat) arrayList.get(i11);
                        if (tLRPC$Chat == null || (!ChatObject.isNotInChat(tLRPC$Chat) && tLRPC$Chat.migrated_to == null)) {
                            longSparseArray2 = longSparseArray4;
                            arrayList5 = arrayList23;
                        } else {
                            long j2 = (long) (-tLRPC$Chat.id);
                            this.database.executeFast("UPDATE dialogs SET unread_count = 0 WHERE did = " + j2).stepThis().dispose();
                            this.database.executeFast(String.format(Locale.US, "UPDATE messages SET read_state = 3 WHERE uid = %d AND mid > 0 AND read_state IN(0,2) AND out = 0", new Object[]{Long.valueOf(j2)})).stepThis().dispose();
                            arrayList.remove(i11);
                            i11 += -1;
                            longSparseArray2 = longSparseArray4;
                            longSparseArray2.remove(j2);
                            int i12 = 0;
                            while (i12 < arrayList23.size()) {
                                ArrayList arrayList25 = arrayList23;
                                if (((TLRPC$Message) arrayList25.get(i12)).dialog_id == j2) {
                                    arrayList25.remove(i12);
                                    i12--;
                                }
                                i12++;
                                arrayList23 = arrayList25;
                            }
                            arrayList5 = arrayList23;
                        }
                        i11++;
                        longSparseArray4 = longSparseArray2;
                        arrayList23 = arrayList5;
                    }
                    longSparseArray = longSparseArray4;
                } else {
                    longSparseArray = longSparseArray4;
                    arrayList = arrayList21;
                }
                arrayList4 = arrayList23;
            } else {
                longSparseArray = longSparseArray3;
                arrayList3 = arrayList16;
                arrayList = arrayList17;
                arrayList2 = arrayList18;
                arrayList4 = arrayList14;
            }
            Collections.reverse(arrayList4);
            AndroidUtilities.runOnUIThread(new Runnable(longSparseArray, arrayList4, arrayList15, arrayList3, arrayList, arrayList2) {
                public final /* synthetic */ LongSparseArray f$1;
                public final /* synthetic */ ArrayList f$2;
                public final /* synthetic */ ArrayList f$3;
                public final /* synthetic */ ArrayList f$4;
                public final /* synthetic */ ArrayList f$5;
                public final /* synthetic */ ArrayList f$6;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r5;
                    this.f$5 = r6;
                    this.f$6 = r7;
                }

                public final void run() {
                    MessagesStorage.this.lambda$null$40$MessagesStorage(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
                }
            });
        } catch (Exception e3) {
            FileLog.e((Throwable) e3);
        }
    }

    public /* synthetic */ void lambda$null$40$MessagesStorage(LongSparseArray longSparseArray, ArrayList arrayList, ArrayList arrayList2, ArrayList arrayList3, ArrayList arrayList4, ArrayList arrayList5) {
        getNotificationsController().processLoadedUnreadMessages(longSparseArray, arrayList, arrayList2, arrayList3, arrayList4, arrayList5);
    }

    public void putWallpapers(ArrayList<TLRPC$WallPaper> arrayList, int i) {
        this.storageQueue.postRunnable(new Runnable(i, arrayList) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ ArrayList f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesStorage.this.lambda$putWallpapers$42$MessagesStorage(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$putWallpapers$42$MessagesStorage(int i, ArrayList arrayList) {
        SQLitePreparedStatement sQLitePreparedStatement;
        if (i == 1) {
            try {
                this.database.executeFast("DELETE FROM wallpapers2 WHERE 1").stepThis().dispose();
            } catch (Exception e) {
                FileLog.e((Throwable) e);
                return;
            }
        }
        this.database.beginTransaction();
        if (i != 0) {
            sQLitePreparedStatement = this.database.executeFast("REPLACE INTO wallpapers2 VALUES(?, ?, ?)");
        } else {
            sQLitePreparedStatement = this.database.executeFast("UPDATE wallpapers2 SET data = ? WHERE uid = ?");
        }
        int size = arrayList.size();
        for (int i2 = 0; i2 < size; i2++) {
            TLRPC$TL_wallPaper tLRPC$TL_wallPaper = (TLRPC$TL_wallPaper) arrayList.get(i2);
            sQLitePreparedStatement.requery();
            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$TL_wallPaper.getObjectSize());
            tLRPC$TL_wallPaper.serializeToStream(nativeByteBuffer);
            if (i != 0) {
                sQLitePreparedStatement.bindLong(1, tLRPC$TL_wallPaper.id);
                sQLitePreparedStatement.bindByteBuffer(2, nativeByteBuffer);
                sQLitePreparedStatement.bindInteger(3, i == 2 ? -1 : i2);
            } else {
                sQLitePreparedStatement.bindByteBuffer(1, nativeByteBuffer);
                sQLitePreparedStatement.bindLong(2, tLRPC$TL_wallPaper.id);
            }
            sQLitePreparedStatement.step();
            nativeByteBuffer.reuse();
        }
        sQLitePreparedStatement.dispose();
        this.database.commitTransaction();
    }

    public void getWallpapers() {
        this.storageQueue.postRunnable(new Runnable() {
            public final void run() {
                MessagesStorage.this.lambda$getWallpapers$44$MessagesStorage();
            }
        });
    }

    public /* synthetic */ void lambda$getWallpapers$44$MessagesStorage() {
        SQLiteCursor sQLiteCursor = null;
        try {
            sQLiteCursor = this.database.queryFinalized("SELECT data FROM wallpapers2 WHERE 1 ORDER BY num ASC", new Object[0]);
            ArrayList arrayList = new ArrayList();
            while (sQLiteCursor.next()) {
                NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(0);
                if (byteBufferValue != null) {
                    TLRPC$TL_wallPaper tLRPC$TL_wallPaper = (TLRPC$TL_wallPaper) TLRPC$WallPaper.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    byteBufferValue.reuse();
                    if (tLRPC$TL_wallPaper != null) {
                        arrayList.add(tLRPC$TL_wallPaper);
                    }
                }
            }
            AndroidUtilities.runOnUIThread(new Runnable(arrayList) {
                public final /* synthetic */ ArrayList f$0;

                {
                    this.f$0 = r1;
                }

                public final void run() {
                    NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.wallpapersDidLoad, this.f$0);
                }
            });
            if (sQLiteCursor == null) {
                return;
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
            if (sQLiteCursor == null) {
                return;
            }
        } catch (Throwable th) {
            if (sQLiteCursor != null) {
                sQLiteCursor.dispose();
            }
            throw th;
        }
        sQLiteCursor.dispose();
    }

    public void addRecentLocalFile(String str, String str2, TLRPC$Document tLRPC$Document) {
        if (str != null && str.length() != 0) {
            if ((str2 != null && str2.length() != 0) || tLRPC$Document != null) {
                this.storageQueue.postRunnable(new Runnable(tLRPC$Document, str, str2) {
                    public final /* synthetic */ TLRPC$Document f$1;
                    public final /* synthetic */ String f$2;
                    public final /* synthetic */ String f$3;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                        this.f$3 = r4;
                    }

                    public final void run() {
                        MessagesStorage.this.lambda$addRecentLocalFile$45$MessagesStorage(this.f$1, this.f$2, this.f$3);
                    }
                });
            }
        }
    }

    public /* synthetic */ void lambda$addRecentLocalFile$45$MessagesStorage(TLRPC$Document tLRPC$Document, String str, String str2) {
        if (tLRPC$Document != null) {
            try {
                SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE web_recent_v3 SET document = ? WHERE image_url = ?");
                executeFast.requery();
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$Document.getObjectSize());
                tLRPC$Document.serializeToStream(nativeByteBuffer);
                executeFast.bindByteBuffer(1, nativeByteBuffer);
                executeFast.bindString(2, str);
                executeFast.step();
                executeFast.dispose();
                nativeByteBuffer.reuse();
            } catch (Exception e) {
                FileLog.e((Throwable) e);
            }
        } else {
            SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE web_recent_v3 SET local_url = ? WHERE image_url = ?");
            executeFast2.requery();
            executeFast2.bindString(1, str2);
            executeFast2.bindString(2, str);
            executeFast2.step();
            executeFast2.dispose();
        }
    }

    public void deleteUserChannelHistory(int i, int i2) {
        this.storageQueue.postRunnable(new Runnable(i, i2) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ int f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesStorage.this.lambda$deleteUserChannelHistory$48$MessagesStorage(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$deleteUserChannelHistory$48$MessagesStorage(int i, int i2) {
        long j = (long) (-i);
        try {
            ArrayList arrayList = new ArrayList();
            SQLiteDatabase sQLiteDatabase = this.database;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT data FROM messages WHERE uid = " + j, new Object[0]);
            ArrayList arrayList2 = new ArrayList();
            ArrayList arrayList3 = new ArrayList();
            while (queryFinalized.next()) {
                try {
                    NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                    if (byteBufferValue != null) {
                        TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                        byteBufferValue.reuse();
                        if (!(TLdeserialize == null || TLdeserialize.from_id != i2 || TLdeserialize.id == 1)) {
                            arrayList.add(Integer.valueOf(TLdeserialize.id));
                            addFilesToDelete(TLdeserialize, arrayList2, arrayList3, false);
                        }
                    }
                } catch (Exception e) {
                    FileLog.e((Throwable) e);
                }
            }
            queryFinalized.dispose();
            deleteFromDownloadQueue(arrayList3, true);
            AndroidUtilities.runOnUIThread(new Runnable(arrayList, i) {
                public final /* synthetic */ ArrayList f$1;
                public final /* synthetic */ int f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    MessagesStorage.this.lambda$null$46$MessagesStorage(this.f$1, this.f$2);
                }
            });
            lambda$markMessagesAsDeleted$146$MessagesStorage(arrayList, i, false, false);
            lambda$updateDialogsWithDeletedMessages$145$MessagesStorage(arrayList, (ArrayList<Long>) null, i);
            getFileLoader().deleteFiles(arrayList2, 0);
            if (!arrayList.isEmpty()) {
                AndroidUtilities.runOnUIThread(new Runnable(arrayList, i) {
                    public final /* synthetic */ ArrayList f$1;
                    public final /* synthetic */ int f$2;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                    }

                    public final void run() {
                        MessagesStorage.this.lambda$null$47$MessagesStorage(this.f$1, this.f$2);
                    }
                });
            }
        } catch (Exception e2) {
            FileLog.e((Throwable) e2);
        }
    }

    public /* synthetic */ void lambda$null$46$MessagesStorage(ArrayList arrayList, int i) {
        getMessagesController().markChannelDialogMessageAsDeleted(arrayList, i);
    }

    public /* synthetic */ void lambda$null$47$MessagesStorage(ArrayList arrayList, int i) {
        getNotificationCenter().postNotificationName(NotificationCenter.messagesDeleted, arrayList, Integer.valueOf(i), Boolean.FALSE);
    }

    private boolean addFilesToDelete(TLRPC$Message tLRPC$Message, ArrayList<File> arrayList, ArrayList<Pair<Long, Integer>> arrayList2, boolean z) {
        int i;
        long j;
        int i2 = 0;
        if (tLRPC$Message == null) {
            return false;
        }
        TLRPC$Document document = MessageObject.getDocument(tLRPC$Message);
        TLRPC$Photo photo = MessageObject.getPhoto(tLRPC$Message);
        if (MessageObject.isVoiceMessage(tLRPC$Message)) {
            j = document.id;
            i = 2;
        } else {
            if (MessageObject.isStickerMessage(tLRPC$Message) || MessageObject.isAnimatedStickerMessage(tLRPC$Message)) {
                j = document.id;
            } else if (MessageObject.isVideoMessage(tLRPC$Message) || MessageObject.isRoundVideoMessage(tLRPC$Message) || MessageObject.isGifMessage(tLRPC$Message)) {
                j = document.id;
                i = 4;
            } else if (document != null) {
                j = document.id;
                i = 8;
            } else if (photo == null || FileLoader.getClosestPhotoSizeWithSize(photo.sizes, AndroidUtilities.getPhotoSize()) == null) {
                j = 0;
                i = 0;
            } else {
                j = photo.id;
            }
            i = 1;
        }
        if (j != 0) {
            arrayList2.add(new Pair(Long.valueOf(j), Integer.valueOf(i)));
        }
        if (photo != null) {
            int size = photo.sizes.size();
            while (i2 < size) {
                File pathToAttach = FileLoader.getPathToAttach(photo.sizes.get(i2));
                if (pathToAttach != null && pathToAttach.toString().length() > 0) {
                    arrayList.add(pathToAttach);
                }
                i2++;
            }
            return true;
        } else if (document == null) {
            return false;
        } else {
            File pathToAttach2 = FileLoader.getPathToAttach(document, z);
            if (pathToAttach2 != null && pathToAttach2.toString().length() > 0) {
                arrayList.add(pathToAttach2);
            }
            int size2 = document.thumbs.size();
            while (i2 < size2) {
                File pathToAttach3 = FileLoader.getPathToAttach(document.thumbs.get(i2));
                if (pathToAttach3 != null && pathToAttach3.toString().length() > 0) {
                    arrayList.add(pathToAttach3);
                }
                i2++;
            }
            return true;
        }
    }

    public void deleteDialog(long j, int i) {
        this.storageQueue.postRunnable(new Runnable(i, j) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ long f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesStorage.this.lambda$deleteDialog$50$MessagesStorage(this.f$1, this.f$2);
            }
        });
    }

    /* JADX WARNING: Removed duplicated region for block: B:58:0x021c A[Catch:{ Exception -> 0x0037 }] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$deleteDialog$50$MessagesStorage(int r20, long r21) {
        /*
            r19 = this;
            r1 = r19
            r2 = r20
            r3 = r21
            java.lang.String r5 = " AND mid != "
            r6 = 3
            r8 = 0
            if (r2 != r6) goto L_0x003a
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0037 }
            java.lang.StringBuilder r9 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0037 }
            r9.<init>()     // Catch:{ Exception -> 0x0037 }
            java.lang.String r10 = "SELECT last_mid FROM dialogs WHERE did = "
            r9.append(r10)     // Catch:{ Exception -> 0x0037 }
            r9.append(r3)     // Catch:{ Exception -> 0x0037 }
            java.lang.String r9 = r9.toString()     // Catch:{ Exception -> 0x0037 }
            java.lang.Object[] r10 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLiteCursor r0 = r0.queryFinalized(r9, r10)     // Catch:{ Exception -> 0x0037 }
            boolean r9 = r0.next()     // Catch:{ Exception -> 0x0037 }
            if (r9 == 0) goto L_0x0030
            int r9 = r0.intValue(r8)     // Catch:{ Exception -> 0x0037 }
            goto L_0x0031
        L_0x0030:
            r9 = -1
        L_0x0031:
            r0.dispose()     // Catch:{ Exception -> 0x0037 }
            if (r9 == 0) goto L_0x003a
            return
        L_0x0037:
            r0 = move-exception
            goto L_0x03cb
        L_0x003a:
            int r9 = (int) r3
            r10 = 1
            java.lang.String r11 = "SELECT data FROM messages WHERE uid = "
            r12 = 2
            if (r9 == 0) goto L_0x0043
            if (r2 != r12) goto L_0x009a
        L_0x0043:
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0037 }
            java.lang.StringBuilder r13 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0037 }
            r13.<init>()     // Catch:{ Exception -> 0x0037 }
            r13.append(r11)     // Catch:{ Exception -> 0x0037 }
            r13.append(r3)     // Catch:{ Exception -> 0x0037 }
            java.lang.String r13 = r13.toString()     // Catch:{ Exception -> 0x0037 }
            java.lang.Object[] r14 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLiteCursor r13 = r0.queryFinalized(r13, r14)     // Catch:{ Exception -> 0x0037 }
            java.util.ArrayList r14 = new java.util.ArrayList     // Catch:{ Exception -> 0x0037 }
            r14.<init>()     // Catch:{ Exception -> 0x0037 }
            java.util.ArrayList r15 = new java.util.ArrayList     // Catch:{ Exception -> 0x0037 }
            r15.<init>()     // Catch:{ Exception -> 0x0037 }
        L_0x0064:
            boolean r0 = r13.next()     // Catch:{ Exception -> 0x0089 }
            if (r0 == 0) goto L_0x008d
            org.telegram.tgnet.NativeByteBuffer r0 = r13.byteBufferValue(r8)     // Catch:{ Exception -> 0x0089 }
            if (r0 == 0) goto L_0x0087
            int r7 = r0.readInt32(r8)     // Catch:{ Exception -> 0x0089 }
            org.telegram.tgnet.TLRPC$Message r7 = org.telegram.tgnet.TLRPC$Message.TLdeserialize(r0, r7, r8)     // Catch:{ Exception -> 0x0089 }
            org.telegram.messenger.UserConfig r12 = r19.getUserConfig()     // Catch:{ Exception -> 0x0089 }
            int r12 = r12.clientUserId     // Catch:{ Exception -> 0x0089 }
            r7.readAttachPath(r0, r12)     // Catch:{ Exception -> 0x0089 }
            r0.reuse()     // Catch:{ Exception -> 0x0089 }
            r1.addFilesToDelete(r7, r14, r15, r8)     // Catch:{ Exception -> 0x0089 }
        L_0x0087:
            r12 = 2
            goto L_0x0064
        L_0x0089:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ Exception -> 0x0037 }
        L_0x008d:
            r13.dispose()     // Catch:{ Exception -> 0x0037 }
            r1.deleteFromDownloadQueue(r15, r10)     // Catch:{ Exception -> 0x0037 }
            org.telegram.messenger.FileLoader r0 = r19.getFileLoader()     // Catch:{ Exception -> 0x0037 }
            r0.deleteFiles(r14, r2)     // Catch:{ Exception -> 0x0037 }
        L_0x009a:
            java.lang.String r12 = "DELETE FROM media_holes_v2 WHERE uid = "
            java.lang.String r13 = "DELETE FROM messages_holes WHERE uid = "
            java.lang.String r14 = "DELETE FROM media_v2 WHERE uid = "
            java.lang.String r15 = "DELETE FROM media_counts_v2 WHERE uid = "
            java.lang.String r7 = "DELETE FROM bot_keyboard WHERE uid = "
            java.lang.String r10 = "DELETE FROM messages WHERE uid = "
            if (r2 == 0) goto L_0x0231
            if (r2 != r6) goto L_0x00ac
            goto L_0x0231
        L_0x00ac:
            r6 = 2
            if (r2 != r6) goto L_0x022c
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0037 }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0037 }
            r2.<init>()     // Catch:{ Exception -> 0x0037 }
            java.lang.String r6 = "SELECT last_mid_i, last_mid FROM dialogs WHERE did = "
            r2.append(r6)     // Catch:{ Exception -> 0x0037 }
            r2.append(r3)     // Catch:{ Exception -> 0x0037 }
            java.lang.String r2 = r2.toString()     // Catch:{ Exception -> 0x0037 }
            java.lang.Object[] r6 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLiteCursor r2 = r0.queryFinalized(r2, r6)     // Catch:{ Exception -> 0x0037 }
            boolean r0 = r2.next()     // Catch:{ Exception -> 0x0037 }
            if (r0 == 0) goto L_0x0226
            r6 = r14
            r16 = r15
            long r14 = r2.longValue(r8)     // Catch:{ Exception -> 0x0037 }
            r9 = 1
            long r8 = r2.longValue(r9)     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0037 }
            r20 = r2
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0037 }
            r2.<init>()     // Catch:{ Exception -> 0x0037 }
            r2.append(r11)     // Catch:{ Exception -> 0x0037 }
            r2.append(r3)     // Catch:{ Exception -> 0x0037 }
            java.lang.String r11 = " AND mid IN ("
            r2.append(r11)     // Catch:{ Exception -> 0x0037 }
            r2.append(r14)     // Catch:{ Exception -> 0x0037 }
            java.lang.String r11 = ","
            r2.append(r11)     // Catch:{ Exception -> 0x0037 }
            r2.append(r8)     // Catch:{ Exception -> 0x0037 }
            java.lang.String r11 = ")"
            r2.append(r11)     // Catch:{ Exception -> 0x0037 }
            java.lang.String r2 = r2.toString()     // Catch:{ Exception -> 0x0037 }
            r17 = r12
            r11 = 0
            java.lang.Object[] r12 = new java.lang.Object[r11]     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLiteCursor r2 = r0.queryFinalized(r2, r12)     // Catch:{ Exception -> 0x0037 }
            r12 = -1
        L_0x010c:
            boolean r0 = r2.next()     // Catch:{ Exception -> 0x013e }
            if (r0 == 0) goto L_0x013b
            org.telegram.tgnet.NativeByteBuffer r0 = r2.byteBufferValue(r11)     // Catch:{ Exception -> 0x013e }
            if (r0 == 0) goto L_0x0135
            r18 = r12
            int r12 = r0.readInt32(r11)     // Catch:{ Exception -> 0x0133 }
            org.telegram.tgnet.TLRPC$Message r12 = org.telegram.tgnet.TLRPC$Message.TLdeserialize(r0, r12, r11)     // Catch:{ Exception -> 0x0133 }
            org.telegram.messenger.UserConfig r11 = r19.getUserConfig()     // Catch:{ Exception -> 0x0133 }
            int r11 = r11.clientUserId     // Catch:{ Exception -> 0x0133 }
            r12.readAttachPath(r0, r11)     // Catch:{ Exception -> 0x0133 }
            r0.reuse()     // Catch:{ Exception -> 0x0133 }
            if (r12 == 0) goto L_0x0137
            int r12 = r12.id     // Catch:{ Exception -> 0x0133 }
            goto L_0x0139
        L_0x0133:
            r0 = move-exception
            goto L_0x0141
        L_0x0135:
            r18 = r12
        L_0x0137:
            r12 = r18
        L_0x0139:
            r11 = 0
            goto L_0x010c
        L_0x013b:
            r18 = r12
            goto L_0x0144
        L_0x013e:
            r0 = move-exception
            r18 = r12
        L_0x0141:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ Exception -> 0x0037 }
        L_0x0144:
            r2.dispose()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0037 }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0037 }
            r2.<init>()     // Catch:{ Exception -> 0x0037 }
            r2.append(r10)     // Catch:{ Exception -> 0x0037 }
            r2.append(r3)     // Catch:{ Exception -> 0x0037 }
            r2.append(r5)     // Catch:{ Exception -> 0x0037 }
            r2.append(r14)     // Catch:{ Exception -> 0x0037 }
            r2.append(r5)     // Catch:{ Exception -> 0x0037 }
            r2.append(r8)     // Catch:{ Exception -> 0x0037 }
            java.lang.String r2 = r2.toString()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r2)     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0037 }
            r0.dispose()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0037 }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0037 }
            r2.<init>()     // Catch:{ Exception -> 0x0037 }
            r2.append(r13)     // Catch:{ Exception -> 0x0037 }
            r2.append(r3)     // Catch:{ Exception -> 0x0037 }
            java.lang.String r2 = r2.toString()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r2)     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0037 }
            r0.dispose()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0037 }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0037 }
            r2.<init>()     // Catch:{ Exception -> 0x0037 }
            r2.append(r7)     // Catch:{ Exception -> 0x0037 }
            r2.append(r3)     // Catch:{ Exception -> 0x0037 }
            java.lang.String r2 = r2.toString()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r2)     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0037 }
            r0.dispose()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0037 }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0037 }
            r2.<init>()     // Catch:{ Exception -> 0x0037 }
            r5 = r16
            r2.append(r5)     // Catch:{ Exception -> 0x0037 }
            r2.append(r3)     // Catch:{ Exception -> 0x0037 }
            java.lang.String r2 = r2.toString()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r2)     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0037 }
            r0.dispose()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0037 }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0037 }
            r2.<init>()     // Catch:{ Exception -> 0x0037 }
            r2.append(r6)     // Catch:{ Exception -> 0x0037 }
            r2.append(r3)     // Catch:{ Exception -> 0x0037 }
            java.lang.String r2 = r2.toString()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r2)     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0037 }
            r0.dispose()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0037 }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0037 }
            r2.<init>()     // Catch:{ Exception -> 0x0037 }
            r8 = r17
            r2.append(r8)     // Catch:{ Exception -> 0x0037 }
            r2.append(r3)     // Catch:{ Exception -> 0x0037 }
            java.lang.String r2 = r2.toString()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r2)     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0037 }
            r0.dispose()     // Catch:{ Exception -> 0x0037 }
            org.telegram.messenger.MediaDataController r0 = r19.getMediaDataController()     // Catch:{ Exception -> 0x0037 }
            r2 = 0
            r0.clearBotKeyboard(r3, r2)     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0037 }
            java.lang.String r2 = "REPLACE INTO messages_holes VALUES(?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r2)     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLiteDatabase r2 = r1.database     // Catch:{ Exception -> 0x0037 }
            java.lang.String r5 = "REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r2 = r2.executeFast(r5)     // Catch:{ Exception -> 0x0037 }
            r12 = r18
            r5 = -1
            if (r12 == r5) goto L_0x021f
            createFirstHoles(r3, r0, r2, r12)     // Catch:{ Exception -> 0x0037 }
        L_0x021f:
            r0.dispose()     // Catch:{ Exception -> 0x0037 }
            r2.dispose()     // Catch:{ Exception -> 0x0037 }
            goto L_0x0228
        L_0x0226:
            r20 = r2
        L_0x0228:
            r20.dispose()     // Catch:{ Exception -> 0x0037 }
            return
        L_0x022c:
            r8 = r12
            r6 = r14
            r5 = r15
            goto L_0x02f0
        L_0x0231:
            r8 = r12
            r6 = r14
            r5 = r15
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0037 }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0037 }
            r2.<init>()     // Catch:{ Exception -> 0x0037 }
            java.lang.String r11 = "DELETE FROM dialogs WHERE did = "
            r2.append(r11)     // Catch:{ Exception -> 0x0037 }
            r2.append(r3)     // Catch:{ Exception -> 0x0037 }
            java.lang.String r2 = r2.toString()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r2)     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0037 }
            r0.dispose()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0037 }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0037 }
            r2.<init>()     // Catch:{ Exception -> 0x0037 }
            java.lang.String r11 = "DELETE FROM chat_settings_v2 WHERE uid = "
            r2.append(r11)     // Catch:{ Exception -> 0x0037 }
            r2.append(r3)     // Catch:{ Exception -> 0x0037 }
            java.lang.String r2 = r2.toString()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r2)     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0037 }
            r0.dispose()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0037 }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0037 }
            r2.<init>()     // Catch:{ Exception -> 0x0037 }
            java.lang.String r11 = "DELETE FROM chat_pinned WHERE uid = "
            r2.append(r11)     // Catch:{ Exception -> 0x0037 }
            r2.append(r3)     // Catch:{ Exception -> 0x0037 }
            java.lang.String r2 = r2.toString()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r2)     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0037 }
            r0.dispose()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0037 }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0037 }
            r2.<init>()     // Catch:{ Exception -> 0x0037 }
            java.lang.String r11 = "DELETE FROM channel_users_v2 WHERE did = "
            r2.append(r11)     // Catch:{ Exception -> 0x0037 }
            r2.append(r3)     // Catch:{ Exception -> 0x0037 }
            java.lang.String r2 = r2.toString()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r2)     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0037 }
            r0.dispose()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0037 }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0037 }
            r2.<init>()     // Catch:{ Exception -> 0x0037 }
            java.lang.String r11 = "DELETE FROM search_recent WHERE did = "
            r2.append(r11)     // Catch:{ Exception -> 0x0037 }
            r2.append(r3)     // Catch:{ Exception -> 0x0037 }
            java.lang.String r2 = r2.toString()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r2)     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0037 }
            r0.dispose()     // Catch:{ Exception -> 0x0037 }
            r0 = 32
            long r11 = r3 >> r0
            int r0 = (int) r11     // Catch:{ Exception -> 0x0037 }
            if (r9 == 0) goto L_0x02d2
            goto L_0x02f0
        L_0x02d2:
            org.telegram.SQLite.SQLiteDatabase r2 = r1.database     // Catch:{ Exception -> 0x0037 }
            java.lang.StringBuilder r9 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0037 }
            r9.<init>()     // Catch:{ Exception -> 0x0037 }
            java.lang.String r11 = "DELETE FROM enc_chats WHERE uid = "
            r9.append(r11)     // Catch:{ Exception -> 0x0037 }
            r9.append(r0)     // Catch:{ Exception -> 0x0037 }
            java.lang.String r0 = r9.toString()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r2.executeFast(r0)     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0037 }
            r0.dispose()     // Catch:{ Exception -> 0x0037 }
        L_0x02f0:
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0037 }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0037 }
            r2.<init>()     // Catch:{ Exception -> 0x0037 }
            java.lang.String r9 = "UPDATE dialogs SET unread_count = 0, unread_count_i = 0 WHERE did = "
            r2.append(r9)     // Catch:{ Exception -> 0x0037 }
            r2.append(r3)     // Catch:{ Exception -> 0x0037 }
            java.lang.String r2 = r2.toString()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r2)     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0037 }
            r0.dispose()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0037 }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0037 }
            r2.<init>()     // Catch:{ Exception -> 0x0037 }
            r2.append(r10)     // Catch:{ Exception -> 0x0037 }
            r2.append(r3)     // Catch:{ Exception -> 0x0037 }
            java.lang.String r2 = r2.toString()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r2)     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0037 }
            r0.dispose()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0037 }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0037 }
            r2.<init>()     // Catch:{ Exception -> 0x0037 }
            r2.append(r7)     // Catch:{ Exception -> 0x0037 }
            r2.append(r3)     // Catch:{ Exception -> 0x0037 }
            java.lang.String r2 = r2.toString()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r2)     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0037 }
            r0.dispose()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0037 }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0037 }
            r2.<init>()     // Catch:{ Exception -> 0x0037 }
            r2.append(r5)     // Catch:{ Exception -> 0x0037 }
            r2.append(r3)     // Catch:{ Exception -> 0x0037 }
            java.lang.String r2 = r2.toString()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r2)     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0037 }
            r0.dispose()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0037 }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0037 }
            r2.<init>()     // Catch:{ Exception -> 0x0037 }
            r2.append(r6)     // Catch:{ Exception -> 0x0037 }
            r2.append(r3)     // Catch:{ Exception -> 0x0037 }
            java.lang.String r2 = r2.toString()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r2)     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0037 }
            r0.dispose()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0037 }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0037 }
            r2.<init>()     // Catch:{ Exception -> 0x0037 }
            r2.append(r13)     // Catch:{ Exception -> 0x0037 }
            r2.append(r3)     // Catch:{ Exception -> 0x0037 }
            java.lang.String r2 = r2.toString()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r2)     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0037 }
            r0.dispose()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0037 }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0037 }
            r2.<init>()     // Catch:{ Exception -> 0x0037 }
            r2.append(r8)     // Catch:{ Exception -> 0x0037 }
            r2.append(r3)     // Catch:{ Exception -> 0x0037 }
            java.lang.String r2 = r2.toString()     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r2)     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0037 }
            r0.dispose()     // Catch:{ Exception -> 0x0037 }
            org.telegram.messenger.MediaDataController r0 = r19.getMediaDataController()     // Catch:{ Exception -> 0x0037 }
            r2 = 0
            r0.clearBotKeyboard(r3, r2)     // Catch:{ Exception -> 0x0037 }
            org.telegram.messenger.-$$Lambda$MessagesStorage$5rlLGqQ5dvFpyGGb736SfMYulVY r0 = new org.telegram.messenger.-$$Lambda$MessagesStorage$5rlLGqQ5dvFpyGGb736SfMYulVY     // Catch:{ Exception -> 0x0037 }
            r0.<init>()     // Catch:{ Exception -> 0x0037 }
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r0)     // Catch:{ Exception -> 0x0037 }
            r2 = 0
            r1.resetAllUnreadCounters(r2)     // Catch:{ Exception -> 0x0037 }
            goto L_0x03ce
        L_0x03cb:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
        L_0x03ce:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$deleteDialog$50$MessagesStorage(int, long):void");
    }

    public /* synthetic */ void lambda$null$49$MessagesStorage() {
        getNotificationCenter().postNotificationName(NotificationCenter.needReloadRecentDialogsSearch, new Object[0]);
    }

    public void onDeleteQueryComplete(long j) {
        this.storageQueue.postRunnable(new Runnable(j) {
            public final /* synthetic */ long f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesStorage.this.lambda$onDeleteQueryComplete$51$MessagesStorage(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$onDeleteQueryComplete$51$MessagesStorage(long j) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM media_counts_v2 WHERE uid = " + j).stepThis().dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void getDialogPhotos(int i, int i2, long j, int i3) {
        this.storageQueue.postRunnable(new Runnable(j, i, i2, i3) {
            public final /* synthetic */ long f$1;
            public final /* synthetic */ int f$2;
            public final /* synthetic */ int f$3;
            public final /* synthetic */ int f$4;

            {
                this.f$1 = r2;
                this.f$2 = r4;
                this.f$3 = r5;
                this.f$4 = r6;
            }

            public final void run() {
                MessagesStorage.this.lambda$getDialogPhotos$53$MessagesStorage(this.f$1, this.f$2, this.f$3, this.f$4);
            }
        });
    }

    public /* synthetic */ void lambda$getDialogPhotos$53$MessagesStorage(long j, int i, int i2, int i3) {
        SQLiteCursor sQLiteCursor;
        if (j != 0) {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM user_photos WHERE uid = %d AND id < %d ORDER BY rowid ASC LIMIT %d", new Object[]{Integer.valueOf(i), Long.valueOf(j), Integer.valueOf(i2)}), new Object[0]);
            } catch (Exception e) {
                FileLog.e((Throwable) e);
                return;
            }
        } else {
            sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM user_photos WHERE uid = %d ORDER BY rowid ASC LIMIT %d", new Object[]{Integer.valueOf(i), Integer.valueOf(i2)}), new Object[0]);
        }
        TLRPC$TL_photos_photos tLRPC$TL_photos_photos = new TLRPC$TL_photos_photos();
        ArrayList arrayList = new ArrayList();
        while (sQLiteCursor.next()) {
            NativeByteBuffer byteBufferValue = sQLiteCursor.byteBufferValue(0);
            if (byteBufferValue != null) {
                TLRPC$Photo TLdeserialize = TLRPC$Photo.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                if (byteBufferValue.remaining() > 0) {
                    arrayList.add(TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false));
                } else {
                    arrayList.add((Object) null);
                }
                byteBufferValue.reuse();
                tLRPC$TL_photos_photos.photos.add(TLdeserialize);
            }
        }
        sQLiteCursor.dispose();
        Utilities.stageQueue.postRunnable(new Runnable(tLRPC$TL_photos_photos, arrayList, i, i2, j, i3) {
            public final /* synthetic */ TLRPC$photos_Photos f$1;
            public final /* synthetic */ ArrayList f$2;
            public final /* synthetic */ int f$3;
            public final /* synthetic */ int f$4;
            public final /* synthetic */ long f$5;
            public final /* synthetic */ int f$6;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r8;
            }

            public final void run() {
                MessagesStorage.this.lambda$null$52$MessagesStorage(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
            }
        });
    }

    public /* synthetic */ void lambda$null$52$MessagesStorage(TLRPC$photos_Photos tLRPC$photos_Photos, ArrayList arrayList, int i, int i2, long j, int i3) {
        getMessagesController().processLoadedUserPhotos(tLRPC$photos_Photos, arrayList, i, i2, j, true, i3);
    }

    public void clearUserPhotos(int i) {
        this.storageQueue.postRunnable(new Runnable(i) {
            public final /* synthetic */ int f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesStorage.this.lambda$clearUserPhotos$54$MessagesStorage(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$clearUserPhotos$54$MessagesStorage(int i) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM user_photos WHERE uid = " + i).stepThis().dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void clearUserPhoto(int i, long j) {
        this.storageQueue.postRunnable(new Runnable(i, j) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ long f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesStorage.this.lambda$clearUserPhoto$55$MessagesStorage(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$clearUserPhoto$55$MessagesStorage(int i, long j) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM user_photos WHERE uid = " + i + " AND id = " + j).stepThis().dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void resetDialogs(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, int i, int i2, int i3, int i4, int i5, LongSparseArray<TLRPC$Dialog> longSparseArray, LongSparseArray<MessageObject> longSparseArray2, TLRPC$Message tLRPC$Message, int i6) {
        this.storageQueue.postRunnable(new Runnable(tLRPC$messages_Dialogs, i6, i2, i3, i4, i5, tLRPC$Message, i, longSparseArray, longSparseArray2) {
            public final /* synthetic */ TLRPC$messages_Dialogs f$1;
            public final /* synthetic */ LongSparseArray f$10;
            public final /* synthetic */ int f$2;
            public final /* synthetic */ int f$3;
            public final /* synthetic */ int f$4;
            public final /* synthetic */ int f$5;
            public final /* synthetic */ int f$6;
            public final /* synthetic */ TLRPC$Message f$7;
            public final /* synthetic */ int f$8;
            public final /* synthetic */ LongSparseArray f$9;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
                this.f$7 = r8;
                this.f$8 = r9;
                this.f$9 = r10;
                this.f$10 = r11;
            }

            public final void run() {
                MessagesStorage.this.lambda$resetDialogs$57$MessagesStorage(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7, this.f$8, this.f$9, this.f$10);
            }
        });
    }

    public /* synthetic */ void lambda$resetDialogs$57$MessagesStorage(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, int i, int i2, int i3, int i4, int i5, TLRPC$Message tLRPC$Message, int i6, LongSparseArray longSparseArray, LongSparseArray longSparseArray2) {
        long j;
        int i7;
        int i8;
        int i9;
        int i10;
        int i11;
        long j2;
        long j3;
        TLRPC$messages_Dialogs tLRPC$messages_Dialogs2 = tLRPC$messages_Dialogs;
        TLRPC$Message tLRPC$Message2 = tLRPC$Message;
        try {
            ArrayList arrayList = new ArrayList();
            int size = tLRPC$messages_Dialogs2.dialogs.size() - i;
            LongSparseArray longSparseArray3 = new LongSparseArray();
            ArrayList arrayList2 = new ArrayList();
            ArrayList arrayList3 = new ArrayList();
            for (int i12 = i; i12 < tLRPC$messages_Dialogs2.dialogs.size(); i12++) {
                arrayList3.add(Long.valueOf(tLRPC$messages_Dialogs2.dialogs.get(i12).id));
            }
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT did, pinned FROM dialogs WHERE 1", new Object[0]);
            int i13 = 0;
            while (queryFinalized.next()) {
                long longValue = queryFinalized.longValue(0);
                int intValue = queryFinalized.intValue(1);
                int i14 = (int) longValue;
                if (i14 != 0) {
                    arrayList.add(Integer.valueOf(i14));
                    if (intValue > 0) {
                        i13 = Math.max(intValue, i13);
                        longSparseArray3.put(longValue, Integer.valueOf(intValue));
                        arrayList2.add(Long.valueOf(longValue));
                    }
                }
            }
            Collections.sort(arrayList2, new Comparator(longSparseArray3) {
                public final /* synthetic */ LongSparseArray f$0;

                {
                    this.f$0 = r1;
                }

                public final int compare(Object obj, Object obj2) {
                    return MessagesStorage.lambda$null$56(this.f$0, (Long) obj, (Long) obj2);
                }
            });
            while (arrayList2.size() < size) {
                arrayList2.add(0, 0L);
            }
            queryFinalized.dispose();
            String str = "(" + TextUtils.join(",", arrayList) + ")";
            this.database.beginTransaction();
            this.database.executeFast("DELETE FROM dialogs WHERE did IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM messages WHERE uid IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM polls WHERE 1").stepThis().dispose();
            this.database.executeFast("DELETE FROM bot_keyboard WHERE uid IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM media_v2 WHERE uid IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM messages_holes WHERE uid IN " + str).stepThis().dispose();
            this.database.executeFast("DELETE FROM media_holes_v2 WHERE uid IN " + str).stepThis().dispose();
            this.database.commitTransaction();
            for (int i15 = 0; i15 < size; i15++) {
                TLRPC$Dialog tLRPC$Dialog = tLRPC$messages_Dialogs2.dialogs.get(i + i15);
                if (!(tLRPC$Dialog instanceof TLRPC$TL_dialog) || tLRPC$Dialog.pinned) {
                    int indexOf = arrayList2.indexOf(Long.valueOf(tLRPC$Dialog.id));
                    int indexOf2 = arrayList3.indexOf(Long.valueOf(tLRPC$Dialog.id));
                    if (!(indexOf == -1 || indexOf2 == -1)) {
                        if (indexOf == indexOf2) {
                            Integer num = (Integer) longSparseArray3.get(tLRPC$Dialog.id);
                            if (num != null) {
                                tLRPC$Dialog.pinnedNum = num.intValue();
                            }
                        } else {
                            Integer num2 = (Integer) longSparseArray3.get(((Long) arrayList2.get(indexOf2)).longValue());
                            if (num2 != null) {
                                tLRPC$Dialog.pinnedNum = num2.intValue();
                            }
                        }
                    }
                    if (tLRPC$Dialog.pinnedNum == 0) {
                        tLRPC$Dialog.pinnedNum = (size - i15) + i13;
                    }
                }
            }
            putDialogsInternal(tLRPC$messages_Dialogs2, 0);
            lambda$saveDiffParams$25$MessagesStorage(i2, i3, i4, i5);
            int totalDialogsCount = getUserConfig().getTotalDialogsCount(0);
            getUserConfig().getDialogLoadOffsets(0);
            int size2 = totalDialogsCount + tLRPC$messages_Dialogs2.dialogs.size();
            int i16 = tLRPC$Message2.id;
            int i17 = tLRPC$Message2.date;
            if (tLRPC$Message2.to_id.channel_id == 0) {
                if (tLRPC$Message2.to_id.chat_id != 0) {
                    int i18 = tLRPC$Message2.to_id.chat_id;
                    int i19 = 0;
                    while (true) {
                        if (i19 >= tLRPC$messages_Dialogs2.chats.size()) {
                            j2 = 0;
                            break;
                        }
                        TLRPC$Chat tLRPC$Chat = tLRPC$messages_Dialogs2.chats.get(i19);
                        if (tLRPC$Chat.id == i18) {
                            j2 = tLRPC$Chat.access_hash;
                            break;
                        }
                        i19++;
                    }
                    j = j2;
                    i7 = 0;
                    i8 = i18;
                } else {
                    if (tLRPC$Message2.to_id.user_id != 0) {
                        int i20 = tLRPC$Message2.to_id.user_id;
                        int i21 = 0;
                        while (i21 < tLRPC$messages_Dialogs2.users.size()) {
                            TLRPC$User tLRPC$User = tLRPC$messages_Dialogs2.users.get(i21);
                            if (tLRPC$User.id == i20) {
                                j = tLRPC$User.access_hash;
                                i8 = 0;
                                i7 = i20;
                            } else {
                                i21++;
                            }
                        }
                        i11 = i20;
                        i9 = 0;
                        i10 = 0;
                    } else {
                        i9 = 0;
                        i10 = 0;
                        i11 = 0;
                    }
                    j = 0;
                }
                i9 = 0;
                break;
            }
            i9 = tLRPC$Message2.to_id.channel_id;
            int i22 = 0;
            while (true) {
                if (i22 >= tLRPC$messages_Dialogs2.chats.size()) {
                    j3 = 0;
                    break;
                }
                TLRPC$Chat tLRPC$Chat2 = tLRPC$messages_Dialogs2.chats.get(i22);
                if (tLRPC$Chat2.id == i9) {
                    j3 = tLRPC$Chat2.access_hash;
                    break;
                }
                i22++;
            }
            j = j3;
            i8 = 0;
            i7 = 0;
            int i23 = 0;
            while (i23 < 2) {
                getUserConfig().setDialogsLoadOffset(i23, i16, i17, i7, i8, i9, j);
                int i24 = i23;
                getUserConfig().setTotalDialogsCount(i24, size2);
                i23 = i24 + 1;
            }
            getUserConfig().draftsLoaded = false;
            getUserConfig().saveConfig(false);
            getMessagesController().completeDialogsReset(tLRPC$messages_Dialogs, i6, i2, i3, i4, i5, longSparseArray, longSparseArray2, tLRPC$Message);
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    static /* synthetic */ int lambda$null$56(LongSparseArray longSparseArray, Long l, Long l2) {
        Integer num = (Integer) longSparseArray.get(l.longValue());
        Integer num2 = (Integer) longSparseArray.get(l2.longValue());
        if (num.intValue() < num2.intValue()) {
            return 1;
        }
        return num.intValue() > num2.intValue() ? -1 : 0;
    }

    public void putDialogPhotos(int i, TLRPC$photos_Photos tLRPC$photos_Photos, ArrayList<TLRPC$Message> arrayList) {
        if (tLRPC$photos_Photos != null) {
            this.storageQueue.postRunnable(new Runnable(i, tLRPC$photos_Photos, arrayList) {
                public final /* synthetic */ int f$1;
                public final /* synthetic */ TLRPC$photos_Photos f$2;
                public final /* synthetic */ ArrayList f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run() {
                    MessagesStorage.this.lambda$putDialogPhotos$58$MessagesStorage(this.f$1, this.f$2, this.f$3);
                }
            });
        }
    }

    public /* synthetic */ void lambda$putDialogPhotos$58$MessagesStorage(int i, TLRPC$photos_Photos tLRPC$photos_Photos, ArrayList arrayList) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM user_photos WHERE uid = " + i).stepThis().dispose();
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO user_photos VALUES(?, ?, ?)");
            int size = tLRPC$photos_Photos.photos.size();
            for (int i2 = 0; i2 < size; i2++) {
                TLRPC$Photo tLRPC$Photo = tLRPC$photos_Photos.photos.get(i2);
                if (!(tLRPC$Photo instanceof TLRPC$TL_photoEmpty)) {
                    executeFast.requery();
                    int objectSize = tLRPC$Photo.getObjectSize();
                    if (arrayList != null) {
                        objectSize += ((TLRPC$Message) arrayList.get(i2)).getObjectSize();
                    }
                    NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(objectSize);
                    tLRPC$Photo.serializeToStream(nativeByteBuffer);
                    if (arrayList != null) {
                        ((TLRPC$Message) arrayList.get(i2)).serializeToStream(nativeByteBuffer);
                    }
                    executeFast.bindInteger(1, i);
                    executeFast.bindLong(2, tLRPC$Photo.id);
                    executeFast.bindByteBuffer(3, nativeByteBuffer);
                    executeFast.step();
                    nativeByteBuffer.reuse();
                }
            }
            executeFast.dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void emptyMessagesMedia(ArrayList<Integer> arrayList) {
        this.storageQueue.postRunnable(new Runnable(arrayList) {
            public final /* synthetic */ ArrayList f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesStorage.this.lambda$emptyMessagesMedia$60$MessagesStorage(this.f$1);
            }
        });
    }

    /* JADX WARNING: Removed duplicated region for block: B:32:0x010a A[Catch:{ Exception -> 0x0152 }] */
    /* JADX WARNING: Removed duplicated region for block: B:33:0x0110 A[Catch:{ Exception -> 0x0152 }] */
    /* JADX WARNING: Removed duplicated region for block: B:36:0x011b A[Catch:{ Exception -> 0x0152 }] */
    /* JADX WARNING: Removed duplicated region for block: B:37:0x011d A[Catch:{ Exception -> 0x0152 }] */
    /* JADX WARNING: Removed duplicated region for block: B:43:0x012f A[Catch:{ Exception -> 0x0152 }] */
    /* JADX WARNING: Removed duplicated region for block: B:44:0x0131 A[Catch:{ Exception -> 0x0152 }] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$emptyMessagesMedia$60$MessagesStorage(java.util.ArrayList r12) {
        /*
            r11 = this;
            java.util.ArrayList r0 = new java.util.ArrayList     // Catch:{ Exception -> 0x0152 }
            r0.<init>()     // Catch:{ Exception -> 0x0152 }
            java.util.ArrayList r1 = new java.util.ArrayList     // Catch:{ Exception -> 0x0152 }
            r1.<init>()     // Catch:{ Exception -> 0x0152 }
            java.util.ArrayList r2 = new java.util.ArrayList     // Catch:{ Exception -> 0x0152 }
            r2.<init>()     // Catch:{ Exception -> 0x0152 }
            org.telegram.SQLite.SQLiteDatabase r3 = r11.database     // Catch:{ Exception -> 0x0152 }
            java.util.Locale r4 = java.util.Locale.US     // Catch:{ Exception -> 0x0152 }
            java.lang.String r5 = "SELECT data, mid, date, uid FROM messages WHERE mid IN (%s)"
            r6 = 1
            java.lang.Object[] r7 = new java.lang.Object[r6]     // Catch:{ Exception -> 0x0152 }
            java.lang.String r8 = ","
            java.lang.String r12 = android.text.TextUtils.join(r8, r12)     // Catch:{ Exception -> 0x0152 }
            r8 = 0
            r7[r8] = r12     // Catch:{ Exception -> 0x0152 }
            java.lang.String r12 = java.lang.String.format(r4, r5, r7)     // Catch:{ Exception -> 0x0152 }
            java.lang.Object[] r4 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x0152 }
            org.telegram.SQLite.SQLiteCursor r12 = r3.queryFinalized(r12, r4)     // Catch:{ Exception -> 0x0152 }
        L_0x002b:
            boolean r3 = r12.next()     // Catch:{ Exception -> 0x0152 }
            r4 = 3
            r5 = 2
            if (r3 == 0) goto L_0x0097
            org.telegram.tgnet.NativeByteBuffer r3 = r12.byteBufferValue(r8)     // Catch:{ Exception -> 0x0152 }
            if (r3 == 0) goto L_0x002b
            int r7 = r3.readInt32(r8)     // Catch:{ Exception -> 0x0152 }
            org.telegram.tgnet.TLRPC$Message r7 = org.telegram.tgnet.TLRPC$Message.TLdeserialize(r3, r7, r8)     // Catch:{ Exception -> 0x0152 }
            org.telegram.messenger.UserConfig r9 = r11.getUserConfig()     // Catch:{ Exception -> 0x0152 }
            int r9 = r9.clientUserId     // Catch:{ Exception -> 0x0152 }
            r7.readAttachPath(r3, r9)     // Catch:{ Exception -> 0x0152 }
            r3.reuse()     // Catch:{ Exception -> 0x0152 }
            org.telegram.tgnet.TLRPC$MessageMedia r3 = r7.media     // Catch:{ Exception -> 0x0152 }
            if (r3 == 0) goto L_0x002b
            boolean r3 = r11.addFilesToDelete(r7, r0, r1, r6)     // Catch:{ Exception -> 0x0152 }
            if (r3 != 0) goto L_0x0058
            goto L_0x002b
        L_0x0058:
            org.telegram.tgnet.TLRPC$MessageMedia r3 = r7.media     // Catch:{ Exception -> 0x0152 }
            org.telegram.tgnet.TLRPC$Document r3 = r3.document     // Catch:{ Exception -> 0x0152 }
            if (r3 == 0) goto L_0x0068
            org.telegram.tgnet.TLRPC$MessageMedia r3 = r7.media     // Catch:{ Exception -> 0x0152 }
            org.telegram.tgnet.TLRPC$TL_documentEmpty r9 = new org.telegram.tgnet.TLRPC$TL_documentEmpty     // Catch:{ Exception -> 0x0152 }
            r9.<init>()     // Catch:{ Exception -> 0x0152 }
            r3.document = r9     // Catch:{ Exception -> 0x0152 }
            goto L_0x0077
        L_0x0068:
            org.telegram.tgnet.TLRPC$MessageMedia r3 = r7.media     // Catch:{ Exception -> 0x0152 }
            org.telegram.tgnet.TLRPC$Photo r3 = r3.photo     // Catch:{ Exception -> 0x0152 }
            if (r3 == 0) goto L_0x0077
            org.telegram.tgnet.TLRPC$MessageMedia r3 = r7.media     // Catch:{ Exception -> 0x0152 }
            org.telegram.tgnet.TLRPC$TL_photoEmpty r9 = new org.telegram.tgnet.TLRPC$TL_photoEmpty     // Catch:{ Exception -> 0x0152 }
            r9.<init>()     // Catch:{ Exception -> 0x0152 }
            r3.photo = r9     // Catch:{ Exception -> 0x0152 }
        L_0x0077:
            org.telegram.tgnet.TLRPC$MessageMedia r3 = r7.media     // Catch:{ Exception -> 0x0152 }
            org.telegram.tgnet.TLRPC$MessageMedia r9 = r7.media     // Catch:{ Exception -> 0x0152 }
            int r9 = r9.flags     // Catch:{ Exception -> 0x0152 }
            r9 = r9 & -2
            r3.flags = r9     // Catch:{ Exception -> 0x0152 }
            int r3 = r12.intValue(r6)     // Catch:{ Exception -> 0x0152 }
            r7.id = r3     // Catch:{ Exception -> 0x0152 }
            int r3 = r12.intValue(r5)     // Catch:{ Exception -> 0x0152 }
            r7.date = r3     // Catch:{ Exception -> 0x0152 }
            long r3 = r12.longValue(r4)     // Catch:{ Exception -> 0x0152 }
            r7.dialog_id = r3     // Catch:{ Exception -> 0x0152 }
            r2.add(r7)     // Catch:{ Exception -> 0x0152 }
            goto L_0x002b
        L_0x0097:
            r12.dispose()     // Catch:{ Exception -> 0x0152 }
            r11.deleteFromDownloadQueue(r1, r6)     // Catch:{ Exception -> 0x0152 }
            boolean r12 = r2.isEmpty()     // Catch:{ Exception -> 0x0152 }
            if (r12 != 0) goto L_0x014a
            org.telegram.SQLite.SQLiteDatabase r12 = r11.database     // Catch:{ Exception -> 0x0152 }
            java.lang.String r1 = "REPLACE INTO messages VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, NULL, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r12 = r12.executeFast(r1)     // Catch:{ Exception -> 0x0152 }
            r1 = 0
        L_0x00ac:
            int r3 = r2.size()     // Catch:{ Exception -> 0x0152 }
            if (r1 >= r3) goto L_0x013f
            java.lang.Object r3 = r2.get(r1)     // Catch:{ Exception -> 0x0152 }
            org.telegram.tgnet.TLRPC$Message r3 = (org.telegram.tgnet.TLRPC$Message) r3     // Catch:{ Exception -> 0x0152 }
            org.telegram.tgnet.NativeByteBuffer r7 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x0152 }
            int r9 = r3.getObjectSize()     // Catch:{ Exception -> 0x0152 }
            r7.<init>((int) r9)     // Catch:{ Exception -> 0x0152 }
            r3.serializeToStream(r7)     // Catch:{ Exception -> 0x0152 }
            r12.requery()     // Catch:{ Exception -> 0x0152 }
            int r9 = r3.id     // Catch:{ Exception -> 0x0152 }
            long r9 = (long) r9     // Catch:{ Exception -> 0x0152 }
            r12.bindLong(r6, r9)     // Catch:{ Exception -> 0x0152 }
            long r9 = r3.dialog_id     // Catch:{ Exception -> 0x0152 }
            r12.bindLong(r5, r9)     // Catch:{ Exception -> 0x0152 }
            int r9 = org.telegram.messenger.MessageObject.getUnreadFlags(r3)     // Catch:{ Exception -> 0x0152 }
            r12.bindInteger(r4, r9)     // Catch:{ Exception -> 0x0152 }
            r9 = 4
            int r10 = r3.send_state     // Catch:{ Exception -> 0x0152 }
            r12.bindInteger(r9, r10)     // Catch:{ Exception -> 0x0152 }
            r9 = 5
            int r10 = r3.date     // Catch:{ Exception -> 0x0152 }
            r12.bindInteger(r9, r10)     // Catch:{ Exception -> 0x0152 }
            r9 = 6
            r12.bindByteBuffer((int) r9, (org.telegram.tgnet.NativeByteBuffer) r7)     // Catch:{ Exception -> 0x0152 }
            r9 = 7
            boolean r10 = org.telegram.messenger.MessageObject.isOut(r3)     // Catch:{ Exception -> 0x0152 }
            if (r10 != 0) goto L_0x00f7
            boolean r10 = r3.from_scheduled     // Catch:{ Exception -> 0x0152 }
            if (r10 == 0) goto L_0x00f5
            goto L_0x00f7
        L_0x00f5:
            r10 = 0
            goto L_0x00f8
        L_0x00f7:
            r10 = 1
        L_0x00f8:
            r12.bindInteger(r9, r10)     // Catch:{ Exception -> 0x0152 }
            r9 = 8
            int r10 = r3.ttl     // Catch:{ Exception -> 0x0152 }
            r12.bindInteger(r9, r10)     // Catch:{ Exception -> 0x0152 }
            int r9 = r3.flags     // Catch:{ Exception -> 0x0152 }
            r9 = r9 & 1024(0x400, float:1.435E-42)
            r10 = 9
            if (r9 == 0) goto L_0x0110
            int r9 = r3.views     // Catch:{ Exception -> 0x0152 }
            r12.bindInteger(r10, r9)     // Catch:{ Exception -> 0x0152 }
            goto L_0x0117
        L_0x0110:
            int r9 = r11.getMessageMediaType(r3)     // Catch:{ Exception -> 0x0152 }
            r12.bindInteger(r10, r9)     // Catch:{ Exception -> 0x0152 }
        L_0x0117:
            int r9 = r3.stickerVerified     // Catch:{ Exception -> 0x0152 }
            if (r9 != 0) goto L_0x011d
            r9 = 1
            goto L_0x0124
        L_0x011d:
            int r9 = r3.stickerVerified     // Catch:{ Exception -> 0x0152 }
            if (r9 != r5) goto L_0x0123
            r9 = 2
            goto L_0x0124
        L_0x0123:
            r9 = 0
        L_0x0124:
            r10 = 10
            r12.bindInteger(r10, r9)     // Catch:{ Exception -> 0x0152 }
            r9 = 11
            boolean r3 = r3.mentioned     // Catch:{ Exception -> 0x0152 }
            if (r3 == 0) goto L_0x0131
            r3 = 1
            goto L_0x0132
        L_0x0131:
            r3 = 0
        L_0x0132:
            r12.bindInteger(r9, r3)     // Catch:{ Exception -> 0x0152 }
            r12.step()     // Catch:{ Exception -> 0x0152 }
            r7.reuse()     // Catch:{ Exception -> 0x0152 }
            int r1 = r1 + 1
            goto L_0x00ac
        L_0x013f:
            r12.dispose()     // Catch:{ Exception -> 0x0152 }
            org.telegram.messenger.-$$Lambda$MessagesStorage$hpFxJoFsXEB6ABWi4IWl6XHFvZ0 r12 = new org.telegram.messenger.-$$Lambda$MessagesStorage$hpFxJoFsXEB6ABWi4IWl6XHFvZ0     // Catch:{ Exception -> 0x0152 }
            r12.<init>(r2)     // Catch:{ Exception -> 0x0152 }
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r12)     // Catch:{ Exception -> 0x0152 }
        L_0x014a:
            org.telegram.messenger.FileLoader r12 = r11.getFileLoader()     // Catch:{ Exception -> 0x0152 }
            r12.deleteFiles(r0, r8)     // Catch:{ Exception -> 0x0152 }
            goto L_0x0156
        L_0x0152:
            r12 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r12)
        L_0x0156:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$emptyMessagesMedia$60$MessagesStorage(java.util.ArrayList):void");
    }

    public /* synthetic */ void lambda$null$59$MessagesStorage(ArrayList arrayList) {
        for (int i = 0; i < arrayList.size(); i++) {
            getNotificationCenter().postNotificationName(NotificationCenter.updateMessageMedia, arrayList.get(i));
        }
    }

    public void updateMessagePollResults(long j, TLRPC$Poll tLRPC$Poll, TLRPC$PollResults tLRPC$PollResults) {
        this.storageQueue.postRunnable(new Runnable(j, tLRPC$Poll, tLRPC$PollResults) {
            public final /* synthetic */ long f$1;
            public final /* synthetic */ TLRPC$Poll f$2;
            public final /* synthetic */ TLRPC$PollResults f$3;

            {
                this.f$1 = r2;
                this.f$2 = r4;
                this.f$3 = r5;
            }

            public final void run() {
                MessagesStorage.this.lambda$updateMessagePollResults$61$MessagesStorage(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    public /* synthetic */ void lambda$updateMessagePollResults$61$MessagesStorage(long j, TLRPC$Poll tLRPC$Poll, TLRPC$PollResults tLRPC$PollResults) {
        ArrayList arrayList = null;
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT mid FROM polls WHERE id = %d", new Object[]{Long.valueOf(j)}), new Object[0]);
            while (queryFinalized.next()) {
                if (arrayList == null) {
                    arrayList = new ArrayList();
                }
                arrayList.add(Long.valueOf(queryFinalized.longValue(0)));
            }
            queryFinalized.dispose();
            if (arrayList != null) {
                this.database.beginTransaction();
                int size = arrayList.size();
                for (int i = 0; i < size; i++) {
                    Long l = (Long) arrayList.get(i);
                    SQLiteCursor queryFinalized2 = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM messages WHERE mid = %d", new Object[]{l}), new Object[0]);
                    if (queryFinalized2.next()) {
                        NativeByteBuffer byteBufferValue = queryFinalized2.byteBufferValue(0);
                        if (byteBufferValue != null) {
                            TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                            byteBufferValue.reuse();
                            if (TLdeserialize.media instanceof TLRPC$TL_messageMediaPoll) {
                                TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll = (TLRPC$TL_messageMediaPoll) TLdeserialize.media;
                                if (tLRPC$Poll != null) {
                                    tLRPC$TL_messageMediaPoll.poll = tLRPC$Poll;
                                }
                                if (tLRPC$PollResults != null) {
                                    MessageObject.updatePollResults(tLRPC$TL_messageMediaPoll, tLRPC$PollResults);
                                }
                                SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages SET data = ? WHERE mid = ?");
                                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(TLdeserialize.getObjectSize());
                                TLdeserialize.serializeToStream(nativeByteBuffer);
                                executeFast.requery();
                                executeFast.bindByteBuffer(1, nativeByteBuffer);
                                executeFast.bindLong(2, l.longValue());
                                executeFast.step();
                                nativeByteBuffer.reuse();
                                executeFast.dispose();
                            }
                        }
                    } else {
                        this.database.executeFast(String.format(Locale.US, "DELETE FROM polls WHERE mid = %d", new Object[]{l})).stepThis().dispose();
                    }
                    queryFinalized2.dispose();
                }
                this.database.commitTransaction();
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void updateMessageReactions(long j, int i, int i2, TLRPC$TL_messageReactions tLRPC$TL_messageReactions) {
        this.storageQueue.postRunnable(new Runnable(i, i2, tLRPC$TL_messageReactions) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ int f$2;
            public final /* synthetic */ TLRPC$TL_messageReactions f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesStorage.this.lambda$updateMessageReactions$62$MessagesStorage(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    public /* synthetic */ void lambda$updateMessageReactions$62$MessagesStorage(int i, int i2, TLRPC$TL_messageReactions tLRPC$TL_messageReactions) {
        NativeByteBuffer byteBufferValue;
        try {
            this.database.beginTransaction();
            long j = (long) i;
            if (i2 != 0) {
                j |= ((long) i2) << 32;
            }
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM messages WHERE mid = %d", new Object[]{Long.valueOf(j)}), new Object[0]);
            if (queryFinalized.next() && (byteBufferValue = queryFinalized.byteBufferValue(0)) != null) {
                TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                byteBufferValue.reuse();
                if (TLdeserialize != null) {
                    MessageObject.updateReactions(TLdeserialize, tLRPC$TL_messageReactions);
                    SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages SET data = ? WHERE mid = ?");
                    NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(TLdeserialize.getObjectSize());
                    TLdeserialize.serializeToStream(nativeByteBuffer);
                    executeFast.requery();
                    executeFast.bindByteBuffer(1, nativeByteBuffer);
                    executeFast.bindLong(2, j);
                    executeFast.step();
                    nativeByteBuffer.reuse();
                    executeFast.dispose();
                }
            }
            queryFinalized.dispose();
            this.database.commitTransaction();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void getNewTask(ArrayList<Integer> arrayList, int i) {
        this.storageQueue.postRunnable(new Runnable(arrayList) {
            public final /* synthetic */ ArrayList f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesStorage.this.lambda$getNewTask$63$MessagesStorage(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$getNewTask$63$MessagesStorage(ArrayList arrayList) {
        if (arrayList != null) {
            try {
                String join = TextUtils.join(",", arrayList);
                this.database.executeFast(String.format(Locale.US, "DELETE FROM enc_tasks_v2 WHERE mid IN(%s)", new Object[]{join})).stepThis().dispose();
            } catch (Exception e) {
                FileLog.e((Throwable) e);
                return;
            }
        }
        ArrayList arrayList2 = null;
        SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT mid, date FROM enc_tasks_v2 WHERE date = (SELECT min(date) FROM enc_tasks_v2)", new Object[0]);
        int i = -1;
        int i2 = 0;
        while (queryFinalized.next()) {
            long longValue = queryFinalized.longValue(0);
            if (i == -1 && (i = (int) (longValue >> 32)) < 0) {
                i = 0;
            }
            int intValue = queryFinalized.intValue(1);
            if (arrayList2 == null) {
                arrayList2 = new ArrayList();
            }
            arrayList2.add(Integer.valueOf((int) longValue));
            i2 = intValue;
        }
        queryFinalized.dispose();
        getMessagesController().processLoadedDeleteTask(i2, arrayList2, i);
    }

    public void markMentionMessageAsRead(int i, int i2, long j) {
        this.storageQueue.postRunnable(new Runnable(i, i2, j) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ int f$2;
            public final /* synthetic */ long f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesStorage.this.lambda$markMentionMessageAsRead$64$MessagesStorage(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    public /* synthetic */ void lambda$markMentionMessageAsRead$64$MessagesStorage(int i, int i2, long j) {
        long j2 = (long) i;
        if (i2 != 0) {
            j2 |= ((long) i2) << 32;
        }
        try {
            this.database.executeFast(String.format(Locale.US, "UPDATE messages SET read_state = read_state | 2 WHERE mid = %d", new Object[]{Long.valueOf(j2)})).stepThis().dispose();
            SQLiteDatabase sQLiteDatabase = this.database;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT unread_count_i FROM dialogs WHERE did = " + j, new Object[0]);
            int max = queryFinalized.next() ? Math.max(0, queryFinalized.intValue(0) - 1) : 0;
            queryFinalized.dispose();
            this.database.executeFast(String.format(Locale.US, "UPDATE dialogs SET unread_count_i = %d WHERE did = %d", new Object[]{Integer.valueOf(max), Long.valueOf(j)})).stepThis().dispose();
            LongSparseArray longSparseArray = new LongSparseArray(1);
            longSparseArray.put(j, Integer.valueOf(max));
            if (max == 0) {
                updateFiltersReadCounter((LongSparseArray<Integer>) null, longSparseArray, true);
            }
            getMessagesController().processDialogsUpdateRead((LongSparseArray<Integer>) null, longSparseArray);
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void markMessageAsMention(long j) {
        this.storageQueue.postRunnable(new Runnable(j) {
            public final /* synthetic */ long f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesStorage.this.lambda$markMessageAsMention$65$MessagesStorage(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$markMessageAsMention$65$MessagesStorage(long j) {
        try {
            this.database.executeFast(String.format(Locale.US, "UPDATE messages SET mention = 1, read_state = read_state & ~2 WHERE mid = %d", new Object[]{Long.valueOf(j)})).stepThis().dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void resetMentionsCount(long j, int i) {
        this.storageQueue.postRunnable(new Runnable(j, i) {
            public final /* synthetic */ long f$1;
            public final /* synthetic */ int f$2;

            {
                this.f$1 = r2;
                this.f$2 = r4;
            }

            public final void run() {
                MessagesStorage.this.lambda$resetMentionsCount$66$MessagesStorage(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$resetMentionsCount$66$MessagesStorage(long j, int i) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT unread_count_i FROM dialogs WHERE did = " + j, new Object[0]);
            int intValue = queryFinalized.next() ? queryFinalized.intValue(0) : 0;
            queryFinalized.dispose();
            if (intValue != 0 || i != 0) {
                if (i == 0) {
                    this.database.executeFast(String.format(Locale.US, "UPDATE messages SET read_state = read_state | 2 WHERE uid = %d AND mention = 1 AND read_state IN(0, 1)", new Object[]{Long.valueOf(j)})).stepThis().dispose();
                }
                this.database.executeFast(String.format(Locale.US, "UPDATE dialogs SET unread_count_i = %d WHERE did = %d", new Object[]{Integer.valueOf(i), Long.valueOf(j)})).stepThis().dispose();
                LongSparseArray longSparseArray = new LongSparseArray(1);
                longSparseArray.put(j, Integer.valueOf(i));
                getMessagesController().processDialogsUpdateRead((LongSparseArray<Integer>) null, longSparseArray);
                if (i == 0) {
                    updateFiltersReadCounter((LongSparseArray<Integer>) null, longSparseArray, true);
                }
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void createTaskForMid(int i, int i2, int i3, int i4, int i5, boolean z) {
        this.storageQueue.postRunnable(new Runnable(i3, i4, i5, i, i2, z) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ int f$2;
            public final /* synthetic */ int f$3;
            public final /* synthetic */ int f$4;
            public final /* synthetic */ int f$5;
            public final /* synthetic */ boolean f$6;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
                this.f$6 = r7;
            }

            public final void run() {
                MessagesStorage.this.lambda$createTaskForMid$68$MessagesStorage(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
            }
        });
    }

    public /* synthetic */ void lambda$createTaskForMid$68$MessagesStorage(int i, int i2, int i3, int i4, int i5, boolean z) {
        try {
            int max = Math.max(i, i2) + i3;
            SparseArray sparseArray = new SparseArray();
            ArrayList arrayList = new ArrayList();
            long j = (long) i4;
            if (i5 != 0) {
                j |= ((long) i5) << 32;
            }
            arrayList.add(Long.valueOf(j));
            sparseArray.put(max, arrayList);
            AndroidUtilities.runOnUIThread(new Runnable(z, arrayList) {
                public final /* synthetic */ boolean f$1;
                public final /* synthetic */ ArrayList f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    MessagesStorage.this.lambda$null$67$MessagesStorage(this.f$1, this.f$2);
                }
            });
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO enc_tasks_v2 VALUES(?, ?)");
            for (int i6 = 0; i6 < sparseArray.size(); i6++) {
                int keyAt = sparseArray.keyAt(i6);
                ArrayList arrayList2 = (ArrayList) sparseArray.get(keyAt);
                for (int i7 = 0; i7 < arrayList2.size(); i7++) {
                    executeFast.requery();
                    executeFast.bindLong(1, ((Long) arrayList2.get(i7)).longValue());
                    executeFast.bindInteger(2, keyAt);
                    executeFast.step();
                }
            }
            executeFast.dispose();
            this.database.executeFast(String.format(Locale.US, "UPDATE messages SET ttl = 0 WHERE mid = %d", new Object[]{Long.valueOf(j)})).stepThis().dispose();
            getMessagesController().didAddedNewTask(max, sparseArray);
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public /* synthetic */ void lambda$null$67$MessagesStorage(boolean z, ArrayList arrayList) {
        if (!z) {
            markMessagesContentAsRead(arrayList, 0);
        }
        getNotificationCenter().postNotificationName(NotificationCenter.messagesReadContent, arrayList);
    }

    public void createTaskForSecretChat(int i, int i2, int i3, int i4, ArrayList<Long> arrayList) {
        this.storageQueue.postRunnable(new Runnable(arrayList, i, i4, i2, i3) {
            public final /* synthetic */ ArrayList f$1;
            public final /* synthetic */ int f$2;
            public final /* synthetic */ int f$3;
            public final /* synthetic */ int f$4;
            public final /* synthetic */ int f$5;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
            }

            public final void run() {
                MessagesStorage.this.lambda$createTaskForSecretChat$70$MessagesStorage(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5);
            }
        });
    }

    public /* synthetic */ void lambda$createTaskForSecretChat$70$MessagesStorage(ArrayList arrayList, int i, int i2, int i3, int i4) {
        SQLiteCursor sQLiteCursor;
        ArrayList arrayList2 = arrayList;
        int i5 = Integer.MAX_VALUE;
        try {
            SparseArray sparseArray = new SparseArray();
            ArrayList arrayList3 = new ArrayList();
            StringBuilder sb = new StringBuilder();
            if (arrayList2 == null) {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT mid, ttl FROM messages WHERE uid = %d AND out = %d AND read_state > 0 AND ttl > 0 AND date <= %d AND send_state = 0 AND media != 1", new Object[]{Long.valueOf(((long) i) << 32), Integer.valueOf(i2), Integer.valueOf(i3)}), new Object[0]);
            } else {
                String join = TextUtils.join(",", arrayList2);
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT m.mid, m.ttl FROM messages as m INNER JOIN randoms as r ON m.mid = r.mid WHERE r.random_id IN (%s)", new Object[]{join}), new Object[0]);
            }
            while (sQLiteCursor.next()) {
                int intValue = sQLiteCursor.intValue(1);
                long intValue2 = (long) sQLiteCursor.intValue(0);
                if (arrayList2 != null) {
                    arrayList3.add(Long.valueOf(intValue2));
                }
                if (intValue > 0) {
                    int max = Math.max(i3, i4) + intValue;
                    i5 = Math.min(i5, max);
                    ArrayList arrayList4 = (ArrayList) sparseArray.get(max);
                    if (arrayList4 == null) {
                        arrayList4 = new ArrayList();
                        sparseArray.put(max, arrayList4);
                    }
                    if (sb.length() != 0) {
                        sb.append(",");
                    }
                    sb.append(intValue2);
                    arrayList4.add(Long.valueOf(intValue2));
                }
            }
            sQLiteCursor.dispose();
            if (arrayList2 != null) {
                AndroidUtilities.runOnUIThread(new Runnable(arrayList3) {
                    public final /* synthetic */ ArrayList f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run() {
                        MessagesStorage.this.lambda$null$69$MessagesStorage(this.f$1);
                    }
                });
            }
            if (sparseArray.size() != 0) {
                this.database.beginTransaction();
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO enc_tasks_v2 VALUES(?, ?)");
                for (int i6 = 0; i6 < sparseArray.size(); i6++) {
                    int keyAt = sparseArray.keyAt(i6);
                    ArrayList arrayList5 = (ArrayList) sparseArray.get(keyAt);
                    for (int i7 = 0; i7 < arrayList5.size(); i7++) {
                        executeFast.requery();
                        executeFast.bindLong(1, ((Long) arrayList5.get(i7)).longValue());
                        executeFast.bindInteger(2, keyAt);
                        executeFast.step();
                    }
                }
                executeFast.dispose();
                this.database.commitTransaction();
                this.database.executeFast(String.format(Locale.US, "UPDATE messages SET ttl = 0 WHERE mid IN(%s)", new Object[]{sb.toString()})).stepThis().dispose();
                getMessagesController().didAddedNewTask(i5, sparseArray);
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public /* synthetic */ void lambda$null$69$MessagesStorage(ArrayList arrayList) {
        markMessagesContentAsRead(arrayList, 0);
        getNotificationCenter().postNotificationName(NotificationCenter.messagesReadContent, arrayList);
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v1, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v4, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v5, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v6, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v7, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v8, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v9, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v10, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v11, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v12, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v13, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v14, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v15, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v16, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v17, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v18, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v19, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v20, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v21, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v22, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v23, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v24, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v25, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v26, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v27, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v28, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v31, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v32, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v34, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v38, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v39, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v43, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v44, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v47, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v50, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v53, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v54, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v56, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v57, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v58, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v59, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v60, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v61, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v62, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v63, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v64, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v65, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r7v58, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v67, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v68, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v106, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v117, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v119, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v120, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v70, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v58, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v73, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v74, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v75, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v75, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v86, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v88, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r2v89, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v77, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v80, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v83, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v88, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v31, resolved type: int[]} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v32, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r8v114, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r8v117, resolved type: java.lang.Object[]} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v93, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v17, resolved type: int[]} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v18, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v94, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v95, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v96, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v38, resolved type: int[]} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v39, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v99, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v19, resolved type: int[]} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r15v20, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v100, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v101, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v102, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v45, resolved type: int[]} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v46, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v104, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v105, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v107, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r8v139, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r4v112, resolved type: int} */
    /* JADX WARNING: Code restructure failed: missing block: B:156:0x03c3, code lost:
        if (r5.indexOfKey((long) (-r3.id)) >= 0) goto L_0x03c5;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:316:0x0650, code lost:
        if (r0.dialogsWithMentions.indexOfKey((long) (-r1.id)) < 0) goto L_0x0662;
     */
    /* JADX WARNING: Multi-variable type inference failed */
    /* JADX WARNING: Removed duplicated region for block: B:118:0x0308  */
    /* JADX WARNING: Removed duplicated region for block: B:170:0x041e  */
    /* JADX WARNING: Removed duplicated region for block: B:195:0x0481  */
    /* JADX WARNING: Removed duplicated region for block: B:209:0x04b7  */
    /* JADX WARNING: Removed duplicated region for block: B:257:0x056d  */
    /* JADX WARNING: Removed duplicated region for block: B:406:0x079a  */
    /* JADX WARNING: Removed duplicated region for block: B:420:0x07d0  */
    /* JADX WARNING: Removed duplicated region for block: B:468:0x0886  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void updateFiltersReadCounter(android.util.LongSparseArray<java.lang.Integer> r27, android.util.LongSparseArray<java.lang.Integer> r28, boolean r29) throws java.lang.Exception {
        /*
            r26 = this;
            r0 = r26
            r1 = r28
            if (r27 == 0) goto L_0x000c
            int r2 = r27.size()
            if (r2 != 0) goto L_0x0016
        L_0x000c:
            if (r1 == 0) goto L_0x0a55
            int r2 = r28.size()
            if (r2 != 0) goto L_0x0016
            goto L_0x0a55
        L_0x0016:
            r2 = 0
            r3 = 0
        L_0x0018:
            r4 = 2
            if (r3 >= r4) goto L_0x004a
            r5 = 0
        L_0x001c:
            if (r5 >= r4) goto L_0x003f
            int[][] r6 = r0.contacts
            r6 = r6[r3]
            int[][] r7 = r0.nonContacts
            r7 = r7[r3]
            int[][] r8 = r0.bots
            r8 = r8[r3]
            int[][] r9 = r0.channels
            r9 = r9[r3]
            int[][] r10 = r0.groups
            r10 = r10[r3]
            r10[r5] = r2
            r9[r5] = r2
            r8[r5] = r2
            r7[r5] = r2
            r6[r5] = r2
            int r5 = r5 + 1
            goto L_0x001c
        L_0x003f:
            int[] r4 = r0.mentionChannels
            int[] r5 = r0.mentionGroups
            r5[r3] = r2
            r4[r3] = r2
            int r3 = r3 + 1
            goto L_0x0018
        L_0x004a:
            java.util.ArrayList r3 = new java.util.ArrayList
            r3.<init>()
            java.util.ArrayList r5 = new java.util.ArrayList
            r5.<init>()
            java.util.ArrayList r6 = new java.util.ArrayList
            r6.<init>()
            java.util.ArrayList r7 = new java.util.ArrayList
            r7.<init>()
            java.util.ArrayList r8 = new java.util.ArrayList
            r8.<init>()
            java.util.ArrayList r9 = new java.util.ArrayList
            r9.<init>()
            android.util.LongSparseArray r10 = new android.util.LongSparseArray
            r10.<init>()
            android.util.LongSparseArray r11 = new android.util.LongSparseArray
            r11.<init>()
            r12 = 0
        L_0x0073:
            if (r12 >= r4) goto L_0x0173
            if (r12 != 0) goto L_0x007a
            r14 = r27
            goto L_0x007b
        L_0x007a:
            r14 = r1
        L_0x007b:
            if (r14 != 0) goto L_0x0083
        L_0x007d:
            r18 = r3
            r21 = r11
            goto L_0x0169
        L_0x0083:
            r15 = 0
        L_0x0084:
            int r4 = r14.size()
            if (r15 >= r4) goto L_0x007d
            java.lang.Object r4 = r14.valueAt(r15)
            java.lang.Integer r4 = (java.lang.Integer) r4
            if (r29 == 0) goto L_0x00a1
            int r17 = r4.intValue()
            if (r17 != 0) goto L_0x0099
            goto L_0x00a1
        L_0x0099:
            r18 = r3
            r21 = r11
            r20 = r14
            goto L_0x015e
        L_0x00a1:
            if (r29 != 0) goto L_0x00aa
            int r17 = r4.intValue()
            if (r17 != 0) goto L_0x00aa
            goto L_0x0099
        L_0x00aa:
            r18 = r3
            long r2 = r14.keyAt(r15)
            if (r29 == 0) goto L_0x00c0
            if (r12 != 0) goto L_0x00ba
            android.util.LongSparseArray<java.lang.Integer> r4 = r0.dialogsWithUnread
            r4.remove(r2)
            goto L_0x00e0
        L_0x00ba:
            android.util.LongSparseArray<java.lang.Integer> r4 = r0.dialogsWithMentions
            r4.remove(r2)
            goto L_0x00e0
        L_0x00c0:
            android.util.LongSparseArray<java.lang.Integer> r13 = r0.dialogsWithMentions
            int r13 = r13.indexOfKey(r2)
            if (r13 >= 0) goto L_0x00d3
            android.util.LongSparseArray<java.lang.Integer> r13 = r0.dialogsWithUnread
            int r13 = r13.indexOfKey(r2)
            if (r13 >= 0) goto L_0x00d3
            r11.put(r2, r4)
        L_0x00d3:
            if (r12 != 0) goto L_0x00db
            android.util.LongSparseArray<java.lang.Integer> r13 = r0.dialogsWithUnread
            r13.put(r2, r4)
            goto L_0x00e0
        L_0x00db:
            android.util.LongSparseArray<java.lang.Integer> r13 = r0.dialogsWithMentions
            r13.put(r2, r4)
        L_0x00e0:
            int r4 = r10.indexOfKey(r2)
            if (r4 >= 0) goto L_0x011b
            org.telegram.SQLite.SQLiteDatabase r4 = r0.database
            java.lang.StringBuilder r13 = new java.lang.StringBuilder
            r13.<init>()
            r20 = r14
            java.lang.String r14 = "SELECT folder_id FROM dialogs WHERE did = "
            r13.append(r14)
            r13.append(r2)
            java.lang.String r13 = r13.toString()
            r21 = r11
            r14 = 0
            java.lang.Object[] r11 = new java.lang.Object[r14]
            org.telegram.SQLite.SQLiteCursor r4 = r4.queryFinalized(r13, r11)
            boolean r11 = r4.next()
            if (r11 == 0) goto L_0x010f
            int r11 = r4.intValue(r14)
            goto L_0x0110
        L_0x010f:
            r11 = 0
        L_0x0110:
            r4.dispose()
            java.lang.Integer r4 = java.lang.Integer.valueOf(r11)
            r10.put(r2, r4)
            goto L_0x011f
        L_0x011b:
            r21 = r11
            r20 = r14
        L_0x011f:
            int r4 = (int) r2
            r11 = 32
            long r2 = r2 >> r11
            int r3 = (int) r2
            if (r4 == 0) goto L_0x014d
            if (r4 >= 0) goto L_0x013b
            int r2 = -r4
            java.lang.Integer r3 = java.lang.Integer.valueOf(r2)
            boolean r3 = r8.contains(r3)
            if (r3 != 0) goto L_0x015e
            java.lang.Integer r2 = java.lang.Integer.valueOf(r2)
            r8.add(r2)
            goto L_0x015e
        L_0x013b:
            java.lang.Integer r2 = java.lang.Integer.valueOf(r4)
            boolean r2 = r7.contains(r2)
            if (r2 != 0) goto L_0x015e
            java.lang.Integer r2 = java.lang.Integer.valueOf(r4)
            r7.add(r2)
            goto L_0x015e
        L_0x014d:
            java.lang.Integer r2 = java.lang.Integer.valueOf(r3)
            boolean r2 = r9.contains(r2)
            if (r2 != 0) goto L_0x015e
            java.lang.Integer r2 = java.lang.Integer.valueOf(r3)
            r9.add(r2)
        L_0x015e:
            int r15 = r15 + 1
            r3 = r18
            r14 = r20
            r11 = r21
            r2 = 0
            goto L_0x0084
        L_0x0169:
            int r12 = r12 + 1
            r3 = r18
            r11 = r21
            r2 = 0
            r4 = 2
            goto L_0x0073
        L_0x0173:
            r18 = r3
            r21 = r11
            android.util.SparseArray r2 = new android.util.SparseArray
            r2.<init>()
            android.util.SparseArray r3 = new android.util.SparseArray
            r3.<init>()
            android.util.SparseArray r4 = new android.util.SparseArray
            r4.<init>()
            android.util.SparseArray r11 = new android.util.SparseArray
            r11.<init>()
            android.util.SparseArray r12 = new android.util.SparseArray
            r12.<init>()
            android.util.SparseArray r13 = new android.util.SparseArray
            r13.<init>()
            boolean r14 = r7.isEmpty()
            java.lang.String r15 = ","
            r27 = r3
            if (r14 != 0) goto L_0x0228
            java.lang.String r7 = android.text.TextUtils.join(r15, r7)
            r14 = r18
            r0.getUsersInternal(r7, r14)
            int r7 = r14.size()
            r3 = 0
        L_0x01ad:
            if (r3 >= r7) goto L_0x0228
            java.lang.Object r20 = r14.get(r3)
            r22 = r7
            r7 = r20
            org.telegram.tgnet.TLRPC$User r7 = (org.telegram.tgnet.TLRPC$User) r7
            r20 = r14
            org.telegram.messenger.MessagesController r14 = r26.getMessagesController()
            int r1 = r7.id
            r24 = r4
            r23 = r5
            long r4 = (long) r1
            boolean r1 = r14.isDialogMuted(r4)
            int r4 = r7.id
            long r4 = (long) r4
            java.lang.Object r4 = r10.get(r4)
            java.lang.Integer r4 = (java.lang.Integer) r4
            int r4 = r4.intValue()
            if (r1 == 0) goto L_0x01e0
            int r5 = r7.id
            java.lang.Boolean r14 = java.lang.Boolean.TRUE
            r12.put(r5, r14)
        L_0x01e0:
            r5 = 1
            if (r4 != r5) goto L_0x01ea
            int r14 = r7.id
            java.lang.Boolean r5 = java.lang.Boolean.TRUE
            r13.put(r14, r5)
        L_0x01ea:
            boolean r5 = r7.bot
            if (r5 == 0) goto L_0x01f9
            int[][] r5 = r0.bots
            r4 = r5[r4]
            r5 = r4[r1]
            r14 = 1
            int r5 = r5 + r14
            r4[r1] = r5
            goto L_0x0216
        L_0x01f9:
            r14 = 1
            boolean r5 = r7.self
            if (r5 != 0) goto L_0x020d
            boolean r5 = r7.contact
            if (r5 == 0) goto L_0x0203
            goto L_0x020d
        L_0x0203:
            int[][] r5 = r0.nonContacts
            r4 = r5[r4]
            r5 = r4[r1]
            int r5 = r5 + r14
            r4[r1] = r5
            goto L_0x0216
        L_0x020d:
            int[][] r5 = r0.contacts
            r4 = r5[r4]
            r5 = r4[r1]
            int r5 = r5 + r14
            r4[r1] = r5
        L_0x0216:
            int r1 = r7.id
            r2.put(r1, r7)
            int r3 = r3 + 1
            r1 = r28
            r14 = r20
            r7 = r22
            r5 = r23
            r4 = r24
            goto L_0x01ad
        L_0x0228:
            r24 = r4
            r23 = r5
            boolean r1 = r9.isEmpty()
            if (r1 != 0) goto L_0x02ff
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            java.util.ArrayList r3 = new java.util.ArrayList
            r3.<init>()
            java.lang.String r4 = android.text.TextUtils.join(r15, r9)
            r0.getEncryptedChatsInternal(r4, r3, r1)
            boolean r4 = r1.isEmpty()
            if (r4 != 0) goto L_0x02ff
            java.lang.String r1 = android.text.TextUtils.join(r15, r1)
            r4 = r23
            r0.getUsersInternal(r1, r4)
            int r1 = r4.size()
            r5 = 0
        L_0x0257:
            if (r5 >= r1) goto L_0x0269
            java.lang.Object r7 = r4.get(r5)
            org.telegram.tgnet.TLRPC$User r7 = (org.telegram.tgnet.TLRPC$User) r7
            int r9 = r7.id
            r14 = r24
            r14.put(r9, r7)
            int r5 = r5 + 1
            goto L_0x0257
        L_0x0269:
            r14 = r24
            int r1 = r3.size()
            r4 = 0
        L_0x0270:
            if (r4 >= r1) goto L_0x02fd
            java.lang.Object r5 = r3.get(r4)
            org.telegram.tgnet.TLRPC$EncryptedChat r5 = (org.telegram.tgnet.TLRPC$EncryptedChat) r5
            int r7 = r5.user_id
            java.lang.Object r7 = r14.get(r7)
            org.telegram.tgnet.TLRPC$User r7 = (org.telegram.tgnet.TLRPC$User) r7
            if (r7 != 0) goto L_0x0288
            r20 = r1
            r9 = r2
            r22 = r3
            goto L_0x02f4
        L_0x0288:
            int r5 = r5.id
            r20 = r1
            r9 = r2
            long r1 = (long) r5
            r5 = 32
            long r1 = r1 << r5
            org.telegram.messenger.MessagesController r5 = r26.getMessagesController()
            boolean r5 = r5.isDialogMuted(r1)
            java.lang.Object r1 = r10.get(r1)
            java.lang.Integer r1 = (java.lang.Integer) r1
            int r1 = r1.intValue()
            if (r5 == 0) goto L_0x02af
            int r2 = r7.id
            r22 = r3
            java.lang.Boolean r3 = java.lang.Boolean.TRUE
            r12.put(r2, r3)
            goto L_0x02b1
        L_0x02af:
            r22 = r3
        L_0x02b1:
            r2 = 1
            if (r1 != r2) goto L_0x02bb
            int r2 = r7.id
            java.lang.Boolean r3 = java.lang.Boolean.TRUE
            r13.put(r2, r3)
        L_0x02bb:
            boolean r2 = r7.self
            if (r2 != 0) goto L_0x02cf
            boolean r2 = r7.contact
            if (r2 == 0) goto L_0x02c4
            goto L_0x02cf
        L_0x02c4:
            int[][] r2 = r0.nonContacts
            r1 = r2[r1]
            r2 = r1[r5]
            r3 = 1
            int r2 = r2 + r3
            r1[r5] = r2
            goto L_0x02d9
        L_0x02cf:
            r3 = 1
            int[][] r2 = r0.contacts
            r1 = r2[r1]
            r2 = r1[r5]
            int r2 = r2 + r3
            r1[r5] = r2
        L_0x02d9:
            int r1 = r7.id
            r2 = 0
            java.lang.Integer r5 = java.lang.Integer.valueOf(r2)
            java.lang.Object r1 = r11.get(r1, r5)
            java.lang.Integer r1 = (java.lang.Integer) r1
            int r1 = r1.intValue()
            int r2 = r7.id
            int r1 = r1 + r3
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)
            r11.put(r2, r1)
        L_0x02f4:
            int r4 = r4 + 1
            r2 = r9
            r1 = r20
            r3 = r22
            goto L_0x0270
        L_0x02fd:
            r9 = r2
            goto L_0x0302
        L_0x02ff:
            r9 = r2
            r14 = r24
        L_0x0302:
            boolean r1 = r8.isEmpty()
            if (r1 != 0) goto L_0x0409
            java.lang.String r1 = android.text.TextUtils.join(r15, r8)
            r0.getChatsInternal(r1, r6)
            int r1 = r6.size()
            r2 = 0
        L_0x0314:
            if (r2 >= r1) goto L_0x0409
            java.lang.Object r3 = r6.get(r2)
            org.telegram.tgnet.TLRPC$Chat r3 = (org.telegram.tgnet.TLRPC$Chat) r3
            org.telegram.tgnet.TLRPC$InputChannel r4 = r3.migrated_to
            boolean r4 = r4 instanceof org.telegram.tgnet.TLRPC$TL_inputChannel
            if (r4 != 0) goto L_0x03ef
            boolean r4 = org.telegram.messenger.ChatObject.isNotInChat(r3)
            if (r4 == 0) goto L_0x032a
            goto L_0x03ef
        L_0x032a:
            org.telegram.messenger.MessagesController r4 = r26.getMessagesController()
            int r5 = r3.id
            int r5 = -r5
            long r7 = (long) r5
            boolean r4 = r4.isDialogMuted(r7, r3)
            android.util.LongSparseArray<java.lang.Integer> r5 = r0.dialogsWithUnread
            int r7 = r3.id
            int r7 = -r7
            long r7 = (long) r7
            int r5 = r5.indexOfKey(r7)
            if (r5 < 0) goto L_0x0344
            r5 = 1
            goto L_0x0345
        L_0x0344:
            r5 = 0
        L_0x0345:
            android.util.LongSparseArray<java.lang.Integer> r7 = r0.dialogsWithMentions
            int r8 = r3.id
            int r8 = -r8
            r24 = r14
            long r14 = (long) r8
            int r7 = r7.indexOfKey(r14)
            if (r7 < 0) goto L_0x0355
            r7 = 1
            goto L_0x0356
        L_0x0355:
            r7 = 0
        L_0x0356:
            int r8 = r3.id
            int r8 = -r8
            long r14 = (long) r8
            java.lang.Object r8 = r10.get(r14)
            java.lang.Integer r8 = (java.lang.Integer) r8
            int r8 = r8.intValue()
            if (r4 == 0) goto L_0x036e
            int r14 = r3.id
            int r14 = -r14
            java.lang.Boolean r15 = java.lang.Boolean.TRUE
            r12.put(r14, r15)
        L_0x036e:
            r14 = 1
            if (r8 != r14) goto L_0x0379
            int r14 = r3.id
            int r14 = -r14
            java.lang.Boolean r15 = java.lang.Boolean.TRUE
            r13.put(r14, r15)
        L_0x0379:
            r14 = r28
            if (r4 == 0) goto L_0x03a9
            if (r14 == 0) goto L_0x03a9
            int r15 = r3.id
            int r15 = -r15
            r20 = r9
            r19 = r10
            long r9 = (long) r15
            int r9 = r14.indexOfKey(r9)
            if (r9 < 0) goto L_0x03ad
            boolean r9 = org.telegram.messenger.ChatObject.isChannel(r3)
            if (r9 == 0) goto L_0x03a0
            boolean r9 = r3.megagroup
            if (r9 != 0) goto L_0x03a0
            int[] r9 = r0.mentionChannels
            r10 = r9[r8]
            r15 = 1
            int r10 = r10 + r15
            r9[r8] = r10
            goto L_0x03ad
        L_0x03a0:
            r15 = 1
            int[] r9 = r0.mentionGroups
            r10 = r9[r8]
            int r10 = r10 + r15
            r9[r8] = r10
            goto L_0x03ad
        L_0x03a9:
            r20 = r9
            r19 = r10
        L_0x03ad:
            if (r29 == 0) goto L_0x03b7
            if (r5 != 0) goto L_0x03b7
            if (r7 == 0) goto L_0x03b4
            goto L_0x03b7
        L_0x03b4:
            r5 = r21
            goto L_0x03c5
        L_0x03b7:
            if (r29 != 0) goto L_0x03e5
            int r5 = r3.id
            int r5 = -r5
            long r9 = (long) r5
            r5 = r21
            int r7 = r5.indexOfKey(r9)
            if (r7 < 0) goto L_0x03e7
        L_0x03c5:
            boolean r7 = org.telegram.messenger.ChatObject.isChannel(r3)
            if (r7 == 0) goto L_0x03da
            boolean r7 = r3.megagroup
            if (r7 != 0) goto L_0x03da
            int[][] r7 = r0.channels
            r7 = r7[r8]
            r8 = r7[r4]
            r9 = 1
            int r8 = r8 + r9
            r7[r4] = r8
            goto L_0x03e7
        L_0x03da:
            r9 = 1
            int[][] r7 = r0.groups
            r7 = r7[r8]
            r8 = r7[r4]
            int r8 = r8 + r9
            r7[r4] = r8
            goto L_0x03e7
        L_0x03e5:
            r5 = r21
        L_0x03e7:
            int r4 = r3.id
            r7 = r27
            r7.put(r4, r3)
            goto L_0x03fb
        L_0x03ef:
            r7 = r27
            r20 = r9
            r19 = r10
            r24 = r14
            r5 = r21
            r14 = r28
        L_0x03fb:
            int r2 = r2 + 1
            r21 = r5
            r27 = r7
            r10 = r19
            r9 = r20
            r14 = r24
            goto L_0x0314
        L_0x0409:
            r7 = r27
            r20 = r9
            r24 = r14
            r5 = r21
            r14 = r28
            java.util.ArrayList<org.telegram.messenger.MessagesController$DialogFilter> r1 = r0.dialogFilters
            int r1 = r1.size()
            r2 = 0
        L_0x041a:
            int r3 = r1 + 2
            if (r2 >= r3) goto L_0x0a4d
            if (r2 >= r1) goto L_0x043b
            java.util.ArrayList<org.telegram.messenger.MessagesController$DialogFilter> r3 = r0.dialogFilters
            java.lang.Object r3 = r3.get(r2)
            org.telegram.messenger.MessagesController$DialogFilter r3 = (org.telegram.messenger.MessagesController.DialogFilter) r3
            int r4 = r3.pendingUnreadCount
            if (r4 >= 0) goto L_0x0436
            r10 = r7
            r27 = r13
            r9 = r20
            r13 = r24
            r6 = 0
            goto L_0x0a40
        L_0x0436:
            int r4 = r3.pendingUnreadCount
            int r6 = r3.flags
            goto L_0x045a
        L_0x043b:
            r3 = 0
            int r4 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ALL_CHATS
            if (r2 != r1) goto L_0x0450
            int r6 = r0.pendingMainUnreadCount
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED
            r4 = r4 | r8
            org.telegram.messenger.NotificationsController r8 = r26.getNotificationsController()
            boolean r8 = r8.showBadgeMuted
            if (r8 != 0) goto L_0x0455
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            goto L_0x0454
        L_0x0450:
            int r6 = r0.pendingArchiveUnreadCount
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED
        L_0x0454:
            r4 = r4 | r8
        L_0x0455:
            r25 = r6
            r6 = r4
            r4 = r25
        L_0x045a:
            if (r29 == 0) goto L_0x0770
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CONTACTS
            r8 = r8 & r6
            if (r8 == 0) goto L_0x0492
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED
            r8 = r8 & r6
            if (r8 != 0) goto L_0x047a
            int[][] r8 = r0.contacts
            r9 = 0
            r10 = r8[r9]
            r10 = r10[r9]
            int r4 = r4 - r10
            int r10 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r10 = r10 & r6
            if (r10 != 0) goto L_0x047b
            r8 = r8[r9]
            r10 = 1
            r8 = r8[r10]
            int r4 = r4 - r8
            goto L_0x047c
        L_0x047a:
            r9 = 0
        L_0x047b:
            r10 = 1
        L_0x047c:
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED
            r8 = r8 & r6
            if (r8 != 0) goto L_0x0492
            int[][] r8 = r0.contacts
            r15 = r8[r10]
            r15 = r15[r9]
            int r4 = r4 - r15
            int r9 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r9 = r9 & r6
            if (r9 != 0) goto L_0x0492
            r8 = r8[r10]
            r8 = r8[r10]
            int r4 = r4 - r8
        L_0x0492:
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS
            r8 = r8 & r6
            if (r8 == 0) goto L_0x04c8
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED
            r8 = r8 & r6
            if (r8 != 0) goto L_0x04b0
            int[][] r8 = r0.nonContacts
            r9 = 0
            r10 = r8[r9]
            r10 = r10[r9]
            int r4 = r4 - r10
            int r10 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r10 = r10 & r6
            if (r10 != 0) goto L_0x04b1
            r8 = r8[r9]
            r10 = 1
            r8 = r8[r10]
            int r4 = r4 - r8
            goto L_0x04b2
        L_0x04b0:
            r9 = 0
        L_0x04b1:
            r10 = 1
        L_0x04b2:
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED
            r8 = r8 & r6
            if (r8 != 0) goto L_0x04c8
            int[][] r8 = r0.nonContacts
            r15 = r8[r10]
            r15 = r15[r9]
            int r4 = r4 - r15
            int r9 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r9 = r9 & r6
            if (r9 != 0) goto L_0x04c8
            r8 = r8[r10]
            r8 = r8[r10]
            int r4 = r4 - r8
        L_0x04c8:
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_GROUPS
            r8 = r8 & r6
            if (r8 == 0) goto L_0x0508
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED
            r8 = r8 & r6
            if (r8 != 0) goto L_0x04eb
            int[][] r8 = r0.groups
            r9 = 0
            r10 = r8[r9]
            r10 = r10[r9]
            int r4 = r4 - r10
            int r10 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r10 = r10 & r6
            if (r10 != 0) goto L_0x04e5
            r8 = r8[r9]
            r10 = 1
            r8 = r8[r10]
            goto L_0x04e9
        L_0x04e5:
            int[] r8 = r0.mentionGroups
            r8 = r8[r9]
        L_0x04e9:
            int r4 = r4 - r8
            goto L_0x04ec
        L_0x04eb:
            r9 = 0
        L_0x04ec:
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED
            r8 = r8 & r6
            if (r8 != 0) goto L_0x0508
            int[][] r8 = r0.groups
            r10 = 1
            r15 = r8[r10]
            r15 = r15[r9]
            int r4 = r4 - r15
            int r9 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r9 = r9 & r6
            if (r9 != 0) goto L_0x0503
            r8 = r8[r10]
            r8 = r8[r10]
            goto L_0x0507
        L_0x0503:
            int[] r8 = r0.mentionGroups
            r8 = r8[r10]
        L_0x0507:
            int r4 = r4 - r8
        L_0x0508:
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CHANNELS
            r8 = r8 & r6
            if (r8 == 0) goto L_0x0548
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED
            r8 = r8 & r6
            if (r8 != 0) goto L_0x052b
            int[][] r8 = r0.channels
            r9 = 0
            r10 = r8[r9]
            r10 = r10[r9]
            int r4 = r4 - r10
            int r10 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r10 = r10 & r6
            if (r10 != 0) goto L_0x0525
            r8 = r8[r9]
            r10 = 1
            r8 = r8[r10]
            goto L_0x0529
        L_0x0525:
            int[] r8 = r0.mentionChannels
            r8 = r8[r9]
        L_0x0529:
            int r4 = r4 - r8
            goto L_0x052c
        L_0x052b:
            r9 = 0
        L_0x052c:
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED
            r8 = r8 & r6
            if (r8 != 0) goto L_0x0548
            int[][] r8 = r0.channels
            r10 = 1
            r15 = r8[r10]
            r15 = r15[r9]
            int r4 = r4 - r15
            int r9 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r9 = r9 & r6
            if (r9 != 0) goto L_0x0543
            r8 = r8[r10]
            r8 = r8[r10]
            goto L_0x0547
        L_0x0543:
            int[] r8 = r0.mentionChannels
            r8 = r8[r10]
        L_0x0547:
            int r4 = r4 - r8
        L_0x0548:
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_BOTS
            r8 = r8 & r6
            if (r8 == 0) goto L_0x057e
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED
            r8 = r8 & r6
            if (r8 != 0) goto L_0x0566
            int[][] r8 = r0.bots
            r9 = 0
            r10 = r8[r9]
            r10 = r10[r9]
            int r4 = r4 - r10
            int r10 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r10 = r10 & r6
            if (r10 != 0) goto L_0x0567
            r8 = r8[r9]
            r10 = 1
            r8 = r8[r10]
            int r4 = r4 - r8
            goto L_0x0568
        L_0x0566:
            r9 = 0
        L_0x0567:
            r10 = 1
        L_0x0568:
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED
            r8 = r8 & r6
            if (r8 != 0) goto L_0x057e
            int[][] r8 = r0.bots
            r15 = r8[r10]
            r15 = r15[r9]
            int r4 = r4 - r15
            int r9 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r9 = r9 & r6
            if (r9 != 0) goto L_0x057e
            r8 = r8[r10]
            r8 = r8[r10]
            int r4 = r4 - r8
        L_0x057e:
            if (r3 == 0) goto L_0x0755
            java.util.ArrayList<java.lang.Integer> r8 = r3.alwaysShow
            int r8 = r8.size()
            r9 = 0
        L_0x0587:
            if (r9 >= r8) goto L_0x066f
            java.util.ArrayList<java.lang.Integer> r10 = r3.alwaysShow
            java.lang.Object r10 = r10.get(r9)
            java.lang.Integer r10 = (java.lang.Integer) r10
            int r10 = r10.intValue()
            if (r10 <= 0) goto L_0x0613
            r27 = r8
            r8 = 2
            r15 = 0
        L_0x059b:
            if (r15 >= r8) goto L_0x060d
            if (r15 != 0) goto L_0x05a2
            r8 = r20
            goto L_0x05a4
        L_0x05a2:
            r8 = r24
        L_0x05a4:
            java.lang.Object r8 = r8.get(r10)
            org.telegram.tgnet.TLRPC$User r8 = (org.telegram.tgnet.TLRPC$User) r8
            if (r8 == 0) goto L_0x0601
            if (r15 != 0) goto L_0x05b4
            r19 = r1
            r21 = r2
            r1 = 1
            goto L_0x05cb
        L_0x05b4:
            r19 = r1
            r17 = 0
            java.lang.Integer r1 = java.lang.Integer.valueOf(r17)
            java.lang.Object r1 = r11.get(r10, r1)
            java.lang.Integer r1 = (java.lang.Integer) r1
            int r1 = r1.intValue()
            r21 = r2
            if (r1 != 0) goto L_0x05cb
            goto L_0x0605
        L_0x05cb:
            boolean r2 = r8.bot
            if (r2 == 0) goto L_0x05d2
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_BOTS
            goto L_0x05e0
        L_0x05d2:
            boolean r2 = r8.self
            if (r2 != 0) goto L_0x05de
            boolean r2 = r8.contact
            if (r2 == 0) goto L_0x05db
            goto L_0x05de
        L_0x05db:
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS
            goto L_0x05e0
        L_0x05de:
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CONTACTS
        L_0x05e0:
            r2 = r2 & r6
            if (r2 != 0) goto L_0x05e5
        L_0x05e3:
            int r4 = r4 - r1
            goto L_0x0605
        L_0x05e5:
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r2 = r2 & r6
            if (r2 == 0) goto L_0x05f3
            int r2 = r8.id
            int r2 = r12.indexOfKey(r2)
            if (r2 < 0) goto L_0x05f3
            goto L_0x05e3
        L_0x05f3:
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED
            r2 = r2 & r6
            if (r2 == 0) goto L_0x0605
            int r2 = r8.id
            int r2 = r13.indexOfKey(r2)
            if (r2 < 0) goto L_0x0605
            goto L_0x05e3
        L_0x0601:
            r19 = r1
            r21 = r2
        L_0x0605:
            int r15 = r15 + 1
            r1 = r19
            r2 = r21
            r8 = 2
            goto L_0x059b
        L_0x060d:
            r19 = r1
            r21 = r2
        L_0x0611:
            r10 = r7
            goto L_0x0664
        L_0x0613:
            r19 = r1
            r21 = r2
            r27 = r8
            int r1 = -r10
            java.lang.Object r1 = r7.get(r1)
            org.telegram.tgnet.TLRPC$Chat r1 = (org.telegram.tgnet.TLRPC$Chat) r1
            if (r1 == 0) goto L_0x0611
            boolean r2 = org.telegram.messenger.ChatObject.isChannel(r1)
            if (r2 == 0) goto L_0x062f
            boolean r2 = r1.megagroup
            if (r2 != 0) goto L_0x062f
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CHANNELS
            goto L_0x0631
        L_0x062f:
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_GROUPS
        L_0x0631:
            r2 = r2 & r6
            if (r2 != 0) goto L_0x0637
            int r4 = r4 + -1
            goto L_0x0611
        L_0x0637:
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r2 = r2 & r6
            if (r2 == 0) goto L_0x0653
            int r2 = r1.id
            int r2 = -r2
            int r2 = r12.indexOfKey(r2)
            if (r2 < 0) goto L_0x0653
            android.util.LongSparseArray<java.lang.Integer> r2 = r0.dialogsWithMentions
            int r8 = r1.id
            int r8 = -r8
            r10 = r7
            long r7 = (long) r8
            int r2 = r2.indexOfKey(r7)
            if (r2 >= 0) goto L_0x0654
            goto L_0x0662
        L_0x0653:
            r10 = r7
        L_0x0654:
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED
            r2 = r2 & r6
            if (r2 == 0) goto L_0x0664
            int r1 = r1.id
            int r1 = -r1
            int r1 = r13.indexOfKey(r1)
            if (r1 < 0) goto L_0x0664
        L_0x0662:
            int r4 = r4 + -1
        L_0x0664:
            int r9 = r9 + 1
            r8 = r27
            r7 = r10
            r1 = r19
            r2 = r21
            goto L_0x0587
        L_0x066f:
            r19 = r1
            r21 = r2
            r10 = r7
            java.util.ArrayList<java.lang.Integer> r1 = r3.neverShow
            int r1 = r1.size()
            r2 = 0
        L_0x067b:
            if (r2 >= r1) goto L_0x075a
            java.util.ArrayList<java.lang.Integer> r7 = r3.neverShow
            java.lang.Object r7 = r7.get(r2)
            java.lang.Integer r7 = (java.lang.Integer) r7
            int r7 = r7.intValue()
            if (r14 == 0) goto L_0x069a
            long r8 = (long) r7
            int r8 = r14.indexOfKey(r8)
            if (r8 < 0) goto L_0x069a
            int r8 = r12.indexOfKey(r7)
            if (r8 >= 0) goto L_0x069a
            goto L_0x0705
        L_0x069a:
            if (r7 <= 0) goto L_0x0708
            r8 = 0
        L_0x069d:
            r9 = 2
            if (r8 >= r9) goto L_0x0705
            if (r8 != 0) goto L_0x06a5
            r15 = r20
            goto L_0x06a7
        L_0x06a5:
            r15 = r24
        L_0x06a7:
            java.lang.Object r15 = r15.get(r7)
            org.telegram.tgnet.TLRPC$User r15 = (org.telegram.tgnet.TLRPC$User) r15
            if (r15 == 0) goto L_0x06fe
            if (r8 != 0) goto L_0x06b5
            r27 = r1
            r9 = 1
            goto L_0x06ca
        L_0x06b5:
            r16 = 0
            java.lang.Integer r9 = java.lang.Integer.valueOf(r16)
            java.lang.Object r9 = r11.get(r7, r9)
            java.lang.Integer r9 = (java.lang.Integer) r9
            int r9 = r9.intValue()
            if (r9 != 0) goto L_0x06c8
            goto L_0x06fe
        L_0x06c8:
            r27 = r1
        L_0x06ca:
            boolean r1 = r15.bot
            if (r1 == 0) goto L_0x06d1
            int r1 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_BOTS
            goto L_0x06df
        L_0x06d1:
            boolean r1 = r15.self
            if (r1 != 0) goto L_0x06dd
            boolean r1 = r15.contact
            if (r1 == 0) goto L_0x06da
            goto L_0x06dd
        L_0x06da:
            int r1 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS
            goto L_0x06df
        L_0x06dd:
            int r1 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CONTACTS
        L_0x06df:
            r1 = r1 & r6
            if (r1 == 0) goto L_0x0700
            int r1 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED
            r1 = r1 & r6
            if (r1 == 0) goto L_0x06ef
            int r1 = r15.id
            int r1 = r13.indexOfKey(r1)
            if (r1 >= 0) goto L_0x0700
        L_0x06ef:
            int r1 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r1 = r1 & r6
            if (r1 == 0) goto L_0x06fc
            int r1 = r15.id
            int r1 = r12.indexOfKey(r1)
            if (r1 >= 0) goto L_0x0700
        L_0x06fc:
            int r4 = r4 + r9
            goto L_0x0700
        L_0x06fe:
            r27 = r1
        L_0x0700:
            int r8 = r8 + 1
            r1 = r27
            goto L_0x069d
        L_0x0705:
            r27 = r1
            goto L_0x074f
        L_0x0708:
            r27 = r1
            int r1 = -r7
            java.lang.Object r1 = r10.get(r1)
            org.telegram.tgnet.TLRPC$Chat r1 = (org.telegram.tgnet.TLRPC$Chat) r1
            if (r1 == 0) goto L_0x074f
            boolean r7 = org.telegram.messenger.ChatObject.isChannel(r1)
            if (r7 == 0) goto L_0x0720
            boolean r7 = r1.megagroup
            if (r7 != 0) goto L_0x0720
            int r7 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CHANNELS
            goto L_0x0722
        L_0x0720:
            int r7 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_GROUPS
        L_0x0722:
            r7 = r7 & r6
            if (r7 == 0) goto L_0x074f
            int r7 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED
            r7 = r7 & r6
            if (r7 == 0) goto L_0x0733
            int r7 = r1.id
            int r7 = -r7
            int r7 = r13.indexOfKey(r7)
            if (r7 >= 0) goto L_0x074f
        L_0x0733:
            int r7 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r7 = r7 & r6
            if (r7 == 0) goto L_0x074d
            int r7 = r1.id
            int r7 = -r7
            int r7 = r12.indexOfKey(r7)
            if (r7 < 0) goto L_0x074d
            android.util.LongSparseArray<java.lang.Integer> r7 = r0.dialogsWithMentions
            int r1 = r1.id
            int r1 = -r1
            long r8 = (long) r1
            int r1 = r7.indexOfKey(r8)
            if (r1 < 0) goto L_0x074f
        L_0x074d:
            int r4 = r4 + 1
        L_0x074f:
            int r2 = r2 + 1
            r1 = r27
            goto L_0x067b
        L_0x0755:
            r19 = r1
            r21 = r2
            r10 = r7
        L_0x075a:
            if (r4 >= 0) goto L_0x0766
            r27 = r13
            r9 = r20
            r13 = r24
            r6 = 0
            r14 = 0
            goto L_0x0a28
        L_0x0766:
            r14 = r4
            r27 = r13
            r9 = r20
            r13 = r24
            r6 = 0
            goto L_0x0a28
        L_0x0770:
            r19 = r1
            r21 = r2
            r10 = r7
            int r1 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CONTACTS
            r1 = r1 & r6
            if (r1 == 0) goto L_0x07ab
            int r1 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED
            r1 = r1 & r6
            if (r1 != 0) goto L_0x0793
            int[][] r1 = r0.contacts
            r2 = 0
            r7 = r1[r2]
            r7 = r7[r2]
            int r4 = r4 + r7
            int r7 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r7 = r7 & r6
            if (r7 != 0) goto L_0x0794
            r1 = r1[r2]
            r7 = 1
            r1 = r1[r7]
            int r4 = r4 + r1
            goto L_0x0795
        L_0x0793:
            r2 = 0
        L_0x0794:
            r7 = 1
        L_0x0795:
            int r1 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED
            r1 = r1 & r6
            if (r1 != 0) goto L_0x07ab
            int[][] r1 = r0.contacts
            r8 = r1[r7]
            r8 = r8[r2]
            int r4 = r4 + r8
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r2 = r2 & r6
            if (r2 != 0) goto L_0x07ab
            r1 = r1[r7]
            r1 = r1[r7]
            int r4 = r4 + r1
        L_0x07ab:
            int r1 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS
            r1 = r1 & r6
            if (r1 == 0) goto L_0x07e1
            int r1 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED
            r1 = r1 & r6
            if (r1 != 0) goto L_0x07c9
            int[][] r1 = r0.nonContacts
            r2 = 0
            r7 = r1[r2]
            r7 = r7[r2]
            int r4 = r4 + r7
            int r7 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r7 = r7 & r6
            if (r7 != 0) goto L_0x07ca
            r1 = r1[r2]
            r7 = 1
            r1 = r1[r7]
            int r4 = r4 + r1
            goto L_0x07cb
        L_0x07c9:
            r2 = 0
        L_0x07ca:
            r7 = 1
        L_0x07cb:
            int r1 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED
            r1 = r1 & r6
            if (r1 != 0) goto L_0x07e1
            int[][] r1 = r0.nonContacts
            r8 = r1[r7]
            r8 = r8[r2]
            int r4 = r4 + r8
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r2 = r2 & r6
            if (r2 != 0) goto L_0x07e1
            r1 = r1[r7]
            r1 = r1[r7]
            int r4 = r4 + r1
        L_0x07e1:
            int r1 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_GROUPS
            r1 = r1 & r6
            if (r1 == 0) goto L_0x0821
            int r1 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED
            r1 = r1 & r6
            if (r1 != 0) goto L_0x0804
            int[][] r1 = r0.groups
            r2 = 0
            r7 = r1[r2]
            r7 = r7[r2]
            int r4 = r4 + r7
            int r7 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r7 = r7 & r6
            if (r7 != 0) goto L_0x07fe
            r1 = r1[r2]
            r7 = 1
            r1 = r1[r7]
            goto L_0x0802
        L_0x07fe:
            int[] r1 = r0.mentionGroups
            r1 = r1[r2]
        L_0x0802:
            int r4 = r4 + r1
            goto L_0x0805
        L_0x0804:
            r2 = 0
        L_0x0805:
            int r1 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED
            r1 = r1 & r6
            if (r1 != 0) goto L_0x0821
            int[][] r1 = r0.groups
            r7 = 1
            r8 = r1[r7]
            r8 = r8[r2]
            int r4 = r4 + r8
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r2 = r2 & r6
            if (r2 != 0) goto L_0x081c
            r1 = r1[r7]
            r1 = r1[r7]
            goto L_0x0820
        L_0x081c:
            int[] r1 = r0.mentionGroups
            r1 = r1[r7]
        L_0x0820:
            int r4 = r4 + r1
        L_0x0821:
            int r1 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CHANNELS
            r1 = r1 & r6
            if (r1 == 0) goto L_0x0861
            int r1 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED
            r1 = r1 & r6
            if (r1 != 0) goto L_0x0844
            int[][] r1 = r0.channels
            r2 = 0
            r7 = r1[r2]
            r7 = r7[r2]
            int r4 = r4 + r7
            int r7 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r7 = r7 & r6
            if (r7 != 0) goto L_0x083e
            r1 = r1[r2]
            r7 = 1
            r1 = r1[r7]
            goto L_0x0842
        L_0x083e:
            int[] r1 = r0.mentionChannels
            r1 = r1[r2]
        L_0x0842:
            int r4 = r4 + r1
            goto L_0x0845
        L_0x0844:
            r2 = 0
        L_0x0845:
            int r1 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED
            r1 = r1 & r6
            if (r1 != 0) goto L_0x0861
            int[][] r1 = r0.channels
            r7 = 1
            r8 = r1[r7]
            r8 = r8[r2]
            int r4 = r4 + r8
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r2 = r2 & r6
            if (r2 != 0) goto L_0x085c
            r1 = r1[r7]
            r1 = r1[r7]
            goto L_0x0860
        L_0x085c:
            int[] r1 = r0.mentionChannels
            r1 = r1[r7]
        L_0x0860:
            int r4 = r4 + r1
        L_0x0861:
            int r1 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_BOTS
            r1 = r1 & r6
            if (r1 == 0) goto L_0x0898
            int r1 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_ONLY_ARCHIVED
            r1 = r1 & r6
            if (r1 != 0) goto L_0x087f
            int[][] r1 = r0.bots
            r2 = 0
            r7 = r1[r2]
            r7 = r7[r2]
            int r4 = r4 + r7
            int r7 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r7 = r7 & r6
            if (r7 != 0) goto L_0x0880
            r1 = r1[r2]
            r7 = 1
            r1 = r1[r7]
            int r4 = r4 + r1
            goto L_0x0881
        L_0x087f:
            r2 = 0
        L_0x0880:
            r7 = 1
        L_0x0881:
            int r1 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED
            r1 = r1 & r6
            if (r1 != 0) goto L_0x0899
            int[][] r1 = r0.bots
            r8 = r1[r7]
            r8 = r8[r2]
            int r4 = r4 + r8
            int r2 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r2 = r2 & r6
            if (r2 != 0) goto L_0x0899
            r1 = r1[r7]
            r1 = r1[r7]
            int r4 = r4 + r1
            goto L_0x0899
        L_0x0898:
            r7 = 1
        L_0x0899:
            if (r3 == 0) goto L_0x0a20
            java.util.ArrayList<java.lang.Integer> r1 = r3.alwaysShow
            boolean r1 = r1.isEmpty()
            if (r1 != 0) goto L_0x09cf
            int r1 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r1 = r1 & r6
            if (r1 == 0) goto L_0x08e8
            int r1 = r28.size()
            r2 = 0
        L_0x08ad:
            if (r2 >= r1) goto L_0x08e8
            long r8 = r14.keyAt(r2)
            int r9 = (int) r8
            int r8 = -r9
            java.lang.Object r8 = r10.get(r8)
            org.telegram.tgnet.TLRPC$Chat r8 = (org.telegram.tgnet.TLRPC$Chat) r8
            boolean r15 = org.telegram.messenger.ChatObject.isChannel(r8)
            if (r15 == 0) goto L_0x08cb
            boolean r8 = r8.megagroup
            if (r8 != 0) goto L_0x08cb
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CHANNELS
            r8 = r8 & r6
            if (r8 != 0) goto L_0x08d1
            goto L_0x08e5
        L_0x08cb:
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_GROUPS
            r8 = r8 & r6
            if (r8 != 0) goto L_0x08d1
            goto L_0x08e5
        L_0x08d1:
            int r8 = r12.indexOfKey(r9)
            if (r8 < 0) goto L_0x08e5
            java.util.ArrayList<java.lang.Integer> r8 = r3.alwaysShow
            java.lang.Integer r9 = java.lang.Integer.valueOf(r9)
            int r8 = r8.indexOf(r9)
            if (r8 < 0) goto L_0x08e5
            int r4 = r4 + -1
        L_0x08e5:
            int r2 = r2 + 1
            goto L_0x08ad
        L_0x08e8:
            java.util.ArrayList<java.lang.Integer> r1 = r3.alwaysShow
            int r1 = r1.size()
            r2 = 0
        L_0x08ef:
            if (r2 >= r1) goto L_0x09cf
            java.util.ArrayList<java.lang.Integer> r8 = r3.alwaysShow
            java.lang.Object r8 = r8.get(r2)
            java.lang.Integer r8 = (java.lang.Integer) r8
            int r8 = r8.intValue()
            r27 = r13
            long r13 = (long) r8
            int r9 = r5.indexOfKey(r13)
            if (r9 >= 0) goto L_0x090c
            r9 = r20
            r13 = r24
            goto L_0x09c2
        L_0x090c:
            if (r8 <= 0) goto L_0x098e
            r9 = r20
            java.lang.Object r13 = r9.get(r8)
            org.telegram.tgnet.TLRPC$User r13 = (org.telegram.tgnet.TLRPC$User) r13
            if (r13 == 0) goto L_0x0947
            int r14 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r14 = r14 & r6
            if (r14 == 0) goto L_0x0928
            int r14 = r13.id
            int r14 = r12.indexOfKey(r14)
            if (r14 < 0) goto L_0x0928
        L_0x0925:
            int r4 = r4 + 1
            goto L_0x0947
        L_0x0928:
            boolean r14 = r13.bot
            if (r14 == 0) goto L_0x0932
            int r13 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_BOTS
            r13 = r13 & r6
            if (r13 != 0) goto L_0x0947
            goto L_0x0925
        L_0x0932:
            boolean r14 = r13.self
            if (r14 != 0) goto L_0x0941
            boolean r13 = r13.contact
            if (r13 == 0) goto L_0x093b
            goto L_0x0941
        L_0x093b:
            int r13 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS
            r13 = r13 & r6
            if (r13 != 0) goto L_0x0947
            goto L_0x0925
        L_0x0941:
            int r13 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CONTACTS
            r13 = r13 & r6
            if (r13 != 0) goto L_0x0947
            goto L_0x0925
        L_0x0947:
            r13 = r24
            java.lang.Object r14 = r13.get(r8)
            org.telegram.tgnet.TLRPC$User r14 = (org.telegram.tgnet.TLRPC$User) r14
            if (r14 == 0) goto L_0x09c2
            r15 = 0
            java.lang.Integer r7 = java.lang.Integer.valueOf(r15)
            java.lang.Object r7 = r11.get(r8, r7)
            java.lang.Integer r7 = (java.lang.Integer) r7
            int r7 = r7.intValue()
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r8 = r8 & r6
            if (r8 == 0) goto L_0x096f
            int r8 = r14.id
            int r8 = r12.indexOfKey(r8)
            if (r8 < 0) goto L_0x096f
        L_0x096d:
            int r4 = r4 + r7
            goto L_0x09c2
        L_0x096f:
            boolean r8 = r14.bot
            if (r8 == 0) goto L_0x0979
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_BOTS
            r8 = r8 & r6
            if (r8 != 0) goto L_0x09c2
            goto L_0x096d
        L_0x0979:
            boolean r8 = r14.self
            if (r8 != 0) goto L_0x0988
            boolean r8 = r14.contact
            if (r8 == 0) goto L_0x0982
            goto L_0x0988
        L_0x0982:
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS
            r8 = r8 & r6
            if (r8 != 0) goto L_0x09c2
            goto L_0x096d
        L_0x0988:
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CONTACTS
            r8 = r8 & r6
            if (r8 != 0) goto L_0x09c2
            goto L_0x096d
        L_0x098e:
            r9 = r20
            r13 = r24
            int r7 = -r8
            java.lang.Object r7 = r10.get(r7)
            org.telegram.tgnet.TLRPC$Chat r7 = (org.telegram.tgnet.TLRPC$Chat) r7
            if (r7 == 0) goto L_0x09c2
            int r8 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED
            r8 = r8 & r6
            if (r8 == 0) goto L_0x09ac
            int r8 = r7.id
            int r8 = -r8
            int r8 = r12.indexOfKey(r8)
            if (r8 < 0) goto L_0x09ac
        L_0x09a9:
            int r4 = r4 + 1
            goto L_0x09c2
        L_0x09ac:
            boolean r8 = org.telegram.messenger.ChatObject.isChannel(r7)
            if (r8 == 0) goto L_0x09bc
            boolean r7 = r7.megagroup
            if (r7 != 0) goto L_0x09bc
            int r7 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_CHANNELS
            r7 = r7 & r6
            if (r7 != 0) goto L_0x09c2
            goto L_0x09a9
        L_0x09bc:
            int r7 = org.telegram.messenger.MessagesController.DIALOG_FILTER_FLAG_GROUPS
            r7 = r7 & r6
            if (r7 != 0) goto L_0x09c2
            goto L_0x09a9
        L_0x09c2:
            int r2 = r2 + 1
            r14 = r28
            r20 = r9
            r24 = r13
            r7 = 1
            r13 = r27
            goto L_0x08ef
        L_0x09cf:
            r27 = r13
            r9 = r20
            r13 = r24
            java.util.ArrayList<java.lang.Integer> r1 = r3.neverShow
            int r1 = r1.size()
            r14 = 0
        L_0x09dc:
            if (r14 >= r1) goto L_0x0a26
            java.util.ArrayList<java.lang.Integer> r2 = r3.neverShow
            java.lang.Object r2 = r2.get(r14)
            java.lang.Integer r2 = (java.lang.Integer) r2
            int r2 = r2.intValue()
            if (r2 <= 0) goto L_0x0a11
            java.lang.Object r6 = r9.get(r2)
            org.telegram.tgnet.TLRPC$User r6 = (org.telegram.tgnet.TLRPC$User) r6
            if (r6 == 0) goto L_0x09f6
            int r4 = r4 + -1
        L_0x09f6:
            java.lang.Object r6 = r13.get(r2)
            org.telegram.tgnet.TLRPC$User r6 = (org.telegram.tgnet.TLRPC$User) r6
            if (r6 == 0) goto L_0x0a0f
            r6 = 0
            java.lang.Integer r7 = java.lang.Integer.valueOf(r6)
            java.lang.Object r2 = r11.get(r2, r7)
            java.lang.Integer r2 = (java.lang.Integer) r2
            int r2 = r2.intValue()
            int r4 = r4 - r2
            goto L_0x0a1d
        L_0x0a0f:
            r6 = 0
            goto L_0x0a1d
        L_0x0a11:
            r6 = 0
            int r2 = -r2
            java.lang.Object r2 = r10.get(r2)
            org.telegram.tgnet.TLRPC$Chat r2 = (org.telegram.tgnet.TLRPC$Chat) r2
            if (r2 == 0) goto L_0x0a1d
            int r4 = r4 + -1
        L_0x0a1d:
            int r14 = r14 + 1
            goto L_0x09dc
        L_0x0a20:
            r27 = r13
            r9 = r20
            r13 = r24
        L_0x0a26:
            r6 = 0
            r14 = r4
        L_0x0a28:
            if (r3 == 0) goto L_0x0a31
            r3.pendingUnreadCount = r14
            r1 = r19
            r2 = r21
            goto L_0x0a40
        L_0x0a31:
            r1 = r19
            r2 = r21
            if (r2 != r1) goto L_0x0a3a
            r0.pendingMainUnreadCount = r14
            goto L_0x0a40
        L_0x0a3a:
            int r3 = r1 + 1
            if (r2 != r3) goto L_0x0a40
            r0.pendingArchiveUnreadCount = r14
        L_0x0a40:
            int r2 = r2 + 1
            r14 = r28
            r20 = r9
            r7 = r10
            r24 = r13
            r13 = r27
            goto L_0x041a
        L_0x0a4d:
            org.telegram.messenger.-$$Lambda$MessagesStorage$MFo3cJoc6ta2B_wOa3RFWAMqdsk r1 = new org.telegram.messenger.-$$Lambda$MessagesStorage$MFo3cJoc6ta2B_wOa3RFWAMqdsk
            r1.<init>()
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r1)
        L_0x0a55:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.updateFiltersReadCounter(android.util.LongSparseArray, android.util.LongSparseArray, boolean):void");
    }

    public /* synthetic */ void lambda$updateFiltersReadCounter$71$MessagesStorage() {
        ArrayList<MessagesController.DialogFilter> arrayList = getMessagesController().dialogFilters;
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            arrayList.get(i).unreadCount = arrayList.get(i).pendingUnreadCount;
        }
        this.mainUnreadCount = this.pendingMainUnreadCount;
        this.archiveUnreadCount = this.pendingArchiveUnreadCount;
    }

    /* JADX WARNING: Removed duplicated region for block: B:125:? A[RETURN, SYNTHETIC] */
    /* JADX WARNING: Removed duplicated region for block: B:97:0x02bf A[Catch:{ Exception -> 0x02c7 }] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void updateDialogsWithReadMessagesInternal(java.util.ArrayList<java.lang.Integer> r20, org.telegram.messenger.support.SparseLongArray r21, org.telegram.messenger.support.SparseLongArray r22, java.util.ArrayList<java.lang.Long> r23) {
        /*
            r19 = this;
            r1 = r19
            r0 = r21
            r2 = r22
            r3 = r23
            android.util.LongSparseArray r4 = new android.util.LongSparseArray     // Catch:{ Exception -> 0x02c7 }
            r4.<init>()     // Catch:{ Exception -> 0x02c7 }
            android.util.LongSparseArray r5 = new android.util.LongSparseArray     // Catch:{ Exception -> 0x02c7 }
            r5.<init>()     // Catch:{ Exception -> 0x02c7 }
            java.util.ArrayList r6 = new java.util.ArrayList     // Catch:{ Exception -> 0x02c7 }
            r6.<init>()     // Catch:{ Exception -> 0x02c7 }
            boolean r7 = isEmpty((java.util.List<?>) r20)     // Catch:{ Exception -> 0x02c7 }
            java.lang.String r8 = ","
            r9 = 2
            r10 = 1
            r11 = 0
            if (r7 != 0) goto L_0x0076
            r0 = r20
            java.lang.String r0 = android.text.TextUtils.join(r8, r0)     // Catch:{ Exception -> 0x02c7 }
            org.telegram.SQLite.SQLiteDatabase r2 = r1.database     // Catch:{ Exception -> 0x02c7 }
            java.util.Locale r3 = java.util.Locale.US     // Catch:{ Exception -> 0x02c7 }
            java.lang.String r7 = "SELECT uid, read_state, out FROM messages WHERE mid IN(%s)"
            java.lang.Object[] r8 = new java.lang.Object[r10]     // Catch:{ Exception -> 0x02c7 }
            r8[r11] = r0     // Catch:{ Exception -> 0x02c7 }
            java.lang.String r0 = java.lang.String.format(r3, r7, r8)     // Catch:{ Exception -> 0x02c7 }
            java.lang.Object[] r3 = new java.lang.Object[r11]     // Catch:{ Exception -> 0x02c7 }
            org.telegram.SQLite.SQLiteCursor r0 = r2.queryFinalized(r0, r3)     // Catch:{ Exception -> 0x02c7 }
        L_0x003c:
            boolean r2 = r0.next()     // Catch:{ Exception -> 0x02c7 }
            if (r2 == 0) goto L_0x0071
            int r2 = r0.intValue(r9)     // Catch:{ Exception -> 0x02c7 }
            if (r2 == 0) goto L_0x0049
            goto L_0x003c
        L_0x0049:
            int r2 = r0.intValue(r10)     // Catch:{ Exception -> 0x02c7 }
            if (r2 == 0) goto L_0x0050
            goto L_0x003c
        L_0x0050:
            long r2 = r0.longValue(r11)     // Catch:{ Exception -> 0x02c7 }
            java.lang.Object r7 = r4.get(r2)     // Catch:{ Exception -> 0x02c7 }
            java.lang.Integer r7 = (java.lang.Integer) r7     // Catch:{ Exception -> 0x02c7 }
            if (r7 != 0) goto L_0x0064
            java.lang.Integer r7 = java.lang.Integer.valueOf(r10)     // Catch:{ Exception -> 0x02c7 }
            r4.put(r2, r7)     // Catch:{ Exception -> 0x02c7 }
            goto L_0x003c
        L_0x0064:
            int r7 = r7.intValue()     // Catch:{ Exception -> 0x02c7 }
            int r7 = r7 + r10
            java.lang.Integer r7 = java.lang.Integer.valueOf(r7)     // Catch:{ Exception -> 0x02c7 }
            r4.put(r2, r7)     // Catch:{ Exception -> 0x02c7 }
            goto L_0x003c
        L_0x0071:
            r0.dispose()     // Catch:{ Exception -> 0x02c7 }
            goto L_0x01f2
        L_0x0076:
            boolean r7 = isEmpty((org.telegram.messenger.support.SparseLongArray) r21)     // Catch:{ Exception -> 0x02c7 }
            if (r7 != 0) goto L_0x00e8
            r7 = 0
        L_0x007d:
            int r13 = r21.size()     // Catch:{ Exception -> 0x02c7 }
            if (r7 >= r13) goto L_0x00e8
            int r13 = r0.keyAt(r7)     // Catch:{ Exception -> 0x02c7 }
            long r14 = r0.get(r13)     // Catch:{ Exception -> 0x02c7 }
            org.telegram.SQLite.SQLiteDatabase r12 = r1.database     // Catch:{ Exception -> 0x02c7 }
            java.util.Locale r10 = java.util.Locale.US     // Catch:{ Exception -> 0x02c7 }
            java.lang.String r11 = "SELECT COUNT(mid) FROM messages WHERE uid = %d AND mid > %d AND read_state IN(0,2) AND out = 0"
            java.lang.Object[] r0 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x02c7 }
            java.lang.Integer r18 = java.lang.Integer.valueOf(r13)     // Catch:{ Exception -> 0x02c7 }
            r9 = 0
            r0[r9] = r18     // Catch:{ Exception -> 0x02c7 }
            java.lang.Long r17 = java.lang.Long.valueOf(r14)     // Catch:{ Exception -> 0x02c7 }
            r16 = 1
            r0[r16] = r17     // Catch:{ Exception -> 0x02c7 }
            java.lang.String r0 = java.lang.String.format(r10, r11, r0)     // Catch:{ Exception -> 0x02c7 }
            java.lang.Object[] r10 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x02c7 }
            org.telegram.SQLite.SQLiteCursor r0 = r12.queryFinalized(r0, r10)     // Catch:{ Exception -> 0x02c7 }
            boolean r10 = r0.next()     // Catch:{ Exception -> 0x02c7 }
            if (r10 == 0) goto L_0x00be
            long r10 = (long) r13     // Catch:{ Exception -> 0x02c7 }
            int r12 = r0.intValue(r9)     // Catch:{ Exception -> 0x02c7 }
            java.lang.Integer r9 = java.lang.Integer.valueOf(r12)     // Catch:{ Exception -> 0x02c7 }
            r4.put(r10, r9)     // Catch:{ Exception -> 0x02c7 }
        L_0x00be:
            r0.dispose()     // Catch:{ Exception -> 0x02c7 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x02c7 }
            java.lang.String r9 = "UPDATE dialogs SET inbox_max = max((SELECT inbox_max FROM dialogs WHERE did = ?), ?) WHERE did = ?"
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r9)     // Catch:{ Exception -> 0x02c7 }
            r0.requery()     // Catch:{ Exception -> 0x02c7 }
            long r9 = (long) r13     // Catch:{ Exception -> 0x02c7 }
            r11 = 1
            r0.bindLong(r11, r9)     // Catch:{ Exception -> 0x02c7 }
            int r11 = (int) r14     // Catch:{ Exception -> 0x02c7 }
            r12 = 2
            r0.bindInteger(r12, r11)     // Catch:{ Exception -> 0x02c7 }
            r11 = 3
            r0.bindLong(r11, r9)     // Catch:{ Exception -> 0x02c7 }
            r0.step()     // Catch:{ Exception -> 0x02c7 }
            r0.dispose()     // Catch:{ Exception -> 0x02c7 }
            int r7 = r7 + 1
            r0 = r21
            r9 = 2
            r10 = 1
            r11 = 0
            goto L_0x007d
        L_0x00e8:
            boolean r0 = isEmpty((java.util.List<?>) r23)     // Catch:{ Exception -> 0x02c7 }
            if (r0 != 0) goto L_0x01bb
            java.util.ArrayList r0 = new java.util.ArrayList     // Catch:{ Exception -> 0x02c7 }
            r0.<init>(r3)     // Catch:{ Exception -> 0x02c7 }
            java.lang.String r3 = android.text.TextUtils.join(r8, r3)     // Catch:{ Exception -> 0x02c7 }
            org.telegram.SQLite.SQLiteDatabase r7 = r1.database     // Catch:{ Exception -> 0x02c7 }
            java.util.Locale r8 = java.util.Locale.US     // Catch:{ Exception -> 0x02c7 }
            java.lang.String r9 = "SELECT uid, read_state, out, mention, mid FROM messages WHERE mid IN(%s)"
            r10 = 1
            java.lang.Object[] r11 = new java.lang.Object[r10]     // Catch:{ Exception -> 0x02c7 }
            r10 = 0
            r11[r10] = r3     // Catch:{ Exception -> 0x02c7 }
            java.lang.String r3 = java.lang.String.format(r8, r9, r11)     // Catch:{ Exception -> 0x02c7 }
            java.lang.Object[] r8 = new java.lang.Object[r10]     // Catch:{ Exception -> 0x02c7 }
            org.telegram.SQLite.SQLiteCursor r3 = r7.queryFinalized(r3, r8)     // Catch:{ Exception -> 0x02c7 }
        L_0x010d:
            boolean r7 = r3.next()     // Catch:{ Exception -> 0x02c7 }
            if (r7 == 0) goto L_0x018d
            long r7 = r3.longValue(r10)     // Catch:{ Exception -> 0x02c7 }
            r9 = 4
            long r9 = r3.longValue(r9)     // Catch:{ Exception -> 0x02c7 }
            java.lang.Long r9 = java.lang.Long.valueOf(r9)     // Catch:{ Exception -> 0x02c7 }
            r0.remove(r9)     // Catch:{ Exception -> 0x02c7 }
            r9 = 1
            int r10 = r3.intValue(r9)     // Catch:{ Exception -> 0x02c7 }
            r11 = 2
            if (r10 >= r11) goto L_0x018b
            int r10 = r3.intValue(r11)     // Catch:{ Exception -> 0x02c7 }
            if (r10 != 0) goto L_0x018b
            r10 = 3
            int r11 = r3.intValue(r10)     // Catch:{ Exception -> 0x02c7 }
            if (r11 != r9) goto L_0x018b
            java.lang.Object r9 = r5.get(r7)     // Catch:{ Exception -> 0x02c7 }
            java.lang.Integer r9 = (java.lang.Integer) r9     // Catch:{ Exception -> 0x02c7 }
            if (r9 != 0) goto L_0x0179
            org.telegram.SQLite.SQLiteDatabase r9 = r1.database     // Catch:{ Exception -> 0x02c7 }
            java.lang.StringBuilder r10 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x02c7 }
            r10.<init>()     // Catch:{ Exception -> 0x02c7 }
            java.lang.String r11 = "SELECT unread_count_i FROM dialogs WHERE did = "
            r10.append(r11)     // Catch:{ Exception -> 0x02c7 }
            r10.append(r7)     // Catch:{ Exception -> 0x02c7 }
            java.lang.String r10 = r10.toString()     // Catch:{ Exception -> 0x02c7 }
            r11 = 0
            java.lang.Object[] r12 = new java.lang.Object[r11]     // Catch:{ Exception -> 0x02c7 }
            org.telegram.SQLite.SQLiteCursor r9 = r9.queryFinalized(r10, r12)     // Catch:{ Exception -> 0x02c7 }
            boolean r10 = r9.next()     // Catch:{ Exception -> 0x02c7 }
            if (r10 == 0) goto L_0x0165
            int r17 = r9.intValue(r11)     // Catch:{ Exception -> 0x02c7 }
            goto L_0x0167
        L_0x0165:
            r17 = 0
        L_0x0167:
            r9.dispose()     // Catch:{ Exception -> 0x02c7 }
            r9 = 1
            int r10 = r17 + -1
            int r9 = java.lang.Math.max(r11, r10)     // Catch:{ Exception -> 0x02c7 }
            java.lang.Integer r9 = java.lang.Integer.valueOf(r9)     // Catch:{ Exception -> 0x02c7 }
            r5.put(r7, r9)     // Catch:{ Exception -> 0x02c7 }
            goto L_0x018b
        L_0x0179:
            int r9 = r9.intValue()     // Catch:{ Exception -> 0x02c7 }
            r10 = 1
            int r9 = r9 - r10
            r10 = 0
            int r9 = java.lang.Math.max(r10, r9)     // Catch:{ Exception -> 0x02c7 }
            java.lang.Integer r9 = java.lang.Integer.valueOf(r9)     // Catch:{ Exception -> 0x02c7 }
            r5.put(r7, r9)     // Catch:{ Exception -> 0x02c7 }
        L_0x018b:
            r10 = 0
            goto L_0x010d
        L_0x018d:
            r3.dispose()     // Catch:{ Exception -> 0x02c7 }
            r9 = 0
        L_0x0191:
            int r3 = r0.size()     // Catch:{ Exception -> 0x02c7 }
            if (r9 >= r3) goto L_0x01bb
            java.lang.Object r3 = r0.get(r9)     // Catch:{ Exception -> 0x02c7 }
            java.lang.Long r3 = (java.lang.Long) r3     // Catch:{ Exception -> 0x02c7 }
            long r7 = r3.longValue()     // Catch:{ Exception -> 0x02c7 }
            r3 = 32
            long r7 = r7 >> r3
            int r3 = (int) r7     // Catch:{ Exception -> 0x02c7 }
            if (r3 <= 0) goto L_0x01b8
            java.lang.Integer r7 = java.lang.Integer.valueOf(r3)     // Catch:{ Exception -> 0x02c7 }
            boolean r7 = r6.contains(r7)     // Catch:{ Exception -> 0x02c7 }
            if (r7 != 0) goto L_0x01b8
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)     // Catch:{ Exception -> 0x02c7 }
            r6.add(r3)     // Catch:{ Exception -> 0x02c7 }
        L_0x01b8:
            int r9 = r9 + 1
            goto L_0x0191
        L_0x01bb:
            boolean r0 = isEmpty((org.telegram.messenger.support.SparseLongArray) r22)     // Catch:{ Exception -> 0x02c7 }
            if (r0 != 0) goto L_0x01f2
            r9 = 0
        L_0x01c2:
            int r0 = r22.size()     // Catch:{ Exception -> 0x02c7 }
            if (r9 >= r0) goto L_0x01f2
            int r0 = r2.keyAt(r9)     // Catch:{ Exception -> 0x02c7 }
            long r7 = r2.get(r0)     // Catch:{ Exception -> 0x02c7 }
            org.telegram.SQLite.SQLiteDatabase r3 = r1.database     // Catch:{ Exception -> 0x02c7 }
            java.lang.String r10 = "UPDATE dialogs SET outbox_max = max((SELECT outbox_max FROM dialogs WHERE did = ?), ?) WHERE did = ?"
            org.telegram.SQLite.SQLitePreparedStatement r3 = r3.executeFast(r10)     // Catch:{ Exception -> 0x02c7 }
            r3.requery()     // Catch:{ Exception -> 0x02c7 }
            long r10 = (long) r0     // Catch:{ Exception -> 0x02c7 }
            r0 = 1
            r3.bindLong(r0, r10)     // Catch:{ Exception -> 0x02c7 }
            int r0 = (int) r7     // Catch:{ Exception -> 0x02c7 }
            r7 = 2
            r3.bindInteger(r7, r0)     // Catch:{ Exception -> 0x02c7 }
            r0 = 3
            r3.bindLong(r0, r10)     // Catch:{ Exception -> 0x02c7 }
            r3.step()     // Catch:{ Exception -> 0x02c7 }
            r3.dispose()     // Catch:{ Exception -> 0x02c7 }
            int r9 = r9 + 1
            goto L_0x01c2
        L_0x01f2:
            int r0 = r4.size()     // Catch:{ Exception -> 0x02c7 }
            if (r0 > 0) goto L_0x0202
            int r0 = r5.size()     // Catch:{ Exception -> 0x02c7 }
            if (r0 <= 0) goto L_0x01ff
            goto L_0x0202
        L_0x01ff:
            r0 = 1
            goto L_0x02af
        L_0x0202:
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x02c7 }
            r0.beginTransaction()     // Catch:{ Exception -> 0x02c7 }
            int r0 = r4.size()     // Catch:{ Exception -> 0x02c7 }
            if (r0 <= 0) goto L_0x0271
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x02c7 }
            java.lang.String r2 = "UPDATE dialogs SET unread_count = ? WHERE did = ?"
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r2)     // Catch:{ Exception -> 0x02c7 }
            r9 = 0
        L_0x0216:
            int r2 = r4.size()     // Catch:{ Exception -> 0x02c7 }
            if (r9 >= r2) goto L_0x026c
            long r2 = r4.keyAt(r9)     // Catch:{ Exception -> 0x02c7 }
            java.lang.Object r7 = r4.valueAt(r9)     // Catch:{ Exception -> 0x02c7 }
            java.lang.Integer r7 = (java.lang.Integer) r7     // Catch:{ Exception -> 0x02c7 }
            int r7 = r7.intValue()     // Catch:{ Exception -> 0x02c7 }
            org.telegram.SQLite.SQLiteDatabase r8 = r1.database     // Catch:{ Exception -> 0x02c7 }
            java.lang.StringBuilder r10 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x02c7 }
            r10.<init>()     // Catch:{ Exception -> 0x02c7 }
            java.lang.String r11 = "SELECT unread_count FROM dialogs WHERE did = "
            r10.append(r11)     // Catch:{ Exception -> 0x02c7 }
            r10.append(r2)     // Catch:{ Exception -> 0x02c7 }
            java.lang.String r10 = r10.toString()     // Catch:{ Exception -> 0x02c7 }
            r11 = 0
            java.lang.Object[] r12 = new java.lang.Object[r11]     // Catch:{ Exception -> 0x02c7 }
            org.telegram.SQLite.SQLiteCursor r8 = r8.queryFinalized(r10, r12)     // Catch:{ Exception -> 0x02c7 }
            boolean r10 = r8.next()     // Catch:{ Exception -> 0x02c7 }
            if (r10 == 0) goto L_0x024f
            int r10 = r8.intValue(r11)     // Catch:{ Exception -> 0x02c7 }
            goto L_0x0250
        L_0x024f:
            r10 = 0
        L_0x0250:
            r8.dispose()     // Catch:{ Exception -> 0x02c7 }
            if (r10 != r7) goto L_0x025c
            r4.removeAt(r9)     // Catch:{ Exception -> 0x02c7 }
            int r9 = r9 + -1
            r8 = 1
            goto L_0x026a
        L_0x025c:
            r0.requery()     // Catch:{ Exception -> 0x02c7 }
            r8 = 1
            r0.bindInteger(r8, r7)     // Catch:{ Exception -> 0x02c7 }
            r7 = 2
            r0.bindLong(r7, r2)     // Catch:{ Exception -> 0x02c7 }
            r0.step()     // Catch:{ Exception -> 0x02c7 }
        L_0x026a:
            int r9 = r9 + r8
            goto L_0x0216
        L_0x026c:
            r11 = 0
            r0.dispose()     // Catch:{ Exception -> 0x02c7 }
            goto L_0x0272
        L_0x0271:
            r11 = 0
        L_0x0272:
            int r0 = r5.size()     // Catch:{ Exception -> 0x02c7 }
            if (r0 <= 0) goto L_0x02a8
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x02c7 }
            java.lang.String r2 = "UPDATE dialogs SET unread_count_i = ? WHERE did = ?"
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r2)     // Catch:{ Exception -> 0x02c7 }
        L_0x0280:
            int r2 = r5.size()     // Catch:{ Exception -> 0x02c7 }
            if (r11 >= r2) goto L_0x02a5
            r0.requery()     // Catch:{ Exception -> 0x02c7 }
            java.lang.Object r2 = r5.valueAt(r11)     // Catch:{ Exception -> 0x02c7 }
            java.lang.Integer r2 = (java.lang.Integer) r2     // Catch:{ Exception -> 0x02c7 }
            int r2 = r2.intValue()     // Catch:{ Exception -> 0x02c7 }
            r3 = 1
            r0.bindInteger(r3, r2)     // Catch:{ Exception -> 0x02c7 }
            long r2 = r5.keyAt(r11)     // Catch:{ Exception -> 0x02c7 }
            r7 = 2
            r0.bindLong(r7, r2)     // Catch:{ Exception -> 0x02c7 }
            r0.step()     // Catch:{ Exception -> 0x02c7 }
            int r11 = r11 + 1
            goto L_0x0280
        L_0x02a5:
            r0.dispose()     // Catch:{ Exception -> 0x02c7 }
        L_0x02a8:
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x02c7 }
            r0.commitTransaction()     // Catch:{ Exception -> 0x02c7 }
            goto L_0x01ff
        L_0x02af:
            r1.updateFiltersReadCounter(r4, r5, r0)     // Catch:{ Exception -> 0x02c7 }
            org.telegram.messenger.MessagesController r0 = r19.getMessagesController()     // Catch:{ Exception -> 0x02c7 }
            r0.processDialogsUpdateRead(r4, r5)     // Catch:{ Exception -> 0x02c7 }
            boolean r0 = r6.isEmpty()     // Catch:{ Exception -> 0x02c7 }
            if (r0 != 0) goto L_0x02cb
            org.telegram.messenger.MessagesController r0 = r19.getMessagesController()     // Catch:{ Exception -> 0x02c7 }
            r0.reloadMentionsCountForChannels(r6)     // Catch:{ Exception -> 0x02c7 }
            goto L_0x02cb
        L_0x02c7:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
        L_0x02cb:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.updateDialogsWithReadMessagesInternal(java.util.ArrayList, org.telegram.messenger.support.SparseLongArray, org.telegram.messenger.support.SparseLongArray, java.util.ArrayList):void");
    }

    private static boolean isEmpty(SparseArray<?> sparseArray) {
        return sparseArray == null || sparseArray.size() == 0;
    }

    private static boolean isEmpty(SparseLongArray sparseLongArray) {
        return sparseLongArray == null || sparseLongArray.size() == 0;
    }

    private static boolean isEmpty(List<?> list) {
        return list == null || list.isEmpty();
    }

    private static boolean isEmpty(SparseIntArray sparseIntArray) {
        return sparseIntArray == null || sparseIntArray.size() == 0;
    }

    private static boolean isEmpty(LongSparseArray<?> longSparseArray) {
        return longSparseArray == null || longSparseArray.size() == 0;
    }

    public void updateDialogsWithReadMessages(SparseLongArray sparseLongArray, SparseLongArray sparseLongArray2, ArrayList<Long> arrayList, boolean z) {
        if (isEmpty(sparseLongArray) && isEmpty((List<?>) arrayList)) {
            return;
        }
        if (z) {
            this.storageQueue.postRunnable(new Runnable(sparseLongArray, sparseLongArray2, arrayList) {
                public final /* synthetic */ SparseLongArray f$1;
                public final /* synthetic */ SparseLongArray f$2;
                public final /* synthetic */ ArrayList f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run() {
                    MessagesStorage.this.lambda$updateDialogsWithReadMessages$72$MessagesStorage(this.f$1, this.f$2, this.f$3);
                }
            });
        } else {
            updateDialogsWithReadMessagesInternal((ArrayList<Integer>) null, sparseLongArray, sparseLongArray2, arrayList);
        }
    }

    public /* synthetic */ void lambda$updateDialogsWithReadMessages$72$MessagesStorage(SparseLongArray sparseLongArray, SparseLongArray sparseLongArray2, ArrayList arrayList) {
        updateDialogsWithReadMessagesInternal((ArrayList<Integer>) null, sparseLongArray, sparseLongArray2, arrayList);
    }

    public void updateChatParticipants(TLRPC$ChatParticipants tLRPC$ChatParticipants) {
        if (tLRPC$ChatParticipants != null) {
            this.storageQueue.postRunnable(new Runnable(tLRPC$ChatParticipants) {
                public final /* synthetic */ TLRPC$ChatParticipants f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesStorage.this.lambda$updateChatParticipants$74$MessagesStorage(this.f$1);
                }
            });
        }
    }

    public /* synthetic */ void lambda$updateChatParticipants$74$MessagesStorage(TLRPC$ChatParticipants tLRPC$ChatParticipants) {
        NativeByteBuffer byteBufferValue;
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT info, pinned, online FROM chat_settings_v2 WHERE uid = " + tLRPC$ChatParticipants.chat_id, new Object[0]);
            TLRPC$ChatFull tLRPC$ChatFull = null;
            new ArrayList();
            if (queryFinalized.next() && (byteBufferValue = queryFinalized.byteBufferValue(0)) != null) {
                tLRPC$ChatFull = TLRPC$ChatFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                byteBufferValue.reuse();
                tLRPC$ChatFull.pinned_msg_id = queryFinalized.intValue(1);
                tLRPC$ChatFull.online_count = queryFinalized.intValue(2);
            }
            queryFinalized.dispose();
            if (tLRPC$ChatFull instanceof TLRPC$TL_chatFull) {
                tLRPC$ChatFull.participants = tLRPC$ChatParticipants;
                AndroidUtilities.runOnUIThread(new Runnable(tLRPC$ChatFull) {
                    public final /* synthetic */ TLRPC$ChatFull f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run() {
                        MessagesStorage.this.lambda$null$73$MessagesStorage(this.f$1);
                    }
                });
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO chat_settings_v2 VALUES(?, ?, ?, ?)");
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$ChatFull.getObjectSize());
                tLRPC$ChatFull.serializeToStream(nativeByteBuffer);
                executeFast.bindInteger(1, tLRPC$ChatFull.id);
                executeFast.bindByteBuffer(2, nativeByteBuffer);
                executeFast.bindInteger(3, tLRPC$ChatFull.pinned_msg_id);
                executeFast.bindInteger(4, tLRPC$ChatFull.online_count);
                executeFast.step();
                executeFast.dispose();
                nativeByteBuffer.reuse();
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public /* synthetic */ void lambda$null$73$MessagesStorage(TLRPC$ChatFull tLRPC$ChatFull) {
        getNotificationCenter().postNotificationName(NotificationCenter.chatInfoDidLoad, tLRPC$ChatFull, 0, Boolean.FALSE, null);
    }

    public void loadChannelAdmins(int i) {
        this.storageQueue.postRunnable(new Runnable(i) {
            public final /* synthetic */ int f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesStorage.this.lambda$loadChannelAdmins$75$MessagesStorage(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$loadChannelAdmins$75$MessagesStorage(int i) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT uid, rank FROM channel_admins_v2 WHERE did = " + i, new Object[0]);
            SparseArray sparseArray = new SparseArray();
            while (queryFinalized.next()) {
                sparseArray.put(queryFinalized.intValue(0), queryFinalized.stringValue(1));
            }
            queryFinalized.dispose();
            getMessagesController().processLoadedChannelAdmins(sparseArray, i, true);
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void putChannelAdmins(int i, SparseArray<String> sparseArray) {
        this.storageQueue.postRunnable(new Runnable(i, sparseArray) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ SparseArray f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesStorage.this.lambda$putChannelAdmins$76$MessagesStorage(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$putChannelAdmins$76$MessagesStorage(int i, SparseArray sparseArray) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM channel_admins_v2 WHERE did = " + i).stepThis().dispose();
            this.database.beginTransaction();
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO channel_admins_v2 VALUES(?, ?, ?)");
            long currentTimeMillis = System.currentTimeMillis() / 1000;
            for (int i2 = 0; i2 < sparseArray.size(); i2++) {
                executeFast.requery();
                executeFast.bindInteger(1, i);
                executeFast.bindInteger(2, sparseArray.keyAt(i2));
                executeFast.bindString(3, (String) sparseArray.valueAt(i2));
                executeFast.step();
            }
            executeFast.dispose();
            this.database.commitTransaction();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void updateChannelUsers(int i, ArrayList<TLRPC$ChannelParticipant> arrayList) {
        this.storageQueue.postRunnable(new Runnable(i, arrayList) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ ArrayList f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesStorage.this.lambda$updateChannelUsers$77$MessagesStorage(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$updateChannelUsers$77$MessagesStorage(int i, ArrayList arrayList) {
        long j = (long) (-i);
        try {
            this.database.executeFast("DELETE FROM channel_users_v2 WHERE did = " + j).stepThis().dispose();
            this.database.beginTransaction();
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO channel_users_v2 VALUES(?, ?, ?, ?)");
            int currentTimeMillis = (int) (System.currentTimeMillis() / 1000);
            for (int i2 = 0; i2 < arrayList.size(); i2++) {
                TLRPC$ChannelParticipant tLRPC$ChannelParticipant = (TLRPC$ChannelParticipant) arrayList.get(i2);
                executeFast.requery();
                executeFast.bindLong(1, j);
                executeFast.bindInteger(2, tLRPC$ChannelParticipant.user_id);
                executeFast.bindInteger(3, currentTimeMillis);
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$ChannelParticipant.getObjectSize());
                tLRPC$ChannelParticipant.serializeToStream(nativeByteBuffer);
                executeFast.bindByteBuffer(4, nativeByteBuffer);
                nativeByteBuffer.reuse();
                executeFast.step();
                currentTimeMillis--;
            }
            executeFast.dispose();
            this.database.commitTransaction();
            loadChatInfo(i, (CountDownLatch) null, false, true);
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void saveBotCache(String str, TLObject tLObject) {
        if (tLObject != null && !TextUtils.isEmpty(str)) {
            this.storageQueue.postRunnable(new Runnable(tLObject, str) {
                public final /* synthetic */ TLObject f$1;
                public final /* synthetic */ String f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    MessagesStorage.this.lambda$saveBotCache$78$MessagesStorage(this.f$1, this.f$2);
                }
            });
        }
    }

    public /* synthetic */ void lambda$saveBotCache$78$MessagesStorage(TLObject tLObject, String str) {
        int i;
        try {
            int currentTime = getConnectionsManager().getCurrentTime();
            if (tLObject instanceof TLRPC$TL_messages_botCallbackAnswer) {
                i = ((TLRPC$TL_messages_botCallbackAnswer) tLObject).cache_time;
            } else {
                if (tLObject instanceof TLRPC$TL_messages_botResults) {
                    i = ((TLRPC$TL_messages_botResults) tLObject).cache_time;
                }
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO botcache VALUES(?, ?, ?)");
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLObject.getObjectSize());
                tLObject.serializeToStream(nativeByteBuffer);
                executeFast.bindString(1, str);
                executeFast.bindInteger(2, currentTime);
                executeFast.bindByteBuffer(3, nativeByteBuffer);
                executeFast.step();
                executeFast.dispose();
                nativeByteBuffer.reuse();
            }
            currentTime += i;
            SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO botcache VALUES(?, ?, ?)");
            NativeByteBuffer nativeByteBuffer2 = new NativeByteBuffer(tLObject.getObjectSize());
            tLObject.serializeToStream(nativeByteBuffer2);
            executeFast2.bindString(1, str);
            executeFast2.bindInteger(2, currentTime);
            executeFast2.bindByteBuffer(3, nativeByteBuffer2);
            executeFast2.step();
            executeFast2.dispose();
            nativeByteBuffer2.reuse();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void getBotCache(String str, RequestDelegate requestDelegate) {
        if (str != null && requestDelegate != null) {
            this.storageQueue.postRunnable(new Runnable(getConnectionsManager().getCurrentTime(), str, requestDelegate) {
                public final /* synthetic */ int f$1;
                public final /* synthetic */ String f$2;
                public final /* synthetic */ RequestDelegate f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run() {
                    MessagesStorage.this.lambda$getBotCache$79$MessagesStorage(this.f$1, this.f$2, this.f$3);
                }
            });
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:21:0x005d, code lost:
        r5 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:22:0x005e, code lost:
        r1 = null;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:23:0x0060, code lost:
        r5 = e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:24:0x0061, code lost:
        r1 = null;
     */
    /* JADX WARNING: Failed to process nested try/catch */
    /* JADX WARNING: Removed duplicated region for block: B:21:0x005d A[ExcHandler: all (th java.lang.Throwable), Splitter:B:1:0x0001] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$getBotCache$79$MessagesStorage(int r5, java.lang.String r6, org.telegram.tgnet.RequestDelegate r7) {
        /*
            r4 = this;
            r0 = 0
            org.telegram.SQLite.SQLiteDatabase r1 = r4.database     // Catch:{ Exception -> 0x0060, all -> 0x005d }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0060, all -> 0x005d }
            r2.<init>()     // Catch:{ Exception -> 0x0060, all -> 0x005d }
            java.lang.String r3 = "DELETE FROM botcache WHERE date < "
            r2.append(r3)     // Catch:{ Exception -> 0x0060, all -> 0x005d }
            r2.append(r5)     // Catch:{ Exception -> 0x0060, all -> 0x005d }
            java.lang.String r5 = r2.toString()     // Catch:{ Exception -> 0x0060, all -> 0x005d }
            org.telegram.SQLite.SQLitePreparedStatement r5 = r1.executeFast(r5)     // Catch:{ Exception -> 0x0060, all -> 0x005d }
            org.telegram.SQLite.SQLitePreparedStatement r5 = r5.stepThis()     // Catch:{ Exception -> 0x0060, all -> 0x005d }
            r5.dispose()     // Catch:{ Exception -> 0x0060, all -> 0x005d }
            org.telegram.SQLite.SQLiteDatabase r5 = r4.database     // Catch:{ Exception -> 0x0060, all -> 0x005d }
            java.lang.String r1 = "SELECT data FROM botcache WHERE id = ?"
            r2 = 1
            java.lang.Object[] r2 = new java.lang.Object[r2]     // Catch:{ Exception -> 0x0060, all -> 0x005d }
            r3 = 0
            r2[r3] = r6     // Catch:{ Exception -> 0x0060, all -> 0x005d }
            org.telegram.SQLite.SQLiteCursor r5 = r5.queryFinalized(r1, r2)     // Catch:{ Exception -> 0x0060, all -> 0x005d }
            boolean r6 = r5.next()     // Catch:{ Exception -> 0x0060, all -> 0x005d }
            if (r6 == 0) goto L_0x0056
            org.telegram.tgnet.NativeByteBuffer r6 = r5.byteBufferValue(r3)     // Catch:{ Exception -> 0x0050, all -> 0x005d }
            if (r6 == 0) goto L_0x0056
            int r1 = r6.readInt32(r3)     // Catch:{ Exception -> 0x0050, all -> 0x005d }
            int r2 = org.telegram.tgnet.TLRPC$TL_messages_botCallbackAnswer.constructor     // Catch:{ Exception -> 0x0050, all -> 0x005d }
            if (r1 != r2) goto L_0x0046
            org.telegram.tgnet.TLRPC$TL_messages_botCallbackAnswer r1 = org.telegram.tgnet.TLRPC$TL_messages_botCallbackAnswer.TLdeserialize(r6, r1, r3)     // Catch:{ Exception -> 0x0050, all -> 0x005d }
            goto L_0x004a
        L_0x0046:
            org.telegram.tgnet.TLRPC$messages_BotResults r1 = org.telegram.tgnet.TLRPC$messages_BotResults.TLdeserialize(r6, r1, r3)     // Catch:{ Exception -> 0x0050, all -> 0x005d }
        L_0x004a:
            r6.reuse()     // Catch:{ Exception -> 0x004e }
            goto L_0x0057
        L_0x004e:
            r6 = move-exception
            goto L_0x0052
        L_0x0050:
            r6 = move-exception
            r1 = r0
        L_0x0052:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r6)     // Catch:{ Exception -> 0x005b }
            goto L_0x0057
        L_0x0056:
            r1 = r0
        L_0x0057:
            r5.dispose()     // Catch:{ Exception -> 0x005b }
            goto L_0x0065
        L_0x005b:
            r5 = move-exception
            goto L_0x0062
        L_0x005d:
            r5 = move-exception
            r1 = r0
            goto L_0x006a
        L_0x0060:
            r5 = move-exception
            r1 = r0
        L_0x0062:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r5)     // Catch:{ all -> 0x0069 }
        L_0x0065:
            r7.run(r1, r0)
            return
        L_0x0069:
            r5 = move-exception
        L_0x006a:
            r7.run(r1, r0)
            throw r5
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$getBotCache$79$MessagesStorage(int, java.lang.String, org.telegram.tgnet.RequestDelegate):void");
    }

    public void loadUserInfo(TLRPC$User tLRPC$User, boolean z, int i) {
        if (tLRPC$User != null) {
            this.storageQueue.postRunnable(new Runnable(tLRPC$User, z, i) {
                public final /* synthetic */ TLRPC$User f$1;
                public final /* synthetic */ boolean f$2;
                public final /* synthetic */ int f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run() {
                    MessagesStorage.this.lambda$loadUserInfo$80$MessagesStorage(this.f$1, this.f$2, this.f$3);
                }
            });
        }
    }

    public /* synthetic */ void lambda$loadUserInfo$80$MessagesStorage(TLRPC$User tLRPC$User, boolean z, int i) {
        TLRPC$UserFull tLRPC$UserFull;
        NativeByteBuffer byteBufferValue;
        TLRPC$User tLRPC$User2 = tLRPC$User;
        MessageObject messageObject = null;
        TLRPC$UserFull tLRPC$UserFull2 = null;
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT info, pinned FROM user_settings WHERE uid = " + tLRPC$User2.id, new Object[0]);
            if (queryFinalized.next() && (byteBufferValue = queryFinalized.byteBufferValue(0)) != null) {
                tLRPC$UserFull2 = TLRPC$UserFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                byteBufferValue.reuse();
                tLRPC$UserFull2.pinned_msg_id = queryFinalized.intValue(1);
            }
            tLRPC$UserFull = tLRPC$UserFull2;
            try {
                queryFinalized.dispose();
                if (!(tLRPC$UserFull == null || tLRPC$UserFull.pinned_msg_id == 0)) {
                    messageObject = getMediaDataController().loadPinnedMessage((long) tLRPC$User2.id, 0, tLRPC$UserFull.pinned_msg_id, false);
                }
            } catch (Exception e) {
                e = e;
                try {
                    FileLog.e((Throwable) e);
                    getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull, true, z, messageObject, i);
                } catch (Throwable th) {
                    th = th;
                    getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull, true, z, (MessageObject) null, i);
                    throw th;
                }
            }
        } catch (Exception e2) {
            e = e2;
            tLRPC$UserFull = null;
            FileLog.e((Throwable) e);
            getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull, true, z, messageObject, i);
        } catch (Throwable th2) {
            th = th2;
            tLRPC$UserFull = null;
            getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull, true, z, (MessageObject) null, i);
            throw th;
        }
        getMessagesController().processUserInfo(tLRPC$User, tLRPC$UserFull, true, z, messageObject, i);
    }

    public void updateUserInfo(TLRPC$UserFull tLRPC$UserFull, boolean z) {
        this.storageQueue.postRunnable(new Runnable(z, tLRPC$UserFull) {
            public final /* synthetic */ boolean f$1;
            public final /* synthetic */ TLRPC$UserFull f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesStorage.this.lambda$updateUserInfo$81$MessagesStorage(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$updateUserInfo$81$MessagesStorage(boolean z, TLRPC$UserFull tLRPC$UserFull) {
        if (z) {
            try {
                SQLiteDatabase sQLiteDatabase = this.database;
                SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT uid FROM user_settings WHERE uid = " + tLRPC$UserFull.user.id, new Object[0]);
                boolean next = queryFinalized.next();
                queryFinalized.dispose();
                if (!next) {
                    return;
                }
            } catch (Exception e) {
                FileLog.e((Throwable) e);
                return;
            }
        }
        SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO user_settings VALUES(?, ?, ?)");
        NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$UserFull.getObjectSize());
        tLRPC$UserFull.serializeToStream(nativeByteBuffer);
        executeFast.bindInteger(1, tLRPC$UserFull.user.id);
        executeFast.bindByteBuffer(2, nativeByteBuffer);
        executeFast.bindInteger(3, tLRPC$UserFull.pinned_msg_id);
        executeFast.step();
        executeFast.dispose();
        nativeByteBuffer.reuse();
        if ((tLRPC$UserFull.flags & 2048) != 0) {
            SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE dialogs SET folder_id = ? WHERE did = ?");
            executeFast2.bindInteger(1, tLRPC$UserFull.folder_id);
            executeFast2.bindLong(2, (long) tLRPC$UserFull.user.id);
            executeFast2.step();
            executeFast2.dispose();
            this.unknownDialogsIds.remove((long) tLRPC$UserFull.user.id);
        }
    }

    public void updateChatInfo(TLRPC$ChatFull tLRPC$ChatFull, boolean z) {
        this.storageQueue.postRunnable(new Runnable(tLRPC$ChatFull, z) {
            public final /* synthetic */ TLRPC$ChatFull f$1;
            public final /* synthetic */ boolean f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesStorage.this.lambda$updateChatInfo$82$MessagesStorage(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$updateChatInfo$82$MessagesStorage(TLRPC$ChatFull tLRPC$ChatFull, boolean z) {
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT online FROM chat_settings_v2 WHERE uid = " + tLRPC$ChatFull.id, new Object[0]);
            int intValue = queryFinalized.next() ? queryFinalized.intValue(0) : -1;
            queryFinalized.dispose();
            if (!z || intValue != -1) {
                if (intValue >= 0 && (tLRPC$ChatFull.flags & 8192) == 0) {
                    tLRPC$ChatFull.online_count = intValue;
                }
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO chat_settings_v2 VALUES(?, ?, ?, ?)");
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$ChatFull.getObjectSize());
                tLRPC$ChatFull.serializeToStream(nativeByteBuffer);
                executeFast.bindInteger(1, tLRPC$ChatFull.id);
                executeFast.bindByteBuffer(2, nativeByteBuffer);
                executeFast.bindInteger(3, tLRPC$ChatFull.pinned_msg_id);
                executeFast.bindInteger(4, tLRPC$ChatFull.online_count);
                executeFast.step();
                executeFast.dispose();
                nativeByteBuffer.reuse();
                if (tLRPC$ChatFull instanceof TLRPC$TL_channelFull) {
                    SQLiteDatabase sQLiteDatabase2 = this.database;
                    SQLiteCursor queryFinalized2 = sQLiteDatabase2.queryFinalized("SELECT inbox_max, outbox_max FROM dialogs WHERE did = " + (-tLRPC$ChatFull.id), new Object[0]);
                    if (queryFinalized2.next() && queryFinalized2.intValue(0) < tLRPC$ChatFull.read_inbox_max_id) {
                        int intValue2 = queryFinalized2.intValue(1);
                        SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE dialogs SET unread_count = ?, inbox_max = ?, outbox_max = ? WHERE did = ?");
                        executeFast2.bindInteger(1, tLRPC$ChatFull.unread_count);
                        executeFast2.bindInteger(2, tLRPC$ChatFull.read_inbox_max_id);
                        executeFast2.bindInteger(3, Math.max(intValue2, tLRPC$ChatFull.read_outbox_max_id));
                        executeFast2.bindLong(4, (long) (-tLRPC$ChatFull.id));
                        executeFast2.step();
                        executeFast2.dispose();
                    }
                    queryFinalized2.dispose();
                }
                if ((tLRPC$ChatFull.flags & 2048) != 0) {
                    SQLitePreparedStatement executeFast3 = this.database.executeFast("UPDATE dialogs SET folder_id = ? WHERE did = ?");
                    executeFast3.bindInteger(1, tLRPC$ChatFull.folder_id);
                    executeFast3.bindLong(2, (long) (-tLRPC$ChatFull.id));
                    executeFast3.step();
                    executeFast3.dispose();
                    this.unknownDialogsIds.remove((long) (-tLRPC$ChatFull.id));
                }
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void updateUserPinnedMessage(int i, int i2) {
        this.storageQueue.postRunnable(new Runnable(i, i2) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ int f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesStorage.this.lambda$updateUserPinnedMessage$84$MessagesStorage(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$updateUserPinnedMessage$84$MessagesStorage(int i, int i2) {
        NativeByteBuffer byteBufferValue;
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT info, pinned FROM user_settings WHERE uid = " + i, new Object[0]);
            TLRPC$UserFull tLRPC$UserFull = null;
            if (queryFinalized.next() && (byteBufferValue = queryFinalized.byteBufferValue(0)) != null) {
                tLRPC$UserFull = TLRPC$UserFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                byteBufferValue.reuse();
                tLRPC$UserFull.pinned_msg_id = queryFinalized.intValue(1);
            }
            queryFinalized.dispose();
            if (tLRPC$UserFull instanceof TLRPC$UserFull) {
                tLRPC$UserFull.pinned_msg_id = i2;
                tLRPC$UserFull.flags |= 64;
                AndroidUtilities.runOnUIThread(new Runnable(i, tLRPC$UserFull) {
                    public final /* synthetic */ int f$1;
                    public final /* synthetic */ TLRPC$UserFull f$2;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                    }

                    public final void run() {
                        MessagesStorage.this.lambda$null$83$MessagesStorage(this.f$1, this.f$2);
                    }
                });
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO user_settings VALUES(?, ?, ?)");
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$UserFull.getObjectSize());
                tLRPC$UserFull.serializeToStream(nativeByteBuffer);
                executeFast.bindInteger(1, i);
                executeFast.bindByteBuffer(2, nativeByteBuffer);
                executeFast.bindInteger(3, tLRPC$UserFull.pinned_msg_id);
                executeFast.step();
                executeFast.dispose();
                nativeByteBuffer.reuse();
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public /* synthetic */ void lambda$null$83$MessagesStorage(int i, TLRPC$UserFull tLRPC$UserFull) {
        getNotificationCenter().postNotificationName(NotificationCenter.userInfoDidLoad, Integer.valueOf(i), tLRPC$UserFull, null);
    }

    public void updateChatOnlineCount(int i, int i2) {
        this.storageQueue.postRunnable(new Runnable(i2, i) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ int f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesStorage.this.lambda$updateChatOnlineCount$85$MessagesStorage(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$updateChatOnlineCount$85$MessagesStorage(int i, int i2) {
        try {
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE chat_settings_v2 SET online = ? WHERE uid = ?");
            executeFast.requery();
            executeFast.bindInteger(1, i);
            executeFast.bindInteger(2, i2);
            executeFast.step();
            executeFast.dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void updateChatPinnedMessage(int i, int i2) {
        this.storageQueue.postRunnable(new Runnable(i, i2) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ int f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesStorage.this.lambda$updateChatPinnedMessage$87$MessagesStorage(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$updateChatPinnedMessage$87$MessagesStorage(int i, int i2) {
        NativeByteBuffer byteBufferValue;
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT info, pinned, online FROM chat_settings_v2 WHERE uid = " + i, new Object[0]);
            TLRPC$ChatFull tLRPC$ChatFull = null;
            if (queryFinalized.next() && (byteBufferValue = queryFinalized.byteBufferValue(0)) != null) {
                tLRPC$ChatFull = TLRPC$ChatFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                byteBufferValue.reuse();
                tLRPC$ChatFull.pinned_msg_id = queryFinalized.intValue(1);
                tLRPC$ChatFull.online_count = queryFinalized.intValue(2);
            }
            queryFinalized.dispose();
            if (tLRPC$ChatFull != null) {
                if (tLRPC$ChatFull instanceof TLRPC$TL_channelFull) {
                    tLRPC$ChatFull.pinned_msg_id = i2;
                    tLRPC$ChatFull.flags |= 32;
                } else if (tLRPC$ChatFull instanceof TLRPC$TL_chatFull) {
                    tLRPC$ChatFull.pinned_msg_id = i2;
                    tLRPC$ChatFull.flags |= 64;
                }
                AndroidUtilities.runOnUIThread(new Runnable(tLRPC$ChatFull) {
                    public final /* synthetic */ TLRPC$ChatFull f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run() {
                        MessagesStorage.this.lambda$null$86$MessagesStorage(this.f$1);
                    }
                });
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO chat_settings_v2 VALUES(?, ?, ?, ?)");
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$ChatFull.getObjectSize());
                tLRPC$ChatFull.serializeToStream(nativeByteBuffer);
                executeFast.bindInteger(1, i);
                executeFast.bindByteBuffer(2, nativeByteBuffer);
                executeFast.bindInteger(3, tLRPC$ChatFull.pinned_msg_id);
                executeFast.bindInteger(4, tLRPC$ChatFull.online_count);
                executeFast.step();
                executeFast.dispose();
                nativeByteBuffer.reuse();
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public /* synthetic */ void lambda$null$86$MessagesStorage(TLRPC$ChatFull tLRPC$ChatFull) {
        getNotificationCenter().postNotificationName(NotificationCenter.chatInfoDidLoad, tLRPC$ChatFull, 0, Boolean.FALSE, null);
    }

    public void updateChatInfo(int i, int i2, int i3, int i4, int i5) {
        this.storageQueue.postRunnable(new Runnable(i, i3, i2, i4, i5) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ int f$2;
            public final /* synthetic */ int f$3;
            public final /* synthetic */ int f$4;
            public final /* synthetic */ int f$5;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
            }

            public final void run() {
                MessagesStorage.this.lambda$updateChatInfo$89$MessagesStorage(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5);
            }
        });
    }

    public /* synthetic */ void lambda$updateChatInfo$89$MessagesStorage(int i, int i2, int i3, int i4, int i5) {
        TLRPC$ChatParticipant tLRPC$ChatParticipant;
        NativeByteBuffer byteBufferValue;
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            int i6 = 0;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT info, pinned, online FROM chat_settings_v2 WHERE uid = " + i, new Object[0]);
            TLRPC$ChatFull tLRPC$ChatFull = null;
            new ArrayList();
            if (queryFinalized.next() && (byteBufferValue = queryFinalized.byteBufferValue(0)) != null) {
                tLRPC$ChatFull = TLRPC$ChatFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                byteBufferValue.reuse();
                tLRPC$ChatFull.pinned_msg_id = queryFinalized.intValue(1);
                tLRPC$ChatFull.online_count = queryFinalized.intValue(2);
            }
            queryFinalized.dispose();
            if (tLRPC$ChatFull instanceof TLRPC$TL_chatFull) {
                if (i2 == 1) {
                    while (true) {
                        if (i6 >= tLRPC$ChatFull.participants.participants.size()) {
                            break;
                        } else if (tLRPC$ChatFull.participants.participants.get(i6).user_id == i3) {
                            tLRPC$ChatFull.participants.participants.remove(i6);
                            break;
                        } else {
                            i6++;
                        }
                    }
                } else if (i2 == 0) {
                    Iterator<TLRPC$ChatParticipant> it = tLRPC$ChatFull.participants.participants.iterator();
                    while (it.hasNext()) {
                        if (it.next().user_id == i3) {
                            return;
                        }
                    }
                    TLRPC$TL_chatParticipant tLRPC$TL_chatParticipant = new TLRPC$TL_chatParticipant();
                    tLRPC$TL_chatParticipant.user_id = i3;
                    tLRPC$TL_chatParticipant.inviter_id = i4;
                    tLRPC$TL_chatParticipant.date = getConnectionsManager().getCurrentTime();
                    tLRPC$ChatFull.participants.participants.add(tLRPC$TL_chatParticipant);
                } else if (i2 == 2) {
                    while (true) {
                        if (i6 >= tLRPC$ChatFull.participants.participants.size()) {
                            break;
                        }
                        TLRPC$ChatParticipant tLRPC$ChatParticipant2 = tLRPC$ChatFull.participants.participants.get(i6);
                        if (tLRPC$ChatParticipant2.user_id == i3) {
                            if (i4 == 1) {
                                tLRPC$ChatParticipant = new TLRPC$TL_chatParticipantAdmin();
                            } else {
                                tLRPC$ChatParticipant = new TLRPC$TL_chatParticipant();
                            }
                            tLRPC$ChatParticipant.user_id = tLRPC$ChatParticipant2.user_id;
                            tLRPC$ChatParticipant.date = tLRPC$ChatParticipant2.date;
                            tLRPC$ChatParticipant.inviter_id = tLRPC$ChatParticipant2.inviter_id;
                            tLRPC$ChatFull.participants.participants.set(i6, tLRPC$ChatParticipant);
                        } else {
                            i6++;
                        }
                    }
                }
                tLRPC$ChatFull.participants.version = i5;
                AndroidUtilities.runOnUIThread(new Runnable(tLRPC$ChatFull) {
                    public final /* synthetic */ TLRPC$ChatFull f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run() {
                        MessagesStorage.this.lambda$null$88$MessagesStorage(this.f$1);
                    }
                });
                SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO chat_settings_v2 VALUES(?, ?, ?, ?)");
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$ChatFull.getObjectSize());
                tLRPC$ChatFull.serializeToStream(nativeByteBuffer);
                executeFast.bindInteger(1, i);
                executeFast.bindByteBuffer(2, nativeByteBuffer);
                executeFast.bindInteger(3, tLRPC$ChatFull.pinned_msg_id);
                executeFast.bindInteger(4, tLRPC$ChatFull.online_count);
                executeFast.step();
                executeFast.dispose();
                nativeByteBuffer.reuse();
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public /* synthetic */ void lambda$null$88$MessagesStorage(TLRPC$ChatFull tLRPC$ChatFull) {
        getNotificationCenter().postNotificationName(NotificationCenter.chatInfoDidLoad, tLRPC$ChatFull, 0, Boolean.FALSE, null);
    }

    public boolean isMigratedChat(int i) {
        CountDownLatch countDownLatch = new CountDownLatch(1);
        boolean[] zArr = new boolean[1];
        this.storageQueue.postRunnable(new Runnable(i, zArr, countDownLatch) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ boolean[] f$2;
            public final /* synthetic */ CountDownLatch f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesStorage.this.lambda$isMigratedChat$90$MessagesStorage(this.f$1, this.f$2, this.f$3);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        return zArr[0];
    }

    public /* synthetic */ void lambda$isMigratedChat$90$MessagesStorage(int i, boolean[] zArr, CountDownLatch countDownLatch) {
        NativeByteBuffer byteBufferValue;
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT info FROM chat_settings_v2 WHERE uid = " + i, new Object[0]);
            TLRPC$ChatFull tLRPC$ChatFull = null;
            new ArrayList();
            if (queryFinalized.next() && (byteBufferValue = queryFinalized.byteBufferValue(0)) != null) {
                tLRPC$ChatFull = TLRPC$ChatFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                byteBufferValue.reuse();
            }
            queryFinalized.dispose();
            zArr[0] = (tLRPC$ChatFull instanceof TLRPC$TL_channelFull) && tLRPC$ChatFull.migrated_from_chat_id != 0;
            if (countDownLatch != null) {
                countDownLatch.countDown();
            }
            if (countDownLatch == null) {
                return;
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
            if (countDownLatch == null) {
                return;
            }
        } catch (Throwable th) {
            if (countDownLatch != null) {
                countDownLatch.countDown();
            }
            throw th;
        }
        countDownLatch.countDown();
    }

    private TLRPC$ChatFull loadChatInfoInternal(int i, boolean z, boolean z2) {
        TLRPC$ChatFull tLRPC$ChatFull;
        TLRPC$ChatFull tLRPC$ChatFull2;
        TLRPC$User tLRPC$User;
        TLRPC$ChannelParticipant tLRPC$ChannelParticipant;
        NativeByteBuffer byteBufferValue;
        int i2 = i;
        ArrayList arrayList = new ArrayList();
        MessageObject messageObject = null;
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT info, pinned, online FROM chat_settings_v2 WHERE uid = " + i2, new Object[0]);
            if (!queryFinalized.next() || (byteBufferValue = queryFinalized.byteBufferValue(0)) == null) {
                tLRPC$ChatFull2 = null;
            } else {
                tLRPC$ChatFull2 = TLRPC$ChatFull.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                try {
                    byteBufferValue.reuse();
                    tLRPC$ChatFull2.pinned_msg_id = queryFinalized.intValue(1);
                    tLRPC$ChatFull2.online_count = queryFinalized.intValue(2);
                } catch (Exception e) {
                    e = e;
                    try {
                        FileLog.e((Throwable) e);
                        getMessagesController().processChatInfo(i, tLRPC$ChatFull2, arrayList, true, z, z2, messageObject);
                        return tLRPC$ChatFull2;
                    } catch (Throwable th) {
                        th = th;
                        tLRPC$ChatFull = tLRPC$ChatFull2;
                        getMessagesController().processChatInfo(i, tLRPC$ChatFull, arrayList, true, z, z2, (MessageObject) null);
                        throw th;
                    }
                }
            }
            queryFinalized.dispose();
            if (tLRPC$ChatFull2 instanceof TLRPC$TL_chatFull) {
                StringBuilder sb = new StringBuilder();
                for (int i3 = 0; i3 < tLRPC$ChatFull2.participants.participants.size(); i3++) {
                    TLRPC$ChatParticipant tLRPC$ChatParticipant = tLRPC$ChatFull2.participants.participants.get(i3);
                    if (sb.length() != 0) {
                        sb.append(",");
                    }
                    sb.append(tLRPC$ChatParticipant.user_id);
                }
                if (sb.length() != 0) {
                    getUsersInternal(sb.toString(), arrayList);
                }
            } else if (tLRPC$ChatFull2 instanceof TLRPC$TL_channelFull) {
                SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT us.data, us.status, cu.data, cu.date FROM channel_users_v2 as cu LEFT JOIN users as us ON us.uid = cu.uid WHERE cu.did = " + (-i2) + " ORDER BY cu.date DESC", new Object[0]);
                tLRPC$ChatFull2.participants = new TLRPC$TL_chatParticipants();
                while (queryFinalized2.next()) {
                    try {
                        NativeByteBuffer byteBufferValue2 = queryFinalized2.byteBufferValue(0);
                        if (byteBufferValue2 != null) {
                            tLRPC$User = TLRPC$User.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(false), false);
                            byteBufferValue2.reuse();
                        } else {
                            tLRPC$User = null;
                        }
                        NativeByteBuffer byteBufferValue3 = queryFinalized2.byteBufferValue(2);
                        if (byteBufferValue3 != null) {
                            tLRPC$ChannelParticipant = TLRPC$ChannelParticipant.TLdeserialize(byteBufferValue3, byteBufferValue3.readInt32(false), false);
                            byteBufferValue3.reuse();
                        } else {
                            tLRPC$ChannelParticipant = null;
                        }
                        if (!(tLRPC$User == null || tLRPC$ChannelParticipant == null)) {
                            if (tLRPC$User.status != null) {
                                tLRPC$User.status.expires = queryFinalized2.intValue(1);
                            }
                            arrayList.add(tLRPC$User);
                            tLRPC$ChannelParticipant.date = queryFinalized2.intValue(3);
                            TLRPC$TL_chatChannelParticipant tLRPC$TL_chatChannelParticipant = new TLRPC$TL_chatChannelParticipant();
                            tLRPC$TL_chatChannelParticipant.user_id = tLRPC$ChannelParticipant.user_id;
                            tLRPC$TL_chatChannelParticipant.date = tLRPC$ChannelParticipant.date;
                            tLRPC$TL_chatChannelParticipant.inviter_id = tLRPC$ChannelParticipant.inviter_id;
                            tLRPC$TL_chatChannelParticipant.channelParticipant = tLRPC$ChannelParticipant;
                            tLRPC$ChatFull2.participants.participants.add(tLRPC$TL_chatChannelParticipant);
                        }
                    } catch (Exception e2) {
                        FileLog.e((Throwable) e2);
                    }
                }
                queryFinalized2.dispose();
                StringBuilder sb2 = new StringBuilder();
                for (int i4 = 0; i4 < tLRPC$ChatFull2.bot_info.size(); i4++) {
                    TLRPC$BotInfo tLRPC$BotInfo = tLRPC$ChatFull2.bot_info.get(i4);
                    if (sb2.length() != 0) {
                        sb2.append(",");
                    }
                    sb2.append(tLRPC$BotInfo.user_id);
                }
                if (sb2.length() != 0) {
                    getUsersInternal(sb2.toString(), arrayList);
                }
            }
            if (!(tLRPC$ChatFull2 == null || tLRPC$ChatFull2.pinned_msg_id == 0)) {
                messageObject = getMediaDataController().loadPinnedMessage((long) (-i2), tLRPC$ChatFull2 instanceof TLRPC$TL_channelFull ? i2 : 0, tLRPC$ChatFull2.pinned_msg_id, false);
            }
        } catch (Exception e3) {
            e = e3;
            tLRPC$ChatFull2 = null;
            FileLog.e((Throwable) e);
            getMessagesController().processChatInfo(i, tLRPC$ChatFull2, arrayList, true, z, z2, messageObject);
            return tLRPC$ChatFull2;
        } catch (Throwable th2) {
            th = th2;
            tLRPC$ChatFull = null;
            getMessagesController().processChatInfo(i, tLRPC$ChatFull, arrayList, true, z, z2, (MessageObject) null);
            throw th;
        }
        getMessagesController().processChatInfo(i, tLRPC$ChatFull2, arrayList, true, z, z2, messageObject);
        return tLRPC$ChatFull2;
    }

    public TLRPC$ChatFull loadChatInfo(int i, CountDownLatch countDownLatch, boolean z, boolean z2) {
        TLRPC$ChatFull[] tLRPC$ChatFullArr = new TLRPC$ChatFull[1];
        this.storageQueue.postRunnable(new Runnable(tLRPC$ChatFullArr, i, z, z2, countDownLatch) {
            public final /* synthetic */ TLRPC$ChatFull[] f$1;
            public final /* synthetic */ int f$2;
            public final /* synthetic */ boolean f$3;
            public final /* synthetic */ boolean f$4;
            public final /* synthetic */ CountDownLatch f$5;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
                this.f$5 = r6;
            }

            public final void run() {
                MessagesStorage.this.lambda$loadChatInfo$91$MessagesStorage(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5);
            }
        });
        if (countDownLatch != null) {
            try {
                countDownLatch.await();
            } catch (Throwable unused) {
            }
        }
        return tLRPC$ChatFullArr[0];
    }

    public /* synthetic */ void lambda$loadChatInfo$91$MessagesStorage(TLRPC$ChatFull[] tLRPC$ChatFullArr, int i, boolean z, boolean z2, CountDownLatch countDownLatch) {
        tLRPC$ChatFullArr[0] = loadChatInfoInternal(i, z, z2);
        if (countDownLatch != null) {
            countDownLatch.countDown();
        }
    }

    public void processPendingRead(long j, long j2, long j3, boolean z, int i) {
        this.storageQueue.postRunnable(new Runnable(j, j2, z, i, this.lastSavedDate, j3) {
            public final /* synthetic */ long f$1;
            public final /* synthetic */ long f$2;
            public final /* synthetic */ boolean f$3;
            public final /* synthetic */ int f$4;
            public final /* synthetic */ int f$5;
            public final /* synthetic */ long f$6;

            {
                this.f$1 = r2;
                this.f$2 = r4;
                this.f$3 = r6;
                this.f$4 = r7;
                this.f$5 = r8;
                this.f$6 = r9;
            }

            public final void run() {
                MessagesStorage.this.lambda$processPendingRead$92$MessagesStorage(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
            }
        });
    }

    public /* synthetic */ void lambda$processPendingRead$92$MessagesStorage(long j, long j2, boolean z, int i, int i2, long j3) {
        long j4;
        long j5;
        int i3;
        int i4;
        long j6;
        long j7 = j;
        try {
            int i5 = 0;
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT unread_count, inbox_max, last_mid FROM dialogs WHERE did = " + j7, new Object[0]);
            if (queryFinalized.next()) {
                i4 = queryFinalized.intValue(0);
                j4 = queryFinalized.longValue(2);
                j5 = (long) queryFinalized.intValue(1);
                i3 = i4;
            } else {
                j5 = 0;
                j4 = 0;
                i4 = 0;
                i3 = 0;
            }
            queryFinalized.dispose();
            this.database.beginTransaction();
            int i6 = (int) j7;
            if (i6 != 0) {
                j6 = Math.max(j5, (long) ((int) j2));
                if (z) {
                    j6 |= ((long) (-i6)) << 32;
                }
                SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages SET read_state = read_state | 1 WHERE uid = ? AND mid <= ? AND read_state IN(0,2) AND out = 0");
                executeFast.requery();
                executeFast.bindLong(1, j7);
                executeFast.bindLong(2, j6);
                executeFast.step();
                executeFast.dispose();
                if (j6 < j4) {
                    SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT changes()", new Object[0]);
                    int intValue = queryFinalized2.next() ? queryFinalized2.intValue(0) + i : 0;
                    queryFinalized2.dispose();
                    i5 = Math.max(0, i4 - intValue);
                }
                SQLitePreparedStatement executeFast2 = this.database.executeFast("DELETE FROM unread_push_messages WHERE uid = ? AND mid <= ?");
                executeFast2.requery();
                executeFast2.bindLong(1, j7);
                executeFast2.bindLong(2, j6);
                executeFast2.step();
                executeFast2.dispose();
                SQLitePreparedStatement executeFast3 = this.database.executeFast("DELETE FROM unread_push_messages WHERE uid = ? AND date <= ?");
                executeFast3.requery();
                executeFast3.bindLong(1, j7);
                executeFast3.bindLong(2, (long) i2);
                executeFast3.step();
                executeFast3.dispose();
            } else {
                j6 = (long) ((int) j3);
                SQLitePreparedStatement executeFast4 = this.database.executeFast("UPDATE messages SET read_state = read_state | 1 WHERE uid = ? AND mid >= ? AND read_state IN(0,2) AND out = 0");
                executeFast4.requery();
                executeFast4.bindLong(1, j7);
                executeFast4.bindLong(2, j6);
                executeFast4.step();
                executeFast4.dispose();
                if (j6 > j4) {
                    SQLiteCursor queryFinalized3 = this.database.queryFinalized("SELECT changes()", new Object[0]);
                    int intValue2 = queryFinalized3.next() ? queryFinalized3.intValue(0) + i : 0;
                    queryFinalized3.dispose();
                    i5 = Math.max(0, i4 - intValue2);
                }
            }
            SQLitePreparedStatement executeFast5 = this.database.executeFast("UPDATE dialogs SET unread_count = ?, inbox_max = ? WHERE did = ?");
            executeFast5.requery();
            executeFast5.bindInteger(1, i5);
            executeFast5.bindInteger(2, (int) j6);
            executeFast5.bindLong(3, j7);
            executeFast5.step();
            executeFast5.dispose();
            this.database.commitTransaction();
            if (i3 != 0 && i5 == 0) {
                LongSparseArray longSparseArray = new LongSparseArray();
                longSparseArray.put(j7, Integer.valueOf(i5));
                updateFiltersReadCounter(longSparseArray, (LongSparseArray<Integer>) null, true);
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void putContacts(ArrayList<TLRPC$TL_contact> arrayList, boolean z) {
        if (!arrayList.isEmpty() || z) {
            this.storageQueue.postRunnable(new Runnable(z, new ArrayList(arrayList)) {
                public final /* synthetic */ boolean f$1;
                public final /* synthetic */ ArrayList f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    MessagesStorage.this.lambda$putContacts$93$MessagesStorage(this.f$1, this.f$2);
                }
            });
        }
    }

    public /* synthetic */ void lambda$putContacts$93$MessagesStorage(boolean z, ArrayList arrayList) {
        if (z) {
            try {
                this.database.executeFast("DELETE FROM contacts WHERE 1").stepThis().dispose();
            } catch (Exception e) {
                FileLog.e((Throwable) e);
                return;
            }
        }
        this.database.beginTransaction();
        SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO contacts VALUES(?, ?)");
        for (int i = 0; i < arrayList.size(); i++) {
            TLRPC$TL_contact tLRPC$TL_contact = (TLRPC$TL_contact) arrayList.get(i);
            executeFast.requery();
            int i2 = 1;
            executeFast.bindInteger(1, tLRPC$TL_contact.user_id);
            if (!tLRPC$TL_contact.mutual) {
                i2 = 0;
            }
            executeFast.bindInteger(2, i2);
            executeFast.step();
        }
        executeFast.dispose();
        this.database.commitTransaction();
    }

    public void deleteContacts(ArrayList<Integer> arrayList) {
        if (arrayList != null && !arrayList.isEmpty()) {
            this.storageQueue.postRunnable(new Runnable(arrayList) {
                public final /* synthetic */ ArrayList f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesStorage.this.lambda$deleteContacts$94$MessagesStorage(this.f$1);
                }
            });
        }
    }

    public /* synthetic */ void lambda$deleteContacts$94$MessagesStorage(ArrayList arrayList) {
        try {
            String join = TextUtils.join(",", arrayList);
            SQLiteDatabase sQLiteDatabase = this.database;
            sQLiteDatabase.executeFast("DELETE FROM contacts WHERE uid IN(" + join + ")").stepThis().dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void applyPhoneBookUpdates(String str, String str2) {
        if (!TextUtils.isEmpty(str)) {
            this.storageQueue.postRunnable(new Runnable(str, str2) {
                public final /* synthetic */ String f$1;
                public final /* synthetic */ String f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    MessagesStorage.this.lambda$applyPhoneBookUpdates$95$MessagesStorage(this.f$1, this.f$2);
                }
            });
        }
    }

    public /* synthetic */ void lambda$applyPhoneBookUpdates$95$MessagesStorage(String str, String str2) {
        try {
            if (str.length() != 0) {
                this.database.executeFast(String.format(Locale.US, "UPDATE user_phones_v7 SET deleted = 0 WHERE sphone IN(%s)", new Object[]{str})).stepThis().dispose();
            }
            if (str2.length() != 0) {
                this.database.executeFast(String.format(Locale.US, "UPDATE user_phones_v7 SET deleted = 1 WHERE sphone IN(%s)", new Object[]{str2})).stepThis().dispose();
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void putCachedPhoneBook(HashMap<String, ContactsController.Contact> hashMap, boolean z, boolean z2) {
        if (hashMap == null) {
            return;
        }
        if (!hashMap.isEmpty() || z || z2) {
            this.storageQueue.postRunnable(new Runnable(hashMap, z) {
                public final /* synthetic */ HashMap f$1;
                public final /* synthetic */ boolean f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    MessagesStorage.this.lambda$putCachedPhoneBook$96$MessagesStorage(this.f$1, this.f$2);
                }
            });
        }
    }

    public /* synthetic */ void lambda$putCachedPhoneBook$96$MessagesStorage(HashMap hashMap, boolean z) {
        try {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d(this.currentAccount + " save contacts to db " + hashMap.size());
            }
            this.database.executeFast("DELETE FROM user_contacts_v7 WHERE 1").stepThis().dispose();
            this.database.executeFast("DELETE FROM user_phones_v7 WHERE 1").stepThis().dispose();
            this.database.beginTransaction();
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO user_contacts_v7 VALUES(?, ?, ?, ?, ?)");
            SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO user_phones_v7 VALUES(?, ?, ?, ?)");
            Iterator it = hashMap.entrySet().iterator();
            while (true) {
                if (!it.hasNext()) {
                    break;
                }
                ContactsController.Contact contact = (ContactsController.Contact) ((Map.Entry) it.next()).getValue();
                if (!contact.phones.isEmpty()) {
                    if (!contact.shortPhones.isEmpty()) {
                        executeFast.requery();
                        executeFast.bindString(1, contact.key);
                        executeFast.bindInteger(2, contact.contact_id);
                        executeFast.bindString(3, contact.first_name);
                        executeFast.bindString(4, contact.last_name);
                        executeFast.bindInteger(5, contact.imported);
                        executeFast.step();
                        for (int i = 0; i < contact.phones.size(); i++) {
                            executeFast2.requery();
                            executeFast2.bindString(1, contact.key);
                            executeFast2.bindString(2, contact.phones.get(i));
                            executeFast2.bindString(3, contact.shortPhones.get(i));
                            executeFast2.bindInteger(4, contact.phoneDeleted.get(i).intValue());
                            executeFast2.step();
                        }
                    }
                }
            }
            executeFast.dispose();
            executeFast2.dispose();
            this.database.commitTransaction();
            if (z) {
                this.database.executeFast("DROP TABLE IF EXISTS user_contacts_v6;").stepThis().dispose();
                this.database.executeFast("DROP TABLE IF EXISTS user_phones_v6;").stepThis().dispose();
                getCachedPhoneBook(false);
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void getCachedPhoneBook(boolean z) {
        this.storageQueue.postRunnable(new Runnable(z) {
            public final /* synthetic */ boolean f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesStorage.this.lambda$getCachedPhoneBook$97$MessagesStorage(this.f$1);
            }
        });
    }

    /* JADX WARNING: Code restructure failed: missing block: B:100:0x01b2, code lost:
        r3.phones.add(r0);
        r8 = r10.stringValue(5);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:101:0x01bb, code lost:
        if (r8 != null) goto L_0x01be;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:104:0x01c2, code lost:
        if (r8.length() != 8) goto L_0x01ce;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:106:0x01c8, code lost:
        if (r0.length() == 8) goto L_0x01ce;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:107:0x01ca, code lost:
        r8 = org.telegram.PhoneFormat.PhoneFormat.stripExceptNumbers(r0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:108:0x01ce, code lost:
        r3.shortPhones.add(r8);
        r3.phoneDeleted.add(java.lang.Integer.valueOf(r10.intValue(6)));
        r3.phoneTypes.add("");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:109:0x01ea, code lost:
        if (r15.size() != 5000) goto L_0x016b;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:110:0x01ec, code lost:
        r10.dispose();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:111:0x01f0, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:112:0x01f2, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:114:?, code lost:
        r15.clear();
        org.telegram.messenger.FileLog.e((java.lang.Throwable) r0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:115:0x01f9, code lost:
        if (r10 != null) goto L_0x01fb;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:116:0x01fb, code lost:
        r10.dispose();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:117:0x01fe, code lost:
        getContactsController().performSyncPhoneBook(r15, true, true, false, false, !r25, false);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:118:0x0213, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:119:0x0214, code lost:
        if (r10 != null) goto L_0x0216;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:120:0x0216, code lost:
        r10.dispose();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:121:0x0219, code lost:
        throw r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:72:0x012e, code lost:
        if (r10 == null) goto L_0x013f;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:73:0x0130, code lost:
        r10.dispose();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:79:0x013c, code lost:
        if (r10 == null) goto L_0x013f;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:80:0x013f, code lost:
        r15 = new java.util.HashMap(r8);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:81:0x0144, code lost:
        if (r14 == 0) goto L_0x0160;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:83:?, code lost:
        r0 = r1.database;
        r0 = r0.queryFinalized("SELECT us.key, us.uid, us.fname, us.sname, up.phone, up.sphone, up.deleted, us.imported FROM user_contacts_v7 as us LEFT JOIN user_phones_v7 as up ON us.key = up.key WHERE 1 LIMIT 0," + r3, new java.lang.Object[0]);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:84:0x0160, code lost:
        r0 = r1.database.queryFinalized("SELECT us.key, us.uid, us.fname, us.sname, up.phone, up.sphone, up.deleted, us.imported FROM user_contacts_v7 as us LEFT JOIN user_phones_v7 as up ON us.key = up.key WHERE 1", new java.lang.Object[0]);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:85:0x016a, code lost:
        r10 = r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:87:0x016f, code lost:
        if (r10.next() == false) goto L_0x01ec;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:88:0x0171, code lost:
        r0 = r10.stringValue(0);
        r3 = (org.telegram.messenger.ContactsController.Contact) r15.get(r0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:89:0x017b, code lost:
        if (r3 != null) goto L_0x01aa;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:90:0x017d, code lost:
        r3 = new org.telegram.messenger.ContactsController.Contact();
        r3.contact_id = r10.intValue(1);
        r3.first_name = r10.stringValue(2);
        r3.last_name = r10.stringValue(3);
        r3.imported = r10.intValue(7);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:91:0x019d, code lost:
        if (r3.first_name != null) goto L_0x01a1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:92:0x019f, code lost:
        r3.first_name = "";
     */
    /* JADX WARNING: Code restructure failed: missing block: B:94:0x01a3, code lost:
        if (r3.last_name != null) goto L_0x01a7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:95:0x01a5, code lost:
        r3.last_name = "";
     */
    /* JADX WARNING: Code restructure failed: missing block: B:96:0x01a7, code lost:
        r15.put(r0, r3);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:97:0x01aa, code lost:
        r0 = r10.stringValue(4);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:98:0x01ae, code lost:
        if (r0 != null) goto L_0x01b2;
     */
    /* JADX WARNING: Removed duplicated region for block: B:55:0x00e6  */
    /* JADX WARNING: Removed duplicated region for block: B:59:0x00f9 A[Catch:{ all -> 0x0134 }] */
    /* JADX WARNING: Removed duplicated region for block: B:71:0x012a  */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$getCachedPhoneBook$97$MessagesStorage(boolean r25) {
        /*
            r24 = this;
            r1 = r24
            java.lang.String r2 = ""
            r3 = 6
            r4 = 3
            r5 = 2
            r6 = 5
            r7 = 4
            r9 = 1
            r11 = 8
            r12 = 5000(0x1388, float:7.006E-42)
            r13 = 0
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ all -> 0x00df }
            java.lang.String r14 = "SELECT name FROM sqlite_master WHERE type='table' AND name='user_contacts_v6'"
            java.lang.Object[] r15 = new java.lang.Object[r13]     // Catch:{ all -> 0x00df }
            org.telegram.SQLite.SQLiteCursor r14 = r0.queryFinalized(r14, r15)     // Catch:{ all -> 0x00df }
            boolean r0 = r14.next()     // Catch:{ all -> 0x00dc }
            r14.dispose()     // Catch:{ all -> 0x00dc }
            if (r0 == 0) goto L_0x00da
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ all -> 0x00df }
            java.lang.String r14 = "SELECT COUNT(uid) FROM user_contacts_v6 WHERE 1"
            java.lang.Object[] r15 = new java.lang.Object[r13]     // Catch:{ all -> 0x00df }
            org.telegram.SQLite.SQLiteCursor r14 = r0.queryFinalized(r14, r15)     // Catch:{ all -> 0x00df }
            boolean r0 = r14.next()     // Catch:{ all -> 0x00dc }
            if (r0 == 0) goto L_0x003b
            int r0 = r14.intValue(r13)     // Catch:{ all -> 0x00dc }
            int r0 = java.lang.Math.min(r12, r0)     // Catch:{ all -> 0x00dc }
            goto L_0x003d
        L_0x003b:
            r0 = 16
        L_0x003d:
            r14.dispose()     // Catch:{ all -> 0x00dc }
            android.util.SparseArray r15 = new android.util.SparseArray     // Catch:{ all -> 0x00dc }
            r15.<init>(r0)     // Catch:{ all -> 0x00dc }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ all -> 0x00dc }
            java.lang.String r8 = "SELECT us.uid, us.fname, us.sname, up.phone, up.sphone, up.deleted, us.imported FROM user_contacts_v6 as us LEFT JOIN user_phones_v6 as up ON us.uid = up.uid WHERE 1"
            java.lang.Object[] r10 = new java.lang.Object[r13]     // Catch:{ all -> 0x00dc }
            org.telegram.SQLite.SQLiteCursor r8 = r0.queryFinalized(r8, r10)     // Catch:{ all -> 0x00dc }
        L_0x004f:
            boolean r0 = r8.next()     // Catch:{ all -> 0x00d7 }
            if (r0 == 0) goto L_0x00cc
            int r0 = r8.intValue(r13)     // Catch:{ all -> 0x00d7 }
            java.lang.Object r10 = r15.get(r0)     // Catch:{ all -> 0x00d7 }
            org.telegram.messenger.ContactsController$Contact r10 = (org.telegram.messenger.ContactsController.Contact) r10     // Catch:{ all -> 0x00d7 }
            if (r10 != 0) goto L_0x0089
            org.telegram.messenger.ContactsController$Contact r10 = new org.telegram.messenger.ContactsController$Contact     // Catch:{ all -> 0x00d7 }
            r10.<init>()     // Catch:{ all -> 0x00d7 }
            java.lang.String r14 = r8.stringValue(r9)     // Catch:{ all -> 0x00d7 }
            r10.first_name = r14     // Catch:{ all -> 0x00d7 }
            java.lang.String r14 = r8.stringValue(r5)     // Catch:{ all -> 0x00d7 }
            r10.last_name = r14     // Catch:{ all -> 0x00d7 }
            int r14 = r8.intValue(r3)     // Catch:{ all -> 0x00d7 }
            r10.imported = r14     // Catch:{ all -> 0x00d7 }
            java.lang.String r14 = r10.first_name     // Catch:{ all -> 0x00d7 }
            if (r14 != 0) goto L_0x007e
            r10.first_name = r2     // Catch:{ all -> 0x00d7 }
        L_0x007e:
            java.lang.String r14 = r10.last_name     // Catch:{ all -> 0x00d7 }
            if (r14 != 0) goto L_0x0084
            r10.last_name = r2     // Catch:{ all -> 0x00d7 }
        L_0x0084:
            r10.contact_id = r0     // Catch:{ all -> 0x00d7 }
            r15.put(r0, r10)     // Catch:{ all -> 0x00d7 }
        L_0x0089:
            java.lang.String r0 = r8.stringValue(r4)     // Catch:{ all -> 0x00d7 }
            if (r0 != 0) goto L_0x0090
            goto L_0x004f
        L_0x0090:
            java.util.ArrayList<java.lang.String> r14 = r10.phones     // Catch:{ all -> 0x00d7 }
            r14.add(r0)     // Catch:{ all -> 0x00d7 }
            java.lang.String r14 = r8.stringValue(r7)     // Catch:{ all -> 0x00d7 }
            if (r14 != 0) goto L_0x009c
            goto L_0x004f
        L_0x009c:
            int r3 = r14.length()     // Catch:{ all -> 0x00d7 }
            if (r3 != r11) goto L_0x00ac
            int r3 = r0.length()     // Catch:{ all -> 0x00d7 }
            if (r3 == r11) goto L_0x00ac
            java.lang.String r14 = org.telegram.PhoneFormat.PhoneFormat.stripExceptNumbers(r0)     // Catch:{ all -> 0x00d7 }
        L_0x00ac:
            java.util.ArrayList<java.lang.String> r0 = r10.shortPhones     // Catch:{ all -> 0x00d7 }
            r0.add(r14)     // Catch:{ all -> 0x00d7 }
            java.util.ArrayList<java.lang.Integer> r0 = r10.phoneDeleted     // Catch:{ all -> 0x00d7 }
            int r3 = r8.intValue(r6)     // Catch:{ all -> 0x00d7 }
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)     // Catch:{ all -> 0x00d7 }
            r0.add(r3)     // Catch:{ all -> 0x00d7 }
            java.util.ArrayList<java.lang.String> r0 = r10.phoneTypes     // Catch:{ all -> 0x00d7 }
            r0.add(r2)     // Catch:{ all -> 0x00d7 }
            int r0 = r15.size()     // Catch:{ all -> 0x00d7 }
            if (r0 != r12) goto L_0x00ca
            goto L_0x00cc
        L_0x00ca:
            r3 = 6
            goto L_0x004f
        L_0x00cc:
            r8.dispose()     // Catch:{ all -> 0x00d7 }
            org.telegram.messenger.ContactsController r0 = r24.getContactsController()     // Catch:{ all -> 0x00df }
            r0.migratePhoneBookToV7(r15)     // Catch:{ all -> 0x00df }
            return
        L_0x00d7:
            r0 = move-exception
            r10 = r8
            goto L_0x00e1
        L_0x00da:
            r10 = 0
            goto L_0x00e9
        L_0x00dc:
            r0 = move-exception
            r10 = r14
            goto L_0x00e1
        L_0x00df:
            r0 = move-exception
            r10 = 0
        L_0x00e1:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ all -> 0x0222 }
            if (r10 == 0) goto L_0x00e9
            r10.dispose()
        L_0x00e9:
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ all -> 0x0134 }
            java.lang.String r3 = "SELECT COUNT(key) FROM user_contacts_v7 WHERE 1"
            java.lang.Object[] r8 = new java.lang.Object[r13]     // Catch:{ all -> 0x0134 }
            org.telegram.SQLite.SQLiteCursor r10 = r0.queryFinalized(r3, r8)     // Catch:{ all -> 0x0134 }
            boolean r0 = r10.next()     // Catch:{ all -> 0x0134 }
            if (r0 == 0) goto L_0x012a
            int r3 = r10.intValue(r13)     // Catch:{ all -> 0x0134 }
            int r8 = java.lang.Math.min(r12, r3)     // Catch:{ all -> 0x0128 }
            if (r3 <= r12) goto L_0x0107
            int r0 = r3 + -5000
            r14 = r0
            goto L_0x0108
        L_0x0107:
            r14 = 0
        L_0x0108:
            boolean r0 = org.telegram.messenger.BuildVars.LOGS_ENABLED     // Catch:{ all -> 0x0126 }
            if (r0 == 0) goto L_0x012e
            java.lang.StringBuilder r0 = new java.lang.StringBuilder     // Catch:{ all -> 0x0126 }
            r0.<init>()     // Catch:{ all -> 0x0126 }
            int r15 = r1.currentAccount     // Catch:{ all -> 0x0126 }
            r0.append(r15)     // Catch:{ all -> 0x0126 }
            java.lang.String r15 = " current cached contacts count = "
            r0.append(r15)     // Catch:{ all -> 0x0126 }
            r0.append(r3)     // Catch:{ all -> 0x0126 }
            java.lang.String r0 = r0.toString()     // Catch:{ all -> 0x0126 }
            org.telegram.messenger.FileLog.d(r0)     // Catch:{ all -> 0x0126 }
            goto L_0x012e
        L_0x0126:
            r0 = move-exception
            goto L_0x0139
        L_0x0128:
            r0 = move-exception
            goto L_0x0136
        L_0x012a:
            r3 = 0
            r8 = 16
            r14 = 0
        L_0x012e:
            if (r10 == 0) goto L_0x013f
        L_0x0130:
            r10.dispose()
            goto L_0x013f
        L_0x0134:
            r0 = move-exception
            r3 = 0
        L_0x0136:
            r8 = 16
            r14 = 0
        L_0x0139:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ all -> 0x021a }
            if (r10 == 0) goto L_0x013f
            goto L_0x0130
        L_0x013f:
            java.util.HashMap r15 = new java.util.HashMap
            r15.<init>(r8)
            if (r14 == 0) goto L_0x0160
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x01f2 }
            java.lang.StringBuilder r8 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x01f2 }
            r8.<init>()     // Catch:{ Exception -> 0x01f2 }
            java.lang.String r14 = "SELECT us.key, us.uid, us.fname, us.sname, up.phone, up.sphone, up.deleted, us.imported FROM user_contacts_v7 as us LEFT JOIN user_phones_v7 as up ON us.key = up.key WHERE 1 LIMIT 0,"
            r8.append(r14)     // Catch:{ Exception -> 0x01f2 }
            r8.append(r3)     // Catch:{ Exception -> 0x01f2 }
            java.lang.String r3 = r8.toString()     // Catch:{ Exception -> 0x01f2 }
            java.lang.Object[] r8 = new java.lang.Object[r13]     // Catch:{ Exception -> 0x01f2 }
            org.telegram.SQLite.SQLiteCursor r0 = r0.queryFinalized(r3, r8)     // Catch:{ Exception -> 0x01f2 }
            goto L_0x016a
        L_0x0160:
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x01f2 }
            java.lang.String r3 = "SELECT us.key, us.uid, us.fname, us.sname, up.phone, up.sphone, up.deleted, us.imported FROM user_contacts_v7 as us LEFT JOIN user_phones_v7 as up ON us.key = up.key WHERE 1"
            java.lang.Object[] r8 = new java.lang.Object[r13]     // Catch:{ Exception -> 0x01f2 }
            org.telegram.SQLite.SQLiteCursor r0 = r0.queryFinalized(r3, r8)     // Catch:{ Exception -> 0x01f2 }
        L_0x016a:
            r10 = r0
        L_0x016b:
            boolean r0 = r10.next()     // Catch:{ Exception -> 0x01f2 }
            if (r0 == 0) goto L_0x01ec
            java.lang.String r0 = r10.stringValue(r13)     // Catch:{ Exception -> 0x01f2 }
            java.lang.Object r3 = r15.get(r0)     // Catch:{ Exception -> 0x01f2 }
            org.telegram.messenger.ContactsController$Contact r3 = (org.telegram.messenger.ContactsController.Contact) r3     // Catch:{ Exception -> 0x01f2 }
            if (r3 != 0) goto L_0x01aa
            org.telegram.messenger.ContactsController$Contact r3 = new org.telegram.messenger.ContactsController$Contact     // Catch:{ Exception -> 0x01f2 }
            r3.<init>()     // Catch:{ Exception -> 0x01f2 }
            int r8 = r10.intValue(r9)     // Catch:{ Exception -> 0x01f2 }
            r3.contact_id = r8     // Catch:{ Exception -> 0x01f2 }
            java.lang.String r8 = r10.stringValue(r5)     // Catch:{ Exception -> 0x01f2 }
            r3.first_name = r8     // Catch:{ Exception -> 0x01f2 }
            java.lang.String r8 = r10.stringValue(r4)     // Catch:{ Exception -> 0x01f2 }
            r3.last_name = r8     // Catch:{ Exception -> 0x01f2 }
            r8 = 7
            int r8 = r10.intValue(r8)     // Catch:{ Exception -> 0x01f2 }
            r3.imported = r8     // Catch:{ Exception -> 0x01f2 }
            java.lang.String r8 = r3.first_name     // Catch:{ Exception -> 0x01f2 }
            if (r8 != 0) goto L_0x01a1
            r3.first_name = r2     // Catch:{ Exception -> 0x01f2 }
        L_0x01a1:
            java.lang.String r8 = r3.last_name     // Catch:{ Exception -> 0x01f2 }
            if (r8 != 0) goto L_0x01a7
            r3.last_name = r2     // Catch:{ Exception -> 0x01f2 }
        L_0x01a7:
            r15.put(r0, r3)     // Catch:{ Exception -> 0x01f2 }
        L_0x01aa:
            java.lang.String r0 = r10.stringValue(r7)     // Catch:{ Exception -> 0x01f2 }
            if (r0 != 0) goto L_0x01b2
        L_0x01b0:
            r8 = 6
            goto L_0x016b
        L_0x01b2:
            java.util.ArrayList<java.lang.String> r8 = r3.phones     // Catch:{ Exception -> 0x01f2 }
            r8.add(r0)     // Catch:{ Exception -> 0x01f2 }
            java.lang.String r8 = r10.stringValue(r6)     // Catch:{ Exception -> 0x01f2 }
            if (r8 != 0) goto L_0x01be
            goto L_0x01b0
        L_0x01be:
            int r14 = r8.length()     // Catch:{ Exception -> 0x01f2 }
            if (r14 != r11) goto L_0x01ce
            int r14 = r0.length()     // Catch:{ Exception -> 0x01f2 }
            if (r14 == r11) goto L_0x01ce
            java.lang.String r8 = org.telegram.PhoneFormat.PhoneFormat.stripExceptNumbers(r0)     // Catch:{ Exception -> 0x01f2 }
        L_0x01ce:
            java.util.ArrayList<java.lang.String> r0 = r3.shortPhones     // Catch:{ Exception -> 0x01f2 }
            r0.add(r8)     // Catch:{ Exception -> 0x01f2 }
            java.util.ArrayList<java.lang.Integer> r0 = r3.phoneDeleted     // Catch:{ Exception -> 0x01f2 }
            r8 = 6
            int r14 = r10.intValue(r8)     // Catch:{ Exception -> 0x01f2 }
            java.lang.Integer r14 = java.lang.Integer.valueOf(r14)     // Catch:{ Exception -> 0x01f2 }
            r0.add(r14)     // Catch:{ Exception -> 0x01f2 }
            java.util.ArrayList<java.lang.String> r0 = r3.phoneTypes     // Catch:{ Exception -> 0x01f2 }
            r0.add(r2)     // Catch:{ Exception -> 0x01f2 }
            int r0 = r15.size()     // Catch:{ Exception -> 0x01f2 }
            if (r0 != r12) goto L_0x016b
        L_0x01ec:
            r10.dispose()     // Catch:{ Exception -> 0x01f2 }
            goto L_0x01fe
        L_0x01f0:
            r0 = move-exception
            goto L_0x0214
        L_0x01f2:
            r0 = move-exception
            r15.clear()     // Catch:{ all -> 0x01f0 }
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ all -> 0x01f0 }
            if (r10 == 0) goto L_0x01fe
            r10.dispose()
        L_0x01fe:
            org.telegram.messenger.ContactsController r16 = r24.getContactsController()
            r18 = 1
            r19 = 1
            r20 = 0
            r21 = 0
            r22 = r25 ^ 1
            r23 = 0
            r17 = r15
            r16.performSyncPhoneBook(r17, r18, r19, r20, r21, r22, r23)
            return
        L_0x0214:
            if (r10 == 0) goto L_0x0219
            r10.dispose()
        L_0x0219:
            throw r0
        L_0x021a:
            r0 = move-exception
            r2 = r0
            if (r10 == 0) goto L_0x0221
            r10.dispose()
        L_0x0221:
            throw r2
        L_0x0222:
            r0 = move-exception
            r2 = r0
            if (r10 == 0) goto L_0x0229
            r10.dispose()
        L_0x0229:
            goto L_0x022b
        L_0x022a:
            throw r2
        L_0x022b:
            goto L_0x022a
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$getCachedPhoneBook$97$MessagesStorage(boolean):void");
    }

    public void getContacts() {
        this.storageQueue.postRunnable(new Runnable() {
            public final void run() {
                MessagesStorage.this.lambda$getContacts$98$MessagesStorage();
            }
        });
    }

    public /* synthetic */ void lambda$getContacts$98$MessagesStorage() {
        ArrayList arrayList = new ArrayList();
        ArrayList arrayList2 = new ArrayList();
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT * FROM contacts WHERE 1", new Object[0]);
            StringBuilder sb = new StringBuilder();
            while (queryFinalized.next()) {
                int intValue = queryFinalized.intValue(0);
                TLRPC$TL_contact tLRPC$TL_contact = new TLRPC$TL_contact();
                tLRPC$TL_contact.user_id = intValue;
                tLRPC$TL_contact.mutual = queryFinalized.intValue(1) == 1;
                if (sb.length() != 0) {
                    sb.append(",");
                }
                arrayList.add(tLRPC$TL_contact);
                sb.append(tLRPC$TL_contact.user_id);
            }
            queryFinalized.dispose();
            if (sb.length() != 0) {
                getUsersInternal(sb.toString(), arrayList2);
            }
        } catch (Exception e) {
            arrayList.clear();
            arrayList2.clear();
            FileLog.e((Throwable) e);
        }
        getContactsController().processLoadedContacts(arrayList, arrayList2, 1);
    }

    public void getUnsentMessages(int i) {
        this.storageQueue.postRunnable(new Runnable(i) {
            public final /* synthetic */ int f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesStorage.this.lambda$getUnsentMessages$99$MessagesStorage(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$getUnsentMessages$99$MessagesStorage(int i) {
        int i2;
        ArrayList arrayList;
        ArrayList arrayList2;
        ArrayList arrayList3;
        try {
            SparseArray sparseArray = new SparseArray();
            ArrayList arrayList4 = new ArrayList();
            ArrayList arrayList5 = new ArrayList();
            ArrayList arrayList6 = new ArrayList();
            ArrayList arrayList7 = new ArrayList();
            ArrayList arrayList8 = new ArrayList();
            ArrayList arrayList9 = new ArrayList();
            ArrayList arrayList10 = new ArrayList();
            ArrayList arrayList11 = new ArrayList();
            SQLiteDatabase sQLiteDatabase = this.database;
            boolean z = false;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.uid, s.seq_in, s.seq_out, m.ttl FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid LEFT JOIN messages_seq as s ON m.mid = s.mid WHERE (m.mid < 0 AND m.send_state = 1) OR (m.mid > 0 AND m.send_state = 3) ORDER BY m.mid DESC LIMIT " + i, new Object[0]);
            while (true) {
                i2 = 1;
                if (!queryFinalized.next()) {
                    break;
                }
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(1);
                if (byteBufferValue != null) {
                    TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    TLdeserialize.send_state = queryFinalized.intValue(2);
                    TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                    byteBufferValue.reuse();
                    if (sparseArray.indexOfKey(TLdeserialize.id) < 0) {
                        MessageObject.setUnreadFlags(TLdeserialize, queryFinalized.intValue(0));
                        TLdeserialize.id = queryFinalized.intValue(3);
                        TLdeserialize.date = queryFinalized.intValue(4);
                        if (!queryFinalized.isNull(5)) {
                            TLdeserialize.random_id = queryFinalized.longValue(5);
                        }
                        TLdeserialize.dialog_id = queryFinalized.longValue(6);
                        TLdeserialize.seq_in = queryFinalized.intValue(7);
                        TLdeserialize.seq_out = queryFinalized.intValue(8);
                        TLdeserialize.ttl = queryFinalized.intValue(9);
                        arrayList4.add(TLdeserialize);
                        sparseArray.put(TLdeserialize.id, TLdeserialize);
                        int i3 = (int) TLdeserialize.dialog_id;
                        int i4 = (int) (TLdeserialize.dialog_id >> 32);
                        if (i3 != 0) {
                            if (i3 < 0) {
                                int i5 = -i3;
                                if (!arrayList10.contains(Integer.valueOf(i5))) {
                                    arrayList10.add(Integer.valueOf(i5));
                                }
                            } else if (!arrayList9.contains(Integer.valueOf(i3))) {
                                arrayList9.add(Integer.valueOf(i3));
                            }
                        } else if (!arrayList11.contains(Integer.valueOf(i4))) {
                            arrayList11.add(Integer.valueOf(i4));
                        }
                        addUsersAndChatsFromMessage(TLdeserialize, arrayList9, arrayList10);
                        if (TLdeserialize.send_state != 3 && ((TLdeserialize.to_id.channel_id == 0 && !MessageObject.isUnread(TLdeserialize) && i3 != 0) || TLdeserialize.id > 0)) {
                            TLdeserialize.send_state = 0;
                        }
                    }
                }
            }
            queryFinalized.dispose();
            SQLiteCursor queryFinalized2 = this.database.queryFinalized("SELECT m.data, m.send_state, m.mid, m.date, r.random_id, m.uid, m.ttl FROM scheduled_messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE (m.mid < 0 AND m.send_state = 1) OR (m.mid > 0 AND m.send_state = 3) ORDER BY date ASC", new Object[0]);
            while (queryFinalized2.next()) {
                NativeByteBuffer byteBufferValue2 = queryFinalized2.byteBufferValue(z ? 1 : 0);
                if (byteBufferValue2 != null) {
                    TLRPC$Message TLdeserialize2 = TLRPC$Message.TLdeserialize(byteBufferValue2, byteBufferValue2.readInt32(z), z);
                    TLdeserialize2.send_state = queryFinalized2.intValue(i2);
                    TLdeserialize2.readAttachPath(byteBufferValue2, getUserConfig().clientUserId);
                    byteBufferValue2.reuse();
                    if (sparseArray.indexOfKey(TLdeserialize2.id) < 0) {
                        TLdeserialize2.id = queryFinalized2.intValue(2);
                        TLdeserialize2.date = queryFinalized2.intValue(3);
                        if (!queryFinalized2.isNull(4)) {
                            TLdeserialize2.random_id = queryFinalized2.longValue(4);
                        }
                        arrayList3 = arrayList6;
                        arrayList2 = arrayList7;
                        TLdeserialize2.dialog_id = queryFinalized2.longValue(5);
                        TLdeserialize2.ttl = queryFinalized2.intValue(6);
                        arrayList5.add(TLdeserialize2);
                        sparseArray.put(TLdeserialize2.id, TLdeserialize2);
                        int i6 = (int) TLdeserialize2.dialog_id;
                        int i7 = (int) (TLdeserialize2.dialog_id >> 32);
                        if (i6 != 0) {
                            if (i6 < 0) {
                                int i8 = -i6;
                                if (!arrayList10.contains(Integer.valueOf(i8))) {
                                    arrayList10.add(Integer.valueOf(i8));
                                }
                            } else if (!arrayList9.contains(Integer.valueOf(i6))) {
                                arrayList9.add(Integer.valueOf(i6));
                            }
                        } else if (!arrayList11.contains(Integer.valueOf(i7))) {
                            arrayList11.add(Integer.valueOf(i7));
                        }
                        addUsersAndChatsFromMessage(TLdeserialize2, arrayList9, arrayList10);
                        if (TLdeserialize2.send_state == 3 || ((TLdeserialize2.to_id.channel_id != 0 || MessageObject.isUnread(TLdeserialize2) || i6 == 0) && TLdeserialize2.id <= 0)) {
                            arrayList6 = arrayList3;
                            arrayList7 = arrayList2;
                            z = false;
                            i2 = 1;
                        } else {
                            TLdeserialize2.send_state = 0;
                            arrayList6 = arrayList3;
                            arrayList7 = arrayList2;
                            z = false;
                            i2 = 1;
                        }
                    }
                }
                arrayList3 = arrayList6;
                arrayList2 = arrayList7;
                arrayList6 = arrayList3;
                arrayList7 = arrayList2;
                z = false;
                i2 = 1;
            }
            ArrayList arrayList12 = arrayList6;
            ArrayList arrayList13 = arrayList7;
            queryFinalized2.dispose();
            if (!arrayList11.isEmpty()) {
                getEncryptedChatsInternal(TextUtils.join(",", arrayList11), arrayList8, arrayList9);
            }
            if (!arrayList9.isEmpty()) {
                getUsersInternal(TextUtils.join(",", arrayList9), arrayList12);
            }
            if (!arrayList10.isEmpty()) {
                StringBuilder sb = new StringBuilder();
                for (int i9 = 0; i9 < arrayList10.size(); i9++) {
                    Integer num = (Integer) arrayList10.get(i9);
                    if (sb.length() != 0) {
                        sb.append(",");
                    }
                    sb.append(num);
                }
                arrayList = arrayList13;
                getChatsInternal(sb.toString(), arrayList);
            } else {
                arrayList = arrayList13;
            }
            getSendMessagesHelper().processUnsentMessages(arrayList4, arrayList5, arrayList12, arrayList, arrayList8);
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public boolean checkMessageByRandomId(long j) {
        boolean[] zArr = new boolean[1];
        CountDownLatch countDownLatch = new CountDownLatch(1);
        this.storageQueue.postRunnable(new Runnable(j, zArr, countDownLatch) {
            public final /* synthetic */ long f$1;
            public final /* synthetic */ boolean[] f$2;
            public final /* synthetic */ CountDownLatch f$3;

            {
                this.f$1 = r2;
                this.f$2 = r4;
                this.f$3 = r5;
            }

            public final void run() {
                MessagesStorage.this.lambda$checkMessageByRandomId$100$MessagesStorage(this.f$1, this.f$2, this.f$3);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        return zArr[0];
    }

    /* JADX WARNING: Code restructure failed: missing block: B:10:0x002c, code lost:
        if (r0 == null) goto L_0x0031;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:11:0x002e, code lost:
        r0.dispose();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:12:0x0031, code lost:
        r10.countDown();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:13:0x0034, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:5:0x0023, code lost:
        if (r0 != null) goto L_0x002e;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$checkMessageByRandomId$100$MessagesStorage(long r7, boolean[] r9, java.util.concurrent.CountDownLatch r10) {
        /*
            r6 = this;
            r0 = 0
            org.telegram.SQLite.SQLiteDatabase r1 = r6.database     // Catch:{ Exception -> 0x0028 }
            java.util.Locale r2 = java.util.Locale.US     // Catch:{ Exception -> 0x0028 }
            java.lang.String r3 = "SELECT random_id FROM randoms WHERE random_id = %d"
            r4 = 1
            java.lang.Object[] r5 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x0028 }
            java.lang.Long r7 = java.lang.Long.valueOf(r7)     // Catch:{ Exception -> 0x0028 }
            r8 = 0
            r5[r8] = r7     // Catch:{ Exception -> 0x0028 }
            java.lang.String r7 = java.lang.String.format(r2, r3, r5)     // Catch:{ Exception -> 0x0028 }
            java.lang.Object[] r2 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x0028 }
            org.telegram.SQLite.SQLiteCursor r0 = r1.queryFinalized(r7, r2)     // Catch:{ Exception -> 0x0028 }
            boolean r7 = r0.next()     // Catch:{ Exception -> 0x0028 }
            if (r7 == 0) goto L_0x0023
            r9[r8] = r4     // Catch:{ Exception -> 0x0028 }
        L_0x0023:
            if (r0 == 0) goto L_0x0031
            goto L_0x002e
        L_0x0026:
            r7 = move-exception
            goto L_0x0035
        L_0x0028:
            r7 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r7)     // Catch:{ all -> 0x0026 }
            if (r0 == 0) goto L_0x0031
        L_0x002e:
            r0.dispose()
        L_0x0031:
            r10.countDown()
            return
        L_0x0035:
            if (r0 == 0) goto L_0x003a
            r0.dispose()
        L_0x003a:
            throw r7
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$checkMessageByRandomId$100$MessagesStorage(long, boolean[], java.util.concurrent.CountDownLatch):void");
    }

    public boolean checkMessageId(long j, boolean z, int i) {
        boolean[] zArr = new boolean[1];
        CountDownLatch countDownLatch = new CountDownLatch(1);
        this.storageQueue.postRunnable(new Runnable(i, z, j, zArr, countDownLatch) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ boolean f$2;
            public final /* synthetic */ long f$3;
            public final /* synthetic */ boolean[] f$4;
            public final /* synthetic */ CountDownLatch f$5;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r6;
                this.f$5 = r7;
            }

            public final void run() {
                MessagesStorage.this.lambda$checkMessageId$101$MessagesStorage(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        return zArr[0];
    }

    /* JADX WARNING: Code restructure failed: missing block: B:13:0x003b, code lost:
        if (r6 == null) goto L_0x0040;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:14:0x003d, code lost:
        r6.dispose();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:15:0x0040, code lost:
        r11.countDown();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:16:0x0043, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:8:0x0032, code lost:
        if (r6 != null) goto L_0x003d;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$checkMessageId$101$MessagesStorage(int r6, boolean r7, long r8, boolean[] r10, java.util.concurrent.CountDownLatch r11) {
        /*
            r5 = this;
            long r0 = (long) r6
            if (r7 == 0) goto L_0x0008
            long r6 = -r8
            r2 = 32
            long r6 = r6 << r2
            long r0 = r0 | r6
        L_0x0008:
            r6 = 0
            org.telegram.SQLite.SQLiteDatabase r7 = r5.database     // Catch:{ Exception -> 0x0037 }
            java.util.Locale r2 = java.util.Locale.US     // Catch:{ Exception -> 0x0037 }
            java.lang.String r3 = "SELECT mid FROM messages WHERE uid = %d AND mid = %d"
            r4 = 2
            java.lang.Object[] r4 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x0037 }
            java.lang.Long r8 = java.lang.Long.valueOf(r8)     // Catch:{ Exception -> 0x0037 }
            r9 = 0
            r4[r9] = r8     // Catch:{ Exception -> 0x0037 }
            java.lang.Long r8 = java.lang.Long.valueOf(r0)     // Catch:{ Exception -> 0x0037 }
            r0 = 1
            r4[r0] = r8     // Catch:{ Exception -> 0x0037 }
            java.lang.String r8 = java.lang.String.format(r2, r3, r4)     // Catch:{ Exception -> 0x0037 }
            java.lang.Object[] r1 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x0037 }
            org.telegram.SQLite.SQLiteCursor r6 = r7.queryFinalized(r8, r1)     // Catch:{ Exception -> 0x0037 }
            boolean r7 = r6.next()     // Catch:{ Exception -> 0x0037 }
            if (r7 == 0) goto L_0x0032
            r10[r9] = r0     // Catch:{ Exception -> 0x0037 }
        L_0x0032:
            if (r6 == 0) goto L_0x0040
            goto L_0x003d
        L_0x0035:
            r7 = move-exception
            goto L_0x0044
        L_0x0037:
            r7 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r7)     // Catch:{ all -> 0x0035 }
            if (r6 == 0) goto L_0x0040
        L_0x003d:
            r6.dispose()
        L_0x0040:
            r11.countDown()
            return
        L_0x0044:
            if (r6 == 0) goto L_0x0049
            r6.dispose()
        L_0x0049:
            throw r7
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$checkMessageId$101$MessagesStorage(int, boolean, long, boolean[], java.util.concurrent.CountDownLatch):void");
    }

    public void getUnreadMention(long j, IntCallback intCallback) {
        this.storageQueue.postRunnable(new Runnable(j, intCallback) {
            public final /* synthetic */ long f$1;
            public final /* synthetic */ MessagesStorage.IntCallback f$2;

            {
                this.f$1 = r2;
                this.f$2 = r4;
            }

            public final void run() {
                MessagesStorage.this.lambda$getUnreadMention$103$MessagesStorage(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$getUnreadMention$103$MessagesStorage(long j, IntCallback intCallback) {
        try {
            int i = 0;
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT MIN(mid) FROM messages WHERE uid = %d AND mention = 1 AND read_state IN(0, 1)", new Object[]{Long.valueOf(j)}), new Object[0]);
            if (queryFinalized.next()) {
                i = queryFinalized.intValue(0);
            }
            queryFinalized.dispose();
            AndroidUtilities.runOnUIThread(new Runnable(i) {
                public final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesStorage.IntCallback.this.run(this.f$1);
                }
            });
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void getMessagesCount(long j, IntCallback intCallback) {
        this.storageQueue.postRunnable(new Runnable(j, intCallback) {
            public final /* synthetic */ long f$1;
            public final /* synthetic */ MessagesStorage.IntCallback f$2;

            {
                this.f$1 = r2;
                this.f$2 = r4;
            }

            public final void run() {
                MessagesStorage.this.lambda$getMessagesCount$105$MessagesStorage(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$getMessagesCount$105$MessagesStorage(long j, IntCallback intCallback) {
        try {
            int i = 0;
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(mid) FROM messages WHERE uid = %d", new Object[]{Long.valueOf(j)}), new Object[0]);
            if (queryFinalized.next()) {
                i = queryFinalized.intValue(0);
            }
            queryFinalized.dispose();
            AndroidUtilities.runOnUIThread(new Runnable(i) {
                public final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesStorage.IntCallback.this.run(this.f$1);
                }
            });
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r12v2, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v0, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r22v0, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v1, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v1, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v1, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v2, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v3, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v1, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v2, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v2, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v2, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v3, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v4, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v3, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v3, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v3, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v4, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v4, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v4, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v3, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v5, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v5, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v5, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r22v2, resolved type: long} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v4, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v4, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v7, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v3, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v6, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v1, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v6, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v5, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v8, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v3, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v8, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v7, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v7, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r44v1, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v4, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v3, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v5, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v9, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r44v2, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r44v3, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r44v4, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r44v5, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v6, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v8, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v5, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v9, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v8, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v10, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v9, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v9, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v11, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v10, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v12, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v11, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v15, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v13, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v16, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v14, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v15, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v17, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v17, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v18, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v19, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v14, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r44v6, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v20, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v12, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v15, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r44v7, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v21, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r44v8, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v8, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v6, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v9, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v9, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v11, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v14, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v9, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v7, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v10, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v10, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v12, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v15, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v16, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v8, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r22v6, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v11, resolved type: boolean} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v13, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r8v5, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v21, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v16, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v17, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v11, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r22v7, resolved type: boolean} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v12, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v22, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v14, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v18, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v12, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r22v8, resolved type: boolean} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v13, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v23, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v19, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v13, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v23, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v14, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v20, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v19, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v12, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v21, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v24, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v23, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v24, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v27, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v28, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v29, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v20, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v14, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r22v10, resolved type: boolean} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v15, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r33v2, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v16, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v17, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v21, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v15, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v21, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r33v3, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v16, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r22v11, resolved type: boolean} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v17, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v22, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v22, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r33v4, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v17, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r22v12, resolved type: boolean} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v18, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v19, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v19, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v30, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v23, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v18, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v23, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v19, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r22v13, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v24, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v20, resolved type: boolean} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v20, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r8v7, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v31, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v24, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r33v6, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v21, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v25, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r33v7, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v22, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v26, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r22v16, resolved type: boolean} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v23, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r33v9, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v24, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v27, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v28, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r33v10, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v23, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r22v18, resolved type: boolean} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v25, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v25, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v26, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v23, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v30, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r33v11, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v29, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v24, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r22v19, resolved type: boolean} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v27, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v26, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r33v12, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v28, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v32, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r33v13, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v31, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v32, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r33v14, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r22v21, resolved type: boolean} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v26, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r33v15, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v29, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v31, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r33v16, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v27, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r33v17, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r33v18, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r33v19, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r33v20, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r33v21, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r33v22, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v28, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v29, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v30, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v31, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v32, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v48, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v27, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v28, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v9, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v39, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v49, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v50, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v10, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v40, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v29, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v11, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v41, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v12, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v42, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v43, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v38, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v13, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v22, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v30, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v14, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v23, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v31, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v15, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v37, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v16, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v17, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v46, resolved type: boolean} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r8v27, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v38, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v18, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r8v28, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v39, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v47, resolved type: boolean} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r14v27, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v44, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r14v28, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v45, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v60, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v52, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v24, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v19, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v48, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v32, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r8v36, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v20, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v42, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v50, resolved type: boolean} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v57, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v46, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v60, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v65, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r7v44, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r7v48, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v21, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r14v30, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v47, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v48, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r14v31, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r7v49, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r7v50, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v22, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v52, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r8v46, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v56, resolved type: boolean} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v23, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v57, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v49, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v50, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v26, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v24, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v55, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v27, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v25, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v56, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v26, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v57, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v27, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v61, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v28, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v62, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v63, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v33, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v29, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r22v22, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v70, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r7v67, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v61, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v66, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v73, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v29, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v70, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v74, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v30, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v31, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v73, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v75, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v34, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v35, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v36, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v37, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r22v23, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v76, resolved type: boolean} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r8v59, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v74, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v62, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v38, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v39, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v40, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v102, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v37, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v41, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v38, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v103, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v42, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v43, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v96, resolved type: boolean} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v104, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r8v87, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v97, resolved type: boolean} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v105, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r8v88, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v108, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v44, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r47v45, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v98, resolved type: boolean} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r8v95, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v127, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v42, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v34, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v30, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v140, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v62, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v45, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v35, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v31, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v71, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v63, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v141, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v36, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v32, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v72, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v64, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v65, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r7v126, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v73, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v33, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v37, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r22v25, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v38, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v34, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v34, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v74, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v66, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v67, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r7v128, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v75, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v35, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r7v129, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v68, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v69, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v76, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v36, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v39, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v40, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v37, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r14v65, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v142, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v46, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v78, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v72, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v36, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v37, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v38, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v38, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v39, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v79, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v75, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v39, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v80, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v76, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v40, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r7v145, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v84, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v41, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r22v33, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v40, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v86, resolved type: java.util.ArrayList} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v87, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v41, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v89, resolved type: java.util.ArrayList} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v42, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v42, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v43, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v81, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v155, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v48, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v44, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v82, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v156, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v49, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v45, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v84, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v93, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r7v157, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v87, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v162, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v88, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v95, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v90, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v46, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v47, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r14v70, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v48, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v41, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v51, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v131, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v164, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v42, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v91, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v51, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v132, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v165, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v52, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v133, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v166, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v53, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v43, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r14v71, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v52, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v53, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r14v72, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r18v44, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v167, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v54, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v168, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v55, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v44, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v55, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v56, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v169, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v92, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v45, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v56, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v57, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v170, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v93, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r14v74, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v57, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v171, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v46, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v58, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v94, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v96, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v47, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v95, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r22v37, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v58, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r7v160, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v60, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v59, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v172, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v48, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v61, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v173, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v60, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v62, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v174, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v61, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v49, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v63, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v62, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v175, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v96, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v50, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v64, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v63, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v176, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r3v97, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v65, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v64, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v177, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v51, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v65, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v178, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v66, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r9v179, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r20v66, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v149, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v83, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r23v67, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r30v52, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r22v39, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r22v40, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r22v41, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r22v42, resolved type: boolean} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r22v43, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r22v44, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r22v45, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v155, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v156, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v157, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v158, resolved type: org.telegram.tgnet.TLRPC$TL_messages_messages} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r22v46, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r22v47, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r22v48, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r22v49, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v97, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v98, resolved type: java.util.ArrayList} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v100, resolved type: int} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r11v101, resolved type: int} */
    /* JADX WARNING: Code restructure failed: missing block: B:640:0x0fd4, code lost:
        if (r4.reply_to_random_id != 0) goto L_0x0fea;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:713:0x1111, code lost:
        r0 = e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:714:0x1112, code lost:
        r33 = r6;
        r10 = r36;
     */
    /* JADX WARNING: Failed to insert additional move for type inference */
    /* JADX WARNING: Failed to process nested try/catch */
    /* JADX WARNING: Multi-variable type inference failed */
    /* JADX WARNING: Removed duplicated region for block: B:349:0x0879 A[SYNTHETIC, Splitter:B:349:0x0879] */
    /* JADX WARNING: Removed duplicated region for block: B:351:0x087e  */
    /* JADX WARNING: Removed duplicated region for block: B:393:0x0981  */
    /* JADX WARNING: Removed duplicated region for block: B:394:0x0983  */
    /* JADX WARNING: Removed duplicated region for block: B:396:0x0986 A[SYNTHETIC, Splitter:B:396:0x0986] */
    /* JADX WARNING: Removed duplicated region for block: B:405:0x09c7 A[SYNTHETIC, Splitter:B:405:0x09c7] */
    /* JADX WARNING: Removed duplicated region for block: B:440:0x0afe A[Catch:{ Exception -> 0x0b73 }] */
    /* JADX WARNING: Removed duplicated region for block: B:683:0x10ad A[Catch:{ Exception -> 0x1277 }] */
    /* JADX WARNING: Removed duplicated region for block: B:686:0x10bb  */
    /* JADX WARNING: Removed duplicated region for block: B:690:0x10c2 A[SYNTHETIC, Splitter:B:690:0x10c2] */
    /* JADX WARNING: Removed duplicated region for block: B:709:0x1102 A[Catch:{ Exception -> 0x11a6 }] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public java.lang.Runnable getMessagesInternal(long r40, long r42, int r44, int r45, int r46, int r47, int r48, int r49, boolean r50, boolean r51, int r52) {
        /*
            r39 = this;
            r15 = r39
            r4 = r40
            r1 = r44
            r2 = r45
            r14 = r49
            org.telegram.tgnet.TLRPC$TL_messages_messages r3 = new org.telegram.tgnet.TLRPC$TL_messages_messages
            r3.<init>()
            org.telegram.messenger.UserConfig r6 = r39.getUserConfig()
            int r6 = r6.clientUserId
            long r7 = (long) r2
            if (r50 == 0) goto L_0x001b
            int r10 = (int) r4
            int r10 = -r10
            goto L_0x001c
        L_0x001b:
            r10 = 0
        L_0x001c:
            r11 = 32
            r12 = 0
            int r16 = (r7 > r12 ? 1 : (r7 == r12 ? 0 : -1))
            if (r16 == 0) goto L_0x0029
            if (r10 == 0) goto L_0x0029
            long r12 = (long) r10
            long r12 = r12 << r11
            long r7 = r7 | r12
        L_0x0029:
            r12 = 777000(0xbdb28, double:3.83889E-318)
            int r20 = (r4 > r12 ? 1 : (r4 == r12 ? 0 : -1))
            if (r20 != 0) goto L_0x0033
            r12 = 10
            goto L_0x0034
        L_0x0033:
            r12 = 1
        L_0x0034:
            java.util.ArrayList r13 = new java.util.ArrayList     // Catch:{ Exception -> 0x14a2 }
            r13.<init>()     // Catch:{ Exception -> 0x14a2 }
            java.util.ArrayList r9 = new java.util.ArrayList     // Catch:{ Exception -> 0x14a2 }
            r9.<init>()     // Catch:{ Exception -> 0x14a2 }
            java.util.ArrayList r11 = new java.util.ArrayList     // Catch:{ Exception -> 0x14a2 }
            r11.<init>()     // Catch:{ Exception -> 0x14a2 }
            r22 = r7
            android.util.SparseArray r7 = new android.util.SparseArray     // Catch:{ Exception -> 0x14a2 }
            r7.<init>()     // Catch:{ Exception -> 0x14a2 }
            android.util.LongSparseArray r8 = new android.util.LongSparseArray     // Catch:{ Exception -> 0x14a2 }
            r8.<init>()     // Catch:{ Exception -> 0x14a2 }
            r24 = -2147483648(0xfffffffvar_, float:-0.0)
            if (r51 == 0) goto L_0x01cd
            org.telegram.SQLite.SQLiteDatabase r10 = r15.database     // Catch:{ Exception -> 0x01b2 }
            java.util.Locale r12 = java.util.Locale.US     // Catch:{ Exception -> 0x01b2 }
            java.lang.String r2 = "SELECT m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.ttl FROM scheduled_messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d ORDER BY m.date DESC"
            r1 = 1
            java.lang.Object[] r15 = new java.lang.Object[r1]     // Catch:{ Exception -> 0x01b2 }
            java.lang.Long r1 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x01b2 }
            r14 = 0
            r15[r14] = r1     // Catch:{ Exception -> 0x01b2 }
            java.lang.String r1 = java.lang.String.format(r12, r2, r15)     // Catch:{ Exception -> 0x01b2 }
            java.lang.Object[] r2 = new java.lang.Object[r14]     // Catch:{ Exception -> 0x01b2 }
            org.telegram.SQLite.SQLiteCursor r1 = r10.queryFinalized(r1, r2)     // Catch:{ Exception -> 0x01b2 }
        L_0x006d:
            boolean r2 = r1.next()     // Catch:{ Exception -> 0x01b2 }
            if (r2 == 0) goto L_0x018d
            org.telegram.tgnet.NativeByteBuffer r2 = r1.byteBufferValue(r14)     // Catch:{ Exception -> 0x01b2 }
            if (r2 == 0) goto L_0x0186
            int r10 = r2.readInt32(r14)     // Catch:{ Exception -> 0x01b2 }
            org.telegram.tgnet.TLRPC$Message r10 = org.telegram.tgnet.TLRPC$Message.TLdeserialize(r2, r10, r14)     // Catch:{ Exception -> 0x01b2 }
            r12 = 1
            int r14 = r1.intValue(r12)     // Catch:{ Exception -> 0x01b2 }
            r10.send_state = r14     // Catch:{ Exception -> 0x01b2 }
            r12 = 2
            int r14 = r1.intValue(r12)     // Catch:{ Exception -> 0x01b2 }
            r10.id = r14     // Catch:{ Exception -> 0x01b2 }
            if (r14 <= 0) goto L_0x009d
            int r12 = r10.send_state     // Catch:{ Exception -> 0x01b2 }
            if (r12 == 0) goto L_0x009d
            int r12 = r10.send_state     // Catch:{ Exception -> 0x01b2 }
            r14 = 3
            if (r12 == r14) goto L_0x009d
            r12 = 0
            r10.send_state = r12     // Catch:{ Exception -> 0x01b2 }
        L_0x009d:
            long r14 = (long) r6     // Catch:{ Exception -> 0x01b2 }
            int r12 = (r4 > r14 ? 1 : (r4 == r14 ? 0 : -1))
            if (r12 != 0) goto L_0x00a9
            r12 = 1
            r10.out = r12     // Catch:{ Exception -> 0x01b2 }
            r14 = 0
            r10.unread = r14     // Catch:{ Exception -> 0x01b2 }
            goto L_0x00ac
        L_0x00a9:
            r12 = 1
            r10.unread = r12     // Catch:{ Exception -> 0x01b2 }
        L_0x00ac:
            r10.readAttachPath(r2, r6)     // Catch:{ Exception -> 0x01b2 }
            r2.reuse()     // Catch:{ Exception -> 0x01b2 }
            r2 = 3
            int r12 = r1.intValue(r2)     // Catch:{ Exception -> 0x01b2 }
            r10.date = r12     // Catch:{ Exception -> 0x01b2 }
            r10.dialog_id = r4     // Catch:{ Exception -> 0x01b2 }
            int r2 = r10.ttl     // Catch:{ Exception -> 0x01b2 }
            if (r2 != 0) goto L_0x00c6
            r2 = 6
            int r12 = r1.intValue(r2)     // Catch:{ Exception -> 0x01b2 }
            r10.ttl = r12     // Catch:{ Exception -> 0x01b2 }
        L_0x00c6:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r2 = r3.messages     // Catch:{ Exception -> 0x01b2 }
            r2.add(r10)     // Catch:{ Exception -> 0x01b2 }
            addUsersAndChatsFromMessage(r10, r13, r9)     // Catch:{ Exception -> 0x01b2 }
            int r2 = r10.reply_to_msg_id     // Catch:{ Exception -> 0x01b2 }
            if (r2 != 0) goto L_0x00da
            long r14 = r10.reply_to_random_id     // Catch:{ Exception -> 0x01b2 }
            r16 = 0
            int r2 = (r14 > r16 ? 1 : (r14 == r16 ? 0 : -1))
            if (r2 == 0) goto L_0x0186
        L_0x00da:
            r2 = 5
            boolean r12 = r1.isNull(r2)     // Catch:{ Exception -> 0x01b2 }
            if (r12 != 0) goto L_0x010f
            org.telegram.tgnet.NativeByteBuffer r12 = r1.byteBufferValue(r2)     // Catch:{ Exception -> 0x01b2 }
            if (r12 == 0) goto L_0x010f
            r2 = 0
            int r14 = r12.readInt32(r2)     // Catch:{ Exception -> 0x01b2 }
            org.telegram.tgnet.TLRPC$Message r14 = org.telegram.tgnet.TLRPC$Message.TLdeserialize(r12, r14, r2)     // Catch:{ Exception -> 0x01b2 }
            r10.replyMessage = r14     // Catch:{ Exception -> 0x01b2 }
            r14.readAttachPath(r12, r6)     // Catch:{ Exception -> 0x01b2 }
            r12.reuse()     // Catch:{ Exception -> 0x01b2 }
            org.telegram.tgnet.TLRPC$Message r2 = r10.replyMessage     // Catch:{ Exception -> 0x01b2 }
            if (r2 == 0) goto L_0x010f
            boolean r2 = org.telegram.messenger.MessageObject.isMegagroup(r10)     // Catch:{ Exception -> 0x01b2 }
            if (r2 == 0) goto L_0x010a
            org.telegram.tgnet.TLRPC$Message r2 = r10.replyMessage     // Catch:{ Exception -> 0x01b2 }
            int r12 = r2.flags     // Catch:{ Exception -> 0x01b2 }
            r12 = r12 | r24
            r2.flags = r12     // Catch:{ Exception -> 0x01b2 }
        L_0x010a:
            org.telegram.tgnet.TLRPC$Message r2 = r10.replyMessage     // Catch:{ Exception -> 0x01b2 }
            addUsersAndChatsFromMessage(r2, r13, r9)     // Catch:{ Exception -> 0x01b2 }
        L_0x010f:
            org.telegram.tgnet.TLRPC$Message r2 = r10.replyMessage     // Catch:{ Exception -> 0x01b2 }
            if (r2 != 0) goto L_0x0186
            int r2 = r10.reply_to_msg_id     // Catch:{ Exception -> 0x01b2 }
            if (r2 == 0) goto L_0x0157
            int r2 = r10.reply_to_msg_id     // Catch:{ Exception -> 0x01b2 }
            long r14 = (long) r2     // Catch:{ Exception -> 0x01b2 }
            org.telegram.tgnet.TLRPC$Peer r2 = r10.to_id     // Catch:{ Exception -> 0x01b2 }
            int r2 = r2.channel_id     // Catch:{ Exception -> 0x01b2 }
            if (r2 == 0) goto L_0x012c
            org.telegram.tgnet.TLRPC$Peer r2 = r10.to_id     // Catch:{ Exception -> 0x01b2 }
            int r2 = r2.channel_id     // Catch:{ Exception -> 0x01b2 }
            r26 = r13
            long r12 = (long) r2     // Catch:{ Exception -> 0x01b2 }
            r2 = 32
            long r12 = r12 << r2
            long r14 = r14 | r12
            goto L_0x012e
        L_0x012c:
            r26 = r13
        L_0x012e:
            java.lang.Long r2 = java.lang.Long.valueOf(r14)     // Catch:{ Exception -> 0x01b2 }
            boolean r2 = r11.contains(r2)     // Catch:{ Exception -> 0x01b2 }
            if (r2 != 0) goto L_0x013f
            java.lang.Long r2 = java.lang.Long.valueOf(r14)     // Catch:{ Exception -> 0x01b2 }
            r11.add(r2)     // Catch:{ Exception -> 0x01b2 }
        L_0x013f:
            int r2 = r10.reply_to_msg_id     // Catch:{ Exception -> 0x01b2 }
            java.lang.Object r2 = r7.get(r2)     // Catch:{ Exception -> 0x01b2 }
            java.util.ArrayList r2 = (java.util.ArrayList) r2     // Catch:{ Exception -> 0x01b2 }
            if (r2 != 0) goto L_0x0153
            java.util.ArrayList r2 = new java.util.ArrayList     // Catch:{ Exception -> 0x01b2 }
            r2.<init>()     // Catch:{ Exception -> 0x01b2 }
            int r12 = r10.reply_to_msg_id     // Catch:{ Exception -> 0x01b2 }
            r7.put(r12, r2)     // Catch:{ Exception -> 0x01b2 }
        L_0x0153:
            r2.add(r10)     // Catch:{ Exception -> 0x01b2 }
            goto L_0x0188
        L_0x0157:
            r26 = r13
            long r12 = r10.reply_to_random_id     // Catch:{ Exception -> 0x01b2 }
            java.lang.Long r2 = java.lang.Long.valueOf(r12)     // Catch:{ Exception -> 0x01b2 }
            boolean r2 = r11.contains(r2)     // Catch:{ Exception -> 0x01b2 }
            if (r2 != 0) goto L_0x016e
            long r12 = r10.reply_to_random_id     // Catch:{ Exception -> 0x01b2 }
            java.lang.Long r2 = java.lang.Long.valueOf(r12)     // Catch:{ Exception -> 0x01b2 }
            r11.add(r2)     // Catch:{ Exception -> 0x01b2 }
        L_0x016e:
            long r12 = r10.reply_to_random_id     // Catch:{ Exception -> 0x01b2 }
            java.lang.Object r2 = r8.get(r12)     // Catch:{ Exception -> 0x01b2 }
            java.util.ArrayList r2 = (java.util.ArrayList) r2     // Catch:{ Exception -> 0x01b2 }
            if (r2 != 0) goto L_0x0182
            java.util.ArrayList r2 = new java.util.ArrayList     // Catch:{ Exception -> 0x01b2 }
            r2.<init>()     // Catch:{ Exception -> 0x01b2 }
            long r12 = r10.reply_to_random_id     // Catch:{ Exception -> 0x01b2 }
            r8.put(r12, r2)     // Catch:{ Exception -> 0x01b2 }
        L_0x0182:
            r2.add(r10)     // Catch:{ Exception -> 0x01b2 }
            goto L_0x0188
        L_0x0186:
            r26 = r13
        L_0x0188:
            r13 = r26
            r14 = 0
            goto L_0x006d
        L_0x018d:
            r26 = r13
            r1.dispose()     // Catch:{ Exception -> 0x01b2 }
            r2 = r39
            r1 = r44
            r4 = r45
            r15 = r49
            r10 = r3
            r28 = r6
            r27 = r7
            r32 = r8
            r14 = r11
            r3 = r26
            r5 = 0
            r6 = 0
            r22 = 1
            r23 = 0
            r29 = 0
            r30 = 0
            r34 = 0
            goto L_0x1298
        L_0x01b2:
            r0 = move-exception
            r2 = r39
            r15 = r49
            r1 = r0
            r10 = r3
            r13 = r4
            r9 = 0
            r20 = 0
            r21 = 1
        L_0x01bf:
            r23 = 0
        L_0x01c1:
            r29 = 0
            r30 = 0
            r34 = 0
        L_0x01c7:
            r3 = r44
        L_0x01c9:
            r4 = r45
            goto L_0x14b8
        L_0x01cd:
            r26 = r13
            int r1 = (int) r4
            if (r1 == 0) goto L_0x0bb9
            java.lang.String r14 = "SELECT inbox_max, unread_count, date, unread_count_i FROM dialogs WHERE did = "
            r15 = r49
            r2 = 3
            if (r15 != r2) goto L_0x0282
            if (r47 != 0) goto L_0x0282
            r2 = r39
            org.telegram.SQLite.SQLiteDatabase r12 = r2.database     // Catch:{ Exception -> 0x0277 }
            java.lang.StringBuilder r13 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0277 }
            r13.<init>()     // Catch:{ Exception -> 0x0277 }
            r13.append(r14)     // Catch:{ Exception -> 0x0277 }
            r13.append(r4)     // Catch:{ Exception -> 0x0277 }
            java.lang.String r13 = r13.toString()     // Catch:{ Exception -> 0x0277 }
            r27 = r8
            r14 = 0
            java.lang.Object[] r8 = new java.lang.Object[r14]     // Catch:{ Exception -> 0x0277 }
            org.telegram.SQLite.SQLiteCursor r8 = r12.queryFinalized(r13, r8)     // Catch:{ Exception -> 0x0277 }
            boolean r12 = r8.next()     // Catch:{ Exception -> 0x0277 }
            if (r12 == 0) goto L_0x023f
            int r12 = r8.intValue(r14)     // Catch:{ Exception -> 0x0277 }
            r13 = 1
            int r12 = r12 + r13
            int r14 = r8.intValue(r13)     // Catch:{ Exception -> 0x0233 }
            r13 = 2
            int r28 = r8.intValue(r13)     // Catch:{ Exception -> 0x021f }
            r13 = 3
            int r29 = r8.intValue(r13)     // Catch:{ Exception -> 0x0212 }
            goto L_0x0245
        L_0x0212:
            r0 = move-exception
            r1 = r0
            r10 = r3
            r23 = r12
            r9 = r14
            r29 = r28
            r20 = 0
            r21 = 0
            goto L_0x022b
        L_0x021f:
            r0 = move-exception
            r1 = r0
            r10 = r3
            r23 = r12
            r9 = r14
            r20 = 0
            r21 = 0
            r29 = 0
        L_0x022b:
            r30 = 0
            r34 = 0
        L_0x022f:
            r3 = r44
        L_0x0231:
            r13 = r4
            goto L_0x01c9
        L_0x0233:
            r0 = move-exception
            r1 = r0
            r10 = r3
            r13 = r4
            r23 = r12
        L_0x0239:
            r9 = 0
            r20 = 0
            r21 = 0
            goto L_0x01c1
        L_0x023f:
            r12 = 0
            r14 = 0
            r28 = 0
            r29 = 0
        L_0x0245:
            r8.dispose()     // Catch:{ Exception -> 0x0262 }
            r36 = r3
            r31 = r9
            r35 = r11
            r11 = r14
            r32 = r22
            r30 = r29
            r34 = 0
            r3 = r44
            r22 = r45
            r23 = r12
            r29 = r28
            r28 = r7
            r7 = 0
            goto L_0x0538
        L_0x0262:
            r0 = move-exception
            r1 = r0
            r10 = r3
            r23 = r12
            r9 = r14
            r30 = r29
            r20 = 0
            r21 = 0
            r34 = 0
            r3 = r44
            r13 = r4
            r29 = r28
            goto L_0x01c9
        L_0x0277:
            r0 = move-exception
            r1 = r0
            r10 = r3
            r13 = r4
            r9 = 0
            r20 = 0
            r21 = 0
            goto L_0x01bf
        L_0x0282:
            r2 = r39
            r27 = r8
            r8 = 1
            if (r15 == r8) goto L_0x0520
            r8 = 3
            if (r15 == r8) goto L_0x0520
            r8 = 4
            if (r15 == r8) goto L_0x0520
            if (r47 != 0) goto L_0x0520
            r8 = 2
            if (r15 != r8) goto L_0x04e2
            org.telegram.SQLite.SQLiteDatabase r8 = r2.database     // Catch:{ Exception -> 0x0277 }
            java.lang.StringBuilder r13 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0277 }
            r13.<init>()     // Catch:{ Exception -> 0x0277 }
            r13.append(r14)     // Catch:{ Exception -> 0x0277 }
            r13.append(r4)     // Catch:{ Exception -> 0x0277 }
            java.lang.String r13 = r13.toString()     // Catch:{ Exception -> 0x0277 }
            r28 = r7
            r14 = 0
            java.lang.Object[] r7 = new java.lang.Object[r14]     // Catch:{ Exception -> 0x0277 }
            org.telegram.SQLite.SQLiteCursor r7 = r8.queryFinalized(r13, r7)     // Catch:{ Exception -> 0x0277 }
            boolean r8 = r7.next()     // Catch:{ Exception -> 0x0277 }
            if (r8 == 0) goto L_0x0319
            int r8 = r7.intValue(r14)     // Catch:{ Exception -> 0x0277 }
            long r13 = (long) r8
            r22 = r8
            r8 = 1
            int r23 = r7.intValue(r8)     // Catch:{ Exception -> 0x0311 }
            r8 = 2
            int r29 = r7.intValue(r8)     // Catch:{ Exception -> 0x02f9 }
            r8 = 3
            int r30 = r7.intValue(r8)     // Catch:{ Exception -> 0x02ee }
            r16 = 0
            int r8 = (r13 > r16 ? 1 : (r13 == r16 ? 0 : -1))
            if (r8 == 0) goto L_0x02db
            if (r10 == 0) goto L_0x02db
            r31 = r9
            long r8 = (long) r10
            r18 = 32
            long r8 = r8 << r18
            long r8 = r8 | r13
            goto L_0x02de
        L_0x02db:
            r31 = r9
            r8 = r13
        L_0x02de:
            long r13 = (long) r6
            int r32 = (r4 > r13 ? 1 : (r4 == r13 ? 0 : -1))
            if (r32 != 0) goto L_0x02e8
            r23 = r22
            r13 = 1
            r14 = 0
            goto L_0x0327
        L_0x02e8:
            r14 = r23
            r13 = 1
            r23 = r22
            goto L_0x0327
        L_0x02ee:
            r0 = move-exception
            r1 = r0
            r10 = r3
            r13 = r4
            r9 = r23
            r20 = 0
            r21 = 0
            goto L_0x0305
        L_0x02f9:
            r0 = move-exception
            r1 = r0
            r10 = r3
            r13 = r4
            r9 = r23
            r20 = 0
            r21 = 0
            r29 = 0
        L_0x0305:
            r30 = 0
            r34 = 0
            r3 = r44
            r4 = r45
            r23 = r22
            goto L_0x14b8
        L_0x0311:
            r0 = move-exception
            r1 = r0
            r10 = r3
            r13 = r4
            r23 = r22
            goto L_0x0239
        L_0x0319:
            r31 = r9
            r8 = r22
            r13 = 0
            r14 = 0
            r23 = 0
            r29 = 0
            r30 = 0
            r22 = r45
        L_0x0327:
            r7.dispose()     // Catch:{ Exception -> 0x04d4 }
            if (r13 != 0) goto L_0x03cc
            org.telegram.SQLite.SQLiteDatabase r7 = r2.database     // Catch:{ Exception -> 0x03c0 }
            r32 = r8
            java.util.Locale r8 = java.util.Locale.US     // Catch:{ Exception -> 0x03c0 }
            java.lang.String r9 = "SELECT min(mid), max(date) FROM messages WHERE uid = %d AND out = 0 AND read_state IN(0,2) AND mid > 0"
            r35 = r11
            r34 = r13
            r13 = 1
            java.lang.Object[] r11 = new java.lang.Object[r13]     // Catch:{ Exception -> 0x03be }
            java.lang.Long r13 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x03be }
            r36 = r3
            r3 = 0
            r11[r3] = r13     // Catch:{ Exception -> 0x03b1 }
            java.lang.String r8 = java.lang.String.format(r8, r9, r11)     // Catch:{ Exception -> 0x03b1 }
            java.lang.Object[] r9 = new java.lang.Object[r3]     // Catch:{ Exception -> 0x03b1 }
            org.telegram.SQLite.SQLiteCursor r7 = r7.queryFinalized(r8, r9)     // Catch:{ Exception -> 0x03b1 }
            boolean r8 = r7.next()     // Catch:{ Exception -> 0x03b1 }
            if (r8 == 0) goto L_0x0369
            int r8 = r7.intValue(r3)     // Catch:{ Exception -> 0x03b1 }
            r3 = 1
            int r9 = r7.intValue(r3)     // Catch:{ Exception -> 0x0362 }
            r23 = r8
            r29 = r9
            goto L_0x0369
        L_0x0362:
            r0 = move-exception
            r3 = r44
            r1 = r0
            r23 = r8
            goto L_0x03b5
        L_0x0369:
            r7.dispose()     // Catch:{ Exception -> 0x03b1 }
            if (r23 == 0) goto L_0x03ac
            org.telegram.SQLite.SQLiteDatabase r3 = r2.database     // Catch:{ Exception -> 0x03b1 }
            java.util.Locale r7 = java.util.Locale.US     // Catch:{ Exception -> 0x03b1 }
            java.lang.String r8 = "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid >= %d AND out = 0 AND read_state IN(0,2)"
            r9 = 2
            java.lang.Object[] r11 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x03b1 }
            java.lang.Long r9 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x03b1 }
            r13 = 0
            r11[r13] = r9     // Catch:{ Exception -> 0x03b1 }
            java.lang.Integer r9 = java.lang.Integer.valueOf(r23)     // Catch:{ Exception -> 0x03b1 }
            r20 = 1
            r11[r20] = r9     // Catch:{ Exception -> 0x03b1 }
            java.lang.String r7 = java.lang.String.format(r7, r8, r11)     // Catch:{ Exception -> 0x03b1 }
            java.lang.Object[] r8 = new java.lang.Object[r13]     // Catch:{ Exception -> 0x03b1 }
            org.telegram.SQLite.SQLiteCursor r3 = r3.queryFinalized(r7, r8)     // Catch:{ Exception -> 0x03b1 }
            boolean r7 = r3.next()     // Catch:{ Exception -> 0x03b1 }
            if (r7 == 0) goto L_0x039b
            int r7 = r3.intValue(r13)     // Catch:{ Exception -> 0x03b1 }
            goto L_0x039c
        L_0x039b:
            r7 = r14
        L_0x039c:
            r3.dispose()     // Catch:{ Exception -> 0x03a4 }
            r3 = r44
            r11 = r7
            goto L_0x04f9
        L_0x03a4:
            r0 = move-exception
            r3 = r44
            r1 = r0
            r13 = r4
            r9 = r7
            goto L_0x0518
        L_0x03ac:
            r3 = r44
            r11 = r14
            goto L_0x04f9
        L_0x03b1:
            r0 = move-exception
            r3 = r44
            r1 = r0
        L_0x03b5:
            r9 = r14
            r10 = r36
            r20 = 0
            r21 = 0
            goto L_0x0231
        L_0x03be:
            r0 = move-exception
            goto L_0x03c3
        L_0x03c0:
            r0 = move-exception
            r34 = r13
        L_0x03c3:
            r1 = r0
            r10 = r3
            r9 = r14
            r20 = 0
            r21 = 0
            goto L_0x022f
        L_0x03cc:
            r36 = r3
            r32 = r8
            r35 = r11
            r34 = r13
            if (r22 != 0) goto L_0x0450
            org.telegram.SQLite.SQLiteDatabase r3 = r2.database     // Catch:{ Exception -> 0x044c }
            java.util.Locale r7 = java.util.Locale.US     // Catch:{ Exception -> 0x044c }
            java.lang.String r8 = "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid > 0 AND out = 0 AND read_state IN(0,2)"
            r9 = 1
            java.lang.Object[] r11 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x044c }
            java.lang.Long r9 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x044c }
            r13 = 0
            r11[r13] = r9     // Catch:{ Exception -> 0x044c }
            java.lang.String r7 = java.lang.String.format(r7, r8, r11)     // Catch:{ Exception -> 0x044c }
            java.lang.Object[] r8 = new java.lang.Object[r13]     // Catch:{ Exception -> 0x044c }
            org.telegram.SQLite.SQLiteCursor r3 = r3.queryFinalized(r7, r8)     // Catch:{ Exception -> 0x044c }
            boolean r7 = r3.next()     // Catch:{ Exception -> 0x044c }
            if (r7 == 0) goto L_0x03fb
            int r7 = r3.intValue(r13)     // Catch:{ Exception -> 0x03b1 }
            goto L_0x03fc
        L_0x03fb:
            r7 = 0
        L_0x03fc:
            r3.dispose()     // Catch:{ Exception -> 0x044c }
            if (r7 != r14) goto L_0x0443
            org.telegram.SQLite.SQLiteDatabase r3 = r2.database     // Catch:{ Exception -> 0x044c }
            java.util.Locale r7 = java.util.Locale.US     // Catch:{ Exception -> 0x044c }
            java.lang.String r8 = "SELECT min(mid) FROM messages WHERE uid = %d AND out = 0 AND read_state IN(0,2) AND mid > 0"
            r9 = 1
            java.lang.Object[] r11 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x044c }
            java.lang.Long r9 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x044c }
            r13 = 0
            r11[r13] = r9     // Catch:{ Exception -> 0x044c }
            java.lang.String r7 = java.lang.String.format(r7, r8, r11)     // Catch:{ Exception -> 0x044c }
            java.lang.Object[] r8 = new java.lang.Object[r13]     // Catch:{ Exception -> 0x044c }
            org.telegram.SQLite.SQLiteCursor r3 = r3.queryFinalized(r7, r8)     // Catch:{ Exception -> 0x044c }
            boolean r7 = r3.next()     // Catch:{ Exception -> 0x044c }
            if (r7 == 0) goto L_0x043c
            int r7 = r3.intValue(r13)     // Catch:{ Exception -> 0x044c }
            long r8 = (long) r7
            r16 = 0
            int r11 = (r8 > r16 ? 1 : (r8 == r16 ? 0 : -1))
            if (r11 == 0) goto L_0x0436
            if (r10 == 0) goto L_0x0436
            r11 = r14
            long r13 = (long) r10
            r18 = 32
            long r13 = r13 << r18
            long r8 = r8 | r13
            goto L_0x0437
        L_0x0436:
            r11 = r14
        L_0x0437:
            r22 = r7
            r23 = r22
            goto L_0x043f
        L_0x043c:
            r11 = r14
            r8 = r32
        L_0x043f:
            r3.dispose()     // Catch:{ Exception -> 0x04d0 }
            goto L_0x0446
        L_0x0443:
            r11 = r14
            r8 = r32
        L_0x0446:
            r3 = r44
            r32 = r8
            goto L_0x04f9
        L_0x044c:
            r0 = move-exception
            r11 = r14
            goto L_0x04d1
        L_0x0450:
            r11 = r14
            org.telegram.SQLite.SQLiteDatabase r3 = r2.database     // Catch:{ Exception -> 0x04d0 }
            java.util.Locale r7 = java.util.Locale.US     // Catch:{ Exception -> 0x04d0 }
            java.lang.String r8 = "SELECT start, end FROM messages_holes WHERE uid = %d AND start < %d AND end > %d"
            r9 = 3
            java.lang.Object[] r13 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x04d0 }
            java.lang.Long r9 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x04d0 }
            r14 = 0
            r13[r14] = r9     // Catch:{ Exception -> 0x04d0 }
            java.lang.Integer r9 = java.lang.Integer.valueOf(r22)     // Catch:{ Exception -> 0x04d0 }
            r14 = 1
            r13[r14] = r9     // Catch:{ Exception -> 0x04d0 }
            java.lang.Integer r9 = java.lang.Integer.valueOf(r22)     // Catch:{ Exception -> 0x04d0 }
            r14 = 2
            r13[r14] = r9     // Catch:{ Exception -> 0x04d0 }
            java.lang.String r7 = java.lang.String.format(r7, r8, r13)     // Catch:{ Exception -> 0x04d0 }
            r8 = 0
            java.lang.Object[] r9 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x04d0 }
            org.telegram.SQLite.SQLiteCursor r3 = r3.queryFinalized(r7, r9)     // Catch:{ Exception -> 0x04d0 }
            boolean r7 = r3.next()     // Catch:{ Exception -> 0x04d0 }
            if (r7 != 0) goto L_0x0482
            r7 = 1
            goto L_0x0483
        L_0x0482:
            r7 = 0
        L_0x0483:
            r3.dispose()     // Catch:{ Exception -> 0x04d0 }
            if (r7 == 0) goto L_0x04cd
            org.telegram.SQLite.SQLiteDatabase r3 = r2.database     // Catch:{ Exception -> 0x04d0 }
            java.util.Locale r7 = java.util.Locale.US     // Catch:{ Exception -> 0x04d0 }
            java.lang.String r8 = "SELECT min(mid) FROM messages WHERE uid = %d AND out = 0 AND read_state IN(0,2) AND mid > %d"
            r9 = 2
            java.lang.Object[] r13 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x04d0 }
            java.lang.Long r9 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x04d0 }
            r14 = 0
            r13[r14] = r9     // Catch:{ Exception -> 0x04d0 }
            java.lang.Integer r9 = java.lang.Integer.valueOf(r22)     // Catch:{ Exception -> 0x04d0 }
            r20 = 1
            r13[r20] = r9     // Catch:{ Exception -> 0x04d0 }
            java.lang.String r7 = java.lang.String.format(r7, r8, r13)     // Catch:{ Exception -> 0x04d0 }
            java.lang.Object[] r8 = new java.lang.Object[r14]     // Catch:{ Exception -> 0x04d0 }
            org.telegram.SQLite.SQLiteCursor r3 = r3.queryFinalized(r7, r8)     // Catch:{ Exception -> 0x04d0 }
            boolean r7 = r3.next()     // Catch:{ Exception -> 0x04d0 }
            if (r7 == 0) goto L_0x04c6
            int r7 = r3.intValue(r14)     // Catch:{ Exception -> 0x04d0 }
            long r8 = (long) r7     // Catch:{ Exception -> 0x04d0 }
            r13 = 0
            int r22 = (r8 > r13 ? 1 : (r8 == r13 ? 0 : -1))
            if (r22 == 0) goto L_0x04c3
            if (r10 == 0) goto L_0x04c3
            long r13 = (long) r10     // Catch:{ Exception -> 0x04d0 }
            r18 = 32
            long r13 = r13 << r18
            long r8 = r8 | r13
        L_0x04c3:
            r22 = r7
            goto L_0x04c8
        L_0x04c6:
            r8 = r32
        L_0x04c8:
            r3.dispose()     // Catch:{ Exception -> 0x04d0 }
            goto L_0x0446
        L_0x04cd:
            r3 = r44
            goto L_0x04f9
        L_0x04d0:
            r0 = move-exception
        L_0x04d1:
            r3 = r44
            goto L_0x0515
        L_0x04d4:
            r0 = move-exception
            r34 = r13
            r11 = r14
            r1 = r0
            r10 = r3
            r13 = r4
            r9 = r11
            r20 = 0
            r21 = 0
            goto L_0x01c7
        L_0x04e2:
            r36 = r3
            r28 = r7
            r31 = r9
            r35 = r11
            r3 = r44
            r32 = r22
            r11 = 0
            r23 = 0
            r29 = 0
            r30 = 0
            r34 = 0
            r22 = r45
        L_0x04f9:
            if (r3 > r11) goto L_0x0503
            if (r11 >= r12) goto L_0x04fe
            goto L_0x0503
        L_0x04fe:
            int r7 = r11 - r3
            int r3 = r3 + 10
            goto L_0x0538
        L_0x0503:
            int r7 = r11 + 10
            int r3 = java.lang.Math.max(r3, r7)     // Catch:{ Exception -> 0x0514 }
            r7 = 0
            if (r11 >= r12) goto L_0x0538
            r11 = 0
            r23 = 0
            r32 = 0
            r34 = 0
            goto L_0x0538
        L_0x0514:
            r0 = move-exception
        L_0x0515:
            r1 = r0
            r13 = r4
            r9 = r11
        L_0x0518:
            r10 = r36
            r20 = 0
            r21 = 0
            goto L_0x01c9
        L_0x0520:
            r36 = r3
            r28 = r7
            r31 = r9
            r35 = r11
            r3 = r44
            r32 = r22
            r7 = 0
            r11 = 0
            r23 = 0
            r29 = 0
            r30 = 0
            r34 = 0
            r22 = r45
        L_0x0538:
            org.telegram.SQLite.SQLiteDatabase r8 = r2.database     // Catch:{ Exception -> 0x0baa }
            java.util.Locale r9 = java.util.Locale.US     // Catch:{ Exception -> 0x0baa }
            java.lang.String r12 = "SELECT start FROM messages_holes WHERE uid = %d AND start IN (0, 1)"
            r13 = 1
            java.lang.Object[] r14 = new java.lang.Object[r13]     // Catch:{ Exception -> 0x0baa }
            java.lang.Long r13 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x0baa }
            r37 = r1
            r1 = 0
            r14[r1] = r13     // Catch:{ Exception -> 0x0baa }
            java.lang.String r9 = java.lang.String.format(r9, r12, r14)     // Catch:{ Exception -> 0x0baa }
            java.lang.Object[] r12 = new java.lang.Object[r1]     // Catch:{ Exception -> 0x0baa }
            org.telegram.SQLite.SQLiteCursor r8 = r8.queryFinalized(r9, r12)     // Catch:{ Exception -> 0x0baa }
            boolean r9 = r8.next()     // Catch:{ Exception -> 0x0baa }
            if (r9 == 0) goto L_0x0563
            int r9 = r8.intValue(r1)     // Catch:{ Exception -> 0x0514 }
            r1 = 1
            if (r9 != r1) goto L_0x05aa
            r1 = 1
            goto L_0x05ab
        L_0x0563:
            r8.dispose()     // Catch:{ Exception -> 0x0baa }
            org.telegram.SQLite.SQLiteDatabase r1 = r2.database     // Catch:{ Exception -> 0x0baa }
            java.util.Locale r8 = java.util.Locale.US     // Catch:{ Exception -> 0x0baa }
            java.lang.String r9 = "SELECT min(mid) FROM messages WHERE uid = %d AND mid > 0"
            r12 = 1
            java.lang.Object[] r13 = new java.lang.Object[r12]     // Catch:{ Exception -> 0x0baa }
            java.lang.Long r12 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x0baa }
            r14 = 0
            r13[r14] = r12     // Catch:{ Exception -> 0x0baa }
            java.lang.String r8 = java.lang.String.format(r8, r9, r13)     // Catch:{ Exception -> 0x0baa }
            java.lang.Object[] r9 = new java.lang.Object[r14]     // Catch:{ Exception -> 0x0baa }
            org.telegram.SQLite.SQLiteCursor r8 = r1.queryFinalized(r8, r9)     // Catch:{ Exception -> 0x0baa }
            boolean r1 = r8.next()     // Catch:{ Exception -> 0x0baa }
            if (r1 == 0) goto L_0x05aa
            int r1 = r8.intValue(r14)     // Catch:{ Exception -> 0x0514 }
            if (r1 == 0) goto L_0x05aa
            org.telegram.SQLite.SQLiteDatabase r9 = r2.database     // Catch:{ Exception -> 0x0514 }
            java.lang.String r12 = "REPLACE INTO messages_holes VALUES(?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r9 = r9.executeFast(r12)     // Catch:{ Exception -> 0x0514 }
            r9.requery()     // Catch:{ Exception -> 0x0514 }
            r12 = 1
            r9.bindLong(r12, r4)     // Catch:{ Exception -> 0x0514 }
            r12 = 2
            r13 = 0
            r9.bindInteger(r12, r13)     // Catch:{ Exception -> 0x0514 }
            r12 = 3
            r9.bindInteger(r12, r1)     // Catch:{ Exception -> 0x0514 }
            r9.step()     // Catch:{ Exception -> 0x0514 }
            r9.dispose()     // Catch:{ Exception -> 0x0514 }
        L_0x05aa:
            r1 = 0
        L_0x05ab:
            r8.dispose()     // Catch:{ Exception -> 0x0b99 }
            java.lang.String r8 = "SELECT end FROM messages_holes WHERE uid = %d AND end <= %d ORDER BY end DESC LIMIT 1"
            java.lang.String r9 = "SELECT max(mid) FROM messages WHERE uid = %d AND mid > 0"
            r12 = 3
            if (r15 == r12) goto L_0x0859
            r12 = 4
            if (r15 == r12) goto L_0x0859
            r12 = 2
            if (r34 == 0) goto L_0x05bf
            if (r15 != r12) goto L_0x05bf
            goto L_0x0859
        L_0x05bf:
            r13 = 1
            if (r15 != r13) goto L_0x067a
            org.telegram.SQLite.SQLiteDatabase r7 = r2.database     // Catch:{ Exception -> 0x066f }
            java.util.Locale r8 = java.util.Locale.US     // Catch:{ Exception -> 0x066f }
            java.lang.String r9 = "SELECT start, end FROM messages_holes WHERE uid = %d AND start >= %d AND start != 1 AND end != 1 ORDER BY start ASC LIMIT 1"
            java.lang.Object[] r13 = new java.lang.Object[r12]     // Catch:{ Exception -> 0x066f }
            java.lang.Long r12 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x066f }
            r14 = 0
            r13[r14] = r12     // Catch:{ Exception -> 0x066f }
            java.lang.Integer r12 = java.lang.Integer.valueOf(r45)     // Catch:{ Exception -> 0x066f }
            r20 = 1
            r13[r20] = r12     // Catch:{ Exception -> 0x066f }
            java.lang.String r8 = java.lang.String.format(r8, r9, r13)     // Catch:{ Exception -> 0x066f }
            java.lang.Object[] r9 = new java.lang.Object[r14]     // Catch:{ Exception -> 0x066f }
            org.telegram.SQLite.SQLiteCursor r7 = r7.queryFinalized(r8, r9)     // Catch:{ Exception -> 0x066f }
            boolean r8 = r7.next()     // Catch:{ Exception -> 0x066f }
            if (r8 == 0) goto L_0x05f6
            int r8 = r7.intValue(r14)     // Catch:{ Exception -> 0x066f }
            long r8 = (long) r8     // Catch:{ Exception -> 0x066f }
            if (r10 == 0) goto L_0x05f8
            long r12 = (long) r10     // Catch:{ Exception -> 0x066f }
            r10 = 32
            long r12 = r12 << r10
            long r8 = r8 | r12
            goto L_0x05f8
        L_0x05f6:
            r8 = 0
        L_0x05f8:
            r7.dispose()     // Catch:{ Exception -> 0x066f }
            r12 = 0
            int r7 = (r8 > r12 ? 1 : (r8 == r12 ? 0 : -1))
            if (r7 == 0) goto L_0x063d
            org.telegram.SQLite.SQLiteDatabase r7 = r2.database     // Catch:{ Exception -> 0x066f }
            java.util.Locale r10 = java.util.Locale.US     // Catch:{ Exception -> 0x066f }
            java.lang.String r12 = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention, m.imp FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date >= %d AND m.mid > %d AND m.mid <= %d ORDER BY m.date ASC, m.mid ASC LIMIT %d"
            r13 = 5
            java.lang.Object[] r14 = new java.lang.Object[r13]     // Catch:{ Exception -> 0x066f }
            java.lang.Long r13 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x066f }
            r20 = 0
            r14[r20] = r13     // Catch:{ Exception -> 0x066f }
            java.lang.Integer r13 = java.lang.Integer.valueOf(r47)     // Catch:{ Exception -> 0x066f }
            r21 = 1
            r14[r21] = r13     // Catch:{ Exception -> 0x066f }
            java.lang.Long r13 = java.lang.Long.valueOf(r32)     // Catch:{ Exception -> 0x066f }
            r25 = 2
            r14[r25] = r13     // Catch:{ Exception -> 0x066f }
            java.lang.Long r8 = java.lang.Long.valueOf(r8)     // Catch:{ Exception -> 0x066f }
            r9 = 3
            r14[r9] = r8     // Catch:{ Exception -> 0x066f }
            java.lang.Integer r8 = java.lang.Integer.valueOf(r3)     // Catch:{ Exception -> 0x066f }
            r9 = 4
            r14[r9] = r8     // Catch:{ Exception -> 0x066f }
            java.lang.String r8 = java.lang.String.format(r10, r12, r14)     // Catch:{ Exception -> 0x066f }
            r9 = 0
            java.lang.Object[] r10 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x066f }
            org.telegram.SQLite.SQLiteCursor r7 = r7.queryFinalized(r8, r10)     // Catch:{ Exception -> 0x066f }
            goto L_0x075c
        L_0x063d:
            org.telegram.SQLite.SQLiteDatabase r7 = r2.database     // Catch:{ Exception -> 0x066f }
            java.util.Locale r8 = java.util.Locale.US     // Catch:{ Exception -> 0x066f }
            java.lang.String r9 = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention, m.imp FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date >= %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d"
            r10 = 4
            java.lang.Object[] r12 = new java.lang.Object[r10]     // Catch:{ Exception -> 0x066f }
            java.lang.Long r10 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x066f }
            r13 = 0
            r12[r13] = r10     // Catch:{ Exception -> 0x066f }
            java.lang.Integer r10 = java.lang.Integer.valueOf(r47)     // Catch:{ Exception -> 0x066f }
            r13 = 1
            r12[r13] = r10     // Catch:{ Exception -> 0x066f }
            java.lang.Long r10 = java.lang.Long.valueOf(r32)     // Catch:{ Exception -> 0x066f }
            r13 = 2
            r12[r13] = r10     // Catch:{ Exception -> 0x066f }
            java.lang.Integer r10 = java.lang.Integer.valueOf(r3)     // Catch:{ Exception -> 0x066f }
            r13 = 3
            r12[r13] = r10     // Catch:{ Exception -> 0x066f }
            java.lang.String r8 = java.lang.String.format(r8, r9, r12)     // Catch:{ Exception -> 0x066f }
            r9 = 0
            java.lang.Object[] r10 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x066f }
            org.telegram.SQLite.SQLiteCursor r7 = r7.queryFinalized(r8, r10)     // Catch:{ Exception -> 0x066f }
            goto L_0x075c
        L_0x066f:
            r0 = move-exception
            r21 = r1
            r13 = r4
            r9 = r11
            r10 = r36
            r20 = 0
            goto L_0x1488
        L_0x067a:
            if (r47 == 0) goto L_0x076c
            r12 = 0
            int r9 = (r32 > r12 ? 1 : (r32 == r12 ? 0 : -1))
            if (r9 == 0) goto L_0x072c
            org.telegram.SQLite.SQLiteDatabase r7 = r2.database     // Catch:{ Exception -> 0x066f }
            java.util.Locale r9 = java.util.Locale.US     // Catch:{ Exception -> 0x066f }
            r12 = 2
            java.lang.Object[] r13 = new java.lang.Object[r12]     // Catch:{ Exception -> 0x066f }
            java.lang.Long r12 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x066f }
            r14 = 0
            r13[r14] = r12     // Catch:{ Exception -> 0x066f }
            java.lang.Integer r12 = java.lang.Integer.valueOf(r45)     // Catch:{ Exception -> 0x066f }
            r20 = 1
            r13[r20] = r12     // Catch:{ Exception -> 0x066f }
            java.lang.String r8 = java.lang.String.format(r9, r8, r13)     // Catch:{ Exception -> 0x066f }
            java.lang.Object[] r9 = new java.lang.Object[r14]     // Catch:{ Exception -> 0x066f }
            org.telegram.SQLite.SQLiteCursor r7 = r7.queryFinalized(r8, r9)     // Catch:{ Exception -> 0x066f }
            boolean r8 = r7.next()     // Catch:{ Exception -> 0x066f }
            if (r8 == 0) goto L_0x06b5
            int r8 = r7.intValue(r14)     // Catch:{ Exception -> 0x066f }
            long r8 = (long) r8     // Catch:{ Exception -> 0x066f }
            if (r10 == 0) goto L_0x06b7
            long r12 = (long) r10     // Catch:{ Exception -> 0x066f }
            r10 = 32
            long r12 = r12 << r10
            long r8 = r8 | r12
            goto L_0x06b7
        L_0x06b5:
            r8 = 0
        L_0x06b7:
            r7.dispose()     // Catch:{ Exception -> 0x066f }
            r12 = 0
            int r7 = (r8 > r12 ? 1 : (r8 == r12 ? 0 : -1))
            if (r7 == 0) goto L_0x06fb
            org.telegram.SQLite.SQLiteDatabase r7 = r2.database     // Catch:{ Exception -> 0x066f }
            java.util.Locale r10 = java.util.Locale.US     // Catch:{ Exception -> 0x066f }
            java.lang.String r12 = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention, m.imp FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d AND m.mid < %d AND (m.mid >= %d OR m.mid < 0) ORDER BY m.date DESC, m.mid DESC LIMIT %d"
            r13 = 5
            java.lang.Object[] r14 = new java.lang.Object[r13]     // Catch:{ Exception -> 0x066f }
            java.lang.Long r13 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x066f }
            r20 = 0
            r14[r20] = r13     // Catch:{ Exception -> 0x066f }
            java.lang.Integer r13 = java.lang.Integer.valueOf(r47)     // Catch:{ Exception -> 0x066f }
            r21 = 1
            r14[r21] = r13     // Catch:{ Exception -> 0x066f }
            java.lang.Long r13 = java.lang.Long.valueOf(r32)     // Catch:{ Exception -> 0x066f }
            r25 = 2
            r14[r25] = r13     // Catch:{ Exception -> 0x066f }
            java.lang.Long r8 = java.lang.Long.valueOf(r8)     // Catch:{ Exception -> 0x066f }
            r9 = 3
            r14[r9] = r8     // Catch:{ Exception -> 0x066f }
            java.lang.Integer r8 = java.lang.Integer.valueOf(r3)     // Catch:{ Exception -> 0x066f }
            r9 = 4
            r14[r9] = r8     // Catch:{ Exception -> 0x066f }
            java.lang.String r8 = java.lang.String.format(r10, r12, r14)     // Catch:{ Exception -> 0x066f }
            r9 = 0
            java.lang.Object[] r10 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x066f }
            org.telegram.SQLite.SQLiteCursor r7 = r7.queryFinalized(r8, r10)     // Catch:{ Exception -> 0x066f }
            goto L_0x075c
        L_0x06fb:
            org.telegram.SQLite.SQLiteDatabase r7 = r2.database     // Catch:{ Exception -> 0x066f }
            java.util.Locale r8 = java.util.Locale.US     // Catch:{ Exception -> 0x066f }
            java.lang.String r9 = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention, m.imp FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d AND m.mid < %d ORDER BY m.date DESC, m.mid DESC LIMIT %d"
            r10 = 4
            java.lang.Object[] r12 = new java.lang.Object[r10]     // Catch:{ Exception -> 0x066f }
            java.lang.Long r10 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x066f }
            r13 = 0
            r12[r13] = r10     // Catch:{ Exception -> 0x066f }
            java.lang.Integer r10 = java.lang.Integer.valueOf(r47)     // Catch:{ Exception -> 0x066f }
            r13 = 1
            r12[r13] = r10     // Catch:{ Exception -> 0x066f }
            java.lang.Long r10 = java.lang.Long.valueOf(r32)     // Catch:{ Exception -> 0x066f }
            r13 = 2
            r12[r13] = r10     // Catch:{ Exception -> 0x066f }
            java.lang.Integer r10 = java.lang.Integer.valueOf(r3)     // Catch:{ Exception -> 0x066f }
            r13 = 3
            r12[r13] = r10     // Catch:{ Exception -> 0x066f }
            java.lang.String r8 = java.lang.String.format(r8, r9, r12)     // Catch:{ Exception -> 0x066f }
            r9 = 0
            java.lang.Object[] r10 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x066f }
            org.telegram.SQLite.SQLiteCursor r7 = r7.queryFinalized(r8, r10)     // Catch:{ Exception -> 0x066f }
            goto L_0x075c
        L_0x072c:
            org.telegram.SQLite.SQLiteDatabase r8 = r2.database     // Catch:{ Exception -> 0x066f }
            java.util.Locale r9 = java.util.Locale.US     // Catch:{ Exception -> 0x066f }
            java.lang.String r10 = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention, m.imp FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d,%d"
            r12 = 4
            java.lang.Object[] r13 = new java.lang.Object[r12]     // Catch:{ Exception -> 0x066f }
            java.lang.Long r12 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x066f }
            r14 = 0
            r13[r14] = r12     // Catch:{ Exception -> 0x066f }
            java.lang.Integer r12 = java.lang.Integer.valueOf(r47)     // Catch:{ Exception -> 0x066f }
            r14 = 1
            r13[r14] = r12     // Catch:{ Exception -> 0x066f }
            java.lang.Integer r7 = java.lang.Integer.valueOf(r7)     // Catch:{ Exception -> 0x066f }
            r12 = 2
            r13[r12] = r7     // Catch:{ Exception -> 0x066f }
            java.lang.Integer r7 = java.lang.Integer.valueOf(r3)     // Catch:{ Exception -> 0x066f }
            r12 = 3
            r13[r12] = r7     // Catch:{ Exception -> 0x066f }
            java.lang.String r7 = java.lang.String.format(r9, r10, r13)     // Catch:{ Exception -> 0x066f }
            r9 = 0
            java.lang.Object[] r10 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x066f }
            org.telegram.SQLite.SQLiteCursor r7 = r8.queryFinalized(r7, r10)     // Catch:{ Exception -> 0x066f }
        L_0x075c:
            r4 = r45
            r10 = r1
            r9 = r11
            r1 = r22
            r13 = r29
            r5 = 0
            r8 = 0
        L_0x0766:
            r29 = r6
            r6 = r30
            goto L_0x0edd
        L_0x076c:
            org.telegram.SQLite.SQLiteDatabase r8 = r2.database     // Catch:{ Exception -> 0x084b }
            java.util.Locale r12 = java.util.Locale.US     // Catch:{ Exception -> 0x084b }
            r13 = 1
            java.lang.Object[] r14 = new java.lang.Object[r13]     // Catch:{ Exception -> 0x084b }
            java.lang.Long r13 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x084b }
            r44 = r1
            r1 = 0
            r14[r1] = r13     // Catch:{ Exception -> 0x0849 }
            java.lang.String r9 = java.lang.String.format(r12, r9, r14)     // Catch:{ Exception -> 0x0849 }
            java.lang.Object[] r12 = new java.lang.Object[r1]     // Catch:{ Exception -> 0x0849 }
            org.telegram.SQLite.SQLiteCursor r8 = r8.queryFinalized(r9, r12)     // Catch:{ Exception -> 0x0849 }
            boolean r9 = r8.next()     // Catch:{ Exception -> 0x0849 }
            if (r9 == 0) goto L_0x0791
            int r9 = r8.intValue(r1)     // Catch:{ Exception -> 0x0849 }
            goto L_0x0792
        L_0x0791:
            r9 = 0
        L_0x0792:
            r8.dispose()     // Catch:{ Exception -> 0x083b }
            org.telegram.SQLite.SQLiteDatabase r1 = r2.database     // Catch:{ Exception -> 0x083b }
            java.util.Locale r8 = java.util.Locale.US     // Catch:{ Exception -> 0x083b }
            java.lang.String r12 = "SELECT max(end) FROM messages_holes WHERE uid = %d"
            r13 = 1
            java.lang.Object[] r14 = new java.lang.Object[r13]     // Catch:{ Exception -> 0x083b }
            java.lang.Long r13 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x083b }
            r47 = r9
            r9 = 0
            r14[r9] = r13     // Catch:{ Exception -> 0x0839 }
            java.lang.String r8 = java.lang.String.format(r8, r12, r14)     // Catch:{ Exception -> 0x0839 }
            java.lang.Object[] r12 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x0839 }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r8, r12)     // Catch:{ Exception -> 0x0839 }
            boolean r8 = r1.next()     // Catch:{ Exception -> 0x0839 }
            if (r8 == 0) goto L_0x07c4
            int r8 = r1.intValue(r9)     // Catch:{ Exception -> 0x0839 }
            long r8 = (long) r8     // Catch:{ Exception -> 0x0839 }
            if (r10 == 0) goto L_0x07c6
            long r12 = (long) r10     // Catch:{ Exception -> 0x0839 }
            r10 = 32
            long r12 = r12 << r10
            long r8 = r8 | r12
            goto L_0x07c6
        L_0x07c4:
            r8 = 0
        L_0x07c6:
            r1.dispose()     // Catch:{ Exception -> 0x0839 }
            r12 = 0
            int r1 = (r8 > r12 ? 1 : (r8 == r12 ? 0 : -1))
            if (r1 == 0) goto L_0x0801
            org.telegram.SQLite.SQLiteDatabase r1 = r2.database     // Catch:{ Exception -> 0x0839 }
            java.util.Locale r10 = java.util.Locale.US     // Catch:{ Exception -> 0x0839 }
            java.lang.String r12 = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention, m.imp FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND (m.mid >= %d OR m.mid < 0) ORDER BY m.date DESC, m.mid DESC LIMIT %d,%d"
            r13 = 4
            java.lang.Object[] r14 = new java.lang.Object[r13]     // Catch:{ Exception -> 0x0839 }
            java.lang.Long r13 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x0839 }
            r20 = 0
            r14[r20] = r13     // Catch:{ Exception -> 0x0839 }
            java.lang.Long r8 = java.lang.Long.valueOf(r8)     // Catch:{ Exception -> 0x0839 }
            r9 = 1
            r14[r9] = r8     // Catch:{ Exception -> 0x0839 }
            java.lang.Integer r7 = java.lang.Integer.valueOf(r7)     // Catch:{ Exception -> 0x0839 }
            r8 = 2
            r14[r8] = r7     // Catch:{ Exception -> 0x0839 }
            java.lang.Integer r7 = java.lang.Integer.valueOf(r3)     // Catch:{ Exception -> 0x0839 }
            r8 = 3
            r14[r8] = r7     // Catch:{ Exception -> 0x0839 }
            java.lang.String r7 = java.lang.String.format(r10, r12, r14)     // Catch:{ Exception -> 0x0839 }
            r8 = 0
            java.lang.Object[] r9 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x0839 }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r7, r9)     // Catch:{ Exception -> 0x0839 }
            goto L_0x082a
        L_0x0801:
            org.telegram.SQLite.SQLiteDatabase r1 = r2.database     // Catch:{ Exception -> 0x0839 }
            java.util.Locale r8 = java.util.Locale.US     // Catch:{ Exception -> 0x0839 }
            java.lang.String r9 = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention, m.imp FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d ORDER BY m.date DESC, m.mid DESC LIMIT %d,%d"
            r10 = 3
            java.lang.Object[] r12 = new java.lang.Object[r10]     // Catch:{ Exception -> 0x0839 }
            java.lang.Long r10 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x0839 }
            r13 = 0
            r12[r13] = r10     // Catch:{ Exception -> 0x0839 }
            java.lang.Integer r7 = java.lang.Integer.valueOf(r7)     // Catch:{ Exception -> 0x0839 }
            r10 = 1
            r12[r10] = r7     // Catch:{ Exception -> 0x0839 }
            java.lang.Integer r7 = java.lang.Integer.valueOf(r3)     // Catch:{ Exception -> 0x0839 }
            r10 = 2
            r12[r10] = r7     // Catch:{ Exception -> 0x0839 }
            java.lang.String r7 = java.lang.String.format(r8, r9, r12)     // Catch:{ Exception -> 0x0839 }
            r8 = 0
            java.lang.Object[] r9 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x0839 }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r7, r9)     // Catch:{ Exception -> 0x0839 }
        L_0x082a:
            r7 = r1
            r10 = r44
            r4 = r45
            r8 = r47
            r9 = r11
            r1 = r22
            r13 = r29
            r5 = 0
            goto L_0x0766
        L_0x0839:
            r0 = move-exception
            goto L_0x083e
        L_0x083b:
            r0 = move-exception
            r47 = r9
        L_0x083e:
            r21 = r44
            r20 = r47
            r1 = r0
            r13 = r4
            r9 = r11
            r10 = r36
            goto L_0x01c9
        L_0x0849:
            r0 = move-exception
            goto L_0x084e
        L_0x084b:
            r0 = move-exception
            r44 = r1
        L_0x084e:
            r21 = r44
            r1 = r0
            r13 = r4
            r9 = r11
            r10 = r36
            r20 = 0
            goto L_0x01c9
        L_0x0859:
            r44 = r1
            org.telegram.SQLite.SQLiteDatabase r1 = r2.database     // Catch:{ Exception -> 0x0b97 }
            java.util.Locale r7 = java.util.Locale.US     // Catch:{ Exception -> 0x0b97 }
            r12 = 1
            java.lang.Object[] r13 = new java.lang.Object[r12]     // Catch:{ Exception -> 0x0b97 }
            java.lang.Long r12 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x0b97 }
            r14 = 0
            r13[r14] = r12     // Catch:{ Exception -> 0x0b97 }
            java.lang.String r7 = java.lang.String.format(r7, r9, r13)     // Catch:{ Exception -> 0x0b97 }
            java.lang.Object[] r9 = new java.lang.Object[r14]     // Catch:{ Exception -> 0x0b97 }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r7, r9)     // Catch:{ Exception -> 0x0b97 }
            boolean r7 = r1.next()     // Catch:{ Exception -> 0x0b97 }
            if (r7 == 0) goto L_0x087e
            int r7 = r1.intValue(r14)     // Catch:{ Exception -> 0x0849 }
            goto L_0x087f
        L_0x087e:
            r7 = 0
        L_0x087f:
            r1.dispose()     // Catch:{ Exception -> 0x0b86 }
            r1 = 4
            if (r15 != r1) goto L_0x0979
            if (r46 == 0) goto L_0x0979
            org.telegram.SQLite.SQLiteDatabase r1 = r2.database     // Catch:{ Exception -> 0x0b86 }
            java.util.Locale r9 = java.util.Locale.US     // Catch:{ Exception -> 0x0b86 }
            java.lang.String r12 = "SELECT max(mid) FROM messages WHERE uid = %d AND date <= %d AND mid > 0"
            r13 = 2
            java.lang.Object[] r14 = new java.lang.Object[r13]     // Catch:{ Exception -> 0x0b86 }
            java.lang.Long r13 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x0b86 }
            r47 = r7
            r7 = 0
            r14[r7] = r13     // Catch:{ Exception -> 0x0b73 }
            java.lang.Integer r13 = java.lang.Integer.valueOf(r46)     // Catch:{ Exception -> 0x0b73 }
            r20 = 1
            r14[r20] = r13     // Catch:{ Exception -> 0x0b73 }
            java.lang.String r9 = java.lang.String.format(r9, r12, r14)     // Catch:{ Exception -> 0x0b73 }
            java.lang.Object[] r12 = new java.lang.Object[r7]     // Catch:{ Exception -> 0x0b73 }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r9, r12)     // Catch:{ Exception -> 0x0b73 }
            boolean r9 = r1.next()     // Catch:{ Exception -> 0x0b73 }
            if (r9 == 0) goto L_0x08b6
            int r9 = r1.intValue(r7)     // Catch:{ Exception -> 0x0839 }
            goto L_0x08b7
        L_0x08b6:
            r9 = -1
        L_0x08b7:
            r1.dispose()     // Catch:{ Exception -> 0x0b73 }
            org.telegram.SQLite.SQLiteDatabase r1 = r2.database     // Catch:{ Exception -> 0x0b73 }
            java.util.Locale r7 = java.util.Locale.US     // Catch:{ Exception -> 0x0b73 }
            java.lang.String r13 = "SELECT min(mid) FROM messages WHERE uid = %d AND date >= %d AND mid > 0"
            r14 = 2
            java.lang.Object[] r12 = new java.lang.Object[r14]     // Catch:{ Exception -> 0x0b73 }
            java.lang.Long r14 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x0b73 }
            r4 = 0
            r12[r4] = r14     // Catch:{ Exception -> 0x0b73 }
            java.lang.Integer r5 = java.lang.Integer.valueOf(r46)     // Catch:{ Exception -> 0x0b73 }
            r14 = 1
            r12[r14] = r5     // Catch:{ Exception -> 0x0b73 }
            java.lang.String r5 = java.lang.String.format(r7, r13, r12)     // Catch:{ Exception -> 0x0b73 }
            java.lang.Object[] r7 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x0b73 }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r5, r7)     // Catch:{ Exception -> 0x0b73 }
            boolean r5 = r1.next()     // Catch:{ Exception -> 0x0b73 }
            if (r5 == 0) goto L_0x08e6
            int r5 = r1.intValue(r4)     // Catch:{ Exception -> 0x0b73 }
            goto L_0x08e7
        L_0x08e6:
            r5 = -1
        L_0x08e7:
            r1.dispose()     // Catch:{ Exception -> 0x0b73 }
            r1 = -1
            if (r9 == r1) goto L_0x097b
            if (r5 == r1) goto L_0x097b
            if (r9 != r5) goto L_0x08f6
            r4 = r45
            r1 = r9
            goto L_0x097f
        L_0x08f6:
            org.telegram.SQLite.SQLiteDatabase r1 = r2.database     // Catch:{ Exception -> 0x0b73 }
            java.util.Locale r4 = java.util.Locale.US     // Catch:{ Exception -> 0x0b73 }
            java.lang.String r7 = "SELECT start FROM messages_holes WHERE uid = %d AND start <= %d AND end > %d"
            r12 = 3
            java.lang.Object[] r13 = new java.lang.Object[r12]     // Catch:{ Exception -> 0x0b73 }
            java.lang.Long r12 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x0b73 }
            r14 = 0
            r13[r14] = r12     // Catch:{ Exception -> 0x0b73 }
            java.lang.Integer r12 = java.lang.Integer.valueOf(r9)     // Catch:{ Exception -> 0x0b73 }
            r14 = 1
            r13[r14] = r12     // Catch:{ Exception -> 0x0b73 }
            java.lang.Integer r12 = java.lang.Integer.valueOf(r9)     // Catch:{ Exception -> 0x0b73 }
            r14 = 2
            r13[r14] = r12     // Catch:{ Exception -> 0x0b73 }
            java.lang.String r4 = java.lang.String.format(r4, r7, r13)     // Catch:{ Exception -> 0x0b73 }
            r7 = 0
            java.lang.Object[] r12 = new java.lang.Object[r7]     // Catch:{ Exception -> 0x0b73 }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r4, r12)     // Catch:{ Exception -> 0x0b73 }
            boolean r4 = r1.next()     // Catch:{ Exception -> 0x0b73 }
            if (r4 == 0) goto L_0x0926
            r9 = -1
        L_0x0926:
            r1.dispose()     // Catch:{ Exception -> 0x0b73 }
            r1 = -1
            if (r9 == r1) goto L_0x097b
            org.telegram.SQLite.SQLiteDatabase r1 = r2.database     // Catch:{ Exception -> 0x0b73 }
            java.util.Locale r4 = java.util.Locale.US     // Catch:{ Exception -> 0x0b73 }
            java.lang.String r7 = "SELECT start FROM messages_holes WHERE uid = %d AND start <= %d AND end > %d"
            r9 = 3
            java.lang.Object[] r12 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x0b73 }
            java.lang.Long r9 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x0b73 }
            r13 = 0
            r12[r13] = r9     // Catch:{ Exception -> 0x0b73 }
            java.lang.Integer r9 = java.lang.Integer.valueOf(r5)     // Catch:{ Exception -> 0x0b73 }
            r13 = 1
            r12[r13] = r9     // Catch:{ Exception -> 0x0b73 }
            java.lang.Integer r9 = java.lang.Integer.valueOf(r5)     // Catch:{ Exception -> 0x0b73 }
            r13 = 2
            r12[r13] = r9     // Catch:{ Exception -> 0x0b73 }
            java.lang.String r4 = java.lang.String.format(r4, r7, r12)     // Catch:{ Exception -> 0x0b73 }
            r7 = 0
            java.lang.Object[] r9 = new java.lang.Object[r7]     // Catch:{ Exception -> 0x0b73 }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r4, r9)     // Catch:{ Exception -> 0x0b73 }
            boolean r4 = r1.next()     // Catch:{ Exception -> 0x0b73 }
            if (r4 == 0) goto L_0x095c
            r5 = -1
        L_0x095c:
            r1.dispose()     // Catch:{ Exception -> 0x0b73 }
            r1 = -1
            if (r5 == r1) goto L_0x097b
            long r12 = (long) r5
            r16 = 0
            int r1 = (r12 > r16 ? 1 : (r12 == r16 ? 0 : -1))
            if (r1 == 0) goto L_0x0974
            if (r10 == 0) goto L_0x0974
            r1 = r5
            long r4 = (long) r10
            r7 = 32
            long r4 = r4 << r7
            long r32 = r12 | r4
            r4 = r1
            goto L_0x097f
        L_0x0974:
            r1 = r5
            r4 = r1
            r32 = r12
            goto L_0x097f
        L_0x0979:
            r47 = r7
        L_0x097b:
            r4 = r45
            r1 = r22
        L_0x097f:
            if (r1 == 0) goto L_0x0983
            r5 = 1
            goto L_0x0984
        L_0x0983:
            r5 = 0
        L_0x0984:
            if (r5 == 0) goto L_0x09c4
            org.telegram.SQLite.SQLiteDatabase r7 = r2.database     // Catch:{ Exception -> 0x09bd }
            java.util.Locale r9 = java.util.Locale.US     // Catch:{ Exception -> 0x09bd }
            java.lang.String r12 = "SELECT start FROM messages_holes WHERE uid = %d AND start < %d AND end > %d"
            r13 = 3
            java.lang.Object[] r14 = new java.lang.Object[r13]     // Catch:{ Exception -> 0x09bd }
            java.lang.Long r13 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x09bd }
            r20 = 0
            r14[r20] = r13     // Catch:{ Exception -> 0x09bd }
            java.lang.Integer r13 = java.lang.Integer.valueOf(r1)     // Catch:{ Exception -> 0x09bd }
            r21 = 1
            r14[r21] = r13     // Catch:{ Exception -> 0x09bd }
            java.lang.Integer r13 = java.lang.Integer.valueOf(r1)     // Catch:{ Exception -> 0x09bd }
            r22 = 2
            r14[r22] = r13     // Catch:{ Exception -> 0x09bd }
            java.lang.String r9 = java.lang.String.format(r9, r12, r14)     // Catch:{ Exception -> 0x09bd }
            r12 = 0
            java.lang.Object[] r13 = new java.lang.Object[r12]     // Catch:{ Exception -> 0x09bd }
            org.telegram.SQLite.SQLiteCursor r7 = r7.queryFinalized(r9, r13)     // Catch:{ Exception -> 0x09bd }
            boolean r9 = r7.next()     // Catch:{ Exception -> 0x09bd }
            if (r9 == 0) goto L_0x09b9
            r5 = 0
        L_0x09b9:
            r7.dispose()     // Catch:{ Exception -> 0x09bd }
            goto L_0x09c4
        L_0x09bd:
            r0 = move-exception
        L_0x09be:
            r13 = r40
            r21 = r44
            goto L_0x0b8f
        L_0x09c4:
            r7 = 0
            if (r5 == 0) goto L_0x0afe
            org.telegram.SQLite.SQLiteDatabase r5 = r2.database     // Catch:{ Exception -> 0x0af9 }
            java.util.Locale r7 = java.util.Locale.US     // Catch:{ Exception -> 0x0af9 }
            java.lang.String r9 = "SELECT start FROM messages_holes WHERE uid = %d AND start >= %d ORDER BY start ASC LIMIT 1"
            r12 = 2
            java.lang.Object[] r13 = new java.lang.Object[r12]     // Catch:{ Exception -> 0x0af9 }
            java.lang.Long r12 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x0af9 }
            r14 = 0
            r13[r14] = r12     // Catch:{ Exception -> 0x0af9 }
            java.lang.Integer r12 = java.lang.Integer.valueOf(r1)     // Catch:{ Exception -> 0x0af9 }
            r20 = 1
            r13[r20] = r12     // Catch:{ Exception -> 0x0af9 }
            java.lang.String r7 = java.lang.String.format(r7, r9, r13)     // Catch:{ Exception -> 0x0af9 }
            java.lang.Object[] r9 = new java.lang.Object[r14]     // Catch:{ Exception -> 0x0af9 }
            org.telegram.SQLite.SQLiteCursor r5 = r5.queryFinalized(r7, r9)     // Catch:{ Exception -> 0x0af9 }
            boolean r7 = r5.next()     // Catch:{ Exception -> 0x0af9 }
            if (r7 == 0) goto L_0x09ff
            int r7 = r5.intValue(r14)     // Catch:{ Exception -> 0x09bd }
            long r12 = (long) r7
            r9 = r6
            if (r10 == 0) goto L_0x09fd
            long r6 = (long) r10
            r14 = 32
            long r6 = r6 << r14
            long r6 = r6 | r12
            goto L_0x0a02
        L_0x09fd:
            r6 = r12
            goto L_0x0a02
        L_0x09ff:
            r9 = r6
            r6 = 0
        L_0x0a02:
            r5.dispose()     // Catch:{ Exception -> 0x0af9 }
            org.telegram.SQLite.SQLiteDatabase r5 = r2.database     // Catch:{ Exception -> 0x0af9 }
            java.util.Locale r12 = java.util.Locale.US     // Catch:{ Exception -> 0x0af9 }
            r13 = 2
            java.lang.Object[] r14 = new java.lang.Object[r13]     // Catch:{ Exception -> 0x0af9 }
            java.lang.Long r13 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x0af9 }
            r45 = r4
            r4 = 0
            r14[r4] = r13     // Catch:{ Exception -> 0x0b73 }
            java.lang.Integer r13 = java.lang.Integer.valueOf(r1)     // Catch:{ Exception -> 0x0b73 }
            r20 = 1
            r14[r20] = r13     // Catch:{ Exception -> 0x0b73 }
            java.lang.String r8 = java.lang.String.format(r12, r8, r14)     // Catch:{ Exception -> 0x0b73 }
            java.lang.Object[] r12 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x0b73 }
            org.telegram.SQLite.SQLiteCursor r5 = r5.queryFinalized(r8, r12)     // Catch:{ Exception -> 0x0b73 }
            boolean r8 = r5.next()     // Catch:{ Exception -> 0x0b73 }
            if (r8 == 0) goto L_0x0a3b
            int r8 = r5.intValue(r4)     // Catch:{ Exception -> 0x0b73 }
            long r12 = (long) r8     // Catch:{ Exception -> 0x0b73 }
            r4 = r9
            if (r10 == 0) goto L_0x0a3e
            long r8 = (long) r10     // Catch:{ Exception -> 0x0b73 }
            r14 = 32
            long r8 = r8 << r14
            long r12 = r12 | r8
            goto L_0x0a3e
        L_0x0a3b:
            r4 = r9
            r12 = 1
        L_0x0a3e:
            r5.dispose()     // Catch:{ Exception -> 0x0b73 }
            r8 = 0
            int r5 = (r6 > r8 ? 1 : (r6 == r8 ? 0 : -1))
            if (r5 != 0) goto L_0x0a91
            r8 = 1
            int r5 = (r12 > r8 ? 1 : (r12 == r8 ? 0 : -1))
            if (r5 == 0) goto L_0x0a4e
            goto L_0x0a91
        L_0x0a4e:
            org.telegram.SQLite.SQLiteDatabase r5 = r2.database     // Catch:{ Exception -> 0x0b73 }
            java.util.Locale r6 = java.util.Locale.US     // Catch:{ Exception -> 0x0b73 }
            java.lang.String r7 = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention, m.imp FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention, m.imp FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)"
            r8 = 6
            java.lang.Object[] r9 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x0b73 }
            java.lang.Long r8 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x0b73 }
            r10 = 0
            r9[r10] = r8     // Catch:{ Exception -> 0x0b73 }
            java.lang.Long r8 = java.lang.Long.valueOf(r32)     // Catch:{ Exception -> 0x0b73 }
            r10 = 1
            r9[r10] = r8     // Catch:{ Exception -> 0x0b73 }
            int r8 = r3 / 2
            java.lang.Integer r8 = java.lang.Integer.valueOf(r8)     // Catch:{ Exception -> 0x0b73 }
            r10 = 2
            r9[r10] = r8     // Catch:{ Exception -> 0x0b73 }
            java.lang.Long r8 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x0b73 }
            r10 = 3
            r9[r10] = r8     // Catch:{ Exception -> 0x0b73 }
            java.lang.Long r8 = java.lang.Long.valueOf(r32)     // Catch:{ Exception -> 0x0b73 }
            r10 = 4
            r9[r10] = r8     // Catch:{ Exception -> 0x0b73 }
            int r8 = r3 / 2
            java.lang.Integer r8 = java.lang.Integer.valueOf(r8)     // Catch:{ Exception -> 0x0b73 }
            r10 = 5
            r9[r10] = r8     // Catch:{ Exception -> 0x0b73 }
            java.lang.String r6 = java.lang.String.format(r6, r7, r9)     // Catch:{ Exception -> 0x0b73 }
            r7 = 0
            java.lang.Object[] r8 = new java.lang.Object[r7]     // Catch:{ Exception -> 0x0b73 }
            org.telegram.SQLite.SQLiteCursor r5 = r5.queryFinalized(r6, r8)     // Catch:{ Exception -> 0x0b73 }
            goto L_0x0af4
        L_0x0a91:
            r8 = 0
            int r5 = (r6 > r8 ? 1 : (r6 == r8 ? 0 : -1))
            if (r5 != 0) goto L_0x0aa1
            r6 = 1000000000(0x3b9aca00, double:4.94065646E-315)
            if (r10 == 0) goto L_0x0aa1
            long r8 = (long) r10     // Catch:{ Exception -> 0x0b73 }
            r5 = 32
            long r8 = r8 << r5
            long r6 = r6 | r8
        L_0x0aa1:
            org.telegram.SQLite.SQLiteDatabase r5 = r2.database     // Catch:{ Exception -> 0x0b73 }
            java.util.Locale r8 = java.util.Locale.US     // Catch:{ Exception -> 0x0b73 }
            java.lang.String r9 = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention, m.imp FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d AND (m.mid >= %d OR m.mid < 0) ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention, m.imp FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d AND (m.mid <= %d OR m.mid < 0) ORDER BY m.date ASC, m.mid ASC LIMIT %d)"
            r10 = 8
            java.lang.Object[] r10 = new java.lang.Object[r10]     // Catch:{ Exception -> 0x0b73 }
            java.lang.Long r14 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x0b73 }
            r20 = 0
            r10[r20] = r14     // Catch:{ Exception -> 0x0b73 }
            java.lang.Long r14 = java.lang.Long.valueOf(r32)     // Catch:{ Exception -> 0x0b73 }
            r21 = 1
            r10[r21] = r14     // Catch:{ Exception -> 0x0b73 }
            java.lang.Long r12 = java.lang.Long.valueOf(r12)     // Catch:{ Exception -> 0x0b73 }
            r13 = 2
            r10[r13] = r12     // Catch:{ Exception -> 0x0b73 }
            int r12 = r3 / 2
            java.lang.Integer r12 = java.lang.Integer.valueOf(r12)     // Catch:{ Exception -> 0x0b73 }
            r13 = 3
            r10[r13] = r12     // Catch:{ Exception -> 0x0b73 }
            java.lang.Long r12 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x0b73 }
            r13 = 4
            r10[r13] = r12     // Catch:{ Exception -> 0x0b73 }
            java.lang.Long r12 = java.lang.Long.valueOf(r32)     // Catch:{ Exception -> 0x0b73 }
            r13 = 5
            r10[r13] = r12     // Catch:{ Exception -> 0x0b73 }
            java.lang.Long r6 = java.lang.Long.valueOf(r6)     // Catch:{ Exception -> 0x0b73 }
            r7 = 6
            r10[r7] = r6     // Catch:{ Exception -> 0x0b73 }
            int r6 = r3 / 2
            java.lang.Integer r6 = java.lang.Integer.valueOf(r6)     // Catch:{ Exception -> 0x0b73 }
            r7 = 7
            r10[r7] = r6     // Catch:{ Exception -> 0x0b73 }
            java.lang.String r6 = java.lang.String.format(r8, r9, r10)     // Catch:{ Exception -> 0x0b73 }
            r7 = 0
            java.lang.Object[] r8 = new java.lang.Object[r7]     // Catch:{ Exception -> 0x0b73 }
            org.telegram.SQLite.SQLiteCursor r5 = r5.queryFinalized(r6, r8)     // Catch:{ Exception -> 0x0b73 }
        L_0x0af4:
            r7 = r5
            r5 = 0
            r8 = 6
            goto L_0x0b77
        L_0x0af9:
            r0 = move-exception
            r45 = r4
            goto L_0x09be
        L_0x0afe:
            r45 = r4
            r4 = r6
            r5 = 2
            if (r15 != r5) goto L_0x0b75
            org.telegram.SQLite.SQLiteDatabase r5 = r2.database     // Catch:{ Exception -> 0x0b73 }
            java.util.Locale r6 = java.util.Locale.US     // Catch:{ Exception -> 0x0b73 }
            java.lang.String r8 = "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid != 0 AND out = 0 AND read_state IN(0,2)"
            r9 = 1
            java.lang.Object[] r10 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x0b73 }
            java.lang.Long r9 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x0b73 }
            r12 = 0
            r10[r12] = r9     // Catch:{ Exception -> 0x0b73 }
            java.lang.String r6 = java.lang.String.format(r6, r8, r10)     // Catch:{ Exception -> 0x0b73 }
            java.lang.Object[] r8 = new java.lang.Object[r12]     // Catch:{ Exception -> 0x0b73 }
            org.telegram.SQLite.SQLiteCursor r5 = r5.queryFinalized(r6, r8)     // Catch:{ Exception -> 0x0b73 }
            boolean r6 = r5.next()     // Catch:{ Exception -> 0x0b73 }
            if (r6 == 0) goto L_0x0b29
            int r6 = r5.intValue(r12)     // Catch:{ Exception -> 0x0b73 }
            goto L_0x0b2a
        L_0x0b29:
            r6 = 0
        L_0x0b2a:
            r5.dispose()     // Catch:{ Exception -> 0x0b73 }
            if (r6 != r11) goto L_0x0b75
            org.telegram.SQLite.SQLiteDatabase r5 = r2.database     // Catch:{ Exception -> 0x0b73 }
            java.util.Locale r6 = java.util.Locale.US     // Catch:{ Exception -> 0x0b73 }
            java.lang.String r7 = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention, m.imp FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.date DESC, m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention, m.imp FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.date ASC, m.mid ASC LIMIT %d)"
            r8 = 6
            java.lang.Object[] r9 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x0b73 }
            java.lang.Long r10 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x0b73 }
            r12 = 0
            r9[r12] = r10     // Catch:{ Exception -> 0x0b73 }
            java.lang.Long r10 = java.lang.Long.valueOf(r32)     // Catch:{ Exception -> 0x0b73 }
            r12 = 1
            r9[r12] = r10     // Catch:{ Exception -> 0x0b73 }
            int r10 = r3 / 2
            java.lang.Integer r10 = java.lang.Integer.valueOf(r10)     // Catch:{ Exception -> 0x0b73 }
            r12 = 2
            r9[r12] = r10     // Catch:{ Exception -> 0x0b73 }
            java.lang.Long r10 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x0b73 }
            r12 = 3
            r9[r12] = r10     // Catch:{ Exception -> 0x0b73 }
            java.lang.Long r10 = java.lang.Long.valueOf(r32)     // Catch:{ Exception -> 0x0b73 }
            r12 = 4
            r9[r12] = r10     // Catch:{ Exception -> 0x0b73 }
            int r10 = r3 / 2
            java.lang.Integer r10 = java.lang.Integer.valueOf(r10)     // Catch:{ Exception -> 0x0b73 }
            r12 = 5
            r9[r12] = r10     // Catch:{ Exception -> 0x0b73 }
            java.lang.String r6 = java.lang.String.format(r6, r7, r9)     // Catch:{ Exception -> 0x0b73 }
            r7 = 0
            java.lang.Object[] r9 = new java.lang.Object[r7]     // Catch:{ Exception -> 0x0b73 }
            org.telegram.SQLite.SQLiteCursor r7 = r5.queryFinalized(r6, r9)     // Catch:{ Exception -> 0x0b73 }
            r5 = 1
            goto L_0x0b77
        L_0x0b73:
            r0 = move-exception
            goto L_0x0b89
        L_0x0b75:
            r8 = 6
            r5 = 0
        L_0x0b77:
            r10 = r44
            r8 = r47
            r9 = r11
            r13 = r29
            r6 = r30
            r29 = r4
            r4 = r45
            goto L_0x0edd
        L_0x0b86:
            r0 = move-exception
            r47 = r7
        L_0x0b89:
            r13 = r40
            r21 = r44
            r4 = r45
        L_0x0b8f:
            r20 = r47
            r1 = r0
            r9 = r11
            r10 = r36
            goto L_0x14b8
        L_0x0b97:
            r0 = move-exception
            goto L_0x0b9c
        L_0x0b99:
            r0 = move-exception
            r44 = r1
        L_0x0b9c:
            r13 = r40
            r21 = r44
            r4 = r45
            r1 = r0
            r9 = r11
            r10 = r36
            r20 = 0
            goto L_0x14b8
        L_0x0baa:
            r0 = move-exception
            r13 = r40
            r4 = r45
            r1 = r0
            r9 = r11
            r10 = r36
            r20 = 0
            r21 = 0
            goto L_0x14b8
        L_0x0bb9:
            r2 = r39
            r15 = r49
            r37 = r1
            r36 = r3
            r4 = r6
            r28 = r7
            r27 = r8
            r31 = r9
            r35 = r11
            r8 = 6
            r3 = r44
            java.lang.String r1 = "SELECT COUNT(*) FROM messages WHERE uid = %d AND mid <= %d AND out = 0 AND read_state IN(0,2)"
            java.lang.String r5 = "SELECT max(mid), max(date) FROM messages WHERE uid = %d AND out = 0 AND read_state IN(0,2) AND mid < 0"
            java.lang.String r6 = "SELECT min(mid) FROM messages WHERE uid = %d AND mid < 0"
            r7 = 3
            if (r15 != r7) goto L_0x0ca2
            if (r47 != 0) goto L_0x0ca2
            org.telegram.SQLite.SQLiteDatabase r7 = r2.database     // Catch:{ Exception -> 0x0CLASSNAME }
            java.util.Locale r9 = java.util.Locale.US     // Catch:{ Exception -> 0x0CLASSNAME }
            r10 = 1
            java.lang.Object[] r11 = new java.lang.Object[r10]     // Catch:{ Exception -> 0x0CLASSNAME }
            java.lang.Long r10 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x0CLASSNAME }
            r13 = 0
            r11[r13] = r10     // Catch:{ Exception -> 0x0CLASSNAME }
            java.lang.String r9 = java.lang.String.format(r9, r6, r11)     // Catch:{ Exception -> 0x0CLASSNAME }
            java.lang.Object[] r10 = new java.lang.Object[r13]     // Catch:{ Exception -> 0x0CLASSNAME }
            org.telegram.SQLite.SQLiteCursor r7 = r7.queryFinalized(r9, r10)     // Catch:{ Exception -> 0x0CLASSNAME }
            boolean r9 = r7.next()     // Catch:{ Exception -> 0x0CLASSNAME }
            if (r9 == 0) goto L_0x0bfb
            int r9 = r7.intValue(r13)     // Catch:{ Exception -> 0x0CLASSNAME }
            goto L_0x0bfc
        L_0x0bfb:
            r9 = 0
        L_0x0bfc:
            r7.dispose()     // Catch:{ Exception -> 0x0CLASSNAME }
            org.telegram.SQLite.SQLiteDatabase r7 = r2.database     // Catch:{ Exception -> 0x0CLASSNAME }
            java.util.Locale r10 = java.util.Locale.US     // Catch:{ Exception -> 0x0CLASSNAME }
            r11 = 1
            java.lang.Object[] r13 = new java.lang.Object[r11]     // Catch:{ Exception -> 0x0CLASSNAME }
            java.lang.Long r11 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x0CLASSNAME }
            r14 = 0
            r13[r14] = r11     // Catch:{ Exception -> 0x0CLASSNAME }
            java.lang.String r10 = java.lang.String.format(r10, r5, r13)     // Catch:{ Exception -> 0x0CLASSNAME }
            java.lang.Object[] r11 = new java.lang.Object[r14]     // Catch:{ Exception -> 0x0CLASSNAME }
            org.telegram.SQLite.SQLiteCursor r7 = r7.queryFinalized(r10, r11)     // Catch:{ Exception -> 0x0CLASSNAME }
            boolean r10 = r7.next()     // Catch:{ Exception -> 0x0CLASSNAME }
            if (r10 == 0) goto L_0x0CLASSNAME
            int r10 = r7.intValue(r14)     // Catch:{ Exception -> 0x0CLASSNAME }
            r11 = 1
            int r13 = r7.intValue(r11)     // Catch:{ Exception -> 0x0CLASSNAME }
            goto L_0x0CLASSNAME
        L_0x0CLASSNAME:
            r10 = 0
            r13 = 0
        L_0x0CLASSNAME:
            r7.dispose()     // Catch:{ Exception -> 0x0CLASSNAME }
            if (r10 == 0) goto L_0x0CLASSNAME
            org.telegram.SQLite.SQLiteDatabase r7 = r2.database     // Catch:{ Exception -> 0x0c6a }
            java.util.Locale r9 = java.util.Locale.US     // Catch:{ Exception -> 0x0c6a }
            r11 = 2
            java.lang.Object[] r14 = new java.lang.Object[r11]     // Catch:{ Exception -> 0x0c6a }
            java.lang.Long r11 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x0c6a }
            r8 = 0
            r14[r8] = r11     // Catch:{ Exception -> 0x0c6a }
            java.lang.Integer r11 = java.lang.Integer.valueOf(r10)     // Catch:{ Exception -> 0x0c6a }
            r20 = 1
            r14[r20] = r11     // Catch:{ Exception -> 0x0c6a }
            java.lang.String r9 = java.lang.String.format(r9, r1, r14)     // Catch:{ Exception -> 0x0c6a }
            java.lang.Object[] r11 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x0c6a }
            org.telegram.SQLite.SQLiteCursor r7 = r7.queryFinalized(r9, r11)     // Catch:{ Exception -> 0x0c6a }
            boolean r9 = r7.next()     // Catch:{ Exception -> 0x0c6a }
            if (r9 == 0) goto L_0x0CLASSNAME
            int r9 = r7.intValue(r8)     // Catch:{ Exception -> 0x0c6a }
            goto L_0x0c5a
        L_0x0CLASSNAME:
            r9 = 0
        L_0x0c5a:
            r7.dispose()     // Catch:{ Exception -> 0x0CLASSNAME }
            r14 = r10
            r7 = 3
            goto L_0x0ca6
        L_0x0CLASSNAME:
            r0 = move-exception
            r4 = r45
            r1 = r0
            r23 = r10
            r29 = r13
            goto L_0x0cef
        L_0x0c6a:
            r0 = move-exception
            r4 = r45
            r1 = r0
            r23 = r10
            goto L_0x0c7b
        L_0x0CLASSNAME:
            r14 = r9
            r7 = 3
            r9 = 0
            goto L_0x0ca6
        L_0x0CLASSNAME:
            r0 = move-exception
            r4 = r45
            r1 = r0
            r23 = r9
        L_0x0c7b:
            r29 = r13
            r10 = r36
            r9 = 0
            goto L_0x0cf1
        L_0x0CLASSNAME:
            r0 = move-exception
            r13 = r40
            r4 = r45
            r1 = r0
            r23 = r9
            r10 = r36
            r9 = 0
            r20 = 0
            r21 = 1
            goto L_0x14b2
        L_0x0CLASSNAME:
            r0 = move-exception
            r13 = r40
            r4 = r45
            r1 = r0
            r10 = r36
            r9 = 0
            r20 = 0
            r21 = 1
            goto L_0x14b0
        L_0x0ca2:
            r7 = 3
            r9 = 0
            r13 = 0
            r14 = 0
        L_0x0ca6:
            if (r15 == r7) goto L_0x0e69
            r8 = 4
            if (r15 != r8) goto L_0x0cad
            goto L_0x0e69
        L_0x0cad:
            r8 = 1
            if (r15 != r8) goto L_0x0cfd
            org.telegram.SQLite.SQLiteDatabase r1 = r2.database     // Catch:{ Exception -> 0x0ce7 }
            java.util.Locale r5 = java.util.Locale.US     // Catch:{ Exception -> 0x0ce7 }
            java.lang.String r6 = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention, m.imp FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid < %d ORDER BY m.mid DESC LIMIT %d"
            java.lang.Object[] r8 = new java.lang.Object[r7]     // Catch:{ Exception -> 0x0ce7 }
            java.lang.Long r7 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x0ce7 }
            r10 = 0
            r8[r10] = r7     // Catch:{ Exception -> 0x0ce7 }
            java.lang.Integer r7 = java.lang.Integer.valueOf(r45)     // Catch:{ Exception -> 0x0ce7 }
            r10 = 1
            r8[r10] = r7     // Catch:{ Exception -> 0x0ce7 }
            java.lang.Integer r7 = java.lang.Integer.valueOf(r44)     // Catch:{ Exception -> 0x0ce7 }
            r10 = 2
            r8[r10] = r7     // Catch:{ Exception -> 0x0ce7 }
            java.lang.String r5 = java.lang.String.format(r5, r6, r8)     // Catch:{ Exception -> 0x0ce7 }
            r6 = 0
            java.lang.Object[] r7 = new java.lang.Object[r6]     // Catch:{ Exception -> 0x0ce7 }
            org.telegram.SQLite.SQLiteCursor r7 = r1.queryFinalized(r5, r7)     // Catch:{ Exception -> 0x0ce7 }
            r1 = r45
            r29 = r4
            r23 = r14
            r5 = 0
            r6 = 0
            r8 = 0
        L_0x0ce1:
            r10 = 1
            r34 = 0
        L_0x0ce4:
            r4 = r1
            goto L_0x0edd
        L_0x0ce7:
            r0 = move-exception
            r4 = r45
            r1 = r0
            r29 = r13
            r23 = r14
        L_0x0cef:
            r10 = r36
        L_0x0cf1:
            r20 = 0
        L_0x0cf3:
            r21 = 1
            r30 = 0
            r34 = 0
        L_0x0cf9:
            r13 = r40
            goto L_0x14b8
        L_0x0cfd:
            if (r47 == 0) goto L_0x0d69
            r7 = 6
            if (r45 == 0) goto L_0x0d39
            org.telegram.SQLite.SQLiteDatabase r1 = r2.database     // Catch:{ Exception -> 0x0ce7 }
            java.util.Locale r5 = java.util.Locale.US     // Catch:{ Exception -> 0x0ce7 }
            java.lang.String r6 = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention, m.imp FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.mid ASC LIMIT %d"
            r8 = 3
            java.lang.Object[] r10 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x0ce7 }
            java.lang.Long r8 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x0ce7 }
            r11 = 0
            r10[r11] = r8     // Catch:{ Exception -> 0x0ce7 }
            java.lang.Integer r8 = java.lang.Integer.valueOf(r45)     // Catch:{ Exception -> 0x0ce7 }
            r11 = 1
            r10[r11] = r8     // Catch:{ Exception -> 0x0ce7 }
            java.lang.Integer r8 = java.lang.Integer.valueOf(r44)     // Catch:{ Exception -> 0x0ce7 }
            r11 = 2
            r10[r11] = r8     // Catch:{ Exception -> 0x0ce7 }
            java.lang.String r5 = java.lang.String.format(r5, r6, r10)     // Catch:{ Exception -> 0x0ce7 }
            r6 = 0
            java.lang.Object[] r8 = new java.lang.Object[r6]     // Catch:{ Exception -> 0x0ce7 }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r5, r8)     // Catch:{ Exception -> 0x0ce7 }
        L_0x0d2b:
            r7 = r1
            r29 = r4
            r23 = r14
            r5 = 0
            r6 = 0
            r8 = 0
            r10 = 1
            r34 = 0
            r1 = r45
            goto L_0x0ce4
        L_0x0d39:
            org.telegram.SQLite.SQLiteDatabase r1 = r2.database     // Catch:{ Exception -> 0x0ce7 }
            java.util.Locale r5 = java.util.Locale.US     // Catch:{ Exception -> 0x0ce7 }
            java.lang.String r6 = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention, m.imp FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.date <= %d ORDER BY m.mid ASC LIMIT %d,%d"
            r8 = 4
            java.lang.Object[] r10 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x0ce7 }
            java.lang.Long r8 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x0ce7 }
            r11 = 0
            r10[r11] = r8     // Catch:{ Exception -> 0x0ce7 }
            java.lang.Integer r8 = java.lang.Integer.valueOf(r47)     // Catch:{ Exception -> 0x0ce7 }
            r12 = 1
            r10[r12] = r8     // Catch:{ Exception -> 0x0ce7 }
            java.lang.Integer r8 = java.lang.Integer.valueOf(r11)     // Catch:{ Exception -> 0x0ce7 }
            r12 = 2
            r10[r12] = r8     // Catch:{ Exception -> 0x0ce7 }
            java.lang.Integer r8 = java.lang.Integer.valueOf(r44)     // Catch:{ Exception -> 0x0ce7 }
            r12 = 3
            r10[r12] = r8     // Catch:{ Exception -> 0x0ce7 }
            java.lang.String r5 = java.lang.String.format(r5, r6, r10)     // Catch:{ Exception -> 0x0ce7 }
            java.lang.Object[] r6 = new java.lang.Object[r11]     // Catch:{ Exception -> 0x0ce7 }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r5, r6)     // Catch:{ Exception -> 0x0ce7 }
            goto L_0x0d2b
        L_0x0d69:
            r7 = 6
            r8 = 2
            if (r15 != r8) goto L_0x0def
            org.telegram.SQLite.SQLiteDatabase r8 = r2.database     // Catch:{ Exception -> 0x0ce7 }
            java.util.Locale r10 = java.util.Locale.US     // Catch:{ Exception -> 0x0ce7 }
            r11 = 1
            java.lang.Object[] r7 = new java.lang.Object[r11]     // Catch:{ Exception -> 0x0ce7 }
            java.lang.Long r11 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x0ce7 }
            r29 = r4
            r4 = 0
            r7[r4] = r11     // Catch:{ Exception -> 0x0ce7 }
            java.lang.String r6 = java.lang.String.format(r10, r6, r7)     // Catch:{ Exception -> 0x0ce7 }
            java.lang.Object[] r7 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x0ce7 }
            org.telegram.SQLite.SQLiteCursor r6 = r8.queryFinalized(r6, r7)     // Catch:{ Exception -> 0x0ce7 }
            boolean r7 = r6.next()     // Catch:{ Exception -> 0x0ce7 }
            if (r7 == 0) goto L_0x0d92
            int r7 = r6.intValue(r4)     // Catch:{ Exception -> 0x0ce7 }
            goto L_0x0d93
        L_0x0d92:
            r7 = 0
        L_0x0d93:
            r6.dispose()     // Catch:{ Exception -> 0x0e5b }
            org.telegram.SQLite.SQLiteDatabase r4 = r2.database     // Catch:{ Exception -> 0x0e5b }
            java.util.Locale r6 = java.util.Locale.US     // Catch:{ Exception -> 0x0e5b }
            r8 = 1
            java.lang.Object[] r10 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x0e5b }
            java.lang.Long r8 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x0e5b }
            r11 = 0
            r10[r11] = r8     // Catch:{ Exception -> 0x0e5b }
            java.lang.String r5 = java.lang.String.format(r6, r5, r10)     // Catch:{ Exception -> 0x0e5b }
            java.lang.Object[] r6 = new java.lang.Object[r11]     // Catch:{ Exception -> 0x0e5b }
            org.telegram.SQLite.SQLiteCursor r4 = r4.queryFinalized(r5, r6)     // Catch:{ Exception -> 0x0e5b }
            boolean r5 = r4.next()     // Catch:{ Exception -> 0x0e5b }
            if (r5 == 0) goto L_0x0dbd
            int r14 = r4.intValue(r11)     // Catch:{ Exception -> 0x0e5b }
            r5 = 1
            int r13 = r4.intValue(r5)     // Catch:{ Exception -> 0x0e5b }
        L_0x0dbd:
            r4.dispose()     // Catch:{ Exception -> 0x0e5b }
            if (r14 == 0) goto L_0x0df2
            org.telegram.SQLite.SQLiteDatabase r4 = r2.database     // Catch:{ Exception -> 0x0e5b }
            java.util.Locale r5 = java.util.Locale.US     // Catch:{ Exception -> 0x0e5b }
            r6 = 2
            java.lang.Object[] r8 = new java.lang.Object[r6]     // Catch:{ Exception -> 0x0e5b }
            java.lang.Long r6 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x0e5b }
            r10 = 0
            r8[r10] = r6     // Catch:{ Exception -> 0x0e5b }
            java.lang.Integer r6 = java.lang.Integer.valueOf(r14)     // Catch:{ Exception -> 0x0e5b }
            r11 = 1
            r8[r11] = r6     // Catch:{ Exception -> 0x0e5b }
            java.lang.String r1 = java.lang.String.format(r5, r1, r8)     // Catch:{ Exception -> 0x0e5b }
            java.lang.Object[] r5 = new java.lang.Object[r10]     // Catch:{ Exception -> 0x0e5b }
            org.telegram.SQLite.SQLiteCursor r1 = r4.queryFinalized(r1, r5)     // Catch:{ Exception -> 0x0e5b }
            boolean r4 = r1.next()     // Catch:{ Exception -> 0x0e5b }
            if (r4 == 0) goto L_0x0deb
            int r9 = r1.intValue(r10)     // Catch:{ Exception -> 0x0e5b }
        L_0x0deb:
            r1.dispose()     // Catch:{ Exception -> 0x0e5b }
            goto L_0x0df2
        L_0x0def:
            r29 = r4
            r7 = 0
        L_0x0df2:
            if (r3 > r9) goto L_0x0e01
            if (r9 >= r12) goto L_0x0df7
            goto L_0x0e01
        L_0x0df7:
            int r1 = r9 - r3
            int r3 = r3 + 10
            r38 = r3
            r3 = r1
            r1 = r38
            goto L_0x0e0d
        L_0x0e01:
            int r1 = r9 + 10
            int r1 = java.lang.Math.max(r3, r1)     // Catch:{ Exception -> 0x0e5b }
            r3 = 0
            if (r9 >= r12) goto L_0x0e0d
            r7 = 0
            r9 = 0
            r14 = 0
        L_0x0e0d:
            org.telegram.SQLite.SQLiteDatabase r4 = r2.database     // Catch:{ Exception -> 0x0e45 }
            java.util.Locale r5 = java.util.Locale.US     // Catch:{ Exception -> 0x0e45 }
            java.lang.String r6 = "SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention, m.imp FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d ORDER BY m.mid ASC LIMIT %d,%d"
            r8 = 3
            java.lang.Object[] r10 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x0e45 }
            java.lang.Long r8 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x0e45 }
            r11 = 0
            r10[r11] = r8     // Catch:{ Exception -> 0x0e45 }
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)     // Catch:{ Exception -> 0x0e45 }
            r8 = 1
            r10[r8] = r3     // Catch:{ Exception -> 0x0e45 }
            java.lang.Integer r3 = java.lang.Integer.valueOf(r1)     // Catch:{ Exception -> 0x0e45 }
            r8 = 2
            r10[r8] = r3     // Catch:{ Exception -> 0x0e45 }
            java.lang.String r3 = java.lang.String.format(r5, r6, r10)     // Catch:{ Exception -> 0x0e45 }
            r5 = 0
            java.lang.Object[] r6 = new java.lang.Object[r5]     // Catch:{ Exception -> 0x0e45 }
            org.telegram.SQLite.SQLiteCursor r3 = r4.queryFinalized(r3, r6)     // Catch:{ Exception -> 0x0e45 }
            r4 = r45
            r8 = r7
            r23 = r14
            r5 = 0
            r6 = 0
            r10 = 1
            r34 = 0
            r7 = r3
            r3 = r1
            r1 = r4
            goto L_0x0edd
        L_0x0e45:
            r0 = move-exception
            r4 = r45
            r3 = r1
            r20 = r7
            r29 = r13
            r23 = r14
            r10 = r36
            r21 = 1
            r30 = 0
            r34 = 0
            r13 = r40
            goto L_0x14a0
        L_0x0e5b:
            r0 = move-exception
            r4 = r45
            r1 = r0
            r20 = r7
            r29 = r13
            r23 = r14
            r10 = r36
            goto L_0x0cf3
        L_0x0e69:
            r29 = r4
            org.telegram.SQLite.SQLiteDatabase r1 = r2.database     // Catch:{ Exception -> 0x148b }
            java.util.Locale r4 = java.util.Locale.US     // Catch:{ Exception -> 0x148b }
            r5 = 1
            java.lang.Object[] r7 = new java.lang.Object[r5]     // Catch:{ Exception -> 0x148b }
            java.lang.Long r5 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x148b }
            r8 = 0
            r7[r8] = r5     // Catch:{ Exception -> 0x148b }
            java.lang.String r4 = java.lang.String.format(r4, r6, r7)     // Catch:{ Exception -> 0x148b }
            java.lang.Object[] r5 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x148b }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r4, r5)     // Catch:{ Exception -> 0x148b }
            boolean r4 = r1.next()     // Catch:{ Exception -> 0x148b }
            if (r4 == 0) goto L_0x0e8e
            int r4 = r1.intValue(r8)     // Catch:{ Exception -> 0x0ce7 }
            goto L_0x0e8f
        L_0x0e8e:
            r4 = 0
        L_0x0e8f:
            r1.dispose()     // Catch:{ Exception -> 0x1475 }
            org.telegram.SQLite.SQLiteDatabase r1 = r2.database     // Catch:{ Exception -> 0x1475 }
            java.util.Locale r5 = java.util.Locale.US     // Catch:{ Exception -> 0x1475 }
            java.lang.String r6 = "SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention, m.imp FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid <= %d ORDER BY m.mid DESC LIMIT %d) UNION SELECT * FROM (SELECT m.read_state, m.data, m.send_state, m.mid, m.date, r.random_id, m.replydata, m.media, m.ttl, m.mention, m.imp FROM messages as m LEFT JOIN randoms as r ON r.mid = m.mid WHERE m.uid = %d AND m.mid > %d ORDER BY m.mid ASC LIMIT %d)"
            r7 = 6
            java.lang.Object[] r8 = new java.lang.Object[r7]     // Catch:{ Exception -> 0x1475 }
            java.lang.Long r7 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x1475 }
            r10 = 0
            r8[r10] = r7     // Catch:{ Exception -> 0x1475 }
            java.lang.Long r7 = java.lang.Long.valueOf(r22)     // Catch:{ Exception -> 0x1475 }
            r10 = 1
            r8[r10] = r7     // Catch:{ Exception -> 0x1475 }
            int r7 = r3 / 2
            java.lang.Integer r7 = java.lang.Integer.valueOf(r7)     // Catch:{ Exception -> 0x1475 }
            r10 = 2
            r8[r10] = r7     // Catch:{ Exception -> 0x1475 }
            java.lang.Long r7 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x1475 }
            r10 = 3
            r8[r10] = r7     // Catch:{ Exception -> 0x1475 }
            java.lang.Long r7 = java.lang.Long.valueOf(r22)     // Catch:{ Exception -> 0x1475 }
            r10 = 4
            r8[r10] = r7     // Catch:{ Exception -> 0x1475 }
            int r7 = r3 / 2
            java.lang.Integer r7 = java.lang.Integer.valueOf(r7)     // Catch:{ Exception -> 0x1475 }
            r10 = 5
            r8[r10] = r7     // Catch:{ Exception -> 0x1475 }
            java.lang.String r5 = java.lang.String.format(r5, r6, r8)     // Catch:{ Exception -> 0x1475 }
            r6 = 0
            java.lang.Object[] r7 = new java.lang.Object[r6]     // Catch:{ Exception -> 0x1475 }
            org.telegram.SQLite.SQLiteCursor r7 = r1.queryFinalized(r5, r7)     // Catch:{ Exception -> 0x1475 }
            r1 = r45
            r8 = r4
            r23 = r14
            r5 = 0
            r6 = 0
            goto L_0x0ce1
        L_0x0edd:
            r11 = 2147483647(0x7fffffff, float:NaN)
            if (r7 == 0) goto L_0x11d5
            r12 = -2147483648(0xfffffffvar_, float:-0.0)
        L_0x0ee4:
            boolean r14 = r7.next()     // Catch:{ Exception -> 0x11b7 }
            if (r14 == 0) goto L_0x1186
            r44 = r3
            r14 = 1
            org.telegram.tgnet.NativeByteBuffer r3 = r7.byteBufferValue(r14)     // Catch:{ Exception -> 0x1170 }
            if (r3 == 0) goto L_0x1133
            r45 = r4
            r14 = 0
            int r4 = r3.readInt32(r14)     // Catch:{ Exception -> 0x111c }
            org.telegram.tgnet.TLRPC$Message r4 = org.telegram.tgnet.TLRPC$Message.TLdeserialize(r3, r4, r14)     // Catch:{ Exception -> 0x111c }
            r47 = r8
            r14 = 2
            int r8 = r7.intValue(r14)     // Catch:{ Exception -> 0x1118 }
            r4.send_state = r8     // Catch:{ Exception -> 0x1118 }
            r8 = 3
            int r14 = r7.intValue(r8)     // Catch:{ Exception -> 0x1118 }
            r4.id = r14     // Catch:{ Exception -> 0x1118 }
            if (r14 <= 0) goto L_0x0f2e
            int r14 = r4.send_state     // Catch:{ Exception -> 0x0f1c }
            if (r14 == 0) goto L_0x0f2e
            int r14 = r4.send_state     // Catch:{ Exception -> 0x0f1c }
            if (r14 == r8) goto L_0x0f2e
            r8 = 0
            r4.send_state = r8     // Catch:{ Exception -> 0x0f1c }
            goto L_0x0f2e
        L_0x0f1c:
            r0 = move-exception
            r3 = r44
            r4 = r45
            r20 = r47
            r1 = r0
            r30 = r6
            r21 = r10
            r29 = r13
            r10 = r36
            goto L_0x0cf9
        L_0x0f2e:
            r14 = r9
            r22 = r10
            r8 = r29
            long r9 = (long) r8
            r29 = r13
            r30 = r14
            r13 = r40
            int r32 = (r13 > r9 ? 1 : (r13 == r9 ? 0 : -1))
            if (r32 != 0) goto L_0x0var_
            r9 = 1
            r4.out = r9     // Catch:{ Exception -> 0x0var_ }
            goto L_0x0var_
        L_0x0var_:
            r0 = move-exception
            r3 = r44
            r4 = r45
            r20 = r47
            r1 = r0
            r21 = r22
            r9 = r30
            r10 = r36
        L_0x0var_:
            r30 = r6
            goto L_0x14b8
        L_0x0var_:
            r4.readAttachPath(r3, r8)     // Catch:{ Exception -> 0x1111 }
            r3.reuse()     // Catch:{ Exception -> 0x1111 }
            r3 = 0
            int r9 = r7.intValue(r3)     // Catch:{ Exception -> 0x1111 }
            org.telegram.messenger.MessageObject.setUnreadFlags(r4, r9)     // Catch:{ Exception -> 0x1111 }
            int r3 = r4.id     // Catch:{ Exception -> 0x1111 }
            if (r3 <= 0) goto L_0x0var_
            int r3 = r4.id     // Catch:{ Exception -> 0x0var_ }
            int r11 = java.lang.Math.min(r3, r11)     // Catch:{ Exception -> 0x0var_ }
            int r3 = r4.id     // Catch:{ Exception -> 0x0var_ }
            int r12 = java.lang.Math.max(r3, r12)     // Catch:{ Exception -> 0x0var_ }
        L_0x0var_:
            r3 = 4
            int r9 = r7.intValue(r3)     // Catch:{ Exception -> 0x1111 }
            r4.date = r9     // Catch:{ Exception -> 0x1111 }
            r4.dialog_id = r13     // Catch:{ Exception -> 0x1111 }
            int r3 = r4.flags     // Catch:{ Exception -> 0x1111 }
            r3 = r3 & 1024(0x400, float:1.435E-42)
            if (r3 == 0) goto L_0x0var_
            r3 = 7
            int r9 = r7.intValue(r3)     // Catch:{ Exception -> 0x0var_ }
            r4.views = r9     // Catch:{ Exception -> 0x0var_ }
            goto L_0x0f8a
        L_0x0var_:
            r3 = 7
        L_0x0f8a:
            if (r37 == 0) goto L_0x0var_
            int r9 = r4.ttl     // Catch:{ Exception -> 0x0var_ }
            if (r9 != 0) goto L_0x0var_
            r9 = 8
            int r9 = r7.intValue(r9)     // Catch:{ Exception -> 0x0var_ }
            r4.ttl = r9     // Catch:{ Exception -> 0x0var_ }
        L_0x0var_:
            r9 = 9
            int r9 = r7.intValue(r9)     // Catch:{ Exception -> 0x1111 }
            if (r9 == 0) goto L_0x0fa3
            r9 = 1
            r4.mentioned = r9     // Catch:{ Exception -> 0x0var_ }
        L_0x0fa3:
            r9 = 10
            int r10 = r7.intValue(r9)     // Catch:{ Exception -> 0x1111 }
            r19 = r10 & 1
            if (r19 == 0) goto L_0x0fb1
            r3 = 0
            r4.stickerVerified = r3     // Catch:{ Exception -> 0x0var_ }
            goto L_0x0fb8
        L_0x0fb1:
            r3 = r10 & 2
            if (r3 == 0) goto L_0x0fb8
            r3 = 2
            r4.stickerVerified = r3     // Catch:{ Exception -> 0x0var_ }
        L_0x0fb8:
            r10 = r36
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r3 = r10.messages     // Catch:{ Exception -> 0x110c }
            r3.add(r4)     // Catch:{ Exception -> 0x110c }
            r3 = r26
            r9 = r31
            addUsersAndChatsFromMessage(r4, r3, r9)     // Catch:{ Exception -> 0x110c }
            r26 = r11
            int r11 = r4.reply_to_msg_id     // Catch:{ Exception -> 0x110c }
            if (r11 != 0) goto L_0x0fe8
            r31 = r12
            long r11 = r4.reply_to_random_id     // Catch:{ Exception -> 0x0fe5 }
            r16 = 0
            int r32 = (r11 > r16 ? 1 : (r11 == r16 ? 0 : -1))
            if (r32 == 0) goto L_0x0fd7
            goto L_0x0fea
        L_0x0fd7:
            r14 = r35
            r18 = 32
            r38 = r28
            r28 = r8
            r8 = r27
            r27 = r38
            goto L_0x10ab
        L_0x0fe5:
            r0 = move-exception
            goto L_0x127a
        L_0x0fe8:
            r31 = r12
        L_0x0fea:
            r11 = 6
            boolean r12 = r7.isNull(r11)     // Catch:{ Exception -> 0x110c }
            if (r12 != 0) goto L_0x101f
            org.telegram.tgnet.NativeByteBuffer r12 = r7.byteBufferValue(r11)     // Catch:{ Exception -> 0x1277 }
            if (r12 == 0) goto L_0x101f
            r11 = 0
            int r13 = r12.readInt32(r11)     // Catch:{ Exception -> 0x1277 }
            org.telegram.tgnet.TLRPC$Message r13 = org.telegram.tgnet.TLRPC$Message.TLdeserialize(r12, r13, r11)     // Catch:{ Exception -> 0x1277 }
            r4.replyMessage = r13     // Catch:{ Exception -> 0x1277 }
            r13.readAttachPath(r12, r8)     // Catch:{ Exception -> 0x1277 }
            r12.reuse()     // Catch:{ Exception -> 0x1277 }
            org.telegram.tgnet.TLRPC$Message r11 = r4.replyMessage     // Catch:{ Exception -> 0x1277 }
            if (r11 == 0) goto L_0x101f
            boolean r11 = org.telegram.messenger.MessageObject.isMegagroup(r4)     // Catch:{ Exception -> 0x1277 }
            if (r11 == 0) goto L_0x101a
            org.telegram.tgnet.TLRPC$Message r11 = r4.replyMessage     // Catch:{ Exception -> 0x1277 }
            int r12 = r11.flags     // Catch:{ Exception -> 0x1277 }
            r12 = r12 | r24
            r11.flags = r12     // Catch:{ Exception -> 0x1277 }
        L_0x101a:
            org.telegram.tgnet.TLRPC$Message r11 = r4.replyMessage     // Catch:{ Exception -> 0x1277 }
            addUsersAndChatsFromMessage(r11, r3, r9)     // Catch:{ Exception -> 0x1277 }
        L_0x101f:
            org.telegram.tgnet.TLRPC$Message r11 = r4.replyMessage     // Catch:{ Exception -> 0x110c }
            if (r11 != 0) goto L_0x0fd7
            int r11 = r4.reply_to_msg_id     // Catch:{ Exception -> 0x1277 }
            if (r11 == 0) goto L_0x1070
            int r11 = r4.reply_to_msg_id     // Catch:{ Exception -> 0x1277 }
            long r11 = (long) r11     // Catch:{ Exception -> 0x1277 }
            org.telegram.tgnet.TLRPC$Peer r13 = r4.to_id     // Catch:{ Exception -> 0x1277 }
            int r13 = r13.channel_id     // Catch:{ Exception -> 0x1277 }
            if (r13 == 0) goto L_0x103b
            org.telegram.tgnet.TLRPC$Peer r13 = r4.to_id     // Catch:{ Exception -> 0x1277 }
            int r13 = r13.channel_id     // Catch:{ Exception -> 0x1277 }
            long r13 = (long) r13     // Catch:{ Exception -> 0x1277 }
            r18 = 32
            long r13 = r13 << r18
            long r11 = r11 | r13
            goto L_0x103d
        L_0x103b:
            r18 = 32
        L_0x103d:
            java.lang.Long r13 = java.lang.Long.valueOf(r11)     // Catch:{ Exception -> 0x1277 }
            r14 = r35
            boolean r13 = r14.contains(r13)     // Catch:{ Exception -> 0x1277 }
            if (r13 != 0) goto L_0x1050
            java.lang.Long r11 = java.lang.Long.valueOf(r11)     // Catch:{ Exception -> 0x1277 }
            r14.add(r11)     // Catch:{ Exception -> 0x1277 }
        L_0x1050:
            int r11 = r4.reply_to_msg_id     // Catch:{ Exception -> 0x1277 }
            r13 = r28
            java.lang.Object r11 = r13.get(r11)     // Catch:{ Exception -> 0x1277 }
            java.util.ArrayList r11 = (java.util.ArrayList) r11     // Catch:{ Exception -> 0x1277 }
            if (r11 != 0) goto L_0x1066
            java.util.ArrayList r11 = new java.util.ArrayList     // Catch:{ Exception -> 0x1277 }
            r11.<init>()     // Catch:{ Exception -> 0x1277 }
            int r12 = r4.reply_to_msg_id     // Catch:{ Exception -> 0x1277 }
            r13.put(r12, r11)     // Catch:{ Exception -> 0x1277 }
        L_0x1066:
            r11.add(r4)     // Catch:{ Exception -> 0x1277 }
            r28 = r8
            r8 = r27
            r27 = r13
            goto L_0x10ab
        L_0x1070:
            r13 = r28
            r14 = r35
            r18 = 32
            long r11 = r4.reply_to_random_id     // Catch:{ Exception -> 0x1277 }
            java.lang.Long r11 = java.lang.Long.valueOf(r11)     // Catch:{ Exception -> 0x1277 }
            boolean r11 = r14.contains(r11)     // Catch:{ Exception -> 0x1277 }
            if (r11 != 0) goto L_0x108b
            long r11 = r4.reply_to_random_id     // Catch:{ Exception -> 0x1277 }
            java.lang.Long r11 = java.lang.Long.valueOf(r11)     // Catch:{ Exception -> 0x1277 }
            r14.add(r11)     // Catch:{ Exception -> 0x1277 }
        L_0x108b:
            long r11 = r4.reply_to_random_id     // Catch:{ Exception -> 0x1277 }
            r28 = r8
            r8 = r27
            java.lang.Object r11 = r8.get(r11)     // Catch:{ Exception -> 0x1277 }
            java.util.ArrayList r11 = (java.util.ArrayList) r11     // Catch:{ Exception -> 0x1277 }
            if (r11 != 0) goto L_0x10a6
            java.util.ArrayList r11 = new java.util.ArrayList     // Catch:{ Exception -> 0x1277 }
            r11.<init>()     // Catch:{ Exception -> 0x1277 }
            r27 = r13
            long r12 = r4.reply_to_random_id     // Catch:{ Exception -> 0x1277 }
            r8.put(r12, r11)     // Catch:{ Exception -> 0x1277 }
            goto L_0x10a8
        L_0x10a6:
            r27 = r13
        L_0x10a8:
            r11.add(r4)     // Catch:{ Exception -> 0x1277 }
        L_0x10ab:
            if (r37 != 0) goto L_0x10bb
            r13 = 5
            boolean r11 = r7.isNull(r13)     // Catch:{ Exception -> 0x1277 }
            if (r11 != 0) goto L_0x10bc
            long r11 = r7.longValue(r13)     // Catch:{ Exception -> 0x1277 }
            r4.random_id = r11     // Catch:{ Exception -> 0x1277 }
            goto L_0x10bc
        L_0x10bb:
            r13 = 5
        L_0x10bc:
            boolean r11 = org.telegram.messenger.MessageObject.isSecretMedia(r4)     // Catch:{ Exception -> 0x110c }
            if (r11 == 0) goto L_0x1102
            org.telegram.SQLite.SQLiteDatabase r11 = r2.database     // Catch:{ Exception -> 0x10f8 }
            java.util.Locale r12 = java.util.Locale.US     // Catch:{ Exception -> 0x10f8 }
            java.lang.String r13 = "SELECT date FROM enc_tasks_v2 WHERE mid = %d"
            r32 = r8
            r8 = 1
            java.lang.Object[] r2 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x10f4 }
            int r8 = r4.id     // Catch:{ Exception -> 0x10f4 }
            java.lang.Integer r8 = java.lang.Integer.valueOf(r8)     // Catch:{ Exception -> 0x10f4 }
            r33 = r6
            r6 = 0
            r2[r6] = r8     // Catch:{ Exception -> 0x10f2 }
            java.lang.String r2 = java.lang.String.format(r12, r13, r2)     // Catch:{ Exception -> 0x10f2 }
            java.lang.Object[] r8 = new java.lang.Object[r6]     // Catch:{ Exception -> 0x10f2 }
            org.telegram.SQLite.SQLiteCursor r2 = r11.queryFinalized(r2, r8)     // Catch:{ Exception -> 0x10f2 }
            boolean r8 = r2.next()     // Catch:{ Exception -> 0x10f2 }
            if (r8 == 0) goto L_0x10ee
            int r8 = r2.intValue(r6)     // Catch:{ Exception -> 0x10f2 }
            r4.destroyTime = r8     // Catch:{ Exception -> 0x10f2 }
        L_0x10ee:
            r2.dispose()     // Catch:{ Exception -> 0x10f2 }
            goto L_0x1106
        L_0x10f2:
            r0 = move-exception
            goto L_0x10fd
        L_0x10f4:
            r0 = move-exception
            r33 = r6
            goto L_0x10fd
        L_0x10f8:
            r0 = move-exception
            r33 = r6
            r32 = r8
        L_0x10fd:
            r2 = r0
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r2)     // Catch:{ Exception -> 0x11a6 }
            goto L_0x1106
        L_0x1102:
            r33 = r6
            r32 = r8
        L_0x1106:
            r11 = r26
            r12 = r31
            r2 = 6
            goto L_0x1150
        L_0x110c:
            r0 = move-exception
            r33 = r6
            goto L_0x11a7
        L_0x1111:
            r0 = move-exception
            r33 = r6
            r10 = r36
            goto L_0x11a7
        L_0x1118:
            r0 = move-exception
            r33 = r6
            goto L_0x1121
        L_0x111c:
            r0 = move-exception
            r33 = r6
            r47 = r8
        L_0x1121:
            r30 = r9
            r22 = r10
            r29 = r13
            r10 = r36
            r2 = r39
            r13 = r40
            r3 = r44
            r4 = r45
            goto L_0x11cc
        L_0x1133:
            r45 = r4
            r33 = r6
            r47 = r8
            r30 = r9
            r22 = r10
            r3 = r26
            r32 = r27
            r27 = r28
            r28 = r29
            r9 = r31
            r14 = r35
            r10 = r36
            r2 = 6
            r18 = 32
            r29 = r13
        L_0x1150:
            r2 = r39
            r4 = r45
            r8 = r47
            r26 = r3
            r31 = r9
            r36 = r10
            r35 = r14
            r10 = r22
            r13 = r29
            r9 = r30
            r6 = r33
            r3 = r44
            r29 = r28
            r28 = r27
            r27 = r32
            goto L_0x0ee4
        L_0x1170:
            r0 = move-exception
            r45 = r4
            r33 = r6
            r47 = r8
            r30 = r9
            r22 = r10
            r29 = r13
            r10 = r36
            r2 = r39
            r13 = r40
            r3 = r44
            goto L_0x11cc
        L_0x1186:
            r44 = r3
            r45 = r4
            r33 = r6
            r47 = r8
            r30 = r9
            r22 = r10
            r3 = r26
            r32 = r27
            r27 = r28
            r28 = r29
            r9 = r31
            r14 = r35
            r10 = r36
            r29 = r13
            r7.dispose()     // Catch:{ Exception -> 0x11a6 }
            goto L_0x11f3
        L_0x11a6:
            r0 = move-exception
        L_0x11a7:
            r2 = r39
            r13 = r40
            r3 = r44
            r4 = r45
            r20 = r47
            r1 = r0
            r21 = r22
            r9 = r30
            goto L_0x11d1
        L_0x11b7:
            r0 = move-exception
            r44 = r3
            r45 = r4
            r33 = r6
            r47 = r8
            r30 = r9
            r22 = r10
            r29 = r13
            r10 = r36
            r2 = r39
            r13 = r40
        L_0x11cc:
            r20 = r47
            r1 = r0
            r21 = r22
        L_0x11d1:
            r30 = r33
            goto L_0x14b8
        L_0x11d5:
            r44 = r3
            r45 = r4
            r33 = r6
            r47 = r8
            r30 = r9
            r22 = r10
            r3 = r26
            r32 = r27
            r27 = r28
            r28 = r29
            r9 = r31
            r14 = r35
            r10 = r36
            r29 = r13
            r12 = -2147483648(0xfffffffvar_, float:-0.0)
        L_0x11f3:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r2 = r10.messages     // Catch:{ Exception -> 0x1465 }
            org.telegram.messenger.-$$Lambda$MessagesStorage$-_Gseuy_bmfpakmLf9RdGB4cyvs r4 = org.telegram.messenger.$$Lambda$MessagesStorage$_Gseuy_bmfpakmLf9RdGB4cyvs.INSTANCE     // Catch:{ Exception -> 0x1465 }
            java.util.Collections.sort(r2, r4)     // Catch:{ Exception -> 0x1465 }
            if (r37 == 0) goto L_0x123a
            r2 = 3
            if (r15 == r2) goto L_0x120c
            r2 = 4
            if (r15 == r2) goto L_0x120c
            r2 = 2
            if (r15 != r2) goto L_0x120a
            if (r34 == 0) goto L_0x120a
            if (r5 != 0) goto L_0x120a
            goto L_0x120c
        L_0x120a:
            r1 = 4
            goto L_0x1227
        L_0x120c:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r2 = r10.messages     // Catch:{ Exception -> 0x11a6 }
            boolean r2 = r2.isEmpty()     // Catch:{ Exception -> 0x11a6 }
            if (r2 != 0) goto L_0x120a
            if (r11 > r1) goto L_0x1218
            if (r12 >= r1) goto L_0x120a
        L_0x1218:
            r14.clear()     // Catch:{ Exception -> 0x11a6 }
            r3.clear()     // Catch:{ Exception -> 0x11a6 }
            r9.clear()     // Catch:{ Exception -> 0x11a6 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r10.messages     // Catch:{ Exception -> 0x11a6 }
            r1.clear()     // Catch:{ Exception -> 0x11a6 }
            goto L_0x120a
        L_0x1227:
            if (r15 == r1) goto L_0x122c
            r1 = 3
            if (r15 != r1) goto L_0x123a
        L_0x122c:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r10.messages     // Catch:{ Exception -> 0x11a6 }
            int r1 = r1.size()     // Catch:{ Exception -> 0x11a6 }
            r2 = 1
            if (r1 != r2) goto L_0x123a
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r10.messages     // Catch:{ Exception -> 0x11a6 }
            r1.clear()     // Catch:{ Exception -> 0x11a6 }
        L_0x123a:
            if (r33 == 0) goto L_0x128e
            r2 = r39
            org.telegram.SQLite.SQLiteDatabase r1 = r2.database     // Catch:{ Exception -> 0x1287 }
            java.util.Locale r4 = java.util.Locale.US     // Catch:{ Exception -> 0x1287 }
            java.lang.String r5 = "SELECT COUNT(mid) FROM messages WHERE uid = %d AND mention = 1 AND read_state IN(0, 1)"
            r6 = 1
            java.lang.Object[] r7 = new java.lang.Object[r6]     // Catch:{ Exception -> 0x1287 }
            java.lang.Long r6 = java.lang.Long.valueOf(r40)     // Catch:{ Exception -> 0x1287 }
            r8 = 0
            r7[r8] = r6     // Catch:{ Exception -> 0x1287 }
            java.lang.String r4 = java.lang.String.format(r4, r5, r7)     // Catch:{ Exception -> 0x1287 }
            java.lang.Object[] r5 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x1287 }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r4, r5)     // Catch:{ Exception -> 0x1287 }
            boolean r4 = r1.next()     // Catch:{ Exception -> 0x1287 }
            if (r4 == 0) goto L_0x126b
            int r4 = r1.intValue(r8)     // Catch:{ Exception -> 0x1287 }
            r5 = r33
            if (r5 == r4) goto L_0x1269
        L_0x1266:
            int r6 = r5 * -1
            goto L_0x126e
        L_0x1269:
            r6 = r5
            goto L_0x126e
        L_0x126b:
            r5 = r33
            goto L_0x1266
        L_0x126e:
            r1.dispose()     // Catch:{ Exception -> 0x1277 }
            r1 = r44
            r4 = r45
            r5 = r6
            goto L_0x1296
        L_0x1277:
            r0 = move-exception
            r13 = r40
        L_0x127a:
            r3 = r44
            r4 = r45
            r20 = r47
            r1 = r0
            r21 = r22
            r9 = r30
            goto L_0x0var_
        L_0x1287:
            r0 = move-exception
            r5 = r33
            r13 = r40
            goto L_0x146c
        L_0x128e:
            r2 = r39
            r5 = r33
            r1 = r44
            r4 = r45
        L_0x1296:
            r6 = r47
        L_0x1298:
            boolean r7 = r14.isEmpty()     // Catch:{ Exception -> 0x144d }
            java.lang.String r8 = ","
            if (r7 != 0) goto L_0x1413
            int r7 = r27.size()     // Catch:{ Exception -> 0x144d }
            if (r7 <= 0) goto L_0x12d8
            org.telegram.SQLite.SQLiteDatabase r7 = r2.database     // Catch:{ Exception -> 0x12c6 }
            java.util.Locale r11 = java.util.Locale.US     // Catch:{ Exception -> 0x12c6 }
            java.lang.String r12 = "SELECT data, mid, date FROM messages WHERE mid IN(%s)"
            r44 = r1
            r13 = 1
            java.lang.Object[] r1 = new java.lang.Object[r13]     // Catch:{ Exception -> 0x12c4 }
            java.lang.String r13 = android.text.TextUtils.join(r8, r14)     // Catch:{ Exception -> 0x12c4 }
            r14 = 0
            r1[r14] = r13     // Catch:{ Exception -> 0x12c4 }
            java.lang.String r1 = java.lang.String.format(r11, r12, r1)     // Catch:{ Exception -> 0x12c4 }
            java.lang.Object[] r11 = new java.lang.Object[r14]     // Catch:{ Exception -> 0x12c4 }
            org.telegram.SQLite.SQLiteCursor r1 = r7.queryFinalized(r1, r11)     // Catch:{ Exception -> 0x12c4 }
            r14 = 0
            goto L_0x12f4
        L_0x12c4:
            r0 = move-exception
            goto L_0x12c9
        L_0x12c6:
            r0 = move-exception
            r44 = r1
        L_0x12c9:
            r13 = r40
            r3 = r44
            r1 = r0
            r20 = r6
        L_0x12d0:
            r21 = r22
            r9 = r30
            r30 = r5
            goto L_0x14b8
        L_0x12d8:
            r44 = r1
            org.telegram.SQLite.SQLiteDatabase r1 = r2.database     // Catch:{ Exception -> 0x140f }
            java.util.Locale r7 = java.util.Locale.US     // Catch:{ Exception -> 0x140f }
            java.lang.String r11 = "SELECT m.data, m.mid, m.date, r.random_id FROM randoms as r INNER JOIN messages as m ON r.mid = m.mid WHERE r.random_id IN(%s)"
            r12 = 1
            java.lang.Object[] r13 = new java.lang.Object[r12]     // Catch:{ Exception -> 0x140f }
            java.lang.String r12 = android.text.TextUtils.join(r8, r14)     // Catch:{ Exception -> 0x140f }
            r14 = 0
            r13[r14] = r12     // Catch:{ Exception -> 0x140f }
            java.lang.String r7 = java.lang.String.format(r7, r11, r13)     // Catch:{ Exception -> 0x140f }
            java.lang.Object[] r11 = new java.lang.Object[r14]     // Catch:{ Exception -> 0x140f }
            org.telegram.SQLite.SQLiteCursor r1 = r1.queryFinalized(r7, r11)     // Catch:{ Exception -> 0x140f }
        L_0x12f4:
            boolean r7 = r1.next()     // Catch:{ Exception -> 0x140f }
            if (r7 == 0) goto L_0x13d6
            org.telegram.tgnet.NativeByteBuffer r7 = r1.byteBufferValue(r14)     // Catch:{ Exception -> 0x140f }
            if (r7 == 0) goto L_0x13b9
            int r11 = r7.readInt32(r14)     // Catch:{ Exception -> 0x140f }
            org.telegram.tgnet.TLRPC$Message r11 = org.telegram.tgnet.TLRPC$Message.TLdeserialize(r7, r11, r14)     // Catch:{ Exception -> 0x140f }
            r12 = r28
            r11.readAttachPath(r7, r12)     // Catch:{ Exception -> 0x140f }
            r7.reuse()     // Catch:{ Exception -> 0x140f }
            r7 = 1
            int r13 = r1.intValue(r7)     // Catch:{ Exception -> 0x140f }
            r11.id = r13     // Catch:{ Exception -> 0x140f }
            r13 = 2
            int r7 = r1.intValue(r13)     // Catch:{ Exception -> 0x140f }
            r11.date = r7     // Catch:{ Exception -> 0x140f }
            r13 = r40
            r11.dialog_id = r13     // Catch:{ Exception -> 0x13b6 }
            addUsersAndChatsFromMessage(r11, r3, r9)     // Catch:{ Exception -> 0x13b6 }
            int r7 = r27.size()     // Catch:{ Exception -> 0x13b6 }
            if (r7 <= 0) goto L_0x1372
            int r7 = r11.id     // Catch:{ Exception -> 0x13b6 }
            r45 = r4
            r4 = r27
            java.lang.Object r7 = r4.get(r7)     // Catch:{ Exception -> 0x136b }
            java.util.ArrayList r7 = (java.util.ArrayList) r7     // Catch:{ Exception -> 0x136b }
            r28 = r4
            r47 = r5
            if (r7 == 0) goto L_0x1366
            r4 = 0
        L_0x133e:
            int r5 = r7.size()     // Catch:{ Exception -> 0x1364 }
            if (r4 >= r5) goto L_0x1366
            java.lang.Object r5 = r7.get(r4)     // Catch:{ Exception -> 0x1364 }
            org.telegram.tgnet.TLRPC$Message r5 = (org.telegram.tgnet.TLRPC$Message) r5     // Catch:{ Exception -> 0x1364 }
            r5.replyMessage = r11     // Catch:{ Exception -> 0x1364 }
            boolean r18 = org.telegram.messenger.MessageObject.isMegagroup(r5)     // Catch:{ Exception -> 0x1364 }
            if (r18 == 0) goto L_0x135d
            org.telegram.tgnet.TLRPC$Message r5 = r5.replyMessage     // Catch:{ Exception -> 0x1364 }
            r18 = r6
            int r6 = r5.flags     // Catch:{ Exception -> 0x1447 }
            r6 = r6 | r24
            r5.flags = r6     // Catch:{ Exception -> 0x1447 }
            goto L_0x135f
        L_0x135d:
            r18 = r6
        L_0x135f:
            int r4 = r4 + 1
            r6 = r18
            goto L_0x133e
        L_0x1364:
            r0 = move-exception
            goto L_0x136e
        L_0x1366:
            r18 = r6
            r7 = r32
            goto L_0x13c7
        L_0x136b:
            r0 = move-exception
            r47 = r5
        L_0x136e:
            r18 = r6
            goto L_0x1448
        L_0x1372:
            r45 = r4
            r47 = r5
            r18 = r6
            r28 = r27
            r4 = 3
            long r5 = r1.longValue(r4)     // Catch:{ Exception -> 0x1447 }
            r7 = r32
            java.lang.Object r19 = r7.get(r5)     // Catch:{ Exception -> 0x1447 }
            r4 = r19
            java.util.ArrayList r4 = (java.util.ArrayList) r4     // Catch:{ Exception -> 0x1447 }
            r7.remove(r5)     // Catch:{ Exception -> 0x1447 }
            if (r4 == 0) goto L_0x13c7
            r5 = 0
        L_0x138f:
            int r6 = r4.size()     // Catch:{ Exception -> 0x1447 }
            if (r5 >= r6) goto L_0x13c7
            java.lang.Object r6 = r4.get(r5)     // Catch:{ Exception -> 0x1447 }
            org.telegram.tgnet.TLRPC$Message r6 = (org.telegram.tgnet.TLRPC$Message) r6     // Catch:{ Exception -> 0x1447 }
            r6.replyMessage = r11     // Catch:{ Exception -> 0x1447 }
            r19 = r4
            int r4 = r11.id     // Catch:{ Exception -> 0x1447 }
            r6.reply_to_msg_id = r4     // Catch:{ Exception -> 0x1447 }
            boolean r4 = org.telegram.messenger.MessageObject.isMegagroup(r6)     // Catch:{ Exception -> 0x1447 }
            if (r4 == 0) goto L_0x13b1
            org.telegram.tgnet.TLRPC$Message r4 = r6.replyMessage     // Catch:{ Exception -> 0x1447 }
            int r6 = r4.flags     // Catch:{ Exception -> 0x1447 }
            r6 = r6 | r24
            r4.flags = r6     // Catch:{ Exception -> 0x1447 }
        L_0x13b1:
            int r5 = r5 + 1
            r4 = r19
            goto L_0x138f
        L_0x13b6:
            r0 = move-exception
            goto L_0x1452
        L_0x13b9:
            r13 = r40
            r45 = r4
            r47 = r5
            r18 = r6
            r12 = r28
            r7 = r32
            r28 = r27
        L_0x13c7:
            r4 = r45
            r5 = r47
            r32 = r7
            r6 = r18
            r27 = r28
            r14 = 0
            r28 = r12
            goto L_0x12f4
        L_0x13d6:
            r13 = r40
            r45 = r4
            r47 = r5
            r18 = r6
            r7 = r32
            r1.dispose()     // Catch:{ Exception -> 0x1447 }
            int r1 = r7.size()     // Catch:{ Exception -> 0x1447 }
            if (r1 <= 0) goto L_0x141d
            r1 = 0
        L_0x13ea:
            int r4 = r7.size()     // Catch:{ Exception -> 0x1447 }
            if (r1 >= r4) goto L_0x141d
            java.lang.Object r4 = r7.valueAt(r1)     // Catch:{ Exception -> 0x1447 }
            java.util.ArrayList r4 = (java.util.ArrayList) r4     // Catch:{ Exception -> 0x1447 }
            r5 = 0
        L_0x13f7:
            int r6 = r4.size()     // Catch:{ Exception -> 0x1447 }
            if (r5 >= r6) goto L_0x140a
            java.lang.Object r6 = r4.get(r5)     // Catch:{ Exception -> 0x1447 }
            org.telegram.tgnet.TLRPC$Message r6 = (org.telegram.tgnet.TLRPC$Message) r6     // Catch:{ Exception -> 0x1447 }
            r11 = 0
            r6.reply_to_random_id = r11     // Catch:{ Exception -> 0x1447 }
            int r5 = r5 + 1
            goto L_0x13f7
        L_0x140a:
            r11 = 0
            int r1 = r1 + 1
            goto L_0x13ea
        L_0x140f:
            r0 = move-exception
            r13 = r40
            goto L_0x1452
        L_0x1413:
            r13 = r40
            r44 = r1
            r45 = r4
            r47 = r5
            r18 = r6
        L_0x141d:
            boolean r1 = r3.isEmpty()     // Catch:{ Exception -> 0x1447 }
            if (r1 != 0) goto L_0x142c
            java.lang.String r1 = android.text.TextUtils.join(r8, r3)     // Catch:{ Exception -> 0x1447 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r3 = r10.users     // Catch:{ Exception -> 0x1447 }
            r2.getUsersInternal(r1, r3)     // Catch:{ Exception -> 0x1447 }
        L_0x142c:
            boolean r1 = r9.isEmpty()     // Catch:{ Exception -> 0x1447 }
            if (r1 != 0) goto L_0x143b
            java.lang.String r1 = android.text.TextUtils.join(r8, r9)     // Catch:{ Exception -> 0x1447 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r3 = r10.chats     // Catch:{ Exception -> 0x1447 }
            r2.getChatsInternal(r1, r3)     // Catch:{ Exception -> 0x1447 }
        L_0x143b:
            r8 = r44
            r9 = r45
            r21 = r22
            r12 = r23
            r22 = r47
            goto L_0x14d4
        L_0x1447:
            r0 = move-exception
        L_0x1448:
            r3 = r44
            r4 = r45
            goto L_0x145a
        L_0x144d:
            r0 = move-exception
            r13 = r40
            r44 = r1
        L_0x1452:
            r45 = r4
            r47 = r5
            r18 = r6
            r3 = r44
        L_0x145a:
            r1 = r0
            r20 = r18
            r21 = r22
            r9 = r30
            r30 = r47
            goto L_0x14b8
        L_0x1465:
            r0 = move-exception
            r2 = r39
            r13 = r40
            r5 = r33
        L_0x146c:
            r3 = r44
            r4 = r45
            r20 = r47
            r1 = r0
            goto L_0x12d0
        L_0x1475:
            r0 = move-exception
            r5 = r13
            r1 = r14
            r10 = r36
            r13 = r40
            r23 = r1
            r20 = r4
            r29 = r5
            r21 = 1
            r30 = 0
            r34 = 0
        L_0x1488:
            r4 = r45
            goto L_0x14a0
        L_0x148b:
            r0 = move-exception
            r5 = r13
            r1 = r14
            r10 = r36
            r13 = r40
            r4 = r45
            r23 = r1
            r29 = r5
            r20 = 0
            r21 = 1
            r30 = 0
            r34 = 0
        L_0x14a0:
            r1 = r0
            goto L_0x14b8
        L_0x14a2:
            r0 = move-exception
            r10 = r3
            r2 = r15
            r3 = r1
            r15 = r14
            r13 = r4
            r4 = r45
            r1 = r0
            r9 = 0
            r20 = 0
            r21 = 0
        L_0x14b0:
            r23 = 0
        L_0x14b2:
            r29 = 0
            r30 = 0
            r34 = 0
        L_0x14b8:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r5 = r10.messages
            r5.clear()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r5 = r10.chats
            r5.clear()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r5 = r10.users
            r5.clear()
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r1)
            r8 = r3
            r18 = r20
            r12 = r23
            r22 = r30
            r30 = r9
            r9 = r4
        L_0x14d4:
            org.telegram.messenger.-$$Lambda$MessagesStorage$0uJGh2xYSoEnjmrFudcs9tPMwrk r23 = new org.telegram.messenger.-$$Lambda$MessagesStorage$0uJGh2xYSoEnjmrFudcs9tPMwrk
            r1 = r23
            r2 = r39
            r3 = r10
            r4 = r40
            r6 = r42
            r10 = r46
            r11 = r48
            r13 = r18
            r14 = r30
            r15 = r29
            r16 = r49
            r17 = r50
            r18 = r21
            r19 = r51
            r20 = r52
            r21 = r34
            r1.<init>(r2, r3, r4, r6, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22)
            return r23
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.getMessagesInternal(long, long, int, int, int, int, int, int, boolean, boolean, int):java.lang.Runnable");
    }

    static /* synthetic */ int lambda$getMessagesInternal$106(TLRPC$Message tLRPC$Message, TLRPC$Message tLRPC$Message2) {
        int i;
        int i2;
        int i3 = tLRPC$Message.id;
        if (i3 <= 0 || (i2 = tLRPC$Message2.id) <= 0) {
            int i4 = tLRPC$Message.id;
            if (i4 >= 0 || (i = tLRPC$Message2.id) >= 0) {
                int i5 = tLRPC$Message.date;
                int i6 = tLRPC$Message2.date;
                if (i5 > i6) {
                    return -1;
                }
                if (i5 < i6) {
                    return 1;
                }
                return 0;
            } else if (i4 < i) {
                return -1;
            } else {
                if (i4 > i) {
                    return 1;
                }
                return 0;
            }
        } else if (i3 > i2) {
            return -1;
        } else {
            if (i3 < i2) {
                return 1;
            }
            return 0;
        }
    }

    public /* synthetic */ void lambda$getMessagesInternal$107$MessagesStorage(TLRPC$TL_messages_messages tLRPC$TL_messages_messages, long j, long j2, int i, int i2, int i3, int i4, int i5, int i6, int i7, int i8, int i9, boolean z, boolean z2, boolean z3, int i10, boolean z4, int i11) {
        getMessagesController().processLoadedMessages(tLRPC$TL_messages_messages, j, j2, i, i2, i3, true, i4, i5, i6, i7, i8, i9, z, z2, z3, i10, z4, i11);
    }

    public void getMessages(long j, long j2, boolean z, int i, int i2, int i3, int i4, int i5, int i6, boolean z2, boolean z3, int i7) {
        $$Lambda$MessagesStorage$xNC3KGalsEFfi3VML9ynoJPdq5Q r16 = r0;
        DispatchQueue dispatchQueue = this.storageQueue;
        $$Lambda$MessagesStorage$xNC3KGalsEFfi3VML9ynoJPdq5Q r0 = new Runnable(j2, j, z, i, i2, i3, i4, i5, i6, z2, z3, i7) {
            public final /* synthetic */ long f$1;
            public final /* synthetic */ boolean f$10;
            public final /* synthetic */ boolean f$11;
            public final /* synthetic */ int f$12;
            public final /* synthetic */ long f$2;
            public final /* synthetic */ boolean f$3;
            public final /* synthetic */ int f$4;
            public final /* synthetic */ int f$5;
            public final /* synthetic */ int f$6;
            public final /* synthetic */ int f$7;
            public final /* synthetic */ int f$8;
            public final /* synthetic */ int f$9;

            {
                this.f$1 = r2;
                this.f$2 = r4;
                this.f$3 = r6;
                this.f$4 = r7;
                this.f$5 = r8;
                this.f$6 = r9;
                this.f$7 = r10;
                this.f$8 = r11;
                this.f$9 = r12;
                this.f$10 = r13;
                this.f$11 = r14;
                this.f$12 = r15;
            }

            public final void run() {
                MessagesStorage.this.lambda$getMessages$108$MessagesStorage(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6, this.f$7, this.f$8, this.f$9, this.f$10, this.f$11, this.f$12);
            }
        };
        dispatchQueue.postRunnable(r16);
    }

    public /* synthetic */ void lambda$getMessages$108$MessagesStorage(long j, long j2, boolean z, int i, int i2, int i3, int i4, int i5, int i6, boolean z2, boolean z3, int i7) {
        long j3;
        int i8 = (int) j2;
        if (z && i8 < 0) {
            TLRPC$ChatFull loadChatInfoInternal = loadChatInfoInternal(-i8, true, false);
            if (loadChatInfoInternal != null) {
                j3 = (long) (-loadChatInfoInternal.migrated_from_chat_id);
                Utilities.stageQueue.postRunnable(getMessagesInternal(j2, j3, i, i2, i3, i4, i5, i6, z2, z3, i7));
            }
        }
        j3 = j;
        Utilities.stageQueue.postRunnable(getMessagesInternal(j2, j3, i, i2, i3, i4, i5, i6, z2, z3, i7));
    }

    public void clearSentMedia() {
        this.storageQueue.postRunnable(new Runnable() {
            public final void run() {
                MessagesStorage.this.lambda$clearSentMedia$109$MessagesStorage();
            }
        });
    }

    public /* synthetic */ void lambda$clearSentMedia$109$MessagesStorage() {
        try {
            this.database.executeFast("DELETE FROM sent_files_v2 WHERE 1").stepThis().dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public Object[] getSentFile(String str, int i) {
        if (str == null || str.toLowerCase().endsWith("attheme")) {
            return null;
        }
        CountDownLatch countDownLatch = new CountDownLatch(1);
        Object[] objArr = new Object[2];
        this.storageQueue.postRunnable(new Runnable(str, i, objArr, countDownLatch) {
            public final /* synthetic */ String f$1;
            public final /* synthetic */ int f$2;
            public final /* synthetic */ Object[] f$3;
            public final /* synthetic */ CountDownLatch f$4;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
            }

            public final void run() {
                MessagesStorage.this.lambda$getSentFile$110$MessagesStorage(this.f$1, this.f$2, this.f$3, this.f$4);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        if (objArr[0] != null) {
            return objArr;
        }
        return null;
    }

    public /* synthetic */ void lambda$getSentFile$110$MessagesStorage(String str, int i, Object[] objArr, CountDownLatch countDownLatch) {
        NativeByteBuffer byteBufferValue;
        try {
            String MD5 = Utilities.MD5(str);
            if (MD5 != null) {
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data, parent FROM sent_files_v2 WHERE uid = '%s' AND type = %d", new Object[]{MD5, Integer.valueOf(i)}), new Object[0]);
                if (queryFinalized.next() && (byteBufferValue = queryFinalized.byteBufferValue(0)) != null) {
                    TLRPC$MessageMedia TLdeserialize = TLRPC$MessageMedia.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    byteBufferValue.reuse();
                    if (TLdeserialize instanceof TLRPC$TL_messageMediaDocument) {
                        objArr[0] = ((TLRPC$TL_messageMediaDocument) TLdeserialize).document;
                    } else if (TLdeserialize instanceof TLRPC$TL_messageMediaPhoto) {
                        objArr[0] = ((TLRPC$TL_messageMediaPhoto) TLdeserialize).photo;
                    }
                    if (objArr[0] != null) {
                        objArr[1] = queryFinalized.stringValue(1);
                    }
                }
                queryFinalized.dispose();
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        } catch (Throwable th) {
            countDownLatch.countDown();
            throw th;
        }
        countDownLatch.countDown();
    }

    public void putSentFile(String str, TLObject tLObject, int i, String str2) {
        if (str != null && tLObject != null && str2 != null) {
            this.storageQueue.postRunnable(new Runnable(str, tLObject, i, str2) {
                public final /* synthetic */ String f$1;
                public final /* synthetic */ TLObject f$2;
                public final /* synthetic */ int f$3;
                public final /* synthetic */ String f$4;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r5;
                }

                public final void run() {
                    MessagesStorage.this.lambda$putSentFile$111$MessagesStorage(this.f$1, this.f$2, this.f$3, this.f$4);
                }
            });
        }
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v6, resolved type: org.telegram.tgnet.TLRPC$TL_messageMediaDocument} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r1v7, resolved type: org.telegram.tgnet.TLRPC$TL_messageMediaPhoto} */
    /* JADX WARNING: type inference failed for: r1v1, types: [org.telegram.tgnet.TLObject] */
    /* JADX WARNING: type inference failed for: r1v3 */
    /* JADX WARNING: Multi-variable type inference failed */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$putSentFile$111$MessagesStorage(java.lang.String r5, org.telegram.tgnet.TLObject r6, int r7, java.lang.String r8) {
        /*
            r4 = this;
            r0 = 0
            java.lang.String r5 = org.telegram.messenger.Utilities.MD5(r5)     // Catch:{ Exception -> 0x0066 }
            if (r5 == 0) goto L_0x005e
            boolean r1 = r6 instanceof org.telegram.tgnet.TLRPC$Photo     // Catch:{ Exception -> 0x0066 }
            r2 = 1
            if (r1 == 0) goto L_0x001b
            org.telegram.tgnet.TLRPC$TL_messageMediaPhoto r1 = new org.telegram.tgnet.TLRPC$TL_messageMediaPhoto     // Catch:{ Exception -> 0x0066 }
            r1.<init>()     // Catch:{ Exception -> 0x0066 }
            org.telegram.tgnet.TLRPC$Photo r6 = (org.telegram.tgnet.TLRPC$Photo) r6     // Catch:{ Exception -> 0x0066 }
            r1.photo = r6     // Catch:{ Exception -> 0x0066 }
            int r6 = r1.flags     // Catch:{ Exception -> 0x0066 }
            r6 = r6 | r2
            r1.flags = r6     // Catch:{ Exception -> 0x0066 }
            goto L_0x002f
        L_0x001b:
            boolean r1 = r6 instanceof org.telegram.tgnet.TLRPC$Document     // Catch:{ Exception -> 0x0066 }
            if (r1 == 0) goto L_0x002e
            org.telegram.tgnet.TLRPC$TL_messageMediaDocument r1 = new org.telegram.tgnet.TLRPC$TL_messageMediaDocument     // Catch:{ Exception -> 0x0066 }
            r1.<init>()     // Catch:{ Exception -> 0x0066 }
            org.telegram.tgnet.TLRPC$Document r6 = (org.telegram.tgnet.TLRPC$Document) r6     // Catch:{ Exception -> 0x0066 }
            r1.document = r6     // Catch:{ Exception -> 0x0066 }
            int r6 = r1.flags     // Catch:{ Exception -> 0x0066 }
            r6 = r6 | r2
            r1.flags = r6     // Catch:{ Exception -> 0x0066 }
            goto L_0x002f
        L_0x002e:
            r1 = r0
        L_0x002f:
            if (r1 != 0) goto L_0x0032
            return
        L_0x0032:
            org.telegram.SQLite.SQLiteDatabase r6 = r4.database     // Catch:{ Exception -> 0x0066 }
            java.lang.String r3 = "REPLACE INTO sent_files_v2 VALUES(?, ?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r0 = r6.executeFast(r3)     // Catch:{ Exception -> 0x0066 }
            r0.requery()     // Catch:{ Exception -> 0x0066 }
            org.telegram.tgnet.NativeByteBuffer r6 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x0066 }
            int r3 = r1.getObjectSize()     // Catch:{ Exception -> 0x0066 }
            r6.<init>((int) r3)     // Catch:{ Exception -> 0x0066 }
            r1.serializeToStream(r6)     // Catch:{ Exception -> 0x0066 }
            r0.bindString(r2, r5)     // Catch:{ Exception -> 0x0066 }
            r5 = 2
            r0.bindInteger(r5, r7)     // Catch:{ Exception -> 0x0066 }
            r5 = 3
            r0.bindByteBuffer((int) r5, (org.telegram.tgnet.NativeByteBuffer) r6)     // Catch:{ Exception -> 0x0066 }
            r5 = 4
            r0.bindString(r5, r8)     // Catch:{ Exception -> 0x0066 }
            r0.step()     // Catch:{ Exception -> 0x0066 }
            r6.reuse()     // Catch:{ Exception -> 0x0066 }
        L_0x005e:
            if (r0 == 0) goto L_0x006d
        L_0x0060:
            r0.dispose()
            goto L_0x006d
        L_0x0064:
            r5 = move-exception
            goto L_0x006e
        L_0x0066:
            r5 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r5)     // Catch:{ all -> 0x0064 }
            if (r0 == 0) goto L_0x006d
            goto L_0x0060
        L_0x006d:
            return
        L_0x006e:
            if (r0 == 0) goto L_0x0073
            r0.dispose()
        L_0x0073:
            goto L_0x0075
        L_0x0074:
            throw r5
        L_0x0075:
            goto L_0x0074
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$putSentFile$111$MessagesStorage(java.lang.String, org.telegram.tgnet.TLObject, int, java.lang.String):void");
    }

    public void updateEncryptedChatSeq(TLRPC$EncryptedChat tLRPC$EncryptedChat, boolean z) {
        if (tLRPC$EncryptedChat != null) {
            this.storageQueue.postRunnable(new Runnable(tLRPC$EncryptedChat, z) {
                public final /* synthetic */ TLRPC$EncryptedChat f$1;
                public final /* synthetic */ boolean f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    MessagesStorage.this.lambda$updateEncryptedChatSeq$112$MessagesStorage(this.f$1, this.f$2);
                }
            });
        }
    }

    public /* synthetic */ void lambda$updateEncryptedChatSeq$112$MessagesStorage(TLRPC$EncryptedChat tLRPC$EncryptedChat, boolean z) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            sQLitePreparedStatement = this.database.executeFast("UPDATE enc_chats SET seq_in = ?, seq_out = ?, use_count = ?, in_seq_no = ?, mtproto_seq = ? WHERE uid = ?");
            sQLitePreparedStatement.bindInteger(1, tLRPC$EncryptedChat.seq_in);
            sQLitePreparedStatement.bindInteger(2, tLRPC$EncryptedChat.seq_out);
            sQLitePreparedStatement.bindInteger(3, (tLRPC$EncryptedChat.key_use_count_in << 16) | tLRPC$EncryptedChat.key_use_count_out);
            sQLitePreparedStatement.bindInteger(4, tLRPC$EncryptedChat.in_seq_no);
            sQLitePreparedStatement.bindInteger(5, tLRPC$EncryptedChat.mtproto_seq);
            sQLitePreparedStatement.bindInteger(6, tLRPC$EncryptedChat.id);
            sQLitePreparedStatement.step();
            if (z && tLRPC$EncryptedChat.in_seq_no != 0) {
                this.database.executeFast(String.format(Locale.US, "DELETE FROM messages WHERE mid IN (SELECT m.mid FROM messages as m LEFT JOIN messages_seq as s ON m.mid = s.mid WHERE m.uid = %d AND m.date = 0 AND m.mid < 0 AND s.seq_out <= %d)", new Object[]{Long.valueOf(((long) tLRPC$EncryptedChat.id) << 32), Integer.valueOf(tLRPC$EncryptedChat.in_seq_no)})).stepThis().dispose();
            }
            if (sQLitePreparedStatement == null) {
                return;
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
            if (sQLitePreparedStatement == null) {
                return;
            }
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
        sQLitePreparedStatement.dispose();
    }

    public void updateEncryptedChatTTL(TLRPC$EncryptedChat tLRPC$EncryptedChat) {
        if (tLRPC$EncryptedChat != null) {
            this.storageQueue.postRunnable(new Runnable(tLRPC$EncryptedChat) {
                public final /* synthetic */ TLRPC$EncryptedChat f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesStorage.this.lambda$updateEncryptedChatTTL$113$MessagesStorage(this.f$1);
                }
            });
        }
    }

    public /* synthetic */ void lambda$updateEncryptedChatTTL$113$MessagesStorage(TLRPC$EncryptedChat tLRPC$EncryptedChat) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            sQLitePreparedStatement = this.database.executeFast("UPDATE enc_chats SET ttl = ? WHERE uid = ?");
            sQLitePreparedStatement.bindInteger(1, tLRPC$EncryptedChat.ttl);
            sQLitePreparedStatement.bindInteger(2, tLRPC$EncryptedChat.id);
            sQLitePreparedStatement.step();
            if (sQLitePreparedStatement == null) {
                return;
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
            if (sQLitePreparedStatement == null) {
                return;
            }
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
        sQLitePreparedStatement.dispose();
    }

    public void updateEncryptedChatLayer(TLRPC$EncryptedChat tLRPC$EncryptedChat) {
        if (tLRPC$EncryptedChat != null) {
            this.storageQueue.postRunnable(new Runnable(tLRPC$EncryptedChat) {
                public final /* synthetic */ TLRPC$EncryptedChat f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesStorage.this.lambda$updateEncryptedChatLayer$114$MessagesStorage(this.f$1);
                }
            });
        }
    }

    public /* synthetic */ void lambda$updateEncryptedChatLayer$114$MessagesStorage(TLRPC$EncryptedChat tLRPC$EncryptedChat) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            sQLitePreparedStatement = this.database.executeFast("UPDATE enc_chats SET layer = ? WHERE uid = ?");
            sQLitePreparedStatement.bindInteger(1, tLRPC$EncryptedChat.layer);
            sQLitePreparedStatement.bindInteger(2, tLRPC$EncryptedChat.id);
            sQLitePreparedStatement.step();
            if (sQLitePreparedStatement == null) {
                return;
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
            if (sQLitePreparedStatement == null) {
                return;
            }
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
        sQLitePreparedStatement.dispose();
    }

    public void updateEncryptedChat(TLRPC$EncryptedChat tLRPC$EncryptedChat) {
        if (tLRPC$EncryptedChat != null) {
            this.storageQueue.postRunnable(new Runnable(tLRPC$EncryptedChat) {
                public final /* synthetic */ TLRPC$EncryptedChat f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesStorage.this.lambda$updateEncryptedChat$115$MessagesStorage(this.f$1);
                }
            });
        }
    }

    public /* synthetic */ void lambda$updateEncryptedChat$115$MessagesStorage(TLRPC$EncryptedChat tLRPC$EncryptedChat) {
        SQLitePreparedStatement sQLitePreparedStatement = null;
        try {
            if ((tLRPC$EncryptedChat.key_hash == null || tLRPC$EncryptedChat.key_hash.length < 16) && tLRPC$EncryptedChat.auth_key != null) {
                tLRPC$EncryptedChat.key_hash = AndroidUtilities.calcAuthKeyHash(tLRPC$EncryptedChat.auth_key);
            }
            sQLitePreparedStatement = this.database.executeFast("UPDATE enc_chats SET data = ?, g = ?, authkey = ?, ttl = ?, layer = ?, seq_in = ?, seq_out = ?, use_count = ?, exchange_id = ?, key_date = ?, fprint = ?, fauthkey = ?, khash = ?, in_seq_no = ?, admin_id = ?, mtproto_seq = ? WHERE uid = ?");
            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$EncryptedChat.getObjectSize());
            NativeByteBuffer nativeByteBuffer2 = new NativeByteBuffer(tLRPC$EncryptedChat.a_or_b != null ? tLRPC$EncryptedChat.a_or_b.length : 1);
            NativeByteBuffer nativeByteBuffer3 = new NativeByteBuffer(tLRPC$EncryptedChat.auth_key != null ? tLRPC$EncryptedChat.auth_key.length : 1);
            NativeByteBuffer nativeByteBuffer4 = new NativeByteBuffer(tLRPC$EncryptedChat.future_auth_key != null ? tLRPC$EncryptedChat.future_auth_key.length : 1);
            NativeByteBuffer nativeByteBuffer5 = new NativeByteBuffer(tLRPC$EncryptedChat.key_hash != null ? tLRPC$EncryptedChat.key_hash.length : 1);
            tLRPC$EncryptedChat.serializeToStream(nativeByteBuffer);
            sQLitePreparedStatement.bindByteBuffer(1, nativeByteBuffer);
            if (tLRPC$EncryptedChat.a_or_b != null) {
                nativeByteBuffer2.writeBytes(tLRPC$EncryptedChat.a_or_b);
            }
            if (tLRPC$EncryptedChat.auth_key != null) {
                nativeByteBuffer3.writeBytes(tLRPC$EncryptedChat.auth_key);
            }
            if (tLRPC$EncryptedChat.future_auth_key != null) {
                nativeByteBuffer4.writeBytes(tLRPC$EncryptedChat.future_auth_key);
            }
            if (tLRPC$EncryptedChat.key_hash != null) {
                nativeByteBuffer5.writeBytes(tLRPC$EncryptedChat.key_hash);
            }
            sQLitePreparedStatement.bindByteBuffer(2, nativeByteBuffer2);
            sQLitePreparedStatement.bindByteBuffer(3, nativeByteBuffer3);
            sQLitePreparedStatement.bindInteger(4, tLRPC$EncryptedChat.ttl);
            sQLitePreparedStatement.bindInteger(5, tLRPC$EncryptedChat.layer);
            sQLitePreparedStatement.bindInteger(6, tLRPC$EncryptedChat.seq_in);
            sQLitePreparedStatement.bindInteger(7, tLRPC$EncryptedChat.seq_out);
            sQLitePreparedStatement.bindInteger(8, (tLRPC$EncryptedChat.key_use_count_in << 16) | tLRPC$EncryptedChat.key_use_count_out);
            sQLitePreparedStatement.bindLong(9, tLRPC$EncryptedChat.exchange_id);
            sQLitePreparedStatement.bindInteger(10, tLRPC$EncryptedChat.key_create_date);
            sQLitePreparedStatement.bindLong(11, tLRPC$EncryptedChat.future_key_fingerprint);
            sQLitePreparedStatement.bindByteBuffer(12, nativeByteBuffer4);
            sQLitePreparedStatement.bindByteBuffer(13, nativeByteBuffer5);
            sQLitePreparedStatement.bindInteger(14, tLRPC$EncryptedChat.in_seq_no);
            sQLitePreparedStatement.bindInteger(15, tLRPC$EncryptedChat.admin_id);
            sQLitePreparedStatement.bindInteger(16, tLRPC$EncryptedChat.mtproto_seq);
            sQLitePreparedStatement.bindInteger(17, tLRPC$EncryptedChat.id);
            sQLitePreparedStatement.step();
            nativeByteBuffer.reuse();
            nativeByteBuffer2.reuse();
            nativeByteBuffer3.reuse();
            nativeByteBuffer4.reuse();
            nativeByteBuffer5.reuse();
            if (sQLitePreparedStatement == null) {
                return;
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
            if (sQLitePreparedStatement == null) {
                return;
            }
        } catch (Throwable th) {
            if (sQLitePreparedStatement != null) {
                sQLitePreparedStatement.dispose();
            }
            throw th;
        }
        sQLitePreparedStatement.dispose();
    }

    public void isDialogHasTopMessage(long j, Runnable runnable) {
        this.storageQueue.postRunnable(new Runnable(j, runnable) {
            public final /* synthetic */ long f$1;
            public final /* synthetic */ Runnable f$2;

            {
                this.f$1 = r2;
                this.f$2 = r4;
            }

            public final void run() {
                MessagesStorage.this.lambda$isDialogHasTopMessage$116$MessagesStorage(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$isDialogHasTopMessage$116$MessagesStorage(long j, Runnable runnable) {
        boolean z = false;
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT last_mid FROM dialogs WHERE did = %d", new Object[]{Long.valueOf(j)}), new Object[0]);
            if (queryFinalized.next() && queryFinalized.intValue(0) != 0) {
                z = true;
            }
            queryFinalized.dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        if (!z) {
            AndroidUtilities.runOnUIThread(runnable);
        }
    }

    public boolean isDialogHasMessages(long j) {
        CountDownLatch countDownLatch = new CountDownLatch(1);
        boolean[] zArr = new boolean[1];
        this.storageQueue.postRunnable(new Runnable(j, zArr, countDownLatch) {
            public final /* synthetic */ long f$1;
            public final /* synthetic */ boolean[] f$2;
            public final /* synthetic */ CountDownLatch f$3;

            {
                this.f$1 = r2;
                this.f$2 = r4;
                this.f$3 = r5;
            }

            public final void run() {
                MessagesStorage.this.lambda$isDialogHasMessages$117$MessagesStorage(this.f$1, this.f$2, this.f$3);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        return zArr[0];
    }

    public /* synthetic */ void lambda$isDialogHasMessages$117$MessagesStorage(long j, boolean[] zArr, CountDownLatch countDownLatch) {
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT mid FROM messages WHERE uid = %d LIMIT 1", new Object[]{Long.valueOf(j)}), new Object[0]);
            zArr[0] = queryFinalized.next();
            queryFinalized.dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        } catch (Throwable th) {
            countDownLatch.countDown();
            throw th;
        }
        countDownLatch.countDown();
    }

    public boolean hasAuthMessage(int i) {
        CountDownLatch countDownLatch = new CountDownLatch(1);
        boolean[] zArr = new boolean[1];
        this.storageQueue.postRunnable(new Runnable(i, zArr, countDownLatch) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ boolean[] f$2;
            public final /* synthetic */ CountDownLatch f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesStorage.this.lambda$hasAuthMessage$118$MessagesStorage(this.f$1, this.f$2, this.f$3);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        return zArr[0];
    }

    public /* synthetic */ void lambda$hasAuthMessage$118$MessagesStorage(int i, boolean[] zArr, CountDownLatch countDownLatch) {
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT mid FROM messages WHERE uid = 777000 AND date = %d AND mid < 0 LIMIT 1", new Object[]{Integer.valueOf(i)}), new Object[0]);
            zArr[0] = queryFinalized.next();
            queryFinalized.dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        } catch (Throwable th) {
            countDownLatch.countDown();
            throw th;
        }
        countDownLatch.countDown();
    }

    public void getEncryptedChat(int i, CountDownLatch countDownLatch, ArrayList<TLObject> arrayList) {
        if (countDownLatch != null && arrayList != null) {
            this.storageQueue.postRunnable(new Runnable(i, arrayList, countDownLatch) {
                public final /* synthetic */ int f$1;
                public final /* synthetic */ ArrayList f$2;
                public final /* synthetic */ CountDownLatch f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run() {
                    MessagesStorage.this.lambda$getEncryptedChat$119$MessagesStorage(this.f$1, this.f$2, this.f$3);
                }
            });
        }
    }

    public /* synthetic */ void lambda$getEncryptedChat$119$MessagesStorage(int i, ArrayList arrayList, CountDownLatch countDownLatch) {
        try {
            ArrayList arrayList2 = new ArrayList();
            ArrayList arrayList3 = new ArrayList();
            getEncryptedChatsInternal("" + i, arrayList3, arrayList2);
            if (!arrayList3.isEmpty() && !arrayList2.isEmpty()) {
                ArrayList arrayList4 = new ArrayList();
                getUsersInternal(TextUtils.join(",", arrayList2), arrayList4);
                if (!arrayList4.isEmpty()) {
                    arrayList.add(arrayList3.get(0));
                    arrayList.add(arrayList4.get(0));
                }
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        } catch (Throwable th) {
            countDownLatch.countDown();
            throw th;
        }
        countDownLatch.countDown();
    }

    public void putEncryptedChat(TLRPC$EncryptedChat tLRPC$EncryptedChat, TLRPC$User tLRPC$User, TLRPC$Dialog tLRPC$Dialog) {
        if (tLRPC$EncryptedChat != null) {
            this.storageQueue.postRunnable(new Runnable(tLRPC$EncryptedChat, tLRPC$User, tLRPC$Dialog) {
                public final /* synthetic */ TLRPC$EncryptedChat f$1;
                public final /* synthetic */ TLRPC$User f$2;
                public final /* synthetic */ TLRPC$Dialog f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run() {
                    MessagesStorage.this.lambda$putEncryptedChat$120$MessagesStorage(this.f$1, this.f$2, this.f$3);
                }
            });
        }
    }

    public /* synthetic */ void lambda$putEncryptedChat$120$MessagesStorage(TLRPC$EncryptedChat tLRPC$EncryptedChat, TLRPC$User tLRPC$User, TLRPC$Dialog tLRPC$Dialog) {
        TLRPC$EncryptedChat tLRPC$EncryptedChat2 = tLRPC$EncryptedChat;
        TLRPC$User tLRPC$User2 = tLRPC$User;
        TLRPC$Dialog tLRPC$Dialog2 = tLRPC$Dialog;
        try {
            if ((tLRPC$EncryptedChat2.key_hash == null || tLRPC$EncryptedChat2.key_hash.length < 16) && tLRPC$EncryptedChat2.auth_key != null) {
                tLRPC$EncryptedChat2.key_hash = AndroidUtilities.calcAuthKeyHash(tLRPC$EncryptedChat2.auth_key);
            }
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO enc_chats VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
            NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$EncryptedChat.getObjectSize());
            NativeByteBuffer nativeByteBuffer2 = new NativeByteBuffer(tLRPC$EncryptedChat2.a_or_b != null ? tLRPC$EncryptedChat2.a_or_b.length : 1);
            NativeByteBuffer nativeByteBuffer3 = new NativeByteBuffer(tLRPC$EncryptedChat2.auth_key != null ? tLRPC$EncryptedChat2.auth_key.length : 1);
            NativeByteBuffer nativeByteBuffer4 = new NativeByteBuffer(tLRPC$EncryptedChat2.future_auth_key != null ? tLRPC$EncryptedChat2.future_auth_key.length : 1);
            NativeByteBuffer nativeByteBuffer5 = new NativeByteBuffer(tLRPC$EncryptedChat2.key_hash != null ? tLRPC$EncryptedChat2.key_hash.length : 1);
            tLRPC$EncryptedChat2.serializeToStream(nativeByteBuffer);
            executeFast.bindInteger(1, tLRPC$EncryptedChat2.id);
            executeFast.bindInteger(2, tLRPC$User2.id);
            executeFast.bindString(3, formatUserSearchName(tLRPC$User2));
            executeFast.bindByteBuffer(4, nativeByteBuffer);
            if (tLRPC$EncryptedChat2.a_or_b != null) {
                nativeByteBuffer2.writeBytes(tLRPC$EncryptedChat2.a_or_b);
            }
            if (tLRPC$EncryptedChat2.auth_key != null) {
                nativeByteBuffer3.writeBytes(tLRPC$EncryptedChat2.auth_key);
            }
            if (tLRPC$EncryptedChat2.future_auth_key != null) {
                nativeByteBuffer4.writeBytes(tLRPC$EncryptedChat2.future_auth_key);
            }
            if (tLRPC$EncryptedChat2.key_hash != null) {
                nativeByteBuffer5.writeBytes(tLRPC$EncryptedChat2.key_hash);
            }
            executeFast.bindByteBuffer(5, nativeByteBuffer2);
            executeFast.bindByteBuffer(6, nativeByteBuffer3);
            executeFast.bindInteger(7, tLRPC$EncryptedChat2.ttl);
            executeFast.bindInteger(8, tLRPC$EncryptedChat2.layer);
            executeFast.bindInteger(9, tLRPC$EncryptedChat2.seq_in);
            executeFast.bindInteger(10, tLRPC$EncryptedChat2.seq_out);
            executeFast.bindInteger(11, tLRPC$EncryptedChat2.key_use_count_out | (tLRPC$EncryptedChat2.key_use_count_in << 16));
            executeFast.bindLong(12, tLRPC$EncryptedChat2.exchange_id);
            executeFast.bindInteger(13, tLRPC$EncryptedChat2.key_create_date);
            executeFast.bindLong(14, tLRPC$EncryptedChat2.future_key_fingerprint);
            executeFast.bindByteBuffer(15, nativeByteBuffer4);
            executeFast.bindByteBuffer(16, nativeByteBuffer5);
            executeFast.bindInteger(17, tLRPC$EncryptedChat2.in_seq_no);
            executeFast.bindInteger(18, tLRPC$EncryptedChat2.admin_id);
            executeFast.bindInteger(19, tLRPC$EncryptedChat2.mtproto_seq);
            executeFast.step();
            executeFast.dispose();
            nativeByteBuffer.reuse();
            nativeByteBuffer2.reuse();
            nativeByteBuffer3.reuse();
            nativeByteBuffer4.reuse();
            nativeByteBuffer5.reuse();
            if (tLRPC$Dialog2 != null) {
                SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO dialogs VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                executeFast2.bindLong(1, tLRPC$Dialog2.id);
                executeFast2.bindInteger(2, tLRPC$Dialog2.last_message_date);
                executeFast2.bindInteger(3, tLRPC$Dialog2.unread_count);
                executeFast2.bindInteger(4, tLRPC$Dialog2.top_message);
                executeFast2.bindInteger(5, tLRPC$Dialog2.read_inbox_max_id);
                executeFast2.bindInteger(6, tLRPC$Dialog2.read_outbox_max_id);
                executeFast2.bindInteger(7, 0);
                executeFast2.bindInteger(8, tLRPC$Dialog2.unread_mentions_count);
                executeFast2.bindInteger(9, tLRPC$Dialog2.pts);
                executeFast2.bindInteger(10, 0);
                executeFast2.bindInteger(11, tLRPC$Dialog2.pinnedNum);
                executeFast2.bindInteger(12, tLRPC$Dialog2.flags);
                executeFast2.bindInteger(13, tLRPC$Dialog2.folder_id);
                executeFast2.bindNull(14);
                executeFast2.step();
                executeFast2.dispose();
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    private String formatUserSearchName(TLRPC$User tLRPC$User) {
        StringBuilder sb = new StringBuilder();
        String str = tLRPC$User.first_name;
        if (str != null && str.length() > 0) {
            sb.append(tLRPC$User.first_name);
        }
        String str2 = tLRPC$User.last_name;
        if (str2 != null && str2.length() > 0) {
            if (sb.length() > 0) {
                sb.append(" ");
            }
            sb.append(tLRPC$User.last_name);
        }
        sb.append(";;;");
        String str3 = tLRPC$User.username;
        if (str3 != null && str3.length() > 0) {
            sb.append(tLRPC$User.username);
        }
        return sb.toString().toLowerCase();
    }

    private void putUsersInternal(ArrayList<TLRPC$User> arrayList) throws Exception {
        if (arrayList != null && !arrayList.isEmpty()) {
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO users VALUES(?, ?, ?, ?)");
            for (int i = 0; i < arrayList.size(); i++) {
                TLRPC$User tLRPC$User = arrayList.get(i);
                if (tLRPC$User.min) {
                    SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM users WHERE uid = %d", new Object[]{Integer.valueOf(tLRPC$User.id)}), new Object[0]);
                    if (queryFinalized.next()) {
                        try {
                            NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                            if (byteBufferValue != null) {
                                TLRPC$User TLdeserialize = TLRPC$User.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                byteBufferValue.reuse();
                                if (TLdeserialize != null) {
                                    if (tLRPC$User.username != null) {
                                        TLdeserialize.username = tLRPC$User.username;
                                        TLdeserialize.flags |= 8;
                                    } else {
                                        TLdeserialize.username = null;
                                        TLdeserialize.flags &= -9;
                                    }
                                    if (tLRPC$User.photo != null) {
                                        TLdeserialize.photo = tLRPC$User.photo;
                                        TLdeserialize.flags |= 32;
                                    } else {
                                        TLdeserialize.photo = null;
                                        TLdeserialize.flags &= -33;
                                    }
                                    tLRPC$User = TLdeserialize;
                                }
                            }
                        } catch (Exception e) {
                            FileLog.e((Throwable) e);
                        }
                    }
                    queryFinalized.dispose();
                }
                executeFast.requery();
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$User.getObjectSize());
                tLRPC$User.serializeToStream(nativeByteBuffer);
                executeFast.bindInteger(1, tLRPC$User.id);
                executeFast.bindString(2, formatUserSearchName(tLRPC$User));
                TLRPC$UserStatus tLRPC$UserStatus = tLRPC$User.status;
                if (tLRPC$UserStatus != null) {
                    if (tLRPC$UserStatus instanceof TLRPC$TL_userStatusRecently) {
                        tLRPC$UserStatus.expires = -100;
                    } else if (tLRPC$UserStatus instanceof TLRPC$TL_userStatusLastWeek) {
                        tLRPC$UserStatus.expires = -101;
                    } else if (tLRPC$UserStatus instanceof TLRPC$TL_userStatusLastMonth) {
                        tLRPC$UserStatus.expires = -102;
                    }
                    executeFast.bindInteger(3, tLRPC$User.status.expires);
                } else {
                    executeFast.bindInteger(3, 0);
                }
                executeFast.bindByteBuffer(4, nativeByteBuffer);
                executeFast.step();
                nativeByteBuffer.reuse();
            }
            executeFast.dispose();
        }
    }

    public void updateChatDefaultBannedRights(int i, TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights, int i2) {
        if (tLRPC$TL_chatBannedRights != null && i != 0) {
            this.storageQueue.postRunnable(new Runnable(i, i2, tLRPC$TL_chatBannedRights) {
                public final /* synthetic */ int f$1;
                public final /* synthetic */ int f$2;
                public final /* synthetic */ TLRPC$TL_chatBannedRights f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run() {
                    MessagesStorage.this.lambda$updateChatDefaultBannedRights$121$MessagesStorage(this.f$1, this.f$2, this.f$3);
                }
            });
        }
    }

    public /* synthetic */ void lambda$updateChatDefaultBannedRights$121$MessagesStorage(int i, int i2, TLRPC$TL_chatBannedRights tLRPC$TL_chatBannedRights) {
        NativeByteBuffer byteBufferValue;
        TLRPC$Chat tLRPC$Chat = null;
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM chats WHERE uid = %d", new Object[]{Integer.valueOf(i)}), new Object[0]);
            if (queryFinalized.next() && (byteBufferValue = queryFinalized.byteBufferValue(0)) != null) {
                tLRPC$Chat = TLRPC$Chat.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                byteBufferValue.reuse();
            }
            queryFinalized.dispose();
            if (tLRPC$Chat == null) {
                return;
            }
            if (tLRPC$Chat.default_banned_rights == null || i2 >= tLRPC$Chat.version) {
                tLRPC$Chat.default_banned_rights = tLRPC$TL_chatBannedRights;
                tLRPC$Chat.flags |= 262144;
                tLRPC$Chat.version = i2;
                SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE chats SET data = ? WHERE uid = ?");
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$Chat.getObjectSize());
                tLRPC$Chat.serializeToStream(nativeByteBuffer);
                executeFast.bindByteBuffer(1, nativeByteBuffer);
                executeFast.bindInteger(2, tLRPC$Chat.id);
                executeFast.step();
                nativeByteBuffer.reuse();
                executeFast.dispose();
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    private void putChatsInternal(ArrayList<TLRPC$Chat> arrayList) throws Exception {
        if (arrayList != null && !arrayList.isEmpty()) {
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO chats VALUES(?, ?, ?)");
            for (int i = 0; i < arrayList.size(); i++) {
                TLRPC$Chat tLRPC$Chat = arrayList.get(i);
                if (tLRPC$Chat.min) {
                    SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM chats WHERE uid = %d", new Object[]{Integer.valueOf(tLRPC$Chat.id)}), new Object[0]);
                    if (queryFinalized.next()) {
                        try {
                            NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                            if (byteBufferValue != null) {
                                TLRPC$Chat TLdeserialize = TLRPC$Chat.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                                byteBufferValue.reuse();
                                if (TLdeserialize != null) {
                                    TLdeserialize.title = tLRPC$Chat.title;
                                    TLdeserialize.photo = tLRPC$Chat.photo;
                                    TLdeserialize.broadcast = tLRPC$Chat.broadcast;
                                    TLdeserialize.verified = tLRPC$Chat.verified;
                                    TLdeserialize.megagroup = tLRPC$Chat.megagroup;
                                    if (tLRPC$Chat.default_banned_rights != null) {
                                        TLdeserialize.default_banned_rights = tLRPC$Chat.default_banned_rights;
                                        TLdeserialize.flags |= 262144;
                                    }
                                    if (tLRPC$Chat.admin_rights != null) {
                                        TLdeserialize.admin_rights = tLRPC$Chat.admin_rights;
                                        TLdeserialize.flags |= 16384;
                                    }
                                    if (tLRPC$Chat.banned_rights != null) {
                                        TLdeserialize.banned_rights = tLRPC$Chat.banned_rights;
                                        TLdeserialize.flags |= 32768;
                                    }
                                    if (tLRPC$Chat.username != null) {
                                        TLdeserialize.username = tLRPC$Chat.username;
                                        TLdeserialize.flags |= 64;
                                    } else {
                                        TLdeserialize.username = null;
                                        TLdeserialize.flags &= -65;
                                    }
                                    tLRPC$Chat = TLdeserialize;
                                }
                            }
                        } catch (Exception e) {
                            FileLog.e((Throwable) e);
                        }
                    }
                    queryFinalized.dispose();
                }
                executeFast.requery();
                tLRPC$Chat.flags |= 131072;
                NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$Chat.getObjectSize());
                tLRPC$Chat.serializeToStream(nativeByteBuffer);
                executeFast.bindInteger(1, tLRPC$Chat.id);
                String str = tLRPC$Chat.title;
                if (str != null) {
                    executeFast.bindString(2, str.toLowerCase());
                } else {
                    executeFast.bindString(2, "");
                }
                executeFast.bindByteBuffer(3, nativeByteBuffer);
                executeFast.step();
                nativeByteBuffer.reuse();
            }
            executeFast.dispose();
        }
    }

    public void getUsersInternal(String str, ArrayList<TLRPC$User> arrayList) throws Exception {
        if (str != null && str.length() != 0 && arrayList != null) {
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data, status FROM users WHERE uid IN(%s)", new Object[]{str}), new Object[0]);
            while (queryFinalized.next()) {
                try {
                    NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                    if (byteBufferValue != null) {
                        TLRPC$User TLdeserialize = TLRPC$User.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        byteBufferValue.reuse();
                        if (TLdeserialize != null) {
                            if (TLdeserialize.status != null) {
                                TLdeserialize.status.expires = queryFinalized.intValue(1);
                            }
                            arrayList.add(TLdeserialize);
                        }
                    }
                } catch (Exception e) {
                    FileLog.e((Throwable) e);
                }
            }
            queryFinalized.dispose();
        }
    }

    public void getChatsInternal(String str, ArrayList<TLRPC$Chat> arrayList) throws Exception {
        if (str != null && str.length() != 0 && arrayList != null) {
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data FROM chats WHERE uid IN(%s)", new Object[]{str}), new Object[0]);
            while (queryFinalized.next()) {
                try {
                    NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                    if (byteBufferValue != null) {
                        TLRPC$Chat TLdeserialize = TLRPC$Chat.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        byteBufferValue.reuse();
                        if (TLdeserialize != null) {
                            arrayList.add(TLdeserialize);
                        }
                    }
                } catch (Exception e) {
                    FileLog.e((Throwable) e);
                }
            }
            queryFinalized.dispose();
        }
    }

    public void getEncryptedChatsInternal(String str, ArrayList<TLRPC$EncryptedChat> arrayList, ArrayList<Integer> arrayList2) throws Exception {
        if (str != null && str.length() != 0 && arrayList != null) {
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT data, user, g, authkey, ttl, layer, seq_in, seq_out, use_count, exchange_id, key_date, fprint, fauthkey, khash, in_seq_no, admin_id, mtproto_seq FROM enc_chats WHERE uid IN(%s)", new Object[]{str}), new Object[0]);
            while (queryFinalized.next()) {
                try {
                    NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(0);
                    if (byteBufferValue != null) {
                        TLRPC$EncryptedChat TLdeserialize = TLRPC$EncryptedChat.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        byteBufferValue.reuse();
                        if (TLdeserialize != null) {
                            int intValue = queryFinalized.intValue(1);
                            TLdeserialize.user_id = intValue;
                            if (arrayList2 != null && !arrayList2.contains(Integer.valueOf(intValue))) {
                                arrayList2.add(Integer.valueOf(TLdeserialize.user_id));
                            }
                            TLdeserialize.a_or_b = queryFinalized.byteArrayValue(2);
                            TLdeserialize.auth_key = queryFinalized.byteArrayValue(3);
                            TLdeserialize.ttl = queryFinalized.intValue(4);
                            TLdeserialize.layer = queryFinalized.intValue(5);
                            TLdeserialize.seq_in = queryFinalized.intValue(6);
                            TLdeserialize.seq_out = queryFinalized.intValue(7);
                            int intValue2 = queryFinalized.intValue(8);
                            TLdeserialize.key_use_count_in = (short) (intValue2 >> 16);
                            TLdeserialize.key_use_count_out = (short) intValue2;
                            TLdeserialize.exchange_id = queryFinalized.longValue(9);
                            TLdeserialize.key_create_date = queryFinalized.intValue(10);
                            TLdeserialize.future_key_fingerprint = queryFinalized.longValue(11);
                            TLdeserialize.future_auth_key = queryFinalized.byteArrayValue(12);
                            TLdeserialize.key_hash = queryFinalized.byteArrayValue(13);
                            TLdeserialize.in_seq_no = queryFinalized.intValue(14);
                            int intValue3 = queryFinalized.intValue(15);
                            if (intValue3 != 0) {
                                TLdeserialize.admin_id = intValue3;
                            }
                            TLdeserialize.mtproto_seq = queryFinalized.intValue(16);
                            arrayList.add(TLdeserialize);
                        }
                    }
                } catch (Exception e) {
                    FileLog.e((Throwable) e);
                }
            }
            queryFinalized.dispose();
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: putUsersAndChatsInternal */
    public void lambda$putUsersAndChats$122$MessagesStorage(ArrayList<TLRPC$User> arrayList, ArrayList<TLRPC$Chat> arrayList2, boolean z) {
        if (z) {
            try {
                this.database.beginTransaction();
            } catch (Exception e) {
                FileLog.e((Throwable) e);
                return;
            }
        }
        putUsersInternal(arrayList);
        putChatsInternal(arrayList2);
        if (z) {
            this.database.commitTransaction();
        }
    }

    public void putUsersAndChats(ArrayList<TLRPC$User> arrayList, ArrayList<TLRPC$Chat> arrayList2, boolean z, boolean z2) {
        if (arrayList != null && arrayList.isEmpty() && arrayList2 != null && arrayList2.isEmpty()) {
            return;
        }
        if (z2) {
            this.storageQueue.postRunnable(new Runnable(arrayList, arrayList2, z) {
                public final /* synthetic */ ArrayList f$1;
                public final /* synthetic */ ArrayList f$2;
                public final /* synthetic */ boolean f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run() {
                    MessagesStorage.this.lambda$putUsersAndChats$122$MessagesStorage(this.f$1, this.f$2, this.f$3);
                }
            });
        } else {
            lambda$putUsersAndChats$122$MessagesStorage(arrayList, arrayList2, z);
        }
    }

    public void removeFromDownloadQueue(long j, int i, boolean z) {
        this.storageQueue.postRunnable(new Runnable(z, i, j) {
            public final /* synthetic */ boolean f$1;
            public final /* synthetic */ int f$2;
            public final /* synthetic */ long f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesStorage.this.lambda$removeFromDownloadQueue$123$MessagesStorage(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    public /* synthetic */ void lambda$removeFromDownloadQueue$123$MessagesStorage(boolean z, int i, long j) {
        if (z) {
            try {
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT min(date) FROM download_queue WHERE type = %d", new Object[]{Integer.valueOf(i)}), new Object[0]);
                int intValue = queryFinalized.next() ? queryFinalized.intValue(0) : -1;
                queryFinalized.dispose();
                if (intValue != -1) {
                    this.database.executeFast(String.format(Locale.US, "UPDATE download_queue SET date = %d WHERE uid = %d AND type = %d", new Object[]{Integer.valueOf(intValue - 1), Long.valueOf(j), Integer.valueOf(i)})).stepThis().dispose();
                }
            } catch (Exception e) {
                FileLog.e((Throwable) e);
            }
        } else {
            this.database.executeFast(String.format(Locale.US, "DELETE FROM download_queue WHERE uid = %d AND type = %d", new Object[]{Long.valueOf(j), Integer.valueOf(i)})).stepThis().dispose();
        }
    }

    private void deleteFromDownloadQueue(ArrayList<Pair<Long, Integer>> arrayList, boolean z) {
        if (arrayList != null && !arrayList.isEmpty()) {
            if (z) {
                try {
                    this.database.beginTransaction();
                } catch (Exception e) {
                    FileLog.e((Throwable) e);
                    return;
                }
            }
            SQLitePreparedStatement executeFast = this.database.executeFast("DELETE FROM download_queue WHERE uid = ? AND type = ?");
            int size = arrayList.size();
            for (int i = 0; i < size; i++) {
                Pair pair = arrayList.get(i);
                executeFast.requery();
                executeFast.bindLong(1, ((Long) pair.first).longValue());
                executeFast.bindInteger(1, ((Integer) pair.second).intValue());
                executeFast.step();
            }
            executeFast.dispose();
            if (z) {
                this.database.commitTransaction();
            }
            AndroidUtilities.runOnUIThread(new Runnable(arrayList) {
                public final /* synthetic */ ArrayList f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesStorage.this.lambda$deleteFromDownloadQueue$124$MessagesStorage(this.f$1);
                }
            });
        }
    }

    public /* synthetic */ void lambda$deleteFromDownloadQueue$124$MessagesStorage(ArrayList arrayList) {
        getDownloadController().cancelDownloading(arrayList);
    }

    public void clearDownloadQueue(int i) {
        this.storageQueue.postRunnable(new Runnable(i) {
            public final /* synthetic */ int f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesStorage.this.lambda$clearDownloadQueue$125$MessagesStorage(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$clearDownloadQueue$125$MessagesStorage(int i) {
        if (i == 0) {
            try {
                this.database.executeFast("DELETE FROM download_queue WHERE 1").stepThis().dispose();
            } catch (Exception e) {
                FileLog.e((Throwable) e);
            }
        } else {
            this.database.executeFast(String.format(Locale.US, "DELETE FROM download_queue WHERE type = %d", new Object[]{Integer.valueOf(i)})).stepThis().dispose();
        }
    }

    public void getDownloadQueue(int i) {
        this.storageQueue.postRunnable(new Runnable(i) {
            public final /* synthetic */ int f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesStorage.this.lambda$getDownloadQueue$127$MessagesStorage(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$getDownloadQueue$127$MessagesStorage(int i) {
        try {
            ArrayList arrayList = new ArrayList();
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, type, data, parent FROM download_queue WHERE type = %d ORDER BY date DESC LIMIT 3", new Object[]{Integer.valueOf(i)}), new Object[0]);
            while (queryFinalized.next()) {
                DownloadObject downloadObject = new DownloadObject();
                downloadObject.type = queryFinalized.intValue(1);
                downloadObject.id = queryFinalized.longValue(0);
                downloadObject.parent = queryFinalized.stringValue(3);
                NativeByteBuffer byteBufferValue = queryFinalized.byteBufferValue(2);
                if (byteBufferValue != null) {
                    TLRPC$MessageMedia TLdeserialize = TLRPC$MessageMedia.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                    byteBufferValue.reuse();
                    if (TLdeserialize.document != null) {
                        downloadObject.object = TLdeserialize.document;
                        downloadObject.secret = MessageObject.isVideoDocument(TLdeserialize.document) && TLdeserialize.ttl_seconds > 0 && TLdeserialize.ttl_seconds <= 60;
                    } else if (TLdeserialize.photo != null) {
                        downloadObject.object = TLdeserialize.photo;
                        downloadObject.secret = TLdeserialize.ttl_seconds > 0 && TLdeserialize.ttl_seconds <= 60;
                    }
                    downloadObject.forceCache = (TLdeserialize.flags & Integer.MIN_VALUE) != 0;
                }
                arrayList.add(downloadObject);
            }
            queryFinalized.dispose();
            AndroidUtilities.runOnUIThread(new Runnable(i, arrayList) {
                public final /* synthetic */ int f$1;
                public final /* synthetic */ ArrayList f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    MessagesStorage.this.lambda$null$126$MessagesStorage(this.f$1, this.f$2);
                }
            });
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public /* synthetic */ void lambda$null$126$MessagesStorage(int i, ArrayList arrayList) {
        getDownloadController().processDownloadObjects(i, arrayList);
    }

    private int getMessageMediaType(TLRPC$Message tLRPC$Message) {
        int i;
        if (!(tLRPC$Message instanceof TLRPC$TL_message_secret)) {
            if (tLRPC$Message instanceof TLRPC$TL_message) {
                TLRPC$MessageMedia tLRPC$MessageMedia = tLRPC$Message.media;
                if (((tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaPhoto) || (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaDocument)) && tLRPC$Message.media.ttl_seconds != 0) {
                    return 1;
                }
            }
            if ((tLRPC$Message.media instanceof TLRPC$TL_messageMediaPhoto) || MessageObject.isVideoMessage(tLRPC$Message)) {
                return 0;
            }
            return -1;
        } else if ((((tLRPC$Message.media instanceof TLRPC$TL_messageMediaPhoto) || MessageObject.isGifMessage(tLRPC$Message)) && (i = tLRPC$Message.ttl) > 0 && i <= 60) || MessageObject.isVoiceMessage(tLRPC$Message) || MessageObject.isVideoMessage(tLRPC$Message) || MessageObject.isRoundVideoMessage(tLRPC$Message)) {
            return 1;
        } else {
            if ((tLRPC$Message.media instanceof TLRPC$TL_messageMediaPhoto) || MessageObject.isVideoMessage(tLRPC$Message)) {
                return 0;
            }
            return -1;
        }
    }

    public void putWebPages(LongSparseArray<TLRPC$WebPage> longSparseArray) {
        if (!isEmpty((LongSparseArray<?>) longSparseArray)) {
            this.storageQueue.postRunnable(new Runnable(longSparseArray) {
                public final /* synthetic */ LongSparseArray f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesStorage.this.lambda$putWebPages$129$MessagesStorage(this.f$1);
                }
            });
        }
    }

    public /* synthetic */ void lambda$putWebPages$129$MessagesStorage(LongSparseArray longSparseArray) {
        try {
            ArrayList arrayList = new ArrayList();
            for (int i = 0; i < longSparseArray.size(); i++) {
                SQLiteDatabase sQLiteDatabase = this.database;
                SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized("SELECT mid FROM webpage_pending WHERE id = " + longSparseArray.keyAt(i), new Object[0]);
                ArrayList arrayList2 = new ArrayList();
                while (queryFinalized.next()) {
                    arrayList2.add(Long.valueOf(queryFinalized.longValue(0)));
                }
                queryFinalized.dispose();
                if (!arrayList2.isEmpty()) {
                    SQLiteCursor queryFinalized2 = this.database.queryFinalized(String.format(Locale.US, "SELECT mid, data FROM messages WHERE mid IN (%s)", new Object[]{TextUtils.join(",", arrayList2)}), new Object[0]);
                    while (queryFinalized2.next()) {
                        int intValue = queryFinalized2.intValue(0);
                        NativeByteBuffer byteBufferValue = queryFinalized2.byteBufferValue(1);
                        if (byteBufferValue != null) {
                            TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                            TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                            byteBufferValue.reuse();
                            if (TLdeserialize.media instanceof TLRPC$TL_messageMediaWebPage) {
                                TLdeserialize.id = intValue;
                                TLdeserialize.media.webpage = (TLRPC$WebPage) longSparseArray.valueAt(i);
                                arrayList.add(TLdeserialize);
                            }
                        }
                    }
                    queryFinalized2.dispose();
                }
            }
            if (!arrayList.isEmpty()) {
                this.database.beginTransaction();
                SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages SET data = ? WHERE mid = ?");
                SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE media_v2 SET data = ? WHERE mid = ?");
                for (int i2 = 0; i2 < arrayList.size(); i2++) {
                    TLRPC$Message tLRPC$Message = (TLRPC$Message) arrayList.get(i2);
                    NativeByteBuffer nativeByteBuffer = new NativeByteBuffer(tLRPC$Message.getObjectSize());
                    tLRPC$Message.serializeToStream(nativeByteBuffer);
                    long j = (long) tLRPC$Message.id;
                    if (tLRPC$Message.to_id.channel_id != 0) {
                        j |= ((long) tLRPC$Message.to_id.channel_id) << 32;
                    }
                    executeFast.requery();
                    executeFast.bindByteBuffer(1, nativeByteBuffer);
                    executeFast.bindLong(2, j);
                    executeFast.step();
                    executeFast2.requery();
                    executeFast2.bindByteBuffer(1, nativeByteBuffer);
                    executeFast2.bindLong(2, j);
                    executeFast2.step();
                    nativeByteBuffer.reuse();
                }
                executeFast.dispose();
                executeFast2.dispose();
                this.database.commitTransaction();
                AndroidUtilities.runOnUIThread(new Runnable(arrayList) {
                    public final /* synthetic */ ArrayList f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run() {
                        MessagesStorage.this.lambda$null$128$MessagesStorage(this.f$1);
                    }
                });
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public /* synthetic */ void lambda$null$128$MessagesStorage(ArrayList arrayList) {
        getNotificationCenter().postNotificationName(NotificationCenter.didReceivedWebpages, arrayList);
    }

    public void overwriteChannel(int i, TLRPC$TL_updates_channelDifferenceTooLong tLRPC$TL_updates_channelDifferenceTooLong, int i2) {
        this.storageQueue.postRunnable(new Runnable(i, i2, tLRPC$TL_updates_channelDifferenceTooLong) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ int f$2;
            public final /* synthetic */ TLRPC$TL_updates_channelDifferenceTooLong f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesStorage.this.lambda$overwriteChannel$131$MessagesStorage(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    /* JADX WARNING: Removed duplicated region for block: B:11:0x0112 A[Catch:{ Exception -> 0x0145 }] */
    /* JADX WARNING: Removed duplicated region for block: B:12:0x0114 A[Catch:{ Exception -> 0x0145 }] */
    /* JADX WARNING: Removed duplicated region for block: B:15:0x0133 A[Catch:{ Exception -> 0x0145 }] */
    /* JADX WARNING: Removed duplicated region for block: B:21:? A[RETURN, SYNTHETIC] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$overwriteChannel$131$MessagesStorage(int r11, int r12, org.telegram.tgnet.TLRPC$TL_updates_channelDifferenceTooLong r13) {
        /*
            r10 = this;
            int r0 = -r11
            long r0 = (long) r0
            org.telegram.SQLite.SQLiteDatabase r2 = r10.database     // Catch:{ Exception -> 0x0145 }
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0145 }
            r3.<init>()     // Catch:{ Exception -> 0x0145 }
            java.lang.String r4 = "SELECT pinned FROM dialogs WHERE did = "
            r3.append(r4)     // Catch:{ Exception -> 0x0145 }
            r3.append(r0)     // Catch:{ Exception -> 0x0145 }
            java.lang.String r3 = r3.toString()     // Catch:{ Exception -> 0x0145 }
            r4 = 0
            java.lang.Object[] r5 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x0145 }
            org.telegram.SQLite.SQLiteCursor r2 = r2.queryFinalized(r3, r5)     // Catch:{ Exception -> 0x0145 }
            boolean r3 = r2.next()     // Catch:{ Exception -> 0x0145 }
            r5 = 1
            if (r3 != 0) goto L_0x002a
            r3 = 0
            if (r12 == 0) goto L_0x0028
            r6 = 1
            goto L_0x002f
        L_0x0028:
            r6 = 0
            goto L_0x002f
        L_0x002a:
            int r3 = r2.intValue(r4)     // Catch:{ Exception -> 0x0145 }
            goto L_0x0028
        L_0x002f:
            r2.dispose()     // Catch:{ Exception -> 0x0145 }
            org.telegram.SQLite.SQLiteDatabase r2 = r10.database     // Catch:{ Exception -> 0x0145 }
            java.lang.StringBuilder r7 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0145 }
            r7.<init>()     // Catch:{ Exception -> 0x0145 }
            java.lang.String r8 = "DELETE FROM messages WHERE uid = "
            r7.append(r8)     // Catch:{ Exception -> 0x0145 }
            r7.append(r0)     // Catch:{ Exception -> 0x0145 }
            java.lang.String r7 = r7.toString()     // Catch:{ Exception -> 0x0145 }
            org.telegram.SQLite.SQLitePreparedStatement r2 = r2.executeFast(r7)     // Catch:{ Exception -> 0x0145 }
            org.telegram.SQLite.SQLitePreparedStatement r2 = r2.stepThis()     // Catch:{ Exception -> 0x0145 }
            r2.dispose()     // Catch:{ Exception -> 0x0145 }
            org.telegram.SQLite.SQLiteDatabase r2 = r10.database     // Catch:{ Exception -> 0x0145 }
            java.lang.StringBuilder r7 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0145 }
            r7.<init>()     // Catch:{ Exception -> 0x0145 }
            java.lang.String r8 = "DELETE FROM bot_keyboard WHERE uid = "
            r7.append(r8)     // Catch:{ Exception -> 0x0145 }
            r7.append(r0)     // Catch:{ Exception -> 0x0145 }
            java.lang.String r7 = r7.toString()     // Catch:{ Exception -> 0x0145 }
            org.telegram.SQLite.SQLitePreparedStatement r2 = r2.executeFast(r7)     // Catch:{ Exception -> 0x0145 }
            org.telegram.SQLite.SQLitePreparedStatement r2 = r2.stepThis()     // Catch:{ Exception -> 0x0145 }
            r2.dispose()     // Catch:{ Exception -> 0x0145 }
            org.telegram.SQLite.SQLiteDatabase r2 = r10.database     // Catch:{ Exception -> 0x0145 }
            java.lang.StringBuilder r7 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0145 }
            r7.<init>()     // Catch:{ Exception -> 0x0145 }
            java.lang.String r8 = "UPDATE media_counts_v2 SET old = 1 WHERE uid = "
            r7.append(r8)     // Catch:{ Exception -> 0x0145 }
            r7.append(r0)     // Catch:{ Exception -> 0x0145 }
            java.lang.String r7 = r7.toString()     // Catch:{ Exception -> 0x0145 }
            org.telegram.SQLite.SQLitePreparedStatement r2 = r2.executeFast(r7)     // Catch:{ Exception -> 0x0145 }
            org.telegram.SQLite.SQLitePreparedStatement r2 = r2.stepThis()     // Catch:{ Exception -> 0x0145 }
            r2.dispose()     // Catch:{ Exception -> 0x0145 }
            org.telegram.SQLite.SQLiteDatabase r2 = r10.database     // Catch:{ Exception -> 0x0145 }
            java.lang.StringBuilder r7 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0145 }
            r7.<init>()     // Catch:{ Exception -> 0x0145 }
            java.lang.String r8 = "DELETE FROM media_v2 WHERE uid = "
            r7.append(r8)     // Catch:{ Exception -> 0x0145 }
            r7.append(r0)     // Catch:{ Exception -> 0x0145 }
            java.lang.String r7 = r7.toString()     // Catch:{ Exception -> 0x0145 }
            org.telegram.SQLite.SQLitePreparedStatement r2 = r2.executeFast(r7)     // Catch:{ Exception -> 0x0145 }
            org.telegram.SQLite.SQLitePreparedStatement r2 = r2.stepThis()     // Catch:{ Exception -> 0x0145 }
            r2.dispose()     // Catch:{ Exception -> 0x0145 }
            org.telegram.SQLite.SQLiteDatabase r2 = r10.database     // Catch:{ Exception -> 0x0145 }
            java.lang.StringBuilder r7 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0145 }
            r7.<init>()     // Catch:{ Exception -> 0x0145 }
            java.lang.String r8 = "DELETE FROM messages_holes WHERE uid = "
            r7.append(r8)     // Catch:{ Exception -> 0x0145 }
            r7.append(r0)     // Catch:{ Exception -> 0x0145 }
            java.lang.String r7 = r7.toString()     // Catch:{ Exception -> 0x0145 }
            org.telegram.SQLite.SQLitePreparedStatement r2 = r2.executeFast(r7)     // Catch:{ Exception -> 0x0145 }
            org.telegram.SQLite.SQLitePreparedStatement r2 = r2.stepThis()     // Catch:{ Exception -> 0x0145 }
            r2.dispose()     // Catch:{ Exception -> 0x0145 }
            org.telegram.SQLite.SQLiteDatabase r2 = r10.database     // Catch:{ Exception -> 0x0145 }
            java.lang.StringBuilder r7 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0145 }
            r7.<init>()     // Catch:{ Exception -> 0x0145 }
            java.lang.String r8 = "DELETE FROM media_holes_v2 WHERE uid = "
            r7.append(r8)     // Catch:{ Exception -> 0x0145 }
            r7.append(r0)     // Catch:{ Exception -> 0x0145 }
            java.lang.String r7 = r7.toString()     // Catch:{ Exception -> 0x0145 }
            org.telegram.SQLite.SQLitePreparedStatement r2 = r2.executeFast(r7)     // Catch:{ Exception -> 0x0145 }
            org.telegram.SQLite.SQLitePreparedStatement r2 = r2.stepThis()     // Catch:{ Exception -> 0x0145 }
            r2.dispose()     // Catch:{ Exception -> 0x0145 }
            org.telegram.messenger.MediaDataController r2 = r10.getMediaDataController()     // Catch:{ Exception -> 0x0145 }
            r7 = 0
            r2.clearBotKeyboard(r0, r7)     // Catch:{ Exception -> 0x0145 }
            org.telegram.tgnet.TLRPC$TL_messages_dialogs r2 = new org.telegram.tgnet.TLRPC$TL_messages_dialogs     // Catch:{ Exception -> 0x0145 }
            r2.<init>()     // Catch:{ Exception -> 0x0145 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r8 = r2.chats     // Catch:{ Exception -> 0x0145 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r9 = r13.chats     // Catch:{ Exception -> 0x0145 }
            r8.addAll(r9)     // Catch:{ Exception -> 0x0145 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r8 = r2.users     // Catch:{ Exception -> 0x0145 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r9 = r13.users     // Catch:{ Exception -> 0x0145 }
            r8.addAll(r9)     // Catch:{ Exception -> 0x0145 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r8 = r2.messages     // Catch:{ Exception -> 0x0145 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r9 = r13.messages     // Catch:{ Exception -> 0x0145 }
            r8.addAll(r9)     // Catch:{ Exception -> 0x0145 }
            org.telegram.tgnet.TLRPC$Dialog r13 = r13.dialog     // Catch:{ Exception -> 0x0145 }
            r13.id = r0     // Catch:{ Exception -> 0x0145 }
            r13.flags = r5     // Catch:{ Exception -> 0x0145 }
            r13.notify_settings = r7     // Catch:{ Exception -> 0x0145 }
            if (r3 == 0) goto L_0x0114
            r8 = 1
            goto L_0x0115
        L_0x0114:
            r8 = 0
        L_0x0115:
            r13.pinned = r8     // Catch:{ Exception -> 0x0145 }
            r13.pinnedNum = r3     // Catch:{ Exception -> 0x0145 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r3 = r2.dialogs     // Catch:{ Exception -> 0x0145 }
            r3.add(r13)     // Catch:{ Exception -> 0x0145 }
            r10.putDialogsInternal(r2, r4)     // Catch:{ Exception -> 0x0145 }
            java.util.ArrayList r13 = new java.util.ArrayList     // Catch:{ Exception -> 0x0145 }
            r13.<init>()     // Catch:{ Exception -> 0x0145 }
            r10.updateDialogsWithDeletedMessages(r13, r7, r4, r11)     // Catch:{ Exception -> 0x0145 }
            org.telegram.messenger.-$$Lambda$MessagesStorage$oP8t3MD_gLCBXFFfGg958T_JSrI r13 = new org.telegram.messenger.-$$Lambda$MessagesStorage$oP8t3MD_gLCBXFFfGg958T_JSrI     // Catch:{ Exception -> 0x0145 }
            r13.<init>(r0)     // Catch:{ Exception -> 0x0145 }
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r13)     // Catch:{ Exception -> 0x0145 }
            if (r6 == 0) goto L_0x0149
            if (r12 != r5) goto L_0x013d
            org.telegram.messenger.MessagesController r12 = r10.getMessagesController()     // Catch:{ Exception -> 0x0145 }
            r12.checkChannelInviter(r11)     // Catch:{ Exception -> 0x0145 }
            goto L_0x0149
        L_0x013d:
            org.telegram.messenger.MessagesController r12 = r10.getMessagesController()     // Catch:{ Exception -> 0x0145 }
            r12.generateJoinMessage(r11, r4)     // Catch:{ Exception -> 0x0145 }
            goto L_0x0149
        L_0x0145:
            r11 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r11)
        L_0x0149:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$overwriteChannel$131$MessagesStorage(int, int, org.telegram.tgnet.TLRPC$TL_updates_channelDifferenceTooLong):void");
    }

    public /* synthetic */ void lambda$null$130$MessagesStorage(long j) {
        getNotificationCenter().postNotificationName(NotificationCenter.removeAllMessagesFromDialog, Long.valueOf(j), Boolean.TRUE);
    }

    public void putChannelViews(SparseArray<SparseIntArray> sparseArray, boolean z) {
        if (!isEmpty((SparseArray<?>) sparseArray)) {
            this.storageQueue.postRunnable(new Runnable(sparseArray, z) {
                public final /* synthetic */ SparseArray f$1;
                public final /* synthetic */ boolean f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    MessagesStorage.this.lambda$putChannelViews$132$MessagesStorage(this.f$1, this.f$2);
                }
            });
        }
    }

    public /* synthetic */ void lambda$putChannelViews$132$MessagesStorage(SparseArray sparseArray, boolean z) {
        try {
            this.database.beginTransaction();
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages SET media = max((SELECT media FROM messages WHERE mid = ?), ?) WHERE mid = ?");
            for (int i = 0; i < sparseArray.size(); i++) {
                int keyAt = sparseArray.keyAt(i);
                SparseIntArray sparseIntArray = (SparseIntArray) sparseArray.get(keyAt);
                for (int i2 = 0; i2 < sparseIntArray.size(); i2++) {
                    int i3 = sparseIntArray.get(sparseIntArray.keyAt(i2));
                    long keyAt2 = (long) sparseIntArray.keyAt(i2);
                    if (z) {
                        keyAt2 |= ((long) (-keyAt)) << 32;
                    }
                    executeFast.requery();
                    executeFast.bindLong(1, keyAt2);
                    executeFast.bindInteger(2, i3);
                    executeFast.bindLong(3, keyAt2);
                    executeFast.step();
                }
            }
            executeFast.dispose();
            this.database.commitTransaction();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    private boolean isValidKeyboardToSave(TLRPC$Message tLRPC$Message) {
        TLRPC$ReplyMarkup tLRPC$ReplyMarkup = tLRPC$Message.reply_markup;
        return tLRPC$ReplyMarkup != null && !(tLRPC$ReplyMarkup instanceof TLRPC$TL_replyInlineMarkup) && (!tLRPC$ReplyMarkup.selective || tLRPC$Message.mentioned);
    }

    public void updateMessageVerifyFlags(ArrayList<TLRPC$Message> arrayList) {
        Utilities.stageQueue.postRunnable(new Runnable(arrayList) {
            public final /* synthetic */ ArrayList f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesStorage.this.lambda$updateMessageVerifyFlags$133$MessagesStorage(this.f$1);
            }
        });
    }

    public /* synthetic */ void lambda$updateMessageVerifyFlags$133$MessagesStorage(ArrayList arrayList) {
        int i;
        try {
            this.database.beginTransaction();
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE messages SET imp = ? WHERE mid = ?");
            int size = arrayList.size();
            for (int i2 = 0; i2 < size; i2++) {
                TLRPC$Message tLRPC$Message = (TLRPC$Message) arrayList.get(i2);
                executeFast.requery();
                if (tLRPC$Message.stickerVerified == 0) {
                    i = 1;
                } else {
                    i = tLRPC$Message.stickerVerified == 2 ? 2 : 0;
                }
                executeFast.bindInteger(1, i);
                executeFast.bindLong(2, (long) tLRPC$Message.id);
                executeFast.step();
            }
            executeFast.dispose();
            this.database.commitTransaction();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v89, resolved type: java.lang.Object} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r13v43, resolved type: java.lang.Integer} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r13v47, resolved type: java.lang.Object} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r24v8, resolved type: java.lang.Integer} */
    /* access modifiers changed from: private */
    /* JADX WARNING: Multi-variable type inference failed */
    /* JADX WARNING: Removed duplicated region for block: B:209:0x0597 A[Catch:{ Exception -> 0x0113 }] */
    /* JADX WARNING: Removed duplicated region for block: B:210:0x059f A[Catch:{ Exception -> 0x0113 }] */
    /* JADX WARNING: Removed duplicated region for block: B:213:0x05ac A[Catch:{ Exception -> 0x0113 }] */
    /* JADX WARNING: Removed duplicated region for block: B:215:0x05b0 A[Catch:{ Exception -> 0x0113 }] */
    /* JADX WARNING: Removed duplicated region for block: B:221:0x05c0 A[Catch:{ Exception -> 0x0113 }] */
    /* JADX WARNING: Removed duplicated region for block: B:222:0x05c2 A[Catch:{ Exception -> 0x0113 }] */
    /* JADX WARNING: Removed duplicated region for block: B:225:0x05d3 A[Catch:{ Exception -> 0x0113 }] */
    /* JADX WARNING: Removed duplicated region for block: B:226:0x05e8 A[Catch:{ Exception -> 0x0113 }] */
    /* JADX WARNING: Removed duplicated region for block: B:229:0x05f2 A[Catch:{ Exception -> 0x0113 }] */
    /* JADX WARNING: Removed duplicated region for block: B:234:0x0624 A[Catch:{ Exception -> 0x0113 }] */
    /* JADX WARNING: Removed duplicated region for block: B:238:0x0649 A[Catch:{ Exception -> 0x0113 }] */
    /* JADX WARNING: Removed duplicated region for block: B:259:0x06af A[Catch:{ Exception -> 0x0113 }] */
    /* JADX WARNING: Removed duplicated region for block: B:260:0x06c1 A[Catch:{ Exception -> 0x0113 }] */
    /* JADX WARNING: Removed duplicated region for block: B:286:0x0749 A[Catch:{ Exception -> 0x0113 }] */
    /* JADX WARNING: Removed duplicated region for block: B:87:0x0254 A[Catch:{ Exception -> 0x0113 }] */
    /* JADX WARNING: Removed duplicated region for block: B:94:0x0298 A[Catch:{ Exception -> 0x0113 }] */
    /* renamed from: putMessagesInternal */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void lambda$putMessages$135$MessagesStorage(java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r37, boolean r38, boolean r39, int r40, boolean r41, boolean r42) {
        /*
            r36 = this;
            r1 = r36
            r2 = r37
            java.lang.String r3 = "REPLACE INTO randoms VALUES(?, ?)"
            r5 = 32
            r6 = 5
            if (r42 == 0) goto L_0x00d1
            if (r38 == 0) goto L_0x0012
            org.telegram.SQLite.SQLiteDatabase r14 = r1.database     // Catch:{ Exception -> 0x0113 }
            r14.beginTransaction()     // Catch:{ Exception -> 0x0113 }
        L_0x0012:
            org.telegram.SQLite.SQLiteDatabase r14 = r1.database     // Catch:{ Exception -> 0x0113 }
            java.lang.String r15 = "REPLACE INTO scheduled_messages VALUES(?, ?, ?, ?, ?, ?, NULL)"
            org.telegram.SQLite.SQLitePreparedStatement r14 = r14.executeFast(r15)     // Catch:{ Exception -> 0x0113 }
            org.telegram.SQLite.SQLiteDatabase r15 = r1.database     // Catch:{ Exception -> 0x0113 }
            org.telegram.SQLite.SQLitePreparedStatement r3 = r15.executeFast(r3)     // Catch:{ Exception -> 0x0113 }
            java.util.ArrayList r15 = new java.util.ArrayList     // Catch:{ Exception -> 0x0113 }
            r15.<init>()     // Catch:{ Exception -> 0x0113 }
            r13 = 0
        L_0x0026:
            int r7 = r37.size()     // Catch:{ Exception -> 0x0113 }
            if (r13 >= r7) goto L_0x00b1
            java.lang.Object r7 = r2.get(r13)     // Catch:{ Exception -> 0x0113 }
            org.telegram.tgnet.TLRPC$Message r7 = (org.telegram.tgnet.TLRPC$Message) r7     // Catch:{ Exception -> 0x0113 }
            r1.fixUnsupportedMedia(r7)     // Catch:{ Exception -> 0x0113 }
            r14.requery()     // Catch:{ Exception -> 0x0113 }
            int r8 = r7.id     // Catch:{ Exception -> 0x0113 }
            long r9 = (long) r8     // Catch:{ Exception -> 0x0113 }
            int r8 = r7.local_id     // Catch:{ Exception -> 0x0113 }
            if (r8 == 0) goto L_0x0042
            int r8 = r7.local_id     // Catch:{ Exception -> 0x0113 }
            long r9 = (long) r8     // Catch:{ Exception -> 0x0113 }
        L_0x0042:
            org.telegram.tgnet.TLRPC$Peer r8 = r7.to_id     // Catch:{ Exception -> 0x0113 }
            int r8 = r8.channel_id     // Catch:{ Exception -> 0x0113 }
            if (r8 == 0) goto L_0x004f
            org.telegram.tgnet.TLRPC$Peer r8 = r7.to_id     // Catch:{ Exception -> 0x0113 }
            int r8 = r8.channel_id     // Catch:{ Exception -> 0x0113 }
            long r11 = (long) r8     // Catch:{ Exception -> 0x0113 }
            long r11 = r11 << r5
            long r9 = r9 | r11
        L_0x004f:
            org.telegram.tgnet.NativeByteBuffer r8 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x0113 }
            int r11 = r7.getObjectSize()     // Catch:{ Exception -> 0x0113 }
            r8.<init>((int) r11)     // Catch:{ Exception -> 0x0113 }
            r7.serializeToStream(r8)     // Catch:{ Exception -> 0x0113 }
            long r11 = org.telegram.messenger.MessageObject.getDialogId(r7)     // Catch:{ Exception -> 0x0113 }
            r5 = 1
            r14.bindLong(r5, r9)     // Catch:{ Exception -> 0x0113 }
            r5 = 2
            r14.bindLong(r5, r11)     // Catch:{ Exception -> 0x0113 }
            int r5 = r7.send_state     // Catch:{ Exception -> 0x0113 }
            r4 = 3
            r14.bindInteger(r4, r5)     // Catch:{ Exception -> 0x0113 }
            int r4 = r7.date     // Catch:{ Exception -> 0x0113 }
            r5 = 4
            r14.bindInteger(r5, r4)     // Catch:{ Exception -> 0x0113 }
            r14.bindByteBuffer((int) r6, (org.telegram.tgnet.NativeByteBuffer) r8)     // Catch:{ Exception -> 0x0113 }
            int r4 = r7.ttl     // Catch:{ Exception -> 0x0113 }
            r5 = 6
            r14.bindInteger(r5, r4)     // Catch:{ Exception -> 0x0113 }
            r14.step()     // Catch:{ Exception -> 0x0113 }
            long r4 = r7.random_id     // Catch:{ Exception -> 0x0113 }
            r17 = 0
            int r21 = (r4 > r17 ? 1 : (r4 == r17 ? 0 : -1))
            if (r21 == 0) goto L_0x0097
            r3.requery()     // Catch:{ Exception -> 0x0113 }
            long r4 = r7.random_id     // Catch:{ Exception -> 0x0113 }
            r7 = 1
            r3.bindLong(r7, r4)     // Catch:{ Exception -> 0x0113 }
            r4 = 2
            r3.bindLong(r4, r9)     // Catch:{ Exception -> 0x0113 }
            r3.step()     // Catch:{ Exception -> 0x0113 }
        L_0x0097:
            r8.reuse()     // Catch:{ Exception -> 0x0113 }
            java.lang.Long r4 = java.lang.Long.valueOf(r11)     // Catch:{ Exception -> 0x0113 }
            boolean r4 = r15.contains(r4)     // Catch:{ Exception -> 0x0113 }
            if (r4 != 0) goto L_0x00ab
            java.lang.Long r4 = java.lang.Long.valueOf(r11)     // Catch:{ Exception -> 0x0113 }
            r15.add(r4)     // Catch:{ Exception -> 0x0113 }
        L_0x00ab:
            int r13 = r13 + 1
            r5 = 32
            goto L_0x0026
        L_0x00b1:
            r14.dispose()     // Catch:{ Exception -> 0x0113 }
            r3.dispose()     // Catch:{ Exception -> 0x0113 }
            if (r38 == 0) goto L_0x00be
            org.telegram.SQLite.SQLiteDatabase r2 = r1.database     // Catch:{ Exception -> 0x0113 }
            r2.commitTransaction()     // Catch:{ Exception -> 0x0113 }
        L_0x00be:
            int r2 = r15.size()     // Catch:{ Exception -> 0x0113 }
            r13 = 0
        L_0x00c3:
            if (r13 >= r2) goto L_0x0ac3
            java.lang.Object r3 = r15.get(r13)     // Catch:{ Exception -> 0x0113 }
            java.lang.Long r3 = (java.lang.Long) r3     // Catch:{ Exception -> 0x0113 }
            r1.broadcastScheduledMessagesChange(r3)     // Catch:{ Exception -> 0x0113 }
            int r13 = r13 + 1
            goto L_0x00c3
        L_0x00d1:
            if (r41 == 0) goto L_0x0117
            r5 = 0
            java.lang.Object r7 = r2.get(r5)     // Catch:{ Exception -> 0x0113 }
            org.telegram.tgnet.TLRPC$Message r7 = (org.telegram.tgnet.TLRPC$Message) r7     // Catch:{ Exception -> 0x0113 }
            long r8 = r7.dialog_id     // Catch:{ Exception -> 0x0113 }
            r10 = 0
            int r5 = (r8 > r10 ? 1 : (r8 == r10 ? 0 : -1))
            if (r5 != 0) goto L_0x00e5
            org.telegram.messenger.MessageObject.getDialogId(r7)     // Catch:{ Exception -> 0x0113 }
        L_0x00e5:
            org.telegram.SQLite.SQLiteDatabase r5 = r1.database     // Catch:{ Exception -> 0x0113 }
            java.lang.StringBuilder r8 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0113 }
            r8.<init>()     // Catch:{ Exception -> 0x0113 }
            java.lang.String r9 = "SELECT last_mid FROM dialogs WHERE did = "
            r8.append(r9)     // Catch:{ Exception -> 0x0113 }
            long r9 = r7.dialog_id     // Catch:{ Exception -> 0x0113 }
            r8.append(r9)     // Catch:{ Exception -> 0x0113 }
            java.lang.String r7 = r8.toString()     // Catch:{ Exception -> 0x0113 }
            r8 = 0
            java.lang.Object[] r9 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x0113 }
            org.telegram.SQLite.SQLiteCursor r5 = r5.queryFinalized(r7, r9)     // Catch:{ Exception -> 0x0113 }
            boolean r7 = r5.next()     // Catch:{ Exception -> 0x0113 }
            if (r7 == 0) goto L_0x010c
            int r7 = r5.intValue(r8)     // Catch:{ Exception -> 0x0113 }
            goto L_0x010d
        L_0x010c:
            r7 = -1
        L_0x010d:
            r5.dispose()     // Catch:{ Exception -> 0x0113 }
            if (r7 == 0) goto L_0x0117
            return
        L_0x0113:
            r0 = move-exception
        L_0x0114:
            r2 = r0
            goto L_0x0ac0
        L_0x0117:
            if (r38 == 0) goto L_0x011e
            org.telegram.SQLite.SQLiteDatabase r5 = r1.database     // Catch:{ Exception -> 0x0113 }
            r5.beginTransaction()     // Catch:{ Exception -> 0x0113 }
        L_0x011e:
            android.util.LongSparseArray r5 = new android.util.LongSparseArray     // Catch:{ Exception -> 0x0113 }
            r5.<init>()     // Catch:{ Exception -> 0x0113 }
            android.util.LongSparseArray r7 = new android.util.LongSparseArray     // Catch:{ Exception -> 0x0113 }
            r7.<init>()     // Catch:{ Exception -> 0x0113 }
            android.util.LongSparseArray r8 = new android.util.LongSparseArray     // Catch:{ Exception -> 0x0113 }
            r8.<init>()     // Catch:{ Exception -> 0x0113 }
            android.util.LongSparseArray r9 = new android.util.LongSparseArray     // Catch:{ Exception -> 0x0113 }
            r9.<init>()     // Catch:{ Exception -> 0x0113 }
            android.util.LongSparseArray r10 = new android.util.LongSparseArray     // Catch:{ Exception -> 0x0113 }
            r10.<init>()     // Catch:{ Exception -> 0x0113 }
            android.util.LongSparseArray r11 = new android.util.LongSparseArray     // Catch:{ Exception -> 0x0113 }
            r11.<init>()     // Catch:{ Exception -> 0x0113 }
            java.lang.StringBuilder r12 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0113 }
            r12.<init>()     // Catch:{ Exception -> 0x0113 }
            android.util.LongSparseArray r13 = new android.util.LongSparseArray     // Catch:{ Exception -> 0x0113 }
            r13.<init>()     // Catch:{ Exception -> 0x0113 }
            android.util.LongSparseArray r14 = new android.util.LongSparseArray     // Catch:{ Exception -> 0x0113 }
            r14.<init>()     // Catch:{ Exception -> 0x0113 }
            android.util.LongSparseArray r15 = new android.util.LongSparseArray     // Catch:{ Exception -> 0x0113 }
            r15.<init>()     // Catch:{ Exception -> 0x0113 }
            org.telegram.SQLite.SQLiteDatabase r6 = r1.database     // Catch:{ Exception -> 0x0113 }
            java.lang.String r4 = "REPLACE INTO messages VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, NULL, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r4 = r6.executeFast(r4)     // Catch:{ Exception -> 0x0113 }
            org.telegram.SQLite.SQLiteDatabase r6 = r1.database     // Catch:{ Exception -> 0x0113 }
            org.telegram.SQLite.SQLitePreparedStatement r3 = r6.executeFast(r3)     // Catch:{ Exception -> 0x0113 }
            org.telegram.SQLite.SQLiteDatabase r6 = r1.database     // Catch:{ Exception -> 0x0113 }
            r41 = r9
            java.lang.String r9 = "REPLACE INTO download_queue VALUES(?, ?, ?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r6 = r6.executeFast(r9)     // Catch:{ Exception -> 0x0113 }
            org.telegram.SQLite.SQLiteDatabase r9 = r1.database     // Catch:{ Exception -> 0x0113 }
            r22 = r8
            java.lang.String r8 = "REPLACE INTO webpage_pending VALUES(?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r8 = r9.executeFast(r8)     // Catch:{ Exception -> 0x0113 }
            r27 = r3
            r25 = r6
            r26 = r8
            r6 = 0
            r8 = 0
            r9 = 0
            r24 = 0
        L_0x017d:
            int r3 = r37.size()     // Catch:{ Exception -> 0x0113 }
            if (r9 >= r3) goto L_0x02c4
            java.lang.Object r3 = r2.get(r9)     // Catch:{ Exception -> 0x0113 }
            org.telegram.tgnet.TLRPC$Message r3 = (org.telegram.tgnet.TLRPC$Message) r3     // Catch:{ Exception -> 0x0113 }
            r28 = r5
            int r5 = r3.id     // Catch:{ Exception -> 0x0113 }
            r29 = r4
            long r4 = (long) r5     // Catch:{ Exception -> 0x0113 }
            r30 = r7
            r31 = r8
            long r7 = r3.dialog_id     // Catch:{ Exception -> 0x0113 }
            r17 = 0
            int r32 = (r7 > r17 ? 1 : (r7 == r17 ? 0 : -1))
            if (r32 != 0) goto L_0x019f
            org.telegram.messenger.MessageObject.getDialogId(r3)     // Catch:{ Exception -> 0x0113 }
        L_0x019f:
            org.telegram.tgnet.TLRPC$Peer r7 = r3.to_id     // Catch:{ Exception -> 0x0113 }
            int r7 = r7.channel_id     // Catch:{ Exception -> 0x0113 }
            if (r7 == 0) goto L_0x01af
            org.telegram.tgnet.TLRPC$Peer r7 = r3.to_id     // Catch:{ Exception -> 0x0113 }
            int r7 = r7.channel_id     // Catch:{ Exception -> 0x0113 }
            long r7 = (long) r7     // Catch:{ Exception -> 0x0113 }
            r20 = 32
            long r7 = r7 << r20
            long r4 = r4 | r7
        L_0x01af:
            boolean r7 = r3.mentioned     // Catch:{ Exception -> 0x0113 }
            if (r7 == 0) goto L_0x01c0
            boolean r7 = r3.media_unread     // Catch:{ Exception -> 0x0113 }
            if (r7 == 0) goto L_0x01c0
            long r7 = r3.dialog_id     // Catch:{ Exception -> 0x0113 }
            java.lang.Long r7 = java.lang.Long.valueOf(r7)     // Catch:{ Exception -> 0x0113 }
            r15.put(r4, r7)     // Catch:{ Exception -> 0x0113 }
        L_0x01c0:
            org.telegram.tgnet.TLRPC$MessageAction r7 = r3.action     // Catch:{ Exception -> 0x0113 }
            boolean r7 = r7 instanceof org.telegram.tgnet.TLRPC$TL_messageActionHistoryClear     // Catch:{ Exception -> 0x0113 }
            java.lang.String r8 = ","
            if (r7 != 0) goto L_0x0249
            boolean r7 = org.telegram.messenger.MessageObject.isOut(r3)     // Catch:{ Exception -> 0x0113 }
            if (r7 == 0) goto L_0x01d2
            boolean r7 = r3.from_scheduled     // Catch:{ Exception -> 0x0113 }
            if (r7 == 0) goto L_0x0249
        L_0x01d2:
            int r7 = r3.id     // Catch:{ Exception -> 0x0113 }
            if (r7 > 0) goto L_0x01dc
            boolean r7 = org.telegram.messenger.MessageObject.isUnread(r3)     // Catch:{ Exception -> 0x0113 }
            if (r7 == 0) goto L_0x0249
        L_0x01dc:
            r32 = r6
            long r6 = r3.dialog_id     // Catch:{ Exception -> 0x0113 }
            java.lang.Object r6 = r13.get(r6)     // Catch:{ Exception -> 0x0113 }
            java.lang.Integer r6 = (java.lang.Integer) r6     // Catch:{ Exception -> 0x0113 }
            if (r6 != 0) goto L_0x0224
            org.telegram.SQLite.SQLiteDatabase r6 = r1.database     // Catch:{ Exception -> 0x0113 }
            java.lang.StringBuilder r7 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0113 }
            r7.<init>()     // Catch:{ Exception -> 0x0113 }
            java.lang.String r2 = "SELECT inbox_max FROM dialogs WHERE did = "
            r7.append(r2)     // Catch:{ Exception -> 0x0113 }
            r33 = r9
            r2 = r10
            long r9 = r3.dialog_id     // Catch:{ Exception -> 0x0113 }
            r7.append(r9)     // Catch:{ Exception -> 0x0113 }
            java.lang.String r7 = r7.toString()     // Catch:{ Exception -> 0x0113 }
            r9 = 0
            java.lang.Object[] r10 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x0113 }
            org.telegram.SQLite.SQLiteCursor r6 = r6.queryFinalized(r7, r10)     // Catch:{ Exception -> 0x0113 }
            boolean r7 = r6.next()     // Catch:{ Exception -> 0x0113 }
            if (r7 == 0) goto L_0x0216
            int r7 = r6.intValue(r9)     // Catch:{ Exception -> 0x0113 }
            java.lang.Integer r7 = java.lang.Integer.valueOf(r7)     // Catch:{ Exception -> 0x0113 }
            goto L_0x021a
        L_0x0216:
            java.lang.Integer r7 = java.lang.Integer.valueOf(r9)     // Catch:{ Exception -> 0x0113 }
        L_0x021a:
            r6.dispose()     // Catch:{ Exception -> 0x0113 }
            long r9 = r3.dialog_id     // Catch:{ Exception -> 0x0113 }
            r13.put(r9, r7)     // Catch:{ Exception -> 0x0113 }
            r6 = r7
            goto L_0x0227
        L_0x0224:
            r33 = r9
            r2 = r10
        L_0x0227:
            int r7 = r3.id     // Catch:{ Exception -> 0x0113 }
            if (r7 < 0) goto L_0x0233
            int r6 = r6.intValue()     // Catch:{ Exception -> 0x0113 }
            int r7 = r3.id     // Catch:{ Exception -> 0x0113 }
            if (r6 >= r7) goto L_0x024e
        L_0x0233:
            int r6 = r12.length()     // Catch:{ Exception -> 0x0113 }
            if (r6 <= 0) goto L_0x023c
            r12.append(r8)     // Catch:{ Exception -> 0x0113 }
        L_0x023c:
            r12.append(r4)     // Catch:{ Exception -> 0x0113 }
            long r6 = r3.dialog_id     // Catch:{ Exception -> 0x0113 }
            java.lang.Long r6 = java.lang.Long.valueOf(r6)     // Catch:{ Exception -> 0x0113 }
            r14.put(r4, r6)     // Catch:{ Exception -> 0x0113 }
            goto L_0x024e
        L_0x0249:
            r32 = r6
            r33 = r9
            r2 = r10
        L_0x024e:
            boolean r6 = org.telegram.messenger.MediaDataController.canAddMessageToMedia(r3)     // Catch:{ Exception -> 0x0113 }
            if (r6 == 0) goto L_0x0298
            if (r24 != 0) goto L_0x026d
            java.lang.StringBuilder r24 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0113 }
            r24.<init>()     // Catch:{ Exception -> 0x0113 }
            android.util.LongSparseArray r6 = new android.util.LongSparseArray     // Catch:{ Exception -> 0x0113 }
            r6.<init>()     // Catch:{ Exception -> 0x0113 }
            android.util.LongSparseArray r7 = new android.util.LongSparseArray     // Catch:{ Exception -> 0x0113 }
            r7.<init>()     // Catch:{ Exception -> 0x0113 }
            r9 = r24
            r35 = r7
            r7 = r6
            r6 = r35
            goto L_0x0273
        L_0x026d:
            r9 = r24
            r7 = r31
            r6 = r32
        L_0x0273:
            int r10 = r9.length()     // Catch:{ Exception -> 0x0113 }
            if (r10 <= 0) goto L_0x027c
            r9.append(r8)     // Catch:{ Exception -> 0x0113 }
        L_0x027c:
            r9.append(r4)     // Catch:{ Exception -> 0x0113 }
            r10 = r9
            long r8 = r3.dialog_id     // Catch:{ Exception -> 0x0113 }
            java.lang.Long r8 = java.lang.Long.valueOf(r8)     // Catch:{ Exception -> 0x0113 }
            r7.put(r4, r8)     // Catch:{ Exception -> 0x0113 }
            int r8 = org.telegram.messenger.MediaDataController.getMediaType(r3)     // Catch:{ Exception -> 0x0113 }
            java.lang.Integer r8 = java.lang.Integer.valueOf(r8)     // Catch:{ Exception -> 0x0113 }
            r6.put(r4, r8)     // Catch:{ Exception -> 0x0113 }
            r8 = r7
            r24 = r10
            goto L_0x029c
        L_0x0298:
            r8 = r31
            r6 = r32
        L_0x029c:
            boolean r4 = r1.isValidKeyboardToSave(r3)     // Catch:{ Exception -> 0x0113 }
            if (r4 == 0) goto L_0x02b7
            long r4 = r3.dialog_id     // Catch:{ Exception -> 0x0113 }
            java.lang.Object r4 = r11.get(r4)     // Catch:{ Exception -> 0x0113 }
            org.telegram.tgnet.TLRPC$Message r4 = (org.telegram.tgnet.TLRPC$Message) r4     // Catch:{ Exception -> 0x0113 }
            if (r4 == 0) goto L_0x02b2
            int r4 = r4.id     // Catch:{ Exception -> 0x0113 }
            int r5 = r3.id     // Catch:{ Exception -> 0x0113 }
            if (r4 >= r5) goto L_0x02b7
        L_0x02b2:
            long r4 = r3.dialog_id     // Catch:{ Exception -> 0x0113 }
            r11.put(r4, r3)     // Catch:{ Exception -> 0x0113 }
        L_0x02b7:
            int r9 = r33 + 1
            r10 = r2
            r5 = r28
            r4 = r29
            r7 = r30
            r2 = r37
            goto L_0x017d
        L_0x02c4:
            r29 = r4
            r28 = r5
            r32 = r6
            r30 = r7
            r31 = r8
            r2 = r10
            r3 = 0
        L_0x02d0:
            int r4 = r11.size()     // Catch:{ Exception -> 0x0113 }
            if (r3 >= r4) goto L_0x02ea
            org.telegram.messenger.MediaDataController r4 = r36.getMediaDataController()     // Catch:{ Exception -> 0x0113 }
            long r5 = r11.keyAt(r3)     // Catch:{ Exception -> 0x0113 }
            java.lang.Object r7 = r11.valueAt(r3)     // Catch:{ Exception -> 0x0113 }
            org.telegram.tgnet.TLRPC$Message r7 = (org.telegram.tgnet.TLRPC$Message) r7     // Catch:{ Exception -> 0x0113 }
            r4.putBotKeyboard(r5, r7)     // Catch:{ Exception -> 0x0113 }
            int r3 = r3 + 1
            goto L_0x02d0
        L_0x02ea:
            java.lang.String r3 = ")"
            if (r24 == 0) goto L_0x03fd
            org.telegram.SQLite.SQLiteDatabase r4 = r1.database     // Catch:{ Exception -> 0x0113 }
            java.lang.StringBuilder r5 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0113 }
            r5.<init>()     // Catch:{ Exception -> 0x0113 }
            java.lang.String r6 = "SELECT mid, type FROM media_v2 WHERE mid IN("
            r5.append(r6)     // Catch:{ Exception -> 0x0113 }
            java.lang.String r6 = r24.toString()     // Catch:{ Exception -> 0x0113 }
            r5.append(r6)     // Catch:{ Exception -> 0x0113 }
            r5.append(r3)     // Catch:{ Exception -> 0x0113 }
            java.lang.String r5 = r5.toString()     // Catch:{ Exception -> 0x0113 }
            r6 = 0
            java.lang.Object[] r7 = new java.lang.Object[r6]     // Catch:{ Exception -> 0x0113 }
            org.telegram.SQLite.SQLiteCursor r4 = r4.queryFinalized(r5, r7)     // Catch:{ Exception -> 0x0113 }
            r5 = 0
        L_0x0310:
            boolean r7 = r4.next()     // Catch:{ Exception -> 0x0113 }
            if (r7 == 0) goto L_0x0349
            long r7 = r4.longValue(r6)     // Catch:{ Exception -> 0x0113 }
            r6 = 1
            int r9 = r4.intValue(r6)     // Catch:{ Exception -> 0x0113 }
            r6 = r32
            java.lang.Object r10 = r6.get(r7)     // Catch:{ Exception -> 0x0113 }
            java.lang.Integer r10 = (java.lang.Integer) r10     // Catch:{ Exception -> 0x0113 }
            int r10 = r10.intValue()     // Catch:{ Exception -> 0x0113 }
            if (r9 != r10) goto L_0x0333
            r10 = r31
            r10.remove(r7)     // Catch:{ Exception -> 0x0113 }
            goto L_0x0343
        L_0x0333:
            r10 = r31
            if (r5 != 0) goto L_0x033c
            android.util.LongSparseArray r5 = new android.util.LongSparseArray     // Catch:{ Exception -> 0x0113 }
            r5.<init>()     // Catch:{ Exception -> 0x0113 }
        L_0x033c:
            java.lang.Integer r9 = java.lang.Integer.valueOf(r9)     // Catch:{ Exception -> 0x0113 }
            r5.put(r7, r9)     // Catch:{ Exception -> 0x0113 }
        L_0x0343:
            r32 = r6
            r31 = r10
            r6 = 0
            goto L_0x0310
        L_0x0349:
            r10 = r31
            r6 = r32
            r4.dispose()     // Catch:{ Exception -> 0x0113 }
            android.util.SparseArray r4 = new android.util.SparseArray     // Catch:{ Exception -> 0x0113 }
            r4.<init>()     // Catch:{ Exception -> 0x0113 }
            r7 = 0
        L_0x0356:
            int r8 = r10.size()     // Catch:{ Exception -> 0x0113 }
            if (r7 >= r8) goto L_0x03fe
            long r8 = r10.keyAt(r7)     // Catch:{ Exception -> 0x0113 }
            java.lang.Object r11 = r10.valueAt(r7)     // Catch:{ Exception -> 0x0113 }
            java.lang.Long r11 = (java.lang.Long) r11     // Catch:{ Exception -> 0x0113 }
            r31 = r10
            long r10 = r11.longValue()     // Catch:{ Exception -> 0x0113 }
            java.lang.Object r13 = r6.get(r8)     // Catch:{ Exception -> 0x0113 }
            java.lang.Integer r13 = (java.lang.Integer) r13     // Catch:{ Exception -> 0x0113 }
            r32 = r6
            int r6 = r13.intValue()     // Catch:{ Exception -> 0x0113 }
            java.lang.Object r6 = r4.get(r6)     // Catch:{ Exception -> 0x0113 }
            android.util.LongSparseArray r6 = (android.util.LongSparseArray) r6     // Catch:{ Exception -> 0x0113 }
            if (r6 != 0) goto L_0x0393
            android.util.LongSparseArray r6 = new android.util.LongSparseArray     // Catch:{ Exception -> 0x0113 }
            r6.<init>()     // Catch:{ Exception -> 0x0113 }
            r16 = 0
            java.lang.Integer r24 = java.lang.Integer.valueOf(r16)     // Catch:{ Exception -> 0x0113 }
            int r13 = r13.intValue()     // Catch:{ Exception -> 0x0113 }
            r4.put(r13, r6)     // Catch:{ Exception -> 0x0113 }
            goto L_0x039b
        L_0x0393:
            java.lang.Object r13 = r6.get(r10)     // Catch:{ Exception -> 0x0113 }
            r24 = r13
            java.lang.Integer r24 = (java.lang.Integer) r24     // Catch:{ Exception -> 0x0113 }
        L_0x039b:
            if (r24 != 0) goto L_0x03a2
            r13 = 0
            java.lang.Integer r24 = java.lang.Integer.valueOf(r13)     // Catch:{ Exception -> 0x0113 }
        L_0x03a2:
            int r13 = r24.intValue()     // Catch:{ Exception -> 0x0113 }
            r19 = 1
            int r13 = r13 + 1
            java.lang.Integer r13 = java.lang.Integer.valueOf(r13)     // Catch:{ Exception -> 0x0113 }
            r6.put(r10, r13)     // Catch:{ Exception -> 0x0113 }
            if (r5 == 0) goto L_0x03f5
            r6 = -1
            java.lang.Integer r13 = java.lang.Integer.valueOf(r6)     // Catch:{ Exception -> 0x0113 }
            java.lang.Object r6 = r5.get(r8, r13)     // Catch:{ Exception -> 0x0113 }
            java.lang.Integer r6 = (java.lang.Integer) r6     // Catch:{ Exception -> 0x0113 }
            int r6 = r6.intValue()     // Catch:{ Exception -> 0x0113 }
            if (r6 < 0) goto L_0x03f5
            java.lang.Object r8 = r4.get(r6)     // Catch:{ Exception -> 0x0113 }
            android.util.LongSparseArray r8 = (android.util.LongSparseArray) r8     // Catch:{ Exception -> 0x0113 }
            if (r8 != 0) goto L_0x03da
            android.util.LongSparseArray r8 = new android.util.LongSparseArray     // Catch:{ Exception -> 0x0113 }
            r8.<init>()     // Catch:{ Exception -> 0x0113 }
            r9 = 0
            java.lang.Integer r13 = java.lang.Integer.valueOf(r9)     // Catch:{ Exception -> 0x0113 }
            r4.put(r6, r8)     // Catch:{ Exception -> 0x0113 }
            goto L_0x03e1
        L_0x03da:
            java.lang.Object r6 = r8.get(r10)     // Catch:{ Exception -> 0x0113 }
            r13 = r6
            java.lang.Integer r13 = (java.lang.Integer) r13     // Catch:{ Exception -> 0x0113 }
        L_0x03e1:
            if (r13 != 0) goto L_0x03e8
            r6 = 0
            java.lang.Integer r13 = java.lang.Integer.valueOf(r6)     // Catch:{ Exception -> 0x0113 }
        L_0x03e8:
            int r6 = r13.intValue()     // Catch:{ Exception -> 0x0113 }
            r9 = 1
            int r6 = r6 - r9
            java.lang.Integer r6 = java.lang.Integer.valueOf(r6)     // Catch:{ Exception -> 0x0113 }
            r8.put(r10, r6)     // Catch:{ Exception -> 0x0113 }
        L_0x03f5:
            int r7 = r7 + 1
            r10 = r31
            r6 = r32
            goto L_0x0356
        L_0x03fd:
            r4 = 0
        L_0x03fe:
            int r5 = r12.length()     // Catch:{ Exception -> 0x0113 }
            if (r5 <= 0) goto L_0x049c
            org.telegram.SQLite.SQLiteDatabase r5 = r1.database     // Catch:{ Exception -> 0x0113 }
            java.lang.StringBuilder r6 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0113 }
            r6.<init>()     // Catch:{ Exception -> 0x0113 }
            java.lang.String r7 = "SELECT mid FROM messages WHERE mid IN("
            r6.append(r7)     // Catch:{ Exception -> 0x0113 }
            java.lang.String r7 = r12.toString()     // Catch:{ Exception -> 0x0113 }
            r6.append(r7)     // Catch:{ Exception -> 0x0113 }
            r6.append(r3)     // Catch:{ Exception -> 0x0113 }
            java.lang.String r3 = r6.toString()     // Catch:{ Exception -> 0x0113 }
            r6 = 0
            java.lang.Object[] r7 = new java.lang.Object[r6]     // Catch:{ Exception -> 0x0113 }
            org.telegram.SQLite.SQLiteCursor r3 = r5.queryFinalized(r3, r7)     // Catch:{ Exception -> 0x0113 }
        L_0x0425:
            boolean r5 = r3.next()     // Catch:{ Exception -> 0x0113 }
            if (r5 == 0) goto L_0x0437
            long r7 = r3.longValue(r6)     // Catch:{ Exception -> 0x0113 }
            r14.remove(r7)     // Catch:{ Exception -> 0x0113 }
            r15.remove(r7)     // Catch:{ Exception -> 0x0113 }
            r6 = 0
            goto L_0x0425
        L_0x0437:
            r3.dispose()     // Catch:{ Exception -> 0x0113 }
            r3 = 0
        L_0x043b:
            int r5 = r14.size()     // Catch:{ Exception -> 0x0113 }
            if (r3 >= r5) goto L_0x046c
            java.lang.Object r5 = r14.valueAt(r3)     // Catch:{ Exception -> 0x0113 }
            java.lang.Long r5 = (java.lang.Long) r5     // Catch:{ Exception -> 0x0113 }
            long r5 = r5.longValue()     // Catch:{ Exception -> 0x0113 }
            r7 = r30
            java.lang.Object r8 = r7.get(r5)     // Catch:{ Exception -> 0x0113 }
            java.lang.Integer r8 = (java.lang.Integer) r8     // Catch:{ Exception -> 0x0113 }
            if (r8 != 0) goto L_0x045a
            r9 = 0
            java.lang.Integer r8 = java.lang.Integer.valueOf(r9)     // Catch:{ Exception -> 0x0113 }
        L_0x045a:
            int r8 = r8.intValue()     // Catch:{ Exception -> 0x0113 }
            r9 = 1
            int r8 = r8 + r9
            java.lang.Integer r8 = java.lang.Integer.valueOf(r8)     // Catch:{ Exception -> 0x0113 }
            r7.put(r5, r8)     // Catch:{ Exception -> 0x0113 }
            int r3 = r3 + 1
            r30 = r7
            goto L_0x043b
        L_0x046c:
            r7 = r30
            r3 = 0
        L_0x046f:
            int r5 = r15.size()     // Catch:{ Exception -> 0x0113 }
            if (r3 >= r5) goto L_0x049e
            java.lang.Object r5 = r15.valueAt(r3)     // Catch:{ Exception -> 0x0113 }
            java.lang.Long r5 = (java.lang.Long) r5     // Catch:{ Exception -> 0x0113 }
            long r5 = r5.longValue()     // Catch:{ Exception -> 0x0113 }
            java.lang.Object r8 = r2.get(r5)     // Catch:{ Exception -> 0x0113 }
            java.lang.Integer r8 = (java.lang.Integer) r8     // Catch:{ Exception -> 0x0113 }
            if (r8 != 0) goto L_0x048c
            r9 = 0
            java.lang.Integer r8 = java.lang.Integer.valueOf(r9)     // Catch:{ Exception -> 0x0113 }
        L_0x048c:
            int r8 = r8.intValue()     // Catch:{ Exception -> 0x0113 }
            r9 = 1
            int r8 = r8 + r9
            java.lang.Integer r8 = java.lang.Integer.valueOf(r8)     // Catch:{ Exception -> 0x0113 }
            r2.put(r5, r8)     // Catch:{ Exception -> 0x0113 }
            int r3 = r3 + 1
            goto L_0x046f
        L_0x049c:
            r7 = r30
        L_0x049e:
            r3 = 0
            r5 = 0
            r6 = 0
            r8 = 0
        L_0x04a2:
            int r9 = r37.size()     // Catch:{ Exception -> 0x0113 }
            if (r3 >= r9) goto L_0x07c7
            r9 = r37
            java.lang.Object r15 = r9.get(r3)     // Catch:{ Exception -> 0x0113 }
            org.telegram.tgnet.TLRPC$Message r15 = (org.telegram.tgnet.TLRPC$Message) r15     // Catch:{ Exception -> 0x0113 }
            r1.fixUnsupportedMedia(r15)     // Catch:{ Exception -> 0x0113 }
            r29.requery()     // Catch:{ Exception -> 0x0113 }
            int r10 = r15.id     // Catch:{ Exception -> 0x0113 }
            long r13 = (long) r10     // Catch:{ Exception -> 0x0113 }
            int r10 = r15.local_id     // Catch:{ Exception -> 0x0113 }
            if (r10 == 0) goto L_0x04c0
            int r10 = r15.local_id     // Catch:{ Exception -> 0x0113 }
            long r13 = (long) r10     // Catch:{ Exception -> 0x0113 }
        L_0x04c0:
            org.telegram.tgnet.TLRPC$Peer r10 = r15.to_id     // Catch:{ Exception -> 0x0113 }
            int r10 = r10.channel_id     // Catch:{ Exception -> 0x0113 }
            if (r10 == 0) goto L_0x04cf
            org.telegram.tgnet.TLRPC$Peer r10 = r15.to_id     // Catch:{ Exception -> 0x0113 }
            int r10 = r10.channel_id     // Catch:{ Exception -> 0x0113 }
            long r11 = (long) r10     // Catch:{ Exception -> 0x0113 }
            r10 = 32
            long r11 = r11 << r10
            long r13 = r13 | r11
        L_0x04cf:
            org.telegram.tgnet.NativeByteBuffer r10 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x0113 }
            int r11 = r15.getObjectSize()     // Catch:{ Exception -> 0x0113 }
            r10.<init>((int) r11)     // Catch:{ Exception -> 0x0113 }
            r15.serializeToStream(r10)     // Catch:{ Exception -> 0x0113 }
            org.telegram.tgnet.TLRPC$MessageAction r11 = r15.action     // Catch:{ Exception -> 0x0113 }
            boolean r11 = r11 instanceof org.telegram.tgnet.TLRPC$TL_messageEncryptedAction     // Catch:{ Exception -> 0x0113 }
            if (r11 == 0) goto L_0x04f5
            org.telegram.tgnet.TLRPC$MessageAction r11 = r15.action     // Catch:{ Exception -> 0x0113 }
            org.telegram.tgnet.TLRPC$DecryptedMessageAction r11 = r11.encryptedAction     // Catch:{ Exception -> 0x0113 }
            boolean r11 = r11 instanceof org.telegram.tgnet.TLRPC$TL_decryptedMessageActionSetMessageTTL     // Catch:{ Exception -> 0x0113 }
            if (r11 != 0) goto L_0x04f5
            org.telegram.tgnet.TLRPC$MessageAction r11 = r15.action     // Catch:{ Exception -> 0x0113 }
            org.telegram.tgnet.TLRPC$DecryptedMessageAction r11 = r11.encryptedAction     // Catch:{ Exception -> 0x0113 }
            boolean r11 = r11 instanceof org.telegram.tgnet.TLRPC$TL_decryptedMessageActionScreenshotMessages     // Catch:{ Exception -> 0x0113 }
            if (r11 != 0) goto L_0x04f5
            r34 = r4
            r9 = 0
            goto L_0x0522
        L_0x04f5:
            boolean r11 = r15.out     // Catch:{ Exception -> 0x0113 }
            if (r11 == 0) goto L_0x051f
            org.telegram.SQLite.SQLiteDatabase r11 = r1.database     // Catch:{ Exception -> 0x0113 }
            java.lang.StringBuilder r12 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0113 }
            r12.<init>()     // Catch:{ Exception -> 0x0113 }
            java.lang.String r9 = "SELECT mid FROM messages WHERE mid = "
            r12.append(r9)     // Catch:{ Exception -> 0x0113 }
            r12.append(r13)     // Catch:{ Exception -> 0x0113 }
            java.lang.String r9 = r12.toString()     // Catch:{ Exception -> 0x0113 }
            r34 = r4
            r12 = 0
            java.lang.Object[] r4 = new java.lang.Object[r12]     // Catch:{ Exception -> 0x0113 }
            org.telegram.SQLite.SQLiteCursor r4 = r11.queryFinalized(r9, r4)     // Catch:{ Exception -> 0x0113 }
            boolean r9 = r4.next()     // Catch:{ Exception -> 0x0113 }
            r11 = 1
            r9 = r9 ^ r11
            r4.dispose()     // Catch:{ Exception -> 0x0113 }
            goto L_0x0522
        L_0x051f:
            r34 = r4
            r9 = 1
        L_0x0522:
            if (r9 == 0) goto L_0x0550
            long r11 = r15.dialog_id     // Catch:{ Exception -> 0x0113 }
            r4 = r28
            java.lang.Object r9 = r4.get(r11)     // Catch:{ Exception -> 0x0113 }
            org.telegram.tgnet.TLRPC$Message r9 = (org.telegram.tgnet.TLRPC$Message) r9     // Catch:{ Exception -> 0x0113 }
            if (r9 == 0) goto L_0x054a
            int r11 = r15.date     // Catch:{ Exception -> 0x0113 }
            int r12 = r9.date     // Catch:{ Exception -> 0x0113 }
            if (r11 > r12) goto L_0x054a
            int r11 = r9.id     // Catch:{ Exception -> 0x0113 }
            if (r11 <= 0) goto L_0x0540
            int r11 = r15.id     // Catch:{ Exception -> 0x0113 }
            int r12 = r9.id     // Catch:{ Exception -> 0x0113 }
            if (r11 > r12) goto L_0x054a
        L_0x0540:
            int r11 = r9.id     // Catch:{ Exception -> 0x0113 }
            if (r11 >= 0) goto L_0x0552
            int r11 = r15.id     // Catch:{ Exception -> 0x0113 }
            int r9 = r9.id     // Catch:{ Exception -> 0x0113 }
            if (r11 >= r9) goto L_0x0552
        L_0x054a:
            long r11 = r15.dialog_id     // Catch:{ Exception -> 0x0113 }
            r4.put(r11, r15)     // Catch:{ Exception -> 0x0113 }
            goto L_0x0552
        L_0x0550:
            r4 = r28
        L_0x0552:
            r9 = r29
            r11 = 1
            r9.bindLong(r11, r13)     // Catch:{ Exception -> 0x0113 }
            long r11 = r15.dialog_id     // Catch:{ Exception -> 0x0113 }
            r28 = r7
            r7 = 2
            r9.bindLong(r7, r11)     // Catch:{ Exception -> 0x0113 }
            int r7 = org.telegram.messenger.MessageObject.getUnreadFlags(r15)     // Catch:{ Exception -> 0x0113 }
            r11 = 3
            r9.bindInteger(r11, r7)     // Catch:{ Exception -> 0x0113 }
            int r7 = r15.send_state     // Catch:{ Exception -> 0x0113 }
            r11 = 4
            r9.bindInteger(r11, r7)     // Catch:{ Exception -> 0x0113 }
            int r7 = r15.date     // Catch:{ Exception -> 0x0113 }
            r11 = 5
            r9.bindInteger(r11, r7)     // Catch:{ Exception -> 0x0113 }
            r7 = 6
            r9.bindByteBuffer((int) r7, (org.telegram.tgnet.NativeByteBuffer) r10)     // Catch:{ Exception -> 0x0113 }
            boolean r7 = org.telegram.messenger.MessageObject.isOut(r15)     // Catch:{ Exception -> 0x0113 }
            if (r7 != 0) goto L_0x0585
            boolean r7 = r15.from_scheduled     // Catch:{ Exception -> 0x0113 }
            if (r7 == 0) goto L_0x0583
            goto L_0x0585
        L_0x0583:
            r7 = 0
            goto L_0x0586
        L_0x0585:
            r7 = 1
        L_0x0586:
            r11 = 7
            r9.bindInteger(r11, r7)     // Catch:{ Exception -> 0x0113 }
            int r7 = r15.ttl     // Catch:{ Exception -> 0x0113 }
            r11 = 8
            r9.bindInteger(r11, r7)     // Catch:{ Exception -> 0x0113 }
            int r7 = r15.flags     // Catch:{ Exception -> 0x0113 }
            r7 = r7 & 1024(0x400, float:1.435E-42)
            if (r7 == 0) goto L_0x059f
            int r7 = r15.views     // Catch:{ Exception -> 0x0113 }
            r11 = 9
            r9.bindInteger(r11, r7)     // Catch:{ Exception -> 0x0113 }
            goto L_0x05a8
        L_0x059f:
            r11 = 9
            int r7 = r1.getMessageMediaType(r15)     // Catch:{ Exception -> 0x0113 }
            r9.bindInteger(r11, r7)     // Catch:{ Exception -> 0x0113 }
        L_0x05a8:
            int r7 = r15.stickerVerified     // Catch:{ Exception -> 0x0113 }
            if (r7 != 0) goto L_0x05b0
            r7 = 1
        L_0x05ad:
            r11 = 10
            goto L_0x05b9
        L_0x05b0:
            int r7 = r15.stickerVerified     // Catch:{ Exception -> 0x0113 }
            r11 = 2
            if (r7 != r11) goto L_0x05b7
            r7 = 2
            goto L_0x05ad
        L_0x05b7:
            r7 = 0
            goto L_0x05ad
        L_0x05b9:
            r9.bindInteger(r11, r7)     // Catch:{ Exception -> 0x0113 }
            boolean r7 = r15.mentioned     // Catch:{ Exception -> 0x0113 }
            if (r7 == 0) goto L_0x05c2
            r7 = 1
            goto L_0x05c3
        L_0x05c2:
            r7 = 0
        L_0x05c3:
            r11 = 11
            r9.bindInteger(r11, r7)     // Catch:{ Exception -> 0x0113 }
            r9.step()     // Catch:{ Exception -> 0x0113 }
            long r11 = r15.random_id     // Catch:{ Exception -> 0x0113 }
            r17 = 0
            int r7 = (r11 > r17 ? 1 : (r11 == r17 ? 0 : -1))
            if (r7 == 0) goto L_0x05e8
            r27.requery()     // Catch:{ Exception -> 0x0113 }
            long r11 = r15.random_id     // Catch:{ Exception -> 0x0113 }
            r7 = r27
            r27 = r2
            r2 = 1
            r7.bindLong(r2, r11)     // Catch:{ Exception -> 0x0113 }
            r2 = 2
            r7.bindLong(r2, r13)     // Catch:{ Exception -> 0x0113 }
            r7.step()     // Catch:{ Exception -> 0x0113 }
            goto L_0x05ec
        L_0x05e8:
            r7 = r27
            r27 = r2
        L_0x05ec:
            boolean r2 = org.telegram.messenger.MediaDataController.canAddMessageToMedia(r15)     // Catch:{ Exception -> 0x0113 }
            if (r2 == 0) goto L_0x061e
            if (r6 != 0) goto L_0x05fc
            org.telegram.SQLite.SQLiteDatabase r2 = r1.database     // Catch:{ Exception -> 0x0113 }
            java.lang.String r6 = "REPLACE INTO media_v2 VALUES(?, ?, ?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r6 = r2.executeFast(r6)     // Catch:{ Exception -> 0x0113 }
        L_0x05fc:
            r6.requery()     // Catch:{ Exception -> 0x0113 }
            r2 = 1
            r6.bindLong(r2, r13)     // Catch:{ Exception -> 0x0113 }
            long r11 = r15.dialog_id     // Catch:{ Exception -> 0x0113 }
            r2 = 2
            r6.bindLong(r2, r11)     // Catch:{ Exception -> 0x0113 }
            int r2 = r15.date     // Catch:{ Exception -> 0x0113 }
            r11 = 3
            r6.bindInteger(r11, r2)     // Catch:{ Exception -> 0x0113 }
            int r2 = org.telegram.messenger.MediaDataController.getMediaType(r15)     // Catch:{ Exception -> 0x0113 }
            r11 = 4
            r6.bindInteger(r11, r2)     // Catch:{ Exception -> 0x0113 }
            r2 = 5
            r6.bindByteBuffer((int) r2, (org.telegram.tgnet.NativeByteBuffer) r10)     // Catch:{ Exception -> 0x0113 }
            r6.step()     // Catch:{ Exception -> 0x0113 }
        L_0x061e:
            org.telegram.tgnet.TLRPC$MessageMedia r2 = r15.media     // Catch:{ Exception -> 0x0113 }
            boolean r2 = r2 instanceof org.telegram.tgnet.TLRPC$TL_messageMediaPoll     // Catch:{ Exception -> 0x0113 }
            if (r2 == 0) goto L_0x0649
            if (r8 != 0) goto L_0x062e
            org.telegram.SQLite.SQLiteDatabase r2 = r1.database     // Catch:{ Exception -> 0x0113 }
            java.lang.String r8 = "REPLACE INTO polls VALUES(?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r8 = r2.executeFast(r8)     // Catch:{ Exception -> 0x0113 }
        L_0x062e:
            org.telegram.tgnet.TLRPC$MessageMedia r2 = r15.media     // Catch:{ Exception -> 0x0113 }
            org.telegram.tgnet.TLRPC$TL_messageMediaPoll r2 = (org.telegram.tgnet.TLRPC$TL_messageMediaPoll) r2     // Catch:{ Exception -> 0x0113 }
            r8.requery()     // Catch:{ Exception -> 0x0113 }
            r11 = 1
            r8.bindLong(r11, r13)     // Catch:{ Exception -> 0x0113 }
            org.telegram.tgnet.TLRPC$Poll r2 = r2.poll     // Catch:{ Exception -> 0x0113 }
            long r11 = r2.id     // Catch:{ Exception -> 0x0113 }
            r2 = 2
            r8.bindLong(r2, r11)     // Catch:{ Exception -> 0x0113 }
            r8.step()     // Catch:{ Exception -> 0x0113 }
        L_0x0644:
            r24 = r6
            r2 = r26
            goto L_0x0667
        L_0x0649:
            org.telegram.tgnet.TLRPC$MessageMedia r2 = r15.media     // Catch:{ Exception -> 0x0113 }
            boolean r2 = r2 instanceof org.telegram.tgnet.TLRPC$TL_messageMediaWebPage     // Catch:{ Exception -> 0x0113 }
            if (r2 == 0) goto L_0x0644
            r26.requery()     // Catch:{ Exception -> 0x0113 }
            org.telegram.tgnet.TLRPC$MessageMedia r2 = r15.media     // Catch:{ Exception -> 0x0113 }
            org.telegram.tgnet.TLRPC$WebPage r2 = r2.webpage     // Catch:{ Exception -> 0x0113 }
            long r11 = r2.id     // Catch:{ Exception -> 0x0113 }
            r24 = r6
            r2 = r26
            r6 = 1
            r2.bindLong(r6, r11)     // Catch:{ Exception -> 0x0113 }
            r6 = 2
            r2.bindLong(r6, r13)     // Catch:{ Exception -> 0x0113 }
            r2.step()     // Catch:{ Exception -> 0x0113 }
        L_0x0667:
            r10.reuse()     // Catch:{ Exception -> 0x0113 }
            if (r40 == 0) goto L_0x07af
            org.telegram.tgnet.TLRPC$Peer r6 = r15.to_id     // Catch:{ Exception -> 0x0113 }
            int r6 = r6.channel_id     // Catch:{ Exception -> 0x0113 }
            if (r6 == 0) goto L_0x0676
            boolean r6 = r15.post     // Catch:{ Exception -> 0x0113 }
            if (r6 == 0) goto L_0x07af
        L_0x0676:
            int r6 = r15.date     // Catch:{ Exception -> 0x0113 }
            org.telegram.tgnet.ConnectionsManager r10 = r36.getConnectionsManager()     // Catch:{ Exception -> 0x0113 }
            int r10 = r10.getCurrentTime()     // Catch:{ Exception -> 0x0113 }
            int r10 = r10 + -3600
            if (r6 < r10) goto L_0x07af
            org.telegram.messenger.DownloadController r6 = r36.getDownloadController()     // Catch:{ Exception -> 0x0113 }
            int r6 = r6.canDownloadMedia((org.telegram.tgnet.TLRPC$Message) r15)     // Catch:{ Exception -> 0x0113 }
            r10 = 1
            if (r6 != r10) goto L_0x07af
            org.telegram.tgnet.TLRPC$MessageMedia r6 = r15.media     // Catch:{ Exception -> 0x0113 }
            boolean r6 = r6 instanceof org.telegram.tgnet.TLRPC$TL_messageMediaPhoto     // Catch:{ Exception -> 0x0113 }
            if (r6 != 0) goto L_0x06a1
            org.telegram.tgnet.TLRPC$MessageMedia r6 = r15.media     // Catch:{ Exception -> 0x0113 }
            boolean r6 = r6 instanceof org.telegram.tgnet.TLRPC$TL_messageMediaDocument     // Catch:{ Exception -> 0x0113 }
            if (r6 != 0) goto L_0x06a1
            org.telegram.tgnet.TLRPC$MessageMedia r6 = r15.media     // Catch:{ Exception -> 0x0113 }
            boolean r6 = r6 instanceof org.telegram.tgnet.TLRPC$TL_messageMediaWebPage     // Catch:{ Exception -> 0x0113 }
            if (r6 == 0) goto L_0x07af
        L_0x06a1:
            org.telegram.tgnet.TLRPC$Document r6 = org.telegram.messenger.MessageObject.getDocument(r15)     // Catch:{ Exception -> 0x0113 }
            org.telegram.tgnet.TLRPC$Photo r10 = org.telegram.messenger.MessageObject.getPhoto(r15)     // Catch:{ Exception -> 0x0113 }
            boolean r11 = org.telegram.messenger.MessageObject.isVoiceMessage(r15)     // Catch:{ Exception -> 0x0113 }
            if (r11 == 0) goto L_0x06c1
            long r10 = r6.id     // Catch:{ Exception -> 0x0113 }
            org.telegram.tgnet.TLRPC$TL_messageMediaDocument r12 = new org.telegram.tgnet.TLRPC$TL_messageMediaDocument     // Catch:{ Exception -> 0x0113 }
            r12.<init>()     // Catch:{ Exception -> 0x0113 }
            r12.document = r6     // Catch:{ Exception -> 0x0113 }
            int r6 = r12.flags     // Catch:{ Exception -> 0x0113 }
            r13 = 1
            r6 = r6 | r13
            r12.flags = r6     // Catch:{ Exception -> 0x0113 }
            r6 = 2
            goto L_0x0747
        L_0x06c1:
            boolean r11 = org.telegram.messenger.MessageObject.isStickerMessage(r15)     // Catch:{ Exception -> 0x0113 }
            if (r11 != 0) goto L_0x0737
            boolean r11 = org.telegram.messenger.MessageObject.isAnimatedStickerMessage(r15)     // Catch:{ Exception -> 0x0113 }
            if (r11 == 0) goto L_0x06cf
            goto L_0x0737
        L_0x06cf:
            boolean r11 = org.telegram.messenger.MessageObject.isVideoMessage(r15)     // Catch:{ Exception -> 0x0113 }
            if (r11 != 0) goto L_0x0726
            boolean r11 = org.telegram.messenger.MessageObject.isRoundVideoMessage(r15)     // Catch:{ Exception -> 0x0113 }
            if (r11 != 0) goto L_0x0726
            boolean r11 = org.telegram.messenger.MessageObject.isGifMessage(r15)     // Catch:{ Exception -> 0x0113 }
            if (r11 == 0) goto L_0x06e2
            goto L_0x0726
        L_0x06e2:
            if (r6 == 0) goto L_0x06f6
            long r10 = r6.id     // Catch:{ Exception -> 0x0113 }
            org.telegram.tgnet.TLRPC$TL_messageMediaDocument r12 = new org.telegram.tgnet.TLRPC$TL_messageMediaDocument     // Catch:{ Exception -> 0x0113 }
            r12.<init>()     // Catch:{ Exception -> 0x0113 }
            r12.document = r6     // Catch:{ Exception -> 0x0113 }
            int r6 = r12.flags     // Catch:{ Exception -> 0x0113 }
            r13 = 1
            r6 = r6 | r13
            r12.flags = r6     // Catch:{ Exception -> 0x0113 }
            r6 = 8
            goto L_0x0747
        L_0x06f6:
            if (r10 == 0) goto L_0x0721
            java.util.ArrayList<org.telegram.tgnet.TLRPC$PhotoSize> r6 = r10.sizes     // Catch:{ Exception -> 0x0113 }
            int r11 = org.telegram.messenger.AndroidUtilities.getPhotoSize()     // Catch:{ Exception -> 0x0113 }
            org.telegram.tgnet.TLRPC$PhotoSize r6 = org.telegram.messenger.FileLoader.getClosestPhotoSizeWithSize(r6, r11)     // Catch:{ Exception -> 0x0113 }
            if (r6 == 0) goto L_0x0721
            long r11 = r10.id     // Catch:{ Exception -> 0x0113 }
            org.telegram.tgnet.TLRPC$TL_messageMediaPhoto r6 = new org.telegram.tgnet.TLRPC$TL_messageMediaPhoto     // Catch:{ Exception -> 0x0113 }
            r6.<init>()     // Catch:{ Exception -> 0x0113 }
            r6.photo = r10     // Catch:{ Exception -> 0x0113 }
            int r10 = r6.flags     // Catch:{ Exception -> 0x0113 }
            r13 = 1
            r10 = r10 | r13
            r6.flags = r10     // Catch:{ Exception -> 0x0113 }
            org.telegram.tgnet.TLRPC$MessageMedia r13 = r15.media     // Catch:{ Exception -> 0x0113 }
            boolean r13 = r13 instanceof org.telegram.tgnet.TLRPC$TL_messageMediaWebPage     // Catch:{ Exception -> 0x0113 }
            if (r13 == 0) goto L_0x071e
            r13 = -2147483648(0xfffffffvar_, float:-0.0)
            r10 = r10 | r13
            r6.flags = r10     // Catch:{ Exception -> 0x0113 }
        L_0x071e:
            r10 = r11
            r12 = r6
            goto L_0x0746
        L_0x0721:
            r6 = 0
            r10 = 0
            r12 = 0
            goto L_0x0747
        L_0x0726:
            long r10 = r6.id     // Catch:{ Exception -> 0x0113 }
            org.telegram.tgnet.TLRPC$TL_messageMediaDocument r12 = new org.telegram.tgnet.TLRPC$TL_messageMediaDocument     // Catch:{ Exception -> 0x0113 }
            r12.<init>()     // Catch:{ Exception -> 0x0113 }
            r12.document = r6     // Catch:{ Exception -> 0x0113 }
            int r6 = r12.flags     // Catch:{ Exception -> 0x0113 }
            r13 = 1
            r6 = r6 | r13
            r12.flags = r6     // Catch:{ Exception -> 0x0113 }
            r6 = 4
            goto L_0x0747
        L_0x0737:
            long r10 = r6.id     // Catch:{ Exception -> 0x0113 }
            org.telegram.tgnet.TLRPC$TL_messageMediaDocument r12 = new org.telegram.tgnet.TLRPC$TL_messageMediaDocument     // Catch:{ Exception -> 0x0113 }
            r12.<init>()     // Catch:{ Exception -> 0x0113 }
            r12.document = r6     // Catch:{ Exception -> 0x0113 }
            int r6 = r12.flags     // Catch:{ Exception -> 0x0113 }
            r13 = 1
            r6 = r6 | r13
            r12.flags = r6     // Catch:{ Exception -> 0x0113 }
        L_0x0746:
            r6 = 1
        L_0x0747:
            if (r12 == 0) goto L_0x07af
            org.telegram.tgnet.TLRPC$MessageMedia r13 = r15.media     // Catch:{ Exception -> 0x0113 }
            int r13 = r13.ttl_seconds     // Catch:{ Exception -> 0x0113 }
            if (r13 == 0) goto L_0x075b
            org.telegram.tgnet.TLRPC$MessageMedia r13 = r15.media     // Catch:{ Exception -> 0x0113 }
            int r13 = r13.ttl_seconds     // Catch:{ Exception -> 0x0113 }
            r12.ttl_seconds = r13     // Catch:{ Exception -> 0x0113 }
            int r13 = r12.flags     // Catch:{ Exception -> 0x0113 }
            r14 = 4
            r13 = r13 | r14
            r12.flags = r13     // Catch:{ Exception -> 0x0113 }
        L_0x075b:
            r5 = r5 | r6
            r25.requery()     // Catch:{ Exception -> 0x0113 }
            org.telegram.tgnet.NativeByteBuffer r13 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x0113 }
            int r14 = r12.getObjectSize()     // Catch:{ Exception -> 0x0113 }
            r13.<init>((int) r14)     // Catch:{ Exception -> 0x0113 }
            r12.serializeToStream(r13)     // Catch:{ Exception -> 0x0113 }
            r12 = r25
            r14 = 1
            r12.bindLong(r14, r10)     // Catch:{ Exception -> 0x0113 }
            r10 = 2
            r12.bindInteger(r10, r6)     // Catch:{ Exception -> 0x0113 }
            int r6 = r15.date     // Catch:{ Exception -> 0x0113 }
            r10 = 3
            r12.bindInteger(r10, r6)     // Catch:{ Exception -> 0x0113 }
            r6 = 4
            r12.bindByteBuffer((int) r6, (org.telegram.tgnet.NativeByteBuffer) r13)     // Catch:{ Exception -> 0x0113 }
            java.lang.StringBuilder r6 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0113 }
            r6.<init>()     // Catch:{ Exception -> 0x0113 }
            java.lang.String r10 = "sent_"
            r6.append(r10)     // Catch:{ Exception -> 0x0113 }
            org.telegram.tgnet.TLRPC$Peer r10 = r15.to_id     // Catch:{ Exception -> 0x0113 }
            if (r10 == 0) goto L_0x0792
            org.telegram.tgnet.TLRPC$Peer r10 = r15.to_id     // Catch:{ Exception -> 0x0113 }
            int r10 = r10.channel_id     // Catch:{ Exception -> 0x0113 }
            goto L_0x0793
        L_0x0792:
            r10 = 0
        L_0x0793:
            r6.append(r10)     // Catch:{ Exception -> 0x0113 }
            java.lang.String r10 = "_"
            r6.append(r10)     // Catch:{ Exception -> 0x0113 }
            int r10 = r15.id     // Catch:{ Exception -> 0x0113 }
            r6.append(r10)     // Catch:{ Exception -> 0x0113 }
            java.lang.String r6 = r6.toString()     // Catch:{ Exception -> 0x0113 }
            r10 = 5
            r12.bindString(r10, r6)     // Catch:{ Exception -> 0x0113 }
            r12.step()     // Catch:{ Exception -> 0x0113 }
            r13.reuse()     // Catch:{ Exception -> 0x0113 }
            goto L_0x07b1
        L_0x07af:
            r12 = r25
        L_0x07b1:
            int r3 = r3 + 1
            r26 = r2
            r29 = r9
            r25 = r12
            r6 = r24
            r2 = r27
            r27 = r7
            r7 = r28
            r28 = r4
            r4 = r34
            goto L_0x04a2
        L_0x07c7:
            r34 = r4
            r12 = r25
            r4 = r28
            r9 = r29
            r28 = r7
            r7 = r27
            r27 = r2
            r2 = r26
            r9.dispose()     // Catch:{ Exception -> 0x0113 }
            if (r6 == 0) goto L_0x07df
            r6.dispose()     // Catch:{ Exception -> 0x0113 }
        L_0x07df:
            if (r8 == 0) goto L_0x07e4
            r8.dispose()     // Catch:{ Exception -> 0x0113 }
        L_0x07e4:
            r7.dispose()     // Catch:{ Exception -> 0x0113 }
            r12.dispose()     // Catch:{ Exception -> 0x0113 }
            r2.dispose()     // Catch:{ Exception -> 0x0113 }
            org.telegram.SQLite.SQLiteDatabase r2 = r1.database     // Catch:{ Exception -> 0x0113 }
            java.lang.String r3 = "REPLACE INTO dialogs VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r2 = r2.executeFast(r3)     // Catch:{ Exception -> 0x0113 }
            org.telegram.SQLite.SQLiteDatabase r3 = r1.database     // Catch:{ Exception -> 0x0113 }
            java.lang.String r6 = "UPDATE dialogs SET date = ?, unread_count = ?, last_mid = ?, unread_count_i = ? WHERE did = ?"
            org.telegram.SQLite.SQLitePreparedStatement r3 = r3.executeFast(r6)     // Catch:{ Exception -> 0x0113 }
            r6 = 0
        L_0x07fe:
            int r7 = r4.size()     // Catch:{ Exception -> 0x0113 }
            if (r6 >= r7) goto L_0x09e1
            long r7 = r4.keyAt(r6)     // Catch:{ Exception -> 0x0113 }
            r9 = 0
            int r11 = (r7 > r9 ? 1 : (r7 == r9 ? 0 : -1))
            if (r11 != 0) goto L_0x0827
            r15 = r41
            r12 = r2
            r23 = r4
            r26 = r5
            r29 = r6
            r14 = r22
            r4 = 0
            r6 = 8
            r9 = 10
            r10 = 9
            r13 = 11
            r20 = 32
            goto L_0x09d3
        L_0x0827:
            java.lang.Object r9 = r4.valueAt(r6)     // Catch:{ Exception -> 0x0113 }
            org.telegram.tgnet.TLRPC$Message r9 = (org.telegram.tgnet.TLRPC$Message) r9     // Catch:{ Exception -> 0x0113 }
            if (r9 == 0) goto L_0x0834
            org.telegram.tgnet.TLRPC$Peer r10 = r9.to_id     // Catch:{ Exception -> 0x0113 }
            int r10 = r10.channel_id     // Catch:{ Exception -> 0x0113 }
            goto L_0x0835
        L_0x0834:
            r10 = 0
        L_0x0835:
            org.telegram.SQLite.SQLiteDatabase r11 = r1.database     // Catch:{ Exception -> 0x0113 }
            java.lang.StringBuilder r12 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0113 }
            r12.<init>()     // Catch:{ Exception -> 0x0113 }
            java.lang.String r13 = "SELECT date, unread_count, last_mid, unread_count_i FROM dialogs WHERE did = "
            r12.append(r13)     // Catch:{ Exception -> 0x0113 }
            r12.append(r7)     // Catch:{ Exception -> 0x0113 }
            java.lang.String r12 = r12.toString()     // Catch:{ Exception -> 0x0113 }
            r13 = 0
            java.lang.Object[] r14 = new java.lang.Object[r13]     // Catch:{ Exception -> 0x0113 }
            org.telegram.SQLite.SQLiteCursor r11 = r11.queryFinalized(r12, r14)     // Catch:{ Exception -> 0x0113 }
            boolean r12 = r11.next()     // Catch:{ Exception -> 0x0113 }
            if (r12 == 0) goto L_0x087b
            int r14 = r11.intValue(r13)     // Catch:{ Exception -> 0x0113 }
            r23 = r4
            r15 = 1
            int r4 = r11.intValue(r15)     // Catch:{ Exception -> 0x0113 }
            int r4 = java.lang.Math.max(r13, r4)     // Catch:{ Exception -> 0x0113 }
            r15 = 2
            int r25 = r11.intValue(r15)     // Catch:{ Exception -> 0x0113 }
            r37 = r4
            r15 = 3
            int r4 = r11.intValue(r15)     // Catch:{ Exception -> 0x0113 }
            int r4 = java.lang.Math.max(r13, r4)     // Catch:{ Exception -> 0x0113 }
            r13 = r4
            r15 = r14
            r14 = r25
            r4 = r37
            goto L_0x088a
        L_0x087b:
            r23 = r4
            if (r10 == 0) goto L_0x0886
            org.telegram.messenger.MessagesController r4 = r36.getMessagesController()     // Catch:{ Exception -> 0x0113 }
            r4.checkChannelInviter(r10)     // Catch:{ Exception -> 0x0113 }
        L_0x0886:
            r4 = 0
            r13 = 0
            r14 = 0
            r15 = 0
        L_0x088a:
            r11.dispose()     // Catch:{ Exception -> 0x0113 }
            r11 = r27
            java.lang.Object r25 = r11.get(r7)     // Catch:{ Exception -> 0x0113 }
            java.lang.Integer r25 = (java.lang.Integer) r25     // Catch:{ Exception -> 0x0113 }
            r26 = r5
            r5 = r28
            java.lang.Object r27 = r5.get(r7)     // Catch:{ Exception -> 0x0113 }
            java.lang.Integer r27 = (java.lang.Integer) r27     // Catch:{ Exception -> 0x0113 }
            if (r27 != 0) goto L_0x08ac
            r16 = 0
            java.lang.Integer r27 = java.lang.Integer.valueOf(r16)     // Catch:{ Exception -> 0x0113 }
            r29 = r6
        L_0x08a9:
            r6 = r27
            goto L_0x08bc
        L_0x08ac:
            int r28 = r27.intValue()     // Catch:{ Exception -> 0x0113 }
            int r28 = r28 + r4
            r29 = r6
            java.lang.Integer r6 = java.lang.Integer.valueOf(r28)     // Catch:{ Exception -> 0x0113 }
            r5.put(r7, r6)     // Catch:{ Exception -> 0x0113 }
            goto L_0x08a9
        L_0x08bc:
            if (r25 != 0) goto L_0x08c9
            r16 = 0
            java.lang.Integer r25 = java.lang.Integer.valueOf(r16)     // Catch:{ Exception -> 0x0113 }
            r28 = r5
        L_0x08c6:
            r5 = r25
            goto L_0x08d9
        L_0x08c9:
            int r27 = r25.intValue()     // Catch:{ Exception -> 0x0113 }
            int r27 = r27 + r13
            r28 = r5
            java.lang.Integer r5 = java.lang.Integer.valueOf(r27)     // Catch:{ Exception -> 0x0113 }
            r11.put(r7, r5)     // Catch:{ Exception -> 0x0113 }
            goto L_0x08c6
        L_0x08d9:
            if (r9 == 0) goto L_0x08e5
            int r14 = r9.id     // Catch:{ Exception -> 0x08e0 }
            r37 = r2
            goto L_0x08e7
        L_0x08e0:
            r0 = move-exception
            r1 = r36
            goto L_0x0114
        L_0x08e5:
            r37 = r2
        L_0x08e7:
            long r1 = (long) r14     // Catch:{ Exception -> 0x08e0 }
            if (r9 == 0) goto L_0x08f1
            int r14 = r9.local_id     // Catch:{ Exception -> 0x08e0 }
            if (r14 == 0) goto L_0x08f1
            int r1 = r9.local_id     // Catch:{ Exception -> 0x08e0 }
            long r1 = (long) r1     // Catch:{ Exception -> 0x08e0 }
        L_0x08f1:
            r40 = r15
            if (r10 == 0) goto L_0x08fc
            long r14 = (long) r10     // Catch:{ Exception -> 0x08e0 }
            r20 = 32
            long r14 = r14 << r20
            long r1 = r1 | r14
            goto L_0x08fe
        L_0x08fc:
            r20 = 32
        L_0x08fe:
            if (r4 != 0) goto L_0x090c
            int r14 = r6.intValue()     // Catch:{ Exception -> 0x08e0 }
            if (r14 == 0) goto L_0x090c
            r14 = r22
            r14.put(r7, r6)     // Catch:{ Exception -> 0x08e0 }
            goto L_0x090e
        L_0x090c:
            r14 = r22
        L_0x090e:
            if (r13 != 0) goto L_0x091c
            int r15 = r5.intValue()     // Catch:{ Exception -> 0x08e0 }
            if (r15 == 0) goto L_0x091c
            r15 = r41
            r15.put(r7, r5)     // Catch:{ Exception -> 0x08e0 }
            goto L_0x091e
        L_0x091c:
            r15 = r41
        L_0x091e:
            if (r12 == 0) goto L_0x0961
            r3.requery()     // Catch:{ Exception -> 0x08e0 }
            if (r9 == 0) goto L_0x092c
            if (r39 == 0) goto L_0x0929
            if (r40 != 0) goto L_0x092c
        L_0x0929:
            int r9 = r9.date     // Catch:{ Exception -> 0x08e0 }
            goto L_0x092e
        L_0x092c:
            r9 = r40
        L_0x092e:
            r10 = 1
            r3.bindInteger(r10, r9)     // Catch:{ Exception -> 0x08e0 }
            int r6 = r6.intValue()     // Catch:{ Exception -> 0x08e0 }
            int r4 = r4 + r6
            r6 = 2
            r3.bindInteger(r6, r4)     // Catch:{ Exception -> 0x08e0 }
            r4 = 3
            r3.bindLong(r4, r1)     // Catch:{ Exception -> 0x08e0 }
            int r1 = r5.intValue()     // Catch:{ Exception -> 0x08e0 }
            int r13 = r13 + r1
            r1 = 4
            r3.bindInteger(r1, r13)     // Catch:{ Exception -> 0x08e0 }
            r1 = 5
            r3.bindLong(r1, r7)     // Catch:{ Exception -> 0x08e0 }
            r3.step()     // Catch:{ Exception -> 0x08e0 }
            r1 = r36
            r12 = r37
            r27 = r11
            r4 = 0
            r6 = 8
            r9 = 10
            r10 = 9
            r13 = 11
            goto L_0x09d3
        L_0x0961:
            r37.requery()     // Catch:{ Exception -> 0x08e0 }
            r12 = r37
            r27 = r11
            r11 = 1
            r12.bindLong(r11, r7)     // Catch:{ Exception -> 0x08e0 }
            if (r9 == 0) goto L_0x0975
            if (r39 == 0) goto L_0x0972
            if (r40 != 0) goto L_0x0975
        L_0x0972:
            int r9 = r9.date     // Catch:{ Exception -> 0x08e0 }
            goto L_0x0977
        L_0x0975:
            r9 = r40
        L_0x0977:
            r11 = 2
            r12.bindInteger(r11, r9)     // Catch:{ Exception -> 0x08e0 }
            int r6 = r6.intValue()     // Catch:{ Exception -> 0x08e0 }
            int r4 = r4 + r6
            r6 = 3
            r12.bindInteger(r6, r4)     // Catch:{ Exception -> 0x08e0 }
            r4 = 4
            r12.bindLong(r4, r1)     // Catch:{ Exception -> 0x08e0 }
            r1 = 5
            r2 = 0
            r12.bindInteger(r1, r2)     // Catch:{ Exception -> 0x08e0 }
            r4 = 6
            r12.bindInteger(r4, r2)     // Catch:{ Exception -> 0x08e0 }
            r37 = r5
            r2 = 7
            r4 = 0
            r12.bindLong(r2, r4)     // Catch:{ Exception -> 0x08e0 }
            int r6 = r37.intValue()     // Catch:{ Exception -> 0x08e0 }
            int r13 = r13 + r6
            r6 = 8
            r12.bindInteger(r6, r13)     // Catch:{ Exception -> 0x08e0 }
            if (r10 == 0) goto L_0x09a7
            r9 = 1
            goto L_0x09a8
        L_0x09a7:
            r9 = 0
        L_0x09a8:
            r10 = 9
            r12.bindInteger(r10, r9)     // Catch:{ Exception -> 0x08e0 }
            r9 = 10
            r11 = 0
            r12.bindInteger(r9, r11)     // Catch:{ Exception -> 0x08e0 }
            r13 = 11
            r12.bindInteger(r13, r11)     // Catch:{ Exception -> 0x08e0 }
            r1 = 12
            r12.bindInteger(r1, r11)     // Catch:{ Exception -> 0x08e0 }
            r1 = 13
            r12.bindInteger(r1, r11)     // Catch:{ Exception -> 0x08e0 }
            r1 = 14
            r12.bindNull(r1)     // Catch:{ Exception -> 0x08e0 }
            r12.step()     // Catch:{ Exception -> 0x08e0 }
            r1 = r36
            android.util.LongSparseArray<java.lang.Boolean> r11 = r1.unknownDialogsIds     // Catch:{ Exception -> 0x0113 }
            java.lang.Boolean r2 = java.lang.Boolean.TRUE     // Catch:{ Exception -> 0x0113 }
            r11.put(r7, r2)     // Catch:{ Exception -> 0x0113 }
        L_0x09d3:
            int r2 = r29 + 1
            r6 = r2
            r2 = r12
            r22 = r14
            r41 = r15
            r4 = r23
            r5 = r26
            goto L_0x07fe
        L_0x09e1:
            r15 = r41
            r12 = r2
            r26 = r5
            r14 = r22
            r3.dispose()     // Catch:{ Exception -> 0x0113 }
            r12.dispose()     // Catch:{ Exception -> 0x0113 }
            if (r34 == 0) goto L_0x0a99
            org.telegram.SQLite.SQLiteDatabase r2 = r1.database     // Catch:{ Exception -> 0x0113 }
            java.lang.String r3 = "REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r2 = r2.executeFast(r3)     // Catch:{ Exception -> 0x0113 }
            r5 = 0
        L_0x09f9:
            int r3 = r34.size()     // Catch:{ Exception -> 0x0113 }
            if (r5 >= r3) goto L_0x0a93
            r4 = r34
            int r3 = r4.keyAt(r5)     // Catch:{ Exception -> 0x0113 }
            java.lang.Object r6 = r4.valueAt(r5)     // Catch:{ Exception -> 0x0113 }
            android.util.LongSparseArray r6 = (android.util.LongSparseArray) r6     // Catch:{ Exception -> 0x0113 }
            r7 = 0
        L_0x0a0c:
            int r8 = r6.size()     // Catch:{ Exception -> 0x0113 }
            if (r7 >= r8) goto L_0x0a86
            long r8 = r6.keyAt(r7)     // Catch:{ Exception -> 0x0113 }
            org.telegram.SQLite.SQLiteDatabase r10 = r1.database     // Catch:{ Exception -> 0x0113 }
            java.util.Locale r11 = java.util.Locale.US     // Catch:{ Exception -> 0x0113 }
            java.lang.String r12 = "SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1"
            r34 = r4
            r13 = 2
            java.lang.Object[] r4 = new java.lang.Object[r13]     // Catch:{ Exception -> 0x0113 }
            java.lang.Long r13 = java.lang.Long.valueOf(r8)     // Catch:{ Exception -> 0x0113 }
            r22 = r14
            r14 = 0
            r4[r14] = r13     // Catch:{ Exception -> 0x0113 }
            java.lang.Integer r13 = java.lang.Integer.valueOf(r3)     // Catch:{ Exception -> 0x0113 }
            r16 = 1
            r4[r16] = r13     // Catch:{ Exception -> 0x0113 }
            java.lang.String r4 = java.lang.String.format(r11, r12, r4)     // Catch:{ Exception -> 0x0113 }
            java.lang.Object[] r11 = new java.lang.Object[r14]     // Catch:{ Exception -> 0x0113 }
            org.telegram.SQLite.SQLiteCursor r4 = r10.queryFinalized(r4, r11)     // Catch:{ Exception -> 0x0113 }
            boolean r10 = r4.next()     // Catch:{ Exception -> 0x0113 }
            if (r10 == 0) goto L_0x0a4c
            int r10 = r4.intValue(r14)     // Catch:{ Exception -> 0x0113 }
            r11 = 1
            int r12 = r4.intValue(r11)     // Catch:{ Exception -> 0x0113 }
            goto L_0x0a4e
        L_0x0a4c:
            r10 = -1
            r12 = 0
        L_0x0a4e:
            r4.dispose()     // Catch:{ Exception -> 0x0113 }
            r4 = -1
            if (r10 == r4) goto L_0x0a7b
            r2.requery()     // Catch:{ Exception -> 0x0113 }
            java.lang.Object r11 = r6.valueAt(r7)     // Catch:{ Exception -> 0x0113 }
            java.lang.Integer r11 = (java.lang.Integer) r11     // Catch:{ Exception -> 0x0113 }
            int r11 = r11.intValue()     // Catch:{ Exception -> 0x0113 }
            int r10 = r10 + r11
            r11 = 1
            r2.bindLong(r11, r8)     // Catch:{ Exception -> 0x0113 }
            r8 = 2
            r2.bindInteger(r8, r3)     // Catch:{ Exception -> 0x0113 }
            r9 = 0
            int r10 = java.lang.Math.max(r9, r10)     // Catch:{ Exception -> 0x0113 }
            r9 = 3
            r2.bindInteger(r9, r10)     // Catch:{ Exception -> 0x0113 }
            r10 = 4
            r2.bindInteger(r10, r12)     // Catch:{ Exception -> 0x0113 }
            r2.step()     // Catch:{ Exception -> 0x0113 }
            goto L_0x0a7f
        L_0x0a7b:
            r8 = 2
            r9 = 3
            r10 = 4
            r11 = 1
        L_0x0a7f:
            int r7 = r7 + 1
            r14 = r22
            r4 = r34
            goto L_0x0a0c
        L_0x0a86:
            r34 = r4
            r22 = r14
            r4 = -1
            r8 = 2
            r9 = 3
            r10 = 4
            r11 = 1
            int r5 = r5 + 1
            goto L_0x09f9
        L_0x0a93:
            r22 = r14
            r2.dispose()     // Catch:{ Exception -> 0x0113 }
            goto L_0x0a9b
        L_0x0a99:
            r22 = r14
        L_0x0a9b:
            if (r38 == 0) goto L_0x0aa2
            org.telegram.SQLite.SQLiteDatabase r2 = r1.database     // Catch:{ Exception -> 0x0113 }
            r2.commitTransaction()     // Catch:{ Exception -> 0x0113 }
        L_0x0aa2:
            r2 = r22
            r3 = 0
            r1.updateFiltersReadCounter(r2, r15, r3)     // Catch:{ Exception -> 0x0113 }
            org.telegram.messenger.MessagesController r2 = r36.getMessagesController()     // Catch:{ Exception -> 0x0113 }
            r4 = r27
            r3 = r28
            r2.processDialogsUpdateRead(r3, r4)     // Catch:{ Exception -> 0x0113 }
            if (r26 == 0) goto L_0x0ac3
            org.telegram.messenger.-$$Lambda$MessagesStorage$03adhzZui-LG6ihIAOf5Cu7HYFk r2 = new org.telegram.messenger.-$$Lambda$MessagesStorage$03adhzZui-LG6ihIAOf5Cu7HYFk     // Catch:{ Exception -> 0x0113 }
            r5 = r26
            r2.<init>(r5)     // Catch:{ Exception -> 0x0113 }
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r2)     // Catch:{ Exception -> 0x0113 }
            goto L_0x0ac3
        L_0x0ac0:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r2)
        L_0x0ac3:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$putMessages$135$MessagesStorage(java.util.ArrayList, boolean, boolean, int, boolean, boolean):void");
    }

    public /* synthetic */ void lambda$putMessagesInternal$134$MessagesStorage(int i) {
        getDownloadController().newDownloadObjectsAvailable(i);
    }

    public void putMessages(ArrayList<TLRPC$Message> arrayList, boolean z, boolean z2, boolean z3, int i, boolean z4) {
        putMessages(arrayList, z, z2, z3, i, false, z4);
    }

    public void putMessages(ArrayList<TLRPC$Message> arrayList, boolean z, boolean z2, boolean z3, int i, boolean z4, boolean z5) {
        if (arrayList.size() != 0) {
            if (z2) {
                this.storageQueue.postRunnable(new Runnable(arrayList, z, z3, i, z4, z5) {
                    public final /* synthetic */ ArrayList f$1;
                    public final /* synthetic */ boolean f$2;
                    public final /* synthetic */ boolean f$3;
                    public final /* synthetic */ int f$4;
                    public final /* synthetic */ boolean f$5;
                    public final /* synthetic */ boolean f$6;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                        this.f$3 = r4;
                        this.f$4 = r5;
                        this.f$5 = r6;
                        this.f$6 = r7;
                    }

                    public final void run() {
                        MessagesStorage.this.lambda$putMessages$135$MessagesStorage(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
                    }
                });
                return;
            }
            lambda$putMessages$135$MessagesStorage(arrayList, z, z3, i, z4, z5);
        }
    }

    public void markMessageAsSendError(TLRPC$Message tLRPC$Message, boolean z) {
        this.storageQueue.postRunnable(new Runnable(tLRPC$Message, z) {
            public final /* synthetic */ TLRPC$Message f$1;
            public final /* synthetic */ boolean f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesStorage.this.lambda$markMessageAsSendError$136$MessagesStorage(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$markMessageAsSendError$136$MessagesStorage(TLRPC$Message tLRPC$Message, boolean z) {
        try {
            long j = (long) tLRPC$Message.id;
            if (tLRPC$Message.to_id.channel_id != 0) {
                j |= ((long) tLRPC$Message.to_id.channel_id) << 32;
            }
            if (z) {
                SQLiteDatabase sQLiteDatabase = this.database;
                sQLiteDatabase.executeFast("UPDATE scheduled_messages SET send_state = 2 WHERE mid = " + j).stepThis().dispose();
                return;
            }
            SQLiteDatabase sQLiteDatabase2 = this.database;
            sQLiteDatabase2.executeFast("UPDATE messages SET send_state = 2 WHERE mid = " + j).stepThis().dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void setMessageSeq(int i, int i2, int i3) {
        this.storageQueue.postRunnable(new Runnable(i, i2, i3) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ int f$2;
            public final /* synthetic */ int f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesStorage.this.lambda$setMessageSeq$137$MessagesStorage(this.f$1, this.f$2, this.f$3);
            }
        });
    }

    public /* synthetic */ void lambda$setMessageSeq$137$MessagesStorage(int i, int i2, int i3) {
        try {
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO messages_seq VALUES(?, ?, ?)");
            executeFast.requery();
            executeFast.bindInteger(1, i);
            executeFast.bindInteger(2, i2);
            executeFast.bindInteger(3, i3);
            executeFast.step();
            executeFast.dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    /* access modifiers changed from: private */
    /* JADX WARNING: Code restructure failed: missing block: B:109:0x016c, code lost:
        if (r2 != null) goto L_0x01bf;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:115:?, code lost:
        r1.database.executeFast(java.lang.String.format(java.util.Locale.US, "DELETE FROM messages WHERE mid = %d", new java.lang.Object[]{java.lang.Long.valueOf(r12)})).stepThis().dispose();
        r1.database.executeFast(java.lang.String.format(java.util.Locale.US, "DELETE FROM messages_seq WHERE mid = %d", new java.lang.Object[]{java.lang.Long.valueOf(r12)})).stepThis().dispose();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:116:0x01b5, code lost:
        r0 = th;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:117:0x01b6, code lost:
        r7 = r2;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:118:0x01b9, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:120:?, code lost:
        org.telegram.messenger.FileLog.e((java.lang.Throwable) r0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:121:0x01bd, code lost:
        if (r2 == null) goto L_0x01c3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:122:0x01bf, code lost:
        r2.dispose();
        r2 = null;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:124:?, code lost:
        r2 = r1.database.executeFast("UPDATE media_v2 SET mid = ? WHERE mid = ?");
        r2.bindLong(1, r14);
        r2.bindLong(2, r12);
        r2.step();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:125:0x01d5, code lost:
        if (r2 == null) goto L_0x0205;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:126:0x01d8, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:128:?, code lost:
        r1.database.executeFast(java.lang.String.format(java.util.Locale.US, "DELETE FROM media_v2 WHERE mid = %d", new java.lang.Object[]{java.lang.Long.valueOf(r12)})).stepThis().dispose();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:129:0x01fb, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:131:?, code lost:
        org.telegram.messenger.FileLog.e((java.lang.Throwable) r0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:132:0x01ff, code lost:
        if (r2 == null) goto L_0x0205;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:133:0x0201, code lost:
        r2.dispose();
        r2 = null;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:135:?, code lost:
        r2 = r1.database.executeFast("UPDATE dialogs SET last_mid = ? WHERE last_mid = ?");
        r2.bindLong(1, r14);
        r2.bindLong(2, r12);
        r2.step();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:136:0x0217, code lost:
        if (r2 == null) goto L_0x0282;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:137:0x021a, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:138:0x021c, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:140:?, code lost:
        org.telegram.messenger.FileLog.e((java.lang.Throwable) r0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:141:0x0220, code lost:
        if (r2 == null) goto L_0x0282;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:142:0x0222, code lost:
        r2.dispose();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:143:0x0226, code lost:
        if (r2 != null) goto L_0x0228;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:144:0x0228, code lost:
        r2.dispose();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:145:0x022b, code lost:
        throw r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:146:0x022c, code lost:
        if (r2 != null) goto L_0x022e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:147:0x022e, code lost:
        r2.dispose();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:148:0x0231, code lost:
        throw r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:156:0x024c, code lost:
        if (r3 != null) goto L_0x0278;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:157:0x024f, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:158:0x0250, code lost:
        r7 = r3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:160:?, code lost:
        r1.database.executeFast(java.lang.String.format(java.util.Locale.US, "DELETE FROM scheduled_messages WHERE mid = %d", new java.lang.Object[]{java.lang.Long.valueOf(r12)})).stepThis().dispose();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:161:0x0272, code lost:
        r0 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:163:?, code lost:
        org.telegram.messenger.FileLog.e((java.lang.Throwable) r0);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:164:0x0276, code lost:
        if (r3 == null) goto L_0x0282;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:165:0x0278, code lost:
        r3.dispose();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:166:0x027c, code lost:
        if (r7 != null) goto L_0x027e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:167:0x027e, code lost:
        r7.dispose();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:168:0x0281, code lost:
        throw r0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:90:0x013a, code lost:
        if (r3 != null) goto L_0x0146;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:96:0x0144, code lost:
        if (0 == 0) goto L_0x0149;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:97:0x0146, code lost:
        r3.dispose();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:99:0x0151, code lost:
        return new long[]{r7, r5};
     */
    /* JADX WARNING: Failed to process nested try/catch */
    /* JADX WARNING: Missing exception handler attribute for start block: B:114:0x0174 */
    /* JADX WARNING: Missing exception handler attribute for start block: B:127:0x01da */
    /* JADX WARNING: Missing exception handler attribute for start block: B:159:0x0252 */
    /* JADX WARNING: Removed duplicated region for block: B:150:0x0234  */
    /* JADX WARNING: Removed duplicated region for block: B:18:0x004a  */
    /* JADX WARNING: Removed duplicated region for block: B:21:0x0051 A[RETURN] */
    /* JADX WARNING: Removed duplicated region for block: B:22:0x0052  */
    /* JADX WARNING: Removed duplicated region for block: B:26:0x0059  */
    /* JADX WARNING: Removed duplicated region for block: B:77:0x0107 A[DONT_GENERATE] */
    /* JADX WARNING: Removed duplicated region for block: B:81:0x0112 A[RETURN] */
    /* JADX WARNING: Removed duplicated region for block: B:82:0x0114  */
    /* renamed from: updateMessageStateAndIdInternal */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public long[] lambda$updateMessageStateAndId$138$MessagesStorage(long r20, java.lang.Integer r22, int r23, int r24, int r25, int r26) {
        /*
            r19 = this;
            r1 = r19
            r2 = r24
            r3 = r25
            r0 = r23
            r4 = r26
            long r5 = (long) r0
            r7 = 0
            r8 = 0
            r9 = 1
            if (r22 != 0) goto L_0x005d
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0043, all -> 0x0041 }
            java.util.Locale r10 = java.util.Locale.US     // Catch:{ Exception -> 0x0043, all -> 0x0041 }
            java.lang.String r11 = "SELECT mid FROM randoms WHERE random_id = %d LIMIT 1"
            java.lang.Object[] r12 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x0043, all -> 0x0041 }
            java.lang.Long r13 = java.lang.Long.valueOf(r20)     // Catch:{ Exception -> 0x0043, all -> 0x0041 }
            r12[r8] = r13     // Catch:{ Exception -> 0x0043, all -> 0x0041 }
            java.lang.String r10 = java.lang.String.format(r10, r11, r12)     // Catch:{ Exception -> 0x0043, all -> 0x0041 }
            java.lang.Object[] r11 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x0043, all -> 0x0041 }
            org.telegram.SQLite.SQLiteCursor r10 = r0.queryFinalized(r10, r11)     // Catch:{ Exception -> 0x0043, all -> 0x0041 }
            boolean r0 = r10.next()     // Catch:{ Exception -> 0x003f }
            if (r0 == 0) goto L_0x0037
            int r0 = r10.intValue(r8)     // Catch:{ Exception -> 0x003f }
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)     // Catch:{ Exception -> 0x003f }
            goto L_0x0039
        L_0x0037:
            r0 = r22
        L_0x0039:
            if (r10 == 0) goto L_0x004f
            r10.dispose()
            goto L_0x004f
        L_0x003f:
            r0 = move-exception
            goto L_0x0045
        L_0x0041:
            r0 = move-exception
            goto L_0x0057
        L_0x0043:
            r0 = move-exception
            r10 = r7
        L_0x0045:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ all -> 0x0055 }
            if (r10 == 0) goto L_0x004d
            r10.dispose()
        L_0x004d:
            r0 = r22
        L_0x004f:
            if (r0 != 0) goto L_0x0052
            return r7
        L_0x0052:
            r11 = r10
            r10 = r0
            goto L_0x0060
        L_0x0055:
            r0 = move-exception
            r7 = r10
        L_0x0057:
            if (r7 == 0) goto L_0x005c
            r7.dispose()
        L_0x005c:
            throw r0
        L_0x005d:
            r10 = r22
            r11 = r7
        L_0x0060:
            int r0 = r10.intValue()
            long r12 = (long) r0
            if (r3 == 0) goto L_0x006e
            long r14 = (long) r3
            r0 = 32
            long r14 = r14 << r0
            long r12 = r12 | r14
            long r14 = r14 | r5
            goto L_0x006f
        L_0x006e:
            r14 = r5
        L_0x006f:
            r3 = -1
            r16 = 0
            if (r4 == r3) goto L_0x007a
            if (r4 != 0) goto L_0x0077
            goto L_0x007a
        L_0x0077:
            r7 = r16
            goto L_0x00b7
        L_0x007a:
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x00ab }
            java.util.Locale r7 = java.util.Locale.US     // Catch:{ Exception -> 0x00ab }
            java.lang.String r3 = "SELECT uid FROM messages WHERE mid = %d LIMIT 1"
            java.lang.Object[] r8 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x00ab }
            java.lang.Long r18 = java.lang.Long.valueOf(r12)     // Catch:{ Exception -> 0x00ab }
            r9 = 0
            r8[r9] = r18     // Catch:{ Exception -> 0x00ab }
            java.lang.String r3 = java.lang.String.format(r7, r3, r8)     // Catch:{ Exception -> 0x00ab }
            java.lang.Object[] r7 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x00ab }
            org.telegram.SQLite.SQLiteCursor r11 = r0.queryFinalized(r3, r7)     // Catch:{ Exception -> 0x00ab }
            boolean r0 = r11.next()     // Catch:{ Exception -> 0x00ab }
            if (r0 == 0) goto L_0x00a0
            long r3 = r11.longValue(r9)     // Catch:{ Exception -> 0x00ab }
            r7 = r3
            r4 = 0
            goto L_0x00a2
        L_0x00a0:
            r7 = r16
        L_0x00a2:
            if (r11 == 0) goto L_0x00b6
            r11.dispose()
            goto L_0x00b6
        L_0x00a8:
            r0 = move-exception
            goto L_0x0296
        L_0x00ab:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ all -> 0x00a8 }
            if (r11 == 0) goto L_0x00b4
            r11.dispose()
        L_0x00b4:
            r7 = r16
        L_0x00b6:
            r3 = -1
        L_0x00b7:
            if (r4 == r3) goto L_0x00c2
            r3 = 1
            if (r4 != r3) goto L_0x00bd
            goto L_0x00c3
        L_0x00bd:
            r18 = r4
            r20 = r7
            goto L_0x010a
        L_0x00c2:
            r3 = 1
        L_0x00c3:
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x00fd }
            java.util.Locale r9 = java.util.Locale.US     // Catch:{ Exception -> 0x00fd }
            r18 = r4
            java.lang.String r4 = "SELECT uid FROM scheduled_messages WHERE mid = %d LIMIT 1"
            r20 = r7
            java.lang.Object[] r7 = new java.lang.Object[r3]     // Catch:{ Exception -> 0x00f6 }
            java.lang.Long r3 = java.lang.Long.valueOf(r12)     // Catch:{ Exception -> 0x00f6 }
            r8 = 0
            r7[r8] = r3     // Catch:{ Exception -> 0x00f6 }
            java.lang.String r3 = java.lang.String.format(r9, r4, r7)     // Catch:{ Exception -> 0x00f6 }
            java.lang.Object[] r4 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x00f6 }
            org.telegram.SQLite.SQLiteCursor r11 = r0.queryFinalized(r3, r4)     // Catch:{ Exception -> 0x00f6 }
            boolean r0 = r11.next()     // Catch:{ Exception -> 0x00f6 }
            if (r0 == 0) goto L_0x00ee
            long r3 = r11.longValue(r8)     // Catch:{ Exception -> 0x00f6 }
            r7 = r3
            r18 = 1
            goto L_0x00f0
        L_0x00ee:
            r7 = r20
        L_0x00f0:
            if (r11 == 0) goto L_0x010c
            r11.dispose()
            goto L_0x010c
        L_0x00f6:
            r0 = move-exception
            goto L_0x0102
        L_0x00f8:
            r0 = move-exception
            goto L_0x0100
        L_0x00fa:
            r0 = move-exception
            goto L_0x0290
        L_0x00fd:
            r0 = move-exception
            r18 = r4
        L_0x0100:
            r20 = r7
        L_0x0102:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ all -> 0x00fa }
            if (r11 == 0) goto L_0x010a
            r11.dispose()
        L_0x010a:
            r7 = r20
        L_0x010c:
            r4 = r18
            int r0 = (r7 > r16 ? 1 : (r7 == r16 ? 0 : -1))
            if (r0 != 0) goto L_0x0114
            r3 = 0
            return r3
        L_0x0114:
            r3 = 0
            r9 = 2
            int r0 = (r12 > r14 ? 1 : (r12 == r14 ? 0 : -1))
            if (r0 != 0) goto L_0x0158
            if (r2 == 0) goto L_0x0158
            if (r4 != 0) goto L_0x0127
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0140 }
            java.lang.String r4 = "UPDATE messages SET send_state = 0, date = ? WHERE mid = ?"
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r4)     // Catch:{ Exception -> 0x0140 }
            goto L_0x012f
        L_0x0127:
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0140 }
            java.lang.String r4 = "UPDATE scheduled_messages SET send_state = 0, date = ? WHERE mid = ?"
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r4)     // Catch:{ Exception -> 0x0140 }
        L_0x012f:
            r3 = r0
            r4 = 1
            r3.bindInteger(r4, r2)     // Catch:{ Exception -> 0x0140 }
            r3.bindLong(r9, r14)     // Catch:{ Exception -> 0x0140 }
            r3.step()     // Catch:{ Exception -> 0x0140 }
            if (r3 == 0) goto L_0x0149
            goto L_0x0146
        L_0x013d:
            r0 = move-exception
            r7 = r3
            goto L_0x0152
        L_0x0140:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ all -> 0x013d }
            if (r3 == 0) goto L_0x0149
        L_0x0146:
            r3.dispose()
        L_0x0149:
            long[] r0 = new long[r9]
            r2 = 0
            r0[r2] = r7
            r2 = 1
            r0[r2] = r5
            return r0
        L_0x0152:
            if (r7 == 0) goto L_0x0157
            r7.dispose()
        L_0x0157:
            throw r0
        L_0x0158:
            if (r4 != 0) goto L_0x0238
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0173, all -> 0x016f }
            java.lang.String r2 = "UPDATE messages SET mid = ?, send_state = 0 WHERE mid = ?"
            org.telegram.SQLite.SQLitePreparedStatement r2 = r0.executeFast(r2)     // Catch:{ Exception -> 0x0173, all -> 0x016f }
            r4 = 1
            r2.bindLong(r4, r14)     // Catch:{ Exception -> 0x0174 }
            r2.bindLong(r9, r12)     // Catch:{ Exception -> 0x0174 }
            r2.step()     // Catch:{ Exception -> 0x0174 }
            if (r2 == 0) goto L_0x01c3
            goto L_0x01bf
        L_0x016f:
            r0 = move-exception
            r7 = r3
            goto L_0x0232
        L_0x0173:
            r2 = r3
        L_0x0174:
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x01b9 }
            java.util.Locale r4 = java.util.Locale.US     // Catch:{ Exception -> 0x01b9 }
            java.lang.String r5 = "DELETE FROM messages WHERE mid = %d"
            r6 = 1
            java.lang.Object[] r11 = new java.lang.Object[r6]     // Catch:{ Exception -> 0x01b9 }
            java.lang.Long r6 = java.lang.Long.valueOf(r12)     // Catch:{ Exception -> 0x01b9 }
            r16 = 0
            r11[r16] = r6     // Catch:{ Exception -> 0x01b9 }
            java.lang.String r4 = java.lang.String.format(r4, r5, r11)     // Catch:{ Exception -> 0x01b9 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r4)     // Catch:{ Exception -> 0x01b9 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x01b9 }
            r0.dispose()     // Catch:{ Exception -> 0x01b9 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x01b9 }
            java.util.Locale r4 = java.util.Locale.US     // Catch:{ Exception -> 0x01b9 }
            java.lang.String r5 = "DELETE FROM messages_seq WHERE mid = %d"
            r6 = 1
            java.lang.Object[] r11 = new java.lang.Object[r6]     // Catch:{ Exception -> 0x01b9 }
            java.lang.Long r6 = java.lang.Long.valueOf(r12)     // Catch:{ Exception -> 0x01b9 }
            r16 = 0
            r11[r16] = r6     // Catch:{ Exception -> 0x01b9 }
            java.lang.String r4 = java.lang.String.format(r4, r5, r11)     // Catch:{ Exception -> 0x01b9 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r4)     // Catch:{ Exception -> 0x01b9 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x01b9 }
            r0.dispose()     // Catch:{ Exception -> 0x01b9 }
            goto L_0x01bd
        L_0x01b5:
            r0 = move-exception
            r7 = r2
            goto L_0x0232
        L_0x01b9:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ all -> 0x01b5 }
        L_0x01bd:
            if (r2 == 0) goto L_0x01c3
        L_0x01bf:
            r2.dispose()
            r2 = r3
        L_0x01c3:
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x01da }
            java.lang.String r4 = "UPDATE media_v2 SET mid = ? WHERE mid = ?"
            org.telegram.SQLite.SQLitePreparedStatement r2 = r0.executeFast(r4)     // Catch:{ Exception -> 0x01da }
            r4 = 1
            r2.bindLong(r4, r14)     // Catch:{ Exception -> 0x01da }
            r2.bindLong(r9, r12)     // Catch:{ Exception -> 0x01da }
            r2.step()     // Catch:{ Exception -> 0x01da }
            if (r2 == 0) goto L_0x0205
            goto L_0x0201
        L_0x01d8:
            r0 = move-exception
            goto L_0x022c
        L_0x01da:
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x01fb }
            java.util.Locale r4 = java.util.Locale.US     // Catch:{ Exception -> 0x01fb }
            java.lang.String r5 = "DELETE FROM media_v2 WHERE mid = %d"
            r6 = 1
            java.lang.Object[] r11 = new java.lang.Object[r6]     // Catch:{ Exception -> 0x01fb }
            java.lang.Long r6 = java.lang.Long.valueOf(r12)     // Catch:{ Exception -> 0x01fb }
            r16 = 0
            r11[r16] = r6     // Catch:{ Exception -> 0x01fb }
            java.lang.String r4 = java.lang.String.format(r4, r5, r11)     // Catch:{ Exception -> 0x01fb }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r4)     // Catch:{ Exception -> 0x01fb }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x01fb }
            r0.dispose()     // Catch:{ Exception -> 0x01fb }
            goto L_0x01ff
        L_0x01fb:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ all -> 0x01d8 }
        L_0x01ff:
            if (r2 == 0) goto L_0x0205
        L_0x0201:
            r2.dispose()
            r2 = r3
        L_0x0205:
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x021c }
            java.lang.String r3 = "UPDATE dialogs SET last_mid = ? WHERE last_mid = ?"
            org.telegram.SQLite.SQLitePreparedStatement r2 = r0.executeFast(r3)     // Catch:{ Exception -> 0x021c }
            r3 = 1
            r2.bindLong(r3, r14)     // Catch:{ Exception -> 0x021c }
            r2.bindLong(r9, r12)     // Catch:{ Exception -> 0x021c }
            r2.step()     // Catch:{ Exception -> 0x021c }
            if (r2 == 0) goto L_0x0282
            goto L_0x0222
        L_0x021a:
            r0 = move-exception
            goto L_0x0226
        L_0x021c:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ all -> 0x021a }
            if (r2 == 0) goto L_0x0282
        L_0x0222:
            r2.dispose()
            goto L_0x0282
        L_0x0226:
            if (r2 == 0) goto L_0x022b
            r2.dispose()
        L_0x022b:
            throw r0
        L_0x022c:
            if (r2 == 0) goto L_0x0231
            r2.dispose()
        L_0x0231:
            throw r0
        L_0x0232:
            if (r7 == 0) goto L_0x0237
            r7.dispose()
        L_0x0237:
            throw r0
        L_0x0238:
            r2 = 1
            if (r4 != r2) goto L_0x0282
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0252 }
            java.lang.String r4 = "UPDATE scheduled_messages SET mid = ?, send_state = 0 WHERE mid = ?"
            org.telegram.SQLite.SQLitePreparedStatement r3 = r0.executeFast(r4)     // Catch:{ Exception -> 0x0252 }
            r3.bindLong(r2, r14)     // Catch:{ Exception -> 0x0252 }
            r3.bindLong(r9, r12)     // Catch:{ Exception -> 0x0252 }
            r3.step()     // Catch:{ Exception -> 0x0252 }
            if (r3 == 0) goto L_0x0282
            goto L_0x0278
        L_0x024f:
            r0 = move-exception
            r7 = r3
            goto L_0x027c
        L_0x0252:
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0272 }
            java.util.Locale r2 = java.util.Locale.US     // Catch:{ Exception -> 0x0272 }
            java.lang.String r4 = "DELETE FROM scheduled_messages WHERE mid = %d"
            r5 = 1
            java.lang.Object[] r6 = new java.lang.Object[r5]     // Catch:{ Exception -> 0x0272 }
            java.lang.Long r5 = java.lang.Long.valueOf(r12)     // Catch:{ Exception -> 0x0272 }
            r11 = 0
            r6[r11] = r5     // Catch:{ Exception -> 0x0272 }
            java.lang.String r2 = java.lang.String.format(r2, r4, r6)     // Catch:{ Exception -> 0x0272 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r2)     // Catch:{ Exception -> 0x0272 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0272 }
            r0.dispose()     // Catch:{ Exception -> 0x0272 }
            goto L_0x0276
        L_0x0272:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ all -> 0x024f }
        L_0x0276:
            if (r3 == 0) goto L_0x0282
        L_0x0278:
            r3.dispose()
            goto L_0x0282
        L_0x027c:
            if (r7 == 0) goto L_0x0281
            r7.dispose()
        L_0x0281:
            throw r0
        L_0x0282:
            long[] r0 = new long[r9]
            r2 = 0
            r0[r2] = r7
            int r2 = r10.intValue()
            long r2 = (long) r2
            r4 = 1
            r0[r4] = r2
            return r0
        L_0x0290:
            if (r11 == 0) goto L_0x0295
            r11.dispose()
        L_0x0295:
            throw r0
        L_0x0296:
            if (r11 == 0) goto L_0x029b
            r11.dispose()
        L_0x029b:
            throw r0
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$updateMessageStateAndId$138$MessagesStorage(long, java.lang.Integer, int, int, int, int):long[]");
    }

    public long[] updateMessageStateAndId(long j, Integer num, int i, int i2, boolean z, int i3, int i4) {
        if (z) {
            this.storageQueue.postRunnable(new Runnable(j, num, i, i2, i3, i4) {
                public final /* synthetic */ long f$1;
                public final /* synthetic */ Integer f$2;
                public final /* synthetic */ int f$3;
                public final /* synthetic */ int f$4;
                public final /* synthetic */ int f$5;
                public final /* synthetic */ int f$6;

                {
                    this.f$1 = r2;
                    this.f$2 = r4;
                    this.f$3 = r5;
                    this.f$4 = r6;
                    this.f$5 = r7;
                    this.f$6 = r8;
                }

                public final void run() {
                    MessagesStorage.this.lambda$updateMessageStateAndId$138$MessagesStorage(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
                }
            });
            return null;
        }
        return lambda$updateMessageStateAndId$138$MessagesStorage(j, num, i, i2, i3, i4);
    }

    /* access modifiers changed from: private */
    /* renamed from: updateUsersInternal */
    public void lambda$updateUsers$139$MessagesStorage(ArrayList<TLRPC$User> arrayList, boolean z, boolean z2) {
        if (z) {
            if (z2) {
                try {
                    this.database.beginTransaction();
                } catch (Exception e) {
                    FileLog.e((Throwable) e);
                    return;
                }
            }
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE users SET status = ? WHERE uid = ?");
            int size = arrayList.size();
            for (int i = 0; i < size; i++) {
                TLRPC$User tLRPC$User = arrayList.get(i);
                executeFast.requery();
                if (tLRPC$User.status != null) {
                    executeFast.bindInteger(1, tLRPC$User.status.expires);
                } else {
                    executeFast.bindInteger(1, 0);
                }
                executeFast.bindInteger(2, tLRPC$User.id);
                executeFast.step();
            }
            executeFast.dispose();
            if (z2) {
                this.database.commitTransaction();
                return;
            }
            return;
        }
        StringBuilder sb = new StringBuilder();
        SparseArray sparseArray = new SparseArray();
        int size2 = arrayList.size();
        for (int i2 = 0; i2 < size2; i2++) {
            TLRPC$User tLRPC$User2 = arrayList.get(i2);
            if (sb.length() != 0) {
                sb.append(",");
            }
            sb.append(tLRPC$User2.id);
            sparseArray.put(tLRPC$User2.id, tLRPC$User2);
        }
        ArrayList arrayList2 = new ArrayList();
        getUsersInternal(sb.toString(), arrayList2);
        int size3 = arrayList2.size();
        for (int i3 = 0; i3 < size3; i3++) {
            TLRPC$User tLRPC$User3 = (TLRPC$User) arrayList2.get(i3);
            TLRPC$User tLRPC$User4 = (TLRPC$User) sparseArray.get(tLRPC$User3.id);
            if (tLRPC$User4 != null) {
                if (tLRPC$User4.first_name != null && tLRPC$User4.last_name != null) {
                    if (!UserObject.isContact(tLRPC$User3)) {
                        tLRPC$User3.first_name = tLRPC$User4.first_name;
                        tLRPC$User3.last_name = tLRPC$User4.last_name;
                    }
                    tLRPC$User3.username = tLRPC$User4.username;
                } else if (tLRPC$User4.photo != null) {
                    tLRPC$User3.photo = tLRPC$User4.photo;
                } else if (tLRPC$User4.phone != null) {
                    tLRPC$User3.phone = tLRPC$User4.phone;
                }
            }
        }
        if (!arrayList2.isEmpty()) {
            if (z2) {
                this.database.beginTransaction();
            }
            putUsersInternal(arrayList2);
            if (z2) {
                this.database.commitTransaction();
            }
        }
    }

    public void updateUsers(ArrayList<TLRPC$User> arrayList, boolean z, boolean z2, boolean z3) {
        if (arrayList != null && !arrayList.isEmpty()) {
            if (z3) {
                this.storageQueue.postRunnable(new Runnable(arrayList, z, z2) {
                    public final /* synthetic */ ArrayList f$1;
                    public final /* synthetic */ boolean f$2;
                    public final /* synthetic */ boolean f$3;

                    {
                        this.f$1 = r2;
                        this.f$2 = r3;
                        this.f$3 = r4;
                    }

                    public final void run() {
                        MessagesStorage.this.lambda$updateUsers$139$MessagesStorage(this.f$1, this.f$2, this.f$3);
                    }
                });
            } else {
                lambda$updateUsers$139$MessagesStorage(arrayList, z, z2);
            }
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: markMessagesAsReadInternal */
    public void lambda$markMessagesAsRead$141$MessagesStorage(SparseLongArray sparseLongArray, SparseLongArray sparseLongArray2, SparseIntArray sparseIntArray) {
        SparseLongArray sparseLongArray3 = sparseLongArray;
        SparseLongArray sparseLongArray4 = sparseLongArray2;
        SparseIntArray sparseIntArray2 = sparseIntArray;
        try {
            if (!isEmpty(sparseLongArray)) {
                SQLitePreparedStatement executeFast = this.database.executeFast("DELETE FROM unread_push_messages WHERE uid = ? AND mid <= ?");
                for (int i = 0; i < sparseLongArray.size(); i++) {
                    int keyAt = sparseLongArray3.keyAt(i);
                    long j = sparseLongArray3.get(keyAt);
                    this.database.executeFast(String.format(Locale.US, "UPDATE messages SET read_state = read_state | 1 WHERE uid = %d AND mid > 0 AND mid <= %d AND read_state IN(0,2) AND out = 0", new Object[]{Integer.valueOf(keyAt), Long.valueOf(j)})).stepThis().dispose();
                    executeFast.requery();
                    executeFast.bindLong(1, (long) keyAt);
                    executeFast.bindLong(2, j);
                    executeFast.step();
                }
                executeFast.dispose();
            }
            if (!isEmpty(sparseLongArray2)) {
                for (int i2 = 0; i2 < sparseLongArray2.size(); i2++) {
                    int keyAt2 = sparseLongArray4.keyAt(i2);
                    long j2 = sparseLongArray4.get(keyAt2);
                    this.database.executeFast(String.format(Locale.US, "UPDATE messages SET read_state = read_state | 1 WHERE uid = %d AND mid > 0 AND mid <= %d AND read_state IN(0,2) AND out = 1", new Object[]{Integer.valueOf(keyAt2), Long.valueOf(j2)})).stepThis().dispose();
                }
            }
            if (sparseIntArray2 != null && !isEmpty(sparseIntArray)) {
                for (int i3 = 0; i3 < sparseIntArray.size(); i3++) {
                    int valueAt = sparseIntArray2.valueAt(i3);
                    SQLitePreparedStatement executeFast2 = this.database.executeFast("UPDATE messages SET read_state = read_state | 1 WHERE uid = ? AND date <= ? AND read_state IN(0,2) AND out = 1");
                    executeFast2.requery();
                    executeFast2.bindLong(1, ((long) sparseIntArray2.keyAt(i3)) << 32);
                    executeFast2.bindInteger(2, valueAt);
                    executeFast2.step();
                    executeFast2.dispose();
                }
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void markMessagesContentAsRead(ArrayList<Long> arrayList, int i) {
        if (!isEmpty((List<?>) arrayList)) {
            this.storageQueue.postRunnable(new Runnable(arrayList, i) {
                public final /* synthetic */ ArrayList f$1;
                public final /* synthetic */ int f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    MessagesStorage.this.lambda$markMessagesContentAsRead$140$MessagesStorage(this.f$1, this.f$2);
                }
            });
        }
    }

    public /* synthetic */ void lambda$markMessagesContentAsRead$140$MessagesStorage(ArrayList arrayList, int i) {
        try {
            String join = TextUtils.join(",", arrayList);
            this.database.executeFast(String.format(Locale.US, "UPDATE messages SET read_state = read_state | 2 WHERE mid IN (%s)", new Object[]{join})).stepThis().dispose();
            if (i != 0) {
                SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT mid, ttl FROM messages WHERE mid IN (%s) AND ttl > 0", new Object[]{join}), new Object[0]);
                ArrayList arrayList2 = null;
                while (queryFinalized.next()) {
                    if (arrayList2 == null) {
                        arrayList2 = new ArrayList();
                    }
                    arrayList2.add(Integer.valueOf(queryFinalized.intValue(0)));
                }
                if (arrayList2 != null) {
                    emptyMessagesMedia(arrayList2);
                }
                queryFinalized.dispose();
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void markMessagesAsRead(SparseLongArray sparseLongArray, SparseLongArray sparseLongArray2, SparseIntArray sparseIntArray, boolean z) {
        if (z) {
            this.storageQueue.postRunnable(new Runnable(sparseLongArray, sparseLongArray2, sparseIntArray) {
                public final /* synthetic */ SparseLongArray f$1;
                public final /* synthetic */ SparseLongArray f$2;
                public final /* synthetic */ SparseIntArray f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run() {
                    MessagesStorage.this.lambda$markMessagesAsRead$141$MessagesStorage(this.f$1, this.f$2, this.f$3);
                }
            });
        } else {
            lambda$markMessagesAsRead$141$MessagesStorage(sparseLongArray, sparseLongArray2, sparseIntArray);
        }
    }

    public void markMessagesAsDeletedByRandoms(ArrayList<Long> arrayList) {
        if (!arrayList.isEmpty()) {
            this.storageQueue.postRunnable(new Runnable(arrayList) {
                public final /* synthetic */ ArrayList f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesStorage.this.lambda$markMessagesAsDeletedByRandoms$143$MessagesStorage(this.f$1);
                }
            });
        }
    }

    public /* synthetic */ void lambda$markMessagesAsDeletedByRandoms$143$MessagesStorage(ArrayList arrayList) {
        try {
            String join = TextUtils.join(",", arrayList);
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT mid FROM randoms WHERE random_id IN(%s)", new Object[]{join}), new Object[0]);
            ArrayList arrayList2 = new ArrayList();
            while (queryFinalized.next()) {
                arrayList2.add(Integer.valueOf(queryFinalized.intValue(0)));
            }
            queryFinalized.dispose();
            if (!arrayList2.isEmpty()) {
                AndroidUtilities.runOnUIThread(new Runnable(arrayList2) {
                    public final /* synthetic */ ArrayList f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run() {
                        MessagesStorage.this.lambda$null$142$MessagesStorage(this.f$1);
                    }
                });
                updateDialogsWithReadMessagesInternal(arrayList2, (SparseLongArray) null, (SparseLongArray) null, (ArrayList<Long>) null);
                lambda$markMessagesAsDeleted$146$MessagesStorage(arrayList2, 0, true, false);
                lambda$updateDialogsWithDeletedMessages$145$MessagesStorage(arrayList2, (ArrayList<Long>) null, 0);
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public /* synthetic */ void lambda$null$142$MessagesStorage(ArrayList arrayList) {
        getNotificationCenter().postNotificationName(NotificationCenter.messagesDeleted, arrayList, 0, Boolean.FALSE);
    }

    /* access modifiers changed from: protected */
    public void deletePushMessages(long j, ArrayList<Integer> arrayList) {
        try {
            this.database.executeFast(String.format(Locale.US, "DELETE FROM unread_push_messages WHERE uid = %d AND mid IN(%s)", new Object[]{Long.valueOf(j), TextUtils.join(",", arrayList)})).stepThis().dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    private void broadcastScheduledMessagesChange(Long l) {
        try {
            int i = 0;
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT COUNT(mid) FROM scheduled_messages WHERE uid = %d", new Object[]{l}), new Object[0]);
            if (queryFinalized.next()) {
                i = queryFinalized.intValue(0);
            }
            queryFinalized.dispose();
            AndroidUtilities.runOnUIThread(new Runnable(l, i) {
                public final /* synthetic */ Long f$1;
                public final /* synthetic */ int f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    MessagesStorage.this.lambda$broadcastScheduledMessagesChange$144$MessagesStorage(this.f$1, this.f$2);
                }
            });
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public /* synthetic */ void lambda$broadcastScheduledMessagesChange$144$MessagesStorage(Long l, int i) {
        getNotificationCenter().postNotificationName(NotificationCenter.scheduledMessagesUpdated, l, Integer.valueOf(i));
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r6v21, resolved type: java.lang.Object} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r10v5, resolved type: java.lang.Integer} */
    /* access modifiers changed from: private */
    /* JADX WARNING: Multi-variable type inference failed */
    /* renamed from: markMessagesAsDeletedInternal */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public java.util.ArrayList<java.lang.Long> lambda$markMessagesAsDeleted$146$MessagesStorage(java.util.ArrayList<java.lang.Integer> r22, int r23, boolean r24, boolean r25) {
        /*
            r21 = this;
            r1 = r21
            r2 = r22
            r3 = r23
            java.util.ArrayList r5 = new java.util.ArrayList     // Catch:{ Exception -> 0x0441 }
            r5.<init>()     // Catch:{ Exception -> 0x0441 }
            r0 = 44
            r6 = 32
            java.lang.String r7 = ","
            r8 = 1
            r9 = 0
            if (r25 == 0) goto L_0x00b9
            if (r3 == 0) goto L_0x0049
            java.lang.StringBuilder r7 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0441 }
            int r10 = r22.size()     // Catch:{ Exception -> 0x0441 }
            r7.<init>(r10)     // Catch:{ Exception -> 0x0441 }
            r10 = 0
        L_0x0021:
            int r11 = r22.size()     // Catch:{ Exception -> 0x0441 }
            if (r10 >= r11) goto L_0x0044
            java.lang.Object r11 = r2.get(r10)     // Catch:{ Exception -> 0x0441 }
            java.lang.Integer r11 = (java.lang.Integer) r11     // Catch:{ Exception -> 0x0441 }
            int r11 = r11.intValue()     // Catch:{ Exception -> 0x0441 }
            long r11 = (long) r11     // Catch:{ Exception -> 0x0441 }
            long r13 = (long) r3     // Catch:{ Exception -> 0x0441 }
            long r13 = r13 << r6
            long r11 = r11 | r13
            int r13 = r7.length()     // Catch:{ Exception -> 0x0441 }
            if (r13 <= 0) goto L_0x003e
            r7.append(r0)     // Catch:{ Exception -> 0x0441 }
        L_0x003e:
            r7.append(r11)     // Catch:{ Exception -> 0x0441 }
            int r10 = r10 + 1
            goto L_0x0021
        L_0x0044:
            java.lang.String r0 = r7.toString()     // Catch:{ Exception -> 0x0441 }
            goto L_0x004d
        L_0x0049:
            java.lang.String r0 = android.text.TextUtils.join(r7, r2)     // Catch:{ Exception -> 0x0441 }
        L_0x004d:
            r2 = r0
            java.util.ArrayList r3 = new java.util.ArrayList     // Catch:{ Exception -> 0x0441 }
            r3.<init>()     // Catch:{ Exception -> 0x0441 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0441 }
            java.util.Locale r6 = java.util.Locale.US     // Catch:{ Exception -> 0x0441 }
            java.lang.String r7 = "SELECT uid FROM scheduled_messages WHERE mid IN(%s)"
            java.lang.Object[] r10 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x0441 }
            r10[r9] = r2     // Catch:{ Exception -> 0x0441 }
            java.lang.String r6 = java.lang.String.format(r6, r7, r10)     // Catch:{ Exception -> 0x0441 }
            java.lang.Object[] r7 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x0441 }
            org.telegram.SQLite.SQLiteCursor r6 = r0.queryFinalized(r6, r7)     // Catch:{ Exception -> 0x0441 }
        L_0x0067:
            boolean r0 = r6.next()     // Catch:{ Exception -> 0x0083 }
            if (r0 == 0) goto L_0x0087
            long r10 = r6.longValue(r9)     // Catch:{ Exception -> 0x0083 }
            java.lang.Long r0 = java.lang.Long.valueOf(r10)     // Catch:{ Exception -> 0x0083 }
            boolean r0 = r3.contains(r0)     // Catch:{ Exception -> 0x0083 }
            if (r0 != 0) goto L_0x0067
            java.lang.Long r0 = java.lang.Long.valueOf(r10)     // Catch:{ Exception -> 0x0083 }
            r3.add(r0)     // Catch:{ Exception -> 0x0083 }
            goto L_0x0067
        L_0x0083:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ Exception -> 0x0441 }
        L_0x0087:
            r6.dispose()     // Catch:{ Exception -> 0x0441 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0441 }
            java.util.Locale r6 = java.util.Locale.US     // Catch:{ Exception -> 0x0441 }
            java.lang.String r7 = "DELETE FROM scheduled_messages WHERE mid IN(%s)"
            java.lang.Object[] r8 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x0441 }
            r8[r9] = r2     // Catch:{ Exception -> 0x0441 }
            java.lang.String r2 = java.lang.String.format(r6, r7, r8)     // Catch:{ Exception -> 0x0441 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r2)     // Catch:{ Exception -> 0x0441 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0441 }
            r0.dispose()     // Catch:{ Exception -> 0x0441 }
            int r0 = r3.size()     // Catch:{ Exception -> 0x0441 }
        L_0x00a7:
            if (r9 >= r0) goto L_0x00b5
            java.lang.Object r2 = r3.get(r9)     // Catch:{ Exception -> 0x0441 }
            java.lang.Long r2 = (java.lang.Long) r2     // Catch:{ Exception -> 0x0441 }
            r1.broadcastScheduledMessagesChange(r2)     // Catch:{ Exception -> 0x0441 }
            int r9 = r9 + 1
            goto L_0x00a7
        L_0x00b5:
            r17 = r5
            goto L_0x0440
        L_0x00b9:
            java.util.ArrayList r10 = new java.util.ArrayList     // Catch:{ Exception -> 0x0441 }
            r10.<init>(r2)     // Catch:{ Exception -> 0x0441 }
            android.util.LongSparseArray r11 = new android.util.LongSparseArray     // Catch:{ Exception -> 0x0441 }
            r11.<init>()     // Catch:{ Exception -> 0x0441 }
            if (r3 == 0) goto L_0x00fd
            java.lang.StringBuilder r7 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0441 }
            int r12 = r22.size()     // Catch:{ Exception -> 0x0441 }
            r7.<init>(r12)     // Catch:{ Exception -> 0x0441 }
            r12 = 0
        L_0x00cf:
            int r13 = r22.size()     // Catch:{ Exception -> 0x0441 }
            if (r12 >= r13) goto L_0x00f6
            java.lang.Object r13 = r2.get(r12)     // Catch:{ Exception -> 0x0441 }
            java.lang.Integer r13 = (java.lang.Integer) r13     // Catch:{ Exception -> 0x0441 }
            int r13 = r13.intValue()     // Catch:{ Exception -> 0x0441 }
            long r13 = (long) r13     // Catch:{ Exception -> 0x0441 }
            r16 = r5
            long r4 = (long) r3     // Catch:{ Exception -> 0x0441 }
            long r4 = r4 << r6
            long r4 = r4 | r13
            int r13 = r7.length()     // Catch:{ Exception -> 0x0441 }
            if (r13 <= 0) goto L_0x00ee
            r7.append(r0)     // Catch:{ Exception -> 0x0441 }
        L_0x00ee:
            r7.append(r4)     // Catch:{ Exception -> 0x0441 }
            int r12 = r12 + 1
            r5 = r16
            goto L_0x00cf
        L_0x00f6:
            r16 = r5
            java.lang.String r0 = r7.toString()     // Catch:{ Exception -> 0x0441 }
            goto L_0x0103
        L_0x00fd:
            r16 = r5
            java.lang.String r0 = android.text.TextUtils.join(r7, r2)     // Catch:{ Exception -> 0x0441 }
        L_0x0103:
            r4 = r0
            java.util.ArrayList r5 = new java.util.ArrayList     // Catch:{ Exception -> 0x0441 }
            r5.<init>()     // Catch:{ Exception -> 0x0441 }
            java.util.ArrayList r6 = new java.util.ArrayList     // Catch:{ Exception -> 0x0441 }
            r6.<init>()     // Catch:{ Exception -> 0x0441 }
            org.telegram.messenger.UserConfig r0 = r21.getUserConfig()     // Catch:{ Exception -> 0x0441 }
            int r0 = r0.getClientUserId()     // Catch:{ Exception -> 0x0441 }
            org.telegram.SQLite.SQLiteDatabase r7 = r1.database     // Catch:{ Exception -> 0x0441 }
            java.util.Locale r12 = java.util.Locale.US     // Catch:{ Exception -> 0x0441 }
            java.lang.String r13 = "SELECT uid, data, read_state, out, mention, mid FROM messages WHERE mid IN(%s)"
            java.lang.Object[] r14 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x0441 }
            r14[r9] = r4     // Catch:{ Exception -> 0x0441 }
            java.lang.String r12 = java.lang.String.format(r12, r13, r14)     // Catch:{ Exception -> 0x0441 }
            java.lang.Object[] r13 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x0441 }
            org.telegram.SQLite.SQLiteCursor r7 = r7.queryFinalized(r12, r13)     // Catch:{ Exception -> 0x0441 }
        L_0x012a:
            boolean r14 = r7.next()     // Catch:{ Exception -> 0x01c7 }
            if (r14 == 0) goto L_0x01cb
            long r12 = r7.longValue(r9)     // Catch:{ Exception -> 0x01c7 }
            r14 = 5
            int r14 = r7.intValue(r14)     // Catch:{ Exception -> 0x01c7 }
            java.lang.Integer r14 = java.lang.Integer.valueOf(r14)     // Catch:{ Exception -> 0x01c7 }
            r10.remove(r14)     // Catch:{ Exception -> 0x01c7 }
            long r8 = (long) r0     // Catch:{ Exception -> 0x01c7 }
            int r14 = (r12 > r8 ? 1 : (r12 == r8 ? 0 : -1))
            if (r14 == 0) goto L_0x019f
            r8 = 2
            int r9 = r7.intValue(r8)     // Catch:{ Exception -> 0x01c7 }
            r14 = 3
            int r17 = r7.intValue(r14)     // Catch:{ Exception -> 0x01c7 }
            if (r17 != 0) goto L_0x019f
            java.lang.Object r14 = r11.get(r12)     // Catch:{ Exception -> 0x01c7 }
            r17 = r14
            java.lang.Integer[] r17 = (java.lang.Integer[]) r17     // Catch:{ Exception -> 0x01c7 }
            if (r17 != 0) goto L_0x0174
            java.lang.Integer[] r14 = new java.lang.Integer[r8]     // Catch:{ Exception -> 0x01c7 }
            r8 = r14
            r17 = 0
            java.lang.Integer r19 = java.lang.Integer.valueOf(r17)     // Catch:{ Exception -> 0x01c7 }
            r8[r17] = r19     // Catch:{ Exception -> 0x01c7 }
            java.lang.Integer r20 = java.lang.Integer.valueOf(r17)     // Catch:{ Exception -> 0x01c7 }
            r17 = 1
            r8[r17] = r20     // Catch:{ Exception -> 0x01c7 }
            r11.put(r12, r8)     // Catch:{ Exception -> 0x01c7 }
            r17 = r8
            r8 = 2
        L_0x0174:
            if (r9 >= r8) goto L_0x0187
            r8 = 1
            r18 = r17[r8]     // Catch:{ Exception -> 0x01c7 }
            r18 = r17[r8]     // Catch:{ Exception -> 0x01c7 }
            int r18 = r18.intValue()     // Catch:{ Exception -> 0x01c7 }
            int r18 = r18 + 1
            java.lang.Integer r18 = java.lang.Integer.valueOf(r18)     // Catch:{ Exception -> 0x01c7 }
            r17[r8] = r18     // Catch:{ Exception -> 0x01c7 }
        L_0x0187:
            if (r9 == 0) goto L_0x018c
            r8 = 2
            if (r9 != r8) goto L_0x019f
        L_0x018c:
            r8 = 0
            r9 = r17[r8]     // Catch:{ Exception -> 0x01c7 }
            r9 = r17[r8]     // Catch:{ Exception -> 0x01c7 }
            int r9 = r9.intValue()     // Catch:{ Exception -> 0x01c7 }
            r18 = 1
            int r9 = r9 + 1
            java.lang.Integer r9 = java.lang.Integer.valueOf(r9)     // Catch:{ Exception -> 0x01c7 }
            r17[r8] = r9     // Catch:{ Exception -> 0x01c7 }
        L_0x019f:
            int r8 = (int) r12     // Catch:{ Exception -> 0x01c7 }
            if (r8 == 0) goto L_0x01a7
            if (r24 != 0) goto L_0x01a7
        L_0x01a4:
            r8 = 1
            r9 = 0
            goto L_0x012a
        L_0x01a7:
            r8 = 1
            org.telegram.tgnet.NativeByteBuffer r9 = r7.byteBufferValue(r8)     // Catch:{ Exception -> 0x01c7 }
            if (r9 == 0) goto L_0x01a4
            r8 = 0
            int r12 = r9.readInt32(r8)     // Catch:{ Exception -> 0x01c7 }
            org.telegram.tgnet.TLRPC$Message r12 = org.telegram.tgnet.TLRPC$Message.TLdeserialize(r9, r12, r8)     // Catch:{ Exception -> 0x01c7 }
            org.telegram.messenger.UserConfig r13 = r21.getUserConfig()     // Catch:{ Exception -> 0x01c7 }
            int r13 = r13.clientUserId     // Catch:{ Exception -> 0x01c7 }
            r12.readAttachPath(r9, r13)     // Catch:{ Exception -> 0x01c7 }
            r9.reuse()     // Catch:{ Exception -> 0x01c7 }
            r1.addFilesToDelete(r12, r5, r6, r8)     // Catch:{ Exception -> 0x01c7 }
            goto L_0x01a4
        L_0x01c7:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ Exception -> 0x0441 }
        L_0x01cb:
            r7.dispose()     // Catch:{ Exception -> 0x0441 }
            r7 = 1
            r1.deleteFromDownloadQueue(r6, r7)     // Catch:{ Exception -> 0x0441 }
            org.telegram.messenger.FileLoader r0 = r21.getFileLoader()     // Catch:{ Exception -> 0x0441 }
            r6 = 0
            r0.deleteFiles(r5, r6)     // Catch:{ Exception -> 0x0441 }
            r0 = 0
        L_0x01db:
            int r5 = r11.size()     // Catch:{ Exception -> 0x0441 }
            if (r0 >= r5) goto L_0x025e
            long r5 = r11.keyAt(r0)     // Catch:{ Exception -> 0x0441 }
            java.lang.Object r7 = r11.valueAt(r0)     // Catch:{ Exception -> 0x0441 }
            java.lang.Integer[] r7 = (java.lang.Integer[]) r7     // Catch:{ Exception -> 0x0441 }
            org.telegram.SQLite.SQLiteDatabase r8 = r1.database     // Catch:{ Exception -> 0x0441 }
            java.lang.StringBuilder r9 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0441 }
            r9.<init>()     // Catch:{ Exception -> 0x0441 }
            java.lang.String r12 = "SELECT unread_count, unread_count_i FROM dialogs WHERE did = "
            r9.append(r12)     // Catch:{ Exception -> 0x0441 }
            r9.append(r5)     // Catch:{ Exception -> 0x0441 }
            java.lang.String r9 = r9.toString()     // Catch:{ Exception -> 0x0441 }
            r12 = 0
            java.lang.Object[] r13 = new java.lang.Object[r12]     // Catch:{ Exception -> 0x0441 }
            org.telegram.SQLite.SQLiteCursor r8 = r8.queryFinalized(r9, r13)     // Catch:{ Exception -> 0x0441 }
            boolean r9 = r8.next()     // Catch:{ Exception -> 0x0441 }
            if (r9 == 0) goto L_0x0215
            int r9 = r8.intValue(r12)     // Catch:{ Exception -> 0x0441 }
            r12 = 1
            int r13 = r8.intValue(r12)     // Catch:{ Exception -> 0x0441 }
            goto L_0x0217
        L_0x0215:
            r9 = 0
            r13 = 0
        L_0x0217:
            r8.dispose()     // Catch:{ Exception -> 0x0441 }
            java.lang.Long r8 = java.lang.Long.valueOf(r5)     // Catch:{ Exception -> 0x0441 }
            r12 = r16
            r12.add(r8)     // Catch:{ Exception -> 0x0441 }
            org.telegram.SQLite.SQLiteDatabase r8 = r1.database     // Catch:{ Exception -> 0x0441 }
            java.lang.String r14 = "UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?"
            org.telegram.SQLite.SQLitePreparedStatement r8 = r8.executeFast(r14)     // Catch:{ Exception -> 0x0441 }
            r8.requery()     // Catch:{ Exception -> 0x0441 }
            r14 = 0
            r16 = r7[r14]     // Catch:{ Exception -> 0x0441 }
            int r16 = r16.intValue()     // Catch:{ Exception -> 0x0441 }
            int r9 = r9 - r16
            int r9 = java.lang.Math.max(r14, r9)     // Catch:{ Exception -> 0x0441 }
            r15 = 1
            r8.bindInteger(r15, r9)     // Catch:{ Exception -> 0x0441 }
            r7 = r7[r15]     // Catch:{ Exception -> 0x0441 }
            int r7 = r7.intValue()     // Catch:{ Exception -> 0x0441 }
            int r13 = r13 - r7
            int r7 = java.lang.Math.max(r14, r13)     // Catch:{ Exception -> 0x0441 }
            r9 = 2
            r8.bindInteger(r9, r7)     // Catch:{ Exception -> 0x0441 }
            r7 = 3
            r8.bindLong(r7, r5)     // Catch:{ Exception -> 0x0441 }
            r8.step()     // Catch:{ Exception -> 0x0441 }
            r8.dispose()     // Catch:{ Exception -> 0x0441 }
            int r0 = r0 + 1
            r16 = r12
            goto L_0x01db
        L_0x025e:
            r12 = r16
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0441 }
            java.util.Locale r5 = java.util.Locale.US     // Catch:{ Exception -> 0x0441 }
            java.lang.String r6 = "DELETE FROM messages WHERE mid IN(%s)"
            r7 = 1
            java.lang.Object[] r8 = new java.lang.Object[r7]     // Catch:{ Exception -> 0x0441 }
            r7 = 0
            r8[r7] = r4     // Catch:{ Exception -> 0x0441 }
            java.lang.String r5 = java.lang.String.format(r5, r6, r8)     // Catch:{ Exception -> 0x0441 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r5)     // Catch:{ Exception -> 0x0441 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0441 }
            r0.dispose()     // Catch:{ Exception -> 0x0441 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0441 }
            java.util.Locale r5 = java.util.Locale.US     // Catch:{ Exception -> 0x0441 }
            java.lang.String r6 = "DELETE FROM polls WHERE mid IN(%s)"
            r7 = 1
            java.lang.Object[] r8 = new java.lang.Object[r7]     // Catch:{ Exception -> 0x0441 }
            r7 = 0
            r8[r7] = r4     // Catch:{ Exception -> 0x0441 }
            java.lang.String r5 = java.lang.String.format(r5, r6, r8)     // Catch:{ Exception -> 0x0441 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r5)     // Catch:{ Exception -> 0x0441 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0441 }
            r0.dispose()     // Catch:{ Exception -> 0x0441 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0441 }
            java.util.Locale r5 = java.util.Locale.US     // Catch:{ Exception -> 0x0441 }
            java.lang.String r6 = "DELETE FROM bot_keyboard WHERE mid IN(%s)"
            r7 = 1
            java.lang.Object[] r8 = new java.lang.Object[r7]     // Catch:{ Exception -> 0x0441 }
            r7 = 0
            r8[r7] = r4     // Catch:{ Exception -> 0x0441 }
            java.lang.String r5 = java.lang.String.format(r5, r6, r8)     // Catch:{ Exception -> 0x0441 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r5)     // Catch:{ Exception -> 0x0441 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0441 }
            r0.dispose()     // Catch:{ Exception -> 0x0441 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0441 }
            java.util.Locale r5 = java.util.Locale.US     // Catch:{ Exception -> 0x0441 }
            java.lang.String r6 = "DELETE FROM messages_seq WHERE mid IN(%s)"
            r7 = 1
            java.lang.Object[] r8 = new java.lang.Object[r7]     // Catch:{ Exception -> 0x0441 }
            r7 = 0
            r8[r7] = r4     // Catch:{ Exception -> 0x0441 }
            java.lang.String r5 = java.lang.String.format(r5, r6, r8)     // Catch:{ Exception -> 0x0441 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r5)     // Catch:{ Exception -> 0x0441 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0441 }
            r0.dispose()     // Catch:{ Exception -> 0x0441 }
            boolean r0 = r10.isEmpty()     // Catch:{ Exception -> 0x0441 }
            if (r0 == 0) goto L_0x03de
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0441 }
            java.util.Locale r3 = java.util.Locale.US     // Catch:{ Exception -> 0x0441 }
            java.lang.String r5 = "SELECT uid, type FROM media_v2 WHERE mid IN(%s)"
            r6 = 1
            java.lang.Object[] r7 = new java.lang.Object[r6]     // Catch:{ Exception -> 0x0441 }
            r6 = 0
            r7[r6] = r4     // Catch:{ Exception -> 0x0441 }
            java.lang.String r3 = java.lang.String.format(r3, r5, r7)     // Catch:{ Exception -> 0x0441 }
            java.lang.Object[] r5 = new java.lang.Object[r6]     // Catch:{ Exception -> 0x0441 }
            org.telegram.SQLite.SQLiteCursor r0 = r0.queryFinalized(r3, r5)     // Catch:{ Exception -> 0x0441 }
            r3 = 0
        L_0x02e9:
            boolean r5 = r0.next()     // Catch:{ Exception -> 0x0441 }
            if (r5 == 0) goto L_0x0332
            long r7 = r0.longValue(r6)     // Catch:{ Exception -> 0x0441 }
            r5 = 1
            int r6 = r0.intValue(r5)     // Catch:{ Exception -> 0x0441 }
            if (r3 != 0) goto L_0x02ff
            android.util.SparseArray r3 = new android.util.SparseArray     // Catch:{ Exception -> 0x0441 }
            r3.<init>()     // Catch:{ Exception -> 0x0441 }
        L_0x02ff:
            java.lang.Object r5 = r3.get(r6)     // Catch:{ Exception -> 0x0441 }
            android.util.LongSparseArray r5 = (android.util.LongSparseArray) r5     // Catch:{ Exception -> 0x0441 }
            if (r5 != 0) goto L_0x0315
            android.util.LongSparseArray r5 = new android.util.LongSparseArray     // Catch:{ Exception -> 0x0441 }
            r5.<init>()     // Catch:{ Exception -> 0x0441 }
            r9 = 0
            java.lang.Integer r10 = java.lang.Integer.valueOf(r9)     // Catch:{ Exception -> 0x0441 }
            r3.put(r6, r5)     // Catch:{ Exception -> 0x0441 }
            goto L_0x031c
        L_0x0315:
            java.lang.Object r6 = r5.get(r7)     // Catch:{ Exception -> 0x0441 }
            r10 = r6
            java.lang.Integer r10 = (java.lang.Integer) r10     // Catch:{ Exception -> 0x0441 }
        L_0x031c:
            if (r10 != 0) goto L_0x0323
            r6 = 0
            java.lang.Integer r10 = java.lang.Integer.valueOf(r6)     // Catch:{ Exception -> 0x0441 }
        L_0x0323:
            int r6 = r10.intValue()     // Catch:{ Exception -> 0x0441 }
            r9 = 1
            int r6 = r6 + r9
            java.lang.Integer r6 = java.lang.Integer.valueOf(r6)     // Catch:{ Exception -> 0x0441 }
            r5.put(r7, r6)     // Catch:{ Exception -> 0x0441 }
            r6 = 0
            goto L_0x02e9
        L_0x0332:
            r0.dispose()     // Catch:{ Exception -> 0x0441 }
            if (r3 == 0) goto L_0x03db
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0441 }
            java.lang.String r5 = "REPLACE INTO media_counts_v2 VALUES(?, ?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r5)     // Catch:{ Exception -> 0x0441 }
            r5 = 0
        L_0x0340:
            int r6 = r3.size()     // Catch:{ Exception -> 0x0441 }
            if (r5 >= r6) goto L_0x03d5
            int r6 = r3.keyAt(r5)     // Catch:{ Exception -> 0x0441 }
            java.lang.Object r7 = r3.valueAt(r5)     // Catch:{ Exception -> 0x0441 }
            android.util.LongSparseArray r7 = (android.util.LongSparseArray) r7     // Catch:{ Exception -> 0x0441 }
            r8 = 0
        L_0x0351:
            int r9 = r7.size()     // Catch:{ Exception -> 0x0441 }
            if (r8 >= r9) goto L_0x03c9
            long r9 = r7.keyAt(r8)     // Catch:{ Exception -> 0x0441 }
            org.telegram.SQLite.SQLiteDatabase r13 = r1.database     // Catch:{ Exception -> 0x0441 }
            java.util.Locale r15 = java.util.Locale.US     // Catch:{ Exception -> 0x0441 }
            java.lang.String r14 = "SELECT count, old FROM media_counts_v2 WHERE uid = %d AND type = %d LIMIT 1"
            r23 = r3
            r17 = r12
            r3 = 2
            java.lang.Object[] r12 = new java.lang.Object[r3]     // Catch:{ Exception -> 0x0441 }
            java.lang.Long r20 = java.lang.Long.valueOf(r9)     // Catch:{ Exception -> 0x0441 }
            r3 = 0
            r12[r3] = r20     // Catch:{ Exception -> 0x0441 }
            java.lang.Integer r19 = java.lang.Integer.valueOf(r6)     // Catch:{ Exception -> 0x0441 }
            r18 = 1
            r12[r18] = r19     // Catch:{ Exception -> 0x0441 }
            java.lang.String r12 = java.lang.String.format(r15, r14, r12)     // Catch:{ Exception -> 0x0441 }
            java.lang.Object[] r14 = new java.lang.Object[r3]     // Catch:{ Exception -> 0x0441 }
            org.telegram.SQLite.SQLiteCursor r12 = r13.queryFinalized(r12, r14)     // Catch:{ Exception -> 0x0441 }
            boolean r13 = r12.next()     // Catch:{ Exception -> 0x0441 }
            r14 = -1
            if (r13 == 0) goto L_0x0392
            int r13 = r12.intValue(r3)     // Catch:{ Exception -> 0x0441 }
            r3 = 1
            int r15 = r12.intValue(r3)     // Catch:{ Exception -> 0x0441 }
            goto L_0x0394
        L_0x0392:
            r13 = -1
            r15 = 0
        L_0x0394:
            r12.dispose()     // Catch:{ Exception -> 0x0441 }
            if (r13 == r14) goto L_0x03c0
            r0.requery()     // Catch:{ Exception -> 0x0441 }
            java.lang.Object r3 = r7.valueAt(r8)     // Catch:{ Exception -> 0x0441 }
            java.lang.Integer r3 = (java.lang.Integer) r3     // Catch:{ Exception -> 0x0441 }
            int r3 = r3.intValue()     // Catch:{ Exception -> 0x0441 }
            int r13 = r13 - r3
            r3 = 0
            int r12 = java.lang.Math.max(r3, r13)     // Catch:{ Exception -> 0x0441 }
            r3 = 1
            r0.bindLong(r3, r9)     // Catch:{ Exception -> 0x0441 }
            r3 = 2
            r0.bindInteger(r3, r6)     // Catch:{ Exception -> 0x0441 }
            r9 = 3
            r0.bindInteger(r9, r12)     // Catch:{ Exception -> 0x0441 }
            r10 = 4
            r0.bindInteger(r10, r15)     // Catch:{ Exception -> 0x0441 }
            r0.step()     // Catch:{ Exception -> 0x0441 }
            goto L_0x03c2
        L_0x03c0:
            r3 = 2
            r9 = 3
        L_0x03c2:
            int r8 = r8 + 1
            r3 = r23
            r12 = r17
            goto L_0x0351
        L_0x03c9:
            r23 = r3
            r17 = r12
            r3 = 2
            r9 = 3
            int r5 = r5 + 1
            r3 = r23
            goto L_0x0340
        L_0x03d5:
            r17 = r12
            r0.dispose()     // Catch:{ Exception -> 0x0441 }
            goto L_0x0412
        L_0x03db:
            r17 = r12
            goto L_0x0412
        L_0x03de:
            r17 = r12
            if (r3 != 0) goto L_0x03f2
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0441 }
            java.lang.String r3 = "UPDATE media_counts_v2 SET old = 1 WHERE 1"
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r3)     // Catch:{ Exception -> 0x0441 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0441 }
            r0.dispose()     // Catch:{ Exception -> 0x0441 }
            goto L_0x0412
        L_0x03f2:
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0441 }
            java.util.Locale r5 = java.util.Locale.US     // Catch:{ Exception -> 0x0441 }
            java.lang.String r6 = "UPDATE media_counts_v2 SET old = 1 WHERE uid = %d"
            r7 = 1
            java.lang.Object[] r8 = new java.lang.Object[r7]     // Catch:{ Exception -> 0x0441 }
            int r3 = -r3
            java.lang.Integer r3 = java.lang.Integer.valueOf(r3)     // Catch:{ Exception -> 0x0441 }
            r7 = 0
            r8[r7] = r3     // Catch:{ Exception -> 0x0441 }
            java.lang.String r3 = java.lang.String.format(r5, r6, r8)     // Catch:{ Exception -> 0x0441 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r3)     // Catch:{ Exception -> 0x0441 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0441 }
            r0.dispose()     // Catch:{ Exception -> 0x0441 }
        L_0x0412:
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0441 }
            java.util.Locale r3 = java.util.Locale.US     // Catch:{ Exception -> 0x0441 }
            java.lang.String r5 = "DELETE FROM media_v2 WHERE mid IN(%s)"
            r6 = 1
            java.lang.Object[] r6 = new java.lang.Object[r6]     // Catch:{ Exception -> 0x0441 }
            r7 = 0
            r6[r7] = r4     // Catch:{ Exception -> 0x0441 }
            java.lang.String r3 = java.lang.String.format(r3, r5, r6)     // Catch:{ Exception -> 0x0441 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r3)     // Catch:{ Exception -> 0x0441 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x0441 }
            r0.dispose()     // Catch:{ Exception -> 0x0441 }
            org.telegram.messenger.MediaDataController r0 = r21.getMediaDataController()     // Catch:{ Exception -> 0x0441 }
            r3 = 0
            r0.clearBotKeyboard(r3, r2)     // Catch:{ Exception -> 0x0441 }
            int r0 = r11.size()     // Catch:{ Exception -> 0x0441 }
            if (r0 == 0) goto L_0x0440
            r2 = 0
            r1.resetAllUnreadCounters(r2)     // Catch:{ Exception -> 0x0441 }
        L_0x0440:
            return r17
        L_0x0441:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
            r2 = 0
            return r2
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$markMessagesAsDeleted$146$MessagesStorage(java.util.ArrayList, int, boolean, boolean):java.util.ArrayList");
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v5, resolved type: org.telegram.tgnet.TLRPC$TL_dialog} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v15, resolved type: org.telegram.tgnet.TLRPC$TL_dialogFolder} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v16, resolved type: org.telegram.tgnet.TLRPC$TL_dialog} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v17, resolved type: org.telegram.tgnet.TLRPC$TL_dialog} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v18, resolved type: org.telegram.tgnet.TLRPC$TL_dialog} */
    /* access modifiers changed from: private */
    /* JADX WARNING: Multi-variable type inference failed */
    /* renamed from: updateDialogsWithDeletedMessagesInternal */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void lambda$updateDialogsWithDeletedMessages$145$MessagesStorage(java.util.ArrayList<java.lang.Integer> r18, java.util.ArrayList<java.lang.Long> r19, int r20) {
        /*
            r17 = this;
            r1 = r17
            r0 = r19
            r2 = r20
            java.util.ArrayList r3 = new java.util.ArrayList     // Catch:{ Exception -> 0x026b }
            r3.<init>()     // Catch:{ Exception -> 0x026b }
            boolean r4 = r18.isEmpty()     // Catch:{ Exception -> 0x026b }
            r5 = 3
            r6 = 2
            java.lang.String r7 = ","
            r8 = 1
            r9 = 0
            if (r4 != 0) goto L_0x0093
            if (r2 == 0) goto L_0x002b
            int r4 = -r2
            long r10 = (long) r4
            java.lang.Long r4 = java.lang.Long.valueOf(r10)     // Catch:{ Exception -> 0x026b }
            r3.add(r4)     // Catch:{ Exception -> 0x026b }
            org.telegram.SQLite.SQLiteDatabase r4 = r1.database     // Catch:{ Exception -> 0x026b }
            java.lang.String r10 = "UPDATE dialogs SET last_mid = (SELECT mid FROM messages WHERE uid = ? AND date = (SELECT MAX(date) FROM messages WHERE uid = ?)) WHERE did = ?"
            org.telegram.SQLite.SQLitePreparedStatement r4 = r4.executeFast(r10)     // Catch:{ Exception -> 0x026b }
            goto L_0x0062
        L_0x002b:
            r4 = r18
            java.lang.String r4 = android.text.TextUtils.join(r7, r4)     // Catch:{ Exception -> 0x026b }
            org.telegram.SQLite.SQLiteDatabase r10 = r1.database     // Catch:{ Exception -> 0x026b }
            java.util.Locale r11 = java.util.Locale.US     // Catch:{ Exception -> 0x026b }
            java.lang.String r12 = "SELECT did FROM dialogs WHERE last_mid IN(%s)"
            java.lang.Object[] r13 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x026b }
            r13[r9] = r4     // Catch:{ Exception -> 0x026b }
            java.lang.String r4 = java.lang.String.format(r11, r12, r13)     // Catch:{ Exception -> 0x026b }
            java.lang.Object[] r11 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x026b }
            org.telegram.SQLite.SQLiteCursor r4 = r10.queryFinalized(r4, r11)     // Catch:{ Exception -> 0x026b }
        L_0x0045:
            boolean r10 = r4.next()     // Catch:{ Exception -> 0x026b }
            if (r10 == 0) goto L_0x0057
            long r10 = r4.longValue(r9)     // Catch:{ Exception -> 0x026b }
            java.lang.Long r10 = java.lang.Long.valueOf(r10)     // Catch:{ Exception -> 0x026b }
            r3.add(r10)     // Catch:{ Exception -> 0x026b }
            goto L_0x0045
        L_0x0057:
            r4.dispose()     // Catch:{ Exception -> 0x026b }
            org.telegram.SQLite.SQLiteDatabase r4 = r1.database     // Catch:{ Exception -> 0x026b }
            java.lang.String r10 = "UPDATE dialogs SET last_mid = (SELECT mid FROM messages WHERE uid = ? AND date = (SELECT MAX(date) FROM messages WHERE uid = ? AND date != 0)) WHERE did = ?"
            org.telegram.SQLite.SQLitePreparedStatement r4 = r4.executeFast(r10)     // Catch:{ Exception -> 0x026b }
        L_0x0062:
            org.telegram.SQLite.SQLiteDatabase r10 = r1.database     // Catch:{ Exception -> 0x026b }
            r10.beginTransaction()     // Catch:{ Exception -> 0x026b }
            r10 = 0
        L_0x0068:
            int r11 = r3.size()     // Catch:{ Exception -> 0x026b }
            if (r10 >= r11) goto L_0x008a
            java.lang.Object r11 = r3.get(r10)     // Catch:{ Exception -> 0x026b }
            java.lang.Long r11 = (java.lang.Long) r11     // Catch:{ Exception -> 0x026b }
            long r11 = r11.longValue()     // Catch:{ Exception -> 0x026b }
            r4.requery()     // Catch:{ Exception -> 0x026b }
            r4.bindLong(r8, r11)     // Catch:{ Exception -> 0x026b }
            r4.bindLong(r6, r11)     // Catch:{ Exception -> 0x026b }
            r4.bindLong(r5, r11)     // Catch:{ Exception -> 0x026b }
            r4.step()     // Catch:{ Exception -> 0x026b }
            int r10 = r10 + 1
            goto L_0x0068
        L_0x008a:
            r4.dispose()     // Catch:{ Exception -> 0x026b }
            org.telegram.SQLite.SQLiteDatabase r4 = r1.database     // Catch:{ Exception -> 0x026b }
            r4.commitTransaction()     // Catch:{ Exception -> 0x026b }
            goto L_0x009c
        L_0x0093:
            int r4 = -r2
            long r10 = (long) r4     // Catch:{ Exception -> 0x026b }
            java.lang.Long r4 = java.lang.Long.valueOf(r10)     // Catch:{ Exception -> 0x026b }
            r3.add(r4)     // Catch:{ Exception -> 0x026b }
        L_0x009c:
            if (r0 == 0) goto L_0x00b7
            r4 = 0
        L_0x009f:
            int r10 = r19.size()     // Catch:{ Exception -> 0x026b }
            if (r4 >= r10) goto L_0x00b7
            java.lang.Object r10 = r0.get(r4)     // Catch:{ Exception -> 0x026b }
            java.lang.Long r10 = (java.lang.Long) r10     // Catch:{ Exception -> 0x026b }
            boolean r11 = r3.contains(r10)     // Catch:{ Exception -> 0x026b }
            if (r11 != 0) goto L_0x00b4
            r3.add(r10)     // Catch:{ Exception -> 0x026b }
        L_0x00b4:
            int r4 = r4 + 1
            goto L_0x009f
        L_0x00b7:
            java.lang.String r0 = android.text.TextUtils.join(r7, r3)     // Catch:{ Exception -> 0x026b }
            org.telegram.tgnet.TLRPC$TL_messages_dialogs r3 = new org.telegram.tgnet.TLRPC$TL_messages_dialogs     // Catch:{ Exception -> 0x026b }
            r3.<init>()     // Catch:{ Exception -> 0x026b }
            java.util.ArrayList r4 = new java.util.ArrayList     // Catch:{ Exception -> 0x026b }
            r4.<init>()     // Catch:{ Exception -> 0x026b }
            java.util.ArrayList r10 = new java.util.ArrayList     // Catch:{ Exception -> 0x026b }
            r10.<init>()     // Catch:{ Exception -> 0x026b }
            java.util.ArrayList r11 = new java.util.ArrayList     // Catch:{ Exception -> 0x026b }
            r11.<init>()     // Catch:{ Exception -> 0x026b }
            java.util.ArrayList r12 = new java.util.ArrayList     // Catch:{ Exception -> 0x026b }
            r12.<init>()     // Catch:{ Exception -> 0x026b }
            org.telegram.SQLite.SQLiteDatabase r13 = r1.database     // Catch:{ Exception -> 0x026b }
            java.util.Locale r14 = java.util.Locale.US     // Catch:{ Exception -> 0x026b }
            java.lang.String r15 = "SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, m.date, d.pts, d.inbox_max, d.outbox_max, d.pinned, d.unread_count_i, d.flags, d.folder_id, d.data FROM dialogs as d LEFT JOIN messages as m ON d.last_mid = m.mid WHERE d.did IN(%s)"
            java.lang.Object[] r5 = new java.lang.Object[r8]     // Catch:{ Exception -> 0x026b }
            r5[r9] = r0     // Catch:{ Exception -> 0x026b }
            java.lang.String r0 = java.lang.String.format(r14, r15, r5)     // Catch:{ Exception -> 0x026b }
            java.lang.Object[] r5 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x026b }
            org.telegram.SQLite.SQLiteCursor r0 = r13.queryFinalized(r0, r5)     // Catch:{ Exception -> 0x026b }
        L_0x00e8:
            boolean r5 = r0.next()     // Catch:{ Exception -> 0x026b }
            if (r5 == 0) goto L_0x0227
            long r13 = r0.longValue(r9)     // Catch:{ Exception -> 0x026b }
            boolean r5 = org.telegram.messenger.DialogObject.isFolderDialogId(r13)     // Catch:{ Exception -> 0x026b }
            r15 = 15
            if (r5 == 0) goto L_0x0129
            org.telegram.tgnet.TLRPC$TL_dialogFolder r5 = new org.telegram.tgnet.TLRPC$TL_dialogFolder     // Catch:{ Exception -> 0x026b }
            r5.<init>()     // Catch:{ Exception -> 0x026b }
            r6 = 16
            boolean r16 = r0.isNull(r6)     // Catch:{ Exception -> 0x026b }
            if (r16 != 0) goto L_0x012e
            org.telegram.tgnet.NativeByteBuffer r6 = r0.byteBufferValue(r6)     // Catch:{ Exception -> 0x026b }
            if (r6 == 0) goto L_0x0118
            int r8 = r6.readInt32(r9)     // Catch:{ Exception -> 0x026b }
            org.telegram.tgnet.TLRPC$TL_folder r8 = org.telegram.tgnet.TLRPC$TL_folder.TLdeserialize(r6, r8, r9)     // Catch:{ Exception -> 0x026b }
            r5.folder = r8     // Catch:{ Exception -> 0x026b }
            goto L_0x0125
        L_0x0118:
            org.telegram.tgnet.TLRPC$TL_folder r8 = new org.telegram.tgnet.TLRPC$TL_folder     // Catch:{ Exception -> 0x026b }
            r8.<init>()     // Catch:{ Exception -> 0x026b }
            r5.folder = r8     // Catch:{ Exception -> 0x026b }
            int r9 = r0.intValue(r15)     // Catch:{ Exception -> 0x026b }
            r8.id = r9     // Catch:{ Exception -> 0x026b }
        L_0x0125:
            r6.reuse()     // Catch:{ Exception -> 0x026b }
            goto L_0x012e
        L_0x0129:
            org.telegram.tgnet.TLRPC$TL_dialog r5 = new org.telegram.tgnet.TLRPC$TL_dialog     // Catch:{ Exception -> 0x026b }
            r5.<init>()     // Catch:{ Exception -> 0x026b }
        L_0x012e:
            r5.id = r13     // Catch:{ Exception -> 0x026b }
            r6 = 1
            int r8 = r0.intValue(r6)     // Catch:{ Exception -> 0x026b }
            r5.top_message = r8     // Catch:{ Exception -> 0x026b }
            r6 = 10
            int r6 = r0.intValue(r6)     // Catch:{ Exception -> 0x026b }
            r5.read_inbox_max_id = r6     // Catch:{ Exception -> 0x026b }
            r6 = 11
            int r6 = r0.intValue(r6)     // Catch:{ Exception -> 0x026b }
            r5.read_outbox_max_id = r6     // Catch:{ Exception -> 0x026b }
            r6 = 2
            int r8 = r0.intValue(r6)     // Catch:{ Exception -> 0x026b }
            r5.unread_count = r8     // Catch:{ Exception -> 0x026b }
            r8 = 13
            int r8 = r0.intValue(r8)     // Catch:{ Exception -> 0x026b }
            r5.unread_mentions_count = r8     // Catch:{ Exception -> 0x026b }
            r8 = 3
            int r9 = r0.intValue(r8)     // Catch:{ Exception -> 0x026b }
            r5.last_message_date = r9     // Catch:{ Exception -> 0x026b }
            r9 = 9
            int r9 = r0.intValue(r9)     // Catch:{ Exception -> 0x026b }
            r5.pts = r9     // Catch:{ Exception -> 0x026b }
            if (r2 != 0) goto L_0x0169
            r9 = 0
            goto L_0x016a
        L_0x0169:
            r9 = 1
        L_0x016a:
            r5.flags = r9     // Catch:{ Exception -> 0x026b }
            r9 = 12
            int r9 = r0.intValue(r9)     // Catch:{ Exception -> 0x026b }
            r5.pinnedNum = r9     // Catch:{ Exception -> 0x026b }
            if (r9 == 0) goto L_0x0178
            r9 = 1
            goto L_0x0179
        L_0x0178:
            r9 = 0
        L_0x0179:
            r5.pinned = r9     // Catch:{ Exception -> 0x026b }
            r9 = 14
            int r9 = r0.intValue(r9)     // Catch:{ Exception -> 0x026b }
            r13 = 1
            r9 = r9 & r13
            if (r9 == 0) goto L_0x0187
            r9 = 1
            goto L_0x0188
        L_0x0187:
            r9 = 0
        L_0x0188:
            r5.unread_mark = r9     // Catch:{ Exception -> 0x026b }
            int r9 = r0.intValue(r15)     // Catch:{ Exception -> 0x026b }
            r5.folder_id = r9     // Catch:{ Exception -> 0x026b }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r9 = r3.dialogs     // Catch:{ Exception -> 0x026b }
            r9.add(r5)     // Catch:{ Exception -> 0x026b }
            r9 = 4
            org.telegram.tgnet.NativeByteBuffer r9 = r0.byteBufferValue(r9)     // Catch:{ Exception -> 0x026b }
            if (r9 == 0) goto L_0x01de
            r14 = 0
            int r15 = r9.readInt32(r14)     // Catch:{ Exception -> 0x026b }
            org.telegram.tgnet.TLRPC$Message r15 = org.telegram.tgnet.TLRPC$Message.TLdeserialize(r9, r15, r14)     // Catch:{ Exception -> 0x026b }
            org.telegram.messenger.UserConfig r6 = r17.getUserConfig()     // Catch:{ Exception -> 0x026b }
            int r6 = r6.clientUserId     // Catch:{ Exception -> 0x026b }
            r15.readAttachPath(r9, r6)     // Catch:{ Exception -> 0x026b }
            r9.reuse()     // Catch:{ Exception -> 0x026b }
            r6 = 5
            int r6 = r0.intValue(r6)     // Catch:{ Exception -> 0x026b }
            org.telegram.messenger.MessageObject.setUnreadFlags(r15, r6)     // Catch:{ Exception -> 0x026b }
            r6 = 6
            int r6 = r0.intValue(r6)     // Catch:{ Exception -> 0x026b }
            r15.id = r6     // Catch:{ Exception -> 0x026b }
            r6 = 7
            int r6 = r0.intValue(r6)     // Catch:{ Exception -> 0x026b }
            r15.send_state = r6     // Catch:{ Exception -> 0x026b }
            r6 = 8
            int r6 = r0.intValue(r6)     // Catch:{ Exception -> 0x026b }
            if (r6 == 0) goto L_0x01d1
            r5.last_message_date = r6     // Catch:{ Exception -> 0x026b }
        L_0x01d1:
            long r8 = r5.id     // Catch:{ Exception -> 0x026b }
            r15.dialog_id = r8     // Catch:{ Exception -> 0x026b }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r6 = r3.messages     // Catch:{ Exception -> 0x026b }
            r6.add(r15)     // Catch:{ Exception -> 0x026b }
            addUsersAndChatsFromMessage(r15, r10, r11)     // Catch:{ Exception -> 0x026b }
            goto L_0x01df
        L_0x01de:
            r14 = 0
        L_0x01df:
            long r8 = r5.id     // Catch:{ Exception -> 0x026b }
            int r6 = (int) r8     // Catch:{ Exception -> 0x026b }
            long r8 = r5.id     // Catch:{ Exception -> 0x026b }
            r5 = 32
            long r8 = r8 >> r5
            int r5 = (int) r8     // Catch:{ Exception -> 0x026b }
            if (r6 == 0) goto L_0x0211
            if (r6 <= 0) goto L_0x01fe
            java.lang.Integer r5 = java.lang.Integer.valueOf(r6)     // Catch:{ Exception -> 0x026b }
            boolean r5 = r10.contains(r5)     // Catch:{ Exception -> 0x026b }
            if (r5 != 0) goto L_0x0222
            java.lang.Integer r5 = java.lang.Integer.valueOf(r6)     // Catch:{ Exception -> 0x026b }
            r10.add(r5)     // Catch:{ Exception -> 0x026b }
            goto L_0x0222
        L_0x01fe:
            int r5 = -r6
            java.lang.Integer r6 = java.lang.Integer.valueOf(r5)     // Catch:{ Exception -> 0x026b }
            boolean r6 = r11.contains(r6)     // Catch:{ Exception -> 0x026b }
            if (r6 != 0) goto L_0x0222
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)     // Catch:{ Exception -> 0x026b }
            r11.add(r5)     // Catch:{ Exception -> 0x026b }
            goto L_0x0222
        L_0x0211:
            java.lang.Integer r6 = java.lang.Integer.valueOf(r5)     // Catch:{ Exception -> 0x026b }
            boolean r6 = r12.contains(r6)     // Catch:{ Exception -> 0x026b }
            if (r6 != 0) goto L_0x0222
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)     // Catch:{ Exception -> 0x026b }
            r12.add(r5)     // Catch:{ Exception -> 0x026b }
        L_0x0222:
            r6 = 2
            r8 = 1
            r9 = 0
            goto L_0x00e8
        L_0x0227:
            r0.dispose()     // Catch:{ Exception -> 0x026b }
            boolean r0 = r12.isEmpty()     // Catch:{ Exception -> 0x026b }
            if (r0 != 0) goto L_0x0237
            java.lang.String r0 = android.text.TextUtils.join(r7, r12)     // Catch:{ Exception -> 0x026b }
            r1.getEncryptedChatsInternal(r0, r4, r10)     // Catch:{ Exception -> 0x026b }
        L_0x0237:
            boolean r0 = r11.isEmpty()     // Catch:{ Exception -> 0x026b }
            if (r0 != 0) goto L_0x0246
            java.lang.String r0 = android.text.TextUtils.join(r7, r11)     // Catch:{ Exception -> 0x026b }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r2 = r3.chats     // Catch:{ Exception -> 0x026b }
            r1.getChatsInternal(r0, r2)     // Catch:{ Exception -> 0x026b }
        L_0x0246:
            boolean r0 = r10.isEmpty()     // Catch:{ Exception -> 0x026b }
            if (r0 != 0) goto L_0x0255
            java.lang.String r0 = android.text.TextUtils.join(r7, r10)     // Catch:{ Exception -> 0x026b }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r3.users     // Catch:{ Exception -> 0x026b }
            r1.getUsersInternal(r0, r2)     // Catch:{ Exception -> 0x026b }
        L_0x0255:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r0 = r3.dialogs     // Catch:{ Exception -> 0x026b }
            boolean r0 = r0.isEmpty()     // Catch:{ Exception -> 0x026b }
            if (r0 == 0) goto L_0x0263
            boolean r0 = r4.isEmpty()     // Catch:{ Exception -> 0x026b }
            if (r0 != 0) goto L_0x026f
        L_0x0263:
            org.telegram.messenger.MessagesController r0 = r17.getMessagesController()     // Catch:{ Exception -> 0x026b }
            r0.processDialogsUpdate(r3, r4)     // Catch:{ Exception -> 0x026b }
            goto L_0x026f
        L_0x026b:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
        L_0x026f:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$updateDialogsWithDeletedMessages$145$MessagesStorage(java.util.ArrayList, java.util.ArrayList, int):void");
    }

    public void updateDialogsWithDeletedMessages(ArrayList<Integer> arrayList, ArrayList<Long> arrayList2, boolean z, int i) {
        if (arrayList.isEmpty() && i == 0) {
            return;
        }
        if (z) {
            this.storageQueue.postRunnable(new Runnable(arrayList, arrayList2, i) {
                public final /* synthetic */ ArrayList f$1;
                public final /* synthetic */ ArrayList f$2;
                public final /* synthetic */ int f$3;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                }

                public final void run() {
                    MessagesStorage.this.lambda$updateDialogsWithDeletedMessages$145$MessagesStorage(this.f$1, this.f$2, this.f$3);
                }
            });
        } else {
            lambda$updateDialogsWithDeletedMessages$145$MessagesStorage(arrayList, arrayList2, i);
        }
    }

    public ArrayList<Long> markMessagesAsDeleted(ArrayList<Integer> arrayList, boolean z, int i, boolean z2, boolean z3) {
        if (arrayList.isEmpty()) {
            return null;
        }
        if (!z) {
            return lambda$markMessagesAsDeleted$146$MessagesStorage(arrayList, i, z2, z3);
        }
        this.storageQueue.postRunnable(new Runnable(arrayList, i, z2, z3) {
            public final /* synthetic */ ArrayList f$1;
            public final /* synthetic */ int f$2;
            public final /* synthetic */ boolean f$3;
            public final /* synthetic */ boolean f$4;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
                this.f$4 = r5;
            }

            public final void run() {
                MessagesStorage.this.lambda$markMessagesAsDeleted$146$MessagesStorage(this.f$1, this.f$2, this.f$3, this.f$4);
            }
        });
        return null;
    }

    /* access modifiers changed from: private */
    /* renamed from: markMessagesAsDeletedInternal */
    public ArrayList<Long> lambda$markMessagesAsDeleted$147$MessagesStorage(int i, int i2, boolean z) {
        int i3;
        int i4;
        NativeByteBuffer byteBufferValue;
        int i5 = i;
        try {
            ArrayList<Long> arrayList = new ArrayList<>();
            LongSparseArray longSparseArray = new LongSparseArray();
            long j = ((long) i2) | (((long) i5) << 32);
            ArrayList arrayList2 = new ArrayList();
            ArrayList arrayList3 = new ArrayList();
            int clientUserId = getUserConfig().getClientUserId();
            int i6 = -i5;
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT uid, data, read_state, out, mention FROM messages WHERE uid = %d AND mid <= %d", new Object[]{Integer.valueOf(i6), Long.valueOf(j)}), new Object[0]);
            while (queryFinalized.next()) {
                try {
                    long longValue = queryFinalized.longValue(0);
                    if (longValue != ((long) clientUserId)) {
                        int i7 = 2;
                        int intValue = queryFinalized.intValue(2);
                        if (queryFinalized.intValue(3) == 0) {
                            Integer[] numArr = (Integer[]) longSparseArray.get(longValue);
                            if (numArr == null) {
                                numArr = new Integer[]{0, 0};
                                longSparseArray.put(longValue, numArr);
                                i7 = 2;
                            }
                            if (intValue < i7) {
                                Integer num = numArr[1];
                                numArr[1] = Integer.valueOf(numArr[1].intValue() + 1);
                            }
                            if (intValue == 0 || intValue == 2) {
                                Integer num2 = numArr[0];
                                numArr[0] = Integer.valueOf(numArr[0].intValue() + 1);
                            }
                        }
                    }
                    if ((((int) longValue) == 0 || z) && (byteBufferValue = queryFinalized.byteBufferValue(1)) != null) {
                        TLRPC$Message TLdeserialize = TLRPC$Message.TLdeserialize(byteBufferValue, byteBufferValue.readInt32(false), false);
                        TLdeserialize.readAttachPath(byteBufferValue, getUserConfig().clientUserId);
                        byteBufferValue.reuse();
                        addFilesToDelete(TLdeserialize, arrayList2, arrayList3, false);
                    }
                } catch (Exception e) {
                    FileLog.e((Throwable) e);
                }
            }
            queryFinalized.dispose();
            deleteFromDownloadQueue(arrayList3, true);
            getFileLoader().deleteFiles(arrayList2, 0);
            for (int i8 = 0; i8 < longSparseArray.size(); i8++) {
                long keyAt = longSparseArray.keyAt(i8);
                Integer[] numArr2 = (Integer[]) longSparseArray.valueAt(i8);
                SQLiteDatabase sQLiteDatabase = this.database;
                SQLiteCursor queryFinalized2 = sQLiteDatabase.queryFinalized("SELECT unread_count, unread_count_i FROM dialogs WHERE did = " + keyAt, new Object[0]);
                if (queryFinalized2.next()) {
                    i4 = queryFinalized2.intValue(0);
                    i3 = queryFinalized2.intValue(1);
                } else {
                    i4 = 0;
                    i3 = 0;
                }
                queryFinalized2.dispose();
                arrayList.add(Long.valueOf(keyAt));
                SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE dialogs SET unread_count = ?, unread_count_i = ? WHERE did = ?");
                executeFast.requery();
                executeFast.bindInteger(1, Math.max(0, i4 - numArr2[0].intValue()));
                executeFast.bindInteger(2, Math.max(0, i3 - numArr2[1].intValue()));
                executeFast.bindLong(3, keyAt);
                executeFast.step();
                executeFast.dispose();
            }
            this.database.executeFast(String.format(Locale.US, "DELETE FROM messages WHERE uid = %d AND mid <= %d", new Object[]{Integer.valueOf(i6), Long.valueOf(j)})).stepThis().dispose();
            this.database.executeFast(String.format(Locale.US, "DELETE FROM media_v2 WHERE uid = %d AND mid <= %d", new Object[]{Integer.valueOf(i6), Long.valueOf(j)})).stepThis().dispose();
            this.database.executeFast(String.format(Locale.US, "UPDATE media_counts_v2 SET old = 1 WHERE uid = %d", new Object[]{Integer.valueOf(i6)})).stepThis().dispose();
            return arrayList;
        } catch (Exception e2) {
            FileLog.e((Throwable) e2);
            return null;
        }
    }

    public ArrayList<Long> markMessagesAsDeleted(int i, int i2, boolean z, boolean z2) {
        if (!z) {
            return lambda$markMessagesAsDeleted$147$MessagesStorage(i, i2, z2);
        }
        this.storageQueue.postRunnable(new Runnable(i, i2, z2) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ int f$2;
            public final /* synthetic */ boolean f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesStorage.this.lambda$markMessagesAsDeleted$147$MessagesStorage(this.f$1, this.f$2, this.f$3);
            }
        });
        return null;
    }

    private void fixUnsupportedMedia(TLRPC$Message tLRPC$Message) {
        if (tLRPC$Message != null) {
            TLRPC$MessageMedia tLRPC$MessageMedia = tLRPC$Message.media;
            if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaUnsupported_old) {
                if (tLRPC$MessageMedia.bytes.length == 0) {
                    byte[] bArr = new byte[1];
                    tLRPC$MessageMedia.bytes = bArr;
                    bArr[0] = 116;
                }
            } else if (tLRPC$MessageMedia instanceof TLRPC$TL_messageMediaUnsupported) {
                TLRPC$TL_messageMediaUnsupported_old tLRPC$TL_messageMediaUnsupported_old = new TLRPC$TL_messageMediaUnsupported_old();
                tLRPC$Message.media = tLRPC$TL_messageMediaUnsupported_old;
                byte[] bArr2 = new byte[1];
                tLRPC$TL_messageMediaUnsupported_old.bytes = bArr2;
                bArr2[0] = 116;
                tLRPC$Message.flags |= 512;
            }
        }
    }

    private void doneHolesInTable(String str, long j, int i) throws Exception {
        if (i == 0) {
            SQLiteDatabase sQLiteDatabase = this.database;
            Locale locale = Locale.US;
            sQLiteDatabase.executeFast(String.format(locale, "DELETE FROM " + str + " WHERE uid = %d", new Object[]{Long.valueOf(j)})).stepThis().dispose();
        } else {
            SQLiteDatabase sQLiteDatabase2 = this.database;
            Locale locale2 = Locale.US;
            sQLiteDatabase2.executeFast(String.format(locale2, "DELETE FROM " + str + " WHERE uid = %d AND start = 0", new Object[]{Long.valueOf(j)})).stepThis().dispose();
        }
        SQLiteDatabase sQLiteDatabase3 = this.database;
        SQLitePreparedStatement executeFast = sQLiteDatabase3.executeFast("REPLACE INTO " + str + " VALUES(?, ?, ?)");
        executeFast.requery();
        executeFast.bindLong(1, j);
        executeFast.bindInteger(2, 1);
        executeFast.bindInteger(3, 1);
        executeFast.step();
        executeFast.dispose();
    }

    public void doneHolesInMedia(long j, int i, int i2) throws Exception {
        if (i2 == -1) {
            if (i == 0) {
                this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_v2 WHERE uid = %d", new Object[]{Long.valueOf(j)})).stepThis().dispose();
            } else {
                this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_v2 WHERE uid = %d AND start = 0", new Object[]{Long.valueOf(j)})).stepThis().dispose();
            }
            SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
            for (int i3 = 0; i3 < 6; i3++) {
                executeFast.requery();
                executeFast.bindLong(1, j);
                executeFast.bindInteger(2, i3);
                executeFast.bindInteger(3, 1);
                executeFast.bindInteger(4, 1);
                executeFast.step();
            }
            executeFast.dispose();
            return;
        }
        if (i == 0) {
            this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_v2 WHERE uid = %d AND type = %d", new Object[]{Long.valueOf(j), Integer.valueOf(i2)})).stepThis().dispose();
        } else {
            this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_v2 WHERE uid = %d AND type = %d AND start = 0", new Object[]{Long.valueOf(j), Integer.valueOf(i2)})).stepThis().dispose();
        }
        SQLitePreparedStatement executeFast2 = this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
        executeFast2.requery();
        executeFast2.bindLong(1, j);
        executeFast2.bindInteger(2, i2);
        executeFast2.bindInteger(3, 1);
        executeFast2.bindInteger(4, 1);
        executeFast2.step();
        executeFast2.dispose();
    }

    private static class Hole {
        public int end;
        public int start;
        public int type;

        public Hole(int i, int i2) {
            this.start = i;
            this.end = i2;
        }

        public Hole(int i, int i2, int i3) {
            this.type = i;
            this.start = i2;
            this.end = i3;
        }
    }

    public void closeHolesInMedia(long j, int i, int i2, int i3) {
        SQLiteCursor sQLiteCursor;
        long j2 = j;
        int i4 = i;
        int i5 = i2;
        int i6 = 4;
        if (i3 < 0) {
            try {
                sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT type, start, end FROM media_holes_v2 WHERE uid = %d AND type >= 0 AND ((end >= %d AND end <= %d) OR (start >= %d AND start <= %d) OR (start >= %d AND end <= %d) OR (start <= %d AND end >= %d))", new Object[]{Long.valueOf(j), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2)}), new Object[0]);
            } catch (Exception e) {
                FileLog.e((Throwable) e);
                return;
            }
        } else {
            sQLiteCursor = this.database.queryFinalized(String.format(Locale.US, "SELECT type, start, end FROM media_holes_v2 WHERE uid = %d AND type = %d AND ((end >= %d AND end <= %d) OR (start >= %d AND start <= %d) OR (start >= %d AND end <= %d) OR (start <= %d AND end >= %d))", new Object[]{Long.valueOf(j), Integer.valueOf(i3), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2)}), new Object[0]);
        }
        ArrayList arrayList = null;
        while (sQLiteCursor.next()) {
            if (arrayList == null) {
                arrayList = new ArrayList();
            }
            int intValue = sQLiteCursor.intValue(0);
            int intValue2 = sQLiteCursor.intValue(1);
            int intValue3 = sQLiteCursor.intValue(2);
            if (intValue2 != intValue3 || intValue2 != 1) {
                arrayList.add(new Hole(intValue, intValue2, intValue3));
            }
        }
        sQLiteCursor.dispose();
        if (arrayList != null) {
            int i7 = 0;
            while (i7 < arrayList.size()) {
                Hole hole = (Hole) arrayList.get(i7);
                if (i5 >= hole.end - 1) {
                    if (i4 <= hole.start + 1) {
                        SQLiteDatabase sQLiteDatabase = this.database;
                        Locale locale = Locale.US;
                        Object[] objArr = new Object[i6];
                        objArr[0] = Long.valueOf(j);
                        objArr[1] = Integer.valueOf(hole.type);
                        objArr[2] = Integer.valueOf(hole.start);
                        objArr[3] = Integer.valueOf(hole.end);
                        sQLiteDatabase.executeFast(String.format(locale, "DELETE FROM media_holes_v2 WHERE uid = %d AND type = %d AND start = %d AND end = %d", objArr)).stepThis().dispose();
                        i6 = 4;
                        i7++;
                    }
                }
                if (i5 >= hole.end - 1) {
                    if (hole.end != i4) {
                        try {
                            this.database.executeFast(String.format(Locale.US, "UPDATE media_holes_v2 SET end = %d WHERE uid = %d AND type = %d AND start = %d AND end = %d", new Object[]{Integer.valueOf(i), Long.valueOf(j), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end)})).stepThis().dispose();
                        } catch (Exception e2) {
                            FileLog.e((Throwable) e2);
                        }
                    }
                    i6 = 4;
                    i7++;
                } else if (i4 <= hole.start + 1) {
                    if (hole.start != i5) {
                        try {
                            this.database.executeFast(String.format(Locale.US, "UPDATE media_holes_v2 SET start = %d WHERE uid = %d AND type = %d AND start = %d AND end = %d", new Object[]{Integer.valueOf(i2), Long.valueOf(j), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end)})).stepThis().dispose();
                        } catch (Exception e3) {
                            FileLog.e((Throwable) e3);
                        }
                    }
                    i6 = 4;
                    i7++;
                } else {
                    this.database.executeFast(String.format(Locale.US, "DELETE FROM media_holes_v2 WHERE uid = %d AND type = %d AND start = %d AND end = %d", new Object[]{Long.valueOf(j), Integer.valueOf(hole.type), Integer.valueOf(hole.start), Integer.valueOf(hole.end)})).stepThis().dispose();
                    SQLitePreparedStatement executeFast = this.database.executeFast("REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)");
                    executeFast.requery();
                    executeFast.bindLong(1, j2);
                    executeFast.bindInteger(2, hole.type);
                    executeFast.bindInteger(3, hole.start);
                    executeFast.bindInteger(4, i4);
                    executeFast.step();
                    executeFast.requery();
                    executeFast.bindLong(1, j2);
                    executeFast.bindInteger(2, hole.type);
                    executeFast.bindInteger(3, i5);
                    i6 = 4;
                    executeFast.bindInteger(4, hole.end);
                    executeFast.step();
                    executeFast.dispose();
                    i7++;
                }
            }
        }
    }

    private void closeHolesInTable(String str, long j, int i, int i2) {
        String str2 = str;
        long j2 = j;
        int i3 = i;
        int i4 = i2;
        try {
            SQLiteDatabase sQLiteDatabase = this.database;
            Locale locale = Locale.US;
            int i5 = 1;
            SQLiteCursor queryFinalized = sQLiteDatabase.queryFinalized(String.format(locale, "SELECT start, end FROM " + str2 + " WHERE uid = %d AND ((end >= %d AND end <= %d) OR (start >= %d AND start <= %d) OR (start >= %d AND end <= %d) OR (start <= %d AND end >= %d))", new Object[]{Long.valueOf(j), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2), Integer.valueOf(i), Integer.valueOf(i2)}), new Object[0]);
            ArrayList arrayList = null;
            while (queryFinalized.next()) {
                if (arrayList == null) {
                    arrayList = new ArrayList();
                }
                int intValue = queryFinalized.intValue(0);
                int intValue2 = queryFinalized.intValue(1);
                if (intValue != intValue2 || intValue != 1) {
                    arrayList.add(new Hole(intValue, intValue2));
                }
            }
            queryFinalized.dispose();
            if (arrayList != null) {
                int i6 = 0;
                while (i6 < arrayList.size()) {
                    Hole hole = (Hole) arrayList.get(i6);
                    if (i4 >= hole.end - i5) {
                        if (i3 <= hole.start + i5) {
                            SQLiteDatabase sQLiteDatabase2 = this.database;
                            Locale locale2 = Locale.US;
                            sQLiteDatabase2.executeFast(String.format(locale2, "DELETE FROM " + str2 + " WHERE uid = %d AND start = %d AND end = %d", new Object[]{Long.valueOf(j), Integer.valueOf(hole.start), Integer.valueOf(hole.end)})).stepThis().dispose();
                            i6++;
                            i5 = 1;
                        }
                    }
                    if (i4 >= hole.end - 1) {
                        if (hole.end != i3) {
                            try {
                                SQLiteDatabase sQLiteDatabase3 = this.database;
                                Locale locale3 = Locale.US;
                                sQLiteDatabase3.executeFast(String.format(locale3, "UPDATE " + str2 + " SET end = %d WHERE uid = %d AND start = %d AND end = %d", new Object[]{Integer.valueOf(i), Long.valueOf(j), Integer.valueOf(hole.start), Integer.valueOf(hole.end)})).stepThis().dispose();
                            } catch (Exception e) {
                                FileLog.e((Throwable) e);
                            }
                        }
                        i6++;
                        i5 = 1;
                    } else if (i3 <= hole.start + 1) {
                        if (hole.start != i4) {
                            try {
                                SQLiteDatabase sQLiteDatabase4 = this.database;
                                Locale locale4 = Locale.US;
                                sQLiteDatabase4.executeFast(String.format(locale4, "UPDATE " + str2 + " SET start = %d WHERE uid = %d AND start = %d AND end = %d", new Object[]{Integer.valueOf(i2), Long.valueOf(j), Integer.valueOf(hole.start), Integer.valueOf(hole.end)})).stepThis().dispose();
                            } catch (Exception e2) {
                                FileLog.e((Throwable) e2);
                            }
                        }
                        i6++;
                        i5 = 1;
                    } else {
                        SQLiteDatabase sQLiteDatabase5 = this.database;
                        Locale locale5 = Locale.US;
                        sQLiteDatabase5.executeFast(String.format(locale5, "DELETE FROM " + str2 + " WHERE uid = %d AND start = %d AND end = %d", new Object[]{Long.valueOf(j), Integer.valueOf(hole.start), Integer.valueOf(hole.end)})).stepThis().dispose();
                        SQLiteDatabase sQLiteDatabase6 = this.database;
                        SQLitePreparedStatement executeFast = sQLiteDatabase6.executeFast("REPLACE INTO " + str2 + " VALUES(?, ?, ?)");
                        executeFast.requery();
                        executeFast.bindLong(1, j2);
                        executeFast.bindInteger(2, hole.start);
                        executeFast.bindInteger(3, i3);
                        executeFast.step();
                        executeFast.requery();
                        executeFast.bindLong(1, j2);
                        executeFast.bindInteger(2, i4);
                        executeFast.bindInteger(3, hole.end);
                        executeFast.step();
                        executeFast.dispose();
                        i6++;
                        i5 = 1;
                    }
                }
            }
        } catch (Exception e3) {
            FileLog.e((Throwable) e3);
        }
    }

    public void replaceMessageIfExists(TLRPC$Message tLRPC$Message, ArrayList<TLRPC$User> arrayList, ArrayList<TLRPC$Chat> arrayList2, boolean z) {
        if (tLRPC$Message != null) {
            this.storageQueue.postRunnable(new Runnable(tLRPC$Message, z, arrayList, arrayList2) {
                public final /* synthetic */ TLRPC$Message f$1;
                public final /* synthetic */ boolean f$2;
                public final /* synthetic */ ArrayList f$3;
                public final /* synthetic */ ArrayList f$4;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r5;
                }

                public final void run() {
                    MessagesStorage.this.lambda$replaceMessageIfExists$149$MessagesStorage(this.f$1, this.f$2, this.f$3, this.f$4);
                }
            });
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:12:0x003c, code lost:
        if (r5 != null) goto L_0x003e;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:13:0x003e, code lost:
        r5.dispose();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:18:0x0049, code lost:
        if (r5 == null) goto L_0x004c;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:20:?, code lost:
        r1.database.beginTransaction();
        r0 = r1.database.executeFast("REPLACE INTO messages VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, NULL, ?, ?)");
        r5 = r1.database.executeFast("REPLACE INTO media_v2 VALUES(?, ?, ?, ?, ?)");
     */
    /* JADX WARNING: Code restructure failed: missing block: B:21:0x0067, code lost:
        if (r4.dialog_id != 0) goto L_0x006c;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:22:0x0069, code lost:
        org.telegram.messenger.MessageObject.getDialogId(r16);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:23:0x006c, code lost:
        fixUnsupportedMedia(r16);
        r0.requery();
        r8 = new org.telegram.tgnet.NativeByteBuffer(r16.getObjectSize());
        r4.serializeToStream(r8);
        r0.bindLong(1, r2);
        r0.bindLong(2, r4.dialog_id);
        r0.bindInteger(3, org.telegram.messenger.MessageObject.getUnreadFlags(r16));
        r0.bindInteger(4, r4.send_state);
        r0.bindInteger(5, r4.date);
        r0.bindByteBuffer(6, r8);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:24:0x00a4, code lost:
        if (org.telegram.messenger.MessageObject.isOut(r16) != false) goto L_0x00ad;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:26:0x00a8, code lost:
        if (r4.from_scheduled == false) goto L_0x00ab;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:28:0x00ab, code lost:
        r14 = 0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:29:0x00ad, code lost:
        r14 = 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:30:0x00ae, code lost:
        r0.bindInteger(7, r14);
        r0.bindInteger(8, r4.ttl);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:31:0x00be, code lost:
        if ((r4.flags & 1024) == 0) goto L_0x00c6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:32:0x00c0, code lost:
        r0.bindInteger(9, r4.views);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:33:0x00c6, code lost:
        r0.bindInteger(9, getMessageMediaType(r16));
     */
    /* JADX WARNING: Code restructure failed: missing block: B:35:0x00cf, code lost:
        if (r4.stickerVerified != 0) goto L_0x00d3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:36:0x00d1, code lost:
        r9 = 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:38:0x00d5, code lost:
        if (r4.stickerVerified != 2) goto L_0x00d9;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:39:0x00d7, code lost:
        r9 = 2;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:40:0x00d9, code lost:
        r9 = 0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:41:0x00da, code lost:
        r0.bindInteger(10, r9);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:42:0x00e3, code lost:
        if (r4.mentioned == false) goto L_0x00e7;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:43:0x00e5, code lost:
        r14 = 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:44:0x00e7, code lost:
        r14 = 0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:45:0x00e8, code lost:
        r0.bindInteger(11, r14);
        r0.step();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:46:0x00f2, code lost:
        if (org.telegram.messenger.MediaDataController.canAddMessageToMedia(r16) == false) goto L_0x0111;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:47:0x00f4, code lost:
        r5.requery();
        r5.bindLong(1, r2);
        r5.bindLong(2, r4.dialog_id);
        r5.bindInteger(3, r4.date);
        r5.bindInteger(4, org.telegram.messenger.MediaDataController.getMediaType(r16));
        r5.bindByteBuffer(5, r8);
        r5.step();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:48:0x0111, code lost:
        r8.reuse();
        r0.dispose();
        r5.dispose();
        r1.database.commitTransaction();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:49:0x011f, code lost:
        if (r17 == false) goto L_?;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:50:0x0121, code lost:
        r5 = new java.util.HashMap();
        r0 = new java.util.HashMap();
        r2 = 0;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:52:0x0130, code lost:
        if (r2 >= r18.size()) goto L_0x0146;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:53:0x0132, code lost:
        r7 = (org.telegram.tgnet.TLRPC$User) r18.get(r2);
        r5.put(java.lang.Integer.valueOf(r7.id), r7);
        r2 = r2 + 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:55:0x014a, code lost:
        if (r6 >= r19.size()) goto L_0x0160;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:56:0x014c, code lost:
        r3 = (org.telegram.tgnet.TLRPC$Chat) r19.get(r6);
        r0.put(java.lang.Integer.valueOf(r3.id), r3);
        r6 = r6 + 1;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:57:0x0160, code lost:
        r2 = new org.telegram.messenger.MessageObject(r1.currentAccount, r16, (java.util.AbstractMap<java.lang.Integer, org.telegram.tgnet.TLRPC$User>) r5, (java.util.AbstractMap<java.lang.Integer, org.telegram.tgnet.TLRPC$Chat>) r0, true);
        r0 = new java.util.ArrayList();
        r0.add(r2);
        org.telegram.messenger.AndroidUtilities.runOnUIThread(new org.telegram.messenger.$$Lambda$MessagesStorage$PQVobzHRw1pohAjjrGTCYQN3uM(r15, r2, r0));
     */
    /* JADX WARNING: Code restructure failed: missing block: B:68:?, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:69:?, code lost:
        return;
     */
    /* JADX WARNING: No exception handlers in catch block: Catch:{  } */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$replaceMessageIfExists$149$MessagesStorage(org.telegram.tgnet.TLRPC$Message r16, boolean r17, java.util.ArrayList r18, java.util.ArrayList r19) {
        /*
            r15 = this;
            r1 = r15
            r4 = r16
            int r0 = r4.id     // Catch:{ Exception -> 0x0183 }
            long r2 = (long) r0     // Catch:{ Exception -> 0x0183 }
            org.telegram.tgnet.TLRPC$Peer r0 = r4.to_id     // Catch:{ Exception -> 0x0183 }
            int r0 = r0.channel_id     // Catch:{ Exception -> 0x0183 }
            org.telegram.tgnet.TLRPC$Peer r5 = r4.to_id     // Catch:{ Exception -> 0x0183 }
            int r5 = r5.channel_id     // Catch:{ Exception -> 0x0183 }
            if (r5 == 0) goto L_0x0015
            long r5 = (long) r0
            r0 = 32
            long r5 = r5 << r0
            long r2 = r2 | r5
        L_0x0015:
            r5 = 0
            r6 = 0
            r7 = 1
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0045 }
            java.util.Locale r8 = java.util.Locale.US     // Catch:{ Exception -> 0x0045 }
            java.lang.String r9 = "SELECT uid FROM messages WHERE mid = %d LIMIT 1"
            java.lang.Object[] r10 = new java.lang.Object[r7]     // Catch:{ Exception -> 0x0045 }
            java.lang.Long r11 = java.lang.Long.valueOf(r2)     // Catch:{ Exception -> 0x0045 }
            r10[r6] = r11     // Catch:{ Exception -> 0x0045 }
            java.lang.String r8 = java.lang.String.format(r8, r9, r10)     // Catch:{ Exception -> 0x0045 }
            java.lang.Object[] r9 = new java.lang.Object[r6]     // Catch:{ Exception -> 0x0045 }
            org.telegram.SQLite.SQLiteCursor r5 = r0.queryFinalized(r8, r9)     // Catch:{ Exception -> 0x0045 }
            boolean r0 = r5.next()     // Catch:{ Exception -> 0x0045 }
            if (r0 != 0) goto L_0x003c
            if (r5 == 0) goto L_0x003b
            r5.dispose()     // Catch:{ Exception -> 0x0183 }
        L_0x003b:
            return
        L_0x003c:
            if (r5 == 0) goto L_0x004c
        L_0x003e:
            r5.dispose()     // Catch:{ Exception -> 0x0183 }
            goto L_0x004c
        L_0x0042:
            r0 = move-exception
            goto L_0x017d
        L_0x0045:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ all -> 0x0042 }
            if (r5 == 0) goto L_0x004c
            goto L_0x003e
        L_0x004c:
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0183 }
            r0.beginTransaction()     // Catch:{ Exception -> 0x0183 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0183 }
            java.lang.String r5 = "REPLACE INTO messages VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, NULL, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r5)     // Catch:{ Exception -> 0x0183 }
            org.telegram.SQLite.SQLiteDatabase r5 = r1.database     // Catch:{ Exception -> 0x0183 }
            java.lang.String r8 = "REPLACE INTO media_v2 VALUES(?, ?, ?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r5 = r5.executeFast(r8)     // Catch:{ Exception -> 0x0183 }
            long r8 = r4.dialog_id     // Catch:{ Exception -> 0x0183 }
            r10 = 0
            int r12 = (r8 > r10 ? 1 : (r8 == r10 ? 0 : -1))
            if (r12 != 0) goto L_0x006c
            org.telegram.messenger.MessageObject.getDialogId(r16)     // Catch:{ Exception -> 0x0183 }
        L_0x006c:
            r15.fixUnsupportedMedia(r16)     // Catch:{ Exception -> 0x0183 }
            r0.requery()     // Catch:{ Exception -> 0x0183 }
            org.telegram.tgnet.NativeByteBuffer r8 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x0183 }
            int r9 = r16.getObjectSize()     // Catch:{ Exception -> 0x0183 }
            r8.<init>((int) r9)     // Catch:{ Exception -> 0x0183 }
            r4.serializeToStream(r8)     // Catch:{ Exception -> 0x0183 }
            r0.bindLong(r7, r2)     // Catch:{ Exception -> 0x0183 }
            long r9 = r4.dialog_id     // Catch:{ Exception -> 0x0183 }
            r11 = 2
            r0.bindLong(r11, r9)     // Catch:{ Exception -> 0x0183 }
            int r9 = org.telegram.messenger.MessageObject.getUnreadFlags(r16)     // Catch:{ Exception -> 0x0183 }
            r10 = 3
            r0.bindInteger(r10, r9)     // Catch:{ Exception -> 0x0183 }
            int r9 = r4.send_state     // Catch:{ Exception -> 0x0183 }
            r12 = 4
            r0.bindInteger(r12, r9)     // Catch:{ Exception -> 0x0183 }
            int r9 = r4.date     // Catch:{ Exception -> 0x0183 }
            r13 = 5
            r0.bindInteger(r13, r9)     // Catch:{ Exception -> 0x0183 }
            r9 = 6
            r0.bindByteBuffer((int) r9, (org.telegram.tgnet.NativeByteBuffer) r8)     // Catch:{ Exception -> 0x0183 }
            r9 = 7
            boolean r14 = org.telegram.messenger.MessageObject.isOut(r16)     // Catch:{ Exception -> 0x0183 }
            if (r14 != 0) goto L_0x00ad
            boolean r14 = r4.from_scheduled     // Catch:{ Exception -> 0x0183 }
            if (r14 == 0) goto L_0x00ab
            goto L_0x00ad
        L_0x00ab:
            r14 = 0
            goto L_0x00ae
        L_0x00ad:
            r14 = 1
        L_0x00ae:
            r0.bindInteger(r9, r14)     // Catch:{ Exception -> 0x0183 }
            r9 = 8
            int r14 = r4.ttl     // Catch:{ Exception -> 0x0183 }
            r0.bindInteger(r9, r14)     // Catch:{ Exception -> 0x0183 }
            int r9 = r4.flags     // Catch:{ Exception -> 0x0183 }
            r9 = r9 & 1024(0x400, float:1.435E-42)
            r14 = 9
            if (r9 == 0) goto L_0x00c6
            int r9 = r4.views     // Catch:{ Exception -> 0x0183 }
            r0.bindInteger(r14, r9)     // Catch:{ Exception -> 0x0183 }
            goto L_0x00cd
        L_0x00c6:
            int r9 = r15.getMessageMediaType(r16)     // Catch:{ Exception -> 0x0183 }
            r0.bindInteger(r14, r9)     // Catch:{ Exception -> 0x0183 }
        L_0x00cd:
            int r9 = r4.stickerVerified     // Catch:{ Exception -> 0x0183 }
            if (r9 != 0) goto L_0x00d3
            r9 = 1
            goto L_0x00da
        L_0x00d3:
            int r9 = r4.stickerVerified     // Catch:{ Exception -> 0x0183 }
            if (r9 != r11) goto L_0x00d9
            r9 = 2
            goto L_0x00da
        L_0x00d9:
            r9 = 0
        L_0x00da:
            r14 = 10
            r0.bindInteger(r14, r9)     // Catch:{ Exception -> 0x0183 }
            r9 = 11
            boolean r14 = r4.mentioned     // Catch:{ Exception -> 0x0183 }
            if (r14 == 0) goto L_0x00e7
            r14 = 1
            goto L_0x00e8
        L_0x00e7:
            r14 = 0
        L_0x00e8:
            r0.bindInteger(r9, r14)     // Catch:{ Exception -> 0x0183 }
            r0.step()     // Catch:{ Exception -> 0x0183 }
            boolean r9 = org.telegram.messenger.MediaDataController.canAddMessageToMedia(r16)     // Catch:{ Exception -> 0x0183 }
            if (r9 == 0) goto L_0x0111
            r5.requery()     // Catch:{ Exception -> 0x0183 }
            r5.bindLong(r7, r2)     // Catch:{ Exception -> 0x0183 }
            long r2 = r4.dialog_id     // Catch:{ Exception -> 0x0183 }
            r5.bindLong(r11, r2)     // Catch:{ Exception -> 0x0183 }
            int r2 = r4.date     // Catch:{ Exception -> 0x0183 }
            r5.bindInteger(r10, r2)     // Catch:{ Exception -> 0x0183 }
            int r2 = org.telegram.messenger.MediaDataController.getMediaType(r16)     // Catch:{ Exception -> 0x0183 }
            r5.bindInteger(r12, r2)     // Catch:{ Exception -> 0x0183 }
            r5.bindByteBuffer((int) r13, (org.telegram.tgnet.NativeByteBuffer) r8)     // Catch:{ Exception -> 0x0183 }
            r5.step()     // Catch:{ Exception -> 0x0183 }
        L_0x0111:
            r8.reuse()     // Catch:{ Exception -> 0x0183 }
            r0.dispose()     // Catch:{ Exception -> 0x0183 }
            r5.dispose()     // Catch:{ Exception -> 0x0183 }
            org.telegram.SQLite.SQLiteDatabase r0 = r1.database     // Catch:{ Exception -> 0x0183 }
            r0.commitTransaction()     // Catch:{ Exception -> 0x0183 }
            if (r17 == 0) goto L_0x0187
            java.util.HashMap r5 = new java.util.HashMap     // Catch:{ Exception -> 0x0183 }
            r5.<init>()     // Catch:{ Exception -> 0x0183 }
            java.util.HashMap r0 = new java.util.HashMap     // Catch:{ Exception -> 0x0183 }
            r0.<init>()     // Catch:{ Exception -> 0x0183 }
            r2 = 0
        L_0x012c:
            int r3 = r18.size()     // Catch:{ Exception -> 0x0183 }
            if (r2 >= r3) goto L_0x0146
            r3 = r18
            java.lang.Object r7 = r3.get(r2)     // Catch:{ Exception -> 0x0183 }
            org.telegram.tgnet.TLRPC$User r7 = (org.telegram.tgnet.TLRPC$User) r7     // Catch:{ Exception -> 0x0183 }
            int r8 = r7.id     // Catch:{ Exception -> 0x0183 }
            java.lang.Integer r8 = java.lang.Integer.valueOf(r8)     // Catch:{ Exception -> 0x0183 }
            r5.put(r8, r7)     // Catch:{ Exception -> 0x0183 }
            int r2 = r2 + 1
            goto L_0x012c
        L_0x0146:
            int r2 = r19.size()     // Catch:{ Exception -> 0x0183 }
            if (r6 >= r2) goto L_0x0160
            r2 = r19
            java.lang.Object r3 = r2.get(r6)     // Catch:{ Exception -> 0x0183 }
            org.telegram.tgnet.TLRPC$Chat r3 = (org.telegram.tgnet.TLRPC$Chat) r3     // Catch:{ Exception -> 0x0183 }
            int r7 = r3.id     // Catch:{ Exception -> 0x0183 }
            java.lang.Integer r7 = java.lang.Integer.valueOf(r7)     // Catch:{ Exception -> 0x0183 }
            r0.put(r7, r3)     // Catch:{ Exception -> 0x0183 }
            int r6 = r6 + 1
            goto L_0x0146
        L_0x0160:
            org.telegram.messenger.MessageObject r8 = new org.telegram.messenger.MessageObject     // Catch:{ Exception -> 0x0183 }
            int r3 = r1.currentAccount     // Catch:{ Exception -> 0x0183 }
            r7 = 1
            r2 = r8
            r4 = r16
            r6 = r0
            r2.<init>((int) r3, (org.telegram.tgnet.TLRPC$Message) r4, (java.util.AbstractMap<java.lang.Integer, org.telegram.tgnet.TLRPC$User>) r5, (java.util.AbstractMap<java.lang.Integer, org.telegram.tgnet.TLRPC$Chat>) r6, (boolean) r7)     // Catch:{ Exception -> 0x0183 }
            java.util.ArrayList r0 = new java.util.ArrayList     // Catch:{ Exception -> 0x0183 }
            r0.<init>()     // Catch:{ Exception -> 0x0183 }
            r0.add(r8)     // Catch:{ Exception -> 0x0183 }
            org.telegram.messenger.-$$Lambda$MessagesStorage$PQVobzHRw1pohAjjrGT-CYQN3uM r2 = new org.telegram.messenger.-$$Lambda$MessagesStorage$PQVobzHRw1pohAjjrGT-CYQN3uM     // Catch:{ Exception -> 0x0183 }
            r2.<init>(r8, r0)     // Catch:{ Exception -> 0x0183 }
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r2)     // Catch:{ Exception -> 0x0183 }
            goto L_0x0187
        L_0x017d:
            if (r5 == 0) goto L_0x0182
            r5.dispose()     // Catch:{ Exception -> 0x0183 }
        L_0x0182:
            throw r0     // Catch:{ Exception -> 0x0183 }
        L_0x0183:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
        L_0x0187:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$replaceMessageIfExists$149$MessagesStorage(org.telegram.tgnet.TLRPC$Message, boolean, java.util.ArrayList, java.util.ArrayList):void");
    }

    public /* synthetic */ void lambda$null$148$MessagesStorage(MessageObject messageObject, ArrayList arrayList) {
        getNotificationCenter().postNotificationName(NotificationCenter.replaceMessagesObjects, Long.valueOf(messageObject.getDialogId()), arrayList);
    }

    public void putMessages(TLRPC$messages_Messages tLRPC$messages_Messages, long j, int i, int i2, boolean z, boolean z2) {
        this.storageQueue.postRunnable(new Runnable(z2, j, tLRPC$messages_Messages, i, i2, z) {
            public final /* synthetic */ boolean f$1;
            public final /* synthetic */ long f$2;
            public final /* synthetic */ TLRPC$messages_Messages f$3;
            public final /* synthetic */ int f$4;
            public final /* synthetic */ int f$5;
            public final /* synthetic */ boolean f$6;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r5;
                this.f$4 = r6;
                this.f$5 = r7;
                this.f$6 = r8;
            }

            public final void run() {
                MessagesStorage.this.lambda$putMessages$150$MessagesStorage(this.f$1, this.f$2, this.f$3, this.f$4, this.f$5, this.f$6);
            }
        });
    }

    /* JADX WARNING: Code restructure failed: missing block: B:63:0x0237, code lost:
        if (r5.media.photo.id == r12.media.photo.id) goto L_0x0239;
     */
    /* JADX WARNING: Removed duplicated region for block: B:104:0x02d0 A[Catch:{ Exception -> 0x05db }] */
    /* JADX WARNING: Removed duplicated region for block: B:128:0x0415 A[Catch:{ Exception -> 0x05db }] */
    /* JADX WARNING: Removed duplicated region for block: B:129:0x041d A[Catch:{ Exception -> 0x05db }] */
    /* JADX WARNING: Removed duplicated region for block: B:132:0x042a A[Catch:{ Exception -> 0x05db }] */
    /* JADX WARNING: Removed duplicated region for block: B:134:0x042e A[Catch:{ Exception -> 0x05db }] */
    /* JADX WARNING: Removed duplicated region for block: B:140:0x043e A[Catch:{ Exception -> 0x05db }] */
    /* JADX WARNING: Removed duplicated region for block: B:141:0x0440 A[Catch:{ Exception -> 0x05db }] */
    /* JADX WARNING: Removed duplicated region for block: B:144:0x044d A[Catch:{ Exception -> 0x05db }] */
    /* JADX WARNING: Removed duplicated region for block: B:145:0x0470 A[Catch:{ Exception -> 0x05db }] */
    /* JADX WARNING: Removed duplicated region for block: B:162:0x04d5 A[Catch:{ Exception -> 0x05db }] */
    /* JADX WARNING: Removed duplicated region for block: B:165:0x04fa A[Catch:{ Exception -> 0x05db }] */
    /* JADX WARNING: Removed duplicated region for block: B:173:0x052a A[Catch:{ Exception -> 0x05db }] */
    /* JADX WARNING: Removed duplicated region for block: B:178:0x0537 A[Catch:{ Exception -> 0x05db }] */
    /* JADX WARNING: Removed duplicated region for block: B:78:0x0269 A[Catch:{ Exception -> 0x05db }] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$putMessages$150$MessagesStorage(boolean r33, long r34, org.telegram.tgnet.TLRPC$messages_Messages r36, int r37, int r38, boolean r39) {
        /*
            r32 = this;
            r7 = r32
            r8 = r34
            r10 = r36
            r11 = r37
            r0 = r38
            r12 = 32
            r3 = 1
            r4 = 0
            if (r33 == 0) goto L_0x00ab
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x05db }
            java.util.Locale r1 = java.util.Locale.US     // Catch:{ Exception -> 0x05db }
            java.lang.String r2 = "DELETE FROM scheduled_messages WHERE uid = %d AND mid > 0"
            java.lang.Object[] r11 = new java.lang.Object[r3]     // Catch:{ Exception -> 0x05db }
            java.lang.Long r16 = java.lang.Long.valueOf(r34)     // Catch:{ Exception -> 0x05db }
            r11[r4] = r16     // Catch:{ Exception -> 0x05db }
            java.lang.String r1 = java.lang.String.format(r1, r2, r11)     // Catch:{ Exception -> 0x05db }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r1)     // Catch:{ Exception -> 0x05db }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x05db }
            r0.dispose()     // Catch:{ Exception -> 0x05db }
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x05db }
            java.lang.String r1 = "REPLACE INTO scheduled_messages VALUES(?, ?, ?, ?, ?, ?, NULL)"
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r1)     // Catch:{ Exception -> 0x05db }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r10.messages     // Catch:{ Exception -> 0x05db }
            int r1 = r1.size()     // Catch:{ Exception -> 0x05db }
            r2 = 0
        L_0x003c:
            if (r4 >= r1) goto L_0x0090
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r11 = r10.messages     // Catch:{ Exception -> 0x05db }
            java.lang.Object r11 = r11.get(r4)     // Catch:{ Exception -> 0x05db }
            org.telegram.tgnet.TLRPC$Message r11 = (org.telegram.tgnet.TLRPC$Message) r11     // Catch:{ Exception -> 0x05db }
            int r13 = r11.id     // Catch:{ Exception -> 0x05db }
            long r14 = (long) r13     // Catch:{ Exception -> 0x05db }
            if (r2 != 0) goto L_0x004f
            org.telegram.tgnet.TLRPC$Peer r2 = r11.to_id     // Catch:{ Exception -> 0x05db }
            int r2 = r2.channel_id     // Catch:{ Exception -> 0x05db }
        L_0x004f:
            org.telegram.tgnet.TLRPC$Peer r13 = r11.to_id     // Catch:{ Exception -> 0x05db }
            int r13 = r13.channel_id     // Catch:{ Exception -> 0x05db }
            if (r13 == 0) goto L_0x0058
            long r5 = (long) r2     // Catch:{ Exception -> 0x05db }
            long r5 = r5 << r12
            long r14 = r14 | r5
        L_0x0058:
            r7.fixUnsupportedMedia(r11)     // Catch:{ Exception -> 0x05db }
            r0.requery()     // Catch:{ Exception -> 0x05db }
            org.telegram.tgnet.NativeByteBuffer r5 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x05db }
            int r6 = r11.getObjectSize()     // Catch:{ Exception -> 0x05db }
            r5.<init>((int) r6)     // Catch:{ Exception -> 0x05db }
            r11.serializeToStream(r5)     // Catch:{ Exception -> 0x05db }
            r0.bindLong(r3, r14)     // Catch:{ Exception -> 0x05db }
            r6 = 2
            r0.bindLong(r6, r8)     // Catch:{ Exception -> 0x05db }
            int r14 = r11.send_state     // Catch:{ Exception -> 0x05db }
            r13 = 3
            r0.bindInteger(r13, r14)     // Catch:{ Exception -> 0x05db }
            int r14 = r11.date     // Catch:{ Exception -> 0x05db }
            r15 = 4
            r0.bindInteger(r15, r14)     // Catch:{ Exception -> 0x05db }
            r14 = 5
            r0.bindByteBuffer((int) r14, (org.telegram.tgnet.NativeByteBuffer) r5)     // Catch:{ Exception -> 0x05db }
            int r11 = r11.ttl     // Catch:{ Exception -> 0x05db }
            r14 = 6
            r0.bindInteger(r14, r11)     // Catch:{ Exception -> 0x05db }
            r0.step()     // Catch:{ Exception -> 0x05db }
            r5.reuse()     // Catch:{ Exception -> 0x05db }
            int r4 = r4 + 1
            goto L_0x003c
        L_0x0090:
            r0.dispose()     // Catch:{ Exception -> 0x05db }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r0 = r10.users     // Catch:{ Exception -> 0x05db }
            r7.putUsersInternal(r0)     // Catch:{ Exception -> 0x05db }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r0 = r10.chats     // Catch:{ Exception -> 0x05db }
            r7.putChatsInternal(r0)     // Catch:{ Exception -> 0x05db }
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x05db }
            r0.commitTransaction()     // Catch:{ Exception -> 0x05db }
            java.lang.Long r0 = java.lang.Long.valueOf(r34)     // Catch:{ Exception -> 0x05db }
            r7.broadcastScheduledMessagesChange(r0)     // Catch:{ Exception -> 0x05db }
            goto L_0x05df
        L_0x00ab:
            r6 = 2
            r13 = 3
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r10.messages     // Catch:{ Exception -> 0x05db }
            boolean r1 = r1.isEmpty()     // Catch:{ Exception -> 0x05db }
            r14 = -1
            if (r1 == 0) goto L_0x00c1
            if (r11 != 0) goto L_0x00c0
            java.lang.String r1 = "messages_holes"
            r7.doneHolesInTable(r1, r8, r0)     // Catch:{ Exception -> 0x05db }
            r7.doneHolesInMedia(r8, r0, r14)     // Catch:{ Exception -> 0x05db }
        L_0x00c0:
            return
        L_0x00c1:
            org.telegram.SQLite.SQLiteDatabase r1 = r7.database     // Catch:{ Exception -> 0x05db }
            r1.beginTransaction()     // Catch:{ Exception -> 0x05db }
            if (r11 != 0) goto L_0x00f8
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r10.messages     // Catch:{ Exception -> 0x05db }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r2 = r10.messages     // Catch:{ Exception -> 0x05db }
            int r2 = r2.size()     // Catch:{ Exception -> 0x05db }
            int r2 = r2 - r3
            java.lang.Object r1 = r1.get(r2)     // Catch:{ Exception -> 0x05db }
            org.telegram.tgnet.TLRPC$Message r1 = (org.telegram.tgnet.TLRPC$Message) r1     // Catch:{ Exception -> 0x05db }
            int r5 = r1.id     // Catch:{ Exception -> 0x05db }
            java.lang.String r2 = "messages_holes"
            r1 = r32
            r13 = 1
            r14 = 0
            r3 = r34
            r18 = r5
            r12 = 2
            r15 = 3
            r6 = r38
            r1.closeHolesInTable(r2, r3, r5, r6)     // Catch:{ Exception -> 0x05db }
            r6 = -1
            r1 = r32
            r2 = r34
            r4 = r18
            r5 = r38
            r1.closeHolesInMedia(r2, r4, r5, r6)     // Catch:{ Exception -> 0x05db }
            goto L_0x0166
        L_0x00f8:
            r12 = 2
            r13 = 1
            r14 = 0
            r15 = 3
            if (r11 != r13) goto L_0x0122
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r10.messages     // Catch:{ Exception -> 0x05db }
            java.lang.Object r1 = r1.get(r14)     // Catch:{ Exception -> 0x05db }
            org.telegram.tgnet.TLRPC$Message r1 = (org.telegram.tgnet.TLRPC$Message) r1     // Catch:{ Exception -> 0x05db }
            int r6 = r1.id     // Catch:{ Exception -> 0x05db }
            java.lang.String r2 = "messages_holes"
            r1 = r32
            r3 = r34
            r5 = r38
            r18 = r6
            r1.closeHolesInTable(r2, r3, r5, r6)     // Catch:{ Exception -> 0x05db }
            r6 = -1
            r1 = r32
            r2 = r34
            r4 = r38
            r5 = r18
            r1.closeHolesInMedia(r2, r4, r5, r6)     // Catch:{ Exception -> 0x05db }
            goto L_0x0166
        L_0x0122:
            if (r11 == r15) goto L_0x012a
            if (r11 == r12) goto L_0x012a
            r1 = 4
            if (r11 != r1) goto L_0x0166
            goto L_0x012b
        L_0x012a:
            r1 = 4
        L_0x012b:
            if (r0 != 0) goto L_0x0133
            if (r11 == r1) goto L_0x0133
            r0 = 2147483647(0x7fffffff, float:NaN)
            goto L_0x013d
        L_0x0133:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r0 = r10.messages     // Catch:{ Exception -> 0x05db }
            java.lang.Object r0 = r0.get(r14)     // Catch:{ Exception -> 0x05db }
            org.telegram.tgnet.TLRPC$Message r0 = (org.telegram.tgnet.TLRPC$Message) r0     // Catch:{ Exception -> 0x05db }
            int r0 = r0.id     // Catch:{ Exception -> 0x05db }
        L_0x013d:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r10.messages     // Catch:{ Exception -> 0x05db }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r2 = r10.messages     // Catch:{ Exception -> 0x05db }
            int r2 = r2.size()     // Catch:{ Exception -> 0x05db }
            int r2 = r2 - r13
            java.lang.Object r1 = r1.get(r2)     // Catch:{ Exception -> 0x05db }
            org.telegram.tgnet.TLRPC$Message r1 = (org.telegram.tgnet.TLRPC$Message) r1     // Catch:{ Exception -> 0x05db }
            int r6 = r1.id     // Catch:{ Exception -> 0x05db }
            java.lang.String r2 = "messages_holes"
            r1 = r32
            r3 = r34
            r5 = r6
            r18 = r6
            r6 = r0
            r1.closeHolesInTable(r2, r3, r5, r6)     // Catch:{ Exception -> 0x05db }
            r6 = -1
            r1 = r32
            r2 = r34
            r4 = r18
            r5 = r0
            r1.closeHolesInMedia(r2, r4, r5, r6)     // Catch:{ Exception -> 0x05db }
        L_0x0166:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r0 = r10.messages     // Catch:{ Exception -> 0x05db }
            int r1 = r0.size()     // Catch:{ Exception -> 0x05db }
            java.util.ArrayList r2 = new java.util.ArrayList     // Catch:{ Exception -> 0x05db }
            r2.<init>()     // Catch:{ Exception -> 0x05db }
            java.util.ArrayList r3 = new java.util.ArrayList     // Catch:{ Exception -> 0x05db }
            r3.<init>()     // Catch:{ Exception -> 0x05db }
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x05db }
            java.lang.String r4 = "REPLACE INTO messages VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, NULL, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r4 = r0.executeFast(r4)     // Catch:{ Exception -> 0x05db }
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x05db }
            java.lang.String r5 = "REPLACE INTO media_v2 VALUES(?, ?, ?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r5 = r0.executeFast(r5)     // Catch:{ Exception -> 0x05db }
            r0 = 0
            r6 = 0
            r18 = 0
            r19 = 0
            r20 = 0
            r21 = 2147483647(0x7fffffff, float:NaN)
        L_0x0191:
            if (r6 >= r1) goto L_0x054f
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r12 = r10.messages     // Catch:{ Exception -> 0x05db }
            java.lang.Object r12 = r12.get(r6)     // Catch:{ Exception -> 0x05db }
            org.telegram.tgnet.TLRPC$Message r12 = (org.telegram.tgnet.TLRPC$Message) r12     // Catch:{ Exception -> 0x05db }
            int r15 = r12.id     // Catch:{ Exception -> 0x05db }
            long r14 = (long) r15     // Catch:{ Exception -> 0x05db }
            if (r0 != 0) goto L_0x01a4
            org.telegram.tgnet.TLRPC$Peer r0 = r12.to_id     // Catch:{ Exception -> 0x05db }
            int r0 = r0.channel_id     // Catch:{ Exception -> 0x05db }
        L_0x01a4:
            r13 = r0
            org.telegram.tgnet.TLRPC$Peer r0 = r12.to_id     // Catch:{ Exception -> 0x05db }
            int r0 = r0.channel_id     // Catch:{ Exception -> 0x05db }
            r23 = r1
            if (r0 == 0) goto L_0x01b4
            long r0 = (long) r13     // Catch:{ Exception -> 0x05db }
            r17 = 32
            long r0 = r0 << r17
            long r14 = r14 | r0
            goto L_0x01b6
        L_0x01b4:
            r17 = 32
        L_0x01b6:
            r0 = -2
            if (r11 != r0) goto L_0x02d8
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x05db }
            java.util.Locale r1 = java.util.Locale.US     // Catch:{ Exception -> 0x05db }
            r24 = r13
            java.lang.String r13 = "SELECT mid, data, ttl, mention, read_state, send_state FROM messages WHERE mid = %d"
            r25 = r5
            r11 = 1
            java.lang.Object[] r5 = new java.lang.Object[r11]     // Catch:{ Exception -> 0x05db }
            java.lang.Long r11 = java.lang.Long.valueOf(r14)     // Catch:{ Exception -> 0x05db }
            r26 = r4
            r4 = 0
            r5[r4] = r11     // Catch:{ Exception -> 0x05db }
            java.lang.String r1 = java.lang.String.format(r1, r13, r5)     // Catch:{ Exception -> 0x05db }
            java.lang.Object[] r5 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x05db }
            org.telegram.SQLite.SQLiteCursor r0 = r0.queryFinalized(r1, r5)     // Catch:{ Exception -> 0x05db }
            boolean r1 = r0.next()     // Catch:{ Exception -> 0x05db }
            if (r1 == 0) goto L_0x02c5
            r5 = 1
            org.telegram.tgnet.NativeByteBuffer r11 = r0.byteBufferValue(r5)     // Catch:{ Exception -> 0x05db }
            if (r11 == 0) goto L_0x026e
            int r5 = r11.readInt32(r4)     // Catch:{ Exception -> 0x05db }
            org.telegram.tgnet.TLRPC$Message r5 = org.telegram.tgnet.TLRPC$Message.TLdeserialize(r11, r5, r4)     // Catch:{ Exception -> 0x05db }
            org.telegram.messenger.UserConfig r4 = r32.getUserConfig()     // Catch:{ Exception -> 0x05db }
            int r4 = r4.clientUserId     // Catch:{ Exception -> 0x05db }
            r5.readAttachPath(r11, r4)     // Catch:{ Exception -> 0x05db }
            r11.reuse()     // Catch:{ Exception -> 0x05db }
            r4 = 5
            int r11 = r0.intValue(r4)     // Catch:{ Exception -> 0x05db }
            if (r5 == 0) goto L_0x020f
            r4 = 3
            if (r11 == r4) goto L_0x020f
            java.lang.String r4 = r5.attachPath     // Catch:{ Exception -> 0x05db }
            r12.attachPath = r4     // Catch:{ Exception -> 0x05db }
            r4 = 2
            int r11 = r0.intValue(r4)     // Catch:{ Exception -> 0x05db }
            r12.ttl = r11     // Catch:{ Exception -> 0x05db }
        L_0x020f:
            org.telegram.tgnet.TLRPC$MessageMedia r4 = r5.media     // Catch:{ Exception -> 0x05db }
            boolean r4 = r4 instanceof org.telegram.tgnet.TLRPC$TL_messageMediaPhoto     // Catch:{ Exception -> 0x05db }
            if (r4 == 0) goto L_0x023b
            org.telegram.tgnet.TLRPC$MessageMedia r4 = r12.media     // Catch:{ Exception -> 0x05db }
            boolean r4 = r4 instanceof org.telegram.tgnet.TLRPC$TL_messageMediaPhoto     // Catch:{ Exception -> 0x05db }
            if (r4 == 0) goto L_0x023b
            org.telegram.tgnet.TLRPC$MessageMedia r4 = r5.media     // Catch:{ Exception -> 0x05db }
            org.telegram.tgnet.TLRPC$Photo r4 = r4.photo     // Catch:{ Exception -> 0x05db }
            if (r4 == 0) goto L_0x023b
            org.telegram.tgnet.TLRPC$MessageMedia r4 = r12.media     // Catch:{ Exception -> 0x05db }
            org.telegram.tgnet.TLRPC$Photo r4 = r4.photo     // Catch:{ Exception -> 0x05db }
            if (r4 == 0) goto L_0x023b
            org.telegram.tgnet.TLRPC$MessageMedia r4 = r5.media     // Catch:{ Exception -> 0x05db }
            org.telegram.tgnet.TLRPC$Photo r4 = r4.photo     // Catch:{ Exception -> 0x05db }
            long r10 = r4.id     // Catch:{ Exception -> 0x05db }
            org.telegram.tgnet.TLRPC$MessageMedia r4 = r12.media     // Catch:{ Exception -> 0x05db }
            org.telegram.tgnet.TLRPC$Photo r4 = r4.photo     // Catch:{ Exception -> 0x05db }
            r27 = r14
            long r13 = r4.id     // Catch:{ Exception -> 0x05db }
            int r4 = (r10 > r13 ? 1 : (r10 == r13 ? 0 : -1))
            if (r4 != 0) goto L_0x0266
        L_0x0239:
            r4 = 1
            goto L_0x0267
        L_0x023b:
            r27 = r14
            org.telegram.tgnet.TLRPC$MessageMedia r4 = r5.media     // Catch:{ Exception -> 0x05db }
            boolean r4 = r4 instanceof org.telegram.tgnet.TLRPC$TL_messageMediaDocument     // Catch:{ Exception -> 0x05db }
            if (r4 == 0) goto L_0x0266
            org.telegram.tgnet.TLRPC$MessageMedia r4 = r12.media     // Catch:{ Exception -> 0x05db }
            boolean r4 = r4 instanceof org.telegram.tgnet.TLRPC$TL_messageMediaDocument     // Catch:{ Exception -> 0x05db }
            if (r4 == 0) goto L_0x0266
            org.telegram.tgnet.TLRPC$MessageMedia r4 = r5.media     // Catch:{ Exception -> 0x05db }
            org.telegram.tgnet.TLRPC$Document r4 = r4.document     // Catch:{ Exception -> 0x05db }
            if (r4 == 0) goto L_0x0266
            org.telegram.tgnet.TLRPC$MessageMedia r4 = r12.media     // Catch:{ Exception -> 0x05db }
            org.telegram.tgnet.TLRPC$Document r4 = r4.document     // Catch:{ Exception -> 0x05db }
            if (r4 == 0) goto L_0x0266
            org.telegram.tgnet.TLRPC$MessageMedia r4 = r5.media     // Catch:{ Exception -> 0x05db }
            org.telegram.tgnet.TLRPC$Document r4 = r4.document     // Catch:{ Exception -> 0x05db }
            long r10 = r4.id     // Catch:{ Exception -> 0x05db }
            org.telegram.tgnet.TLRPC$MessageMedia r4 = r12.media     // Catch:{ Exception -> 0x05db }
            org.telegram.tgnet.TLRPC$Document r4 = r4.document     // Catch:{ Exception -> 0x05db }
            long r13 = r4.id     // Catch:{ Exception -> 0x05db }
            int r4 = (r10 > r13 ? 1 : (r10 == r13 ? 0 : -1))
            if (r4 != 0) goto L_0x0266
            goto L_0x0239
        L_0x0266:
            r4 = 0
        L_0x0267:
            if (r4 != 0) goto L_0x0270
            r4 = 0
            r7.addFilesToDelete(r5, r2, r3, r4)     // Catch:{ Exception -> 0x05db }
            goto L_0x0270
        L_0x026e:
            r27 = r14
        L_0x0270:
            r4 = 3
            int r5 = r0.intValue(r4)     // Catch:{ Exception -> 0x05db }
            if (r5 == 0) goto L_0x0279
            r4 = 1
            goto L_0x027a
        L_0x0279:
            r4 = 0
        L_0x027a:
            r5 = 4
            int r10 = r0.intValue(r5)     // Catch:{ Exception -> 0x05db }
            boolean r5 = r12.mentioned     // Catch:{ Exception -> 0x05db }
            if (r4 == r5) goto L_0x02c7
            r5 = r21
            r11 = 2147483647(0x7fffffff, float:NaN)
            if (r5 != r11) goto L_0x02b4
            org.telegram.SQLite.SQLiteDatabase r11 = r7.database     // Catch:{ Exception -> 0x05db }
            java.lang.StringBuilder r13 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x05db }
            r13.<init>()     // Catch:{ Exception -> 0x05db }
            java.lang.String r14 = "SELECT unread_count_i FROM dialogs WHERE did = "
            r13.append(r14)     // Catch:{ Exception -> 0x05db }
            r13.append(r8)     // Catch:{ Exception -> 0x05db }
            java.lang.String r13 = r13.toString()     // Catch:{ Exception -> 0x05db }
            r14 = 0
            java.lang.Object[] r15 = new java.lang.Object[r14]     // Catch:{ Exception -> 0x05db }
            org.telegram.SQLite.SQLiteCursor r11 = r11.queryFinalized(r13, r15)     // Catch:{ Exception -> 0x05db }
            boolean r13 = r11.next()     // Catch:{ Exception -> 0x05db }
            if (r13 == 0) goto L_0x02ae
            int r5 = r11.intValue(r14)     // Catch:{ Exception -> 0x05db }
        L_0x02ae:
            r21 = r5
            r11.dispose()     // Catch:{ Exception -> 0x05db }
            goto L_0x02b6
        L_0x02b4:
            r21 = r5
        L_0x02b6:
            if (r4 == 0) goto L_0x02be
            r4 = 1
            if (r10 > r4) goto L_0x02cb
            int r21 = r21 + -1
            goto L_0x02cb
        L_0x02be:
            boolean r4 = r12.media_unread     // Catch:{ Exception -> 0x05db }
            if (r4 == 0) goto L_0x02cb
            int r21 = r21 + 1
            goto L_0x02cb
        L_0x02c5:
            r27 = r14
        L_0x02c7:
            r5 = r21
            r21 = r5
        L_0x02cb:
            r0.dispose()     // Catch:{ Exception -> 0x05db }
            if (r1 != 0) goto L_0x02e2
            r11 = r25
            r13 = r26
            r25 = r2
            goto L_0x053b
        L_0x02d8:
            r26 = r4
            r25 = r5
            r24 = r13
            r27 = r14
            r5 = r21
        L_0x02e2:
            r0 = 11
            r10 = 7
            if (r6 != 0) goto L_0x03bc
            if (r39 == 0) goto L_0x03bc
            org.telegram.SQLite.SQLiteDatabase r11 = r7.database     // Catch:{ Exception -> 0x05db }
            java.lang.StringBuilder r13 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x05db }
            r13.<init>()     // Catch:{ Exception -> 0x05db }
            java.lang.String r14 = "SELECT pinned, unread_count_i, flags FROM dialogs WHERE did = "
            r13.append(r14)     // Catch:{ Exception -> 0x05db }
            r13.append(r8)     // Catch:{ Exception -> 0x05db }
            java.lang.String r13 = r13.toString()     // Catch:{ Exception -> 0x05db }
            r14 = 0
            java.lang.Object[] r15 = new java.lang.Object[r14]     // Catch:{ Exception -> 0x05db }
            org.telegram.SQLite.SQLiteCursor r11 = r11.queryFinalized(r13, r15)     // Catch:{ Exception -> 0x05db }
            boolean r13 = r11.next()     // Catch:{ Exception -> 0x05db }
            if (r13 == 0) goto L_0x031c
            int r15 = r11.intValue(r14)     // Catch:{ Exception -> 0x05db }
            r14 = 1
            int r29 = r11.intValue(r14)     // Catch:{ Exception -> 0x05db }
            r14 = 2
            int r30 = r11.intValue(r14)     // Catch:{ Exception -> 0x05db }
            r14 = r29
            r31 = r30
            goto L_0x0320
        L_0x031c:
            r14 = 0
            r15 = 0
            r31 = 0
        L_0x0320:
            r11.dispose()     // Catch:{ Exception -> 0x05db }
            if (r13 == 0) goto L_0x0358
            org.telegram.SQLite.SQLiteDatabase r11 = r7.database     // Catch:{ Exception -> 0x05db }
            java.lang.String r13 = "UPDATE dialogs SET date = ?, last_mid = ?, inbox_max = ?, last_mid_i = ?, pts = ?, date_i = ? WHERE did = ?"
            org.telegram.SQLite.SQLitePreparedStatement r11 = r11.executeFast(r13)     // Catch:{ Exception -> 0x05db }
            int r13 = r12.date     // Catch:{ Exception -> 0x05db }
            r14 = 1
            r11.bindInteger(r14, r13)     // Catch:{ Exception -> 0x05db }
            r13 = r27
            r15 = 2
            r11.bindLong(r15, r13)     // Catch:{ Exception -> 0x05db }
            int r15 = r12.id     // Catch:{ Exception -> 0x05db }
            r1 = 3
            r11.bindInteger(r1, r15)     // Catch:{ Exception -> 0x05db }
            r1 = 4
            r11.bindLong(r1, r13)     // Catch:{ Exception -> 0x05db }
            r1 = r36
            int r15 = r1.pts     // Catch:{ Exception -> 0x05db }
            r5 = 5
            r11.bindInteger(r5, r15)     // Catch:{ Exception -> 0x05db }
            int r5 = r12.date     // Catch:{ Exception -> 0x05db }
            r15 = 6
            r11.bindInteger(r15, r5)     // Catch:{ Exception -> 0x05db }
            r11.bindLong(r10, r8)     // Catch:{ Exception -> 0x05db }
            r4 = r13
            r14 = -1
            r13 = r11
            goto L_0x03b5
        L_0x0358:
            r1 = r36
            r4 = r27
            org.telegram.SQLite.SQLiteDatabase r13 = r7.database     // Catch:{ Exception -> 0x05db }
            java.lang.String r11 = "REPLACE INTO dialogs VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r13 = r13.executeFast(r11)     // Catch:{ Exception -> 0x05db }
            r11 = 1
            r13.bindLong(r11, r8)     // Catch:{ Exception -> 0x05db }
            int r11 = r12.date     // Catch:{ Exception -> 0x05db }
            r10 = 2
            r13.bindInteger(r10, r11)     // Catch:{ Exception -> 0x05db }
            r10 = 3
            r11 = 0
            r13.bindInteger(r10, r11)     // Catch:{ Exception -> 0x05db }
            r10 = 4
            r13.bindLong(r10, r4)     // Catch:{ Exception -> 0x05db }
            int r10 = r12.id     // Catch:{ Exception -> 0x05db }
            r11 = 5
            r13.bindInteger(r11, r10)     // Catch:{ Exception -> 0x05db }
            r10 = 6
            r11 = 0
            r13.bindInteger(r10, r11)     // Catch:{ Exception -> 0x05db }
            r10 = 7
            r13.bindLong(r10, r4)     // Catch:{ Exception -> 0x05db }
            r10 = 8
            r13.bindInteger(r10, r14)     // Catch:{ Exception -> 0x05db }
            int r10 = r1.pts     // Catch:{ Exception -> 0x05db }
            r14 = 9
            r13.bindInteger(r14, r10)     // Catch:{ Exception -> 0x05db }
            int r10 = r12.date     // Catch:{ Exception -> 0x05db }
            r14 = 10
            r13.bindInteger(r14, r10)     // Catch:{ Exception -> 0x05db }
            r13.bindInteger(r0, r15)     // Catch:{ Exception -> 0x05db }
            r10 = 12
            r14 = r31
            r13.bindInteger(r10, r14)     // Catch:{ Exception -> 0x05db }
            r10 = 13
            r14 = -1
            r13.bindInteger(r10, r14)     // Catch:{ Exception -> 0x05db }
            r10 = 14
            r13.bindNull(r10)     // Catch:{ Exception -> 0x05db }
            android.util.LongSparseArray<java.lang.Boolean> r10 = r7.unknownDialogsIds     // Catch:{ Exception -> 0x05db }
            java.lang.Boolean r15 = java.lang.Boolean.TRUE     // Catch:{ Exception -> 0x05db }
            r10.put(r8, r15)     // Catch:{ Exception -> 0x05db }
        L_0x03b5:
            r13.step()     // Catch:{ Exception -> 0x05db }
            r13.dispose()     // Catch:{ Exception -> 0x05db }
            goto L_0x03c1
        L_0x03bc:
            r1 = r36
            r4 = r27
            r14 = -1
        L_0x03c1:
            r7.fixUnsupportedMedia(r12)     // Catch:{ Exception -> 0x05db }
            r26.requery()     // Catch:{ Exception -> 0x05db }
            org.telegram.tgnet.NativeByteBuffer r10 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x05db }
            int r13 = r12.getObjectSize()     // Catch:{ Exception -> 0x05db }
            r10.<init>((int) r13)     // Catch:{ Exception -> 0x05db }
            r12.serializeToStream(r10)     // Catch:{ Exception -> 0x05db }
            r13 = r26
            r15 = 1
            r13.bindLong(r15, r4)     // Catch:{ Exception -> 0x05db }
            r15 = 2
            r13.bindLong(r15, r8)     // Catch:{ Exception -> 0x05db }
            int r15 = org.telegram.messenger.MessageObject.getUnreadFlags(r12)     // Catch:{ Exception -> 0x05db }
            r11 = 3
            r13.bindInteger(r11, r15)     // Catch:{ Exception -> 0x05db }
            int r11 = r12.send_state     // Catch:{ Exception -> 0x05db }
            r15 = 4
            r13.bindInteger(r15, r11)     // Catch:{ Exception -> 0x05db }
            int r11 = r12.date     // Catch:{ Exception -> 0x05db }
            r15 = 5
            r13.bindInteger(r15, r11)     // Catch:{ Exception -> 0x05db }
            r11 = 6
            r13.bindByteBuffer((int) r11, (org.telegram.tgnet.NativeByteBuffer) r10)     // Catch:{ Exception -> 0x05db }
            boolean r15 = org.telegram.messenger.MessageObject.isOut(r12)     // Catch:{ Exception -> 0x05db }
            if (r15 != 0) goto L_0x0403
            boolean r15 = r12.from_scheduled     // Catch:{ Exception -> 0x05db }
            if (r15 == 0) goto L_0x0400
            goto L_0x0403
        L_0x0400:
            r11 = 7
            r15 = 0
            goto L_0x0405
        L_0x0403:
            r11 = 7
            r15 = 1
        L_0x0405:
            r13.bindInteger(r11, r15)     // Catch:{ Exception -> 0x05db }
            int r11 = r12.ttl     // Catch:{ Exception -> 0x05db }
            r15 = 8
            r13.bindInteger(r15, r11)     // Catch:{ Exception -> 0x05db }
            int r11 = r12.flags     // Catch:{ Exception -> 0x05db }
            r11 = r11 & 1024(0x400, float:1.435E-42)
            if (r11 == 0) goto L_0x041d
            int r11 = r12.views     // Catch:{ Exception -> 0x05db }
            r15 = 9
            r13.bindInteger(r15, r11)     // Catch:{ Exception -> 0x05db }
            goto L_0x0426
        L_0x041d:
            r15 = 9
            int r11 = r7.getMessageMediaType(r12)     // Catch:{ Exception -> 0x05db }
            r13.bindInteger(r15, r11)     // Catch:{ Exception -> 0x05db }
        L_0x0426:
            int r11 = r12.stickerVerified     // Catch:{ Exception -> 0x05db }
            if (r11 != 0) goto L_0x042e
            r11 = 1
        L_0x042b:
            r15 = 10
            goto L_0x0437
        L_0x042e:
            int r11 = r12.stickerVerified     // Catch:{ Exception -> 0x05db }
            r15 = 2
            if (r11 != r15) goto L_0x0435
            r11 = 2
            goto L_0x042b
        L_0x0435:
            r11 = 0
            goto L_0x042b
        L_0x0437:
            r13.bindInteger(r15, r11)     // Catch:{ Exception -> 0x05db }
            boolean r11 = r12.mentioned     // Catch:{ Exception -> 0x05db }
            if (r11 == 0) goto L_0x0440
            r11 = 1
            goto L_0x0441
        L_0x0440:
            r11 = 0
        L_0x0441:
            r13.bindInteger(r0, r11)     // Catch:{ Exception -> 0x05db }
            r13.step()     // Catch:{ Exception -> 0x05db }
            boolean r0 = org.telegram.messenger.MediaDataController.canAddMessageToMedia(r12)     // Catch:{ Exception -> 0x05db }
            if (r0 == 0) goto L_0x0470
            r25.requery()     // Catch:{ Exception -> 0x05db }
            r11 = r25
            r15 = 1
            r11.bindLong(r15, r4)     // Catch:{ Exception -> 0x05db }
            r15 = 2
            r11.bindLong(r15, r8)     // Catch:{ Exception -> 0x05db }
            int r0 = r12.date     // Catch:{ Exception -> 0x05db }
            r15 = 3
            r11.bindInteger(r15, r0)     // Catch:{ Exception -> 0x05db }
            int r0 = org.telegram.messenger.MediaDataController.getMediaType(r12)     // Catch:{ Exception -> 0x05db }
            r14 = 4
            r11.bindInteger(r14, r0)     // Catch:{ Exception -> 0x05db }
            r14 = 5
            r11.bindByteBuffer((int) r14, (org.telegram.tgnet.NativeByteBuffer) r10)     // Catch:{ Exception -> 0x05db }
            r11.step()     // Catch:{ Exception -> 0x05db }
            goto L_0x04ca
        L_0x0470:
            r11 = r25
            r14 = 5
            r15 = 3
            boolean r0 = r12 instanceof org.telegram.tgnet.TLRPC$TL_messageService     // Catch:{ Exception -> 0x05db }
            if (r0 == 0) goto L_0x04ca
            org.telegram.tgnet.TLRPC$MessageAction r0 = r12.action     // Catch:{ Exception -> 0x05db }
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC$TL_messageActionHistoryClear     // Catch:{ Exception -> 0x05db }
            if (r0 == 0) goto L_0x04ca
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x04c3 }
            java.util.Locale r14 = java.util.Locale.US     // Catch:{ Exception -> 0x04c3 }
            java.lang.String r15 = "DELETE FROM media_v2 WHERE mid = %d"
            r25 = r2
            r1 = 1
            java.lang.Object[] r2 = new java.lang.Object[r1]     // Catch:{ Exception -> 0x04c1 }
            int r1 = r12.id     // Catch:{ Exception -> 0x04c1 }
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)     // Catch:{ Exception -> 0x04c1 }
            r22 = 0
            r2[r22] = r1     // Catch:{ Exception -> 0x04c1 }
            java.lang.String r1 = java.lang.String.format(r14, r15, r2)     // Catch:{ Exception -> 0x04c1 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r1)     // Catch:{ Exception -> 0x04c1 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x04c1 }
            r0.dispose()     // Catch:{ Exception -> 0x04c1 }
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x04c1 }
            java.lang.StringBuilder r1 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x04c1 }
            r1.<init>()     // Catch:{ Exception -> 0x04c1 }
            java.lang.String r2 = "DELETE FROM media_counts_v2 WHERE uid = "
            r1.append(r2)     // Catch:{ Exception -> 0x04c1 }
            r1.append(r8)     // Catch:{ Exception -> 0x04c1 }
            java.lang.String r1 = r1.toString()     // Catch:{ Exception -> 0x04c1 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.executeFast(r1)     // Catch:{ Exception -> 0x04c1 }
            org.telegram.SQLite.SQLitePreparedStatement r0 = r0.stepThis()     // Catch:{ Exception -> 0x04c1 }
            r0.dispose()     // Catch:{ Exception -> 0x04c1 }
            goto L_0x04cc
        L_0x04c1:
            r0 = move-exception
            goto L_0x04c6
        L_0x04c3:
            r0 = move-exception
            r25 = r2
        L_0x04c6:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ Exception -> 0x05db }
            goto L_0x04cc
        L_0x04ca:
            r25 = r2
        L_0x04cc:
            r10.reuse()     // Catch:{ Exception -> 0x05db }
            org.telegram.tgnet.TLRPC$MessageMedia r0 = r12.media     // Catch:{ Exception -> 0x05db }
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC$TL_messageMediaPoll     // Catch:{ Exception -> 0x05db }
            if (r0 == 0) goto L_0x04fa
            if (r19 != 0) goto L_0x04df
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x05db }
            java.lang.String r1 = "REPLACE INTO polls VALUES(?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r19 = r0.executeFast(r1)     // Catch:{ Exception -> 0x05db }
        L_0x04df:
            r0 = r19
            org.telegram.tgnet.TLRPC$MessageMedia r1 = r12.media     // Catch:{ Exception -> 0x05db }
            org.telegram.tgnet.TLRPC$TL_messageMediaPoll r1 = (org.telegram.tgnet.TLRPC$TL_messageMediaPoll) r1     // Catch:{ Exception -> 0x05db }
            r0.requery()     // Catch:{ Exception -> 0x05db }
            r2 = 1
            r0.bindLong(r2, r4)     // Catch:{ Exception -> 0x05db }
            org.telegram.tgnet.TLRPC$Poll r1 = r1.poll     // Catch:{ Exception -> 0x05db }
            long r1 = r1.id     // Catch:{ Exception -> 0x05db }
            r4 = 2
            r0.bindLong(r4, r1)     // Catch:{ Exception -> 0x05db }
            r0.step()     // Catch:{ Exception -> 0x05db }
            r19 = r0
            goto L_0x0522
        L_0x04fa:
            org.telegram.tgnet.TLRPC$MessageMedia r0 = r12.media     // Catch:{ Exception -> 0x05db }
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC$TL_messageMediaWebPage     // Catch:{ Exception -> 0x05db }
            if (r0 == 0) goto L_0x0522
            if (r18 != 0) goto L_0x050a
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x05db }
            java.lang.String r1 = "REPLACE INTO webpage_pending VALUES(?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r18 = r0.executeFast(r1)     // Catch:{ Exception -> 0x05db }
        L_0x050a:
            r0 = r18
            r0.requery()     // Catch:{ Exception -> 0x05db }
            org.telegram.tgnet.TLRPC$MessageMedia r1 = r12.media     // Catch:{ Exception -> 0x05db }
            org.telegram.tgnet.TLRPC$WebPage r1 = r1.webpage     // Catch:{ Exception -> 0x05db }
            long r1 = r1.id     // Catch:{ Exception -> 0x05db }
            r10 = 1
            r0.bindLong(r10, r1)     // Catch:{ Exception -> 0x05db }
            r1 = 2
            r0.bindLong(r1, r4)     // Catch:{ Exception -> 0x05db }
            r0.step()     // Catch:{ Exception -> 0x05db }
            r18 = r0
        L_0x0522:
            if (r37 != 0) goto L_0x0537
            boolean r0 = r7.isValidKeyboardToSave(r12)     // Catch:{ Exception -> 0x05db }
            if (r0 == 0) goto L_0x0537
            r1 = r20
            if (r1 == 0) goto L_0x0534
            int r0 = r1.id     // Catch:{ Exception -> 0x05db }
            int r2 = r12.id     // Catch:{ Exception -> 0x05db }
            if (r0 >= r2) goto L_0x0539
        L_0x0534:
            r20 = r12
            goto L_0x053b
        L_0x0537:
            r1 = r20
        L_0x0539:
            r20 = r1
        L_0x053b:
            int r6 = r6 + 1
            r10 = r36
            r5 = r11
            r4 = r13
            r1 = r23
            r0 = r24
            r2 = r25
            r12 = 2
            r13 = 1
            r14 = 0
            r15 = 3
            r11 = r37
            goto L_0x0191
        L_0x054f:
            r25 = r2
            r13 = r4
            r11 = r5
            r1 = r20
            r5 = r21
            r13.dispose()     // Catch:{ Exception -> 0x05db }
            r11.dispose()     // Catch:{ Exception -> 0x05db }
            if (r18 == 0) goto L_0x0562
            r18.dispose()     // Catch:{ Exception -> 0x05db }
        L_0x0562:
            if (r19 == 0) goto L_0x0567
            r19.dispose()     // Catch:{ Exception -> 0x05db }
        L_0x0567:
            if (r1 == 0) goto L_0x0570
            org.telegram.messenger.MediaDataController r2 = r32.getMediaDataController()     // Catch:{ Exception -> 0x05db }
            r2.putBotKeyboard(r8, r1)     // Catch:{ Exception -> 0x05db }
        L_0x0570:
            r1 = 0
            r7.deleteFromDownloadQueue(r3, r1)     // Catch:{ Exception -> 0x05db }
            org.telegram.messenger.FileLoader r2 = r32.getFileLoader()     // Catch:{ Exception -> 0x05db }
            r3 = r25
            r2.deleteFiles(r3, r1)     // Catch:{ Exception -> 0x05db }
            r1 = r36
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r2 = r1.users     // Catch:{ Exception -> 0x05db }
            r7.putUsersInternal(r2)     // Catch:{ Exception -> 0x05db }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r1 = r1.chats     // Catch:{ Exception -> 0x05db }
            r7.putChatsInternal(r1)     // Catch:{ Exception -> 0x05db }
            r1 = 2147483647(0x7fffffff, float:NaN)
            if (r5 == r1) goto L_0x05c9
            org.telegram.SQLite.SQLiteDatabase r1 = r7.database     // Catch:{ Exception -> 0x05db }
            java.util.Locale r2 = java.util.Locale.US     // Catch:{ Exception -> 0x05db }
            java.lang.String r3 = "UPDATE dialogs SET unread_count_i = %d WHERE did = %d"
            r4 = 2
            java.lang.Object[] r4 = new java.lang.Object[r4]     // Catch:{ Exception -> 0x05db }
            java.lang.Integer r6 = java.lang.Integer.valueOf(r5)     // Catch:{ Exception -> 0x05db }
            r10 = 0
            r4[r10] = r6     // Catch:{ Exception -> 0x05db }
            java.lang.Long r6 = java.lang.Long.valueOf(r34)     // Catch:{ Exception -> 0x05db }
            r10 = 1
            r4[r10] = r6     // Catch:{ Exception -> 0x05db }
            java.lang.String r2 = java.lang.String.format(r2, r3, r4)     // Catch:{ Exception -> 0x05db }
            org.telegram.SQLite.SQLitePreparedStatement r1 = r1.executeFast(r2)     // Catch:{ Exception -> 0x05db }
            org.telegram.SQLite.SQLitePreparedStatement r1 = r1.stepThis()     // Catch:{ Exception -> 0x05db }
            r1.dispose()     // Catch:{ Exception -> 0x05db }
            android.util.LongSparseArray r1 = new android.util.LongSparseArray     // Catch:{ Exception -> 0x05db }
            r2 = 1
            r1.<init>(r2)     // Catch:{ Exception -> 0x05db }
            java.lang.Integer r2 = java.lang.Integer.valueOf(r5)     // Catch:{ Exception -> 0x05db }
            r1.put(r8, r2)     // Catch:{ Exception -> 0x05db }
            org.telegram.messenger.MessagesController r2 = r32.getMessagesController()     // Catch:{ Exception -> 0x05db }
            r3 = 0
            r2.processDialogsUpdateRead(r3, r1)     // Catch:{ Exception -> 0x05db }
        L_0x05c9:
            org.telegram.SQLite.SQLiteDatabase r1 = r7.database     // Catch:{ Exception -> 0x05db }
            r1.commitTransaction()     // Catch:{ Exception -> 0x05db }
            if (r39 == 0) goto L_0x05df
            java.util.ArrayList r1 = new java.util.ArrayList     // Catch:{ Exception -> 0x05db }
            r1.<init>()     // Catch:{ Exception -> 0x05db }
            r2 = 0
            r3 = 0
            r7.updateDialogsWithDeletedMessages(r1, r2, r3, r0)     // Catch:{ Exception -> 0x05db }
            goto L_0x05df
        L_0x05db:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
        L_0x05df:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$putMessages$150$MessagesStorage(boolean, long, org.telegram.tgnet.TLRPC$messages_Messages, int, int, boolean):void");
    }

    public static void addUsersAndChatsFromMessage(TLRPC$Message tLRPC$Message, ArrayList<Integer> arrayList, ArrayList<Integer> arrayList2) {
        int i = tLRPC$Message.from_id;
        if (i != 0) {
            if (i > 0) {
                if (!arrayList.contains(Integer.valueOf(i))) {
                    arrayList.add(Integer.valueOf(tLRPC$Message.from_id));
                }
            } else if (!arrayList2.contains(Integer.valueOf(-i))) {
                arrayList2.add(Integer.valueOf(-tLRPC$Message.from_id));
            }
        }
        int i2 = tLRPC$Message.via_bot_id;
        if (i2 != 0 && !arrayList.contains(Integer.valueOf(i2))) {
            arrayList.add(Integer.valueOf(tLRPC$Message.via_bot_id));
        }
        TLRPC$MessageAction tLRPC$MessageAction = tLRPC$Message.action;
        if (tLRPC$MessageAction != null) {
            int i3 = tLRPC$MessageAction.user_id;
            if (i3 != 0 && !arrayList.contains(Integer.valueOf(i3))) {
                arrayList.add(Integer.valueOf(tLRPC$Message.action.user_id));
            }
            int i4 = tLRPC$Message.action.channel_id;
            if (i4 != 0 && !arrayList2.contains(Integer.valueOf(i4))) {
                arrayList2.add(Integer.valueOf(tLRPC$Message.action.channel_id));
            }
            int i5 = tLRPC$Message.action.chat_id;
            if (i5 != 0 && !arrayList2.contains(Integer.valueOf(i5))) {
                arrayList2.add(Integer.valueOf(tLRPC$Message.action.chat_id));
            }
            if (!tLRPC$Message.action.users.isEmpty()) {
                for (int i6 = 0; i6 < tLRPC$Message.action.users.size(); i6++) {
                    Integer num = tLRPC$Message.action.users.get(i6);
                    if (!arrayList.contains(num)) {
                        arrayList.add(num);
                    }
                }
            }
        }
        if (!tLRPC$Message.entities.isEmpty()) {
            for (int i7 = 0; i7 < tLRPC$Message.entities.size(); i7++) {
                TLRPC$MessageEntity tLRPC$MessageEntity = tLRPC$Message.entities.get(i7);
                if (tLRPC$MessageEntity instanceof TLRPC$TL_messageEntityMentionName) {
                    arrayList.add(Integer.valueOf(((TLRPC$TL_messageEntityMentionName) tLRPC$MessageEntity).user_id));
                } else if (tLRPC$MessageEntity instanceof TLRPC$TL_inputMessageEntityMentionName) {
                    arrayList.add(Integer.valueOf(((TLRPC$TL_inputMessageEntityMentionName) tLRPC$MessageEntity).user_id.user_id));
                }
            }
        }
        TLRPC$MessageMedia tLRPC$MessageMedia = tLRPC$Message.media;
        if (tLRPC$MessageMedia != null) {
            int i8 = tLRPC$MessageMedia.user_id;
            if (i8 != 0 && !arrayList.contains(Integer.valueOf(i8))) {
                arrayList.add(Integer.valueOf(tLRPC$Message.media.user_id));
            }
            TLRPC$MessageMedia tLRPC$MessageMedia2 = tLRPC$Message.media;
            if (tLRPC$MessageMedia2 instanceof TLRPC$TL_messageMediaPoll) {
                TLRPC$TL_messageMediaPoll tLRPC$TL_messageMediaPoll = (TLRPC$TL_messageMediaPoll) tLRPC$MessageMedia2;
                if (!tLRPC$TL_messageMediaPoll.results.recent_voters.isEmpty()) {
                    arrayList.addAll(tLRPC$TL_messageMediaPoll.results.recent_voters);
                }
            }
        }
        TLRPC$MessageFwdHeader tLRPC$MessageFwdHeader = tLRPC$Message.fwd_from;
        if (tLRPC$MessageFwdHeader != null) {
            int i9 = tLRPC$MessageFwdHeader.from_id;
            if (i9 != 0 && !arrayList.contains(Integer.valueOf(i9))) {
                arrayList.add(Integer.valueOf(tLRPC$Message.fwd_from.from_id));
            }
            int i10 = tLRPC$Message.fwd_from.channel_id;
            if (i10 != 0 && !arrayList2.contains(Integer.valueOf(i10))) {
                arrayList2.add(Integer.valueOf(tLRPC$Message.fwd_from.channel_id));
            }
            TLRPC$Peer tLRPC$Peer = tLRPC$Message.fwd_from.saved_from_peer;
            if (tLRPC$Peer != null) {
                int i11 = tLRPC$Peer.user_id;
                if (i11 == 0) {
                    int i12 = tLRPC$Peer.channel_id;
                    if (i12 == 0) {
                        int i13 = tLRPC$Peer.chat_id;
                        if (i13 != 0 && !arrayList2.contains(Integer.valueOf(i13))) {
                            arrayList2.add(Integer.valueOf(tLRPC$Message.fwd_from.saved_from_peer.chat_id));
                        }
                    } else if (!arrayList2.contains(Integer.valueOf(i12))) {
                        arrayList2.add(Integer.valueOf(tLRPC$Message.fwd_from.saved_from_peer.channel_id));
                    }
                } else if (!arrayList2.contains(Integer.valueOf(i11))) {
                    arrayList.add(Integer.valueOf(tLRPC$Message.fwd_from.saved_from_peer.user_id));
                }
            }
        }
        int i14 = tLRPC$Message.ttl;
        if (i14 < 0 && !arrayList2.contains(Integer.valueOf(-i14))) {
            arrayList2.add(Integer.valueOf(-tLRPC$Message.ttl));
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:2:0x0003, code lost:
        r11 = getMediaDataController().getDrafts();
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public void getDialogs(int r8, int r9, int r10, boolean r11) {
        /*
            r7 = this;
            r0 = 0
            if (r11 == 0) goto L_0x001f
            org.telegram.messenger.MediaDataController r11 = r7.getMediaDataController()
            android.util.LongSparseArray r11 = r11.getDrafts()
            int r1 = r11.size()
            if (r1 <= 0) goto L_0x001f
            long[] r0 = new long[r1]
            r2 = 0
        L_0x0014:
            if (r2 >= r1) goto L_0x001f
            long r3 = r11.keyAt(r2)
            r0[r2] = r3
            int r2 = r2 + 1
            goto L_0x0014
        L_0x001f:
            r6 = r0
            org.telegram.messenger.DispatchQueue r11 = r7.storageQueue
            org.telegram.messenger.-$$Lambda$MessagesStorage$neA2Bk-BmuXDccnU6AlJ2kWt5Bk r0 = new org.telegram.messenger.-$$Lambda$MessagesStorage$neA2Bk-BmuXDccnU6AlJ2kWt5Bk
            r1 = r0
            r2 = r7
            r3 = r8
            r4 = r9
            r5 = r10
            r1.<init>(r3, r4, r5, r6)
            r11.postRunnable(r0)
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.getDialogs(int, int, int, boolean):void");
    }

    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v117, resolved type: org.telegram.tgnet.TLRPC$TL_dialog} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v118, resolved type: org.telegram.tgnet.TLRPC$TL_dialogFolder} */
    /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r0v119, resolved type: org.telegram.tgnet.TLRPC$TL_dialogFolder} */
    /* JADX WARNING: type inference failed for: r0v35 */
    /* JADX WARNING: Failed to insert additional move for type inference */
    /* JADX WARNING: Multi-variable type inference failed */
    /* JADX WARNING: Removed duplicated region for block: B:111:0x027a A[Catch:{ Exception -> 0x0448 }] */
    /* JADX WARNING: Removed duplicated region for block: B:118:0x02a1 A[Catch:{ Exception -> 0x0448 }] */
    /* JADX WARNING: Removed duplicated region for block: B:40:0x0137 A[Catch:{ Exception -> 0x0448 }] */
    /* JADX WARNING: Removed duplicated region for block: B:41:0x0139 A[Catch:{ Exception -> 0x0448 }] */
    /* JADX WARNING: Removed duplicated region for block: B:44:0x014e A[Catch:{ Exception -> 0x0448 }] */
    /* JADX WARNING: Removed duplicated region for block: B:45:0x0150 A[Catch:{ Exception -> 0x0448 }] */
    /* JADX WARNING: Removed duplicated region for block: B:48:0x016b A[Catch:{ Exception -> 0x0448 }] */
    /* JADX WARNING: Removed duplicated region for block: B:53:0x0186 A[Catch:{ Exception -> 0x0448 }] */
    /* JADX WARNING: Removed duplicated region for block: B:56:0x0194 A[Catch:{ Exception -> 0x0448 }] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$getDialogs$152$MessagesStorage(int r25, int r26, int r27, long[] r28) {
        /*
            r24 = this;
            r1 = r24
            r2 = r28
            org.telegram.tgnet.TLRPC$TL_messages_dialogs r12 = new org.telegram.tgnet.TLRPC$TL_messages_dialogs
            r12.<init>()
            java.util.ArrayList r13 = new java.util.ArrayList
            r13.<init>()
            java.util.ArrayList r3 = new java.util.ArrayList     // Catch:{ Exception -> 0x044e }
            r3.<init>()     // Catch:{ Exception -> 0x044e }
            org.telegram.messenger.UserConfig r0 = r24.getUserConfig()     // Catch:{ Exception -> 0x044e }
            int r0 = r0.getClientUserId()     // Catch:{ Exception -> 0x044e }
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)     // Catch:{ Exception -> 0x044e }
            r3.add(r0)     // Catch:{ Exception -> 0x044e }
            java.util.ArrayList r4 = new java.util.ArrayList     // Catch:{ Exception -> 0x044e }
            r4.<init>()     // Catch:{ Exception -> 0x044e }
            java.util.ArrayList r5 = new java.util.ArrayList     // Catch:{ Exception -> 0x044e }
            r5.<init>()     // Catch:{ Exception -> 0x044e }
            java.util.ArrayList r6 = new java.util.ArrayList     // Catch:{ Exception -> 0x044e }
            r6.<init>()     // Catch:{ Exception -> 0x044e }
            java.util.ArrayList r7 = new java.util.ArrayList     // Catch:{ Exception -> 0x044e }
            r7.<init>()     // Catch:{ Exception -> 0x044e }
            android.util.LongSparseArray r8 = new android.util.LongSparseArray     // Catch:{ Exception -> 0x044e }
            r8.<init>()     // Catch:{ Exception -> 0x044e }
            java.util.ArrayList r9 = new java.util.ArrayList     // Catch:{ Exception -> 0x044e }
            r10 = 2
            r9.<init>(r10)     // Catch:{ Exception -> 0x044e }
            java.lang.Integer r0 = java.lang.Integer.valueOf(r25)     // Catch:{ Exception -> 0x044e }
            r9.add(r0)     // Catch:{ Exception -> 0x044e }
            r14 = 0
        L_0x0049:
            int r0 = r9.size()     // Catch:{ Exception -> 0x044e }
            r15 = 3
            if (r14 >= r0) goto L_0x02d9
            java.lang.Object r0 = r9.get(r14)     // Catch:{ Exception -> 0x02d3 }
            java.lang.Integer r0 = (java.lang.Integer) r0     // Catch:{ Exception -> 0x02d3 }
            int r0 = r0.intValue()     // Catch:{ Exception -> 0x02d3 }
            if (r14 != 0) goto L_0x0061
            r18 = r26
            r17 = r27
            goto L_0x0065
        L_0x0061:
            r17 = 100
            r18 = 0
        L_0x0065:
            org.telegram.SQLite.SQLiteDatabase r10 = r1.database     // Catch:{ Exception -> 0x02d3 }
            java.util.Locale r11 = java.util.Locale.US     // Catch:{ Exception -> 0x02d3 }
            r21 = r13
            java.lang.String r13 = "SELECT d.did, d.last_mid, d.unread_count, d.date, m.data, m.read_state, m.mid, m.send_state, s.flags, m.date, d.pts, d.inbox_max, d.outbox_max, m.replydata, d.pinned, d.unread_count_i, d.flags, d.folder_id, d.data FROM dialogs as d LEFT JOIN messages as m ON d.last_mid = m.mid LEFT JOIN dialog_settings as s ON d.did = s.did WHERE d.folder_id = %d ORDER BY d.pinned DESC, d.date DESC LIMIT %d,%d"
            java.lang.Object[] r1 = new java.lang.Object[r15]     // Catch:{ Exception -> 0x0448 }
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)     // Catch:{ Exception -> 0x0448 }
            r20 = 0
            r1[r20] = r0     // Catch:{ Exception -> 0x0448 }
            java.lang.Integer r0 = java.lang.Integer.valueOf(r18)     // Catch:{ Exception -> 0x0448 }
            r18 = 1
            r1[r18] = r0     // Catch:{ Exception -> 0x0448 }
            java.lang.Integer r0 = java.lang.Integer.valueOf(r17)     // Catch:{ Exception -> 0x0448 }
            r16 = 2
            r1[r16] = r0     // Catch:{ Exception -> 0x0448 }
            java.lang.String r0 = java.lang.String.format(r11, r13, r1)     // Catch:{ Exception -> 0x0448 }
            r1 = 0
            java.lang.Object[] r11 = new java.lang.Object[r1]     // Catch:{ Exception -> 0x0448 }
            org.telegram.SQLite.SQLiteCursor r10 = r10.queryFinalized(r0, r11)     // Catch:{ Exception -> 0x0448 }
        L_0x0092:
            boolean r0 = r10.next()     // Catch:{ Exception -> 0x0448 }
            if (r0 == 0) goto L_0x02bc
            r11 = r7
            r13 = r8
            long r7 = r10.longValue(r1)     // Catch:{ Exception -> 0x0448 }
            boolean r0 = org.telegram.messenger.DialogObject.isFolderDialogId(r7)     // Catch:{ Exception -> 0x0448 }
            if (r0 == 0) goto L_0x00e5
            org.telegram.tgnet.TLRPC$TL_dialogFolder r0 = new org.telegram.tgnet.TLRPC$TL_dialogFolder     // Catch:{ Exception -> 0x0448 }
            r0.<init>()     // Catch:{ Exception -> 0x0448 }
            r1 = 18
            boolean r17 = r10.isNull(r1)     // Catch:{ Exception -> 0x0448 }
            if (r17 != 0) goto L_0x00d5
            org.telegram.tgnet.NativeByteBuffer r1 = r10.byteBufferValue(r1)     // Catch:{ Exception -> 0x0448 }
            if (r1 == 0) goto L_0x00c5
            r18 = r11
            r15 = 0
            int r11 = r1.readInt32(r15)     // Catch:{ Exception -> 0x0448 }
            org.telegram.tgnet.TLRPC$TL_folder r11 = org.telegram.tgnet.TLRPC$TL_folder.TLdeserialize(r1, r11, r15)     // Catch:{ Exception -> 0x0448 }
            r0.folder = r11     // Catch:{ Exception -> 0x0448 }
            goto L_0x00d1
        L_0x00c5:
            r18 = r11
            org.telegram.tgnet.TLRPC$TL_folder r11 = new org.telegram.tgnet.TLRPC$TL_folder     // Catch:{ Exception -> 0x0448 }
            r11.<init>()     // Catch:{ Exception -> 0x0448 }
            r0.folder = r11     // Catch:{ Exception -> 0x0448 }
            int r15 = (int) r7     // Catch:{ Exception -> 0x0448 }
            r11.id = r15     // Catch:{ Exception -> 0x0448 }
        L_0x00d1:
            r1.reuse()     // Catch:{ Exception -> 0x0448 }
            goto L_0x00d7
        L_0x00d5:
            r18 = r11
        L_0x00d7:
            if (r14 != 0) goto L_0x00ec
            org.telegram.tgnet.TLRPC$TL_folder r1 = r0.folder     // Catch:{ Exception -> 0x0448 }
            int r1 = r1.id     // Catch:{ Exception -> 0x0448 }
            java.lang.Integer r1 = java.lang.Integer.valueOf(r1)     // Catch:{ Exception -> 0x0448 }
            r9.add(r1)     // Catch:{ Exception -> 0x0448 }
            goto L_0x00ec
        L_0x00e5:
            r18 = r11
            org.telegram.tgnet.TLRPC$TL_dialog r0 = new org.telegram.tgnet.TLRPC$TL_dialog     // Catch:{ Exception -> 0x0448 }
            r0.<init>()     // Catch:{ Exception -> 0x0448 }
        L_0x00ec:
            r1 = r0
            r1.id = r7     // Catch:{ Exception -> 0x0448 }
            r11 = 1
            int r0 = r10.intValue(r11)     // Catch:{ Exception -> 0x0448 }
            r1.top_message = r0     // Catch:{ Exception -> 0x0448 }
            r11 = 2
            int r0 = r10.intValue(r11)     // Catch:{ Exception -> 0x0448 }
            r1.unread_count = r0     // Catch:{ Exception -> 0x0448 }
            r11 = 3
            int r0 = r10.intValue(r11)     // Catch:{ Exception -> 0x0448 }
            r1.last_message_date = r0     // Catch:{ Exception -> 0x0448 }
            r0 = 10
            int r0 = r10.intValue(r0)     // Catch:{ Exception -> 0x0448 }
            r1.pts = r0     // Catch:{ Exception -> 0x0448 }
            if (r0 == 0) goto L_0x0118
            r15 = r13
            r11 = r14
            long r13 = r1.id     // Catch:{ Exception -> 0x0448 }
            int r0 = (int) r13     // Catch:{ Exception -> 0x0448 }
            if (r0 <= 0) goto L_0x0116
            goto L_0x011a
        L_0x0116:
            r0 = 1
            goto L_0x011b
        L_0x0118:
            r15 = r13
            r11 = r14
        L_0x011a:
            r0 = 0
        L_0x011b:
            r1.flags = r0     // Catch:{ Exception -> 0x0448 }
            r0 = 11
            int r0 = r10.intValue(r0)     // Catch:{ Exception -> 0x0448 }
            r1.read_inbox_max_id = r0     // Catch:{ Exception -> 0x0448 }
            r0 = 12
            int r0 = r10.intValue(r0)     // Catch:{ Exception -> 0x0448 }
            r1.read_outbox_max_id = r0     // Catch:{ Exception -> 0x0448 }
            r0 = 14
            int r0 = r10.intValue(r0)     // Catch:{ Exception -> 0x0448 }
            r1.pinnedNum = r0     // Catch:{ Exception -> 0x0448 }
            if (r0 == 0) goto L_0x0139
            r0 = 1
            goto L_0x013a
        L_0x0139:
            r0 = 0
        L_0x013a:
            r1.pinned = r0     // Catch:{ Exception -> 0x0448 }
            r0 = 15
            int r0 = r10.intValue(r0)     // Catch:{ Exception -> 0x0448 }
            r1.unread_mentions_count = r0     // Catch:{ Exception -> 0x0448 }
            r0 = 16
            int r0 = r10.intValue(r0)     // Catch:{ Exception -> 0x0448 }
            r13 = 1
            r0 = r0 & r13
            if (r0 == 0) goto L_0x0150
            r0 = 1
            goto L_0x0151
        L_0x0150:
            r0 = 0
        L_0x0151:
            r1.unread_mark = r0     // Catch:{ Exception -> 0x0448 }
            r0 = 8
            long r13 = r10.longValue(r0)     // Catch:{ Exception -> 0x0448 }
            int r0 = (int) r13     // Catch:{ Exception -> 0x0448 }
            r22 = r9
            org.telegram.tgnet.TLRPC$TL_peerNotifySettings r9 = new org.telegram.tgnet.TLRPC$TL_peerNotifySettings     // Catch:{ Exception -> 0x0448 }
            r9.<init>()     // Catch:{ Exception -> 0x0448 }
            r1.notify_settings = r9     // Catch:{ Exception -> 0x0448 }
            r19 = 1
            r0 = r0 & 1
            r23 = 32
            if (r0 == 0) goto L_0x0177
            long r13 = r13 >> r23
            int r0 = (int) r13     // Catch:{ Exception -> 0x0448 }
            r9.mute_until = r0     // Catch:{ Exception -> 0x0448 }
            if (r0 != 0) goto L_0x0177
            r0 = 2147483647(0x7fffffff, float:NaN)
            r9.mute_until = r0     // Catch:{ Exception -> 0x0448 }
        L_0x0177:
            r0 = 17
            int r0 = r10.intValue(r0)     // Catch:{ Exception -> 0x0448 }
            r1.folder_id = r0     // Catch:{ Exception -> 0x0448 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r0 = r12.dialogs     // Catch:{ Exception -> 0x0448 }
            r0.add(r1)     // Catch:{ Exception -> 0x0448 }
            if (r2 == 0) goto L_0x018d
            java.lang.Long r0 = java.lang.Long.valueOf(r7)     // Catch:{ Exception -> 0x0448 }
            r6.add(r0)     // Catch:{ Exception -> 0x0448 }
        L_0x018d:
            r0 = 4
            org.telegram.tgnet.NativeByteBuffer r0 = r10.byteBufferValue(r0)     // Catch:{ Exception -> 0x0448 }
            if (r0 == 0) goto L_0x026c
            r7 = 0
            int r8 = r0.readInt32(r7)     // Catch:{ Exception -> 0x0448 }
            org.telegram.tgnet.TLRPC$Message r8 = org.telegram.tgnet.TLRPC$Message.TLdeserialize(r0, r8, r7)     // Catch:{ Exception -> 0x0448 }
            org.telegram.messenger.UserConfig r7 = r24.getUserConfig()     // Catch:{ Exception -> 0x0448 }
            int r7 = r7.clientUserId     // Catch:{ Exception -> 0x0448 }
            r8.readAttachPath(r0, r7)     // Catch:{ Exception -> 0x0448 }
            r0.reuse()     // Catch:{ Exception -> 0x0448 }
            if (r8 == 0) goto L_0x026c
            r0 = 5
            int r0 = r10.intValue(r0)     // Catch:{ Exception -> 0x0448 }
            org.telegram.messenger.MessageObject.setUnreadFlags(r8, r0)     // Catch:{ Exception -> 0x0448 }
            r0 = 6
            int r0 = r10.intValue(r0)     // Catch:{ Exception -> 0x0448 }
            r8.id = r0     // Catch:{ Exception -> 0x0448 }
            r0 = 9
            int r0 = r10.intValue(r0)     // Catch:{ Exception -> 0x0448 }
            if (r0 == 0) goto L_0x01c4
            r1.last_message_date = r0     // Catch:{ Exception -> 0x0448 }
        L_0x01c4:
            r0 = 7
            int r0 = r10.intValue(r0)     // Catch:{ Exception -> 0x0448 }
            r8.send_state = r0     // Catch:{ Exception -> 0x0448 }
            long r13 = r1.id     // Catch:{ Exception -> 0x0448 }
            r8.dialog_id = r13     // Catch:{ Exception -> 0x0448 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r0 = r12.messages     // Catch:{ Exception -> 0x0448 }
            r0.add(r8)     // Catch:{ Exception -> 0x0448 }
            addUsersAndChatsFromMessage(r8, r3, r4)     // Catch:{ Exception -> 0x0448 }
            int r0 = r8.reply_to_msg_id     // Catch:{ Exception -> 0x0263 }
            if (r0 == 0) goto L_0x026c
            org.telegram.tgnet.TLRPC$MessageAction r0 = r8.action     // Catch:{ Exception -> 0x0263 }
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC$TL_messageActionPinMessage     // Catch:{ Exception -> 0x0263 }
            if (r0 != 0) goto L_0x01ed
            org.telegram.tgnet.TLRPC$MessageAction r0 = r8.action     // Catch:{ Exception -> 0x0263 }
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC$TL_messageActionPaymentSent     // Catch:{ Exception -> 0x0263 }
            if (r0 != 0) goto L_0x01ed
            org.telegram.tgnet.TLRPC$MessageAction r0 = r8.action     // Catch:{ Exception -> 0x0263 }
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC$TL_messageActionGameScore     // Catch:{ Exception -> 0x0263 }
            if (r0 == 0) goto L_0x026c
        L_0x01ed:
            r0 = 13
            boolean r7 = r10.isNull(r0)     // Catch:{ Exception -> 0x0263 }
            if (r7 != 0) goto L_0x022a
            org.telegram.tgnet.NativeByteBuffer r0 = r10.byteBufferValue(r0)     // Catch:{ Exception -> 0x0263 }
            if (r0 == 0) goto L_0x022a
            r7 = 0
            int r9 = r0.readInt32(r7)     // Catch:{ Exception -> 0x0263 }
            org.telegram.tgnet.TLRPC$Message r9 = org.telegram.tgnet.TLRPC$Message.TLdeserialize(r0, r9, r7)     // Catch:{ Exception -> 0x0263 }
            r8.replyMessage = r9     // Catch:{ Exception -> 0x0263 }
            org.telegram.messenger.UserConfig r7 = r24.getUserConfig()     // Catch:{ Exception -> 0x0263 }
            int r7 = r7.clientUserId     // Catch:{ Exception -> 0x0263 }
            r9.readAttachPath(r0, r7)     // Catch:{ Exception -> 0x0263 }
            r0.reuse()     // Catch:{ Exception -> 0x0263 }
            org.telegram.tgnet.TLRPC$Message r0 = r8.replyMessage     // Catch:{ Exception -> 0x0263 }
            if (r0 == 0) goto L_0x022a
            boolean r0 = org.telegram.messenger.MessageObject.isMegagroup(r8)     // Catch:{ Exception -> 0x0263 }
            if (r0 == 0) goto L_0x0225
            org.telegram.tgnet.TLRPC$Message r0 = r8.replyMessage     // Catch:{ Exception -> 0x0263 }
            int r7 = r0.flags     // Catch:{ Exception -> 0x0263 }
            r9 = -2147483648(0xfffffffvar_, float:-0.0)
            r7 = r7 | r9
            r0.flags = r7     // Catch:{ Exception -> 0x0263 }
        L_0x0225:
            org.telegram.tgnet.TLRPC$Message r0 = r8.replyMessage     // Catch:{ Exception -> 0x0263 }
            addUsersAndChatsFromMessage(r0, r3, r4)     // Catch:{ Exception -> 0x0263 }
        L_0x022a:
            org.telegram.tgnet.TLRPC$Message r0 = r8.replyMessage     // Catch:{ Exception -> 0x0263 }
            if (r0 != 0) goto L_0x026c
            int r0 = r8.reply_to_msg_id     // Catch:{ Exception -> 0x0263 }
            long r13 = (long) r0     // Catch:{ Exception -> 0x0263 }
            org.telegram.tgnet.TLRPC$Peer r0 = r8.to_id     // Catch:{ Exception -> 0x0263 }
            int r0 = r0.channel_id     // Catch:{ Exception -> 0x0263 }
            if (r0 == 0) goto L_0x0241
            org.telegram.tgnet.TLRPC$Peer r0 = r8.to_id     // Catch:{ Exception -> 0x0263 }
            int r0 = r0.channel_id     // Catch:{ Exception -> 0x0263 }
            r9 = r6
            long r6 = (long) r0
            long r6 = r6 << r23
            long r13 = r13 | r6
            goto L_0x0242
        L_0x0241:
            r9 = r6
        L_0x0242:
            java.lang.Long r0 = java.lang.Long.valueOf(r13)     // Catch:{ Exception -> 0x0261 }
            r6 = r18
            boolean r0 = r6.contains(r0)     // Catch:{ Exception -> 0x025e }
            if (r0 != 0) goto L_0x0255
            java.lang.Long r0 = java.lang.Long.valueOf(r13)     // Catch:{ Exception -> 0x025e }
            r6.add(r0)     // Catch:{ Exception -> 0x025e }
        L_0x0255:
            long r13 = r1.id     // Catch:{ Exception -> 0x025e }
            r7 = r15
            r7.put(r13, r8)     // Catch:{ Exception -> 0x025c }
            goto L_0x0270
        L_0x025c:
            r0 = move-exception
            goto L_0x0268
        L_0x025e:
            r0 = move-exception
            r7 = r15
            goto L_0x0268
        L_0x0261:
            r0 = move-exception
            goto L_0x0265
        L_0x0263:
            r0 = move-exception
            r9 = r6
        L_0x0265:
            r7 = r15
            r6 = r18
        L_0x0268:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)     // Catch:{ Exception -> 0x0448 }
            goto L_0x0270
        L_0x026c:
            r9 = r6
            r7 = r15
            r6 = r18
        L_0x0270:
            long r13 = r1.id     // Catch:{ Exception -> 0x0448 }
            int r0 = (int) r13     // Catch:{ Exception -> 0x0448 }
            long r13 = r1.id     // Catch:{ Exception -> 0x0448 }
            long r13 = r13 >> r23
            int r1 = (int) r13     // Catch:{ Exception -> 0x0448 }
            if (r0 == 0) goto L_0x02a1
            if (r0 <= 0) goto L_0x028e
            java.lang.Integer r1 = java.lang.Integer.valueOf(r0)     // Catch:{ Exception -> 0x0448 }
            boolean r1 = r3.contains(r1)     // Catch:{ Exception -> 0x0448 }
            if (r1 != 0) goto L_0x02b2
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)     // Catch:{ Exception -> 0x0448 }
            r3.add(r0)     // Catch:{ Exception -> 0x0448 }
            goto L_0x02b2
        L_0x028e:
            int r0 = -r0
            java.lang.Integer r1 = java.lang.Integer.valueOf(r0)     // Catch:{ Exception -> 0x0448 }
            boolean r1 = r4.contains(r1)     // Catch:{ Exception -> 0x0448 }
            if (r1 != 0) goto L_0x02b2
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)     // Catch:{ Exception -> 0x0448 }
            r4.add(r0)     // Catch:{ Exception -> 0x0448 }
            goto L_0x02b2
        L_0x02a1:
            java.lang.Integer r0 = java.lang.Integer.valueOf(r1)     // Catch:{ Exception -> 0x0448 }
            boolean r0 = r5.contains(r0)     // Catch:{ Exception -> 0x0448 }
            if (r0 != 0) goto L_0x02b2
            java.lang.Integer r0 = java.lang.Integer.valueOf(r1)     // Catch:{ Exception -> 0x0448 }
            r5.add(r0)     // Catch:{ Exception -> 0x0448 }
        L_0x02b2:
            r8 = r7
            r14 = r11
            r1 = 0
            r15 = 3
            r7 = r6
            r6 = r9
            r9 = r22
            goto L_0x0092
        L_0x02bc:
            r22 = r9
            r11 = r14
            r9 = r6
            r6 = r7
            r7 = r8
            r10.dispose()     // Catch:{ Exception -> 0x0448 }
            int r14 = r11 + 1
            r1 = r24
            r8 = r7
            r13 = r21
            r10 = 2
            r7 = r6
            r6 = r9
            r9 = r22
            goto L_0x0049
        L_0x02d3:
            r0 = move-exception
            r14 = r13
            r13 = r24
            goto L_0x0451
        L_0x02d9:
            r9 = r6
            r6 = r7
            r7 = r8
            r21 = r13
            boolean r0 = r6.isEmpty()     // Catch:{ Exception -> 0x0448 }
            java.lang.String r1 = ","
            if (r0 != 0) goto L_0x0367
            r13 = r24
            org.telegram.SQLite.SQLiteDatabase r0 = r13.database     // Catch:{ Exception -> 0x0364 }
            java.util.Locale r8 = java.util.Locale.US     // Catch:{ Exception -> 0x0364 }
            java.lang.String r10 = "SELECT data, mid, date, uid FROM messages WHERE mid IN(%s)"
            r11 = 1
            java.lang.Object[] r14 = new java.lang.Object[r11]     // Catch:{ Exception -> 0x0364 }
            java.lang.String r6 = android.text.TextUtils.join(r1, r6)     // Catch:{ Exception -> 0x0364 }
            r11 = 0
            r14[r11] = r6     // Catch:{ Exception -> 0x0364 }
            java.lang.String r6 = java.lang.String.format(r8, r10, r14)     // Catch:{ Exception -> 0x0364 }
            java.lang.Object[] r8 = new java.lang.Object[r11]     // Catch:{ Exception -> 0x0364 }
            org.telegram.SQLite.SQLiteCursor r0 = r0.queryFinalized(r6, r8)     // Catch:{ Exception -> 0x0364 }
        L_0x0302:
            boolean r6 = r0.next()     // Catch:{ Exception -> 0x0364 }
            if (r6 == 0) goto L_0x0360
            org.telegram.tgnet.NativeByteBuffer r6 = r0.byteBufferValue(r11)     // Catch:{ Exception -> 0x0364 }
            if (r6 == 0) goto L_0x035a
            int r8 = r6.readInt32(r11)     // Catch:{ Exception -> 0x0364 }
            org.telegram.tgnet.TLRPC$Message r8 = org.telegram.tgnet.TLRPC$Message.TLdeserialize(r6, r8, r11)     // Catch:{ Exception -> 0x0364 }
            org.telegram.messenger.UserConfig r10 = r24.getUserConfig()     // Catch:{ Exception -> 0x0364 }
            int r10 = r10.clientUserId     // Catch:{ Exception -> 0x0364 }
            r8.readAttachPath(r6, r10)     // Catch:{ Exception -> 0x0364 }
            r6.reuse()     // Catch:{ Exception -> 0x0364 }
            r6 = 1
            int r10 = r0.intValue(r6)     // Catch:{ Exception -> 0x0364 }
            r8.id = r10     // Catch:{ Exception -> 0x0364 }
            r6 = 2
            int r10 = r0.intValue(r6)     // Catch:{ Exception -> 0x0364 }
            r8.date = r10     // Catch:{ Exception -> 0x0364 }
            r10 = 3
            long r14 = r0.longValue(r10)     // Catch:{ Exception -> 0x0364 }
            r8.dialog_id = r14     // Catch:{ Exception -> 0x0364 }
            addUsersAndChatsFromMessage(r8, r3, r4)     // Catch:{ Exception -> 0x0364 }
            long r14 = r8.dialog_id     // Catch:{ Exception -> 0x0364 }
            java.lang.Object r11 = r7.get(r14)     // Catch:{ Exception -> 0x0364 }
            org.telegram.tgnet.TLRPC$Message r11 = (org.telegram.tgnet.TLRPC$Message) r11     // Catch:{ Exception -> 0x0364 }
            if (r11 == 0) goto L_0x035c
            r11.replyMessage = r8     // Catch:{ Exception -> 0x0364 }
            long r14 = r11.dialog_id     // Catch:{ Exception -> 0x0364 }
            r8.dialog_id = r14     // Catch:{ Exception -> 0x0364 }
            boolean r8 = org.telegram.messenger.MessageObject.isMegagroup(r11)     // Catch:{ Exception -> 0x0364 }
            if (r8 == 0) goto L_0x035c
            org.telegram.tgnet.TLRPC$Message r8 = r11.replyMessage     // Catch:{ Exception -> 0x0364 }
            int r11 = r8.flags     // Catch:{ Exception -> 0x0364 }
            r14 = -2147483648(0xfffffffvar_, float:-0.0)
            r11 = r11 | r14
            r8.flags = r11     // Catch:{ Exception -> 0x0364 }
            goto L_0x035e
        L_0x035a:
            r6 = 2
            r10 = 3
        L_0x035c:
            r14 = -2147483648(0xfffffffvar_, float:-0.0)
        L_0x035e:
            r11 = 0
            goto L_0x0302
        L_0x0360:
            r0.dispose()     // Catch:{ Exception -> 0x0364 }
            goto L_0x0369
        L_0x0364:
            r0 = move-exception
            goto L_0x044b
        L_0x0367:
            r13 = r24
        L_0x0369:
            if (r2 == 0) goto L_0x0402
            java.util.ArrayList r0 = new java.util.ArrayList     // Catch:{ Exception -> 0x0364 }
            r0.<init>()     // Catch:{ Exception -> 0x0364 }
            r6 = 0
        L_0x0371:
            int r7 = r2.length     // Catch:{ Exception -> 0x0364 }
            if (r6 >= r7) goto L_0x03b5
            r7 = r2[r6]     // Catch:{ Exception -> 0x0364 }
            int r8 = (int) r7     // Catch:{ Exception -> 0x0364 }
            if (r8 <= 0) goto L_0x038b
            java.lang.Integer r7 = java.lang.Integer.valueOf(r8)     // Catch:{ Exception -> 0x0364 }
            boolean r7 = r3.contains(r7)     // Catch:{ Exception -> 0x0364 }
            if (r7 != 0) goto L_0x039d
            java.lang.Integer r7 = java.lang.Integer.valueOf(r8)     // Catch:{ Exception -> 0x0364 }
            r3.add(r7)     // Catch:{ Exception -> 0x0364 }
            goto L_0x039d
        L_0x038b:
            int r7 = -r8
            java.lang.Integer r8 = java.lang.Integer.valueOf(r7)     // Catch:{ Exception -> 0x0364 }
            boolean r8 = r4.contains(r8)     // Catch:{ Exception -> 0x0364 }
            if (r8 != 0) goto L_0x039d
            java.lang.Integer r7 = java.lang.Integer.valueOf(r7)     // Catch:{ Exception -> 0x0364 }
            r4.add(r7)     // Catch:{ Exception -> 0x0364 }
        L_0x039d:
            r7 = r2[r6]     // Catch:{ Exception -> 0x0364 }
            java.lang.Long r7 = java.lang.Long.valueOf(r7)     // Catch:{ Exception -> 0x0364 }
            boolean r7 = r9.contains(r7)     // Catch:{ Exception -> 0x0364 }
            if (r7 != 0) goto L_0x03b2
            r7 = r2[r6]     // Catch:{ Exception -> 0x0364 }
            java.lang.Long r7 = java.lang.Long.valueOf(r7)     // Catch:{ Exception -> 0x0364 }
            r0.add(r7)     // Catch:{ Exception -> 0x0364 }
        L_0x03b2:
            int r6 = r6 + 1
            goto L_0x0371
        L_0x03b5:
            boolean r2 = r0.isEmpty()     // Catch:{ Exception -> 0x0364 }
            if (r2 != 0) goto L_0x03f9
            android.util.LongSparseArray r2 = new android.util.LongSparseArray     // Catch:{ Exception -> 0x0364 }
            int r6 = r0.size()     // Catch:{ Exception -> 0x0364 }
            r2.<init>(r6)     // Catch:{ Exception -> 0x0364 }
            org.telegram.SQLite.SQLiteDatabase r6 = r13.database     // Catch:{ Exception -> 0x0364 }
            java.util.Locale r7 = java.util.Locale.US     // Catch:{ Exception -> 0x0364 }
            java.lang.String r8 = "SELECT did, folder_id FROM dialogs WHERE did IN(%s)"
            r9 = 1
            java.lang.Object[] r10 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x0364 }
            java.lang.String r0 = android.text.TextUtils.join(r1, r0)     // Catch:{ Exception -> 0x0364 }
            r9 = 0
            r10[r9] = r0     // Catch:{ Exception -> 0x0364 }
            java.lang.String r0 = java.lang.String.format(r7, r8, r10)     // Catch:{ Exception -> 0x0364 }
            java.lang.Object[] r7 = new java.lang.Object[r9]     // Catch:{ Exception -> 0x0364 }
            org.telegram.SQLite.SQLiteCursor r0 = r6.queryFinalized(r0, r7)     // Catch:{ Exception -> 0x0364 }
        L_0x03de:
            boolean r6 = r0.next()     // Catch:{ Exception -> 0x0364 }
            if (r6 == 0) goto L_0x03f5
            long r6 = r0.longValue(r9)     // Catch:{ Exception -> 0x0364 }
            r8 = 1
            int r10 = r0.intValue(r8)     // Catch:{ Exception -> 0x0364 }
            java.lang.Integer r10 = java.lang.Integer.valueOf(r10)     // Catch:{ Exception -> 0x0364 }
            r2.put(r6, r10)     // Catch:{ Exception -> 0x0364 }
            goto L_0x03de
        L_0x03f5:
            r0.dispose()     // Catch:{ Exception -> 0x0364 }
            goto L_0x03fa
        L_0x03f9:
            r2 = 0
        L_0x03fa:
            org.telegram.messenger.-$$Lambda$MessagesStorage$l6tj9gY8XVKOkyTO6lNYUvWPeTA r0 = new org.telegram.messenger.-$$Lambda$MessagesStorage$l6tj9gY8XVKOkyTO6lNYUvWPeTA     // Catch:{ Exception -> 0x0364 }
            r0.<init>(r2)     // Catch:{ Exception -> 0x0364 }
            org.telegram.messenger.AndroidUtilities.runOnUIThread(r0)     // Catch:{ Exception -> 0x0364 }
        L_0x0402:
            boolean r0 = r5.isEmpty()     // Catch:{ Exception -> 0x0364 }
            if (r0 != 0) goto L_0x0412
            java.lang.String r0 = android.text.TextUtils.join(r1, r5)     // Catch:{ Exception -> 0x0364 }
            r14 = r21
            r13.getEncryptedChatsInternal(r0, r14, r3)     // Catch:{ Exception -> 0x0446 }
            goto L_0x0414
        L_0x0412:
            r14 = r21
        L_0x0414:
            boolean r0 = r4.isEmpty()     // Catch:{ Exception -> 0x0446 }
            if (r0 != 0) goto L_0x0423
            java.lang.String r0 = android.text.TextUtils.join(r1, r4)     // Catch:{ Exception -> 0x0446 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r2 = r12.chats     // Catch:{ Exception -> 0x0446 }
            r13.getChatsInternal(r0, r2)     // Catch:{ Exception -> 0x0446 }
        L_0x0423:
            boolean r0 = r3.isEmpty()     // Catch:{ Exception -> 0x0446 }
            if (r0 != 0) goto L_0x0432
            java.lang.String r0 = android.text.TextUtils.join(r1, r3)     // Catch:{ Exception -> 0x0446 }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r1 = r12.users     // Catch:{ Exception -> 0x0446 }
            r13.getUsersInternal(r0, r1)     // Catch:{ Exception -> 0x0446 }
        L_0x0432:
            org.telegram.messenger.MessagesController r2 = r24.getMessagesController()     // Catch:{ Exception -> 0x0446 }
            r8 = 1
            r9 = 0
            r10 = 0
            r11 = 1
            r3 = r12
            r4 = r14
            r5 = r25
            r6 = r26
            r7 = r27
            r2.processLoadedDialogs(r3, r4, r5, r6, r7, r8, r9, r10, r11)     // Catch:{ Exception -> 0x0446 }
            goto L_0x0478
        L_0x0446:
            r0 = move-exception
            goto L_0x0451
        L_0x0448:
            r0 = move-exception
            r13 = r24
        L_0x044b:
            r14 = r21
            goto L_0x0451
        L_0x044e:
            r0 = move-exception
            r14 = r13
            r13 = r1
        L_0x0451:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r12.dialogs
            r1.clear()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r1 = r12.users
            r1.clear()
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r1 = r12.chats
            r1.clear()
            r14.clear()
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
            org.telegram.messenger.MessagesController r2 = r24.getMessagesController()
            r6 = 0
            r7 = 100
            r8 = 1
            r9 = 1
            r10 = 0
            r11 = 1
            r3 = r12
            r4 = r14
            r5 = r25
            r2.processLoadedDialogs(r3, r4, r5, r6, r7, r8, r9, r10, r11)
        L_0x0478:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$getDialogs$152$MessagesStorage(int, int, int, long[]):void");
    }

    public /* synthetic */ void lambda$null$151$MessagesStorage(LongSparseArray longSparseArray) {
        MediaDataController mediaDataController = getMediaDataController();
        mediaDataController.clearDraftsFolderIds();
        if (longSparseArray != null) {
            int size = longSparseArray.size();
            for (int i = 0; i < size; i++) {
                mediaDataController.setDraftFolderId(longSparseArray.keyAt(i), ((Integer) longSparseArray.valueAt(i)).intValue());
            }
        }
    }

    public static void createFirstHoles(long j, SQLitePreparedStatement sQLitePreparedStatement, SQLitePreparedStatement sQLitePreparedStatement2, int i) throws Exception {
        sQLitePreparedStatement.requery();
        sQLitePreparedStatement.bindLong(1, j);
        sQLitePreparedStatement.bindInteger(2, i == 1 ? 1 : 0);
        sQLitePreparedStatement.bindInteger(3, i);
        sQLitePreparedStatement.step();
        for (int i2 = 0; i2 < 6; i2++) {
            sQLitePreparedStatement2.requery();
            sQLitePreparedStatement2.bindLong(1, j);
            sQLitePreparedStatement2.bindInteger(2, i2);
            sQLitePreparedStatement2.bindInteger(3, i == 1 ? 1 : 0);
            sQLitePreparedStatement2.bindInteger(4, i);
            sQLitePreparedStatement2.step();
        }
    }

    /* JADX WARNING: Removed duplicated region for block: B:46:0x018b A[Catch:{ Exception -> 0x033d }] */
    /* JADX WARNING: Removed duplicated region for block: B:47:0x0190 A[Catch:{ Exception -> 0x033d }] */
    /* JADX WARNING: Removed duplicated region for block: B:50:0x019a A[Catch:{ Exception -> 0x033d }] */
    /* JADX WARNING: Removed duplicated region for block: B:52:0x019e A[Catch:{ Exception -> 0x033d }] */
    /* JADX WARNING: Removed duplicated region for block: B:58:0x01ae A[Catch:{ Exception -> 0x033d }] */
    /* JADX WARNING: Removed duplicated region for block: B:59:0x01b0 A[Catch:{ Exception -> 0x033d }] */
    /* JADX WARNING: Removed duplicated region for block: B:62:0x01bf A[Catch:{ Exception -> 0x033d }] */
    /* JADX WARNING: Removed duplicated region for block: B:63:0x01e2 A[Catch:{ Exception -> 0x033d }] */
    /* JADX WARNING: Removed duplicated region for block: B:66:0x01ec A[Catch:{ Exception -> 0x033d }] */
    /* JADX WARNING: Removed duplicated region for block: B:71:0x020f A[Catch:{ Exception -> 0x033d }] */
    /* JADX WARNING: Removed duplicated region for block: B:72:0x0231 A[Catch:{ Exception -> 0x033d }] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    private void putDialogsInternal(org.telegram.tgnet.TLRPC$messages_Dialogs r24, int r25) {
        /*
            r23 = this;
            r7 = r23
            r0 = r24
            r8 = r25
            org.telegram.SQLite.SQLiteDatabase r1 = r7.database     // Catch:{ Exception -> 0x033d }
            r1.beginTransaction()     // Catch:{ Exception -> 0x033d }
            android.util.LongSparseArray r9 = new android.util.LongSparseArray     // Catch:{ Exception -> 0x033d }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r1 = r0.messages     // Catch:{ Exception -> 0x033d }
            int r1 = r1.size()     // Catch:{ Exception -> 0x033d }
            r9.<init>(r1)     // Catch:{ Exception -> 0x033d }
            r1 = 0
        L_0x0017:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r2 = r0.messages     // Catch:{ Exception -> 0x033d }
            int r2 = r2.size()     // Catch:{ Exception -> 0x033d }
            if (r1 >= r2) goto L_0x0031
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Message> r2 = r0.messages     // Catch:{ Exception -> 0x033d }
            java.lang.Object r2 = r2.get(r1)     // Catch:{ Exception -> 0x033d }
            org.telegram.tgnet.TLRPC$Message r2 = (org.telegram.tgnet.TLRPC$Message) r2     // Catch:{ Exception -> 0x033d }
            long r3 = org.telegram.messenger.MessageObject.getDialogId(r2)     // Catch:{ Exception -> 0x033d }
            r9.put(r3, r2)     // Catch:{ Exception -> 0x033d }
            int r1 = r1 + 1
            goto L_0x0017
        L_0x0031:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r1 = r0.dialogs     // Catch:{ Exception -> 0x033d }
            boolean r1 = r1.isEmpty()     // Catch:{ Exception -> 0x033d }
            if (r1 != 0) goto L_0x0327
            org.telegram.SQLite.SQLiteDatabase r1 = r7.database     // Catch:{ Exception -> 0x033d }
            java.lang.String r2 = "REPLACE INTO messages VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, NULL, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r11 = r1.executeFast(r2)     // Catch:{ Exception -> 0x033d }
            org.telegram.SQLite.SQLiteDatabase r1 = r7.database     // Catch:{ Exception -> 0x033d }
            java.lang.String r2 = "REPLACE INTO dialogs VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r12 = r1.executeFast(r2)     // Catch:{ Exception -> 0x033d }
            org.telegram.SQLite.SQLiteDatabase r1 = r7.database     // Catch:{ Exception -> 0x033d }
            java.lang.String r2 = "REPLACE INTO media_v2 VALUES(?, ?, ?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r13 = r1.executeFast(r2)     // Catch:{ Exception -> 0x033d }
            org.telegram.SQLite.SQLiteDatabase r1 = r7.database     // Catch:{ Exception -> 0x033d }
            java.lang.String r2 = "REPLACE INTO dialog_settings VALUES(?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r14 = r1.executeFast(r2)     // Catch:{ Exception -> 0x033d }
            org.telegram.SQLite.SQLiteDatabase r1 = r7.database     // Catch:{ Exception -> 0x033d }
            java.lang.String r2 = "REPLACE INTO messages_holes VALUES(?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r15 = r1.executeFast(r2)     // Catch:{ Exception -> 0x033d }
            org.telegram.SQLite.SQLiteDatabase r1 = r7.database     // Catch:{ Exception -> 0x033d }
            java.lang.String r2 = "REPLACE INTO media_holes_v2 VALUES(?, ?, ?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r6 = r1.executeFast(r2)     // Catch:{ Exception -> 0x033d }
            r16 = 0
            r1 = r16
            r5 = 0
        L_0x006e:
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r0.dialogs     // Catch:{ Exception -> 0x033d }
            int r2 = r2.size()     // Catch:{ Exception -> 0x033d }
            if (r5 >= r2) goto L_0x030d
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Dialog> r2 = r0.dialogs     // Catch:{ Exception -> 0x033d }
            java.lang.Object r2 = r2.get(r5)     // Catch:{ Exception -> 0x033d }
            r3 = r2
            org.telegram.tgnet.TLRPC$Dialog r3 = (org.telegram.tgnet.TLRPC$Dialog) r3     // Catch:{ Exception -> 0x033d }
            org.telegram.messenger.DialogObject.initDialog(r3)     // Catch:{ Exception -> 0x033d }
            android.util.LongSparseArray<java.lang.Boolean> r2 = r7.unknownDialogsIds     // Catch:{ Exception -> 0x033d }
            r17 = r11
            long r10 = r3.id     // Catch:{ Exception -> 0x033d }
            r2.remove(r10)     // Catch:{ Exception -> 0x033d }
            r11 = 1
            if (r8 != r11) goto L_0x00bd
            org.telegram.SQLite.SQLiteDatabase r2 = r7.database     // Catch:{ Exception -> 0x033d }
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x033d }
            r4.<init>()     // Catch:{ Exception -> 0x033d }
            java.lang.String r11 = "SELECT did FROM dialogs WHERE did = "
            r4.append(r11)     // Catch:{ Exception -> 0x033d }
            long r10 = r3.id     // Catch:{ Exception -> 0x033d }
            r4.append(r10)     // Catch:{ Exception -> 0x033d }
            java.lang.String r4 = r4.toString()     // Catch:{ Exception -> 0x033d }
            r10 = 0
            java.lang.Object[] r11 = new java.lang.Object[r10]     // Catch:{ Exception -> 0x033d }
            org.telegram.SQLite.SQLiteCursor r2 = r2.queryFinalized(r4, r11)     // Catch:{ Exception -> 0x033d }
            boolean r4 = r2.next()     // Catch:{ Exception -> 0x033d }
            r2.dispose()     // Catch:{ Exception -> 0x033d }
            if (r4 == 0) goto L_0x00f4
            r20 = r5
            r0 = r6
            r21 = r9
            r9 = r12
            r8 = r17
            goto L_0x0300
        L_0x00bd:
            r2 = 2
            if (r8 != r2) goto L_0x00f3
            org.telegram.SQLite.SQLiteDatabase r2 = r7.database     // Catch:{ Exception -> 0x033d }
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x033d }
            r4.<init>()     // Catch:{ Exception -> 0x033d }
            java.lang.String r10 = "SELECT pinned FROM dialogs WHERE did = "
            r4.append(r10)     // Catch:{ Exception -> 0x033d }
            long r10 = r3.id     // Catch:{ Exception -> 0x033d }
            r4.append(r10)     // Catch:{ Exception -> 0x033d }
            java.lang.String r4 = r4.toString()     // Catch:{ Exception -> 0x033d }
            r10 = 0
            java.lang.Object[] r11 = new java.lang.Object[r10]     // Catch:{ Exception -> 0x033d }
            org.telegram.SQLite.SQLiteCursor r2 = r2.queryFinalized(r4, r11)     // Catch:{ Exception -> 0x033d }
            boolean r4 = r2.next()     // Catch:{ Exception -> 0x033d }
            if (r4 == 0) goto L_0x00ee
            boolean r4 = r3.pinned     // Catch:{ Exception -> 0x033d }
            if (r4 == 0) goto L_0x00ec
            int r4 = r2.intValue(r10)     // Catch:{ Exception -> 0x033d }
            r3.pinnedNum = r4     // Catch:{ Exception -> 0x033d }
        L_0x00ec:
            r4 = 1
            goto L_0x00ef
        L_0x00ee:
            r4 = 0
        L_0x00ef:
            r2.dispose()     // Catch:{ Exception -> 0x033d }
            goto L_0x00f4
        L_0x00f3:
            r4 = 0
        L_0x00f4:
            long r10 = r3.id     // Catch:{ Exception -> 0x033d }
            java.lang.Object r2 = r9.get(r10)     // Catch:{ Exception -> 0x033d }
            r10 = r2
            org.telegram.tgnet.TLRPC$Message r10 = (org.telegram.tgnet.TLRPC$Message) r10     // Catch:{ Exception -> 0x033d }
            r18 = 32
            if (r10 == 0) goto L_0x0242
            int r2 = r10.date     // Catch:{ Exception -> 0x033d }
            r11 = 0
            int r19 = java.lang.Math.max(r2, r11)     // Catch:{ Exception -> 0x033d }
            boolean r2 = r7.isValidKeyboardToSave(r10)     // Catch:{ Exception -> 0x033d }
            if (r2 == 0) goto L_0x011b
            org.telegram.messenger.MediaDataController r2 = r23.getMediaDataController()     // Catch:{ Exception -> 0x033d }
            r20 = r5
            r11 = r6
            long r5 = r3.id     // Catch:{ Exception -> 0x033d }
            r2.putBotKeyboard(r5, r10)     // Catch:{ Exception -> 0x033d }
            goto L_0x011e
        L_0x011b:
            r20 = r5
            r11 = r6
        L_0x011e:
            r7.fixUnsupportedMedia(r10)     // Catch:{ Exception -> 0x033d }
            org.telegram.tgnet.NativeByteBuffer r2 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x033d }
            int r5 = r10.getObjectSize()     // Catch:{ Exception -> 0x033d }
            r2.<init>((int) r5)     // Catch:{ Exception -> 0x033d }
            r10.serializeToStream(r2)     // Catch:{ Exception -> 0x033d }
            int r5 = r10.id     // Catch:{ Exception -> 0x033d }
            long r5 = (long) r5     // Catch:{ Exception -> 0x033d }
            org.telegram.tgnet.TLRPC$Peer r8 = r10.to_id     // Catch:{ Exception -> 0x033d }
            int r8 = r8.channel_id     // Catch:{ Exception -> 0x033d }
            if (r8 == 0) goto L_0x0141
            org.telegram.tgnet.TLRPC$Peer r8 = r10.to_id     // Catch:{ Exception -> 0x033d }
            int r8 = r8.channel_id     // Catch:{ Exception -> 0x033d }
            r21 = r9
            long r8 = (long) r8     // Catch:{ Exception -> 0x033d }
            long r8 = r8 << r18
            long r5 = r5 | r8
            goto L_0x0143
        L_0x0141:
            r21 = r9
        L_0x0143:
            r17.requery()     // Catch:{ Exception -> 0x033d }
            r8 = r17
            r9 = 1
            r8.bindLong(r9, r5)     // Catch:{ Exception -> 0x033d }
            r17 = r11
            r9 = r12
            long r11 = r3.id     // Catch:{ Exception -> 0x033d }
            r0 = 2
            r8.bindLong(r0, r11)     // Catch:{ Exception -> 0x033d }
            int r0 = org.telegram.messenger.MessageObject.getUnreadFlags(r10)     // Catch:{ Exception -> 0x033d }
            r11 = 3
            r8.bindInteger(r11, r0)     // Catch:{ Exception -> 0x033d }
            int r0 = r10.send_state     // Catch:{ Exception -> 0x033d }
            r11 = 4
            r8.bindInteger(r11, r0)     // Catch:{ Exception -> 0x033d }
            int r0 = r10.date     // Catch:{ Exception -> 0x033d }
            r11 = 5
            r8.bindInteger(r11, r0)     // Catch:{ Exception -> 0x033d }
            r0 = 6
            r8.bindByteBuffer((int) r0, (org.telegram.tgnet.NativeByteBuffer) r2)     // Catch:{ Exception -> 0x033d }
            boolean r11 = org.telegram.messenger.MessageObject.isOut(r10)     // Catch:{ Exception -> 0x033d }
            if (r11 != 0) goto L_0x017a
            boolean r11 = r10.from_scheduled     // Catch:{ Exception -> 0x033d }
            if (r11 == 0) goto L_0x0178
            goto L_0x017a
        L_0x0178:
            r11 = 0
            goto L_0x017b
        L_0x017a:
            r11 = 1
        L_0x017b:
            r12 = 7
            r8.bindInteger(r12, r11)     // Catch:{ Exception -> 0x033d }
            r11 = 8
            r12 = 0
            r8.bindInteger(r11, r12)     // Catch:{ Exception -> 0x033d }
            int r12 = r10.flags     // Catch:{ Exception -> 0x033d }
            r12 = r12 & 1024(0x400, float:1.435E-42)
            if (r12 == 0) goto L_0x0190
            int r12 = r10.views     // Catch:{ Exception -> 0x033d }
            r0 = 9
            goto L_0x0193
        L_0x0190:
            r0 = 9
            r12 = 0
        L_0x0193:
            r8.bindInteger(r0, r12)     // Catch:{ Exception -> 0x033d }
            int r0 = r10.stickerVerified     // Catch:{ Exception -> 0x033d }
            if (r0 != 0) goto L_0x019e
            r0 = 1
        L_0x019b:
            r12 = 10
            goto L_0x01a7
        L_0x019e:
            int r0 = r10.stickerVerified     // Catch:{ Exception -> 0x033d }
            r12 = 2
            if (r0 != r12) goto L_0x01a5
            r0 = 2
            goto L_0x019b
        L_0x01a5:
            r0 = 0
            goto L_0x019b
        L_0x01a7:
            r8.bindInteger(r12, r0)     // Catch:{ Exception -> 0x033d }
            boolean r0 = r10.mentioned     // Catch:{ Exception -> 0x033d }
            if (r0 == 0) goto L_0x01b0
            r0 = 1
            goto L_0x01b1
        L_0x01b0:
            r0 = 0
        L_0x01b1:
            r11 = 11
            r8.bindInteger(r11, r0)     // Catch:{ Exception -> 0x033d }
            r8.step()     // Catch:{ Exception -> 0x033d }
            boolean r0 = org.telegram.messenger.MediaDataController.canAddMessageToMedia(r10)     // Catch:{ Exception -> 0x033d }
            if (r0 == 0) goto L_0x01e2
            r13.requery()     // Catch:{ Exception -> 0x033d }
            r0 = 1
            r13.bindLong(r0, r5)     // Catch:{ Exception -> 0x033d }
            long r11 = r3.id     // Catch:{ Exception -> 0x033d }
            r0 = 2
            r13.bindLong(r0, r11)     // Catch:{ Exception -> 0x033d }
            int r0 = r10.date     // Catch:{ Exception -> 0x033d }
            r11 = 3
            r13.bindInteger(r11, r0)     // Catch:{ Exception -> 0x033d }
            int r0 = org.telegram.messenger.MediaDataController.getMediaType(r10)     // Catch:{ Exception -> 0x033d }
            r11 = 4
            r13.bindInteger(r11, r0)     // Catch:{ Exception -> 0x033d }
            r0 = 5
            r13.bindByteBuffer((int) r0, (org.telegram.tgnet.NativeByteBuffer) r2)     // Catch:{ Exception -> 0x033d }
            r13.step()     // Catch:{ Exception -> 0x033d }
            goto L_0x01e3
        L_0x01e2:
            r11 = 4
        L_0x01e3:
            r2.reuse()     // Catch:{ Exception -> 0x033d }
            org.telegram.tgnet.TLRPC$MessageMedia r0 = r10.media     // Catch:{ Exception -> 0x033d }
            boolean r0 = r0 instanceof org.telegram.tgnet.TLRPC$TL_messageMediaPoll     // Catch:{ Exception -> 0x033d }
            if (r0 == 0) goto L_0x020c
            if (r1 != 0) goto L_0x01f6
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x033d }
            java.lang.String r1 = "REPLACE INTO polls VALUES(?, ?)"
            org.telegram.SQLite.SQLitePreparedStatement r1 = r0.executeFast(r1)     // Catch:{ Exception -> 0x033d }
        L_0x01f6:
            org.telegram.tgnet.TLRPC$MessageMedia r0 = r10.media     // Catch:{ Exception -> 0x033d }
            org.telegram.tgnet.TLRPC$TL_messageMediaPoll r0 = (org.telegram.tgnet.TLRPC$TL_messageMediaPoll) r0     // Catch:{ Exception -> 0x033d }
            r1.requery()     // Catch:{ Exception -> 0x033d }
            r2 = 1
            r1.bindLong(r2, r5)     // Catch:{ Exception -> 0x033d }
            org.telegram.tgnet.TLRPC$Poll r0 = r0.poll     // Catch:{ Exception -> 0x033d }
            long r5 = r0.id     // Catch:{ Exception -> 0x033d }
            r0 = 2
            r1.bindLong(r0, r5)     // Catch:{ Exception -> 0x033d }
            r1.step()     // Catch:{ Exception -> 0x033d }
        L_0x020c:
            r0 = r1
            if (r4 == 0) goto L_0x0231
            java.lang.String r2 = "messages_holes"
            long r4 = r3.id     // Catch:{ Exception -> 0x033d }
            int r6 = r10.id     // Catch:{ Exception -> 0x033d }
            int r12 = r10.id     // Catch:{ Exception -> 0x033d }
            r1 = r23
            r11 = r3
            r3 = r4
            r5 = r6
            r22 = r0
            r0 = r17
            r6 = r12
            r1.closeHolesInTable(r2, r3, r5, r6)     // Catch:{ Exception -> 0x033d }
            long r2 = r11.id     // Catch:{ Exception -> 0x033d }
            int r4 = r10.id     // Catch:{ Exception -> 0x033d }
            int r5 = r10.id     // Catch:{ Exception -> 0x033d }
            r6 = -1
            r1 = r23
            r1.closeHolesInMedia(r2, r4, r5, r6)     // Catch:{ Exception -> 0x033d }
            goto L_0x023d
        L_0x0231:
            r22 = r0
            r11 = r3
            r0 = r17
            long r1 = r11.id     // Catch:{ Exception -> 0x033d }
            int r3 = r10.id     // Catch:{ Exception -> 0x033d }
            createFirstHoles(r1, r15, r0, r3)     // Catch:{ Exception -> 0x033d }
        L_0x023d:
            r2 = r19
            r1 = r22
            goto L_0x024c
        L_0x0242:
            r11 = r3
            r20 = r5
            r0 = r6
            r21 = r9
            r9 = r12
            r8 = r17
            r2 = 0
        L_0x024c:
            int r3 = r11.top_message     // Catch:{ Exception -> 0x033d }
            long r3 = (long) r3     // Catch:{ Exception -> 0x033d }
            org.telegram.tgnet.TLRPC$Peer r5 = r11.peer     // Catch:{ Exception -> 0x033d }
            if (r5 == 0) goto L_0x0261
            org.telegram.tgnet.TLRPC$Peer r5 = r11.peer     // Catch:{ Exception -> 0x033d }
            int r5 = r5.channel_id     // Catch:{ Exception -> 0x033d }
            if (r5 == 0) goto L_0x0261
            org.telegram.tgnet.TLRPC$Peer r5 = r11.peer     // Catch:{ Exception -> 0x033d }
            int r5 = r5.channel_id     // Catch:{ Exception -> 0x033d }
            long r5 = (long) r5     // Catch:{ Exception -> 0x033d }
            long r5 = r5 << r18
            long r3 = r3 | r5
        L_0x0261:
            r9.requery()     // Catch:{ Exception -> 0x033d }
            long r5 = r11.id     // Catch:{ Exception -> 0x033d }
            r10 = 1
            r9.bindLong(r10, r5)     // Catch:{ Exception -> 0x033d }
            r5 = 2
            r9.bindInteger(r5, r2)     // Catch:{ Exception -> 0x033d }
            int r2 = r11.unread_count     // Catch:{ Exception -> 0x033d }
            r5 = 3
            r9.bindInteger(r5, r2)     // Catch:{ Exception -> 0x033d }
            r2 = 4
            r9.bindLong(r2, r3)     // Catch:{ Exception -> 0x033d }
            int r2 = r11.read_inbox_max_id     // Catch:{ Exception -> 0x033d }
            r3 = 5
            r9.bindInteger(r3, r2)     // Catch:{ Exception -> 0x033d }
            int r2 = r11.read_outbox_max_id     // Catch:{ Exception -> 0x033d }
            r3 = 6
            r9.bindInteger(r3, r2)     // Catch:{ Exception -> 0x033d }
            r2 = 0
            r4 = 7
            r9.bindLong(r4, r2)     // Catch:{ Exception -> 0x033d }
            int r2 = r11.unread_mentions_count     // Catch:{ Exception -> 0x033d }
            r3 = 8
            r9.bindInteger(r3, r2)     // Catch:{ Exception -> 0x033d }
            int r2 = r11.pts     // Catch:{ Exception -> 0x033d }
            r3 = 9
            r9.bindInteger(r3, r2)     // Catch:{ Exception -> 0x033d }
            r2 = 10
            r3 = 0
            r9.bindInteger(r2, r3)     // Catch:{ Exception -> 0x033d }
            int r2 = r11.pinnedNum     // Catch:{ Exception -> 0x033d }
            r3 = 11
            r9.bindInteger(r3, r2)     // Catch:{ Exception -> 0x033d }
            boolean r2 = r11.unread_mark     // Catch:{ Exception -> 0x033d }
            if (r2 == 0) goto L_0x02ab
            r10 = 1
            goto L_0x02ac
        L_0x02ab:
            r10 = 0
        L_0x02ac:
            r2 = 12
            r9.bindInteger(r2, r10)     // Catch:{ Exception -> 0x033d }
            r2 = 13
            int r3 = r11.folder_id     // Catch:{ Exception -> 0x033d }
            r9.bindInteger(r2, r3)     // Catch:{ Exception -> 0x033d }
            boolean r2 = r11 instanceof org.telegram.tgnet.TLRPC$TL_dialogFolder     // Catch:{ Exception -> 0x033d }
            r3 = 14
            if (r2 == 0) goto L_0x02d5
            r2 = r11
            org.telegram.tgnet.TLRPC$TL_dialogFolder r2 = (org.telegram.tgnet.TLRPC$TL_dialogFolder) r2     // Catch:{ Exception -> 0x033d }
            org.telegram.tgnet.NativeByteBuffer r4 = new org.telegram.tgnet.NativeByteBuffer     // Catch:{ Exception -> 0x033d }
            org.telegram.tgnet.TLRPC$TL_folder r5 = r2.folder     // Catch:{ Exception -> 0x033d }
            int r5 = r5.getObjectSize()     // Catch:{ Exception -> 0x033d }
            r4.<init>((int) r5)     // Catch:{ Exception -> 0x033d }
            org.telegram.tgnet.TLRPC$TL_folder r2 = r2.folder     // Catch:{ Exception -> 0x033d }
            r2.serializeToStream(r4)     // Catch:{ Exception -> 0x033d }
            r9.bindByteBuffer((int) r3, (org.telegram.tgnet.NativeByteBuffer) r4)     // Catch:{ Exception -> 0x033d }
            goto L_0x02da
        L_0x02d5:
            r9.bindNull(r3)     // Catch:{ Exception -> 0x033d }
            r4 = r16
        L_0x02da:
            r9.step()     // Catch:{ Exception -> 0x033d }
            if (r4 == 0) goto L_0x02e2
            r4.reuse()     // Catch:{ Exception -> 0x033d }
        L_0x02e2:
            org.telegram.tgnet.TLRPC$PeerNotifySettings r2 = r11.notify_settings     // Catch:{ Exception -> 0x033d }
            if (r2 == 0) goto L_0x0300
            r14.requery()     // Catch:{ Exception -> 0x033d }
            long r2 = r11.id     // Catch:{ Exception -> 0x033d }
            r4 = 1
            r14.bindLong(r4, r2)     // Catch:{ Exception -> 0x033d }
            org.telegram.tgnet.TLRPC$PeerNotifySettings r2 = r11.notify_settings     // Catch:{ Exception -> 0x033d }
            int r2 = r2.mute_until     // Catch:{ Exception -> 0x033d }
            if (r2 == 0) goto L_0x02f8
            r2 = 2
            r11 = 1
            goto L_0x02fa
        L_0x02f8:
            r2 = 2
            r11 = 0
        L_0x02fa:
            r14.bindInteger(r2, r11)     // Catch:{ Exception -> 0x033d }
            r14.step()     // Catch:{ Exception -> 0x033d }
        L_0x0300:
            int r5 = r20 + 1
            r6 = r0
            r11 = r8
            r12 = r9
            r9 = r21
            r0 = r24
            r8 = r25
            goto L_0x006e
        L_0x030d:
            r0 = r6
            r8 = r11
            r9 = r12
            r8.dispose()     // Catch:{ Exception -> 0x033d }
            r9.dispose()     // Catch:{ Exception -> 0x033d }
            r13.dispose()     // Catch:{ Exception -> 0x033d }
            r14.dispose()     // Catch:{ Exception -> 0x033d }
            r15.dispose()     // Catch:{ Exception -> 0x033d }
            r0.dispose()     // Catch:{ Exception -> 0x033d }
            if (r1 == 0) goto L_0x0327
            r1.dispose()     // Catch:{ Exception -> 0x033d }
        L_0x0327:
            r0 = r24
            java.util.ArrayList<org.telegram.tgnet.TLRPC$User> r1 = r0.users     // Catch:{ Exception -> 0x033d }
            r7.putUsersInternal(r1)     // Catch:{ Exception -> 0x033d }
            java.util.ArrayList<org.telegram.tgnet.TLRPC$Chat> r0 = r0.chats     // Catch:{ Exception -> 0x033d }
            r7.putChatsInternal(r0)     // Catch:{ Exception -> 0x033d }
            org.telegram.SQLite.SQLiteDatabase r0 = r7.database     // Catch:{ Exception -> 0x033d }
            r0.commitTransaction()     // Catch:{ Exception -> 0x033d }
            r0 = 0
            r7.resetAllUnreadCounters(r0)     // Catch:{ Exception -> 0x033d }
            goto L_0x0341
        L_0x033d:
            r0 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r0)
        L_0x0341:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.putDialogsInternal(org.telegram.tgnet.TLRPC$messages_Dialogs, int):void");
    }

    public void getDialogFolderId(long j, IntCallback intCallback) {
        this.storageQueue.postRunnable(new Runnable(j, intCallback) {
            public final /* synthetic */ long f$1;
            public final /* synthetic */ MessagesStorage.IntCallback f$2;

            {
                this.f$1 = r2;
                this.f$2 = r4;
            }

            public final void run() {
                MessagesStorage.this.lambda$getDialogFolderId$154$MessagesStorage(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$getDialogFolderId$154$MessagesStorage(long j, IntCallback intCallback) {
        try {
            int i = -1;
            if (this.unknownDialogsIds.get(j) == null) {
                SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT folder_id FROM dialogs WHERE did = ?", Long.valueOf(j));
                if (queryFinalized.next()) {
                    i = queryFinalized.intValue(0);
                }
                queryFinalized.dispose();
            }
            AndroidUtilities.runOnUIThread(new Runnable(i) {
                public final /* synthetic */ int f$1;

                {
                    this.f$1 = r2;
                }

                public final void run() {
                    MessagesStorage.IntCallback.this.run(this.f$1);
                }
            });
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void setDialogsFolderId(ArrayList<TLRPC$TL_folderPeer> arrayList, ArrayList<TLRPC$TL_inputFolderPeer> arrayList2, long j, int i) {
        if (arrayList != null || arrayList2 != null || j != 0) {
            this.storageQueue.postRunnable(new Runnable(arrayList, arrayList2, i, j) {
                public final /* synthetic */ ArrayList f$1;
                public final /* synthetic */ ArrayList f$2;
                public final /* synthetic */ int f$3;
                public final /* synthetic */ long f$4;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                    this.f$3 = r4;
                    this.f$4 = r5;
                }

                public final void run() {
                    MessagesStorage.this.lambda$setDialogsFolderId$155$MessagesStorage(this.f$1, this.f$2, this.f$3, this.f$4);
                }
            });
        }
    }

    public /* synthetic */ void lambda$setDialogsFolderId$155$MessagesStorage(ArrayList arrayList, ArrayList arrayList2, int i, long j) {
        try {
            this.database.beginTransaction();
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE dialogs SET folder_id = ?, pinned = ? WHERE did = ?");
            if (arrayList != null) {
                int size = arrayList.size();
                for (int i2 = 0; i2 < size; i2++) {
                    TLRPC$TL_folderPeer tLRPC$TL_folderPeer = (TLRPC$TL_folderPeer) arrayList.get(i2);
                    long peerDialogId = DialogObject.getPeerDialogId(tLRPC$TL_folderPeer.peer);
                    executeFast.requery();
                    executeFast.bindInteger(1, tLRPC$TL_folderPeer.folder_id);
                    executeFast.bindInteger(2, 0);
                    executeFast.bindLong(3, peerDialogId);
                    executeFast.step();
                    this.unknownDialogsIds.remove(peerDialogId);
                }
            } else if (arrayList2 != null) {
                int size2 = arrayList2.size();
                for (int i3 = 0; i3 < size2; i3++) {
                    TLRPC$TL_inputFolderPeer tLRPC$TL_inputFolderPeer = (TLRPC$TL_inputFolderPeer) arrayList2.get(i3);
                    long peerDialogId2 = DialogObject.getPeerDialogId(tLRPC$TL_inputFolderPeer.peer);
                    executeFast.requery();
                    executeFast.bindInteger(1, tLRPC$TL_inputFolderPeer.folder_id);
                    executeFast.bindInteger(2, 0);
                    executeFast.bindLong(3, peerDialogId2);
                    executeFast.step();
                    this.unknownDialogsIds.remove(peerDialogId2);
                }
            } else {
                executeFast.requery();
                executeFast.bindInteger(1, i);
                executeFast.bindInteger(2, 0);
                executeFast.bindLong(3, j);
                executeFast.step();
            }
            executeFast.dispose();
            this.database.commitTransaction();
            lambda$checkIfFolderEmpty$157$MessagesStorage(1);
            resetAllUnreadCounters(false);
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    /* access modifiers changed from: private */
    /* renamed from: checkIfFolderEmptyInternal */
    public void lambda$checkIfFolderEmpty$157$MessagesStorage(int i) {
        try {
            SQLiteCursor queryFinalized = this.database.queryFinalized("SELECT did FROM dialogs WHERE folder_id = ?", Integer.valueOf(i));
            if (!queryFinalized.next()) {
                AndroidUtilities.runOnUIThread(new Runnable(i) {
                    public final /* synthetic */ int f$1;

                    {
                        this.f$1 = r2;
                    }

                    public final void run() {
                        MessagesStorage.this.lambda$checkIfFolderEmptyInternal$156$MessagesStorage(this.f$1);
                    }
                });
                SQLiteDatabase sQLiteDatabase = this.database;
                sQLiteDatabase.executeFast("DELETE FROM dialogs WHERE did = " + DialogObject.makeFolderDialogId(i)).stepThis().dispose();
            }
            queryFinalized.dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public /* synthetic */ void lambda$checkIfFolderEmptyInternal$156$MessagesStorage(int i) {
        getMessagesController().onFolderEmpty(i);
    }

    public void checkIfFolderEmpty(int i) {
        this.storageQueue.postRunnable(new Runnable(i) {
            public final /* synthetic */ int f$1;

            {
                this.f$1 = r2;
            }

            public final void run() {
                MessagesStorage.this.lambda$checkIfFolderEmpty$157$MessagesStorage(this.f$1);
            }
        });
    }

    public void unpinAllDialogsExceptNew(ArrayList<Long> arrayList, int i) {
        this.storageQueue.postRunnable(new Runnable(arrayList, i) {
            public final /* synthetic */ ArrayList f$1;
            public final /* synthetic */ int f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesStorage.this.lambda$unpinAllDialogsExceptNew$158$MessagesStorage(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$unpinAllDialogsExceptNew$158$MessagesStorage(ArrayList arrayList, int i) {
        try {
            ArrayList arrayList2 = new ArrayList();
            SQLiteCursor queryFinalized = this.database.queryFinalized(String.format(Locale.US, "SELECT did, folder_id FROM dialogs WHERE pinned > 0 AND did NOT IN (%s)", new Object[]{TextUtils.join(",", arrayList)}), new Object[0]);
            while (queryFinalized.next()) {
                long longValue = queryFinalized.longValue(0);
                if (queryFinalized.intValue(1) == i && ((int) longValue) != 0 && !DialogObject.isFolderDialogId(longValue)) {
                    arrayList2.add(Long.valueOf(queryFinalized.longValue(0)));
                }
            }
            queryFinalized.dispose();
            if (!arrayList2.isEmpty()) {
                SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE dialogs SET pinned = ? WHERE did = ?");
                for (int i2 = 0; i2 < arrayList2.size(); i2++) {
                    long longValue2 = ((Long) arrayList2.get(i2)).longValue();
                    executeFast.requery();
                    executeFast.bindInteger(1, 0);
                    executeFast.bindLong(2, longValue2);
                    executeFast.step();
                }
                executeFast.dispose();
            }
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void setDialogUnread(long j, boolean z) {
        this.storageQueue.postRunnable(new Runnable(j, z) {
            public final /* synthetic */ long f$1;
            public final /* synthetic */ boolean f$2;

            {
                this.f$1 = r2;
                this.f$2 = r4;
            }

            public final void run() {
                MessagesStorage.this.lambda$setDialogUnread$159$MessagesStorage(this.f$1, this.f$2);
            }
        });
    }

    /* JADX WARNING: Code restructure failed: missing block: B:16:0x0039, code lost:
        r6 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:24:0x005d, code lost:
        if (r1 != null) goto L_0x005f;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:25:0x005f, code lost:
        r1.dispose();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:26:0x0062, code lost:
        throw r6;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:27:0x0063, code lost:
        org.telegram.messenger.FileLog.e((java.lang.Throwable) r6);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:28:?, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:9:0x002d, code lost:
        r6 = move-exception;
     */
    /* JADX WARNING: Exception block dominator not found, dom blocks: [B:7:0x0029, B:11:0x0030] */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$setDialogUnread$159$MessagesStorage(long r6, boolean r8) {
        /*
            r5 = this;
            r0 = 0
            r1 = 0
            org.telegram.SQLite.SQLiteDatabase r2 = r5.database     // Catch:{ Exception -> 0x002f }
            java.lang.StringBuilder r3 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x002f }
            r3.<init>()     // Catch:{ Exception -> 0x002f }
            java.lang.String r4 = "SELECT flags FROM dialogs WHERE did = "
            r3.append(r4)     // Catch:{ Exception -> 0x002f }
            r3.append(r6)     // Catch:{ Exception -> 0x002f }
            java.lang.String r3 = r3.toString()     // Catch:{ Exception -> 0x002f }
            java.lang.Object[] r4 = new java.lang.Object[r0]     // Catch:{ Exception -> 0x002f }
            org.telegram.SQLite.SQLiteCursor r1 = r2.queryFinalized(r3, r4)     // Catch:{ Exception -> 0x002f }
            boolean r2 = r1.next()     // Catch:{ Exception -> 0x002f }
            if (r2 == 0) goto L_0x0026
            int r2 = r1.intValue(r0)     // Catch:{ Exception -> 0x002f }
            goto L_0x0027
        L_0x0026:
            r2 = 0
        L_0x0027:
            if (r1 == 0) goto L_0x003c
            r1.dispose()     // Catch:{ Exception -> 0x0039 }
            goto L_0x003c
        L_0x002d:
            r6 = move-exception
            goto L_0x005d
        L_0x002f:
            r2 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r2)     // Catch:{ all -> 0x002d }
            if (r1 == 0) goto L_0x003b
            r1.dispose()     // Catch:{ Exception -> 0x0039 }
            goto L_0x003b
        L_0x0039:
            r6 = move-exception
            goto L_0x0063
        L_0x003b:
            r2 = 0
        L_0x003c:
            r1 = 1
            if (r8 == 0) goto L_0x0042
            r8 = r2 | 1
            goto L_0x0044
        L_0x0042:
            r8 = r2 & -2
        L_0x0044:
            org.telegram.SQLite.SQLiteDatabase r2 = r5.database     // Catch:{ Exception -> 0x0039 }
            java.lang.String r3 = "UPDATE dialogs SET flags = ? WHERE did = ?"
            org.telegram.SQLite.SQLitePreparedStatement r2 = r2.executeFast(r3)     // Catch:{ Exception -> 0x0039 }
            r2.bindInteger(r1, r8)     // Catch:{ Exception -> 0x0039 }
            r8 = 2
            r2.bindLong(r8, r6)     // Catch:{ Exception -> 0x0039 }
            r2.step()     // Catch:{ Exception -> 0x0039 }
            r2.dispose()     // Catch:{ Exception -> 0x0039 }
            r5.resetAllUnreadCounters(r0)     // Catch:{ Exception -> 0x0039 }
            goto L_0x0066
        L_0x005d:
            if (r1 == 0) goto L_0x0062
            r1.dispose()     // Catch:{ Exception -> 0x0039 }
        L_0x0062:
            throw r6     // Catch:{ Exception -> 0x0039 }
        L_0x0063:
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r6)
        L_0x0066:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$setDialogUnread$159$MessagesStorage(long, boolean):void");
    }

    private void resetAllUnreadCounters(boolean z) {
        int size = this.dialogFilters.size();
        for (int i = 0; i < size; i++) {
            MessagesController.DialogFilter dialogFilter = this.dialogFilters.get(i);
            if (!z) {
                dialogFilter.pendingUnreadCount = -1;
            } else if ((dialogFilter.flags & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED) != 0) {
                dialogFilter.pendingUnreadCount = -1;
            }
        }
        calcUnreadCounters(false);
        AndroidUtilities.runOnUIThread(new Runnable() {
            public final void run() {
                MessagesStorage.this.lambda$resetAllUnreadCounters$160$MessagesStorage();
            }
        });
    }

    public /* synthetic */ void lambda$resetAllUnreadCounters$160$MessagesStorage() {
        ArrayList<MessagesController.DialogFilter> arrayList = getMessagesController().dialogFilters;
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            arrayList.get(i).unreadCount = arrayList.get(i).pendingUnreadCount;
        }
        this.mainUnreadCount = this.pendingMainUnreadCount;
        this.archiveUnreadCount = this.pendingArchiveUnreadCount;
        getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces, 256);
    }

    public void setDialogPinned(long j, int i) {
        this.storageQueue.postRunnable(new Runnable(i, j) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ long f$2;

            {
                this.f$1 = r2;
                this.f$2 = r3;
            }

            public final void run() {
                MessagesStorage.this.lambda$setDialogPinned$161$MessagesStorage(this.f$1, this.f$2);
            }
        });
    }

    public /* synthetic */ void lambda$setDialogPinned$161$MessagesStorage(int i, long j) {
        try {
            SQLitePreparedStatement executeFast = this.database.executeFast("UPDATE dialogs SET pinned = ? WHERE did = ?");
            executeFast.bindInteger(1, i);
            executeFast.bindLong(2, j);
            executeFast.step();
            executeFast.dispose();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public void putDialogs(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, int i) {
        if (!tLRPC$messages_Dialogs.dialogs.isEmpty()) {
            this.storageQueue.postRunnable(new Runnable(tLRPC$messages_Dialogs, i) {
                public final /* synthetic */ TLRPC$messages_Dialogs f$1;
                public final /* synthetic */ int f$2;

                {
                    this.f$1 = r2;
                    this.f$2 = r3;
                }

                public final void run() {
                    MessagesStorage.this.lambda$putDialogs$162$MessagesStorage(this.f$1, this.f$2);
                }
            });
        }
    }

    public /* synthetic */ void lambda$putDialogs$162$MessagesStorage(TLRPC$messages_Dialogs tLRPC$messages_Dialogs, int i) {
        putDialogsInternal(tLRPC$messages_Dialogs, i);
        try {
            loadUnreadMessages();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
    }

    public int getDialogMaxMessageId(long j) {
        CountDownLatch countDownLatch = new CountDownLatch(1);
        Integer[] numArr = {0};
        this.storageQueue.postRunnable(new Runnable(j, numArr, countDownLatch) {
            public final /* synthetic */ long f$1;
            public final /* synthetic */ Integer[] f$2;
            public final /* synthetic */ CountDownLatch f$3;

            {
                this.f$1 = r2;
                this.f$2 = r4;
                this.f$3 = r5;
            }

            public final void run() {
                MessagesStorage.this.lambda$getDialogMaxMessageId$163$MessagesStorage(this.f$1, this.f$2, this.f$3);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        return numArr[0].intValue();
    }

    /* JADX WARNING: Code restructure failed: missing block: B:10:0x0034, code lost:
        if (r0 == null) goto L_0x0039;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:11:0x0036, code lost:
        r0.dispose();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:12:0x0039, code lost:
        r8.countDown();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:13:0x003c, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:5:0x002b, code lost:
        if (r0 != null) goto L_0x0036;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$getDialogMaxMessageId$163$MessagesStorage(long r5, java.lang.Integer[] r7, java.util.concurrent.CountDownLatch r8) {
        /*
            r4 = this;
            r0 = 0
            org.telegram.SQLite.SQLiteDatabase r1 = r4.database     // Catch:{ Exception -> 0x0030 }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0030 }
            r2.<init>()     // Catch:{ Exception -> 0x0030 }
            java.lang.String r3 = "SELECT MAX(mid) FROM messages WHERE uid = "
            r2.append(r3)     // Catch:{ Exception -> 0x0030 }
            r2.append(r5)     // Catch:{ Exception -> 0x0030 }
            java.lang.String r5 = r2.toString()     // Catch:{ Exception -> 0x0030 }
            r6 = 0
            java.lang.Object[] r2 = new java.lang.Object[r6]     // Catch:{ Exception -> 0x0030 }
            org.telegram.SQLite.SQLiteCursor r0 = r1.queryFinalized(r5, r2)     // Catch:{ Exception -> 0x0030 }
            boolean r5 = r0.next()     // Catch:{ Exception -> 0x0030 }
            if (r5 == 0) goto L_0x002b
            int r5 = r0.intValue(r6)     // Catch:{ Exception -> 0x0030 }
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)     // Catch:{ Exception -> 0x0030 }
            r7[r6] = r5     // Catch:{ Exception -> 0x0030 }
        L_0x002b:
            if (r0 == 0) goto L_0x0039
            goto L_0x0036
        L_0x002e:
            r5 = move-exception
            goto L_0x003d
        L_0x0030:
            r5 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r5)     // Catch:{ all -> 0x002e }
            if (r0 == 0) goto L_0x0039
        L_0x0036:
            r0.dispose()
        L_0x0039:
            r8.countDown()
            return
        L_0x003d:
            if (r0 == 0) goto L_0x0042
            r0.dispose()
        L_0x0042:
            throw r5
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$getDialogMaxMessageId$163$MessagesStorage(long, java.lang.Integer[], java.util.concurrent.CountDownLatch):void");
    }

    public int getDialogReadMax(boolean z, long j) {
        CountDownLatch countDownLatch = new CountDownLatch(1);
        Integer[] numArr = {0};
        this.storageQueue.postRunnable(new Runnable(z, j, numArr, countDownLatch) {
            public final /* synthetic */ boolean f$1;
            public final /* synthetic */ long f$2;
            public final /* synthetic */ Integer[] f$3;
            public final /* synthetic */ CountDownLatch f$4;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r5;
                this.f$4 = r6;
            }

            public final void run() {
                MessagesStorage.this.lambda$getDialogReadMax$164$MessagesStorage(this.f$1, this.f$2, this.f$3, this.f$4);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        return numArr[0].intValue();
    }

    /* JADX WARNING: Code restructure failed: missing block: B:13:0x0051, code lost:
        if (r1 == null) goto L_0x0056;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:14:0x0053, code lost:
        r1.dispose();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:15:0x0056, code lost:
        r9.countDown();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:16:0x0059, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:8:0x0048, code lost:
        if (r1 != null) goto L_0x0053;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$getDialogReadMax$164$MessagesStorage(boolean r5, long r6, java.lang.Integer[] r8, java.util.concurrent.CountDownLatch r9) {
        /*
            r4 = this;
            r0 = 0
            r1 = 0
            if (r5 == 0) goto L_0x001e
            org.telegram.SQLite.SQLiteDatabase r5 = r4.database     // Catch:{ Exception -> 0x004d }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x004d }
            r2.<init>()     // Catch:{ Exception -> 0x004d }
            java.lang.String r3 = "SELECT outbox_max FROM dialogs WHERE did = "
            r2.append(r3)     // Catch:{ Exception -> 0x004d }
            r2.append(r6)     // Catch:{ Exception -> 0x004d }
            java.lang.String r6 = r2.toString()     // Catch:{ Exception -> 0x004d }
            java.lang.Object[] r7 = new java.lang.Object[r0]     // Catch:{ Exception -> 0x004d }
            org.telegram.SQLite.SQLiteCursor r5 = r5.queryFinalized(r6, r7)     // Catch:{ Exception -> 0x004d }
            goto L_0x0037
        L_0x001e:
            org.telegram.SQLite.SQLiteDatabase r5 = r4.database     // Catch:{ Exception -> 0x004d }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x004d }
            r2.<init>()     // Catch:{ Exception -> 0x004d }
            java.lang.String r3 = "SELECT inbox_max FROM dialogs WHERE did = "
            r2.append(r3)     // Catch:{ Exception -> 0x004d }
            r2.append(r6)     // Catch:{ Exception -> 0x004d }
            java.lang.String r6 = r2.toString()     // Catch:{ Exception -> 0x004d }
            java.lang.Object[] r7 = new java.lang.Object[r0]     // Catch:{ Exception -> 0x004d }
            org.telegram.SQLite.SQLiteCursor r5 = r5.queryFinalized(r6, r7)     // Catch:{ Exception -> 0x004d }
        L_0x0037:
            r1 = r5
            boolean r5 = r1.next()     // Catch:{ Exception -> 0x004d }
            if (r5 == 0) goto L_0x0048
            int r5 = r1.intValue(r0)     // Catch:{ Exception -> 0x004d }
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)     // Catch:{ Exception -> 0x004d }
            r8[r0] = r5     // Catch:{ Exception -> 0x004d }
        L_0x0048:
            if (r1 == 0) goto L_0x0056
            goto L_0x0053
        L_0x004b:
            r5 = move-exception
            goto L_0x005a
        L_0x004d:
            r5 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r5)     // Catch:{ all -> 0x004b }
            if (r1 == 0) goto L_0x0056
        L_0x0053:
            r1.dispose()
        L_0x0056:
            r9.countDown()
            return
        L_0x005a:
            if (r1 == 0) goto L_0x005f
            r1.dispose()
        L_0x005f:
            throw r5
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$getDialogReadMax$164$MessagesStorage(boolean, long, java.lang.Integer[], java.util.concurrent.CountDownLatch):void");
    }

    public int getChannelPtsSync(int i) {
        CountDownLatch countDownLatch = new CountDownLatch(1);
        Integer[] numArr = {0};
        this.storageQueue.postRunnable(new Runnable(i, numArr, countDownLatch) {
            public final /* synthetic */ int f$1;
            public final /* synthetic */ Integer[] f$2;
            public final /* synthetic */ CountDownLatch f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesStorage.this.lambda$getChannelPtsSync$165$MessagesStorage(this.f$1, this.f$2, this.f$3);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        return numArr[0].intValue();
    }

    /* JADX WARNING: Code restructure failed: missing block: B:10:0x0035, code lost:
        if (r0 == null) goto L_0x003a;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:11:0x0037, code lost:
        r0.dispose();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:12:0x003a, code lost:
        if (r7 == null) goto L_?;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:14:?, code lost:
        r7.countDown();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:15:0x0040, code lost:
        r5 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:16:0x0041, code lost:
        org.telegram.messenger.FileLog.e((java.lang.Throwable) r5);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:20:?, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:21:?, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:22:?, code lost:
        return;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:5:0x002c, code lost:
        if (r0 != null) goto L_0x0037;
     */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public /* synthetic */ void lambda$getChannelPtsSync$165$MessagesStorage(int r5, java.lang.Integer[] r6, java.util.concurrent.CountDownLatch r7) {
        /*
            r4 = this;
            r0 = 0
            org.telegram.SQLite.SQLiteDatabase r1 = r4.database     // Catch:{ Exception -> 0x0031 }
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ Exception -> 0x0031 }
            r2.<init>()     // Catch:{ Exception -> 0x0031 }
            java.lang.String r3 = "SELECT pts FROM dialogs WHERE did = "
            r2.append(r3)     // Catch:{ Exception -> 0x0031 }
            int r5 = -r5
            r2.append(r5)     // Catch:{ Exception -> 0x0031 }
            java.lang.String r5 = r2.toString()     // Catch:{ Exception -> 0x0031 }
            r2 = 0
            java.lang.Object[] r3 = new java.lang.Object[r2]     // Catch:{ Exception -> 0x0031 }
            org.telegram.SQLite.SQLiteCursor r0 = r1.queryFinalized(r5, r3)     // Catch:{ Exception -> 0x0031 }
            boolean r5 = r0.next()     // Catch:{ Exception -> 0x0031 }
            if (r5 == 0) goto L_0x002c
            int r5 = r0.intValue(r2)     // Catch:{ Exception -> 0x0031 }
            java.lang.Integer r5 = java.lang.Integer.valueOf(r5)     // Catch:{ Exception -> 0x0031 }
            r6[r2] = r5     // Catch:{ Exception -> 0x0031 }
        L_0x002c:
            if (r0 == 0) goto L_0x003a
            goto L_0x0037
        L_0x002f:
            r5 = move-exception
            goto L_0x0045
        L_0x0031:
            r5 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r5)     // Catch:{ all -> 0x002f }
            if (r0 == 0) goto L_0x003a
        L_0x0037:
            r0.dispose()
        L_0x003a:
            if (r7 == 0) goto L_0x0044
            r7.countDown()     // Catch:{ Exception -> 0x0040 }
            goto L_0x0044
        L_0x0040:
            r5 = move-exception
            org.telegram.messenger.FileLog.e((java.lang.Throwable) r5)
        L_0x0044:
            return
        L_0x0045:
            if (r0 == 0) goto L_0x004a
            r0.dispose()
        L_0x004a:
            throw r5
        */
        throw new UnsupportedOperationException("Method not decompiled: org.telegram.messenger.MessagesStorage.lambda$getChannelPtsSync$165$MessagesStorage(int, java.lang.Integer[], java.util.concurrent.CountDownLatch):void");
    }

    public TLRPC$User getUserSync(int i) {
        CountDownLatch countDownLatch = new CountDownLatch(1);
        TLRPC$User[] tLRPC$UserArr = new TLRPC$User[1];
        this.storageQueue.postRunnable(new Runnable(tLRPC$UserArr, i, countDownLatch) {
            public final /* synthetic */ TLRPC$User[] f$1;
            public final /* synthetic */ int f$2;
            public final /* synthetic */ CountDownLatch f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesStorage.this.lambda$getUserSync$166$MessagesStorage(this.f$1, this.f$2, this.f$3);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        return tLRPC$UserArr[0];
    }

    public /* synthetic */ void lambda$getUserSync$166$MessagesStorage(TLRPC$User[] tLRPC$UserArr, int i, CountDownLatch countDownLatch) {
        tLRPC$UserArr[0] = getUser(i);
        countDownLatch.countDown();
    }

    public TLRPC$Chat getChatSync(int i) {
        CountDownLatch countDownLatch = new CountDownLatch(1);
        TLRPC$Chat[] tLRPC$ChatArr = new TLRPC$Chat[1];
        this.storageQueue.postRunnable(new Runnable(tLRPC$ChatArr, i, countDownLatch) {
            public final /* synthetic */ TLRPC$Chat[] f$1;
            public final /* synthetic */ int f$2;
            public final /* synthetic */ CountDownLatch f$3;

            {
                this.f$1 = r2;
                this.f$2 = r3;
                this.f$3 = r4;
            }

            public final void run() {
                MessagesStorage.this.lambda$getChatSync$167$MessagesStorage(this.f$1, this.f$2, this.f$3);
            }
        });
        try {
            countDownLatch.await();
        } catch (Exception e) {
            FileLog.e((Throwable) e);
        }
        return tLRPC$ChatArr[0];
    }

    public /* synthetic */ void lambda$getChatSync$167$MessagesStorage(TLRPC$Chat[] tLRPC$ChatArr, int i, CountDownLatch countDownLatch) {
        tLRPC$ChatArr[0] = getChat(i);
        countDownLatch.countDown();
    }

    public TLRPC$User getUser(int i) {
        try {
            ArrayList arrayList = new ArrayList();
            getUsersInternal("" + i, arrayList);
            if (!arrayList.isEmpty()) {
                return (TLRPC$User) arrayList.get(0);
            }
            return null;
        } catch (Exception e) {
            FileLog.e((Throwable) e);
            return null;
        }
    }

    public ArrayList<TLRPC$User> getUsers(ArrayList<Integer> arrayList) {
        ArrayList<TLRPC$User> arrayList2 = new ArrayList<>();
        try {
            getUsersInternal(TextUtils.join(",", arrayList), arrayList2);
        } catch (Exception e) {
            arrayList2.clear();
            FileLog.e((Throwable) e);
        }
        return arrayList2;
    }

    public TLRPC$Chat getChat(int i) {
        try {
            ArrayList arrayList = new ArrayList();
            getChatsInternal("" + i, arrayList);
            if (!arrayList.isEmpty()) {
                return (TLRPC$Chat) arrayList.get(0);
            }
            return null;
        } catch (Exception e) {
            FileLog.e((Throwable) e);
            return null;
        }
    }

    public TLRPC$EncryptedChat getEncryptedChat(int i) {
        try {
            ArrayList arrayList = new ArrayList();
            getEncryptedChatsInternal("" + i, arrayList, (ArrayList<Integer>) null);
            if (!arrayList.isEmpty()) {
                return (TLRPC$EncryptedChat) arrayList.get(0);
            }
            return null;
        } catch (Exception e) {
            FileLog.e((Throwable) e);
            return null;
        }
    }
}
